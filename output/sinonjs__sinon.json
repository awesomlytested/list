{"repo":"sinonjs/sinon","url":"https://github.com/sinonjs/sinon","branch":"master","configs":[{"package":"sinon","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should fail with non-function fake","suites":[],"updatePoint":{"line":21,"column":40,"index":478},"line":21,"code":"  it(\"should fail with non-function fake\", function () {\n    assert.exception(function () {\n      sinonAssert[method]({});\n    });\n  });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"is object","suites":["assert"],"updatePoint":{"line":43,"column":15,"index":1001},"line":43,"code":"  it(\"is object\", function () {\n    assert.isObject(sinonAssert);\n  });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"supports proxy property","suites":["assert"],"updatePoint":{"line":46,"column":29,"index":1087},"line":46,"code":"  it(\"supports proxy property\", function () {\n    var api = {\n      method: function () {\n        return;\n      }\n    };\n\n    api.method.proxy = function () {\n      return;\n    };\n\n    sinonSpy(api, \"method\");\n    api.method();\n    refute.exception(function () {\n      sinonAssert.calledOnce(api.method);\n    });\n  });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"throws exception","suites":["assert",".fail"],"updatePoint":{"line":70,"column":24,"index":1616},"line":70,"code":"    it(\"throws exception\", function () {\n      assert.exception(function () {\n        sinonAssert.fail(\"Some message\");\n      }, {\n        name: \"AssertError\"\n      });\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"throws configured exception type","suites":["assert",".fail"],"updatePoint":{"line":77,"column":40,"index":1809},"line":77,"code":"    it(\"throws configured exception type\", function () {\n      sinonAssert.failException = \"CustomError\";\n      assert.exception(function () {\n        sinonAssert.fail(\"Some message\");\n      }, {\n        name: \"CustomError\"\n      });\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when arguments to not match","suites":["assert","with stubs",".match"],"updatePoint":{"line":94,"column":43,"index":2262},"line":94,"code":"      it(\"fails when arguments to not match\", function () {\n        assert.exception(function () {\n          sinonAssert.match(\"foo\", \"bar\");\n        });\n        assert(sinonAssert.fail.calledOnce);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when arguments match","suites":["assert","with stubs",".match"],"updatePoint":{"line":100,"column":37,"index":2465},"line":100,"code":"      it(\"passes when arguments match\", function () {\n        sinonAssert.match(\"foo\", \"foo\");\n        assert(sinonAssert.pass.calledOnce);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".called"],"updatePoint":{"line":108,"column":42,"index":2762},"line":108,"code":"      it(\"fails when method does not exist\", function () {\n        assert.exception(function () {\n          sinonAssert.called();\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".called"],"updatePoint":{"line":114,"column":39,"index":2952},"line":114,"code":"      it(\"fails when method is not stub\", function () {\n        assert.exception(function () {\n          sinonAssert.called(function () {\n            return;\n          });\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was not called","suites":["assert","with stubs",".called"],"updatePoint":{"line":122,"column":42,"index":3190},"line":122,"code":"      it(\"fails when method was not called\", function () {\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.called(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when called with more than one argument","suites":["assert","with stubs",".called"],"updatePoint":{"line":129,"column":55,"index":3430},"line":129,"code":"      it(\"fails when called with more than one argument\", function () {\n        var stub = this.stub;\n        stub();\n        assert.exception(function () {\n          sinonAssert.called(stub, 1);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"does not fail when method was called","suites":["assert","with stubs",".called"],"updatePoint":{"line":136,"column":46,"index":3639},"line":136,"code":"      it(\"does not fail when method was called\", function () {\n        var stub = this.stub;\n        stub();\n        refute.exception(function () {\n          sinonAssert.called(stub);\n        });\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".called"],"updatePoint":{"line":144,"column":29,"index":3877},"line":144,"code":"      it(\"calls pass callback\", function () {\n        var stub = this.stub;\n        stub();\n        refute.exception(function () {\n          sinonAssert.called(stub);\n        });\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"called\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".notCalled"],"updatePoint":{"line":157,"column":42,"index":4327},"line":157,"code":"      it(\"fails when method does not exist\", function () {\n        assert.exception(function () {\n          sinonAssert.notCalled();\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".notCalled"],"updatePoint":{"line":163,"column":39,"index":4520},"line":163,"code":"      it(\"fails when method is not stub\", function () {\n        assert.exception(function () {\n          sinonAssert.notCalled(function () {\n            return;\n          });\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was called","suites":["assert","with stubs",".notCalled"],"updatePoint":{"line":171,"column":38,"index":4757},"line":171,"code":"      it(\"fails when method was called\", function () {\n        var stub = this.stub;\n        stub();\n        assert.exception(function () {\n          sinonAssert.notCalled(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when called with more than one argument","suites":["assert","with stubs",".notCalled"],"updatePoint":{"line":179,"column":55,"index":5016},"line":179,"code":"      it(\"fails when called with more than one argument\", function () {\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.notCalled(stub, 1);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method was not called","suites":["assert","with stubs",".notCalled"],"updatePoint":{"line":185,"column":43,"index":5209},"line":185,"code":"      it(\"passes when method was not called\", function () {\n        var stub = this.stub;\n        refute.exception(function () {\n          sinonAssert.notCalled(stub);\n        });\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"should call pass callback","suites":["assert","with stubs",".notCalled"],"updatePoint":{"line":192,"column":35,"index":5440},"line":192,"code":"      it(\"should call pass callback\", function () {\n        var stub = this.stub;\n        sinonAssert.notCalled(stub);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"notCalled\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".calledOnce"],"updatePoint":{"line":202,"column":42,"index":5829},"line":202,"code":"      it(\"fails when method does not exist\", function () {\n        assert.exception(function () {\n          sinonAssert.calledOnce();\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".calledOnce"],"updatePoint":{"line":208,"column":39,"index":6023},"line":208,"code":"      it(\"fails when method is not stub\", function () {\n        assert.exception(function () {\n          sinonAssert.calledOnce(function () {\n            return;\n          });\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was not called","suites":["assert","with stubs",".calledOnce"],"updatePoint":{"line":216,"column":42,"index":6265},"line":216,"code":"      it(\"fails when method was not called\", function () {\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledOnce(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when called with more than one argument","suites":["assert","with stubs",".calledOnce"],"updatePoint":{"line":223,"column":55,"index":6509},"line":223,"code":"      it(\"fails when called with more than one argument\", function () {\n        var stub = this.stub;\n        stub();\n        assert.exception(function () {\n          sinonAssert.calledOnce(stub, 1);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method was called","suites":["assert","with stubs",".calledOnce"],"updatePoint":{"line":230,"column":39,"index":6715},"line":230,"code":"      it(\"passes when method was called\", function () {\n        var stub = this.stub;\n        stub();\n        refute.exception(function () {\n          sinonAssert.calledOnce(stub);\n        });\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was called more than once","suites":["assert","with stubs",".calledOnce"],"updatePoint":{"line":238,"column":53,"index":6981},"line":238,"code":"      it(\"fails when method was called more than once\", function () {\n        var stub = this.stub;\n        stub();\n        stub();\n        assert.exception(function () {\n          sinonAssert.calledOnce(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledOnce"],"updatePoint":{"line":247,"column":29,"index":7231},"line":247,"code":"      it(\"calls pass callback\", function () {\n        var stub = this.stub;\n        stub();\n        sinonAssert.calledOnce(stub);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledOnce\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if called once","suites":["assert","with stubs",".calledTwice"],"updatePoint":{"line":258,"column":30,"index":7628},"line":258,"code":"      it(\"fails if called once\", function () {\n        var stub = this.stub;\n        this.stub();\n        assert.exception(function () {\n          sinonAssert.calledTwice(stub);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when called with more than one argument","suites":["assert","with stubs",".calledTwice"],"updatePoint":{"line":265,"column":55,"index":7853},"line":265,"code":"      it(\"fails when called with more than one argument\", function () {\n        var stub = this.stub;\n        this.stub();\n        this.stub();\n        assert.exception(function () {\n          sinonAssert.calledTwice(stub, 1);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes if called twice","suites":["assert","with stubs",".calledTwice"],"updatePoint":{"line":273,"column":32,"index":8079},"line":273,"code":"      it(\"passes if called twice\", function () {\n        var stub = this.stub;\n        this.stub();\n        this.stub();\n        refute.exception(function () {\n          sinonAssert.calledTwice(stub);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledTwice"],"updatePoint":{"line":281,"column":29,"index":8299},"line":281,"code":"      it(\"calls pass callback\", function () {\n        var stub = this.stub;\n        stub();\n        stub();\n        sinonAssert.calledTwice(stub);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledTwice\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if called once","suites":["assert","with stubs",".calledThrice"],"updatePoint":{"line":293,"column":30,"index":8716},"line":293,"code":"      it(\"fails if called once\", function () {\n        var stub = this.stub;\n        this.stub();\n        assert.exception(function () {\n          sinonAssert.calledThrice(stub);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when called with more than one argument","suites":["assert","with stubs",".calledThrice"],"updatePoint":{"line":300,"column":55,"index":8942},"line":300,"code":"      it(\"fails when called with more than one argument\", function () {\n        var stub = this.stub;\n        this.stub();\n        this.stub();\n        this.stub();\n        assert.exception(function () {\n          sinonAssert.calledThrice(stub, 1);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes if called thrice","suites":["assert","with stubs",".calledThrice"],"updatePoint":{"line":309,"column":33,"index":9191},"line":309,"code":"      it(\"passes if called thrice\", function () {\n        var stub = this.stub;\n        this.stub();\n        this.stub();\n        this.stub();\n        refute.exception(function () {\n          sinonAssert.calledThrice(stub);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledThrice"],"updatePoint":{"line":318,"column":29,"index":9433},"line":318,"code":"      it(\"calls pass callback\", function () {\n        var stub = this.stub;\n        stub();\n        stub();\n        stub();\n        sinonAssert.calledThrice(stub);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledThrice\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when calls were done in right order","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":329,"column":52,"index":9785},"line":329,"code":"      it(\"passes when calls were done in right order\", function () {\n        var spy1 = sinonSpy();\n        var spy2 = sinonSpy();\n        spy1();\n        spy2();\n        refute.exception(function () {\n          sinonAssert.callOrder(spy1, spy2);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when calls were done in wrong order","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":338,"column":51,"index":10053},"line":338,"code":"      it(\"fails when calls were done in wrong order\", function () {\n        var spy1 = sinonSpy();\n        var spy2 = sinonSpy();\n        spy2();\n        spy1();\n        assert.exception(function () {\n          sinonAssert.callOrder(spy1, spy2);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when many calls were done in right order","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":348,"column":57,"index":10368},"line":348,"code":"      it(\"passes when many calls were done in right order\", function () {\n        var spy1 = sinonSpy();\n        var spy2 = sinonSpy();\n        var spy3 = sinonSpy();\n        var spy4 = sinonSpy();\n        spy1();\n        spy2();\n        spy3();\n        spy4();\n        refute.exception(function () {\n          sinonAssert.callOrder(spy1, spy2, spy3, spy4);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when one of many calls were done in wrong order","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":361,"column":63,"index":10754},"line":361,"code":"      it(\"fails when one of many calls were done in wrong order\", function () {\n        var spy1 = sinonSpy();\n        var spy2 = sinonSpy();\n        var spy3 = sinonSpy();\n        var spy4 = sinonSpy();\n        spy1();\n        spy2();\n        spy4();\n        spy3();\n        assert.exception(function () {\n          sinonAssert.callOrder(spy1, spy2, spy3, spy4);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":375,"column":29,"index":11147},"line":375,"code":"      it(\"calls pass callback\", function () {\n        var stubs = [sinonSpy(), sinonSpy()];\n        stubs[0]();\n        stubs[1]();\n        sinonAssert.callOrder(stubs[0], stubs[1]);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"callOrder\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes for multiple calls to same spy","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":383,"column":47,"index":11461},"line":383,"code":"      it(\"passes for multiple calls to same spy\", function () {\n        var first = sinonSpy();\n        var second = sinonSpy();\n        first();\n        second();\n        first();\n        refute.exception(function () {\n          sinonAssert.callOrder(first, second, first);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if first spy was not called","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":393,"column":43,"index":11754},"line":393,"code":"      it(\"fails if first spy was not called\", function () {\n        var first = sinonSpy();\n        var second = sinonSpy();\n        second();\n        assert.exception(function () {\n          sinonAssert.callOrder(first, second);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if second spy was not called","suites":["assert","with stubs",".callOrder"],"updatePoint":{"line":401,"column":44,"index":12007},"line":401,"code":"      it(\"fails if second spy was not called\", function () {\n        var first = sinonSpy();\n        var second = sinonSpy();\n        first();\n        assert.exception(function () {\n          sinonAssert.callOrder(first, second);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".calledOn"],"updatePoint":{"line":411,"column":42,"index":12305},"line":411,"code":"      it(\"fails when method does not exist\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOn\");\n        assert.exception(function () {\n          sinonAssert.calledOn(null, object);\n        });\n        assert.isFalse(this.stub.calledOn.calledWith(object));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".calledOn"],"updatePoint":{"line":420,"column":39,"index":12639},"line":420,"code":"      it(\"fails when method is not stub\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOn\");\n        assert.exception(function () {\n          sinonAssert.calledOn(function () {\n            return;\n          }, object);\n        });\n        assert.isFalse(this.stub.calledOn.calledWith(object));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".calledOn"],"updatePoint":{"line":431,"column":33,"index":13008},"line":431,"code":"      it(\"fails when method fails\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOn\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledOn(stub, object);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".calledOn"],"updatePoint":{"line":440,"column":41,"index":13326},"line":440,"code":"      it(\"passes when method doesn't fail\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOn\").returns(true);\n        var stub = this.stub;\n        sinonAssert.calledOn(stub, object);\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledOn"],"updatePoint":{"line":447,"column":29,"index":13586},"line":447,"code":"      it(\"calls pass callback\", function () {\n        var obj = {};\n        this.stub.call(obj);\n        sinonAssert.calledOn(this.stub, obj);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledOn\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"works with spyCall","suites":["assert","with stubs",".calledOn"],"updatePoint":{"line":454,"column":28,"index":13840},"line":454,"code":"      it(\"works with spyCall\", function () {\n        var spy = sinonSpy();\n        var target = {};\n        spy();\n        spy.call(target);\n        sinonAssert.calledOn(spy.lastCall, target);\n        assert(sinonAssert.pass.calledOn);\n        assert(sinonAssert.pass.calledWith(\"calledOn\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when spyCall failed","suites":["assert","with stubs",".calledOn"],"updatePoint":{"line":463,"column":35,"index":14150},"line":463,"code":"      it(\"fails when spyCall failed\", function () {\n        var spy = sinonSpy();\n        var target = {};\n        spy();\n        spy.call(target);\n        assert.exception(function () {\n          sinonAssert.calledOn(spy.lastCall, 1);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".calledWithNew"],"updatePoint":{"line":477,"column":42,"index":14612},"line":477,"code":"      it(\"fails when method does not exist\", function () {\n        sinonStub(this.stub, \"calledWithNew\");\n        assert.exception(function () {\n          sinonAssert.calledWithNew(null);\n        });\n        assert.isFalse(this.stub.calledWithNew.called);\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".calledWithNew"],"updatePoint":{"line":485,"column":39,"index":14916},"line":485,"code":"      it(\"fails when method is not stub\", function () {\n        sinonStub(this.stub, \"calledWithNew\");\n        assert.exception(function () {\n          sinonAssert.calledWithNew(function () {\n            return;\n          });\n        });\n        assert.isFalse(this.stub.calledWithNew.called);\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".calledWithNew"],"updatePoint":{"line":495,"column":33,"index":15255},"line":495,"code":"      it(\"fails when method fails\", function () {\n        sinonStub(this.stub, \"calledWithNew\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledWithNew(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".calledWithNew"],"updatePoint":{"line":503,"column":41,"index":15550},"line":503,"code":"      it(\"passes when method doesn't fail\", function () {\n        sinonStub(this.stub, \"calledWithNew\").returns(true);\n        var stub = this.stub;\n        sinonAssert.calledWithNew(stub);\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledWithNew"],"updatePoint":{"line":509,"column":29,"index":15787},"line":509,"code":"      it(\"calls pass callback\", function () {\n        new this.stub(); // eslint-disable-line no-new, new-cap\n\n        sinonAssert.calledWithNew(this.stub);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledWithNew\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"works with spyCall","suites":["assert","with stubs",".calledWithNew"],"updatePoint":{"line":516,"column":28,"index":16060},"line":516,"code":"      it(\"works with spyCall\", function () {\n        var spy = sinonSpy();\n        spy();\n        new spy(); // eslint-disable-line no-new, new-cap\n\n        sinonAssert.calledWithNew(spy.lastCall);\n        assert(sinonAssert.pass.calledWithNew);\n        assert(sinonAssert.pass.calledWith(\"calledWithNew\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when spyCall failed","suites":["assert","with stubs",".calledWithNew"],"updatePoint":{"line":525,"column":35,"index":16385},"line":525,"code":"      it(\"fails when spyCall failed\", function () {\n        var spy = sinonSpy();\n        spy();\n        new spy(); // eslint-disable-line no-new, new-cap\n\n        assert.exception(function () {\n          sinonAssert.calledWithNew(spy.firstCall);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".alwaysCalledWithNew"],"updatePoint":{"line":539,"column":42,"index":16870},"line":539,"code":"      it(\"fails when method does not exist\", function () {\n        sinonStub(this.stub, \"alwaysCalledWithNew\");\n        assert.exception(function () {\n          sinonAssert.alwaysCalledWithNew(null);\n        });\n        assert.isFalse(this.stub.alwaysCalledWithNew.called);\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".alwaysCalledWithNew"],"updatePoint":{"line":547,"column":39,"index":17192},"line":547,"code":"      it(\"fails when method is not stub\", function () {\n        sinonStub(this.stub, \"alwaysCalledWithNew\");\n        assert.exception(function () {\n          sinonAssert.alwaysCalledWithNew(function () {\n            return;\n          });\n        });\n        assert.isFalse(this.stub.alwaysCalledWithNew.called);\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".alwaysCalledWithNew"],"updatePoint":{"line":557,"column":33,"index":17549},"line":557,"code":"      it(\"fails when method fails\", function () {\n        sinonStub(this.stub, \"alwaysCalledWithNew\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.alwaysCalledWithNew(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".alwaysCalledWithNew"],"updatePoint":{"line":565,"column":41,"index":17856},"line":565,"code":"      it(\"passes when method doesn't fail\", function () {\n        sinonStub(this.stub, \"alwaysCalledWithNew\").returns(true);\n        var stub = this.stub;\n        sinonAssert.alwaysCalledWithNew(stub);\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".alwaysCalledWithNew"],"updatePoint":{"line":571,"column":29,"index":18105},"line":571,"code":"      it(\"calls pass callback\", function () {\n        new this.stub(); // eslint-disable-line no-new, new-cap\n\n        sinonAssert.alwaysCalledWithNew(this.stub);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"alwaysCalledWithNew\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".calledWith"],"updatePoint":{"line":580,"column":33,"index":18445},"line":580,"code":"      it(\"fails when method fails\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledWith\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledWith(stub, object, 1);\n        });\n        assert(this.stub.calledWith.calledWith(object, 1));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".calledWith"],"updatePoint":{"line":590,"column":41,"index":18830},"line":590,"code":"      it(\"passes when method doesn't fail\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledWith\").returns(true);\n        var stub = this.stub;\n        refute.exception(function () {\n          sinonAssert.calledWith(stub, object, 1);\n        });\n        assert(this.stub.calledWith.calledWith(object, 1));\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledWith"],"updatePoint":{"line":600,"column":29,"index":19210},"line":600,"code":"      it(\"calls pass callback\", function () {\n        this.stub(\"yeah\");\n        sinonAssert.calledWith(this.stub, \"yeah\");\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledWith\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"works with spyCall","suites":["assert","with stubs",".calledWith"],"updatePoint":{"line":606,"column":28,"index":19447},"line":606,"code":"      it(\"works with spyCall\", function () {\n        var spy = sinonSpy();\n        var object = {};\n        spy();\n        spy(object);\n        sinonAssert.calledWith(spy.lastCall, object);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledWith\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when spyCall failed","suites":["assert","with stubs",".calledWith"],"updatePoint":{"line":615,"column":35,"index":19758},"line":615,"code":"      it(\"fails when spyCall failed\", function () {\n        var spy = sinonSpy();\n        var object = {};\n        spy();\n        spy(object);\n        assert.exception(function () {\n          sinonAssert.calledWith(spy.lastCall, 1);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".calledWithExactly"],"updatePoint":{"line":627,"column":33,"index":20109},"line":627,"code":"      it(\"fails when method fails\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledWithExactly\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledWithExactly(stub, object, 1);\n        });\n        assert(this.stub.calledWithExactly.calledWithExactly(object, 1));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".calledWithExactly"],"updatePoint":{"line":637,"column":41,"index":20522},"line":637,"code":"      it(\"passes when method doesn't fail\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledWithExactly\").returns(true);\n        var stub = this.stub;\n        refute.exception(function () {\n          sinonAssert.calledWithExactly(stub, object, 1);\n        });\n        assert(this.stub.calledWithExactly.calledWithExactly(object, 1));\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledWithExactly"],"updatePoint":{"line":647,"column":29,"index":20930},"line":647,"code":"      it(\"calls pass callback\", function () {\n        this.stub(\"yeah\");\n        sinonAssert.calledWithExactly(this.stub, \"yeah\");\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledWithExactly\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"works with spyCall","suites":["assert","with stubs",".calledWithExactly"],"updatePoint":{"line":653,"column":28,"index":21181},"line":653,"code":"      it(\"works with spyCall\", function () {\n        var spy = sinonSpy();\n        var object = {};\n        spy();\n        spy(object);\n        sinonAssert.calledWithExactly(spy.lastCall, object);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledWithExactly\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when spyCall failed","suites":["assert","with stubs",".calledWithExactly"],"updatePoint":{"line":662,"column":35,"index":21506},"line":662,"code":"      it(\"fails when spyCall failed\", function () {\n        var spy = sinonSpy();\n        var object = {};\n        spy();\n        spy(object);\n        assert.exception(function () {\n          sinonAssert.calledWithExactly(spy.lastCall, 1);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":676,"column":33,"index":21979},"line":676,"code":"      it(\"fails when method fails\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOnceWithExactly\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledOnceWithExactly(stub, object, 1);\n        });\n        assert(this.stub.calledOnceWithExactly.calledOnceWithExactly(object, 1));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":686,"column":41,"index":22408},"line":686,"code":"      it(\"passes when method doesn't fail\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOnceWithExactly\").returns(true);\n        var stub = this.stub;\n        refute.exception(function () {\n          sinonAssert.calledOnceWithExactly(stub, object, 1);\n        });\n        assert(this.stub.calledOnceWithExactly.calledOnceWithExactly(object, 1));\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":696,"column":29,"index":22832},"line":696,"code":"      it(\"calls pass callback\", function () {\n        this.stub(\"yeah\");\n        sinonAssert.calledOnceWithExactly(this.stub, \"yeah\");\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledOnceWithExactly\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":702,"column":42,"index":23105},"line":702,"code":"      it(\"fails when method does not exist\", function () {\n        assert.exception(function () {\n          sinonAssert.calledOnceWithExactly();\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":708,"column":39,"index":23310},"line":708,"code":"      it(\"fails when method is not stub\", function () {\n        assert.exception(function () {\n          sinonAssert.calledOnceWithExactly(function () {\n            return;\n          });\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was not called","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":716,"column":42,"index":23563},"line":716,"code":"      it(\"fails when method was not called\", function () {\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledOnceWithExactly(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when called with more than one argument","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":723,"column":55,"index":23818},"line":723,"code":"      it(\"fails when called with more than one argument\", function () {\n        var stub = this.stub;\n        stub();\n        assert.exception(function () {\n          sinonAssert.calledOnceWithExactly(stub, 1);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method was called","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":730,"column":39,"index":24035},"line":730,"code":"      it(\"passes when method was called\", function () {\n        var stub = this.stub;\n        stub();\n        refute.exception(function () {\n          sinonAssert.calledOnceWithExactly(stub);\n        });\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was called more than once","suites":["assert","with stubs",".calledOnceWithExactly"],"updatePoint":{"line":738,"column":53,"index":24312},"line":738,"code":"      it(\"fails when method was called more than once\", function () {\n        var stub = this.stub;\n        stub();\n        stub();\n        assert.exception(function () {\n          sinonAssert.calledOnceWithExactly(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":751,"column":33,"index":24745},"line":751,"code":"      it(\"fails when method fails\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOnceWithMatch\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledOnceWithMatch(stub, object, 1);\n        });\n        assert(this.stub.calledOnceWithMatch.calledOnceWithMatch(object, 1));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":761,"column":41,"index":25166},"line":761,"code":"      it(\"passes when method doesn't fail\", function () {\n        var object = {};\n        sinonStub(this.stub, \"calledOnceWithMatch\").returns(true);\n        var stub = this.stub;\n        refute.exception(function () {\n          sinonAssert.calledOnceWithMatch(stub, object, 1);\n        });\n        assert(this.stub.calledOnceWithMatch.calledOnceWithMatch(object, 1));\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":771,"column":29,"index":25582},"line":771,"code":"      it(\"calls pass callback\", function () {\n        this.stub(\"yeah\");\n        sinonAssert.calledOnceWithMatch(this.stub, \"yeah\");\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"calledOnceWithMatch\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method does not exist","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":777,"column":42,"index":25851},"line":777,"code":"      it(\"fails when method does not exist\", function () {\n        assert.exception(function () {\n          sinonAssert.calledOnceWithMatch();\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method is not stub","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":783,"column":39,"index":26054},"line":783,"code":"      it(\"fails when method is not stub\", function () {\n        assert.exception(function () {\n          sinonAssert.calledOnceWithMatch(function () {\n            return;\n          });\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was not called","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":791,"column":42,"index":26305},"line":791,"code":"      it(\"fails when method was not called\", function () {\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.calledOnceWithMatch(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when called with more than one argument","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":798,"column":55,"index":26558},"line":798,"code":"      it(\"fails when called with more than one argument\", function () {\n        var stub = this.stub;\n        stub();\n        assert.exception(function () {\n          sinonAssert.calledOnceWithMatch(stub, 1);\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method was called","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":805,"column":39,"index":26773},"line":805,"code":"      it(\"passes when method was called\", function () {\n        var stub = this.stub;\n        stub();\n        refute.exception(function () {\n          sinonAssert.calledOnceWithMatch(stub);\n        });\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method was called more than once","suites":["assert","with stubs",".calledOnceWithMatch"],"updatePoint":{"line":813,"column":53,"index":27048},"line":813,"code":"      it(\"fails when method was called more than once\", function () {\n        var stub = this.stub;\n        stub();\n        stub();\n        assert.exception(function () {\n          sinonAssert.calledOnceWithMatch(stub);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".neverCalledWith"],"updatePoint":{"line":824,"column":33,"index":27366},"line":824,"code":"      it(\"fails when method fails\", function () {\n        var object = {};\n        sinonStub(this.stub, \"neverCalledWith\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.neverCalledWith(stub, object, 1);\n        });\n        assert(this.stub.neverCalledWith.calledWith(object, 1));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".neverCalledWith"],"updatePoint":{"line":834,"column":41,"index":27766},"line":834,"code":"      it(\"passes when method doesn't fail\", function () {\n        var object = {};\n        sinonStub(this.stub, \"neverCalledWith\").returns(true);\n        var stub = this.stub;\n        refute.exception(function () {\n          sinonAssert.neverCalledWith(stub, object, 1);\n        });\n        assert(this.stub.neverCalledWith.calledWith(object, 1));\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".neverCalledWith"],"updatePoint":{"line":844,"column":29,"index":28161},"line":844,"code":"      it(\"calls pass callback\", function () {\n        this.stub(\"yeah\");\n        sinonAssert.neverCalledWith(this.stub, \"nah!\");\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"neverCalledWith\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".threw"],"updatePoint":{"line":852,"column":33,"index":28458},"line":852,"code":"      it(\"fails when method fails\", function () {\n        sinonStub(this.stub, \"threw\").returns(false);\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.threw(stub, 1, 2);\n        });\n        assert(this.stub.threw.calledWithExactly(1, 2));\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".threw"],"updatePoint":{"line":861,"column":41,"index":28800},"line":861,"code":"      it(\"passes when method doesn't fail\", function () {\n        sinonStub(this.stub, \"threw\").returns(true);\n        var stub = this.stub;\n        refute.exception(function () {\n          sinonAssert.threw(stub, 1, 2);\n        });\n        assert(this.stub.threw.calledWithExactly(1, 2));\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".threw"],"updatePoint":{"line":870,"column":29,"index":29137},"line":870,"code":"      it(\"calls pass callback\", function () {\n        sinonStub(this.stub, \"threw\").returns(true);\n        this.stub();\n        sinonAssert.threw(this.stub);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"threw\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"works with spyCall","suites":["assert","with stubs",".threw"],"updatePoint":{"line":877,"column":28,"index":29403},"line":877,"code":"      it(\"works with spyCall\", function () {\n        var stub = sinonStub().throws(\"Error\");\n        assert.exception(function () {\n          stub();\n        });\n        sinonAssert.threw(stub.firstCall, \"Error\");\n        assert(sinonAssert.pass.threw);\n        assert(sinonAssert.pass.calledWith(\"threw\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when spyCall failed","suites":["assert","with stubs",".threw"],"updatePoint":{"line":886,"column":35,"index":29728},"line":886,"code":"      it(\"fails when spyCall failed\", function () {\n        var stub = sinonStub().returns(\"Error\");\n        stub();\n        assert.exception(function () {\n          sinonAssert.threw(stub.firstCall, \"Error\");\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails when method fails","suites":["assert","with stubs",".callCount"],"updatePoint":{"line":898,"column":33,"index":30147},"line":898,"code":"      it(\"fails when method fails\", function () {\n        this.stub();\n        this.stub();\n        var stub = this.stub;\n        assert.exception(function () {\n          sinonAssert.callCount(stub, 3);\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes when method doesn't fail","suites":["assert","with stubs",".callCount"],"updatePoint":{"line":907,"column":41,"index":30421},"line":907,"code":"      it(\"passes when method doesn't fail\", function () {\n        var stub = this.stub;\n        this.stub.callCount = 3;\n        refute.exception(function () {\n          sinonAssert.callCount(stub, 3);\n        });\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".callCount"],"updatePoint":{"line":915,"column":29,"index":30682},"line":915,"code":"      it(\"calls pass callback\", function () {\n        this.stub();\n        sinonAssert.callCount(this.stub, 1);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"callCount\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if method is missing","suites":["assert","with stubs",".alwaysCalledOn"],"updatePoint":{"line":923,"column":36,"index":30968},"line":923,"code":"      it(\"fails if method is missing\", function () {\n        assert.exception(function () {\n          sinonAssert.alwaysCalledOn();\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if method is not fake","suites":["assert","with stubs",".alwaysCalledOn"],"updatePoint":{"line":928,"column":37,"index":31123},"line":928,"code":"      it(\"fails if method is not fake\", function () {\n        assert.exception(function () {\n          sinonAssert.alwaysCalledOn(function () {\n            return;\n          }, {});\n        });\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if stub returns false","suites":["assert","with stubs",".alwaysCalledOn"],"updatePoint":{"line":935,"column":37,"index":31327},"line":935,"code":"      it(\"fails if stub returns false\", function () {\n        var stub = sinonStub();\n        sinonStub(stub, \"alwaysCalledOn\").returns(false);\n        assert.exception(function () {\n          sinonAssert.alwaysCalledOn(stub, {});\n        });\n        assert(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes if stub returns true","suites":["assert","with stubs",".alwaysCalledOn"],"updatePoint":{"line":943,"column":37,"index":31621},"line":943,"code":"      it(\"passes if stub returns true\", function () {\n        var stub = sinonStub();\n        sinonStub(stub, \"alwaysCalledOn\").returns(true);\n        sinonAssert.alwaysCalledOn(stub, {});\n        assert.isFalse(sinonAssert.fail.called);\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert","with stubs",".alwaysCalledOn"],"updatePoint":{"line":949,"column":29,"index":31861},"line":949,"code":"      it(\"calls pass callback\", function () {\n        this.stub();\n        sinonAssert.alwaysCalledOn(this.stub, this);\n        assert(sinonAssert.pass.calledOnce);\n        assert(sinonAssert.pass.calledWith(\"alwaysCalledOn\"));\n      });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if method is missing","suites":["assert",".alwaysCalledWith"],"updatePoint":{"line":966,"column":34,"index":32390},"line":966,"code":"    it(\"fails if method is missing\", function () {\n      assert.exception(function () {\n        sinonAssert.alwaysCalledWith();\n      });\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if method is not fake","suites":["assert",".alwaysCalledWith"],"updatePoint":{"line":971,"column":35,"index":32537},"line":971,"code":"    it(\"fails if method is not fake\", function () {\n      assert.exception(function () {\n        sinonAssert.alwaysCalledWith(function () {\n          return;\n        });\n      });\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if stub returns false","suites":["assert",".alwaysCalledWith"],"updatePoint":{"line":978,"column":35,"index":32725},"line":978,"code":"    it(\"fails if stub returns false\", function () {\n      var stub = sinonStub();\n      sinonStub(stub, \"alwaysCalledWith\").returns(false);\n      assert.exception(function () {\n        sinonAssert.alwaysCalledWith(stub, {}, []);\n      });\n      assert(sinonAssert.fail.called);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes if stub returns true","suites":["assert",".alwaysCalledWith"],"updatePoint":{"line":986,"column":35,"index":33011},"line":986,"code":"    it(\"passes if stub returns true\", function () {\n      var stub = sinonStub();\n      sinonStub(stub, \"alwaysCalledWith\").returns(true);\n      sinonAssert.alwaysCalledWith(stub, {}, []);\n      assert.isFalse(sinonAssert.fail.called);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert",".alwaysCalledWith"],"updatePoint":{"line":992,"column":27,"index":33247},"line":992,"code":"    it(\"calls pass callback\", function () {\n      var spy = sinonSpy();\n      spy(\"Hello\");\n      sinonAssert.alwaysCalledWith(spy, \"Hello\");\n      assert(sinonAssert.pass.calledOnce);\n      assert(sinonAssert.pass.calledWith(\"alwaysCalledWith\"));\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails if stub returns false","suites":["assert",".alwaysCalledWithExactly"],"updatePoint":{"line":1009,"column":35,"index":33787},"line":1009,"code":"    it(\"fails if stub returns false\", function () {\n      var stub = sinonStub();\n      sinonStub(stub, \"alwaysCalledWithExactly\").returns(false);\n      sinonAssert.alwaysCalledWithExactly(stub, {}, []);\n      assert(sinonAssert.fail.called);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"passes if stub returns true","suites":["assert",".alwaysCalledWithExactly"],"updatePoint":{"line":1015,"column":35,"index":34038},"line":1015,"code":"    it(\"passes if stub returns true\", function () {\n      var stub = sinonStub();\n      sinonStub(stub, \"alwaysCalledWithExactly\").returns(true);\n      sinonAssert.alwaysCalledWithExactly(stub, {}, []);\n      assert.isFalse(sinonAssert.fail.called);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"calls pass callback","suites":["assert",".alwaysCalledWithExactly"],"updatePoint":{"line":1021,"column":27,"index":34288},"line":1021,"code":"    it(\"calls pass callback\", function () {\n      var spy = sinonSpy();\n      spy(\"Hello\");\n      sinonAssert.alwaysCalledWithExactly(spy, \"Hello\");\n      assert(sinonAssert.pass.calledOnce);\n      assert(sinonAssert.pass.calledWith(\"alwaysCalledWithExactly\"));\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"exposes asserts into object","suites":["assert",".expose"],"updatePoint":{"line":1030,"column":35,"index":34608},"line":1030,"code":"    it(\"exposes asserts into object\", function () {\n      var test = {};\n      sinonAssert.expose(test);\n      assert.isFunction(test.fail);\n      assert.isString(test.failException);\n      assert.isFunction(test.assertCalled);\n      assert.isFunction(test.assertCalledOn);\n      assert.isFunction(test.assertCalledWith);\n      assert.isFunction(test.assertCalledWithExactly);\n      assert.isFunction(test.assertCalledOnceWithExactly);\n      assert.isFunction(test.assertThrew);\n      assert.isFunction(test.assertCallCount);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"exposes asserts into global","suites":["assert",".expose"],"updatePoint":{"line":1043,"column":35,"index":35142},"line":1043,"code":"    it(\"exposes asserts into global\", function () {\n      sinonAssert.expose(this.global, {\n        includeFail: false\n      });\n      assert.equals(typeof failException, \"undefined\");\n      /*eslint-disable no-undef*/\n\n      assert.isFunction(assertCalled);\n      assert.isFunction(assertCalledOn);\n      assert.isFunction(assertCalledWith);\n      assert.isFunction(assertCalledWithExactly);\n      assert.isFunction(assertCalledOnceWithExactly);\n      assert.isFunction(assertThrew);\n      assert.isFunction(assertCallCount);\n      /*eslint-enable no-undef*/\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"fails exposed asserts without errors","suites":["assert",".expose"],"updatePoint":{"line":1059,"column":44,"index":35719},"line":1059,"code":"    it(\"fails exposed asserts without errors\", function () {\n      sinonAssert.expose(this.global, {\n        includeFail: false\n      });\n      assert.exception(function () {\n        assertCalled(sinonSpy()); // eslint-disable-line no-undef\n      }, {\n        message: \"expected spy to have been called at least once but was never called\"\n      });\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"exposes asserts into object without prefixes","suites":["assert",".expose"],"updatePoint":{"line":1069,"column":52,"index":36084},"line":1069,"code":"    it(\"exposes asserts into object without prefixes\", function () {\n      var test = {};\n      sinonAssert.expose(test, {\n        prefix: \"\"\n      });\n      assert.isFunction(test.fail);\n      assert.isString(test.failException);\n      assert.isFunction(test.called);\n      assert.isFunction(test.calledOn);\n      assert.isFunction(test.calledWith);\n      assert.isFunction(test.calledWithExactly);\n      assert.isFunction(test.calledOnceWithExactly);\n      assert.isFunction(test.threw);\n      assert.isFunction(test.callCount);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"does not expose 'expose'","suites":["assert",".expose"],"updatePoint":{"line":1084,"column":32,"index":36603},"line":1084,"code":"    it(\"does not expose 'expose'\", function () {\n      var test = {};\n      sinonAssert.expose(test, {\n        prefix: \"\"\n      });\n      refute(test.expose, \"Expose should not be exposed\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"throws if target is undefined","suites":["assert",".expose"],"updatePoint":{"line":1091,"column":37,"index":36807},"line":1091,"code":"    it(\"throws if target is undefined\", function () {\n      assert.exception(function () {\n        sinonAssert.expose();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"throws if target is null","suites":["assert",".expose"],"updatePoint":{"line":1098,"column":32,"index":36978},"line":1098,"code":"    it(\"throws if target is null\", function () {\n      assert.exception(function () {\n        sinonAssert.expose(null);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.called exception message","suites":["assert","message"],"updatePoint":{"line":1133,"column":39,"index":38131},"line":1133,"code":"    it(\"assert.called exception message\", function () {\n      assert.equals(this.message(\"called\", this.obj.doSomething), \"expected doSomething to have been called at least once but was never called\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.notCalled exception message one call","suites":["assert","message"],"updatePoint":{"line":1136,"column":51,"index":38353},"line":1136,"code":"    it(\"assert.notCalled exception message one call\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"notCalled\", this.obj.doSomething), \"expected doSomething to not have been called but was called once\\n    doSomething()\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.notCalled exception message four calls","suites":["assert","message"],"updatePoint":{"line":1140,"column":53,"index":38618},"line":1140,"code":"    it(\"assert.notCalled exception message four calls\", function () {\n      this.obj.doSomething();\n      this.obj.doSomething();\n      this.obj.doSomething();\n      this.obj.doSomething();\n      assert.equals(this.message(\"notCalled\", this.obj.doSomething), \"expected doSomething to not have been called \" + \"but was called 4 times\\n    doSomething()\\n    \" + \"doSomething()\\n    doSomething()\\n    doSomething()\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.notCalled exception message with calls with arguments","suites":["assert","message"],"updatePoint":{"line":1147,"column":68,"index":39058},"line":1147,"code":"    it(\"assert.notCalled exception message with calls with arguments\", function () {\n      this.obj.doSomething();\n      this.obj.doSomething(3);\n      this.obj.doSomething(42, 1);\n      this.obj.doSomething();\n      assert.equals(this.message(\"notCalled\", this.obj.doSomething), \"expected doSomething to not have been called \" + \"but was called 4 times\\n    doSomething()\\n    \" + \"doSomething(3)\\n    doSomething(42, 1)\\n    doSomething()\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.callOrder exception message","suites":["assert","message"],"updatePoint":{"line":1154,"column":42,"index":39484},"line":1154,"code":"    it(\"assert.callOrder exception message\", function () {\n      var obj = {\n        doop: function () {\n          return;\n        },\n        foo: function () {\n          return;\n        }\n      };\n      sinonSpy(obj, \"doop\");\n      sinonSpy(obj, \"foo\");\n      obj.doop();\n      this.obj.doSomething();\n      obj.foo();\n      var message = this.message(\"callOrder\", this.obj.doSomething, obj.doop, obj.foo);\n      assert.equals(message, \"expected doSomething, doop, foo to be called in order but were called as doop, doSomething, foo\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.callOrder with missing first call exception message","suites":["assert","message"],"updatePoint":{"line":1171,"column":66,"index":40053},"line":1171,"code":"    it(\"assert.callOrder with missing first call exception message\", function () {\n      var obj = {\n        doop: function () {\n          return;\n        },\n        foo: function () {\n          return;\n        }\n      };\n      sinonSpy(obj, \"doop\");\n      sinonSpy(obj, \"foo\");\n      obj.foo();\n      var message = this.message(\"callOrder\", obj.doop, obj.foo);\n      assert.equals(message, \"expected doop, foo to be called in order but were called as foo\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.callOrder with missing last call exception message","suites":["assert","message"],"updatePoint":{"line":1186,"column":65,"index":40519},"line":1186,"code":"    it(\"assert.callOrder with missing last call exception message\", function () {\n      var obj = {\n        doop: function () {\n          return;\n        },\n        foo: function () {\n          return;\n        }\n      };\n      sinonSpy(obj, \"doop\");\n      sinonSpy(obj, \"foo\");\n      obj.doop();\n      var message = this.message(\"callOrder\", obj.doop, obj.foo);\n      assert.equals(message, \"expected doop, foo to be called in order but were called as doop\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.callCount exception message","suites":["assert","message"],"updatePoint":{"line":1201,"column":42,"index":40964},"line":1201,"code":"    it(\"assert.callCount exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"callCount\", this.obj.doSomething, 3), \"expected doSomething to be called thrice but was called once\\n    doSomething()\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.callCount exception message with non-numeric argument","suites":["assert","message"],"updatePoint":{"line":1205,"column":68,"index":41243},"line":1205,"code":"    it(\"assert.callCount exception message with non-numeric argument\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"callCount\", this.obj.doSomething, \"3\"), \"expected '3' to be a number but was of type string\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledOnce exception message","suites":["assert","message"],"updatePoint":{"line":1209,"column":43,"index":41470},"line":1209,"code":"    it(\"assert.calledOnce exception message\", function () {\n      this.obj.doSomething();\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledOnce\", this.obj.doSomething), \"expected doSomething to be called once but was called twice\\n    doSomething()\\n    doSomething()\");\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledOnce\", this.obj.doSomething), \"expected doSomething to be called once but was called \" + \"thrice\\n    doSomething()\\n    doSomething()\\n    doSomething()\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledTwice exception message","suites":["assert","message"],"updatePoint":{"line":1216,"column":44,"index":41998},"line":1216,"code":"    it(\"assert.calledTwice exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledTwice\", this.obj.doSomething), \"expected doSomething to be called twice but was called once\\n    doSomething()\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledThrice exception message","suites":["assert","message"],"updatePoint":{"line":1220,"column":45,"index":42252},"line":1220,"code":"    it(\"assert.calledThrice exception message\", function () {\n      this.obj.doSomething();\n      this.obj.doSomething();\n      this.obj.doSomething();\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledThrice\", this.obj.doSomething), \"expected doSomething to be called thrice but was called 4 times\\n\" + \"    doSomething()\\n    doSomething()\\n    doSomething()\\n    doSomething()\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledOn exception message","suites":["assert","message"],"updatePoint":{"line":1227,"column":41,"index":42659},"line":1227,"code":"    it(\"assert.calledOn exception message\", function () {\n      this.obj.toString = function () {\n        return \"[Oh yeah]\";\n      };\n\n      var obj = {\n        toString: function () {\n          return \"[Oh no]\";\n        }\n      };\n      var obj2 = {\n        toString: function () {\n          return \"[Oh well]\";\n        }\n      };\n      this.obj.doSomething.call(obj);\n      this.obj.doSomething.call(obj2);\n      assert.equals(this.message(\"calledOn\", this.obj.doSomething, this.obj), `expected doSomething to be called with ${inspect(this.obj)} as this but was called with ${inspect(obj)}, ${inspect(obj2)}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.alwaysCalledOn exception message","suites":["assert","message"],"updatePoint":{"line":1246,"column":47,"index":43287},"line":1246,"code":"    it(\"assert.alwaysCalledOn exception message\", function () {\n      this.obj.toString = function () {\n        return \"[Oh yeah]\";\n      };\n\n      var obj = {\n        toString: function () {\n          return \"[Oh no]\";\n        }\n      };\n      var obj2 = {\n        toString: function () {\n          return \"[Oh well]\";\n        }\n      };\n      this.obj.doSomething.call(obj);\n      this.obj.doSomething.call(obj2);\n      this.obj.doSomething();\n      assert.equals(this.message(\"alwaysCalledOn\", this.obj.doSomething, this.obj), `expected doSomething to always be called with ${inspect(this.obj)} as this but was called with ${inspect(obj)}, ${inspect(obj2)}, ${inspect(this.obj)}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWithNew exception message","suites":["assert","message"],"updatePoint":{"line":1266,"column":46,"index":43979},"line":1266,"code":"    it(\"assert.calledWithNew exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledWithNew\", this.obj.doSomething), \"expected doSomething to be called with new\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.alwaysCalledWithNew exception message","suites":["assert","message"],"updatePoint":{"line":1270,"column":52,"index":44206},"line":1270,"code":"    it(\"assert.alwaysCalledWithNew exception message\", function () {\n      new this.obj.doSomething(); // eslint-disable-line no-new, new-cap\n\n      this.obj.doSomething();\n      assert.equals(this.message(\"alwaysCalledWithNew\", this.obj.doSomething), \"expected doSomething to always be called with new\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith exception message","suites":["assert","message"],"updatePoint":{"line":1276,"column":43,"index":44511},"line":1276,"code":"    it(\"assert.calledWith exception message\", function () {\n      this.obj.doSomething(4, 3, \"hey\");\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, 1, 3, \"hey\"), `expected doSomething to be called with arguments \\n${color.red(\"4\")} ${color.green(\"1\")} \\n3\\n${inspect('\"hey\"')}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith exception message with multiple calls","suites":["assert","message"],"updatePoint":{"line":1280,"column":63,"index":44841},"line":1280,"code":"    it(\"assert.calledWith exception message with multiple calls\", function () {\n      this.obj.doSomething(4, 3, \"hey\");\n      this.obj.doSomething(1, 3, \"not\");\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, 1, 3, \"hey\"), `${\"expected doSomething to be called with arguments \\n\" + \"Call 1:\\n\"}${color.red(\"4\")} ${color.green(\"1\")} \\n` + `3\\n${inspect('\"hey\"')}\\n` + `Call 2:\\n` + `1\\n` + `3\\n${color.red(inspect('\"not\"'))} ${color.green(inspect('\"hey\"'))} `);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith exception message with large object arguments","suites":["assert","message"],"updatePoint":{"line":1285,"column":71,"index":45340},"line":1285,"code":"    it(\"assert.calledWith exception message with large object arguments\", function () {\n      var calledArg = [{\n        first: \"a\",\n        second: {\n          nest: true\n        },\n        third: [{\n          fourth: {\n            nest: true\n          }\n        }],\n        mismatchKey: true\n      }, \"fifth\"];\n      this.obj.doSomething(calledArg);\n      var expectedArg = [{\n        first: \"a\",\n        second: {\n          nest: true\n        },\n        third: [{\n          fourth: {\n            nest: false\n          }\n        }],\n        mismatchKeyX: true\n      }, \"fifth\"];\n      var actual = this.message(\"calledWith\", this.obj.doSomething, expectedArg);\n      /**\n       * Unfortunately, `util.inspect` behaves differently in node than\n       * it does in browsers, so we need to detect the difference in order\n       * to set the correct value for expected `expected`.\n       *\n       * In node the output uses more whitespace than in browsers.\n       *\n       * @type {boolean}\n       */\n\n      var usesCondensedFormat = inspect([{\n        apple: \"e4d13f88-9b9b-4e05-8abb-f76df2d4ef40\"\n      }, {\n        pear: \"841b661f-80f4-4560-9cf4-133dcffd240c\"\n      }]).indexOf(\"[ {\") === 0;\n      var expected = usesCondensedFormat ? `${\"expected doSomething to be called with arguments \\n\" + \"[ { first: 'a',\\n\" + \"    second: { nest: true },\\n\" + \"    third: [ [Object] ],\\n\"}${color.red(\"    mismatchKey: true },\\n\")}${color.green(\"    mismatchKeyX: true },\\n\")}  'fifth' ]` : `${\"expected doSomething to be called with arguments \\n\" + \"[\\n\" + \"  {\\n\" + \"    first: 'a',\\n\" + \"    second: { nest: true },\\n\" + \"    third: [ [Object] ],\\n\"}${color.red(\"    mismatchKey: true\\n\")}${color.green(\"    mismatchKeyX: true\\n\")}  },\\n` + `  'fifth'\\n` + `]`;\n      assert.equals(actual, expected);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith exception message with a missing argument","suites":["assert","message"],"updatePoint":{"line":1330,"column":67,"index":47139},"line":1330,"code":"    it(\"assert.calledWith exception message with a missing argument\", function () {\n      this.obj.doSomething(4);\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, 1, 3), `expected doSomething to be called with arguments \\n${color.red(\"4\")} ${color.green(\"1\")} \\n${color.green(\"3\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith exception message with an excess argument","suites":["assert","message"],"updatePoint":{"line":1334,"column":67,"index":47453},"line":1334,"code":"    it(\"assert.calledWith exception message with an excess argument\", function () {\n      this.obj.doSomething(4, 3);\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, 1), `expected doSomething to be called with arguments \\n${color.red(\"4\")} ${color.green(\"1\")} \\n${color.red(\"3\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match.any exception message","suites":["assert","message"],"updatePoint":{"line":1338,"column":53,"index":47751},"line":1338,"code":"    it(\"assert.calledWith match.any exception message\", function () {\n      this.obj.doSomething(true, true);\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match.any, false), `${\"expected doSomething to be called with arguments \\n\" + \"true any\\n\"}${color.red(\"true\")} ${color.green(\"false\")} `);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match.defined exception message","suites":["assert","message"],"updatePoint":{"line":1342,"column":57,"index":48082},"line":1342,"code":"    it(\"assert.calledWith match.defined exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match.defined), `expected doSomething to be called with arguments \\n ${color.red(\"defined\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match.truthy exception message","suites":["assert","message"],"updatePoint":{"line":1346,"column":56,"index":48358},"line":1346,"code":"    it(\"assert.calledWith match.truthy exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match.truthy), `expected doSomething to be called with arguments \\n ${color.red(\"truthy\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match.falsy exception message","suites":["assert","message"],"updatePoint":{"line":1350,"column":55,"index":48631},"line":1350,"code":"    it(\"assert.calledWith match.falsy exception message\", function () {\n      this.obj.doSomething(true);\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match.falsy), `expected doSomething to be called with arguments \\n${color.green(\"true\")} ${color.red(\"falsy\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match.same exception message","suites":["assert","message"],"updatePoint":{"line":1354,"column":54,"index":48927},"line":1354,"code":"    it(\"assert.calledWith match.same exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match.same(1)), `expected doSomething to be called with arguments \\n ${color.red(\"same(1)\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match.typeOf exception message","suites":["assert","message"],"updatePoint":{"line":1358,"column":56,"index":49203},"line":1358,"code":"    it(\"assert.calledWith match.typeOf exception message\", function () {\n      this.obj.doSomething();\n      var matcher = match.typeOf(\"string\");\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, matcher), `expected doSomething to be called with arguments \\n ${color.red('typeOf(\"string\")')}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match.instanceOf exception message","suites":["assert","message"],"updatePoint":{"line":1363,"column":60,"index":49530},"line":1363,"code":"    it(\"assert.calledWith match.instanceOf exception message\", function () {\n      this.obj.doSomething();\n      var matcher = match.instanceOf(function CustomType() {\n        return;\n      });\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, matcher), `expected doSomething to be called with arguments \\n ${color.red(\"instanceOf(CustomType)\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match object exception message","suites":["assert","message"],"updatePoint":{"line":1370,"column":56,"index":49902},"line":1370,"code":"    it(\"assert.calledWith match object exception message\", function () {\n      this.obj.doSomething();\n      var matcher = match({\n        some: \"value\",\n        and: 123\n      });\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, matcher), `expected doSomething to be called with arguments \\n ${color.red(\"match(some: value, and: 123)\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match boolean exception message","suites":["assert","message"],"updatePoint":{"line":1378,"column":57,"index":50272},"line":1378,"code":"    it(\"assert.calledWith match boolean exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match(true)), `expected doSomething to be called with arguments \\n ${color.red(\"match(true)\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match number exception message","suites":["assert","message"],"updatePoint":{"line":1382,"column":56,"index":50550},"line":1382,"code":"    it(\"assert.calledWith match number exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match(123)), `expected doSomething to be called with arguments \\n ${color.red(\"match(123)\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match string exception message","suites":["assert","message"],"updatePoint":{"line":1386,"column":56,"index":50826},"line":1386,"code":"    it(\"assert.calledWith match string exception message\", function () {\n      this.obj.doSomething();\n      var matcher = match(\"Sinon\");\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, matcher), `expected doSomething to be called with arguments \\n ${color.red('match(\"Sinon\")')}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match regexp exception message","suites":["assert","message"],"updatePoint":{"line":1391,"column":56,"index":51139},"line":1391,"code":"    it(\"assert.calledWith match regexp exception message\", function () {\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, match(/[a-z]+/)), `expected doSomething to be called with arguments \\n ${color.red(\"match(/[a-z]+/)\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith match test function exception message","suites":["assert","message"],"updatePoint":{"line":1395,"column":63,"index":51432},"line":1395,"code":"    it(\"assert.calledWith match test function exception message\", function () {\n      this.obj.doSomething();\n      var matcher = match({\n        test: function custom() {\n          return;\n        }\n      });\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, matcher), `expected doSomething to be called with arguments \\n ${color.red(\"match(custom)\")}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWithMatch exception message","suites":["assert","message"],"updatePoint":{"line":1404,"column":48,"index":51800},"line":1404,"code":"    it(\"assert.calledWithMatch exception message\", function () {\n      this.obj.doSomething(1, 3, \"hey\");\n      assert.equals(this.message(\"calledWithMatch\", this.obj.doSomething, 4, 3, \"hey\"), `expected doSomething to be called with match \\n${color.red(\"1\")} ${color.green(\"4\")} \\n3\\n${inspect('\"hey\"')}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.alwaysCalledWith exception message","suites":["assert","message"],"updatePoint":{"line":1408,"column":49,"index":52117},"line":1408,"code":"    it(\"assert.alwaysCalledWith exception message\", function () {\n      this.obj.doSomething(1, 3, \"hey\");\n      this.obj.doSomething(1, \"hey\");\n      assert.equals(this.message(\"alwaysCalledWith\", this.obj.doSomething, 1, \"hey\"), `${\"expected doSomething to always be called with arguments \\n\" + \"Call 1:\\n\" + \"1\\n\"}${color.red(\"3\")} ${color.green(inspect('\"hey\"'))} \\n${color.red(inspect('\"hey\"'))}\\n` + `Call 2:\\n` + `1\\n${inspect('\"hey\"')}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.alwaysCalledWithMatch exception message","suites":["assert","message"],"updatePoint":{"line":1413,"column":54,"index":52577},"line":1413,"code":"    it(\"assert.alwaysCalledWithMatch exception message\", function () {\n      this.obj.doSomething(1, 3, \"hey\");\n      this.obj.doSomething(1, \"hey\");\n      assert.equals(this.message(\"alwaysCalledWithMatch\", this.obj.doSomething, 1, \"hey\"), `${\"expected doSomething to always be called with match \\n\" + \"Call 1:\\n\" + \"1\\n\"}${color.red(\"3\")} ${color.green(inspect('\"hey\"'))} \\n${color.red(inspect('\"hey\"'))}\\n` + `Call 2:\\n` + `1\\n${inspect('\"hey\"')}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWithExactly exception message","suites":["assert","message"],"updatePoint":{"line":1418,"column":50,"index":53034},"line":1418,"code":"    it(\"assert.calledWithExactly exception message\", function () {\n      this.obj.doSomething(1, 3, \"hey\");\n      assert.equals(this.message(\"calledWithExactly\", this.obj.doSomething, 1, 3), `expected doSomething to be called with exact arguments \\n1\\n3\\n${color.red(inspect('\"hey\"'))}`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledOnceWithExactly exception messages","suites":["assert","message"],"updatePoint":{"line":1422,"column":55,"index":53336},"line":1422,"code":"    it(\"assert.calledOnceWithExactly exception messages\", function () {\n      assert.equals(this.message(\"calledOnceWithExactly\", this.obj.doSomething, 1, 3, \"bob\"), \"expected doSomething to be called once and with exact arguments \");\n      this.obj.doSomething(4, 3, \"bob\");\n      assert.equals(this.message(\"calledOnceWithExactly\", this.obj.doSomething, 1, 3, \"bob\"), `expected doSomething to be called once and with exact arguments \\n${color.red(\"4\")} ${color.green(\"1\")} \\n3\\n${inspect('\"bob\"')}`);\n      this.obj.doSomething();\n      assert.equals(this.message(\"calledOnceWithExactly\", this.obj.doSomething), `${\"expected doSomething to be called once and with exact arguments \\n\" + \"Call 1:\\n\"}${color.red(\"4\")}\\n${color.red(\"3\")}\\n${color.red(inspect('\"bob\"'))}\\nCall 2:`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith exception message with equal string representations","suites":["assert","message"],"updatePoint":{"line":1429,"column":77,"index":54147},"line":1429,"code":"    it(\"assert.calledWith exception message with equal string representations\", function () {\n      this.obj.doSomething(1234);\n      assert.equals(this.message(\"calledWith\", this.obj.doSomething, \"1234\"), `expected doSomething to be called with arguments \\n${color.red(1234)} ${color.green(inspect('\"1234\"'))} `);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.calledWith message is idempotent","suites":["assert","message"],"updatePoint":{"line":1433,"column":47,"index":54440},"line":1433,"code":"    it(\"assert.calledWith message is idempotent\", function () {\n      this.obj.doSomething(\"hey\");\n      this.message(\"calledWith\", this.obj.doSomething, \"\");\n      this.message(\"calledWith\", this.obj.doSomething, \"\");\n      this.message(\"calledWith\", this.obj.doSomething, \"\");\n      assert.contains(this.message(\"calledWith\", this.obj.doSomething, \"\"), '\"hey\"');\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.alwaysCalledWithExactly exception message","suites":["assert","message"],"updatePoint":{"line":1440,"column":56,"index":54822},"line":1440,"code":"    it(\"assert.alwaysCalledWithExactly exception message\", function () {\n      this.obj.doSomething(1, 3, \"hey\");\n      this.obj.doSomething(1, 3);\n      assert.equals(this.message(\"alwaysCalledWithExactly\", this.obj.doSomething, 1, 3), `${\"expected doSomething to always be called with exact arguments \\n\" + \"Call 1:\\n\" + \"1\\n\" + \"3\\n\"}${color.red(inspect('\"hey\"'))}\\n` + `Call 2:\\n` + `1\\n` + `3`);\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.neverCalledWith exception message","suites":["assert","message"],"updatePoint":{"line":1445,"column":48,"index":55223},"line":1445,"code":"    it(\"assert.neverCalledWith exception message\", function () {\n      this.obj.doSomething(1, 2, 3);\n      assert.equals(this.message(\"neverCalledWith\", this.obj.doSomething, 1, 2), \"expected doSomething to never be called with arguments 1, 2\\n    doSomething(1, 2, 3)\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.neverCalledWithMatch exception message","suites":["assert","message"],"updatePoint":{"line":1449,"column":53,"index":55509},"line":1449,"code":"    it(\"assert.neverCalledWithMatch exception message\", function () {\n      this.obj.doSomething(1, 2, 3);\n      assert.equals(this.message(\"neverCalledWithMatch\", this.obj.doSomething, 1, 2), \"expected doSomething to never be called with match 1, 2\\n    doSomething(1, 2, 3)\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.threw exception message","suites":["assert","message"],"updatePoint":{"line":1453,"column":38,"index":55781},"line":1453,"code":"    it(\"assert.threw exception message\", function () {\n      this.obj.doSomething(1, 3, \"hey\");\n      this.obj.doSomething(1, 3);\n      assert.equals(this.message(\"threw\", this.obj.doSomething), \"doSomething did not throw exception\\n    doSomething(1, 3, 'hey')\\n    doSomething(1, 3)\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.alwaysThrew exception message","suites":["assert","message"],"updatePoint":{"line":1458,"column":44,"index":56083},"line":1458,"code":"    it(\"assert.alwaysThrew exception message\", function () {\n      this.obj.doSomething(1, 3, \"hey\");\n      this.obj.doSomething(1, 3);\n      assert.equals(this.message(\"alwaysThrew\", this.obj.doSomething), \"doSomething did not always throw exception\\n    doSomething(1, 3, 'hey')\\n    doSomething(1, 3)\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"assert.match exception message","suites":["assert","message"],"updatePoint":{"line":1463,"column":38,"index":56392},"line":1463,"code":"    it(\"assert.match exception message\", function () {\n      assert.equals(this.message(\"match\", {\n        foo: 1\n      }, [1, 3]), \"expected value to match\\n    expected = [ 1, 3 ]\\n    actual = { foo: 1 }\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"should use the symbol's description in exception messages","suites":["assert","with symbol method names"],"updatePoint":{"line":1494,"column":65,"index":57163},"line":1494,"code":"    it(\"should use the symbol's description in exception messages\", function () {\n      var symbol = Symbol(\"Something Symbolic\");\n      setupSymbol(symbol);\n      assert.equals(createExceptionMessage(\"called\", obj[symbol]), \"expected Symbol(Something Symbolic) to have been called at least once but was never called\");\n    });","file":"assert-test.js","skipped":false,"dir":"test"},{"name":"adds and uses a custom behavior","suites":["behaviors"],"updatePoint":{"line":8,"column":37,"index":177},"line":8,"code":"  it(\"adds and uses a custom behavior\", function () {\n    sinon.addBehavior(\"returnsNum\", function (fake, n) {\n      fake.returns(n);\n    });\n    var stub = sinon.stub().returnsNum(42);\n    assert.equals(stub(), 42);\n  });","file":"behavior-test.js","skipped":false,"dir":"test"},{"name":"should return unaltered target when only one argument","suites":["extend"],"updatePoint":{"line":9,"column":59,"index":237},"line":9,"code":"  it(\"should return unaltered target when only one argument\", function () {\n    var target = {\n      hello: \"world\"\n    };\n    extend(target);\n    assert.equals(target, {\n      hello: \"world\"\n    });\n  });","file":"extend-test.js","skipped":false,"dir":"test"},{"name":"should copy all (own) properties into first argument, from all subsequent arguments","suites":["extend"],"updatePoint":{"line":18,"column":89,"index":473},"line":18,"code":"  it(\"should copy all (own) properties into first argument, from all subsequent arguments\", function () {\n    var target = {\n      hello: \"world\"\n    };\n    extend(target, {\n      a: \"a\"\n    }, {\n      b: \"b\"\n    });\n    assert.equals(target.hello, \"world\");\n    assert.equals(target.a, \"a\");\n    assert.equals(target.b, \"b\");\n  });","file":"extend-test.js","skipped":false,"dir":"test"},{"name":"should copy toString method into target","suites":["extend"],"updatePoint":{"line":31,"column":45,"index":762},"line":31,"code":"  it(\"should copy toString method into target\", function () {\n    var target = {\n      hello: \"world\",\n      toString: function () {\n        return \"hello world\";\n      }\n    };\n    var source = {\n      toString: function () {\n        return \"hello source\";\n      }\n    };\n    extend(target, source);\n    assert.same(target.toString, source.toString);\n  });","file":"extend-test.js","skipped":false,"dir":"test"},{"name":"must copy the last occurring property into the target","suites":["extend"],"updatePoint":{"line":46,"column":59,"index":1134},"line":46,"code":"  it(\"must copy the last occurring property into the target\", function () {\n    var target = {\n      a: 0,\n      b: 0,\n      c: 0,\n      d: 0\n    };\n    var source1 = {\n      a: 1,\n      b: 1,\n      c: 1\n    };\n    var source2 = {\n      a: 2,\n      b: 2\n    };\n    var source3 = {\n      a: 3\n    };\n    extend(target, source1, source2, source3);\n    assert.equals(target.a, 3);\n    assert.equals(target.b, 2);\n    assert.equals(target.c, 1);\n    assert.equals(target.d, 0);\n  });","file":"extend-test.js","skipped":false,"dir":"test"},{"name":"copies all properties","suites":["extend"],"updatePoint":{"line":71,"column":27,"index":1582},"line":71,"code":"  it(\"copies all properties\", function () {\n    var object1 = {\n      prop1: null,\n      prop2: false\n    };\n    var object2 = {\n      prop3: \"hey\",\n      prop4: 4\n    };\n    var result = extend({}, object1, object2);\n    var expected = {\n      prop1: null,\n      prop2: false,\n      prop3: \"hey\",\n      prop4: 4\n    };\n    assert.equals(result, expected);\n  });","file":"extend-test.js","skipped":false,"dir":"test"},{"name":"copies accessor properties into the target","suites":["extend"],"updatePoint":{"line":89,"column":48,"index":1966},"line":89,"code":"  it(\"copies accessor properties into the target\", function () {\n    var target = {\n      hello: \"hello\"\n    };\n    const obj = {\n      private: 1\n    };\n    Object.defineProperty(obj, \"lexical\", {\n      configurable: true,\n      enumerable: true,\n      get: () => this.private,\n      set: value => {\n        this.private = value;\n      }\n    });\n    Object.defineProperty(obj, \"instance\", {\n      configurable: true,\n      enumerable: true,\n      get: () => obj.private,\n      set: value => {\n        obj.private = value;\n      }\n    });\n    Object.defineProperty(obj, \"bound\", {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return this.private;\n      },\n      set: function (value) {\n        this.private = value;\n      }\n    });\n    extend(target, obj);\n    assert.equals(target.hello, \"hello\");\n    assert.equals(target.lexical === undefined, true);\n    assert.equals(target.instance, 1);\n    assert.equals(target.bound, 1);\n    target.lexical = 2;\n    assert.equals(target.lexical, 2);\n    assert.equals(target.instance, 1);\n    assert.equals(target.bound, 1);\n    target.instance = 3;\n    assert.equals(target.lexical, 2);\n    assert.equals(target.instance, 3);\n    assert.equals(target.bound, 1);\n    target.bound = 4;\n    assert.equals(target.lexical, 2);\n    assert.equals(target.instance, 3);\n    assert.equals(target.bound, 4);\n  });","file":"extend-test.js","skipped":false,"dir":"test"},{"name":"does not attempt to write to the property","suites":["extend","when 'name' property is not writable"],"updatePoint":{"line":141,"column":49,"index":3414},"line":141,"code":"    it(\"does not attempt to write to the property\", function () {\n      var object1 = {\n        prop1: null\n      };\n      Object.defineProperty(object1, \"name\", {\n        configurable: false,\n        enumerable: true,\n        value: \"not-writable\",\n        writable: false\n      });\n      var object2 = {\n        prop2: \"hey\",\n        name: \"write-attempt\"\n      };\n      var result = extend(object1, object2);\n      var expected = {\n        prop1: null,\n        prop2: \"hey\",\n        name: \"not-writable\"\n      };\n      assert.equals(result, expected);\n    });","file":"extend-test.js","skipped":false,"dir":"test"},{"name":"should return a Sinon proxy","suites":[],"updatePoint":{"line":28,"column":33,"index":753},"line":28,"code":"  it(\"should return a Sinon proxy\", function () {\n    var actual = argument ? func(argument) : func();\n    assert.isProxy(actual);\n  });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return a unary Function named 'fake'","suites":["fake","module"],"updatePoint":{"line":47,"column":51,"index":1157},"line":47,"code":"    it(\"should return a unary Function named 'fake'\", function () {\n      assert.equals(fake.length, 1);\n\n      if (hasFunctionNameSupport) {\n        assert.equals(fake.name, \"fake\");\n      }\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should keep the `this` context of the wrapped function","suites":["fake","when passed a Function"],"updatePoint":{"line":60,"column":62,"index":1542},"line":60,"code":"    it(\"should keep the `this` context of the wrapped function\", function () {\n      function method() {\n        return this.foo;\n      }\n\n      var o = {\n        foo: 42\n      };\n      var fakeMethod = fake(method);\n      var result = fakeMethod.call(o);\n      assert.equals(fakeMethod.callCount, 1);\n      assert.equals(result, 42);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should reject non-Function argument","suites":["fake","when passed no value"],"updatePoint":{"line":78,"column":41,"index":2007},"line":78,"code":"  it(\"should reject non-Function argument\", function () {\n    var nonFuncs = [\"\", 123, new Date(), {}, false, undefined, true, null];\n    nonFuncs.forEach(function (nf) {\n      assert.exception(function () {\n        fake(nf);\n      });\n    });\n  });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"it should be a reference for the callback in the last call","suites":["fake",".callback"],"updatePoint":{"line":87,"column":66,"index":2320},"line":87,"code":"    it(\"it should be a reference for the callback in the last call\", function () {\n      var f = fake();\n\n      var callback1 = function () {\n        return;\n      };\n\n      var callback2 = function () {\n        return;\n      };\n\n      f(1, 2, 3, callback1);\n      assert.equals(f.callback, callback1);\n      f(1, 2, 3, callback2);\n      assert.equals(f.callback, callback2);\n      f(1, 2, 3);\n      assert.isUndefined(f.callback);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should be 'fake'","suites":["fake",".displayName"],"updatePoint":{"line":107,"column":24,"index":2765},"line":107,"code":"    it(\"should be 'fake'\", function () {\n      var fakes = [fake(), fake.returns(42), fake.throws(new Error()), fake.resolves(42), fake.rejects(new Error()), fake.yields(42), fake.yieldsAsync(42)];\n      fakes.forEach(function (f) {\n        assert.equals(f.displayName, \"fake\");\n      });\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should start with 'fake#'","suites":["fake",".id"],"updatePoint":{"line":115,"column":33,"index":3109},"line":115,"code":"    it(\"should start with 'fake#'\", function () {\n      for (var i = 0; i < 100; i++) {\n        assert.isTrue(fake().id.indexOf(\"fake#\") === 0);\n      }\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should be the first argument from the last call","suites":["fake",".firstArg"],"updatePoint":{"line":122,"column":55,"index":3336},"line":122,"code":"    it(\"should be the first argument from the last call\", function () {\n      var f = fake();\n      f(41, 42, 43);\n      assert.equals(f.firstArg, 41);\n      f(44, 45);\n      assert.equals(f.firstArg, 44);\n      f(46);\n      assert.equals(f.firstArg, 46);\n      f(false, true, 47, \"string\");\n      assert.isFalse(f.firstArg);\n      f(\"string\", false, true, 47);\n      assert.equals(f.firstArg, \"string\");\n      f(47, \"string\", false, true);\n      assert.equals(f.firstArg, 47);\n      f(true, 47, \"string\", false);\n      assert.isTrue(f.firstArg);\n      f();\n      assert.isUndefined(f.firstArg);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should be the last argument from the last call","suites":["fake",".lastArg"],"updatePoint":{"line":143,"column":54,"index":3982},"line":143,"code":"    it(\"should be the last argument from the last call\", function () {\n      var f = fake();\n      f(41, 42, 43);\n      assert.equals(f.lastArg, 43);\n      f(44, 45);\n      assert.equals(f.lastArg, 45);\n      f(46);\n      assert.equals(f.lastArg, 46);\n      f(false, true, 47, \"string\");\n      assert.equals(f.lastArg, \"string\");\n      f(\"string\", false, true, 47);\n      assert.equals(f.lastArg, 47);\n      f(47, \"string\", false, true);\n      assert.isTrue(f.lastArg);\n      f(true, 47, \"string\", false);\n      assert.isFalse(f.lastArg);\n      f();\n      assert.isUndefined(f.lastArg);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return a function that returns the argument","suites":["fake",".returns"],"updatePoint":{"line":164,"column":58,"index":4624},"line":164,"code":"    it(\"should return a function that returns the argument\", function () {\n      var expected = 42;\n      var myFake = fake.returns(expected);\n      var actual = myFake();\n      assert.equals(actual, expected);\n    }); // eslint-disable-next-line mocha/no-setup-in-describe","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return a function that throws an Error, that is the argument","suites":["fake",".throws"],"updatePoint":{"line":174,"column":75,"index":4995},"line":174,"code":"    it(\"should return a function that throws an Error, that is the argument\", function () {\n      var expectedMessage = \"42\";\n      var myFake = fake.throws(expectedMessage);\n      assert.exception(function () {\n        myFake();\n      });\n      /* eslint-disable no-restricted-syntax */\n\n      try {\n        myFake();\n      } catch (error) {\n        assert.equals(error.message, expectedMessage);\n      }\n      /* eslint-disable no-restricted-syntax */\n\n    }); // eslint-disable-next-line mocha/no-setup-in-describe","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return the same error type as it is passed","suites":["fake",".throws"],"updatePoint":{"line":192,"column":57,"index":5532},"line":192,"code":"    it(\"should return the same error type as it is passed\", function () {\n      var expected = new TypeError(\"hello sailor\");\n      var myFake = fake.throws(expected);\n      /* eslint-disable no-restricted-syntax */\n\n      try {\n        myFake();\n      } catch (actual) {\n        assert.isTrue(actual instanceof TypeError);\n      }\n      /* eslint-disable no-restricted-syntax */\n\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should throw an Error","suites":["fake",".throws","when passed a String"],"updatePoint":{"line":206,"column":31,"index":5946},"line":206,"code":"      it(\"should throw an Error\", function () {\n        var expected = \"lorem ipsum\";\n        var myFake = fake.throws(expected);\n        /* eslint-disable no-restricted-syntax */\n\n        try {\n          myFake();\n        } catch (actual) {\n          assert.isTrue(actual instanceof Error);\n        }\n        /* eslint-disable no-restricted-syntax */\n\n      });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return a function that resolves to the argument","suites":["fake",".resolves"],"updatePoint":{"line":223,"column":62,"index":6427},"line":223,"code":"    it(\"should return a function that resolves to the argument\", function () {\n      var expected = 42;\n      var myFake = fake.resolves(expected);\n      return myFake().then(function (actual) {\n        assert.equals(actual, expected);\n      });\n    }); // eslint-disable-next-line mocha/no-setup-in-describe","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return a function that rejects to the argument","suites":["fake",".rejects"],"updatePoint":{"line":235,"column":61,"index":6852},"line":235,"code":"    it(\"should return a function that rejects to the argument\", function () {\n      var expectedMessage = \"42\";\n      var myFake = fake.rejects(expectedMessage);\n      return myFake().catch(function (actual) {\n        assert.equals(actual.message, expectedMessage);\n      });\n    }); // eslint-disable-next-line mocha/no-setup-in-describe","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return the same error type as it is passed","suites":["fake",".rejects"],"updatePoint":{"line":244,"column":57,"index":7225},"line":244,"code":"    it(\"should return the same error type as it is passed\", function () {\n      var expected = new TypeError(\"hello world\");\n      var myFake = fake.rejects(expected);\n      return myFake().catch(function (actual) {\n        assert.isTrue(actual instanceof TypeError);\n      });\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should reject with an Error when passed a String","suites":["fake",".rejects"],"updatePoint":{"line":251,"column":56,"index":7510},"line":251,"code":"    it(\"should reject with an Error when passed a String\", function () {\n      var expected = \"lorem ipsum\";\n      var myFake = fake.rejects(expected);\n      return myFake().catch(function (actual) {\n        assert.isTrue(actual instanceof Error);\n      });\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should call a callback with the provided values","suites":["fake",".yields"],"updatePoint":{"line":262,"column":55,"index":7924},"line":262,"code":"    it(\"should call a callback with the provided values\", function () {\n      var callback = sinon.spy();\n      var myFake = fake.yields(\"one\", \"two\", \"three\");\n      myFake(callback);\n      sinon.assert.calledOnce(callback);\n      sinon.assert.calledWith(callback, \"one\", \"two\", \"three\");\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should call the last function argument","suites":["fake",".yields"],"updatePoint":{"line":269,"column":46,"index":8213},"line":269,"code":"    it(\"should call the last function argument\", function () {\n      var callback = sinon.spy();\n      var myFake = fake.yields();\n      myFake(function () {\n        return;\n      }, callback);\n      sinon.assert.calledOnce(callback);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should throw if the last argument is not a function","suites":["fake",".yields"],"updatePoint":{"line":277,"column":59,"index":8469},"line":277,"code":"    it(\"should throw if the last argument is not a function\", function () {\n      var myFake = fake.yields();\n      assert.exception(function () {\n        myFake(function () {\n          return;\n        }, \"not a function\");\n      }, /TypeError: Expected last argument to be a function/);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should call the callback asynchronously with the provided values","suites":["fake",".yieldsAsync"],"updatePoint":{"line":289,"column":72,"index":8937},"line":289,"code":"    it(\"should call the callback asynchronously with the provided values\", function (done) {\n      var callback = sinon.spy();\n      var myFake = fake.yieldsAsync(\"one\", \"two\", \"three\");\n      myFake(callback);\n      sinon.assert.notCalled(callback);\n      setTimeout(function () {\n        sinon.assert.calledOnce(callback);\n        sinon.assert.calledWith(callback, \"one\", \"two\", \"three\");\n        done();\n      }, 5); // IE 11 and Edge are sometimes slow\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should call the last function argument","suites":["fake",".yieldsAsync"],"updatePoint":{"line":300,"column":46,"index":9376},"line":300,"code":"    it(\"should call the last function argument\", function (done) {\n      var callback = sinon.spy();\n      var myFake = fake.yieldsAsync();\n      myFake(function () {\n        return;\n      }, callback);\n      sinon.assert.notCalled(callback);\n      setTimeout(function () {\n        sinon.assert.calledOnce(callback);\n        done();\n      }, 5); // IE 11 and Edge are sometimes slow\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should throw if the last argument is not a function","suites":["fake",".yieldsAsync"],"updatePoint":{"line":312,"column":59,"index":9780},"line":312,"code":"    it(\"should throw if the last argument is not a function\", function () {\n      var myFake = fake.yieldsAsync();\n      assert.exception(function () {\n        myFake(function () {\n          return;\n        }, \"not a function\");\n      }, /TypeError: Expected last argument to be a function/);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should set the name of the fake to the given string","suites":["fake",".named"],"updatePoint":{"line":329,"column":59,"index":10306},"line":329,"code":"    it(\"should set the name of the fake to the given string\", function () {\n      var myFake = fake().named(\"something\");\n      assert.equals(myFake.name, \"something\");\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return true if called before","suites":["fake",".calledBefore/After"],"updatePoint":{"line":343,"column":43,"index":10662},"line":343,"code":"    it(\"should return true if called before\", function () {\n      assert.isTrue(fakeA.calledBefore(fakeB));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return false if not called before","suites":["fake",".calledBefore/After"],"updatePoint":{"line":346,"column":48,"index":10783},"line":346,"code":"    it(\"should return false if not called before\", function () {\n      assert.isFalse(fakeB.calledBefore(fakeA));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return true if called after","suites":["fake",".calledBefore/After"],"updatePoint":{"line":349,"column":42,"index":10899},"line":349,"code":"    it(\"should return true if called after\", function () {\n      assert.isTrue(fakeB.calledAfter(fakeA));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return false if not called after","suites":["fake",".calledBefore/After"],"updatePoint":{"line":352,"column":47,"index":11018},"line":352,"code":"    it(\"should return false if not called after\", function () {\n      assert.isFalse(fakeA.calledAfter(fakeB));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should pass sinon.assert.callOrder","suites":["fake",".calledBefore/After"],"updatePoint":{"line":355,"column":42,"index":11133},"line":355,"code":"    it(\"should pass sinon.assert.callOrder\", function () {\n      refute.exception(function () {\n        sinon.assert.callOrder(fakeA, fakeB);\n      });\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should fail sinon.assert.callOrder","suites":["fake",".calledBefore/After"],"updatePoint":{"line":360,"column":42,"index":11293},"line":360,"code":"    it(\"should fail sinon.assert.callOrder\", function () {\n      assert.exception(function () {\n        sinon.assert.callOrder(fakeB, fakeA);\n      }, {\n        name: \"AssertError\"\n      });\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return true if called immediately before","suites":["fake",".calledBefore/After"],"updatePoint":{"line":367,"column":55,"index":11505},"line":367,"code":"    it(\"should return true if called immediately before\", function () {\n      assert.isTrue(fakeA.calledImmediatelyBefore(fakeB));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return false if not called immediately before","suites":["fake",".calledBefore/After"],"updatePoint":{"line":370,"column":60,"index":11649},"line":370,"code":"    it(\"should return false if not called immediately before\", function () {\n      assert.isFalse(fakeB.calledImmediatelyBefore(fakeA));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return true if called immediately after","suites":["fake",".calledBefore/After"],"updatePoint":{"line":373,"column":54,"index":11788},"line":373,"code":"    it(\"should return true if called immediately after\", function () {\n      assert.isTrue(fakeB.calledImmediatelyAfter(fakeA));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should return false if not called immediately after","suites":["fake",".calledBefore/After"],"updatePoint":{"line":376,"column":59,"index":11930},"line":376,"code":"    it(\"should return false if not called immediately after\", function () {\n      assert.isFalse(fakeA.calledImmediatelyAfter(fakeB));\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"is delegated to proxy","suites":["fake",".printf"],"updatePoint":{"line":381,"column":29,"index":12085},"line":381,"code":"    it(\"is delegated to proxy\", function () {\n      var myFake = fake();\n      var proxy = createProxy(noop, noop);\n      assert.same(myFake.printf, proxy.printf);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should exist and be a function","suites":["fake",".usingPromise"],"updatePoint":{"line":389,"column":38,"index":12349},"line":389,"code":"    it(\"should exist and be a function\", function () {\n      assert(fake.usingPromise);\n      assert.isFunction(fake.usingPromise);\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should set the promise used by resolve","suites":["fake",".usingPromise"],"updatePoint":{"line":393,"column":46,"index":12497},"line":393,"code":"    it(\"should set the promise used by resolve\", function () {\n      var promise = {\n        resolve: function (value) {\n          return Promise.resolve(value);\n        }\n      };\n      var object = {};\n      var myFake = fake.usingPromise(promise).resolves(object);\n      return myFake().then(function (actual) {\n        assert.same(actual, object, \"Same object resolved\");\n      });\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"should set the promise used by reject","suites":["fake",".usingPromise"],"updatePoint":{"line":405,"column":45,"index":12890},"line":405,"code":"    it(\"should set the promise used by reject\", function () {\n      var promise = {\n        reject: function (err) {\n          return Promise.reject(err);\n        }\n      };\n      var reason = new Error();\n      var myFake = fake.usingPromise(promise).rejects(reason);\n      return myFake().then(function () {\n        referee.fail(\"this should not resolve\");\n      }).catch(function (actual) {\n        assert.same(actual, reason, \"Same object resolved\");\n      });\n    });","file":"fake-test.js","skipped":false,"dir":"test"},{"name":"#283","suites":["issues"],"updatePoint":{"line":21,"column":10,"index":548},"line":21,"code":"  it(\"#283\", function () {\n    function testSinonFakeTimersWith(interval, ticks) {\n      var clock = sinon.useFakeTimers();\n      var spy = sinon.spy();\n      var id = setInterval(spy, interval);\n      assert(!spy.calledOnce);\n      clock.tick(ticks);\n      assert(spy.callCount === Math.floor(ticks / interval));\n      clearInterval(id);\n      clock.restore();\n    }\n\n    testSinonFakeTimersWith(10, 101);\n    testSinonFakeTimersWith(99, 101);\n    testSinonFakeTimersWith(100, 200);\n    testSinonFakeTimersWith(199, 200);\n    testSinonFakeTimersWith(500, 1001);\n    testSinonFakeTimersWith(1000, 1001);\n  });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"stub out fs.readFileSync","suites":["issues","#458","on node"],"updatePoint":{"line":47,"column":34,"index":1391},"line":47,"code":"      it(\"stub out fs.readFileSync\", function () {\n        var fs = require(\"fs\");\n\n        var testCase = this;\n        refute.exception(function () {\n          testCase.sandbox.stub(fs, \"readFileSync\");\n        });\n      });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"useFakeTimers should be idempotent","suites":["issues","#624"],"line":59,"code":"    it.skip(\"useFakeTimers should be idempotent\", function () {","file":"issues/issues-test.js","skipped":true,"dir":"test"},{"name":"must not throw error","suites":["issues","#852 - createStubInstance on inherited constructors"],"updatePoint":{"line":73,"column":28,"index":2399},"line":73,"code":"    it(\"must not throw error\", function () {\n      var A = function () {\n        return;\n      };\n\n      var B = function () {\n        return;\n      };\n\n      B.prototype = Object.create(A.prototype);\n      B.prototype.constructor = A;\n\n      B.prototype.noop = function () {\n        return;\n      };\n\n      refute.exception(function () {\n        sinon.createStubInstance(B);\n      });\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"must be idempotent","suites":["issues","#852(2) - createStubInstance should on same constructor"],"updatePoint":{"line":95,"column":26,"index":2881},"line":95,"code":"    it(\"must be idempotent\", function () {\n      var A = function () {\n        return;\n      };\n\n      A.prototype.meth = function () {\n        return;\n      };\n\n      refute.exception(function () {\n        sinon.createStubInstance(A);\n        sinon.createStubInstance(A);\n      });\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should not rename spies","suites":["issues","#950 - first execution of a spy as a method renames that spy"],"updatePoint":{"line":121,"column":31,"index":3458},"line":121,"code":"    it(\"should not rename spies\", function () {\n      var nameDescriptor = Object.getOwnPropertyDescriptor(bob, \"name\");\n      var expectedName = nameDescriptor && nameDescriptor.configurable ? \"bob\" : \"proxy\";\n      var spy = sinon.spy(bob);\n      assert.equals(spy.name, expectedName);\n      var obj = {\n        methodName: spy\n      };\n      assert.equals(spy.name, expectedName);\n      spy();\n      assert.equals(spy.name, expectedName);\n      obj.methodName.call(null);\n      assert.equals(spy.name, expectedName);\n      obj.methodName();\n      assert.equals(spy.name, expectedName);\n      obj.otherProp = spy;\n      obj.otherProp();\n      assert.equals(spy.name, expectedName);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should stub `watch` method on any Object","suites":["issues","#1026"],"updatePoint":{"line":142,"column":48,"index":4207},"line":142,"code":"    it(\"should stub `watch` method on any Object\", function () {\n      // makes sure that Object.prototype.watch is set back to its old value\n      function restore(oldWatch) {\n        if (oldWatch) {\n          Object.prototype.watch = oldWatch; // eslint-disable-line no-extend-native\n        } else {\n          delete Object.prototype.watch;\n        }\n      }\n\n      var oldWatch; // eslint-disable-next-line no-restricted-syntax\n\n      try {\n        oldWatch = Object.prototype.watch;\n\n        if (typeof Object.prototype.watch !== \"function\") {\n          // eslint-disable-next-line no-extend-native\n          Object.prototype.watch = function rolex() {\n            return;\n          };\n        }\n\n        var stubbedObject = sinon.stub({\n          watch: function () {\n            return;\n          }\n        });\n        stubbedObject.watch();\n        assert.isArray(stubbedObject.watch.args);\n      } catch (error) {\n        restore(oldWatch);\n        throw error;\n      }\n\n      restore(oldWatch);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"Ensures different matchers will not be tested against each other","suites":["issues","#1154"],"updatePoint":{"line":180,"column":72,"index":5284},"line":180,"code":"    it(\"Ensures different matchers will not be tested against each other\", function () {\n      var match = sinon.match;\n      var stub = sinon.stub;\n      var readFile = stub();\n\n      function endsWith(str, suffix) {\n        return str.indexOf(suffix) + suffix.length === str.length;\n      }\n\n      function suffixA(fileName) {\n        return endsWith(fileName, \"suffixa\");\n      }\n\n      function suffixB(fileName) {\n        return endsWith(fileName, \"suffixb\");\n      }\n\n      var argsA = match(suffixA);\n      var argsB = match(suffixB);\n      var firstFake = readFile.withArgs(argsA);\n      var secondFake = readFile.withArgs(argsB);\n      assert(firstFake !== secondFake);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should reset spies","suites":["issues","#1372 - sandbox.resetHistory"],"updatePoint":{"line":205,"column":26,"index":5988},"line":205,"code":"    it(\"should reset spies\", function () {\n      var spy = this.sandbox.spy();\n      spy();\n      assert.equals(spy.callCount, 1);\n      spy();\n      assert.equals(spy.callCount, 2);\n      this.sandbox.resetHistory();\n      spy();\n      assert.equals(spy.callCount, 1); // should not fail but fails\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"Call order takes into account both calledBefore and callCount","suites":["issues","#1398"],"updatePoint":{"line":217,"column":69,"index":6378},"line":217,"code":"    it(\"Call order takes into account both calledBefore and callCount\", function () {\n      var s1 = sinon.spy();\n      var s2 = sinon.spy();\n      s1();\n      s2();\n      s1();\n      assert.exception(function () {\n        sinon.assert.callOrder(s2, s1, s2);\n      });\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"stub.onCall","suites":["issues","#1474 - promise library should be propagated through fakes and behaviors"],"updatePoint":{"line":257,"column":19,"index":7364},"line":257,"code":"    it(\"stub.onCall\", function () {\n      stub.onSecondCall().resolves(\"resolved again\");\n      makeAssertions(stub(), \"tap resolved\");\n      makeAssertions(stub(), \"tap resolved again\");\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"stub.withArgs","suites":["issues","#1474 - promise library should be propagated through fakes and behaviors"],"updatePoint":{"line":262,"column":21,"index":7562},"line":262,"code":"    it(\"stub.withArgs\", function () {\n      stub.withArgs(42).resolves(\"resolved again\");\n      stub.withArgs(true).resolves(\"okay\");\n      makeAssertions(stub(), \"tap resolved\");\n      makeAssertions(stub(42), \"tap resolved again\");\n      makeAssertions(stub(true), \"tap okay\");\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"stub window innerHeight","suites":["issues","#1456"],"updatePoint":{"line":305,"column":31,"index":8753},"line":305,"code":"    it(\"stub window innerHeight\", function () {\n      sandbox.stub(window, \"innerHeight\").value(111);\n      assert.equals(window.innerHeight, 111);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"sets correct firstCall.returnValue","suites":["issues","#1487 - withArgs() returnValue"],"updatePoint":{"line":316,"column":42,"index":9157},"line":316,"code":"    it(\"sets correct firstCall.returnValue\", function () {\n      assert.equals(this.stub.withArgs(\"arg\").firstCall.returnValue, \"return value\");\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"sets correct lastCall.returnValue","suites":["issues","#1487 - withArgs() returnValue"],"updatePoint":{"line":319,"column":41,"index":9309},"line":319,"code":"    it(\"sets correct lastCall.returnValue\", function () {\n      assert.equals(this.stub.withArgs(\"arg\").lastCall.returnValue, \"return value\");\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"can stub methods on the prototype","suites":["issues","#1512 - sandbox.stub(obj,protoMethod)"],"updatePoint":{"line":331,"column":41,"index":9686},"line":331,"code":"    it(\"can stub methods on the prototype\", function () {\n      var proto = {\n        someFunction: function () {\n          return;\n        }\n      };\n      var instance = Object.create(proto);\n      var stub = sandbox.stub(instance, \"someFunction\");\n      instance.someFunction();\n      assert(stub.called);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should be possible stub filter","suites":["issues","#1521 - stubbing Array.prototype.filter"],"updatePoint":{"line":352,"column":38,"index":10290},"line":352,"code":"    it(\"should be possible stub filter\", function () {\n      var stub = sinon.stub(Array.prototype, \"filter\");\n      [1, 2, 3].filter(function () {\n        return false;\n      });\n      assert(stub.calledOnce);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should create a fake server without throwing","suites":["issues","#1531 - some copied functions on root sinon module throw"],"updatePoint":{"line":361,"column":52,"index":10614},"line":361,"code":"    it(\"should create a fake server without throwing\", function () {\n      refute.exception(function () {\n        sinon.createFakeServer();\n      });\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should create a fake server with clock without throwing","suites":["issues","#1531 - some copied functions on root sinon module throw"],"updatePoint":{"line":366,"column":63,"index":10783},"line":366,"code":"    it(\"should create a fake server with clock without throwing\", function () {\n      refute.exception(function () {\n        sinon.createFakeServerWithClock();\n      });\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should call original method","suites":["issues","#1442 - callThrough with a mock expectation"],"updatePoint":{"line":373,"column":35,"index":11011},"line":373,"code":"    it(\"should call original method\", function () {\n      var foo = {\n        bar: function () {\n          return;\n        }\n      };\n      var mock = this.sandbox.mock(foo);\n      mock.expects(\"bar\").callThrough();\n      foo.bar();\n      mock.verify();\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should reset property spies","suites":["issues","#1648 - resetHistory "],"updatePoint":{"line":386,"column":35,"index":11329},"line":386,"code":"    it(\"should reset property spies\", function () {\n      var obj = {\n        func: function () {\n          return;\n        },\n\n        get prop() {\n          return 1;\n        }\n\n      };\n      var sandbox = sinon.createSandbox();\n      var spyFunc = sandbox.spy(obj, \"func\");\n      var spyProp = sandbox.spy(obj, \"prop\", [\"get\"]);\n      refute.isTrue(spyFunc.called);\n      refute.isTrue(spyProp.get.called);\n      obj.func(); //eslint-disable-next-line no-unused-expressions\n\n      obj.prop;\n      assert.isTrue(spyFunc.called);\n      assert.isTrue(spyProp.get.called);\n      sandbox.resetHistory();\n      refute.isTrue(spyFunc.called);\n      refute.isTrue(spyProp.get.called);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore all stubs","suites":["issues","#1775 - sinon.restore"],"updatePoint":{"line":415,"column":32,"index":12198},"line":415,"code":"    it(\"should restore all stubs\", function () {\n      var myApi = {\n        someMethod: function someMethod() {\n          // eslint-disable-next-line no-console\n          console.log(\"test method!\");\n        }\n      };\n      sinon.stub(myApi, \"someMethod\");\n      sinon.restore();\n      sinon.stub(myApi, \"someMethod\"); // TypeError: Attempted to wrap someMethod which is already wrapped\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore all spies","suites":["issues","#1775 - sinon.restore"],"updatePoint":{"line":426,"column":32,"index":12595},"line":426,"code":"    it(\"should restore all spies\", function () {\n      var myApi = {\n        someMethod: function someMethod() {\n          // eslint-disable-next-line no-console\n          console.log(\"test method!\");\n        }\n      };\n      sinon.spy(myApi, \"someMethod\");\n      sinon.restore();\n      sinon.spy(myApi, \"someMethod\"); // TypeError: Attempted to wrap someMethod which is already wrapped\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore all mocks","suites":["issues","#1775 - sinon.restore"],"updatePoint":{"line":437,"column":32,"index":12990},"line":437,"code":"    it(\"should restore all mocks\", function () {\n      var myApi = {\n        someMethod: function someMethod() {\n          // eslint-disable-next-line no-console\n          console.log(\"test method!\");\n        }\n      };\n      sinon.mock(myApi);\n      sinon.restore();\n      sinon.mock(myApi); // TypeError: Attempted to wrap someMethod which is already wrapped\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore spied fake timers","suites":["issues","#1801 - sinon.restore spied fakeTimers"],"updatePoint":{"line":450,"column":40,"index":13440},"line":450,"code":"    it(\"should restore spied fake timers\", function () {\n      var originalSetTimeout = setTimeout;\n      sinon.useFakeTimers();\n      sinon.spy(globalContext, \"setTimeout\");\n      sinon.restore();\n      assert.same(originalSetTimeout, globalContext.setTimeout, \"fakeTimers restored\");\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore XMLHttpRequest and ActiveXObject","suites":["issues","#1840 - sinon.restore useFakeXMLHttpRequest"],"updatePoint":{"line":459,"column":55,"index":13827},"line":459,"code":"    it(\"should restore XMLHttpRequest and ActiveXObject\", function () {\n      sinon.useFakeXMLHttpRequest();\n      sinon.restore();\n      assert.same(globalContext.XMLHttpRequest, globalXHR);\n      assert.same(globalContext.ActiveXObject, globalAXO);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should not blow up","suites":["issues","#1709 - deepEqual fails on cyclic references"],"updatePoint":{"line":467,"column":26,"index":14136},"line":467,"code":"    it(\"should not blow up\", function () {\n      var spy = sinon.spy();\n      var firstObj = {};\n      firstObj.aKeyName = firstObj;\n      var secondObj = {};\n      secondObj.aKeyName = secondObj;\n      spy(firstObj);\n      sinon.assert.calledWith(spy, secondObj);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"it should not fail with RangeError","suites":["issues","#1796 - cannot stub Array.prototype.sort"],"updatePoint":{"line":478,"column":42,"index":14500},"line":478,"code":"    it(\"it should not fail with RangeError\", function () {\n      var stub = sinon.stub(Array.prototype, \"sort\");\n      refute.exception(function () {\n        [1, 2, 3].sort();\n      });\n      stub.restore();\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should return false when call args don't match","suites":["issues","#1900 - calledWith returns false positive"],"updatePoint":{"line":487,"column":54,"index":14804},"line":487,"code":"    it(\"should return false when call args don't match\", function () {\n      var spy = sinon.spy();\n      var dateOne = new Date(\"2018-07-01\");\n      var dateTwo = new Date(\"2018-07-31\");\n      spy(dateOne);\n      var calledWith = spy.calledWith(dateTwo);\n      assert.same(calledWith, false);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should use constructor name when checking deepEquality","suites":["issues","#1882"],"updatePoint":{"line":497,"column":62,"index":15154},"line":497,"code":"    it(\"should use constructor name when checking deepEquality\", function () {\n      function ClassWithoutProps() {\n        return;\n      }\n\n      function AnotherClassWithoutProps() {\n        return;\n      }\n\n      ClassWithoutProps.prototype.constructor = ClassWithoutProps;\n      AnotherClassWithoutProps.prototype.constructor = AnotherClassWithoutProps;\n      var arg1 = new ClassWithoutProps(); //arg1.constructor.name === ClassWithoutProps\n\n      var arg2 = new AnotherClassWithoutProps(); //arg2.constructor.name === Object\n\n      var stub = sinon.stub();\n      stub.withArgs(arg1).returns(5);\n      var result = stub(arg2);\n      assert.same(result, undefined); //[ERR_ASSERTION]: 5 === undefined\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should not break stub behavior using multiple `match.any`","suites":["issues","#1887"],"updatePoint":{"line":519,"column":65,"index":15910},"line":519,"code":"    it(\"should not break stub behavior using multiple `match.any`\", function () {\n      var stub = sinon.stub();\n      stub.withArgs(sinon.match.any, sinon.match.any, sinon.match(\"a\")).returns(\"a\");\n      stub.withArgs(sinon.match.any, sinon.match.any, sinon.match(\"b\")).returns(\"b\");\n      assert.equals(stub({}, [], \"a\"), \"a\");\n      assert.equals(stub({}, [], \"b\"), \"b\");\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should not set `lastArg` to undefined when last argument is `false`","suites":["issues","#1986"],"updatePoint":{"line":528,"column":75,"index":16343},"line":528,"code":"    it(\"should not set `lastArg` to undefined when last argument is `false`\", function () {\n      var fake = sinon.fake();\n      fake(99, false);\n      assert.isFalse(fake.lastArg);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should allow callThrough on a withArgs fake","suites":["issues","#1964"],"updatePoint":{"line":535,"column":51,"index":16549},"line":535,"code":"    it(\"should allow callThrough on a withArgs fake\", function () {\n      var calledThrough = false;\n      var obj = {\n        method: function () {\n          calledThrough = true;\n        }\n      };\n      var baseStub = sinon.stub(obj, \"method\");\n      baseStub.throws(\"Should always hit the withArgs fake\");\n      var argsStub = baseStub.withArgs(\"foo\").callThrough();\n      obj.method(\"foo\");\n      sinon.assert.calledOnce(argsStub);\n      assert.isTrue(calledThrough);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should clear 'called' status on stub","suites":["issues","#2016","called on individual stub method"],"updatePoint":{"line":568,"column":46,"index":17453},"line":568,"code":"      it(\"should clear 'called' status on stub\", function () {\n        sandbox.testMethod();\n        assert.isTrue(sandbox.testMethod.called);\n        sandbox.testMethod.resetHistory();\n        assert.isFalse(sandbox.testMethod.called);\n      });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should clear 'called' status on all stubs","suites":["issues","#2016","called on module"],"updatePoint":{"line":576,"column":51,"index":17760},"line":576,"code":"      it(\"should clear 'called' status on all stubs\", function () {\n        sandbox.testMethod();\n        assert.isTrue(sandbox.testMethod.called);\n        sinon.resetHistory();\n        assert.isFalse(sandbox.testMethod.called);\n      });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should override the method","suites":["issues","#2073 - sinon.createStubInstance()"],"updatePoint":{"line":594,"column":34,"index":18226},"line":594,"code":"    it(\"should override the method\", function () {\n      var thing = sinon.createStubInstance(Foo, {\n        testMethod: sinon.stub().returns(2)\n      });\n      assert.equals(thing.testMethod(), 2);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should support calling without object binding","suites":["issues","#2073 - sinon.createStubInstance()"],"updatePoint":{"line":600,"column":53,"index":18452},"line":600,"code":"    it(\"should support calling without object binding\", function () {\n      var createStubInstance = sinon.createStubInstance;\n      refute.exception(function () {\n        createStubInstance(Foo);\n      });\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore the state of lastArg on the stub when resetting the sandbox","suites":["issues","#2065"],"updatePoint":{"line":608,"column":82,"index":18736},"line":608,"code":"    it(\"should restore the state of lastArg on the stub when resetting the sandbox\", function () {\n      var sandbox = sinon.createSandbox();\n      var fake = sandbox.fake();\n      fake(1, 2, 3);\n      assert.equals(fake.lastArg, 3);\n      sandbox.reset();\n      refute.equals(fake.lastArg, 3);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore fakes shadowing prototype props correctly","suites":["issues","#2226 - props on prototype are not restored correctly"],"updatePoint":{"line":629,"column":64,"index":19364},"line":629,"code":"    it(\"should restore fakes shadowing prototype props correctly\", function () {\n      var obj = createObjectWithPropFromPrototype();\n      var originalPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, \"test\");\n      sinon.replace(obj, \"test\", 2);\n      var replacedPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, \"test\");\n      sinon.restore();\n      var restoredPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, \"test\");\n      assert.isUndefined(originalPropertyDescriptor);\n      refute.isUndefined(replacedPropertyDescriptor);\n      assert.isUndefined(restoredPropertyDescriptor);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"should restore stubs shadowing prototype props correctly","suites":["issues","#2226 - props on prototype are not restored correctly"],"updatePoint":{"line":640,"column":64,"index":19983},"line":640,"code":"    it(\"should restore stubs shadowing prototype props correctly\", function () {\n      var obj = createObjectWithPropFromPrototype();\n      var originalPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, \"test\");\n      sinon.stub(obj, \"test\").value(2);\n      var replacedPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, \"test\");\n      sinon.restore();\n      var restoredPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, \"test\");\n      assert.isUndefined(originalPropertyDescriptor);\n      refute.isUndefined(replacedPropertyDescriptor);\n      assert.isUndefined(restoredPropertyDescriptor);\n    });","file":"issues/issues-test.js","skipped":false,"dir":"test"},{"name":"creates anonymous mock functions","suites":["sinonMock"],"updatePoint":{"line":18,"column":38,"index":452},"line":18,"code":"  it(\"creates anonymous mock functions\", function () {\n    var expectation = sinonMock();\n    assert.equals(expectation.method, \"Anonymous mock\");\n  });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"creates named anonymous mock functions","suites":["sinonMock"],"updatePoint":{"line":22,"column":44,"index":611},"line":22,"code":"  it(\"creates named anonymous mock functions\", function () {\n    var expectation = sinonMock(\"functionName\");\n    assert.equals(expectation.method, \"functionName\");\n  });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns function with expects method","suites":["sinonMock",".create"],"updatePoint":{"line":27,"column":44,"index":818},"line":27,"code":"    it(\"returns function with expects method\", function () {\n      var mock = sinonMock.create({});\n      assert.isFunction(mock.expects);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without object","suites":["sinonMock",".create"],"updatePoint":{"line":31,"column":29,"index":950},"line":31,"code":"    it(\"throws without object\", function () {\n      assert.exception(function () {\n        sinonMock.create();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without method","suites":["sinonMock",".expects"],"updatePoint":{"line":47,"column":29,"index":1305},"line":47,"code":"    it(\"throws without method\", function () {\n      var mock = this.mock;\n      assert.exception(function () {\n        mock.expects();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation","suites":["sinonMock",".expects"],"updatePoint":{"line":55,"column":27,"index":1493},"line":55,"code":"    it(\"returns expectation\", function () {\n      var result = this.mock.expects(\"someMethod\");\n      assert.isFunction(result);\n      assert.equals(result.method, \"someMethod\");\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws if expecting a non-existent method","suites":["sinonMock",".expects"],"updatePoint":{"line":60,"column":49,"index":1702},"line":60,"code":"    it(\"throws if expecting a non-existent method\", function () {\n      var mock = this.mock;\n      assert.exception(function () {\n        mock.expects(\"someMethod2\");\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"creates unnamed expectation","suites":["sinonMock",".expectation"],"updatePoint":{"line":72,"column":35,"index":2051},"line":72,"code":"    it(\"creates unnamed expectation\", function () {\n      var anonMock = sinonExpectation.create();\n      anonMock.never();\n      assert(anonMock.verify());\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"uses 'anonymous mock expectation' for unnamed expectation","suites":["sinonMock",".expectation"],"updatePoint":{"line":77,"column":65,"index":2246},"line":77,"code":"    it(\"uses 'anonymous mock expectation' for unnamed expectation\", function () {\n      var anonMock = sinonExpectation.create();\n      anonMock.once();\n      assert.exception(function () {\n        anonMock.verify();\n      }, {\n        message: \"anonymous mock expectation\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"call expectation","suites":["sinonMock",".expectation"],"updatePoint":{"line":86,"column":24,"index":2497},"line":86,"code":"    it(\"call expectation\", function () {\n      this.expectation();\n      assert.isFunction(this.expectation.invoke);\n      assert(this.expectation.called);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is invokable","suites":["sinonMock",".expectation"],"updatePoint":{"line":91,"column":20,"index":2657},"line":91,"code":"    it(\"is invokable\", function () {\n      var expectation = this.expectation;\n      refute.exception(function () {\n        expectation();\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns configured return value","suites":["sinonMock",".expectation",".returns"],"updatePoint":{"line":98,"column":41,"index":2874},"line":98,"code":"      it(\"returns configured return value\", function () {\n        var object = {};\n        this.expectation.returns(object);\n        assert.same(this.expectation(), object);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is called with correct this value","suites":["sinonMock",".expectation","call"],"updatePoint":{"line":105,"column":43,"index":3103},"line":105,"code":"      it(\"is called with correct this value\", function () {\n        var object = {\n          method: this.expectation\n        };\n        object.method();\n        assert(this.expectation.calledOn(object));\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"onlys be invokable once by default","suites":["sinonMock",".expectation",".callCount"],"updatePoint":{"line":114,"column":44,"index":3368},"line":114,"code":"      it(\"onlys be invokable once by default\", function () {\n        var expectation = this.expectation;\n        expectation();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throw readable error","suites":["sinonMock",".expectation",".callCount"],"updatePoint":{"line":123,"column":30,"index":3616},"line":123,"code":"      it(\"throw readable error\", function () {\n        var expectation = this.expectation;\n        expectation();\n        assert.exception(expectation, {\n          message: \"myMeth already called once\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is not callable","suites":["sinonMock",".expectation",".callCountNever"],"updatePoint":{"line":132,"column":25,"index":3889},"line":132,"code":"      it(\"is not callable\", function () {\n        var expectation = this.expectation;\n        expectation.never();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".callCountNever"],"updatePoint":{"line":141,"column":42,"index":4155},"line":141,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.never(), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows one call","suites":["sinonMock",".expectation",".callCountOnce"],"updatePoint":{"line":146,"column":25,"index":4325},"line":146,"code":"      it(\"allows one call\", function () {\n        var expectation = this.expectation;\n        expectation.once();\n        expectation();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".callCountOnce"],"updatePoint":{"line":156,"column":42,"index":4613},"line":156,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.once(), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows two calls","suites":["sinonMock",".expectation",".callCountTwice"],"updatePoint":{"line":161,"column":26,"index":4784},"line":161,"code":"      it(\"allows two calls\", function () {\n        var expectation = this.expectation;\n        expectation.twice();\n        expectation();\n        expectation();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".callCountTwice"],"updatePoint":{"line":172,"column":42,"index":5096},"line":172,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.twice(), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows three calls","suites":["sinonMock",".expectation",".callCountThrice"],"updatePoint":{"line":177,"column":28,"index":5271},"line":177,"code":"      it(\"allows three calls\", function () {\n        var expectation = this.expectation;\n        expectation.thrice();\n        expectation();\n        expectation();\n        expectation();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".callCountThrice"],"updatePoint":{"line":189,"column":42,"index":5607},"line":189,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.thrice(), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows specified number of calls","suites":["sinonMock",".expectation",".callCountExactly"],"updatePoint":{"line":194,"column":42,"index":5798},"line":194,"code":"      it(\"allows specified number of calls\", function () {\n        var expectation = this.expectation;\n        expectation.exactly(2);\n        expectation();\n        expectation();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".callCountExactly"],"updatePoint":{"line":205,"column":42,"index":6113},"line":205,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.exactly(2), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without argument","suites":["sinonMock",".expectation",".callCountExactly"],"updatePoint":{"line":208,"column":33,"index":6241},"line":208,"code":"      it(\"throws without argument\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.exactly();\n        }, {\n          name: \"TypeError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without number","suites":["sinonMock",".expectation",".callCountExactly"],"updatePoint":{"line":216,"column":31,"index":6468},"line":216,"code":"      it(\"throws without number\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.exactly(\"12\");\n        }, {\n          name: \"TypeError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws with Symbol","suites":["sinonMock",".expectation",".callCountExactly"],"updatePoint":{"line":224,"column":28,"index":6696},"line":224,"code":"      it(\"throws with Symbol\", function () {\n        if (typeof Symbol === \"function\") {\n          var expectation = this.expectation;\n          assert.exception(function () {\n            expectation.exactly(Symbol(\"apple pie\"));\n          }, function (err) {\n            return err.message === \"'Symbol(apple pie)' is not a number\";\n          });\n        }\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without argument","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":236,"column":33,"index":7116},"line":236,"code":"      it(\"throws without argument\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.atLeast();\n        }, {\n          name: \"TypeError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without number","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":244,"column":31,"index":7343},"line":244,"code":"      it(\"throws without number\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.atLeast({});\n        }, {\n          name: \"TypeError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws with Symbol","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":252,"column":28,"index":7569},"line":252,"code":"      it(\"throws with Symbol\", function () {\n        if (typeof Symbol === \"function\") {\n          var expectation = this.expectation;\n          assert.exception(function () {\n            expectation.atLeast(Symbol(\"apple pie\"));\n          }, function (err) {\n            return err.message === \"'Symbol(apple pie)' is not number\";\n          });\n        }\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":262,"column":42,"index":7949},"line":262,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.atLeast(2), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows any number of calls","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":265,"column":36,"index":8080},"line":265,"code":"      it(\"allows any number of calls\", function () {\n        var expectation = this.expectation;\n        expectation.atLeast(2);\n        expectation();\n        expectation();\n        refute.exception(function () {\n          expectation();\n          expectation();\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not be met with too few calls","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":275,"column":46,"index":8376},"line":275,"code":"      it(\"should not be met with too few calls\", function () {\n        this.expectation.atLeast(2);\n        this.expectation();\n        assert.isFalse(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is met with exact calls","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":280,"column":33,"index":8549},"line":280,"code":"      it(\"is met with exact calls\", function () {\n        this.expectation.atLeast(2);\n        this.expectation();\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is met with excessive calls","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":286,"column":37,"index":8746},"line":286,"code":"      it(\"is met with excessive calls\", function () {\n        this.expectation.atLeast(2);\n        this.expectation();\n        this.expectation();\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not throw when exceeding at least expectation","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":293,"column":62,"index":8996},"line":293,"code":"      it(\"should not throw when exceeding at least expectation\", function () {\n        var obj = {\n          foobar: function () {\n            return;\n          }\n        };\n        var mock = sinonMock(obj);\n        mock.expects(\"foobar\").atLeast(1);\n        obj.foobar();\n        refute.exception(function () {\n          obj.foobar();\n          mock.verify();\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not throw when exceeding at least expectation and withargs","suites":["sinonMock",".expectation",".atLeast"],"updatePoint":{"line":307,"column":75,"index":9393},"line":307,"code":"      it(\"should not throw when exceeding at least expectation and withargs\", function () {\n        var obj = {\n          foobar: function () {\n            return;\n          }\n        };\n        var mock = sinonMock(obj);\n        mock.expects(\"foobar\").withArgs(\"arg1\");\n        mock.expects(\"foobar\").atLeast(1).withArgs(\"arg2\");\n        obj.foobar(\"arg1\");\n        obj.foobar(\"arg2\");\n        obj.foobar(\"arg2\");\n        assert(mock.verify());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without argument","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":323,"column":33,"index":9853},"line":323,"code":"      it(\"throws without argument\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.atMost();\n        }, {\n          name: \"TypeError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws without number","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":331,"column":31,"index":10079},"line":331,"code":"      it(\"throws without number\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.atMost({});\n        }, {\n          name: \"TypeError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws with Symbol","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":339,"column":28,"index":10304},"line":339,"code":"      it(\"throws with Symbol\", function () {\n        if (typeof Symbol === \"function\") {\n          var expectation = this.expectation;\n          assert.exception(function () {\n            expectation.atMost(Symbol(\"apple pie\"));\n          }, function (err) {\n            return err.message === \"'Symbol(apple pie)' is not number\";\n          });\n        }\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":349,"column":42,"index":10683},"line":349,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.atMost(2), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows fewer calls","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":352,"column":28,"index":10805},"line":352,"code":"      it(\"allows fewer calls\", function () {\n        var expectation = this.expectation;\n        expectation.atMost(2);\n        refute.exception(function () {\n          expectation();\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is met with fewer calls","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":359,"column":33,"index":11016},"line":359,"code":"      it(\"is met with fewer calls\", function () {\n        this.expectation.atMost(2);\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is met with exact calls","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":364,"column":33,"index":11180},"line":364,"code":"      it(\"is met with exact calls\", function () {\n        this.expectation.atMost(2);\n        this.expectation();\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not be met with excessive calls","suites":["sinonMock",".expectation",".atMost"],"updatePoint":{"line":370,"column":48,"index":11387},"line":370,"code":"      it(\"should not be met with excessive calls\", function () {\n        var expectation = this.expectation;\n        this.expectation.atMost(2);\n        this.expectation();\n        this.expectation();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n        assert.isFalse(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not be met with too few calls","suites":["sinonMock",".expectation",".atMostAndAtLeast"],"updatePoint":{"line":388,"column":46,"index":11938},"line":388,"code":"      it(\"should not be met with too few calls\", function () {\n        this.expectation();\n        assert.isFalse(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is met with minimum calls","suites":["sinonMock",".expectation",".atMostAndAtLeast"],"updatePoint":{"line":392,"column":35,"index":12076},"line":392,"code":"      it(\"is met with minimum calls\", function () {\n        this.expectation();\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is met with maximum calls","suites":["sinonMock",".expectation",".atMostAndAtLeast"],"updatePoint":{"line":397,"column":35,"index":12234},"line":397,"code":"      it(\"is met with maximum calls\", function () {\n        this.expectation();\n        this.expectation();\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws with excessive calls","suites":["sinonMock",".expectation",".atMostAndAtLeast"],"updatePoint":{"line":403,"column":37,"index":12422},"line":403,"code":"      it(\"throws with excessive calls\", function () {\n        var expectation = this.expectation;\n        expectation();\n        expectation();\n        expectation();\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not be met when not called enough times","suites":["sinonMock",".expectation",".met"],"updatePoint":{"line":416,"column":56,"index":12785},"line":416,"code":"      it(\"should not be met when not called enough times\", function () {\n        assert.isFalse(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"is met when called enough times","suites":["sinonMock",".expectation",".met"],"updatePoint":{"line":419,"column":41,"index":12901},"line":419,"code":"      it(\"is met when called enough times\", function () {\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not be met when called too many times","suites":["sinonMock",".expectation",".met"],"updatePoint":{"line":423,"column":54,"index":13050},"line":423,"code":"      it(\"should not be met when called too many times\", function () {\n        this.expectation();\n        assert.exception(this.expectation);\n        assert.isFalse(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":442,"column":42,"index":13601},"line":442,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.withArgs(1), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"accepts call with expected args","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":445,"column":41,"index":13738},"line":445,"code":"      it(\"accepts call with expected args\", function () {\n        this.expectation.withArgs(1, 2, 3);\n        this.expectation(1, 2, 3);\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws when called without args","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":450,"column":41,"index":13925},"line":450,"code":"      it(\"throws when called without args\", function () {\n        var expectation = this.expectation;\n        expectation.withArgs(1, 2, 3);\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws when called with too few args","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":459,"column":46,"index":14205},"line":459,"code":"      it(\"throws when called with too few args\", function () {\n        var expectation = this.expectation;\n        expectation.withArgs(1, 2, 3);\n        assert.exception(function () {\n          expectation(1, 2);\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws when called with wrong args","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":468,"column":44,"index":14487},"line":468,"code":"      it(\"throws when called with wrong args\", function () {\n        var expectation = this.expectation;\n        expectation.withArgs(1, 2, 3);\n        assert.exception(function () {\n          expectation(2, 2, 3);\n        }, expectedException(\"ExpectationError\"));\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows excessive args","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":475,"column":31,"index":14750},"line":475,"code":"      it(\"allows excessive args\", function () {\n        var expectation = this.expectation;\n        expectation.withArgs(1, 2, 3);\n        refute.exception(function () {\n          expectation(1, 2, 3, 4);\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"calls accept with no args","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":482,"column":35,"index":14981},"line":482,"code":"      it(\"calls accept with no args\", function () {\n        this.expectation.withArgs();\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows no args called with excessive args","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":487,"column":51,"index":15164},"line":487,"code":"      it(\"allows no args called with excessive args\", function () {\n        var expectation = this.expectation;\n        expectation.withArgs();\n        refute.exception(function () {\n          expectation(1, 2, 3);\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"works with sinon matchers","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":494,"column":35,"index":15385},"line":494,"code":"      it(\"works with sinon matchers\", function () {\n        this.expectation.withArgs(match.number, match.string, match.func);\n        this.expectation(1, \"test\", function () {\n          return;\n        });\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws when sinon matchers fail","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":501,"column":41,"index":15648},"line":501,"code":"      it(\"throws when sinon matchers fail\", function () {\n        var expectation = this.expectation;\n        this.expectation.withArgs(match.number, match.string, match.func);\n        assert.exception(function () {\n          expectation(1, 2, 3);\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not throw when expectation withArgs using matcher","suites":["sinonMock",".expectation",".withArgs"],"updatePoint":{"line":510,"column":66,"index":15991},"line":510,"code":"      it(\"should not throw when expectation withArgs using matcher\", function () {\n        var obj = {\n          foobar: function () {\n            return;\n          }\n        };\n        var mock = sinonMock(obj);\n        mock.expects(\"foobar\").withArgs(match.string);\n        refute.exception(function () {\n          obj.foobar(\"arg1\");\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":524,"column":42,"index":16379},"line":524,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.withExactArgs(1), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"accepts call with expected args","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":527,"column":41,"index":16521},"line":527,"code":"      it(\"accepts call with expected args\", function () {\n        this.expectation.withExactArgs(1, 2, 3);\n        this.expectation(1, 2, 3);\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws when called without args","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":532,"column":41,"index":16713},"line":532,"code":"      it(\"throws when called without args\", function () {\n        var expectation = this.expectation;\n        expectation.withExactArgs(1, 2, 3);\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws when called with too few args","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":541,"column":46,"index":16998},"line":541,"code":"      it(\"throws when called with too few args\", function () {\n        var expectation = this.expectation;\n        expectation.withExactArgs(1, 2, 3);\n        assert.exception(function () {\n          expectation(1, 2);\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws when called with wrong args","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":550,"column":44,"index":17285},"line":550,"code":"      it(\"throws when called with wrong args\", function () {\n        var expectation = this.expectation;\n        expectation.withExactArgs(1, 2, 3);\n        assert.exception(function () {\n          expectation(2, 2, 3);\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"should not allow excessive args","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":559,"column":41,"index":17572},"line":559,"code":"      it(\"should not allow excessive args\", function () {\n        var expectation = this.expectation;\n        expectation.withExactArgs(1, 2, 3);\n        assert.exception(function () {\n          expectation(1, 2, 3, 4);\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"accepts call with no expected args","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":568,"column":44,"index":17865},"line":568,"code":"      it(\"accepts call with no expected args\", function () {\n        this.expectation.withExactArgs();\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"does not allow excessive args with no expected args","suites":["sinonMock",".expectation",".withExactArgs"],"updatePoint":{"line":573,"column":61,"index":18063},"line":573,"code":"      it(\"does not allow excessive args with no expected args\", function () {\n        var expectation = this.expectation;\n        expectation.withExactArgs();\n        assert.exception(function () {\n          expectation(1, 2, 3);\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns expectation for chaining","suites":["sinonMock",".expectation",".on"],"updatePoint":{"line":584,"column":42,"index":18386},"line":584,"code":"      it(\"returns expectation for chaining\", function () {\n        assert.same(this.expectation.on({}), this.expectation);\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows calls on object","suites":["sinonMock",".expectation",".on"],"updatePoint":{"line":587,"column":32,"index":18509},"line":587,"code":"      it(\"allows calls on object\", function () {\n        this.expectation.on(this);\n        this.expectation();\n        assert(this.expectation.met());\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws if called on wrong object","suites":["sinonMock",".expectation",".on"],"updatePoint":{"line":592,"column":42,"index":18681},"line":592,"code":"      it(\"throws if called on wrong object\", function () {\n        var expectation = this.expectation;\n        expectation.on({});\n        assert.exception(function () {\n          expectation();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws if calls on wrong Symbol","suites":["sinonMock",".expectation",".on"],"updatePoint":{"line":601,"column":41,"index":18945},"line":601,"code":"      it(\"throws if calls on wrong Symbol\", function () {\n        if (typeof Symbol === \"function\") {\n          var expectation = sinonExpectation.create(\"method\");\n          expectation.on(Symbol(\"apple pie\"));\n          assert.exception(function () {\n            expectation.call(Symbol(\"pear pie\"));\n          }, function (err) {\n            return err.message === \"method called with Symbol(pear pie) as thisValue, expected Symbol(apple pie)\";\n          });\n        }\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"pass if met","suites":["sinonMock",".expectation",".verify"],"updatePoint":{"line":614,"column":21,"index":19453},"line":614,"code":"      it(\"pass if met\", function () {\n        sinonStub(sinonExpectation, \"pass\");\n        var expectation = this.expectation;\n        expectation();\n        expectation.verify();\n        assert.equals(sinonExpectation.pass.callCount, 1);\n        sinonExpectation.pass.restore();\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws if not called enough times","suites":["sinonMock",".expectation",".verify"],"updatePoint":{"line":622,"column":43,"index":19765},"line":622,"code":"      it(\"throws if not called enough times\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.verify();\n        }, {\n          name: \"ExpectationError\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws readable error","suites":["sinonMock",".expectation",".verify"],"updatePoint":{"line":630,"column":31,"index":19998},"line":630,"code":"      it(\"throws readable error\", function () {\n        var expectation = this.expectation;\n        assert.exception(function () {\n          expectation.verify();\n        }, {\n          message: \"Expected myMeth('[...]') once (never called)\"\n        });\n      });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"restores mocks","suites":["sinonMock",".verify"],"updatePoint":{"line":651,"column":22,"index":20508},"line":651,"code":"    it(\"restores mocks\", function () {\n      this.object.method();\n      this.object.method.call(this.thisValue);\n      this.mock.verify();\n      assert.same(this.object.method, this.method);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"passes verified mocks","suites":["sinonMock",".verify"],"updatePoint":{"line":657,"column":29,"index":20715},"line":657,"code":"    it(\"passes verified mocks\", function () {\n      sinonStub(sinonExpectation, \"pass\");\n      this.mock.expects(\"method\").once();\n      this.object.method();\n      this.mock.verify();\n      assert.equals(sinonExpectation.pass.callCount, 1);\n      sinonExpectation.pass.restore();\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"restores if not met","suites":["sinonMock",".verify"],"updatePoint":{"line":665,"column":27,"index":21002},"line":665,"code":"    it(\"restores if not met\", function () {\n      var mock = this.mock;\n      mock.expects(\"method\");\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        name: \"ExpectationError\"\n      });\n      assert.same(this.object.method, this.method);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"includes all calls in error message","suites":["sinonMock",".verify"],"updatePoint":{"line":675,"column":43,"index":21294},"line":675,"code":"    it(\"includes all calls in error message\", function () {\n      var mock = this.mock;\n      mock.expects(\"method\").thrice();\n      mock.expects(\"method\").once().withArgs(42);\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        message: \"Expected method('[...]') thrice (never called)\\n\" + \"Expected method(42, '[...]') once (never called)\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"includes exact expected arguments in error message","suites":["sinonMock",".verify"],"updatePoint":{"line":685,"column":58,"index":21696},"line":685,"code":"    it(\"includes exact expected arguments in error message\", function () {\n      var mock = this.mock;\n      mock.expects(\"method\").once().withExactArgs(42);\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        message: \"Expected method(42) once (never called)\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"includes received call count in error message","suites":["sinonMock",".verify"],"updatePoint":{"line":694,"column":53,"index":21997},"line":694,"code":"    it(\"includes received call count in error message\", function () {\n      var mock = this.mock;\n      mock.expects(\"method\").thrice().withExactArgs(42);\n      this.object.method(42);\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        message: \"Expected method(42) thrice (called once)\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"includes unexpected calls in error message","suites":["sinonMock",".verify"],"updatePoint":{"line":704,"column":50,"index":22328},"line":704,"code":"    it(\"includes unexpected calls in error message\", function () {\n      var mock = this.mock;\n      var object = this.object;\n      mock.expects(\"method\").thrice().withExactArgs(42);\n      assert.exception(function () {\n        object.method();\n      }, {\n        message: \"Unexpected call: method()\\n    Expected method(42) thrice (never called)\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"includes met expectations in error message","suites":["sinonMock",".verify"],"updatePoint":{"line":714,"column":50,"index":22695},"line":714,"code":"    it(\"includes met expectations in error message\", function () {\n      var mock = this.mock;\n      var object = this.object;\n      mock.expects(\"method\").once().withArgs(1);\n      mock.expects(\"method\").thrice().withExactArgs(42);\n      object.method(1);\n      assert.exception(function () {\n        object.method();\n      }, {\n        message: \"Unexpected call: method()\\n\" + \"    Expectation met: method(1, '[...]') once\\n\" + \"    Expected method(42) thrice (never called)\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"includes met expectations in error message from verify","suites":["sinonMock",".verify"],"updatePoint":{"line":726,"column":62,"index":23203},"line":726,"code":"    it(\"includes met expectations in error message from verify\", function () {\n      var mock = this.mock;\n      mock.expects(\"method\").once().withArgs(1);\n      mock.expects(\"method\").thrice().withExactArgs(42);\n      this.object.method(1);\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        message: \"Expected method(42) thrice (never called)\\nExpectation met: method(1, '[...]') once\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"reports min calls in error message","suites":["sinonMock",".verify"],"updatePoint":{"line":737,"column":42,"index":23617},"line":737,"code":"    it(\"reports min calls in error message\", function () {\n      var mock = this.mock;\n      mock.expects(\"method\").atLeast(1);\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        message: \"Expected method('[...]') at least once (never called)\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"reports max calls in error message","suites":["sinonMock",".verify"],"updatePoint":{"line":746,"column":42,"index":23907},"line":746,"code":"    it(\"reports max calls in error message\", function () {\n      var mock = this.mock;\n      var object = this.object;\n      mock.expects(\"method\").atMost(2);\n      assert.exception(function () {\n        object.method();\n        object.method();\n        object.method();\n      }, {\n        message: \"Unexpected call: method()\\n    Expectation met: method('[...]') at most twice\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"reports min calls in met expectation","suites":["sinonMock",".verify"],"updatePoint":{"line":758,"column":44,"index":24306},"line":758,"code":"    it(\"reports min calls in met expectation\", function () {\n      var mock = this.mock;\n      var object = this.object;\n      mock.expects(\"method\").atLeast(1);\n      mock.expects(\"method\").withArgs(2).once();\n      assert.exception(function () {\n        object.method();\n        object.method(2);\n        object.method(2);\n      }, {\n        message: \"Unexpected call: method(2)\\n\" + \"    Expectation met: method('[...]') at least once\\n\" + \"    Expectation met: method(2, '[...]') once\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"reports max and min calls in error messages","suites":["sinonMock",".verify"],"updatePoint":{"line":771,"column":51,"index":24821},"line":771,"code":"    it(\"reports max and min calls in error messages\", function () {\n      var mock = this.mock;\n      mock.expects(\"method\").atLeast(1).atMost(2);\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        message: \"Expected method('[...]') at least once and at most twice (never called)\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"fails even if the original expectation exception was caught","suites":["sinonMock",".verify"],"updatePoint":{"line":780,"column":67,"index":25164},"line":780,"code":"    it(\"fails even if the original expectation exception was caught\", function () {\n      var mock = this.mock;\n      var object = this.object;\n      mock.expects(\"method\").once();\n      object.method();\n      assert.exception(function () {\n        object.method();\n      });\n      assert.exception(function () {\n        mock.verify();\n      }, {\n        name: \"ExpectationError\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"does not call pass if no expectations","suites":["sinonMock",".verify"],"updatePoint":{"line":794,"column":45,"index":25540},"line":794,"code":"    it(\"does not call pass if no expectations\", function () {\n      var pass = sinonStub(sinonExpectation, \"pass\");\n      var mock = this.mock;\n      mock.expects(\"method\").never();\n      delete mock.expectations;\n      mock.verify();\n      refute(pass.called, \"expectation.pass should not be called\");\n      pass.restore();\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"must be a function","suites":["sinonMock",".usingPromise"],"updatePoint":{"line":815,"column":26,"index":26107},"line":815,"code":"    it(\"must be a function\", function () {\n      assert.isFunction(this.mock.usingPromise);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"must return the mock","suites":["sinonMock",".usingPromise"],"updatePoint":{"line":818,"column":28,"index":26209},"line":818,"code":"    it(\"must return the mock\", function () {\n      var mockPromise = {};\n      var actual = this.mock.usingPromise(mockPromise);\n      assert.same(actual, this.mock);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"must set all expectations with mockPromise","suites":["sinonMock",".usingPromise"],"updatePoint":{"line":823,"column":50,"index":26406},"line":823,"code":"    it(\"must set all expectations with mockPromise\", function () {\n      if (typeof Promise === \"undefined\") {\n        return this.skip();\n      }\n\n      var resolveValue = {};\n      var mockPromise = {\n        resolve: sinonStub().resolves(resolveValue)\n      };\n      this.mock.usingPromise(mockPromise);\n      this.mock.expects(\"method\").resolves({});\n      return this.object.method().then(function (action) {\n        assert.same(resolveValue, action);\n        assert(mockPromise.resolve.calledOnce);\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"mocks object method","suites":["sinonMock","mock object"],"updatePoint":{"line":851,"column":27,"index":27157},"line":851,"code":"    it(\"mocks object method\", function () {\n      this.mock.expects(\"method\");\n      assert.isFunction(this.object.method);\n      refute.same(this.object.method, this.method);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"reverts mocked method","suites":["sinonMock","mock object"],"updatePoint":{"line":856,"column":29,"index":27343},"line":856,"code":"    it(\"reverts mocked method\", function () {\n      this.mock.expects(\"method\");\n      this.object.method.restore();\n      assert.same(this.object.method, this.method);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"reverts expectation","suites":["sinonMock","mock object"],"updatePoint":{"line":861,"column":27,"index":27518},"line":861,"code":"    it(\"reverts expectation\", function () {\n      this.mock.expects(\"method\");\n      this.object.method.restore();\n      assert.same(this.object.method, this.method);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"reverts mock","suites":["sinonMock","mock object"],"updatePoint":{"line":866,"column":20,"index":27686},"line":866,"code":"    it(\"reverts mock\", function () {\n      this.mock.expects(\"method\");\n      this.mock.restore();\n      assert.same(this.object.method, this.method);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"verifies mock","suites":["sinonMock","mock object"],"updatePoint":{"line":871,"column":21,"index":27846},"line":871,"code":"    it(\"verifies mock\", function () {\n      this.mock.expects(\"method\");\n      this.object.method();\n      var mock = this.mock;\n      refute.exception(function () {\n        assert(mock.verify());\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"verifies mock with unmet expectations","suites":["sinonMock","mock object"],"updatePoint":{"line":879,"column":45,"index":28085},"line":879,"code":"    it(\"verifies mock with unmet expectations\", function () {\n      this.mock.expects(\"method\");\n      var mock = this.mock;\n      assert.exception(function () {\n        assert(mock.verify());\n      }, {\n        name: \"ExpectationError\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"queues expectations","suites":["sinonMock","mock method multiple times"],"updatePoint":{"line":904,"column":27,"index":28705},"line":904,"code":"    it(\"queues expectations\", function () {\n      var object = this.object;\n      refute.exception(function () {\n        object.method();\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"starts on next expectation when first is met","suites":["sinonMock","mock method multiple times"],"updatePoint":{"line":910,"column":52,"index":28886},"line":910,"code":"    it(\"starts on next expectation when first is met\", function () {\n      var object = this.object;\n      object.method();\n      assert.exception(function () {\n        object.method();\n      }, {\n        name: \"ExpectationError\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"fails on last expectation","suites":["sinonMock","mock method multiple times"],"updatePoint":{"line":919,"column":33,"index":29115},"line":919,"code":"    it(\"fails on last expectation\", function () {\n      var object = this.object;\n      object.method();\n      object.method.call(this.thisValue);\n      assert.exception(function () {\n        object.method();\n      }, {\n        name: \"ExpectationError\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"allows mock calls in any order","suites":["sinonMock","mock method multiple times"],"updatePoint":{"line":929,"column":38,"index":29391},"line":929,"code":"    it(\"allows mock calls in any order\", function () {\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      var mock = sinonMock(object);\n      mock.expects(\"method\").once().withArgs(42);\n      mock.expects(\"method\").twice().withArgs(\"Yeah\");\n      refute.exception(function () {\n        object.method(\"Yeah\");\n      });\n      refute.exception(function () {\n        object.method(42);\n      });\n      assert.exception(function () {\n        object.method(1);\n      });\n      refute.exception(function () {\n        object.method(\"Yeah\");\n      });\n      assert.exception(function () {\n        object.method(42);\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns mock method","suites":["sinonMock","mock function"],"updatePoint":{"line":956,"column":27,"index":30097},"line":956,"code":"    it(\"returns mock method\", function () {\n      var mock = sinonMock();\n      assert.isFunction(mock);\n      assert.isFunction(mock.atLeast);\n      assert.isFunction(mock.verify);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns mock object","suites":["sinonMock","mock function"],"updatePoint":{"line":962,"column":27,"index":30287},"line":962,"code":"    it(\"returns mock object\", function () {\n      var mock = sinonMock({});\n      assert.isObject(mock);\n      assert.isFunction(mock.expects);\n      assert.isFunction(mock.verify);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["sinonMock",".yields"],"updatePoint":{"line":970,"column":41,"index":30533},"line":970,"code":"    it(\"invokes only argument as callback\", function () {\n      var mock = sinonMock().yields();\n      var spy = sinonSpy();\n      mock(spy);\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["sinonMock",".yields"],"updatePoint":{"line":977,"column":60,"index":30776},"line":977,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      var mock = sinonMock().yields();\n      assert.exception(mock, {\n        message: \"stub expected to yield, but no callback was passed.\"\n      });\n    });","file":"mock-test.js","skipped":false,"dir":"test"},{"name":"returns an unresolved promise","suites":["promise","with default executor"],"updatePoint":{"line":31,"column":37,"index":597},"line":31,"code":"    it(\"returns an unresolved promise\", async function () {\n      var promise = sinon.promise();\n      var {\n        status,\n        value\n      } = await getPromiseStatus(promise);\n      assert.equals(promise.toString(), \"[object Promise]\");\n      assert.equals(status, \"pending\");\n      assert.isNull(value);\n      assert.equals(promise.status, status);\n      assert.isUndefined(promise.resolvedValue);\n      assert.isUndefined(promise.rejectedValue);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"resolves the promise","suites":["promise","with default executor"],"updatePoint":{"line":44,"column":28,"index":1050},"line":44,"code":"    it(\"resolves the promise\", async function () {\n      var result = Symbol(\"promise result\");\n      var promise = sinon.promise();\n      var returnValue = promise.resolve(result);\n      var {\n        status,\n        value\n      } = await getPromiseStatus(promise);\n      assert.equals(status, \"resolved\");\n      assert.same(value, result);\n      assert.equals(promise.status, status);\n      assert.same(promise.resolvedValue, result);\n      assert.isUndefined(promise.rejectedValue);\n      assert.same(returnValue, promise);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"rejects the promise","suites":["promise","with default executor"],"updatePoint":{"line":59,"column":27,"index":1584},"line":59,"code":"    it(\"rejects the promise\", async function () {\n      var error = new Error(\"promise error\");\n      var promise = sinon.promise();\n      var returnValue = promise.reject(error);\n      var {\n        status,\n        value\n      } = await getPromiseStatus(promise);\n      assert.equals(status, \"rejected\");\n      assert.same(value, error);\n      assert.equals(promise.status, status);\n      assert.isUndefined(promise.resolvedValue);\n      assert.same(promise.rejectedValue, error);\n      refute.same(returnValue, promise);\n      assert.equals(returnValue.toString(), \"[object Promise]\");\n      await assert.resolves(returnValue, undefined);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"fails to resolve again","suites":["promise","with default executor","with resolved promise"],"updatePoint":{"line":82,"column":32,"index":2412},"line":82,"code":"      it(\"fails to resolve again\", function () {\n        assert.exception(() => {\n          promise.resolve(2);\n        }, {\n          name: \"Error\",\n          message: \"Promise already resolved\"\n        });\n      });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"fails to reject","suites":["promise","with default executor","with resolved promise"],"updatePoint":{"line":90,"column":25,"index":2623},"line":90,"code":"      it(\"fails to reject\", function () {\n        assert.exception(() => {\n          promise.reject(2);\n        }, {\n          name: \"Error\",\n          message: \"Promise already resolved\"\n        });\n      });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"fails to reject again","suites":["promise","with default executor","with rejected promise"],"updatePoint":{"line":105,"column":31,"index":3020},"line":105,"code":"      it(\"fails to reject again\", function () {\n        assert.exception(() => {\n          promise.reject(2);\n        }, {\n          name: \"Error\",\n          message: \"Promise already rejected\"\n        });\n      });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"fails to resolve","suites":["promise","with default executor","with rejected promise"],"updatePoint":{"line":113,"column":26,"index":3231},"line":113,"code":"      it(\"fails to resolve\", function () {\n        assert.exception(() => {\n          promise.resolve(2);\n        }, {\n          name: \"Error\",\n          message: \"Promise already rejected\"\n        });\n      });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"accepts a fake as the custom executor","suites":["promise","with custom executor"],"updatePoint":{"line":124,"column":45,"index":3524},"line":124,"code":"    it(\"accepts a fake as the custom executor\", function () {\n      var executor = sinon.fake();\n      sinon.promise(executor);\n      assert.equals(executor.callCount, 1);\n      assert.equals(executor.firstCall.args.length, 2);\n      assert.isFunction(executor.firstCall.firstArg);\n      assert.isFunction(executor.firstCall.lastArg);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"accepts a stub as the custom executor","suites":["promise","with custom executor"],"updatePoint":{"line":132,"column":45,"index":3867},"line":132,"code":"    it(\"accepts a stub as the custom executor\", function () {\n      var executor = sinon.stub();\n      sinon.promise(executor);\n      assert.equals(executor.callCount, 1);\n      assert.equals(executor.firstCall.args.length, 2);\n      assert.isFunction(executor.firstCall.firstArg);\n      assert.isFunction(executor.firstCall.lastArg);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"accepts a function as the custom executor","suites":["promise","with custom executor"],"updatePoint":{"line":140,"column":49,"index":4214},"line":140,"code":"    it(\"accepts a function as the custom executor\", function () {\n      var args;\n\n      function executor(resolve, reject) {\n        args = [resolve, reject];\n      }\n\n      sinon.promise(executor);\n      assert.equals(args.length, 2);\n      assert.isFunction(args[0]);\n      assert.isFunction(args[1]);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"sets resolvedValue when custom executor resolves","suites":["promise","with custom executor"],"updatePoint":{"line":152,"column":56,"index":4534},"line":152,"code":"    it(\"sets resolvedValue when custom executor resolves\", async function () {\n      var result = Symbol(\"executor result\");\n\n      function executor(resolve) {\n        resolve(result);\n      }\n\n      var promise = sinon.promise(executor);\n      await assert.resolves(promise, result);\n      assert.equals(promise.status, \"resolved\");\n      assert.same(promise.resolvedValue, result);\n      assert.isUndefined(promise.rejectedValue);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"sets rejectedValue when custom executor fails","suites":["promise","with custom executor"],"updatePoint":{"line":165,"column":53,"index":4973},"line":165,"code":"    it(\"sets rejectedValue when custom executor fails\", async function () {\n      var reason = new Error(\"executor failure\");\n\n      function executor(resolve, reject) {\n        reject(reason);\n      }\n\n      var promise = sinon.promise(executor);\n      await assert.rejects(promise, reason);\n      assert.equals(promise.status, \"rejected\");\n      assert.same(promise.rejectedValue, reason);\n      assert.isUndefined(promise.resolvedValue);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"resolves the promise","suites":["promise","with custom executor"],"updatePoint":{"line":178,"column":28,"index":5397},"line":178,"code":"    it(\"resolves the promise\", async function () {\n      var result = Symbol(\"promise result\");\n      var promise = sinon.promise(sinon.fake());\n      promise.resolve(result);\n      await assert.resolves(promise, result);\n      assert.equals(promise.status, \"resolved\");\n      assert.same(promise.resolvedValue, result);\n      assert.isUndefined(promise.rejectedValue);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"rejects the promise","suites":["promise","with custom executor"],"updatePoint":{"line":187,"column":27,"index":5774},"line":187,"code":"    it(\"rejects the promise\", async function () {\n      var error = new Error(\"promise error\");\n      var promise = sinon.promise(sinon.fake());\n      promise.reject(error);\n      await assert.rejects(promise, error);\n      assert.equals(promise.status, \"rejected\");\n      assert.isUndefined(promise.resolvedValue);\n      assert.same(promise.rejectedValue, error);\n    });","file":"promise-test.js","skipped":false,"dir":"test"},{"name":"returns true if all args match","suites":[],"updatePoint":{"line":37,"column":38,"index":851},"line":37,"code":"    it(\"returns true if all args match\", function () {\n      var args = this.args;\n      assert(this.call[method](args[0], args[1], args[2]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns true if first args match","suites":[],"updatePoint":{"line":41,"column":40,"index":1004},"line":41,"code":"    it(\"returns true if first args match\", function () {\n      var args = this.args;\n      assert(this.call[method](args[0], args[1]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns true if first arg match","suites":[],"updatePoint":{"line":45,"column":39,"index":1147},"line":45,"code":"    it(\"returns true if first arg match\", function () {\n      var args = this.args;\n      assert(this.call[method](args[0]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns true for no args","suites":[],"updatePoint":{"line":49,"column":32,"index":1274},"line":49,"code":"    it(\"returns true for no args\", function () {\n      assert(this.call[method]());\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false for too many args","suites":[],"updatePoint":{"line":52,"column":39,"index":1373},"line":52,"code":"    it(\"returns false for too many args\", function () {\n      var args = this.args;\n      assert.isFalse(this.call[method](args[0], args[1], args[2], args[3], {}));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false for wrong arg","suites":[],"updatePoint":{"line":56,"column":35,"index":1542},"line":56,"code":"    it(\"returns false for wrong arg\", function () {\n      var args = this.args;\n      assert.isFalse(this.call[method](args[0], args[2]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false if all args match","suites":[],"updatePoint":{"line":67,"column":39,"index":1876},"line":67,"code":"    it(\"returns false if all args match\", function () {\n      var args = this.args;\n      assert.isFalse(this.call[method](args[0], args[1], args[2]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false if first args match","suites":[],"updatePoint":{"line":71,"column":41,"index":2038},"line":71,"code":"    it(\"returns false if first args match\", function () {\n      var args = this.args;\n      assert.isFalse(this.call[method](args[0], args[1]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false if first arg match","suites":[],"updatePoint":{"line":75,"column":40,"index":2190},"line":75,"code":"    it(\"returns false if first arg match\", function () {\n      var args = this.args;\n      assert.isFalse(this.call[method](args[0]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false for no args","suites":[],"updatePoint":{"line":79,"column":33,"index":2326},"line":79,"code":"    it(\"returns false for no args\", function () {\n      assert.isFalse(this.call[method]());\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns true for too many args","suites":[],"updatePoint":{"line":82,"column":38,"index":2432},"line":82,"code":"    it(\"returns true for too many args\", function () {\n      var args = this.args;\n      assert(this.call[method](args[0], args[1], args[2], args[3], {}));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns true for wrong arg","suites":[],"updatePoint":{"line":86,"column":34,"index":2592},"line":86,"code":"    it(\"returns true for wrong arg\", function () {\n      var args = this.args;\n      assert(this.call[method](args[0], args[2]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"gets call object","suites":["sinonSpy.call","call object"],"updatePoint":{"line":96,"column":24,"index":2838},"line":96,"code":"    it(\"gets call object\", function () {\n      var spy = sinonSpy();\n      spy();\n      var firstCall = spy.getCall(0);\n      assert.isFunction(firstCall.calledOn);\n      assert.isFunction(firstCall.calledWith);\n      assert.isFunction(firstCall.returned);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"stores given call id","suites":["sinonSpy.call","call object"],"updatePoint":{"line":104,"column":28,"index":3107},"line":104,"code":"    it(\"stores given call id\", function () {\n      var call = proxyCall(function () {\n        return;\n      }, {}, [], null, null, 42);\n      assert.same(call.callId, 42);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if callId is undefined","suites":["sinonSpy.call","call object"],"updatePoint":{"line":110,"column":37,"index":3296},"line":110,"code":"    it(\"throws if callId is undefined\", function () {\n      assert.exception(function () {\n        proxyCall.create(function () {\n          return;\n        }, {}, []);\n      });\n    }); // This is actually a spy test:","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"records ascending call id's","suites":["sinonSpy.call","call object"],"updatePoint":{"line":118,"column":35,"index":3513},"line":118,"code":"    it(\"records ascending call id's\", function () {\n      var spy = sinonSpy();\n      spy();\n      assert(this.call.callId < spy.getCall(0).callId);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"exposes thisValue property","suites":["sinonSpy.call","call object"],"updatePoint":{"line":123,"column":34,"index":3669},"line":123,"code":"    it(\"exposes thisValue property\", function () {\n      var spy = sinonSpy();\n      var obj = {};\n      spy.call(obj);\n      assert.same(spy.getCall(0).thisValue, obj);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"has methods to test relative ordering","suites":["sinonSpy.call","call object"],"updatePoint":{"line":129,"column":45,"index":3858},"line":129,"code":"    it(\"has methods to test relative ordering\", function () {\n      var spy = sinonSpy();\n\n      for (var i = 0; i < 4; i++) {\n        spy.call({});\n      }\n\n      var calls = [0, 1, 2, 3].map(function (idx) {\n        return spy.getCall(idx);\n      });\n      assert.isTrue(calls[1].calledBefore(calls[3]));\n      assert.isFalse(calls[1].calledBefore(calls[0]));\n      assert.isTrue(calls[3].calledAfter(calls[1]));\n      assert.isFalse(calls[1].calledAfter(calls[3]));\n      assert.isFalse(calls[0].calledImmediatelyBefore(calls[2]));\n      assert.isTrue(calls[1].calledImmediatelyBefore(calls[2]));\n      assert.isFalse(calls[3].calledImmediatelyBefore(calls[1]));\n      assert.isFalse(calls[3].calledImmediatelyAfter(calls[1]));\n      assert.isTrue(calls[2].calledImmediatelyAfter(calls[1]));\n      assert.isFalse(calls[1].calledImmediatelyAfter(calls[3]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calledOn should return true","suites":["sinonSpy.call","call calledOn"],"updatePoint":{"line":153,"column":35,"index":4794},"line":153,"code":"    it(\"calledOn should return true\", function () {\n      assert(this.call.calledOn(this.thisValue));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calledOn should return false","suites":["sinonSpy.call","call calledOn"],"updatePoint":{"line":156,"column":36,"index":4905},"line":156,"code":"    it(\"calledOn should return false\", function () {\n      assert.isFalse(this.call.calledOn({}));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns true when all args match","suites":["sinonSpy.call","call.calledWithExactly"],"updatePoint":{"line":170,"column":40,"index":5626},"line":170,"code":"    it(\"returns true when all args match\", function () {\n      var args = this.args;\n      assert(this.call.calledWithExactly(args[0], args[1], args[2], args[3]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false for too many args","suites":["sinonSpy.call","call.calledWithExactly"],"updatePoint":{"line":174,"column":39,"index":5797},"line":174,"code":"    it(\"returns false for too many args\", function () {\n      var args = this.args;\n      assert.isFalse(this.call.calledWithExactly(args[0], args[1], args[2], args[3], {}));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false for too few args","suites":["sinonSpy.call","call.calledWithExactly"],"updatePoint":{"line":178,"column":38,"index":5979},"line":178,"code":"    it(\"returns false for too few args\", function () {\n      var args = this.args;\n      assert.isFalse(this.call.calledWithExactly(args[0], args[1]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false for unmatching args","suites":["sinonSpy.call","call.calledWithExactly"],"updatePoint":{"line":182,"column":41,"index":6142},"line":182,"code":"    it(\"returns false for unmatching args\", function () {\n      var args = this.args;\n      assert.isFalse(this.call.calledWithExactly(args[0], args[1], args[1]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns true for no arguments","suites":["sinonSpy.call","call.calledWithExactly"],"updatePoint":{"line":186,"column":37,"index":6310},"line":186,"code":"    it(\"returns true for no arguments\", function () {\n      var call = proxyCall(function () {\n        return;\n      }, {}, [], null, null, 0);\n      assert(call.calledWithExactly());\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns false when called with no args but matching one","suites":["sinonSpy.call","call.calledWithExactly"],"updatePoint":{"line":192,"column":63,"index":6528},"line":192,"code":"    it(\"returns false when called with no args but matching one\", function () {\n      var call = proxyCall(function () {\n        return;\n      }, {}, [], null, null, 0);\n      assert.isFalse(call.calledWithExactly({}));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index","suites":["sinonSpy.call","call.callArg"],"updatePoint":{"line":201,"column":41,"index":6815},"line":201,"code":"    it(\"calls argument at specified index\", function () {\n      var callback = sinonSpy();\n      this.args.push(1, 2, callback);\n      this.call.callArg(2);\n      assert(callback.called);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if argument at specified index is not callable","suites":["sinonSpy.call","call.callArg"],"updatePoint":{"line":207,"column":61,"index":7031},"line":207,"code":"    it(\"throws if argument at specified index is not callable\", function () {\n      this.args.push(1);\n      var call = this.call;\n      assert.exception(function () {\n        call.callArg(0);\n      }, {\n        message: \"Expected argument at position 0 to be a Function, but was number\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if no index is specified","suites":["sinonSpy.call","call.callArg"],"updatePoint":{"line":216,"column":39,"index":7315},"line":216,"code":"    it(\"throws if no index is specified\", function () {\n      var call = this.call;\n      assert.exception(function () {\n        call.callArg();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.callArg"],"updatePoint":{"line":224,"column":38,"index":7514},"line":224,"code":"    it(\"returns callbacks return value\", function () {\n      var callback = sinonSpy(function () {\n        return \"useful value\";\n      });\n      this.args.push(1, 2, callback);\n      var returnValue = this.call.callArg(2);\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["sinonSpy.call","call.callArg"],"updatePoint":{"line":232,"column":37,"index":7795},"line":232,"code":"    it(\"throws if index is not number\", function () {\n      var call = this.call;\n      assert.exception(function () {\n        call.callArg({});\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index","suites":["sinonSpy.call","call.callArgOn"],"updatePoint":{"line":243,"column":41,"index":8082},"line":243,"code":"    it(\"calls argument at specified index\", function () {\n      var callback = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(1, 2, callback);\n      this.call.callArgOn(2, thisObj);\n      assert(callback.called);\n      assert(callback.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if argument at specified index is not callable","suites":["sinonSpy.call","call.callArgOn"],"updatePoint":{"line":254,"column":61,"index":8431},"line":254,"code":"    it(\"throws if argument at specified index is not callable\", function () {\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(1);\n      var call = this.call;\n      assert.exception(function () {\n        call.callArgOn(0, thisObj);\n      }, {\n        message: \"Expected argument at position 0 to be a Function, but was number\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.callArgOn"],"updatePoint":{"line":267,"column":38,"index":8805},"line":267,"code":"    it(\"returns callbacks return value\", function () {\n      var callback = sinonSpy(function () {\n        return \"useful value\";\n      });\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(1, 2, callback);\n      var returnValue = this.call.callArgOn(2, thisObj);\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["sinonSpy.call","call.callArgOn"],"updatePoint":{"line":279,"column":37,"index":9177},"line":279,"code":"    it(\"throws if index is not number\", function () {\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      var call = this.call;\n      assert.exception(function () {\n        call.callArgOn({}, thisObj);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args","suites":["sinonSpy.call","call.callArgWith"],"updatePoint":{"line":294,"column":60,"index":9576},"line":294,"code":"    it(\"calls argument at specified index with provided args\", function () {\n      var object = {};\n      var callback = sinonSpy();\n      this.args.push(1, callback);\n      this.call.callArgWith(1, object);\n      assert(callback.calledWith(object));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls callback without args","suites":["sinonSpy.call","call.callArgWith"],"updatePoint":{"line":301,"column":35,"index":9810},"line":301,"code":"    it(\"calls callback without args\", function () {\n      var callback = sinonSpy();\n      this.args.push(1, callback);\n      this.call.callArgWith(1);\n      assert(callback.calledWith());\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls callback wit multiple args","suites":["sinonSpy.call","call.callArgWith"],"updatePoint":{"line":307,"column":40,"index":10012},"line":307,"code":"    it(\"calls callback wit multiple args\", function () {\n      var object = {};\n      var array = [];\n      var callback = sinonSpy();\n      this.args.push(1, 2, callback);\n      this.call.callArgWith(2, object, array);\n      assert(callback.calledWith(object, array));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.callArgWith"],"updatePoint":{"line":315,"column":38,"index":10288},"line":315,"code":"    it(\"returns callbacks return value\", function () {\n      var object = {};\n      var callback = sinonSpy(function () {\n        return \"useful value\";\n      });\n      this.args.push(1, callback);\n      var returnValue = this.call.callArgWith(1, object);\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if no index is specified","suites":["sinonSpy.call","call.callArgWith"],"updatePoint":{"line":324,"column":39,"index":10603},"line":324,"code":"    it(\"throws if no index is specified\", function () {\n      var call = this.call;\n      assert.exception(function () {\n        call.callArgWith();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["sinonSpy.call","call.callArgWith"],"updatePoint":{"line":332,"column":37,"index":10805},"line":332,"code":"    it(\"throws if index is not number\", function () {\n      var call = this.call;\n      assert.exception(function () {\n        call.callArgWith({});\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args","suites":["sinonSpy.call","call.callArgOnWith"],"updatePoint":{"line":343,"column":60,"index":11119},"line":343,"code":"    it(\"calls argument at specified index with provided args\", function () {\n      var object = {};\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      var callback = sinonSpy();\n      this.args.push(1, callback);\n      this.call.callArgOnWith(1, thisObj, object);\n      assert(callback.calledWith(object));\n      assert(callback.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls callback without args","suites":["sinonSpy.call","call.callArgOnWith"],"updatePoint":{"line":355,"column":35,"index":11486},"line":355,"code":"    it(\"calls callback without args\", function () {\n      var callback = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(1, callback);\n      this.call.callArgOnWith(1, thisObj);\n      assert(callback.calledWith());\n      assert(callback.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"calls callback with multiple args","suites":["sinonSpy.call","call.callArgOnWith"],"updatePoint":{"line":366,"column":41,"index":11822},"line":366,"code":"    it(\"calls callback with multiple args\", function () {\n      var object = {};\n      var array = [];\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      var callback = sinonSpy();\n      this.args.push(1, 2, callback);\n      this.call.callArgOnWith(2, thisObj, object, array);\n      assert(callback.calledWith(object, array));\n      assert(callback.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.callArgOnWith"],"updatePoint":{"line":379,"column":38,"index":12231},"line":379,"code":"    it(\"returns callbacks return value\", function () {\n      var object = {};\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      var callback = sinonSpy(function () {\n        return \"useful value\";\n      });\n      this.args.push(1, callback);\n      var returnValue = this.call.callArgOnWith(1, thisObj, object);\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if argument at specified index is not callable","suites":["sinonSpy.call","call.callArgOnWith"],"updatePoint":{"line":392,"column":61,"index":12659},"line":392,"code":"    it(\"throws if argument at specified index is not callable\", function () {\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(1, 2, 1);\n      var call = this.call;\n      assert.exception(function () {\n        call.callArgOnWith(2, thisObj);\n      }, {\n        message: \"Expected argument at position 2 to be a Function, but was number\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["sinonSpy.call","call.callArgOnWith"],"updatePoint":{"line":405,"column":37,"index":13042},"line":405,"code":"    it(\"throws if index is not number\", function () {\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      var call = this.call;\n      assert.exception(function () {\n        call.callArgOnWith({}, thisObj);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"it should be a reference for the callback","suites":["sinonSpy.call",".callback"],"updatePoint":{"line":419,"column":49,"index":13393},"line":419,"code":"    it(\"it should be a reference for the callback\", function () {\n      var spy = sinonSpy();\n\n      var callback1 = function () {\n        return;\n      };\n\n      var callback2 = function () {\n        return;\n      };\n\n      spy(1, 2, 3, callback1);\n      assert.equals(spy.getCall(0).callback, callback1);\n      spy(1, 2, 3, callback2);\n      assert.equals(spy.getCall(1).callback, callback2);\n      spy(1, 2, 3);\n      assert.isUndefined(spy.getCall(2).callback);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"should be the first argument from the call","suites":["sinonSpy.call",".firstArg"],"updatePoint":{"line":439,"column":50,"index":13912},"line":439,"code":"    it(\"should be the first argument from the call\", function () {\n      var spy = sinonSpy();\n      spy(41, 42, 43);\n      assert.equals(spy.getCall(0).firstArg, 41);\n      spy(44, 45);\n      assert.equals(spy.getCall(1).firstArg, 44);\n      spy(46);\n      assert.equals(spy.getCall(2).firstArg, 46);\n      spy();\n      assert.isUndefined(spy.getCall(3).firstArg);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"should be the last argument from the call","suites":["sinonSpy.call",".lastArg"],"updatePoint":{"line":452,"column":49,"index":14328},"line":452,"code":"    it(\"should be the last argument from the call\", function () {\n      var spy = sinonSpy();\n      spy(41, 42, 43);\n      assert.equals(spy.getCall(0).lastArg, 43);\n      spy(44, 45);\n      assert.equals(spy.getCall(1).lastArg, 45);\n      spy(46);\n      assert.equals(spy.getCall(2).lastArg, 46);\n      spy();\n      assert.isUndefined(spy.getCall(3).lastArg);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":466,"column":41,"index":14772},"line":466,"code":"    it(\"invokes only argument as callback\", function () {\n      var callback = sinonSpy();\n      this.args.push(callback);\n      this.call.yield();\n      assert(callback.calledOnce);\n      assert.equals(callback.args[0].length, 0);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":473,"column":60,"index":15031},"line":473,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      var call = this.call;\n      assert.exception(function () {\n        call.yield();\n      }, {\n        message: \"spy cannot yield since no callback was passed.\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":481,"column":56,"index":15286},"line":481,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      this.proxy.displayName = \"somethingAwesome\";\n      this.args.push(23, 42);\n      var call = this.call;\n      assert.exception(function () {\n        call.yield();\n      }, {\n        message: \"somethingAwesome cannot yield since no callback was passed. Received [23, 42]\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes last argument as callback","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":491,"column":41,"index":15638},"line":491,"code":"    it(\"invokes last argument as callback\", function () {\n      var spy = sinonSpy();\n      this.args.push(24, {}, spy);\n      this.call.yield();\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two callbacks","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":498,"column":38,"index":15863},"line":498,"code":"    it(\"invokes first of two callbacks\", function () {\n      var spy = sinonSpy();\n      var spy2 = sinonSpy();\n      this.args.push(24, {}, spy, spy2);\n      this.call.yield();\n      assert(spy.calledOnce);\n      assert.isFalse(spy2.called);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":506,"column":39,"index":16115},"line":506,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var spy = sinonSpy();\n      this.args.push(spy);\n      this.call.yield(obj, \"Crazy\");\n      assert(spy.calledWith(obj, \"Crazy\"));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":515,"column":38,"index":16356},"line":515,"code":"    it(\"returns callbacks return value\", function () {\n      var spy = sinonSpy(function () {\n        return \"useful value\";\n      });\n      this.args.push(24, {}, spy);\n      var returnValue = this.call.yield();\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["sinonSpy.call","call.yieldTest"],"updatePoint":{"line":523,"column":33,"index":16622},"line":523,"code":"    it(\"throws if callback throws\", function () {\n      this.args.push(function () {\n        throw new Error(\"d'oh!\");\n      });\n      var call = this.call;\n      assert.exception(function () {\n        call.yield();\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"is alias for yield","suites":["sinonSpy.call","call.invokeCallback"],"updatePoint":{"line":534,"column":26,"index":16903},"line":534,"code":"    it(\"is alias for yield\", function () {\n      var call = proxyCall(function () {\n        return;\n      }, {}, [], null, null, 0);\n      assert.same(call.yield, call.invokeCallback);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":543,"column":41,"index":17196},"line":543,"code":"    it(\"invokes only argument as callback\", function () {\n      var callback = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(callback);\n      this.call.yieldOn(thisObj);\n      assert(callback.calledOnce);\n      assert(callback.calledOn(thisObj));\n      assert.equals(callback.args[0].length, 0);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":555,"column":60,"index":17586},"line":555,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      var call = this.call;\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        call.yieldOn(thisObj);\n      }, {\n        message: \"spy cannot yield since no callback was passed.\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":567,"column":56,"index":17930},"line":567,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      this.proxy.displayName = \"somethingAwesome\";\n      this.args.push(23, 42);\n      var call = this.call;\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        call.yieldOn(thisObj);\n      }, {\n        message: \"somethingAwesome cannot yield since no callback was passed. Received [23, 42]\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes last argument as callback","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":581,"column":41,"index":18371},"line":581,"code":"    it(\"invokes last argument as callback\", function () {\n      var spy = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(24, {}, spy);\n      this.call.yieldOn(thisObj);\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n      assert(spy.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two callbacks","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":593,"column":38,"index":18722},"line":593,"code":"    it(\"invokes first of two callbacks\", function () {\n      var spy = sinonSpy();\n      var spy2 = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(24, {}, spy, spy2);\n      this.call.yieldOn(thisObj);\n      assert(spy.calledOnce);\n      assert(spy.calledOn(thisObj));\n      assert.isFalse(spy2.called);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":606,"column":39,"index":19100},"line":606,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var spy = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(spy);\n      this.call.yieldOn(thisObj, obj, \"Crazy\");\n      assert(spy.calledWith(obj, \"Crazy\"));\n      assert(spy.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":620,"column":38,"index":19469},"line":620,"code":"    it(\"returns callbacks return value\", function () {\n      var spy = sinonSpy(function () {\n        return \"useful value\";\n      });\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(24, {}, spy);\n      var returnValue = this.call.yieldOn(thisObj);\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["sinonSpy.call","call.yieldOnTest"],"updatePoint":{"line":632,"column":33,"index":19824},"line":632,"code":"    it(\"throws if callback throws\", function () {\n      this.args.push(function () {\n        throw new Error(\"d'oh!\");\n      });\n      var call = this.call;\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        call.yieldOn(thisObj);\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":648,"column":41,"index":20236},"line":648,"code":"    it(\"invokes only argument as callback\", function () {\n      var callback = sinonSpy();\n      this.args.push({\n        success: callback\n      });\n      this.call.yieldTo(\"success\");\n      assert(callback.calledOnce);\n      assert.equals(callback.args[0].length, 0);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":657,"column":60,"index":20533},"line":657,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      var call = this.call;\n      assert.exception(function () {\n        call.yieldTo(\"success\");\n      }, {\n        message: \"spy cannot yield to 'success' since no callback was passed.\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":665,"column":56,"index":20812},"line":665,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      this.proxy.displayName = \"somethingAwesome\";\n      this.args.push(23, 42);\n      var call = this.call;\n      assert.exception(function () {\n        call.yieldTo(\"success\");\n      }, {\n        message: \"somethingAwesome cannot yield to 'success' since no callback was passed. \" + \"Received [23, 42]\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes property on last argument as callback","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":675,"column":53,"index":21205},"line":675,"code":"    it(\"invokes property on last argument as callback\", function () {\n      var spy = sinonSpy();\n      this.args.push(24, {}, {\n        success: spy\n      });\n      this.call.yieldTo(\"success\");\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two possible callbacks","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":684,"column":47,"index":21477},"line":684,"code":"    it(\"invokes first of two possible callbacks\", function () {\n      var spy = sinonSpy();\n      var spy2 = sinonSpy();\n      this.args.push(24, {}, {\n        error: spy\n      }, {\n        error: spy2\n      });\n      this.call.yieldTo(\"error\");\n      assert(spy.calledOnce);\n      assert.isFalse(spy2.called);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":696,"column":39,"index":21788},"line":696,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var spy = sinonSpy();\n      this.args.push({\n        success: spy\n      });\n      this.call.yieldTo(\"success\", obj, \"Crazy\");\n      assert(spy.calledWith(obj, \"Crazy\"));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":707,"column":38,"index":22069},"line":707,"code":"    it(\"returns callbacks return value\", function () {\n      var spy = sinonSpy(function () {\n        return \"useful value\";\n      });\n      this.args.push(24, {}, {\n        success: spy\n      });\n      var returnValue = this.call.yieldTo(\"success\");\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["sinonSpy.call","call.yieldTo"],"updatePoint":{"line":717,"column":33,"index":22373},"line":717,"code":"    it(\"throws if callback throws\", function () {\n      this.args.push({\n        success: function () {\n          throw new Error(\"d'oh!\");\n        }\n      });\n      var call = this.call;\n      assert.exception(function () {\n        call.yieldTo(\"success\");\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":731,"column":41,"index":22740},"line":731,"code":"    it(\"invokes only argument as callback\", function () {\n      var callback = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push({\n        success: callback\n      });\n      this.call.yieldToOn(\"success\", thisObj);\n      assert(callback.calledOnce);\n      assert.equals(callback.args[0].length, 0);\n      assert(callback.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":745,"column":60,"index":23170},"line":745,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      var call = this.call;\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        call.yieldToOn(\"success\", thisObj);\n      }, {\n        message: \"spy cannot yield to 'success' since no callback was passed.\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if symbol prop is not found","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":757,"column":63,"index":23547},"line":757,"code":"    it(\"throws understandable error if symbol prop is not found\", function () {\n      if (typeof Symbol === \"function\") {\n        var call = this.call;\n        var symbol = Symbol(\"apple pie\");\n        assert.exception(function () {\n          call.yieldToOn(symbol, {});\n        }, {\n          message: \"spy cannot yield to 'Symbol(apple pie)' since no callback was passed.\"\n        });\n      }\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":768,"column":56,"index":23943},"line":768,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      this.proxy.displayName = \"somethingAwesome\";\n      this.args.push(23, 42);\n      var call = this.call;\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        call.yieldToOn(\"success\", thisObj);\n      }, {\n        message: \"somethingAwesome cannot yield to 'success' since no callback was passed. \" + \"Received [23, 42]\"\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes property on last argument as callback","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":782,"column":53,"index":24427},"line":782,"code":"    it(\"invokes property on last argument as callback\", function () {\n      var spy = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(24, {}, {\n        success: spy\n      });\n      this.call.yieldToOn(\"success\", thisObj);\n      assert(spy.calledOnce);\n      assert(spy.calledOn(thisObj));\n      assert.equals(spy.args[0].length, 0);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two possible callbacks","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":796,"column":47,"index":24827},"line":796,"code":"    it(\"invokes first of two possible callbacks\", function () {\n      var spy = sinonSpy();\n      var spy2 = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(24, {}, {\n        error: spy\n      }, {\n        error: spy2\n      });\n      this.call.yieldToOn(\"error\", thisObj);\n      assert(spy.calledOnce);\n      assert(spy.calledOn(thisObj));\n      assert.isFalse(spy2.called);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":813,"column":39,"index":25266},"line":813,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var spy = sinonSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push({\n        success: spy\n      });\n      this.call.yieldToOn(\"success\", thisObj, obj, \"Crazy\");\n      assert(spy.calledWith(obj, \"Crazy\"));\n      assert(spy.calledOn(thisObj));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return value","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":829,"column":38,"index":25675},"line":829,"code":"    it(\"returns callbacks return value\", function () {\n      var spy = sinonSpy(function () {\n        return \"useful value\";\n      });\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      this.args.push(24, {}, {\n        success: spy\n      });\n      var returnValue = this.call.yieldToOn(\"success\", thisObj);\n      assert.equals(returnValue, \"useful value\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["sinonSpy.call","call.yieldToOn"],"updatePoint":{"line":843,"column":33,"index":26070},"line":843,"code":"    it(\"throws if callback throws\", function () {\n      this.args.push({\n        success: function () {\n          throw new Error(\"d'oh!\");\n        }\n      });\n      var call = this.call;\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        call.yieldToOn(\"success\", thisObj);\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes spy name","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":865,"column":25,"index":26577},"line":865,"code":"    it(\"includes spy name\", function () {\n      var object = {\n        doIt: sinonSpy()\n      };\n      object.doIt();\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt()\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes single argument","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":872,"column":32,"index":26798},"line":872,"code":"    it(\"includes single argument\", function () {\n      var object = {\n        doIt: sinonSpy()\n      };\n      object.doIt(42);\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt(42)\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes all arguments","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":879,"column":30,"index":27021},"line":879,"code":"    it(\"includes all arguments\", function () {\n      var object = {\n        doIt: sinonSpy()\n      };\n      object.doIt(42, \"Hey\");\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt(42, 'Hey')\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes explicit return value","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":886,"column":38,"index":27266},"line":886,"code":"    it(\"includes explicit return value\", function () {\n      var object = {\n        doIt: sinonStub().returns(42)\n      };\n      object.doIt(42, \"Hey\");\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt(42, 'Hey') => 42\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes empty string return value","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":893,"column":42,"index":27534},"line":893,"code":"    it(\"includes empty string return value\", function () {\n      var object = {\n        doIt: sinonStub().returns(\"\")\n      };\n      object.doIt(42, \"Hey\");\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt(42, 'Hey') => ''\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes exception","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":900,"column":26,"index":27786},"line":900,"code":"    it(\"includes exception\", function () {\n      var object = {\n        doIt: sinonStub().throws(\"TypeError\")\n      };\n      assert.exception(function () {\n        object.doIt();\n      });\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt() !TypeError\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes exception message if any","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":909,"column":41,"index":28097},"line":909,"code":"    it(\"includes exception message if any\", function () {\n      var object = {\n        doIt: sinonStub().throws(\"TypeError\", \"Oh noes!\")\n      };\n      assert.exception(function () {\n        object.doIt();\n      });\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt() !TypeError(Oh noes!)\");\n    }); // these tests are ensuring that call.toString is handled by sinonFormat","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"formats arguments with sinonFormat","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":919,"column":42,"index":28505},"line":919,"code":"    it(\"formats arguments with sinonFormat\", function () {\n      var object = {\n        doIt: sinonSpy()\n      };\n      object.doIt(42);\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt(42)\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"formats return value with sinonFormat","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":926,"column":45,"index":28743},"line":926,"code":"    it(\"formats return value with sinonFormat\", function () {\n      var object = {\n        doIt: sinonStub().returns(42)\n      };\n      object.doIt();\n      assert.equals(object.doIt.getCall(0).toString().replace(/ at.*/g, \"\"), \"doIt() => 42\");\n    }); // https://github.com/sinonjs/sinon/issues/1066","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"does not throw when the call stack is empty","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":936,"column":51,"index":29095},"line":936,"code":"    it(\"does not throw when the call stack is empty\", async function () {\n      if (typeof Promise === \"undefined\") {\n        this.skip();\n      }\n\n      var stub1 = sinonStub().resolves(1);\n      var stub2 = sinonStub().returns(1);\n      await stub2(await stub1());\n      assert.equals(stub2.getCall(0).toString().replace(/ at.*/g, \"\"), \"stub(1) => 1\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"includes first stack entry from end-user code","suites":["sinonSpy.call","call.toString"],"updatePoint":{"line":948,"column":53,"index":29503},"line":948,"code":"    it(\"includes first stack entry from end-user code\", function () {\n      /* We find the first stack frame that points to end-user code and\n       * add it to the error message. We do this by chopping off a\n       * constant number of stack frames, so if this test fails, you\n       * probably need to chop off a different number of frames\n       */\n      if (typeof __filename === \"undefined\") {\n        this.skip();\n      }\n\n      var object = {\n        doIt: sinonSpy()\n      };\n      object.doIt();\n      const [name, stackFrame] = object.doIt.getCall(0).toString().split(\" at \");\n      assert.equals(name, \"doIt()\");\n      assert.contains(stackFrame, __filename);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"creates original object","suites":["sinonSpy.call","constructor"],"updatePoint":{"line":976,"column":31,"index":30420},"line":976,"code":"    it(\"creates original object\", function () {\n      var myInstance = new this.CustomConstructor();\n      assert(this.customPrototype.isPrototypeOf(myInstance));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"does not interfere with instanceof","suites":["sinonSpy.call","constructor"],"updatePoint":{"line":980,"column":42,"index":30602},"line":980,"code":"    it(\"does not interfere with instanceof\", function () {\n      var myInstance = new this.CustomConstructor();\n      assert(myInstance instanceof this.CustomConstructor);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"records usage","suites":["sinonSpy.call","constructor"],"updatePoint":{"line":984,"column":21,"index":30761},"line":984,"code":"    it(\"records usage\", function () {\n      var myInstance = new this.CustomConstructor(); // eslint-disable-line no-unused-vars\n\n      assert(this.CustomConstructor.called);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if spying on non-existent property","suites":["sinonSpy.call","functions"],"updatePoint":{"line":991,"column":49,"index":31016},"line":991,"code":"    it(\"throws if spying on non-existent property\", function () {\n      var myObj = {};\n      assert.exception(function () {\n        sinonSpy(myObj, \"ouch\");\n      });\n      assert.isUndefined(myObj.ouch);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"throws if spying on non-existent object","suites":["sinonSpy.call","functions"],"updatePoint":{"line":998,"column":47,"index":31228},"line":998,"code":"    it(\"throws if spying on non-existent object\", function () {\n      assert.exception(function () {\n        sinonSpy(undefined, \"ouch\");\n      });\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"haves toString method","suites":["sinonSpy.call","functions"],"updatePoint":{"line":1003,"column":29,"index":31366},"line":1003,"code":"    it(\"haves toString method\", function () {\n      var obj = {\n        meth: function () {\n          return;\n        }\n      };\n      sinonSpy(obj, \"meth\");\n      assert.equals(obj.meth.toString(), \"meth\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"toString should say 'spy' when unable to infer name","suites":["sinonSpy.call","functions"],"updatePoint":{"line":1012,"column":59,"index":31612},"line":1012,"code":"    it(\"toString should say 'spy' when unable to infer name\", function () {\n      var spy = sinonSpy();\n      assert.equals(spy.toString(), \"spy\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"toString should report name of spied function","suites":["sinonSpy.call","functions"],"updatePoint":{"line":1016,"column":53,"index":31762},"line":1016,"code":"    it(\"toString should report name of spied function\", function () {\n      function myTestFunc() {\n        return;\n      }\n\n      var spy = sinonSpy(myTestFunc);\n      assert.equals(spy.toString(), \"myTestFunc\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"toString should prefer displayName property if available","suites":["sinonSpy.call","functions"],"updatePoint":{"line":1024,"column":64,"index":31995},"line":1024,"code":"    it(\"toString should prefer displayName property if available\", function () {\n      function myTestFunc() {\n        return;\n      }\n\n      myTestFunc.displayName = \"My custom method\";\n      var spy = sinonSpy(myTestFunc);\n      assert.equals(spy.toString(), \"My custom method\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"toString should prefer property name if possible","suites":["sinonSpy.call","functions"],"updatePoint":{"line":1033,"column":56,"index":32277},"line":1033,"code":"    it(\"toString should prefer property name if possible\", function () {\n      var obj = {};\n      obj.meth = sinonSpy();\n      obj.meth();\n      assert.equals(obj.meth.toString(), \"meth\");\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"resets spy state","suites":["sinonSpy.call",".reset"],"updatePoint":{"line":1054,"column":24,"index":32909},"line":1054,"code":"    it(\"resets spy state\", function () {\n      var spy = sinonSpy();\n      spy();\n      spy.resetHistory();\n      assertReset(spy);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"resets call order state","suites":["sinonSpy.call",".reset"],"updatePoint":{"line":1060,"column":31,"index":33056},"line":1060,"code":"    it(\"resets call order state\", function () {\n      var spies = [sinonSpy(), sinonSpy()];\n      spies[0]();\n      spies[1]();\n      spies[0].resetHistory();\n      assert(!spies[0].calledBefore(spies[1]));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"resets fakes returned by withArgs","suites":["sinonSpy.call",".reset"],"updatePoint":{"line":1067,"column":41,"index":33281},"line":1067,"code":"    it(\"resets fakes returned by withArgs\", function () {\n      var spy = sinonSpy();\n      var fakeA = spy.withArgs(\"a\");\n      var fakeB = spy.withArgs(\"b\");\n      spy(\"a\");\n      spy(\"b\");\n      spy(\"c\");\n      var fakeC = spy.withArgs(\"c\");\n      spy.resetHistory();\n      assertReset(fakeA);\n      assertReset(fakeB);\n      assertReset(fakeC);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"defines withArgs method","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1082,"column":31,"index":33672},"line":1082,"code":"    it(\"defines withArgs method\", function () {\n      var spy = sinonSpy();\n      assert.isFunction(spy.withArgs);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"records single call","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1086,"column":27,"index":33791},"line":1086,"code":"    it(\"records single call\", function () {\n      var spy = sinonSpy().withArgs(1);\n      spy(1);\n      assert.equals(spy.callCount, 1);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"records non-matching call on original spy","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1091,"column":49,"index":33958},"line":1091,"code":"    it(\"records non-matching call on original spy\", function () {\n      var spy = sinonSpy();\n      var argSpy = spy.withArgs(1);\n      spy(1);\n      spy(2);\n      assert.equals(spy.callCount, 2);\n      assert.equals(argSpy.callCount, 1);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"records non-matching call with several arguments separately","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1099,"column":67,"index":34223},"line":1099,"code":"    it(\"records non-matching call with several arguments separately\", function () {\n      var spy = sinonSpy();\n      var argSpy = spy.withArgs(1, \"str\", {});\n      spy(1);\n      spy(1, \"str\", {});\n      assert.equals(spy.callCount, 2);\n      assert.equals(argSpy.callCount, 1);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"records for partial argument match","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1107,"column":42,"index":34485},"line":1107,"code":"    it(\"records for partial argument match\", function () {\n      var spy = sinonSpy();\n      var argSpy = spy.withArgs(1, \"str\", {});\n      spy(1);\n      spy(1, \"str\", {});\n      spy(1, \"str\", {}, []);\n      assert.equals(spy.callCount, 3);\n      assert.equals(argSpy.callCount, 2);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"records filtered spy when original throws","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1116,"column":49,"index":34783},"line":1116,"code":"    it(\"records filtered spy when original throws\", function () {\n      var spy = sinonSpy(function () {\n        throw new Error(\"Oops\");\n      });\n      var argSpy = spy.withArgs({}, []);\n      assert.exception(function () {\n        spy(1);\n      });\n      assert.exception(function () {\n        spy({}, []);\n      });\n      assert.equals(spy.callCount, 2);\n      assert.equals(argSpy.callCount, 1);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"returns existing override for arguments","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1130,"column":47,"index":35190},"line":1130,"code":"    it(\"returns existing override for arguments\", function () {\n      var spy = sinonSpy();\n      var argSpy = spy.withArgs({}, []);\n      var another = spy.withArgs({}, []);\n      spy();\n      spy({}, []);\n      spy({}, [], 2);\n      assert.same(another, argSpy);\n      refute.same(another, spy);\n      assert.equals(spy.callCount, 3);\n      assert.equals(spy.withArgs({}, []).callCount, 2);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"chains withArgs calls on original spy","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1142,"column":45,"index":35589},"line":1142,"code":"    it(\"chains withArgs calls on original spy\", function () {\n      var spy = sinonSpy();\n      var numArgSpy = spy.withArgs({}, []).withArgs(3);\n      spy();\n      spy({}, []);\n      spy(3);\n      assert.equals(spy.callCount, 3);\n      assert.equals(numArgSpy.callCount, 1);\n      assert.equals(spy.withArgs({}, []).callCount, 1);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"initializes filtered spy with callCount","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1152,"column":47,"index":35931},"line":1152,"code":"    it(\"initializes filtered spy with callCount\", function () {\n      var spy = sinonSpy();\n      spy(\"a\");\n      spy(\"b\");\n      spy(\"b\");\n      spy(\"c\");\n      spy(\"c\");\n      spy(\"c\");\n      var argSpy1 = spy.withArgs(\"a\");\n      var argSpy2 = spy.withArgs(\"b\");\n      var argSpy3 = spy.withArgs(\"c\");\n      assert.equals(argSpy1.callCount, 1);\n      assert.equals(argSpy2.callCount, 2);\n      assert.equals(argSpy3.callCount, 3);\n      assert(argSpy1.called);\n      assert(argSpy2.called);\n      assert(argSpy3.called);\n      assert(argSpy1.calledOnce);\n      assert(argSpy2.calledTwice);\n      assert(argSpy3.calledThrice);\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"initializes filtered spy with first, second, third and last call","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1173,"column":72,"index":36593},"line":1173,"code":"    it(\"initializes filtered spy with first, second, third and last call\", function () {\n      var spy = sinonSpy();\n      spy(\"a\", 1);\n      spy(\"b\", 2);\n      spy(\"b\", 3);\n      spy(\"b\", 4);\n      var argSpy1 = spy.withArgs(\"a\");\n      var argSpy2 = spy.withArgs(\"b\");\n      assert(argSpy1.firstCall.calledWithExactly(\"a\", 1));\n      assert(argSpy1.lastCall.calledWithExactly(\"a\", 1));\n      assert(argSpy2.firstCall.calledWithExactly(\"b\", 2));\n      assert(argSpy2.secondCall.calledWithExactly(\"b\", 3));\n      assert(argSpy2.thirdCall.calledWithExactly(\"b\", 4));\n      assert(argSpy2.lastCall.calledWithExactly(\"b\", 4));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"initializes filtered spy with arguments","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1188,"column":47,"index":37200},"line":1188,"code":"    it(\"initializes filtered spy with arguments\", function () {\n      var spy = sinonSpy();\n      spy(\"a\");\n      spy(\"b\");\n      spy(\"b\", \"c\", \"d\");\n      var argSpy1 = spy.withArgs(\"a\");\n      var argSpy2 = spy.withArgs(\"b\");\n      assert(argSpy1.getCall(0).calledWithExactly(\"a\"));\n      assert(argSpy2.getCall(0).calledWithExactly(\"b\"));\n      assert(argSpy2.getCall(1).calledWithExactly(\"b\", \"c\", \"d\"));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"initializes filtered spy with thisValues","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1199,"column":48,"index":37618},"line":1199,"code":"    it(\"initializes filtered spy with thisValues\", function () {\n      var spy = sinonSpy();\n      var thisValue1 = {};\n      var thisValue2 = {};\n      var thisValue3 = {};\n      spy.call(thisValue1, \"a\");\n      spy.call(thisValue2, \"b\");\n      spy.call(thisValue3, \"b\");\n      var argSpy1 = spy.withArgs(\"a\");\n      var argSpy2 = spy.withArgs(\"b\");\n      assert(argSpy1.getCall(0).calledOn(thisValue1));\n      assert(argSpy2.getCall(0).calledOn(thisValue2));\n      assert(argSpy2.getCall(1).calledOn(thisValue3));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"initializes filtered spy with return values","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1213,"column":51,"index":38145},"line":1213,"code":"    it(\"initializes filtered spy with return values\", function () {\n      var spy = sinonSpy(function (value) {\n        return value;\n      });\n      spy(\"a\");\n      spy(\"b\");\n      spy(\"b\");\n      var argSpy1 = spy.withArgs(\"a\");\n      var argSpy2 = spy.withArgs(\"b\");\n      assert(argSpy1.getCall(0).returned(\"a\"));\n      assert(argSpy2.getCall(0).returned(\"b\"));\n      assert(argSpy2.getCall(1).returned(\"b\"));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"initializes filtered spy with call order","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1226,"column":48,"index":38564},"line":1226,"code":"    it(\"initializes filtered spy with call order\", function () {\n      var spy = sinonSpy();\n      spy(\"a\");\n      spy(\"b\");\n      spy(\"b\");\n      var argSpy1 = spy.withArgs(\"a\");\n      var argSpy2 = spy.withArgs(\"b\");\n      assert(argSpy2.getCall(0).calledAfter(argSpy1.getCall(0)));\n      assert(argSpy2.getCall(1).calledAfter(argSpy1.getCall(0)));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"initializes filtered spy with exceptions","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1236,"column":48,"index":38923},"line":1236,"code":"    it(\"initializes filtered spy with exceptions\", function () {\n      var spy = sinonSpy(function (x, y) {\n        var error = new Error();\n        error.name = y;\n        throw error;\n      });\n      assert.exception(function () {\n        spy(\"a\", \"1\");\n      });\n      assert.exception(function () {\n        spy(\"b\", \"2\");\n      });\n      assert.exception(function () {\n        spy(\"b\", \"3\");\n      });\n      var argSpy1 = spy.withArgs(\"a\");\n      var argSpy2 = spy.withArgs(\"b\");\n      assert(argSpy1.getCall(0).threw(\"1\"));\n      assert(argSpy2.getCall(0).threw(\"2\"));\n      assert(argSpy2.getCall(1).threw(\"3\"));\n    });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"captures a stack trace","suites":["sinonSpy.call",".withArgs"],"updatePoint":{"line":1258,"column":28,"index":39536},"line":1258,"code":"  it(\"captures a stack trace\", function () {\n    var spy = sinonSpy();\n    spy();\n    assert.isString(spy.getCall(0).stack);\n  });","file":"proxy-call-test.js","skipped":false,"dir":"test"},{"name":"named","suites":["proxy",".printf","name"],"updatePoint":{"line":44,"column":15,"index":888},"line":44,"code":"      it(\"named\", function () {\n        var named = createFaux(function cool() {\n          return;\n        });\n        assert.equals(named.printf(\"%n\"), \"cool\");\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"anon","suites":["proxy",".printf","name"],"updatePoint":{"line":50,"column":14,"index":1059},"line":50,"code":"      it(\"anon\", function () {\n        var anon = sinonSpy(function () {\n          return;\n        });\n        assert.equals(anon.printf(\"%n\"), \"spy\");\n        var noFn = sinonSpy();\n        assert.equals(noFn.printf(\"%n\"), \"spy\");\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"count","suites":["proxy",".printf","name"],"updatePoint":{"line":59,"column":13,"index":1308},"line":59,"code":"    it(\"count\", function () {\n      // Throwing just to make sure it has no effect.\n      var faux = createFaux(sinonStub().throws());\n\n      function call() {\n        assert.exception(function () {\n          faux();\n        });\n      }\n\n      call();\n      assert.equals(faux.printf(\"%c\"), \"once\");\n      call();\n      assert.equals(faux.printf(\"%c\"), \"twice\");\n      call();\n      assert.equals(faux.printf(\"%c\"), \"thrice\");\n      call();\n      assert.equals(faux.printf(\"%c\"), \"4 times\");\n    });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"oneLine","suites":["proxy",".printf","calls"],"updatePoint":{"line":79,"column":17,"index":1848},"line":79,"code":"      it(\"oneLine\", function () {\n        function verify(arg, expected) {\n          var faux = createFaux();\n          faux(arg);\n          assert.equals(faux.printf(\"%C\").replace(/ at.*/g, \"\"), `\\n    ${expected}`);\n        }\n\n        verify(true, \"faux(true)\");\n        verify(false, \"faux(false)\");\n        verify(undefined, \"faux(undefined)\");\n        verify(1, \"faux(1)\");\n        verify(0, \"faux(0)\");\n        verify(-1, \"faux(-1)\");\n        verify(-1.1, \"faux(-1.1)\");\n        verify(Infinity, \"faux(Infinity)\");\n        verify([\"a\"], \"faux([ 'a' ])\");\n        verify({\n          a: \"a\"\n        }, \"faux({ a: 'a' })\");\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"multiline","suites":["proxy",".printf","calls"],"updatePoint":{"line":99,"column":19,"index":2487},"line":99,"code":"      it(\"multiline\", function () {\n        var str = \"faux\\ntest\";\n        var faux = createFaux();\n        faux(str);\n        faux(str);\n        faux(str);\n        assert.equals(faux.printf(\"%C\").replace(/ at.*/g, \"\"), \"\\n    faux('faux\\\\ntest')\\n    faux('faux\\\\ntest')\\n    faux('faux\\\\ntest')\");\n        faux.resetHistory();\n        faux(\"test\");\n        faux(\"faux\\ntest\");\n        faux(\"faux\\ntest\");\n        assert.equals(faux.printf(\"%C\").replace(/ at.*/g, \"\"), \"\\n    faux('test')\\n    faux('faux\\\\ntest')\\n    faux('faux\\\\ntest')\");\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"thisValues","suites":["proxy",".printf","calls"],"updatePoint":{"line":113,"column":18,"index":3048},"line":113,"code":"    it(\"thisValues\", function () {\n      var faux = createFaux();\n      faux();\n      assert.equals(faux.printf(\"%t\"), \"undefined\");\n      faux.resetHistory();\n      faux.call(true);\n      assert.equals(faux.printf(\"%t\"), \"true\");\n    });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"unmatched","suites":["proxy",".printf","calls"],"updatePoint":{"line":121,"column":17,"index":3286},"line":121,"code":"    it(\"unmatched\", function () {\n      var faux = createFaux();\n      assert.equals(faux.printf(\"%λ\"), \"%λ\");\n    });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"*","suites":["proxy",".printf","calls"],"updatePoint":{"line":125,"column":9,"index":3397},"line":125,"code":"    it(\"*\", function () {\n      var faux = createFaux();\n      assert.equals(faux.printf(\"%*\", 1.4567, \"a\", true, {}, [], undefined, null), \"1.4567, 'a', true, {}, [], undefined, null\");\n      assert.equals(faux.printf(\"%*\", \"a\", \"b\", \"c\"), \"'a', 'b', 'c'\");\n    });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"no calls","suites":["proxy",".printf","arguments"],"updatePoint":{"line":131,"column":18,"index":3713},"line":131,"code":"      it(\"no calls\", function () {\n        var faux = createFaux();\n        assert.equals(faux.printf(\"%D\"), \"\");\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"single call with arguments","suites":["proxy",".printf","arguments"],"updatePoint":{"line":135,"column":36,"index":3855},"line":135,"code":"      it(\"single call with arguments\", function () {\n        var faux = createFaux();\n        faux(1, \"a\", true, false, [], {}, null, undefined);\n        assert.equals(faux.printf(\"%D\"), `\\n${color.red(\"1\")}\\n${color.red(\"'\\\"a\\\"'\")}\\n${color.red(\"true\")}\\n${color.red(\"false\")}\\n${color.red(\"[]\")}\\n${color.red(\"{}\")}\\n${color.red(\"null\")}\\n${color.red(\"undefined\")}`);\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"single call without arguments","suites":["proxy",".printf","arguments"],"updatePoint":{"line":140,"column":39,"index":4238},"line":140,"code":"      it(\"single call without arguments\", function () {\n        var faux = createFaux();\n        faux();\n        assert.equals(faux.printf(\"%D\"), \"\");\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"multiple calls with arguments","suites":["proxy",".printf","arguments"],"updatePoint":{"line":145,"column":39,"index":4399},"line":145,"code":"      it(\"multiple calls with arguments\", function () {\n        var faux = createFaux();\n        faux(1, \"a\", true);\n        faux(false, [], {});\n        faux(null, undefined);\n        assert.equals(faux.printf(\"%D\"), `${\"\\nCall 1:\\n\"}${color.red(\"1\")}\\n${color.red(\"'\\\"a\\\"'\")}\\n${color.red(\"true\")}\\nCall 2:` + `\\n${color.red(\"false\")}\\n${color.red(\"[]\")}\\n${color.red(\"{}\")}\\nCall 3:` + `\\n${color.red(\"null\")}\\n${color.red(\"undefined\")}`);\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"multiple calls without arguments","suites":["proxy",".printf","arguments"],"updatePoint":{"line":152,"column":42,"index":4855},"line":152,"code":"      it(\"multiple calls without arguments\", function () {\n        var faux = createFaux();\n        faux();\n        faux();\n        faux();\n        assert.equals(faux.printf(\"%D\"), \"\\nCall 1:\\nCall 2:\\nCall 3:\");\n      });","file":"proxy-test.js","skipped":false,"dir":"test"},{"name":"is defined","suites":["restore-object"],"updatePoint":{"line":15,"column":16,"index":370},"line":15,"code":"  it(\"is defined\", function () {\n    assert.isFunction(restoreObject);\n  });","file":"restore-object-test.js","skipped":false,"dir":"test"},{"name":"throws on falsy input","suites":["restore-object"],"updatePoint":{"line":18,"column":27,"index":458},"line":18,"code":"  it(\"throws on falsy input\", function () {\n    assert.exception(function () {\n      restoreObject(false);\n    }, {\n      message: \"Trying to restore object but received false\"\n    });\n    assert.exception(function () {\n      restoreObject(null);\n    }, {\n      message: \"Trying to restore object but received null\"\n    });\n    assert.exception(function () {\n      restoreObject();\n    }, {\n      message: \"Trying to restore object but received undefined\"\n    });\n  });","file":"restore-object-test.js","skipped":false,"dir":"test"},{"name":"throws with no spies or stubs","suites":["restore-object"],"updatePoint":{"line":35,"column":35,"index":936},"line":35,"code":"  it(\"throws with no spies or stubs\", function () {\n    assert.exception(function () {\n      restoreObject({\n        catpants: function () {},\n        meh: \"okay\"\n      });\n    }, {\n      message: \"Expected to restore methods on object but found none\"\n    });\n  });","file":"restore-object-test.js","skipped":false,"dir":"test"},{"name":"works with mixed spies and stubs","suites":["restore-object"],"updatePoint":{"line":45,"column":38,"index":1205},"line":45,"code":"  it(\"works with mixed spies and stubs\", function () {\n    var object = {\n      who: function () {},\n      what: function () {},\n      when: function () {},\n      why: \"I don't know\"\n    };\n    sinonSpy(object, \"who\");\n    sinonStub(object, \"what\");\n    refute.exception(function () {\n      object = restoreObject(object);\n    });\n    refute.isFunction(object.who.restore);\n    refute.isFunction(object.what.restore);\n    refute.isFunction(object.when.restore);\n  });","file":"restore-object-test.js","skipped":false,"dir":"test"},{"name":"restores entire spied object","suites":["restore-object"],"updatePoint":{"line":61,"column":34,"index":1669},"line":61,"code":"  it(\"restores entire spied object\", function () {\n    var object = sinonSpy({\n      foo: function () {},\n      bar: function () {}\n    });\n    object = restoreObject(object);\n    refute.isFunction(object.foo.restore);\n    refute.isFunction(object.bar.restore);\n  });","file":"restore-object-test.js","skipped":false,"dir":"test"},{"name":"restores entire stubbed object","suites":["restore-object"],"updatePoint":{"line":70,"column":36,"index":1939},"line":70,"code":"  it(\"restores entire stubbed object\", function () {\n    var object = sinonStub({\n      foo: function () {},\n      bar: function () {}\n    });\n    object = restoreObject(object);\n    refute.isFunction(object.foo.restore);\n    refute.isFunction(object.bar.restore);\n  });","file":"restore-object-test.js","skipped":false,"dir":"test"},{"name":"exposes match","suites":["Sandbox"],"updatePoint":{"line":57,"column":19,"index":1555},"line":57,"code":"  it(\"exposes match\", function () {\n    var sandbox = new Sandbox();\n    assert.same(sandbox.match, match);\n  });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"can be reset without failing when pre-configured to use a fake server","suites":["Sandbox"],"updatePoint":{"line":61,"column":75,"index":1725},"line":61,"code":"  it(\"can be reset without failing when pre-configured to use a fake server\", function () {\n    var sandbox = createSandbox({\n      useFakeServer: true\n    });\n    refute.exception(function () {\n      sandbox.reset();\n    });\n  });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"can be reset without failing when configured to use a fake server","suites":["Sandbox"],"updatePoint":{"line":69,"column":71,"index":1953},"line":69,"code":"  it(\"can be reset without failing when configured to use a fake server\", function () {\n    var sandbox = new Sandbox();\n    sandbox.useFakeServer();\n    refute.exception(function () {\n      sandbox.reset();\n    });\n  });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"returns a mock","suites":["Sandbox",".mock"],"updatePoint":{"line":80,"column":22,"index":2235},"line":80,"code":"    it(\"returns a mock\", function () {\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      var actual = this.sandbox.mock(object);\n      actual.expects(\"method\");\n      assert.equals(typeof actual.verify, \"function\");\n      assert.equals(typeof object.method.restore, \"function\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"adds mock to fake array","suites":["Sandbox",".mock"],"updatePoint":{"line":91,"column":31,"index":2575},"line":91,"code":"    it(\"adds mock to fake array\", function () {\n      var fakes = this.sandbox.getFakes();\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      var expected = this.sandbox.mock(object);\n      assert(fakes.indexOf(expected) !== -1);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"appends mocks to fake array","suites":["Sandbox",".mock"],"updatePoint":{"line":101,"column":35,"index":2860},"line":101,"code":"    it(\"appends mocks to fake array\", function () {\n      var fakes = this.sandbox.getFakes();\n      this.sandbox.mock({});\n      this.sandbox.mock({});\n      assert.equals(fakes.length, 2);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"appends mocks and stubs to fake array","suites":["Sandbox","stub and mock test"],"updatePoint":{"line":112,"column":45,"index":3197},"line":112,"code":"    it(\"appends mocks and stubs to fake array\", function () {\n      var fakes = this.sandbox.getFakes();\n      this.sandbox.mock({\n        method: function () {\n          return;\n        }\n      }, \"method\");\n      this.sandbox.stub({\n        method: function () {\n          return;\n        }\n      }, \"method\");\n      assert.equals(fakes.length, 2);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"many fakes are created","suites":["Sandbox","stub and mock test","warns of potential leak when"],"updatePoint":{"line":134,"column":32,"index":3785},"line":134,"code":"      it(\"many fakes are created\", function () {\n        assert.equals(typeof this.sandbox.leakThreshold, \"number\");\n        createTooManyFakes(this.sandbox);\n        assert(warn.called);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"a configurable number of fakes are created","suites":["Sandbox","stub and mock test","warns of potential leak when"],"updatePoint":{"line":139,"column":52,"index":4003},"line":139,"code":"      it(\"a configurable number of fakes are created\", function () {\n        this.sandbox.leakThreshold = 20;\n        createTooManyFakes(this.sandbox);\n        assert(warn.called);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"a leak warning has not already been output","suites":["Sandbox","stub and mock test","warns of potential leak when"],"updatePoint":{"line":144,"column":52,"index":4194},"line":144,"code":"      it(\"a leak warning has not already been output\", function () {\n        this.sandbox.leakThreshold = 20;\n        createTooManyFakes(this.sandbox);\n        this.sandbox.restore();\n        warn.resetHistory();\n        createTooManyFakes(this.sandbox);\n        assert(!warn.called);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a spy","suites":["Sandbox",".spy"],"updatePoint":{"line":161,"column":27,"index":4658},"line":161,"code":"    it(\"should return a spy\", function () {\n      var sandbox = createSandbox();\n      var spy = sandbox.spy();\n      assert.isFunction(spy);\n      assert.equals(spy.displayName, \"spy\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a spy to the internal collection","suites":["Sandbox",".spy"],"updatePoint":{"line":167,"column":51,"index":4877},"line":167,"code":"    it(\"should add a spy to the internal collection\", function () {\n      var sandbox = createSandbox();\n      var fakes = sandbox.getFakes();\n      var expected;\n      expected = sandbox.spy();\n      assert.isTrue(fakes.indexOf(expected) !== -1);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"stubs existing methods","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":179,"column":30,"index":5241},"line":179,"code":"    it(\"stubs existing methods\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = this.sandbox.createStubInstance(Class);\n      stub.method.returns(3);\n      assert.equals(3, stub.method());\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should require a function","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":192,"column":33,"index":5554},"line":192,"code":"    it(\"should require a function\", function () {\n      var sandbox = this.sandbox;\n      assert.exception(function () {\n        sandbox.createStubInstance(\"not a function\");\n      }, {\n        name: \"TypeError\",\n        message: \"The constructor should be a function.\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"resets all stub methods on reset()","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":201,"column":42,"index":5851},"line":201,"code":"    it(\"resets all stub methods on reset()\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method1 = function () {\n        return;\n      };\n\n      Class.prototype.method2 = function () {\n        return;\n      };\n\n      Class.prototype.method3 = function () {\n        return;\n      };\n\n      var stub = this.sandbox.createStubInstance(Class);\n      stub.method1.returns(1);\n      stub.method2.returns(2);\n      stub.method3.returns(3);\n      assert.equals(3, stub.method3());\n      this.sandbox.reset();\n      assert.isUndefined(stub.method1());\n      assert.isUndefined(stub.method2());\n      assert.isUndefined(stub.method3());\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"doesn't stub fake methods","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":228,"column":33,"index":6527},"line":228,"code":"    it(\"doesn't stub fake methods\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.noop = noop;\n      var stub = this.sandbox.createStubInstance(Class);\n      assert.exception(function () {\n        stub.method.returns(3);\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"doesn't call the constructor","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":239,"column":36,"index":6817},"line":239,"code":"    it(\"doesn't call the constructor\", function () {\n      var Class = function (a, b) {\n        var c = a + b;\n        throw c;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = this.sandbox.createStubInstance(Class);\n      refute.exception(function () {\n        stub.method(3);\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"retains non function values","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":254,"column":35,"index":7162},"line":254,"code":"    it(\"retains non function values\", function () {\n      var TYPE = \"some-value\";\n\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.noop = noop;\n      Class.prototype.type = TYPE;\n      var stub = this.sandbox.createStubInstance(Class);\n      assert.equals(TYPE, stub.type);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"has no side effects on the prototype","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":266,"column":44,"index":7486},"line":266,"code":"    it(\"has no side effects on the prototype\", function () {\n      var proto = {\n        method: function () {\n          throw new Error(\"error\");\n        }\n      };\n\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype = proto;\n      var stub = this.sandbox.createStubInstance(Class);\n      refute.exception(stub.method);\n      assert.exception(proto.method);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"throws exception for non function params","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":282,"column":48,"index":7886},"line":282,"code":"    it(\"throws exception for non function params\", function () {\n      var types = [{}, 3, \"hi!\"];\n\n      for (var i = 0; i < types.length; i++) {\n        // yes, it's silly to create functions in a loop, it's also a test\n\n        /* eslint-disable-next-line no-loop-func */\n        assert.exception(function () {\n          this.sandbox.createStubInstance(types[i]);\n        });\n      }\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows providing optional overrides","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":294,"column":43,"index":8276},"line":294,"code":"    it(\"allows providing optional overrides\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = this.sandbox.createStubInstance(Class, {\n        method: sinonStub().returns(3)\n      });\n      assert.equals(3, stub.method());\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows providing optional returned values","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":308,"column":49,"index":8625},"line":308,"code":"    it(\"allows providing optional returned values\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = this.sandbox.createStubInstance(Class, {\n        method: 3\n      });\n      assert.equals(3, stub.method());\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows providing null as a return value","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":322,"column":47,"index":8951},"line":322,"code":"    it(\"allows providing null as a return value\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = this.sandbox.createStubInstance(Class, {\n        method: null\n      });\n      assert.equals(null, stub.method());\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"throws an exception when trying to override non-existing property","suites":["Sandbox",".createStubInstance"],"updatePoint":{"line":336,"column":73,"index":9309},"line":336,"code":"    it(\"throws an exception when trying to override non-existing property\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var sandbox = this.sandbox;\n      assert.exception(function () {\n        sandbox.createStubInstance(Class, {\n          foo: sinonStub().returns(3)\n        });\n      }, {\n        message: \"Cannot stub foo. Property does not exist!\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"fails if stubbing property on null","suites":["Sandbox",".stub"],"updatePoint":{"line":359,"column":42,"index":9867},"line":359,"code":"    it(\"fails if stubbing property on null\", function () {\n      var sandbox = this.sandbox;\n      assert.exception(function () {\n        sandbox.stub(null, \"prop\");\n      }, {\n        message: \"Trying to stub property 'prop' of null\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"fails if stubbing symbol on null","suites":["Sandbox",".stub"],"updatePoint":{"line":367,"column":40,"index":10118},"line":367,"code":"    it(\"fails if stubbing symbol on null\", function () {\n      if (typeof Symbol === \"function\") {\n        var sandbox = this.sandbox;\n        assert.exception(function () {\n          sandbox.stub(null, Symbol(\"apple pie\"));\n        }, {\n          message: \"Trying to stub property 'Symbol(apple pie)' of null\"\n        });\n      }\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"creates a stub","suites":["Sandbox",".stub"],"updatePoint":{"line":377,"column":22,"index":10439},"line":377,"code":"    it(\"creates a stub\", function () {\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      this.sandbox.stub(object, \"method\");\n      assert.equals(typeof object.method.restore, \"function\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"adds stub to fake array","suites":["Sandbox",".stub"],"updatePoint":{"line":386,"column":31,"index":10689},"line":386,"code":"    it(\"adds stub to fake array\", function () {\n      var fakes = this.sandbox.getFakes();\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      var stub = this.sandbox.stub(object, \"method\");\n      assert.isTrue(fakes.indexOf(stub) !== -1);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"appends stubs to fake array","suites":["Sandbox",".stub"],"updatePoint":{"line":396,"column":35,"index":10983},"line":396,"code":"    it(\"appends stubs to fake array\", function () {\n      var fakes = this.sandbox.getFakes();\n      this.sandbox.stub({\n        method: function () {\n          return;\n        }\n      }, \"method\");\n      this.sandbox.stub({\n        method: function () {\n          return;\n        }\n      }, \"method\");\n      assert.equals(fakes.length, 2);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"adds all object methods to fake array","suites":["Sandbox",".stub"],"updatePoint":{"line":410,"column":45,"index":11342},"line":410,"code":"    it(\"adds all object methods to fake array\", function () {\n      var fakes = this.sandbox.getFakes();\n      var object = {\n        method: function () {\n          return;\n        },\n        method2: function () {\n          return;\n        },\n        method3: function () {\n          return;\n        }\n      };\n      Object.defineProperty(object, \"method3\", {\n        enumerable: false\n      });\n      this.sandbox.stub(object);\n      assert.isTrue(fakes.indexOf(object.method) !== -1);\n      assert.isTrue(fakes.indexOf(object.method2) !== -2);\n      assert.isTrue(fakes.indexOf(object.method3) !== -3);\n      assert.equals(fakes.length, 3);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"returns a stubbed object","suites":["Sandbox",".stub"],"updatePoint":{"line":432,"column":32,"index":11982},"line":432,"code":"    it(\"returns a stubbed object\", function () {\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      assert.equals(this.sandbox.stub(object), object);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"returns a stubbed method","suites":["Sandbox",".stub"],"updatePoint":{"line":440,"column":32,"index":12183},"line":440,"code":"    it(\"returns a stubbed method\", function () {\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      assert.equals(this.sandbox.stub(object, \"method\"), object.method);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"stubs environment property","suites":["Sandbox",".stub","on node"],"updatePoint":{"line":457,"column":36,"index":12660},"line":457,"code":"      it(\"stubs environment property\", function () {\n        var originalPrintWarning = deprecated.printWarning;\n\n        deprecated.printWarning = function () {\n          return;\n        };\n\n        this.sandbox.stub(process.env, \"HELL\").value(\"froze over\");\n        assert.equals(process.env.HELL, \"froze over\");\n        deprecated.printWarning = originalPrintWarning;\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"stubs number property","suites":["Sandbox","stub anything"],"updatePoint":{"line":477,"column":29,"index":13215},"line":477,"code":"    it(\"stubs number property\", function () {\n      var originalPrintWarning = deprecated.printWarning;\n\n      deprecated.printWarning = function () {\n        return;\n      };\n\n      this.sandbox.stub(this.object, \"property\").value(1);\n      assert.equals(this.object.property, 1);\n      deprecated.printWarning = originalPrintWarning;\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"restores number property","suites":["Sandbox","stub anything"],"updatePoint":{"line":488,"column":32,"index":13562},"line":488,"code":"    it(\"restores number property\", function () {\n      var originalPrintWarning = deprecated.printWarning;\n\n      deprecated.printWarning = function () {\n        return;\n      };\n\n      this.sandbox.stub(this.object, \"property\").value(1);\n      this.sandbox.restore();\n      assert.equals(this.object.property, 42);\n      deprecated.printWarning = originalPrintWarning;\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"fails if property does not exist","suites":["Sandbox","stub anything"],"updatePoint":{"line":500,"column":40,"index":13948},"line":500,"code":"    it(\"fails if property does not exist\", function () {\n      var originalPrintWarning = deprecated.printWarning;\n\n      deprecated.printWarning = function () {\n        return;\n      };\n\n      var sandbox = this.sandbox;\n      var object = {};\n      assert.exception(function () {\n        sandbox.stub(object, \"prop\", 1);\n      });\n      deprecated.printWarning = originalPrintWarning;\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"fails if Symbol does not exist","suites":["Sandbox","stub anything"],"updatePoint":{"line":514,"column":38,"index":14341},"line":514,"code":"    it(\"fails if Symbol does not exist\", function () {\n      if (typeof Symbol === \"function\") {\n        var sandbox = this.sandbox;\n        var object = {};\n        var originalPrintWarning = deprecated.printWarning;\n\n        deprecated.printWarning = function () {\n          return;\n        };\n\n        assert.exception(function () {\n          sandbox.stub(object, Symbol(\"apple pie\"));\n        }, {\n          message: \"Cannot stub non-existent property Symbol(apple pie)\"\n        }, TypeError);\n        deprecated.printWarning = originalPrintWarning;\n      }\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a fake","suites":["Sandbox",".fake"],"updatePoint":{"line":534,"column":28,"index":14941},"line":534,"code":"    it(\"should return a fake\", function () {\n      var sandbox = createSandbox();\n      var fake = sandbox.fake();\n      assert.isFunction(fake);\n      assert.equals(fake.displayName, \"fake\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a fake to the internal collection","suites":["Sandbox",".fake"],"updatePoint":{"line":540,"column":52,"index":15166},"line":540,"code":"    it(\"should add a fake to the internal collection\", function () {\n      var sandbox = createSandbox();\n      var fakes = sandbox.getFakes();\n      var expected;\n      expected = sandbox.fake();\n      assert.isTrue(fakes.indexOf(expected) !== -1);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a fake behavior","suites":["Sandbox",".fake",".returns"],"updatePoint":{"line":548,"column":39,"index":15450},"line":548,"code":"      it(\"should return a fake behavior\", function () {\n        var sandbox = createSandbox();\n        var fake = sandbox.fake.returns();\n        assert.isFunction(fake);\n        assert.equals(fake.displayName, \"fake\");\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a fake behavior to the internal collection","suites":["Sandbox",".fake",".returns"],"updatePoint":{"line":554,"column":63,"index":15704},"line":554,"code":"      it(\"should add a fake behavior to the internal collection\", function () {\n        var sandbox = createSandbox();\n        var fakes = sandbox.getFakes();\n        var expected;\n        expected = sandbox.fake.returns();\n        assert.isTrue(fakes.indexOf(expected) !== -1);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a fake behavior","suites":["Sandbox",".fake",".throws"],"updatePoint":{"line":563,"column":39,"index":16015},"line":563,"code":"      it(\"should return a fake behavior\", function () {\n        var sandbox = createSandbox();\n        var fake = sandbox.fake.throws();\n        assert.isFunction(fake);\n        assert.equals(fake.displayName, \"fake\");\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a fake behavior to the internal collection","suites":["Sandbox",".fake",".throws"],"updatePoint":{"line":569,"column":63,"index":16268},"line":569,"code":"      it(\"should add a fake behavior to the internal collection\", function () {\n        var sandbox = createSandbox();\n        var fakes = sandbox.getFakes();\n        var expected;\n        expected = sandbox.fake.throws();\n        assert.isTrue(fakes.indexOf(expected) !== -1);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a fake behavior","suites":["Sandbox",".fake",".resolves"],"updatePoint":{"line":578,"column":39,"index":16580},"line":578,"code":"      it(\"should return a fake behavior\", function () {\n        var sandbox = createSandbox();\n        var fake = sandbox.fake.resolves();\n        assert.isFunction(fake);\n        assert.equals(fake.displayName, \"fake\");\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a fake behavior to the internal collection","suites":["Sandbox",".fake",".resolves"],"updatePoint":{"line":584,"column":63,"index":16835},"line":584,"code":"      it(\"should add a fake behavior to the internal collection\", function () {\n        var sandbox = createSandbox();\n        var fakes = sandbox.getFakes();\n        var expected;\n        expected = sandbox.fake.resolves();\n        assert.isTrue(fakes.indexOf(expected) !== -1);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a fake behavior","suites":["Sandbox",".fake",".rejects"],"updatePoint":{"line":593,"column":39,"index":17148},"line":593,"code":"      it(\"should return a fake behavior\", function () {\n        var sandbox = createSandbox();\n        var fake = sandbox.fake.rejects();\n        assert.isFunction(fake);\n        assert.equals(fake.displayName, \"fake\");\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a fake behavior to the internal collection","suites":["Sandbox",".fake",".rejects"],"updatePoint":{"line":599,"column":63,"index":17402},"line":599,"code":"      it(\"should add a fake behavior to the internal collection\", function () {\n        var sandbox = createSandbox();\n        var fakes = sandbox.getFakes();\n        var expected;\n        expected = sandbox.fake.rejects();\n        assert.isTrue(fakes.indexOf(expected) !== -1);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a fake behavior","suites":["Sandbox",".fake",".yields"],"updatePoint":{"line":608,"column":39,"index":17713},"line":608,"code":"      it(\"should return a fake behavior\", function () {\n        var sandbox = createSandbox();\n        var fake = sandbox.fake.yields();\n        assert.isFunction(fake);\n        assert.equals(fake.displayName, \"fake\");\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a fake behavior to the internal collection","suites":["Sandbox",".fake",".yields"],"updatePoint":{"line":614,"column":63,"index":17966},"line":614,"code":"      it(\"should add a fake behavior to the internal collection\", function () {\n        var sandbox = createSandbox();\n        var fakes = sandbox.getFakes();\n        var expected;\n        expected = sandbox.fake.yields();\n        assert.isTrue(fakes.indexOf(expected) !== -1);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return a fake behavior","suites":["Sandbox",".fake",".yieldsAsync"],"updatePoint":{"line":623,"column":39,"index":18281},"line":623,"code":"      it(\"should return a fake behavior\", function () {\n        var sandbox = createSandbox();\n        var fake = sandbox.fake.yieldsAsync();\n        assert.isFunction(fake);\n        assert.equals(fake.displayName, \"fake\");\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should add a fake behavior to the internal collection","suites":["Sandbox",".fake",".yieldsAsync"],"updatePoint":{"line":629,"column":63,"index":18539},"line":629,"code":"      it(\"should add a fake behavior to the internal collection\", function () {\n        var sandbox = createSandbox();\n        var fakes = sandbox.getFakes();\n        var expected;\n        expected = sandbox.fake.yieldsAsync();\n        assert.isTrue(fakes.indexOf(expected) !== -1);\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls verify and restore","suites":["Sandbox",".verifyAndRestore"],"updatePoint":{"line":642,"column":32,"index":18936},"line":642,"code":"    it(\"calls verify and restore\", function () {\n      this.sandbox.verify = sinonSpy();\n      this.sandbox.restore = sinonSpy();\n      this.sandbox.verifyAndRestore();\n      assert(this.sandbox.verify.called);\n      assert(this.sandbox.restore.called);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"throws when restore throws","suites":["Sandbox",".verifyAndRestore"],"updatePoint":{"line":649,"column":34,"index":19200},"line":649,"code":"    it(\"throws when restore throws\", function () {\n      this.sandbox.verify = sinonSpy();\n      this.sandbox.restore = sinonStub().throws();\n      assert.exception(function () {\n        this.sandbox.verifyAndRestore();\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls restore when restore throws","suites":["Sandbox",".verifyAndRestore"],"updatePoint":{"line":656,"column":41,"index":19445},"line":656,"code":"    it(\"calls restore when restore throws\", function () {\n      var sandbox = this.sandbox;\n      sandbox.verify = sinonSpy();\n      sandbox.restore = sinonStub().throws();\n      assert.exception(function () {\n        sandbox.verifyAndRestore();\n      });\n      assert(sandbox.restore.called);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should replace a function property","suites":["Sandbox",".replace"],"updatePoint":{"line":670,"column":42,"index":19866},"line":670,"code":"    it(\"should replace a function property\", function () {\n      var replacement = function replacement() {\n        return;\n      };\n\n      var existing = function existing() {\n        return;\n      };\n\n      var object = {\n        property: existing\n      };\n      this.sandbox.replace(object, \"property\", replacement);\n      assert.equals(object.property, replacement);\n      this.sandbox.restore();\n      assert.equals(object.property, existing);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should replace a non-function property","suites":["Sandbox",".replace"],"updatePoint":{"line":687,"column":46,"index":20328},"line":687,"code":"    it(\"should replace a non-function property\", function () {\n      var replacement = \"replacement\";\n      var existing = \"existing\";\n      var object = {\n        property: existing\n      };\n      this.sandbox.replace(object, \"property\", replacement);\n      assert.equals(object.property, replacement);\n      this.sandbox.restore();\n      assert.equals(object.property, existing);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should replace an inherited property","suites":["Sandbox",".replace"],"updatePoint":{"line":698,"column":44,"index":20716},"line":698,"code":"    it(\"should replace an inherited property\", function () {\n      var replacement = \"replacement\";\n      var existing = \"existing\";\n      var object = Object.create({\n        property: existing\n      });\n      this.sandbox.replace(object, \"property\", replacement);\n      assert.equals(object.property, replacement);\n      this.sandbox.restore();\n      assert.equals(object.property, existing);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should error on missing descriptor","suites":["Sandbox",".replace"],"updatePoint":{"line":709,"column":42,"index":21117},"line":709,"code":"    it(\"should error on missing descriptor\", function () {\n      var sandbox = this.sandbox;\n      assert.exception(function () {\n        sandbox.replace({}, \"i-dont-exist\");\n      }, {\n        message: \"Cannot replace non-existent property i-dont-exist\",\n        name: \"TypeError\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should error on missing replacement","suites":["Sandbox",".replace"],"updatePoint":{"line":718,"column":43,"index":21418},"line":718,"code":"    it(\"should error on missing replacement\", function () {\n      var sandbox = this.sandbox;\n      var object = Object.create({\n        property: \"catpants\"\n      });\n      assert.exception(function () {\n        sandbox.replace(object, \"property\");\n      }, {\n        message: \"Expected replacement argument to be defined\",\n        name: \"TypeError\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should refuse to replace a non-function with a function","suites":["Sandbox",".replace"],"updatePoint":{"line":730,"column":63,"index":21807},"line":730,"code":"    it(\"should refuse to replace a non-function with a function\", function () {\n      var sandbox = this.sandbox;\n\n      var replacement = function () {\n        return \"replacement\";\n      };\n\n      var existing = \"existing\";\n      var object = {\n        property: existing\n      };\n      assert.exception(function () {\n        sandbox.replace(object, \"property\", replacement);\n      }, {\n        message: \"Cannot replace string with function\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should refuse to replace a function with a non-function","suites":["Sandbox",".replace"],"updatePoint":{"line":747,"column":63,"index":22269},"line":747,"code":"    it(\"should refuse to replace a function with a non-function\", function () {\n      var sandbox = this.sandbox;\n      var replacement = \"replacement\";\n      var object = {\n        property: function () {\n          return \"apple pie\";\n        }\n      };\n      assert.exception(function () {\n        sandbox.replace(object, \"property\", replacement);\n      }, {\n        message: \"Cannot replace function with string\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should refuse to replace a fake twice","suites":["Sandbox",".replace"],"updatePoint":{"line":761,"column":45,"index":22685},"line":761,"code":"    it(\"should refuse to replace a fake twice\", function () {\n      var sandbox = this.sandbox;\n      var object = {\n        property: function () {\n          return \"apple pie\";\n        }\n      };\n      sandbox.replace(object, \"property\", sinonFake());\n      assert.exception(function () {\n        sandbox.replace(object, \"property\", sinonFake());\n      }, {\n        message: \"Attempted to replace property which is already replaced\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should refuse to replace a string twice","suites":["Sandbox",".replace"],"updatePoint":{"line":775,"column":47,"index":23140},"line":775,"code":"    it(\"should refuse to replace a string twice\", function () {\n      var sandbox = this.sandbox;\n      var object = {\n        property: \"original\"\n      };\n      sandbox.replace(object, \"property\", \"first\");\n      assert.exception(function () {\n        sandbox.replace(object, \"property\", \"second\");\n      }, {\n        message: \"Attempted to replace property which is already replaced\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return the replacement argument","suites":["Sandbox",".replace"],"updatePoint":{"line":787,"column":46,"index":23544},"line":787,"code":"    it(\"should return the replacement argument\", function () {\n      var replacement = \"replacement\";\n      var existing = \"existing\";\n      var object = {\n        property: existing\n      };\n      var actual = this.sandbox.replace(object, \"property\", replacement);\n      assert.equals(actual, replacement);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should throw an Error","suites":["Sandbox",".replace","when asked to replace a getter"],"updatePoint":{"line":797,"column":31,"index":23906},"line":797,"code":"      it(\"should throw an Error\", function () {\n        var sandbox = this.sandbox;\n        var object = {\n          get foo() {\n            return \"bar\";\n          }\n\n        };\n        assert.exception(function () {\n          sandbox.replace(object, \"foo\", sinonFake());\n        }, {\n          message: \"Use sandbox.replaceGetter for replacing getters\"\n        });\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should throw an Error","suites":["Sandbox",".replace","when asked to replace a setter"],"updatePoint":{"line":813,"column":31,"index":24352},"line":813,"code":"      it(\"should throw an Error\", function () {\n        var sandbox = this.sandbox;\n        var object = {\n          // eslint-disable-next-line accessor-pairs\n          set foo(value) {\n            this.prop = value;\n          }\n\n        };\n        assert.exception(function () {\n          sandbox.replace(object, \"foo\", sinonFake());\n        }, {\n          message: \"Use sandbox.replaceSetter for replacing setters\"\n        });\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should replace getters","suites":["Sandbox",".replaceGetter"],"updatePoint":{"line":834,"column":30,"index":24923},"line":834,"code":"    it(\"should replace getters\", function () {\n      var expected = \"baz\";\n      var object = {\n        get foo() {\n          return \"bar\";\n        }\n\n      };\n      this.sandbox.replaceGetter(object, \"foo\", sinonFake.returns(expected));\n      assert.equals(object.foo, expected);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return replacement","suites":["Sandbox",".replaceGetter"],"updatePoint":{"line":845,"column":33,"index":25215},"line":845,"code":"    it(\"should return replacement\", function () {\n      var replacement = sinonFake.returns(\"baz\");\n      var object = {\n        get foo() {\n          return \"bar\";\n        }\n\n      };\n      var actual = this.sandbox.replaceGetter(object, \"foo\", replacement);\n      assert.equals(actual, replacement);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should replace an inherited property","suites":["Sandbox",".replaceGetter"],"updatePoint":{"line":856,"column":44,"index":25536},"line":856,"code":"    it(\"should replace an inherited property\", function () {\n      var expected = \"baz\";\n      var replacement = sinonFake.returns(expected);\n      var existing = \"existing\";\n      var object = Object.create({\n        get foo() {\n          return existing;\n        }\n\n      });\n      this.sandbox.replaceGetter(object, \"foo\", replacement);\n      assert.equals(object.foo, expected);\n      this.sandbox.restore();\n      assert.equals(object.foo, existing);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should error on missing descriptor","suites":["Sandbox",".replaceGetter"],"updatePoint":{"line":871,"column":42,"index":25998},"line":871,"code":"    it(\"should error on missing descriptor\", function () {\n      var sandbox = this.sandbox;\n      assert.exception(function () {\n        sandbox.replaceGetter({}, \"i-dont-exist\");\n      }, {\n        message: \"Cannot replace non-existent property i-dont-exist\",\n        name: \"TypeError\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should error when descriptor has no getter","suites":["Sandbox",".replaceGetter"],"updatePoint":{"line":880,"column":50,"index":26312},"line":880,"code":"    it(\"should error when descriptor has no getter\", function () {\n      var sandbox = this.sandbox;\n      var object = {\n        // eslint-disable-next-line accessor-pairs\n        set catpants(_) {\n          return;\n        }\n\n      };\n      assert.exception(function () {\n        sandbox.replaceGetter(object, \"catpants\", noop);\n      }, {\n        message: \"`object.property` is not a getter\",\n        name: \"Error\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should throw a TypeError","suites":["Sandbox",".replaceGetter","when called with a non-function replacement argument"],"updatePoint":{"line":897,"column":34,"index":26815},"line":897,"code":"      it(\"should throw a TypeError\", function () {\n        var sandbox = this.sandbox;\n        var expected = \"baz\";\n        var object = {\n          get foo() {\n            return \"bar\";\n          }\n\n        };\n        assert.exception(function () {\n          sandbox.replaceGetter(object, \"foo\", expected);\n        }, {\n          message: \"Expected replacement argument to be a function\"\n        });\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows restoring getters","suites":["Sandbox",".replaceGetter","when called with a non-function replacement argument"],"updatePoint":{"line":913,"column":32,"index":27233},"line":913,"code":"    it(\"allows restoring getters\", function () {\n      var expected = \"baz\";\n      var object = {\n        get foo() {\n          return \"bar\";\n        }\n\n      };\n      this.sandbox.replaceGetter(object, \"foo\", sinonFake.returns(expected));\n      this.sandbox.restore();\n      assert.equals(object.foo, \"bar\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should refuse to replace a getter twice","suites":["Sandbox",".replaceGetter","when called with a non-function replacement argument"],"updatePoint":{"line":925,"column":47,"index":27566},"line":925,"code":"    it(\"should refuse to replace a getter twice\", function () {\n      var sandbox = this.sandbox;\n      var object = {\n        get foo() {\n          return \"bar\";\n        }\n\n      };\n      sandbox.replaceGetter(object, \"foo\", sinonFake.returns(\"one\"));\n      assert.exception(function () {\n        sandbox.replaceGetter(object, \"foo\", sinonFake.returns(\"two\"));\n      }, {\n        message: \"Attempted to replace foo which is already replaced\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should replace setter","suites":["Sandbox",".replaceSetter"],"updatePoint":{"line":945,"column":29,"index":28133},"line":945,"code":"    it(\"should replace setter\", function () {\n      var object = {\n        // eslint-disable-next-line accessor-pairs\n        set foo(value) {\n          this.prop = value;\n        },\n\n        prop: \"bar\"\n      };\n      this.sandbox.replaceSetter(object, \"foo\", function (val) {\n        this.prop = `${val}bla`;\n      });\n      object.foo = \"bla\";\n      assert.equals(object.prop, \"blabla\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return replacement","suites":["Sandbox",".replaceSetter"],"updatePoint":{"line":960,"column":33,"index":28536},"line":960,"code":"    it(\"should return replacement\", function () {\n      var object = {\n        // eslint-disable-next-line accessor-pairs\n        set foo(value) {\n          this.prop = value;\n        },\n\n        prop: \"bar\"\n      };\n\n      var replacement = function (val) {\n        this.prop = `${val}bla`;\n      };\n\n      var actual = this.sandbox.replaceSetter(object, \"foo\", replacement);\n      assert.equals(actual, replacement);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should replace an inherited property","suites":["Sandbox",".replaceSetter"],"updatePoint":{"line":977,"column":44,"index":28974},"line":977,"code":"    it(\"should replace an inherited property\", function () {\n      var object = Object.create({\n        // eslint-disable-next-line accessor-pairs\n        set foo(value) {\n          this.prop = value;\n        },\n\n        prop: \"bar\"\n      });\n\n      var replacement = function (value) {\n        this.prop = `${value}blabla`;\n      };\n\n      this.sandbox.replaceSetter(object, \"foo\", replacement);\n      object.foo = \"doodle\";\n      assert.equals(object.prop, \"doodleblabla\");\n      this.sandbox.restore();\n      object.foo = \"doodle\";\n      assert.equals(object.prop, \"doodle\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should error on missing descriptor","suites":["Sandbox",".replaceSetter"],"updatePoint":{"line":998,"column":42,"index":29559},"line":998,"code":"    it(\"should error on missing descriptor\", function () {\n      var sandbox = this.sandbox;\n      assert.exception(function () {\n        sandbox.replaceSetter({}, \"i-dont-exist\");\n      }, {\n        message: \"Cannot replace non-existent property i-dont-exist\",\n        name: \"TypeError\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should error when descriptor has no setter","suites":["Sandbox",".replaceSetter"],"updatePoint":{"line":1007,"column":50,"index":29873},"line":1007,"code":"    it(\"should error when descriptor has no setter\", function () {\n      var sandbox = this.sandbox;\n      var object = {\n        get catpants() {\n          return;\n        }\n\n      };\n      assert.exception(function () {\n        sandbox.replaceSetter(object, \"catpants\", noop);\n      }, {\n        message: \"`object.property` is not a setter\",\n        name: \"Error\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should throw a TypeError","suites":["Sandbox",".replaceSetter","when called with a non-function replacement argument"],"updatePoint":{"line":1023,"column":34,"index":30324},"line":1023,"code":"      it(\"should throw a TypeError\", function () {\n        var sandbox = this.sandbox;\n        var object = {\n          // eslint-disable-next-line accessor-pairs\n          set foo(value) {\n            this.prop = value;\n          },\n\n          prop: \"bar\"\n        };\n        assert.exception(function () {\n          sandbox.replaceSetter(object, \"foo\", \"bla\");\n        }, {\n          message: \"Expected replacement argument to be a function\"\n        });\n      });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows restoring setters","suites":["Sandbox",".replaceSetter","when called with a non-function replacement argument"],"updatePoint":{"line":1040,"column":32,"index":30795},"line":1040,"code":"    it(\"allows restoring setters\", function () {\n      var object = {\n        // eslint-disable-next-line accessor-pairs\n        set foo(value) {\n          this.prop = value;\n        },\n\n        prop: \"bar\"\n      };\n      this.sandbox.replaceSetter(object, \"foo\", function (val) {\n        this.prop = `${val}bla`;\n      });\n      this.sandbox.restore();\n      object.prop = \"bla\";\n      assert.equals(object.prop, \"bla\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should refuse to replace a setter twice","suites":["Sandbox",".replaceSetter","when called with a non-function replacement argument"],"updatePoint":{"line":1056,"column":47,"index":31240},"line":1056,"code":"    it(\"should refuse to replace a setter twice\", function () {\n      var sandbox = this.sandbox;\n      var object = {\n        // eslint-disable-next-line accessor-pairs\n        set foo(value) {\n          return;\n        }\n\n      };\n      sandbox.replaceSetter(object, \"foo\", sinonFake());\n      assert.exception(function () {\n        sandbox.replaceSetter(object, \"foo\", sinonFake.returns(\"two\"));\n      }, {\n        message: \"Attempted to replace foo which is already replaced\"\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls reset on all fakes","suites":["Sandbox",".reset"],"updatePoint":{"line":1086,"column":32,"index":32069},"line":1086,"code":"    it(\"calls reset on all fakes\", function () {\n      var fake0 = this.sandbox.getFakes()[0];\n      var fake1 = this.sandbox.getFakes()[1];\n      this.sandbox.reset();\n      assert(fake0.reset.called);\n      assert(fake1.reset.called);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls resetHistory on all fakes","suites":["Sandbox",".reset"],"updatePoint":{"line":1093,"column":39,"index":32321},"line":1093,"code":"    it(\"calls resetHistory on all fakes\", function () {\n      var fake0 = this.sandbox.getFakes()[0];\n      var fake1 = this.sandbox.getFakes()[1];\n      this.sandbox.reset();\n      assert(fake0.resetHistory.called);\n      assert(fake1.resetHistory.called);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"resets fake behaviours","suites":["Sandbox",".reset"],"updatePoint":{"line":1100,"column":30,"index":32578},"line":1100,"code":"    it(\"resets fake behaviours\", function () {\n      var fake = this.sandbox.fake();\n      fake(1234);\n      this.sandbox.reset();\n      assert.equals(fake.getCalls(), []);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls resetBehavior on all fakes","suites":["Sandbox",".resetBehavior"],"updatePoint":{"line":1118,"column":40,"index":33071},"line":1118,"code":"    it(\"calls resetBehavior on all fakes\", function () {\n      var fake0 = this.sandbox.getFakes()[0];\n      var fake1 = this.sandbox.getFakes()[1];\n      this.sandbox.resetBehavior();\n      assert(fake0.resetBehavior.called);\n      assert(fake1.resetBehavior.called);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"resets the history on all fakes","suites":["Sandbox",".resetHistory"],"updatePoint":{"line":1137,"column":39,"index":33669},"line":1137,"code":"    it(\"resets the history on all fakes\", function () {\n      var fake0 = this.fakes[0];\n      var fake1 = this.fakes[1];\n      this.sandbox.resetHistory();\n      refute(fake0.called);\n      refute(fake1.called);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls reset on fake that does not have a resetHistory","suites":["Sandbox",".resetHistory"],"updatePoint":{"line":1144,"column":61,"index":33912},"line":1144,"code":"    it(\"calls reset on fake that does not have a resetHistory\", function () {\n      noop.reset = function reset() {\n        noop.reset.called = true;\n      };\n\n      this.fakes.push(noop);\n      this.sandbox.resetHistory();\n      assert.isTrue(noop.reset.called);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"returns clock object","suites":["Sandbox",".useFakeTimers"],"updatePoint":{"line":1161,"column":28,"index":34339},"line":1161,"code":"    it(\"returns clock object\", function () {\n      var clock = this.sandbox.useFakeTimers();\n      assert.isObject(clock);\n      assert.isFunction(clock.tick);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"exposes clock property","suites":["Sandbox",".useFakeTimers"],"updatePoint":{"line":1166,"column":30,"index":34509},"line":1166,"code":"    it(\"exposes clock property\", function () {\n      this.sandbox.useFakeTimers();\n      assert.isObject(this.sandbox.clock);\n      assert.isFunction(this.sandbox.clock.tick);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"uses restorable clock","suites":["Sandbox",".useFakeTimers"],"updatePoint":{"line":1171,"column":29,"index":34692},"line":1171,"code":"    it(\"uses restorable clock\", function () {\n      this.sandbox.useFakeTimers();\n      assert.clock(this.sandbox.clock);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"passes arguments to sinon.useFakeTimers","suites":["Sandbox",".useFakeTimers"],"updatePoint":{"line":1175,"column":47,"index":34840},"line":1175,"code":"    it(\"passes arguments to sinon.useFakeTimers\", function () {\n      var useFakeTimersStub = sinonStub(sinonClock, \"useFakeTimers\").returns({});\n      this.sandbox.useFakeTimers({\n        toFake: [\"Date\", \"setTimeout\"]\n      });\n      this.sandbox.useFakeTimers({\n        toFake: [\"setTimeout\", \"clearTimeout\", \"setInterval\"]\n      });\n      assert(useFakeTimersStub.calledWith({\n        toFake: [\"Date\", \"setTimeout\"]\n      }));\n      assert(useFakeTimersStub.calledWith({\n        toFake: [\"setTimeout\", \"clearTimeout\", \"setInterval\"]\n      }));\n      useFakeTimersStub.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"restores the fakeTimer clock created by the sandbox when the sandbox is restored","suites":["Sandbox",".useFakeTimers"],"updatePoint":{"line":1191,"column":88,"index":35472},"line":1191,"code":"    it(\"restores the fakeTimer clock created by the sandbox when the sandbox is restored\", function () {\n      var originalSetTimeout = setTimeout;\n      this.sandbox.useFakeTimers();\n      refute.same(setTimeout, originalSetTimeout, \"fakeTimers installed\");\n      this.sandbox.restore();\n      assert.same(setTimeout, originalSetTimeout, \"fakeTimers restored\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"restores spied fake timers when the sandbox is restored","suites":["Sandbox",".useFakeTimers"],"updatePoint":{"line":1198,"column":63,"index":35818},"line":1198,"code":"    it(\"restores spied fake timers when the sandbox is restored\", function () {\n      var originalSetTimeout = setTimeout;\n      this.sandbox.useFakeTimers();\n      this.sandbox.spy(globalContext, \"setTimeout\");\n      this.sandbox.restore();\n      assert.same(originalSetTimeout, globalContext.setTimeout, \"fakeTimers restored\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"must be a function","suites":["Sandbox",".usingPromise"],"updatePoint":{"line":1213,"column":26,"index":36306},"line":1213,"code":"    it(\"must be a function\", function () {\n      assert.isFunction(this.sandbox.usingPromise);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"must return the sandbox","suites":["Sandbox",".usingPromise"],"updatePoint":{"line":1216,"column":31,"index":36414},"line":1216,"code":"    it(\"must return the sandbox\", function () {\n      var mockPromise = {};\n      var actual = this.sandbox.usingPromise(mockPromise);\n      assert.same(actual, this.sandbox);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"must set all stubs created from sandbox with mockPromise","suites":["Sandbox",".usingPromise"],"updatePoint":{"line":1221,"column":64,"index":36631},"line":1221,"code":"    it(\"must set all stubs created from sandbox with mockPromise\", function () {\n      if (!supportPromise) {\n        return this.skip();\n      }\n\n      var resolveValue = {};\n      var mockPromise = {\n        resolve: sinonStub().resolves(resolveValue)\n      };\n      this.sandbox.usingPromise(mockPromise);\n      var stub = this.sandbox.stub().resolves();\n      return stub().then(function (action) {\n        assert.same(resolveValue, action);\n        assert(mockPromise.resolve.calledOnce);\n      });\n    }); // eslint-disable-next-line mocha/no-identical-title","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"must set all stubs created from sandbox with mockPromise","suites":["Sandbox",".usingPromise"],"updatePoint":{"line":1238,"column":64,"index":37197},"line":1238,"code":"    it(\"must set all stubs created from sandbox with mockPromise\", function () {\n      if (!supportPromise) {\n        return this.skip();\n      }\n\n      var resolveValue = {};\n      var mockPromise = {\n        resolve: sinonStub().resolves(resolveValue)\n      };\n      var stubbedObject = {\n        stubbedMethod: function () {\n          return;\n        }\n      };\n      this.sandbox.usingPromise(mockPromise);\n      this.sandbox.stub(stubbedObject);\n      stubbedObject.stubbedMethod.resolves({});\n      return stubbedObject.stubbedMethod().then(function (action) {\n        assert.same(resolveValue, action);\n        assert(mockPromise.resolve.calledOnce);\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"must set all mocks created from sandbox with mockPromise","suites":["Sandbox",".usingPromise"],"updatePoint":{"line":1260,"column":64,"index":37873},"line":1260,"code":"    it(\"must set all mocks created from sandbox with mockPromise\", function () {\n      if (!supportPromise) {\n        return this.skip();\n      }\n\n      var resolveValue = {};\n      var mockPromise = {\n        resolve: sinonStub().resolves(resolveValue)\n      };\n      var mockedObject = {\n        mockedMethod: function () {\n          return;\n        }\n      };\n      this.sandbox.usingPromise(mockPromise);\n      var mock = this.sandbox.mock(mockedObject);\n      mock.expects(\"mockedMethod\").resolves({});\n      return mockedObject.mockedMethod().then(function (action) {\n        assert.same(resolveValue, action);\n        assert(mockPromise.resolve.calledOnce);\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls sinon.useFakeXMLHttpRequest","suites":["Sandbox","fake XHR/server",".useFakeXMLHttpRequest"],"updatePoint":{"line":1293,"column":45,"index":38921},"line":1293,"code":"        it(\"calls sinon.useFakeXMLHttpRequest\", function () {\n          var stubXhr = {\n            restore: function () {\n              return;\n            }\n          };\n          this.sandbox.stub(fakeXhr, \"useFakeXMLHttpRequest\").returns(stubXhr);\n          var returnedXhr = this.sandbox.useFakeXMLHttpRequest();\n          assert(fakeXhr.useFakeXMLHttpRequest.called);\n          assert.equals(stubXhr, returnedXhr);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"returns fake xhr object created by nise","suites":["Sandbox","fake XHR/server",".useFakeXMLHttpRequest"],"updatePoint":{"line":1304,"column":51,"index":39360},"line":1304,"code":"        it(\"returns fake xhr object created by nise\", function () {\n          this.sandbox.stub(fakeXhr, \"useFakeXMLHttpRequest\").returns({\n            restore: function () {\n              return;\n            }\n          });\n          this.sandbox.useFakeXMLHttpRequest();\n          assert(fakeXhr.useFakeXMLHttpRequest.called);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"doesn't secretly use useFakeServer","suites":["Sandbox","fake XHR/server",".useFakeXMLHttpRequest"],"updatePoint":{"line":1313,"column":46,"index":39696},"line":1313,"code":"        it(\"doesn't secretly use useFakeServer\", function () {\n          this.sandbox.stub(fakeServer, \"create\").returns({\n            restore: function () {\n              return;\n            }\n          });\n          this.sandbox.useFakeXMLHttpRequest();\n          assert(fakeServer.create.notCalled);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"adds fake xhr to fake collection","suites":["Sandbox","fake XHR/server",".useFakeXMLHttpRequest"],"updatePoint":{"line":1322,"column":44,"index":40009},"line":1322,"code":"        it(\"adds fake xhr to fake collection\", function () {\n          this.sandbox.useFakeXMLHttpRequest();\n          this.sandbox.restore();\n          assert.same(globalContext.XMLHttpRequest, globalXHR);\n          assert.same(globalContext.ActiveXObject, globalAXO);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"returns server","suites":["Sandbox","fake XHR/server",".useFakeServer"],"updatePoint":{"line":1336,"column":26,"index":40493},"line":1336,"code":"        it(\"returns server\", function () {\n          var server = this.sandbox.useFakeServer();\n          assert.isObject(server);\n          assert.isFunction(server.restore);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"exposes server property","suites":["Sandbox","fake XHR/server",".useFakeServer"],"updatePoint":{"line":1341,"column":35,"index":40690},"line":1341,"code":"        it(\"exposes server property\", function () {\n          var server = this.sandbox.useFakeServer();\n          assert.same(this.sandbox.server, server);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"creates server","suites":["Sandbox","fake XHR/server",".useFakeServer"],"updatePoint":{"line":1345,"column":26,"index":40850},"line":1345,"code":"        it(\"creates server\", function () {\n          var server = this.sandbox.useFakeServer();\n          assert(fakeServer.isPrototypeOf(server));\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"creates server without clock by default","suites":["Sandbox","fake XHR/server",".useFakeServer"],"updatePoint":{"line":1349,"column":51,"index":41035},"line":1349,"code":"        it(\"creates server without clock by default\", function () {\n          var server = this.sandbox.useFakeServer();\n          refute(fakeServerWithClock.isPrototypeOf(server));\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"creates server with clock","suites":["Sandbox","fake XHR/server",".useFakeServer"],"updatePoint":{"line":1353,"column":37,"index":41215},"line":1353,"code":"        it(\"creates server with clock\", function () {\n          this.sandbox.serverPrototype = fakeServerWithClock;\n          var server = this.sandbox.useFakeServer();\n          assert(fakeServerWithClock.isPrototypeOf(server));\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"adds server to fake collection","suites":["Sandbox","fake XHR/server",".useFakeServer"],"updatePoint":{"line":1358,"column":42,"index":41462},"line":1358,"code":"        it(\"adds server to fake collection\", function () {\n          this.sandbox.useFakeServer();\n          this.sandbox.restore();\n          assert.same(globalContext.XMLHttpRequest, globalXHR);\n          assert.same(globalContext.ActiveXObject, globalAXO);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"injects spy, stub, mock, fake, replace, replaceSetter, createStubInstance","suites":["Sandbox",".inject"],"updatePoint":{"line":1376,"column":81,"index":41992},"line":1376,"code":"    it(\"injects spy, stub, mock, fake, replace, replaceSetter, createStubInstance\", function () {\n      this.sandbox.inject(this.obj);\n      assert.isFunction(this.obj.spy);\n      assert.isFunction(this.obj.stub);\n      assert.isFunction(this.obj.mock);\n      assert.isFunction(this.obj.createStubInstance);\n      assert.isFunction(this.obj.fake);\n      assert.isFunction(this.obj.replace);\n      assert.isFunction(this.obj.replaceSetter);\n      assert.isFunction(this.obj.replaceGetter);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should inject callable functions","suites":["Sandbox",".inject"],"updatePoint":{"line":1387,"column":40,"index":42448},"line":1387,"code":"    it(\"should inject callable functions\", function () {\n      /* eslint-disable no-empty-function, accessor-pairs */\n      this.sandbox.inject(this.obj);\n      var myObj = {\n        a: function () {}\n      };\n\n      function MyClass() {}\n\n      MyClass.prototype.method1 = noop;\n      Object.defineProperty(myObj, \"b\", {\n        get: function () {\n          return 42;\n        },\n        configurable: true\n      });\n      Object.defineProperty(myObj, \"c\", {\n        set: function () {},\n        configurable: true\n      });\n      refute.exception(function () {\n        this.obj.createStubInstance(MyClass);\n        var fake = this.obj.fake();\n        this.obj.replace(myObj, \"a\", fake);\n        this.obj.replaceGetter(myObj, \"b\", fake);\n        this.obj.replaceSetter(myObj, \"c\", fake);\n      }.bind(this));\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"does not define clock, server and requests objects","suites":["Sandbox",".inject"],"updatePoint":{"line":1415,"column":58,"index":43284},"line":1415,"code":"    it(\"does not define clock, server and requests objects\", function () {\n      this.sandbox.inject(this.obj);\n      assert.isFalse(\"clock\" in this.obj);\n      assert.isFalse(\"server\" in this.obj);\n      assert.isFalse(\"requests\" in this.obj);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"defines clock when using fake time","suites":["Sandbox",".inject"],"updatePoint":{"line":1421,"column":42,"index":43521},"line":1421,"code":"    it(\"defines clock when using fake time\", function () {\n      this.sandbox.useFakeTimers();\n      this.sandbox.inject(this.obj);\n      assert.isFunction(this.obj.spy);\n      assert.isFunction(this.obj.stub);\n      assert.isFunction(this.obj.mock);\n      assert.isObject(this.obj.clock);\n      assert.isFalse(\"server\" in this.obj);\n      assert.isFalse(\"requests\" in this.obj);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should return object","suites":["Sandbox",".inject"],"updatePoint":{"line":1431,"column":28,"index":43895},"line":1431,"code":"    it(\"should return object\", function () {\n      var injected = this.sandbox.inject({});\n      assert.isObject(injected);\n      assert.isFunction(injected.spy);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"defines server and requests when using fake time","suites":["Sandbox",".inject","ajax options"],"updatePoint":{"line":1439,"column":60,"index":44168},"line":1439,"code":"        it(\"defines server and requests when using fake time\", function () {\n          this.sandbox.useFakeServer();\n          this.sandbox.inject(this.obj);\n          assert.isFunction(this.obj.spy);\n          assert.isFunction(this.obj.stub);\n          assert.isFunction(this.obj.mock);\n          assert.isFalse(\"clock\" in this.obj);\n          assert.isObject(this.obj.server);\n          assert.equals(this.obj.requests, []);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should define all possible fakes","suites":["Sandbox",".inject","ajax options"],"updatePoint":{"line":1449,"column":44,"index":44592},"line":1449,"code":"        it(\"should define all possible fakes\", function () {\n          this.sandbox.useFakeServer();\n          this.sandbox.useFakeTimers();\n          this.sandbox.inject(this.obj);\n          var spy = sinonSpy();\n          setTimeout(spy, 10);\n          this.sandbox.clock.tick(10);\n          var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(\"Microsoft.XMLHTTP\"); //eslint-disable-line no-undef\n\n          assert.isFunction(this.obj.spy);\n          assert.isFunction(this.obj.stub);\n          assert.isFunction(this.obj.mock);\n          assert(spy.called);\n          assert.isObject(this.obj.server);\n          assert.equals(this.obj.requests, [xhr]);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"calls verify on all fakes","suites":["Sandbox",".verify"],"updatePoint":{"line":1469,"column":33,"index":45330},"line":1469,"code":"    it(\"calls verify on all fakes\", function () {\n      var sandbox = createSandbox();\n      var fakes = sandbox.getFakes();\n      fakes.push({\n        verify: sinonSpy()\n      });\n      fakes.push({\n        verify: sinonSpy()\n      });\n      sandbox.verify();\n      fakes.forEach(function (f) {\n        assert(f.verify.calledOnce);\n      });\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"throws when passed arguments","suites":["Sandbox",".restore"],"updatePoint":{"line":1485,"column":36,"index":45727},"line":1485,"code":"    it(\"throws when passed arguments\", function () {\n      var sandbox = new Sandbox();\n      assert.exception(function () {\n        sandbox.restore(\"args\");\n      }, {\n        message: \"sandbox.restore() does not take any parameters. Perhaps you meant stub.restore()\"\n      });\n    }); // https://github.com/sinonjs/sinon/issues/2192","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"restores all fields of a spied object","suites":["Sandbox",".restore"],"updatePoint":{"line":1494,"column":45,"index":46072},"line":1494,"code":"    it(\"restores all fields of a spied object\", function () {\n      var sandbox = new Sandbox();\n      var o = {\n        foo: function () {\n          return 42;\n        }\n      };\n      sandbox.spy(o);\n      sandbox.restore();\n      assert.isUndefined(o.foo.callCount);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"restores all fields of a stubbed object","suites":["Sandbox",".restore"],"updatePoint":{"line":1505,"column":47,"index":46352},"line":1505,"code":"    it(\"restores all fields of a stubbed object\", function () {\n      var sandbox = new Sandbox();\n      var o = {\n        foo: function () {\n          return 42;\n        }\n      };\n      sandbox.stub(o);\n      sandbox.restore();\n      assert.isUndefined(o.foo.callCount);\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"yields stub, mock as arguments","suites":["Sandbox","configurable sandbox"],"updatePoint":{"line":1530,"column":38,"index":47052},"line":1530,"code":"    it(\"yields stub, mock as arguments\", function () {\n      var sandbox = createSandbox(sinonConfig({\n        properties: [\"stub\", \"mock\"]\n      }));\n      assert.equals(sandbox.args.length, 2);\n      assert.stub(sandbox.args[0]());\n      assert.mock(sandbox.args[1]({}));\n      sandbox.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"yields spy, stub, mock as arguments","suites":["Sandbox","configurable sandbox"],"updatePoint":{"line":1539,"column":43,"index":47364},"line":1539,"code":"    it(\"yields spy, stub, mock as arguments\", function () {\n      var sandbox = createSandbox(sinonConfig({\n        properties: [\"spy\", \"stub\", \"mock\"]\n      }));\n      assert.spy(sandbox.args[0]());\n      assert.stub(sandbox.args[1]());\n      assert.mock(sandbox.args[2]({}));\n      sandbox.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"does not yield server when not faking xhr","suites":["Sandbox","configurable sandbox"],"updatePoint":{"line":1548,"column":49,"index":47681},"line":1548,"code":"    it(\"does not yield server when not faking xhr\", function () {\n      var sandbox = createSandbox(sinonConfig({\n        properties: [\"server\", \"stub\", \"mock\"],\n        useFakeServer: false\n      }));\n      assert.equals(sandbox.args.length, 2);\n      assert.stub(sandbox.args[0]());\n      assert.mock(sandbox.args[1]({}));\n      sandbox.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"does not inject properties if they are already present","suites":["Sandbox","configurable sandbox"],"updatePoint":{"line":1558,"column":62,"index":48052},"line":1558,"code":"    it(\"does not inject properties if they are already present\", function () {\n      var server = function () {\n        return;\n      };\n\n      var clock = {};\n      var spy = false;\n      var object = {\n        server: server,\n        clock: clock,\n        spy: spy\n      };\n      var sandbox = createSandbox(sinonConfig({\n        properties: [\"server\", \"clock\", \"spy\"],\n        injectInto: object\n      }));\n      assert.same(object.server, server);\n      assert.same(object.clock, clock);\n      assert.same(object.spy, spy);\n      sandbox.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"yields server when faking xhr","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1582,"column":41,"index":48662},"line":1582,"code":"        it(\"yields server when faking xhr\", function () {\n          var sandbox = createSandbox(sinonConfig({\n            properties: [\"server\", \"stub\", \"mock\"]\n          }));\n          assert.equals(sandbox.args.length, 3);\n          assert.equals(sandbox.args[0], this.fakeServer);\n          assert.stub(sandbox.args[1]());\n          assert.mock(sandbox.args[2]({}));\n          sandbox.restore();\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"uses serverWithClock when faking xhr","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1592,"column":48,"index":49080},"line":1592,"code":"        it(\"uses serverWithClock when faking xhr\", function () {\n          var sandbox = createSandbox(sinonConfig({\n            properties: [\"server\"],\n            useFakeServer: fakeServerWithClock\n          }));\n          assert.fakeServerWithClock(sandbox.args[0], this.fakeServer);\n          sandbox.restore();\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"uses fakeServer as the serverPrototype by default","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1600,"column":61,"index":49421},"line":1600,"code":"        it(\"uses fakeServer as the serverPrototype by default\", function () {\n          var sandbox = createSandbox();\n          assert.same(sandbox.serverPrototype, fakeServer);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"uses configured implementation as the serverPrototype","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1604,"column":65,"index":49616},"line":1604,"code":"        it(\"uses configured implementation as the serverPrototype\", function () {\n          var sandbox = createSandbox({\n            useFakeServer: fakeServerWithClock\n          });\n          assert.same(sandbox.serverPrototype, fakeServerWithClock);\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"yields clock when faking timers","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1610,"column":43,"index":49858},"line":1610,"code":"        it(\"yields clock when faking timers\", function () {\n          var sandbox = createSandbox(sinonConfig({\n            properties: [\"server\", \"clock\"]\n          }));\n          assert.same(sandbox.args[0], this.fakeServer);\n          assert.clock(sandbox.args[1]);\n          sandbox.restore();\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"injects properties into object","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1618,"column":42,"index":50167},"line":1618,"code":"        it(\"injects properties into object\", function () {\n          var object = {};\n          var sandbox = createSandbox(sinonConfig({\n            properties: [\"server\", \"clock\"],\n            injectInto: object\n          }));\n          assert.equals(sandbox.args.length, 0);\n          assert.equals(object.server, this.fakeServer);\n          assert.clock(object.clock);\n          assert.isUndefined(object.spy);\n          assert.isUndefined(object.stub);\n          assert.isUndefined(object.mock);\n          assert.isUndefined(object.requests);\n          sandbox.restore();\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should inject server and clock when only enabling them","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1633,"column":66,"index":50780},"line":1633,"code":"        it(\"should inject server and clock when only enabling them\", function () {\n          var object = {};\n          var sandbox = createSandbox(sinonConfig({\n            injectInto: object,\n            useFakeTimers: true,\n            useFakeServer: true\n          }));\n          assert.equals(sandbox.args.length, 0);\n          assert.equals(object.server, this.fakeServer);\n          assert.clock(object.clock);\n          assert.isFunction(object.spy);\n          assert.isFunction(object.stub);\n          assert.isFunction(object.mock);\n          assert.isArray(object.requests);\n          assert.isUndefined(object.sandbox);\n          sandbox.restore();\n        });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"fakes specified timers","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1655,"column":30,"index":51556},"line":1655,"code":"    it(\"fakes specified timers\", function () {\n      var sandbox = createSandbox(sinonConfig({\n        properties: [\"clock\"],\n        useFakeTimers: {\n          toFake: [\"Date\", \"setTimeout\"]\n        }\n      }));\n      assert(this.useFakeTimersSpy.calledWith({\n        toFake: [\"Date\", \"setTimeout\"]\n      }));\n      sandbox.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"injects sandbox","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1667,"column":23,"index":51893},"line":1667,"code":"    it(\"injects sandbox\", function () {\n      var object = {};\n      var sandbox = createSandbox(sinonConfig({\n        properties: [\"sandbox\", \"spy\"],\n        injectInto: object\n      }));\n      assert.equals(sandbox.args.length, 0);\n      assert.isFunction(object.spy);\n      assert.isObject(object.sandbox);\n      sandbox.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"injects match","suites":["Sandbox","configurable sandbox","ajax options"],"updatePoint":{"line":1678,"column":21,"index":52234},"line":1678,"code":"    it(\"injects match\", function () {\n      var object = {};\n      var sandbox = createSandbox(sinonConfig({\n        properties: [\"match\"],\n        injectInto: object\n      }));\n      assert.same(object.match, match);\n      sandbox.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows stubbing getters","suites":["Sandbox","getters and setters"],"updatePoint":{"line":1689,"column":31,"index":52549},"line":1689,"code":"    it(\"allows stubbing getters\", function () {\n      var object = {\n        foo: \"bar\"\n      };\n      var sandbox = new Sandbox();\n      sandbox.stub(object, \"foo\").get(function () {\n        return \"baz\";\n      });\n      assert.equals(object.foo, \"baz\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows restoring getters","suites":["Sandbox","getters and setters"],"updatePoint":{"line":1699,"column":32,"index":52814},"line":1699,"code":"    it(\"allows restoring getters\", function () {\n      var object = {\n        foo: \"bar\"\n      };\n      var sandbox = new Sandbox();\n      sandbox.stub(object, \"foo\").get(function () {\n        return \"baz\";\n      });\n      sandbox.restore();\n      assert.equals(object.foo, \"bar\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows stubbing setters","suites":["Sandbox","getters and setters"],"updatePoint":{"line":1710,"column":31,"index":53103},"line":1710,"code":"    it(\"allows stubbing setters\", function () {\n      var object = {\n        foo: undefined,\n        prop: \"bar\"\n      };\n      var sandbox = new Sandbox();\n      sandbox.stub(object, \"foo\").set(function (val) {\n        object.prop = `${val}bla`;\n      });\n      object.foo = \"bla\";\n      assert.equals(object.prop, \"blabla\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows restoring setters","suites":["Sandbox","getters and setters"],"updatePoint":{"line":1722,"column":32,"index":53439},"line":1722,"code":"    it(\"allows restoring setters\", function () {\n      var object = {\n        prop: \"bar\"\n      };\n      var sandbox = new Sandbox();\n      sandbox.stub(object, \"prop\").set(function setterFn(val) {\n        object.prop = `${val}bla`;\n      });\n      sandbox.restore();\n      object.prop = \"bla\";\n      assert.equals(object.prop, \"bla\");\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"allows rebinding of .fail on a per-sandbox level","suites":["Sandbox",".assert"],"updatePoint":{"line":1736,"column":56,"index":53849},"line":1736,"code":"    it(\"allows rebinding of .fail on a per-sandbox level\", function () {\n      var sandboxA = createSandbox();\n      var sandboxB = createSandbox();\n      sandboxA.assert.failException = \"CustomErrorA\";\n      sandboxB.assert.failException = \"CustomErrorB\";\n      assert.exception(function () {\n        sandboxA.assert.fail(\"Some message\");\n      }, {\n        name: \"CustomErrorA\"\n      });\n      assert.exception(function () {\n        sandboxB.assert.fail(\"Some message\");\n      }, {\n        name: \"CustomErrorB\"\n      });\n      sandboxA.restore();\n      sandboxB.restore();\n    });","file":"sandbox-test.js","skipped":false,"dir":"test"},{"name":"should be an instance of Sandbox","suites":["sinon module","exports","default sandbox"],"updatePoint":{"line":42,"column":42,"index":1102},"line":42,"code":"      it(\"should be an instance of Sandbox\", function () {\n        // use full sinon for this test as it compares sinon instance\n        // proxyquire changes the instance, so `actual instanceof Sandbox` returns `false`\n        // see https://github.com/sinonjs/sinon/pull/1586#issuecomment-354457231\n        sinon = require(\"../lib/sinon\");\n        assert.hasPrototype(sinon, Sandbox.prototype);\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be a unary Function named 'createSandbox'","suites":["sinon module","exports","createSandbox"],"updatePoint":{"line":51,"column":58,"index":1577},"line":51,"code":"      it(\"should be a unary Function named 'createSandbox'\", function () {\n        assert.isFunction(sinon.createSandbox);\n        assert.equals(sinon.createSandbox.length, 1); // Use helper because IE 11 doesn't support the `name` property:\n\n        assert.equals(functionName(sinon.createSandbox), \"createSandbox\");\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be the fakeServer export from nise","suites":["sinon module","exports","fakeServer"],"updatePoint":{"line":59,"column":51,"index":1947},"line":59,"code":"      it(\"should be the fakeServer export from nise\", function () {\n        assert.same(sinon.fakeServer, fakeNise.fakeServer);\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be fakeServer.create from nise","suites":["sinon module","exports","createFakeServer"],"updatePoint":{"line":64,"column":47,"index":2136},"line":64,"code":"      it(\"should be fakeServer.create from nise\", function () {\n        assert.equals(sinon.createFakeServer(), fakeNise.fakeServer.create());\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be the fakeServerWithClock export from nise","suites":["sinon module","exports","fakeServerWithClock"],"updatePoint":{"line":69,"column":60,"index":2360},"line":69,"code":"      it(\"should be the fakeServerWithClock export from nise\", function () {\n        assert.same(sinon.fakeServerWithClock, fakeNise.fakeServerWithClock);\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be fakeServerWithClock.create from nise","suites":["sinon module","exports","createFakeServerWithClock"],"updatePoint":{"line":74,"column":56,"index":2585},"line":74,"code":"      it(\"should be fakeServerWithClock.create from nise\", function () {\n        assert.equals(sinon.createFakeServerWithClock(), fakeNise.fakeServerWithClock.create());\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be the fakeXhr.xhr export from nise","suites":["sinon module","exports","xhr"],"updatePoint":{"line":79,"column":52,"index":2803},"line":79,"code":"      it(\"should be the fakeXhr.xhr export from nise\", function () {\n        assert.equals(sinon.xhr, fakeNise.fakeXhr.xhr);\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be the fakeXhr.FakeXMLHttpRequest export from nise","suites":["sinon module","exports","FakeXMLHttpRequest"],"updatePoint":{"line":84,"column":67,"index":3010},"line":84,"code":"      it(\"should be the fakeXhr.FakeXMLHttpRequest export from nise\", function () {\n        assert.equals(sinon.FakeXMLHttpRequest, fakeNise.fakeXhr.FakeXMLHttpRequest);\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"should be the fakeXhr.useFakeXMLHttpRequest export from nise","suites":["sinon module","exports","useFakeXMLHttpRequest"],"updatePoint":{"line":100,"column":70,"index":3719},"line":100,"code":"      it(\"should be the fakeXhr.useFakeXMLHttpRequest export from nise\", function () {\n        sinon.spy(nise.fakeXhr, \"useFakeXMLHttpRequest\");\n        sinon.useFakeXMLHttpRequest();\n        assert.isTrue(nise.fakeXhr.useFakeXMLHttpRequest.called);\n      });","file":"sinon-test.js","skipped":false,"dir":"test"},{"name":"returns false if spy was not called","suites":[],"updatePoint":{"line":21,"column":43,"index":563},"line":21,"code":"    it(\"returns false if spy was not called\", function () {\n      assert.isFalse(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if spy was called with args","suites":[],"updatePoint":{"line":24,"column":48,"index":685},"line":24,"code":"    it(\"returns true if spy was called with args\", function () {\n      this.spy(1, 2, 3);\n      assert(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if called with args at least once","suites":[],"updatePoint":{"line":28,"column":54,"index":830},"line":28,"code":"    it(\"returns true if called with args at least once\", function () {\n      this.spy(1, 3, 3);\n      this.spy(1, 2, 3);\n      this.spy(3, 2, 3);\n      assert(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called with args","suites":[],"updatePoint":{"line":34,"column":45,"index":1016},"line":34,"code":"    it(\"returns false if not called with args\", function () {\n      this.spy(1, 3, 3);\n      this.spy(2);\n      this.spy();\n      assert.isFalse(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called with undefined","suites":[],"updatePoint":{"line":40,"column":50,"index":1202},"line":40,"code":"    it(\"returns false if not called with undefined\", function () {\n      this.spy();\n      assert.isFalse(this.spy[method](undefined));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for partial match","suites":[],"updatePoint":{"line":44,"column":38,"index":1334},"line":44,"code":"    it(\"returns true for partial match\", function () {\n      this.spy(1, 3, 3);\n      this.spy(2);\n      this.spy();\n      assert(this.spy[method](1, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"matchs all arguments individually, not as array","suites":[],"updatePoint":{"line":50,"column":55,"index":1514},"line":50,"code":"    it(\"matchs all arguments individually, not as array\", function () {\n      this.spy([1, 2, 3]);\n      assert.isFalse(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"uses matcher","suites":[],"updatePoint":{"line":54,"column":20,"index":1635},"line":54,"code":"    it(\"uses matcher\", function () {\n      this.spy(\"abc\");\n      assert(this.spy[method](match.typeOf(\"string\")));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"uses matcher in object","suites":[],"updatePoint":{"line":58,"column":30,"index":1769},"line":58,"code":"    it(\"uses matcher in object\", function () {\n      this.spy({\n        some: \"abc\"\n      });\n      assert(this.spy[method]({\n        some: match.typeOf(\"string\")\n      }));\n    }); // https://github.com/sinonjs/sinon/issues/1245","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"must not throw","suites":["when called with an Object without a prototype"],"updatePoint":{"line":70,"column":24,"index":2181},"line":70,"code":"      it(\"must not throw\", function () {\n        var spy = this.spy;\n        var objectWithoutPrototype = Object.create(null);\n        objectWithoutPrototype.something = 2;\n        spy[method]({\n          foo: 1,\n          objectWithoutPrototype: objectWithoutPrototype\n        });\n        refute.exception(function () {\n          spy.calledWithMatch({\n            objectWithoutPrototype: objectWithoutPrototype\n          });\n        });\n      });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if spy was not called","suites":["when called with an Object without a prototype"],"updatePoint":{"line":95,"column":43,"index":2929},"line":95,"code":"    it(\"returns false if spy was not called\", function () {\n      assert.isFalse(this.spy[method](1, 2, 3));\n    }); // eslint-disable-next-line mocha/no-identical-title","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if spy was called with args","suites":["when called with an Object without a prototype"],"updatePoint":{"line":99,"column":48,"index":3105},"line":99,"code":"    it(\"returns true if spy was called with args\", function () {\n      this.spy(1, 2, 3);\n      assert(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if called with args only once","suites":["when called with an Object without a prototype"],"updatePoint":{"line":103,"column":51,"index":3247},"line":103,"code":"    it(\"returns false if called with args only once\", function () {\n      this.spy(1, 3, 3);\n      this.spy(1, 2, 3);\n      this.spy(3, 2, 3);\n      assert.isFalse(this.spy[method](1, 2, 3));\n    }); // eslint-disable-next-line mocha/no-identical-title","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called with args","suites":["when called with an Object without a prototype"],"updatePoint":{"line":110,"column":45,"index":3495},"line":110,"code":"    it(\"returns false if not called with args\", function () {\n      this.spy(1, 3, 3);\n      this.spy(2);\n      this.spy();\n      assert.isFalse(this.spy[method](1, 2, 3));\n    }); // eslint-disable-next-line mocha/no-identical-title","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for partial match","suites":["when called with an Object without a prototype"],"updatePoint":{"line":117,"column":38,"index":3723},"line":117,"code":"    it(\"returns true for partial match\", function () {\n      this.spy(1, 3, 3);\n      assert(this.spy[method](1, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for partial match on many calls","suites":["when called with an Object without a prototype"],"updatePoint":{"line":121,"column":52,"index":3863},"line":121,"code":"    it(\"returns true for partial match on many calls\", function () {\n      this.spy(1, 3, 3);\n      this.spy(1, 3);\n      this.spy(1, 3, 4, 5);\n      this.spy(1, 3, 1);\n      assert(this.spy[method](1, 3));\n    }); // eslint-disable-next-line mocha/no-identical-title","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"matchs all arguments individually, not as array","suites":["when called with an Object without a prototype"],"updatePoint":{"line":129,"column":55,"index":4135},"line":129,"code":"    it(\"matchs all arguments individually, not as array\", function () {\n      this.spy([1, 2, 3]);\n      assert.isFalse(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if spy was not called","suites":["when called with an Object without a prototype"],"updatePoint":{"line":142,"column":42,"index":4496},"line":142,"code":"    it(\"returns true if spy was not called\", function () {\n      assert(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if spy was called with args","suites":["when called with an Object without a prototype"],"updatePoint":{"line":145,"column":49,"index":4611},"line":145,"code":"    it(\"returns false if spy was called with args\", function () {\n      this.spy(1, 2, 3);\n      assert.isFalse(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if called with args at least once","suites":["when called with an Object without a prototype"],"updatePoint":{"line":149,"column":55,"index":4765},"line":149,"code":"    it(\"returns false if called with args at least once\", function () {\n      this.spy(1, 3, 3);\n      this.spy(1, 2, 3);\n      this.spy(3, 2, 3);\n      assert.isFalse(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if not called with args","suites":["when called with an Object without a prototype"],"updatePoint":{"line":155,"column":44,"index":4958},"line":155,"code":"    it(\"returns true if not called with args\", function () {\n      this.spy(1, 3, 3);\n      this.spy(2);\n      this.spy();\n      assert(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for partial match","suites":["when called with an Object without a prototype"],"updatePoint":{"line":161,"column":39,"index":5125},"line":161,"code":"    it(\"returns false for partial match\", function () {\n      this.spy(1, 3, 3);\n      this.spy(2);\n      this.spy();\n      assert.isFalse(this.spy[method](1, 3));\n    }); // eslint-disable-next-line mocha/no-identical-title","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"matchs all arguments individually, not as array","suites":["when called with an Object without a prototype"],"updatePoint":{"line":168,"column":55,"index":5367},"line":168,"code":"    it(\"matchs all arguments individually, not as array\", function () {\n      this.spy([1, 2, 3]);\n      assert(this.spy[method](1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"does not throw if called without function","suites":["spy"],"updatePoint":{"line":188,"column":47,"index":5961},"line":188,"code":"  it(\"does not throw if called without function\", function () {\n    refute.exception(function () {\n      createSpy();\n    });\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"does not throw when calling anonymous spy","suites":["spy"],"updatePoint":{"line":193,"column":47,"index":6093},"line":193,"code":"  it(\"does not throw when calling anonymous spy\", function () {\n    var spy = createSpy();\n    refute.exception(spy);\n    assert(spy.called);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns spy function","suites":["spy"],"updatePoint":{"line":198,"column":26,"index":6220},"line":198,"code":"  it(\"returns spy function\", function () {\n    var func = function () {\n      return;\n    };\n\n    var spy = createSpy(func);\n    assert.isFunction(spy);\n    refute.same(func, spy);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"mirrors custom properties on function","suites":["spy"],"updatePoint":{"line":207,"column":43,"index":6424},"line":207,"code":"  it(\"mirrors custom properties on function\", function () {\n    var func = function () {\n      return;\n    };\n\n    func.myProp = 42;\n    var spy = createSpy(func);\n    assert.equals(spy.myProp, func.myProp);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"does not define create method","suites":["spy"],"updatePoint":{"line":216,"column":35,"index":6630},"line":216,"code":"  it(\"does not define create method\", function () {\n    var spy = createSpy();\n    assert.isUndefined(spy.create);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"does not overwrite original create property","suites":["spy"],"updatePoint":{"line":220,"column":49,"index":6765},"line":220,"code":"  it(\"does not overwrite original create property\", function () {\n    var func = function () {\n      return;\n    };\n\n    var object = func.create = {};\n    var spy = createSpy(func);\n    assert.same(spy.create, object);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"sets up logging arrays","suites":["spy"],"updatePoint":{"line":229,"column":28,"index":6970},"line":229,"code":"  it(\"sets up logging arrays\", function () {\n    var spy = createSpy();\n    assert.isArray(spy.args);\n    assert.isArray(spy.returnValues);\n    assert.isArray(spy.thisValues);\n    assert.isArray(spy.exceptions);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"works with getters","suites":["spy"],"updatePoint":{"line":236,"column":24,"index":7184},"line":236,"code":"  it(\"works with getters\", function () {\n    var object = {\n      get property() {\n        return 42;\n      }\n\n    };\n    var spy = createSpy(object, \"property\", [\"get\"]);\n    assert.equals(object.property, 42);\n    assert(spy.get.calledOnce);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"works with setters","suites":["spy"],"updatePoint":{"line":247,"column":24,"index":7434},"line":247,"code":"  it(\"works with setters\", function () {\n    var object = {\n      get test() {\n        return this.property;\n      },\n\n      set test(value) {\n        this.property = value * 2;\n      }\n\n    };\n    var spy = createSpy(object, \"test\", [\"set\"]);\n    object.test = 42;\n    assert(spy.set.calledOnce);\n    assert(spy.set.calledWith(42));\n    assert.equals(object.test, 84);\n    assert.equals(object.property, 84);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"works with setters and getters combined","suites":["spy"],"updatePoint":{"line":265,"column":45,"index":7871},"line":265,"code":"  it(\"works with setters and getters combined\", function () {\n    var object = {\n      get test() {\n        return this.property;\n      },\n\n      set test(value) {\n        this.property = value * 2;\n      }\n\n    };\n    var spy = createSpy(object, \"test\", [\"get\", \"set\"]);\n    object.test = 42;\n    assert(spy.set.calledOnce);\n    assert.equals(object.test, 84);\n    assert(spy.get.calledOnce);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"sets wrappedMethod on getter and setter","suites":["spy"],"updatePoint":{"line":282,"column":45,"index":8271},"line":282,"code":"  it(\"sets wrappedMethod on getter and setter\", function () {\n    var object = {\n      get test() {\n        return this.property;\n      },\n\n      set test(value) {\n        this.property = value;\n      }\n\n    };\n    var descriptor1 = Object.getOwnPropertyDescriptor(object, \"test\");\n    var spy = createSpy(object, \"test\", [\"get\", \"set\"]);\n    var descriptor2 = Object.getOwnPropertyDescriptor(object, \"test\");\n    refute.equals(descriptor1, descriptor2);\n    refute.isUndefined(spy.get.wrappedMethod);\n    refute.isUndefined(spy.get.restore);\n    refute.isUndefined(spy.set.wrappedMethod);\n    refute.isUndefined(spy.set.restore);\n    assert.isUndefined(spy.wrappedMethod);\n    assert.isUndefined(spy.restore);\n    spy.get.restore();\n    spy.set.restore();\n    var descriptor3 = Object.getOwnPropertyDescriptor(object, \"test\");\n    assert.equals(descriptor1, descriptor3);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"creates a spy for Error","suites":["spy","global.Error"],"updatePoint":{"line":315,"column":31,"index":9346},"line":315,"code":"    it(\"creates a spy for Error\", function () {\n      refute.exception(function () {\n        createSpy(globalContext, \"Error\");\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"should work with combination of withArgs arguments and order of calling withArgs","suites":["spy","global.Error"],"updatePoint":{"line":321,"column":86,"index":9553},"line":321,"code":"  it(\"should work with combination of withArgs arguments and order of calling withArgs\", function () {\n    function assertSpy(spy) {\n      // assert callCount\n      assert.equals(spy.callCount, 4);\n      assert.equals(spy.withArgs(1).callCount, 3);\n      assert.equals(spy.withArgs(1, 1).callCount, 1);\n      assert.equals(spy.withArgs(1, 2).callCount, 1); // assert call\n\n      assert.isUndefined(spy.getCall(0).args[0]);\n      assert.equals(spy.getCall(1).args[0], 1);\n      assert.isUndefined(spy.getCall(1).args[1]);\n      assert.equals(spy.getCall(2).args[0], 1);\n      assert.equals(spy.getCall(2).args[1], 1);\n      assert.isUndefined(spy.getCall(2).args[2]);\n      assert.equals(spy.getCall(3).args[0], 1);\n      assert.equals(spy.getCall(3).args[1], 2);\n      assert.isUndefined(spy.getCall(3).args[2]);\n      [\"args\", \"callId\"].forEach(function (propName) {\n        assert.equals(spy.withArgs(1).getCall(0)[propName], spy.getCall(1)[propName]);\n        assert.equals(spy.withArgs(1).getCall(1)[propName], spy.getCall(2)[propName]);\n        assert.equals(spy.withArgs(1).getCall(2)[propName], spy.getCall(3)[propName]);\n        assert.isNull(spy.withArgs(1).getCall(3));\n        assert.equals(spy.withArgs(1, 1).getCall(0)[propName], spy.getCall(2)[propName]);\n        assert.isNull(spy.withArgs(1, 1).getCall(1));\n        assert.equals(spy.withArgs(1, 2).getCall(0)[propName], spy.getCall(3)[propName]);\n        assert.isNull(spy.withArgs(1, 2).getCall(1));\n      }); // assert firstCall, secondCall, thirdCall, and lastCall\n\n      assert.equals(spy.firstCall.callId, spy.getCall(0).callId);\n      assert.equals(spy.secondCall.callId, spy.getCall(1).callId);\n      assert.equals(spy.thirdCall.callId, spy.getCall(2).callId);\n      assert.equals(spy.lastCall.callId, spy.getCall(3).callId);\n      assert.equals(spy.withArgs(1).firstCall.callId, spy.withArgs(1).getCall(0).callId);\n      assert.equals(spy.withArgs(1).secondCall.callId, spy.withArgs(1).getCall(1).callId);\n      assert.equals(spy.withArgs(1).thirdCall.callId, spy.withArgs(1).getCall(2).callId);\n      assert.equals(spy.withArgs(1).lastCall.callId, spy.withArgs(1).getCall(2).callId);\n      assert.equals(spy.withArgs(1, 1).firstCall.callId, spy.withArgs(1, 1).getCall(0).callId);\n      assert.isNull(spy.withArgs(1, 1).secondCall);\n      assert.isNull(spy.withArgs(1, 1).thirdCall);\n      assert.equals(spy.withArgs(1, 1).lastCall.callId, spy.withArgs(1, 1).getCall(0).callId);\n      assert.equals(spy.withArgs(1, 2).firstCall.callId, spy.withArgs(1, 2).getCall(0).callId);\n      assert.isNull(spy.withArgs(1, 2).secondCall);\n      assert.isNull(spy.withArgs(1, 2).thirdCall);\n      assert.equals(spy.withArgs(1, 2).lastCall.callId, spy.withArgs(1, 2).getCall(0).callId);\n    }\n\n    var object = {\n      f1: function () {\n        return;\n      },\n      f2: function () {\n        return;\n      }\n    }; // f1: the order of withArgs(1), withArgs(1, 1)\n\n    var spy1 = createSpy(object, \"f1\");\n    assert.equals(spy1.callCount, 0);\n    assert.equals(spy1.withArgs(1).callCount, 0);\n    assert.equals(spy1.withArgs(1, 1).callCount, 0);\n    assert.isNull(spy1.getCall(0));\n    assert.isNull(spy1.getCall(1));\n    assert.isNull(spy1.getCall(2));\n    assert.isNull(spy1.getCall(3));\n    object.f1();\n    object.f1(1);\n    object.f1(1, 1);\n    object.f1(1, 2);\n    assertSpy(spy1); // f2: the order of withArgs(1, 1), withArgs(1)\n\n    var spy2 = createSpy(object, \"f2\");\n    assert.equals(spy2.callCount, 0);\n    assert.equals(spy2.withArgs(1, 1).callCount, 0);\n    assert.equals(spy2.withArgs(1).callCount, 0);\n    assert.isNull(spy2.getCall(0));\n    assert.isNull(spy2.getCall(1));\n    assert.isNull(spy2.getCall(2));\n    assert.isNull(spy2.getCall(3));\n    object.f2();\n    object.f2(1);\n    object.f2(1, 1);\n    object.f2(1, 2);\n    assertSpy(spy2);\n  });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"sets name and displayName","suites":["spy",".named"],"updatePoint":{"line":405,"column":33,"index":13363},"line":405,"code":"    it(\"sets name and displayName\", function () {\n      var spy = createSpy();\n      var retval = spy.named(\"beep\");\n      assert.equals(spy.displayName, \"beep\");\n      verifyFunctionName(spy, \"beep\");\n      assert.same(spy, retval);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"calls underlying function","suites":["spy","call"],"updatePoint":{"line":414,"column":33,"index":13644},"line":414,"code":"    it(\"calls underlying function\", function () {\n      var called = false;\n      var spy = createSpy(function () {\n        called = true;\n      });\n      spy();\n      assert(called);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"passes 'new' to underlying function","suites":["spy","call"],"updatePoint":{"line":422,"column":43,"index":13846},"line":422,"code":"    it(\"passes 'new' to underlying function\", function () {\n      function TestClass() {\n        return;\n      }\n\n      var SpyClass = createSpy(TestClass);\n      var instance = new SpyClass();\n      assert(instance instanceof TestClass);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"passs arguments to function","suites":["spy","call"],"updatePoint":{"line":431,"column":35,"index":14085},"line":431,"code":"    it(\"passs arguments to function\", function () {\n      var actualArgs;\n\n      var func = function (a, b, c, d) {\n        actualArgs = [a, b, c, d];\n      };\n\n      var args = [1, {}, [], \"\"];\n      var spy = createSpy(func);\n      spy(args[0], args[1], args[2], args[3]);\n      assert.equals(actualArgs, args);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"maintains this binding","suites":["spy","call"],"updatePoint":{"line":443,"column":30,"index":14402},"line":443,"code":"    it(\"maintains this binding\", function () {\n      var actualThis;\n\n      var func = function () {\n        actualThis = this;\n      };\n\n      var object = {};\n      var spy = createSpy(func);\n      spy.call(object);\n      assert.same(actualThis, object);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns function's return value","suites":["spy","call"],"updatePoint":{"line":455,"column":39,"index":14676},"line":455,"code":"    it(\"returns function's return value\", function () {\n      var object = {};\n\n      var func = function () {\n        return object;\n      };\n\n      var spy = createSpy(func);\n      var actualReturn = spy();\n      assert.same(actualReturn, object);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if function throws","suites":["spy","call"],"updatePoint":{"line":466,"column":33,"index":14928},"line":466,"code":"    it(\"throws if function throws\", function () {\n      var err = new Error();\n      var spy = createSpy(function () {\n        throw err;\n      });\n      assert.exception(spy, err);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"retains function name","suites":["spy","call"],"updatePoint":{"line":473,"column":29,"index":15114},"line":473,"code":"    it(\"retains function name\", function () {\n      function test() {\n        return;\n      }\n\n      var spy = createSpy(test);\n      assert.equals(spy.displayName, \"test\");\n      verifyFunctionName(spy, \"test\");\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"retains function length 0","suites":["spy","call"],"updatePoint":{"line":482,"column":33,"index":15339},"line":482,"code":"    it(\"retains function length 0\", function () {\n      var spy = createSpy(function () {\n        return;\n      });\n      assert.equals(spy.length, 0);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"retains function length 1","suites":["spy","call"],"updatePoint":{"line":488,"column":33,"index":15499},"line":488,"code":"    it(\"retains function length 1\", function () {\n      // eslint-disable-next-line no-unused-vars\n      var spy = createSpy(function (a) {\n        return;\n      });\n      assert.equals(spy.length, 1);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"retains function length 2","suites":["spy","call"],"updatePoint":{"line":495,"column":33,"index":15709},"line":495,"code":"    it(\"retains function length 2\", function () {\n      // eslint-disable-next-line no-unused-vars\n      var spy = createSpy(function (a, b) {\n        return;\n      });\n      assert.equals(spy.length, 2);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"retains function length 3","suites":["spy","call"],"updatePoint":{"line":502,"column":33,"index":15922},"line":502,"code":"    it(\"retains function length 3\", function () {\n      // eslint-disable-next-line no-unused-vars\n      var spy = createSpy(function (a, b, c) {\n        return;\n      });\n      assert.equals(spy.length, 3);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"retains function length 4","suites":["spy","call"],"updatePoint":{"line":509,"column":33,"index":16138},"line":509,"code":"    it(\"retains function length 4\", function () {\n      // eslint-disable-next-line no-unused-vars\n      var spy = createSpy(function (a, b, c, d) {\n        return;\n      });\n      assert.equals(spy.length, 4);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"retains function length 12","suites":["spy","call"],"updatePoint":{"line":516,"column":34,"index":16358},"line":516,"code":"    it(\"retains function length 12\", function () {\n      // eslint-disable-next-line no-unused-vars\n      var func12Args = function (a, b, c, d, e, f, g, h, i, j, k, l) {\n        return;\n      };\n\n      var spy = createSpy(func12Args);\n      assert.equals(spy.length, 12);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false prior to calling the spy","suites":["spy",".called"],"updatePoint":{"line":530,"column":41,"index":16755},"line":530,"code":"    it(\"is false prior to calling the spy\", function () {\n      assert.isFalse(this.spy.called);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true after calling the spy once","suites":["spy",".called"],"updatePoint":{"line":533,"column":42,"index":16861},"line":533,"code":"    it(\"is true after calling the spy once\", function () {\n      this.spy();\n      assert(this.spy.called);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true after calling the spy twice","suites":["spy",".called"],"updatePoint":{"line":537,"column":43,"index":16978},"line":537,"code":"    it(\"is true after calling the spy twice\", function () {\n      this.spy();\n      this.spy();\n      assert(this.spy.called);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true prior to calling the spy","suites":["spy",".notCalled"],"updatePoint":{"line":547,"column":40,"index":17222},"line":547,"code":"    it(\"is true prior to calling the spy\", function () {\n      assert.isTrue(this.spy.notCalled);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false after calling the spy once","suites":["spy",".notCalled"],"updatePoint":{"line":550,"column":43,"index":17331},"line":550,"code":"    it(\"is false after calling the spy once\", function () {\n      this.spy();\n      assert.isFalse(this.spy.notCalled);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false prior to calling the spy","suites":["spy",".calledOnce"],"updatePoint":{"line":559,"column":41,"index":17570},"line":559,"code":"    it(\"is false prior to calling the spy\", function () {\n      assert.isFalse(this.spy.calledOnce);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true after calling the spy once","suites":["spy",".calledOnce"],"updatePoint":{"line":562,"column":42,"index":17680},"line":562,"code":"    it(\"is true after calling the spy once\", function () {\n      this.spy();\n      assert(this.spy.calledOnce);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false after calling the spy twice","suites":["spy",".calledOnce"],"updatePoint":{"line":566,"column":44,"index":17802},"line":566,"code":"    it(\"is false after calling the spy twice\", function () {\n      this.spy();\n      this.spy();\n      assert.isFalse(this.spy.calledOnce);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false prior to calling the spy","suites":["spy",".calledTwice"],"updatePoint":{"line":576,"column":41,"index":18061},"line":576,"code":"    it(\"is false prior to calling the spy\", function () {\n      assert.isFalse(this.spy.calledTwice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false after calling the spy once","suites":["spy",".calledTwice"],"updatePoint":{"line":579,"column":43,"index":18173},"line":579,"code":"    it(\"is false after calling the spy once\", function () {\n      this.spy();\n      assert.isFalse(this.spy.calledTwice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true after calling the spy twice","suites":["spy",".calledTwice"],"updatePoint":{"line":583,"column":43,"index":18303},"line":583,"code":"    it(\"is true after calling the spy twice\", function () {\n      this.spy();\n      this.spy();\n      assert(this.spy.calledTwice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false after calling the spy thrice","suites":["spy",".calledTwice"],"updatePoint":{"line":588,"column":45,"index":18445},"line":588,"code":"    it(\"is false after calling the spy thrice\", function () {\n      this.spy();\n      this.spy();\n      this.spy();\n      assert.isFalse(this.spy.calledTwice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false prior to calling the spy","suites":["spy",".calledThrice"],"updatePoint":{"line":599,"column":41,"index":18724},"line":599,"code":"    it(\"is false prior to calling the spy\", function () {\n      assert.isFalse(this.spy.calledThrice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false after calling the spy twice","suites":["spy",".calledThrice"],"updatePoint":{"line":602,"column":44,"index":18838},"line":602,"code":"    it(\"is false after calling the spy twice\", function () {\n      this.spy();\n      this.spy();\n      assert.isFalse(this.spy.calledThrice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true after calling the spy thrice","suites":["spy",".calledThrice"],"updatePoint":{"line":607,"column":44,"index":18988},"line":607,"code":"    it(\"is true after calling the spy thrice\", function () {\n      this.spy();\n      this.spy();\n      this.spy();\n      assert(this.spy.calledThrice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false after calling the spy four times","suites":["spy",".calledThrice"],"updatePoint":{"line":613,"column":49,"index":19153},"line":613,"code":"    it(\"is false after calling the spy four times\", function () {\n      this.spy();\n      this.spy();\n      this.spy();\n      this.spy();\n      assert.isFalse(this.spy.calledThrice);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"reports 0 calls","suites":["spy",".callCount"],"updatePoint":{"line":625,"column":23,"index":19430},"line":625,"code":"    it(\"reports 0 calls\", function () {\n      assert.equals(this.spy.callCount, 0);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"records one call","suites":["spy",".callCount"],"updatePoint":{"line":628,"column":24,"index":19523},"line":628,"code":"    it(\"records one call\", function () {\n      this.spy();\n      assert.equals(this.spy.callCount, 1);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"records two calls","suites":["spy",".callCount"],"updatePoint":{"line":632,"column":25,"index":19635},"line":632,"code":"    it(\"records two calls\", function () {\n      this.spy();\n      this.spy();\n      assert.equals(this.spy.callCount, 2);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"increases call count for each call","suites":["spy",".callCount"],"updatePoint":{"line":637,"column":42,"index":19782},"line":637,"code":"    it(\"increases call count for each call\", function () {\n      this.spy();\n      this.spy();\n      assert.equals(this.spy.callCount, 2);\n      this.spy();\n      assert.equals(this.spy.callCount, 3);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if spy wasn't called","suites":["spy",".calledOn"],"updatePoint":{"line":649,"column":37,"index":20097},"line":649,"code":"    it(\"is false if spy wasn't called\", function () {\n      assert.isFalse(this.spy.calledOn({}));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called with thisValue","suites":["spy",".calledOn"],"updatePoint":{"line":652,"column":40,"index":20207},"line":652,"code":"    it(\"is true if called with thisValue\", function () {\n      var object = {};\n      this.spy.call(object);\n      assert(this.spy.calledOn(object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called on object at least once","suites":["spy",".calledOn","in browser"],"updatePoint":{"line":663,"column":51,"index":20532},"line":663,"code":"      it(\"is true if called on object at least once\", function () {\n        var object = {};\n        this.spy();\n        this.spy.call({});\n        this.spy.call(object);\n        this.spy.call(window);\n        assert(this.spy.calledOn(object));\n      });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called on object","suites":["spy",".calledOn","in browser"],"updatePoint":{"line":672,"column":45,"index":20789},"line":672,"code":"    it(\"returns false if not called on object\", function () {\n      var object = {};\n      this.spy.call(object);\n      this.spy();\n      assert.isFalse(this.spy.calledOn({}));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called with matcher that returns true","suites":["spy",".calledOn","in browser"],"updatePoint":{"line":678,"column":56,"index":20985},"line":678,"code":"    it(\"is true if called with matcher that returns true\", function () {\n      var matcher = match(function () {\n        return true;\n      });\n      this.spy();\n      assert(this.spy.calledOn(matcher));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if called with matcher that returns false","suites":["spy",".calledOn","in browser"],"updatePoint":{"line":685,"column":58,"index":21199},"line":685,"code":"    it(\"is false if called with matcher that returns false\", function () {\n      var matcher = match(function () {\n        return false;\n      });\n      this.spy();\n      assert.isFalse(this.spy.calledOn(matcher));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"invokes matcher.test with given object","suites":["spy",".calledOn","in browser"],"updatePoint":{"line":692,"column":46,"index":21410},"line":692,"code":"    it(\"invokes matcher.test with given object\", function () {\n      var expected = {};\n      var actual;\n      this.spy.call(expected);\n      this.spy.calledOn(match(function (value) {\n        actual = value;\n      }));\n      assert.same(actual, expected);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false prior to calling the spy","suites":["spy",".alwaysCalledOn"],"updatePoint":{"line":706,"column":41,"index":21788},"line":706,"code":"    it(\"is false prior to calling the spy\", function () {\n      assert.isFalse(this.spy.alwaysCalledOn({}));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called with thisValue once","suites":["spy",".alwaysCalledOn"],"updatePoint":{"line":709,"column":45,"index":21909},"line":709,"code":"    it(\"is true if called with thisValue once\", function () {\n      var object = {};\n      this.spy.call(object);\n      assert(this.spy.alwaysCalledOn(object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called with thisValue many times","suites":["spy",".alwaysCalledOn"],"updatePoint":{"line":714,"column":51,"index":22084},"line":714,"code":"    it(\"is true if called with thisValue many times\", function () {\n      var object = {};\n      this.spy.call(object);\n      this.spy.call(object);\n      this.spy.call(object);\n      this.spy.call(object);\n      assert(this.spy.alwaysCalledOn(object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if called with another object atleast once","suites":["spy",".alwaysCalledOn"],"updatePoint":{"line":722,"column":59,"index":22354},"line":722,"code":"    it(\"is false if called with another object atleast once\", function () {\n      var object = {};\n      this.spy.call(object);\n      this.spy.call(object);\n      this.spy.call(object);\n      this.spy();\n      this.spy.call(object);\n      assert.isFalse(this.spy.alwaysCalledOn(object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if never called with expected object","suites":["spy",".alwaysCalledOn"],"updatePoint":{"line":731,"column":53,"index":22644},"line":731,"code":"    it(\"is false if never called with expected object\", function () {\n      var object = {};\n      this.spy();\n      this.spy();\n      this.spy();\n      assert.isFalse(this.spy.alwaysCalledOn(object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if spy wasn't called","suites":["spy",".calledWithNew"],"updatePoint":{"line":743,"column":37,"index":22954},"line":743,"code":"    it(\"is false if spy wasn't called\", function () {\n      assert.isFalse(this.spy.calledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called with new","suites":["spy",".calledWithNew"],"updatePoint":{"line":746,"column":34,"index":23061},"line":746,"code":"    it(\"is true if called with new\", function () {\n      var result = new this.spy(); // eslint-disable-line no-unused-vars, new-cap\n\n      assert(this.spy.calledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called with new on custom constructor","suites":["spy",".calledWithNew"],"updatePoint":{"line":751,"column":56,"index":23265},"line":751,"code":"    it(\"is true if called with new on custom constructor\", function () {\n      function MyThing() {\n        return;\n      }\n\n      MyThing.prototype = {};\n      var ns = {\n        MyThing: MyThing\n      };\n      createSpy(ns, \"MyThing\");\n      var result = new ns.MyThing(); // eslint-disable-line no-unused-vars\n\n      assert(ns.MyThing.calledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if called as function","suites":["spy",".calledWithNew"],"updatePoint":{"line":765,"column":38,"index":23611},"line":765,"code":"    it(\"is false if called as function\", function () {\n      this.spy();\n      assert.isFalse(this.spy.calledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if called with new at least once","suites":["spy",".calledWithNew","in browser"],"updatePoint":{"line":775,"column":50,"index":23908},"line":775,"code":"      it(\"is true if called with new at least once\", function () {\n        var object = {};\n        this.spy();\n        var a = new this.spy(); // eslint-disable-line no-unused-vars, new-cap\n\n        this.spy(object);\n        this.spy(window);\n        assert(this.spy.calledWithNew());\n      });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true newed constructor returns object","suites":["spy",".calledWithNew","in browser"],"updatePoint":{"line":785,"column":48,"index":24210},"line":785,"code":"    it(\"is true newed constructor returns object\", function () {\n      function MyThing() {\n        return {};\n      }\n\n      var object = {\n        MyThing: MyThing\n      };\n      createSpy(object, \"MyThing\");\n      var result = new object.MyThing(); // eslint-disable-line no-unused-vars\n\n      assert(object.MyThing.calledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false when called on spied native function","suites":["spy",".calledWithNew","spied native function"],"updatePoint":{"line":808,"column":55,"index":24863},"line":808,"code":"      it(\"is false when called on spied native function\", function () {\n        var log = {\n          info: console.log\n        }; // eslint-disable-line no-console\n\n        createSpy(log, \"info\"); // by logging an empty string, we're not polluting the test console output\n\n        log.info(\"\");\n        assert.isFalse(log.info.calledWithNew());\n      });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if spy wasn't called","suites":["spy",".alwaysCalledWithNew"],"updatePoint":{"line":824,"column":37,"index":25331},"line":824,"code":"    it(\"is false if spy wasn't called\", function () {\n      assert.isFalse(this.spy.alwaysCalledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is true if always called with new","suites":["spy",".alwaysCalledWithNew"],"updatePoint":{"line":827,"column":41,"index":25451},"line":827,"code":"    it(\"is true if always called with new\", function () {\n      /*eslint-disable no-unused-vars, new-cap*/\n      var result = new this.spy();\n      var result2 = new this.spy();\n      var result3 = new this.spy();\n      /*eslint-enable no-unused-vars, new-cap*/\n\n      assert(this.spy.alwaysCalledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is false if called as function once","suites":["spy",".alwaysCalledWithNew"],"updatePoint":{"line":836,"column":43,"index":25770},"line":836,"code":"    it(\"is false if called as function once\", function () {\n      /*eslint-disable no-unused-vars, new-cap*/\n      var result = new this.spy();\n      var result2 = new this.spy();\n      /*eslint-enable no-unused-vars, new-cap*/\n\n      this.spy();\n      assert.isFalse(this.spy.alwaysCalledWithNew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains one object","suites":["spy",".thisValues"],"updatePoint":{"line":850,"column":27,"index":26176},"line":850,"code":"    it(\"contains one object\", function () {\n      var object = {};\n      this.spy.call(object);\n      assert.equals(this.spy.thisValues, [object]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"stacks up objects","suites":["spy",".thisValues"],"updatePoint":{"line":855,"column":25,"index":26330},"line":855,"code":"    it(\"stacks up objects\", function () {\n      function MyConstructor() {\n        return;\n      }\n\n      var objects = [{}, [], new MyConstructor(), {\n        id: 243\n      }];\n      this.spy();\n      this.spy.call(objects[0]);\n      this.spy.call(objects[1]);\n      this.spy.call(objects[2]);\n      this.spy.call(objects[3]);\n      assert.equals(this.spy.thisValues, [this].concat(objects));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks substring match","suites":["spy",".calledWithMatchSpecial"],"updatePoint":{"line":879,"column":30,"index":27098},"line":879,"code":"    it(\"checks substring match\", function () {\n      this.spy(\"I like it\");\n      assert(this.spy.calledWithMatch(\"like\"));\n      assert.isFalse(this.spy.calledWithMatch(\"nope\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks for regexp match","suites":["spy",".calledWithMatchSpecial"],"updatePoint":{"line":884,"column":31,"index":27287},"line":884,"code":"    it(\"checks for regexp match\", function () {\n      this.spy(\"I like it\");\n      assert(this.spy.calledWithMatch(/[a-z ]+/i));\n      assert.isFalse(this.spy.calledWithMatch(/[0-9]+/));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks for partial object match","suites":["spy",".calledWithMatchSpecial"],"updatePoint":{"line":889,"column":39,"index":27490},"line":889,"code":"    it(\"checks for partial object match\", function () {\n      this.spy({\n        foo: \"foo\",\n        bar: \"bar\"\n      });\n      assert(this.spy.calledWithMatch({\n        bar: \"bar\"\n      }));\n      assert.isFalse(this.spy.calledWithMatch({\n        same: \"same\"\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks true","suites":["spy",".alwaysCalledWithMatchSpecial"],"updatePoint":{"line":910,"column":19,"index":28154},"line":910,"code":"    it(\"checks true\", function () {\n      this.spy(true);\n      assert(this.spy.alwaysCalledWithMatch(true));\n      assert.isFalse(this.spy.alwaysCalledWithMatch(false));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks false","suites":["spy",".alwaysCalledWithMatchSpecial"],"updatePoint":{"line":915,"column":20,"index":28334},"line":915,"code":"    it(\"checks false\", function () {\n      this.spy(false);\n      assert(this.spy.alwaysCalledWithMatch(false));\n      assert.isFalse(this.spy.alwaysCalledWithMatch(true));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks substring match","suites":["spy",".alwaysCalledWithMatchSpecial"],"updatePoint":{"line":920,"column":30,"index":28525},"line":920,"code":"    it(\"checks substring match\", function () {\n      this.spy(\"test case\");\n      this.spy(\"some test\");\n      this.spy(\"all tests\");\n      assert(this.spy.alwaysCalledWithMatch(\"test\"));\n      assert.isFalse(this.spy.alwaysCalledWithMatch(\"case\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks regexp match","suites":["spy",".alwaysCalledWithMatchSpecial"],"updatePoint":{"line":927,"column":27,"index":28780},"line":927,"code":"    it(\"checks regexp match\", function () {\n      this.spy(\"1\");\n      this.spy(\"2\");\n      this.spy(\"3\");\n      assert(this.spy.alwaysCalledWithMatch(/[123]/));\n      assert.isFalse(this.spy.alwaysCalledWithMatch(/[12]/));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks partial object match","suites":["spy",".alwaysCalledWithMatchSpecial"],"updatePoint":{"line":934,"column":35,"index":29020},"line":934,"code":"    it(\"checks partial object match\", function () {\n      this.spy({\n        a: \"a\",\n        b: \"b\"\n      });\n      this.spy({\n        c: \"c\",\n        b: \"b\"\n      });\n      this.spy({\n        b: \"b\",\n        d: \"d\"\n      });\n      assert(this.spy.alwaysCalledWithMatch({\n        b: \"b\"\n      }));\n      assert.isFalse(this.spy.alwaysCalledWithMatch({\n        a: \"a\"\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks substring match","suites":["spy",".neverCalledWithMatchSpecial"],"updatePoint":{"line":963,"column":30,"index":29798},"line":963,"code":"    it(\"checks substring match\", function () {\n      this.spy(\"a test\", \"b test\");\n      assert(this.spy.neverCalledWithMatch(\"a\", \"a\"));\n      assert(this.spy.neverCalledWithMatch(\"b\", \"b\"));\n      assert(this.spy.neverCalledWithMatch(\"b\", \"a\"));\n      assert.isFalse(this.spy.neverCalledWithMatch(\"a\", \"b\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks regexp match","suites":["spy",".neverCalledWithMatchSpecial"],"updatePoint":{"line":970,"column":27,"index":30114},"line":970,"code":"    it(\"checks regexp match\", function () {\n      this.spy(\"a test\", \"b test\");\n      assert(this.spy.neverCalledWithMatch(/a/, /a/));\n      assert(this.spy.neverCalledWithMatch(/b/, /b/));\n      assert(this.spy.neverCalledWithMatch(/b/, /a/));\n      assert.isFalse(this.spy.neverCalledWithMatch(/a/, /b/));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"checks partial object match","suites":["spy",".neverCalledWithMatchSpecial"],"updatePoint":{"line":977,"column":35,"index":30438},"line":977,"code":"    it(\"checks partial object match\", function () {\n      this.spy({\n        a: \"test\",\n        b: \"test\"\n      });\n      assert(this.spy.neverCalledWithMatch({\n        a: \"nope\"\n      }));\n      assert(this.spy.neverCalledWithMatch({\n        c: \"test\"\n      }));\n      assert.isFalse(this.spy.neverCalledWithMatch({\n        b: \"test\"\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains real arrays","suites":["spy",".args"],"updatePoint":{"line":997,"column":28,"index":30892},"line":997,"code":"    it(\"contains real arrays\", function () {\n      this.spy();\n      assert.isArray(this.spy.args[0]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains empty array when no arguments","suites":["spy",".args"],"updatePoint":{"line":1001,"column":46,"index":31021},"line":1001,"code":"    it(\"contains empty array when no arguments\", function () {\n      this.spy();\n      assert.equals(this.spy.args, [[]]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains array with first call's arguments","suites":["spy",".args"],"updatePoint":{"line":1005,"column":50,"index":31156},"line":1005,"code":"    it(\"contains array with first call's arguments\", function () {\n      this.spy(1, 2, 3);\n      assert.equals(this.spy.args, [[1, 2, 3]]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"stacks up arguments in nested array","suites":["spy",".args"],"updatePoint":{"line":1009,"column":43,"index":31298},"line":1009,"code":"    it(\"stacks up arguments in nested array\", function () {\n      var objects = [{}, [], {\n        id: 324\n      }];\n      this.spy(1, objects[0], 3);\n      this.spy(1, 2, objects[1]);\n      this.spy(objects[2], 2, 3);\n      assert.equals(this.spy.args, [[1, objects[0], 3], [1, 2, objects[1]], [objects[2], 2, 3]]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for partial match","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1023,"column":39,"index":31739},"line":1023,"code":"    it(\"returns false for partial match\", function () {\n      this.spy(1, 2, 3);\n      assert.isFalse(this.spy.calledWithExactly(1, 2));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for missing arguments","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1027,"column":43,"index":31888},"line":1027,"code":"    it(\"returns false for missing arguments\", function () {\n      this.spy(1, 2, 3);\n      assert.isFalse(this.spy.calledWithExactly(1, 2, 3, 4));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for exact match","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1031,"column":36,"index":32036},"line":1031,"code":"    it(\"returns true for exact match\", function () {\n      this.spy(1, 2, 3);\n      assert(this.spy.calledWithExactly(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"matchs by strict comparison","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1035,"column":35,"index":32172},"line":1035,"code":"    it(\"matchs by strict comparison\", function () {\n      this.spy({}, []);\n      assert.isFalse(this.spy.calledWithExactly({}, [], null));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for one exact match","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1039,"column":40,"index":32325},"line":1039,"code":"    it(\"returns true for one exact match\", function () {\n      var object = {};\n      var array = [];\n      this.spy({}, []);\n      this.spy(object, []);\n      this.spy(object, array);\n      assert(this.spy.calledWithExactly(object, array));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true when all properties of an object argument match","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1047,"column":68,"index":32603},"line":1047,"code":"    it(\"returns true when all properties of an object argument match\", function () {\n      this.spy({\n        a: 1,\n        b: 2,\n        c: 3\n      });\n      assert(this.spy.calledWithExactly({\n        a: 1,\n        b: 2,\n        c: 3\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false when a property of an object argument is set to undefined","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1059,"column":79,"index":32869},"line":1059,"code":"    it(\"returns false when a property of an object argument is set to undefined\", function () {\n      this.spy({\n        a: 1,\n        b: 2,\n        c: 3\n      });\n      assert.isFalse(this.spy.calledWithExactly({\n        a: 1,\n        b: 2,\n        c: undefined\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false when a property of an object argument is set to a different value","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1071,"column":87,"index":33159},"line":1071,"code":"    it(\"returns false when a property of an object argument is set to a different value\", function () {\n      this.spy({\n        a: 1,\n        b: 2,\n        c: 3\n      });\n      assert.isFalse(this.spy.calledWithExactly({\n        a: 1,\n        b: 2,\n        c: \"blah\"\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false when an object argument has a different property/value pair","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1083,"column":81,"index":33440},"line":1083,"code":"    it(\"returns false when an object argument has a different property/value pair\", function () {\n      this.spy({\n        a: 1,\n        b: 2,\n        c: 3\n      });\n      assert.isFalse(this.spy.calledWithExactly({\n        a: 1,\n        b: 2,\n        foo: \"blah\"\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false when property of Object argument is set to undefined and has a different name","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1095,"column":99,"index":33741},"line":1095,"code":"    it(\"returns false when property of Object argument is set to undefined and has a different name\", function () {\n      this.spy({\n        a: 1,\n        b: 2,\n        c: 3\n      });\n      assert.isFalse(this.spy.calledWithExactly({\n        a: 1,\n        b: 2,\n        foo: undefined\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false when any properties of an object argument aren't present","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1107,"column":78,"index":34024},"line":1107,"code":"    it(\"returns false when any properties of an object argument aren't present\", function () {\n      this.spy({\n        a: 1,\n        b: 2,\n        c: 3\n      });\n      assert.isFalse(this.spy.calledWithExactly({\n        a: 1,\n        b: 2\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false when an object argument has extra properties","suites":["spy",".calledWithExactly"],"updatePoint":{"line":1118,"column":66,"index":34271},"line":1118,"code":"    it(\"returns false when an object argument has extra properties\", function () {\n      this.spy({\n        a: 1,\n        b: 2,\n        c: 3\n      });\n      assert.isFalse(this.spy.calledWithExactly({\n        a: 1,\n        b: 2,\n        c: 3,\n        d: 4\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for not exact match","suites":["spy",".calledOnceWith"],"updatePoint":{"line":1136,"column":40,"index":34637},"line":1136,"code":"    it(\"returns true for not exact match\", function () {\n      this.spy(1, 2, 3, 4);\n      assert.isTrue(this.spy.calledOnceWith(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for matching calls but called more then once","suites":["spy",".calledOnceWith"],"updatePoint":{"line":1140,"column":66,"index":34811},"line":1140,"code":"    it(\"returns false for matching calls but called more then once\", function () {\n      this.spy(1, 2, 3, 4);\n      this.spy(1, 2, 3, 6);\n      assert.isFalse(this.spy.calledOnceWith(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return false for one mismatched call","suites":["spy",".calledOnceWith"],"updatePoint":{"line":1145,"column":44,"index":34992},"line":1145,"code":"    it(\"return false for one mismatched call\", function () {\n      this.spy(1, 2);\n      assert.isFalse(this.spy.calledOnceWith(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return false for one mismatched call with some other ","suites":["spy",".calledOnceWith"],"updatePoint":{"line":1149,"column":61,"index":35156},"line":1149,"code":"    it(\"return false for one mismatched call with some other \", function () {\n      this.spy(1, 2, 3);\n      this.spy(1, 2);\n      assert.isFalse(this.spy.calledOnceWith(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for exact match","suites":["spy",".calledOnceWithExactly"],"updatePoint":{"line":1159,"column":36,"index":35444},"line":1159,"code":"    it(\"returns true for exact match\", function () {\n      this.spy(1, 2, 3);\n      assert.isTrue(this.spy.calledOnceWithExactly(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for exact parameters but called more then once","suites":["spy",".calledOnceWithExactly"],"updatePoint":{"line":1163,"column":68,"index":35624},"line":1163,"code":"    it(\"returns false for exact parameters but called more then once\", function () {\n      this.spy(1, 2, 3);\n      this.spy(1, 2, 3);\n      assert.isFalse(this.spy.calledOnceWithExactly(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return false for one mismatched call","suites":["spy",".calledOnceWithExactly"],"updatePoint":{"line":1168,"column":44,"index":35806},"line":1168,"code":"    it(\"return false for one mismatched call\", function () {\n      this.spy(1, 2);\n      assert.isFalse(this.spy.calledOnceWithExactly(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return false for one mismatched call with some other ","suites":["spy",".calledOnceWithExactly"],"updatePoint":{"line":1172,"column":61,"index":35977},"line":1172,"code":"    it(\"return false for one mismatched call with some other \", function () {\n      this.spy(1, 2, 3);\n      this.spy(1, 2);\n      assert.isFalse(this.spy.calledOnceWithExactly(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for exact match","suites":["spy",".calledOnceWithMatch"],"updatePoint":{"line":1182,"column":36,"index":36270},"line":1182,"code":"    it(\"returns true for exact match\", function () {\n      this.spy(1, 2, 3);\n      assert.isTrue(this.spy.calledOnceWithMatch(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for partial match","suites":["spy",".calledOnceWithMatch"],"updatePoint":{"line":1186,"column":38,"index":36418},"line":1186,"code":"    it(\"returns true for partial match\", function () {\n      this.spy(1, 2, 3);\n      assert.isTrue(this.spy.calledOnceWithMatch(1, 2));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for exact parameters but called more then once","suites":["spy",".calledOnceWithMatch"],"updatePoint":{"line":1190,"column":68,"index":36593},"line":1190,"code":"    it(\"returns false for exact parameters but called more then once\", function () {\n      this.spy(1, 2, 3);\n      this.spy(1, 2, 3);\n      assert.isFalse(this.spy.calledOnceWithMatch(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return false for one mismatched call","suites":["spy",".calledOnceWithMatch"],"updatePoint":{"line":1195,"column":44,"index":36773},"line":1195,"code":"    it(\"return false for one mismatched call\", function () {\n      this.spy(1, 2);\n      assert.isFalse(this.spy.calledOnceWithMatch(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return false for one mismatched call with some other","suites":["spy",".calledOnceWithMatch"],"updatePoint":{"line":1199,"column":60,"index":36941},"line":1199,"code":"    it(\"return false for one mismatched call with some other\", function () {\n      this.spy(1, 2, 3);\n      this.spy(1, 2);\n      assert.isFalse(this.spy.calledOnceWithMatch(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for partial match","suites":["spy",".alwaysCalledWithExactly"],"updatePoint":{"line":1209,"column":39,"index":37239},"line":1209,"code":"    it(\"returns false for partial match\", function () {\n      this.spy(1, 2, 3);\n      assert.isFalse(this.spy.alwaysCalledWithExactly(1, 2));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for missing arguments","suites":["spy",".alwaysCalledWithExactly"],"updatePoint":{"line":1213,"column":43,"index":37394},"line":1213,"code":"    it(\"returns false for missing arguments\", function () {\n      this.spy(1, 2, 3);\n      assert.isFalse(this.spy.alwaysCalledWithExactly(1, 2, 3, 4));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for exact match","suites":["spy",".alwaysCalledWithExactly"],"updatePoint":{"line":1217,"column":36,"index":37548},"line":1217,"code":"    it(\"returns true for exact match\", function () {\n      this.spy(1, 2, 3);\n      assert(this.spy.alwaysCalledWithExactly(1, 2, 3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for excess arguments","suites":["spy",".alwaysCalledWithExactly"],"updatePoint":{"line":1221,"column":42,"index":37697},"line":1221,"code":"    it(\"returns false for excess arguments\", function () {\n      this.spy({}, []);\n      assert.isFalse(this.spy.alwaysCalledWithExactly({}, [], null));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for one exact match","suites":["spy",".alwaysCalledWithExactly"],"updatePoint":{"line":1225,"column":41,"index":37857},"line":1225,"code":"    it(\"returns false for one exact match\", function () {\n      var object = {};\n      var array = [];\n      this.spy({}, []);\n      this.spy(object, []);\n      this.spy(object, array);\n      assert(this.spy.alwaysCalledWithExactly(object, array));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for only exact matches","suites":["spy",".alwaysCalledWithExactly"],"updatePoint":{"line":1233,"column":43,"index":38116},"line":1233,"code":"    it(\"returns true for only exact matches\", function () {\n      var object = {};\n      var array = [];\n      this.spy(object, array);\n      this.spy(object, array);\n      this.spy(object, array);\n      assert(this.spy.alwaysCalledWithExactly(object, array));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false for no exact matches","suites":["spy",".alwaysCalledWithExactly"],"updatePoint":{"line":1241,"column":42,"index":38384},"line":1241,"code":"    it(\"returns false for no exact matches\", function () {\n      var object = {};\n      var array = [];\n      this.spy(object, array, null);\n      this.spy(object, array, undefined);\n      this.spy(object, array, \"\");\n      assert.isFalse(this.spy.alwaysCalledWithExactly(object, array));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns exception thrown by function","suites":["spy",".threw"],"updatePoint":{"line":1261,"column":44,"index":39028},"line":1261,"code":"    it(\"returns exception thrown by function\", function () {\n      var err = new Error();\n      var spy = createSpy(function () {\n        throw err;\n      });\n      assert.exception(spy);\n      assert(spy.threw(err));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if spy did not throw","suites":["spy",".threw"],"updatePoint":{"line":1269,"column":42,"index":39252},"line":1269,"code":"    it(\"returns false if spy did not throw\", function () {\n      this.spy();\n      assert.isFalse(this.spy.threw());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if spy threw","suites":["spy",".threw"],"updatePoint":{"line":1273,"column":33,"index":39368},"line":1273,"code":"    it(\"returns true if spy threw\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert(this.spyWithTypeError.threw());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if string type matches","suites":["spy",".threw"],"updatePoint":{"line":1277,"column":43,"index":39528},"line":1277,"code":"    it(\"returns true if string type matches\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert(this.spyWithTypeError.threw(\"TypeError\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if string did not match","suites":["spy",".threw"],"updatePoint":{"line":1281,"column":45,"index":39701},"line":1281,"code":"    it(\"returns false if string did not match\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert.isFalse(this.spyWithTypeError.threw(\"Error\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if spy did not throw specified error","suites":["spy",".threw"],"updatePoint":{"line":1285,"column":58,"index":39891},"line":1285,"code":"    it(\"returns false if spy did not throw specified error\", function () {\n      this.spy();\n      assert.isFalse(this.spy.threw(\"Error\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if string matches","suites":["spy",".threw"],"updatePoint":{"line":1289,"column":38,"index":40019},"line":1289,"code":"    it(\"returns true if string matches\", function () {\n      assert.exception(this.spyWithStringError);\n      assert(this.spyWithStringError.threw(\"error\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if strings do not match","suites":["spy",".threw"],"updatePoint":{"line":1293,"column":45,"index":40192},"line":1293,"code":"    it(\"returns false if strings do not match\", function () {\n      assert.exception(this.spyWithStringError);\n      assert.isFalse(this.spyWithStringError.threw(\"not the error\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true when spy threw","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1305,"column":35,"index":40580},"line":1305,"code":"    it(\"returns true when spy threw\", function () {\n      var err = new Error();\n      var spy = createSpy(function () {\n        throw err;\n      });\n      assert.exception(spy);\n      assert(spy.alwaysThrew(err));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if spy did not throw","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1313,"column":42,"index":40810},"line":1313,"code":"    it(\"returns false if spy did not throw\", function () {\n      this.spy();\n      assert.isFalse(this.spy.alwaysThrew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if spy threw","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1317,"column":33,"index":40932},"line":1317,"code":"    it(\"returns true if spy threw\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert(this.spyWithTypeError.alwaysThrew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if string type matches","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1321,"column":43,"index":41098},"line":1321,"code":"    it(\"returns true if string type matches\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert(this.spyWithTypeError.alwaysThrew(\"TypeError\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if string did not match","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1325,"column":45,"index":41277},"line":1325,"code":"    it(\"returns false if string did not match\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert.isFalse(this.spyWithTypeError.alwaysThrew(\"Error\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if spy did not throw specified error","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1329,"column":58,"index":41473},"line":1329,"code":"    it(\"returns false if spy did not throw specified error\", function () {\n      this.spy();\n      assert.isFalse(this.spy.alwaysThrew(\"Error\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if some calls did not throw","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1333,"column":49,"index":41618},"line":1333,"code":"    it(\"returns false if some calls did not throw\", function () {\n      var callCount = 0;\n      this.spy = createSpy(function () {\n        callCount += 1;\n\n        if (callCount === 1) {\n          throw new Error(\"throwing on first call\");\n        }\n      });\n      assert.exception(this.spy);\n      this.spy();\n      assert.isFalse(this.spy.alwaysThrew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if all calls threw","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1346,"column":39,"index":41975},"line":1346,"code":"    it(\"returns true if all calls threw\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert.exception(this.spyWithTypeError);\n      assert(this.spyWithTypeError.alwaysThrew());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if all calls threw same type","suites":["spy",".alwaysThrew"],"updatePoint":{"line":1351,"column":49,"index":42194},"line":1351,"code":"    it(\"returns true if all calls threw same type\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert.exception(this.spyWithTypeError);\n      assert(this.spyWithTypeError.alwaysThrew(\"TypeError\"));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains exception thrown by function","suites":["spy",".exceptions"],"updatePoint":{"line":1365,"column":45,"index":42653},"line":1365,"code":"    it(\"contains exception thrown by function\", function () {\n      assert.exception(this.spyWithTypeError);\n      assert.equals(this.spyWithTypeError.exceptions, [this.error]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains undefined entry when function did not throw","suites":["spy",".exceptions"],"updatePoint":{"line":1369,"column":60,"index":42854},"line":1369,"code":"    it(\"contains undefined entry when function did not throw\", function () {\n      this.spy();\n      assert.equals(this.spy.exceptions.length, 1);\n      assert.isUndefined(this.spy.exceptions[0]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"stacks up exceptions and undefined","suites":["spy",".exceptions"],"updatePoint":{"line":1374,"column":42,"index":43041},"line":1374,"code":"    it(\"stacks up exceptions and undefined\", function () {\n      var calls = 0;\n      var err = this.error;\n      var spy = createSpy(function () {\n        calls += 1;\n\n        if (calls % 2 === 0) {\n          throw err;\n        }\n      });\n      spy();\n      assert.exception(spy);\n      spy();\n      assert.exception(spy);\n      spy();\n      assert.equals(spy.exceptions.length, 5);\n      assert.isUndefined(spy.exceptions[0]);\n      assert.equals(spy.exceptions[1], err);\n      assert.isUndefined(spy.exceptions[2]);\n      assert.equals(spy.exceptions[3], err);\n      assert.isUndefined(spy.exceptions[4]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true when no argument","suites":["spy",".returned"],"updatePoint":{"line":1398,"column":37,"index":43698},"line":1398,"code":"    it(\"returns true when no argument\", function () {\n      var spy = createSpy();\n      spy();\n      assert(spy.returned());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true for undefined when no explicit return","suites":["spy",".returned"],"updatePoint":{"line":1403,"column":58,"index":43853},"line":1403,"code":"    it(\"returns true for undefined when no explicit return\", function () {\n      var spy = createSpy();\n      spy();\n      assert(spy.returned(undefined));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true when returned value once","suites":["spy",".returned"],"updatePoint":{"line":1408,"column":45,"index":44004},"line":1408,"code":"    it(\"returns true when returned value once\", function () {\n      var values = [{}, 2, \"hey\", function () {\n        return;\n      }];\n      var spy = createSpy(function () {\n        return values[spy.callCount];\n      });\n      spy();\n      spy();\n      spy();\n      spy();\n      assert(spy.returned(values[3]));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false when value is never returned","suites":["spy",".returned"],"updatePoint":{"line":1421,"column":50,"index":44332},"line":1421,"code":"    it(\"returns false when value is never returned\", function () {\n      var values = [{}, 2, \"hey\", function () {\n        return;\n      }];\n      var spy = createSpy(function () {\n        return values[spy.callCount];\n      });\n      spy();\n      spy();\n      spy();\n      spy();\n      assert.isFalse(spy.returned({\n        id: 42\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true when value is returned several times","suites":["spy",".returned"],"updatePoint":{"line":1436,"column":57,"index":44690},"line":1436,"code":"    it(\"returns true when value is returned several times\", function () {\n      var object = {\n        id: 42\n      };\n      var spy = createSpy(function () {\n        return object;\n      });\n      spy();\n      spy();\n      spy();\n      assert(spy.returned(object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"compares values deeply","suites":["spy",".returned"],"updatePoint":{"line":1448,"column":30,"index":44938},"line":1448,"code":"    it(\"compares values deeply\", function () {\n      var object = {\n        deep: {\n          id: 42\n        }\n      };\n      var spy = createSpy(function () {\n        return object;\n      });\n      spy();\n      assert(spy.returned({\n        deep: {\n          id: 42\n        }\n      }));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"compares values strictly using match.same","suites":["spy",".returned"],"updatePoint":{"line":1464,"column":49,"index":45253},"line":1464,"code":"    it(\"compares values strictly using match.same\", function () {\n      var object = {\n        id: 42\n      };\n      var spy = createSpy(function () {\n        return object;\n      });\n      spy();\n      assert.isFalse(spy.returned(match.same({\n        id: 42\n      })));\n      assert(spy.returned(match.same(object)));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains undefined when function does not return explicitly","suites":["spy",".returnValues"],"updatePoint":{"line":1479,"column":67,"index":45646},"line":1479,"code":"    it(\"contains undefined when function does not return explicitly\", function () {\n      var spy = createSpy();\n      spy();\n      assert.equals(spy.returnValues.length, 1);\n      assert.isUndefined(spy.returnValues[0]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains return value","suites":["spy",".returnValues"],"updatePoint":{"line":1485,"column":29,"index":45838},"line":1485,"code":"    it(\"contains return value\", function () {\n      var object = {\n        id: 42\n      };\n      var spy = createSpy(function () {\n        return object;\n      });\n      spy();\n      assert.equals(spy.returnValues, [object]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains undefined when function throws","suites":["spy",".returnValues"],"updatePoint":{"line":1495,"column":47,"index":46090},"line":1495,"code":"    it(\"contains undefined when function throws\", function () {\n      var spy = createSpy(function () {\n        throw new Error();\n      });\n      assert.exception(spy);\n      assert.equals(spy.returnValues.length, 1);\n      assert.isUndefined(spy.returnValues[0]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains the created object for spied constructors","suites":["spy",".returnValues"],"updatePoint":{"line":1503,"column":58,"index":46375},"line":1503,"code":"    it(\"contains the created object for spied constructors\", function () {\n      var Spy = createSpy(function () {\n        return;\n      });\n      var result = new Spy();\n      assert.equals(Spy.returnValues[0], result);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains the return value for spied constructors that explicitly return objects","suites":["spy",".returnValues"],"updatePoint":{"line":1510,"column":87,"index":46633},"line":1510,"code":"    it(\"contains the return value for spied constructors that explicitly return objects\", function () {\n      var Spy = createSpy(function () {\n        return {\n          isExplicitlyCreatedValue: true\n        };\n      });\n      var result = new Spy();\n      assert.isTrue(result.isExplicitlyCreatedValue);\n      assert.equals(Spy.returnValues[0], result);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"contains the created object for spied constructors that explicitly return primitive values","suites":["spy",".returnValues"],"updatePoint":{"line":1520,"column":98,"index":47009},"line":1520,"code":"    it(\"contains the created object for spied constructors that explicitly return primitive values\", function () {\n      var Spy = createSpy(function () {\n        return 10;\n      });\n      var result = new Spy();\n      refute.equals(result, 10);\n      assert.equals(Spy.returnValues[0], result);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"stacks up return values","suites":["spy",".returnValues"],"updatePoint":{"line":1528,"column":31,"index":47247},"line":1528,"code":"    it(\"stacks up return values\", function () {\n      var calls = 0;\n      /*eslint consistent-return: \"off\"*/\n\n      var spy = createSpy(function () {\n        calls += 1;\n\n        if (calls % 2 === 0) {\n          return calls;\n        }\n      });\n      spy();\n      spy();\n      spy();\n      spy();\n      spy();\n      assert.equals(spy.returnValues.length, 5);\n      assert.isUndefined(spy.returnValues[0]);\n      assert.equals(spy.returnValues[1], 2);\n      assert.isUndefined(spy.returnValues[2]);\n      assert.equals(spy.returnValues[3], 4);\n      assert.isUndefined(spy.returnValues[4]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".calledBefore"],"updatePoint":{"line":1557,"column":19,"index":47983},"line":1557,"code":"    it(\"is function\", function () {\n      assert.isFunction(this.spyA.calledBefore);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if first call to A was before first to B","suites":["spy",".calledBefore"],"updatePoint":{"line":1560,"column":61,"index":48118},"line":1560,"code":"    it(\"returns true if first call to A was before first to B\", function () {\n      this.spyA();\n      this.spyB();\n      assert(this.spyA.calledBefore(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"compares call order of calls directly","suites":["spy",".calledBefore"],"updatePoint":{"line":1565,"column":45,"index":48275},"line":1565,"code":"    it(\"compares call order of calls directly\", function () {\n      this.spyA();\n      this.spyB();\n      assert(this.spyA.getCall(0).calledBefore(this.spyB.getCall(0)));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called","suites":["spy",".calledBefore"],"updatePoint":{"line":1570,"column":35,"index":48444},"line":1570,"code":"    it(\"returns false if not called\", function () {\n      this.spyB();\n      assert.isFalse(this.spyA.calledBefore(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if other not called","suites":["spy",".calledBefore"],"updatePoint":{"line":1574,"column":40,"index":48585},"line":1574,"code":"    it(\"returns true if other not called\", function () {\n      this.spyA();\n      assert(this.spyA.calledBefore(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if other called first","suites":["spy",".calledBefore"],"updatePoint":{"line":1578,"column":43,"index":48721},"line":1578,"code":"    it(\"returns false if other called first\", function () {\n      this.spyB();\n      this.spyA();\n      this.spyB();\n      assert(this.spyA.calledBefore(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".calledAfter"],"updatePoint":{"line":1590,"column":19,"index":49017},"line":1590,"code":"    it(\"is function\", function () {\n      assert.isFunction(this.spyA.calledAfter);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if first call to A was after first to B","suites":["spy",".calledAfter"],"updatePoint":{"line":1593,"column":60,"index":49150},"line":1593,"code":"    it(\"returns true if first call to A was after first to B\", function () {\n      this.spyB();\n      this.spyA();\n      assert(this.spyA.calledAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"compares calls directly","suites":["spy",".calledAfter"],"updatePoint":{"line":1598,"column":31,"index":49292},"line":1598,"code":"    it(\"compares calls directly\", function () {\n      this.spyB();\n      this.spyA();\n      assert(this.spyA.getCall(0).calledAfter(this.spyB.getCall(0)));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called","suites":["spy",".calledAfter"],"updatePoint":{"line":1603,"column":35,"index":49460},"line":1603,"code":"    it(\"returns false if not called\", function () {\n      this.spyB();\n      assert.isFalse(this.spyA.calledAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if other not called","suites":["spy",".calledAfter"],"updatePoint":{"line":1607,"column":41,"index":49601},"line":1607,"code":"    it(\"returns false if other not called\", function () {\n      this.spyA();\n      assert.isFalse(this.spyA.calledAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if called anytime after other","suites":["spy",".calledAfter"],"updatePoint":{"line":1611,"column":50,"index":49751},"line":1611,"code":"    it(\"returns true if called anytime after other\", function () {\n      this.spyB();\n      this.spyA();\n      this.spyB();\n      assert.isTrue(this.spyA.calledAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".calledImmediatelyAfter"],"updatePoint":{"line":1624,"column":19,"index":50095},"line":1624,"code":"    it(\"is function\", function () {\n      assert.isFunction(this.spyA.calledImmediatelyAfter);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if first call to A was immediately after first to B","suites":["spy",".calledImmediatelyAfter"],"updatePoint":{"line":1627,"column":72,"index":50251},"line":1627,"code":"    it(\"returns true if first call to A was immediately after first to B\", function () {\n      this.spyB();\n      this.spyA();\n      assert(this.spyA.calledImmediatelyAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"compares calls directly","suites":["spy",".calledImmediatelyAfter"],"updatePoint":{"line":1632,"column":31,"index":50404},"line":1632,"code":"    it(\"compares calls directly\", function () {\n      this.spyB();\n      this.spyA();\n      assert(this.spyA.getCall(0).calledImmediatelyAfter(this.spyB.getCall(0)));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called","suites":["spy",".calledImmediatelyAfter"],"updatePoint":{"line":1637,"column":35,"index":50583},"line":1637,"code":"    it(\"returns false if not called\", function () {\n      this.spyB();\n      assert.isFalse(this.spyA.calledImmediatelyAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if other not called","suites":["spy",".calledImmediatelyAfter"],"updatePoint":{"line":1641,"column":41,"index":50735},"line":1641,"code":"    it(\"returns false if other not called\", function () {\n      this.spyA();\n      assert.isFalse(this.spyA.calledImmediatelyAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if other called last","suites":["spy",".calledImmediatelyAfter"],"updatePoint":{"line":1645,"column":42,"index":50888},"line":1645,"code":"    it(\"returns false if other called last\", function () {\n      this.spyB();\n      this.spyA();\n      this.spyB();\n      assert.isFalse(this.spyA.calledImmediatelyAfter(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if another spy called between","suites":["spy",".calledImmediatelyAfter"],"updatePoint":{"line":1651,"column":51,"index":51088},"line":1651,"code":"    it(\"returns false if another spy called between\", function () {\n      this.spyA();\n      this.spyC();\n      this.spyB();\n      assert.isFalse(this.spyB.calledImmediatelyAfter(this.spyA));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".calledImmediatelyBefore"],"updatePoint":{"line":1664,"column":19,"index":51445},"line":1664,"code":"    it(\"is function\", function () {\n      assert.isFunction(this.spyA.calledImmediatelyBefore);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns true if first call to A was immediately after first to B","suites":["spy",".calledImmediatelyBefore"],"updatePoint":{"line":1667,"column":72,"index":51602},"line":1667,"code":"    it(\"returns true if first call to A was immediately after first to B\", function () {\n      this.spyB();\n      this.spyA();\n      assert(this.spyB.calledImmediatelyBefore(this.spyA));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"compares calls directly","suites":["spy",".calledImmediatelyBefore"],"updatePoint":{"line":1672,"column":31,"index":51756},"line":1672,"code":"    it(\"compares calls directly\", function () {\n      this.spyB();\n      this.spyA();\n      assert(this.spyB.getCall(0).calledImmediatelyBefore(this.spyA.getCall(0)));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if not called","suites":["spy",".calledImmediatelyBefore"],"updatePoint":{"line":1677,"column":35,"index":51936},"line":1677,"code":"    it(\"returns false if not called\", function () {\n      this.spyB();\n      assert.isFalse(this.spyA.calledImmediatelyBefore(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if other not called","suites":["spy",".calledImmediatelyBefore"],"updatePoint":{"line":1681,"column":41,"index":52089},"line":1681,"code":"    it(\"returns false if other not called\", function () {\n      this.spyA();\n      assert.isFalse(this.spyA.calledImmediatelyBefore(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if other called last","suites":["spy",".calledImmediatelyBefore"],"updatePoint":{"line":1685,"column":42,"index":52243},"line":1685,"code":"    it(\"returns false if other called last\", function () {\n      this.spyB();\n      this.spyA();\n      this.spyB();\n      assert.isFalse(this.spyB.calledImmediatelyBefore(this.spyA));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns false if another spy called between","suites":["spy",".calledImmediatelyBefore"],"updatePoint":{"line":1691,"column":51,"index":52444},"line":1691,"code":"    it(\"returns false if another spy called between\", function () {\n      this.spyA();\n      this.spyC();\n      this.spyB();\n      assert.isFalse(this.spyA.calledImmediatelyBefore(this.spyB));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is undefined by default","suites":["spy",".firstCall"],"updatePoint":{"line":1699,"column":31,"index":52670},"line":1699,"code":"    it(\"is undefined by default\", function () {\n      var spy = createSpy();\n      assert.isNull(spy.firstCall);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is equal to getCall(0) result after first call","suites":["spy",".firstCall"],"updatePoint":{"line":1703,"column":54,"index":52814},"line":1703,"code":"    it(\"is equal to getCall(0) result after first call\", function () {\n      var spy = createSpy();\n      spy();\n      var call0 = spy.getCall(0);\n      assert.equals(spy.firstCall.callId, call0.callId);\n      assert.same(spy.firstCall.spy, call0.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is equal to getCall(0) after first call when control flow has continued after invocation","suites":["spy",".firstCall"],"updatePoint":{"line":1710,"column":96,"index":53117},"line":1710,"code":"    it(\"is equal to getCall(0) after first call when control flow has continued after invocation\", function () {\n      var spy;\n\n      function runAsserts() {\n        var call0 = spy.getCall(0);\n        assert.equals(spy.firstCall.callId, call0.callId);\n        assert.same(spy.firstCall.spy, call0.spy);\n      }\n\n      spy = createSpy(runAsserts);\n      spy();\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is tracked even if exceptions are thrown","suites":["spy",".firstCall"],"updatePoint":{"line":1722,"column":48,"index":53439},"line":1722,"code":"    it(\"is tracked even if exceptions are thrown\", function () {\n      var spy = createSpy(function () {\n        throw new Error(\"an exception\");\n      });\n      assert.exception(spy);\n      refute.isNull(spy.firstCall);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"has correct returnValue","suites":["spy",".firstCall"],"updatePoint":{"line":1729,"column":31,"index":53651},"line":1729,"code":"    it(\"has correct returnValue\", function () {\n      var spy = createSpy(function () {\n        return 42;\n      });\n      spy();\n      assert.equals(spy.firstCall.returnValue, 42);\n      assert(spy.firstCall.returned(42));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"has correct exception","suites":["spy",".firstCall"],"updatePoint":{"line":1737,"column":29,"index":53881},"line":1737,"code":"    it(\"has correct exception\", function () {\n      var err = new Error();\n      var spy = createSpy(function () {\n        throw err;\n      });\n      assert.exception(spy);\n      assert.same(spy.firstCall.exception, err);\n      assert(spy.firstCall.threw(err));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is null by default","suites":["spy",".secondCall"],"updatePoint":{"line":1748,"column":26,"index":54194},"line":1748,"code":"    it(\"is null by default\", function () {\n      var spy = createSpy();\n      assert.isNull(spy.secondCall);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"stills be null after first call","suites":["spy",".secondCall"],"updatePoint":{"line":1752,"column":39,"index":54324},"line":1752,"code":"    it(\"stills be null after first call\", function () {\n      var spy = createSpy();\n      spy();\n      assert.isNull(spy.secondCall);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is equal to getCall(1) result after second call","suites":["spy",".secondCall"],"updatePoint":{"line":1757,"column":55,"index":54483},"line":1757,"code":"    it(\"is equal to getCall(1) result after second call\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      var call1 = spy.getCall(1);\n      assert.equals(spy.secondCall.callId, call1.callId);\n      assert.same(spy.secondCall.spy, call1.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is undefined by default","suites":["spy",".thirdCall"],"updatePoint":{"line":1767,"column":31,"index":54781},"line":1767,"code":"    it(\"is undefined by default\", function () {\n      var spy = createSpy();\n      assert.isNull(spy.thirdCall);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"stills be undefined after second call","suites":["spy",".thirdCall"],"updatePoint":{"line":1771,"column":45,"index":54916},"line":1771,"code":"    it(\"stills be undefined after second call\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      assert.isNull(spy.thirdCall);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is equal to getCall(1) result after second call","suites":["spy",".thirdCall"],"updatePoint":{"line":1777,"column":55,"index":55087},"line":1777,"code":"    it(\"is equal to getCall(1) result after second call\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      spy();\n      var call2 = spy.getCall(2);\n      assert.equals(spy.thirdCall.callId, call2.callId);\n      assert.same(spy.thirdCall.spy, call2.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is null for indexes >= length","suites":["spy",".getCall"],"updatePoint":{"line":1788,"column":37,"index":55400},"line":1788,"code":"    it(\"is null for indexes >= length\", function () {\n      var spy = createSpy();\n      spy();\n      assert.isNull(spy.getCall(1));\n      assert.isNull(spy.getCall(2));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is null for indexes < -length","suites":["spy",".getCall"],"updatePoint":{"line":1794,"column":37,"index":55578},"line":1794,"code":"    it(\"is null for indexes < -length\", function () {\n      var spy = createSpy();\n      spy();\n      assert.isNull(spy.getCall(-2));\n      assert.isNull(spy.getCall(-3));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is same as last call when passed index -1","suites":["spy",".getCall"],"updatePoint":{"line":1800,"column":49,"index":55770},"line":1800,"code":"    it(\"is same as last call when passed index -1\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      spy();\n      assert.same(spy.getCall(-1).callId, spy.lastCall.callId);\n      assert.same(spy.getCall(-1).spy, spy.lastCall.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is same as n-1th call when passed index -2","suites":["spy",".getCall"],"updatePoint":{"line":1808,"column":50,"index":56035},"line":1808,"code":"    it(\"is same as n-1th call when passed index -2\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      spy();\n      assert.same(spy.getCall(-2).callId, spy.getCall(1).callId);\n      assert.same(spy.getCall(-2).spy, spy.getCall(1).spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is undefined by default","suites":["spy",".lastCall"],"updatePoint":{"line":1818,"column":31,"index":56329},"line":1818,"code":"    it(\"is undefined by default\", function () {\n      var spy = createSpy();\n      assert.isNull(spy.lastCall);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is same as firstCall after first call","suites":["spy",".lastCall"],"updatePoint":{"line":1822,"column":45,"index":56463},"line":1822,"code":"    it(\"is same as firstCall after first call\", function () {\n      var spy = createSpy();\n      spy();\n      assert.same(spy.lastCall.callId, spy.firstCall.callId);\n      assert.same(spy.lastCall.spy, spy.firstCall.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is same as secondCall after second call","suites":["spy",".lastCall"],"updatePoint":{"line":1828,"column":47,"index":56695},"line":1828,"code":"    it(\"is same as secondCall after second call\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      assert.same(spy.lastCall.callId, spy.secondCall.callId);\n      assert.same(spy.lastCall.spy, spy.secondCall.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is same as thirdCall after third call","suites":["spy",".lastCall"],"updatePoint":{"line":1835,"column":45,"index":56940},"line":1835,"code":"    it(\"is same as thirdCall after third call\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      spy();\n      assert.same(spy.lastCall.callId, spy.thirdCall.callId);\n      assert.same(spy.lastCall.spy, spy.thirdCall.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is equal to getCall(3) result after fourth call","suites":["spy",".lastCall"],"updatePoint":{"line":1843,"column":55,"index":57206},"line":1843,"code":"    it(\"is equal to getCall(3) result after fourth call\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      spy();\n      spy();\n      var call3 = spy.getCall(3);\n      assert.equals(spy.lastCall.callId, call3.callId);\n      assert.same(spy.lastCall.spy, call3.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is equal to getCall(4) result after fifth call","suites":["spy",".lastCall"],"updatePoint":{"line":1853,"column":54,"index":57504},"line":1853,"code":"    it(\"is equal to getCall(4) result after fifth call\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      spy();\n      spy();\n      spy();\n      var call4 = spy.getCall(4);\n      assert.equals(spy.lastCall.callId, call4.callId);\n      assert.same(spy.lastCall.spy, call4.spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns an empty Array by default","suites":["spy",".getCalls"],"updatePoint":{"line":1866,"column":41,"index":57846},"line":1866,"code":"    it(\"returns an empty Array by default\", function () {\n      var spy = createSpy();\n      assert.isArray(spy.getCalls());\n      assert.equals(spy.getCalls().length, 0);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is analogous to using getCall(n)","suites":["spy",".getCalls"],"updatePoint":{"line":1871,"column":40,"index":58025},"line":1871,"code":"    it(\"is analogous to using getCall(n)\", function () {\n      var spy = createSpy();\n      spy();\n      spy();\n      assert.equals(spy.getCalls(), [spy.getCall(0), spy.getCall(1)]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".callArg"],"updatePoint":{"line":1879,"column":19,"index":58238},"line":1879,"code":"    it(\"is function\", function () {\n      var spy = createSpy();\n      assert.isFunction(spy.callArg);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"invokes argument at index for all calls","suites":["spy",".callArg"],"updatePoint":{"line":1883,"column":47,"index":58377},"line":1883,"code":"    it(\"invokes argument at index for all calls\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      spy.callArg(2);\n      assert(callback.calledTwice);\n      assert(callback.alwaysCalledWith());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if argument at index is not a function","suites":["spy",".callArg"],"updatePoint":{"line":1892,"column":53,"index":58673},"line":1892,"code":"    it(\"throws if argument at index is not a function\", function () {\n      var spy = createSpy();\n      spy();\n      assert.exception(function () {\n        spy.callArg(1);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if spy was not yet invoked","suites":["spy",".callArg"],"updatePoint":{"line":1901,"column":41,"index":58889},"line":1901,"code":"    it(\"throws if spy was not yet invoked\", function () {\n      var spy = createSpy();\n      assert.exception(function () {\n        spy.callArg(0);\n      }, {\n        message: \"spy cannot call arg since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"includes spy name in error message","suites":["spy",".callArg"],"updatePoint":{"line":1909,"column":42,"index":59136},"line":1909,"code":"    it(\"includes spy name in error message\", function () {\n      var api = {\n        someMethod: function () {\n          return;\n        }\n      };\n      var spy = createSpy(api, \"someMethod\");\n      assert.exception(function () {\n        spy.callArg(0);\n      }, {\n        message: \"someMethod cannot call arg since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not a number","suites":["spy",".callArg"],"updatePoint":{"line":1922,"column":39,"index":59493},"line":1922,"code":"    it(\"throws if index is not a number\", function () {\n      var spy = createSpy();\n      spy();\n      assert.exception(function () {\n        spy.callArg(\"\");\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"passs additional arguments","suites":["spy",".callArg"],"updatePoint":{"line":1931,"column":34,"index":59703},"line":1931,"code":"    it(\"passs additional arguments\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var array = [];\n      var object = {};\n      spy(callback);\n      spy.callArg(0, \"abc\", 123, array, object);\n      assert(callback.calledWith(\"abc\", 123, array, object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return values for all calls","suites":["spy",".callArg"],"updatePoint":{"line":1940,"column":53,"index":60021},"line":1940,"code":"    it(\"returns callbacks return values for all calls\", function () {\n      var spy = createSpy();\n      var i = 0;\n      var callback = createSpy(function () {\n        i++;\n        return `useful value ${i}`;\n      });\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      var returnValues = spy.callArg(2);\n      assert.equals(returnValues, [\"useful value 1\", \"useful value 2\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".callArgOn"],"updatePoint":{"line":1954,"column":19,"index":60428},"line":1954,"code":"    it(\"is function\", function () {\n      var spy = createSpy();\n      assert.isFunction(spy.callArgOn);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"invokes argument at index for all calls","suites":["spy",".callArgOn"],"updatePoint":{"line":1958,"column":47,"index":60569},"line":1958,"code":"    it(\"invokes argument at index for all calls\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      spy.callArgOn(2, thisObj);\n      assert(callback.calledTwice);\n      assert(callback.alwaysCalledWith());\n      assert(callback.alwaysCalledOn(thisObj));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if argument at index is not a function","suites":["spy",".callArgOn"],"updatePoint":{"line":1972,"column":53,"index":61004},"line":1972,"code":"    it(\"throws if argument at index is not a function\", function () {\n      var spy = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy();\n      assert.exception(function () {\n        spy.callArgOn(1, thisObj);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if spy was not yet invoked","suites":["spy",".callArgOn"],"updatePoint":{"line":1985,"column":41,"index":61311},"line":1985,"code":"    it(\"throws if spy was not yet invoked\", function () {\n      var spy = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        spy.callArgOn(0, thisObj);\n      }, {\n        message: \"spy cannot call arg since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"includes spy name in error message","suites":["spy",".callArgOn"],"updatePoint":{"line":1997,"column":42,"index":61649},"line":1997,"code":"    it(\"includes spy name in error message\", function () {\n      var api = {\n        someMethod: function () {\n          return;\n        }\n      };\n      var spy = createSpy(api, \"someMethod\");\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        spy.callArgOn(0, thisObj);\n      }, {\n        message: \"someMethod cannot call arg since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not a number","suites":["spy",".callArgOn"],"updatePoint":{"line":2014,"column":39,"index":62097},"line":2014,"code":"    it(\"throws if index is not a number\", function () {\n      var spy = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy();\n      assert.exception(function () {\n        spy.callArg(\"\", thisObj);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"pass additional arguments","suites":["spy",".callArgOn"],"updatePoint":{"line":2027,"column":33,"index":62395},"line":2027,"code":"    it(\"pass additional arguments\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var array = [];\n      var object = {};\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(callback);\n      spy.callArgOn(0, thisObj, \"abc\", 123, array, object);\n      assert(callback.calledWith(\"abc\", 123, array, object));\n      assert(callback.calledOn(thisObj));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return values for all calls","suites":["spy",".callArgOn"],"updatePoint":{"line":2041,"column":53,"index":62846},"line":2041,"code":"    it(\"returns callbacks return values for all calls\", function () {\n      var spy = createSpy();\n      var i = 0;\n      var callback = createSpy(function () {\n        i++;\n        return `useful value ${i}`;\n      });\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      var returnValues = spy.callArgOn(2, thisObj);\n      assert.equals(returnValues, [\"useful value 1\", \"useful value 2\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is alias for callArg","suites":["spy",".callArgWith"],"updatePoint":{"line":2059,"column":28,"index":63355},"line":2059,"code":"    it(\"is alias for callArg\", function () {\n      var spy = createSpy();\n      assert.same(spy.callArgWith, spy.callArg);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is alias for callArgOn","suites":["spy",".callArgOnWith"],"updatePoint":{"line":2065,"column":30,"index":63537},"line":2065,"code":"    it(\"is alias for callArgOn\", function () {\n      var spy = createSpy();\n      assert.same(spy.callArgOnWith, spy.callArgOn);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".yield"],"updatePoint":{"line":2071,"column":19,"index":63704},"line":2071,"code":"    it(\"is function\", function () {\n      var spy = createSpy();\n      assert.isFunction(spy.yield);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"invokes first function arg for all calls","suites":["spy",".yield"],"updatePoint":{"line":2075,"column":48,"index":63842},"line":2075,"code":"    it(\"invokes first function arg for all calls\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      spy.yield();\n      assert(callback.calledTwice);\n      assert(callback.alwaysCalledWith());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if spy was not yet invoked","suites":["spy",".yield"],"updatePoint":{"line":2084,"column":41,"index":64123},"line":2084,"code":"    it(\"throws if spy was not yet invoked\", function () {\n      var spy = createSpy();\n      assert.exception(function () {\n        spy.yield();\n      }, {\n        message: \"spy cannot yield since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"includes spy name in error message","suites":["spy",".yield"],"updatePoint":{"line":2092,"column":42,"index":64364},"line":2092,"code":"    it(\"includes spy name in error message\", function () {\n      var api = {\n        someMethod: function () {\n          return;\n        }\n      };\n      var spy = createSpy(api, \"someMethod\");\n      assert.exception(function () {\n        spy.yield();\n      }, {\n        message: \"someMethod cannot yield since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"passs additional arguments","suites":["spy",".yield"],"updatePoint":{"line":2105,"column":34,"index":64710},"line":2105,"code":"    it(\"passs additional arguments\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var array = [];\n      var object = {};\n      spy(callback);\n      spy.yield(\"abc\", 123, array, object);\n      assert(callback.calledWith(\"abc\", 123, array, object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return values for all calls","suites":["spy",".yield"],"updatePoint":{"line":2114,"column":53,"index":65023},"line":2114,"code":"    it(\"returns callbacks return values for all calls\", function () {\n      var spy = createSpy();\n      var i = 0;\n      var callback = createSpy(function () {\n        i++;\n        return `useful value ${i}`;\n      });\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      var returnValues = spy.yield();\n      assert.equals(returnValues, [\"useful value 1\", \"useful value 2\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is alias for yield","suites":["spy",".invokeCallback"],"updatePoint":{"line":2128,"column":26,"index":65439},"line":2128,"code":"    it(\"is alias for yield\", function () {\n      var spy = createSpy();\n      assert.same(spy.invokeCallback, spy.yield);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".yieldOn"],"updatePoint":{"line":2134,"column":19,"index":65605},"line":2134,"code":"    it(\"is function\", function () {\n      var spy = createSpy();\n      assert.isFunction(spy.yieldOn);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"invokes first function arg for all calls","suites":["spy",".yieldOn"],"updatePoint":{"line":2138,"column":48,"index":65745},"line":2138,"code":"    it(\"invokes first function arg for all calls\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      spy.yieldOn(thisObj);\n      assert(callback.calledTwice);\n      assert(callback.alwaysCalledWith());\n      assert(callback.alwaysCalledOn(thisObj));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if spy was not yet invoked","suites":["spy",".yieldOn"],"updatePoint":{"line":2152,"column":41,"index":66163},"line":2152,"code":"    it(\"throws if spy was not yet invoked\", function () {\n      var spy = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        spy.yieldOn(thisObj);\n      }, {\n        message: \"spy cannot yield since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"includes spy name in error message","suites":["spy",".yieldOn"],"updatePoint":{"line":2164,"column":42,"index":66493},"line":2164,"code":"    it(\"includes spy name in error message\", function () {\n      var api = {\n        someMethod: function () {\n          return;\n        }\n      };\n      var spy = createSpy(api, \"someMethod\");\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        spy.yieldOn(thisObj);\n      }, {\n        message: \"someMethod cannot yield since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"pass additional arguments","suites":["spy",".yieldOn"],"updatePoint":{"line":2181,"column":33,"index":66927},"line":2181,"code":"    it(\"pass additional arguments\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var array = [];\n      var object = {};\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(callback);\n      spy.yieldOn(thisObj, \"abc\", 123, array, object);\n      assert(callback.calledWith(\"abc\", 123, array, object));\n      assert(callback.calledOn(thisObj));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return values for all calls","suites":["spy",".yieldOn"],"updatePoint":{"line":2195,"column":53,"index":67373},"line":2195,"code":"    it(\"returns callbacks return values for all calls\", function () {\n      var spy = createSpy();\n      var i = 0;\n      var callback = createSpy(function () {\n        i++;\n        return `useful value ${i}`;\n      });\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(1, 2, callback);\n      spy(3, 4, callback);\n      var returnValues = spy.yieldOn(thisObj);\n      assert.equals(returnValues, [\"useful value 1\", \"useful value 2\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".yieldTo"],"updatePoint":{"line":2213,"column":19,"index":67864},"line":2213,"code":"    it(\"is function\", function () {\n      var spy = createSpy();\n      assert.isFunction(spy.yieldTo);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"invokes first function arg for all calls","suites":["spy",".yieldTo"],"updatePoint":{"line":2217,"column":48,"index":68004},"line":2217,"code":"    it(\"invokes first function arg for all calls\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      spy(1, 2, {\n        success: callback\n      });\n      spy(3, 4, {\n        success: callback\n      });\n      spy.yieldTo(\"success\");\n      assert(callback.calledTwice);\n      assert(callback.alwaysCalledWith());\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if spy was not yet invoked","suites":["spy",".yieldTo"],"updatePoint":{"line":2230,"column":41,"index":68350},"line":2230,"code":"    it(\"throws if spy was not yet invoked\", function () {\n      var spy = createSpy();\n      assert.exception(function () {\n        spy.yieldTo(\"success\");\n      }, {\n        message: \"spy cannot yield to 'success' since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"includes spy name in error message","suites":["spy",".yieldTo"],"updatePoint":{"line":2238,"column":42,"index":68615},"line":2238,"code":"    it(\"includes spy name in error message\", function () {\n      var api = {\n        someMethod: function () {\n          return;\n        }\n      };\n      var spy = createSpy(api, \"someMethod\");\n      assert.exception(function () {\n        spy.yieldTo(\"success\");\n      }, {\n        message: \"someMethod cannot yield to 'success' since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws readable message for symbol when spy was not yet invoked","suites":["spy",".yieldTo"],"updatePoint":{"line":2251,"column":71,"index":69022},"line":2251,"code":"    it(\"throws readable message for symbol when spy was not yet invoked\", function () {\n      if (typeof Symbol !== \"function\") {\n        this.skip();\n      }\n\n      var spy = createSpy();\n      assert.exception(function () {\n        spy.yieldTo(Symbol(\"apple pie\"));\n      }, {\n        message: \"spy cannot yield to 'Symbol(apple pie)' since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"pass additional arguments","suites":["spy",".yieldTo"],"updatePoint":{"line":2263,"column":33,"index":69370},"line":2263,"code":"    it(\"pass additional arguments\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var array = [];\n      var object = {};\n      spy({\n        test: callback\n      });\n      spy.yieldTo(\"test\", \"abc\", 123, array, object);\n      assert(callback.calledWith(\"abc\", 123, array, object));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return values for all calls","suites":["spy",".yieldTo"],"updatePoint":{"line":2274,"column":53,"index":69717},"line":2274,"code":"    it(\"returns callbacks return values for all calls\", function () {\n      var spy = createSpy();\n      var i = 0;\n      var callback = createSpy(function () {\n        i++;\n        return `useful value ${i}`;\n      });\n      spy(1, 2, {\n        success: callback\n      });\n      spy(3, 4, {\n        success: callback\n      });\n      var returnValues = spy.yieldTo(\"success\");\n      assert.equals(returnValues, [\"useful value 1\", \"useful value 2\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".yieldToOn"],"updatePoint":{"line":2292,"column":19,"index":70186},"line":2292,"code":"    it(\"is function\", function () {\n      var spy = createSpy();\n      assert.isFunction(spy.yieldToOn);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"invokes first function arg for all calls","suites":["spy",".yieldToOn"],"updatePoint":{"line":2296,"column":48,"index":70328},"line":2296,"code":"    it(\"invokes first function arg for all calls\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(1, 2, {\n        success: callback\n      });\n      spy(3, 4, {\n        success: callback\n      });\n      spy.yieldToOn(\"success\", thisObj);\n      assert(callback.calledTwice);\n      assert(callback.alwaysCalledWith());\n      assert(callback.alwaysCalledOn(thisObj));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if spy was not yet invoked","suites":["spy",".yieldToOn"],"updatePoint":{"line":2314,"column":41,"index":70813},"line":2314,"code":"    it(\"throws if spy was not yet invoked\", function () {\n      var spy = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        spy.yieldToOn(\"success\", thisObj);\n      }, {\n        message: \"spy cannot yield to 'success' since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"includes spy name in error message","suites":["spy",".yieldToOn"],"updatePoint":{"line":2326,"column":42,"index":71169},"line":2326,"code":"    it(\"includes spy name in error message\", function () {\n      var api = {\n        someMethod: function () {\n          return;\n        }\n      };\n      var spy = createSpy(api, \"someMethod\");\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        spy.yieldToOn(\"success\", thisObj);\n      }, {\n        message: \"someMethod cannot yield to 'success' since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws readable message for symbol when spy was not yet invoked","suites":["spy",".yieldToOn"],"updatePoint":{"line":2343,"column":71,"index":71667},"line":2343,"code":"    it(\"throws readable message for symbol when spy was not yet invoked\", function () {\n      if (typeof Symbol !== \"function\") {\n        this.skip();\n      }\n\n      var spy = createSpy();\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      assert.exception(function () {\n        spy.yieldToOn(Symbol(\"apple pie\"), thisObj);\n      }, {\n        message: \"spy cannot yield to 'Symbol(apple pie)' since it was not yet invoked.\"\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"pass additional arguments","suites":["spy",".yieldToOn"],"updatePoint":{"line":2359,"column":33,"index":72106},"line":2359,"code":"    it(\"pass additional arguments\", function () {\n      var spy = createSpy();\n      var callback = createSpy();\n      var array = [];\n      var object = {};\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy({\n        test: callback\n      });\n      spy.yieldToOn(\"test\", thisObj, \"abc\", 123, array, object);\n      assert(callback.calledWith(\"abc\", 123, array, object));\n      assert(callback.calledOn(thisObj));\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns callbacks return values for all calls","suites":["spy",".yieldToOn"],"updatePoint":{"line":2375,"column":53,"index":72586},"line":2375,"code":"    it(\"returns callbacks return values for all calls\", function () {\n      var spy = createSpy();\n      var i = 0;\n      var callback = createSpy(function () {\n        i++;\n        return `useful value ${i}`;\n      });\n      var thisObj = {\n        name1: \"value1\",\n        name2: \"value2\"\n      };\n      spy(1, 2, {\n        success: callback\n      });\n      spy(3, 4, {\n        success: callback\n      });\n      var returnValues = spy.yieldToOn(\"success\", thisObj);\n      assert.equals(returnValues, [\"useful value 1\", \"useful value 2\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"should be a function","suites":["spy",".throwArg"],"updatePoint":{"line":2397,"column":28,"index":73154},"line":2397,"code":"    it(\"should be a function\", function () {\n      var spy = createSpy();\n      assert.isFunction(spy.throwArg);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"should throw if spy hasn't been called","suites":["spy",".throwArg"],"updatePoint":{"line":2401,"column":46,"index":73293},"line":2401,"code":"    it(\"should throw if spy hasn't been called\", function () {\n      var spy = createSpy();\n      assert.exception(function () {\n        spy.throwArg(0);\n      }, function (error) {\n        return error.message === \"spy cannot throw arg since it was not yet invoked.\";\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"should throw if there aren't enough arguments in the previous spy call","suites":["spy",".throwArg"],"updatePoint":{"line":2409,"column":78,"index":73612},"line":2409,"code":"    it(\"should throw if there aren't enough arguments in the previous spy call\", function () {\n      var spy = createSpy();\n      spy(\"only\", \"four\", \"arguments\", \"here\");\n      assert.exception(function () {\n        spy.throwArg(7);\n      }, function (error) {\n        return error.message === \"Not enough arguments: 7 required but only 4 present\";\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"should throw specified argument","suites":["spy",".throwArg"],"updatePoint":{"line":2418,"column":39,"index":73941},"line":2418,"code":"    it(\"should throw specified argument\", function () {\n      var spy = createSpy();\n      var expectedError = new TypeError(\"catpants\");\n      spy(true, false, null, expectedError, \"meh\");\n      assert.exception(function () {\n        spy.throwArg(3);\n      }, function (error) {\n        return error instanceof TypeError && error.message === expectedError.message;\n      });\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return same object","suites":["spy",".resetHistory"],"updatePoint":{"line":2430,"column":26,"index":74360},"line":2430,"code":"    it(\"return same object\", function () {\n      var spy = createSpy();\n      var reset = spy.resetHistory();\n      assert(reset === spy);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"throws if called during spy invocation","suites":["spy",".resetHistory"],"updatePoint":{"line":2435,"column":46,"index":74527},"line":2435,"code":"    it(\"throws if called during spy invocation\", function () {\n      var spy = createSpy(function () {\n        spy.resetHistory();\n      });\n      assert.exception(spy, \"InvalidResetException\");\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is zero by default","suites":["spy",".length"],"updatePoint":{"line":2443,"column":26,"index":74752},"line":2443,"code":"    it(\"is zero by default\", function () {\n      var spy = createSpy();\n      assert.equals(spy.length, 0);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"matches the function length","suites":["spy",".length"],"updatePoint":{"line":2447,"column":35,"index":74877},"line":2447,"code":"    it(\"matches the function length\", function () {\n      var api = {\n        // eslint-disable-next-line no-unused-vars\n        someMethod: function (a, b, c) {\n          return;\n        }\n      };\n      var spy = createSpy(api, \"someMethod\");\n      assert.equals(spy.length, 3);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["spy",".matchingFakes"],"updatePoint":{"line":2462,"column":19,"index":75266},"line":2462,"code":"    it(\"is function\", function () {\n      assert.isFunction(this.spy.matchingFakes);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns an empty array by default","suites":["spy",".matchingFakes"],"updatePoint":{"line":2465,"column":41,"index":75381},"line":2465,"code":"    it(\"returns an empty array by default\", function () {\n      assert.equals(this.spy.matchingFakes([]), []);\n      assert.equals(this.spy.matchingFakes([1]), []);\n      assert.equals(this.spy.matchingFakes([1, 1]), []);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"returns one matched fake","suites":["spy",".matchingFakes"],"updatePoint":{"line":2470,"column":32,"index":75602},"line":2470,"code":"    it(\"returns one matched fake\", function () {\n      this.spy.withArgs(1);\n      this.spy.withArgs(2);\n      assert.equals(this.spy.matchingFakes([1]), [this.spy.withArgs(1)]);\n      assert.equals(this.spy.matchingFakes([2]), [this.spy.withArgs(2)]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"return some matched fake","suites":["spy",".matchingFakes"],"updatePoint":{"line":2476,"column":32,"index":75863},"line":2476,"code":"    it(\"return some matched fake\", function () {\n      this.spy.withArgs(1);\n      this.spy.withArgs(1, 1);\n      this.spy.withArgs(2);\n      assert.equals(this.spy.matchingFakes([]), []);\n      assert.equals(this.spy.matchingFakes([1]), [this.spy.withArgs(1)]);\n      assert.equals(this.spy.matchingFakes([1, 1]), [this.spy.withArgs(1), this.spy.withArgs(1, 1)]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"should start with 'spy#'","suites":["spy",".id"],"updatePoint":{"line":2486,"column":32,"index":76274},"line":2486,"code":"    it(\"should start with 'spy#'\", function () {\n      for (var i = 0; i < 10; i++) {\n        assert.isTrue(createSpy().id.indexOf(\"spy#\") === 0);\n      }\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"create and call spy apis","suites":["spy","non enumerable properties"],"updatePoint":{"line":2493,"column":32,"index":76497},"line":2493,"code":"    it(\"create and call spy apis\", function () {\n      var spy = createSpy();\n      assert.equals(Object.keys(spy), []); // call spy and verify no enumerable properties are added\n\n      spy(15);\n      assert.equals(Object.keys(spy), []); // it should still work to add properties\n\n      spy.fooBar = 1;\n      assert.equals(Object.keys(spy), [\"fooBar\"]); // call some spy APIs and verify no enumerable properties are added\n\n      spy.withArgs(1);\n      spy.calledBefore(createSpy());\n      spy.calledAfter(createSpy());\n      spy.calledOn(undefined);\n      spy.calledWith(15);\n      spy.calledWithNew();\n      spy.threw();\n      spy.returned(\"ret\");\n      assert.equals(spy.thisValues.length, 1);\n      assert.equals(spy.exceptions.length, 1);\n      assert.equals(spy.returnValues.length, 1);\n      assert.equals(Object.keys(spy), [\"fooBar\"]); // verify that reset history doesn't change enumerable properties\n\n      spy.resetHistory();\n      assert.equals(Object.keys(spy), [\"fooBar\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"create spy from function","suites":["spy","non enumerable properties"],"updatePoint":{"line":2519,"column":32,"index":77492},"line":2519,"code":"    it(\"create spy from function\", function () {\n      var func = function () {\n        throw new Error(\"aError\");\n      };\n\n      func.aProp = 42;\n      var spy = createSpy(func);\n      assert.equals(spy.aProp, 42);\n      assert.equals(Object.keys(spy), Object.keys(func));\n      assert.equals(Object.keys(spy), [\"aProp\"]);\n      assert.exception(function () {\n        spy();\n      });\n      assert(spy.threw());\n      spy.resetHistory();\n      assert.equals(Object.keys(spy), [\"aProp\"]);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is delegated to proxy","suites":["spy",".printf"],"updatePoint":{"line":2538,"column":29,"index":78029},"line":2538,"code":"    it(\"is delegated to proxy\", function () {\n      var f = function () {\n        throw new Error(\"aError\");\n      };\n\n      var spy = createSpy();\n      var proxy = createProxy(f, f);\n      assert.same(spy.printf, proxy.printf);\n    });","file":"spy-test.js","skipped":false,"dir":"test"},{"name":"is spy","suites":["stub"],"updatePoint":{"line":32,"column":12,"index":891},"line":32,"code":"  it(\"is spy\", function () {\n    var stub = createStub();\n    assert.isFalse(stub.called);\n    assert.isFunction(stub.calledWith);\n    assert.isFunction(stub.calledOn);\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not define create method","suites":["stub"],"updatePoint":{"line":38,"column":35,"index":1089},"line":38,"code":"  it(\"does not define create method\", function () {\n    var stub = createStub();\n    assert.isUndefined(stub.create);\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"fails if stubbing property on null","suites":["stub"],"updatePoint":{"line":42,"column":40,"index":1218},"line":42,"code":"  it(\"fails if stubbing property on null\", function () {\n    assert.exception(function () {\n      createStub(null, \"prop\");\n    }, {\n      message: \"Trying to stub property 'prop' of null\"\n    });\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws a readable error if stubbing Symbol on null","suites":["stub"],"updatePoint":{"line":49,"column":56,"index":1437},"line":49,"code":"  it(\"throws a readable error if stubbing Symbol on null\", function () {\n    if (typeof Symbol !== \"function\") {\n      this.skip();\n    }\n\n    assert.exception(function () {\n      createStub(null, Symbol(\"apple pie\"));\n    }, {\n      message: \"Trying to stub property 'Symbol(apple pie)' of null\"\n    });\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should contain asynchronous versions of callsArg*, and yields* methods","suites":["stub"],"updatePoint":{"line":60,"column":76,"index":1768},"line":60,"code":"  it(\"should contain asynchronous versions of callsArg*, and yields* methods\", function () {\n    var stub = createStub();\n    var syncVersions = 0;\n    var asyncVersions = 0;\n\n    for (var method in stub) {\n      if (stub.hasOwnProperty(method) && method.match(/^(callsArg|yields)/)) {\n        if (!method.match(/Async/)) {\n          syncVersions++;\n        } else if (method.match(/Async/)) {\n          asyncVersions++;\n        }\n      }\n    }\n\n    assert.same(syncVersions, asyncVersions, \"Stub prototype should contain same amount of synchronous and asynchronous methods\");\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should allow overriding async behavior with sync behavior","suites":["stub"],"updatePoint":{"line":77,"column":63,"index":2338},"line":77,"code":"  it(\"should allow overriding async behavior with sync behavior\", function () {\n    var stub = createStub();\n    var callback = createSpy();\n    stub.callsArgAsync(1);\n    stub.callsArg(1);\n    stub(1, callback);\n    assert(callback.called);\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should works with combination of withArgs arguments","suites":["stub"],"updatePoint":{"line":85,"column":57,"index":2580},"line":85,"code":"  it(\"should works with combination of withArgs arguments\", function () {\n    var stub = createStub();\n    stub.returns(0);\n    stub.withArgs(1, 1).returns(2);\n    stub.withArgs(1).returns(1);\n    assert.equals(stub(), 0);\n    assert.equals(stub(1), 1);\n    assert.equals(stub(1, 1), 2);\n    assert.equals(stub(1, 1, 1), 2);\n    assert.equals(stub(2), 0);\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should work with combination of withArgs arguments","suites":["stub"],"updatePoint":{"line":96,"column":56,"index":2941},"line":96,"code":"  it(\"should work with combination of withArgs arguments\", function () {\n    var stub = createStub();\n    stub.withArgs(1).returns(42);\n    stub(1);\n    refute.isNull(stub.withArgs(1).firstCall);\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains function name","suites":["stub"],"updatePoint":{"line":102,"column":27,"index":3114},"line":102,"code":"  it(\"retains function name\", function () {\n    var object = {\n      test: function test() {\n        return;\n      }\n    };\n    var stub = createStub(object, \"test\");\n    assert.equals(stub.displayName, \"test\");\n    verifyFunctionName(stub, \"test\");\n  });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"create and call spy apis","suites":["stub","non enumerable properties"],"updatePoint":{"line":113,"column":32,"index":3429},"line":113,"code":"    it(\"create and call spy apis\", function () {\n      var stub = createStub();\n      assert.equals(Object.keys(stub), []); // call spy and verify no enumerable properties are added\n\n      stub(15);\n      assert.equals(Object.keys(stub), []); // it should still work to add properties\n\n      stub.fooBar = 1;\n      assert.equals(Object.keys(stub), [\"fooBar\"]); // call some spy APIs and verify no enumerable properties are added\n\n      stub.withArgs(1);\n      stub.calledBefore(createStub());\n      stub.calledAfter(createStub());\n      stub.calledOn(undefined);\n      stub.calledWith(15);\n      stub.calledWithNew();\n      stub.threw();\n      stub.returned(\"ret\");\n      assert.equals(stub.thisValues.length, 1);\n      assert.equals(stub.exceptions.length, 1);\n      assert.equals(stub.returnValues.length, 1);\n      assert.equals(Object.keys(stub), [\"fooBar\"]); // verify that reset history doesn't change enumerable properties\n\n      stub.resetHistory();\n      assert.equals(Object.keys(stub), [\"fooBar\"]);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"create stub from function on object","suites":["stub","non enumerable properties"],"updatePoint":{"line":139,"column":43,"index":4458},"line":139,"code":"    it(\"create stub from function on object\", function () {\n      var func = function () {\n        throw new Error(\"aError\");\n      };\n\n      var object = {\n        test: func\n      };\n      func.aProp = 42;\n      createStub(object, \"test\");\n      assert.equals(object.test.aProp, 42);\n      assert.equals(Object.keys(object.test), Object.keys(func));\n      assert.equals(Object.keys(object.test), [\"aProp\"]);\n      object.test();\n      object.test.resetHistory();\n      assert.equals(Object.keys(object.test), [\"aProp\"]);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns specified value","suites":["stub",".returns"],"updatePoint":{"line":158,"column":31,"index":5020},"line":158,"code":"    it(\"returns specified value\", function () {\n      var stub = createStub();\n      var object = {};\n      stub.returns(object);\n      assert.same(stub(), object);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns should return stub","suites":["stub",".returns"],"updatePoint":{"line":164,"column":34,"index":5196},"line":164,"code":"    it(\"returns should return stub\", function () {\n      var stub = createStub();\n      assert.same(stub.returns(\"\"), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns undefined","suites":["stub",".returns"],"updatePoint":{"line":168,"column":25,"index":5320},"line":168,"code":"    it(\"returns undefined\", function () {\n      var stub = createStub();\n      assert.isUndefined(stub());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous throws","suites":["stub",".returns"],"updatePoint":{"line":172,"column":34,"index":5444},"line":172,"code":"    it(\"supersedes previous throws\", function () {\n      var stub = createStub();\n      stub.throws().returns(1);\n      refute.exception(function () {\n        stub();\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".returns"],"updatePoint":{"line":179,"column":37,"index":5632},"line":179,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().returns(2);\n      var stub = createStub().callsFake(fakeFn).returns(1);\n      assert.equals(stub(), 1);\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws only on the first call","suites":["stub",".returns"],"updatePoint":{"line":185,"column":37,"index":5859},"line":185,"code":"    it(\"throws only on the first call\", function () {\n      var stub = createStub();\n      stub.returns(\"no exception\");\n      stub.onFirstCall().throws();\n      assert.exception(function () {\n        stub();\n      }); // on the second call there is no exception\n\n      assert.same(stub(), \"no exception\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns a promise to the specified value","suites":["stub",".resolves"],"updatePoint":{"line":207,"column":48,"index":6451},"line":207,"code":"    it(\"returns a promise to the specified value\", function () {\n      var stub = createStub();\n      var object = {};\n      stub.resolves(object);\n      return stub().then(function (actual) {\n        assert.same(actual, object);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should return the same stub","suites":["stub",".resolves"],"updatePoint":{"line":215,"column":35,"index":6686},"line":215,"code":"    it(\"should return the same stub\", function () {\n      var stub = createStub();\n      assert.same(stub.resolves(\"\"), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous throws","suites":["stub",".resolves"],"updatePoint":{"line":219,"column":34,"index":6820},"line":219,"code":"    it(\"supersedes previous throws\", function () {\n      var stub = createStub();\n      stub.throws().resolves(1);\n      refute.exception(function () {\n        stub();\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous rejects","suites":["stub",".resolves"],"updatePoint":{"line":226,"column":35,"index":7007},"line":226,"code":"    it(\"supersedes previous rejects\", function () {\n      var stub = createStub();\n      stub.rejects(Error(\"should be superseded\")).resolves(1);\n      return stub().then();\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".resolves"],"updatePoint":{"line":231,"column":37,"index":7191},"line":231,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().resolves(2);\n      var stub = createStub().callsFake(fakeFn).resolves(1);\n      return stub().then(function (actual) {\n        assert.same(actual, 1);\n        refute(fakeFn.called);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be superseded by returns","suites":["stub",".resolves"],"updatePoint":{"line":239,"column":36,"index":7476},"line":239,"code":"    it(\"can be superseded by returns\", function () {\n      var stub = createStub();\n      stub.resolves(2).returns(1);\n      assert.equals(stub(), 1);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not invoke Promise.resolve when the behavior is added to the stub","suites":["stub",".resolves"],"updatePoint":{"line":244,"column":78,"index":7677},"line":244,"code":"    it(\"does not invoke Promise.resolve when the behavior is added to the stub\", function () {\n      var resolveSpy = createSpy(Promise, \"resolve\");\n      var stub = createStub();\n      stub.resolves(2);\n      assert.equals(resolveSpy.callCount, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns a promise which rejects for the specified reason","suites":["stub",".rejects"],"updatePoint":{"line":262,"column":64,"index":8184},"line":262,"code":"    it(\"returns a promise which rejects for the specified reason\", function () {\n      var stub = createStub();\n      var reason = new Error();\n      stub.rejects(reason);\n      return stub().then(function () {\n        referee.fail(\"this should not resolve\");\n      }).catch(function (actual) {\n        assert.same(actual, reason);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should return the same stub","suites":["stub",".rejects"],"updatePoint":{"line":272,"column":35,"index":8505},"line":272,"code":"    it(\"should return the same stub\", function () {\n      var stub = createStub();\n      assert.same(stub.rejects({}), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"specifies exception message","suites":["stub",".rejects"],"updatePoint":{"line":276,"column":35,"index":8639},"line":276,"code":"    it(\"specifies exception message\", function () {\n      var stub = createStub();\n      var message = \"Oh no!\";\n      stub.rejects(\"Error\", message);\n      return stub().then(function () {\n        referee.fail(\"Expected stub to reject\");\n      }).catch(function (reason) {\n        assert.equals(reason.message, message);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not specify exception message if not provided","suites":["stub",".rejects"],"updatePoint":{"line":286,"column":58,"index":9002},"line":286,"code":"    it(\"does not specify exception message if not provided\", function () {\n      var stub = createStub();\n      stub.rejects(\"Error\");\n      return stub().then(function () {\n        referee.fail(\"Expected stub to reject\");\n      }).catch(function (reason) {\n        assert.equals(reason.message, \"\");\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"rejects for a generic reason","suites":["stub",".rejects"],"updatePoint":{"line":295,"column":36,"index":9299},"line":295,"code":"    it(\"rejects for a generic reason\", function () {\n      var stub = createStub();\n      stub.rejects();\n      return stub().then(function () {\n        referee.fail(\"Expected stub to reject\");\n      }).catch(function (reason) {\n        assert.equals(reason.name, \"Error\");\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be superseded by returns","suites":["stub",".rejects"],"updatePoint":{"line":304,"column":36,"index":9591},"line":304,"code":"    it(\"can be superseded by returns\", function () {\n      var stub = createStub();\n      stub.rejects(2).returns(1);\n      assert.equals(stub(), 1);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".rejects"],"updatePoint":{"line":309,"column":37,"index":9750},"line":309,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().resolves(2);\n      var reason = new Error();\n      var stub = createStub().callsFake(fakeFn).rejects(reason);\n      return stub().then(function () {\n        referee.fail(\"this should not resolve\");\n      }).catch(function (actual) {\n        assert.same(actual, reason);\n        refute(fakeFn.called);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not invoke Promise.reject when the behavior is added to the stub","suites":["stub",".rejects"],"updatePoint":{"line":320,"column":77,"index":10195},"line":320,"code":"    it(\"does not invoke Promise.reject when the behavior is added to the stub\", function () {\n      var rejectSpy = createSpy(Promise, \"reject\");\n      var stub = createStub();\n      stub.rejects(2);\n      assert.equals(rejectSpy.callCount, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns a promise resolved with this","suites":["stub",".resolvesThis"],"updatePoint":{"line":338,"column":44,"index":10685},"line":338,"code":"    it(\"returns a promise resolved with this\", function () {\n      var instance = {};\n      instance.stub = createStub();\n      instance.stub.resolvesThis();\n      return instance.stub().then(function (actual) {\n        assert.same(actual, instance);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns a promise resolved with the context bound with stub#call","suites":["stub",".resolvesThis"],"updatePoint":{"line":346,"column":72,"index":10982},"line":346,"code":"    it(\"returns a promise resolved with the context bound with stub#call\", function () {\n      var stub = createStub();\n      stub.resolvesThis();\n      var object = {};\n      return stub.call(object).then(function (actual) {\n        assert.same(actual, object);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns a promise resolved with the context bound with stub#apply","suites":["stub",".resolvesThis"],"updatePoint":{"line":354,"column":73,"index":11264},"line":354,"code":"    it(\"returns a promise resolved with the context bound with stub#apply\", function () {\n      var stub = createStub();\n      stub.resolvesThis();\n      var object = {};\n      return stub.apply(object).then(function (actual) {\n        assert.same(actual, object);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns the stub itself, allowing to chain function calls","suites":["stub",".resolvesThis"],"updatePoint":{"line":362,"column":65,"index":11539},"line":362,"code":"    it(\"returns the stub itself, allowing to chain function calls\", function () {\n      var stub = createStub();\n      assert.same(stub.resolvesThis(), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"overrides throws behavior for error objects","suites":["stub",".resolvesThis"],"updatePoint":{"line":366,"column":51,"index":11692},"line":366,"code":"    it(\"overrides throws behavior for error objects\", function () {\n      var instance = {};\n      instance.stub = createStub().throws(new Error()).resolvesThis();\n      return instance.stub().then(function (actual) {\n        assert.same(actual, instance);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"overrides throws behavior for dynamically created errors","suites":["stub",".resolvesThis"],"updatePoint":{"line":373,"column":64,"index":11980},"line":373,"code":"    it(\"overrides throws behavior for dynamically created errors\", function () {\n      var instance = {};\n      instance.stub = createStub().throws().resolvesThis();\n      return instance.stub().then(function (actual) {\n        assert.same(actual, instance);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".resolvesThis"],"updatePoint":{"line":380,"column":37,"index":12230},"line":380,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeInstance = {};\n      var fakeFn = createStub().resolves(fakeInstance);\n      var instance = {};\n      instance.stub = createStub().callsFake(fakeFn).resolvesThis();\n      return instance.stub().then(function (actual) {\n        assert.same(actual, instance);\n        refute(fakeFn.called);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns a promise to the argument at specified index","suites":["stub",".resolvesArg"],"updatePoint":{"line":402,"column":60,"index":12897},"line":402,"code":"    it(\"returns a promise to the argument at specified index\", function () {\n      var stub = createStub();\n      var object = {};\n      stub.resolvesArg(0);\n      return stub(object).then(function (actual) {\n        assert.same(actual, object);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns a promise to the argument at another specified index","suites":["stub",".resolvesArg"],"updatePoint":{"line":410,"column":68,"index":13169},"line":410,"code":"    it(\"returns a promise to the argument at another specified index\", function () {\n      var stub = createStub();\n      var object = {};\n      stub.resolvesArg(2);\n      return stub(\"ignored\", \"ignored again\", object).then(function (actual) {\n        assert.same(actual, object);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should return the same stub","suites":["stub",".resolvesArg"],"updatePoint":{"line":418,"column":35,"index":13436},"line":418,"code":"    it(\"should return the same stub\", function () {\n      var stub = createStub();\n      assert.same(stub.resolvesArg(1), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous throws","suites":["stub",".resolvesArg"],"updatePoint":{"line":422,"column":34,"index":13572},"line":422,"code":"    it(\"supersedes previous throws\", function () {\n      var stub = createStub();\n      stub.throws().resolvesArg(1);\n      refute.exception(function () {\n        stub(\"zero\", \"one\");\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous rejects","suites":["stub",".resolvesArg"],"updatePoint":{"line":429,"column":35,"index":13775},"line":429,"code":"    it(\"supersedes previous rejects\", function () {\n      var stub = createStub();\n      stub.rejects(Error(\"should be superseded\")).resolvesArg(1);\n      return stub(\"zero\", \"one\").then(function (actual) {\n        assert.same(actual, \"one\");\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".resolvesArg"],"updatePoint":{"line":436,"column":37,"index":14038},"line":436,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().resolves(\"fake\");\n      var stub = createStub().callsFake(fakeFn).resolvesArg(1);\n      return stub(\"zero\", \"one\").then(function (actual) {\n        assert.same(actual, \"one\");\n        refute(fakeFn.called);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not invoke Promise.resolve when the behavior is added to the stub","suites":["stub",".resolvesArg"],"updatePoint":{"line":444,"column":78,"index":14390},"line":444,"code":"    it(\"does not invoke Promise.resolve when the behavior is added to the stub\", function () {\n      var resolveSpy = createSpy(Promise, \"resolve\");\n      var stub = createStub();\n      stub.resolvesArg(2);\n      assert(resolveSpy.notCalled);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not a number","suites":["stub",".resolvesArg"],"updatePoint":{"line":450,"column":39,"index":14602},"line":450,"code":"    it(\"throws if index is not a number\", function () {\n      var stub = createStub();\n      assert.exception(function () {\n        stub.resolvesArg();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws without enough arguments","suites":["stub",".resolvesArg"],"updatePoint":{"line":458,"column":39,"index":14809},"line":458,"code":"    it(\"throws without enough arguments\", function () {\n      var stub = createStub();\n      stub.resolvesArg(3);\n      assert.exception(function () {\n        stub(\"zero\", \"one\", \"two\");\n      }, {\n        name: \"TypeError\",\n        message: \"resolvesArg failed: 4 arguments required but only 3 present\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns argument at specified index","suites":["stub",".returnsArg"],"updatePoint":{"line":470,"column":43,"index":15181},"line":470,"code":"    it(\"returns argument at specified index\", function () {\n      var stub = createStub();\n      stub.returnsArg(0);\n      var object = {};\n      assert.same(stub(object), object);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns stub","suites":["stub",".returnsArg"],"updatePoint":{"line":476,"column":20,"index":15347},"line":476,"code":"    it(\"returns stub\", function () {\n      var stub = createStub();\n      assert.same(stub.returnsArg(0), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".returnsArg"],"updatePoint":{"line":480,"column":37,"index":15485},"line":480,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().returns(\"fake\");\n      var stub = createStub().callsFake(fakeFn).returnsArg(0);\n      assert.equals(stub(\"myarg\"), \"myarg\");\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if no index is specified","suites":["stub",".returnsArg"],"updatePoint":{"line":486,"column":39,"index":15735},"line":486,"code":"    it(\"throws if no index is specified\", function () {\n      var stub = createStub();\n      assert.exception(function () {\n        stub.returnsArg();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should throw without enough arguments","suites":["stub",".returnsArg"],"updatePoint":{"line":494,"column":45,"index":15947},"line":494,"code":"    it(\"should throw without enough arguments\", function () {\n      var stub = createStub();\n      stub.returnsArg(3);\n      assert.exception(function () {\n        stub(\"only\", \"two arguments\");\n      }, {\n        name: \"TypeError\",\n        message: \"returnsArg failed: 4 arguments required but only 2 present\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws argument at specified index","suites":["stub",".throwsArg"],"updatePoint":{"line":506,"column":42,"index":16318},"line":506,"code":"    it(\"throws argument at specified index\", function () {\n      var stub = createStub();\n      stub.throwsArg(0);\n      var expectedError = new Error(\"The expected error message\");\n      assert.exception(function () {\n        stub(expectedError);\n      }, function (err) {\n        return err.message === expectedError.message;\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns stub","suites":["stub",".throwsArg"],"updatePoint":{"line":516,"column":20,"index":16642},"line":516,"code":"    it(\"returns stub\", function () {\n      var stub = createStub();\n      assert.same(stub.throwsArg(0), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws TypeError if no index is specified","suites":["stub",".throwsArg"],"updatePoint":{"line":520,"column":49,"index":16791},"line":520,"code":"    it(\"throws TypeError if no index is specified\", function () {\n      var stub = createStub();\n      assert.exception(function () {\n        stub.throwsArg();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should throw without enough arguments","suites":["stub",".throwsArg"],"updatePoint":{"line":528,"column":45,"index":17002},"line":528,"code":"    it(\"should throw without enough arguments\", function () {\n      var stub = createStub();\n      stub.throwsArg(3);\n      assert.exception(function () {\n        stub(\"only\", \"two arguments\");\n      }, {\n        name: \"TypeError\",\n        message: \"throwsArg failed: 4 arguments required but only 2 present\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should work with call-based behavior","suites":["stub",".throwsArg"],"updatePoint":{"line":538,"column":44,"index":17328},"line":538,"code":"    it(\"should work with call-based behavior\", function () {\n      var stub = createStub();\n      var expectedError = new Error(\"catpants\");\n      stub.returns(1);\n      stub.onSecondCall().throwsArg(1);\n      refute.exception(function () {\n        assert.equals(1, stub(null, expectedError));\n      });\n      assert.exception(function () {\n        stub(null, expectedError);\n      }, function (error) {\n        return error.message === expectedError.message;\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should be reset by .resetBehavior","suites":["stub",".throwsArg"],"updatePoint":{"line":552,"column":41,"index":17803},"line":552,"code":"    it(\"should be reset by .resetBehavior\", function () {\n      var stub = createStub();\n      stub.throwsArg(0);\n      stub.resetBehavior();\n      refute.exception(function () {\n        stub(new Error(\"catpants\"));\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".throwsArg"],"updatePoint":{"line":560,"column":37,"index":18033},"line":560,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub();\n      var stub = createStub().callsFake(fakeFn).throwsArg(1);\n      var expectedError = new Error(\"catpants\");\n      assert.exception(function () {\n        stub(null, expectedError);\n      }, function (error) {\n        return error.message === expectedError.message;\n      });\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stub returns this","suites":["stub",".returnsThis"],"updatePoint":{"line":573,"column":25,"index":18469},"line":573,"code":"    it(\"stub returns this\", function () {\n      var instance = {};\n      instance.stub = createStub();\n      instance.stub.returnsThis();\n      assert.same(instance.stub(), instance);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stub returns undefined when detached","suites":["stub",".returnsThis"],"updatePoint":{"line":579,"column":44,"index":18680},"line":579,"code":"    it(\"stub returns undefined when detached\", function () {\n      var thisValue = function () {\n        return this;\n      }();\n\n      if (thisValue !== undefined) {\n        this.skip();\n      }\n\n      var stub = createStub();\n      stub.returnsThis(); // Due to strict mode, would be `global` otherwise\n\n      assert.same(stub(), undefined);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stub respects call/apply","suites":["stub",".returnsThis"],"updatePoint":{"line":593,"column":32,"index":19020},"line":593,"code":"    it(\"stub respects call/apply\", function () {\n      var stub = createStub();\n      stub.returnsThis();\n      var object = {};\n      assert.same(stub.call(object), object);\n      assert.same(stub.apply(object), object);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns stub","suites":["stub",".returnsThis"],"updatePoint":{"line":600,"column":20,"index":19238},"line":600,"code":"    it(\"returns stub\", function () {\n      var stub = createStub();\n      assert.same(stub.returnsThis(), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".returnsThis"],"updatePoint":{"line":604,"column":37,"index":19376},"line":604,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeInstance = {};\n      var fakeFn = createStub().returns(fakeInstance);\n      var instance = {};\n      instance.stub = createStub();\n      instance.stub.callsFake(fakeFn).returnsThis();\n      assert.same(instance.stub(), instance);\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should exist and be a function","suites":["stub",".usingPromise"],"updatePoint":{"line":620,"column":38,"index":19866},"line":620,"code":"    it(\"should exist and be a function\", function () {\n      var stub = createStub();\n      assert(stub.usingPromise);\n      assert.isFunction(stub.usingPromise);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should return the current stub","suites":["stub",".usingPromise"],"updatePoint":{"line":625,"column":38,"index":20037},"line":625,"code":"    it(\"should return the current stub\", function () {\n      var stub = createStub();\n      assert.same(stub.usingPromise(Promise), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should set the promise used by resolve","suites":["stub",".usingPromise"],"updatePoint":{"line":629,"column":46,"index":20192},"line":629,"code":"    it(\"should set the promise used by resolve\", function () {\n      var stub = createStub();\n      var promise = {\n        resolve: createStub().callsFake(function (value) {\n          return Promise.resolve(value);\n        })\n      };\n      var object = {};\n      stub.usingPromise(promise).resolves(object);\n      return stub().then(function (actual) {\n        assert.same(actual, object, \"Same object resolved\");\n        assert.isTrue(promise.resolve.calledOnce, \"Custom promise resolve called once\");\n        assert.isTrue(promise.resolve.calledWith(object), \"Custom promise resolve called once with expected\");\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should set the promise used by reject","suites":["stub",".usingPromise"],"updatePoint":{"line":644,"column":45,"index":20825},"line":644,"code":"    it(\"should set the promise used by reject\", function () {\n      var stub = createStub();\n      var promise = {\n        reject: createStub().callsFake(function (err) {\n          return Promise.reject(err);\n        })\n      };\n      var reason = new Error();\n      stub.usingPromise(promise).rejects(reason);\n      return stub().then(function () {\n        referee.fail(\"this should not resolve\");\n      }).catch(function (actual) {\n        assert.same(actual, reason, \"Same object resolved\");\n        assert.isTrue(promise.reject.calledOnce, \"Custom promise reject called once\");\n        assert.isTrue(promise.reject.calledWith(reason), \"Custom promise reject called once with expected\");\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws specified exception","suites":["stub",".throws"],"updatePoint":{"line":663,"column":34,"index":21565},"line":663,"code":"    it(\"throws specified exception\", function () {\n      var stub = createStub();\n      var error = new Error();\n      stub.throws(error);\n      assert.exception(stub, error);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns stub","suites":["stub",".throws"],"updatePoint":{"line":669,"column":20,"index":21735},"line":669,"code":"    it(\"returns stub\", function () {\n      var stub = createStub();\n      assert.same(stub.throws({}), stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"sets type of exception to throw","suites":["stub",".throws"],"updatePoint":{"line":673,"column":39,"index":21872},"line":673,"code":"    it(\"sets type of exception to throw\", function () {\n      var stub = createStub();\n      var exceptionType = \"TypeError\";\n      stub.throws(exceptionType);\n      assert.exception(function () {\n        stub();\n      }, exceptionType);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"specifies exception message","suites":["stub",".throws"],"updatePoint":{"line":681,"column":35,"index":22114},"line":681,"code":"    it(\"specifies exception message\", function () {\n      var stub = createStub();\n      var message = \"Oh no!\";\n      stub.throws(\"Error\", message);\n      assert.exception(stub, {\n        message: message\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not specify exception message if not provided","suites":["stub",".throws"],"updatePoint":{"line":689,"column":58,"index":22361},"line":689,"code":"    it(\"does not specify exception message if not provided\", function () {\n      var stub = createStub();\n      stub.throws(\"Error\");\n      assert.exception(stub, {\n        message: \"\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws generic error","suites":["stub",".throws"],"updatePoint":{"line":696,"column":28,"index":22534},"line":696,"code":"    it(\"throws generic error\", function () {\n      var stub = createStub();\n      stub.throws();\n      assert.exception(stub, \"Error\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws an exception created using a function","suites":["stub",".throws"],"updatePoint":{"line":701,"column":52,"index":22702},"line":701,"code":"    it(\"throws an exception created using a function\", function () {\n      var stub = createStub();\n      stub.throws(function () {\n        return new Error(\"not implemented\");\n      });\n      assert.exception(stub, {\n        message: \"not implemented\"\n      });\n      assert.same(stub.firstCall.exception.message, \"not implemented\");\n      assert.contains(stub.firstCall.toString(), \"not implemented\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"uses a lazily created exception for the generic error","suites":["stub",".throws","lazy instantiation of exceptions"],"updatePoint":{"line":724,"column":63,"index":23563},"line":724,"code":"      it(\"uses a lazily created exception for the generic error\", function () {\n        var stub = createStub();\n        stub.throws();\n        assert.isFalse(errorSpy.called);\n        assert.exception(stub, \"Error\");\n        assert.isTrue(errorSpy.called);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"uses a lazily created exception for the named error","suites":["stub",".throws","lazy instantiation of exceptions"],"updatePoint":{"line":731,"column":61,"index":23829},"line":731,"code":"      it(\"uses a lazily created exception for the named error\", function () {\n        var stub = createStub();\n        stub.throws(\"Named Error\", \"error message\");\n        assert.isFalse(errorSpy.called);\n        assert.exception(stub, {\n          name: \"Named Error\",\n          message: \"error message\"\n        });\n        assert.isTrue(errorSpy.called);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"uses a lazily created exception provided by a function","suites":["stub",".throws","lazy instantiation of exceptions"],"updatePoint":{"line":741,"column":64,"index":24198},"line":741,"code":"      it(\"uses a lazily created exception provided by a function\", function () {\n        var stub = createStub();\n        stub.throws(function () {\n          return new Error(\"not implemented\");\n        });\n        assert.isFalse(errorSpy.called);\n        assert.exception(stub, {\n          message: \"not implemented\"\n        });\n        assert.isTrue(errorSpy.called);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not use a lazily created exception if the error object is provided","suites":["stub",".throws","lazy instantiation of exceptions"],"updatePoint":{"line":752,"column":81,"index":24595},"line":752,"code":"      it(\"does not use a lazily created exception if the error object is provided\", function () {\n        var stub = createStub();\n        var exception = new Error();\n        stub.throws(exception);\n        assert.same(errorSpy.callCount, 1);\n        assert.exception(stub, exception);\n        assert.same(errorSpy.callCount, 1);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"resets 'invoking' flag","suites":["stub",".throws","lazy instantiation of exceptions"],"updatePoint":{"line":761,"column":30,"index":24893},"line":761,"code":"    it(\"resets 'invoking' flag\", function () {\n      var stub = createStub();\n      stub.throws();\n      assert.exception(stub);\n      assert.isUndefined(stub.invoking);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".throws","lazy instantiation of exceptions"],"updatePoint":{"line":767,"column":37,"index":25078},"line":767,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub();\n      var expectedError = new Error(\"error\");\n      var stub = createStub().callsFake(fakeFn).throws(expectedError);\n      assert.exception(stub, {\n        message: expectedError.message\n      });\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index","suites":["stub",".callsArg"],"updatePoint":{"line":781,"column":41,"index":25516},"line":781,"code":"    it(\"calls argument at specified index\", function () {\n      this.stub.callsArg(2);\n      var callback = createStub();\n      this.stub(1, 2, callback);\n      assert(callback.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns stub","suites":["stub",".callsArg"],"updatePoint":{"line":787,"column":20,"index":25689},"line":787,"code":"    it(\"returns stub\", function () {\n      assert.isFunction(this.stub.callsArg(2));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if argument at specified index is not callable","suites":["stub",".callsArg"],"updatePoint":{"line":790,"column":61,"index":25823},"line":790,"code":"    it(\"throws if argument at specified index is not callable\", function () {\n      this.stub.callsArg(0);\n      assert.exception(function () {\n        this.stub(1);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if no index is specified","suites":["stub",".callsArg"],"updatePoint":{"line":798,"column":39,"index":26022},"line":798,"code":"    it(\"throws if no index is specified\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArg();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["stub",".callsArg"],"updatePoint":{"line":806,"column":37,"index":26221},"line":806,"code":"    it(\"throws if index is not number\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArg({});\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should throw without enough arguments","suites":["stub",".callsArg"],"updatePoint":{"line":814,"column":45,"index":26430},"line":814,"code":"    it(\"should throw without enough arguments\", function () {\n      var stub = createStub();\n      stub.callsArg(3);\n      assert.exception(function () {\n        stub(\"only\", \"two arguments\");\n      }, {\n        name: \"TypeError\",\n        message: \"callsArg failed: 4 arguments required but only 2 present\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns result of invocant","suites":["stub",".callsArg"],"updatePoint":{"line":824,"column":34,"index":26744},"line":824,"code":"    it(\"returns result of invocant\", function () {\n      var stub = this.stub.callsArg(0);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), \"return value\");\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args","suites":["stub",".callsArgWith"],"updatePoint":{"line":835,"column":60,"index":27131},"line":835,"code":"    it(\"calls argument at specified index with provided args\", function () {\n      var object = {};\n      this.stub.callsArgWith(1, object);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns function","suites":["stub",".callsArgWith"],"updatePoint":{"line":842,"column":24,"index":27352},"line":842,"code":"    it(\"returns function\", function () {\n      var stub = this.stub.callsArgWith(2, 3);\n      assert.isFunction(stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls callback without args","suites":["stub",".callsArgWith"],"updatePoint":{"line":846,"column":35,"index":27490},"line":846,"code":"    it(\"calls callback without args\", function () {\n      this.stub.callsArgWith(1);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls callback with multiple args","suites":["stub",".callsArgWith"],"updatePoint":{"line":852,"column":41,"index":27691},"line":852,"code":"    it(\"calls callback with multiple args\", function () {\n      var object = {};\n      var array = [];\n      this.stub.callsArgWith(1, object, array);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object, array));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if no index is specified","suites":["stub",".callsArgWith"],"updatePoint":{"line":860,"column":39,"index":27963},"line":860,"code":"    it(\"throws if no index is specified\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArgWith();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["stub",".callsArgWith"],"updatePoint":{"line":868,"column":37,"index":28166},"line":868,"code":"    it(\"throws if index is not number\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArgWith({});\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns result of invocant","suites":["stub",".callsArgWith"],"updatePoint":{"line":876,"column":34,"index":28368},"line":876,"code":"    it(\"returns result of invocant\", function () {\n      var stub = this.stub.callsArgWith(0, \"test\");\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), \"return value\");\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index","suites":["stub",".callsArgOn"],"updatePoint":{"line":890,"column":41,"index":28801},"line":890,"code":"    it(\"calls argument at specified index\", function () {\n      this.stub.callsArgOn(2, this.fakeContext);\n      var callback = createStub();\n      this.stub(1, 2, callback);\n      assert(callback.called);\n      assert(callback.calledOn(this.fakeContext));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with undefined context","suites":["stub",".callsArgOn"],"updatePoint":{"line":897,"column":64,"index":29089},"line":897,"code":"    it(\"calls argument at specified index with undefined context\", function () {\n      this.stub.callsArgOn(2, undefined);\n      var callback = createStub();\n      this.stub(1, 2, callback);\n      assert(callback.called);\n      assert(callback.calledOn(undefined));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with number context","suites":["stub",".callsArgOn"],"updatePoint":{"line":904,"column":61,"index":29360},"line":904,"code":"    it(\"calls argument at specified index with number context\", function () {\n      this.stub.callsArgOn(2, 5);\n      var callback = createStub();\n      this.stub(1, 2, callback);\n      assert(callback.called);\n      assert(callback.calledOn(5));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns stub","suites":["stub",".callsArgOn"],"updatePoint":{"line":911,"column":20,"index":29574},"line":911,"code":"    it(\"returns stub\", function () {\n      var stub = this.stub.callsArgOn(2, this.fakeContext);\n      assert.isFunction(stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if argument at specified index is not callable","suites":["stub",".callsArgOn"],"updatePoint":{"line":915,"column":61,"index":29751},"line":915,"code":"    it(\"throws if argument at specified index is not callable\", function () {\n      this.stub.callsArgOn(0, this.fakeContext);\n      assert.exception(function () {\n        this.stub(1);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if no index is specified","suites":["stub",".callsArgOn"],"updatePoint":{"line":923,"column":39,"index":29970},"line":923,"code":"    it(\"throws if no index is specified\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArgOn();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["stub",".callsArgOn"],"updatePoint":{"line":931,"column":37,"index":30171},"line":931,"code":"    it(\"throws if index is not number\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArgOn(this.fakeContext, 2);\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns result of invocant","suites":["stub",".callsArgOn"],"updatePoint":{"line":939,"column":34,"index":30388},"line":939,"code":"    it(\"returns result of invocant\", function () {\n      var stub = this.stub.callsArgOn(0, this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), \"return value\");\n      assert(callback.calledOnce);\n      assert(callback.calledOn(this.fakeContext));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":954,"column":60,"index":30903},"line":954,"code":"    it(\"calls argument at specified index with provided args\", function () {\n      var object = {};\n      this.stub.callsArgOnWith(1, this.fakeContext, object);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object));\n      assert(callback.calledOn(this.fakeContext));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args and undefined context","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":962,"column":82,"index":31253},"line":962,"code":"    it(\"calls argument at specified index with provided args and undefined context\", function () {\n      var object = {};\n      this.stub.callsArgOnWith(1, undefined, object);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object));\n      assert(callback.calledOn(undefined));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args and number context","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":970,"column":79,"index":31586},"line":970,"code":"    it(\"calls argument at specified index with provided args and number context\", function () {\n      var object = {};\n      this.stub.callsArgOnWith(1, 5, object);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object));\n      assert(callback.calledOn(5));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args with undefined context","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":978,"column":83,"index":31907},"line":978,"code":"    it(\"calls argument at specified index with provided args with undefined context\", function () {\n      var object = {};\n      this.stub.callsArgOnWith(1, undefined, object);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object));\n      assert(callback.calledOn(undefined));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls argument at specified index with provided args with number context","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":986,"column":80,"index":32241},"line":986,"code":"    it(\"calls argument at specified index with provided args with number context\", function () {\n      var object = {};\n      this.stub.callsArgOnWith(1, 5, object);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object));\n      assert(callback.calledOn(5));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns function","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":994,"column":24,"index":32503},"line":994,"code":"    it(\"returns function\", function () {\n      var stub = this.stub.callsArgOnWith(2, this.fakeContext, 3);\n      assert.isFunction(stub);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls callback without args","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":998,"column":35,"index":32661},"line":998,"code":"    it(\"calls callback without args\", function () {\n      this.stub.callsArgOnWith(1, this.fakeContext);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith());\n      assert(callback.calledOn(this.fakeContext));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls callback with multiple args","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":1005,"column":41,"index":32933},"line":1005,"code":"    it(\"calls callback with multiple args\", function () {\n      var object = {};\n      var array = [];\n      this.stub.callsArgOnWith(1, this.fakeContext, object, array);\n      var callback = createStub();\n      this.stub(1, callback);\n      assert(callback.calledWith(object, array));\n      assert(callback.calledOn(this.fakeContext));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if no index is specified","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":1014,"column":39,"index":33276},"line":1014,"code":"    it(\"throws if no index is specified\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArgOnWith();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if index is not number","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":1022,"column":37,"index":33481},"line":1022,"code":"    it(\"throws if index is not number\", function () {\n      var stub = this.stub;\n      assert.exception(function () {\n        stub.callsArgOnWith({});\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns result of invocant","suites":["stub",".callsArgOnWith"],"updatePoint":{"line":1030,"column":34,"index":33685},"line":1030,"code":"    it(\"returns result of invocant\", function () {\n      var object = {};\n      var stub = this.stub.callsArgOnWith(0, this.fakeContext, object);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), \"return value\");\n      assert(callback.calledOnce);\n      assert(callback.calledWith(object));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"uses provided function as stub","suites":["stub",".callsFake"],"updatePoint":{"line":1049,"column":38,"index":34262},"line":1049,"code":"    it(\"uses provided function as stub\", function () {\n      var fakeFn = createStub();\n      this.stub = createStub(this.object, \"method\");\n      this.stub.callsFake(fakeFn);\n      this.object.method(1, 2);\n      assert(fakeFn.calledWith(1, 2));\n      assert(fakeFn.calledOn(this.object));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"is overwritten by subsequent stub behavior","suites":["stub",".callsFake"],"updatePoint":{"line":1057,"column":50,"index":34573},"line":1057,"code":"    it(\"is overwritten by subsequent stub behavior\", function () {\n      var fakeFn = createStub();\n      this.stub = createStub(this.object, \"method\");\n      this.stub.callsFake(fakeFn).returns(3);\n      var returned = this.object.method(1, 2);\n      refute(fakeFn.called);\n      assert(returned === 3);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws when third argument is provided","suites":["stub",".objectMethod"],"updatePoint":{"line":1081,"column":46,"index":35224},"line":1081,"code":"    it(\"throws when third argument is provided\", function () {\n      var object = this.object;\n      assert.exception(function () {\n        createStub(object, \"method\", 1);\n      }, {\n        message: \"stub(obj, 'meth', fn) has been removed, see documentation\"\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stubbed method should be proper stub","suites":["stub",".objectMethod"],"updatePoint":{"line":1091,"column":44,"index":35538},"line":1091,"code":"    it(\"stubbed method should be proper stub\", function () {\n      var stub = createStub(this.object, \"method\");\n      assert.isFunction(stub.returns);\n      assert.isFunction(stub.throws);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stub should be spy","suites":["stub",".objectMethod"],"updatePoint":{"line":1096,"column":26,"index":35718},"line":1096,"code":"    it(\"stub should be spy\", function () {\n      var stub = createStub(this.object, \"method\");\n      this.object.method();\n      assert(stub.called);\n      assert(stub.calledOn(this.object));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stub should affect spy","suites":["stub",".objectMethod"],"updatePoint":{"line":1102,"column":30,"index":35922},"line":1102,"code":"    it(\"stub should affect spy\", function () {\n      var stub = createStub(this.object, \"method\");\n      stub.throws(\"TypeError\");\n      assert.exception(this.object.method);\n      assert(stub.threw(\"TypeError\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"handles threw properly for lazily instantiated Errors","suites":["stub",".objectMethod"],"updatePoint":{"line":1108,"column":61,"index":36175},"line":1108,"code":"    it(\"handles threw properly for lazily instantiated Errors\", function () {\n      var stub = createStub(this.object, \"method\");\n      stub.throws(function () {\n        return new TypeError();\n      });\n      assert.exception(this.object.method);\n      assert(stub.threw(\"TypeError\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns standalone stub without arguments","suites":["stub",".objectMethod"],"updatePoint":{"line":1116,"column":49,"index":36458},"line":1116,"code":"    it(\"returns standalone stub without arguments\", function () {\n      var stub = createStub();\n      assert.isFunction(stub);\n      assert.isFalse(stub.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"successfully stubs falsy properties","suites":["stub",".objectMethod"],"updatePoint":{"line":1121,"column":43,"index":36623},"line":1121,"code":"    it(\"successfully stubs falsy properties\", function () {\n      var obj = {\n        0: function () {\n          return;\n        }\n      };\n      createStub(obj, 0).callsFake(function () {\n        return \"stubbed value\";\n      });\n      assert.equals(obj[0](), \"stubbed value\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not stub string","suites":["stub",".objectMethod"],"updatePoint":{"line":1132,"column":28,"index":36895},"line":1132,"code":"    it(\"does not stub string\", function () {\n      assert.exception(function () {\n        createStub(\"test\");\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns function","suites":["stub","everything"],"updatePoint":{"line":1142,"column":24,"index":37187},"line":1142,"code":"    it(\"returns function\", function () {\n      var func = function () {\n        return;\n      };\n\n      assert.same(createStub(func), func);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stubs methods of function","suites":["stub","everything"],"updatePoint":{"line":1149,"column":33,"index":37345},"line":1149,"code":"    it(\"stubs methods of function\", function () {\n      var func = function () {\n        return;\n      };\n\n      func.func1 = function () {\n        return;\n      }; // eslint-disable-next-line no-proto\n\n\n      func.__proto__.func2 = function () {\n        return;\n      };\n\n      createStub(func);\n      assert.isFunction(func.func1.restore);\n      assert.isFunction(func.func2.restore);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not call getter during restore","suites":["stub","everything"],"updatePoint":{"line":1167,"column":43,"index":37750},"line":1167,"code":"    it(\"does not call getter during restore\", function () {\n      var obj = {\n        get prop() {\n          fail(\"should not call getter\");\n          return;\n        }\n\n      };\n      var stub = createStub(obj, \"prop\").get(function () {\n        return 43;\n      });\n      assert.equals(obj.prop, 43);\n      stub.restore();\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"has toString method","suites":["stub","stubbed function"],"updatePoint":{"line":1183,"column":27,"index":38117},"line":1183,"code":"    it(\"has toString method\", function () {\n      var obj = {\n        meth: function () {\n          return;\n        }\n      };\n      createStub(obj, \"meth\");\n      assert.equals(obj.meth.toString(), \"meth\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"toString should say 'stub' when unable to infer name","suites":["stub","stubbed function"],"updatePoint":{"line":1192,"column":60,"index":38366},"line":1192,"code":"    it(\"toString should say 'stub' when unable to infer name\", function () {\n      var stub = createStub();\n      assert.equals(stub.toString(), \"stub\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"toString should prefer property name if possible","suites":["stub","stubbed function"],"updatePoint":{"line":1196,"column":56,"index":38524},"line":1196,"code":"    it(\"toString should prefer property name if possible\", function () {\n      var obj = {};\n      obj.meth = createStub();\n      obj.meth();\n      assert.equals(obj.meth.toString(), \"meth\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["stub",".yields"],"updatePoint":{"line":1204,"column":41,"index":38751},"line":1204,"code":"    it(\"invokes only argument as callback\", function () {\n      var stub = createStub().yields();\n      var spy = createSpy();\n      stub(spy);\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["stub",".yields"],"updatePoint":{"line":1211,"column":60,"index":38996},"line":1211,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      var stub = createStub().yields();\n      assert.exception(stub, {\n        message: \"stub expected to yield, but no callback was passed.\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["stub",".yields"],"updatePoint":{"line":1217,"column":56,"index":39229},"line":1217,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      var myObj = {\n        somethingAwesome: function () {\n          return;\n        }\n      };\n      var stub = createStub(myObj, \"somethingAwesome\").yields();\n      assert.exception(function () {\n        stub(23, 42);\n      }, {\n        message: \"somethingAwesome expected to yield, but no callback was passed. Received [23, 42]\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes last argument as callback","suites":["stub",".yields"],"updatePoint":{"line":1230,"column":41,"index":39638},"line":1230,"code":"    it(\"invokes last argument as callback\", function () {\n      var stub = createStub().yields();\n      var spy = createSpy();\n      stub(24, {}, spy);\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two callbacks","suites":["stub",".yields"],"updatePoint":{"line":1237,"column":38,"index":39869},"line":1237,"code":"    it(\"invokes first of two callbacks\", function () {\n      var stub = createStub().yields();\n      var spy = createSpy();\n      var spy2 = createSpy();\n      stub(24, {}, spy, spy2);\n      assert(spy.calledOnce);\n      assert(!spy2.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["stub",".yields"],"updatePoint":{"line":1245,"column":39,"index":40121},"line":1245,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var stub = createStub().yields(obj, \"Crazy\");\n      var spy = createSpy();\n      stub(spy);\n      assert(spy.calledWith(obj, \"Crazy\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["stub",".yields"],"updatePoint":{"line":1254,"column":33,"index":40363},"line":1254,"code":"    it(\"throws if callback throws\", function () {\n      var obj = {\n        id: 42\n      };\n      var stub = createStub().yields(obj, \"Crazy\");\n      var callback = createStub().throws();\n      assert.exception(function () {\n        stub(callback);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws takes precedent over yielded return value","suites":["stub",".yields"],"updatePoint":{"line":1264,"column":56,"index":40653},"line":1264,"code":"    it(\"throws takes precedent over yielded return value\", function () {\n      var stub = createStub().throws().yields();\n      var callback = createStub().returns(\"return value\");\n      assert.exception(function () {\n        stub(callback);\n      });\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns takes precedent over yielded return value","suites":["stub",".yields"],"updatePoint":{"line":1272,"column":57,"index":40949},"line":1272,"code":"    it(\"returns takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = createStub().returns(obj).yields();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsArg takes precedent over yielded return value","suites":["stub",".yields"],"updatePoint":{"line":1279,"column":60,"index":41241},"line":1279,"code":"    it(\"returnsArg takes precedent over yielded return value\", function () {\n      var stub = createStub().returnsArg(0).yields();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), callback);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsThis takes precedent over yielded return value","suites":["stub",".yields"],"updatePoint":{"line":1285,"column":61,"index":41520},"line":1285,"code":"    it(\"returnsThis takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = createStub().returnsThis().yields();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub.call(obj, callback), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns the result of the yielded callback","suites":["stub",".yields"],"updatePoint":{"line":1292,"column":50,"index":41813},"line":1292,"code":"    it(\"returns the result of the yielded callback\", function () {\n      var stub = createStub().yields();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), \"return value\");\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".yields"],"updatePoint":{"line":1298,"column":37,"index":42060},"line":1298,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().yields(1);\n      var stub = createStub().callsFake(fakeFn).yields(2);\n      var spy = createSpy();\n      stub(spy);\n      assert(spy.calledWith, 2);\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["stub",".yieldsRight"],"updatePoint":{"line":1308,"column":41,"index":42383},"line":1308,"code":"    it(\"invokes only argument as callback\", function () {\n      var stub = createStub().yieldsRight();\n      var spy = createSpy();\n      stub(spy);\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["stub",".yieldsRight"],"updatePoint":{"line":1315,"column":60,"index":42633},"line":1315,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      var stub = createStub().yieldsRight();\n      assert.exception(stub, {\n        message: \"stub expected to yield, but no callback was passed.\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["stub",".yieldsRight"],"updatePoint":{"line":1321,"column":56,"index":42871},"line":1321,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      var myObj = {\n        somethingAwesome: function () {\n          return;\n        }\n      };\n      var stub = createStub(myObj, \"somethingAwesome\").yieldsRight();\n      assert.exception(function () {\n        stub(23, 42);\n      }, {\n        message: \"somethingAwesome expected to yield, but no callback was passed. Received [23, 42]\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes last argument as callback","suites":["stub",".yieldsRight"],"updatePoint":{"line":1334,"column":41,"index":43285},"line":1334,"code":"    it(\"invokes last argument as callback\", function () {\n      var stub = createStub().yieldsRight();\n      var spy = createSpy();\n      stub(24, {}, spy);\n      assert(spy.calledOnce);\n      assert.equals(spy.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes the last of two callbacks","suites":["stub",".yieldsRight"],"updatePoint":{"line":1341,"column":41,"index":43524},"line":1341,"code":"    it(\"invokes the last of two callbacks\", function () {\n      var stub = createStub().yieldsRight();\n      var spy = createSpy();\n      var spy2 = createSpy();\n      stub(24, {}, spy, spy2);\n      assert(!spy.called);\n      assert(spy2.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["stub",".yieldsRight"],"updatePoint":{"line":1349,"column":39,"index":43781},"line":1349,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var stub = createStub().yieldsRight(obj, \"Crazy\");\n      var spy = createSpy();\n      stub(spy);\n      assert(spy.calledWith(obj, \"Crazy\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["stub",".yieldsRight"],"updatePoint":{"line":1358,"column":33,"index":44028},"line":1358,"code":"    it(\"throws if callback throws\", function () {\n      var obj = {\n        id: 42\n      };\n      var stub = createStub().yieldsRight(obj, \"Crazy\");\n      var callback = createStub().throws();\n      assert.exception(function () {\n        stub(callback);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws takes precedent over yielded return value","suites":["stub",".yieldsRight"],"updatePoint":{"line":1368,"column":56,"index":44323},"line":1368,"code":"    it(\"throws takes precedent over yielded return value\", function () {\n      var stub = createStub().yieldsRight().throws();\n      var callback = createStub().returns(\"return value\");\n      assert.exception(function () {\n        stub(callback);\n      });\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns takes precedent over yielded return value","suites":["stub",".yieldsRight"],"updatePoint":{"line":1376,"column":57,"index":44624},"line":1376,"code":"    it(\"returns takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = createStub().returns(obj).yieldsRight();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsArg takes precedent over yielded return value","suites":["stub",".yieldsRight"],"updatePoint":{"line":1383,"column":60,"index":44921},"line":1383,"code":"    it(\"returnsArg takes precedent over yielded return value\", function () {\n      var stub = createStub().returnsArg(0).yieldsRight();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), callback);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsThis takes precedent over yielded return value","suites":["stub",".yieldsRight"],"updatePoint":{"line":1389,"column":61,"index":45205},"line":1389,"code":"    it(\"returnsThis takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = createStub().returnsThis().yieldsRight();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub.call(obj, callback), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns the result of the yielded callback","suites":["stub",".yieldsRight"],"updatePoint":{"line":1396,"column":50,"index":45503},"line":1396,"code":"    it(\"returns the result of the yielded callback\", function () {\n      var stub = createStub().yields();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), \"return value\");\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".yieldsRight"],"updatePoint":{"line":1402,"column":37,"index":45750},"line":1402,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().yieldsRight(1);\n      var stub = createStub().callsFake(fakeFn).yieldsRight(2);\n      var spy = createSpy();\n      stub(spy);\n      assert(spy.calledWith, 2);\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes only argument as callback","suites":["stub",".yieldsOn"],"updatePoint":{"line":1418,"column":41,"index":46204},"line":1418,"code":"    it(\"invokes only argument as callback\", function () {\n      var spy = createSpy();\n      this.stub.yieldsOn(this.fakeContext);\n      this.stub(spy);\n      assert(spy.calledOnce);\n      assert(spy.calledOn(this.fakeContext));\n      assert.equals(spy.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if no context is specified","suites":["stub",".yieldsOn"],"updatePoint":{"line":1426,"column":41,"index":46485},"line":1426,"code":"    it(\"throws if no context is specified\", function () {\n      assert.exception(function () {\n        this.stub.yieldsOn();\n      }, {\n        name: \"TypeError\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no callback is passed","suites":["stub",".yieldsOn"],"updatePoint":{"line":1433,"column":60,"index":46684},"line":1433,"code":"    it(\"throws understandable error if no callback is passed\", function () {\n      this.stub.yieldsOn(this.fakeContext);\n      assert.exception(this.stub, {\n        message: \"stub expected to yield, but no callback was passed.\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["stub",".yieldsOn"],"updatePoint":{"line":1439,"column":56,"index":46926},"line":1439,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      var myObj = {\n        somethingAwesome: function () {\n          return;\n        }\n      };\n      var stub = createStub(myObj, \"somethingAwesome\").yieldsOn(this.fakeContext);\n      assert.exception(function () {\n        stub(23, 42);\n      }, {\n        message: \"somethingAwesome expected to yield, but no callback was passed. Received [23, 42]\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes last argument as callback","suites":["stub",".yieldsOn"],"updatePoint":{"line":1452,"column":41,"index":47353},"line":1452,"code":"    it(\"invokes last argument as callback\", function () {\n      var spy = createSpy();\n      this.stub.yieldsOn(this.fakeContext);\n      this.stub(24, {}, spy);\n      assert(spy.calledOnce);\n      assert(spy.calledOn(this.fakeContext));\n      assert.equals(spy.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two callbacks","suites":["stub",".yieldsOn"],"updatePoint":{"line":1460,"column":38,"index":47639},"line":1460,"code":"    it(\"invokes first of two callbacks\", function () {\n      var spy = createSpy();\n      var spy2 = createSpy();\n      this.stub.yieldsOn(this.fakeContext);\n      this.stub(24, {}, spy, spy2);\n      assert(spy.calledOnce);\n      assert(spy.calledOn(this.fakeContext));\n      assert(!spy2.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["stub",".yieldsOn"],"updatePoint":{"line":1469,"column":39,"index":47946},"line":1469,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var spy = createSpy();\n      this.stub.yieldsOn(this.fakeContext, obj, \"Crazy\");\n      this.stub(spy);\n      assert(spy.calledWith(obj, \"Crazy\"));\n      assert(spy.calledOn(this.fakeContext));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["stub",".yieldsOn"],"updatePoint":{"line":1479,"column":33,"index":48245},"line":1479,"code":"    it(\"throws if callback throws\", function () {\n      var obj = {\n        id: 42\n      };\n      var callback = createStub().throws();\n      this.stub.yieldsOn(this.fakeContext, obj, \"Crazy\");\n      assert.exception(function () {\n        this.stub(callback);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws takes precedent over yielded return value","suites":["stub",".yieldsOn"],"updatePoint":{"line":1489,"column":56,"index":48546},"line":1489,"code":"    it(\"throws takes precedent over yielded return value\", function () {\n      var stub = this.stub.throws().yieldsOn(this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.exception(function () {\n        stub(callback);\n      });\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns takes precedent over yielded return value","suites":["stub",".yieldsOn"],"updatePoint":{"line":1497,"column":57,"index":48857},"line":1497,"code":"    it(\"returns takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = this.stub.returns(obj).yieldsOn(this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsArg takes precedent over yielded return value","suites":["stub",".yieldsOn"],"updatePoint":{"line":1504,"column":60,"index":49164},"line":1504,"code":"    it(\"returnsArg takes precedent over yielded return value\", function () {\n      var stub = this.stub.returnsArg(0).yieldsOn();\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), callback);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsThis takes precedent over yielded return value","suites":["stub",".yieldsOn"],"updatePoint":{"line":1510,"column":61,"index":49442},"line":1510,"code":"    it(\"returnsThis takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = this.stub.returnsThis().yieldsOn(this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub.call(obj, callback), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns the result of the yielded callback","suites":["stub",".yieldsOn"],"updatePoint":{"line":1517,"column":50,"index":49750},"line":1517,"code":"    it(\"returns the result of the yielded callback\", function () {\n      var stub = this.stub.yieldsOn(this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub(callback), \"return value\");\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".yieldsOn"],"updatePoint":{"line":1523,"column":37,"index":50012},"line":1523,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().yieldsOn(this.fakeContext, 1);\n      var stub = createStub().callsFake(fakeFn).yieldsOn(this.fakeContext, 2);\n      var spy = createSpy();\n      stub(spy);\n      assert(spy.calledWith, 2);\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"yields to property of object argument","suites":["stub",".yieldsTo"],"updatePoint":{"line":1533,"column":45,"index":50376},"line":1533,"code":"    it(\"yields to property of object argument\", function () {\n      var stub = createStub().yieldsTo(\"success\");\n      var callback = createSpy();\n      stub({\n        success: callback\n      });\n      assert(callback.calledOnce);\n      assert.equals(callback.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no object with callback is passed","suites":["stub",".yieldsTo"],"updatePoint":{"line":1542,"column":72,"index":50691},"line":1542,"code":"    it(\"throws understandable error if no object with callback is passed\", function () {\n      var stub = createStub().yieldsTo(\"success\");\n      assert.exception(stub, {\n        message: \"stub expected to yield to 'success', but no object with such a property was passed.\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if failing to yield callback by symbol","suites":["stub",".yieldsTo"],"updatePoint":{"line":1548,"column":74,"index":50985},"line":1548,"code":"    it(\"throws understandable error if failing to yield callback by symbol\", function () {\n      if (typeof Symbol !== \"function\") {\n        this.skip();\n      }\n\n      var symbol = Symbol(\"apple pie\");\n      var stub = createStub().yieldsTo(symbol);\n      assert.exception(stub, {\n        message: \"stub expected to yield to 'Symbol(apple pie)', but no object with such a property was passed.\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["stub",".yieldsTo"],"updatePoint":{"line":1559,"column":56,"index":51380},"line":1559,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      var myObj = {\n        somethingAwesome: function () {\n          return;\n        }\n      };\n      var stub = createStub(myObj, \"somethingAwesome\").yieldsTo(\"success\");\n      assert.exception(function () {\n        stub(23, 42);\n      }, {\n        message: \"somethingAwesome expected to yield to 'success', but \" + \"no object with such a property was passed. \" + \"Received [23, 42]\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes property on last argument as callback","suites":["stub",".yieldsTo"],"updatePoint":{"line":1572,"column":53,"index":51854},"line":1572,"code":"    it(\"invokes property on last argument as callback\", function () {\n      var stub = createStub().yieldsTo(\"success\");\n      var callback = createSpy();\n      stub(24, {}, {\n        success: callback\n      });\n      assert(callback.calledOnce);\n      assert.equals(callback.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two possible callbacks","suites":["stub",".yieldsTo"],"updatePoint":{"line":1581,"column":47,"index":52152},"line":1581,"code":"    it(\"invokes first of two possible callbacks\", function () {\n      var stub = createStub().yieldsTo(\"error\");\n      var callback = createSpy();\n      var callback2 = createSpy();\n      stub(24, {}, {\n        error: callback\n      }, {\n        error: callback2\n      });\n      assert(callback.calledOnce);\n      assert(!callback2.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["stub",".yieldsTo"],"updatePoint":{"line":1593,"column":39,"index":52493},"line":1593,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var stub = createStub().yieldsTo(\"success\", obj, \"Crazy\");\n      var callback = createSpy();\n      stub({\n        success: callback\n      });\n      assert(callback.calledWith(obj, \"Crazy\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["stub",".yieldsTo"],"updatePoint":{"line":1604,"column":33,"index":52790},"line":1604,"code":"    it(\"throws if callback throws\", function () {\n      var obj = {\n        id: 42\n      };\n      var stub = createStub().yieldsTo(\"error\", obj, \"Crazy\");\n      var callback = createStub().throws();\n      assert.exception(function () {\n        stub({\n          error: callback\n        });\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws takes precedent over yielded return value","suites":["stub",".yieldsTo"],"updatePoint":{"line":1616,"column":56,"index":53120},"line":1616,"code":"    it(\"throws takes precedent over yielded return value\", function () {\n      var stub = createStub().throws().yieldsTo(\"success\");\n      var callback = createStub().returns(\"return value\");\n      assert.exception(function () {\n        stub({\n          success: callback\n        });\n      });\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns takes precedent over yielded return value","suites":["stub",".yieldsTo"],"updatePoint":{"line":1626,"column":57,"index":53458},"line":1626,"code":"    it(\"returns takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = createStub().returns(obj).yieldsTo(\"success\");\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub({\n        success: callback\n      }), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsArg takes precedent over yielded return value","suites":["stub",".yieldsTo"],"updatePoint":{"line":1635,"column":60,"index":53788},"line":1635,"code":"    it(\"returnsArg takes precedent over yielded return value\", function () {\n      var stub = createStub().returnsArg(0).yieldsTo(\"success\");\n      var callback = createStub().returns(\"return value\");\n      assert.equals(stub({\n        success: callback\n      }), {\n        success: callback\n      });\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsThis takes precedent over yielded return value","suites":["stub",".yieldsTo"],"updatePoint":{"line":1645,"column":61,"index":54134},"line":1645,"code":"    it(\"returnsThis takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = createStub().returnsThis().yieldsTo(\"success\");\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub.call(obj, {\n        success: callback\n      }), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns the result of the yielded callback","suites":["stub",".yieldsTo"],"updatePoint":{"line":1654,"column":50,"index":54465},"line":1654,"code":"    it(\"returns the result of the yielded callback\", function () {\n      var stub = createStub().yieldsTo(\"success\");\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub({\n        success: callback\n      }), \"return value\");\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".yieldsTo"],"updatePoint":{"line":1662,"column":37,"index":54750},"line":1662,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().yieldsTo(\"success\", 1);\n      var stub = createStub().callsFake(fakeFn).yieldsTo(\"success\", 2);\n      var callback = createSpy();\n      stub({\n        success: callback\n      });\n      assert(callback.calledWith(2));\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"yields to property of object argument","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1680,"column":45,"index":55268},"line":1680,"code":"    it(\"yields to property of object argument\", function () {\n      this.stub.yieldsToOn(\"success\", this.fakeContext);\n      var callback = createSpy();\n      this.stub({\n        success: callback\n      });\n      assert(callback.calledOnce);\n      assert(callback.calledOn(this.fakeContext));\n      assert.equals(callback.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"yields to property of object argument with undefined context","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1690,"column":68,"index":55641},"line":1690,"code":"    it(\"yields to property of object argument with undefined context\", function () {\n      this.stub.yieldsToOn(\"success\", undefined);\n      var callback = createSpy();\n      this.stub({\n        success: callback\n      });\n      assert(callback.calledOnce);\n      assert(callback.calledOn(undefined));\n      assert.equals(callback.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"yields to property of object argument with number context","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1700,"column":65,"index":55997},"line":1700,"code":"    it(\"yields to property of object argument with number context\", function () {\n      this.stub.yieldsToOn(\"success\", 5);\n      var callback = createSpy();\n      this.stub({\n        success: callback\n      });\n      assert(callback.calledOnce);\n      assert(callback.calledOn(5));\n      assert.equals(callback.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws understandable error if no object with callback is passed","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1710,"column":72,"index":56344},"line":1710,"code":"    it(\"throws understandable error if no object with callback is passed\", function () {\n      this.stub.yieldsToOn(\"success\", this.fakeContext);\n      assert.exception(this.stub, {\n        message: \"stub expected to yield to 'success', but no object with such a property was passed.\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"includes stub name and actual arguments in error","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1716,"column":56,"index":56631},"line":1716,"code":"    it(\"includes stub name and actual arguments in error\", function () {\n      var myObj = {\n        somethingAwesome: function () {\n          return;\n        }\n      };\n      var stub = createStub(myObj, \"somethingAwesome\").yieldsToOn(\"success\", this.fakeContext);\n      assert.exception(function () {\n        stub(23, 42);\n      }, {\n        message: \"somethingAwesome expected to yield to 'success', but \" + \"no object with such a property was passed. \" + \"Received [23, 42]\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes property on last argument as callback","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1729,"column":53,"index":57125},"line":1729,"code":"    it(\"invokes property on last argument as callback\", function () {\n      var callback = createSpy();\n      this.stub.yieldsToOn(\"success\", this.fakeContext);\n      this.stub(24, {}, {\n        success: callback\n      });\n      assert(callback.calledOnce);\n      assert(callback.calledOn(this.fakeContext));\n      assert.equals(callback.args[0].length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes first of two possible callbacks","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1739,"column":47,"index":57485},"line":1739,"code":"    it(\"invokes first of two possible callbacks\", function () {\n      var callback = createSpy();\n      var callback2 = createSpy();\n      this.stub.yieldsToOn(\"error\", this.fakeContext);\n      this.stub(24, {}, {\n        error: callback\n      }, {\n        error: callback2\n      });\n      assert(callback.calledOnce);\n      assert(callback.calledOn(this.fakeContext));\n      assert(!callback2.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"invokes callback with arguments","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1752,"column":39,"index":57888},"line":1752,"code":"    it(\"invokes callback with arguments\", function () {\n      var obj = {\n        id: 42\n      };\n      var callback = createSpy();\n      this.stub.yieldsToOn(\"success\", this.fakeContext, obj, \"Crazy\");\n      this.stub({\n        success: callback\n      });\n      assert(callback.calledOn(this.fakeContext));\n      assert(callback.calledWith(obj, \"Crazy\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws if callback throws","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1764,"column":33,"index":58247},"line":1764,"code":"    it(\"throws if callback throws\", function () {\n      var obj = {\n        id: 42\n      };\n      var callback = createStub().throws();\n      this.stub.yieldsToOn(\"error\", this.fakeContext, obj, \"Crazy\");\n      assert.exception(function () {\n        this.stub({\n          error: callback\n        });\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws takes precedent over yielded return value","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1776,"column":56,"index":58588},"line":1776,"code":"    it(\"throws takes precedent over yielded return value\", function () {\n      var stub = this.stub.throws().yieldsToOn(\"success\", this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.exception(function () {\n        stub({\n          success: callback\n        });\n      });\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns takes precedent over yielded return value","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1786,"column":57,"index":58943},"line":1786,"code":"    it(\"returns takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = this.stub.returns(obj).yieldsToOn(\"success\", this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub({\n        success: callback\n      }), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsArg takes precedent over yielded return value","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1795,"column":60,"index":59290},"line":1795,"code":"    it(\"returnsArg takes precedent over yielded return value\", function () {\n      var stub = this.stub.returnsArg(0).yieldsToOn(\"success\", this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.equals(stub({\n        success: callback\n      }), {\n        success: callback\n      });\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returnsThis takes precedent over yielded return value","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1805,"column":61,"index":59653},"line":1805,"code":"    it(\"returnsThis takes precedent over yielded return value\", function () {\n      var obj = {};\n      var stub = this.stub.returnsThis().yieldsToOn(\"success\", this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub.call(obj, {\n        success: callback\n      }), obj);\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"returns the result of the yielded callback","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1814,"column":50,"index":60001},"line":1814,"code":"    it(\"returns the result of the yielded callback\", function () {\n      var stub = this.stub.yieldsToOn(\"success\", this.fakeContext);\n      var callback = createStub().returns(\"return value\");\n      assert.same(stub({\n        success: callback\n      }), \"return value\");\n      assert(callback.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supersedes previous callsFake","suites":["stub",".yieldsToOn"],"updatePoint":{"line":1822,"column":37,"index":60303},"line":1822,"code":"    it(\"supersedes previous callsFake\", function () {\n      var fakeFn = createStub().yieldsToOn(\"success\", this.fakeContext, 1);\n      var stub = createStub().callsFake(fakeFn).yieldsToOn(\"success\", this.fakeContext, 2);\n      var callback = createSpy();\n      stub({\n        success: callback\n      });\n      assert(callback.calledWith(2));\n      refute(fakeFn.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"defines withArgs method","suites":["stub",".withArgs"],"updatePoint":{"line":1834,"column":31,"index":60721},"line":1834,"code":"    it(\"defines withArgs method\", function () {\n      var stub = createStub();\n      assert.isFunction(stub.withArgs);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"creates filtered stub","suites":["stub",".withArgs"],"updatePoint":{"line":1838,"column":29,"index":60846},"line":1838,"code":"    it(\"creates filtered stub\", function () {\n      var stub = createStub();\n      var other = stub.withArgs(23);\n      refute.same(other, stub);\n      assert.isFunction(stub.returns);\n      assert.isFunction(other.returns);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"filters return values based on arguments","suites":["stub",".withArgs"],"updatePoint":{"line":1845,"column":48,"index":61098},"line":1845,"code":"    it(\"filters return values based on arguments\", function () {\n      var stub = createStub().returns(23);\n      stub.withArgs(42).returns(99);\n      assert.equals(stub(), 23);\n      assert.equals(stub(42), 99);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"filters exceptions based on arguments","suites":["stub",".withArgs"],"updatePoint":{"line":1851,"column":45,"index":61316},"line":1851,"code":"    it(\"filters exceptions based on arguments\", function () {\n      var stub = createStub().returns(23);\n      stub.withArgs(42).throws();\n      refute.exception(stub);\n      assert.exception(function () {\n        stub(42);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"ensure stub recognizes samsam match fuzzy arguments","suites":["stub",".withArgs"],"updatePoint":{"line":1859,"column":59,"index":61572},"line":1859,"code":"    it(\"ensure stub recognizes samsam match fuzzy arguments\", function () {\n      var stub = createStub().returns(23);\n      stub.withArgs(match({\n        foo: \"bar\"\n      })).returns(99);\n      assert.equals(stub(), 23);\n      assert.equals(stub({\n        foo: \"bar\",\n        bar: \"foo\"\n      }), 99);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"ensure stub uses last matching arguments","suites":["stub",".withArgs"],"updatePoint":{"line":1870,"column":48,"index":61872},"line":1870,"code":"    it(\"ensure stub uses last matching arguments\", function () {\n      var unmatchedValue = \"d3ada6a0-8dac-4136-956d-033b5f23eadf\";\n      var firstMatchedValue = \"68128619-a639-4b32-a4a0-6519165bf301\";\n      var secondMatchedValue = \"4ac2dc8f-3f3f-4648-9838-a2825fd94c9a\";\n      var expectedArgument = \"3e1ed1ec-c377-4432-a33e-3c937f1406d1\";\n      var stub = createStub().returns(unmatchedValue);\n      stub.withArgs(expectedArgument).returns(firstMatchedValue);\n      stub.withArgs(expectedArgument).returns(secondMatchedValue);\n      assert.equals(stub(), unmatchedValue);\n      assert.equals(stub(expectedArgument), secondMatchedValue);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"ensure stub uses last matching samsam match arguments","suites":["stub",".withArgs"],"updatePoint":{"line":1881,"column":61,"index":62533},"line":1881,"code":"    it(\"ensure stub uses last matching samsam match arguments\", function () {\n      var unmatchedValue = \"0aa66a7d-3c50-49ef-8365-bdcab637b2dd\";\n      var firstMatchedValue = \"1ab2c601-7602-4658-9377-3346f6814caa\";\n      var secondMatchedValue = \"e2e31518-c4c4-4012-a61f-31942f603ffa\";\n      var expectedArgument = \"90dc4a22-ef53-4c62-8e05-4cf4b4bf42fa\";\n      var stub = createStub().returns(unmatchedValue);\n      stub.withArgs(expectedArgument).returns(firstMatchedValue);\n      stub.withArgs(match(expectedArgument)).returns(secondMatchedValue);\n      assert.equals(stub(), unmatchedValue);\n      assert.equals(stub(expectedArgument), secondMatchedValue);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously calls argument at specified index","suites":["stub",".callsArgAsync"],"updatePoint":{"line":1897,"column":56,"index":63314},"line":1897,"code":"    it(\"asynchronously calls argument at specified index\", function (done) {\n      this.stub.callsArgAsync(2);\n      var callback = createSpy(done);\n      this.stub(1, 2, callback);\n      assert(!callback.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously calls callback at specified index with multiple args","suites":["stub",".callsArgWithAsync"],"updatePoint":{"line":1908,"column":75,"index":63677},"line":1908,"code":"    it(\"asynchronously calls callback at specified index with multiple args\", function (done) {\n      var object = {};\n      var array = [];\n      this.stub.callsArgWithAsync(1, object, array);\n      var callback = createSpy(function () {\n        assert(callback.calledWith(object, array));\n        done();\n      });\n      this.stub(1, callback);\n      assert(!callback.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously calls argument at specified index with specified context","suites":["stub",".callsArgOnAsync"],"updatePoint":{"line":1927,"column":79,"index":64243},"line":1927,"code":"    it(\"asynchronously calls argument at specified index with specified context\", function (done) {\n      var context = this.fakeContext;\n      this.stub.callsArgOnAsync(2, context);\n      var callback = createSpy(function () {\n        assert(callback.calledOn(context));\n        done();\n      });\n      this.stub(1, 2, callback);\n      assert(!callback.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously calls argument at specified index with provided context and args","suites":["stub",".callsArgOnWithAsync"],"updatePoint":{"line":1945,"column":87,"index":64801},"line":1945,"code":"    it(\"asynchronously calls argument at specified index with provided context and args\", function (done) {\n      var object = {};\n      var context = this.fakeContext;\n      this.stub.callsArgOnWithAsync(1, context, object);\n      var callback = createSpy(function () {\n        assert(callback.calledOn(context));\n        assert(callback.calledWith(object));\n        done();\n      });\n      this.stub(1, callback);\n      assert(!callback.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously invokes only argument as callback","suites":["stub",".yieldsAsync"],"updatePoint":{"line":1959,"column":56,"index":65273},"line":1959,"code":"    it(\"asynchronously invokes only argument as callback\", function (done) {\n      var stub = createStub().yieldsAsync();\n      var spy = createSpy(done);\n      stub(spy);\n      assert(!spy.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously invokes only argument as callback with given context","suites":["stub",".yieldsOnAsync"],"updatePoint":{"line":1973,"column":75,"index":65672},"line":1973,"code":"    it(\"asynchronously invokes only argument as callback with given context\", function (done) {\n      var context = this.fakeContext;\n      this.stub.yieldsOnAsync(context);\n      var spy = createSpy(function () {\n        assert(spy.calledOnce);\n        assert(spy.calledOn(context));\n        assert.equals(spy.args[0].length, 0);\n        done();\n      });\n      this.stub(spy);\n      assert(!spy.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously yields to property of object argument","suites":["stub",".yieldsToAsync"],"updatePoint":{"line":1987,"column":60,"index":66120},"line":1987,"code":"    it(\"asynchronously yields to property of object argument\", function (done) {\n      var stub = createStub().yieldsToAsync(\"success\");\n      var callback = createSpy(function () {\n        assert(callback.calledOnce);\n        assert.equals(callback.args[0].length, 0);\n        done();\n      });\n      stub({\n        success: callback\n      });\n      assert(!callback.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"asynchronously yields to property of object argument with given context","suites":["stub",".yieldsToOnAsync"],"updatePoint":{"line":2007,"column":79,"index":66699},"line":2007,"code":"    it(\"asynchronously yields to property of object argument with given context\", function (done) {\n      var context = this.fakeContext;\n      this.stub.yieldsToOnAsync(\"success\", context);\n      var callback = createSpy(function () {\n        assert(callback.calledOnce);\n        assert(callback.calledOn(context));\n        assert.equals(callback.args[0].length, 0);\n        done();\n      });\n      this.stub({\n        success: callback\n      });\n      assert(!callback.called);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be used with returns to produce sequence","suites":["stub",".onCall"],"updatePoint":{"line":2023,"column":52,"index":67202},"line":2023,"code":"    it(\"can be used with returns to produce sequence\", function () {\n      var stub = createStub().returns(3);\n      stub.onFirstCall().returns(1).onCall(2).returns(2);\n      assert.same(stub(), 1);\n      assert.same(stub(), 3);\n      assert.same(stub(), 2);\n      assert.same(stub(), 3);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be used with returnsArg to produce sequence","suites":["stub",".onCall"],"updatePoint":{"line":2031,"column":55,"index":67502},"line":2031,"code":"    it(\"can be used with returnsArg to produce sequence\", function () {\n      var stub = createStub().returns(\"default\");\n      stub.onSecondCall().returnsArg(0);\n      assert.same(stub(1), \"default\");\n      assert.same(stub(2), 2);\n      assert.same(stub(3), \"default\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be used with returnsThis to produce sequence","suites":["stub",".onCall"],"updatePoint":{"line":2038,"column":56,"index":67783},"line":2038,"code":"    it(\"can be used with returnsThis to produce sequence\", function () {\n      var instance = {};\n      instance.stub = createStub().returns(\"default\");\n      instance.stub.onSecondCall().returnsThis();\n      assert.same(instance.stub(), \"default\");\n      assert.same(instance.stub(), instance);\n      assert.same(instance.stub(), \"default\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be used with throwsException to produce sequence","suites":["stub",".onCall"],"updatePoint":{"line":2046,"column":60,"index":68138},"line":2046,"code":"    it(\"can be used with throwsException to produce sequence\", function () {\n      var stub = createStub();\n      var error = new Error();\n      stub.onSecondCall().throwsException(error);\n      stub();\n      assert.exception(stub, function (e) {\n        return e === error;\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"supports chained declaration of behavior","suites":["stub",".onCall"],"updatePoint":{"line":2055,"column":48,"index":68419},"line":2055,"code":"    it(\"supports chained declaration of behavior\", function () {\n      var stub = createStub().onCall(0).returns(1).onCall(1).returns(2).onCall(2).returns(3);\n      assert.same(stub(), 1);\n      assert.same(stub(), 2);\n      assert.same(stub(), 3);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can produce a sequence for a fake","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2062,"column":43,"index":68730},"line":2062,"code":"      it(\"can produce a sequence for a fake\", function () {\n        var stub = createStub().returns(0);\n        stub.withArgs(5).returns(-1).onFirstCall().returns(1).onSecondCall().returns(2);\n        assert.same(stub(0), 0);\n        assert.same(stub(5), 1);\n        assert.same(stub(0), 0);\n        assert.same(stub(5), 2);\n        assert.same(stub(5), -1);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"falls back to stub default behaviour if fake does not have its own default behaviour","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2071,"column":94,"index":69150},"line":2071,"code":"      it(\"falls back to stub default behaviour if fake does not have its own default behaviour\", function () {\n        var stub = createStub().returns(0);\n        stub.withArgs(5).onFirstCall().returns(1);\n        assert.same(stub(5), 1);\n        assert.same(stub(5), 0);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"falls back to stub behaviour for call if fake does not have its own behaviour for call","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2077,"column":96,"index":69434},"line":2077,"code":"      it(\"falls back to stub behaviour for call if fake does not have its own behaviour for call\", function () {\n        var stub = createStub().returns(0);\n        stub.withArgs(5).onFirstCall().returns(1);\n        stub.onSecondCall().returns(2);\n        assert.same(stub(5), 1);\n        assert.same(stub(5), 2);\n        assert.same(stub(4), 0);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"defaults to undefined behaviour once no more calls have been defined","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2085,"column":78,"index":69773},"line":2085,"code":"      it(\"defaults to undefined behaviour once no more calls have been defined\", function () {\n        var stub = createStub();\n        stub.withArgs(5).onFirstCall().returns(1).onSecondCall().returns(2);\n        assert.same(stub(5), 1);\n        assert.same(stub(5), 2);\n        assert.isUndefined(stub(5));\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not create undefined behaviour just by calling onCall","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2092,"column":68,"index":70081},"line":2092,"code":"      it(\"does not create undefined behaviour just by calling onCall\", function () {\n        var stub = createStub().returns(2);\n        stub.onFirstCall();\n        assert.same(stub(6), 2);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"works with fakes and reset","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2097,"column":36,"index":70249},"line":2097,"code":"      it(\"works with fakes and reset\", function () {\n        var stub = createStub();\n        stub.withArgs(5).onFirstCall().returns(1);\n        stub.withArgs(5).onSecondCall().returns(2);\n        assert.same(stub(5), 1);\n        assert.same(stub(5), 2);\n        assert.isUndefined(stub(5));\n        stub.reset();\n        assert.same(stub(5), undefined);\n        assert.same(stub(5), undefined);\n        assert.isUndefined(stub(5));\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws an understandable error when trying to use withArgs on behavior","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2109,"column":80,"index":70736},"line":2109,"code":"      it(\"throws an understandable error when trying to use withArgs on behavior\", function () {\n        assert.exception(function () {\n          createStub().onFirstCall().withArgs(1);\n        }, {\n          message: /not supported/\n        });\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be used with yields* to produce a sequence","suites":["stub",".onCall","in combination with withArgs"],"updatePoint":{"line":2117,"column":54,"index":70974},"line":2117,"code":"    it(\"can be used with yields* to produce a sequence\", function () {\n      var context = {\n        foo: \"bar\"\n      };\n      var obj = {\n        method1: createSpy(),\n        method2: createSpy()\n      };\n      var obj2 = {\n        method2: createSpy()\n      };\n      var stub = createStub().yieldsToOn(\"method2\", context, 7, 8);\n      stub.onFirstCall().yields(1, 2).onSecondCall().yieldsOn(context, 3, 4).onThirdCall().yieldsTo(\"method1\", 5, 6).onCall(3).yieldsToOn(\"method2\", context, 7, 8);\n      var spy1 = createSpy();\n      var spy2 = createSpy();\n      stub(spy1);\n      stub(spy2);\n      stub(obj);\n      stub(obj);\n      stub(obj2); // should continue with default behavior\n\n      assert(spy1.calledOnce);\n      assert(spy1.calledWithExactly(1, 2));\n      assert(spy2.calledOnce);\n      assert(spy2.calledAfter(spy1));\n      assert(spy2.calledOn(context));\n      assert(spy2.calledWithExactly(3, 4));\n      assert(obj.method1.calledOnce);\n      assert(obj.method1.calledAfter(spy2));\n      assert(obj.method1.calledWithExactly(5, 6));\n      assert(obj.method2.calledOnce);\n      assert(obj.method2.calledAfter(obj.method1));\n      assert(obj.method2.calledOn(context));\n      assert(obj.method2.calledWithExactly(7, 8));\n      assert(obj2.method2.calledOnce);\n      assert(obj2.method2.calledAfter(obj.method2));\n      assert(obj2.method2.calledOn(context));\n      assert(obj2.method2.calledWithExactly(7, 8));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be used with callsArg* to produce a sequence","suites":["stub",".onCall","method2"],"updatePoint":{"line":2156,"column":56,"index":72407},"line":2156,"code":"    it(\"can be used with callsArg* to produce a sequence\", function () {\n      var spy1 = createSpy();\n      var spy2 = createSpy();\n      var spy3 = createSpy();\n      var spy4 = createSpy();\n      var spy5 = createSpy();\n      var decoy = createSpy();\n      var context = {\n        foo: \"bar\"\n      };\n      var stub = createStub().callsArgOnWith(3, context, \"c\", \"d\");\n      stub.onFirstCall().callsArg(0).onSecondCall().callsArgWith(1, \"a\", \"b\").onThirdCall().callsArgOn(2, context).onCall(3).callsArgOnWith(3, context, \"c\", \"d\");\n      stub(spy1);\n      stub(decoy, spy2);\n      stub(decoy, decoy, spy3);\n      stub(decoy, decoy, decoy, spy4);\n      stub(decoy, decoy, decoy, spy5); // should continue with default behavior\n\n      assert(spy1.calledOnce);\n      assert(spy2.calledOnce);\n      assert(spy2.calledAfter(spy1));\n      assert(spy2.calledWithExactly(\"a\", \"b\"));\n      assert(spy3.calledOnce);\n      assert(spy3.calledAfter(spy2));\n      assert(spy3.calledOn(context));\n      assert(spy4.calledOnce);\n      assert(spy4.calledAfter(spy3));\n      assert(spy4.calledOn(context));\n      assert(spy4.calledWithExactly(\"c\", \"d\"));\n      assert(spy5.calledOnce);\n      assert(spy5.calledAfter(spy4));\n      assert(spy5.calledOn(context));\n      assert(spy5.calledWithExactly(\"c\", \"d\"));\n      assert(decoy.notCalled);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can be used with yields* and callsArg* in combination to produce a sequence","suites":["stub",".onCall","method2"],"updatePoint":{"line":2191,"column":83,"index":73768},"line":2191,"code":"    it(\"can be used with yields* and callsArg* in combination to produce a sequence\", function () {\n      var stub = createStub().yields(1, 2);\n      stub.onSecondCall().callsArg(1).onThirdCall().yieldsTo(\"method\").onCall(3).callsArgWith(2, \"a\", \"b\");\n      var obj = {\n        method: createSpy()\n      };\n      var spy1 = createSpy();\n      var spy2 = createSpy();\n      var spy3 = createSpy();\n      var decoy = createSpy();\n      stub(spy1);\n      stub(decoy, spy2);\n      stub(obj);\n      stub(decoy, decoy, spy3);\n      assert(spy1.calledOnce);\n      assert(spy2.calledOnce);\n      assert(spy2.calledAfter(spy1));\n      assert(obj.method.calledOnce);\n      assert(obj.method.calledAfter(spy2));\n      assert(spy3.calledOnce);\n      assert(spy3.calledAfter(obj.method));\n      assert(spy3.calledWithExactly(\"a\", \"b\"));\n      assert(decoy.notCalled);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should interact correctly with assertions (GH-231)","suites":["stub",".onCall","method2"],"updatePoint":{"line":2215,"column":58,"index":74606},"line":2215,"code":"    it(\"should interact correctly with assertions (GH-231)\", function () {\n      var stub = createStub();\n      var spy = createSpy();\n      stub.callsArgWith(0, \"a\");\n      stub(spy);\n      assert(spy.calledWith(\"a\"));\n      stub(spy);\n      assert(spy.calledWith(\"a\"));\n      stub.onThirdCall().callsArgWith(0, \"b\");\n      stub(spy);\n      assert(spy.calledWith(\"b\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"resets behavior","suites":["stub",".reset"],"updatePoint":{"line":2229,"column":23,"index":74991},"line":2229,"code":"    it(\"resets behavior\", function () {\n      var obj = {\n        a: function () {\n          return;\n        }\n      };\n      var spy = createSpy();\n      createStub(obj, \"a\").callsArg(1);\n      obj.a(null, spy);\n      obj.a.reset();\n      obj.a(null, spy);\n      assert(spy.calledOnce);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"resets call history","suites":["stub",".reset"],"updatePoint":{"line":2242,"column":27,"index":75291},"line":2242,"code":"    it(\"resets call history\", function () {\n      var stub = createStub();\n      stub(1);\n      stub.reset();\n      stub(2);\n      assert(stub.calledOnce);\n      assert.equals(stub.getCall(0).args[0], 2);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"resets history","suites":["stub",".resetHistory"],"updatePoint":{"line":2252,"column":22,"index":75547},"line":2252,"code":"    it(\"resets history\", function () {\n      var stub = createStub();\n      stub(1);\n      stub.reset();\n      stub(2);\n      assert(stub.calledOnce);\n      assert.equals(stub.getCall(0).args[0], 2);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"doesn't reset behavior defined using withArgs","suites":["stub",".resetHistory"],"updatePoint":{"line":2260,"column":53,"index":75786},"line":2260,"code":"    it(\"doesn't reset behavior defined using withArgs\", function () {\n      var stub = createStub();\n      stub.withArgs(\"test\").returns(10);\n      stub.resetHistory();\n      assert.equals(stub(\"test\"), 10);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"doesn't reset behavior","suites":["stub",".resetHistory"],"updatePoint":{"line":2266,"column":30,"index":75979},"line":2266,"code":"    it(\"doesn't reset behavior\", function () {\n      var stub = createStub();\n      stub.returns(10);\n      stub.resetHistory();\n      assert.equals(stub(\"test\"), 10);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"clears yields* and callsArg* sequence","suites":["stub",".resetBehavior"],"updatePoint":{"line":2274,"column":45,"index":76219},"line":2274,"code":"    it(\"clears yields* and callsArg* sequence\", function () {\n      var stub = createStub().yields(1);\n      stub.onFirstCall().callsArg(1);\n      stub.resetBehavior();\n      stub.yields(3);\n      var spyWanted = createSpy();\n      var spyNotWanted = createSpy();\n      stub(spyWanted, spyNotWanted);\n      assert(spyNotWanted.notCalled);\n      assert(spyWanted.calledOnce);\n      assert(spyWanted.calledWithExactly(3));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"cleans 'returns' behavior","suites":["stub",".resetBehavior"],"updatePoint":{"line":2286,"column":33,"index":76636},"line":2286,"code":"    it(\"cleans 'returns' behavior\", function () {\n      var stub = createStub().returns(1);\n      stub.resetBehavior();\n      assert.isUndefined(stub());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"cleans behavior of fakes returned by withArgs","suites":["stub",".resetBehavior"],"updatePoint":{"line":2291,"column":53,"index":76818},"line":2291,"code":"    it(\"cleans behavior of fakes returned by withArgs\", function () {\n      var stub = createStub();\n      stub.withArgs(\"lolz\").returns(2);\n      stub.resetBehavior();\n      assert.isUndefined(stub(\"lolz\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not clean parents' behavior when called on a fake returned by withArgs","suites":["stub",".resetBehavior"],"updatePoint":{"line":2297,"column":83,"index":77065},"line":2297,"code":"    it(\"does not clean parents' behavior when called on a fake returned by withArgs\", function () {\n      var parentStub = createStub().returns(false);\n      var childStub = parentStub.withArgs(\"lolz\").returns(true);\n      childStub.resetBehavior();\n      assert.same(parentStub(\"lolz\"), false);\n      assert.same(parentStub(), false);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"cleans 'returnsArg' behavior","suites":["stub",".resetBehavior"],"updatePoint":{"line":2304,"column":36,"index":77362},"line":2304,"code":"    it(\"cleans 'returnsArg' behavior\", function () {\n      var stub = createStub().returnsArg(0);\n      stub.resetBehavior();\n      assert.isUndefined(stub(\"defined\"));\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"cleans 'returnsThis' behavior","suites":["stub",".resetBehavior"],"updatePoint":{"line":2309,"column":37,"index":77540},"line":2309,"code":"    it(\"cleans 'returnsThis' behavior\", function () {\n      var instance = {};\n      instance.stub = createStub();\n      instance.stub.returnsThis();\n      instance.stub.resetBehavior();\n      assert.isUndefined(instance.stub());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"cleans 'resolvesThis' behavior, so the stub does not resolve nor returns anything","suites":["stub",".resetBehavior"],"updatePoint":{"line":2316,"column":89,"index":77830},"line":2316,"code":"    it(\"cleans 'resolvesThis' behavior, so the stub does not resolve nor returns anything\", function () {\n      var instance = {};\n      instance.stub = createStub();\n      instance.stub.resolvesThis();\n      instance.stub.resetBehavior();\n      assert.isUndefined(instance.stub());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":".calledOnce","suites":["stub",".resetBehavior","does not touch properties that are reset by 'reset'"],"updatePoint":{"line":2324,"column":21,"index":78135},"line":2324,"code":"      it(\".calledOnce\", function () {\n        var stub = createStub();\n        stub(1);\n        stub.resetBehavior();\n        assert(stub.calledOnce);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"called multiple times","suites":["stub",".resetBehavior","does not touch properties that are reset by 'reset'"],"updatePoint":{"line":2330,"column":31,"index":78306},"line":2330,"code":"      it(\"called multiple times\", function () {\n        var stub = createStub();\n        stub(1);\n        stub(2);\n        stub(3);\n        stub.resetBehavior();\n        assert(stub.called);\n        assert.equals(stub.args.length, 3);\n        assert.equals(stub.returnValues.length, 3);\n        assert.equals(stub.exceptions.length, 3);\n        assert.equals(stub.thisValues.length, 3);\n        refute.isUndefined(stub.firstCall);\n        refute.isUndefined(stub.secondCall);\n        refute.isUndefined(stub.thirdCall);\n        refute.isUndefined(stub.lastCall);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"call order state","suites":["stub",".resetBehavior","does not touch properties that are reset by 'reset'"],"updatePoint":{"line":2346,"column":26,"index":78874},"line":2346,"code":"      it(\"call order state\", function () {\n        var stubs = [createStub(), createStub()];\n        stubs[0]();\n        stubs[1]();\n        stubs[0].resetBehavior();\n        assert(stubs[0].calledBefore(stubs[1]));\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"fakes returned by withArgs","suites":["stub",".resetBehavior","does not touch properties that are reset by 'reset'"],"updatePoint":{"line":2353,"column":36,"index":79110},"line":2353,"code":"      it(\"fakes returned by withArgs\", function () {\n        var stub = createStub();\n        var fakeA = stub.withArgs(\"a\");\n        var fakeB = stub.withArgs(\"b\");\n        stub(\"a\");\n        stub(\"b\");\n        stub(\"c\");\n        var fakeC = stub.withArgs(\"c\");\n        stub.resetBehavior();\n        assert(fakeA.calledOnce);\n        assert(fakeB.calledOnce);\n        assert(fakeC.calledOnce);\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"is zero by default","suites":["stub",".length"],"updatePoint":{"line":2369,"column":26,"index":79555},"line":2369,"code":"    it(\"is zero by default\", function () {\n      var stub = createStub();\n      assert.equals(stub.length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains function length 0","suites":["stub",".length"],"updatePoint":{"line":2373,"column":33,"index":79681},"line":2373,"code":"    it(\"retains function length 0\", function () {\n      var object = {\n        test: function () {\n          return;\n        }\n      };\n      var stub = createStub(object, \"test\");\n      assert.equals(stub.length, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains function length 1","suites":["stub",".length"],"updatePoint":{"line":2382,"column":33,"index":79907},"line":2382,"code":"    it(\"retains function length 1\", function () {\n      var object = {\n        // eslint-disable-next-line no-unused-vars\n        test: function (a) {\n          return;\n        }\n      };\n      var stub = createStub(object, \"test\");\n      assert.equals(stub.length, 1);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains function length 2","suites":["stub",".length"],"updatePoint":{"line":2392,"column":33,"index":80185},"line":2392,"code":"    it(\"retains function length 2\", function () {\n      var object = {\n        // eslint-disable-next-line no-unused-vars\n        test: function (a, b) {\n          return;\n        }\n      };\n      var stub = createStub(object, \"test\");\n      assert.equals(stub.length, 2);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains function length 3","suites":["stub",".length"],"updatePoint":{"line":2402,"column":33,"index":80466},"line":2402,"code":"    it(\"retains function length 3\", function () {\n      var object = {\n        // eslint-disable-next-line no-unused-vars\n        test: function (a, b, c) {\n          return;\n        }\n      };\n      var stub = createStub(object, \"test\");\n      assert.equals(stub.length, 3);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains function length 4","suites":["stub",".length"],"updatePoint":{"line":2412,"column":33,"index":80750},"line":2412,"code":"    it(\"retains function length 4\", function () {\n      var object = {\n        // eslint-disable-next-line no-unused-vars\n        test: function (a, b, c, d) {\n          return;\n        }\n      };\n      var stub = createStub(object, \"test\");\n      assert.equals(stub.length, 4);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains function length 12","suites":["stub",".length"],"updatePoint":{"line":2422,"column":34,"index":81038},"line":2422,"code":"    it(\"retains function length 12\", function () {\n      // eslint-disable-next-line no-unused-vars\n      var func12Args = function (a, b, c, d, e, f, g, h, i, j, k, l) {\n        return;\n      };\n\n      var object = {\n        test: func12Args\n      };\n      var stub = createStub(object, \"test\");\n      assert.equals(stub.length, 12);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"stubs existing methods","suites":["stub",".createStubInstance"],"updatePoint":{"line":2436,"column":30,"index":81431},"line":2436,"code":"    it(\"stubs existing methods\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = createStubInstance(Class);\n      stub.method.returns(3);\n      assert.equals(3, stub.method());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws with no methods to stub","suites":["stub",".createStubInstance"],"updatePoint":{"line":2449,"column":38,"index":81736},"line":2449,"code":"    it(\"throws with no methods to stub\", function () {\n      var Class = function () {\n        return;\n      };\n\n      assert.exception(function () {\n        createStubInstance(Class);\n      }, {\n        message: \"Expected to stub methods on object but found none\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"doesn't call the constructor","suites":["stub",".createStubInstance"],"updatePoint":{"line":2460,"column":36,"index":82017},"line":2460,"code":"    it(\"doesn't call the constructor\", function () {\n      var Class = function (a, b) {\n        var c = a + b;\n        throw c;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = createStubInstance(Class);\n      refute.exception(function () {\n        stub.method(3);\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"retains non function values","suites":["stub",".createStubInstance"],"updatePoint":{"line":2475,"column":35,"index":82349},"line":2475,"code":"    it(\"retains non function values\", function () {\n      var TYPE = \"some-value\";\n\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      Class.prototype.type = TYPE;\n      var stub = createStubInstance(Class);\n      assert.equals(TYPE, stub.type);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"has no side effects on the prototype","suites":["stub",".createStubInstance"],"updatePoint":{"line":2490,"column":44,"index":82696},"line":2490,"code":"    it(\"has no side effects on the prototype\", function () {\n      var proto = {\n        method: function () {\n          throw new Error(\"error\");\n        }\n      };\n\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype = proto;\n      var stub = createStubInstance(Class);\n      refute.exception(stub.method);\n      assert.exception(proto.method);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws exception for non function params","suites":["stub",".createStubInstance"],"updatePoint":{"line":2506,"column":48,"index":83083},"line":2506,"code":"    it(\"throws exception for non function params\", function () {\n      var types = [{}, 3, \"hi!\"];\n\n      for (var i = 0; i < types.length; i++) {\n        // yes, it's silly to create functions in a loop, it's also a test\n        // eslint-disable-next-line no-loop-func\n        assert.exception(function () {\n          createStubInstance(types[i]);\n        });\n      }\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows providing optional overrides","suites":["stub",".createStubInstance"],"updatePoint":{"line":2517,"column":43,"index":83456},"line":2517,"code":"    it(\"allows providing optional overrides\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = createStubInstance(Class, {\n        method: createStub().returns(3)\n      });\n      assert.equals(3, stub.method());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows providing optional returned values","suites":["stub",".createStubInstance"],"updatePoint":{"line":2531,"column":49,"index":83793},"line":2531,"code":"    it(\"allows providing optional returned values\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = createStubInstance(Class, {\n        method: 3\n      });\n      assert.equals(3, stub.method());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows providing null as a return value","suites":["stub",".createStubInstance"],"updatePoint":{"line":2545,"column":47,"index":84106},"line":2545,"code":"    it(\"allows providing null as a return value\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      var stub = createStubInstance(Class, {\n        method: null\n      });\n      assert.equals(null, stub.method());\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"throws an exception when trying to override non-existing property","suites":["stub",".createStubInstance"],"updatePoint":{"line":2559,"column":73,"index":84451},"line":2559,"code":"    it(\"throws an exception when trying to override non-existing property\", function () {\n      var Class = function () {\n        return;\n      };\n\n      Class.prototype.method = function () {\n        return;\n      };\n\n      assert.exception(function () {\n        createStubInstance(Class, {\n          foo: createStub().returns(3)\n        });\n      }, {\n        message: \"Cannot stub foo. Property does not exist!\"\n      });\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not call original function when arguments match conditional stub","suites":["stub",".callThrough"],"updatePoint":{"line":2578,"column":77,"index":84935},"line":2578,"code":"    it(\"does not call original function when arguments match conditional stub\", function () {\n      // We need a function here because we can't wrap properties that are already stubs\n      var callCount = 0;\n\n      var originalFunc = function increaseCallCount() {\n        callCount++;\n      };\n\n      var myObj = {\n        prop: originalFunc\n      };\n      var propStub = createStub(myObj, \"prop\");\n      propStub.withArgs(\"foo\").returns(\"bar\");\n      propStub.callThrough();\n      var result = myObj.prop(\"foo\");\n      assert.equals(result, \"bar\");\n      assert.equals(callCount, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls original function when arguments do not match conditional stub","suites":["stub",".callThrough"],"updatePoint":{"line":2596,"column":76,"index":85528},"line":2596,"code":"    it(\"calls original function when arguments do not match conditional stub\", function () {\n      // We need a function here because we can't wrap properties that are already stubs\n      var callCount = 0;\n\n      var originalFunc = function increaseCallCount() {\n        callCount++;\n        return 1337;\n      };\n\n      var myObj = {\n        prop: originalFunc\n      };\n      var propStub = createStub(myObj, \"prop\");\n      propStub.withArgs(\"foo\").returns(\"bar\");\n      propStub.callThrough(propStub);\n      var result = myObj.prop(\"not foo\");\n      assert.equals(result, 1337);\n      assert.equals(callCount, 1);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls original function with same arguments when call does not match conditional stub","suites":["stub",".callThrough"],"updatePoint":{"line":2615,"column":93,"index":86170},"line":2615,"code":"    it(\"calls original function with same arguments when call does not match conditional stub\", function () {\n      // We need a function here because we can't wrap properties that are already stubs\n      var callArgs = [];\n\n      var originalFunc = function increaseCallCount() {\n        callArgs = arguments;\n      };\n\n      var myObj = {\n        prop: originalFunc\n      };\n      var propStub = createStub(myObj, \"prop\");\n      propStub.withArgs(\"foo\").returns(\"bar\");\n      propStub.callThrough();\n      myObj.prop(\"not foo\");\n      assert.equals(callArgs.length, 1);\n      assert.equals(callArgs[0], \"not foo\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls original function with same `this` reference when call does not match conditional stub","suites":["stub",".callThrough"],"updatePoint":{"line":2633,"column":100,"index":86802},"line":2633,"code":"    it(\"calls original function with same `this` reference when call does not match conditional stub\", function () {\n      // We need a function here because we can't wrap properties that are already stubs\n      var reference = {};\n\n      var originalFunc = function increaseCallCount() {\n        reference = this;\n      };\n\n      var myObj = {\n        prop: originalFunc\n      };\n      var propStub = createStub(myObj, \"prop\");\n      propStub.withArgs(\"foo\").returns(\"bar\");\n      propStub.callThrough();\n      myObj.prop(\"not foo\");\n      assert.equals(reference, myObj);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"does not call original function with new when arguments match conditional stub","suites":["stub",".callThroughWithNew"],"updatePoint":{"line":2652,"column":86,"index":87424},"line":2652,"code":"    it(\"does not call original function with new when arguments match conditional stub\", function () {\n      // We need a function here because we can't wrap properties that are already stubs\n      var callCount = 0;\n\n      var OriginalClass = function SomeClass() {\n        this.foo = \"bar\";\n        callCount++;\n      };\n\n      var myObj = {\n        MyClass: OriginalClass\n      };\n      var propStub = createStub(myObj, \"MyClass\");\n      propStub.withArgs(\"foo\").returns({\n        foo: \"bar\"\n      });\n      propStub.callThroughWithNew(propStub);\n      var result = new myObj.MyClass(\"foo\");\n      assert.equals(result.foo, \"bar\");\n      assert.equals(callCount, 0);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"calls original function with new with same arguments","suites":["stub",".callThroughWithNew","when call does not match conditional stub"],"updatePoint":{"line":2674,"column":62,"index":88149},"line":2674,"code":"      it(\"calls original function with new with same arguments\", function () {\n        // We need a function here because we can't wrap properties that are already stubs\n        var callArgs = [];\n\n        function OriginalClass() {\n          callArgs = arguments;\n          this.foo = \"baz\";\n        }\n\n        var myObj = {\n          MyClass: OriginalClass\n        };\n        var propStub = createStub(myObj, \"MyClass\");\n        propStub.withArgs(\"foo\").returns({\n          foo: \"bar\"\n        });\n        propStub.callThroughWithNew(propStub);\n        var result = new myObj.MyClass(\"not foo\", [\"definitely\", \"not\", \"foo\"]);\n        assert.equals(callArgs[0], \"not foo\");\n        assert.equals(callArgs[1], [\"definitely\", \"not\", \"foo\"]);\n        assert.equals(result.foo, \"baz\");\n      });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows users to stub getter functions for properties","suites":["stub",".get"],"updatePoint":{"line":2699,"column":60,"index":88986},"line":2699,"code":"    it(\"allows users to stub getter functions for properties\", function () {\n      var myObj = {\n        prop: \"foo\"\n      };\n      createStub(myObj, \"prop\").get(function getterFn() {\n        return \"bar\";\n      });\n      assert.equals(myObj.prop, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows users to stub getter functions for functions","suites":["stub",".get"],"updatePoint":{"line":2708,"column":59,"index":89249},"line":2708,"code":"    it(\"allows users to stub getter functions for functions\", function () {\n      var myObj = {\n        prop: function propGetter() {\n          return \"foo\";\n        }\n      };\n      createStub(myObj, \"prop\").get(function getterFn() {\n        return \"bar\";\n      });\n      assert.equals(myObj.prop, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"replaces old getters","suites":["stub",".get"],"updatePoint":{"line":2719,"column":28,"index":89533},"line":2719,"code":"    it(\"replaces old getters\", function () {\n      var myObj = {\n        get prop() {\n          fail(\"should not call the old getter\");\n          return;\n        }\n\n      };\n      createStub(myObj, \"prop\").get(function getterFn() {\n        return \"bar\";\n      });\n      assert.equals(myObj.prop, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can restore stubbed setters for functions","suites":["stub",".get"],"updatePoint":{"line":2732,"column":49,"index":89866},"line":2732,"code":"    it(\"can restore stubbed setters for functions\", function () {\n      var propFn = function propFn() {\n        return \"bar\";\n      };\n\n      var myObj = {\n        prop: propFn\n      };\n      var stub = createStub(myObj, \"prop\");\n      stub.get(function getterFn() {\n        return \"baz\";\n      });\n      stub.restore();\n      assert.equals(myObj.prop, propFn);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can restore stubbed getters for properties","suites":["stub",".get"],"updatePoint":{"line":2747,"column":50,"index":90238},"line":2747,"code":"    it(\"can restore stubbed getters for properties\", function () {\n      var myObj = {\n        get prop() {\n          return \"bar\";\n        }\n\n      };\n      var stub = createStub(myObj, \"prop\");\n      stub.get(function getterFn() {\n        return \"baz\";\n      });\n      stub.restore();\n      assert.equals(myObj.prop, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows users to stub setter functions for properties","suites":["stub",".set"],"updatePoint":{"line":2763,"column":60,"index":90622},"line":2763,"code":"    it(\"allows users to stub setter functions for properties\", function () {\n      var myObj = {\n        prop: \"foo\"\n      };\n      createStub(myObj, \"prop\").set(function setterFn() {\n        myObj.example = \"bar\";\n      });\n      myObj.prop = \"baz\";\n      assert.equals(myObj.example, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows users to stub setter functions for functions","suites":["stub",".set"],"updatePoint":{"line":2773,"column":59,"index":90923},"line":2773,"code":"    it(\"allows users to stub setter functions for functions\", function () {\n      var myObj = {\n        prop: function propSetter() {\n          return \"foo\";\n        }\n      };\n      createStub(myObj, \"prop\").set(function setterFn() {\n        myObj.example = \"bar\";\n      });\n      myObj.prop = \"baz\";\n      assert.equals(myObj.example, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"replaces old setters","suites":["stub",".set"],"updatePoint":{"line":2785,"column":28,"index":91245},"line":2785,"code":"    it(\"replaces old setters\", function () {\n      var myObj = {\n        // eslint-disable-next-line accessor-pairs\n        set prop(val) {\n          fail(\"should not call the old setter\");\n        }\n\n      };\n      createStub(myObj, \"prop\").set(function setterFn() {\n        myObj.example = \"bar\";\n      });\n      myObj.prop = \"foo\";\n      assert.equals(myObj.example, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can restore stubbed setters for functions","suites":["stub",".set"],"updatePoint":{"line":2799,"column":49,"index":91652},"line":2799,"code":"    it(\"can restore stubbed setters for functions\", function () {\n      var propFn = function propFn() {\n        return \"bar\";\n      };\n\n      var myObj = {\n        prop: propFn\n      };\n      var stub = createStub(myObj, \"prop\");\n      stub.set(function setterFn() {\n        myObj.otherProp = \"baz\";\n      });\n      stub.restore();\n      assert.equals(myObj.prop, propFn);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"can restore stubbed setters for properties","suites":["stub",".set"],"updatePoint":{"line":2814,"column":50,"index":92035},"line":2814,"code":"    it(\"can restore stubbed setters for properties\", function () {\n      var myObj = {\n        // eslint-disable-next-line accessor-pairs\n        set prop(val) {\n          this.otherProp = \"bar\";\n        }\n\n      };\n      var stub = createStub(myObj, \"prop\");\n      stub.set(function setterFn() {\n        myObj.otherProp = \"baz\";\n      });\n      stub.restore();\n      myObj.prop = \"foo\";\n      assert.equals(myObj.otherProp, \"bar\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows stubbing property descriptor values","suites":["stub",".value"],"updatePoint":{"line":2832,"column":50,"index":92517},"line":2832,"code":"    it(\"allows stubbing property descriptor values\", function () {\n      var myObj = {\n        prop: \"rawString\"\n      };\n      createStub(myObj, \"prop\").value(\"newString\");\n      assert.equals(myObj.prop, \"newString\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows restoring stubbed property descriptor values","suites":["stub",".value"],"updatePoint":{"line":2839,"column":59,"index":92754},"line":2839,"code":"    it(\"allows restoring stubbed property descriptor values\", function () {\n      var myObj = {\n        prop: \"rawString\"\n      };\n      var stub = createStub(myObj, \"prop\").value(\"newString\");\n      stub.restore();\n      assert.equals(myObj.prop, \"rawString\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows stubbing function static properties","suites":["stub",".value"],"updatePoint":{"line":2847,"column":50,"index":93015},"line":2847,"code":"    it(\"allows stubbing function static properties\", function () {\n      var myFunc = function () {\n        return;\n      };\n\n      myFunc.prop = \"rawString\";\n      createStub(myFunc, \"prop\").value(\"newString\");\n      assert.equals(myFunc.prop, \"newString\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows restoring function static properties","suites":["stub",".value"],"updatePoint":{"line":2856,"column":51,"index":93283},"line":2856,"code":"    it(\"allows restoring function static properties\", function () {\n      var myFunc = function () {\n        return;\n      };\n\n      myFunc.prop = \"rawString\";\n      var stub = createStub(myFunc, \"prop\").value(\"newString\");\n      stub.restore();\n      assert.equals(myFunc.prop, \"rawString\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"allows stubbing object props with configurable false","suites":["stub",".value"],"updatePoint":{"line":2866,"column":60,"index":93593},"line":2866,"code":"    it(\"allows stubbing object props with configurable false\", function () {\n      var myObj = {};\n      Object.defineProperty(myObj, \"prop\", {\n        configurable: false,\n        enumerable: true,\n        writable: true,\n        value: \"static\"\n      });\n      createStub(myObj, \"prop\").value(\"newString\");\n      assert.equals(myObj.prop, \"newString\");\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should start with 'stub#'","suites":["stub",".id"],"updatePoint":{"line":2879,"column":33,"index":93967},"line":2879,"code":"    it(\"should start with 'stub#'\", function () {\n      for (var i = 0; i < 10; i++) {\n        assert.isTrue(createStub().id.indexOf(\"stub#\") === 0);\n      }\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"is delegated to proxy","suites":["stub",".printf"],"updatePoint":{"line":2886,"column":29,"index":94171},"line":2886,"code":"    it(\"is delegated to proxy\", function () {\n      var f = function () {\n        throw new Error(\"aError\");\n      };\n\n      var stub = createStub();\n      var proxy = createProxy(f, f);\n      assert.same(stub.printf, proxy.printf);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should return the original method being stubbed","suites":["stub",".wrappedMethod"],"updatePoint":{"line":2897,"column":55,"index":94487},"line":2897,"code":"    it(\"should return the original method being stubbed\", function () {\n      var myFn = function () {\n        return \"foo\";\n      };\n\n      var myObj = {\n        fn: myFn\n      };\n      createStub(myObj, \"fn\");\n      assert.same(myFn, myObj.fn.wrappedMethod);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should not exist for accessors","suites":["stub",".wrappedMethod"],"updatePoint":{"line":2908,"column":38,"index":94739},"line":2908,"code":"    it(\"should not exist for accessors\", function () {\n      var myObj = {\n        get prop() {\n          return \"foo\";\n        }\n\n      };\n      createStub(myObj, \"prop\").get(function () {\n        return \"bar\";\n      });\n      assert.isUndefined(myObj.prop.wrappedMethod);\n    });","file":"stub-test.js","skipped":false,"dir":"test"},{"name":"should return a colored string","suites":["color","when environment supports color"],"updatePoint":{"line":37,"column":42,"index":792},"line":37,"code":"        it(\"should return a colored string\", function () {\n          var string = \"lorem ipsum\";\n          var actual = color[method.name](string);\n          assert.contains(actual, `${method.code}m${string}`);\n        });","file":"util/core/color-test.js","skipped":false,"dir":"test"},{"name":"should return a regular string","suites":["color","when environment does not support color"],"updatePoint":{"line":58,"column":42,"index":1484},"line":58,"code":"        it(\"should return a regular string\", function () {\n          var string = \"lorem ipsum\";\n          var actual = color[method.name](string);\n          assert.equals(actual, string);\n        });","file":"util/core/color-test.js","skipped":false,"dir":"test"},{"name":"should create an async version","suites":["util/core/exportAsyncBehaviors","for methods with names starting with 'callsArg' or 'yields'"],"updatePoint":{"line":11,"column":38,"index":365},"line":11,"code":"    it(\"should create an async version\", function () {\n      var methods = {\n        yieldsOn: function yieldsOn() {\n          return \"2\";\n        },\n        callsArg: function callsArg() {\n          return \"3\";\n        }\n      };\n      assert.equals(Object.keys(exportAsyncBehaviors(methods)), [\"yieldsOnAsync\", \"callsArgAsync\"]);\n    });","file":"util/core/export-async-behaviors-test.js","skipped":false,"dir":"test"},{"name":"should not add any new methods","suites":["util/core/exportAsyncBehaviors","for methods with names not starting with 'callsArg' or 'yields'"],"updatePoint":{"line":24,"column":38,"index":803},"line":24,"code":"    it(\"should not add any new methods\", function () {\n      var methods = {\n        callsFake: function callsFake() {\n          return \"1\";\n        },\n        resolvesThisAsync: function resolvesThisAsync() {\n          return \"4\";\n        }\n      };\n      assert.equals(Object.keys(exportAsyncBehaviors(methods)), []);\n    });","file":"util/core/export-async-behaviors-test.js","skipped":false,"dir":"test"},{"name":"sets custom formatter","suites":["util/core/format","format.setFormatter"],"updatePoint":{"line":12,"column":29,"index":315},"line":12,"code":"    it(\"sets custom formatter\", function () {\n      format.setFormatter(function () {\n        return \"formatted\";\n      });\n      assert.equals(format(\"Hey\"), \"formatted\");\n    });","file":"util/core/format-test.js","skipped":false,"dir":"test"},{"name":"throws if custom formatter is not a function","suites":["util/core/format","format.setFormatter"],"updatePoint":{"line":18,"column":52,"index":519},"line":18,"code":"    it(\"throws if custom formatter is not a function\", function () {\n      assert.exception(function () {\n        format.setFormatter(\"foo\");\n      }, {\n        message: \"format.setFormatter must be called with a function\"\n      });\n    });","file":"util/core/format-test.js","skipped":false,"dir":"test"},{"name":"exposes method on sinon","suites":["util/core/format","format.setFormatter"],"updatePoint":{"line":25,"column":31,"index":739},"line":25,"code":"    it(\"exposes method on sinon\", function () {\n      assert.equals(sinon.setFormatter, format.setFormatter);\n    });","file":"util/core/format-test.js","skipped":false,"dir":"test"},{"name":"returns function's displayName property","suites":["util/core/functionToString"],"updatePoint":{"line":11,"column":45,"index":323},"line":11,"code":"  it(\"returns function's displayName property\", function () {\n    var fn = function () {\n      return;\n    };\n\n    fn.displayName = \"Larry\";\n    assert.equals(functionToString.call(fn), \"Larry\");\n  });","file":"util/core/function-to-string-test.js","skipped":false,"dir":"test"},{"name":"guesses name from last call's this object","suites":["util/core/functionToString"],"updatePoint":{"line":19,"column":47,"index":527},"line":19,"code":"  it(\"guesses name from last call's this object\", function () {\n    var obj = {};\n    obj.doStuff = createSpy();\n    obj.doStuff.call({});\n    obj.doStuff();\n    assert.equals(functionToString.call(obj.doStuff), \"doStuff\");\n  });","file":"util/core/function-to-string-test.js","skipped":false,"dir":"test"},{"name":"guesses name from any call where property can be located","suites":["util/core/functionToString"],"updatePoint":{"line":26,"column":62,"index":772},"line":26,"code":"  it(\"guesses name from any call where property can be located\", function () {\n    var obj = {};\n    var otherObj = {\n      id: 42\n    };\n    obj.doStuff = createSpy();\n    obj.doStuff.call({});\n    obj.doStuff();\n    obj.doStuff.call(otherObj);\n    assert.equals(functionToString.call(obj.doStuff), \"doStuff\");\n  }); // https://github.com/sinonjs/sinon/issues/2215","file":"util/core/function-to-string-test.js","skipped":false,"dir":"test"},{"name":"ignores errors thrown by property accessors on thisValue","suites":["util/core/functionToString"],"updatePoint":{"line":38,"column":62,"index":1139},"line":38,"code":"  it(\"ignores errors thrown by property accessors on thisValue\", function () {\n    var obj = {};\n    Object.defineProperty(obj, \"foo\", {\n      enumerable: true,\n      get: function () {\n        throw new Error();\n      }\n    }); // this will cause `fn` to be after `foo` when enumerated\n\n    obj.fn = function () {\n      return \"foo\";\n    }; // validate that the keys are in the expected order that will cause the bug\n\n\n    var keys = Object.keys(obj);\n    assert.equals(keys[0], \"foo\");\n    assert.equals(keys[1], \"fn\");\n    var spy = createSpy(obj, \"fn\");\n    obj.fn();\n    assert.equals(spy.toString(), \"fn\");\n  });","file":"util/core/function-to-string-test.js","skipped":false,"dir":"test"},{"name":"gets copy of default config","suites":["core/util/getConfig",".getConfig"],"updatePoint":{"line":13,"column":35,"index":361},"line":13,"code":"    it(\"gets copy of default config\", function () {\n      var config = getConfig();\n      refute.same(config, defaultConfig);\n      assert.equals(config.injectInto, defaultConfig.injectInto);\n      assert.equals(config.properties, defaultConfig.properties);\n      assert.equals(config.useFakeTimers, defaultConfig.useFakeTimers);\n      assert.equals(config.useFakeServer, defaultConfig.useFakeServer);\n    });","file":"util/core/get-config-test.js","skipped":false,"dir":"test"},{"name":"should override specified properties","suites":["core/util/getConfig",".getConfig"],"updatePoint":{"line":21,"column":44,"index":780},"line":21,"code":"    it(\"should override specified properties\", function () {\n      var config = getConfig({\n        properties: [\"stub\", \"mock\"],\n        useFakeServer: false\n      });\n      refute.same(config, defaultConfig);\n      assert.equals(config.injectInto, defaultConfig.injectInto);\n      assert.equals(config.properties, [\"stub\", \"mock\"]);\n      assert.equals(config.useFakeTimers, defaultConfig.useFakeTimers);\n      assert.isFalse(config.useFakeServer);\n    });","file":"util/core/get-config-test.js","skipped":false,"dir":"test"},{"name":"should use process.nextTick when available","suites":["util/core/get-next-tick"],"updatePoint":{"line":9,"column":48,"index":261},"line":9,"code":"  it(\"should use process.nextTick when available\", function () {\n    var mockProcess = {\n      nextTick: function () {\n        return;\n      }\n    };\n    assert.same(getNextTick(mockProcess), mockProcess.nextTick);\n  });","file":"util/core/get-next-tick-test.js","skipped":false,"dir":"test"},{"name":"should use setImmediate when process.nextTick is not available","suites":["util/core/get-next-tick"],"updatePoint":{"line":17,"column":68,"index":502},"line":17,"code":"  it(\"should use setImmediate when process.nextTick is not available\", function () {\n    function mockSetImmediate() {\n      return;\n    }\n\n    assert.same(getNextTick(undefined, mockSetImmediate), mockSetImmediate);\n  });","file":"util/core/get-next-tick-test.js","skipped":false,"dir":"test"},{"name":"should fallback to setTimeout","suites":["util/core/get-next-tick"],"updatePoint":{"line":24,"column":35,"index":692},"line":24,"code":"  it(\"should fallback to setTimeout\", function () {\n    var nextTick = getNextTick(undefined, undefined);\n    assert.isFunction(nextTick);\n    assert.contains(String(nextTick), \"setTimeout(\");\n  });","file":"util/core/get-next-tick-test.js","skipped":false,"dir":"test"},{"name":"should use fallback","suites":["util/core/next-tick","browser environment"],"updatePoint":{"line":17,"column":27,"index":530},"line":17,"code":"    it(\"should use fallback\", function () {\n      assert.isFunction(nextTick);\n      assert.contains(String(nextTick), \"setTimeout(\");\n    });","file":"util/core/next-tick-test.js","skipped":false,"dir":"test"},{"name":"should use process.nextTick","suites":["util/core/next-tick","modern node environment"],"updatePoint":{"line":28,"column":35,"index":827},"line":28,"code":"    it(\"should use process.nextTick\", function () {\n      assert.same(nextTick, process.nextTick);\n    });","file":"util/core/next-tick-test.js","skipped":false,"dir":"test"},{"name":"should use setImmediate","suites":["util/core/next-tick","old node environment"],"updatePoint":{"line":38,"column":31,"index":1092},"line":38,"code":"    it(\"should use setImmediate\", function () {\n      assert.same(nextTick, setImmediate);\n    });","file":"util/core/next-tick-test.js","skipped":false,"dir":"test"},{"name":"should return \"once\" for input of 1","suites":["util/core/timesInWords"],"updatePoint":{"line":9,"column":41,"index":255},"line":9,"code":"  it('should return \"once\" for input of 1', function () {\n    var result = timesInWords(1);\n    assert.equals(result, \"once\");\n  });","file":"util/core/times-in-words-test.js","skipped":false,"dir":"test"},{"name":"should return \"twice\" for input of 2","suites":["util/core/timesInWords"],"updatePoint":{"line":13,"column":42,"index":389},"line":13,"code":"  it('should return \"twice\" for input of 2', function () {\n    var result = timesInWords(2);\n    assert.equals(result, \"twice\");\n  });","file":"util/core/times-in-words-test.js","skipped":false,"dir":"test"},{"name":"should return \"thrice\" for input of 3","suites":["util/core/timesInWords"],"updatePoint":{"line":17,"column":43,"index":525},"line":17,"code":"  it('should return \"thrice\" for input of 3', function () {\n    var result = timesInWords(3);\n    assert.equals(result, \"thrice\");\n  });","file":"util/core/times-in-words-test.js","skipped":false,"dir":"test"},{"name":"should return \"n times\" for n larger than 3","suites":["util/core/timesInWords"],"updatePoint":{"line":21,"column":49,"index":668},"line":21,"code":"  it('should return \"n times\" for n larger than 3', function () {\n    var result, i;\n\n    for (i = 4; i < 100; i++) {\n      result = timesInWords(i);\n      assert.equals(result, `${i} times`);\n    }\n  });","file":"util/core/times-in-words-test.js","skipped":false,"dir":"test"},{"name":"should return \"0 times\" for falsy input","suites":["util/core/timesInWords"],"updatePoint":{"line":29,"column":45,"index":869},"line":29,"code":"  it('should return \"0 times\" for falsy input', function () {\n    var falsies = [0, NaN, null, false, undefined, \"\"];\n    var result, i;\n\n    for (i = 0; i < falsies.length; i++) {\n      result = timesInWords(falsies[i]);\n      assert.equals(result, \"0 times\");\n    }\n  });","file":"util/core/times-in-words-test.js","skipped":false,"dir":"test"},{"name":"should still identify functions in environments","suites":["util/core/walk-object","without function.name support"],"updatePoint":{"line":30,"column":55,"index":888},"line":30,"code":"    it(\"should still identify functions in environments\", function () {\n      assert.exception(function () {\n        walkObject(fnWithNoName, false);\n      }, {\n        message: \"Trying to fnWithNoName object but received false\"\n      });\n      assert.exception(function () {\n        walkObject(fnWithNoName, {});\n      }, {\n        message: \"Expected to fnWithNoName methods on object but found none\"\n      });\n    });","file":"util/core/walk-object-test.js","skipped":false,"dir":"test"},{"name":"should work with anonymous functions","suites":["util/core/walk-object","without function.name support"],"updatePoint":{"line":42,"column":44,"index":1297},"line":42,"code":"    it(\"should work with anonymous functions\", function () {\n      assert.exception(function () {\n        walkObject(anonymousFn, false);\n      }, {\n        message: \"Trying to undefined object but received false\"\n      });\n      assert.exception(function () {\n        walkObject(anonymousFn, {});\n      }, {\n        message: \"Expected to undefined methods on object but found none\"\n      });\n    });","file":"util/core/walk-object-test.js","skipped":false,"dir":"test"},{"name":"should call iterator with value, key, and obj, with context as the receiver","suites":["util/core/walk"],"updatePoint":{"line":11,"column":81,"index":321},"line":11,"code":"  it(\"should call iterator with value, key, and obj, with context as the receiver\", function () {\n    var target = Object.create(null);\n    var rcvr = {};\n    var iterator = createSpy();\n    target.hello = \"world\";\n    target.foo = 15;\n    walk(target, iterator, rcvr);\n    assert(iterator.calledTwice);\n    assert(iterator.alwaysCalledOn(rcvr));\n    assert(iterator.calledWithExactly(\"hello\", target));\n    assert(iterator.calledWithExactly(\"foo\", target));\n  });","file":"util/core/walk-test.js","skipped":false,"dir":"test"},{"name":"should work with non-enumerable properties","suites":["util/core/walk"],"updatePoint":{"line":23,"column":48,"index":753},"line":23,"code":"  it(\"should work with non-enumerable properties\", function () {\n    var target = Object.create(null);\n    var iterator = createSpy();\n    target.hello = \"world\";\n    Object.defineProperty(target, \"foo\", {\n      value: 15\n    });\n    walk(target, iterator);\n    assert(iterator.calledTwice);\n    assert(iterator.calledWith(\"hello\"));\n    assert(iterator.calledWith(\"foo\"));\n  });","file":"util/core/walk-test.js","skipped":false,"dir":"test"},{"name":"should walk the prototype chain of an object","suites":["util/core/walk"],"updatePoint":{"line":35,"column":50,"index":1135},"line":35,"code":"  it(\"should walk the prototype chain of an object\", function () {\n    var parentProto, proto, target, iterator;\n    parentProto = Object.create(null, {\n      nonEnumerableParentProp: {\n        value: \"non-enumerable parent prop\"\n      },\n      enumerableParentProp: {\n        value: \"enumerable parent prop\",\n        enumerable: true\n      }\n    });\n    proto = Object.create(parentProto, {\n      nonEnumerableProp: {\n        value: \"non-enumerable prop\"\n      },\n      enumerableProp: {\n        value: \"enumerable prop\",\n        enumerable: true\n      }\n    });\n    target = Object.create(proto, {\n      nonEnumerableOwnProp: {\n        value: \"non-enumerable own prop\"\n      },\n      enumerableOwnProp: {\n        value: \"enumerable own prop\",\n        enumerable: true\n      }\n    });\n    iterator = createSpy();\n    walk(target, iterator);\n    assert.equals(iterator.callCount, 6);\n    assert(iterator.calledWith(\"nonEnumerableOwnProp\", target));\n    assert(iterator.calledWith(\"enumerableOwnProp\", target));\n    assert(iterator.calledWith(\"nonEnumerableProp\", proto));\n    assert(iterator.calledWith(\"enumerableProp\", proto));\n    assert(iterator.calledWith(\"nonEnumerableParentProp\", parentProto));\n    assert(iterator.calledWith(\"enumerableParentProp\", parentProto));\n  });","file":"util/core/walk-test.js","skipped":false,"dir":"test"},{"name":"should not invoke getters on the original receiving object","suites":["util/core/walk"],"updatePoint":{"line":74,"column":64,"index":2428},"line":74,"code":"  it(\"should not invoke getters on the original receiving object\", function () {\n    var Target = function Target() {\n      return;\n    };\n\n    var getter = createSpy();\n    Object.defineProperty(Target.prototype, \"computedFoo\", {\n      enumerable: true,\n      get: getter\n    });\n    var target = new Target();\n    var iterator = createSpy();\n    walk(target, iterator);\n    assert(iterator.calledWith(\"computedFoo\", target));\n    assert(getter.notCalled);\n  });","file":"util/core/walk-test.js","skipped":false,"dir":"test"},{"name":"should fall back to for..in if getOwnPropertyNames is not available","suites":["util/core/walk"],"updatePoint":{"line":90,"column":73,"index":2901},"line":90,"code":"  it(\"should fall back to for..in if getOwnPropertyNames is not available\", function () {\n    var getOwnPropertyNames = Object.getOwnPropertyNames;\n\n    var Target = function Target() {\n      this.hello = \"world\";\n    };\n\n    var target = new Target();\n    var rcvr = {};\n    var iterator = createSpy();\n    var err = null;\n    var numCalls = 0;\n    var placeholder;\n    Target.prototype.foo = 15;\n    Object.getOwnPropertyNames = null; // Different environments may be inconsistent in how they handle for..in, therefore we\n    // use it to track the number of expected calls, rather than setting it to a hard\n    // number.\n\n    /* eslint-disable guard-for-in, no-unused-vars */\n\n    for (placeholder in target) {\n      numCalls++;\n    }\n    /* eslint-enable guard-for-in, no-unused-vars */\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    try {\n      walk(target, iterator, rcvr);\n      assert.equals(iterator.callCount, numCalls);\n      assert(iterator.alwaysCalledOn(rcvr));\n      assert(iterator.calledWith(\"world\", \"hello\"));\n      assert(iterator.calledWith(15, \"foo\"));\n    } catch (e) {\n      err = e;\n    } finally {\n      Object.getOwnPropertyNames = getOwnPropertyNames;\n    }\n\n    assert.isNull(err, `walk tests failed with message '${err && err.message}'`);\n  });","file":"util/core/walk-test.js","skipped":false,"dir":"test"},{"name":"does not walk the same property twice","suites":["util/core/walk"],"updatePoint":{"line":131,"column":43,"index":4159},"line":131,"code":"  it(\"does not walk the same property twice\", function () {\n    var parent = {\n      func: function parentFunc() {\n        return;\n      }\n    };\n    var child = Object.create(parent);\n\n    child.func = function childFunc() {\n      return;\n    };\n\n    var iterator = createSpy();\n    walk(child, iterator);\n    var propertyNames = iterator.args.map(function (call) {\n      return call[0];\n    }); // make sure that each property name only exists once\n\n    propertyNames.forEach(function (name, index) {\n      assert.equals(index, propertyNames.lastIndexOf(name));\n    });\n  });","file":"util/core/walk-test.js","skipped":false,"dir":"test"},{"name":"is function","suites":["util/core/wrapMethod"],"updatePoint":{"line":36,"column":17,"index":741},"line":36,"code":"  it(\"is function\", function () {\n    assert.isFunction(wrapMethod);\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if first argument is not object","suites":["util/core/wrapMethod"],"updatePoint":{"line":39,"column":44,"index":843},"line":39,"code":"  it(\"throws if first argument is not object\", function () {\n    assert.exception(function () {\n      wrapMethod();\n    }, {\n      name: \"TypeError\"\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if object defines property but is not function","suites":["util/core/wrapMethod"],"updatePoint":{"line":46,"column":59,"index":1021},"line":46,"code":"  it(\"throws if object defines property but is not function\", function () {\n    this.object.prop = 42;\n    var object = this.object;\n    assert.exception(function () {\n      wrapMethod(object, \"prop\", function () {\n        return;\n      });\n    }, {\n      name: \"TypeError\"\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws Symbol() if object defines property but is not function","suites":["util/core/wrapMethod"],"updatePoint":{"line":57,"column":68,"index":1318},"line":57,"code":"  it(\"throws Symbol() if object defines property but is not function\", function () {\n    if (typeof Symbol !== \"function\") {\n      this.skip();\n    }\n\n    var symbol = Symbol(\"apple pie\");\n    var object = {};\n    object[symbol] = 42;\n    assert.exception(function () {\n      wrapMethod(object, symbol, function () {\n        return;\n      });\n    }, function (err) {\n      return err.message === \"Attempted to wrap number property Symbol(apple pie) as function\";\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if object does not define property","suites":["util/core/wrapMethod"],"updatePoint":{"line":73,"column":47,"index":1774},"line":73,"code":"  it(\"throws if object does not define property\", function () {\n    var object = this.object;\n    assert.exception(function () {\n      wrapMethod(object, \"prop\", function () {\n        return;\n      });\n    });\n    assert.exception(function () {\n      wrapMethod(object, \"prop\", function () {\n        return;\n      });\n    }, {\n      message: /Attempted to wrap .* property .* as function/\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if third argument is missing","suites":["util/core/wrapMethod"],"updatePoint":{"line":88,"column":41,"index":2171},"line":88,"code":"  it(\"throws if third argument is missing\", function () {\n    var object = this.object;\n    assert.exception(function () {\n      wrapMethod(object, \"method\");\n    }, {\n      name: \"TypeError\"\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if third argument is not a function or a property descriptor","suites":["util/core/wrapMethod"],"updatePoint":{"line":96,"column":73,"index":2409},"line":96,"code":"  it(\"throws if third argument is not a function or a property descriptor\", function () {\n    var object = this.object;\n    assert.exception(function () {\n      wrapMethod(object, \"method\", 1);\n    }, {\n      name: \"TypeError\"\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"replaces object method","suites":["util/core/wrapMethod"],"updatePoint":{"line":104,"column":28,"index":2605},"line":104,"code":"  it(\"replaces object method\", function () {\n    wrapMethod(this.object, \"method\", function () {\n      return;\n    });\n    refute.same(this.method, this.object.method);\n    assert.isFunction(this.object.method);\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"replaces getter","suites":["util/core/wrapMethod"],"updatePoint":{"line":111,"column":21,"index":2816},"line":111,"code":"  it(\"replaces getter\", function () {\n    wrapMethod(this.object, \"property\", {\n      get: function () {\n        return;\n      }\n    });\n    refute.same(this.getter, Object.getOwnPropertyDescriptor(this.object, \"property\").get);\n    assert.isFunction(Object.getOwnPropertyDescriptor(this.object, \"property\").get);\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"replaces setter","suites":["util/core/wrapMethod"],"updatePoint":{"line":120,"column":21,"index":3136},"line":120,"code":"  it(\"replaces setter\", function () {\n    wrapMethod(this.object, \"property\", {\n      // eslint-disable-line accessor-pairs\n      set: function () {\n        return;\n      }\n    });\n    refute.same(this.setter, Object.getOwnPropertyDescriptor(this.object, \"property\").set);\n    assert.isFunction(Object.getOwnPropertyDescriptor(this.object, \"property\").set);\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if method is already wrapped","suites":["util/core/wrapMethod"],"updatePoint":{"line":130,"column":41,"index":3520},"line":130,"code":"  it(\"throws if method is already wrapped\", function () {\n    wrapMethod(this.object, \"method\", function () {\n      return;\n    });\n    assert.exception(function () {\n      wrapMethod(this.object, \"method\", function () {\n        return;\n      });\n    }, {\n      name: \"TypeError\"\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws Symbol if method is already wrapped","suites":["util/core/wrapMethod"],"updatePoint":{"line":142,"column":48,"index":3821},"line":142,"code":"  it(\"throws Symbol if method is already wrapped\", function () {\n    if (typeof Symbol !== \"function\") {\n      this.skip();\n    }\n\n    var symbol = Symbol(\"apple pie\");\n    var object = {};\n\n    object[symbol] = function () {\n      return;\n    };\n\n    wrapMethod(object, symbol, function () {\n      return;\n    });\n    assert.exception(function () {\n      wrapMethod(object, symbol, function () {\n        return;\n      });\n    }, function (err) {\n      return err.message === \"Attempted to wrap Symbol(apple pie) which is already wrapped\";\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if property descriptor is already wrapped","suites":["util/core/wrapMethod"],"updatePoint":{"line":165,"column":54,"index":4381},"line":165,"code":"  it(\"throws if property descriptor is already wrapped\", function () {\n    wrapMethod(this.object, \"property\", {\n      get: function () {\n        return;\n      }\n    });\n    assert.exception(function () {\n      wrapMethod(this.object, \"property\", {\n        get: function () {\n          return;\n        }\n      });\n    }, {\n      name: \"TypeError\"\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if method is already a spy","suites":["util/core/wrapMethod"],"updatePoint":{"line":181,"column":39,"index":4727},"line":181,"code":"  it(\"throws if method is already a spy\", function () {\n    var object = {\n      method: createSpy()\n    };\n    assert.exception(function () {\n      wrapMethod(object, \"method\", function () {\n        return;\n      });\n    }, {\n      name: \"TypeError\"\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if Symbol method is already a spy","suites":["util/core/wrapMethod"],"updatePoint":{"line":193,"column":46,"index":4999},"line":193,"code":"  it(\"throws if Symbol method is already a spy\", function () {\n    if (typeof Symbol !== \"function\") {\n      this.skip();\n    }\n\n    var symbol = Symbol(\"apple pie\");\n    var object = {};\n    object[symbol] = createSpy();\n    assert.exception(function () {\n      wrapMethod(object, symbol, function () {\n        return;\n      });\n    }, function (err) {\n      return err.message === \"Attempted to wrap Symbol(apple pie) which is already spied on\";\n    });\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws with stack trace showing original wrapMethod call","suites":["util/core/wrapMethod","originating stack traces"],"updatePoint":{"line":225,"column":64,"index":6044},"line":225,"code":"    it(\"throws with stack trace showing original wrapMethod call\", function () {\n      var object = {\n        method: function () {\n          return;\n        }\n      };\n      wrapMethod(object, \"method\", function () {\n        return \"original\";\n      });\n      assert.exception(function () {\n        wrapMethod(object, \"method\", function () {\n          return;\n        });\n      }, {\n        stack: \":STACK2:\\n--------------\\n:STACK1:\"\n      });\n    });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"does not throw if object is window object","suites":["util/core/wrapMethod","in browser"],"updatePoint":{"line":249,"column":49,"index":6633},"line":249,"code":"    it(\"does not throw if object is window object\", function () {\n      window.sinonTestMethod = function () {\n        return;\n      };\n\n      refute.exception(function () {\n        wrapMethod(window, \"sinonTestMethod\", function () {\n          return;\n        });\n      });\n    });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"mirrors function properties","suites":["util/core/wrapMethod","in browser"],"updatePoint":{"line":261,"column":33,"index":6905},"line":261,"code":"  it(\"mirrors function properties\", function () {\n    var object = {\n      method: function () {\n        return;\n      }\n    };\n    object.method.prop = 42;\n    wrapMethod(object, \"method\", function () {\n      return;\n    });\n    assert.equals(object.method.prop, 42);\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"does not mirror and overwrite existing properties","suites":["util/core/wrapMethod","in browser"],"updatePoint":{"line":273,"column":55,"index":7202},"line":273,"code":"  it(\"does not mirror and overwrite existing properties\", function () {\n    var object = {\n      method: function () {\n        return;\n      }\n    };\n    object.method.called = 42;\n    createStub(object, \"method\");\n    assert.isFalse(object.method.called);\n  });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"defines restore method","suites":["util/core/wrapMethod","wrapped method"],"updatePoint":{"line":293,"column":30,"index":7639},"line":293,"code":"    it(\"defines restore method\", function () {\n      wrapMethod(this.object, \"method\", function () {\n        return;\n      });\n      assert.isFunction(this.object.method.restore);\n    });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"returns wrapper","suites":["util/core/wrapMethod","wrapped method"],"updatePoint":{"line":299,"column":23,"index":7820},"line":299,"code":"    it(\"returns wrapper\", function () {\n      var wrapper = wrapMethod(this.object, \"method\", function () {\n        return;\n      });\n      assert.same(this.object.method, wrapper);\n    });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"restore brings back original method","suites":["util/core/wrapMethod","wrapped method"],"updatePoint":{"line":305,"column":43,"index":8030},"line":305,"code":"    it(\"restore brings back original method\", function () {\n      wrapMethod(this.object, \"method\", function () {\n        return;\n      });\n      this.object.method.restore();\n      assert.same(this.object.method, this.method);\n    });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"wrap adds owned property","suites":["util/core/wrapMethod","wrapped prototype method"],"updatePoint":{"line":325,"column":32,"index":8551},"line":325,"code":"    it(\"wrap adds owned property\", function () {\n      var wrapper = wrapMethod(this.object, \"method\", function () {\n        return;\n      });\n      assert.same(this.object.method, wrapper);\n      assert(this.object.hasOwnProperty(\"method\"));\n    });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"restore removes owned property","suites":["util/core/wrapMethod","wrapped prototype method"],"updatePoint":{"line":332,"column":38,"index":8808},"line":332,"code":"    it(\"restore removes owned property\", function () {\n      wrapMethod(this.object, \"method\", function () {\n        return;\n      });\n      this.object.method.restore();\n      assert.same(this.object.method, this.type.prototype.method);\n      assert.isFalse(this.object.hasOwnProperty(\"method\"));\n    });","file":"util/core/wrap-method-test.js","skipped":false,"dir":"test"},{"name":"throws if no arguments","suites":["fakeTimers.clock",".setTimeout"],"updatePoint":{"line":46,"column":30,"index":1425},"line":46,"code":"    it(\"throws if no arguments\", function () {\n      var clock = this.clock;\n      assert.exception(function () {\n        clock.setTimeout();\n      });\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns a timer id whose primitive representation is a number","suites":["fakeTimers.clock",".setTimeout"],"updatePoint":{"line":52,"column":69,"index":1624},"line":52,"code":"    it(\"returns a timer id whose primitive representation is a number\", function () {\n      // eslint-disable-next-line no-empty-function\n      var noop = function () {};\n\n      var result = this.clock.setTimeout(noop);\n      assert.isNumber(Number(result));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns unique id","suites":["fakeTimers.clock",".setTimeout"],"updatePoint":{"line":59,"column":25,"index":1847},"line":59,"code":"    it(\"returns unique id\", function () {\n      // eslint-disable-next-line no-empty-function\n      var noop = function () {};\n\n      var id1 = this.clock.setTimeout(noop);\n      var id2 = this.clock.setTimeout(noop);\n      refute.equals(id2, id1);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"sets timers on instance","suites":["fakeTimers.clock",".setTimeout"],"updatePoint":{"line":67,"column":31,"index":2110},"line":67,"code":"    it(\"sets timers on instance\", function () {\n      var clock1 = fakeTimers.clock.create();\n      var clock2 = fakeTimers.clock.create();\n      var stubs = [sinonStub(), sinonStub()];\n      clock1.setTimeout(stubs[0], 100);\n      clock2.setTimeout(stubs[1], 100);\n      clock2.tick(200);\n      assert.isFalse(stubs[0].called);\n      assert(stubs[1].called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"throws on non-function callbacks","suites":["fakeTimers.clock",".setTimeout"],"updatePoint":{"line":79,"column":42,"index":2523},"line":79,"code":"      it(\"throws on non-function callbacks\", function () {\n        var string = \"apple pie\";\n        assert.exception(function () {\n          this.clock.setTimeout(string, 10);\n        }.bind(this), {\n          message: \"[ERR_INVALID_CALLBACK]: Callback must be a function. Received apple pie of type string\"\n        });\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"passes setTimeout parameters","suites":["fakeTimers.clock",".setTimeout"],"updatePoint":{"line":89,"column":36,"index":2855},"line":89,"code":"    it(\"passes setTimeout parameters\", function () {\n      var clock = fakeTimers.clock.create();\n      var stub = sinonStub();\n      clock.setTimeout(stub, 2, \"the first\", \"the second\");\n      clock.tick(3);\n      assert.isTrue(stub.calledWithExactly(\"the first\", \"the second\"));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"calls correct timeout on recursive tick","suites":["fakeTimers.clock",".setTimeout"],"updatePoint":{"line":96,"column":47,"index":3155},"line":96,"code":"    it(\"calls correct timeout on recursive tick\", function () {\n      var clock = fakeTimers.clock.create();\n      var stub = sinonStub();\n\n      var recurseCallback = function () {\n        clock.tick(100);\n      };\n\n      clock.setTimeout(recurseCallback, 50);\n      clock.setTimeout(stub, 100);\n      clock.tick(50);\n      assert(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns a timer whose primitive representation is a number","suites":["fakeTimers.clock",".setImmediate"],"updatePoint":{"line":116,"column":68,"index":3708},"line":116,"code":"      it(\"returns a timer whose primitive representation is a number\", function () {\n        var result = this.clock.setImmediate(function () {\n          return;\n        });\n        assert.isNumber(Number(result));\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"calls the given callback immediately","suites":["fakeTimers.clock",".setImmediate"],"updatePoint":{"line":122,"column":46,"index":3911},"line":122,"code":"      it(\"calls the given callback immediately\", function () {\n        var stub = sinonStub();\n        this.clock.setImmediate(stub);\n        this.clock.tick(0);\n        assert(stub.called);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"throws if no arguments","suites":["fakeTimers.clock",".setImmediate"],"updatePoint":{"line":128,"column":32,"index":4098},"line":128,"code":"      it(\"throws if no arguments\", function () {\n        var clock = this.clock;\n        assert.exception(function () {\n          clock.setImmediate();\n        });\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"manages separate timers per clock instance","suites":["fakeTimers.clock",".setImmediate"],"updatePoint":{"line":134,"column":52,"index":4292},"line":134,"code":"      it(\"manages separate timers per clock instance\", function () {\n        var clock1 = fakeTimers.clock.create();\n        var clock2 = fakeTimers.clock.create();\n        var stubs = [sinonStub(), sinonStub()];\n        clock1.setImmediate(stubs[0]);\n        clock2.setImmediate(stubs[1]);\n        clock2.tick(0);\n        assert.isFalse(stubs[0].called);\n        assert(stubs[1].called);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"passes extra parameters through to the callback","suites":["fakeTimers.clock",".setImmediate"],"updatePoint":{"line":144,"column":57,"index":4696},"line":144,"code":"      it(\"passes extra parameters through to the callback\", function () {\n        var stub = sinonStub();\n        this.clock.setImmediate(stub, \"value1\", 2);\n        this.clock.tick(1);\n        assert(stub.calledWithExactly(\"value1\", 2));\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"shouldn't install setImmediate","suites":["fakeTimers.clock",".setImmediate"],"updatePoint":{"line":151,"column":40,"index":4941},"line":151,"code":"      it(\"shouldn't install setImmediate\", function () {\n        refute.isFunction(this.clock.setImmediate);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"removes immediate callbacks","suites":["fakeTimers.clock",".clearImmediate"],"updatePoint":{"line":162,"column":37,"index":5245},"line":162,"code":"      it(\"removes immediate callbacks\", function () {\n        var callback = sinonStub();\n        var id = this.clock.setImmediate(callback);\n        this.clock.clearImmediate(id);\n        this.clock.tick(1);\n        assert.isFalse(callback.called);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"shouldn't install clearImmediate","suites":["fakeTimers.clock",".clearImmediate"],"updatePoint":{"line":170,"column":42,"index":5523},"line":170,"code":"      it(\"shouldn't install clearImmediate\", function () {\n        refute.isFunction(this.clock.clearImmediate);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers immediately without specified delay","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":182,"column":52,"index":5851},"line":182,"code":"    it(\"triggers immediately without specified delay\", function () {\n      var stub = sinonStub();\n      this.clock.setTimeout(stub);\n      this.clock.tick(0);\n      assert(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"does not trigger without sufficient delay","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":188,"column":49,"index":6043},"line":188,"code":"    it(\"does not trigger without sufficient delay\", function () {\n      var stub = sinonStub();\n      this.clock.setTimeout(stub, 100);\n      this.clock.tick(10);\n      assert.isFalse(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers after sufficient delay","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":194,"column":39,"index":6239},"line":194,"code":"    it(\"triggers after sufficient delay\", function () {\n      var stub = sinonStub();\n      this.clock.setTimeout(stub, 100);\n      this.clock.tick(100);\n      assert(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers simultaneous timers","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":200,"column":36,"index":6425},"line":200,"code":"    it(\"triggers simultaneous timers\", function () {\n      var spies = [sinonSpy(), sinonSpy()];\n      this.clock.setTimeout(spies[0], 100);\n      this.clock.setTimeout(spies[1], 100);\n      this.clock.tick(100);\n      assert(spies[0].called);\n      assert(spies[1].called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers multiple simultaneous timers","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":208,"column":45,"index":6717},"line":208,"code":"    it(\"triggers multiple simultaneous timers\", function () {\n      var spies = [sinonSpy(), sinonSpy(), sinonSpy(), sinonSpy()];\n      this.clock.setTimeout(spies[0], 100);\n      this.clock.setTimeout(spies[1], 100);\n      this.clock.setTimeout(spies[2], 99);\n      this.clock.setTimeout(spies[3], 100);\n      this.clock.tick(100);\n      assert(spies[0].called);\n      assert(spies[1].called);\n      assert(spies[2].called);\n      assert(spies[3].called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers multiple simultaneous timers with zero callAt","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":220,"column":62,"index":7199},"line":220,"code":"    it(\"triggers multiple simultaneous timers with zero callAt\", function () {\n      var test = this;\n      var spies = [sinonSpy(function () {\n        test.clock.setTimeout(spies[1], 0);\n      }), sinonSpy(), sinonSpy()]; // First spy calls another setTimeout with delay=0\n\n      this.clock.setTimeout(spies[0], 0);\n      this.clock.setTimeout(spies[2], 10);\n      this.clock.tick(10);\n      assert(spies[0].called);\n      assert(spies[1].called);\n      assert(spies[2].called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"waits after setTimeout was called","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":233,"column":41,"index":7666},"line":233,"code":"    it(\"waits after setTimeout was called\", function () {\n      this.clock.tick(100);\n      var stub = sinonStub();\n      this.clock.setTimeout(stub, 150);\n      this.clock.tick(50);\n      assert.isFalse(stub.called);\n      this.clock.tick(100);\n      assert(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"mini integration test","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":242,"column":29,"index":7935},"line":242,"code":"    it(\"mini integration test\", function () {\n      var stubs = [sinonStub(), sinonStub(), sinonStub()];\n      this.clock.setTimeout(stubs[0], 100);\n      this.clock.setTimeout(stubs[1], 120);\n      this.clock.tick(10);\n      this.clock.tick(89);\n      assert.isFalse(stubs[0].called);\n      assert.isFalse(stubs[1].called);\n      this.clock.setTimeout(stubs[2], 20);\n      this.clock.tick(1);\n      assert(stubs[0].called);\n      assert.isFalse(stubs[1].called);\n      assert.isFalse(stubs[2].called);\n      this.clock.tick(19);\n      assert.isFalse(stubs[1].called);\n      assert(stubs[2].called);\n      this.clock.tick(1);\n      assert(stubs[1].called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers even when some throw","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":261,"column":37,"index":8608},"line":261,"code":"    it(\"triggers even when some throw\", function () {\n      var clock = this.clock;\n      var stubs = [sinonStub().throws(), sinonStub()];\n      clock.setTimeout(stubs[0], 100);\n      clock.setTimeout(stubs[1], 120);\n      assert.exception(function () {\n        clock.tick(120);\n      });\n      assert(stubs[0].called);\n      assert(stubs[1].called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"calls function with global object or null (strict mode) as this","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":272,"column":71,"index":9001},"line":272,"code":"    it(\"calls function with global object or null (strict mode) as this\", function () {\n      var clock = this.clock;\n      var stub = sinonStub().throws();\n      clock.setTimeout(stub, 100);\n      assert.exception(function () {\n        clock.tick(100);\n      });\n      assert(stub.calledOn(this.global) || stub.calledOn(null));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers in the order scheduled","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":281,"column":39,"index":9306},"line":281,"code":"    it(\"triggers in the order scheduled\", function () {\n      var spies = [sinonSpy(), sinonSpy()];\n      this.clock.setTimeout(spies[0], 13);\n      this.clock.setTimeout(spies[1], 11);\n      this.clock.tick(15);\n      assert(spies[1].calledBefore(spies[0]));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates updated Date while ticking","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":288,"column":42,"index":9577},"line":288,"code":"    it(\"creates updated Date while ticking\", function () {\n      var spy = sinonSpy();\n      this.clock.setInterval(function () {\n        spy(new Date().getTime());\n      }, 10);\n      this.clock.tick(100);\n      assert.equals(spy.callCount, 10);\n      assert(spy.calledWith(10));\n      assert(spy.calledWith(20));\n      assert(spy.calledWith(30));\n      assert(spy.calledWith(40));\n      assert(spy.calledWith(50));\n      assert(spy.calledWith(60));\n      assert(spy.calledWith(70));\n      assert(spy.calledWith(80));\n      assert(spy.calledWith(90));\n      assert(spy.calledWith(100));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"fires timer in intervals of 13","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":306,"column":38,"index":10169},"line":306,"code":"    it(\"fires timer in intervals of 13\", function () {\n      var spy = sinonSpy();\n      this.clock.setInterval(spy, 13);\n      this.clock.tick(500);\n      assert.equals(spy.callCount, 38);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"fires timers in correct order","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":312,"column":37,"index":10366},"line":312,"code":"    it(\"fires timers in correct order\", function () {\n      this.timeout(5000);\n      var spy13 = sinonSpy();\n      var spy10 = sinonSpy();\n      this.clock.setInterval(function () {\n        spy13(new Date().getTime());\n      }, 13);\n      this.clock.setInterval(function () {\n        spy10(new Date().getTime());\n      }, 10);\n      this.clock.tick(500);\n      assert.equals(spy13.callCount, 38);\n      assert.equals(spy10.callCount, 50);\n      assert(spy13.calledWith(416));\n      assert(spy10.calledWith(320));\n      assert(spy10.getCall(0).calledBefore(spy13.getCall(0)));\n      assert(spy10.getCall(4).calledBefore(spy13.getCall(3)));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"triggers timeouts and intervals in the order scheduled","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":330,"column":62,"index":11039},"line":330,"code":"    it(\"triggers timeouts and intervals in the order scheduled\", function () {\n      var spies = [sinonSpy(), sinonSpy()];\n      this.clock.setInterval(spies[0], 10);\n      this.clock.setTimeout(spies[1], 50);\n      this.clock.tick(100);\n      assert(spies[0].calledBefore(spies[1]));\n      assert.equals(spies[0].callCount, 10);\n      assert.equals(spies[1].callCount, 1);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"does not fire canceled intervals","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":339,"column":40,"index":11399},"line":339,"code":"    it(\"does not fire canceled intervals\", function () {\n      var id;\n      var callback = sinonSpy(function () {\n        if (callback.callCount === 3) {\n          clearInterval(id);\n        }\n      });\n      id = this.clock.setInterval(callback, 10);\n      this.clock.tick(100);\n      assert.equals(callback.callCount, 3);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"passes 6 seconds","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":350,"column":24,"index":11716},"line":350,"code":"    it(\"passes 6 seconds\", function () {\n      var spy = sinonSpy();\n      this.clock.setInterval(spy, 4000);\n      this.clock.tick(\"08\");\n      assert.equals(spy.callCount, 2);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"passes 1 minute","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":356,"column":23,"index":11901},"line":356,"code":"    it(\"passes 1 minute\", function () {\n      var spy = sinonSpy();\n      this.clock.setInterval(spy, 6000);\n      this.clock.tick(\"01:00\");\n      assert.equals(spy.callCount, 10);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"passes 2 hours, 34 minutes and 12 seconds","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":362,"column":49,"index":12116},"line":362,"code":"    it(\"passes 2 hours, 34 minutes and 12 seconds\", function () {\n      this.timeout(50000);\n      var spy = sinonSpy();\n      this.clock.setInterval(spy, 10000);\n      this.clock.tick(\"02:34:10\");\n      assert.equals(spy.callCount, 925);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"throws for invalid format","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":369,"column":33,"index":12347},"line":369,"code":"    it(\"throws for invalid format\", function () {\n      var spy = sinonSpy();\n      this.clock.setInterval(spy, 10000);\n      var test = this;\n      assert.exception(function () {\n        test.clock.tick(\"12:02:34:10\");\n      });\n      assert.equals(spy.callCount, 0);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"throws for invalid minutes","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":378,"column":34,"index":12625},"line":378,"code":"    it(\"throws for invalid minutes\", function () {\n      var spy = sinonSpy();\n      this.clock.setInterval(spy, 10000);\n      var test = this;\n      assert.exception(function () {\n        test.clock.tick(\"67:10\");\n      });\n      assert.equals(spy.callCount, 0);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"throws for negative minutes","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":387,"column":35,"index":12898},"line":387,"code":"    it(\"throws for negative minutes\", function () {\n      var spy = sinonSpy();\n      this.clock.setInterval(spy, 10000);\n      var test = this;\n      assert.exception(function () {\n        test.clock.tick(\"-7:10\");\n      });\n      assert.equals(spy.callCount, 0);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"treats missing argument as 0","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":396,"column":36,"index":13172},"line":396,"code":"    it(\"treats missing argument as 0\", function () {\n      this.clock.tick();\n      assert.equals(this.clock.now, 0);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"fires nested setTimeout calls properly","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":400,"column":46,"index":13308},"line":400,"code":"    it(\"fires nested setTimeout calls properly\", function () {\n      var i = 0;\n      var clock = this.clock;\n\n      var callback = function () {\n        ++i;\n        clock.setTimeout(function () {\n          callback();\n        }, 100);\n      };\n\n      callback();\n      clock.tick(1000);\n      assert.equals(i, 11);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"does not silently catch exceptions","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":415,"column":42,"index":13629},"line":415,"code":"    it(\"does not silently catch exceptions\", function () {\n      var clock = this.clock;\n      clock.setTimeout(function () {\n        throw new Error(\"oh no!\");\n      }, 1000);\n      assert.exception(function () {\n        clock.tick(1000);\n      });\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns the current now value","suites":["fakeTimers.clock",".tick"],"updatePoint":{"line":424,"column":37,"index":13882},"line":424,"code":"    it(\"returns the current now value\", function () {\n      var clock = this.clock;\n      var value = clock.tick(200);\n      assert.equals(clock.now, value);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"removes timeout","suites":["fakeTimers.clock",".clearTimeout"],"updatePoint":{"line":434,"column":23,"index":14165},"line":434,"code":"    it(\"removes timeout\", function () {\n      var stub = sinonStub();\n      var id = this.clock.setTimeout(stub, 50);\n      this.clock.clearTimeout(id);\n      this.clock.tick(50);\n      assert.isFalse(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"ignores null argument","suites":["fakeTimers.clock",".clearTimeout"],"updatePoint":{"line":441,"column":29,"index":14394},"line":441,"code":"    it(\"ignores null argument\", function () {\n      this.clock.clearTimeout(null);\n      assert(true); // doesn't fail\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"empties timeouts queue","suites":["fakeTimers.clock",".reset"],"updatePoint":{"line":450,"column":30,"index":14646},"line":450,"code":"    it(\"empties timeouts queue\", function () {\n      var stub = sinonStub();\n      this.clock.setTimeout(stub);\n      this.clock.reset();\n      this.clock.tick(0);\n      assert.isFalse(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"throws if no arguments","suites":["fakeTimers.clock",".setInterval"],"updatePoint":{"line":462,"column":30,"index":14983},"line":462,"code":"    it(\"throws if no arguments\", function () {\n      var clock = this.clock;\n      assert.exception(function () {\n        clock.setInterval();\n      });\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns a timer whose primitive representation is a number","suites":["fakeTimers.clock",".setInterval"],"updatePoint":{"line":468,"column":66,"index":15180},"line":468,"code":"    it(\"returns a timer whose primitive representation is a number\", function () {\n      // eslint-disable-next-line no-empty-function\n      var noop = function () {};\n\n      var result = this.clock.setInterval(noop);\n      assert.isNumber(Number(result));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns unique id","suites":["fakeTimers.clock",".setInterval"],"updatePoint":{"line":475,"column":25,"index":15404},"line":475,"code":"    it(\"returns unique id\", function () {\n      // eslint-disable-next-line no-empty-function\n      var noop = function () {};\n\n      var id1 = this.clock.setInterval(noop);\n      var id2 = this.clock.setInterval(noop);\n      refute.equals(id2, id1);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"schedules recurring timeout","suites":["fakeTimers.clock",".setInterval"],"updatePoint":{"line":483,"column":35,"index":15673},"line":483,"code":"    it(\"schedules recurring timeout\", function () {\n      var stub = sinonStub();\n      this.clock.setInterval(stub, 10);\n      this.clock.tick(99);\n      assert.equals(stub.callCount, 9);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"does not schedule recurring timeout when cleared","suites":["fakeTimers.clock",".setInterval"],"updatePoint":{"line":489,"column":56,"index":15891},"line":489,"code":"    it(\"does not schedule recurring timeout when cleared\", function () {\n      var clock = this.clock;\n      var id;\n      var stub = sinonSpy(function () {\n        if (stub.callCount === 3) {\n          clock.clearInterval(id);\n        }\n      });\n      id = this.clock.setInterval(stub, 10);\n      this.clock.tick(100);\n      assert.equals(stub.callCount, 3);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"passes setTimeout parameters","suites":["fakeTimers.clock",".setInterval"],"updatePoint":{"line":501,"column":36,"index":16240},"line":501,"code":"    it(\"passes setTimeout parameters\", function () {\n      var clock = fakeTimers.clock.create();\n      var stub = sinonStub();\n      clock.setInterval(stub, 2, \"the first\", \"the second\");\n      clock.tick(3);\n      assert.isTrue(stub.calledWithExactly(\"the first\", \"the second\"));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"provides date constructor","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":518,"column":33,"index":16818},"line":518,"code":"    it(\"provides date constructor\", function () {\n      assert.isFunction(this.clock.Date);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates real Date objects","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":521,"column":33,"index":16918},"line":521,"code":"    it(\"creates real Date objects\", function () {\n      var date = new this.clock.Date();\n      assert(Date.prototype.isPrototypeOf(date));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates date strings when called as function","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":525,"column":52,"index":17085},"line":525,"code":"    it(\"creates date strings when called as function\", function () {\n      var date = this.clock.Date();\n      assert.isString(date);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates real Date objects when Date constructor is gone","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":529,"column":63,"index":17238},"line":529,"code":"    it(\"creates real Date objects when Date constructor is gone\", function () {\n      var realDate = new Date(); // eslint-disable-next-line no-global-assign, no-native-reassign\n\n      Date = function () {\n        return;\n      };\n\n      this.global.Date = function () {\n        return;\n      };\n\n      var date = new this.clock.Date(); // restore directly after use, because tearDown is async in buster-next and\n      // the overridden Date is used in node 0.x native code\n\n      this.global.Date = this.Date;\n      assert.same(date.constructor.prototype, realDate.constructor.prototype);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates Date objects representing clock time","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":546,"column":52,"index":17825},"line":546,"code":"    it(\"creates Date objects representing clock time\", function () {\n      var date = new this.clock.Date();\n      assert.equals(date.getTime(), new Date(this.now).getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"listens to ticking clock","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":550,"column":32,"index":17989},"line":550,"code":"    it(\"listens to ticking clock\", function () {\n      var date1 = new this.clock.Date();\n      this.clock.tick(3);\n      var date2 = new this.clock.Date();\n      assert.equals(date2.getTime() - date1.getTime(), 3);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates regular date when passing timestamp","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":556,"column":51,"index":18232},"line":556,"code":"    it(\"creates regular date when passing timestamp\", function () {\n      var date = new Date();\n      var fakeDate = new this.clock.Date(date.getTime());\n      assert.equals(fakeDate.getTime(), date.getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates regular date when passing year, month","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":561,"column":53,"index":18454},"line":561,"code":"    it(\"creates regular date when passing year, month\", function () {\n      var date = new Date(2010, 4);\n      var fakeDate = new this.clock.Date(2010, 4);\n      assert.equals(fakeDate.getTime(), date.getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates regular date when passing y, m, d","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":566,"column":49,"index":18672},"line":566,"code":"    it(\"creates regular date when passing y, m, d\", function () {\n      var date = new Date(2010, 4, 2);\n      var fakeDate = new this.clock.Date(2010, 4, 2);\n      assert.equals(fakeDate.getTime(), date.getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates regular date when passing y, m, d, h","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":571,"column":52,"index":18899},"line":571,"code":"    it(\"creates regular date when passing y, m, d, h\", function () {\n      var date = new Date(2010, 4, 2, 12);\n      var fakeDate = new this.clock.Date(2010, 4, 2, 12);\n      assert.equals(fakeDate.getTime(), date.getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates regular date when passing y, m, d, h, m","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":576,"column":55,"index":19137},"line":576,"code":"    it(\"creates regular date when passing y, m, d, h, m\", function () {\n      var date = new Date(2010, 4, 2, 12, 42);\n      var fakeDate = new this.clock.Date(2010, 4, 2, 12, 42);\n      assert.equals(fakeDate.getTime(), date.getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates regular date when passing y, m, d, h, m, s","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":581,"column":58,"index":19386},"line":581,"code":"    it(\"creates regular date when passing y, m, d, h, m, s\", function () {\n      var date = new Date(2010, 4, 2, 12, 42, 53);\n      var fakeDate = new this.clock.Date(2010, 4, 2, 12, 42, 53);\n      assert.equals(fakeDate.getTime(), date.getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"creates regular date when passing y, m, d, h, m, s, ms","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":586,"column":62,"index":19647},"line":586,"code":"    it(\"creates regular date when passing y, m, d, h, m, s, ms\", function () {\n      var date = new Date(2010, 4, 2, 12, 42, 53, 498);\n      var fakeDate = new this.clock.Date(2010, 4, 2, 12, 42, 53, 498);\n      assert.equals(fakeDate.getTime(), date.getTime());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"mirrors native Date.prototype","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":591,"column":37,"index":19893},"line":591,"code":"    it(\"mirrors native Date.prototype\", function () {\n      assert.same(this.clock.Date.prototype, Date.prototype);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"supports now method if present","suites":["fakeTimers.clock",".date"],"updatePoint":{"line":594,"column":38,"index":20018},"line":594,"code":"    it(\"supports now method if present\", function () {\n      assert.same(typeof this.clock.Date.now, typeof Date.now);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns clock.now","suites":["fakeTimers.clock",".date",".now"],"updatePoint":{"line":603,"column":27,"index":20285},"line":603,"code":"      it(\"returns clock.now\", function () {\n        assert.equals(this.clock.Date.now(), this.now);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"is undefined","suites":["fakeTimers.clock",".date","unsupported now"],"updatePoint":{"line":613,"column":22,"index":20560},"line":613,"code":"      it(\"is undefined\", function () {\n        assert.isUndefined(this.clock.Date.now);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"mirrors parse method","suites":["fakeTimers.clock",".date","unsupported now"],"updatePoint":{"line":617,"column":28,"index":20672},"line":617,"code":"    it(\"mirrors parse method\", function () {\n      assert.same(this.clock.Date.parse, Date.parse);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"mirrors UTC method","suites":["fakeTimers.clock",".date","unsupported now"],"updatePoint":{"line":620,"column":26,"index":20777},"line":620,"code":"    it(\"mirrors UTC method\", function () {\n      assert.same(this.clock.Date.UTC, Date.UTC);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"mirrors toUTCString method","suites":["fakeTimers.clock",".date","unsupported now"],"updatePoint":{"line":623,"column":34,"index":20886},"line":623,"code":"    it(\"mirrors toUTCString method\", function () {\n      assert.same(this.clock.Date.prototype.toUTCString, Date.prototype.toUTCString);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"is mirrored","suites":["fakeTimers.clock",".date",".toSource"],"updatePoint":{"line":632,"column":21,"index":21179},"line":632,"code":"      it(\"is mirrored\", function () {\n        assert.same(this.clock.Date.toSource(), Date.toSource());\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"is undefined","suites":["fakeTimers.clock",".date","unsupported toSource"],"updatePoint":{"line":642,"column":22,"index":21474},"line":642,"code":"      it(\"is undefined\", function () {\n        assert.isUndefined(this.clock.Date.toSource);\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"mirrors toString","suites":["fakeTimers.clock",".date","unsupported toSource"],"updatePoint":{"line":646,"column":24,"index":21587},"line":646,"code":"    it(\"mirrors toString\", function () {\n      assert.same(this.clock.Date.toString(), Date.toString());\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns clock object","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":679,"column":28,"index":22819},"line":679,"code":"    it(\"returns clock object\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      assert.isObject(this.clock);\n      assert.isFunction(this.clock.tick);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"has clock property","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":684,"column":26,"index":22994},"line":684,"code":"    it(\"has clock property\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      assert.same(setTimeout.clock, this.clock);\n      assert.same(clearTimeout.clock, this.clock);\n      assert.same(setInterval.clock, this.clock);\n      assert.same(clearInterval.clock, this.clock);\n      assert.same(Date.clock, this.clock);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"sets initial timestamp","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":692,"column":30,"index":23341},"line":692,"code":"    it(\"sets initial timestamp\", function () {\n      this.clock = fakeTimers.useFakeTimers(1400);\n      assert.equals(this.clock.now, 1400);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"replaces global setTimeout","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":696,"column":34,"index":23494},"line":696,"code":"    it(\"replaces global setTimeout\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      var stub = sinonStub();\n      setTimeout(stub, 1000);\n      this.clock.tick(1000);\n      assert(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"returns a timer whose primitive representation is a number","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":703,"column":66,"index":23748},"line":703,"code":"    it(\"returns a timer whose primitive representation is a number\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      const stub = sinonStub();\n      const to = setTimeout(stub, 1000);\n      assert.isNumber(Number(to));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"replaces global clearTimeout","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":709,"column":36,"index":23964},"line":709,"code":"    it(\"replaces global clearTimeout\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      var stub = sinonStub();\n      clearTimeout(setTimeout(stub, 1000));\n      this.clock.tick(1000);\n      assert.isFalse(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores global setTimeout","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":716,"column":34,"index":24208},"line":716,"code":"    it(\"restores global setTimeout\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      var stub = sinonStub();\n      this.clock.restore();\n      this.timer = setTimeout(stub, 1000);\n      this.clock.tick(1000);\n      assert.isFalse(stub.called);\n      assert.same(setTimeout, fakeTimers.timers.setTimeout);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores global clearTimeout","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":725,"column":36,"index":24542},"line":725,"code":"    it(\"restores global clearTimeout\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      sinonStub();\n      this.clock.restore();\n      assert.same(clearTimeout, fakeTimers.timers.clearTimeout);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"replaces global setInterval","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":731,"column":35,"index":24761},"line":731,"code":"    it(\"replaces global setInterval\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      var stub = sinonStub();\n      setInterval(stub, 500);\n      this.clock.tick(1000);\n      assert(stub.calledTwice);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"replaces global clearInterval","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":738,"column":37,"index":24991},"line":738,"code":"    it(\"replaces global clearInterval\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      var stub = sinonStub();\n      clearInterval(setInterval(stub, 500));\n      this.clock.tick(1000);\n      assert.isFalse(stub.called);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores global setInterval","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":745,"column":35,"index":25237},"line":745,"code":"    it(\"restores global setInterval\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      var stub = sinonStub();\n      this.clock.restore();\n      this.timer = setInterval(stub, 1000);\n      this.clock.tick(1000);\n      assert.isFalse(stub.called);\n      assert.same(setInterval, fakeTimers.timers.setInterval);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores global clearInterval","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":754,"column":37,"index":25575},"line":754,"code":"    it(\"restores global clearInterval\", function () {\n      this.clock = fakeTimers.useFakeTimers();\n      sinonStub();\n      this.clock.restore();\n      assert.same(clearInterval, fakeTimers.timers.clearInterval);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores global setImmediate","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":760,"column":36,"index":25797},"line":760,"code":"    it(\"restores global setImmediate\", function () {\n      if (typeof setImmediate !== \"function\") {\n        this.skip();\n      }\n\n      this.clock = fakeTimers.useFakeTimers();\n      var stub = sinonStub();\n      this.clock.restore();\n      this.timer = setImmediate(stub);\n      this.clock.tick(1);\n      assert.isFalse(stub.called);\n      assert.same(setImmediate, fakeTimers.timers.setImmediate);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"does not install global setImmediate","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":773,"column":44,"index":26214},"line":773,"code":"    it(\"does not install global setImmediate\", function () {\n      if (typeof setImmediate !== \"undefined\") {\n        this.skip();\n      }\n\n      this.clock = fakeTimers.useFakeTimers();\n      assert.isUndefined(setImmediate);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores global clearImmediate","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":781,"column":38,"index":26443},"line":781,"code":"    it(\"restores global clearImmediate\", function () {\n      if (typeof clearImmediate !== \"function\") {\n        this.skip();\n      }\n\n      this.clock = fakeTimers.useFakeTimers();\n      sinonStub();\n      this.clock.restore();\n      assert.same(clearImmediate, fakeTimers.timers.clearImmediate);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"does not install global clearImmediate","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":791,"column":46,"index":26757},"line":791,"code":"    it(\"does not install global clearImmediate\", function () {\n      if (typeof clearImmediate !== \"undefined\") {\n        this.skip();\n      }\n\n      this.clock = fakeTimers.useFakeTimers();\n      assert.isUndefined(clearImmediate);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"deletes global property on restore if it was inherited onto the global object","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":799,"column":85,"index":27037},"line":799,"code":"    it(\"deletes global property on restore if it was inherited onto the global object\", function () {\n      /*eslint-disable no-proto*/\n      if (!Object.__proto__) {\n        this.skip();\n      } // Give the global object an inherited 'tick' method\n\n\n      delete this.global.tick;\n\n      this.global.__proto__.tick = function () {\n        return;\n      };\n\n      if (!this.global.hasOwnProperty(\"tick\")) {\n        this.clock = fakeTimers.useFakeTimers({\n          toFake: [\"tick\"]\n        });\n        assert.isTrue(this.global.hasOwnProperty(\"tick\"));\n        this.clock.restore();\n        assert.isFalse(this.global.hasOwnProperty(\"tick\"));\n        delete this.global.__proto__.tick;\n      } else {\n        // hasOwnProperty does not work as expected.\n        assert(true);\n      }\n      /*eslint-enable no-proto*/\n\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores global property on restore if it is present on the global object itself","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":827,"column":88,"index":27866},"line":827,"code":"    it(\"restores global property on restore if it is present on the global object itself\", function () {\n      // Directly give the global object a tick method\n      this.global.tick = function () {\n        return;\n      };\n\n      this.clock = fakeTimers.useFakeTimers({\n        toFake: [\"tick\"]\n      });\n      assert.isTrue(this.global.hasOwnProperty(\"tick\"));\n      this.clock.restore();\n      assert.isTrue(this.global.hasOwnProperty(\"tick\"));\n      delete this.global.tick;\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"fakes Date constructor","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":841,"column":30,"index":28295},"line":841,"code":"    it(\"fakes Date constructor\", function () {\n      this.clock = fakeTimers.useFakeTimers(0);\n      var now = new Date();\n      refute.same(Date, fakeTimers.timers.Date);\n      assert.equals(now.getTime(), 0);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"fake Date constructor should mirror Date's properties","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":847,"column":61,"index":28545},"line":847,"code":"    it(\"fake Date constructor should mirror Date's properties\", function () {\n      this.clock = fakeTimers.useFakeTimers(0);\n      assert(Boolean(Date.parse));\n      assert(Boolean(Date.UTC));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"decide on Date.now support at call-time when supported","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":852,"column":62,"index":28748},"line":852,"code":"    it(\"decide on Date.now support at call-time when supported\", function () {\n      this.global.Date.now = function () {\n        return;\n      };\n\n      this.clock = fakeTimers.useFakeTimers(0);\n      assert.equals(typeof Date.now, \"function\");\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"decide on Date.now support at call-time when unsupported","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":860,"column":64,"index":29004},"line":860,"code":"    it(\"decide on Date.now support at call-time when unsupported\", function () {\n      this.global.Date.now = null;\n      this.clock = fakeTimers.useFakeTimers(0);\n      assert.isUndefined(Date.now);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"mirrors custom Date properties","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":865,"column":38,"index":29186},"line":865,"code":"    it(\"mirrors custom Date properties\", function () {\n      var f = function () {\n        return;\n      };\n\n      this.global.Date.format = f;\n      fakeTimers.useFakeTimers();\n      assert.equals(Date.format, f);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"restores Date constructor","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":874,"column":33,"index":29404},"line":874,"code":"    it(\"restores Date constructor\", function () {\n      this.clock = fakeTimers.useFakeTimers(0);\n      this.clock.restore();\n      assert.same(GlobalDate, fakeTimers.timers.Date);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"fakes provided methods","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":879,"column":30,"index":29590},"line":879,"code":"    it(\"fakes provided methods\", function () {\n      this.clock = fakeTimers.useFakeTimers({\n        toFake: [\"setTimeout\", \"Date\"]\n      });\n      refute.same(setTimeout, fakeTimers.timers.setTimeout);\n      refute.same(Date, fakeTimers.timers.Date);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"resets faked methods","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":886,"column":28,"index":29848},"line":886,"code":"    it(\"resets faked methods\", function () {\n      this.clock = fakeTimers.useFakeTimers({\n        toFake: [\"setTimeout\", \"Date\"]\n      });\n      this.clock.restore();\n      assert.same(setTimeout, fakeTimers.timers.setTimeout);\n      assert.same(Date, fakeTimers.timers.Date);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"does not fake methods not provided","suites":["fakeTimers.clock",".useFakeTimers"],"updatePoint":{"line":894,"column":42,"index":30148},"line":894,"code":"    it(\"does not fake methods not provided\", function () {\n      this.clock = fakeTimers.useFakeTimers({\n        toFake: [\"setTimeout\", \"Date\"]\n      });\n      assert.same(clearTimeout, fakeTimers.timers.clearTimeout);\n      assert.same(setInterval, fakeTimers.timers.setInterval);\n      assert.same(clearInterval, fakeTimers.timers.clearInterval);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"installs by default without nextTick","suites":["fakeTimers.clock",".useFakeTimers","with nextTick"],"updatePoint":{"line":908,"column":46,"index":30711},"line":908,"code":"      it(\"installs by default without nextTick\", function () {\n        this.clock = fakeTimers.useFakeTimers();\n        var called = false;\n        process.nextTick(function () {\n          called = true;\n        });\n        this.clock.runAll();\n        assert(!called);\n        this.clock.restore();\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"installs with nextTick","suites":["fakeTimers.clock",".useFakeTimers","with nextTick"],"updatePoint":{"line":918,"column":32,"index":31007},"line":918,"code":"      it(\"installs with nextTick\", function () {\n        this.clock = fakeTimers.useFakeTimers({\n          toFake: [\"nextTick\"]\n        });\n        var called = false;\n        process.nextTick(function () {\n          called = true;\n        });\n        this.clock.runAll();\n        assert(called);\n        this.clock.restore();\n      });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"installs clock in advancing mode and triggers setTimeout","suites":["fakeTimers.clock",".useFakeTimers","with nextTick"],"updatePoint":{"line":931,"column":64,"index":31384},"line":931,"code":"    it(\"installs clock in advancing mode and triggers setTimeout\", function (done) {\n      this.clock = fakeTimers.useFakeTimers({\n        shouldAdvanceTime: true\n      });\n      this.clock.setTimeout(function () {\n        this.clock.restore();\n        done();\n      }.bind(this), 10);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"installs clock in advancing mode and triggers setInterval","suites":["fakeTimers.clock",".useFakeTimers","with nextTick"],"updatePoint":{"line":940,"column":65,"index":31679},"line":940,"code":"    it(\"installs clock in advancing mode and triggers setInterval\", function (done) {\n      this.clock = fakeTimers.useFakeTimers({\n        shouldAdvanceTime: true\n      });\n      var counter = 0;\n      var iterations = 3;\n      var id = this.clock.setInterval(function () {\n        if (counter++ < iterations) {\n          return;\n        }\n\n        this.clock.clearInterval(id);\n        this.clock.restore();\n        done();\n      }.bind(this), 10);\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"installs clock in advancing mode and triggers setImmediate","suites":["fakeTimers.clock",".useFakeTimers","with nextTick"],"updatePoint":{"line":956,"column":66,"index":32139},"line":956,"code":"    it(\"installs clock in advancing mode and triggers setImmediate\", function (done) {\n      if (!setImmediatePresent) {\n        this.skip();\n      }\n\n      this.clock = fakeTimers.useFakeTimers({\n        shouldAdvanceTime: true\n      });\n      this.clock.setImmediate(function () {\n        this.clock.restore();\n        done();\n      }.bind(this));\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"throws on old useFakeTimers signatures","suites":["fakeTimers.clock",".useFakeTimers","with nextTick"],"updatePoint":{"line":969,"column":46,"index":32477},"line":969,"code":"    it(\"throws on old useFakeTimers signatures\", function () {\n      var expectedError = \"useFakeTimers expected epoch or config object. See https://github.com/sinonjs/sinon\";\n      assert.exception(function () {\n        fakeTimers.useFakeTimers(\"setImmediate\");\n      }, {\n        name: \"TypeError\",\n        message: expectedError\n      });\n      assert.exception(function () {\n        fakeTimers.useFakeTimers(\"setImmediate\", \"Date\");\n      }, {\n        name: \"TypeError\",\n        message: expectedError\n      });\n      assert.exception(function () {\n        fakeTimers.useFakeTimers(1000, \"setImmediate\", \"Date\");\n      }, {\n        name: \"TypeError\",\n        message: expectedError\n      });\n      assert.exception(function () {\n        fakeTimers.useFakeTimers(new Date(10000000), \"setImmediate\", \"Date\");\n      }, {\n        name: \"TypeError\",\n        message: expectedError\n      });\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"},{"name":"supports a way to pass the global context","suites":["fakeTimers.clock",".useFakeTimers","with nextTick"],"updatePoint":{"line":996,"column":49,"index":33378},"line":996,"code":"    it(\"supports a way to pass the global context\", function () {\n      var stub = sinonStub();\n      var globalCtx = {\n        Date: sinonStub(),\n        setTimeout: stub,\n        clearTimeout: sinonStub()\n      };\n      this.clock = fakeTimers.useFakeTimers({\n        global: globalCtx\n      });\n      assert.isUndefined(this.clock.performance);\n      assert.same(this.clock._setTimeout, stub); // eslint-disable-line no-underscore-dangle\n\n      this.clock.restore();\n    });","file":"util/fake-timers-test.js","skipped":false,"dir":"test"}]}