{
    "repo": "typicode/json-server",
    "url": "https://github.com/typicode/json-server",
    "branch": "master",
    "configs": [
        {
            "package": "json-server",
            "lang": "js",
            "dir": "__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should support JSON file",
            "suites": [
                "cli",
                "db.json"
            ],
            "updatePoint": {
                "line": 67,
                "column": 34
            },
            "line": 67,
            "code": "    test('should support JSON file', done => {\n      request.get('/posts').expect(200, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should send CORS headers",
            "suites": [
                "cli",
                "db.json"
            ],
            "updatePoint": {
                "line": 70,
                "column": 34
            },
            "line": 70,
            "code": "    test('should send CORS headers', done => {\n      const origin = 'http://example.com';\n      request.get('/posts').set('Origin', origin).expect('access-control-allow-origin', origin).expect(200, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should update JSON file",
            "suites": [
                "cli",
                "db.json"
            ],
            "updatePoint": {
                "line": 74,
                "column": 33
            },
            "line": 74,
            "code": "    test('should update JSON file', done => {\n      request.post('/posts').send({\n        title: 'hello'\n      }).end(() => {\n        setTimeout(() => {\n          const str = fs.readFileSync(dbFile, 'utf8');\n          assert(str.indexOf('hello') !== -1);\n          done();\n        }, 1000);\n      });\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support JS file",
            "suites": [
                "cli",
                "seed.js"
            ],
            "updatePoint": {
                "line": 91,
                "column": 32
            },
            "line": 91,
            "code": "    test('should support JS file', done => {\n      request.get('/posts').expect(200, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support URL file",
            "suites": [
                "cli",
                "remote db"
            ],
            "updatePoint": {
                "line": 100,
                "column": 33
            },
            "line": 100,
            "code": "    test('should support URL file', done => {\n      request.get('/posts').expect(200, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should use routes.json and _id as the identifier",
            "suites": [
                "cli",
                "db.json -r routes.json -m middleware.js -i _id --foreignKeySuffix _id --read-only"
            ],
            "updatePoint": {
                "line": 109,
                "column": 58
            },
            "line": 109,
            "code": "    test('should use routes.json and _id as the identifier', done => {\n      request.get('/blog/posts/2').expect(200, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should use _id as foreignKeySuffix",
            "suites": [
                "cli",
                "db.json -r routes.json -m middleware.js -i _id --foreignKeySuffix _id --read-only"
            ],
            "updatePoint": {
                "line": 112,
                "column": 44
            },
            "line": 112,
            "code": "    test('should use _id as foreignKeySuffix', async () => {\n      const response = await request.get('/posts/1/comments');\n      assert.strictEqual(response.body.length, 1);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should apply middlewares",
            "suites": [
                "cli",
                "db.json -r routes.json -m middleware.js -i _id --foreignKeySuffix _id --read-only"
            ],
            "updatePoint": {
                "line": 116,
                "column": 34
            },
            "line": 116,
            "code": "    test('should apply middlewares', done => {\n      request.get('/blog/posts/2').expect('X-Hello', 'World', done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should allow only GET requests",
            "suites": [
                "cli",
                "db.json -r routes.json -m middleware.js -i _id --foreignKeySuffix _id --read-only"
            ],
            "updatePoint": {
                "line": 119,
                "column": 40
            },
            "line": 119,
            "code": "    test('should allow only GET requests', done => {\n      request.post('/blog/posts').expect(403, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should apply all middlewares",
            "suites": [
                "cli",
                "db.json -m first-middleware.js second-middleware.js"
            ],
            "updatePoint": {
                "line": 128,
                "column": 38
            },
            "line": 128,
            "code": "    test('should apply all middlewares', done => {\n      request.get('/posts').expect('X-Hello', 'World').expect('X-Konnichiwa', 'Sekai', done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should have post body in middleware",
            "suites": [
                "cli",
                "db.json -m postbody-middleware.js"
            ],
            "updatePoint": {
                "line": 137,
                "column": 45
            },
            "line": 137,
            "code": "    test('should have post body in middleware', done => {\n      request.post('/posts').send({\n        name: 'test'\n      }).expect('name', 'test', done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should delay response",
            "suites": [
                "cli",
                "db.json -d 1000"
            ],
            "updatePoint": {
                "line": 148,
                "column": 31
            },
            "line": 148,
            "code": "    test('should delay response', done => {\n      const start = new Date();\n      request.get('/posts').expect(200, function (err) {\n        const end = new Date();\n        done(end - start > 1000 ? err : new Error(\"Request wasn't delayed\"));\n      });\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should serve ../../__fixtures__/public",
            "suites": [
                "cli",
                "db.json -s ../../__fixtures__/public -S /some/path/snapshots"
            ],
            "updatePoint": {
                "line": 168,
                "column": 48
            },
            "line": 168,
            "code": "    test('should serve ../../__fixtures__/public', done => {\n      request.get('/').expect(/Hello/, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should save a snapshot in snapshots dir",
            "suites": [
                "cli",
                "db.json -s ../../__fixtures__/public -S /some/path/snapshots"
            ],
            "updatePoint": {
                "line": 171,
                "column": 49
            },
            "line": 171,
            "code": "    test('should save a snapshot in snapshots dir', () => {\n      assert.strictEqual(fs.readdirSync(snapshotsDir).length, 1);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not send Access-Control-Allow-Origin headers",
            "suites": [
                "cli",
                "../../__fixtures__/seed.json --no-cors=true"
            ],
            "updatePoint": {
                "line": 180,
                "column": 61
            },
            "line": 180,
            "code": "    test('should not send Access-Control-Allow-Origin headers', done => {\n      const origin = 'http://example.com';\n      request.get('/posts').set('Origin', origin).expect(200).end((err, res) => {\n        if (err) {\n          done(err);\n        }\n\n        if ('access-control-allow-origin' in res.headers) {\n          done(new Error('CORS headers were not excluded from response'));\n        } else {\n          done();\n        }\n      });\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not set Content-Encoding to gzip",
            "suites": [
                "cli",
                "../../__fixtures__/seed.json --no-gzip=true"
            ],
            "updatePoint": {
                "line": 200,
                "column": 49
            },
            "line": 200,
            "code": "    test('should not set Content-Encoding to gzip', done => {\n      request.get('/posts').expect(200).end(function (err, res) {\n        if (err) {\n          done(err);\n        } else if ('content-encoding' in res.headers) {\n          done(new Error('Content-Encoding is set to gzip'));\n        } else {\n          done();\n        }\n      });\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should watch db file",
            "suites": [
                "cli",
                "--watch db.json -r routes.json"
            ],
            "updatePoint": {
                "line": 217,
                "column": 30
            },
            "line": 217,
            "code": "    test('should watch db file', done => {\n      fs.writeFileSync(dbFile, JSON.stringify({\n        foo: []\n      }));\n      setTimeout(() => {\n        request.get('/foo').expect(200, done);\n      }, 1000);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should watch routes file",
            "suites": [
                "cli",
                "--watch db.json -r routes.json"
            ],
            "updatePoint": {
                "line": 225,
                "column": 34
            },
            "line": 225,
            "code": "    test('should watch routes file', done => {\n      fs.writeFileSync(routesFile, JSON.stringify({\n        '/api/*': '/$1'\n      }));\n      setTimeout(() => {\n        request.get('/api/posts').expect(200, done);\n      }, 1000);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should create JSON file if it doesn't exist",
            "suites": [
                "cli",
                "non existent db.json"
            ],
            "updatePoint": {
                "line": 240,
                "column": 53
            },
            "line": 240,
            "code": "    test(\"should create JSON file if it doesn't exist\", done => {\n      request.get('/posts').expect(200, done);\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should exit with an error",
            "suites": [
                "cli",
                "db.json with error"
            ],
            "updatePoint": {
                "line": 250,
                "column": 35
            },
            "line": 250,
            "code": "    test('should exit with an error', done => {\n      child = cli([dbFile]);\n      child.on('exit', code => {\n        if (code === 1) {\n          return done();\n        }\n\n        return done(new Error('should exit with error code'));\n      });\n    });",
            "file": "cli/index.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return removable documents",
            "suites": [
                "mixins",
                "getRemovable"
            ],
            "updatePoint": {
                "line": 41,
                "column": 43
            },
            "line": 41,
            "code": "    test('should return removable documents', () => {\n      const expected = [{\n        name: 'comments',\n        id: 2\n      }, {\n        name: 'comments',\n        id: 3\n      }];\n      assert.deepStrictEqual(_.getRemovable(db, {\n        foreignKeySuffix: 'Id'\n      }), expected);\n    });",
            "file": "server/mixins.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support custom foreignKeySuffix",
            "suites": [
                "mixins",
                "getRemovable"
            ],
            "updatePoint": {
                "line": 53,
                "column": 48
            },
            "line": 53,
            "code": "    test('should support custom foreignKeySuffix', () => {\n      const expected = [{\n        name: 'comments',\n        id: 2\n      }, {\n        name: 'comments',\n        id: 3\n      }];\n      assert.deepStrictEqual(_.getRemovable(db, {\n        foreignKeySuffix: 'Id'\n      }), expected);\n    });",
            "file": "server/mixins.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return a new id",
            "suites": [
                "mixins",
                "createId"
            ],
            "updatePoint": {
                "line": 67,
                "column": 32
            },
            "line": 67,
            "code": "    test('should return a new id', () => {\n      assert.strictEqual(_.createId(db.comments), 4);\n    });",
            "file": "server/mixins.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return a new uuid",
            "suites": [
                "mixins",
                "createId"
            ],
            "updatePoint": {
                "line": 70,
                "column": 34
            },
            "line": 70,
            "code": "    test('should return a new uuid', () => {\n      assert.notStrictEqual(_.createId(db.photos), 3);\n    });",
            "file": "server/mixins.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and corresponding nested resources",
            "suites": [
                "Fake server",
                "GET /:parent/:parentId/:resource"
            ],
            "updatePoint": {
                "line": 59,
                "column": 69
            },
            "line": 59,
            "code": "    test('should respond with json and corresponding nested resources', () => request(server).get('/posts/1/comments').expect('Content-Type', /json/).expect(200, [db.comments[0], db.comments[1]]));",
            "file": "server/plural-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not create a resource",
            "suites": [
                "Fake server",
                "POST /:resource"
            ],
            "updatePoint": {
                "line": 62,
                "column": 38
            },
            "line": 62,
            "code": "    test('should not create a resource', async () => {\n      await request(server).post('/posts').send({\n        body: 'foo',\n        booleanValue: true,\n        integerValue: 1\n      }).expect('Access-Control-Expose-Headers', 'Location').expect('Location', /posts\\/3$/).expect('Content-Type', /json/).expect(201, {\n        id: 3,\n        body: 'foo',\n        booleanValue: true,\n        integerValue: 1\n      });\n      assert.strictEqual(db.posts.length, 2);\n    });",
            "file": "server/plural-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not replace resource",
            "suites": [
                "Fake server",
                "PUT /:resource/:id"
            ],
            "updatePoint": {
                "line": 77,
                "column": 37
            },
            "line": 77,
            "code": "    test('should not replace resource', async () => {\n      const post = {\n        id: 1,\n        booleanValue: true,\n        integerValue: 1\n      };\n      const res = await request(server).put('/posts/1').set('Accept', 'application/json') // body property omitted to test that the resource is replaced\n      .send(post).expect('Content-Type', /json/).expect(200, post); // TODO find a \"supertest\" way to test this\n      // https://github.com/typicode/json-server/issues/396\n\n      assert.deepStrictEqual(res.body, post);\n      assert.notDeepStrictEqual(db.posts[0], post);\n    });",
            "file": "server/plural-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not update resource",
            "suites": [
                "Fake server",
                "PATCH /:resource/:id"
            ],
            "updatePoint": {
                "line": 92,
                "column": 36
            },
            "line": 92,
            "code": "    test('should not update resource', async () => {\n      const partial = {\n        body: 'bar'\n      };\n      const post = {\n        id: 1,\n        body: 'bar'\n      };\n      const res = await request(server).patch('/posts/1').send(partial).expect('Content-Type', /json/).expect(200, post);\n      assert.deepStrictEqual(res.body, post);\n      assert.notDeepStrictEqual(db.posts[0], post);\n    });",
            "file": "server/plural-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not destroy resource",
            "suites": [
                "Fake server",
                "DELETE /:resource/:id"
            ],
            "updatePoint": {
                "line": 106,
                "column": 37
            },
            "line": 106,
            "code": "    test('should not destroy resource', async () => {\n      await request(server).del('/posts/1').expect(200, {});\n      assert.strictEqual(db.posts.length, 2);\n    });",
            "file": "server/plural-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and corresponding nested resources",
            "suites": [
                "Server with custom foreign key",
                "GET /:parent/:parentId/:resource"
            ],
            "updatePoint": {
                "line": 40,
                "column": 69
            },
            "line": 40,
            "code": "    test('should respond with json and corresponding nested resources', () => request(server).get('/posts/1/comments').expect('Content-Type', /json/).expect(200, [db.comments[0], db.comments[1]]));",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and corresponding resource",
            "suites": [
                "Server with custom foreign key",
                "GET /:resource/:id"
            ],
            "updatePoint": {
                "line": 43,
                "column": 61
            },
            "line": 43,
            "code": "    test('should respond with json and corresponding resource', () => request(server).get('/posts/1').expect('Content-Type', /json/).expect(200, db.posts[0]));",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resources and embedded resources",
            "suites": [
                "Server with custom foreign key",
                "GET /:resource?_embed="
            ],
            "updatePoint": {
                "line": 46,
                "column": 76
            },
            "line": 46,
            "code": "    test('should respond with corresponding resources and embedded resources', () => {\n      const posts = _.cloneDeep(db.posts);\n\n      posts[0].comments = [db.comments[0], db.comments[1]];\n      posts[1].comments = [db.comments[2]];\n      return request(server).get('/posts?_embed=comments').expect('Content-Type', /json/).expect(200, posts);\n    });",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resources and embedded resources",
            "suites": [
                "Server with custom foreign key",
                "GET /:resource/:id?_embed="
            ],
            "updatePoint": {
                "line": 55,
                "column": 76
            },
            "line": 55,
            "code": "    test('should respond with corresponding resources and embedded resources', () => {\n      const post = _.cloneDeep(db.posts[0]);\n\n      post.comments = [db.comments[0], db.comments[1]];\n      return request(server).get('/posts/1?_embed=comments').expect('Content-Type', /json/).expect(200, post);\n    });",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource and expanded inner resources",
            "suites": [
                "Server with custom foreign key",
                "GET /:resource?_expand="
            ],
            "updatePoint": {
                "line": 63,
                "column": 81
            },
            "line": 63,
            "code": "    test('should respond with corresponding resource and expanded inner resources', () => {\n      const comments = _.cloneDeep(db.comments);\n\n      comments[0].post = db.posts[0];\n      comments[1].post = db.posts[0];\n      comments[2].post = db.posts[1];\n      return request(server).get('/comments?_expand=post').expect('Content-Type', /json/).expect(200, comments);\n    });",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource and expanded inner resources",
            "suites": [
                "Server with custom foreign key",
                "GET /:resource/:id?_expand="
            ],
            "updatePoint": {
                "line": 73,
                "column": 81
            },
            "line": 73,
            "code": "    test('should respond with corresponding resource and expanded inner resources', () => {\n      const comment = _.cloneDeep(db.comments[0]);\n\n      comment.post = db.posts[0];\n      return request(server).get('/comments/1?_expand=post').expect('Content-Type', /json/).expect(200, comment);\n    });",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and set parentId",
            "suites": [
                "Server with custom foreign key",
                "POST /:parent/:parentId/:resource"
            ],
            "updatePoint": {
                "line": 81,
                "column": 51
            },
            "line": 81,
            "code": "    test('should respond with json and set parentId', () => request(server).post('/posts/1/comments').send({\n      body: 'foo'\n    }).expect('Content-Type', /json/).expect(201, {\n      id: 4,\n      post_id: '1',\n      body: 'foo'\n    }));",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with empty data, destroy resource and dependent resources",
            "suites": [
                "Server with custom foreign key",
                "DELETE /:resource/:id"
            ],
            "updatePoint": {
                "line": 90,
                "column": 82
            },
            "line": 90,
            "code": "    test('should respond with empty data, destroy resource and dependent resources', async () => {\n      await request(server).del('/posts/1').expect({}).expect(200);\n      assert.strictEqual(db.posts.length, 1);\n      assert.strictEqual(db.comments.length, 1);\n    });",
            "file": "server/plural-with-custom-foreign-key.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and full database",
            "suites": [
                "Server",
                "GET /db"
            ],
            "updatePoint": {
                "line": 192,
                "column": 52
            },
            "line": 192,
            "code": "    test('should respond with json and full database', () => request(server).get('/db').expect('Content-Type', /json/).expect(200, db));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and corresponding resources",
            "suites": [
                "Server",
                "GET /:resource"
            ],
            "updatePoint": {
                "line": 195,
                "column": 62
            },
            "line": 195,
            "code": "    test('should respond with json and corresponding resources', () => request(server).get('/posts').set('Origin', 'http://example.com').expect('Content-Type', /json/).expect('Access-Control-Allow-Credentials', 'true').expect('Access-Control-Allow-Origin', 'http://example.com').expect(200, db.posts));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with 404 if resource is not found",
            "suites": [
                "Server",
                "GET /:resource"
            ],
            "updatePoint": {
                "line": 196,
                "column": 58
            },
            "line": 196,
            "code": "    test('should respond with 404 if resource is not found', () => request(server).get('/undefined').expect(404));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and filter resources",
            "suites": [
                "Server",
                "GET /:resource?attr=&attr="
            ],
            "updatePoint": {
                "line": 199,
                "column": 55
            },
            "line": 199,
            "code": "    test('should respond with json and filter resources', () => request(server).get('/comments?postId=1&published=true').expect('Content-Type', /json/).expect(200, [db.comments[0]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should be strict",
            "suites": [
                "Server",
                "GET /:resource?attr=&attr="
            ],
            "updatePoint": {
                "line": 200,
                "column": 26
            },
            "line": 200,
            "code": "    test('should be strict', () => request(server).get('/users?tel=123').expect('Content-Type', /json/).expect(200, [db.users[1]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support multiple filters",
            "suites": [
                "Server",
                "GET /:resource?attr=&attr="
            ],
            "updatePoint": {
                "line": 201,
                "column": 41
            },
            "line": 201,
            "code": "    test('should support multiple filters', () => request(server).get('/comments?id=1&id=2').expect('Content-Type', /json/).expect(200, [db.comments[0], db.comments[1]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support deep filter",
            "suites": [
                "Server",
                "GET /:resource?attr=&attr="
            ],
            "updatePoint": {
                "line": 202,
                "column": 36
            },
            "line": 202,
            "code": "    test('should support deep filter', () => request(server).get('/deep?a.b=1').expect('Content-Type', /json/).expect(200, [db.deep[0]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should ignore JSONP query parameters callback and _ ",
            "suites": [
                "Server",
                "GET /:resource?attr=&attr="
            ],
            "updatePoint": {
                "line": 203,
                "column": 62
            },
            "line": 203,
            "code": "    test('should ignore JSONP query parameters callback and _ ', () => request(server).get('/comments?callback=1&_=1').expect('Content-Type', /text/).expect(new RegExp(db.comments[0].body)) // JSONP returns text\n    .expect(200));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should ignore unknown query parameters",
            "suites": [
                "Server",
                "GET /:resource?attr=&attr="
            ],
            "updatePoint": {
                "line": 205,
                "column": 48
            },
            "line": 205,
            "code": "    test('should ignore unknown query parameters', () => request(server).get('/comments?foo=1&bar=2').expect('Content-Type', /json/).expect(200, db.comments)); // https://github.com/typicode/json-server/issues/510",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not fail with null value",
            "suites": [
                "Server",
                "GET /:resource?attr=&attr="
            ],
            "updatePoint": {
                "line": 207,
                "column": 41
            },
            "line": 207,
            "code": "    test('should not fail with null value', () => {\n      db.posts.push({\n        id: 99,\n        body: null\n      });\n      return request(server).get('/posts?body=foo').expect('Content-Type', /json/).expect(200, [db.posts[0]]);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and make a full-text search",
            "suites": [
                "Server",
                "GET /:resource?q="
            ],
            "updatePoint": {
                "line": 216,
                "column": 62
            },
            "line": 216,
            "code": "    test('should respond with json and make a full-text search', () => request(server).get('/tags?q=pho').expect('Content-Type', /json/).expect(200, [db.tags[1], db.tags[2]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and make a deep full-text search",
            "suites": [
                "Server",
                "GET /:resource?q="
            ],
            "updatePoint": {
                "line": 217,
                "column": 67
            },
            "line": 217,
            "code": "    test('should respond with json and make a deep full-text search', () => request(server).get('/deep?q=1').expect('Content-Type', /json/).expect(200, db.deep));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return an empty array when nothing is matched",
            "suites": [
                "Server",
                "GET /:resource?q="
            ],
            "updatePoint": {
                "line": 218,
                "column": 62
            },
            "line": 218,
            "code": "    test('should return an empty array when nothing is matched', () => request(server).get('/tags?q=nope').expect('Content-Type', /json/).expect(200, []));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support other query parameters",
            "suites": [
                "Server",
                "GET /:resource?q="
            ],
            "updatePoint": {
                "line": 219,
                "column": 47
            },
            "line": 219,
            "code": "    test('should support other query parameters', () => request(server).get('/comments?q=qu&published=true').expect('Content-Type', /json/).expect(200, [db.comments[3]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should ignore duplicate q query parameters",
            "suites": [
                "Server",
                "GET /:resource?q="
            ],
            "updatePoint": {
                "line": 220,
                "column": 52
            },
            "line": 220,
            "code": "    test('should ignore duplicate q query parameters', () => request(server).get('/comments?q=foo&q=bar').expect('Content-Type', /json/).expect(200, [db.comments[0]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support filtering by boolean value false",
            "suites": [
                "Server",
                "GET /:resource?q="
            ],
            "updatePoint": {
                "line": 221,
                "column": 57
            },
            "line": 221,
            "code": "    test('should support filtering by boolean value false', () => request(server).get('/comments?published=false').expect('Content-Type', /json/).expect(200, [db.comments[1], db.comments[2], db.comments[4]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with a sliced array",
            "suites": [
                "Server",
                "GET /:resource?_end="
            ],
            "updatePoint": {
                "line": 224,
                "column": 44
            },
            "line": 224,
            "code": "    test('should respond with a sliced array', () => request(server).get('/comments?_end=2').expect('Content-Type', /json/).expect('x-total-count', db.comments.length.toString()).expect('Access-Control-Expose-Headers', 'X-Total-Count').expect(200, db.comments.slice(0, 2)));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and sort on a field",
            "suites": [
                "Server",
                "GET /:resource?_sort="
            ],
            "updatePoint": {
                "line": 227,
                "column": 54
            },
            "line": 227,
            "code": "    test('should respond with json and sort on a field', () => request(server).get('/tags?_sort=body').expect('Content-Type', /json/).expect(200, [db.tags[1], db.tags[0], db.tags[2]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should reverse sorting with _order=DESC",
            "suites": [
                "Server",
                "GET /:resource?_sort="
            ],
            "updatePoint": {
                "line": 228,
                "column": 49
            },
            "line": 228,
            "code": "    test('should reverse sorting with _order=DESC', () => request(server).get('/tags?_sort=body&_order=DESC').expect('Content-Type', /json/).expect(200, [db.tags[2], db.tags[0], db.tags[1]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should reverse sorting with _order=desc (case insensitive)",
            "suites": [
                "Server",
                "GET /:resource?_sort="
            ],
            "updatePoint": {
                "line": 229,
                "column": 68
            },
            "line": 229,
            "code": "    test('should reverse sorting with _order=desc (case insensitive)', () => request(server).get('/tags?_sort=body&_order=desc').expect('Content-Type', /json/).expect(200, [db.tags[2], db.tags[0], db.tags[1]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should sort on numerical field",
            "suites": [
                "Server",
                "GET /:resource?_sort="
            ],
            "updatePoint": {
                "line": 230,
                "column": 40
            },
            "line": 230,
            "code": "    test('should sort on numerical field', () => request(server).get('/posts?_sort=id&_order=DESC').expect('Content-Type', /json/).expect(200, db.posts.reverse()));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should sort on nested field",
            "suites": [
                "Server",
                "GET /:resource?_sort="
            ],
            "updatePoint": {
                "line": 231,
                "column": 37
            },
            "line": 231,
            "code": "    test('should sort on nested field', () => request(server).get('/nested?_sort=resource.name').expect('Content-Type', /json/).expect(200, [db.nested[1], db.nested[0], db.nested[2]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should sort on multiple fields",
            "suites": [
                "Server",
                "GET /:resource?_sort="
            ],
            "updatePoint": {
                "line": 232,
                "column": 40
            },
            "line": 232,
            "code": "    test('should sort on multiple fields', () => request(server).get('/buyers?_sort=country,total&_order=asc,desc').expect('Content-Type', /json/).expect(200, [db.buyers[8], db.buyers[7], db.buyers[6], db.buyers[3], db.buyers[4], db.buyers[5], db.buyers[2], db.buyers[1], db.buyers[0]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with a sliced array",
            "suites": [
                "Server",
                "GET /:resource?_start=&_end="
            ],
            "updatePoint": {
                "line": 235,
                "column": 44
            },
            "line": 235,
            "code": "    test('should respond with a sliced array', () => request(server).get('/comments?_start=1&_end=2').expect('Content-Type', /json/).expect('X-Total-Count', db.comments.length.toString()).expect('Access-Control-Expose-Headers', 'X-Total-Count').expect(200, db.comments.slice(1, 2)));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with a limited array",
            "suites": [
                "Server",
                "GET /:resource?_start=&_limit="
            ],
            "updatePoint": {
                "line": 238,
                "column": 45
            },
            "line": 238,
            "code": "    test('should respond with a limited array', () => request(server).get('/comments?_start=1&_limit=1').expect('Content-Type', /json/).expect('X-Total-Count', db.comments.length.toString()).expect('Access-Control-Expose-Headers', 'X-Total-Count').expect(200, db.comments.slice(1, 2)));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should paginate",
            "suites": [
                "Server",
                "GET /:resource?_page="
            ],
            "updatePoint": {
                "line": 241,
                "column": 25
            },
            "line": 241,
            "code": "    test('should paginate', () => request(server).get('/list?_page=2').expect('Content-Type', /json/).expect('x-total-count', db.list.length.toString()).expect('Access-Control-Expose-Headers', 'X-Total-Count, Link').expect(200, db.list.slice(10, 20)));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should paginate with a custom limit",
            "suites": [
                "Server",
                "GET /:resource?_page=&_limit="
            ],
            "updatePoint": {
                "line": 244,
                "column": 45
            },
            "line": 244,
            "code": "    test('should paginate with a custom limit', () => {\n      const link = ['<http://localhost/list?_page=1&_limit=1>; rel=\"first\"', '<http://localhost/list?_page=1&_limit=1>; rel=\"prev\"', '<http://localhost/list?_page=3&_limit=1>; rel=\"next\"', '<http://localhost/list?_page=15&_limit=1>; rel=\"last\"'].join(', ');\n      return request(server).get('/list?_page=2&_limit=1').set('host', 'localhost').expect('Content-Type', /json/).expect('x-total-count', db.list.length.toString()).expect('link', link).expect('Access-Control-Expose-Headers', 'X-Total-Count, Link').expect(200, db.list.slice(1, 2));\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with a limited array",
            "suites": [
                "Server",
                "GET /:resource?attr_gte=&attr_lte="
            ],
            "updatePoint": {
                "line": 250,
                "column": 45
            },
            "line": 250,
            "code": "    test('should respond with a limited array', () => request(server).get('/comments?id_gte=2&id_lte=3').expect('Content-Type', /json/).expect(200, db.comments.slice(1, 3)));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with a limited array",
            "suites": [
                "Server",
                "GET /:resource?attr_ne="
            ],
            "updatePoint": {
                "line": 253,
                "column": 45
            },
            "line": 253,
            "code": "    test('should respond with a limited array', () => request(server).get('/comments?id_ne=1').expect('Content-Type', /json/).expect(200, db.comments.slice(1)));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should accept multiple parameters",
            "suites": [
                "Server",
                "GET /:resource?attr_ne="
            ],
            "updatePoint": {
                "line": 254,
                "column": 43
            },
            "line": 254,
            "code": "    test('should accept multiple parameters', () => request(server).get('/comments?id_ne=1&id_ne=2').expect('Content-Type', /json/).expect(200, db.comments.slice(2)));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with an array that matches the like operator (case insensitive)",
            "suites": [
                "Server",
                "GET /:resource?attr_like="
            ],
            "updatePoint": {
                "line": 257,
                "column": 88
            },
            "line": 257,
            "code": "    test('should respond with an array that matches the like operator (case insensitive)', () => request(server).get('/tags?body_like=photo').expect('Content-Type', /json/).expect(200, [db.tags[1], db.tags[2]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should accept multiple parameters",
            "suites": [
                "Server",
                "GET /:resource?attr_like="
            ],
            "updatePoint": {
                "line": 258,
                "column": 43
            },
            "line": 258,
            "code": "    test('should accept multiple parameters', () => request(server).get('/tags?body_like=photo&body_like=tech').expect('Content-Type', /json/).expect(200, db.tags));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and corresponding nested resources",
            "suites": [
                "Server",
                "GET /:parent/:parentId/:resource"
            ],
            "updatePoint": {
                "line": 261,
                "column": 69
            },
            "line": 261,
            "code": "    test('should respond with json and corresponding nested resources', () => request(server).get('/posts/1/comments').expect('Content-Type', /json/).expect(200, [db.comments[0], db.comments[1]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and corresponding resource",
            "suites": [
                "Server",
                "GET /:resource/:id"
            ],
            "updatePoint": {
                "line": 264,
                "column": 61
            },
            "line": 264,
            "code": "    test('should respond with json and corresponding resource', () => request(server).get('/posts/1').expect('Content-Type', /json/).expect(200, db.posts[0]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support string id, respond with json and corresponding resource",
            "suites": [
                "Server",
                "GET /:resource/:id"
            ],
            "updatePoint": {
                "line": 265,
                "column": 80
            },
            "line": 265,
            "code": "    test('should support string id, respond with json and corresponding resource', () => request(server).get('/refs/abcd-1234').expect('Content-Type', /json/).expect(200, db.refs[0]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support integer id as string",
            "suites": [
                "Server",
                "GET /:resource/:id"
            ],
            "updatePoint": {
                "line": 266,
                "column": 45
            },
            "line": 266,
            "code": "    test('should support integer id as string', () => request(server).get('/stringIds/1234').expect('Content-Type', /json/).expect(200, db.stringIds[0]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with 404 if resource is not found",
            "suites": [
                "Server",
                "GET /:resource/:id"
            ],
            "updatePoint": {
                "line": 267,
                "column": 58
            },
            "line": 267,
            "code": "    test('should respond with 404 if resource is not found', () => request(server).get('/posts/9001').expect('Content-Type', /json/).expect(404, {}));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resources and embedded resources",
            "suites": [
                "Server",
                "GET /:resource?_embed="
            ],
            "updatePoint": {
                "line": 270,
                "column": 76
            },
            "line": 270,
            "code": "    test('should respond with corresponding resources and embedded resources', () => {\n      const posts = _.cloneDeep(db.posts);\n\n      posts[0].comments = [db.comments[0], db.comments[1]];\n      posts[1].comments = [db.comments[2], db.comments[3], db.comments[4]];\n      return request(server).get('/posts?_embed=comments').expect('Content-Type', /json/).expect(200, posts);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resources and embedded resources",
            "suites": [
                "Server",
                "GET /:resource?_embed&_embed="
            ],
            "updatePoint": {
                "line": 279,
                "column": 76
            },
            "line": 279,
            "code": "    test('should respond with corresponding resources and embedded resources', () => {\n      const posts = _.cloneDeep(db.posts);\n\n      posts[0].comments = [db.comments[0], db.comments[1]];\n      posts[0].refs = [db.refs[0]];\n      posts[1].comments = [db.comments[2], db.comments[3], db.comments[4]];\n      posts[1].refs = [];\n      return request(server).get('/posts?_embed=comments&_embed=refs').expect('Content-Type', /json/).expect(200, posts);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resources and embedded resources",
            "suites": [
                "Server",
                "GET /:resource/:id?_embed="
            ],
            "updatePoint": {
                "line": 290,
                "column": 76
            },
            "line": 290,
            "code": "    test('should respond with corresponding resources and embedded resources', () => {\n      const post = _.cloneDeep(db.posts[0]);\n\n      post.comments = [db.comments[0], db.comments[1]];\n      return request(server).get('/posts/1?_embed=comments').expect('Content-Type', /json/).expect(200, post);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource and embedded resources",
            "suites": [
                "Server",
                "GET /:resource/:id?_embed=&_embed="
            ],
            "updatePoint": {
                "line": 298,
                "column": 75
            },
            "line": 298,
            "code": "    test('should respond with corresponding resource and embedded resources', () => {\n      const post = _.cloneDeep(db.posts[0]);\n\n      post.comments = [db.comments[0], db.comments[1]];\n      post.refs = [db.refs[0]];\n      return request(server).get('/posts/1?_embed=comments&_embed=refs').expect('Content-Type', /json/).expect(200, post);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource and expanded inner resources",
            "suites": [
                "Server",
                "GET /:resource?_expand="
            ],
            "updatePoint": {
                "line": 307,
                "column": 81
            },
            "line": 307,
            "code": "    test('should respond with corresponding resource and expanded inner resources', () => {\n      const refs = _.cloneDeep(db.refs);\n\n      refs[0].post = db.posts[0];\n      return request(server).get('/refs?_expand=post').expect('Content-Type', /json/).expect(200, refs);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource and expanded inner resources",
            "suites": [
                "Server",
                "GET /:resource/:id?_expand="
            ],
            "updatePoint": {
                "line": 315,
                "column": 81
            },
            "line": 315,
            "code": "    test('should respond with corresponding resource and expanded inner resources', () => {\n      const comment = _.cloneDeep(db.comments[0]);\n\n      comment.post = db.posts[0];\n      return request(server).get('/comments/1?_expand=post').expect('Content-Type', /json/).expect(200, comment);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource and expanded inner resources",
            "suites": [
                "Server",
                "GET /:resource?_expand=&_expand"
            ],
            "updatePoint": {
                "line": 323,
                "column": 81
            },
            "line": 323,
            "code": "    test('should respond with corresponding resource and expanded inner resources', () => {\n      const refs = _.cloneDeep(db.refs);\n\n      refs[0].post = db.posts[0];\n      refs[0].user = db.users[0];\n      return request(server).get('/refs?_expand=post&_expand=user').expect('Content-Type', /json/).expect(200, refs);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource and expanded inner resources",
            "suites": [
                "Server",
                "GET /:resource/:id?_expand=&_expand="
            ],
            "updatePoint": {
                "line": 332,
                "column": 81
            },
            "line": 332,
            "code": "    test('should respond with corresponding resource and expanded inner resources', () => {\n      const comments = db.comments[0];\n      comments.post = db.posts[0];\n      comments.user = db.users[0];\n      return request(server).get('/comments/1?_expand=post&_expand=user').expect('Content-Type', /json/).expect(200, comments);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should delay response",
            "suites": [
                "Server",
                "GET /:resource>_delay="
            ],
            "updatePoint": {
                "line": 340,
                "column": 31
            },
            "line": 340,
            "code": "    test('should delay response', done => {\n      const start = new Date();\n      request(server).get('/posts?_delay=1100').expect(200, function (err) {\n        const end = new Date();\n        done(end - start > 1000 ? err : new Error(\"Request wasn't delayed\"));\n      });\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json, create a resource and increment id",
            "suites": [
                "Server",
                "POST /:resource"
            ],
            "updatePoint": {
                "line": 349,
                "column": 70
            },
            "line": 349,
            "code": "    test('should respond with json, create a resource and increment id', async () => {\n      await request(server).post('/posts').send({\n        body: 'foo',\n        booleanValue: true,\n        integerValue: 1\n      }).expect('Access-Control-Expose-Headers', 'Location').expect('Location', /posts\\/3$/).expect('Content-Type', /json/).expect(201, {\n        id: 3,\n        body: 'foo',\n        booleanValue: true,\n        integerValue: 1\n      });\n      assert.strictEqual(db.posts.length, 3);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should support x-www-form-urlencoded",
            "suites": [
                "Server",
                "POST /:resource"
            ],
            "updatePoint": {
                "line": 362,
                "column": 46
            },
            "line": 362,
            "code": "    test('should support x-www-form-urlencoded', async () => {\n      await request(server).post('/posts').type('form').send({\n        body: 'foo',\n        booleanValue: true,\n        integerValue: 1\n      }).expect('Content-Type', /json/) // x-www-form-urlencoded will convert to string\n      .expect(201, {\n        id: 3,\n        body: 'foo',\n        booleanValue: 'true',\n        integerValue: '1'\n      });\n      assert.strictEqual(db.posts.length, 3);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json, create a resource and generate string id",
            "suites": [
                "Server",
                "POST /:resource"
            ],
            "updatePoint": {
                "line": 376,
                "column": 76
            },
            "line": 376,
            "code": "    test('should respond with json, create a resource and generate string id', async () => {\n      await request(server).post('/refs').send({\n        url: 'http://foo.com',\n        postId: 1\n      }).expect('Content-Type', /json/).expect(201);\n      assert.strictEqual(db.refs.length, 2);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and set parentId",
            "suites": [
                "Server",
                "POST /:parent/:parentId/:resource"
            ],
            "updatePoint": {
                "line": 385,
                "column": 51
            },
            "line": 385,
            "code": "    test('should respond with json and set parentId', () => request(server).post('/posts/1/comments').send({\n      body: 'foo'\n    }).expect('Content-Type', /json/).expect(201, {\n      id: 6,\n      postId: '1',\n      body: 'foo'\n    }));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should delay response",
            "suites": [
                "Server",
                "POST /:resource?_delay="
            ],
            "updatePoint": {
                "line": 394,
                "column": 31
            },
            "line": 394,
            "code": "    test('should delay response', done => {\n      const start = new Date();\n      request(server).post('/posts?_delay=1100').send({\n        body: 'foo',\n        booleanValue: true,\n        integerValue: 1\n      }).expect(201, function (err) {\n        const end = new Date();\n        done(end - start > 1000 ? err : new Error(\"Request wasn't delayed\"));\n      });\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and replace resource",
            "suites": [
                "Server",
                "PUT /:resource/:id"
            ],
            "updatePoint": {
                "line": 407,
                "column": 55
            },
            "line": 407,
            "code": "    test('should respond with json and replace resource', async () => {\n      const post = {\n        id: 1,\n        booleanValue: true,\n        integerValue: 1\n      };\n      const res = await request(server).put('/posts/1').set('Accept', 'application/json') // body property omitted to test that the resource is replaced\n      .send(post).expect('Content-Type', /json/).expect(200, post); // TODO find a \"supertest\" way to test this\n      // https://github.com/typicode/json-server/issues/396\n\n      assert.deepStrictEqual(res.body, post); // assert it was created in database too\n\n      assert.deepStrictEqual(db.posts[0], post);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with 404 if resource is not found",
            "suites": [
                "Server",
                "PUT /:resource/:id"
            ],
            "updatePoint": {
                "line": 421,
                "column": 58
            },
            "line": 421,
            "code": "    test('should respond with 404 if resource is not found', () => request(server).put('/posts/9001').send({\n      id: 1,\n      body: 'bar'\n    }).expect('Content-Type', /json/).expect(404, {}));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should delay response",
            "suites": [
                "Server",
                "PUT /:resource:id?_delay="
            ],
            "updatePoint": {
                "line": 427,
                "column": 31
            },
            "line": 427,
            "code": "    test('should delay response', done => {\n      const start = new Date();\n      request(server).put('/posts/1?_delay=1100').set('Accept', 'application/json').send({\n        id: 1,\n        booleanValue: true,\n        integerValue: 1\n      }).expect(200, function (err) {\n        const end = new Date();\n        done(end - start > 1000 ? err : new Error(\"Request wasn't delayed\"));\n      });\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with json and update resource",
            "suites": [
                "Server",
                "PATCH /:resource/:id"
            ],
            "updatePoint": {
                "line": 440,
                "column": 54
            },
            "line": 440,
            "code": "    test('should respond with json and update resource', async () => {\n      const partial = {\n        body: 'bar'\n      };\n      const post = {\n        id: 1,\n        body: 'bar'\n      };\n      const res = await request(server).patch('/posts/1').send(partial).expect('Content-Type', /json/).expect(200, post);\n      assert.deepStrictEqual(res.body, post); // assert it was created in database too\n\n      assert.deepStrictEqual(db.posts[0], post);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with 404 if resource is not found",
            "suites": [
                "Server",
                "PATCH /:resource/:id"
            ],
            "updatePoint": {
                "line": 453,
                "column": 58
            },
            "line": 453,
            "code": "    test('should respond with 404 if resource is not found', () => request(server).patch('/posts/9001').send({\n      body: 'bar'\n    }).expect('Content-Type', /json/).expect(404, {}));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should delay response",
            "suites": [
                "Server",
                "PATCH /:resource:id?_delay="
            ],
            "updatePoint": {
                "line": 458,
                "column": 31
            },
            "line": 458,
            "code": "    test('should delay response', done => {\n      const start = new Date();\n      request(server).patch('/posts/1?_delay=1100').send({\n        body: 'bar'\n      }).send({\n        id: 1,\n        booleanValue: true,\n        integerValue: 1\n      }).expect(200, function (err) {\n        const end = new Date();\n        done(end - start > 1000 ? err : new Error(\"Request wasn't delayed\"));\n      });\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with empty data, destroy resource and dependent resources",
            "suites": [
                "Server",
                "DELETE /:resource/:id"
            ],
            "updatePoint": {
                "line": 473,
                "column": 82
            },
            "line": 473,
            "code": "    test('should respond with empty data, destroy resource and dependent resources', async () => {\n      await request(server).del('/posts/1').expect(200, {});\n      assert.strictEqual(db.posts.length, 1);\n      assert.strictEqual(db.comments.length, 3);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with 404 if resource is not found",
            "suites": [
                "Server",
                "DELETE /:resource/:id"
            ],
            "updatePoint": {
                "line": 478,
                "column": 58
            },
            "line": 478,
            "code": "    test('should respond with 404 if resource is not found', () => request(server).del('/posts/9001').expect('Content-Type', /json/).expect(404, {}));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should delay response",
            "suites": [
                "Server",
                "DELETE /:resource:id?_delay="
            ],
            "updatePoint": {
                "line": 481,
                "column": 31
            },
            "line": 481,
            "code": "    test('should delay response', done => {\n      const start = new Date();\n      request(server).del('/posts/1?_delay=1100').send({\n        id: 1,\n        booleanValue: true,\n        integerValue: 1\n      }).expect(200, function (err) {\n        const end = new Date();\n        done(end - start > 1000 ? err : new Error(\"Request wasn't delayed\"));\n      });\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with html",
            "suites": [
                "Server",
                "Static routes",
                "GET /"
            ],
            "updatePoint": {
                "line": 495,
                "column": 36
            },
            "line": 495,
            "code": "      test('should respond with html', () => request(server).get('/').expect(/You're successfully running JSON Server/).expect(200));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with js",
            "suites": [
                "Server",
                "Static routes",
                "GET /script.js"
            ],
            "updatePoint": {
                "line": 498,
                "column": 34
            },
            "line": 498,
            "code": "      test('should respond with js', () => request(server).get('/script.js').expect('Content-Type', /javascript/).expect(200));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with css",
            "suites": [
                "Server",
                "Static routes",
                "GET /style.css"
            ],
            "updatePoint": {
                "line": 501,
                "column": 35
            },
            "line": 501,
            "code": "      test('should respond with css', () => request(server).get('/style.css').expect('Content-Type', /css/).expect(200));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should be accessible",
            "suites": [
                "Server",
                "Database state"
            ],
            "updatePoint": {
                "line": 505,
                "column": 30
            },
            "line": 505,
            "code": "    test('should be accessible', () => {\n      assert(router.db.getState());\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should have no cache headers (for IE)",
            "suites": [
                "Server",
                "Responses"
            ],
            "updatePoint": {
                "line": 510,
                "column": 47
            },
            "line": 510,
            "code": "    test('should have no cache headers (for IE)', () => request(server).get('/db').expect('Cache-Control', 'no-cache').expect('Pragma', 'no-cache').expect('Expires', '-1'));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should rewrite using prefix",
            "suites": [
                "Server",
                "Rewriter"
            ],
            "updatePoint": {
                "line": 513,
                "column": 37
            },
            "line": 513,
            "code": "    test('should rewrite using prefix', () => request(server).get('/api/posts/1').expect(db.posts[0]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should rewrite using params",
            "suites": [
                "Server",
                "Rewriter"
            ],
            "updatePoint": {
                "line": 514,
                "column": 37
            },
            "line": 514,
            "code": "    test('should rewrite using params', () => request(server).get('/blog/posts/1/show').expect(db.posts[0]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should rewrite using query without params",
            "suites": [
                "Server",
                "Rewriter"
            ],
            "updatePoint": {
                "line": 515,
                "column": 51
            },
            "line": 515,
            "code": "    test('should rewrite using query without params', () => {\n      const expectedPost = _.cloneDeep(db.posts[0]);\n\n      expectedPost.comments = [db.comments[0], db.comments[1]];\n      return request(server).get('/firstpostwithcomments').expect(expectedPost);\n    });",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should rewrite using params and query",
            "suites": [
                "Server",
                "Rewriter"
            ],
            "updatePoint": {
                "line": 521,
                "column": 47
            },
            "line": 521,
            "code": "    test('should rewrite using params and query', () => request(server).get('/comments/special/1-quux').expect(200, [db.comments[4]]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should rewrite query params",
            "suites": [
                "Server",
                "Rewriter"
            ],
            "updatePoint": {
                "line": 522,
                "column": 37
            },
            "line": 522,
            "code": "    test('should rewrite query params', () => request(server).get('/articles?_id=1').expect(db.posts[0]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should expose routes",
            "suites": [
                "Server",
                "Rewriter"
            ],
            "updatePoint": {
                "line": 523,
                "column": 30
            },
            "line": 523,
            "code": "    test('should expose routes', () => request(server).get('/__rules').expect(rewriterRules));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should be possible to wrap response",
            "suites": [
                "Server",
                "router.render"
            ],
            "updatePoint": {
                "line": 533,
                "column": 45
            },
            "line": 533,
            "code": "    test('should be possible to wrap response', () => request(server).get('/posts/1').expect('Content-Type', /json/).expect(200, {\n      data: db.posts[0]\n    }));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should be possible to GET using a different id property",
            "suites": [
                "Server",
                "router.db._.id"
            ],
            "updatePoint": {
                "line": 546,
                "column": 65
            },
            "line": 546,
            "code": "    test('should be possible to GET using a different id property', () => request(server).get('/posts/1').expect('Content-Type', /json/).expect(200, router.db.getState().posts[0]));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should be possible to POST using a different id property",
            "suites": [
                "Server",
                "router.db._.id"
            ],
            "updatePoint": {
                "line": 547,
                "column": 66
            },
            "line": 547,
            "code": "    test('should be possible to POST using a different id property', () => request(server).post('/posts').send({\n      body: 'hello'\n    }).expect('Content-Type', /json/).expect(201, {\n      _id: 2,\n      body: 'hello'\n    }));",
            "file": "server/plural.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not create resource",
            "suites": [
                "Fake server",
                "POST /:resource"
            ],
            "updatePoint": {
                "line": 25,
                "column": 36
            },
            "line": 25,
            "code": "    test('should not create resource', async () => {\n      const user = {\n        name: 'bar'\n      };\n      await request(server).post('/user').send(user).expect(201, user);\n      assert.notDeepStrictEqual(db.user, user);\n    });",
            "file": "server/singular-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not update resource",
            "suites": [
                "Fake server",
                "PUT /:resource"
            ],
            "updatePoint": {
                "line": 34,
                "column": 36
            },
            "line": 34,
            "code": "    test('should not update resource', async () => {\n      const user = {\n        name: 'bar'\n      };\n      await request(server).put('/user').send(user).expect(200, user);\n      assert.notDeepStrictEqual(db.user, user);\n    });",
            "file": "server/singular-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should not update resource",
            "suites": [
                "Fake server",
                "PATCH /:resource"
            ],
            "updatePoint": {
                "line": 43,
                "column": 36
            },
            "line": 43,
            "code": "    test('should not update resource', async () => {\n      const user = {\n        name: 'bar'\n      };\n      await request(server).patch('/user').send(user).expect(200, {\n        name: 'bar',\n        email: 'foo@example.com'\n      });\n      assert.notDeepStrictEqual(db.user, user);\n    });",
            "file": "server/singular-fake.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should respond with corresponding resource",
            "suites": [
                "Server",
                "GET /:resource"
            ],
            "updatePoint": {
                "line": 21,
                "column": 52
            },
            "line": 21,
            "code": "    test('should respond with corresponding resource', () => request(server).get('/user').expect(200, db.user));",
            "file": "server/singular.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should create resource",
            "suites": [
                "Server",
                "POST /:resource"
            ],
            "updatePoint": {
                "line": 24,
                "column": 32
            },
            "line": 24,
            "code": "    test('should create resource', () => {\n      const user = {\n        name: 'bar'\n      };\n      return request(server).post('/user').send(user).expect(201, user);\n    });",
            "file": "server/singular.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should update resource",
            "suites": [
                "Server",
                "PUT /:resource"
            ],
            "updatePoint": {
                "line": 32,
                "column": 32
            },
            "line": 32,
            "code": "    test('should update resource', () => {\n      const user = {\n        name: 'bar'\n      };\n      return request(server).put('/user').send(user).expect(200, user);\n    });",
            "file": "server/singular.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should update resource",
            "suites": [
                "Server",
                "PATCH /:resource"
            ],
            "updatePoint": {
                "line": 40,
                "column": 32
            },
            "line": 40,
            "code": "    test('should update resource', () => request(server).patch('/user').send({\n      name: 'bar'\n    }).expect(200, {\n      name: 'bar',\n      email: 'foo@example.com'\n    }));",
            "file": "server/singular.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return first page",
            "suites": [
                "utils",
                "getPage"
            ],
            "updatePoint": {
                "line": 9,
                "column": 34
            },
            "line": 9,
            "code": "    test('should return first page', () => {\n      assert.deepStrictEqual(utils.getPage(array, 1, perPage), {\n        items: [1, 2],\n        current: 1,\n        first: 1,\n        next: 2,\n        last: 3\n      });\n    });",
            "file": "server/utils.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return second page",
            "suites": [
                "utils",
                "getPage"
            ],
            "updatePoint": {
                "line": 18,
                "column": 35
            },
            "line": 18,
            "code": "    test('should return second page', () => {\n      assert.deepStrictEqual(utils.getPage(array, 2, perPage), {\n        items: [3, 4],\n        current: 2,\n        first: 1,\n        prev: 1,\n        next: 3,\n        last: 3\n      });\n    });",
            "file": "server/utils.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return third page (last)",
            "suites": [
                "utils",
                "getPage"
            ],
            "updatePoint": {
                "line": 28,
                "column": 41
            },
            "line": 28,
            "code": "    test('should return third page (last)', () => {\n      assert.deepStrictEqual(utils.getPage(array, 3, perPage), {\n        items: [5],\n        current: 3,\n        first: 1,\n        prev: 2,\n        last: 3\n      });\n    });",
            "file": "server/utils.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return an empty array if page is greater than the last page",
            "suites": [
                "utils",
                "getPage"
            ],
            "updatePoint": {
                "line": 37,
                "column": 76
            },
            "line": 37,
            "code": "    test('should return an empty array if page is greater than the last page', () => {\n      assert.deepStrictEqual(utils.getPage(array, 99, perPage), {\n        items: []\n      });\n    });",
            "file": "server/utils.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return the array if perPage is greater than the array size",
            "suites": [
                "utils",
                "getPage"
            ],
            "updatePoint": {
                "line": 42,
                "column": 75
            },
            "line": 42,
            "code": "    test('should return the array if perPage is greater than the array size', () => {\n      assert.deepStrictEqual(utils.getPage(array, 1, 99), {\n        items: array\n      });\n    });",
            "file": "server/utils.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should return an empty array if the array is empty",
            "suites": [
                "utils",
                "getPage"
            ],
            "updatePoint": {
                "line": 47,
                "column": 60
            },
            "line": 47,
            "code": "    test('should return an empty array if the array is empty', () => {\n      assert.deepStrictEqual(utils.getPage([], 1, 1), {\n        items: []\n      });\n    });",
            "file": "server/utils.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should throw an error if data contains /",
            "suites": [
                "validateData"
            ],
            "updatePoint": {
                "line": 6,
                "column": 48
            },
            "line": 6,
            "code": "  test('should throw an error if data contains /', () => {\n    assert.throws(() => validateData({\n      'a/b': []\n    }), /found \\//);\n  });",
            "file": "server/validate-data.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "should throw an error if data is an array",
            "suites": [
                "validateData"
            ],
            "updatePoint": {
                "line": 11,
                "column": 49
            },
            "line": 11,
            "code": "  test('should throw an error if data is an array', () => {\n    assert.throws(() => validateData([]), /must be an object/);\n  });",
            "file": "server/validate-data.js",
            "skipped": false,
            "dir": "__tests__"
        },
        {
            "name": "shouldn't throw an error",
            "suites": [
                "validateData"
            ],
            "updatePoint": {
                "line": 14,
                "column": 32
            },
            "line": 14,
            "code": "  test(\"shouldn't throw an error\", () => {\n    assert.doesNotThrow(() => validateData({\n      a: []\n    }));\n  });",
            "file": "server/validate-data.js",
            "skipped": false,
            "dir": "__tests__"
        }
    ],
    "badge": "typicode__json-server.svg"
}