{
    "repo": "formatjs/formatjs",
    "url": "https://github.com/formatjs/formatjs",
    "branch": "main",
    "configs": [
        {
            "package": "babel-plugin-formatjs",
            "lang": "ts",
            "dir": "packages/babel-plugin-formatjs/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/cli",
            "lang": "js",
            "dir": "packages/cli/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/ecma376",
            "lang": "ts",
            "dir": "packages/ecma376/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/ecma402-abstract",
            "lang": "ts",
            "dir": "packages/ecma402-abstract/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "eslint-plugin-formatjs",
            "lang": "ts",
            "dir": "packages/eslint-plugin-formatjs/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/icu-messageformat-parser",
            "lang": "ts",
            "dir": "packages/icu-messageformat-parser/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/icu-skeleton-parser",
            "lang": "ts",
            "dir": "packages/icu-skeleton-parser/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-datetimeformat",
            "lang": "ts",
            "dir": "packages/intl-datetimeformat/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-displaynames",
            "lang": "ts",
            "dir": "packages/intl-displaynames/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-durationformat",
            "lang": "ts",
            "dir": "packages/intl-durationformat/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-getcanonicallocales",
            "lang": "ts",
            "dir": "packages/intl-getcanonicallocales/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-listformat",
            "lang": "ts",
            "dir": "packages/intl-listformat/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-locale",
            "lang": "ts",
            "dir": "packages/intl-locale/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-localematcher",
            "lang": "ts",
            "dir": "packages/intl-localematcher/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "intl-messageformat",
            "lang": "ts",
            "dir": "packages/intl-messageformat/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-numberformat",
            "lang": "ts",
            "dir": "packages/intl-numberformat/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-pluralrules",
            "lang": "ts",
            "dir": "packages/intl-pluralrules/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl-relativetimeformat",
            "lang": "ts",
            "dir": "packages/intl-relativetimeformat/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/intl",
            "lang": "ts",
            "dir": "packages/intl/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-intl",
            "lang": "js",
            "dir": "packages/react-intl/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@formatjs/swc-plugin",
            "lang": "ts",
            "dir": "packages/swc-plugin/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@formatjs/ts-transformer",
            "lang": "ts",
            "dir": "packages/ts-transformer/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "vue-intl",
            "lang": "ts",
            "dir": "packages/vue-intl/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "additionalComponentNames",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 30
            },
            "line": 27,
            "code": "test('additionalComponentNames', function () {\n  transformAndCheck('additionalComponentNames', {\n    additionalComponentNames: ['CustomMessage'],\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "additionalFunctionNames",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 29
            },
            "line": 33,
            "code": "test('additionalFunctionNames', function () {\n  transformAndCheck('additionalFunctionNames', {\n    additionalFunctionNames: ['t'],\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "ast",
            "suites": [],
            "updatePoint": {
                "line": 39,
                "column": 9
            },
            "line": 39,
            "code": "test('ast', function () {\n  transformAndCheck('ast', {\n    ast: true,\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "defineMessage",
            "suites": [],
            "updatePoint": {
                "line": 45,
                "column": 19
            },
            "line": 45,
            "code": "test('defineMessage', function () {\n  transformAndCheck('defineMessage')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "descriptionsAsObjects",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 27
            },
            "line": 49,
            "code": "test('descriptionsAsObjects', function () {\n  transformAndCheck('descriptionsAsObjects')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "defineMessages",
            "suites": [],
            "updatePoint": {
                "line": 53,
                "column": 20
            },
            "line": 53,
            "code": "test('defineMessages', function () {\n  transformAndCheck('defineMessages')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "empty",
            "suites": [],
            "updatePoint": {
                "line": 56,
                "column": 11
            },
            "line": 56,
            "code": "test('empty', function () {\n  transformAndCheck('empty')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "extractFromFormatMessageCall",
            "suites": [],
            "updatePoint": {
                "line": 59,
                "column": 34
            },
            "line": 59,
            "code": "test('extractFromFormatMessageCall', function () {\n  transformAndCheck('extractFromFormatMessageCall')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "extractFromFormatMessageCallStateless",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 43
            },
            "line": 62,
            "code": "test('extractFromFormatMessageCallStateless', function () {\n  transformAndCheck('extractFromFormatMessageCallStateless')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "formatMessageCall",
            "suites": [],
            "updatePoint": {
                "line": 65,
                "column": 23
            },
            "line": 65,
            "code": "test('formatMessageCall', function () {\n  transformAndCheck('formatMessageCall')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "FormattedMessage",
            "suites": [],
            "updatePoint": {
                "line": 68,
                "column": 22
            },
            "line": 68,
            "code": "test('FormattedMessage', function () {\n  transformAndCheck('FormattedMessage')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "inline",
            "suites": [],
            "updatePoint": {
                "line": 71,
                "column": 12
            },
            "line": 71,
            "code": "test('inline', function () {\n  transformAndCheck('inline')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "templateLiteral",
            "suites": [],
            "updatePoint": {
                "line": 74,
                "column": 21
            },
            "line": 74,
            "code": "test('templateLiteral', function () {\n  transformAndCheck('templateLiteral')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "idInterpolationPattern",
            "suites": [],
            "updatePoint": {
                "line": 78,
                "column": 28
            },
            "line": 78,
            "code": "test('idInterpolationPattern', function () {\n  transformAndCheck('idInterpolationPattern', {\n    idInterpolationPattern: '[folder].[name].[sha512:contenthash:hex:6]',\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "idInterpolationPattern default",
            "suites": [],
            "updatePoint": {
                "line": 84,
                "column": 36
            },
            "line": 84,
            "code": "test('idInterpolationPattern default', function () {\n  transformAndCheck('idInterpolationPattern')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "GH #2663",
            "suites": [],
            "updatePoint": {
                "line": 88,
                "column": 14
            },
            "line": 88,
            "code": "test('GH #2663', function () {\n  const filePath = path.join(__dirname, 'fixtures', `2663.js`)\n  const messages: ExtractedMessageDescriptor[] = []\n  const meta = {}\n\n  const {code} = transformFileSync(filePath, {\n    presets: ['@babel/preset-env', '@babel/preset-react'],\n    plugins: [\n      [\n        plugin,\n        {\n          pragma: '@react-intl',\n          onMsgExtracted(_, msgs) {\n            messages.push(...msgs)\n          },\n          onMetaExtracted(_, m) {\n            Object.assign(meta, m)\n          },\n        } as Options,\n        Date.now() + '' + ++cacheBust,\n      ],\n    ],\n  })!\n\n  expect({\n    data: {messages, meta},\n    code: code?.trim(),\n  }).toMatchSnapshot()\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "overrideIdFn",
            "suites": [],
            "updatePoint": {
                "line": 118,
                "column": 18
            },
            "line": 118,
            "code": "test('overrideIdFn', function () {\n  transformAndCheck('overrideIdFn', {\n    overrideIdFn: (\n      id?: string,\n      defaultMessage?: string,\n      description?: string,\n      filePath?: string\n    ) => {\n      const filename = path.basename(filePath!)\n      return `${filename}.${id}.${defaultMessage!.length}.${typeof description}`\n    },\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "removeDefaultMessage",
            "suites": [],
            "updatePoint": {
                "line": 131,
                "column": 26
            },
            "line": 131,
            "code": "test('removeDefaultMessage', function () {\n  transformAndCheck('removeDefaultMessage', {\n    removeDefaultMessage: true,\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "removeDefaultMessage + overrideIdFn",
            "suites": [],
            "updatePoint": {
                "line": 136,
                "column": 41
            },
            "line": 136,
            "code": "test('removeDefaultMessage + overrideIdFn', function () {\n  transformAndCheck('removeDefaultMessage', {\n    removeDefaultMessage: true,\n    overrideIdFn: (\n      id?: string,\n      defaultMessage?: string,\n      description?: string,\n      filePath?: string\n    ) => {\n      const filename = path.basename(filePath!)\n      return `${filename}.${id}.${defaultMessage!.length}.${typeof description}`\n    },\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "preserveWhitespace",
            "suites": [],
            "updatePoint": {
                "line": 150,
                "column": 24
            },
            "line": 150,
            "code": "test('preserveWhitespace', function () {\n  transformAndCheck('preserveWhitespace', {\n    preserveWhitespace: true,\n  })\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "extractSourceLocation",
            "suites": [],
            "updatePoint": {
                "line": 156,
                "column": 27
            },
            "line": 156,
            "code": "test('extractSourceLocation', function () {\n  const filePath = path.join(__dirname, 'fixtures', 'extractSourceLocation.js')\n  const messages: ExtractedMessageDescriptor[] = []\n  const meta = {}\n\n  const {code} = transform(filePath, {\n    pragma: '@react-intl',\n    extractSourceLocation: true,\n    onMsgExtracted(_, msgs) {\n      messages.push(...msgs)\n    },\n    onMetaExtracted(_, m) {\n      Object.assign(meta, m)\n    },\n  })\n  expect(code?.trim()).toMatchSnapshot()\n  expect(messages).toMatchSnapshot([\n    {\n      file: expect.any(String),\n    },\n  ])\n  expect(meta).toMatchSnapshot()\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "Properly throws parse errors",
            "suites": [],
            "updatePoint": {
                "line": 180,
                "column": 34
            },
            "line": 180,
            "code": "test('Properly throws parse errors', () => {\n  expect(() =>\n    transform(path.join(__dirname, 'fixtures', 'icuSyntax.js'))\n  ).toThrow('SyntaxError: MALFORMED_ARGUMENT')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "skipExtractionFormattedMessage",
            "suites": [],
            "updatePoint": {
                "line": 186,
                "column": 36
            },
            "line": 186,
            "code": "test('skipExtractionFormattedMessage', function () {\n  transformAndCheck('skipExtractionFormattedMessage')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "dummy",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 11
            },
            "line": 6,
            "code": "test('dummy', function (done) {\n  webpack(\n    {\n      entry: require.resolve('./fixtures/app.js'),\n      output: {\n        path: __dirname,\n        filename: 'out.js',\n      },\n      module: {\n        rules: [\n          {\n            test: /\\.vue$/,\n            loader: 'vue-loader',\n          },\n          // this will apply to both plain `.js` files\n          // AND `<script>` blocks in `.vue` files\n          {\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            options: {\n              plugins: [\n                [\n                  'babel-plugin-formatjs',\n                  {\n                    idInterpolationPattern: '[sha512:contenthash:base64:6]',\n                    ast: true,\n                  },\n                ],\n              ],\n            },\n          },\n        ],\n      },\n      plugins: [new VueLoaderPlugin()],\n    },\n    _ => {\n      expect(readFileSync(resolve(__dirname, 'out.js'), 'utf-8')).toContain(\n        '[{type:0,value:\"Today is \"},{type:3,value:\"ts\",style:{type:1,pattern:\"yyyyMMdd\",parsedOptions:{year:\"numeric\",month:\"2-digit\",day:\"2-digit\"}}}]'\n      )\n      done()\n    }\n  )\n}, 30000)",
            "file": "vue/integration.test.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-formatjs/tests"
        },
        {
            "name": "format USD in $locale to pattern $result",
            "suites": [],
            "line": 3,
            "code": "test.each`\n  locale       | result\n  ${'en'}      | ${'\"$\"#,##0.00;-\"$\"#,##0.00'}\n  ${'fr'}      | ${'#\\u202f##0,00\\xa0\"$US\";-#\\u202f##0,00\\xa0\"$US\"'}\n  ${'ko'}      | ${'\"US$\"#,##0.00;-\"US$\"#,##0.00'}\n  ${'zh-Hant'} | ${'\"US$\"#,##0.00;-\"US$\"#,##0.00'}\n  ${'zh-Hans'} | ${'\"US$\"#,##0.00;-\"US$\"#,##0.00'}\n  ${'ja'}      | ${'\"$\"#,##0.00;-\"$\"#,##0.00'}\n`('format USD in $locale to pattern $result', function ({locale, result}) {\n  expect(\n    generateNumFmtPattern(locale, {\n      style: 'currency',\n      currency: 'USD',\n    })\n  ).toBe(result)\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/ecma376/tests"
        },
        {
            "name": "format KRW in $locale to pattern $result",
            "suites": [],
            "line": 20,
            "code": "test.each`\n  locale       | result\n  ${'en'}      | ${'\"₩\"#,##0;-\"₩\"#,##0'}\n  ${'fr'}      | ${'#\\u202f##0\\xa0\"₩\";-#\\u202f##0\\xa0\"₩\"'}\n  ${'ko'}      | ${'\"₩\"#,##0;-\"₩\"#,##0'}\n  ${'zh-Hant'} | ${'\"￦\"#,##0;-\"￦\"#,##0'}\n  ${'zh-Hans'} | ${'\"￦\"#,##0;-\"￦\"#,##0'}\n  ${'ja'}      | ${'\"₩\"#,##0;-\"₩\"#,##0'}\n`('format KRW in $locale to pattern $result', function ({locale, result}) {\n  expect(\n    generateNumFmtPattern(locale, {\n      style: 'currency',\n      currency: 'KRW',\n    })\n  ).toBe(result)\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/ecma376/tests"
        },
        {
            "name": "format BHD in $locale to pattern $result",
            "suites": [],
            "line": 37,
            "code": "test.each`\n  locale       | result\n  ${'en'}      | ${'\"BHD\"\\xa0#,##0.000;-\"BHD\"\\xa0#,##0.000'}\n  ${'fr'}      | ${'#\\u202f##0,000\\xa0\"BHD\";-#\\u202f##0,000\\xa0\"BHD\"'}\n  ${'ko'}      | ${'\"BHD\"\\xa0#,##0.000;-\"BHD\"\\xa0#,##0.000'}\n  ${'zh-Hant'} | ${'\"BHD\"\\xa0#,##0.000;-\"BHD\"\\xa0#,##0.000'}\n  ${'zh-Hans'} | ${'\"BHD\"\\xa0#,##0.000;-\"BHD\"\\xa0#,##0.000'}\n  ${'ja'}      | ${'\"BHD\"\\xa0#,##0.000;-\"BHD\"\\xa0#,##0.000'}\n`('format BHD in $locale to pattern $result', function ({locale, result}) {\n  expect(\n    generateNumFmtPattern(locale, {\n      style: 'currency',\n      currency: 'BHD',\n    })\n  ).toBe(result)\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/ecma376/tests"
        },
        {
            "name": "format CLF in $locale to pattern $result",
            "suites": [],
            "line": 53,
            "code": "test.each`\n  locale       | result\n  ${'en'}      | ${'\"CLF\"\\xa0#,##0.0000;-\"CLF\"\\xa0#,##0.0000'}\n  ${'fr'}      | ${'#\\u202f##0,0000\\xa0\"CLF\";-#\\u202f##0,0000\\xa0\"CLF\"'}\n  ${'ko'}      | ${'\"CLF\"\\xa0#,##0.0000;-\"CLF\"\\xa0#,##0.0000'}\n  ${'zh-Hant'} | ${'\"CLF\"\\xa0#,##0.0000;-\"CLF\"\\xa0#,##0.0000'}\n  ${'zh-Hans'} | ${'\"CLF\"\\xa0#,##0.0000;-\"CLF\"\\xa0#,##0.0000'}\n  ${'ja'}      | ${'\"CLF\"\\xa0#,##0.0000;-\"CLF\"\\xa0#,##0.0000'}\n`('format CLF in $locale to pattern $result', function ({locale, result}) {\n  expect(\n    generateNumFmtPattern(locale, {\n      style: 'currency',\n      currency: 'CLF',\n    })\n  ).toBe(result)\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/ecma376/tests"
        },
        {
            "name": "format currency accounting",
            "suites": [],
            "updatePoint": {
                "line": 70,
                "column": 32
            },
            "line": 70,
            "code": "test('format currency accounting', function () {\n  expect(\n    generateNumFmtPattern('en', {\n      style: 'currency',\n      currency: 'USD',\n      currencySign: 'accounting',\n    })\n  ).toBe('\"$\"#,##0.00;(\"$\"#,##0.00)')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/ecma376/tests"
        },
        {
            "name": "PartitionPattern should partition pattern correctly",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 57
            },
            "line": 3,
            "code": "test('PartitionPattern should partition pattern correctly', function () {\n  expect(PartitionPattern('AA{0}BB')).toEqual([\n    {\n      type: 'literal',\n      value: 'AA',\n    },\n    {\n      type: '0',\n      value: undefined,\n    },\n    {\n      type: 'literal',\n      value: 'BB',\n    },\n  ])\n  expect(PartitionPattern('{0} BB')).toEqual([\n    {\n      type: '0',\n      value: undefined,\n    },\n    {\n      type: 'literal',\n      value: ' BB',\n    },\n  ])\n  expect(PartitionPattern('AA {0}')).toEqual([\n    {\n      type: 'literal',\n      value: 'AA ',\n    },\n    {\n      type: '0',\n      value: undefined,\n    },\n  ])\n})",
            "file": "PartitionPattern.test.ts",
            "skipped": false,
            "dir": "packages/ecma402-abstract/tests"
        },
        {
            "name": "plural_arg_2",
            "suites": [
                "@formatjs/icu-messageformat-parser"
            ],
            "updatePoint": {
                "line": 4,
                "column": 18
            },
            "line": 4,
            "code": "  it('plural_arg_2', () => {\n    expect(\n      new Parser(`\n    You have {itemCount, plural,\n        =0 {no items}\n        one {1 item}\n        other {{itemCount} items}\n    }.`).parse()\n    ).toEqual({\n      err: null,\n      val: [\n        {\n          location: {\n            end: {\n              column: 14,\n              line: 2,\n              offset: 14,\n            },\n            start: {\n              column: 1,\n              line: 1,\n              offset: 0,\n            },\n          },\n          type: 0,\n          value: `\n    You have `,\n        },\n        {\n          location: {\n            end: {\n              column: 6,\n              line: 6,\n              offset: 116,\n            },\n            start: {\n              column: 14,\n              line: 2,\n              offset: 14,\n            },\n          },\n          offset: 0,\n          options: {\n            '=0': {\n              location: {\n                end: {\n                  column: 22,\n                  line: 3,\n                  offset: 55,\n                },\n                start: {\n                  column: 12,\n                  line: 3,\n                  offset: 45,\n                },\n              },\n              value: [\n                {\n                  location: {\n                    end: {\n                      column: 21,\n                      line: 3,\n                      offset: 54,\n                    },\n                    start: {\n                      column: 13,\n                      line: 3,\n                      offset: 46,\n                    },\n                  },\n                  type: 0,\n                  value: 'no items',\n                },\n              ],\n            },\n            one: {\n              location: {\n                end: {\n                  column: 21,\n                  line: 4,\n                  offset: 76,\n                },\n                start: {\n                  column: 13,\n                  line: 4,\n                  offset: 68,\n                },\n              },\n              value: [\n                {\n                  location: {\n                    end: {\n                      column: 20,\n                      line: 4,\n                      offset: 75,\n                    },\n                    start: {\n                      column: 14,\n                      line: 4,\n                      offset: 69,\n                    },\n                  },\n                  type: 0,\n                  value: '1 item',\n                },\n              ],\n            },\n            other: {\n              location: {\n                end: {\n                  column: 34,\n                  line: 5,\n                  offset: 110,\n                },\n                start: {\n                  column: 15,\n                  line: 5,\n                  offset: 91,\n                },\n              },\n              value: [\n                {\n                  location: {\n                    end: {\n                      column: 27,\n                      line: 5,\n                      offset: 103,\n                    },\n                    start: {\n                      column: 16,\n                      line: 5,\n                      offset: 92,\n                    },\n                  },\n                  type: 1,\n                  value: 'itemCount',\n                },\n                {\n                  location: {\n                    end: {\n                      column: 33,\n                      line: 5,\n                      offset: 109,\n                    },\n                    start: {\n                      column: 27,\n                      line: 5,\n                      offset: 103,\n                    },\n                  },\n                  type: 0,\n                  value: ' items',\n                },\n              ],\n            },\n          },\n          pluralType: 'cardinal',\n          type: 6,\n          value: 'itemCount',\n        },\n        {\n          location: {\n            end: {\n              column: 7,\n              line: 6,\n              offset: 117,\n            },\n            start: {\n              column: 6,\n              line: 6,\n              offset: 116,\n            },\n          },\n          type: 0,\n          value: '.',\n        },\n      ],\n    })\n  })",
            "file": "browser-smoke.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "returns desired time patterns",
            "suites": [
                "date-time-pattern-generator",
                "when locale has hourCycle"
            ],
            "updatePoint": {
                "line": 26,
                "column": 37
            },
            "line": 26,
            "code": "    it('returns desired time patterns', function () {\n      let locale = new Intl.Locale('und', {hourCycle: 'h12'})\n      testDatah12.forEach(data => {\n        expect(getBestPattern(data.skeleton, locale)).toBe(\n          data.expectedTimePattern\n        )\n      })\n\n      locale = new Intl.Locale('und', {hourCycle: 'h23'})\n      testDatah23.forEach(data => {\n        expect(getBestPattern(data.skeleton, locale)).toBe(\n          data.expectedTimePattern\n        )\n      })\n    })",
            "file": "date-time-pattern-generator.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "returns desired time patterns",
            "suites": [
                "date-time-pattern-generator",
                "when locale has no hourCycle"
            ],
            "updatePoint": {
                "line": 44,
                "column": 37
            },
            "line": 44,
            "code": "    it('returns desired time patterns', function () {\n      let locale = new Intl.Locale('en-US')\n      testDatah12.forEach(data => {\n        expect(getBestPattern(data.skeleton, locale)).toBe(\n          data.expectedTimePattern\n        )\n      })\n\n      locale = new Intl.Locale('de-DE')\n      testDatah23.forEach(data => {\n        expect(getBestPattern(data.skeleton, locale)).toBe(\n          data.expectedTimePattern\n        )\n      })\n    })",
            "file": "date-time-pattern-generator.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "should hoist 1 plural",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 27
            },
            "line": 5,
            "code": "test('should hoist 1 plural', function () {\n  expect(\n    printAST(\n      hoistSelectors(\n        parse('I have {count, plural, one{a dog} other{many dogs}}')\n      )\n    )\n  ).toBe('{count,plural,one{I have a dog} other{I have many dogs}}')\n})",
            "file": "manipulator.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "hoist some random case 1",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 30
            },
            "line": 15,
            "code": "test('hoist some random case 1', function () {\n  expect(\n    printAST(\n      hoistSelectors(\n        parse(\n          '{p1, plural, one{one {foo, select, bar{two} baz{three} other{other}}} other{other}}'\n        )\n      )\n    )\n  ).toMatchSnapshot()\n})",
            "file": "manipulator.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "should hoist plural & select and tag",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 42
            },
            "line": 27,
            "code": "test('should hoist plural & select and tag', function () {\n  expect(\n    printAST(\n      hoistSelectors(\n        parse(`I have {count, plural, \n            one{a {\n                gender, select, \n                    male{male} \n                    female{female} \n                    other{male}\n                } <b>dog</b>\n            } \n            other{many dogs}} and {count, plural, \n                one{a {\n                    gender, select, \n                        male{male} \n                        female{female} \n                        other{male}\n                    } <strong>cat</strong>\n                } \n                other{many cats}}`)\n      )\n    )\n  ).toMatchSnapshot()\n})",
            "file": "manipulator.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "no-parser should export everything that index does",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 56
            },
            "line": 3,
            "code": "test('no-parser should export everything that index does', function () {\n  expect(Object.keys(noParser)).toEqual(Object.keys(withParser))\n})",
            "file": "no-parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "trivial_1",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 15
            },
            "line": 16,
            "code": "test('trivial_1', () => testParser('a', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "trivial_2",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 15
            },
            "line": 18,
            "code": "test('trivial_2', () => testParser('中文', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "basic_argument_1",
            "suites": [],
            "updatePoint": {
                "line": 20,
                "column": 22
            },
            "line": 20,
            "code": "test('basic_argument_1', () => testParser('{a}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "basic_argument_2",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 22
            },
            "line": 22,
            "code": "test('basic_argument_2', () => testParser('a {b} \\nc', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unescaped_string_literal_1",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 32
            },
            "line": 24,
            "code": "test('unescaped_string_literal_1', () => testParser('}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "double_apostrophes_1",
            "suites": [],
            "updatePoint": {
                "line": 26,
                "column": 26
            },
            "line": 26,
            "code": "test('double_apostrophes_1', () => testParser(\"a''b\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_string_1",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 21
            },
            "line": 28,
            "code": "test('quoted_string_1', () => testParser(\"'{a''b}'\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_string_2",
            "suites": [],
            "updatePoint": {
                "line": 30,
                "column": 21
            },
            "line": 30,
            "code": "test('quoted_string_2', () => testParser(\"'}a''b{'\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_string_3",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 21
            },
            "line": 32,
            "code": "test('quoted_string_3', () => testParser(\"aaa'{'\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_string_4",
            "suites": [],
            "updatePoint": {
                "line": 34,
                "column": 21
            },
            "line": 34,
            "code": "test('quoted_string_4', () => testParser(\"aaa'}'\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "not_quoted_string_1",
            "suites": [],
            "updatePoint": {
                "line": 36,
                "column": 25
            },
            "line": 36,
            "code": "test('not_quoted_string_1', () => testParser(\"'aa''b'\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "not_quoted_string_2",
            "suites": [],
            "updatePoint": {
                "line": 38,
                "column": 25
            },
            "line": 38,
            "code": "test('not_quoted_string_2', () => testParser(\"I don't know\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_quoted_string_1",
            "suites": [],
            "updatePoint": {
                "line": 41,
                "column": 30
            },
            "line": 41,
            "code": "test('unclosed_quoted_string_1', () => testParser(\"a '{a{ {}{}{} ''bb\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_quoted_string_2",
            "suites": [],
            "updatePoint": {
                "line": 45,
                "column": 30
            },
            "line": 45,
            "code": "test('unclosed_quoted_string_2', () => testParser(\"a 'a {}{}\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_quoted_string_3",
            "suites": [],
            "updatePoint": {
                "line": 48,
                "column": 30
            },
            "line": 48,
            "code": "test('unclosed_quoted_string_3', () =>\n  testParser(\"a '{a{ {}{}{}}}''' \\n {}\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_quoted_string_4",
            "suites": [],
            "updatePoint": {
                "line": 51,
                "column": 30
            },
            "line": 51,
            "code": "test('unclosed_quoted_string_4', () => testParser(\"You have '{count'\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_quoted_string_5",
            "suites": [],
            "updatePoint": {
                "line": 53,
                "column": 30
            },
            "line": 53,
            "code": "test('unclosed_quoted_string_5', () => testParser(\"You have '{count\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_quoted_string_6",
            "suites": [],
            "updatePoint": {
                "line": 55,
                "column": 30
            },
            "line": 55,
            "code": "test('unclosed_quoted_string_6', () => testParser(\"You have '{count}\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_pound_sign_1",
            "suites": [],
            "updatePoint": {
                "line": 58,
                "column": 25
            },
            "line": 58,
            "code": "test('quoted_pound_sign_1', () =>\n  testParser(\n    \"You {count, plural, one {worked for '#' hour} other {worked for '#' hours}} today.\",\n    {}\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_pound_sign_2",
            "suites": [],
            "updatePoint": {
                "line": 64,
                "column": 25
            },
            "line": 64,
            "code": "test('quoted_pound_sign_2', () =>\n  testParser(\n    \"You {count, plural, one {worked for '# hour} other {worked for '# hours}} today.\",\n    {}\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "simple_argument_1",
            "suites": [],
            "updatePoint": {
                "line": 70,
                "column": 23
            },
            "line": 70,
            "code": "test('simple_argument_1', () => testParser('My name is {0}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "simple_argument_2",
            "suites": [],
            "updatePoint": {
                "line": 72,
                "column": 23
            },
            "line": 72,
            "code": "test('simple_argument_2', () => testParser('My name is { name }', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "empty_argument_1",
            "suites": [],
            "updatePoint": {
                "line": 74,
                "column": 22
            },
            "line": 74,
            "code": "test('empty_argument_1', () => testParser('My name is { }', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "empty_argument_2",
            "suites": [],
            "updatePoint": {
                "line": 76,
                "column": 22
            },
            "line": 76,
            "code": "test('empty_argument_2', () => testParser('My name is {\\n}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "malformed_argument_1",
            "suites": [],
            "updatePoint": {
                "line": 78,
                "column": 26
            },
            "line": 78,
            "code": "test('malformed_argument_1', () => testParser('My name is {0!}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_argument_1",
            "suites": [],
            "updatePoint": {
                "line": 80,
                "column": 25
            },
            "line": 80,
            "code": "test('unclosed_argument_1', () => testParser('My name is { 0', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_argument_2",
            "suites": [],
            "updatePoint": {
                "line": 82,
                "column": 25
            },
            "line": 82,
            "code": "test('unclosed_argument_2', () => testParser('My name is { ', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "simple_number_arg_1",
            "suites": [],
            "updatePoint": {
                "line": 84,
                "column": 25
            },
            "line": 84,
            "code": "test('simple_number_arg_1', () =>\n  testParser('I have {numCats, number} cats.', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "simple_date_and_time_arg_1",
            "suites": [],
            "updatePoint": {
                "line": 87,
                "column": 32
            },
            "line": 87,
            "code": "test('simple_date_and_time_arg_1', () =>\n  testParser(\n    'Your meeting is scheduled for the {dateVal, date} at {timeVal, time}'\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "invalid_arg_format_1",
            "suites": [],
            "updatePoint": {
                "line": 92,
                "column": 26
            },
            "line": 92,
            "code": "test('invalid_arg_format_1', () => testParser('My name is {0, foo}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "expect_arg_format_1",
            "suites": [],
            "updatePoint": {
                "line": 94,
                "column": 25
            },
            "line": 94,
            "code": "test('expect_arg_format_1', () => testParser('My name is {0, }', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_number_arg_1",
            "suites": [],
            "updatePoint": {
                "line": 96,
                "column": 27
            },
            "line": 96,
            "code": "test('unclosed_number_arg_1', () => testParser('{0, number', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_number_arg_2",
            "suites": [],
            "updatePoint": {
                "line": 98,
                "column": 27
            },
            "line": 98,
            "code": "test('unclosed_number_arg_2', () => testParser('{0, number, percent', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unclosed_number_arg_3",
            "suites": [],
            "updatePoint": {
                "line": 100,
                "column": 27
            },
            "line": 100,
            "code": "test('unclosed_number_arg_3', () => testParser('{0, number, ::percent', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "number_arg_style_1",
            "suites": [],
            "updatePoint": {
                "line": 102,
                "column": 24
            },
            "line": 102,
            "code": "test('number_arg_style_1', () => testParser('{0, number, percent}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "expect_number_arg_style_1",
            "suites": [],
            "updatePoint": {
                "line": 104,
                "column": 31
            },
            "line": 104,
            "code": "test('expect_number_arg_style_1', () => testParser('{0, number, }', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "number_arg_skeleton_2",
            "suites": [],
            "updatePoint": {
                "line": 106,
                "column": 27
            },
            "line": 106,
            "code": "test('number_arg_skeleton_2', () =>\n  testParser('{0, number, :: currency/GBP}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "number_arg_skeleton_3",
            "suites": [],
            "updatePoint": {
                "line": 109,
                "column": 27
            },
            "line": 109,
            "code": "test('number_arg_skeleton_3', () =>\n  testParser('{0, number, ::currency/GBP compact-short}'))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "expect_number_arg_skeleton_token_1",
            "suites": [],
            "updatePoint": {
                "line": 112,
                "column": 40
            },
            "line": 112,
            "code": "test('expect_number_arg_skeleton_token_1', () =>\n  testParser('{0, number, ::}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "expect_number_arg_skeleton_token_option_1",
            "suites": [],
            "updatePoint": {
                "line": 115,
                "column": 47
            },
            "line": 115,
            "code": "test('expect_number_arg_skeleton_token_option_1', () =>\n  testParser('{0, number, ::currency/}'))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "date_arg_skeleton_1",
            "suites": [],
            "updatePoint": {
                "line": 136,
                "column": 25
            },
            "line": 136,
            "code": "test('date_arg_skeleton_1', () =>\n  testParser(\"{0, date, ::yyyy.MM.dd G 'at' HH:mm:ss vvvv}\"))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "date_arg_skeleton_2",
            "suites": [],
            "updatePoint": {
                "line": 139,
                "column": 25
            },
            "line": 139,
            "code": "test('date_arg_skeleton_2', () =>\n  testParser(\"{0, date, ::EEE, MMM d, ''yy}\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "date_arg_skeleton_3",
            "suites": [],
            "updatePoint": {
                "line": 142,
                "column": 25
            },
            "line": 142,
            "code": "test('date_arg_skeleton_3', () => testParser('{0, date, ::h:mm a}', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "date_arg_skeleton_with_jJ",
            "suites": [
                "date_skeleton"
            ],
            "line": 152,
            "code": "  test.each([\n    {skeleton: '{0, date, ::j}'},\n    {skeleton: '{0, date, ::jj}'},\n    {skeleton: '{0, date, ::jjj}'},\n    {skeleton: '{0, date, ::jjjj}'},\n    {skeleton: '{0, date, ::jjjjj}'},\n    {skeleton: '{0, date, ::jjjjjj}'},\n    {skeleton: '{0, date, ::J}'},\n    {skeleton: '{0, date, ::JJ}'},\n  ])('date_arg_skeleton_with_jJ', ({skeleton}) => {\n    testParser(skeleton, options)\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "duplicate_plural_selectors",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 166,
                "column": 32
            },
            "line": 166,
            "code": "test('duplicate_plural_selectors', () =>\n  testParser(\n    'You have {count, plural, one {# hot dog} one {# hamburger} one {# sandwich} other {# snacks}} in your lunch bag.'\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "duplicate_select_selectors",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 171,
                "column": 32
            },
            "line": 171,
            "code": "test('duplicate_select_selectors', () =>\n  testParser(\n    'You have {count, select, one {# hot dog} one {# hamburger} one {# sandwich} other {# snacks}} in your lunch bag.'\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "treat_unicode_nbsp_as_whitespace",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 176,
                "column": 38
            },
            "line": 176,
            "code": "test('treat_unicode_nbsp_as_whitespace', () =>\n  testParser(\n    `\n    {gender, select,\n    \\u200Emale {\n        {He}}\n    \\u200Efemale {\n        {She}}\n    \\u200Eother{\n        {They}}}\n    `\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "plural_arg_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 189,
                "column": 18
            },
            "line": 189,
            "code": "test('plural_arg_1', () =>\n  testParser(\n    `\n    Cart: {itemCount} {itemCount, plural,\n        one {item}\n        other {items}\n    }`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "plural_arg_2",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 198,
                "column": 18
            },
            "line": 198,
            "code": "test('plural_arg_2', () =>\n  testParser(\n    `\n    You have {itemCount, plural,\n        =0 {no items}\n        one {1 item}\n        other {{itemCount} items}\n    }.`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "plural_arg_with_offset_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 208,
                "column": 30
            },
            "line": 208,
            "code": "test('plural_arg_with_offset_1', () =>\n  testParser(\n    `You have {itemCount, plural, offset: 2\n        =0 {no items}\n        one {1 item}\n        other {{itemCount} items}\n    }.`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "plural_arg_with_escaped_nested_message",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 217,
                "column": 44
            },
            "line": 217,
            "code": "test('plural_arg_with_escaped_nested_message', () =>\n  testParser(\n    `\n    {itemCount, plural,\n        one {item'}'}\n        other {items'}'}\n    }`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "select_arg_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 226,
                "column": 18
            },
            "line": 226,
            "code": "test('select_arg_1', () =>\n  testParser(\n    `\n    {gender, select,\n        male {He}\n        female {She}\n        other {They}\n    } will respond shortly.`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "select_arg_with_nested_arguments",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 236,
                "column": 38
            },
            "line": 236,
            "code": "test('select_arg_with_nested_arguments', () =>\n  testParser(\n    `\n    {taxableArea, select,\n        yes {An additional {taxRate, number, percent} tax will be collected.}\n        other {No taxes apply.}\n    }\n    `\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "self_closing_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 246,
                "column": 24
            },
            "line": 246,
            "code": "test('self_closing_tag_1', () => testParser('<test-tag />', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "self_closing_tag_2",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 248,
                "column": 24
            },
            "line": 248,
            "code": "test('self_closing_tag_2', () => testParser('<test-tag/>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "not_self_closing_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 250,
                "column": 28
            },
            "line": 250,
            "code": "test('not_self_closing_tag_1', () => testParser('< test-tag />', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "invalid_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 252,
                "column": 19
            },
            "line": 252,
            "code": "test('invalid_tag_1', () => testParser('<test! />', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "invalid_tag_2",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 254,
                "column": 19
            },
            "line": 254,
            "code": "test('invalid_tag_2', () => testParser('<test / >', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "invalid_tag_3",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 256,
                "column": 19
            },
            "line": 256,
            "code": "test('invalid_tag_3', () => testParser('<test foo />', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "open_close_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 258,
                "column": 22
            },
            "line": 258,
            "code": "test('open_close_tag_1', () => testParser('<test-tag></test-tag>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "open_close_tag_2",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 260,
                "column": 22
            },
            "line": 260,
            "code": "test('open_close_tag_2', () => testParser('<test-tag>foo</test-tag>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "numeric_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 262,
                "column": 19
            },
            "line": 262,
            "code": "test('numeric_tag_1', () => testParser('<i0>foo</i0>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "open_close_tag_3",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 264,
                "column": 22
            },
            "line": 264,
            "code": "test('open_close_tag_3', () =>\n  testParser('<test-tag>foo {0} bar</test-tag>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "invalid_closing_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 267,
                "column": 27
            },
            "line": 267,
            "code": "test('invalid_closing_tag_1', () => testParser('<test>a</123>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "invalid_closing_tag_2",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 269,
                "column": 27
            },
            "line": 269,
            "code": "test('invalid_closing_tag_2', () => testParser('<test>a</', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "open_close_tag_with_nested_arg",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 271,
                "column": 36
            },
            "line": 271,
            "code": "test('open_close_tag_with_nested_arg', () =>\n  testParser(\n    `<bold>You have {\n        count, plural,\n        one {<italic>#</italic> apple}\n        other {<italic>#</italic> apples}\n    }.</bold>`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "open_close_tag_with_args",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 280,
                "column": 30
            },
            "line": 280,
            "code": "test('open_close_tag_with_args', () =>\n  testParser(\n    'I <b>have</b> <foo>{numCats, number} some string {placeholder}</foo> cats.'\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "incomplete_nested_message_in_tag",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 285,
                "column": 38
            },
            "line": 285,
            "code": "test('incomplete_nested_message_in_tag', () =>\n  testParser('<a>{a, plural, other {</a>}}'))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "ignore_tags_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 288,
                "column": 19
            },
            "line": 288,
            "code": "test('ignore_tags_1', () =>\n  testParser('<test-tag></test-tag>', {ignoreTag: true}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unmatched_open_close_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 291,
                "column": 32
            },
            "line": 291,
            "code": "test('unmatched_open_close_tag_1', () => testParser('<a></b>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "unmatched_open_close_tag_2",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 293,
                "column": 32
            },
            "line": 293,
            "code": "test('unmatched_open_close_tag_2', () => testParser('<a></ab>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "invalid_close_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 295,
                "column": 25
            },
            "line": 295,
            "code": "test('invalid_close_tag_1', () => testParser('<a></ b>', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 297,
                "column": 18
            },
            "line": 297,
            "code": "test('quoted_tag_1', () => testParser(\"'<a>\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "ignore_tag_number_arg_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 299,
                "column": 29
            },
            "line": 299,
            "code": "test('ignore_tag_number_arg_1', () =>\n  testParser('I have <foo>{numCats, number}</foo> cats.', {\n    ignoreTag: true,\n  }))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "left_angle_bracket_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 304,
                "column": 26
            },
            "line": 304,
            "code": "test('left_angle_bracket_1', () => testParser('I <3 cats.', {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "escaped_multiple_tags_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 306,
                "column": 29
            },
            "line": 306,
            "code": "test('escaped_multiple_tags_1', () =>\n  testParser(\"I '<'3 cats. '<a>foo</a>' '<b>bar</b>'\"))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "nested_tags_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 309,
                "column": 19
            },
            "line": 309,
            "code": "test('nested_tags_1', () =>\n  testParser('this is <a>nested <b>{placeholder}</b></a>'))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "uppercase_tag_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 312,
                "column": 21
            },
            "line": 312,
            "code": "test('uppercase_tag_1', () =>\n  testParser('this is <a>nested <Button>{placeholder}</Button></a>'))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "less_than_sign_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 316,
                "column": 22
            },
            "line": 316,
            "code": "test('less_than_sign_1', () =>\n  testParser('< {level, select, A {1} 4 {2} 3 {3} 2{6} 1{12}} hours'))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "nested_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 319,
                "column": 14
            },
            "line": 319,
            "code": "test('nested_1', () =>\n  testParser(\n    `\n    {gender_of_host, select,\n      female {\n        {num_guests, plural, offset:1\n          =0 {{host} does not give a party.}\n          =1 {{host} invites {guest} to her party.}\n          =2 {{host} invites {guest} and one other person to her party.}\n          other {{host} invites {guest} and # other people to her party.}}}\n      male {\n        {num_guests, plural, offset:1\n          =0 {{host} does not give a party.}\n          =1 {{host} invites {guest} to his party.}\n          =2 {{host} invites {guest} and one other person to his party.}\n          other {{host} invites {guest} and # other people to his party.}}}\n      other {\n        {num_guests, plural, offset:1\n          =0 {{host} does not give a party.}\n          =1 {{host} invites {guest} to their party.}\n          =2 {{host} invites {guest} and one other person to their party.}\n          other {{host} invites {guest} and # other people to their party.}}}}\n    `\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "negative_offset_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 344,
                "column": 23
            },
            "line": 344,
            "code": "test('negative_offset_1', () =>\n  testParser(\n    `{c, plural, offset:-2 =-1 { {text} project} other { {text} projects}}`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "not_escaped_pound_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 349,
                "column": 25
            },
            "line": 349,
            "code": "test('not_escaped_pound_1', () => testParser(`'#'`, {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "escaped_pound_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 351,
                "column": 21
            },
            "line": 351,
            "code": "test('escaped_pound_1', () =>\n  testParser(\n    `{numPhotos, plural, =0{no photos} =1{one photo} other{'#' photos}}`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "quoted_string_5",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 360,
                "column": 21
            },
            "line": 360,
            "code": "test('quoted_string_5', () => testParser(\"This '{isn''t}' obvious\", {}))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "selectordinal_1",
            "suites": [
                "date_skeleton"
            ],
            "updatePoint": {
                "line": 362,
                "column": 21
            },
            "line": 362,
            "code": "test('selectordinal_1', () =>\n  testParser(\n    `{floor, selectordinal, =0{ground} one{#st} two{#nd} few{#rd} other{#th}} floor`\n  ))",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/icu-messageformat-parser/tests"
        },
        {
            "name": "case: %p",
            "suites": [],
            "line": 4,
            "code": "test.each([\n  `yyyy.MM.dd G 'at' HH:mm:ss zzzz`,\n  `EEE, MMM d, ''yy`,\n  `h:mm a`,\n  ``,\n])('case: %p', skeleton => {\n  expect(parseDateTimeSkeleton(skeleton)).toMatchSnapshot()\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/icu-skeleton-parser/tests"
        },
        {
            "name": "[parseNumberSkeleton] case: %p",
            "suites": [],
            "line": 13,
            "code": "test.each([\n  'percent .##',\n  '.##',\n  '.##/w',\n  '.',\n  '% .##',\n  '.##/@##r',\n  '.##/@##s',\n  'percent .000*',\n  'percent .0###',\n  'percent .00/@##',\n  'percent .00/@@@',\n  'percent .00/@@@@*',\n  'percent scale/0.01',\n  'currency/CAD .',\n  '.00/w currency/CAD',\n  'currency/GBP .0*/@@@',\n  'currency/GBP .00##/@@@',\n  'currency/GBP .00##/@@@ unit-width-full-name',\n  'measure-unit/length-meter .00##/@@@',\n  'measure-unit/length-meter .00##/@@@ unit-width-full-name',\n  'compact-short',\n  'compact-long',\n  'scientific',\n  'scientific/sign-always',\n  'scientific/+ee/sign-always',\n  'engineering',\n  'engineering/sign-except-zero',\n  'notation-simple',\n  'sign-auto',\n  'sign-always',\n  '+!',\n  'sign-never',\n  '+_',\n  'sign-accounting',\n  '()',\n  'sign-accounting-always',\n  '()!',\n  'sign-except-zero',\n  '+?',\n  'sign-accounting-except-zero',\n  '()?',\n  '000',\n  'integer-width/*000',\n  'E0',\n  'E+!00',\n  'EE+?000',\n  '%x100',\n])('[parseNumberSkeleton] case: %p', skeleton => {\n  expect(\n    parseNumberSkeleton(parseNumberSkeletonFromString(skeleton))\n  ).toMatchSnapshot()\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/icu-skeleton-parser/tests"
        },
        {
            "name": "bestFitFormatMatcherScore",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 31
            },
            "line": 7,
            "code": "test('bestFitFormatMatcherScore', function () {\n  const opts: Intl.DateTimeFormatOptions = {\n    weekday: 'short',\n    era: 'short',\n    year: '2-digit',\n    month: 'narrow',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: 'numeric',\n    second: 'numeric',\n    timeZone: 'America/Los_Angeles',\n    timeZoneName: 'short',\n    hour12: true,\n  }\n  expect(\n    bestFitFormatMatcherScore(opts, parseDateTimeSkeleton('h:mm:ss a v'))\n  ).toBeGreaterThan(\n    bestFitFormatMatcherScore(opts, parseDateTimeSkeleton('HH:mm:ss v'))\n  )\n})",
            "file": "abstract/BestFitFormatMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "BestFitFormatMatcher second tz",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 36
            },
            "line": 27,
            "code": "test('BestFitFormatMatcher second tz', function () {\n  const availableFormats = {\n    'h:mm:ss a zzzz': 'h:mm:ss a zzzz',\n    'h:mm:ss a z': 'h:mm:ss a z',\n    h: 'h a',\n    H: 'HH',\n    hm: 'h:mm a',\n    Hm: 'HH:mm',\n    hms: 'h:mm:ss a',\n    Hms: 'HH:mm:ss',\n    hmsv: 'h:mm:ss a v',\n    Hmsv: 'HH:mm:ss v',\n    hmv: 'h:mm a v',\n    Hmv: 'HH:mm v',\n  }\n  expect(\n    BestFitFormatMatcher(\n      {\n        year: undefined,\n        month: undefined,\n        day: undefined,\n        hour: '2-digit',\n        minute: '2-digit',\n        second: undefined,\n        timeZoneName: 'short',\n        hour12: true,\n      },\n      Object.keys(availableFormats).map(k =>\n        parseDateTimeSkeleton(k, availableFormats[k as 'h'])\n      )\n    )\n  ).toEqual({\n    hour: '2-digit',\n    hour12: true,\n    minute: '2-digit',\n    pattern: '{hour}:{minute} {timeZoneName}',\n    pattern12: '{hour}:{minute} {ampm} {timeZoneName}',\n    rawPattern: 'h:mm a v',\n    skeleton: 'hmv',\n    timeZoneName: 'short',\n    rangePatterns: {},\n    rangePatterns12: {},\n  })\n})",
            "file": "abstract/BestFitFormatMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "bestFitFormatMatcherScore second tz",
            "suites": [],
            "updatePoint": {
                "line": 71,
                "column": 41
            },
            "line": 71,
            "code": "test('bestFitFormatMatcherScore second tz', function () {\n  const opts: Intl.DateTimeFormatOptions = {\n    year: undefined,\n    month: undefined,\n    day: undefined,\n    hour: '2-digit',\n    minute: '2-digit',\n    second: undefined,\n    timeZoneName: 'short',\n    hour12: true,\n  }\n  expect(\n    bestFitFormatMatcherScore(opts, parseDateTimeSkeleton('hmv', 'h:mm a v'))\n  ).toBeGreaterThan(\n    bestFitFormatMatcherScore(\n      opts,\n      parseDateTimeSkeleton('h:mm:ss a z', 'h:mm:ss a z')\n    )\n  )\n})",
            "file": "abstract/BestFitFormatMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "bestFitFormatMatcherScore long weekday (ko)",
            "suites": [],
            "updatePoint": {
                "line": 91,
                "column": 49
            },
            "line": 91,
            "code": "test('bestFitFormatMatcherScore long weekday (ko)', function () {\n  const opts: Intl.DateTimeFormatOptions = {\n    weekday: 'long',\n    era: 'short',\n    year: '2-digit',\n    month: 'narrow',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: 'numeric',\n    second: 'numeric',\n    timeZoneName: 'short',\n    hour12: true,\n  }\n  expect(\n    bestFitFormatMatcherScore(\n      opts,\n      parseDateTimeSkeleton('G y년 MMM d일 EEEE a h시 m분 s초 z')\n    )\n  ).toBeGreaterThan(\n    bestFitFormatMatcherScore(\n      opts,\n      parseDateTimeSkeleton('G y년 MMM d일 (E) a h시 m분 s초 z')\n    )\n  )\n})",
            "file": "abstract/BestFitFormatMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "bestFitFormatMatcherScore narrow weekday (ko)",
            "suites": [],
            "updatePoint": {
                "line": 116,
                "column": 51
            },
            "line": 116,
            "code": "test('bestFitFormatMatcherScore narrow weekday (ko)', function () {\n  const opts: Intl.DateTimeFormatOptions = {\n    weekday: 'short',\n    era: 'short',\n    year: '2-digit',\n    month: 'narrow',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: 'numeric',\n    second: 'numeric',\n    timeZoneName: 'short',\n    hour12: true,\n  }\n  expect(\n    bestFitFormatMatcherScore(\n      opts,\n      parseDateTimeSkeleton('G y년 MMM d일 (E) a h시 m분 s초 z')\n    )\n  ).toBeGreaterThan(\n    bestFitFormatMatcherScore(\n      opts,\n      parseDateTimeSkeleton('G y년 MMM d일 EEEE a h시 m분 s초 z')\n    )\n  )\n})",
            "file": "abstract/BestFitFormatMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2291",
            "suites": [],
            "updatePoint": {
                "line": 685,
                "column": 16
            },
            "line": 685,
            "code": "test('test #2291', function () {\n  const opts: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: true,\n    hourCycle: 'h12' as 'h12',\n  }\n  expect(BestFitFormatMatcher(opts, PROCESSED_FORMATS)).toEqual({\n    day: '2-digit',\n    hour: '2-digit',\n    hour12: true,\n    minute: '2-digit',\n    month: 'numeric',\n    pattern: '{year}年{month}月{day}日 {hour}:{minute}:{second}',\n    pattern12: '{year}年{month}月{day}日 {ampm}{hour}:{minute}:{second}',\n    rangePatterns: {},\n    rangePatterns12: {},\n    rawPattern: 'y年M月d日 ah:mm:ss',\n    second: '2-digit',\n    skeleton: 'yMMMd ah:mm:ss',\n    year: 'numeric',\n  })\n})",
            "file": "abstract/BestFitFormatMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "splitRangePattern basic case",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 34
            },
            "line": 7,
            "code": "test('splitRangePattern basic case', function () {\n  expect(splitRangePattern('{month} {day} - {day}')).toEqual([\n    {\n      pattern: '{month} {day} - ',\n      source: 'startRange',\n    },\n    {\n      pattern: '{day}',\n      source: 'endRange',\n    },\n  ])\n})",
            "file": "abstract/skeleton.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "splitRangePattern zh",
            "suites": [],
            "updatePoint": {
                "line": 20,
                "column": 26
            },
            "line": 20,
            "code": "test('splitRangePattern zh', function () {\n  expect(splitRangePattern('{month}月{day}日至{day}日')).toEqual([\n    {\n      pattern: '{month}月{day}日至',\n      source: 'startRange',\n    },\n    {\n      pattern: '{day}日',\n      source: 'endRange',\n    },\n  ])\n})",
            "file": "abstract/skeleton.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "parseDateTimeSkeleton",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 27
            },
            "line": 33,
            "code": "test('parseDateTimeSkeleton', function () {\n  expect(\n    parseDateTimeSkeleton(\n      'MMMd',\n      'MMM d',\n      {\n        d: 'MMM d – d',\n        M: 'MMM d – MMM d',\n      },\n      '{0} - {1}'\n    )\n  ).toEqual({\n    day: 'numeric',\n    month: 'short',\n    pattern: '{month} {day}',\n    pattern12: '{month} {day}',\n    rangePatterns: {\n      day: {\n        day: 'numeric',\n        month: 'short',\n        patternParts: [\n          {\n            pattern: '{month} {day} – ',\n            source: 'startRange',\n          },\n          {\n            pattern: '{day}',\n            source: 'endRange',\n          },\n        ],\n      },\n      month: {\n        day: 'numeric',\n        month: 'short',\n        patternParts: [\n          {\n            pattern: '{month} {day} – ',\n            source: 'startRange',\n          },\n          {\n            pattern: '{month} {day}',\n            source: 'endRange',\n          },\n        ],\n      },\n      default: {\n        patternParts: [\n          {\n            pattern: '{0}',\n            source: 'startRange',\n          },\n          {\n            pattern: ' - ',\n            source: 'shared',\n          },\n          {\n            pattern: '{1}',\n            source: 'endRange',\n          },\n        ],\n      },\n    },\n    rangePatterns12: {\n      day: {\n        day: 'numeric',\n        month: 'short',\n        patternParts: [\n          {\n            pattern: '{month} {day} – ',\n            source: 'startRange',\n          },\n          {\n            pattern: '{day}',\n            source: 'endRange',\n          },\n        ],\n      },\n      month: {\n        day: 'numeric',\n        month: 'short',\n        patternParts: [\n          {\n            pattern: '{month} {day} – ',\n            source: 'startRange',\n          },\n          {\n            pattern: '{month} {day}',\n            source: 'endRange',\n          },\n        ],\n      },\n      default: {\n        patternParts: [\n          {\n            pattern: '{0}',\n            source: 'startRange',\n          },\n          {\n            pattern: ' - ',\n            source: 'shared',\n          },\n          {\n            pattern: '{1}',\n            source: 'endRange',\n          },\n        ],\n      },\n    },\n    rawPattern: 'MMM d',\n    skeleton: 'MMMd',\n  })\n})",
            "file": "abstract/skeleton.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "processDateTimePattern",
            "suites": [],
            "updatePoint": {
                "line": 146,
                "column": 28
            },
            "line": 146,
            "code": "test('processDateTimePattern', function () {\n  expect(processDateTimePattern('Bh:mm:ss')).toEqual([\n    '{hour}:{minute}:{second}',\n    '{ampm}{hour}:{minute}:{second}',\n  ])\n  expect(processDateTimePattern('y年M月d日 Bh:mm:ss')).toEqual([\n    '{year}年{month}月{day}日 {hour}:{minute}:{second}',\n    '{year}年{month}月{day}日 {ampm}{hour}:{minute}:{second}',\n  ])\n})",
            "file": "abstract/skeleton.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "basic",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 14,
                "column": 11
            },
            "line": 14,
            "code": "  it('basic', function () {\n    const d1 = new Date(2020, 1, 1)\n    const d2 = new Date(2020, 1, 15)\n    const dtf = new DateTimeFormat('en', {\n      month: 'short',\n      day: 'numeric',\n    })\n    expect(dtf.formatRange(d1, d2)).toBe('Feb 1 – 15')\n  })",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "basic parts",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 23,
                "column": 17
            },
            "line": 23,
            "code": "  it('basic parts', function () {\n    const d1 = new Date(2020, 1, 1)\n    const d2 = new Date(2020, 1, 15)\n\n    expect(\n      new DateTimeFormat('en', {\n        month: 'short',\n        day: 'numeric',\n      }).formatRangeToParts(d1, d2)\n    ).toEqual([\n      {\n        source: 'startRange',\n        type: 'month',\n        value: 'Feb',\n      },\n      {\n        source: 'startRange',\n        type: 'literal',\n        value: ' ',\n      },\n      {\n        source: 'startRange',\n        type: 'day',\n        value: '1',\n      },\n      {\n        source: 'startRange',\n        type: 'literal',\n        value: ' – ',\n      },\n      {\n        source: 'endRange',\n        type: 'day',\n        value: '15',\n      },\n    ])\n  })",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "descriptor",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 66,
                "column": 16
            },
            "line": 66,
            "code": "test('descriptor', function () {\n  let descriptor = Object.getOwnPropertyDescriptor(\n    DateTimeFormat.prototype,\n    'formatRange'\n  )\n  expect(descriptor?.writable).toBe(true)\n  expect(descriptor?.enumerable).toBe(false)\n  expect(descriptor?.configurable).toBe(true)\n})",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "v8 test/intl/date-format/format-rage error",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 76,
                "column": 48
            },
            "line": 76,
            "code": "test('v8 test/intl/date-format/format-rage error', function () {\n  const date1 = new Date('2019-1-3')\n  const date2 = new Date('2019-1-5')\n  const dtf = new DateTimeFormat(['en'])\n  // @ts-ignore\n  expect(() => dtf.formatRange()).toThrow(TypeError)\n  // @ts-ignore\n  expect(() => dtf.formatRange(date1)).toThrow(TypeError)\n  // @ts-ignore\n  expect(() => dtf.formatRange(undefined, date2)).toThrow(TypeError)\n  // @ts-ignore\n  expect(() => dtf.formatRange(date1, undefined)).toThrow(TypeError)\n  // @ts-ignore\n  expect(() => dtf.formatRange('2019-1-3', date2)).toThrow(RangeError)\n  // @ts-ignore\n  expect(() => dtf.formatRange(date1, '2019-5-4')).toThrow(RangeError)\n  // @ts-ignore\n  expect(() => dtf.formatRange(date1, date2)).not.toThrow()\n})",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "v8 test/intl/date-format/format-rage error negative",
            "suites": [
                "DateTimeFormat range format"
            ],
            "line": 96,
            "code": "test.skip('v8 test/intl/date-format/format-rage error negative', function () {",
            "file": "format-range.test.ts",
            "skipped": true,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "v8 test/intl/date-format/format-range",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 104,
                "column": 43
            },
            "line": 104,
            "code": "test('v8 test/intl/date-format/format-range', function () {\n  const date1 = new Date('2019-1-3')\n  const date2 = new Date('2019-1-5')\n  const date3 = new Date('2019-3-4')\n  const date4 = new Date('2020-3-4')\n  var dtf = new DateTimeFormat(['en'])\n\n  expect(dtf.formatRange(date1, date2)).toBe('1/3/2019 – 1/5/2019')\n  expect(dtf.formatRange(date1, date3)).toBe('1/3/2019 – 3/4/2019')\n  expect(dtf.formatRange(date1, date4)).toBe('1/3/2019 – 3/4/2020')\n  expect(dtf.formatRange(date2, date3)).toBe('1/5/2019 – 3/4/2019')\n  expect(dtf.formatRange(date2, date4)).toBe('1/5/2019 – 3/4/2020')\n  expect(dtf.formatRange(date3, date4)).toBe('3/4/2019 – 3/4/2020')\n})",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "v8 test/intl/date-format/format-range 2",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 119,
                "column": 45
            },
            "line": 119,
            "code": "test('v8 test/intl/date-format/format-range 2', function () {\n  const date1 = new Date('2019-1-3')\n  const date2 = new Date('2019-1-5')\n  const date3 = new Date('2019-3-4')\n  const date4 = new Date('2020-3-4')\n  const dtf = new DateTimeFormat(['en'], {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  })\n  expect(dtf.formatRange(date1, date2)).toBe('Jan 3 – 5, 2019')\n  expect(dtf.formatRange(date1, date3)).toBe('Jan 3 – Mar 4, 2019')\n  expect(dtf.formatRange(date1, date4)).toBe('Jan 3, 2019 – Mar 4, 2020')\n  expect(dtf.formatRange(date2, date3)).toBe('Jan 5 – Mar 4, 2019')\n  expect(dtf.formatRange(date2, date4)).toBe('Jan 5, 2019 – Mar 4, 2020')\n  expect(dtf.formatRange(date3, date4)).toBe('Mar 4, 2019 – Mar 4, 2020')\n})",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "v8 test/intl/date-format/format-range TimeClip",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 137,
                "column": 52
            },
            "line": 137,
            "code": "test('v8 test/intl/date-format/format-range TimeClip', function () {\n  const dtf = new DateTimeFormat(['en'], {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  })\n\n  // Test the sequence of ToNumber and TimeClip\n  var secondDateAccessed = false\n  expect(() =>\n    dtf.formatRange(\n      new Date(864000000 * 10000000 + 1), // a date will cause TimeClip return NaN\n      // @ts-ignore\n      {\n        // @ts-ignore\n        get [Symbol.toPrimitive]() {\n          secondDateAccessed = true\n          return {}\n        },\n      }\n    )\n  ).toThrow(TypeError)\n  expect(secondDateAccessed).toBe(true)\n})",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "v8 test/intl/date-format/format_range_hour_cycle.js",
            "suites": [
                "DateTimeFormat range format"
            ],
            "line": 162,
            "code": "test.skip('v8 test/intl/date-format/format_range_hour_cycle.js', function () {",
            "file": "format-range.test.ts",
            "skipped": true,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "default formatRange pattern (short), #2474",
            "suites": [
                "DateTimeFormat range format"
            ],
            "updatePoint": {
                "line": 378,
                "column": 48
            },
            "line": 378,
            "code": "test('default formatRange pattern (short), #2474', function () {\n  const dtf = new DateTimeFormat('en', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  let date1 = new Date(Date.UTC(2021, 0, 10)) // \"Jan 10, 2021\"\n  let date2 = new Date(Date.UTC(2021, 0, 20)) // \"Jan 20, 2021\"\n  expect(dtf.formatRange(date1, date2)).toBe(\n    'Jan 10, 2021, 12:00 AM – Jan 20, 2021, 12:00 AM'\n  )\n})",
            "file": "format-range.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "default formatRange pattern (long), #2474",
            "suites": [
                "DateTimeFormat range format"
            ],
            "line": 394,
            "code": "test.skip('default formatRange pattern (long), #2474', function () {",
            "file": "format-range.test.ts",
            "skipped": true,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "resolvedOptions ",
            "suites": [
                "format"
            ],
            "updatePoint": {
                "line": 291,
                "column": 50
            },
            "line": 291,
            "code": "    it(`resolvedOptions ${JSON.stringify(options)}`, function () {\n      const resolvedOptions = new DateTimeFormat(\n        'ko',\n        options\n      ).resolvedOptions()\n      const result: Record<string, any> = {}\n      Object.keys(options).forEach(\n        k => (result[k] = resolvedOptions[k as 'day'])\n      )\n      expect(result).toEqual(options)\n    })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "ko ",
            "suites": [
                "format"
            ],
            "updatePoint": {
                "line": 302,
                "column": 37
            },
            "line": 302,
            "code": "    it(`ko ${JSON.stringify(options)}`, function () {\n      expect(new DateTimeFormat('ko', options).format(TS)).toBe(ko)\n    })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "en ",
            "suites": [
                "format"
            ],
            "updatePoint": {
                "line": 305,
                "column": 37
            },
            "line": 305,
            "code": "    it(`en ${JSON.stringify(options)}`, function () {\n      expect(new DateTimeFormat('en', options).format(TS)).toBe(en)\n    })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "ko ",
            "suites": [
                "toLocaleString"
            ],
            "updatePoint": {
                "line": 313,
                "column": 37
            },
            "line": 313,
            "code": "    it(`ko ${JSON.stringify(options)}`, function () {\n      expect(toLocaleString(new Date(TS), 'ko', options)).toBe(ko)\n    })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "en ",
            "suites": [
                "toLocaleString"
            ],
            "updatePoint": {
                "line": 316,
                "column": 37
            },
            "line": 316,
            "code": "    it(`en ${JSON.stringify(options)}`, function () {\n      expect(toLocaleString(new Date(TS), 'en', options)).toBe(en)\n    })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "ko",
            "suites": [
                "toLocaleDateString"
            ],
            "updatePoint": {
                "line": 323,
                "column": 8
            },
            "line": 323,
            "code": "  it('ko', function () {\n    expect(toLocaleDateString(new Date(TS), 'ko')).toBe('2020. 6. 16.')\n  })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "en",
            "suites": [
                "toLocaleDateString"
            ],
            "updatePoint": {
                "line": 326,
                "column": 8
            },
            "line": 326,
            "code": "  it('en', function () {\n    expect(toLocaleDateString(new Date(TS), 'en')).toBe('6/16/2020')\n  })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "ko",
            "suites": [
                "toLocaleTimeString"
            ],
            "updatePoint": {
                "line": 332,
                "column": 8
            },
            "line": 332,
            "code": "  it('ko', function () {\n    expect(toLocaleTimeString(new Date(TS), 'ko', {timeZone: 'UTC'})).toBe(\n      'AM 4:48:20'\n    )\n  })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "en",
            "suites": [
                "toLocaleTimeString"
            ],
            "updatePoint": {
                "line": 337,
                "column": 8
            },
            "line": 337,
            "code": "  it('en', function () {\n    expect(toLocaleTimeString(new Date(TS), 'en', {timeZone: 'UTC'})).toBe(\n      '4:48:20 AM'\n    )\n  })",
            "file": "format.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "Expected the same value for value ,\n  locales:  and options: ",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 45
            },
            "line": 20,
            "code": "  it(`Expected the same value for value ${value},\n  locales: ${locales} and options: ${options}`, function () {\n    expect(dtf.format(value)).toBe(reduce(dtf.formatToParts(value)))\n  })",
            "file": "ftp-main.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "actualPartTypes",
            "suites": [
                "formatToParts-main"
            ],
            "updatePoint": {
                "line": 59,
                "column": 21
            },
            "line": 59,
            "code": "  it('actualPartTypes', function () {\n    const actualPartTypes = new DateTimeFormat('en-us', {\n      weekday: 'long',\n      era: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      hour12: true,\n      timeZone: 'UTC',\n      timeZoneName: 'long',\n    })\n      .formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42))\n      .map(part => part.type)\n\n    const legalPartTypes = [\n      'weekday',\n      'era',\n      'year',\n      'month',\n      'day',\n      'hour',\n      'minute',\n      'second',\n      'literal',\n      'dayPeriod',\n      'timeZoneName',\n    ]\n\n    actualPartTypes.forEach(function (type) {\n      expect(legalPartTypes).toContain(type)\n    })\n  })",
            "file": "ftp-main.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "smoke test EST",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 15,
                "column": 20
            },
            "line": 15,
            "code": "  it('smoke test EST', function () {\n    expect(\n      new DateTimeFormat('en', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'long',\n        timeZone: 'America/New_York',\n      }).format(new Date(0))\n    ).toBe('12/31/1969, 7:00:00 PM Eastern Standard Time')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "en-GB default resolvedOptions, GH #1951",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 29,
                "column": 45
            },
            "line": 29,
            "code": "  it('en-GB default resolvedOptions, GH #1951', function () {\n    expect(\n      new DateTimeFormat('en-GB', {timeZone: 'UTC'}).resolvedOptions()\n    ).toEqual({\n      calendar: 'gregory',\n      day: '2-digit',\n      locale: 'en-GB',\n      month: '2-digit',\n      numberingSystem: 'latn',\n      timeZone: 'UTC',\n      year: 'numeric',\n    })\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "en-GB default format, GH #1951",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 42,
                "column": 36
            },
            "line": 42,
            "code": "  it('en-GB default format, GH #1951', function () {\n    expect(\n      new DateTimeFormat('en-GB', {timeZone: 'UTC'}).format(new Date(0))\n    ).toBe('01/01/1970')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "smoke test CST",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 47,
                "column": 20
            },
            "line": 47,
            "code": "  it('smoke test CST', function () {\n    expect(\n      new DateTimeFormat('en', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'long',\n        timeZone: 'Asia/Shanghai',\n      }).format(new Date(0))\n    ).toBe('1/1/1970, 8:00:00 AM China Standard Time')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "CST w/ undefined TZ",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 61,
                "column": 25
            },
            "line": 61,
            "code": "  it('CST w/ undefined TZ', function () {\n    const {TZ} = process.env\n    process.env.TZ = undefined\n    expect(\n      new DateTimeFormat('en', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'long',\n        timeZone: 'Asia/Shanghai',\n      }).format(new Date(0))\n    ).toBe('1/1/1970, 8:00:00 AM China Standard Time')\n    process.env.TZ = TZ\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "smoke test for #1915",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 78,
                "column": 26
            },
            "line": 78,
            "code": "  it('smoke test for #1915', function () {\n    const {TZ} = process.env\n    process.env.TZ = undefined\n    expect(\n      new DateTimeFormat('zh-Hans', {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n      }).format(new Date(0))\n    ).toBe('1月1日星期四')\n    process.env.TZ = TZ\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test for GH issue #1915",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 90,
                "column": 29
            },
            "line": 90,
            "code": "  it('test for GH issue #1915', function () {\n    expect(\n      new DateTimeFormat('en', {\n        hour: 'numeric',\n        minute: 'numeric',\n        timeZone: 'Asia/Shanghai',\n      }).format(new Date(0))\n    ).toBe('8:00 AM')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "setDefaultTimeZone should work",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 99,
                "column": 36
            },
            "line": 99,
            "code": "  it('setDefaultTimeZone should work', function () {\n    const defaultTimeZone = DateTimeFormat.getDefaultTimeZone()\n    DateTimeFormat.__setDefaultTimeZone('Asia/Shanghai')\n    expect(\n      new DateTimeFormat('en', {\n        hour: 'numeric',\n        minute: 'numeric',\n      }).format(new Date(0))\n    ).toBe('8:00 AM')\n    DateTimeFormat.__setDefaultTimeZone(defaultTimeZone)\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "diff tz should yield different result",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 110,
                "column": 43
            },
            "line": 110,
            "code": "  it('diff tz should yield different result', function () {\n    const {TZ} = process.env\n    process.env.TZ = undefined\n    const now = new Date()\n    expect(\n      new DateTimeFormat('en', {\n        hour: 'numeric',\n        minute: 'numeric',\n        timeZone: 'Asia/Shanghai',\n      }).format(now)\n    ).not.toBe(\n      new DateTimeFormat('en', {\n        hour: 'numeric',\n        minute: 'numeric',\n      }).format(now)\n    )\n    process.env.TZ = TZ\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "month: long",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 128,
                "column": 17
            },
            "line": 128,
            "code": "  it('month: long', function () {\n    expect(\n      new DateTimeFormat('en', {\n        month: 'long',\n      }).format(new Date(0))\n    ).toBe('January')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "negative ts",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 135,
                "column": 17
            },
            "line": 135,
            "code": "  it('negative ts', function () {\n    expect(\n      new DateTimeFormat('en', {weekday: 'short', timeZone: 'UTC'}).format(\n        new Date(1899, 1, 1)\n      )\n    ).toBe('Wed')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2106",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 142,
                "column": 16
            },
            "line": 142,
            "code": "  it('test #2106', function () {\n    expect(\n      new DateTimeFormat('en', {\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZone: 'Europe/Amsterdam',\n      }).format(new Date('2020-09-16T11:55:32.491+02:00'))\n    ).toBe('11:55 AM')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2145",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "line": 151,
            "code": "  it.skip('test #2145', function () {",
            "file": "index.test.ts",
            "skipped": true,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2145",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 160,
                "column": 16
            },
            "line": 160,
            "code": "  it('test #2145', function () {\n    expect(() =>\n      new DateTimeFormat('fa', {\n        month: 'long',\n        year: '2-digit',\n        day: '2-digit',\n      }).format(new Date('2020-09-16T11:55:32.491+02:00'))\n    ).toThrowError(\n      new RangeError(\n        'Calendar \"persian\" is not supported. Try setting \"calendar\" to 1 of the following: gregory'\n      )\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2192",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 173,
                "column": 16
            },
            "line": 173,
            "code": "  it('test #2192', function () {\n    expect(\n      new DateTimeFormat('en', {\n        calendar: 'gregory',\n        numberingSystem: 'latn',\n        timeZone: 'Africa/Johannesburg', // UTC+2\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n      }).format(Date.UTC(2020, 0, 1, 12, 0, 0))\n    ).toBe('1/1/2020, 2:00:00 PM')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2170",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 188,
                "column": 16
            },
            "line": 188,
            "code": "  it('test #2170', function () {\n    const formatter = new DateTimeFormat('en-GB', {\n      calendar: 'gregory',\n      hour: 'numeric',\n      hourCycle: 'h23',\n      timeZone: 'Europe/Berlin',\n    })\n    expect(formatter.format(new Date('2019-03-31T00:59:59.999Z'))).toBe('01')\n    expect(formatter.format(new Date('2019-03-31T01:00:00.000Z'))).toBe('03')\n    expect(formatter.format(new Date('2019-03-31T01:00:00.001Z'))).toBe('03')\n\n    expect(formatter.format(new Date('2019-10-27T00:59:59.999Z'))).toBe('02')\n    expect(formatter.format(new Date('2019-10-27T01:00:00.000Z'))).toBe('02')\n    expect(formatter.format(new Date('2019-10-27T01:00:00.001Z'))).toBe('02')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2236",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 203,
                "column": 16
            },
            "line": 203,
            "code": "  it('test #2236', function () {\n    const date = new Date('2020-09-16T11:55:32.491+02:00')\n    const formatter = new DateTimeFormat('en-US', {\n      year: undefined,\n      month: undefined,\n      day: undefined,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: undefined,\n      timeZoneName: 'short',\n      timeZone: 'Europe/Amsterdam',\n    })\n    expect(formatter.format(date)).toBe('11:55 AM GMT+2')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2291",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 217,
                "column": 16
            },
            "line": 217,
            "code": "  it('test #2291', function () {\n    const date = new Date(2020, 1, 1, 10, 10, 10, 0)\n    const dtf = new DateTimeFormat('zh-Hans', {\n      year: 'numeric',\n      month: 'short',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true,\n      hourCycle: 'h12',\n      localeMatcher: 'lookup',\n      formatMatcher: 'best fit',\n      timeZone: 'Asia/Kuala_Lumpur',\n    })\n    expect(dtf.format(date)).toBe('2020年2月01日 下午06:10:10')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2609, should handle Etc/GMT-14 short",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 234,
                "column": 48
            },
            "line": 234,
            "code": "  it('test #2609, should handle Etc/GMT-14 short', function () {\n    const date = new Date(2020, 1, 1, 10, 10, 10, 0)\n    const dtf = new DateTimeFormat('zh-Hans', {\n      year: 'numeric',\n      month: 'short',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true,\n      hourCycle: 'h12',\n      localeMatcher: 'lookup',\n      formatMatcher: 'best fit',\n      timeZone: 'Etc/GMT-14',\n      timeZoneName: 'short',\n    })\n    expect(dtf.format(date)).toContain(' GMT+14 ')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "test #2609, should handle Etc/GMT-14 long",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 252,
                "column": 47
            },
            "line": 252,
            "code": "  it('test #2609, should handle Etc/GMT-14 long', function () {\n    const date = new Date(2020, 1, 1, 10, 10, 10, 0)\n    const dtf = new DateTimeFormat('zh-Hans', {\n      year: 'numeric',\n      month: 'short',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true,\n      hourCycle: 'h12',\n      localeMatcher: 'lookup',\n      formatMatcher: 'best fit',\n      timeZone: 'Etc/GMT-14',\n      timeZoneName: 'long',\n    })\n    expect(dtf.format(date)).toContain(' GMT+14:00 ')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "range with ymdhM",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 270,
                "column": 22
            },
            "line": 270,
            "code": "  it('range with ymdhM', function () {\n    const date1 = new Date(Date.UTC(2021, 4, 19, 9, 0)) // \"May 19, 2021, 9 AM\"\n    const date2 = new Date(Date.UTC(2021, 5, 19, 17, 0)) // \"Jun 19, 2021, 5 PM\"\n    const dtf = new DateTimeFormat('en', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: 'America/New_York',\n    })\n    expect(dtf.formatRange(date1, date2)).toBe(\n      '5/19/2021, 5:00 AM – 6/19/2021, 1:00 PM'\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "GH issue #2909",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 285,
                "column": 20
            },
            "line": 285,
            "code": "  it('GH issue #2909', function () {\n    const date1 = new Date(Date.UTC(2021, 4, 19, 9, 0)) // \"May 19, 2021, 9 AM\"\n    const date2 = new Date(Date.UTC(2021, 5, 19, 17, 0)) // \"Jun 19, 2021, 5 PM\"\n    const dtf = new DateTimeFormat('en', {\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: 'America/New_York',\n    })\n    expect(() => dtf.formatRange(date1, date2)).not.toThrow()\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "GH issue #2951",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 295,
                "column": 20
            },
            "line": 295,
            "code": "  it('GH issue #2951', function () {\n    const date1 = new Date(Date.UTC(2021, 4, 19, 9, 0)) // \"May 19, 2021, 9 AM\"\n    const dtf = new DateTimeFormat('en', {\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: 'Etc/UTC',\n    })\n    expect(() => dtf.format(date1)).not.toThrow()\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "GH issue #2915",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "line": 304,
            "code": "  it.skip('GH issue #2915', function () {",
            "file": "index.test.ts",
            "skipped": true,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "toLocaleString returns \"Invalid Date\", GH #3508",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 316,
                "column": 53
            },
            "line": 316,
            "code": "  it('toLocaleString returns \"Invalid Date\", GH #3508', function () {\n    const date1 = new Date('')\n    expect(date1.toLocaleString('en-US')).toBe('Invalid Date')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "toLocaleTimeString returns \"Invalid Date\", GH #3508",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 320,
                "column": 57
            },
            "line": 320,
            "code": "  it('toLocaleTimeString returns \"Invalid Date\", GH #3508', function () {\n    const date1 = new Date('')\n    expect(date1.toLocaleTimeString('en-US')).toBe('Invalid Date')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "toLocaleDateString returns \"Invalid Date\", GH #3508",
            "suites": [
                "Intl.DateTimeFormat"
            ],
            "updatePoint": {
                "line": 324,
                "column": 57
            },
            "line": 324,
            "code": "  it('toLocaleDateString returns \"Invalid Date\", GH #3508', function () {\n    const date1 = new Date('')\n    expect(date1.toLocaleDateString('en-US')).toBe('Invalid Date')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-datetimeformat/tests"
        },
        {
            "name": "accepts case-insensitive language code with region subtag",
            "suites": [
                ".of()"
            ],
            "updatePoint": {
                "line": 11,
                "column": 63
            },
            "line": 11,
            "code": "  it('accepts case-insensitive language code with region subtag', () => {\n    expect(new DisplayNames('zh', {type: 'language'}).of('zh-hANs-sG')).toBe(\n      '简体中文（新加坡）'\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "accepts case-insensitive currency code",
            "suites": [
                ".of()"
            ],
            "updatePoint": {
                "line": 17,
                "column": 44
            },
            "line": 17,
            "code": "  it('accepts case-insensitive currency code', () => {\n    expect(\n      new DisplayNames('en-US', {type: 'currency', style: 'long'}).of('cNy')\n    ).toBe('Chinese Yuan')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "preserves unrecognized region subtag in language code when fallback option is code",
            "suites": [
                ".of()"
            ],
            "updatePoint": {
                "line": 23,
                "column": 88
            },
            "line": 23,
            "code": "  it('preserves unrecognized region subtag in language code when fallback option is code', () => {\n    expect(\n      new DisplayNames('zh', {type: 'language', fallback: 'code'}).of(\n        'zh-Hans-Xy'\n      )\n    ).toBe('简体中文（XY）')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "find script correctly",
            "suites": [
                ".of()"
            ],
            "updatePoint": {
                "line": 31,
                "column": 27
            },
            "line": 31,
            "code": "  it('find script correctly', function () {\n    expect(\n      new DisplayNames('zh', {type: 'script', fallback: 'code'}).of('arab')\n    ).toBe('阿拉伯文')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "returns undefined when called with language code that has unrecognized region subtag",
            "suites": [
                ".of()",
                "with fallback set to \"none\""
            ],
            "updatePoint": {
                "line": 38,
                "column": 92
            },
            "line": 38,
            "code": "    it('returns undefined when called with language code that has unrecognized region subtag', () => {\n      expect(\n        new DisplayNames('zh', {type: 'language', fallback: 'none'}).of(\n          'zh-Hans-XY'\n        )\n      ).toBe(undefined)\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "returns undefined when called with language code that valid region subtag but invalid language subtag",
            "suites": [
                ".of()",
                "with fallback set to \"none\""
            ],
            "updatePoint": {
                "line": 46,
                "column": 109
            },
            "line": 46,
            "code": "    it('returns undefined when called with language code that valid region subtag but invalid language subtag', () => {\n      expect(\n        new DisplayNames('zh', {type: 'language', fallback: 'none'}).of('xx-CN')\n      ).toBe(undefined)\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "should-polyfill should be true",
            "suites": [
                "before polyfill"
            ],
            "updatePoint": {
                "line": 5,
                "column": 36
            },
            "line": 5,
            "code": "  it('should-polyfill should be true', function () {\n    // Node 14.9.0/browsers does have this bug\n    expect(_shouldPolyfillWithoutLocale()).toBeTruthy()\n  })",
            "file": "should-polyfill.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "should fix the bug",
            "suites": [
                "after polyfill"
            ],
            "updatePoint": {
                "line": 20,
                "column": 24
            },
            "line": 20,
            "code": "  it('should fix the bug', function () {\n    expect(_shouldPolyfillWithoutLocale()).toBeFalsy()\n  })",
            "file": "should-polyfill.test.ts",
            "skipped": false,
            "dir": "packages/intl-displaynames/tests"
        },
        {
            "name": "Intl.DurationFormat",
            "suites": [],
            "line": 1,
            "code": "test.todo('Intl.DurationFormat')",
            "file": "index.test.ts",
            "skipped": true,
            "dir": "packages/intl-durationformat/tests"
        },
        {
            "name": "regular",
            "suites": [
                "Intl.getCanonicalLocales"
            ],
            "updatePoint": {
                "line": 4,
                "column": 13
            },
            "line": 4,
            "code": "  it('regular', function () {\n    expect(\n      getCanonicalLocales('en-u-foo-bar-nu-thai-ca-buddhist-kk-true')\n    ).toEqual(['en-u-bar-foo-ca-buddhist-kk-nu-thai'])\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "und-x-private",
            "suites": [
                "Intl.getCanonicalLocales"
            ],
            "updatePoint": {
                "line": 9,
                "column": 19
            },
            "line": 9,
            "code": "  it('und-x-private', function () {\n    expect(getCanonicalLocales('und-x-private')).toEqual(['und-x-private'])\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "should canonicalize casing for zh-hANs-sG",
            "suites": [
                "Intl.getCanonicalLocales"
            ],
            "updatePoint": {
                "line": 12,
                "column": 47
            },
            "line": 12,
            "code": "  it('should canonicalize casing for zh-hANs-sG', function () {\n    expect(getCanonicalLocales('zh-hANs-sG')).toEqual(['zh-Hans-SG'])\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "should handle twi",
            "suites": [
                "Intl.getCanonicalLocales"
            ],
            "updatePoint": {
                "line": 15,
                "column": 23
            },
            "line": 15,
            "code": "  it('should handle twi', function () {\n    expect(getCanonicalLocales('twi')).toEqual(['ak'])\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "should handle ug-Arab-CN ",
            "suites": [
                "Intl.getCanonicalLocales"
            ],
            "updatePoint": {
                "line": 18,
                "column": 31
            },
            "line": 18,
            "code": "  it('should handle ug-Arab-CN ', function () {\n    expect(getCanonicalLocales('ug-Arab-CN')).toEqual(['ug-Arab-CN'])\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "canonicalizes twice",
            "suites": [
                "Intl.getCanonicalLocales"
            ],
            "updatePoint": {
                "line": 21,
                "column": 25
            },
            "line": 21,
            "code": "  it('canonicalizes twice', function () {\n    expect(getCanonicalLocales('und-Armn-SU')).toEqual(['und-Armn-AM'])\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "new Intl.Locale(\"\") throws RangeError",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 77,
                "column": 55
            },
            "line": 77,
            "code": "    it(`new Intl.Locale(\"${langtag}\") throws RangeError`, function () {\n      expect(() => parseUnicodeLocaleId(langtag)).toThrowError(RangeError)\n    })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "en-u-foo-bar-nu-thai-ca-buddhist-kk-true",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 82,
                "column": 46
            },
            "line": 82,
            "code": "  it('en-u-foo-bar-nu-thai-ca-buddhist-kk-true', function () {\n    expect(\n      parseUnicodeLocaleId('en-u-foo-bar-nu-thai-ca-buddhist-kk-true')\n    ).toEqual({\n      extensions: [\n        {\n          attributes: ['foo', 'bar'],\n          keywords: [\n            ['nu', 'thai'],\n            ['ca', 'buddhist'],\n            ['kk', 'true'],\n          ],\n          type: 'u',\n        },\n      ],\n      lang: {lang: 'en', region: undefined, script: undefined, variants: []},\n    })\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "da-u-ca-gregory-ca-buddhist",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 100,
                "column": 33
            },
            "line": 100,
            "code": "  it('da-u-ca-gregory-ca-buddhist', function () {\n    expect(parseUnicodeLocaleId('da-u-ca-gregory-ca-buddhist')).toEqual({\n      extensions: [\n        {\n          attributes: [],\n          keywords: [\n            ['ca', 'gregory'],\n            ['ca', 'buddhist'],\n          ],\n          type: 'u',\n        },\n      ],\n      lang: {lang: 'da', region: undefined, script: undefined, variants: []},\n    })\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "en-Latn-fonipa",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 115,
                "column": 20
            },
            "line": 115,
            "code": "  it('en-Latn-fonipa', function () {\n    expect(parseUnicodeLocaleId('en-Latn-fonipa')).toEqual({\n      extensions: [],\n      lang: {\n        lang: 'en',\n        region: undefined,\n        script: 'Latn',\n        variants: ['fonipa'],\n      },\n    })\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "de-Latn-DE-u-ca-gregory-co-phonebk-hc-h23-kf-kn-false-nu-latn",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 126,
                "column": 67
            },
            "line": 126,
            "code": "  it('de-Latn-DE-u-ca-gregory-co-phonebk-hc-h23-kf-kn-false-nu-latn', function () {\n    expect(\n      parseUnicodeLocaleId(\n        'de-Latn-DE-u-ca-gregory-co-phonebk-hc-h23-kf-kn-false-nu-latn'\n      )\n    ).toEqual({\n      extensions: [\n        {\n          attributes: [],\n          keywords: [\n            ['ca', 'gregory'],\n            ['co', 'phonebk'],\n            ['hc', 'h23'],\n            ['kf', ''],\n            ['kn', 'false'],\n            ['nu', 'latn'],\n          ],\n          type: 'u',\n        },\n      ],\n      lang: {lang: 'de', region: 'DE', script: 'Latn', variants: []},\n    })\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "ja-Jpan-JP-u-ca-japanese-co-search-hc-h24-kf-false-kn-nu-jpanfin",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 149,
                "column": 70
            },
            "line": 149,
            "code": "  it('ja-Jpan-JP-u-ca-japanese-co-search-hc-h24-kf-false-kn-nu-jpanfin', function () {\n    expect(\n      parseUnicodeLocaleId(\n        'ja-Jpan-JP-u-ca-japanese-co-search-hc-h24-kf-false-kn-nu-jpanfin'\n      )\n    ).toEqual({\n      extensions: [\n        {\n          attributes: [],\n          keywords: [\n            ['ca', 'japanese'],\n            ['co', 'search'],\n            ['hc', 'h24'],\n            ['kf', 'false'],\n            ['kn', ''],\n            ['nu', 'jpanfin'],\n          ],\n          type: 'u',\n        },\n      ],\n      lang: {lang: 'ja', region: 'JP', script: 'Jpan', variants: []},\n    })\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "fr-Latn-CA-u-ca-gregory-co-standard-hc-h11-kf-kn-false-nu-latn",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 172,
                "column": 68
            },
            "line": 172,
            "code": "  it('fr-Latn-CA-u-ca-gregory-co-standard-hc-h11-kf-kn-false-nu-latn', function () {\n    expect(\n      parseUnicodeLocaleId(\n        'fr-Latn-CA-u-ca-gregory-co-standard-hc-h11-kf-kn-false-nu-latn'\n      )\n    ).toEqual({\n      extensions: [\n        {\n          attributes: [],\n          keywords: [\n            ['ca', 'gregory'],\n            ['co', 'standard'],\n            ['hc', 'h11'],\n            ['kf', ''],\n            ['kn', 'false'],\n            ['nu', 'latn'],\n          ],\n          type: 'u',\n        },\n      ],\n      lang: {lang: 'fr', region: 'CA', script: 'Latn', variants: []},\n    })\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "en-a-bar-x-u-foo",
            "suites": [
                "parser"
            ],
            "updatePoint": {
                "line": 195,
                "column": 22
            },
            "line": 195,
            "code": "  it('en-a-bar-x-u-foo', function () {\n    expect(parseUnicodeLocaleId('en-a-bar-x-u-foo')).toEqual({\n      extensions: [\n        {type: 'a', value: 'bar'},\n        {type: 'x', value: 'u-foo'},\n      ],\n      lang: {lang: 'en', region: undefined, script: undefined, variants: []},\n    })\n  })",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/intl-getcanonicallocales/tests"
        },
        {
            "name": "should support aliases",
            "suites": [
                "Intl.ListFormat"
            ],
            "updatePoint": {
                "line": 12,
                "column": 28
            },
            "line": 12,
            "code": "  it('should support aliases', function () {\n    expect(\n      new ListFormat('zh-CN', {type: 'unit'}).format(['1', '2', '3'])\n    ).toBe('123')\n    expect(new ListFormat('zh-CN', {type: 'unit'}).format(['1', '2'])).toBe(\n      '12'\n    )\n    expect(\n      new ListFormat('zh-TW', {type: 'unit'}).format(['1', '2', '3'])\n    ).toBe('1 2 3')\n    expect(new ListFormat('zh-TW', {type: 'unit'}).format(['1', '2'])).toBe(\n      '1 2'\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-listformat/tests"
        },
        {
            "name": "should resolve parent correctly",
            "suites": [
                "Intl.ListFormat"
            ],
            "updatePoint": {
                "line": 26,
                "column": 37
            },
            "line": 26,
            "code": "  it('should resolve parent correctly', function () {\n    expect(new ListFormat('en-AI').format(['1', '2'])).toBe('1 and 2')\n    // Node 12 has an old version of CLDR\n    if (process.version && process.version.startsWith('v10')) {\n      expect(new ListFormat('en-AI').format(['1', '2', '3'])).toBe('1, 2 and 3')\n    }\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-listformat/tests"
        },
        {
            "name": "should normalize case correctly",
            "suites": [
                "Intl.ListFormat"
            ],
            "updatePoint": {
                "line": 33,
                "column": 37
            },
            "line": 33,
            "code": "  it('should normalize case correctly', function () {\n    const lf = new ListFormat('en-ai', {style: 'short', type: 'unit'})\n    expect(lf.resolvedOptions()).toEqual({\n      locale: 'en-AI',\n      type: 'unit',\n      style: 'short',\n    })\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-listformat/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 17,
                "column": 63
            },
            "line": 17,
            "code": "    it('should return correct locales that we only have data for', test)",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-listformat/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 17,
                "column": 63
            },
            "line": null,
            "code": "",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-listformat/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 19,
                "column": 65
            },
            "line": null,
            "code": "",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-listformat/tests"
        },
        {
            "name": "toString",
            "suites": [
                "intl-locale"
            ],
            "updatePoint": {
                "line": 5,
                "column": 14
            },
            "line": 5,
            "code": "  it('toString', function () {\n    // expect(() => IntlLocale.prototype.toString.call(IntlLocale.prototype)).toThrowError(TypeError)\n    expect(\n      new Locale('en-u-foo-bar-nu-thai-ca-buddhist-kk-true').toString()\n    ).toBe('en-u-bar-foo-ca-buddhist-kk-nu-thai')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "invalid tag",
            "suites": [
                "intl-locale"
            ],
            "updatePoint": {
                "line": 11,
                "column": 17
            },
            "line": 11,
            "code": "  it('invalid tag', function () {\n    // expect(() => IntlLocale.prototype.toString.call(IntlLocale.prototype)).toThrowError(TypeError)\n    expect(() => new Locale({} as any)).toThrowError(RangeError)\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "und-x-private",
            "suites": [
                "intl-locale"
            ],
            "updatePoint": {
                "line": 15,
                "column": 19
            },
            "line": 15,
            "code": "  it('und-x-private', function () {\n    expect(new Locale('und-x-private').toString()).toBe('und-x-private')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "\"\" should be maximal",
            "suites": [
                "likely-subtags"
            ],
            "updatePoint": {
                "line": 74,
                "column": 38
            },
            "line": 74,
            "code": "    it(`\"${maximal}\" should be maximal`, function () {\n      expect(new Locale(maximal).maximize().toString()).toBe(maximal)\n    })",
            "file": "likely-subtags.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "\"\".maximize() should be \"\"",
            "suites": [
                "likely-subtags"
            ],
            "updatePoint": {
                "line": 81,
                "column": 53
            },
            "line": 81,
            "code": "      it(`\"${input}\".maximize() should be \"${output}\"`, function () {\n        expect(new Locale(input).maximize().toString()).toBe(output)\n      })",
            "file": "likely-subtags.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "\"\" should be minimal",
            "suites": [
                "likely-subtags"
            ],
            "updatePoint": {
                "line": 89,
                "column": 38
            },
            "line": 89,
            "code": "    it(`\"${minimal}\" should be minimal`, function () {\n      expect(new Locale(minimal).minimize().toString()).toBe(minimal)\n    })",
            "file": "likely-subtags.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "\"\".minimize() should be \"\"",
            "suites": [
                "likely-subtags"
            ],
            "updatePoint": {
                "line": 96,
                "column": 53
            },
            "line": 96,
            "code": "      it(`\"${input}\".minimize() should be \"${output}\"`, function () {\n        expect(new Locale(input).minimize().toString()).toBe(output)\n      })",
            "file": "likely-subtags.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "x-private",
            "suites": [
                "likely-subtags"
            ],
            "updatePoint": {
                "line": 105,
                "column": 15
            },
            "line": 105,
            "code": "  it('x-private', function () {\n    expect(() => new Locale('x-private')).toThrowError(RangeError)\n  })",
            "file": "likely-subtags.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": " is indeed minimal",
            "suites": [
                "minimize"
            ],
            "updatePoint": {
                "line": 26,
                "column": 36
            },
            "line": 26,
            "code": "    it(`${minimal} is indeed minimal`, function () {\n      // Assert the |minimal| tag is indeed minimal.\n      expect(new Locale(minimal).minimize().toString()).toBe(minimal)\n    })",
            "file": "minimize.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": " -> ",
            "suites": [
                "minimize"
            ],
            "updatePoint": {
                "line": 30,
                "column": 28
            },
            "line": 30,
            "code": "    it(`${tag} -> ${minimal}`, function () {\n      // Assert RemoveLikelySubtags(tag) returns |minimal|.\n      expect(new Locale(tag).minimize().toString()).toBe(minimal)\n    })",
            "file": "minimize.test.ts",
            "skipped": false,
            "dir": "packages/intl-locale/tests"
        },
        {
            "name": "BestFitMatcher",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 20
            },
            "line": 3,
            "code": "test('BestFitMatcher', function () {\n  expect(\n    BestFitMatcher(new Set(['fr', 'en']), ['fr-XX', 'en'], () => 'en')\n  ).toEqual({\n    locale: 'fr',\n  })\n})",
            "file": "BestFitMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "BestFitMatcher zh-TW",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 26
            },
            "line": 11,
            "code": "test('BestFitMatcher zh-TW', function () {\n  expect(\n    BestFitMatcher(new Set(['zh', 'zh-Hant']), ['zh-TW'], () => 'en')\n  ).toEqual({\n    locale: 'zh-Hant',\n  })\n})",
            "file": "BestFitMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "BestFitMatcher en",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 23
            },
            "line": 19,
            "code": "test('BestFitMatcher en', function () {\n  expect(BestFitMatcher(new Set(['en', 'und']), ['en'], () => 'en')).toEqual({\n    locale: 'en',\n  })\n})",
            "file": "BestFitMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "zh-HK",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 11
            },
            "line": 3,
            "code": "test('zh-HK', function () {\n  expect(match(['zh-HK'], ['zh', 'zh-HANT', 'en'], 'en')).toEqual('zh-HANT')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "Intl.LocaleMatcher",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 24
            },
            "line": 7,
            "code": "test('Intl.LocaleMatcher', function () {\n  expect(match(['fr-XX', 'en'], ['fr', 'en'], 'en')).toEqual('fr')\n  expect(match(['zh-TW', 'en'], ['zh-Hant-TW', 'en'], 'en')).toEqual(\n    'zh-Hant-TW'\n  )\n  expect(\n    match(\n      ['sr-Latn-BA'],\n      [\n        'af',\n        'ak',\n        'am',\n        'an',\n        'ar',\n        'ars',\n        'as',\n        'asa',\n        'ast',\n        'az',\n        'be',\n        'bem',\n        'bez',\n        'bg',\n        'bho',\n        'bm',\n        'bn',\n        'bo',\n        'br',\n        'brx',\n        'bs',\n        'ca',\n        'ce',\n        'ceb',\n        'cgg',\n        'chr',\n        'ckb',\n        'cs',\n        'cy',\n        'da',\n        'de',\n        'doi',\n        'dsb',\n        'dv',\n        'dz',\n        'ee',\n        'el',\n        'en',\n        'eo',\n        'es',\n        'et',\n        'eu',\n        'fa',\n        'ff',\n        'fi',\n        'fil',\n        'fo',\n        'fr',\n        'fur',\n        'fy',\n        'ga',\n        'gd',\n        'gl',\n        'gsw',\n        'gu',\n        'guw',\n        'gv',\n        'ha',\n        'haw',\n        'he',\n        'hi',\n        'hr',\n        'hsb',\n        'hu',\n        'hy',\n        'ia',\n        'id',\n        'ig',\n        'ii',\n        'in',\n        'io',\n        'is',\n        'it',\n        'iu',\n        'iw',\n        'ja',\n        'jbo',\n        'jgo',\n        'ji',\n        'jmc',\n        'jv',\n        'jw',\n        'ka',\n        'kab',\n        'kaj',\n        'kcg',\n        'kde',\n        'kea',\n        'kk',\n        'kkj',\n        'kl',\n        'km',\n        'kn',\n        'ko',\n        'ks',\n        'ksb',\n        'ksh',\n        'ku',\n        'kw',\n        'ky',\n        'lag',\n        'lb',\n        'lg',\n        'lij',\n        'lkt',\n        'ln',\n        'lo',\n        'lt',\n        'lv',\n        'mas',\n        'mg',\n        'mgo',\n        'mk',\n        'ml',\n        'mn',\n        'mo',\n        'mr',\n        'ms',\n        'mt',\n        'my',\n        'nah',\n        'naq',\n        'nb',\n        'nd',\n        'ne',\n        'nl',\n        'nn',\n        'nnh',\n        'no',\n        'nqo',\n        'nr',\n        'nso',\n        'ny',\n        'nyn',\n        'om',\n        'or',\n        'os',\n        'osa',\n        'pa',\n        'pap',\n        'pcm',\n        'pl',\n        'prg',\n        'ps',\n        'pt-PT',\n        'pt',\n        'rm',\n        'ro',\n        'rof',\n        'ru',\n        'rwk',\n        'sah',\n        'saq',\n        'sat',\n        'sc',\n        'scn',\n        'sd',\n        'sdh',\n        'se',\n        'seh',\n        'ses',\n        'sg',\n        'sh',\n        'shi',\n        'si',\n        'sk',\n        'sl',\n        'sma',\n        'smi',\n        'smj',\n        'smn',\n        'sms',\n        'sn',\n        'so',\n        'sq',\n        'sr',\n        'ss',\n        'ssy',\n        'st',\n        'su',\n        'sv',\n        'sw',\n        'syr',\n        'ta',\n        'te',\n        'teo',\n        'th',\n        'ti',\n        'tig',\n        'tk',\n        'tl',\n        'tn',\n        'to',\n        'tr',\n        'ts',\n        'tzm',\n        'ug',\n        'uk',\n        'ur',\n        'uz',\n        've',\n        'vi',\n        'vo',\n        'vun',\n        'wa',\n        'wae',\n        'wo',\n        'xh',\n        'xog',\n        'yi',\n        'yo',\n        'yue',\n        'zh',\n        'zu',\n      ],\n      'en'\n    )\n  ).toEqual('sh')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "empty requested",
            "suites": [],
            "updatePoint": {
                "line": 236,
                "column": 21
            },
            "line": 236,
            "code": "test('empty requested', function () {\n  expect(match([], ['zh-Hant-TW', 'en'], 'en')).toEqual('en')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "extension",
            "suites": [],
            "updatePoint": {
                "line": 240,
                "column": 15
            },
            "line": 240,
            "code": "test('extension', function () {\n  expect(match(['fr-CA-x-foo'], ['zh-Hant-TW', 'fr', 'en'], 'en')).toEqual('fr')\n})",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "LookupMatcher",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 19
            },
            "line": 3,
            "code": "test('LookupMatcher', function () {\n  expect(\n    LookupMatcher(new Set(['fr', 'en']), ['fr-XX', 'en'], () => 'en')\n  ).toEqual({\n    locale: 'fr',\n  })\n})",
            "file": "LookupMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "LookupMatcher",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 19
            },
            "line": 11,
            "code": "test('LookupMatcher', function () {\n  expect(\n    LookupMatcher(new Set(['zh', 'zh-Hant']), ['zh-Hans'], () => 'en')\n  ).toEqual({\n    locale: 'zh',\n  })\n})",
            "file": "LookupMatcher.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "ResolveLocale",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 19
            },
            "line": 3,
            "code": "test('ResolveLocale', function () {\n  expect(\n    ResolveLocale(\n      new Set(['fr', 'en']),\n      ['fr-XX', 'en'],\n      {localeMatcher: 'best fit'},\n      [],\n      {},\n      () => 'en'\n    )\n  ).toEqual({\n    dataLocale: 'fr',\n    locale: 'fr',\n  })\n\n  expect(\n    ResolveLocale(\n      new Set(['zh-Hant-TW', 'en']),\n      ['zh-TW', 'en'],\n      {localeMatcher: 'best fit'},\n      [],\n      {},\n      () => 'en'\n    )\n  ).toEqual({\n    dataLocale: 'zh-Hant-TW',\n    locale: 'zh-Hant-TW',\n  })\n})",
            "file": "ResolveLocale.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "empty requested",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 21
            },
            "line": 33,
            "code": "test('empty requested', function () {\n  expect(\n    ResolveLocale(\n      new Set(['zh-Hant-TW', 'en']),\n      [],\n      {localeMatcher: 'best fit'},\n      [],\n      {},\n      () => 'en'\n    )\n  ).toEqual({\n    dataLocale: 'en',\n    locale: 'en',\n  })\n})",
            "file": "ResolveLocale.test.ts",
            "skipped": false,
            "dir": "packages/intl-localematcher/tests"
        },
        {
            "name": "should be a function",
            "suites": [
                "IntlMessageFormat"
            ],
            "updatePoint": {
                "line": 12,
                "column": 26
            },
            "line": 12,
            "code": "  it('should be a function', function () {\n    expect(typeof IntlMessageFormat).toBe('function')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should accept formatters",
            "suites": [
                "IntlMessageFormat"
            ],
            "updatePoint": {
                "line": 16,
                "column": 30
            },
            "line": 16,
            "code": "  it('should accept formatters', function () {\n    const mf = new IntlMessageFormat(\n      'My name is {FIRST} {LAST}, age {age, number}, time {time, time}, date {date, date}.',\n      'en',\n      undefined\n    )\n    const ts = 12 * 3600 * 1e3\n    const output = mf.format({\n      FIRST: 'Anthony',\n      LAST: 'Pipkin',\n      age: 8,\n      time: ts,\n      date: ts,\n    })\n\n    expect(output).toMatch(\n      /My name is Anthony Pipkin, age 8, time \\d{1,2}:\\d{1,2}:\\d{1,2} [AP]M, date \\d{1,2}\\/\\d{1,2}\\/\\d{4}\\./\n    )\n    expect(output).toContain(new Intl.DateTimeFormat().format(ts))\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should be a function",
            "suites": [
                "IntlMessageFormat",
                "#resolvedOptions( )"
            ],
            "updatePoint": {
                "line": 40,
                "column": 28
            },
            "line": 40,
            "code": "    it('should be a function', function () {\n      const mf = new IntlMessageFormat('')\n      expect(typeof mf.resolvedOptions).toBe('function')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should have a `locale` property",
            "suites": [
                "IntlMessageFormat",
                "#resolvedOptions( )"
            ],
            "updatePoint": {
                "line": 45,
                "column": 39
            },
            "line": 45,
            "code": "    it('should have a `locale` property', function () {\n      const mf = new IntlMessageFormat('')\n      expect(Object.keys(mf.resolvedOptions())).toContain('locale')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should default to host locale",
            "suites": [
                "IntlMessageFormat",
                "#resolvedOptions( )",
                "`locale`"
            ],
            "updatePoint": {
                "line": 51,
                "column": 39
            },
            "line": 51,
            "code": "      it('should default to host locale', function () {\n        const mf = new IntlMessageFormat('')\n        expect(mf.resolvedOptions().locale).toBe(\n          new Intl.NumberFormat().resolvedOptions().locale\n        )\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should normalize the casing",
            "suites": [
                "IntlMessageFormat",
                "#resolvedOptions( )",
                "`locale`"
            ],
            "updatePoint": {
                "line": 58,
                "column": 37
            },
            "line": 58,
            "code": "      it('should normalize the casing', function () {\n        let mf = new IntlMessageFormat('', 'en-us')\n        expect(mf.resolvedOptions().locale).toBe('en-US')\n\n        mf = new IntlMessageFormat('', 'EN-US')\n        expect(mf.resolvedOptions().locale).toBe('en-US')\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should handle @ correctly",
            "suites": [
                "IntlMessageFormat",
                "#resolvedOptions( )",
                "`locale`"
            ],
            "updatePoint": {
                "line": 68,
                "column": 31
            },
            "line": 68,
            "code": "  it('should handle @ correctly', function () {\n    const mf = new IntlMessageFormat('hi @{there}', 'en')\n    expect(\n      mf.format({\n        there: '2008',\n      })\n    ).toBe('hi @2008')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should be a function",
            "suites": [
                "IntlMessageFormat",
                "#format( [object] )"
            ],
            "updatePoint": {
                "line": 78,
                "column": 28
            },
            "line": 78,
            "code": "    it('should be a function', function () {\n      const mf = new IntlMessageFormat('')\n      expect(typeof mf.format).toBe('function')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should return a string",
            "suites": [
                "IntlMessageFormat",
                "#format( [object] )"
            ],
            "updatePoint": {
                "line": 83,
                "column": 30
            },
            "line": 83,
            "code": "    it('should return a string', function () {\n      const mf = new IntlMessageFormat('')\n      expect(typeof mf.format()).toBe('string')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format ast",
            "suites": [
                "IntlMessageFormat",
                "#format([ast])"
            ],
            "updatePoint": {
                "line": 90,
                "column": 25
            },
            "line": 90,
            "code": "    it('should format ast', function () {\n      const mf = new IntlMessageFormat(parse('hello world'))\n      expect(mf.format()).toBe('hello world')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format ast w/ placeholders",
            "suites": [
                "IntlMessageFormat",
                "#format([ast])"
            ],
            "updatePoint": {
                "line": 94,
                "column": 41
            },
            "line": 94,
            "code": "    it('should format ast w/ placeholders', function () {\n      const mf = new IntlMessageFormat(parse('hello world, {name}'))\n      expect(mf.format({name: 'foo'})).toBe('hello world, foo')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format ast w/o parser",
            "suites": [
                "IntlMessageFormat",
                "#format([ast])"
            ],
            "updatePoint": {
                "line": 98,
                "column": 36
            },
            "line": 98,
            "code": "    it('should format ast w/o parser', function () {\n      const mf = new IntlMessageFormat(parse('hello world'))\n      expect(mf.format()).toBe('hello world')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format ast w/ placeholders w/o parser",
            "suites": [
                "IntlMessageFormat",
                "#format([ast])"
            ],
            "updatePoint": {
                "line": 102,
                "column": 52
            },
            "line": 102,
            "code": "    it('should format ast w/ placeholders w/o parser', function () {\n      const mf = new IntlMessageFormat(parse('hello world, {name}'))\n      expect(mf.format({name: 'foo'})).toBe('hello world, foo')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should properly replace direct arguments in the string",
            "suites": [
                "IntlMessageFormat",
                "using a string pattern"
            ],
            "updatePoint": {
                "line": 109,
                "column": 62
            },
            "line": 109,
            "code": "    it('should properly replace direct arguments in the string', function () {\n      const mf = new IntlMessageFormat('My name is {FIRST} {LAST}.')\n      const output = mf.format({\n        FIRST: 'Anthony',\n        LAST: 'Pipkin',\n      })\n\n      expect(output).toBe('My name is Anthony Pipkin.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should not ignore zero values",
            "suites": [
                "IntlMessageFormat",
                "using a string pattern"
            ],
            "updatePoint": {
                "line": 119,
                "column": 37
            },
            "line": 119,
            "code": "    it('should not ignore zero values', function () {\n      const mf = new IntlMessageFormat('I am {age} years old.')\n      const output = mf.format({\n        age: 0,\n      })\n\n      expect(output).toBe('I am 0 years old.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should ignore false, null, and undefined",
            "suites": [
                "IntlMessageFormat",
                "using a string pattern"
            ],
            "updatePoint": {
                "line": 128,
                "column": 48
            },
            "line": 128,
            "code": "    it('should ignore false, null, and undefined', function () {\n      const mf = new IntlMessageFormat('{a}{b}{c}')\n      const output = mf.format({\n        a: false,\n        b: null,\n        c: undefined,\n      })\n\n      expect(output).toBe('')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match zero",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Arabic locale"
            ],
            "updatePoint": {
                "line": 154,
                "column": 25
            },
            "line": 154,
            "code": "    it('should match zero', function () {\n      const m = msgFmt.format({\n        numPeople: 0,\n      })\n\n      expect(m).toBe('I have zero points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match one",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Arabic locale"
            ],
            "updatePoint": {
                "line": 162,
                "column": 24
            },
            "line": 162,
            "code": "    it('should match one', function () {\n      const m = msgFmt.format({\n        numPeople: 1,\n      })\n\n      expect(m).toBe('I have a point.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match two",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Arabic locale"
            ],
            "updatePoint": {
                "line": 170,
                "column": 24
            },
            "line": 170,
            "code": "    it('should match two', function () {\n      const m = msgFmt.format({\n        numPeople: 2,\n      })\n\n      expect(m).toBe('I have two points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match few",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Arabic locale"
            ],
            "updatePoint": {
                "line": 178,
                "column": 24
            },
            "line": 178,
            "code": "    it('should match few', function () {\n      const m = msgFmt.format({\n        numPeople: 5,\n      })\n\n      expect(m).toBe('I have a few points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match many",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Arabic locale"
            ],
            "updatePoint": {
                "line": 186,
                "column": 25
            },
            "line": 186,
            "code": "    it('should match many', function () {\n      const m = msgFmt.format({\n        numPeople: 20,\n      })\n\n      expect(m).toBe('I have lots of points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match other",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Arabic locale"
            ],
            "updatePoint": {
                "line": 194,
                "column": 26
            },
            "line": 194,
            "code": "    it('should match other', function () {\n      const m = msgFmt.format({\n        numPeople: 100,\n      })\n\n      expect(m).toBe('I have some other amount of points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match zero",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Welsh locale"
            ],
            "updatePoint": {
                "line": 217,
                "column": 25
            },
            "line": 217,
            "code": "    it('should match zero', function () {\n      const m = msgFmt.format({\n        numPeople: 0,\n      })\n\n      expect(m).toBe('I have zero points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match one",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Welsh locale"
            ],
            "updatePoint": {
                "line": 225,
                "column": 24
            },
            "line": 225,
            "code": "    it('should match one', function () {\n      const m = msgFmt.format({\n        numPeople: 1,\n      })\n\n      expect(m).toBe('I have a point.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match two",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Welsh locale"
            ],
            "updatePoint": {
                "line": 233,
                "column": 24
            },
            "line": 233,
            "code": "    it('should match two', function () {\n      const m = msgFmt.format({\n        numPeople: 2,\n      })\n\n      expect(m).toBe('I have two points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match few",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Welsh locale"
            ],
            "updatePoint": {
                "line": 241,
                "column": 24
            },
            "line": 241,
            "code": "    it('should match few', function () {\n      const m = msgFmt.format({\n        numPeople: 3,\n      })\n\n      expect(m).toBe('I have a few points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match many",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Welsh locale"
            ],
            "updatePoint": {
                "line": 249,
                "column": 25
            },
            "line": 249,
            "code": "    it('should match many', function () {\n      const m = msgFmt.format({\n        numPeople: 6,\n      })\n\n      expect(m).toBe('I have lots of points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should match other",
            "suites": [
                "IntlMessageFormat",
                "and plurals under the Welsh locale"
            ],
            "updatePoint": {
                "line": 257,
                "column": 26
            },
            "line": 257,
            "code": "    it('should match other', function () {\n      const m = msgFmt.format({\n        numPeople: 100,\n      })\n\n      expect(m).toBe('I have some other amount of points.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format message en-US simple with different objects",
            "suites": [
                "IntlMessageFormat",
                "and changing the locale"
            ],
            "updatePoint": {
                "line": 317,
                "column": 65
            },
            "line": 317,
            "code": "    it('should format message en-US simple with different objects', function () {\n      const msgFmt = new IntlMessageFormat(simple.en, 'en-US')\n      expect(msgFmt.format(maleObj)).toBe('Tony went to Paris.')\n      expect(msgFmt.format(femaleObj)).toBe('Jenny went to Paris.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format message fr-FR simple with different objects",
            "suites": [
                "IntlMessageFormat",
                "and changing the locale"
            ],
            "updatePoint": {
                "line": 323,
                "column": 65
            },
            "line": 323,
            "code": "    it('should format message fr-FR simple with different objects', function () {\n      const msgFmt = new IntlMessageFormat(simple.fr, 'fr-FR')\n      expect(msgFmt.format(maleObj)).toBe('Tony est allé à Paris.')\n      expect(msgFmt.format(femaleObj)).toBe('Jenny est allée à Paris.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format message en-US complex with different objects",
            "suites": [
                "IntlMessageFormat",
                "and changing the locale"
            ],
            "updatePoint": {
                "line": 329,
                "column": 66
            },
            "line": 329,
            "code": "    it('should format message en-US complex with different objects', function () {\n      const msgFmt = new IntlMessageFormat(complex.en, 'en-US')\n      expect(msgFmt.format(maleTravelers)).toBe(\n        'Lucas, Tony and Drew went to Paris.'\n      )\n      expect(msgFmt.format(femaleTravelers)).toBe('Monica went to Paris.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format message fr-FR complex with different objects",
            "suites": [
                "IntlMessageFormat",
                "and changing the locale"
            ],
            "updatePoint": {
                "line": 337,
                "column": 66
            },
            "line": 337,
            "code": "    it('should format message fr-FR complex with different objects', function () {\n      const msgFmt = new IntlMessageFormat(complex.fr, 'fr-FR')\n      expect(msgFmt.format(maleTravelers)).toBe(\n        'Lucas, Tony and Drew sont allés à Paris.'\n      )\n      expect(msgFmt.format(femaleTravelers)).toBe('Monica est allée à Paris.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format a message with en-US locale",
            "suites": [
                "IntlMessageFormat",
                "and change the locale with different counts"
            ],
            "updatePoint": {
                "line": 364,
                "column": 49
            },
            "line": 364,
            "code": "    it('should format a message with en-US locale', function () {\n      const msgFmt = new IntlMessageFormat(messages.en, 'en-US')\n\n      expect(msgFmt.format({COMPANY_COUNT: 0})).toBe(\n        '0 companies published new books.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 1})).toBe(\n        'One company published new books.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 2})).toBe(\n        '2 companies published new books.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 5})).toBe(\n        '5 companies published new books.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 10})).toBe(\n        '10 companies published new books.'\n      )\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should format a message with ru-RU locale",
            "suites": [
                "IntlMessageFormat",
                "and change the locale with different counts"
            ],
            "updatePoint": {
                "line": 384,
                "column": 49
            },
            "line": 384,
            "code": "    it('should format a message with ru-RU locale', function () {\n      const msgFmt = new IntlMessageFormat(messages.ru, 'ru-RU')\n\n      expect(msgFmt.format({COMPANY_COUNT: 0})).toBe(\n        '0 компаний опубликовали новые книги.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 1})).toBe(\n        'Одна компания опубликовала новые книги.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 2})).toBe(\n        '2 компании опубликовали новые книги.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 5})).toBe(\n        '5 компаний опубликовали новые книги.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 10})).toBe(\n        '10 компаний опубликовали новые книги.'\n      )\n      expect(msgFmt.format({COMPANY_COUNT: 21})).toBe(\n        '21 компания опубликовала новые книги.'\n      )\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should fail when the argument in the pattern is not provided",
            "suites": [
                "IntlMessageFormat",
                "arguments with",
                "no spaces"
            ],
            "updatePoint": {
                "line": 413,
                "column": 70
            },
            "line": 413,
            "code": "      it('should fail when the argument in the pattern is not provided', function () {\n        expect(msg.format).toThrow(\n          Error(\n            'The intl string context variable \"STATE\" was not provided to the string \"{STATE}\"'\n          )\n        )\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should fail when the argument in the pattern has a typo",
            "suites": [
                "IntlMessageFormat",
                "arguments with",
                "no spaces"
            ],
            "updatePoint": {
                "line": 421,
                "column": 65
            },
            "line": 421,
            "code": "      it('should fail when the argument in the pattern has a typo', function () {\n        function formatWithValueNameTypo() {\n          return msg.format({'ST ATE': state})\n        }\n\n        expect(formatWithValueNameTypo).toThrow(\n          Error(\n            'The intl string context variable \"STATE\" was not provided to the string \"{STATE}\"'\n          )\n        )\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should succeed when the argument is correct",
            "suites": [
                "IntlMessageFormat",
                "arguments with",
                "no spaces"
            ],
            "updatePoint": {
                "line": 433,
                "column": 53
            },
            "line": 433,
            "code": "      it('should succeed when the argument is correct', function () {\n        expect(msg.format({STATE: state})).toBe(state)\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should fail when the argument in the pattern is not provided",
            "suites": [
                "IntlMessageFormat",
                "arguments with",
                "a numeral"
            ],
            "updatePoint": {
                "line": 442,
                "column": 70
            },
            "line": 442,
            "code": "      it('should fail when the argument in the pattern is not provided', function () {\n        function formatWithMissingValue() {\n          return msg.format({FOO: state})\n        }\n\n        expect(formatWithMissingValue).toThrow(\n          Error(\n            'The intl string context variable \"ST1ATE\" was not provided to the string \"{ST1ATE}\"'\n          )\n        )\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should fail when the argument in the pattern has a typo",
            "suites": [
                "IntlMessageFormat",
                "arguments with",
                "a numeral"
            ],
            "updatePoint": {
                "line": 454,
                "column": 65
            },
            "line": 454,
            "code": "      it('should fail when the argument in the pattern has a typo', function () {\n        function formatWithMissingValue() {\n          msg.format({'ST ATE': state})\n        }\n\n        expect(formatWithMissingValue).toThrow(\n          Error(\n            'The intl string context variable \"ST1ATE\" was not provided to the string \"{ST1ATE}\"'\n          )\n        )\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should succeed when the argument is correct",
            "suites": [
                "IntlMessageFormat",
                "arguments with",
                "a numeral"
            ],
            "updatePoint": {
                "line": 466,
                "column": 53
            },
            "line": 466,
            "code": "      it('should succeed when the argument is correct', function () {\n        expect(msg.format({ST1ATE: state})).toBe(state)\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should parse without errors",
            "suites": [
                "IntlMessageFormat",
                "selectordinal arguments"
            ],
            "updatePoint": {
                "line": 476,
                "column": 35
            },
            "line": 476,
            "code": "    it('should parse without errors', function () {\n      expect(() => IntlMessageFormat.__parse!(msg)).not.toThrow()\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should use ordinal pluralization rules",
            "suites": [
                "IntlMessageFormat",
                "selectordinal arguments"
            ],
            "updatePoint": {
                "line": 480,
                "column": 46
            },
            "line": 480,
            "code": "    it('should use ordinal pluralization rules', function () {\n      const mf = new IntlMessageFormat(msg, 'en')\n\n      expect(mf.format({year: 1})).toBe('This is my 1st birthday.')\n      expect(mf.format({year: 2})).toBe('This is my 2nd birthday.')\n      expect(mf.format({year: 3})).toBe('This is my 3rd birthday.')\n      expect(mf.format({year: 4})).toBe('This is my 4th birthday.')\n      expect(mf.format({year: 11})).toBe('This is my 11th birthday.')\n      expect(mf.format({year: 21})).toBe('This is my 21st birthday.')\n      expect(mf.format({year: 22})).toBe('This is my 22nd birthday.')\n      expect(mf.format({year: 33})).toBe('This is my 33rd birthday.')\n      expect(mf.format({year: 44})).toBe('This is my 44th birthday.')\n      expect(mf.format({year: 1024})).toBe('This is my 1,024th birthday.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should use the correct PT plural rules",
            "suites": [
                "IntlMessageFormat",
                "exceptions"
            ],
            "updatePoint": {
                "line": 497,
                "column": 46
            },
            "line": 497,
            "code": "    it('should use the correct PT plural rules', function () {\n      const msg = '{num, plural, one{one} other{other}}'\n      const pt = new IntlMessageFormat(msg, 'pt')\n      const ptMZ = new IntlMessageFormat(msg, 'pt-MZ')\n\n      expect(pt.format({num: 0})).toBe('one')\n      // According to https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/plurals.json#L599-L606\n      expect(ptMZ.format({num: 0})).toBe('one')\n      expect(ptMZ.format({num: 100})).toBe('other')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should take negative number as plural",
            "suites": [
                "IntlMessageFormat",
                "exceptions"
            ],
            "updatePoint": {
                "line": 508,
                "column": 45
            },
            "line": 508,
            "code": "    it('should take negative number as plural', function () {\n      const msg =\n        '{num, plural, offset:-1 =-1{negative one} one{one} other{other}}'\n      const mf = new IntlMessageFormat(msg, 'en')\n\n      expect(mf.format({num: -1})).toBe('negative one')\n      expect(mf.format({num: 0})).toBe('one')\n      expect(mf.format({num: 1})).toBe('other')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should take empty string value",
            "suites": [
                "IntlMessageFormat",
                "exceptions"
            ],
            "updatePoint": {
                "line": 517,
                "column": 38
            },
            "line": 517,
            "code": "    it('should take empty string value', function () {\n      const msg = '\"{value}\"'\n      const mf = new IntlMessageFormat(msg, 'en')\n\n      expect(mf.formatToParts({value: ''})).toEqual([\n        {type: PART_TYPE.literal, value: '\"\"'},\n      ])\n      expect(mf.format({value: ''})).toBe('\"\"')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should handle offset in plural #",
            "suites": [
                "IntlMessageFormat",
                "exceptions"
            ],
            "updatePoint": {
                "line": 528,
                "column": 38
            },
            "line": 528,
            "code": "  it('should handle offset in plural #', function () {\n    const msg = `{num_guests, plural, offset:1\n      =0 {{host} does not give a party.}\n      =1 {{host} invites {guest} to their party.}\n      =2 {{host} invites {guest} and one other person to their party.}\n      other {{host} invites {guest} and # other people to their party.}\n    }`\n    const mf = new IntlMessageFormat(msg, 'en')\n    expect(mf.format({host: 'The host', guest: 'Alice', num_guests: 0})).toBe(\n      'The host does not give a party.'\n    )\n    expect(mf.format({host: 'The host', guest: 'Alice', num_guests: 1})).toBe(\n      'The host invites Alice to their party.'\n    )\n    expect(mf.format({host: 'The host', guest: 'Alice', num_guests: 2})).toBe(\n      'The host invites Alice and one other person to their party.'\n    )\n    expect(mf.format({host: 'The host', guest: 'Alice', num_guests: 3})).toBe(\n      'The host invites Alice and 2 other people to their party.'\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "regression issue #437",
            "suites": [
                "IntlMessageFormat",
                "exceptions"
            ],
            "updatePoint": {
                "line": 550,
                "column": 27
            },
            "line": 550,
            "code": "  it('regression issue #437', function () {\n    const mf = new IntlMessageFormat(\n      '{score, plural, one {# shopper} other {# shoppers}}',\n      'en'\n    )\n    expect(mf.format({score: 1})).toBe('1 shopper')\n    expect(mf.format({score: 2})).toBe('2 shoppers')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should handle @ correctly",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 560,
                "column": 33
            },
            "line": 560,
            "code": "    it('should handle @ correctly', function () {\n      const mf = new IntlMessageFormat('hi @{there}', 'en')\n      expect(\n        mf.format({\n          there: '2008',\n        })\n      ).toEqual('hi @2008')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "simple message",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 569,
                "column": 22
            },
            "line": 569,
            "code": "    it('simple message', function () {\n      const mf = new IntlMessageFormat('hello <b>world</b>', 'en')\n      expect(mf.format<object>({b: parts => ({parts})})).toEqual([\n        'hello ',\n        {parts: ['world']},\n      ])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "nested tag message",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 576,
                "column": 26
            },
            "line": 576,
            "code": "    it('nested tag message', function () {\n      const mf = new IntlMessageFormat(\n        'hello <b>world<i>!</i> <br/> </b>',\n        'en'\n      )\n      expect(\n        mf.format<object>({\n          b: chunks => ({chunks}),\n          i: c => ({val: `$$${c}$$`}),\n        })\n      ).toEqual(['hello ', {chunks: ['world', {val: '$$!$$'}, ' <br/> ']}])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "deep format nested tag message",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 588,
                "column": 38
            },
            "line": 588,
            "code": "    it('deep format nested tag message', function () {\n      const mf = new IntlMessageFormat(\n        'hello <b>world<i>!</i> <br/> </b>',\n        'en'\n      )\n      expect(\n        mf.format<object>({\n          b: chunks => ['<b>', ...chunks, '</b>'],\n          i: c => ({val: `$$${c}$$`}),\n        })\n      ).toEqual(['hello <b>world', {val: '$$!$$'}, ' <br/> </b>'])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "simple message w/ placeholder and no tag",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 600,
                "column": 48
            },
            "line": 600,
            "code": "    it('simple message w/ placeholder and no tag', function () {\n      const mf = new IntlMessageFormat('hello {placeholder} {var2}', 'en')\n      expect(\n        mf.format({\n          placeholder: {name: 'gaga'},\n          var2: {foo: 1},\n        })\n      ).toEqual(['hello ', {name: 'gaga'}, ' ', {foo: 1}])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "simple message w/ placeholder",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 609,
                "column": 37
            },
            "line": 609,
            "code": "    it('simple message w/ placeholder', function () {\n      const mf = new IntlMessageFormat(\n        'hello <b>world</b> <a>{placeholder}</a>',\n        'en'\n      )\n      expect(\n        mf.format<object>({\n          b: parts => ({parts}),\n          placeholder: 'gaga',\n          a: parts => ({parts}),\n        })\n      ).toEqual(['hello ', {parts: ['world']}, ' ', {parts: ['gaga']}])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "message w/ placeholder & HTML entities",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 622,
                "column": 46
            },
            "line": 622,
            "code": "    it('message w/ placeholder & HTML entities', function () {\n      const mf = new IntlMessageFormat('Hello&lt;<tag>{text}</tag>', 'en')\n      expect(\n        mf.format<object>({\n          tag: parts => ({parts}),\n          text: '<asd>',\n        })\n      ).toEqual(['Hello&lt;', {parts: ['<asd>']}])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "message w/ placeholder & >",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 631,
                "column": 34
            },
            "line": 631,
            "code": "    it('message w/ placeholder & >', function () {\n      const mf = new IntlMessageFormat(\n        '&lt; hello <b>world</b> {token} &lt;&gt; <a>{placeholder}</a>',\n        'en'\n      )\n      expect(\n        mf.format<object>({\n          b: parts => ({parts}),\n          token: '<asd>',\n          placeholder: '>',\n          a: parts => ({parts}),\n        })\n      ).toEqual([\n        '&lt; hello ',\n        {parts: ['world']},\n        ' <asd> &lt;&gt; ',\n        {parts: ['>']},\n      ])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "select message w/ placeholder & >",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 650,
                "column": 41
            },
            "line": 650,
            "code": "    it('select message w/ placeholder & >', function () {\n      const mf = new IntlMessageFormat(\n        '{gender, select, male {&lt; hello <b>world</b> {token} &lt;&gt; <a>{placeholder}</a>} female {<b>foo &lt;&gt; bar</b>} other {<b>foo &lt;&gt; bar</b>}}',\n        'en'\n      )\n      expect(\n        mf.format<object>({\n          gender: 'male',\n          b: str => ({str}),\n          token: '<asd>',\n          placeholder: '>',\n          a: str => ({str}),\n        })\n      ).toEqual([\n        '&lt; hello ',\n        {str: ['world']},\n        ' <asd> &lt;&gt; ',\n        {str: ['>']},\n      ])\n      expect(\n        mf.format<object>({\n          gender: 'female',\n          b: str => ({str}),\n        })\n      ).toEqual({str: ['foo &lt;&gt; bar']})\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should allow escaping tag as legacy HTML",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 676,
                "column": 48
            },
            "line": 676,
            "code": "    it('should allow escaping tag as legacy HTML', function () {\n      const mf = new IntlMessageFormat(\n        \"hello '<b>world</b>' '<a>'{placeholder}'</a>'\",\n        'en'\n      )\n      expect(\n        mf.format({\n          placeholder: '<foo>gaga</foo>',\n        })\n      ).toEqual('hello <b>world</b> <a><foo>gaga</foo></a>')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should handle tag w/ rich text",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 687,
                "column": 38
            },
            "line": 687,
            "code": "    it('should handle tag w/ rich text', function () {\n      const mf = new IntlMessageFormat('hello <foo>{bar}</foo> test', 'en')\n      expect(\n        mf.format<object>({\n          foo: obj => ({\n            obj,\n          }),\n          bar: {bar: 1},\n        })\n      ).toEqual(['hello ', {obj: [{bar: 1}]}, ' test'])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should handle tag in plural",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 698,
                "column": 35
            },
            "line": 698,
            "code": "    it('should handle tag in plural', function () {\n      const mf = new IntlMessageFormat(\n        'You have {count, plural, =1 {<b>1</b> Message} other {<b>#</b> Messages}}',\n        'en'\n      )\n      expect(\n        mf.format<string>({\n          b: chunks => `{}${chunks}{}`,\n          count: 1000,\n        })\n      ).toBe('You have {}1,000{} Messages')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "custom formats should work for time",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 712,
                "column": 41
            },
            "line": 712,
            "code": "  it('custom formats should work for time', function () {\n    const msg = 'Today is {time, time, verbose}'\n    const mf = new IntlMessageFormat(msg, 'en', {\n      time: {\n        verbose: {\n          month: 'long',\n          day: 'numeric',\n          year: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric',\n          second: 'numeric',\n          timeZoneName: 'short',\n        },\n      },\n    })\n    expect(mf.format({time: new Date(0)})).toContain(\n      new Intl.DateTimeFormat('en', {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short',\n      }).format(0)\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "custom formats should work for date",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 740,
                "column": 41
            },
            "line": 740,
            "code": "  it('custom formats should work for date', function () {\n    const msg = 'Today is {time, date, verbose}'\n    const mf = new IntlMessageFormat(msg, 'en', {\n      date: {\n        verbose: {\n          month: 'long',\n          day: 'numeric',\n          year: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric',\n          second: 'numeric',\n          timeZoneName: 'short',\n        },\n      },\n    })\n    expect(mf.format({time: 0})).toContain(\n      new Intl.DateTimeFormat('en', {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short',\n      }).format(0)\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "custom formats should work for number",
            "suites": [
                "IntlMessageFormat",
                "xml"
            ],
            "updatePoint": {
                "line": 768,
                "column": 43
            },
            "line": 768,
            "code": "  it('custom formats should work for number', function () {\n    const msg = 'Today is {time, number, verbose}'\n    const mf = new IntlMessageFormat(msg, 'en', {\n      number: {\n        verbose: {\n          minimumFractionDigits: 5,\n          maximumFractionDigits: 5,\n        },\n      },\n    })\n    expect(mf.format({time: 0.1234567})).toContain(\n      new Intl.NumberFormat('en', {\n        minimumFractionDigits: 5,\n        maximumFractionDigits: 5,\n      }).format(0.1234567)\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "replaces unquoted # symbol in the plural rule option with actual number",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 787,
                "column": 79
            },
            "line": 787,
            "code": "    it('replaces unquoted # symbol in the plural rule option with actual number', () => {\n      const mf = new IntlMessageFormat(\n        'You {count, plural, one {worked for # hour} other {worked for # hours}} today.',\n        'en'\n      )\n      expect(mf.format({count: 1})).toBe('You worked for 1 hour today.')\n      expect(mf.format({count: 3})).toBe('You worked for 3 hours today.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "preserves quoted # symbol in the plural option",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 796,
                "column": 54
            },
            "line": 796,
            "code": "    it('preserves quoted # symbol in the plural option', () => {\n      const mf = new IntlMessageFormat(\n        \"You {count, plural, one {worked for '#' hour} other {worked for '#' hours}} today.\",\n        'en'\n      )\n      expect(mf.format({count: 1})).toBe('You worked for # hour today.')\n      expect(mf.format({count: 3})).toBe('You worked for # hours today.')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "does not format # symbol in the plural option as a standalone part",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 805,
                "column": 74
            },
            "line": 805,
            "code": "    it('does not format # symbol in the plural option as a standalone part', () => {\n      const mf = new IntlMessageFormat(\n        'You {count, plural, one {worked for # hour} other {worked for # hours}} today.',\n        'en'\n      )\n      expect(mf.formatToParts({count: 1})).toEqual([\n        {type: PART_TYPE.literal, value: 'You worked for 1 hour today.'},\n      ])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "does not replace # symbol in deeply nested sub messages",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 815,
                "column": 63
            },
            "line": 815,
            "code": "    it('does not replace # symbol in deeply nested sub messages', () => {\n      const mf = new IntlMessageFormat(\n        `You {count, plural,\n          one {worked for {unit, select,\n            hour {# hour}\n            other {# unit}\n          }}\n          other {worked for {unit, select,\n            hour {# hours}\n            other {# units}\n          }}\n        } today.`,\n        'en'\n      )\n      expect(mf.format({count: 1, unit: 'hour'})).toBe(\n        'You worked for # hour today.'\n      )\n      expect(mf.format({count: 3, unit: 'hour'})).toBe(\n        'You worked for # hours today.'\n      )\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "default format like in ICU should work",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 838,
                "column": 44
            },
            "line": 838,
            "code": "  it('default format like in ICU should work', function () {\n    expect(\n      new IntlMessageFormat('{amount, number, integer}', 'en-US').format({\n        amount: 123456.78,\n      })\n    ).toBe('123,457')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "number skeleton",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 846,
                "column": 21
            },
            "line": 846,
            "code": "  it('number skeleton', function () {\n    expect(\n      new IntlMessageFormat(\n        '{amount, number, ::currency/CAD .0 group-off}',\n        'en-US'\n      ).format({amount: 123456.78})\n    ).toMatch(/\\$123456.8/) // Deal w/ IE11\n    expect(\n      new IntlMessageFormat(\n        '{amount, number, ::currency/GBP .0#}',\n        'en-US'\n      ).format({amount: 123456.789})\n    ).toBe('£123,456.79')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "number skeleton with scale",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 861,
                "column": 32
            },
            "line": 861,
            "code": "  it('number skeleton with scale', function () {\n    expect(\n      new IntlMessageFormat(\n        '{amount, number, ::percent scale/0.01}',\n        'en-US'\n      ).format({amount: 12.3})\n    ).toBe('12%')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "date skeleton",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 870,
                "column": 19
            },
            "line": 870,
            "code": "  it('date skeleton', function () {\n    expect(\n      new IntlMessageFormat('{d, date, ::yyyyMMMdd}', 'en-US').format({\n        d: new Date(0),\n      })\n    ).toMatch(/[A-Z][a-z]{2}(.*?)\\d{2}(.*?),(.*?)\\d{4}/) // Deal w/ IE11\n    expect(\n      new IntlMessageFormat('{d, date, ::yyyyMMdd}', 'en-US').format({\n        d: new Date(0),\n      })\n    ).toMatch(/\\d{2}(.*?)\\/(.*?)\\d{2}(.*?)\\/(.*?)\\d{4}/) // Deal w/ IE11\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "time skeleton",
            "suites": [
                "IntlMessageFormat",
                "# symbol in plural rule argument"
            ],
            "updatePoint": {
                "line": 884,
                "column": 21
            },
            "line": 884,
            "code": "    it('time skeleton', function () {\n      expect(\n        new IntlMessageFormat('{d, time, ::hhmmss}', 'en-US').format({\n          d: new Date(0),\n        })\n      ).toMatch(/\\d{2}(.*?):(.*?)\\d{2}(.*?):(.*?)\\d{2}(.*?)[AP]M/) // Deal w/ IE11\n      expect(\n        new IntlMessageFormat('{d, time, ::hhmmssz}', 'en-US').format({\n          d: new Date(0),\n        })\n      ).toMatch(/\\d{2}(.*?):(.*?)\\d{2}(.*?):(.*?)\\d{2}(.*?)[AP]M/) // Deal w/ IE11\n      expect(\n        new IntlMessageFormat('{d, time, ::hhmmssz}', 'en-US').format({\n          d: new Date(0),\n        })\n      ).toMatch(/\\d{2}(.*?):(.*?)\\d{2}(.*?):(.*?)\\d{2}(.*?)[AP]M/) // Deal w/ IE11\n\n      expect(\n        new IntlMessageFormat('{d, time, ::jjmmss}', 'de-DE').format({\n          d: new Date(0),\n        })\n      ).toMatch(/\\d{2}(.*?):(.*?)\\d{2}(.*?):(.*?)\\d{2}$/) // Deal w/ IE11\n\n      expect(\n        new IntlMessageFormat('{d, time, ::jjmmss}', 'en-US').format({\n          d: new Date(0),\n        })\n      ).toMatch(/\\d{2}(.*?):(.*?)\\d{2}(.*?):(.*?)\\d{2}(.*?)[AP]M$/) // Deal w/ IE11\n\n      expect(\n        new IntlMessageFormat('{d, time, ::jjmmssz}', 'de-DE').format({\n          d: new Date(0),\n        })\n      ).toMatch(/\\d{2}(.*?):(.*?)\\d{2}(.*?):(.*?)\\d{2}(.*?)[A-Z]{3}/) // Deal w/ IE11\n\n      expect(\n        new IntlMessageFormat('{d, time, ::jjmmssz}', 'en-US').format({\n          d: new Date(0),\n        })\n      ).toMatch(/\\d{2}(.*?):(.*?)\\d{2}(.*?):(.*?)\\d{2}(.*?)[AP]M(.*?)[A-Z]{3}/) // Deal w/ IE11\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should be able to take React Element",
            "suites": [
                "IntlMessageFormat",
                "formatToParts"
            ],
            "updatePoint": {
                "line": 928,
                "column": 44
            },
            "line": 928,
            "code": "    it('should be able to take React Element', function () {\n      const element = {}\n      const parts = new IntlMessageFormat(\n        'a react {element}',\n        'en'\n      ).formatToParts({\n        element,\n      })\n      expect(parts).toEqual([\n        {type: PART_TYPE.literal, value: 'a react '},\n        {type: PART_TYPE.object, value: element},\n      ])\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should default to English",
            "suites": [
                "IntlMessageFormat",
                "no locale",
                "no locale provided"
            ],
            "updatePoint": {
                "line": 945,
                "column": 35
            },
            "line": 945,
            "code": "      it('should default to English', function () {\n        const msg = new IntlMessageFormat(\n          'I have {NUM_BOOKS, plural, =1 {1 book} other {# books}}.'\n        )\n        expect(msg.resolvedOptions().locale).toBe(\n          new Intl.NumberFormat().resolvedOptions().locale\n        )\n        expect(msg.format({NUM_BOOKS: 2})).toBe('I have 2 books.')\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "should fallback to default locale",
            "suites": [
                "IntlMessageFormat",
                "no locale",
                "invalid locale default"
            ],
            "updatePoint": {
                "line": 957,
                "column": 43
            },
            "line": 957,
            "code": "      it('should fallback to default locale', function () {\n        const msg = new IntlMessageFormat(\n          '{COMPANY_COUNT, plural, =1 {One company} other {# companies}} published new books.',\n          'fu-BA'\n        )\n        const m = msg.format({COMPANY_COUNT: 1})\n\n        expect(m).toBe('One company published new books.')\n      })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-messageformat/tests"
        },
        {
            "name": "normalizes lower-cased currency code",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 40
            },
            "line": 7,
            "code": "it('normalizes lower-cased currency code', () => {\n  const lowerCaseNf = new NumberFormat('en', {\n    style: 'currency',\n    currency: 'usd',\n  })\n  const upperCaseNf = new NumberFormat('en', {\n    style: 'currency',\n    currency: 'USD',\n  })\n  expect(lowerCaseNf.format(-1234)).toEqual(upperCaseNf.format(-1234))\n})",
            "file": "currency-code.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "rejects invalid currency code",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 33
            },
            "line": 19,
            "code": "it('rejects invalid currency code', () => {\n  expect(() => {\n    new NumberFormat('en', {style: 'currency', currency: '123'})\n  }).toThrow(RangeError)\n})",
            "file": "currency-code.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "currency: '',",
            "suites": [
                "'',",
                "style: 'currency',",
                "currencyDisplay: '',",
                "currencySign: '',",
                "signDisplay: '',",
                "notation: 'compact',",
                "compactDisplay: '',"
            ],
            "updatePoint": {
                "line": 75,
                "column": 56
            },
            "line": 75,
            "code": "                            it(`currency: '${currency}',`, function () {\n                              expect(\n                                new NumberFormat(locale, {\n                                  style: 'currency',\n                                  currency,\n                                  currencySign,\n                                  currencyDisplay,\n                                  signDisplay,\n                                  notation: 'compact',\n                                  compactDisplay,\n                                }).format(10000)\n                              ).toMatchSnapshot()\n                            })",
            "file": "currency-compact.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "Intl.NumberFormat",
            "suites": [
                "Intl.NumberFormat"
            ],
            "updatePoint": {
                "line": 104,
                "column": 27
            },
            "line": null,
            "code": "",
            "file": "currency-compact.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "currency: '',",
            "suites": [
                "'',",
                "style: 'currency',",
                "currencyDisplay: '',",
                "currencySign: '',",
                "signDisplay: '',",
                "notation: '',",
                "compactDisplay: '',"
            ],
            "updatePoint": {
                "line": 80,
                "column": 58
            },
            "line": 80,
            "code": "                              it(`currency: '${currency}',`, function () {\n                                expect(\n                                  new NumberFormat(locale, {\n                                    style: 'currency',\n                                    currency,\n                                    currencySign,\n                                    currencyDisplay,\n                                    signDisplay,\n                                    notation,\n                                    compactDisplay,\n                                  }).format(10000)\n                                ).toMatchSnapshot()\n                              })",
            "file": "currency.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "Intl.NumberFormat",
            "suites": [
                "Intl.NumberFormat"
            ],
            "updatePoint": {
                "line": 110,
                "column": 27
            },
            "line": null,
            "code": "",
            "file": "currency.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "compactDisplay/",
            "suites": [
                "decimal",
                "signDisplay/",
                "notation/"
            ],
            "updatePoint": {
                "line": 62,
                "column": 54
            },
            "line": 62,
            "code": "                  it(`compactDisplay/${compactDisplay}`, function () {\n                    expect(\n                      new NumberFormat(locale, {\n                        style: 'decimal',\n                        signDisplay,\n                        notation,\n                        compactDisplay,\n                      }).formatToParts(10000)\n                    ).toMatchSnapshot()\n                  })",
            "file": "decimal.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "NumberFormat",
            "suites": [
                "NumberFormat"
            ],
            "updatePoint": {
                "line": 83,
                "column": 22
            },
            "line": null,
            "code": "",
            "file": "decimal.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats decimal",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 19
            },
            "line": 22,
            "code": "it('formats decimal', () => {\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '1', roundedNumber: 1}\n  expect(format(n, data, pl, defaultOptions)).toEqual('1')\n  expect(format({...n, sign: -1}, data, pl, defaultOptions)).toEqual('-1')\n  expect(format({...n, sign: 1}, data, pl, defaultOptions)).toEqual('+1')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats percentage",
            "suites": [],
            "updatePoint": {
                "line": 31,
                "column": 22
            },
            "line": 31,
            "code": "it('formats percentage', () => {\n  const options = {...defaultOptions, style: 'percent'} as const\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '42', roundedNumber: 42}\n  expect(format(n, data, pl, options)).toEqual('42%')\n  expect(format({...n, sign: -1}, data, pl, options)).toEqual('-42%')\n  expect(format({...n, sign: 1}, data, pl, options)).toEqual('+42%')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats percentage with compact display",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 43
            },
            "line": 43,
            "code": "it('formats percentage with compact display', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'percent',\n    notation: 'compact',\n    compactDisplay: 'short',\n  } as const\n  const data = require('./locale-data/en.json').data\n  const pl = new Intl.PluralRules('en-US')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '1',\n    roundedNumber: 1,\n    exponent: 6,\n    magnitude: 6,\n  }\n  expect(format(n, data, pl, options)).toEqual('1M')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats accounting currency sign pattern",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 44
            },
            "line": 62,
            "code": "it('formats accounting currency sign pattern', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'symbol',\n    currencySign: 'accounting',\n  } as const\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '42', roundedNumber: 42}\n  expect(format(n, data, pl, options)).toEqual('$42')\n  expect(format({...n, sign: -1}, data, pl, options)).toEqual('($42)')\n  expect(format({...n, sign: 1}, data, pl, options)).toEqual('+$42')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats currency where the number precedes the symbol",
            "suites": [],
            "updatePoint": {
                "line": 81,
                "column": 57
            },
            "line": 81,
            "code": "it('formats currency where the number precedes the symbol', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'symbol',\n    currencySign: 'accounting',\n    numberingSystem: 'arab',\n  } as const\n  const data = require('./locale-data/ar-SS.json').data\n  const pl = new Intl.PluralRules('ar-SS')\n  const n = {...baseNumberResult, formattedString: '12', roundedNumber: 12}\n  expect(format(n, data, pl, options)).toEqual('١٢\\xa0US$')\n  expect(format({...n, sign: -1}, data, pl, options)).toEqual('؜-١٢\\xa0US$')\n  expect(format({...n, sign: 1}, data, pl, options)).toEqual('؜+١٢\\xa0US$')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "respects currencyBefore insertion rule",
            "suites": [],
            "updatePoint": {
                "line": 101,
                "column": 42
            },
            "line": 101,
            "code": "it('respects currencyBefore insertion rule', () => {\n  const options1 = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'code',\n    currencySign: 'standard',\n  } as const\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '123', roundedNumber: 123}\n  expect(format(n, data, pl, options1)).toEqual('USD\\xa0123')\n  expect(format({...n, sign: -1}, data, pl, options1)).toEqual('-USD\\xa0123')\n  expect(format({...n, sign: 1}, data, pl, options1)).toEqual('+USD\\xa0123')\n\n  const options2 = {...options1, currencyDisplay: 'narrowSymbol'} as const\n  expect(format(n, data, pl, options2)).toEqual('$123')\n  expect(format({...n, sign: -1}, data, pl, options2)).toEqual('-$123')\n  expect(format({...n, sign: 1}, data, pl, options2)).toEqual('+$123')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "respects currencyAfter insertion rule",
            "suites": [],
            "updatePoint": {
                "line": 126,
                "column": 41
            },
            "line": 126,
            "code": "it('respects currencyAfter insertion rule', () => {\n  const data = require('./locale-data/bn.json').data\n  const pl = new Intl.PluralRules('bn')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '123.00',\n    roundedNumber: 123,\n  }\n  const options1 = {\n    ...defaultOptions,\n    style: 'currency',\n    numberingSystem: 'beng',\n    currency: 'USD',\n    currencyDisplay: 'code',\n    currencySign: 'standard',\n  } as const\n  expect(format({...n, sign: -1}, data, pl, options1)).toEqual('-১২৩.০০ USD')\n\n  const options2 = {...options1, currencyDisplay: 'narrowSymbol'} as const\n  expect(format({...n, sign: -1}, data, pl, options2)).toEqual('-১২৩.০০$')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "respects currencyAfter insertion rule for compact display",
            "suites": [],
            "updatePoint": {
                "line": 149,
                "column": 61
            },
            "line": 149,
            "code": "it('respects currencyAfter insertion rule for compact display', () => {\n  const data = require('./locale-data/en.json').data\n  const pl = new Intl.PluralRules('bn')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '10',\n    roundedNumber: 10,\n    exponent: 3,\n    magnitude: 4,\n  }\n  const options = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'ZWD',\n    currencyDisplay: 'narrowSymbol',\n    currencySign: 'standard',\n    notation: 'compact',\n    compactDisplay: 'long',\n  } as const\n  expect(format(n, data, pl, options)).toEqual('ZWD\\xa010K')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats unit pattern with both prefix and suffix",
            "suites": [],
            "updatePoint": {
                "line": 173,
                "column": 52
            },
            "line": 173,
            "code": "it('formats unit pattern with both prefix and suffix', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'unit',\n    unit: 'celsius',\n    unitDisplay: 'long',\n  } as const\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '123', roundedNumber: 123}\n  expect(format(n, data, pl, options)).toEqual('摂氏 123 度')\n  expect(format({...n, sign: -1}, data, pl, options)).toEqual('摂氏 -123 度')\n  expect(format({...n, sign: 1}, data, pl, options)).toEqual('摂氏 +123 度')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats currency name pattern with currency before number",
            "suites": [],
            "updatePoint": {
                "line": 190,
                "column": 61
            },
            "line": 190,
            "code": "it('formats currency name pattern with currency before number', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'name',\n    currencySign: 'standard',\n  } as const\n  const data = require('./locale-data/sw.json').data\n  const pl = new Intl.PluralRules('sw')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '123.00',\n    roundedNumber: 123,\n  }\n  expect(format(n, data, pl, options)).toEqual('dola za Marekani 123.00')\n  expect(format({...n, sign: -1}, data, pl, options)).toEqual(\n    'dola za Marekani -123.00'\n  )\n  expect(format({...n, sign: 1}, data, pl, options)).toEqual(\n    'dola za Marekani +123.00'\n  )\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats compact notation that is currency and sign dependent",
            "suites": [],
            "updatePoint": {
                "line": 218,
                "column": 64
            },
            "line": 218,
            "code": "it('formats compact notation that is currency and sign dependent', () => {\n  const options1 = {\n    ...defaultOptions,\n    notation: 'compact',\n    compactDisplay: 'long',\n  } as const\n  const data = require('./locale-data/sw.json').data\n  const pl = new Intl.PluralRules('sw')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '100',\n    roundedNumber: 100,\n    magnitude: 5,\n  }\n  expect(format(n, data, pl, options1)).toEqual('elfu 100')\n  expect(format({...n, sign: -1}, data, pl, options1)).toEqual('elfu -100')\n  expect(format({...n, sign: 1}, data, pl, options1)).toEqual('elfu +100')\n\n  const options2 = {\n    ...options1,\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'symbol',\n    currencySign: 'standard',\n  } as const\n  expect(format(n, data, pl, options2)).toEqual('US$\\xa0laki100')\n  expect(format({...n, sign: -1}, data, pl, options2)).toEqual(\n    'US$laki\\xa0-100'\n  )\n  expect(format({...n, sign: 1}, data, pl, options2)).toEqual('US$laki\\xa0+100')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "properly unquotes characters from CLDR pattern",
            "suites": [],
            "updatePoint": {
                "line": 252,
                "column": 50
            },
            "line": 252,
            "code": "it('properly unquotes characters from CLDR pattern', () => {\n  const options = {\n    ...defaultOptions,\n    notation: 'compact',\n    compactDisplay: 'short',\n    numberingSystem: 'beng',\n  } as const\n  const data = require('./locale-data/bn.json').data\n  const pl = new Intl.PluralRules('bn')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '1000',\n    roundedNumber: 1000,\n    magnitude: 14,\n  }\n  expect(format(n, data, pl, options)).toEqual('১০০০\\xa0লা.কো.')\n  expect(_formatToParts(n, data, pl, options)).toEqual([\n    {type: 'integer', value: '১০০০'},\n    {type: 'literal', value: '\\xa0'},\n    {type: 'compact', value: 'লা.কো.'},\n  ])\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "determines plurality of unit based on the number value of the scientific notation",
            "suites": [],
            "updatePoint": {
                "line": 277,
                "column": 85
            },
            "line": 277,
            "code": "it('determines plurality of unit based on the number value of the scientific notation', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'unit',\n    unit: 'gallon',\n    unitDisplay: 'long',\n    notation: 'scientific',\n  } as const\n  const data = require('./locale-data/en-BS.json').data\n  const pl = new Intl.PluralRules('en-BS')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '1',\n    roundedNumber: 1,\n    magnitude: 4,\n    exponent: 4,\n  }\n  expect(format(n, data, pl, options)).toEqual('1E4 US gallons')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "determines the plurality of the currency in the compact notation based on the number value",
            "suites": [],
            "updatePoint": {
                "line": 297,
                "column": 94
            },
            "line": 297,
            "code": "it('determines the plurality of the currency in the compact notation based on the number value', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'name',\n    notation: 'compact',\n    compactDisplay: 'short',\n  } as const\n  const data = require('./locale-data/en-GB.json').data\n  const pl = new Intl.PluralRules('en-GB')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '1',\n    roundedNumber: 1,\n    magnitude: 3,\n    exponent: 3,\n  }\n  expect(format(n, data, pl, options)).toEqual('1K US dollars')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "determines plurality of currency based on the number value of scientific notation",
            "suites": [],
            "updatePoint": {
                "line": 318,
                "column": 85
            },
            "line": 318,
            "code": "it('determines plurality of currency based on the number value of scientific notation', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'name',\n    notation: 'scientific',\n  } as const\n  const data = require('./locale-data/en-BS.json').data\n  const pl = new Intl.PluralRules('en-BS')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '1',\n    roundedNumber: 1,\n    magnitude: 4,\n    exponent: 4,\n  }\n  expect(format(n, data, pl, options)).toEqual('1E4 US dollars')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "uses decimal compact pattern to format currency with currencyDisplay === \"name\"",
            "suites": [],
            "updatePoint": {
                "line": 341,
                "column": 83
            },
            "line": 341,
            "code": "it('uses decimal compact pattern to format currency with currencyDisplay === \"name\"', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'currency',\n    currency: 'USD',\n    notation: 'compact',\n    compactDisplay: 'long',\n    currencySign: 'accounting',\n    currencyDisplay: 'name',\n  } as const\n  const data = require('./locale-data/de.json').data\n  const pl = new Intl.PluralRules('de')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '10',\n    roundedNumber: 10,\n    magnitude: 5,\n    exponent: 4,\n  }\n  expect(format(n, data, pl, options)).toEqual('10 Tausend US-Dollar')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "falls back to non-compact formatting when the matching CLDR compact pattern is \"0\"",
            "suites": [],
            "updatePoint": {
                "line": 366,
                "column": 86
            },
            "line": 366,
            "code": "it('falls back to non-compact formatting when the matching CLDR compact pattern is \"0\"', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'decimal',\n    notation: 'compact',\n    compactDisplay: 'short',\n    useGrouping: true,\n  } as const\n  const data = require('./locale-data/de.json').data\n  const pl = new Intl.PluralRules('de')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '10000',\n    roundedNumber: 10000,\n    magnitude: 4,\n  }\n  expect(format(n, data, pl, options)).toEqual('10.000')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "correctly handles NaN and Infinity in scientific notation",
            "suites": [],
            "updatePoint": {
                "line": 385,
                "column": 61
            },
            "line": 385,
            "code": "it('correctly handles NaN and Infinity in scientific notation', () => {\n  const options = {...defaultOptions, notation: 'scientific'} as const\n  const data = require('./locale-data/en.json').data\n  const pl = new Intl.PluralRules('en')\n  const n1 = {\n    ...baseNumberResult,\n    formattedString: '∞',\n    roundedNumber: Infinity,\n  }\n  expect(format(n1, data, pl, options)).toEqual('∞')\n  const n2 = {\n    ...baseNumberResult,\n    formattedString: '∞',\n    roundedNumber: -Infinity,\n    sign: -1,\n  } as const\n  expect(format(n2, data, pl, options)).toEqual('-∞')\n  const n3 = {...baseNumberResult, formattedString: 'NaN', roundedNumber: NaN}\n  expect(format(n3, data, pl, options)).toEqual('NaN')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats compound unit that has the specialized pattern available",
            "suites": [],
            "updatePoint": {
                "line": 408,
                "column": 68
            },
            "line": 408,
            "code": "it('formats compound unit that has the specialized pattern available', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'unit',\n    unit: 'kilometer-per-hour',\n    unitDisplay: 'short',\n  } as const\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '42', roundedNumber: 42}\n  expect(format(n, data, pl, options)).toEqual('42 km/h')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats compound unit that has perUnitPattern available",
            "suites": [],
            "updatePoint": {
                "line": 423,
                "column": 59
            },
            "line": 423,
            "code": "it('formats compound unit that has perUnitPattern available', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'unit',\n    unit: 'centimeter-per-second',\n    unitDisplay: 'long',\n  } as const\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '5', roundedNumber: 5}\n  expect(format(n, data, pl, options)).toEqual('5 センチメートル/秒')\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats compound unit with fallback \"per\" compound pattern",
            "suites": [],
            "updatePoint": {
                "line": 444,
                "column": 62
            },
            "line": 444,
            "code": "it('formats compound unit with fallback \"per\" compound pattern', () => {\n  const options = {\n    ...defaultOptions,\n    style: 'unit',\n    unit: 'celsius-per-celsius',\n    unitDisplay: 'long',\n  } as const\n  const data = require('./locale-data/ja.json').data\n  const pl = new Intl.PluralRules('ja')\n  const n = {...baseNumberResult, formattedString: '42', roundedNumber: 42}\n  expect(_formatToParts(n, data, pl, options)).toEqual([\n    {type: 'unit', value: '摂氏'},\n    // Spacing around \"{0}\" are considered literal instead of unit...\n    {type: 'literal', value: ' '},\n    {type: 'integer', value: '42'},\n    {type: 'literal', value: ' '},\n    {type: 'unit', value: '度毎摂氏  度'},\n  ])\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "correctly formats NaN to parts",
            "suites": [],
            "updatePoint": {
                "line": 464,
                "column": 34
            },
            "line": 464,
            "code": "it('correctly formats NaN to parts', () => {\n  const data = require('./locale-data/en.json').data\n  const pl = new Intl.PluralRules('en')\n  const n = {...baseNumberResult, formattedString: 'NaN', roundedNumber: NaN}\n  expect(_formatToParts(n, data, pl, defaultOptions)).toEqual([\n    {type: 'nan', value: 'NaN'},\n  ])\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "correctly formats Infinity to parts",
            "suites": [],
            "updatePoint": {
                "line": 473,
                "column": 39
            },
            "line": 473,
            "code": "it('correctly formats Infinity to parts', () => {\n  const data = require('./locale-data/en.json').data\n  const pl = new Intl.PluralRules('en')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '∞',\n    roundedNumber: Infinity,\n  }\n  expect(_formatToParts(n, data, pl, defaultOptions)).toEqual([\n    {type: 'infinity', value: '∞'},\n  ])\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "can format numbers with primary and secondary grouping sizes",
            "suites": [],
            "updatePoint": {
                "line": 486,
                "column": 64
            },
            "line": 486,
            "code": "it('can format numbers with primary and secondary grouping sizes', () => {\n  const data = require('./locale-data/hi.json').data\n  const pl = new Intl.PluralRules('hi')\n  const n = {\n    ...baseNumberResult,\n    formattedString: '123556.456',\n    roundedNumber: 123556,\n  }\n  expect(\n    _formatToParts(n, data, pl, {\n      ...defaultOptions,\n      useGrouping: true,\n      style: 'currency',\n      currency: 'USD',\n      currencyDisplay: 'symbol',\n      currencySign: 'standard',\n    })\n  ).toEqual([\n    {type: 'currency', value: '$'},\n    {type: 'integer', value: '1'},\n    {type: 'group', value: ','},\n    {type: 'integer', value: '23'},\n    {type: 'group', value: ','},\n    {type: 'integer', value: '556'},\n    {type: 'decimal', value: '.'},\n    {type: 'fraction', value: '456'},\n  ])\n})",
            "file": "format_to_parts.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "legacy constructor",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 24
            },
            "line": 3,
            "code": "test('legacy constructor', function () {\n  let object = new NumberFormat()\n  let newObject = NumberFormat.call(object)\n\n  let symbols = Object.getOwnPropertySymbols(newObject)\n  if (symbols.length !== 0) {\n    expect(symbols.length).toBe(1)\n    // @ts-ignore\n    expect(symbols[0].description).toBe('IntlLegacyConstructedSymbol')\n  }\n})",
            "file": "legacy.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "formats percentage with comapct notation",
            "suites": [],
            "updatePoint": {
                "line": 38,
                "column": 44
            },
            "line": 38,
            "code": "it('formats percentage with comapct notation', () => {\n  expect(\n    NumberFormat('en-BS', {\n      style: 'percent',\n      notation: 'compact',\n    }).format(10_000)\n  ).toBe('1M')\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "should lookup locale correctly",
            "suites": [],
            "updatePoint": {
                "line": 47,
                "column": 34
            },
            "line": 47,
            "code": "it('should lookup locale correctly', function () {\n  expect(\n    new NumberFormat('en-BS', {\n      style: 'unit',\n      unit: 'bit',\n    }).format(1000)\n  ).toBe('1,000 bit')\n  expect(\n    new NumberFormat('en-BS', {\n      style: 'unit',\n      unit: 'celsius',\n    }).format(1000)\n  ).toBe('1,000°C')\n  expect(\n    new NumberFormat('en-BS', {\n      style: 'unit',\n      unit: 'gallon',\n    }).format(1000)\n  ).toBe('1,000 US gal')\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "supportedLocalesOf should return correct result based on data loaded",
            "suites": [],
            "updatePoint": {
                "line": 68,
                "column": 72
            },
            "line": 68,
            "code": "it('supportedLocalesOf should return correct result based on data loaded', function () {\n  expect(NumberFormat.supportedLocalesOf(['zh', 'en-US', 'af'])).toEqual([\n    'zh',\n    'en',\n  ])\n  expect(NumberFormat.supportedLocalesOf(['af'])).toEqual([])\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "should not crash if unit is not specified",
            "suites": [],
            "updatePoint": {
                "line": 75,
                "column": 45
            },
            "line": 75,
            "code": "it('should not crash if unit is not specified', function () {\n  expect(new NumberFormat().resolvedOptions().unit).toBeUndefined()\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "10000",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 92,
                "column": 11
            },
            "line": 92,
            "code": "  it('10000', function () {\n    expect(\n      new NumberFormat('th', {\n        notation: 'compact',\n        signDisplay: 'exceptZero',\n        compactDisplay: 'short',\n      }).format(10000)\n    ).toBe('+10K')\n  })",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "10000 currency",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 102,
                "column": 20
            },
            "line": 102,
            "code": "  it('10000 currency', function () {\n    expect(\n      new NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        currencySign: 'standard',\n        signDisplay: 'exceptZero',\n        currencyDisplay: 'narrowSymbol',\n        notation: 'standard',\n        compactDisplay: 'short',\n      }).format(10000)\n    ).toBe('+$10,000.00')\n    expect(\n      new NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'ZWD',\n        currencySign: 'standard',\n        signDisplay: 'exceptZero',\n        currencyDisplay: 'narrowSymbol',\n        notation: 'compact',\n        compactDisplay: 'short',\n      }).format(10000)\n    ).toBe('+ZWD 10K')\n    expect(\n      new NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'ZWD',\n        currencySign: 'standard',\n        signDisplay: 'exceptZero',\n        currencyDisplay: 'narrowSymbol',\n        notation: 'compact',\n        compactDisplay: 'long',\n      }).format(10000)\n    ).toBe('+ZWD 10K')\n    expect(\n      new NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'ZWD',\n        currencySign: 'standard',\n        signDisplay: 'exceptZero',\n        currencyDisplay: 'name',\n        notation: 'compact',\n        compactDisplay: 'long',\n      }).format(10000)\n    ).toBe('+10 thousand Zimbabwean dollars (1980–2008)')\n    expect(\n      new NumberFormat('uk', {\n        style: 'currency',\n        currency: 'GBP',\n        currencySign: 'standard',\n        signDisplay: 'exceptZero',\n        currencyDisplay: 'name',\n        notation: 'compact',\n        compactDisplay: 'short',\n      }).format(10000)\n    ).toBe('+10 тис. англійських фунтів')\n    expect(\n      new NumberFormat('uk', {\n        style: 'currency',\n        currency: 'GBP',\n        currencySign: 'accounting',\n        signDisplay: 'exceptZero',\n        currencyDisplay: 'name',\n        notation: 'scientific',\n        compactDisplay: 'short',\n      }).format(10000)\n    ).toBe('+1,00Е4 англійського фунта')\n  })",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "10000 currency de compactLong",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 171,
                "column": 35
            },
            "line": 171,
            "code": "  it('10000 currency de compactLong', function () {\n    expect(\n      new NumberFormat('de', {\n        style: 'currency',\n        currency: 'USD',\n        currencySign: 'accounting',\n        signDisplay: 'auto',\n        currencyDisplay: 'name',\n        notation: 'compact',\n        compactDisplay: 'long',\n      }).format(10000)\n    ).toBe('10 Tausend US-Dollar')\n  })",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "number ",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 186,
                "column": 24
            },
            "line": 186,
            "code": "    it(`number ${number}`, function () {\n      const nfEngineering = new NumberFormat('de-DE', {\n        notation: 'engineering',\n      })\n      expect(nfEngineering.format(+number)).toBe(engineering)\n      const nfScientific = new NumberFormat('de-DE', {\n        notation: 'scientific',\n      })\n      expect(nfScientific.format(+number)).toBe(scientific)\n    })",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "chose compact pattern with rounded number",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 200,
                "column": 45
            },
            "line": 200,
            "code": "it('chose compact pattern with rounded number', () => {\n  const nf = new NumberFormat('en', {\n    // maximumIntegerDigits: 3,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n    useGrouping: false,\n    style: 'decimal',\n    notation: 'compact',\n  })\n\n  expect(nf.format(999.995)).toEqual('1.00K')\n  expect(nf.format(999995000)).toEqual('1.00B')\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "correctly rounds UP the number in the compact notation",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 215,
                "column": 58
            },
            "line": 215,
            "code": "it('correctly rounds UP the number in the compact notation', () => {\n  const nf = new NumberFormat('en', {\n    notation: 'compact',\n    compactDisplay: 'short',\n  })\n  expect(nf.format(9990)).toEqual('10K')\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "avoids floating point precision loss at best effort when formatting huge numbers (significantDigits)",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 223,
                "column": 104
            },
            "line": 223,
            "code": "it('avoids floating point precision loss at best effort when formatting huge numbers (significantDigits)', () => {\n  const nf = new NumberFormat([], {minimumSignificantDigits: 1})\n  expect(nf.format(1e41)).toEqual(\n    '100,000,000,000,000,000,000,000,000,000,000,000,000,000'\n  )\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "avoids floating point precision loss at best effort when formatting huge numbers (fractionDigits)",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 230,
                "column": 101
            },
            "line": 230,
            "code": "it('avoids floating point precision loss at best effort when formatting huge numbers (fractionDigits)', () => {\n  const nf = new NumberFormat([], {minimumFractionDigits: 0})\n  expect(nf.format(1e41)).toEqual(\n    '100,000,000,000,000,000,000,000,000,000,000,000,000,000'\n  )\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "NaN zh-TW",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 237,
                "column": 15
            },
            "line": 237,
            "code": "test('NaN zh-TW', function () {\n  expect(new NumberFormat('zh-TW').format(NaN)).toBe('非數值')\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "ignore-invalid-unicode-ext-values.js",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 241,
                "column": 40
            },
            "line": 241,
            "code": "it('ignore-invalid-unicode-ext-values.js', function () {\n  var locales = ['ja-JP', 'zh-Hans-CN', 'zh-Hant-TW']\n  var input = 1234567.89\n\n  locales.forEach(function (locale) {\n    var defaultNumberFormat = new NumberFormat([locale])\n    var defaultOptions = defaultNumberFormat.resolvedOptions()\n    var defaultLocale = defaultOptions.locale\n    var defaultFormatted = defaultNumberFormat.format(input)\n\n    const keyValues = {\n      cu: ['USD', 'EUR', 'JPY', 'CNY', 'TWD', 'invalid'],\n      nu: ['native', 'traditio', 'finance', 'invalid'],\n    }\n\n    Object.getOwnPropertyNames(keyValues).forEach(function (key) {\n      keyValues[key as 'cu'].forEach(function (value) {\n        var numberFormat = new NumberFormat([\n          locale + '-u-' + key + '-' + value,\n        ])\n        var options = numberFormat.resolvedOptions()\n        expect(options.locale).toBe(defaultLocale)\n        expect(options).toEqual(defaultOptions)\n        expect(numberFormat.format(input)).toBe(defaultFormatted)\n      })\n    })\n  })\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "GH#2887",
            "suites": [
                "test262 examples"
            ],
            "updatePoint": {
                "line": 270,
                "column": 11
            },
            "line": 270,
            "code": "it('GH#2887', function () {\n  expect(\n    new NumberFormat('en', {\n      style: 'currency',\n      currency: 'EUR',\n      notation: 'compact',\n    }).format(30.0)\n  ).toBe('€30')\n})",
            "file": "misc.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": " short",
            "suites": [
                "notation-compact-ko-KR"
            ],
            "updatePoint": {
                "line": 80,
                "column": 23
            },
            "line": 80,
            "code": "    it(`${number} short`, function () {\n      const nfShort = new NumberFormat('ko-KR', {\n        notation: 'compact',\n        compactDisplay: 'short',\n      })\n      expect(nfShort.formatToParts(number)).toEqual(short)\n    })",
            "file": "notation-compact-ko-KR.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": " long",
            "suites": [
                "notation-compact-ko-KR"
            ],
            "updatePoint": {
                "line": 88,
                "column": 22
            },
            "line": 88,
            "code": "    it(`${number} long`, function () {\n      const nfLong = new NumberFormat('ko-KR', {\n        notation: 'compact',\n        compactDisplay: 'long',\n      })\n      expect(nfLong.formatToParts(number)).toEqual(long)\n    })",
            "file": "notation-compact-ko-KR.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "short",
            "suites": [
                "notation-compact-zh-TW"
            ],
            "updatePoint": {
                "line": 12,
                "column": 11
            },
            "line": 12,
            "code": "  it('short', function () {\n    const nfShort = new NumberFormat('zh-TW', {\n      notation: 'compact',\n      compactDisplay: 'short',\n    })\n    expect(nfShort.format(987654321)).toBe('9.9億')\n    expect(nfShort.format(9876_5432)).toBe('9877萬')\n    expect(nfShort.format(98765)).toBe('9.9萬')\n    // NOTE: in Chrome 81 and Node 14, this is \"9876\", which kinda disrespect the grouping\n    // separator setting. We think it is a bug.\n    expect(nfShort.format(9876)).toBe('9876')\n    expect(nfShort.format(159)).toBe('159')\n    expect(nfShort.format(15.9)).toBe('16')\n    expect(nfShort.format(1.59)).toBe('1.6')\n    expect(nfShort.format(0.159)).toBe('0.16')\n    expect(nfShort.format(0.0159)).toBe('0.016')\n    expect(nfShort.format(0.00159)).toBe('0.0016')\n  })",
            "file": "notation-compact-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "long",
            "suites": [
                "notation-compact-zh-TW"
            ],
            "updatePoint": {
                "line": 31,
                "column": 10
            },
            "line": 31,
            "code": "  it('long', function () {\n    const nfLong = new NumberFormat('zh-TW', {\n      notation: 'compact',\n      compactDisplay: 'long',\n    })\n    expect(nfLong.format(987654321)).toBe('9.9億')\n    expect(nfLong.format(98765432)).toBe('9877萬')\n    expect(nfLong.format(98765)).toBe('9.9萬')\n    // See the comment in the test case above.\n    expect(nfLong.format(9876)).toBe('9876')\n    expect(nfLong.format(159)).toBe('159')\n    expect(nfLong.format(15.9)).toBe('16')\n    expect(nfLong.format(1.59)).toBe('1.6')\n    expect(nfLong.format(0.159)).toBe('0.16')\n    expect(nfLong.format(0.0159)).toBe('0.016')\n    expect(nfLong.format(0.00159)).toBe('0.0016')\n  })",
            "file": "notation-compact-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "compactDisplay/",
            "suites": [
                "percent",
                "signDisplay/",
                "notation/"
            ],
            "updatePoint": {
                "line": 62,
                "column": 54
            },
            "line": 62,
            "code": "                  it(`compactDisplay/${compactDisplay}`, function () {\n                    expect(\n                      new NumberFormat(locale, {\n                        style: 'percent',\n                        signDisplay,\n                        notation,\n                        compactDisplay,\n                      }).formatToParts(10000)\n                    ).toMatchSnapshot()\n                  })",
            "file": "percent.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "NumberFormat",
            "suites": [
                "NumberFormat"
            ],
            "updatePoint": {
                "line": 83,
                "column": 22
            },
            "line": null,
            "code": "",
            "file": "percent.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "negative",
            "suites": [
                "signDisplay-currency-zh-TW"
            ],
            "updatePoint": {
                "line": 65,
                "column": 18
            },
            "line": 65,
            "code": "      it('negative', function () {\n        expect(nf.format(-987)).toEqual(negative)\n      })",
            "file": "signDisplay-currency-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "negativeNearZero",
            "suites": [
                "signDisplay-currency-zh-TW"
            ],
            "updatePoint": {
                "line": 68,
                "column": 26
            },
            "line": 68,
            "code": "      it('negativeNearZero', function () {\n        expect(nf.format(-0.0001)).toEqual(negativeNearZero)\n      })",
            "file": "signDisplay-currency-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "negativeZero",
            "suites": [
                "signDisplay-currency-zh-TW"
            ],
            "updatePoint": {
                "line": 71,
                "column": 22
            },
            "line": 71,
            "code": "      it('negativeZero', function () {\n        expect(nf.format(-0)).toEqual(negativeZero)\n      })",
            "file": "signDisplay-currency-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "zero",
            "suites": [
                "signDisplay-currency-zh-TW"
            ],
            "updatePoint": {
                "line": 74,
                "column": 14
            },
            "line": 74,
            "code": "      it('zero', function () {\n        expect(nf.format(0)).toEqual(zero)\n      })",
            "file": "signDisplay-currency-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "positiveNearZero",
            "suites": [
                "signDisplay-currency-zh-TW"
            ],
            "updatePoint": {
                "line": 77,
                "column": 26
            },
            "line": 77,
            "code": "      it('positiveNearZero', function () {\n        expect(nf.format(0.0001)).toEqual(positiveNearZero)\n      })",
            "file": "signDisplay-currency-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "positive",
            "suites": [
                "signDisplay-currency-zh-TW"
            ],
            "updatePoint": {
                "line": 80,
                "column": 18
            },
            "line": 80,
            "code": "      it('positive', function () {\n        expect(nf.format(987)).toEqual(positive)\n      })",
            "file": "signDisplay-currency-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "negativeInfinity",
            "suites": [
                "signDisplay-zh-TW"
            ],
            "updatePoint": {
                "line": 30,
                "column": 26
            },
            "line": 30,
            "code": "      it('negativeInfinity', () => {\n        expect(nf.format(-Infinity)).toEqual(negativeInfinity)\n      })",
            "file": "signDisplay-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "negative",
            "suites": [
                "signDisplay-zh-TW"
            ],
            "updatePoint": {
                "line": 33,
                "column": 18
            },
            "line": 33,
            "code": "      it('negative', function () {\n        expect(nf.format(-987)).toEqual(negative)\n      })",
            "file": "signDisplay-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "negativeNearZero",
            "suites": [
                "signDisplay-zh-TW"
            ],
            "updatePoint": {
                "line": 36,
                "column": 26
            },
            "line": 36,
            "code": "      it('negativeNearZero', function () {\n        expect(nf.format(-0.0001)).toEqual(negativeNearZero)\n      })",
            "file": "signDisplay-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "negativeZero",
            "suites": [
                "signDisplay-zh-TW"
            ],
            "updatePoint": {
                "line": 39,
                "column": 22
            },
            "line": 39,
            "code": "      it('negativeZero', function () {\n        expect(nf.format(-0)).toEqual(negativeZero)\n      })",
            "file": "signDisplay-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "zero",
            "suites": [
                "signDisplay-zh-TW"
            ],
            "updatePoint": {
                "line": 42,
                "column": 14
            },
            "line": 42,
            "code": "      it('zero', function () {\n        expect(nf.format(0)).toEqual(zero)\n      })",
            "file": "signDisplay-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "positiveNearZero",
            "suites": [
                "signDisplay-zh-TW"
            ],
            "updatePoint": {
                "line": 45,
                "column": 26
            },
            "line": 45,
            "code": "      it('positiveNearZero', function () {\n        expect(nf.format(0.0001)).toEqual(positiveNearZero)\n      })",
            "file": "signDisplay-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "positive",
            "suites": [
                "signDisplay-zh-TW"
            ],
            "updatePoint": {
                "line": 48,
                "column": 18
            },
            "line": 48,
            "code": "      it('positive', function () {\n        expect(nf.format(987)).toEqual(positive)\n      })",
            "file": "signDisplay-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": " - ",
            "suites": [
                "unit-zh-TW"
            ],
            "updatePoint": {
                "line": 152,
                "column": 36
            },
            "line": 152,
            "code": "      it(`${number} - ${unitDisplay}`, function () {\n        const nf = new NumberFormat('zh-TW', {\n          style: 'unit',\n          unit: 'meter',\n          unitDisplay: unitDisplay as 'narrow',\n        })\n        expect(nf.formatToParts(number)).toEqual(expected)\n      })",
            "file": "unit-zh-TW.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "compactDisplay/",
            "suites": [
                "unit",
                "unitDisplay/",
                "signDisplay/",
                "notation/"
            ],
            "updatePoint": {
                "line": 68,
                "column": 58
            },
            "line": 68,
            "code": "                      it(`compactDisplay/${compactDisplay}`, function () {\n                        expect(\n                          new NumberFormat(locale, {\n                            style: 'unit',\n                            unit: 'bit',\n                            unitDisplay,\n                            signDisplay,\n                            notation,\n                            compactDisplay,\n                          }).formatToParts(10000)\n                        ).toMatchSnapshot()\n                        expect(\n                          new NumberFormat(locale, {\n                            style: 'unit',\n                            unit: 'celsius',\n                            unitDisplay,\n                            signDisplay,\n                            notation,\n                            compactDisplay,\n                          }).formatToParts(10000)\n                        ).toMatchSnapshot()\n                        expect(\n                          new NumberFormat(locale, {\n                            style: 'unit',\n                            unit: 'gallon',\n                            unitDisplay,\n                            signDisplay,\n                            notation,\n                            compactDisplay,\n                          }).formatToParts(10000)\n                        ).toMatchSnapshot()\n                      })",
            "file": "unit.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "NumberFormat",
            "suites": [
                "NumberFormat"
            ],
            "updatePoint": {
                "line": 113,
                "column": 22
            },
            "line": null,
            "code": "",
            "file": "unit.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": " === ",
            "suites": [
                "value-tonumber"
            ],
            "updatePoint": {
                "line": 18,
                "column": 27
            },
            "line": 18,
            "code": "    it(`${val1} === ${val2}`, function () {\n      expect(nf.formatToParts(val1 as number)).toEqual(\n        nf.formatToParts(val2 as number)\n      )\n    })",
            "file": "value-tonumber.test.ts",
            "skipped": false,
            "dir": "packages/intl-numberformat/tests"
        },
        {
            "name": "default locale",
            "suites": [
                "PluralRules"
            ],
            "updatePoint": {
                "line": 10,
                "column": 20
            },
            "line": 10,
            "code": "  it('default locale', function () {\n    expect(new PluralRules().resolvedOptions()).toEqual({\n      locale: 'en',\n      maximumFractionDigits: 3,\n      minimumFractionDigits: 0,\n      minimumIntegerDigits: 1,\n      pluralCategories: ['one', 'other'],\n      type: 'cardinal',\n    })\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should work for cardinal",
            "suites": [
                "PluralRules"
            ],
            "updatePoint": {
                "line": 20,
                "column": 30
            },
            "line": 20,
            "code": "  it('should work for cardinal', function () {\n    expect(new PluralRules('en').select(0)).toBe('other')\n    expect(new PluralRules('en').select(1)).toBe('one')\n    expect(new PluralRules('en').select(2)).toBe('other')\n    expect(new PluralRules('en').select(-1)).toBe('one')\n    expect(new PluralRules('en').select(-2)).toBe('other')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should deal with en-XX",
            "suites": [
                "PluralRules"
            ],
            "updatePoint": {
                "line": 27,
                "column": 28
            },
            "line": 27,
            "code": "  it('should deal with en-XX', function () {\n    expect(new PluralRules('en-XX').select(0)).toBe('other')\n    expect(new PluralRules('en-XX').select(1)).toBe('one')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should deal with en-US",
            "suites": [
                "PluralRules"
            ],
            "updatePoint": {
                "line": 31,
                "column": 28
            },
            "line": 31,
            "code": "  it('should deal with en-US', function () {\n    expect(new PluralRules('en-US').select(0)).toBe('other')\n    expect(new PluralRules('en-US').select(1)).toBe('one')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should not crash for fr",
            "suites": [
                "PluralRules"
            ],
            "updatePoint": {
                "line": 35,
                "column": 29
            },
            "line": 35,
            "code": "  it('should not crash for fr', function () {\n    expect(new PluralRules('fr').select(1000000)).toBe('many')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should work for ordinal",
            "suites": [
                "PluralRules"
            ],
            "updatePoint": {
                "line": 38,
                "column": 29
            },
            "line": 38,
            "code": "  it('should work for ordinal', function () {\n    expect(new PluralRules('en', {type: 'ordinal'}).select(0)).toBe('other')\n    expect(new PluralRules('en', {type: 'ordinal'}).select(1)).toBe('one')\n    expect(new PluralRules('en', {type: 'ordinal'}).select(2)).toBe('two')\n    expect(new PluralRules('en', {type: 'ordinal'}).select(3)).toBe('few')\n    expect(new PluralRules('en', {type: 'ordinal'}).select(-1)).toBe('one')\n    expect(new PluralRules('en', {type: 'ordinal'}).select(-2)).toBe('two')\n    expect(new PluralRules('en', {type: 'ordinal'}).select(-3)).toBe('few')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should honor minimumFractionDigits",
            "suites": [
                "PluralRules"
            ],
            "updatePoint": {
                "line": 48,
                "column": 42
            },
            "line": 48,
            "code": "    it('should honor minimumFractionDigits', function () {\n      expect(\n        new PluralRules('en', {minimumFractionDigits: 0} as any).select(1)\n      ).toBe('one')\n      expect(\n        new PluralRules('en', {minimumFractionDigits: 2} as any).select(1)\n      ).toBe('other')\n    })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 19,
                "column": 63
            },
            "line": 19,
            "code": "    it('should return correct locales that we only have data for', test)",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 19,
                "column": 63
            },
            "line": null,
            "code": "",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 21,
                "column": 65
            },
            "line": null,
            "code": "",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-pluralrules/tests"
        },
        {
            "name": "should lookup zh-CN",
            "suites": [
                "Intl.RelativeTimeFormat"
            ],
            "updatePoint": {
                "line": 15,
                "column": 25
            },
            "line": 15,
            "code": "  it('should lookup zh-CN', function () {\n    expect(new RelativeTimeFormat('zh-CN').format(-1, 'second')).toBe('1秒钟前')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-relativetimeformat/tests"
        },
        {
            "name": "should lookup zh-TW",
            "suites": [
                "Intl.RelativeTimeFormat"
            ],
            "updatePoint": {
                "line": 18,
                "column": 25
            },
            "line": 18,
            "code": "  it('should lookup zh-TW', function () {\n    expect(new RelativeTimeFormat('zh-TW').format(-1, 'second')).toBe('1 秒前')\n    expect(\n      new RelativeTimeFormat('zh-TW', {\n        style: 'short',\n        numeric: 'auto',\n      }).format(-1, 'seconds')\n    ).toBe('1 秒前')\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-relativetimeformat/tests"
        },
        {
            "name": "should resolve parent correctly",
            "suites": [
                "Intl.RelativeTimeFormat"
            ],
            "updatePoint": {
                "line": 27,
                "column": 37
            },
            "line": 27,
            "code": "  it('should resolve parent correctly', function () {\n    expect(new RelativeTimeFormat('en-AI').format(-1, 'second')).toBe(\n      '1 second ago'\n    )\n  })",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/intl-relativetimeformat/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 21,
                "column": 63
            },
            "line": 21,
            "code": "    it('should return correct locales that we only have data for', test)",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-relativetimeformat/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 21,
                "column": 63
            },
            "line": null,
            "code": "",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-relativetimeformat/tests"
        },
        {
            "name": "should return correct locales that we only have data for",
            "suites": [
                "supportedLocalesOf"
            ],
            "updatePoint": {
                "line": 23,
                "column": 65
            },
            "line": null,
            "code": "",
            "file": "supported-locales-of.test.ts",
            "skipped": false,
            "dir": "packages/intl-relativetimeformat/tests"
        },
        {
            "name": "createIntl",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 16
            },
            "line": 3,
            "code": "test('createIntl', function () {\n  const intl = createIntl({\n    locale: 'en',\n    messages: {\n      foo: 'bar',\n    },\n  })\n  expect(\n    intl.formatMessage({\n      id: 'foo',\n    })\n  ).toBe('bar')\n})",
            "file": "create-intl.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should warn when defaultRichTextElements is used with messages",
            "suites": [],
            "updatePoint": {
                "line": 17,
                "column": 68
            },
            "line": 17,
            "code": "test('should warn when defaultRichTextElements is used with messages', function () {\n  const onWarn = jest.fn()\n  createIntl({\n    locale: 'en',\n    messages: {\n      foo: 'bar',\n    },\n    defaultRichTextElements: {},\n    onWarn,\n  })\n  expect(onWarn).toHaveBeenCalledWith(\n    expect.stringContaining(\n      `defaultRichTextElements\" was specified but \"message\" was not pre-compiled.`\n    )\n  )\n})",
            "file": "create-intl.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should not warn when defaultRichTextElements is not used",
            "suites": [],
            "updatePoint": {
                "line": 34,
                "column": 62
            },
            "line": 34,
            "code": "test('should not warn when defaultRichTextElements is not used', function () {\n  const onWarn = jest.fn()\n  createIntl({\n    locale: 'en',\n    messages: {\n      foo: 'bar',\n    },\n    onWarn,\n  })\n  expect(onWarn).not.toHaveBeenCalled()\n})",
            "file": "create-intl.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should use the default warn handler when none is passed",
            "suites": [],
            "updatePoint": {
                "line": 46,
                "column": 61
            },
            "line": 46,
            "code": "test('should use the default warn handler when none is passed', function () {\n  const warnFn = jest.spyOn(console, 'warn')\n  createIntl({\n    locale: 'en',\n    messages: {\n      foo: 'bar',\n    },\n    defaultRichTextElements: {},\n  })\n  expect(warnFn).toHaveBeenCalledWith(\n    expect.stringContaining(\n      `defaultRichTextElements\" was specified but \"message\" was not pre-compiled.`\n    )\n  )\n})",
            "file": "create-intl.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "records the actual default message",
            "suites": [
                "MissingTranslationError"
            ],
            "updatePoint": {
                "line": 4,
                "column": 40
            },
            "line": 4,
            "code": "  it('records the actual default message', () => {\n    const e = new MissingTranslationError(\n      {defaultMessage: 'some message'},\n      'en'\n    )\n    expect(e.toString()).toMatch(/default message \\(some message\\)/)\n  })",
            "file": "error.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "records the actual default message for MessageFormatElement[]",
            "suites": [
                "MissingTranslationError"
            ],
            "updatePoint": {
                "line": 12,
                "column": 67
            },
            "line": 12,
            "code": "  it('records the actual default message for MessageFormatElement[]', () => {\n    // this works for all `MessageFormatElement` except for `PoundElement`\n    const e = new MissingTranslationError(\n      {defaultMessage: [{type: 0, value: 'some message'}]},\n      'en'\n    )\n    expect(e.toString()).toMatch(/default message \\(some message\\)/)\n  })",
            "file": "error.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "records the actual default message for PoundElement[]",
            "suites": [
                "MissingTranslationError"
            ],
            "updatePoint": {
                "line": 21,
                "column": 59
            },
            "line": 21,
            "code": "  it('records the actual default message for PoundElement[]', () => {\n    const e = new MissingTranslationError({defaultMessage: [{type: 7}]}, 'en')\n    expect(e.toString()).toMatch(/default message \\(\\{\"type\":7\\}\\)/)\n  })",
            "file": "error.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "no value should render today",
            "suites": [
                "format API",
                "formatDate()"
            ],
            "updatePoint": {
                "line": 52,
                "column": 36
            },
            "line": 52,
            "code": "    it('no value should render today', () => {\n      // @ts-ignore\n      expect(formatDate()).toBe(df.format())\n    })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns when a non-finite value is provided",
            "suites": [
                "format API",
                "formatDate()"
            ],
            "updatePoint": {
                "line": 57,
                "column": 64
            },
            "line": 57,
            "code": "    it('falls back and warns when a non-finite value is provided', () => {\n      expect(formatDate(NaN)).toBe('NaN')\n      expect(config.onError as jest.Mock).toHaveBeenCalledTimes(1)\n    })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats falsy finite values",
            "suites": [
                "format API",
                "formatDate()"
            ],
            "updatePoint": {
                "line": 62,
                "column": 35
            },
            "line": 62,
            "code": "    it('formats falsy finite values', () => {\n      // @ts-ignore\n      expect(formatDate(null)).toBe(df.format(null))\n      expect(formatDate(0)).toBe(df.format(0))\n    })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats date instance values",
            "suites": [
                "format API",
                "formatDate()"
            ],
            "updatePoint": {
                "line": 68,
                "column": 36
            },
            "line": 68,
            "code": "    it('formats date instance values', () => {\n      expect(formatDate(new Date(0))).toBe(df.format(new Date(0)))\n    })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats date string values",
            "suites": [
                "format API",
                "formatDate()"
            ],
            "updatePoint": {
                "line": 72,
                "column": 34
            },
            "line": 72,
            "code": "    it('formats date string values', () => {\n      expect(formatDate(new Date(0).toString())).toBe(df.format(0))\n    })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats date ms timestamp values",
            "suites": [
                "format API",
                "formatDate()"
            ],
            "updatePoint": {
                "line": 76,
                "column": 40
            },
            "line": 76,
            "code": "    it('formats date ms timestamp values', () => {\n      const timestamp = Date.now()\n      expect(formatDate(timestamp)).toBe(df.format(timestamp))\n    })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses the time zone specified by the provider",
            "suites": [
                "format API",
                "formatDate()"
            ],
            "updatePoint": {
                "line": 81,
                "column": 52
            },
            "line": 81,
            "code": "    it('uses the time zone specified by the provider', () => {\n      const timestamp = Date.now()\n      config.timeZone = 'Pacific/Wake'\n      // @ts-ignore\n      formatDate = formatDateFn.bind(null, config, getDateTimeFormat)\n      const wakeDf = new Intl.DateTimeFormat(config.locale, {\n        timeZone: 'Pacific/Wake',\n      })\n      expect(formatDate(timestamp)).toBe(wakeDf.format(timestamp))\n      config.timeZone = 'Asia/Shanghai'\n\n      // @ts-ignore\n      formatDate = formatDateFn.bind(null, config, getDateTimeFormat)\n      const shanghaiDf = new Intl.DateTimeFormat(config.locale, {\n        timeZone: 'Asia/Shanghai',\n      })\n      expect(formatDate(timestamp)).toBe(shanghaiDf.format(timestamp))\n    })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts empty options",
            "suites": [
                "format API",
                "formatDate()",
                "options"
            ],
            "updatePoint": {
                "line": 101,
                "column": 31
            },
            "line": 101,
            "code": "      it('accepts empty options', () => {\n        expect(formatDate(0, {})).toBe(df.format(0))\n      })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts valid Intl.DateTimeFormat options",
            "suites": [
                "format API",
                "formatDate()",
                "options"
            ],
            "updatePoint": {
                "line": 105,
                "column": 51
            },
            "line": 105,
            "code": "      it('accepts valid Intl.DateTimeFormat options', () => {\n        expect(() => formatDate(0, {year: 'numeric'})).not.toThrow()\n      })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns on invalid Intl.DateTimeFormat options",
            "suites": [
                "format API",
                "formatDate()",
                "options"
            ],
            "updatePoint": {
                "line": 109,
                "column": 69
            },
            "line": 109,
            "code": "      it('falls back and warns on invalid Intl.DateTimeFormat options', () => {\n        // @ts-expect-error invalid year just for testing\n        expect(formatDate(0, {year: 'invalid'})).toBe('0')\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses configured named formats",
            "suites": [
                "format API",
                "formatDate()",
                "options"
            ],
            "updatePoint": {
                "line": 117,
                "column": 39
            },
            "line": 117,
            "code": "      it('uses configured named formats', () => {\n        const date = new Date()\n        const format = 'year-only'\n\n        const {locale, formats} = config\n        df = new Intl.DateTimeFormat(locale, formats!.date![format])\n\n        expect(formatDate(date, {format})).toBe(df.format(date))\n      })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses named formats as defaults",
            "suites": [
                "format API",
                "formatDate()",
                "options"
            ],
            "updatePoint": {
                "line": 127,
                "column": 40
            },
            "line": 127,
            "code": "      it('uses named formats as defaults', () => {\n        const date = new Date()\n        const opts: Intl.DateTimeFormatOptions = {month: 'numeric'}\n        const format = 'year-only'\n\n        const {locale, formats} = config\n        df = new Intl.DateTimeFormat(locale, {\n          ...opts,\n          ...formats!.date![format],\n        })\n\n        expect(formatDate(date, {...opts, format})).toBe(df.format(date))\n      })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "handles missing named formats and warns",
            "suites": [
                "format API",
                "formatDate()",
                "options"
            ],
            "updatePoint": {
                "line": 141,
                "column": 49
            },
            "line": 141,
            "code": "      it('handles missing named formats and warns', () => {\n        const date = new Date()\n        const format = 'missing'\n\n        df = new Intl.DateTimeFormat(config.locale)\n\n        expect(formatDate(date, {format})).toBe(df.format(date))\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses time zone specified in options over the one passed through by the provider",
            "suites": [
                "format API",
                "formatDate()",
                "options"
            ],
            "updatePoint": {
                "line": 153,
                "column": 89
            },
            "line": 153,
            "code": "      it('uses time zone specified in options over the one passed through by the provider', () => {\n        const timestamp = Date.now()\n        config.timeZone = 'Pacific/Wake'\n        // @ts-ignore\n        formatDate = formatDateFn.bind(null, config, getDateTimeFormat)\n        const shanghaiDf = new Intl.DateTimeFormat(config.locale, {\n          timeZone: 'Asia/Shanghai',\n        })\n        expect(formatDate(timestamp, {timeZone: 'Asia/Shanghai'})).toBe(\n          shanghaiDf.format(timestamp)\n        )\n      })",
            "file": "formatDate.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should return locale display name as string",
            "suites": [
                "format API",
                "formatDisplayNames()"
            ],
            "updatePoint": {
                "line": 46,
                "column": 51
            },
            "line": 46,
            "code": "    it('should return locale display name as string', function () {\n      expect(formatDisplayName('zh-Hans-SG', {type: 'language'})).toBe(\n        'Simplified Chinese (Singapore)'\n      )\n    })",
            "file": "formatDisplayNames.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "will return undefined if Intl.DisplayName would return undefined",
            "suites": [
                "format API",
                "formatDisplayNames()"
            ],
            "updatePoint": {
                "line": 52,
                "column": 72
            },
            "line": 52,
            "code": "    it('will return undefined if Intl.DisplayName would return undefined', function () {\n      const displayName = new (Intl as any).DisplayNames('en', {\n        type: 'language',\n        fallback: 'none',\n      })\n      expect(displayName.of('xx-XX')).toBeUndefined()\n      expect(\n        formatDisplayName('xx-XX', {type: 'language', fallback: 'none'})\n      ).toBeUndefined()\n    })",
            "file": "formatDisplayNames.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should handle regular element",
            "suites": [
                "format API",
                "formatList()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 37
            },
            "line": 40,
            "code": "    it('should handle regular element', function () {\n      expect(formatList(['me', 'myself', 'I'])).toBe('me, myself, and I')\n    })",
            "file": "formatList.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should handle regular element",
            "suites": [
                "format API",
                "formatList()"
            ],
            "updatePoint": {
                "line": 43,
                "column": 37
            },
            "line": 43,
            "code": "    it('should handle regular element', function () {\n      expect(formatList(['me', {foo: 'myself'}, 'I'])).toEqual([\n        'me, ',\n        {foo: 'myself'},\n        ', and I',\n      ])\n    })",
            "file": "formatList.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should hot path message without values",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 114,
                "column": 46
            },
            "line": 114,
            "code": "    it('should hot path message without values', function () {\n      ;(state.getMessageFormat as jest.Mock).mockClear()\n      expect(formatMessage({id: 'no_args'})).toBe('Hello, World!')\n      expect(state.getMessageFormat).not.toHaveBeenCalled()\n      expect(formatMessage({id: 'with_arg'}, {name: 'foo'})).toBe('Hello, foo!')\n      expect(state.getMessageFormat).toHaveBeenCalled()\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should hot path message without values",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 121,
                "column": 46
            },
            "line": 121,
            "code": "    it('should hot path message without values', function () {\n      ;(state.getMessageFormat as jest.Mock).mockClear()\n      const err = jest.spyOn(console, 'error')\n      expect(formatMessage({id: 'no_args'})).toBe('Hello, World!')\n      expect(err).not.toHaveBeenCalled()\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should not crash of messages does not have Object.prototype",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 127,
                "column": 67
            },
            "line": 127,
            "code": "    it('should not crash of messages does not have Object.prototype', function () {\n      const messages = Object.create(null)\n      messages!.no_args = 'Hello'\n      // @ts-ignore\n      formatMessage = baseFormatMessage.bind(\n        null,\n        {\n          ...config,\n          messages,\n        },\n        state\n      )\n      expect(() => formatMessage({id: 'no_args'})).not.toThrow()\n      expect(formatMessage({id: 'no_args'})).toBe('Hello')\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should render escaped msg  properly in production",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 143,
                "column": 65
            },
            "line": 143,
            "code": "      it(`should render escaped msg ${msg} properly in production`, () => {\n        process.env.NODE_ENV = 'production'\n\n        const descriptor = {\n          id: 'hello',\n          defaultMessage: msg,\n        }\n\n        const mf = new IntlMessageFormat(msg, 'en')\n\n        expect(formatMessage(descriptor)).toBe(mf.format())\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "throws when no Message Descriptor is provided",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 157,
                "column": 53
            },
            "line": 157,
            "code": "    it('throws when no Message Descriptor is provided', () => {\n      // @ts-ignore\n      expect(() => formatMessage()).toThrow(\n        '[@formatjs/intl] An `id` must be provided to format a message.'\n      )\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "throws when Message Descriptor `id` is missing or falsy",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 164,
                "column": 63
            },
            "line": 164,
            "code": "    it('throws when Message Descriptor `id` is missing or falsy', () => {\n      expect(() => formatMessage({})).toThrow(\n        '[@formatjs/intl] An `id` must be provided to format a message.'\n      )\n      ;[undefined, null, false, 0, ''].forEach(id => {\n        // @ts-ignore\n        expect(() => formatMessage({id})).toThrow(\n          '[@formatjs/intl] An `id` must be provided to format a message.'\n        )\n      })\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats basic messages",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 176,
                "column": 30
            },
            "line": 176,
            "code": "    it('formats basic messages', () => {\n      const {locale, messages} = config\n      const mf = new IntlMessageFormat(messages!.no_args, locale)\n\n      expect(formatMessage({id: 'no_args'})).toBe(mf.format())\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats basic message with preparsed defaultMessage",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 183,
                "column": 59
            },
            "line": 183,
            "code": "    it('formats basic message with preparsed defaultMessage', () => {\n      const {locale, messages} = config\n      const mf = new IntlMessageFormat(messages!.ast_var, locale)\n\n      expect(\n        formatMessage(\n          {id: 'foo', defaultMessage: messages!.ast_var},\n          {\n            name: 'hey',\n          }\n        )\n      ).toBe(\n        mf.format({\n          name: 'hey',\n        })\n      )\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats message with ID as a method in Object.prototype, GH issue #1885",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 201,
                "column": 79
            },
            "line": 201,
            "code": "    it('formats message with ID as a method in Object.prototype, GH issue #1885', () => {\n      expect(formatMessage({id: 'toString'})).toBe('toString')\n      expect(formatMessage({id: '__proto__'})).toBe('__proto__')\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats legacy HTML messages",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 206,
                "column": 36
            },
            "line": 206,
            "code": "    it('formats legacy HTML messages', () => {\n      const {locale, messages} = config\n      const mf = new IntlMessageFormat(messages!.richText, locale)\n      const values = {\n        b: (s: string) => `<foobar>${s}</foobar>`,\n      }\n      expect(formatMessage({id: 'richText'}, values)).toBe(\n        // @ts-ignore\n        mf.format<string>(values)\n      )\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats basic AST messages",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 218,
                "column": 34
            },
            "line": 218,
            "code": "    it('formats basic AST messages', () => {\n      const {locale, messages} = config\n      const mf = new IntlMessageFormat(messages!.ast_simple, locale)\n\n      expect(formatMessage({id: 'ast_simple'})).toBe(mf.format())\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats basic AST messages in prod",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 225,
                "column": 42
            },
            "line": 225,
            "code": "    it('formats basic AST messages in prod', () => {\n      const {locale, messages} = config\n      const mf = new IntlMessageFormat(messages!.ast_simple, locale)\n      process.env.NODE_ENV = 'production'\n      expect(formatMessage({id: 'ast_simple'})).toBe(mf.format())\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats messages with placeholders",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 232,
                "column": 42
            },
            "line": 232,
            "code": "    it('formats messages with placeholders', () => {\n      const {locale, messages} = config\n      const mf = new IntlMessageFormat(messages!.with_arg, locale)\n      const values = {name: 'Eric'}\n\n      expect(formatMessage({id: 'with_arg'}, values)).toBe(mf.format(values))\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats AST message with placeholders",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 240,
                "column": 45
            },
            "line": 240,
            "code": "    it('formats AST message with placeholders', () => {\n      const {locale, messages} = config\n      const mf = new IntlMessageFormat(messages!.ast_var, locale)\n      const values = {name: 'Eric'}\n\n      expect(formatMessage({id: 'ast_var'}, values)).toBe(mf.format(values))\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats messages with named formats",
            "suites": [
                "format API",
                "formatMessage()"
            ],
            "updatePoint": {
                "line": 248,
                "column": 43
            },
            "line": 248,
            "code": "    it('formats messages with named formats', () => {\n      const {locale, messages, formats} = config\n      const mf = new IntlMessageFormat(\n        messages!.with_named_format,\n        locale,\n        formats\n      )\n      const values = {now: Date.now()}\n\n      expect(formatMessage({id: 'with_named_format'}, values)).toBe(\n        mf.format(values)\n      )\n    })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats message with missing named formats",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 263,
                "column": 52
            },
            "line": 263,
            "code": "      it('formats message with missing named formats', () => {\n        const {locale, messages} = config\n        const mf = new IntlMessageFormat(messages!.missing_named_format, locale)\n        const values = {now: Date.now()}\n\n        expect(formatMessage({id: 'missing_named_format'}, values)).toBe(\n          mf.format(values)\n        )\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats `defaultMessage` when message is missing",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 273,
                "column": 58
            },
            "line": 273,
            "code": "      it('formats `defaultMessage` when message is missing', () => {\n        const {locale, messages} = config\n        const mf = new IntlMessageFormat(messages!.with_arg, locale)\n        const id = 'missing'\n        const values = {name: 'Eric'}\n\n        expect(\n          formatMessage(\n            {\n              id: id,\n              defaultMessage: messages!.with_arg,\n            },\n            values\n          )\n        ).toBe(mf.format(values))\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "warns when `message` is missing and locales are different",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 290,
                "column": 67
            },
            "line": 290,
            "code": "      it('warns when `message` is missing and locales are different', () => {\n        config.locale = 'fr'\n\n        const {locale, messages, defaultLocale} = config\n        const mf = new IntlMessageFormat(messages!.with_arg, locale)\n        const id = 'missing'\n        const values = {name: 'Eric'}\n\n        expect(locale).not.toEqual(defaultLocale)\n\n        expect(\n          formatMessage(\n            {\n              id,\n              defaultMessage: messages!.with_arg,\n            },\n            values\n          )\n        ).toBe(mf.format(values))\n\n        expect((config.onError as jest.Mock).mock.calls.map(c => c[0].code))\n          .toMatchInlineSnapshot(`\n          Array [\n            \"MISSING_TRANSLATION\",\n          ]\n        `)\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "warns when `message` and `defaultMessage` are missing",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 318,
                "column": 63
            },
            "line": 318,
            "code": "      it('warns when `message` and `defaultMessage` are missing', () => {\n        const {messages} = config\n        const id = 'missing'\n        const values = {name: 'Eric'}\n\n        expect(\n          formatMessage(\n            {\n              id: id,\n              defaultMessage: messages!.missing,\n            },\n            values\n          )\n        ).toBe(id)\n\n        expect((config.onError as jest.Mock).mock.calls.map(c => c[0].code))\n          .toMatchInlineSnapshot(`\n          Array [\n            \"MISSING_TRANSLATION\",\n          ]\n        `)\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats `defaultMessage` when message has a syntax error",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 341,
                "column": 66
            },
            "line": 341,
            "code": "      it('formats `defaultMessage` when message has a syntax error', () => {\n        const {locale, messages} = config\n        const mf = new IntlMessageFormat(messages!.with_arg, locale)\n        const id = 'invalid'\n        const values = {name: 'Eric'}\n\n        expect(\n          formatMessage(\n            {\n              id: id,\n              defaultMessage: messages!.with_arg,\n            },\n            values\n          )\n        ).toBe(mf.format(values))\n\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats `defaultMessage` when message has missing values",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 362,
                "column": 66
            },
            "line": 362,
            "code": "      it('formats `defaultMessage` when message has missing values', () => {\n        const {locale, messages} = config\n        const mf = new IntlMessageFormat(messages!.with_arg, locale)\n        const id = 'missing_value'\n        const values = {name: 'Eric'}\n\n        expect(\n          formatMessage(\n            {\n              id: id,\n              defaultMessage: messages!.with_arg,\n            },\n            values\n          )\n        ).toBe(mf.format(values))\n\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns message source when message and `defaultMessage` have formatting errors",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 383,
                "column": 89
            },
            "line": 383,
            "code": "      it('returns message source when message and `defaultMessage` have formatting errors', () => {\n        const {messages} = config\n        const id = 'missing_value'\n\n        expect(\n          formatMessage(\n            {\n              id,\n              defaultMessage: messages!.invalid,\n            },\n            {\n              foo: 1,\n            }\n          )\n        ).toBe(messages![id])\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns message source when formatting error and missing `defaultMessage`",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 403,
                "column": 83
            },
            "line": 403,
            "code": "      it('returns message source when formatting error and missing `defaultMessage`', () => {\n        const {messages} = config\n        const id = 'missing_value'\n\n        expect(\n          formatMessage(\n            {\n              id,\n              defaultMessage: messages!.missing,\n            },\n            {foo: 1}\n          )\n        ).toBe(messages![id])\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns `defaultMessage` source when formatting errors and missing message",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 421,
                "column": 84
            },
            "line": 421,
            "code": "      it('returns `defaultMessage` source when formatting errors and missing message', () => {\n        config.locale = 'en-US'\n\n        const {messages} = config\n        const id = 'missing'\n\n        expect(\n          formatMessage({\n            id,\n            defaultMessage: messages!.invalid,\n          })\n        ).toBe(messages!.invalid)\n\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns message `id` when message and `defaultMessage` are missing",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 439,
                "column": 76
            },
            "line": 439,
            "code": "      it('returns message `id` when message and `defaultMessage` are missing', () => {\n        const id = 'missing'\n\n        expect(formatMessage({id})).toBe(id)\n\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns an empty string when `fallbackOnEmptyString` is false",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 449,
                "column": 71
            },
            "line": 449,
            "code": "      it('returns an empty string when `fallbackOnEmptyString` is false', () => {\n        config.fallbackOnEmptyString = false\n        const id = 'empty'\n\n        expect(formatMessage({id})).toBe('')\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "does not return an empty string when `fallbackOnEmptyString` is true",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 456,
                "column": 78
            },
            "line": 456,
            "code": "      it('does not return an empty string when `fallbackOnEmptyString` is true', () => {\n        config.fallbackOnEmptyString = true\n        const id = 'empty'\n\n        expect(formatMessage({id})).toBe(id)\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns message `id` when message and `defaultMessage` are empty",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 463,
                "column": 74
            },
            "line": 463,
            "code": "      it('returns message `id` when message and `defaultMessage` are empty', () => {\n        const {messages} = config\n        const id = 'empty'\n\n        expect(\n          formatMessage({\n            id: id,\n            defaultMessage: messages![id],\n          })\n        ).toBe(id)\n\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "allow passing Intl.MessageFormat opts in",
            "suites": [
                "format API",
                "formatMessage()",
                "fallbacks"
            ],
            "updatePoint": {
                "line": 479,
                "column": 50
            },
            "line": 479,
            "code": "      it('allow passing Intl.MessageFormat opts in', function () {\n        const {locale, messages, formats} = config\n        const opts = {\n          ignoreTag: true,\n        }\n        const mf = new IntlMessageFormat(\n          messages!.richText,\n          locale,\n          formats,\n          opts\n        )\n\n        expect(formatMessage({id: 'richText'}, opts)).toBe(mf.format())\n      })",
            "file": "formatMessage.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns \"NaN\" when no value is provided",
            "suites": [
                "format API",
                "formatNumber()"
            ],
            "updatePoint": {
                "line": 77,
                "column": 47
            },
            "line": 77,
            "code": "    it('returns \"NaN\" when no value is provided', () => {\n      expect(nf.format()).toBe('NaN')\n      expect(formatNumber()).toBe('NaN')\n    })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "returns \"NaN\" when a non-number value is provided",
            "suites": [
                "format API",
                "formatNumber()"
            ],
            "updatePoint": {
                "line": 82,
                "column": 57
            },
            "line": 82,
            "code": "    it('returns \"NaN\" when a non-number value is provided', () => {\n      expect(nf.format(NaN)).toBe('NaN')\n      expect(formatNumber(NaN)).toBe('NaN')\n    })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats falsy values",
            "suites": [
                "format API",
                "formatNumber()"
            ],
            "updatePoint": {
                "line": 87,
                "column": 28
            },
            "line": 87,
            "code": "    it('formats falsy values', () => {\n      expect(formatNumber(false)).toBe(nf.format(false))\n      expect(formatNumber(null)).toBe(nf.format(null))\n      expect(formatNumber('')).toBe(nf.format(''))\n      expect(formatNumber(0)).toBe(nf.format(0))\n    })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats number values",
            "suites": [
                "format API",
                "formatNumber()"
            ],
            "updatePoint": {
                "line": 94,
                "column": 29
            },
            "line": 94,
            "code": "    it('formats number values', () => {\n      expect(formatNumber(1000)).toBe(nf.format(1000))\n      expect(formatNumber(1.1)).toBe(nf.format(1.1))\n    })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats string values parsed as numbers",
            "suites": [
                "format API",
                "formatNumber()"
            ],
            "updatePoint": {
                "line": 99,
                "column": 47
            },
            "line": 99,
            "code": "    it('formats string values parsed as numbers', () => {\n      expect(Number('1000')).toBe(1000)\n      expect(formatNumber('1000')).toBe(nf.format('1000'))\n      expect(Number('1.10')).toBe(1.1)\n      expect(formatNumber('1.10')).toBe(nf.format('1.10'))\n    })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts empty options",
            "suites": [
                "format API",
                "formatNumber()",
                "options"
            ],
            "updatePoint": {
                "line": 107,
                "column": 31
            },
            "line": 107,
            "code": "      it('accepts empty options', () => {\n        expect(formatNumber(1000, {})).toBe(nf.format(1000))\n      })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts valid Intl.NumberFormat options",
            "suites": [
                "format API",
                "formatNumber()",
                "options"
            ],
            "updatePoint": {
                "line": 111,
                "column": 49
            },
            "line": 111,
            "code": "      it('accepts valid Intl.NumberFormat options', () => {\n        expect(() => formatNumber(0, {style: 'percent'})).not.toThrow()\n      })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns on invalid Intl.NumberFormat options",
            "suites": [
                "format API",
                "formatNumber()",
                "options"
            ],
            "updatePoint": {
                "line": 115,
                "column": 67
            },
            "line": 115,
            "code": "      it('falls back and warns on invalid Intl.NumberFormat options', () => {\n        expect(formatNumber(0, {style: 'invalid'})).toBe(String(0))\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses configured named formats",
            "suites": [
                "format API",
                "formatNumber()",
                "options"
            ],
            "updatePoint": {
                "line": 122,
                "column": 39
            },
            "line": 122,
            "code": "      it('uses configured named formats', () => {\n        const num = 0.505\n        const format = 'percent'\n\n        const {locale, formats} = config\n        nf = new Intl.NumberFormat(\n          locale,\n          formats!.number![format] as Intl.NumberFormatOptions\n        )\n\n        expect(formatNumber(num, {format})).toBe(nf.format(num))\n      })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses named formats as defaults",
            "suites": [
                "format API",
                "formatNumber()",
                "options"
            ],
            "updatePoint": {
                "line": 135,
                "column": 40
            },
            "line": 135,
            "code": "      it('uses named formats as defaults', () => {\n        const num = 0.500059\n        const opts = {maximumFractionDigits: 3}\n        const format = 'percent'\n\n        const {locale, formats} = config\n        nf = new Intl.NumberFormat(locale, {\n          ...opts,\n          ...formats!.number![format],\n        } as Intl.NumberFormatOptions)\n\n        expect(formatNumber(num, {...opts, format})).toBe(nf.format(num))\n      })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "handles missing named formats and warns",
            "suites": [
                "format API",
                "formatNumber()",
                "options"
            ],
            "updatePoint": {
                "line": 149,
                "column": 49
            },
            "line": 149,
            "code": "      it('handles missing named formats and warns', () => {\n        const num = 1000\n        const format = 'missing'\n\n        nf = new Intl.NumberFormat(config.locale)\n\n        expect(formatNumber(num, {format})).toBe(nf.format(num))\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses provided numberingSystem",
            "suites": [
                "format API",
                "formatNumber()",
                "options"
            ],
            "updatePoint": {
                "line": 161,
                "column": 39
            },
            "line": 161,
            "code": "      it('uses provided numberingSystem', () => {\n        const num = 0.1\n        const numberingSystem = 'arab'\n        const style = 'percent'\n        // @ts-ignore\n        nf = new Intl.NumberFormat(config.locale, {numberingSystem, style})\n\n        expect(formatNumber(num, {numberingSystem, style})).toBe(nf.format(num))\n      })",
            "file": "formatNumber.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should warn for invalid opt",
            "suites": [
                "format API",
                "formatPlural()"
            ],
            "updatePoint": {
                "line": 44,
                "column": 35
            },
            "line": 44,
            "code": "    it('should warn for invalid opt', function () {\n      // @ts-ignore\n      expect(formatPlural(0, {type: 'invalid'})).toBe('other')\n      expect(config.onError as jest.Mock).toHaveBeenCalledTimes(1)\n    })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats falsy values",
            "suites": [
                "format API",
                "formatPlural()"
            ],
            "updatePoint": {
                "line": 50,
                "column": 28
            },
            "line": 50,
            "code": "    it('formats falsy values', () => {\n      // @ts-ignore\n      expect(formatPlural(undefined)).toBe(pf.select(undefined))\n\n      // @ts-ignore\n      expect(formatPlural(false)).toBe(pf.select(false))\n\n      // @ts-ignore\n      expect(formatPlural(null)).toBe(pf.select(null))\n\n      // @ts-ignore\n      expect(formatPlural(NaN)).toBe(pf.select(NaN))\n\n      // @ts-ignore\n      expect(formatPlural('')).toBe(pf.select(''))\n      expect(formatPlural(0)).toBe(pf.select(0))\n    })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats integer values",
            "suites": [
                "format API",
                "formatPlural()"
            ],
            "updatePoint": {
                "line": 68,
                "column": 30
            },
            "line": 68,
            "code": "    it('formats integer values', () => {\n      expect(formatPlural(0)).toBe(pf.select(0))\n      expect(formatPlural(1)).toBe(pf.select(1))\n      expect(formatPlural(2)).toBe(pf.select(2))\n    })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats decimal values",
            "suites": [
                "format API",
                "formatPlural()"
            ],
            "updatePoint": {
                "line": 74,
                "column": 30
            },
            "line": 74,
            "code": "    it('formats decimal values', () => {\n      expect(formatPlural(0.1)).toBe(pf.select(0.1))\n      expect(formatPlural(1.0)).toBe(pf.select(1.0))\n      expect(formatPlural(1.1)).toBe(pf.select(1.1))\n    })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats string values parsed as numbers",
            "suites": [
                "format API",
                "formatPlural()"
            ],
            "updatePoint": {
                "line": 80,
                "column": 47
            },
            "line": 80,
            "code": "    it('formats string values parsed as numbers', () => {\n      expect(Number('0')).toBe(0)\n\n      // @ts-ignore\n      expect(formatPlural('0')).toBe(pf.select('0'))\n      expect(Number('1')).toBe(1)\n\n      // @ts-ignore\n      expect(formatPlural('1')).toBe(pf.select('1'))\n\n      expect(Number('0.1')).toBe(0.1)\n\n      // @ts-ignore\n      expect(formatPlural('0.1')).toBe(pf.select('0.1'))\n      expect(Number('1.0')).toBe(1.0)\n\n      // @ts-ignore\n      expect(formatPlural('1.0')).toBe(pf.select('1.0'))\n    })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts empty options",
            "suites": [
                "format API",
                "formatPlural()",
                "options"
            ],
            "updatePoint": {
                "line": 101,
                "column": 31
            },
            "line": 101,
            "code": "      it('accepts empty options', () => {\n        expect(formatPlural(0, {})).toBe(pf.select(0))\n      })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts valid IntlPluralFormat options",
            "suites": [
                "format API",
                "formatPlural()",
                "options"
            ],
            "updatePoint": {
                "line": 105,
                "column": 48
            },
            "line": 105,
            "code": "      it('accepts valid IntlPluralFormat options', () => {\n        expect(() => formatPlural(22, {type: 'ordinal'})).not.toThrow()\n      })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats using ordinal plural rules",
            "suites": [
                "format API",
                "formatPlural()",
                "options",
                "ordinals"
            ],
            "updatePoint": {
                "line": 110,
                "column": 46
            },
            "line": 110,
            "code": "        it('formats using ordinal plural rules', () => {\n          const opts = {type: 'ordinal'} as Intl.PluralRulesOptions\n          pf = new Intl.PluralRules(config.locale, opts)\n\n          expect(formatPlural(22, opts)).toBe(pf.select(22))\n        })",
            "file": "formatPlural.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns when no value is provided",
            "suites": [
                "format API",
                "formatRelativeTime()"
            ],
            "updatePoint": {
                "line": 54,
                "column": 54
            },
            "line": 54,
            "code": "    it('falls back and warns when no value is provided', () => {\n      // @ts-ignore\n      expect(formatRelativeTime()).toBe('undefined')\n      expect(\n        (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n      ).toMatchSnapshot()\n    })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns when a non-finite value is provided",
            "suites": [
                "format API",
                "formatRelativeTime()"
            ],
            "updatePoint": {
                "line": 62,
                "column": 64
            },
            "line": 62,
            "code": "    it('falls back and warns when a non-finite value is provided', () => {\n      expect(formatRelativeTime(NaN)).toBe('NaN')\n      expect(config.onError as jest.Mock).toHaveBeenCalledTimes(1)\n    })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats falsy finite values",
            "suites": [
                "format API",
                "formatRelativeTime()"
            ],
            "updatePoint": {
                "line": 67,
                "column": 35
            },
            "line": 67,
            "code": "    it('formats falsy finite values', () => {\n      // @ts-ignore\n      expect(formatRelativeTime(false)).toBe('in 0 seconds')\n\n      // @ts-ignore\n      expect(formatRelativeTime(null)).toBe('in 0 seconds')\n      expect(formatRelativeTime(0)).toBe(rf.format(0, 'second'))\n    })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats with short format",
            "suites": [
                "format API",
                "formatRelativeTime()"
            ],
            "updatePoint": {
                "line": 76,
                "column": 33
            },
            "line": 76,
            "code": "    it('formats with short format', () => {\n      expect(formatRelativeTime(-59, 'second', {style: 'short'})).toBe(\n        '59 sec. ago'\n      )\n    })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts empty options",
            "suites": [
                "format API",
                "formatRelativeTime()",
                "options"
            ],
            "updatePoint": {
                "line": 83,
                "column": 31
            },
            "line": 83,
            "code": "      it('accepts empty options', () => {\n        expect(formatRelativeTime(0, 'second', {})).toBe(rf.format(0, 'second'))\n      })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts valid IntlRelativeFormat options",
            "suites": [
                "format API",
                "formatRelativeTime()",
                "options"
            ],
            "updatePoint": {
                "line": 87,
                "column": 50
            },
            "line": 87,
            "code": "      it('accepts valid IntlRelativeFormat options', () => {\n        expect(() =>\n          formatRelativeTime(0, 'second', {numeric: 'auto'})\n        ).not.toThrow()\n        expect(() =>\n          formatRelativeTime(0, 'second', {style: 'short'})\n        ).not.toThrow()\n      })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns on invalid IntlRelativeFormat options",
            "suites": [
                "format API",
                "formatRelativeTime()",
                "options"
            ],
            "updatePoint": {
                "line": 96,
                "column": 68
            },
            "line": 96,
            "code": "      it('falls back and warns on invalid IntlRelativeFormat options', () => {\n        // @ts-ignore\n        expect(formatRelativeTime(0, 'invalid')).toBe('0')\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses configured named formats",
            "suites": [
                "format API",
                "formatRelativeTime()",
                "options"
            ],
            "updatePoint": {
                "line": 104,
                "column": 39
            },
            "line": 104,
            "code": "      it('uses configured named formats', () => {\n        const format = 'seconds'\n\n        const {locale, formats} = config\n\n        rf = new Intl.RelativeTimeFormat(locale, formats!.relative![format])\n\n        expect(formatRelativeTime(-120, 'second', {format})).toBe(\n          rf.format(-120, 'second', {style: 'narrow'})\n        )\n      })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses named formats as defaults",
            "suites": [
                "format API",
                "formatRelativeTime()",
                "options"
            ],
            "updatePoint": {
                "line": 116,
                "column": 40
            },
            "line": 116,
            "code": "      it('uses named formats as defaults', () => {\n        const opts = {numeric: 'auto' as const}\n        const format = 'seconds'\n\n        const {locale, formats} = config\n        rf = new Intl.RelativeTimeFormat(locale, {\n          ...opts,\n          ...formats!.relative![format],\n        })\n\n        expect(formatRelativeTime(0, 'minute', {...opts, format})).toBe(\n          rf.format(0, 'minute', {numeric: 'auto'})\n        )\n      })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "handles missing named formats and warns",
            "suites": [
                "format API",
                "formatRelativeTime()",
                "options"
            ],
            "updatePoint": {
                "line": 131,
                "column": 49
            },
            "line": 131,
            "code": "      it('handles missing named formats and warns', () => {\n        const format = 'missing'\n\n        rf = new Intl.RelativeTimeFormat(config.locale, undefined)\n\n        expect(formatRelativeTime(-1, 'second', {format})).toBe(\n          rf.format(-1, 'second')\n        )\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatRelativeTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "render now if no value is provided",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 58,
                "column": 42
            },
            "line": 58,
            "code": "    it('render now if no value is provided', () => {\n      // @ts-ignore\n      expect(formatTime()).toBe(df.format())\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should not inject additional hour/minute when dateStyle are used",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 63,
                "column": 72
            },
            "line": 63,
            "code": "    it('should not inject additional hour/minute when dateStyle are used', function () {\n      expect(config.onError).not.toHaveBeenCalled()\n      formatTimeFn(config as any, getDateTimeFormat, new Date(), {\n        dateStyle: 'short',\n      })\n\n      expect(config.onError).not.toHaveBeenCalled()\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should not inject additional hour/minute when timeStyle are used",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 72,
                "column": 72
            },
            "line": 72,
            "code": "    it('should not inject additional hour/minute when timeStyle are used', function () {\n      expect(config.onError).not.toHaveBeenCalled()\n      formatTimeFn(config as any, getDateTimeFormat, new Date(), {\n        timeStyle: 'short',\n      })\n\n      expect(config.onError).not.toHaveBeenCalled()\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns when a non-finite value is provided",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 81,
                "column": 64
            },
            "line": 81,
            "code": "    it('falls back and warns when a non-finite value is provided', () => {\n      expect(formatTime(NaN)).toBe('NaN')\n      // @ts-ignore\n      expect(formatTime('')).toBe(df.format(''))\n      expect(config.onError as jest.Mock).toHaveBeenCalledTimes(1)\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats falsy finite values",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 88,
                "column": 35
            },
            "line": 88,
            "code": "    it('formats falsy finite values', () => {\n      // @ts-ignore\n      expect(formatTime(false)).toBe(df.format(false))\n      // @ts-ignore\n      expect(formatTime(null)).toBe(df.format(null))\n      expect(formatTime(0)).toBe(df.format(0))\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats date instance values",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 96,
                "column": 36
            },
            "line": 96,
            "code": "    it('formats date instance values', () => {\n      expect(formatTime(new Date(0))).toBe(df.format(new Date(0)))\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats date string values",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 100,
                "column": 34
            },
            "line": 100,
            "code": "    it('formats date string values', () => {\n      expect(formatTime(new Date(0).toString())).toBe(df.format(0))\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "formats date ms timestamp values",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 104,
                "column": 40
            },
            "line": 104,
            "code": "    it('formats date ms timestamp values', () => {\n      const timestamp = Date.now()\n      expect(formatTime(timestamp)).toBe(df.format(timestamp))\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses the time zone specified by the provider",
            "suites": [
                "format API",
                "formatTime()"
            ],
            "updatePoint": {
                "line": 109,
                "column": 52
            },
            "line": 109,
            "code": "    it('uses the time zone specified by the provider', () => {\n      const timestamp = Date.now()\n      config.timeZone = 'Africa/Johannesburg'\n      // @ts-ignore\n      formatTime = formatTimeFn.bind(null, config, getDateTimeFormat)\n      const johannesburgDf = new Intl.DateTimeFormat(config.locale, {\n        hour: 'numeric',\n        minute: 'numeric',\n        timeZone: 'Africa/Johannesburg',\n      })\n      expect(formatTime(timestamp)).toBe(johannesburgDf.format(timestamp))\n      config.timeZone = 'America/Chicago'\n      // @ts-ignore\n      formatTime = formatTimeFn.bind(null, config, getDateTimeFormat)\n      const chicagoDf = new Intl.DateTimeFormat(config.locale, {\n        hour: 'numeric',\n        minute: 'numeric',\n        timeZone: 'America/Chicago',\n      })\n      expect(formatTime(timestamp)).toBe(chicagoDf.format(timestamp))\n    })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts empty options",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 132,
                "column": 31
            },
            "line": 132,
            "code": "      it('accepts empty options', () => {\n        expect(formatTime(0, {})).toBe(df.format(0))\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "accepts valid Intl.DateTimeFormat options",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 136,
                "column": 51
            },
            "line": 136,
            "code": "      it('accepts valid Intl.DateTimeFormat options', () => {\n        expect(() => formatTime(0, {hour: '2-digit'})).not.toThrow()\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "falls back and warns on invalid Intl.DateTimeFormat options",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 140,
                "column": 69
            },
            "line": 140,
            "code": "      it('falls back and warns on invalid Intl.DateTimeFormat options', () => {\n        // @ts-expect-error just for test\n        expect(formatTime(0, {hour: 'invalid'})).toBe('0')\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses configured named formats",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 148,
                "column": 39
            },
            "line": 148,
            "code": "      it('uses configured named formats', () => {\n        const date = new Date()\n        const format = 'hour-only'\n\n        const {locale, formats} = config\n        df = new Intl.DateTimeFormat(locale, formats!.time![format])\n\n        expect(formatTime(date, {format})).toBe(df.format(date))\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses named formats as defaults",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 158,
                "column": 40
            },
            "line": 158,
            "code": "      it('uses named formats as defaults', () => {\n        const date = new Date()\n        const opts: Intl.DateTimeFormatOptions = {minute: '2-digit'}\n        const format = 'hour-only'\n\n        const {locale, formats} = config\n        df = new Intl.DateTimeFormat(locale, {\n          ...opts,\n          ...formats!.time![format],\n        })\n\n        expect(formatTime(date, {...opts, format})).toBe(df.format(date))\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "handles missing named formats and warns",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 172,
                "column": 49
            },
            "line": 172,
            "code": "      it('handles missing named formats and warns', () => {\n        const date = new Date()\n        const format = 'missing'\n\n        expect(formatTime(date, {format})).toBe(df.format(date))\n        expect(\n          (config.onError as jest.Mock).mock.calls.map(c => c[0].code)\n        ).toMatchSnapshot()\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should set default values",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 182,
                "column": 35
            },
            "line": 182,
            "code": "      it('should set default values', () => {\n        const date = new Date()\n        const {locale} = config\n        const day = 'numeric'\n        df = new Intl.DateTimeFormat(locale, {\n          hour: 'numeric',\n          minute: 'numeric',\n          day,\n        })\n        expect(formatTime(date, {day})).toBe(df.format(date))\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should not set default values when second is provided",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 194,
                "column": 63
            },
            "line": 194,
            "code": "      it('should not set default values when second is provided', () => {\n        const date = new Date()\n        const {locale} = config\n        const second = 'numeric'\n        df = new Intl.DateTimeFormat(locale, {second})\n        expect(formatTime(date, {second})).toBe(df.format(date))\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should not set default values when minute is provided",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 202,
                "column": 63
            },
            "line": 202,
            "code": "      it('should not set default values when minute is provided', () => {\n        const date = new Date()\n        const {locale} = config\n        const minute = 'numeric'\n        df = new Intl.DateTimeFormat(locale, {minute})\n        expect(formatTime(date, {minute})).toBe(df.format(date))\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "should not set default values when hour is provided",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 210,
                "column": 61
            },
            "line": 210,
            "code": "      it('should not set default values when hour is provided', () => {\n        const date = new Date()\n        const {locale} = config\n        const hour = 'numeric'\n        df = new Intl.DateTimeFormat(locale, {hour})\n        expect(formatTime(date, {hour})).toBe(df.format(date))\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "uses time zone specified in options over the one passed through by the provider",
            "suites": [
                "format API",
                "formatTime()",
                "options"
            ],
            "updatePoint": {
                "line": 218,
                "column": 89
            },
            "line": 218,
            "code": "      it('uses time zone specified in options over the one passed through by the provider', () => {\n        const timestamp = Date.now()\n        config.timeZone = 'Africa/Johannesburg'\n        // @ts-ignore\n        formatTime = formatTimeFn.bind(null, config, getDateTimeFormat)\n        const chicagoDf = new Intl.DateTimeFormat(config.locale, {\n          hour: 'numeric',\n          minute: 'numeric',\n          timeZone: 'America/Chicago',\n        })\n        expect(formatTime(timestamp, {timeZone: 'America/Chicago'})).toBe(\n          chicagoDf.format(timestamp)\n        )\n      })",
            "file": "formatTime.test.ts",
            "skipped": false,
            "dir": "packages/intl/tests"
        },
        {
            "name": "evaluates",
            "suites": [
                "build"
            ],
            "updatePoint": {
                "line": 4,
                "column": 17,
                "index": 124
            },
            "line": 4,
            "code": "    it('evaluates', () => {\n      expect(require(buildPath)).toBeDefined();\n    });",
            "file": "functional/support/build.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `defineMessages`",
            "suites": [
                "react-intl",
                "exports"
            ],
            "updatePoint": {
                "line": 8,
                "column": 32,
                "index": 249
            },
            "line": 8,
            "code": "    it('exports `defineMessages`', () => {\n      expect(typeof ReactIntl.defineMessages).toBe('function');\n    });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `defineMessage`",
            "suites": [
                "react-intl",
                "exports"
            ],
            "updatePoint": {
                "line": 11,
                "column": 31,
                "index": 363
            },
            "line": 11,
            "code": "    it('exports `defineMessage`', () => {\n      expect(typeof ReactIntl.defineMessage).toBe('function');\n    });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `injectIntl`",
            "suites": [
                "react-intl",
                "exports"
            ],
            "updatePoint": {
                "line": 14,
                "column": 28,
                "index": 473
            },
            "line": 14,
            "code": "    it('exports `injectIntl`', () => {\n      expect(typeof ReactIntl.injectIntl).toBe('function');\n    });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `useIntl`",
            "suites": [
                "react-intl",
                "exports"
            ],
            "updatePoint": {
                "line": 17,
                "column": 25,
                "index": 577
            },
            "line": 17,
            "code": "    it('exports `useIntl`', () => {\n      expect(typeof ReactIntl.useIntl).toBe('function');\n    });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `IntlProvider`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 21,
                "column": 32,
                "index": 726
            },
            "line": 21,
            "code": "      it('exports `IntlProvider`', () => {\n        expect(typeof ReactIntl.IntlProvider).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedDate`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 24,
                "column": 33,
                "index": 844
            },
            "line": 24,
            "code": "      it('exports `FormattedDate`', () => {\n        expect(typeof ReactIntl.FormattedDate).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedTime`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 27,
                "column": 33,
                "index": 963
            },
            "line": 27,
            "code": "      it('exports `FormattedTime`', () => {\n        expect(typeof ReactIntl.FormattedTime).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedNumber`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 30,
                "column": 35,
                "index": 1084
            },
            "line": 30,
            "code": "      it('exports `FormattedNumber`', () => {\n        expect(typeof ReactIntl.FormattedNumber).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedDateParts`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 33,
                "column": 38,
                "index": 1210
            },
            "line": 33,
            "code": "      it('exports `FormattedDateParts`', () => {\n        expect(typeof ReactIntl.FormattedDateParts).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedTimeParts`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 36,
                "column": 38,
                "index": 1339
            },
            "line": 36,
            "code": "      it('exports `FormattedTimeParts`', () => {\n        expect(typeof ReactIntl.FormattedTimeParts).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedNumberParts`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 39,
                "column": 40,
                "index": 1470
            },
            "line": 39,
            "code": "      it('exports `FormattedNumberParts`', () => {\n        expect(typeof ReactIntl.FormattedNumberParts).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedRelativeTime`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 42,
                "column": 41,
                "index": 1604
            },
            "line": 42,
            "code": "      it('exports `FormattedRelativeTime`', () => {\n        expect(typeof ReactIntl.FormattedRelativeTime).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedPlural`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 45,
                "column": 35,
                "index": 1733
            },
            "line": 45,
            "code": "      it('exports `FormattedPlural`', () => {\n        expect(typeof ReactIntl.FormattedPlural).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedMessage`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 48,
                "column": 36,
                "index": 1857
            },
            "line": 48,
            "code": "      it('exports `FormattedMessage`', () => {\n        expect(typeof ReactIntl.FormattedMessage).toBe('object');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "exports `FormattedDisplayNames`",
            "suites": [
                "react-intl",
                "exports",
                "React Components"
            ],
            "updatePoint": {
                "line": 51,
                "column": 41,
                "index": 1985
            },
            "line": 51,
            "code": "      it('exports `FormattedDisplayNames`', () => {\n        expect(typeof ReactIntl.FormattedDisplayName).toBe('function');\n      });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        },
        {
            "name": "has named export \"%s\"",
            "suites": [
                "react-intl",
                "static analysis of named exports "
            ],
            "line": 70,
            "code": "    it.each(keys)('has named export \"%s\"', key => {\n      expect(parsed.exports).toContain(key);\n    });",
            "file": "unit/react-intl.ts",
            "skipped": false,
            "dir": "packages/react-intl/tests"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in issue-3362.test.ts:4\nRemove `.only` to restore test checks"
}