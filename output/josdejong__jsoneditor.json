{"repo":"josdejong/jsoneditor","url":"https://github.com/josdejong/jsoneditor","branch":"develop","configs":[{"package":"jsoneditor","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should stringify a small object","suites":["jsonUtils"],"updatePoint":{"line":4,"column":37,"index":168},"line":4,"code":"  it('should stringify a small object', () => {\n    const json = {\n      a: 2,\n      b: 'foo',\n      c: null,\n      d: false,\n      e: [1, 2, 3],\n      f: {\n        g: 'h'\n      }\n    };\n    assert.strictEqual(stringifyPartial(json), '{\"a\":2,\"b\":\"foo\",\"c\":null,\"d\":false,\"e\":[1,2,3],\"f\":{\"g\":\"h\"}}');\n  });","file":"jsonUtils.test.js","skipped":false,"dir":"test"},{"name":"should stringify a small object with formatting","suites":["jsonUtils"],"updatePoint":{"line":17,"column":53,"index":491},"line":17,"code":"  it('should stringify a small object with formatting', () => {\n    const json = {\n      a: 2,\n      b: 'foo',\n      c: null,\n      d: false,\n      e: [1, 2, 3],\n      f: {\n        g: 'h'\n      }\n    };\n    assert.strictEqual(stringifyPartial(json, 2), '{\\n' + '  \"a\": 2,\\n' + '  \"b\": \"foo\",\\n' + '  \"c\": null,\\n' + '  \"d\": false,\\n' + '  \"e\": [\\n' + '    1,\\n' + '    2,\\n' + '    3\\n' + '  ],\\n' + '  \"f\": {\\n' + '    \"g\": \"h\"\\n' + '  }\\n' + '}');\n    assert.strictEqual(stringifyPartial(json, '    '), '{\\n' + '    \"a\": 2,\\n' + '    \"b\": \"foo\",\\n' + '    \"c\": null,\\n' + '    \"d\": false,\\n' + '    \"e\": [\\n' + '        1,\\n' + '        2,\\n' + '        3\\n' + '    ],\\n' + '    \"f\": {\\n' + '        \"g\": \"h\"\\n' + '    }\\n' + '}');\n  });","file":"jsonUtils.test.js","skipped":false,"dir":"test"},{"name":"should limit stringified output","suites":["jsonUtils"],"updatePoint":{"line":31,"column":37,"index":1215},"line":31,"code":"  it('should limit stringified output', () => {\n    const json = {\n      a: 2,\n      b: 'foo',\n      c: null,\n      d: false,\n      e: [1, 2, 3],\n      f: {\n        g: 'h'\n      }\n    };\n    const all = '{\"a\":2,\"b\":\"foo\",\"c\":null,\"d\":false,\"e\":[1,2,3],\"f\":{\"g\":\"h\"}}';\n    const limit = 20;\n    assert.strictEqual(stringifyPartial(json, undefined, limit), all.slice(0, limit) + '...');\n    assert.strictEqual(stringifyPartial(json, undefined, all.length), all);\n    assert.strictEqual(stringifyPartial([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], undefined, 10), '[1,2,3,4,5...');\n    assert.strictEqual(stringifyPartial(12345678, undefined, 4), '1234...');\n  });","file":"jsonUtils.test.js","skipped":false,"dir":"test"},{"name":"should count array items","suites":["jsonUtils"],"updatePoint":{"line":49,"column":30,"index":1860},"line":49,"code":"  it('should count array items', () => {\n    // assert.strictEqual(countArrayItems('[1,2,3]'), 3)\n    assert.strictEqual(containsArray('[]'), true);\n    assert.strictEqual(containsArray(' []'), true);\n    assert.strictEqual(containsArray(' \\t  []'), true);\n    assert.strictEqual(containsArray(' \\t\\n  []'), true);\n    assert.strictEqual(containsArray('\"[\"'), false);\n    assert.strictEqual(containsArray('2'), false);\n    assert.strictEqual(containsArray('null'), false);\n    assert.strictEqual(containsArray('{}'), false);\n  });","file":"jsonUtils.test.js","skipped":false,"dir":"test"},{"name":"should find schema","suites":["Node","_findSchema"],"updatePoint":{"line":6,"column":26,"index":172},"line":6,"code":"    it('should find schema', () => {\n      const schema = {\n        type: 'object',\n        properties: {\n          child: {\n            type: 'string'\n          }\n        }\n      };\n      const path = ['child'];\n      assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.child);\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find schema inside an array item","suites":["Node","_findSchema"],"updatePoint":{"line":18,"column":47,"index":501},"line":18,"code":"    it('should find schema inside an array item', () => {\n      const schema = {\n        properties: {\n          job: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                company: {\n                  enum: ['test1', 'test2']\n                }\n              }\n            }\n          }\n        }\n      };\n      assert.strictEqual(Node._findSchema(schema, {}, []), schema);\n      assert.strictEqual(Node._findSchema(schema, {}, ['job']), schema.properties.job);\n      assert.strictEqual(Node._findSchema(schema, {}, ['job', 0]), schema.properties.job.items);\n      assert.strictEqual(Node._findSchema(schema, {}, ['job', 0, 'company']), schema.properties.job.items.properties.company);\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find schema within multi-level object properties","suites":["Node","_findSchema"],"updatePoint":{"line":39,"column":63,"index":1280},"line":39,"code":"    it('should find schema within multi-level object properties', () => {\n      const schema = {\n        type: 'object',\n        properties: {\n          levelTwo: {\n            type: 'object',\n            properties: {\n              levelThree: {\n                type: 'object',\n                properties: {\n                  bool: {\n                    type: 'boolean'\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n      let path = [];\n      assert.strictEqual(Node._findSchema(schema, {}, path), schema);\n      path = ['levelTwo'];\n      assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.levelTwo);\n      path = ['levelTwo', 'levelThree'];\n      assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.levelTwo.properties.levelThree);\n      path = ['levelTwo', 'levelThree', 'bool'];\n      assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.levelTwo.properties.levelThree.properties.bool);\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find referenced schema within multi-level object properties","suites":["Node","_findSchema"],"updatePoint":{"line":67,"column":74,"index":2307},"line":67,"code":"    it('should find referenced schema within multi-level object properties', () => {\n      const schema = {\n        type: 'object',\n        properties: {\n          aProperty: {\n            $ref: 'second_schema#/definitions/some_def'\n          }\n        }\n      };\n      const schemaRefs = {\n        second_schema: {\n          definitions: {\n            some_def: {\n              type: 'object',\n              properties: {\n                enumProp: {\n                  enum: [1, 2, 3]\n                }\n              }\n            }\n          }\n        }\n      };\n      const path = ['aProperty', 'enumProp'];\n      const expectedSchema = {\n        enum: [1, 2, 3]\n      };\n      assert.deepStrictEqual(Node._findSchema(schema, schemaRefs, path), expectedSchema);\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find array referenced schema within multi-level object properties","suites":["Node","_findSchema"],"updatePoint":{"line":96,"column":80,"index":3085},"line":96,"code":"    it('should find array referenced schema within multi-level object properties', () => {\n      const schema = {\n        type: 'object',\n        properties: {\n          aProperty: {\n            type: 'array',\n            items: {\n              $ref: 'second_schema#/definitions/some_def'\n            }\n          }\n        }\n      };\n      const schemaRefs = {\n        second_schema: {\n          definitions: {\n            some_def: {\n              type: 'object',\n              properties: {\n                enumProp: {\n                  enum: [1, 2, 3]\n                }\n              }\n            }\n          }\n        }\n      };\n      const path = ['aProperty', 0, 'enumProp'];\n      const expectedSchema = {\n        enum: [1, 2, 3]\n      };\n      assert.deepStrictEqual(Node._findSchema(schema, schemaRefs, path), expectedSchema);\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should return null for path that has no schema","suites":["Node","_findSchema"],"updatePoint":{"line":128,"column":54,"index":3904},"line":128,"code":"    it('should return null for path that has no schema', () => {\n      const schema = {\n        type: 'object',\n        properties: {\n          foo: {\n            type: 'object',\n            properties: {\n              baz: {\n                type: 'number'\n              }\n            }\n          }\n        }\n      };\n      let path = ['bar'];\n      assert.strictEqual(Node._findSchema(schema, {}, path), null);\n      path = ['foo', 'bar'];\n      assert.strictEqual(Node._findSchema(schema, {}, path), null);\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find one of required properties","suites":["Node","_findSchema"],"updatePoint":{"line":147,"column":46,"index":4413},"line":147,"code":"    it('should find one of required properties', () => {\n      const schema = {\n        properties: {\n          company: {\n            type: 'string',\n            enum: ['1', '2']\n          },\n          worker: {\n            type: 'string',\n            enum: ['a', 'b']\n          },\n          manager: {\n            type: 'string',\n            enum: ['c', 'd']\n          }\n        },\n        additionalProperties: false,\n        oneOf: [{\n          required: ['worker']\n        }, {\n          required: ['manager']\n        }]\n      };\n      let path = ['company'];\n      assert.deepStrictEqual(Node._findSchema(schema, {}, path), {\n        type: 'string',\n        enum: ['1', '2']\n      });\n      path = ['worker'];\n      assert.deepStrictEqual(Node._findSchema(schema, {}, path), {\n        type: 'string',\n        enum: ['a', 'b']\n      });\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find a referenced schema","suites":["Node","_findSchema","with $ref"],"updatePoint":{"line":182,"column":41,"index":5292},"line":182,"code":"      it('should find a referenced schema', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            foo: {\n              $ref: 'foo'\n            }\n          }\n        };\n        const fooSchema = {\n          type: 'number',\n          title: 'Foo'\n        };\n        const path = ['foo'];\n        assert.strictEqual(Node._findSchema(schema, {\n          foo: fooSchema\n        }, path), fooSchema);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find a referenced schema property","suites":["Node","_findSchema","with $ref"],"updatePoint":{"line":200,"column":50,"index":5747},"line":200,"code":"      it('should find a referenced schema property', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            foo: {\n              $ref: 'foo'\n            }\n          }\n        };\n        const fooSchema = {\n          type: 'object',\n          properties: {\n            levelTwo: {\n              type: 'string'\n            }\n          }\n        };\n        const path = ['foo', 'levelTwo'];\n        assert.strictEqual(Node._findSchema(schema, {\n          foo: fooSchema\n        }, path), fooSchema.properties.levelTwo);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find a referenced schema definition","suites":["Node","_findSchema","with $ref"],"updatePoint":{"line":222,"column":52,"index":6316},"line":222,"code":"      it('should find a referenced schema definition', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            foo: {\n              type: 'array',\n              items: {\n                $ref: 'foo#/definitions/some_def'\n              }\n            }\n          }\n        };\n        const fooSchema = {\n          definitions: {\n            some_def: {\n              type: 'object',\n              properties: {\n                propA: {\n                  type: 'string'\n                },\n                propB: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        };\n        const path = ['foo', 0];\n        assert.strictEqual(Node._findSchema(schema, {\n          foo: fooSchema\n        }, path), fooSchema.definitions.some_def);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find a referenced schema definition 2","suites":["Node","_findSchema","with $ref"],"updatePoint":{"line":254,"column":54,"index":7144},"line":254,"code":"      it('should find a referenced schema definition 2', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            foo: {\n              type: 'array',\n              items: {\n                $ref: 'foo#/definitions/some_def'\n              }\n            }\n          }\n        };\n        const fooSchema = {\n          definitions: {\n            some_def: {\n              type: 'object',\n              properties: {\n                propA: {\n                  type: 'string'\n                },\n                propB: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        };\n        const path = ['foo', 0, 'propA'];\n        assert.strictEqual(Node._findSchema(schema, {\n          foo: fooSchema\n        }, path), fooSchema.definitions.some_def.properties.propA);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find a referenced schema definition 3","suites":["Node","_findSchema","with $ref"],"updatePoint":{"line":286,"column":54,"index":7998},"line":286,"code":"      it('should find a referenced schema definition 3', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            foo: {\n              type: 'array',\n              items: {\n                $ref: 'foo#/definitions/some_def'\n              }\n            }\n          }\n        };\n        const fooSchema = {\n          definitions: {\n            some_def: {\n              type: 'object',\n              properties: {\n                propA: {\n                  type: 'object',\n                  properties: {\n                    propA1: {\n                      type: 'boolean'\n                    }\n                  }\n                },\n                propB: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        };\n        const path = ['foo', 0, 'propA', 'propA1'];\n        assert.strictEqual(Node._findSchema(schema, {\n          foo: fooSchema\n        }, path), fooSchema.definitions.some_def.properties.propA.properties.propA1);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find a referenced schema","suites":["Node","_findSchema","with $ref to internal definition"],"updatePoint":{"line":325,"column":41,"index":9075},"line":325,"code":"      it('should find a referenced schema', () => {\n        const schema = {\n          $schema: 'http://json-schema.org/draft-07/schema#',\n          type: 'object',\n          patternProperties: {\n            '^/[a-z0-9]*$': {\n              $ref: '#/definitions/component'\n            }\n          },\n          definitions: {\n            component: {\n              type: 'object',\n              properties: {\n                type: {\n                  type: 'string',\n                  minLength: 1\n                },\n                config: {\n                  type: 'object'\n                },\n                children: {\n                  type: 'object',\n                  patternProperties: {\n                    '^/[a-z0-9]+$': {\n                      $ref: '#/definitions/component'\n                    }\n                  }\n                }\n              }\n            }\n          }\n        };\n        const path = ['/status', 'children', '/bus', 'config'];\n        const foundSchema = {\n          type: 'object'\n        };\n        assert.notStrictEqual(Node._findSchema(schema, {}, path), foundSchema);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find a referenced schema","suites":["Node","_findSchema","with $ref to external definition"],"updatePoint":{"line":365,"column":41,"index":10259},"line":365,"code":"      it('should find a referenced schema', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            address: {\n              $ref: 'definitions.json#/address'\n            }\n          }\n        };\n        const definitions = {\n          address: {\n            type: 'object',\n            properties: {\n              country: {\n                type: 'string'\n              },\n              city: {\n                type: 'string'\n              }\n            }\n          }\n        };\n        const path = ['address', 'city'];\n        const foundSchema = {\n          type: 'string'\n        };\n        assert.notStrictEqual(Node._findSchema(schema, {\n          'definitions.json': definitions\n        }, path), foundSchema);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find schema","suites":["Node","_findSchema","with pattern properties"],"updatePoint":{"line":397,"column":28,"index":11070},"line":397,"code":"      it('should find schema', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            str: {\n              title: 'str',\n              type: 'boolean'\n            }\n          },\n          patternProperties: {\n            '^foo[0-9]': {\n              title: 'foo[0-] pattern property',\n              type: 'string'\n            }\n          }\n        };\n        let path = [];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema, 'top level');\n        path = ['str'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.str, 'normal property');\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find schema within multi-level object properties","suites":["Node","_findSchema","with pattern properties"],"updatePoint":{"line":418,"column":65,"index":11746},"line":418,"code":"      it('should find schema within multi-level object properties', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            levelTwo: {\n              type: 'object',\n              properties: {\n                levelThree: {\n                  type: 'object',\n                  properties: {\n                    bool: {\n                      title: 'bool',\n                      type: 'boolean'\n                    }\n                  }\n                }\n              }\n            }\n          },\n          patternProperties: {\n            '^foo[0-9]': {\n              title: 'foo[0-9] pattern property',\n              type: 'string'\n            }\n          }\n        };\n        let path = [];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema, 'top level');\n        path = ['levelTwo'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.levelTwo, 'level two');\n        path = ['levelTwo', 'levelThree'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.levelTwo.properties.levelThree, 'level three');\n        path = ['levelTwo', 'levelThree', 'bool'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.levelTwo.properties.levelThree.properties.bool, 'normal property');\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find schema for pattern properties","suites":["Node","_findSchema","with pattern properties"],"updatePoint":{"line":453,"column":51,"index":13065},"line":453,"code":"      it('should find schema for pattern properties', () => {\n        const schema = {\n          type: 'object',\n          patternProperties: {\n            '^foo[0-9]': {\n              title: 'foo[0-9] pattern property',\n              type: 'string'\n            },\n            '^bar[0-9]': {\n              title: 'bar[0-9] pattern property',\n              type: 'string'\n            }\n          }\n        };\n        let path = ['foo1'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.patternProperties['^foo[0-9]'], 'first pattern property');\n        path = ['bar5'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.patternProperties['^bar[0-9]'], 'second pattern property');\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find schema for multi-level pattern properties","suites":["Node","_findSchema","with pattern properties"],"updatePoint":{"line":472,"column":63,"index":13808},"line":472,"code":"      it('should find schema for multi-level pattern properties', () => {\n        const schema = {\n          type: 'object',\n          patternProperties: {\n            '^foo[0-9]': {\n              title: 'foo[0-9] pattern property',\n              type: 'object',\n              properties: {\n                fooChild: {\n                  type: 'object',\n                  properties: {\n                    fooChild2: {\n                      type: 'string'\n                    }\n                  }\n                }\n              }\n            },\n            '^bar[0-9]': {\n              title: 'bar[0-9] pattern property',\n              type: 'object',\n              properties: {\n                barChild: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        };\n        let path = ['foo1', 'fooChild', 'fooChild2'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.patternProperties['^foo[0-9]'].properties.fooChild.properties.fooChild2, 'first pattern property child of child');\n        path = ['bar5', 'barChild'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.patternProperties['^bar[0-9]'].properties.barChild, 'second pattern property child');\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should return null for path that has no schema","suites":["Node","_findSchema","with pattern properties"],"updatePoint":{"line":506,"column":56,"index":15056},"line":506,"code":"      it('should return null for path that has no schema', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            levelTwo: {\n              type: 'object',\n              properties: {\n                levelThree: {\n                  type: 'number'\n                }\n              }\n            }\n          },\n          patternProperties: {\n            '^foo[0-9]': {\n              title: 'foo[0-9] pattern property',\n              type: 'string'\n            },\n            '^bar[0-9]': {\n              title: 'bar[0-9] pattern property',\n              type: 'string'\n            }\n          }\n        };\n        let path = ['not-in-schema'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), null);\n        path = ['levelOne', 'not-in-schema'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), null);\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should return additionalProperties schema","suites":["Node","_findSchema","with pattern properties"],"updatePoint":{"line":535,"column":51,"index":15928},"line":535,"code":"      it('should return additionalProperties schema', () => {\n        const schema = {\n          type: 'object',\n          properties: {\n            company: {\n              type: 'string',\n              enum: ['1', '2']\n            },\n            nested: {\n              type: 'object',\n              additionalProperties: {\n                type: 'number'\n              }\n            }\n          },\n          additionalProperties: {\n            type: 'string',\n            enum: ['1', '2']\n          }\n        };\n        let path = ['company2'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.additionalProperties, 'additionalProperties schema');\n        path = ['nested', 'virtual'];\n        assert.strictEqual(Node._findSchema(schema, {}, path), schema.properties.nested.additionalProperties, 'additionalProperties schema');\n      });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should find enum","suites":["Node","_findEnum"],"updatePoint":{"line":563,"column":24,"index":16808},"line":563,"code":"    it('should find enum', () => {\n      const schema = {\n        type: 'object',\n        enum: [1, 2, 3]\n      };\n      assert.strictEqual(Node._findEnum(schema), schema.enum);\n    });","file":"Node.test.js","skipped":false,"dir":"test"},{"name":"should stringify an array of paths","suites":["util","jsonPath"],"updatePoint":{"line":5,"column":42,"index":434},"line":5,"code":"    it('should stringify an array of paths', () => {\n      assert.deepStrictEqual(stringifyPath([]), '');\n      assert.deepStrictEqual(stringifyPath(['foo']), '.foo');\n      assert.deepStrictEqual(stringifyPath(['foo', 'bar']), '.foo.bar');\n      assert.deepStrictEqual(stringifyPath(['foo', 2]), '.foo[2]');\n      assert.deepStrictEqual(stringifyPath(['foo', 2, 'bar']), '.foo[2].bar');\n      assert.deepStrictEqual(stringifyPath(['foo', 2, 'bar_baz']), '.foo[2].bar_baz');\n      assert.deepStrictEqual(stringifyPath([2]), '[2]');\n      assert.deepStrictEqual(stringifyPath(['foo', 'prop-with-hyphens']), '.foo[\"prop-with-hyphens\"]');\n      assert.deepStrictEqual(stringifyPath(['foo', 'prop with spaces']), '.foo[\"prop with spaces\"]');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should parse a json path","suites":["util","jsonPath"],"updatePoint":{"line":16,"column":32,"index":1170},"line":16,"code":"    it('should parse a json path', () => {\n      assert.deepStrictEqual(parsePath(''), []);\n      assert.deepStrictEqual(parsePath('.foo'), ['foo']);\n      assert.deepStrictEqual(parsePath('.foo.bar'), ['foo', 'bar']);\n      assert.deepStrictEqual(parsePath('.foo[2]'), ['foo', 2]);\n      assert.deepStrictEqual(parsePath('.foo[2].bar'), ['foo', 2, 'bar']);\n      assert.deepStrictEqual(parsePath('.foo[\"prop with spaces\"]'), ['foo', 'prop with spaces']);\n      assert.deepStrictEqual(parsePath('.foo[\\'prop with single quotes as outputted by ajv library\\']'), ['foo', 'prop with single quotes as outputted by ajv library']);\n      assert.deepStrictEqual(parsePath('.foo[\"prop with . dot\"]'), ['foo', 'prop with . dot']);\n      assert.deepStrictEqual(parsePath('.foo[\"prop with ] character\"]'), ['foo', 'prop with ] character']);\n      assert.deepStrictEqual(parsePath('.foo[*].bar'), ['foo', '*', 'bar']);\n      assert.deepStrictEqual(parsePath('[2]'), [2]);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should throw an exception in case of an invalid path","suites":["util","jsonPath"],"updatePoint":{"line":29,"column":60,"index":2166},"line":29,"code":"    it('should throw an exception in case of an invalid path', () => {\n      assert.throws(() => {\n        parsePath('.');\n      }, /Invalid JSON path: property name expected at index 1/);\n      assert.throws(() => {\n        parsePath('[');\n      }, /Invalid JSON path: unexpected end, character ] expected/);\n      assert.throws(() => {\n        parsePath('[]');\n      }, /Invalid JSON path: array value expected at index 1/);\n      assert.throws(() => {\n        parsePath('.foo[  ]');\n      }, /Invalid JSON path: array value expected at index 7/);\n      assert.throws(() => {\n        parsePath('.[]');\n      }, /Invalid JSON path: property name expected at index 1/);\n      assert.throws(() => {\n        parsePath('[\"23]');\n      }, /Invalid JSON path: unexpected end, character \" expected/);\n      assert.throws(() => {\n        parsePath('.foo bar');\n      }, /Invalid JSON path: unexpected character \" \" at index 4/);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"happy flows - row and column in range","suites":["util","getIndexForPosition"],"updatePoint":{"line":57,"column":45,"index":3617},"line":57,"code":"    it('happy flows - row and column in range', () => {\n      assert.strictEqual(getIndexForPosition(el, 1, 1), 0);\n      assert.strictEqual(getIndexForPosition(el, 2, 1), 124);\n      assert.strictEqual(getIndexForPosition(el, 3, 8), 239);\n      assert.strictEqual(getIndexForPosition(el, 4, 22), 356);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"if range exceeds it should be considered as if it is last row or column length","suites":["util","getIndexForPosition"],"updatePoint":{"line":63,"column":86,"index":3969},"line":63,"code":"    it('if range exceeds it should be considered as if it is last row or column length', () => {\n      assert.strictEqual(getIndexForPosition(el, 1, 100000), 123);\n      assert.strictEqual(getIndexForPosition(el, 100000, 1), 335);\n      assert.strictEqual(getIndexForPosition(el, 100000, 100000), 445);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"missing or wrong input sould return -1","suites":["util","getIndexForPosition"],"updatePoint":{"line":68,"column":46,"index":4240},"line":68,"code":"    it('missing or wrong input sould return -1', () => {\n      assert.strictEqual(getIndexForPosition(el), -1);\n      assert.strictEqual(getIndexForPosition(el, undefined, 1), -1);\n      assert.strictEqual(getIndexForPosition(el, 1, undefined), -1);\n      assert.strictEqual(getIndexForPosition(el, -2, -2), -1);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"empty value for both current and previoues error should return false","suites":["util","isValidationErrorChanged"],"updatePoint":{"line":114,"column":76,"index":5598},"line":114,"code":"    it('empty value for both current and previoues error should return false', () => {\n      assert.strictEqual(isValidationErrorChanged(), false);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"empty value for one of current and previoues error should return true","suites":["util","isValidationErrorChanged"],"updatePoint":{"line":117,"column":77,"index":5755},"line":117,"code":"    it('empty value for one of current and previoues error should return true', () => {\n      assert.strictEqual(isValidationErrorChanged([err1]), true);\n      assert.strictEqual(isValidationErrorChanged(undefined, [err1]), true);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"different length of current and previoues errors should return true","suites":["util","isValidationErrorChanged"],"updatePoint":{"line":121,"column":75,"index":5992},"line":121,"code":"    it('different length of current and previoues errors should return true', () => {\n      assert.strictEqual(isValidationErrorChanged([err1], []), true);\n      assert.strictEqual(isValidationErrorChanged([err1], [err1, err2]), true);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"same values for current and previoues errors should return false","suites":["util","isValidationErrorChanged"],"updatePoint":{"line":125,"column":72,"index":6233},"line":125,"code":"    it('same values for current and previoues errors should return false', () => {\n      assert.strictEqual(isValidationErrorChanged([err1, err2, err3], [err2, err3, err1]), false);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"different values for current and previoues errors should return true","suites":["util","isValidationErrorChanged"],"updatePoint":{"line":128,"column":76,"index":6427},"line":128,"code":"    it('different values for current and previoues errors should return true', () => {\n      assert.strictEqual(isValidationErrorChanged([err1, err2], [err3, err1]), true);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should get a nested property from an object","suites":["util","get"],"updatePoint":{"line":133,"column":51,"index":6615},"line":133,"code":"    it('should get a nested property from an object', () => {\n      const obj = {\n        a: {\n          b: 2\n        },\n        c: 3,\n        d: null,\n        e: undefined\n      };\n      assert.strictEqual(get(obj, ['a', 'b']), 2);\n      assert.strictEqual(get(obj, ['c']), 3);\n      assert.deepStrictEqual(get(obj, ['a']), {\n        b: 2\n      });\n      assert.strictEqual(get(obj, ['a', 'foo']), undefined);\n      assert.strictEqual(get(obj, ['a', 'foo', 'bar']), undefined);\n      assert.strictEqual(get(obj, ['d']), null);\n      assert.strictEqual(get(obj, ['d', 'foo', 'bar']), null);\n      assert.strictEqual(get(obj, ['e']), undefined);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should return empty string when the schema is missing all relevant fields","suites":["util","makeFieldTooltip"],"updatePoint":{"line":155,"column":81,"index":7343},"line":155,"code":"    it('should return empty string when the schema is missing all relevant fields', () => {\n      assert.strictEqual(makeFieldTooltip({}), '');\n      assert.strictEqual(makeFieldTooltip({\n        additionalProperties: false\n      }), '');\n      assert.strictEqual(makeFieldTooltip(), '');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should make tooltips with only title","suites":["util","makeFieldTooltip"],"updatePoint":{"line":162,"column":44,"index":7603},"line":162,"code":"    it('should make tooltips with only title', () => {\n      assert.strictEqual(makeFieldTooltip({\n        title: 'foo'\n      }), 'foo');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should make tooltips with only description","suites":["util","makeFieldTooltip"],"updatePoint":{"line":167,"column":50,"index":7755},"line":167,"code":"    it('should make tooltips with only description', () => {\n      assert.strictEqual(makeFieldTooltip({\n        description: 'foo'\n      }), 'foo');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should make tooltips with only default","suites":["util","makeFieldTooltip"],"updatePoint":{"line":172,"column":46,"index":7909},"line":172,"code":"    it('should make tooltips with only default', () => {\n      assert.strictEqual(makeFieldTooltip({\n        default: 'foo'\n      }), 'Default\\n\"foo\"');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should make tooltips with only examples","suites":["util","makeFieldTooltip"],"updatePoint":{"line":177,"column":47,"index":8071},"line":177,"code":"    it('should make tooltips with only examples', () => {\n      assert.strictEqual(makeFieldTooltip({\n        examples: ['foo', 'bar']\n      }), 'Examples\\n\"foo\"\\n\"bar\"');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should make tooltips with title and description","suites":["util","makeFieldTooltip"],"updatePoint":{"line":182,"column":55,"index":8259},"line":182,"code":"    it('should make tooltips with title and description', () => {\n      assert.strictEqual(makeFieldTooltip({\n        title: 'foo',\n        description: 'bar'\n      }), 'foo\\nbar');\n      const longTitle = 'Lorem Ipsum Dolor';\n      const longDescription = 'Duis id elit non ante gravida vestibulum non nec est. ' + 'Proin vitae ligula at elit dapibus tempor. ' + 'Etiam lacinia augue vel condimentum interdum. ';\n      assert.strictEqual(makeFieldTooltip({\n        title: longTitle,\n        description: longDescription\n      }), longTitle + '\\n' + longDescription);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should make tooltips with title, description, and examples","suites":["util","makeFieldTooltip"],"updatePoint":{"line":194,"column":66,"index":8846},"line":194,"code":"    it('should make tooltips with title, description, and examples', () => {\n      assert.strictEqual(makeFieldTooltip({\n        title: 'foo',\n        description: 'bar',\n        examples: ['baz']\n      }), 'foo\\nbar\\n\\nExamples\\n\"baz\"');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should make tooltips with title, description, default, and examples","suites":["util","makeFieldTooltip"],"updatePoint":{"line":201,"column":75,"index":9102},"line":201,"code":"    it('should make tooltips with title, description, default, and examples', () => {\n      assert.strictEqual(makeFieldTooltip({\n        title: 'foo',\n        description: 'bar',\n        default: 'bat',\n        examples: ['baz']\n      }), 'foo\\nbar\\n\\nDefault\\n\"bat\"\\n\\nExamples\\n\"baz\"');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should handle empty fields","suites":["util","makeFieldTooltip"],"updatePoint":{"line":209,"column":34,"index":9359},"line":209,"code":"    it('should handle empty fields', () => {\n      assert.strictEqual(makeFieldTooltip({\n        title: '',\n        description: 'bar'\n      }), 'bar');\n      assert.strictEqual(makeFieldTooltip({\n        title: 'foo',\n        description: ''\n      }), 'foo');\n      assert.strictEqual(makeFieldTooltip({\n        description: 'bar',\n        examples: []\n      }), 'bar');\n      assert.strictEqual(makeFieldTooltip({\n        description: 'bar',\n        examples: ['']\n      }), 'bar\\n\\nExamples\\n\"\"');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should internationalize \"Defaults\" correctly","suites":["util","makeFieldTooltip"],"updatePoint":{"line":227,"column":52,"index":9886},"line":227,"code":"    it('should internationalize \"Defaults\" correctly', () => {\n      assert.strictEqual(makeFieldTooltip({\n        default: 'foo'\n      }, 'pt-BR'), 'Revelia\\n\"foo\"');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should internationalize \"Examples\" correctly","suites":["util","makeFieldTooltip"],"updatePoint":{"line":232,"column":52,"index":10062},"line":232,"code":"    it('should internationalize \"Examples\" correctly', () => {\n      assert.strictEqual(makeFieldTooltip({\n        examples: ['foo']\n      }, 'pt-BR'), 'Exemplos\\n\"foo\"');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should extract all child paths of an array containing objects","suites":["util","getChildPaths"],"updatePoint":{"line":239,"column":69,"index":10301},"line":239,"code":"    it('should extract all child paths of an array containing objects', () => {\n      const json = [{\n        name: 'A',\n        location: {\n          latitude: 1,\n          longitude: 2\n        }\n      }, {\n        name: 'B',\n        location: {\n          latitude: 1,\n          longitude: 2\n        }\n      }, {\n        name: 'C',\n        timestamp: 0\n      }];\n      assert.deepStrictEqual(getChildPaths(json), ['.location.latitude', '.location.longitude', '.name', '.timestamp']);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should extract all child paths of an array containing objects, including objects","suites":["util","getChildPaths"],"updatePoint":{"line":258,"column":88,"index":10813},"line":258,"code":"    it('should extract all child paths of an array containing objects, including objects', () => {\n      const json = [{\n        name: 'A',\n        location: {\n          latitude: 1,\n          longitude: 2\n        }\n      }, {\n        name: 'B',\n        location: {\n          latitude: 1,\n          longitude: 2\n        }\n      }, {\n        name: 'C',\n        timestamp: 0\n      }];\n      assert.deepStrictEqual(getChildPaths(json, true), ['', '.location', '.location.latitude', '.location.longitude', '.name', '.timestamp']);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should extract all child paths of an array containing values","suites":["util","getChildPaths"],"updatePoint":{"line":277,"column":68,"index":11328},"line":277,"code":"    it('should extract all child paths of an array containing values', () => {\n      const json = [1, 2, 3];\n      assert.deepStrictEqual(getChildPaths(json), ['']);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should extract all child paths of a non-array","suites":["util","getChildPaths"],"updatePoint":{"line":281,"column":53,"index":11487},"line":281,"code":"    it('should extract all child paths of a non-array', () => {\n      assert.deepStrictEqual(getChildPaths({\n        a: 2,\n        b: {\n          c: 3\n        }\n      }), ['']);\n      assert.deepStrictEqual(getChildPaths('foo'), ['']);\n      assert.deepStrictEqual(getChildPaths(123), ['']);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should test whether something is an object","suites":["util","getChildPaths"],"updatePoint":{"line":292,"column":48,"index":11788},"line":292,"code":"  it('should test whether something is an object', () => {\n    assert.strictEqual(isObject({}), true);\n    assert.strictEqual(isObject(new Date()), true);\n    assert.strictEqual(isObject([]), false);\n    assert.strictEqual(isObject(2), false);\n    assert.strictEqual(isObject(null), false);\n    assert.strictEqual(isObject(undefined), false);\n    assert.strictEqual(isObject(), false);\n  });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should sort an array","suites":["util","sort"],"updatePoint":{"line":302,"column":28,"index":12187},"line":302,"code":"    it('should sort an array', () => {\n      const array = [4, 1, 10, 2];\n      assert.deepStrictEqual(sort(array), [1, 2, 4, 10]);\n      assert.deepStrictEqual(sort(array, '.', 'desc'), [10, 4, 2, 1]);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should sort an array containing objects","suites":["util","sort"],"updatePoint":{"line":307,"column":47,"index":12417},"line":307,"code":"    it('should sort an array containing objects', () => {\n      const array = [{\n        value: 4\n      }, {\n        value: 1\n      }, {\n        value: 10\n      }, {\n        value: 2\n      }];\n      assert.deepStrictEqual(sort(array, '.value'), [{\n        value: 1\n      }, {\n        value: 2\n      }, {\n        value: 4\n      }, {\n        value: 10\n      }]);\n      assert.deepStrictEqual(sort(array, '.value', 'desc'), [{\n        value: 10\n      }, {\n        value: 4\n      }, {\n        value: 2\n      }, {\n        value: 1\n      }]);\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should sort the keys of an object","suites":["util","sortObjectKeys"],"updatePoint":{"line":338,"column":41,"index":12999},"line":338,"code":"    it('should sort the keys of an object', () => {\n      const object = {\n        c: 'c',\n        a: 'a',\n        b: 'b'\n      };\n      assert.strictEqual(JSON.stringify(object), '{\"c\":\"c\",\"a\":\"a\",\"b\":\"b\"}');\n      assert.strictEqual(JSON.stringify(sortObjectKeys(object)), '{\"a\":\"a\",\"b\":\"b\",\"c\":\"c\"}');\n      assert.strictEqual(JSON.stringify(sortObjectKeys(object, 'asc')), '{\"a\":\"a\",\"b\":\"b\",\"c\":\"c\"}');\n      assert.strictEqual(JSON.stringify(sortObjectKeys(object, 'desc')), '{\"c\":\"c\",\"b\":\"b\",\"a\":\"a\"}');\n    });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should parse a string","suites":["util","sortObjectKeys"],"updatePoint":{"line":350,"column":27,"index":13509},"line":350,"code":"  it('should parse a string', () => {\n    assert.strictEqual(parseString('foo'), 'foo');\n    assert.strictEqual(parseString('234foo'), '234foo');\n    assert.strictEqual(parseString('  234'), 234);\n    assert.strictEqual(parseString('234  '), 234);\n    assert.strictEqual(parseString('2.3'), 2.3);\n    assert.strictEqual(parseString('null'), null);\n    assert.strictEqual(parseString('true'), true);\n    assert.strictEqual(parseString('false'), false);\n    assert.strictEqual(parseString('+1'), 1);\n    assert.strictEqual(parseString(' '), ' ');\n    assert.strictEqual(parseString(''), '');\n    assert.strictEqual(parseString('\"foo\"'), '\"foo\"');\n    assert.strictEqual(parseString('\"2\"'), '\"2\"');\n    assert.strictEqual(parseString('\\'foo\\''), '\\'foo\\'');\n  });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should find a unique name","suites":["util","sortObjectKeys"],"updatePoint":{"line":366,"column":31,"index":14274},"line":366,"code":"  it('should find a unique name', () => {\n    assert.strictEqual(findUniqueName('other', ['a', 'b', 'c']), 'other');\n    assert.strictEqual(findUniqueName('b', ['a', 'b', 'c']), 'b (copy)');\n    assert.strictEqual(findUniqueName('b', ['a', 'b', 'c', 'b (copy)']), 'b (copy 2)');\n    assert.strictEqual(findUniqueName('b', ['a', 'b', 'c', 'b (copy)', 'b (copy 2)']), 'b (copy 3)');\n    assert.strictEqual(findUniqueName('b (copy)', ['a', 'b', 'b (copy)', 'b (copy 2)', 'c']), 'b (copy 3)');\n    assert.strictEqual(findUniqueName('b (copy 2)', ['a', 'b', 'b (copy)', 'b (copy 2)', 'c']), 'b (copy 3)');\n  });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should format a document size in a human readable way","suites":["util","sortObjectKeys"],"updatePoint":{"line":374,"column":59,"index":14909},"line":374,"code":"  it('should format a document size in a human readable way', () => {\n    assert.strictEqual(formatSize(500), '500 B');\n    assert.strictEqual(formatSize(900), '0.9 KB');\n    assert.strictEqual(formatSize(77.89 * 1000), '77.9 KB');\n    assert.strictEqual(formatSize(950 * 1000), '0.9 MB');\n    assert.strictEqual(formatSize(7.22 * 1000 * 1000), '7.2 MB');\n    assert.strictEqual(formatSize(945.4 * 1000 * 1000), '0.9 GB');\n    assert.strictEqual(formatSize(22.37 * 1000 * 1000 * 1000), '22.4 GB');\n    assert.strictEqual(formatSize(1000 * 1000 * 1000 * 1000), '1.0 TB');\n  });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should limit characters","suites":["util","sortObjectKeys"],"updatePoint":{"line":384,"column":29,"index":15456},"line":384,"code":"  it('should limit characters', () => {\n    assert.strictEqual(limitCharacters('hello world', 11), 'hello world');\n    assert.strictEqual(limitCharacters('hello world', 5), 'hello...');\n    assert.strictEqual(limitCharacters('hello world', 100), 'hello world');\n  });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should compile a JSON pointer","suites":["util","sortObjectKeys"],"updatePoint":{"line":389,"column":35,"index":15730},"line":389,"code":"  it('should compile a JSON pointer', () => {\n    assert.strictEqual(compileJSONPointer(['foo', 'bar']), '/foo/bar');\n    assert.strictEqual(compileJSONPointer(['foo', '/~ ~/']), '/foo/~1~0 ~0~1');\n    assert.strictEqual(compileJSONPointer(['']), '/');\n    assert.strictEqual(compileJSONPointer([]), '');\n  });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"should test whether a field is a timestamp","suites":["util","sortObjectKeys"],"updatePoint":{"line":395,"column":48,"index":16054},"line":395,"code":"  it('should test whether a field is a timestamp', () => {\n    assert.strictEqual(isTimestamp('foo', 1574809200000), true);\n    assert.strictEqual(isTimestamp('foo', 1574809200000.2), false);\n  });","file":"util.test.js","skipped":false,"dir":"test"},{"name":"regex should match whitespace and surrounding whitespace","suites":["util","sortObjectKeys"],"updatePoint":{"line":399,"column":62,"index":16266},"line":399,"code":"  it('regex should match whitespace and surrounding whitespace', () => {\n    assert.strictEqual(removeReturnsAndSurroundingWhitespace(' \\n A\\nB  \\nC  \\n  D \\n\\n E F\\n '), 'ABCDE F');\n  }); // TODO: thoroughly test all util methods","file":"util.test.js","skipped":false,"dir":"test"}]}