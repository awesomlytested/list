{"repo":"jantimon/html-webpack-plugin","url":"https://github.com/jantimon/html-webpack-plugin","branch":"main","configs":[{"package":"html-webpack-plugin","lang":"js","dir":"spec","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"generates a default index.html file for a single entry point","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":88,"column":66,"index":3304},"line":88,"code":"  it('generates a default index.html file for a single entry point', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"index_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"properly encodes file names in emitted URIs","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":99,"column":49,"index":3696},"line":99,"code":"  it('properly encodes file names in emitted URIs', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'foo/very fancy+name.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"foo\\/very%20fancy%2Bname.js\"><\\/script>[\\s]*<\\/head>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"generates a default index.html file with multiple entry points","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":121,"column":68,"index":4631},"line":121,"code":"  it('generates a default index.html file with multiple entry points', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to specify a custom loader without injection","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":135,"column":61,"index":5135},"line":135,"code":"  it('allows you to specify a custom loader without injection', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: 'pug-loader!' + path.join(__dirname, 'fixtures/template.pug')\n      })]\n    }, ['<script src=\"app_bundle.js', 'Some unique text'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should pass through loader errors","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":151,"column":39,"index":5632},"line":151,"code":"  it('should pass through loader errors', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      optimization: {\n        emitOnErrors: true\n      },\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/invalid.html')\n      })]\n    }, ['ReferenceError: foo is not defined'], null, done, true);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"uses a custom loader from webpacks config","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":170,"column":47,"index":6173},"line":170,"code":"  it('uses a custom loader from webpacks config', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      module: {\n        rules: [{\n          test: /\\.pug$/,\n          loader: 'pug-loader'\n        }]\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/template.pug')\n      })]\n    }, ['<script src=\"app_bundle.js', 'Some unique text'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"works when using html-loader","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":192,"column":34,"index":6760},"line":192,"code":"  it('works when using html-loader', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        template: 'html-loader!' + path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to specify your own HTML template file","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":208,"column":55,"index":7266},"line":208,"code":"  it('allows you to specify your own HTML template file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/test.html'),\n        inject: false\n      })]\n    }, ['<script src=\"app_bundle.js', 'Some unique text'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to use a function to map entry names to filenames","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":224,"column":62,"index":7767},"line":224,"code":"  it('allows to use a function to map entry names to filenames', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: entry => `${entry}.html`\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js'], 'app.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to use [name] for file names","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":239,"column":41,"index":8206},"line":239,"code":"  it('allows to use [name] for file names', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: '[name].html'\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js'], 'app.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"picks up src/index.ejs by default","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":254,"column":39,"index":8632},"line":254,"code":"  it('picks up src/index.ejs by default', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      context: path.join(__dirname, 'fixtures'),\n      entry: {\n        app: './index.js'\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js', 'src/index.ejs'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to inject the assets into a given html file","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":268,"column":60,"index":9069},"line":268,"code":"  it('allows you to inject the assets into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to inject the assets into the body of the given template","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":285,"column":73,"index":9678},"line":285,"code":"  it('allows you to inject the assets into the body of the given template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'body',\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to inject the assets into the head of the given template","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":302,"column":73,"index":10289},"line":302,"code":"  it('allows you to inject the assets into the head of the given template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'head',\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to inject a specified asset into a given html file","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":319,"column":67,"index":10894},"line":319,"code":"  it('allows you to inject a specified asset into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        chunks: ['app'],\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to inject a specified asset into a given html file","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":337,"column":67,"index":11476},"line":337,"code":"  it('allows you to inject a specified asset into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        excludeChunks: ['util'],\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to use chunkhash with asset into a given html file","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":355,"column":67,"index":12066},"line":355,"code":"  it('allows you to use chunkhash with asset into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/webpackconfig.html')\n      })]\n    }, [{\n      type: 'chunkhash',\n      chunkName: 'app',\n      containStr: '<script src=\"app_bundle.js\"'\n    }], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to disable injection","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":375,"column":37,"index":12607},"line":375,"code":"  it('allows you to disable injection', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<body></body>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to specify your own HTML template function","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":392,"column":59,"index":13129},"line":392,"code":"  it('allows you to specify your own HTML template function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'app_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        templateContent: function () {\n          return fs.readFileSync(path.join(__dirname, 'fixtures/plain.html'), 'utf8');\n        }\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"works with source maps","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":409,"column":28,"index":13640},"line":409,"code":"  it('works with source maps', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      devtool: 'source-map',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer src=\"index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"handles hashes in bundle filenames","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":421,"column":40,"index":14021},"line":421,"code":"  it('handles hashes in bundle filenames', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle_[hash].js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"index_bundle_[0-9a-f]+\\.js\"*/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"handles hashes in the directory which has the bundle file","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":432,"column":63,"index":14422},"line":432,"code":"  it('handles hashes in the directory which has the bundle file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/dist/[hash]/',\n        filename: 'index_bundle_[hash].js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"\\/dist\\/[0-9a-f]+\\/index_bundle_[0-9a-f]+\\.js\"*/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to append hashes to the assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":444,"column":43,"index":14859},"line":444,"code":"  it('allows to append hashes to the assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js?%hash%\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to append hashes to the assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":457,"column":43,"index":15256},"line":457,"code":"  it('allows to append hashes to the assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        inject: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js?%hash%\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should work with the css extract plugin","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":471,"column":45,"index":15677},"line":471,"code":"  it('should work with the css extract plugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin(), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\" rel=\"stylesheet\">'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"works with a javascript returning loader like raw-loader","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":490,"column":62,"index":16263},"line":490,"code":"  it('works with a javascript returning loader like raw-loader', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      module: {\n        rules: [{\n          test: /\\.html$/,\n          use: ['raw-loader']\n        }]\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name].js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"main.js\"', '<title>Example Plain file</title>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should work with the css extract plugin on windows and protocol relative urls support (#205)","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":510,"column":98,"index":16907},"line":510,"code":"  it('should work with the css extract plugin on windows and protocol relative urls support (#205)', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '//localhost:8080/'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin(), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"//localhost:8080/styles.css\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to add cache hashes to with the css assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":530,"column":61,"index":17532},"line":530,"code":"  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some/'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"/some/styles.css?%hash%\"'], path.join('subfolder', 'test.html'), done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to add cache hashes to with the css assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":553,"column":61,"index":18271},"line":553,"code":"  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"/some/styles.css?%hash%\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to add cache hashes to with the css assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":575,"column":61,"index":18908},"line":575,"code":"  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: 'some/'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"some/styles.css?%hash%\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to add cache hashes to with the css assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":597,"column":61,"index":19544},"line":597,"code":"  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css?%hash%\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to add cache hashes to with the css assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":618,"column":61,"index":20146},"line":618,"code":"  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"../styles.css?%hash%\"'], path.join('subfolder', 'test.html'), done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should inject css files when using the extract text plugin","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":640,"column":64,"index":20855},"line":640,"code":"  it('should inject css files when using the extract text plugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to add cache hashes to with injected css assets","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":661,"column":66,"index":21457},"line":661,"code":"  it('should allow to add cache hashes to with injected css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        inject: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css?%hash%\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should output xhtml link stylesheet tag","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":683,"column":45,"index":22065},"line":683,"code":"  it('should output xhtml link stylesheet tag', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        xhtml: true,\n        minify: {\n          keepClosingSlash: true\n        }\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\" rel=\"stylesheet\"/>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"prepends the publicPath to function","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":707,"column":41,"index":22722},"line":707,"code":"  it('prepends the publicPath to function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath() {\n          return '/';\n        }\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"prepends the publicPath to /some/","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":721,"column":39,"index":23137},"line":721,"code":"  it('prepends the publicPath to /some/', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/some/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"prepends the publicPath to /some","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":733,"column":38,"index":23530},"line":733,"code":"  it('prepends the publicPath to /some', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/some/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"prepends the publicPath to /some","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":745,"column":38,"index":23922},"line":745,"code":"  it('prepends the publicPath to /some', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: 'some/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"some/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"prepends the publicPath to undefined","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":757,"column":42,"index":24317},"line":757,"code":"  it('prepends the publicPath to undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"prepends the publicPath to undefined","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":768,"column":42,"index":24678},"line":768,"code":"  it('prepends the publicPath to undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"../index_bundle.js\"'], path.join('subfolder', 'test.html'), done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"prepends the publicPath to script defer=\"defer\" src","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":781,"column":57,"index":25166},"line":781,"code":"  it('prepends the publicPath to script defer=\"defer\" src', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: 'http://cdn.example.com/assets/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"http://cdn.example.com/assets/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"handles subdirectories in the webpack output bundles","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":793,"column":58,"index":25627},"line":793,"code":"  it('handles subdirectories in the webpack output bundles', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: '/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/assets/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to set public path to an empty string","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":805,"column":50,"index":26036},"line":805,"code":"  it('allows to set public path to an empty string', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: ''\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'foo/index.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"assets/index_bundle.js\"'], 'foo/index.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to set the html-webpack-plugin public path to an empty string","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":819,"column":74,"index":26523},"line":819,"code":"  it('allows to set the html-webpack-plugin public path to an empty string', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: '/'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'foo/index.html',\n        publicPath: ''\n      })]\n    }, ['<script defer=\"defer\" src=\"assets/index_bundle.js\"'], 'foo/index.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"handles subdirectories in the webpack output bundles along with a relative path","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":834,"column":85,"index":27046},"line":834,"code":"  it('handles subdirectories in the webpack output bundles along with a relative path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"assets/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"handles subdirectories in the webpack output bundles along with a relative path","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":845,"column":85,"index":27464},"line":845,"code":"  it('handles subdirectories in the webpack output bundles along with a relative path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"../assets/index_bundle.js\"'], path.join('subfolder', 'test.html'), done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"handles subdirectories in the webpack output bundles along with a absolute path","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":858,"column":85,"index":27994},"line":858,"code":"  it('handles subdirectories in the webpack output bundles along with a absolute path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: 'http://cdn.example.com/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"http://cdn.example.com/assets/index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to configure the title of the generated HTML page","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":870,"column":66,"index":28463},"line":870,"code":"  it('allows you to configure the title of the generated HTML page', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        title: 'My Cool App'\n      })]\n    }, ['<title>My Cool App</title>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to configure the output filename","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":883,"column":49,"index":28852},"line":883,"code":"  it('allows you to configure the output filename', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], 'test.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"will replace [hash] in the filename with the child compilation hash","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":896,"column":73,"index":29290},"line":896,"code":"  it('will replace [hash] in the filename with the child compilation hash', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'test-[hash].html'\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], /test-\\S+\\.html$/, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should work with hash options provided in output options","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":909,"column":62,"index":29730},"line":909,"code":"  it('should work with hash options provided in output options', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js',\n        hashDigestLength: 16\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[contenthash].html'\n      })]\n    }, [], /index\\.[a-z0-9]{16}\\.html/, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow filename in the format of [contenthash:<length>]","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":925,"column":67,"index":30204},"line":925,"code":"  it('should allow filename in the format of [contenthash:<length>]', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[contenthash:4].html'\n      })]\n    }, [], /index\\.[a-z0-9]{4}\\.html/, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"will replace [contenthash] in the filename with a content hash of 32 hex characters","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":940,"column":89,"index":30671},"line":940,"code":"  it('will replace [contenthash] in the filename with a content hash of 32 hex characters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[contenthash].html'\n      })]\n    }, [], /index\\.[a-f0-9]{20}\\.html/, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"will replace [templatehash] in the filename with a content hash of 32 hex characters","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":955,"column":90,"index":31138},"line":955,"code":"  it('will replace [templatehash] in the filename with a content hash of 32 hex characters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[templatehash].html'\n      })]\n    }, [], /index\\.[a-f0-9]{20}\\.html/, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to use an absolute output filename","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":970,"column":51,"index":31567},"line":970,"code":"  it('allows you to use an absolute output filename', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"../index_bundle.js\"'], path.join('subfolder', 'test.html'), done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to use an absolute output filename outside the output path","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":983,"column":75,"index":32073},"line":983,"code":"  it('allows you to use an absolute output filename outside the output path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: path.join(OUTPUT_DIR, 'app'),\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app/index_bundle.js\"'], 'test.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to use an relative output filename outside the output path","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":996,"column":75,"index":32561},"line":996,"code":"  it('allows you to use an relative output filename outside the output path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: path.join(OUTPUT_DIR, 'app'),\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: '../test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"app/index_bundle.js\"'], 'test.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"will try to use a relative name if the filename is in a subdirectory","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1009,"column":74,"index":33025},"line":1009,"code":"  it('will try to use a relative name if the filename is in a subdirectory', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'assets/test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"../index_bundle.js\"'], 'assets/test.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"will try to use a relative name if the filename and the script defer=\"defer\" are in a subdirectory","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1022,"column":104,"index":33511},"line":1022,"code":"  it('will try to use a relative name if the filename and the script defer=\"defer\" are in a subdirectory', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'assets/demo/test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"../../assets/index_bundle.js\"'], 'assets/demo/test.html', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you write multiple HTML files","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1035,"column":42,"index":33962},"line":1035,"code":"  it('allows you write multiple HTML files', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), new HtmlWebpackPlugin({\n        filename: 'second-file.html',\n        template: path.join(__dirname, 'fixtures/test.html')\n      }), new HtmlWebpackPlugin({\n        filename: 'third-file.html',\n        template: path.join(__dirname, 'fixtures/test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], null, () => {\n      expect(fs.existsSync(path.join(OUTPUT_DIR, 'second-file.html'))).toBe(true);\n      expect(fs.existsSync(path.join(OUTPUT_DIR, 'third-file.html'))).toBe(true);\n      done();\n    });\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should inject js css files even if the html file is incomplete","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1058,"column":68,"index":34825},"line":1058,"code":"  it('should inject js css files even if the html file is incomplete', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/empty_html.html')\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\"', '<script defer=\"defer\" src=\"index_bundle.js\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"exposes the webpack configuration to templates","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1079,"column":52,"index":35506},"line":1079,"code":"  it('exposes the webpack configuration to templates', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: 'https://cdn.com',\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/webpackconfig.html')\n      })]\n    }, ['Public path is https://cdn.com'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"fires the html-webpack-plugin-alter-asset-tags event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1095,"column":58,"index":36012},"line":1095,"code":"  it('fires the html-webpack-plugin-alter-asset-tags event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            expect(Object.keys(object.assetTags)).toEqual(['scripts', 'styles', 'meta']);\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows events to add a no-value attribute","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1124,"column":47,"index":36996},"line":1124,"code":"  it('allows events to add a no-value attribute', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.specialAttribute = true;\n              }\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/[\\s]*<script defer=\"defer\" src=\"app_bundle.js\" specialattribute><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows events to remove an attribute by setting it to false","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1152,"column":65,"index":38070},"line":1152,"code":"  it('allows events to remove an attribute by setting it to false', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.async = false;\n              }\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows events to remove an attribute by setting it to null","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1180,"column":64,"index":39111},"line":1180,"code":"  it('allows events to remove an attribute by setting it to null', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.async = null;\n              }\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows events to remove an attribute by setting it to undefined","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1208,"column":69,"index":40156},"line":1208,"code":"  it('allows events to remove an attribute by setting it to undefined', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.async = undefined;\n              }\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"provides the options to the afterEmit event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1236,"column":49,"index":41186},"line":1236,"code":"  it('provides the options to the afterEmit event', done => {\n    let eventArgs;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterEmit.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            eventArgs = pluginArgs;\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        foo: 'bar'\n      }), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, () => {\n      expect(eventArgs.plugin.options.foo).toBe('bar');\n      done();\n    }, false, false);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"provides the outputName to the afterEmit event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1265,"column":52,"index":42137},"line":1265,"code":"  it('provides the outputName to the afterEmit event', done => {\n    let eventArgs;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterEmit.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            eventArgs = pluginArgs;\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, () => {\n      expect(eventArgs.outputName).toBe('index.html');\n      done();\n    }, false, false);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"fires the html-webpack-plugin-after-template-execution event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1292,"column":66,"index":43073},"line":1292,"code":"  it('fires the html-webpack-plugin-after-template-execution event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterTemplateExecution.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"fires the html-webpack-plugin-before-emit event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1320,"column":53,"index":43981},"line":1320,"code":"  it('fires the html-webpack-plugin-before-emit event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"fires the html-webpack-plugin-after-emit event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1348,"column":52,"index":44876},"line":1348,"code":"  it('fires the html-webpack-plugin-after-emit event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    });\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to modify the html during html-webpack-plugin-before-emit event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1375,"column":76,"index":45707},"line":1375,"code":"  it('allows to modify the html during html-webpack-plugin-before-emit event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.html += 'Injected by plugin';\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, ['Injected by plugin'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to access all hooks from within a plugin","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1404,"column":53,"index":46672},"line":1404,"code":"  it('allows to access all hooks from within a plugin', done => {\n    let hookNames;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          hookNames = Object.keys(HtmlWebpackPlugin.getHooks(compilation)).sort();\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(hookNames).toEqual(['afterEmit', 'afterTemplateExecution', 'alterAssetTagGroups', 'alterAssetTags', 'beforeAssetTagGeneration', 'beforeEmit']);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to modify sequentially the html during html-webpack-plugin-before-emit event by edit the given arguments object","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1429,"column":124,"index":47645},"line":1429,"code":"  it('allows to modify sequentially the html during html-webpack-plugin-before-emit event by edit the given arguments object', done => {\n    let eventFiredForFirstPlugin = false;\n    let eventFiredForSecondPlugin = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForFirstPlugin = true;\n            object.html += 'Injected by first plugin';\n            callback(null, object);\n          });\n        });\n      }\n    };\n    const secondExamplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForSecondPlugin = true;\n            object.html += ' Injected by second plugin';\n            callback(null);\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin, secondExamplePlugin]\n    }, ['Injected by first plugin Injected by second plugin'], null, () => {\n      expect(eventFiredForFirstPlugin).toBe(true);\n      expect(eventFiredForSecondPlugin).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to modify sequentially the html during html-webpack-plugin-before-emit event either by edit the given arguments object or by return a new object in the callback","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1471,"column":173,"index":49375},"line":1471,"code":"  it('allows to modify sequentially the html during html-webpack-plugin-before-emit event either by edit the given arguments object or by return a new object in the callback', done => {\n    let eventFiredForFirstPlugin = false;\n    let eventFiredForSecondPlugin = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForFirstPlugin = true;\n            const result = _.extend(object, {\n              html: object.html + 'Injected by first plugin'\n            });\n            callback(null, result);\n          });\n        });\n      }\n    };\n    const secondExamplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForSecondPlugin = true;\n            object.html += ' Injected by second plugin';\n            callback(null);\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin, secondExamplePlugin]\n    }, ['Injected by first plugin Injected by second plugin'], null, () => {\n      expect(eventFiredForFirstPlugin).toBe(true);\n      expect(eventFiredForSecondPlugin).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to modify sequentially the html during html-webpack-plugin-before-emit event by return a new object in the callback","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1515,"column":128,"index":51128},"line":1515,"code":"  it('allows to modify sequentially the html during html-webpack-plugin-before-emit event by return a new object in the callback', done => {\n    let eventFiredForFirstPlugin = false;\n    let eventFiredForSecondPlugin = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForFirstPlugin = true;\n            const result = _.extend(object, {\n              html: object.html + 'Injected by first plugin'\n            });\n            callback(null, result);\n          });\n        });\n      }\n    };\n    const secondExamplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForSecondPlugin = true;\n            const result = _.extend(object, {\n              html: object.html + ' Injected by second plugin'\n            });\n            callback(null, result);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin, secondExamplePlugin]\n    }, ['Injected by first plugin Injected by second plugin'], null, () => {\n      expect(eventFiredForFirstPlugin).toBe(true);\n      expect(eventFiredForSecondPlugin).toBe(true);\n      done();\n    });\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to modify the html during html-webpack-plugin-after-template-execution event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1560,"column":89,"index":52831},"line":1560,"code":"  it('allows to modify the html during html-webpack-plugin-after-template-execution event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterTemplateExecution.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.bodyTags.push(HtmlWebpackPlugin.createHtmlTagObject('script', {\n              src: 'funky-script.js'\n            }));\n            object.html += 'Injected by plugin';\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, ['Injected by plugin', '<script src=\"funky-script.js\"'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to modify the html during html-webpack-plugin-before-asset-tag-generation event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1592,"column":92,"index":54017},"line":1592,"code":"  it('allows to modify the html during html-webpack-plugin-before-asset-tag-generation event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeAssetTagGeneration.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.assets.js.push('funky-script.js');\n            callback();\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: 'pug-loader!' + path.join(__dirname, 'fixtures/template.pug')\n      }), examplePlugin]\n    }, ['<script src=\"funky-script.js\"'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    });\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to inject files during html-webpack-plugin-before-asset-tag-generation event","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1623,"column":89,"index":55073},"line":1623,"code":"  it('allows to inject files during html-webpack-plugin-before-asset-tag-generation event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeAssetTagGeneration.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.assets.js.push('funky-script.js');\n            callback();\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, ['<script defer=\"defer\" src=\"funky-script.js\"'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    });\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"fires the events in the correct order","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1651,"column":43,"index":55985},"line":1651,"code":"  it('fires the events in the correct order', done => {\n    const hookCallOrder = ['beforeAssetTagGeneration', 'alterAssetTags', 'alterAssetTagGroups', 'afterTemplateExecution', 'beforeEmit', 'afterEmit'];\n    let eventsFired = [];\n    let hookLength = 0;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          const hooks = HtmlWebpackPlugin.getHooks(compilation);\n          hookLength = hooks.length;\n          // Hook into all hooks\n          Object.keys(hooks).forEach(hookName => {\n            hooks[hookName].tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n              eventsFired.push(hookName);\n              callback();\n            });\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(hookLength).not.toBe(0);\n      expect(eventsFired).toEqual(hookCallOrder);\n      done();\n    }, false, shouldExpectWarnings);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"works with commons chunk plugin","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1687,"column":37,"index":57270},"line":1687,"code":"  it('works with commons chunk plugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      optimization: {\n        splitChunks: {\n          cacheGroups: {\n            commons: {\n              chunks: 'initial',\n              name: 'common',\n              enforce: true\n            }\n          }\n        }\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"common_bundle.js\">[\\s\\S]*<script defer=\"defer\" src=\"util_bundle.js\">/, /<script defer=\"defer\" src=\"common_bundle.js\"[\\s\\S]*<script defer=\"defer\" src=\"index_bundle.js\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1712,"column":20,"index":58071},"line":1712,"code":"  it('adds a favicon', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a base tag with attributes","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1725,"column":37,"index":58490},"line":1725,"code":"  it('adds a base tag with attributes', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        base: {\n          href: 'http://example.com/page.html',\n          target: '_blank'\n        }\n      })]\n    }, [/<base href=\"http:\\/\\/example\\.com\\/page\\.html\" target=\"_blank\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a base tag short syntax","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1741,"column":34,"index":58973},"line":1741,"code":"  it('adds a base tag short syntax', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        base: 'http://example.com/page.html'\n      })]\n    }, [/<base href=\"http:\\/\\/example\\.com\\/page\\.html\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a meta tag","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1754,"column":21,"index":59371},"line":1754,"code":"  it('adds a meta tag', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        meta: {\n          'viewport': {\n            'name': 'viewport',\n            'content': 'width=device-width, initial-scale=1, shrink-to-fit=no'\n          }\n        }\n      })]\n    }, [/<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a meta tag with short notation","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1772,"column":41,"index":59954},"line":1772,"code":"  it('adds a meta tag with short notation', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        meta: {\n          'viewport': 'width=device-width, initial-scale=1, shrink-to-fit=no'\n        }\n      })]\n    }, [/<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with publicPath set to /some/","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1787,"column":50,"index":60477},"line":1787,"code":"  it('adds a favicon with publicPath set to /some/', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/some/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\/some\\/+[^\"]+\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with publicPath set to /some","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1801,"column":49,"index":60947},"line":1801,"code":"  it('adds a favicon with publicPath set to /some', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/some',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\/some\\/+[^\"]+\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with publicPath set to some/","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1815,"column":49,"index":61416},"line":1815,"code":"  it('adds a favicon with publicPath set to some/', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: 'some/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"some\\/+[^\"]+\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with publicPath undefined","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1829,"column":46,"index":61880},"line":1829,"code":"  it('adds a favicon with publicPath undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with publicPath undefined","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1842,"column":46,"index":62308},"line":1842,"code":"  it('adds a favicon with publicPath undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico'),\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\.\\.\\/[^\"]+\\.ico\">/], path.join('subfolder', 'test.html'), done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with a publicPath set to /[hash]/ and replaces the hash","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1856,"column":76,"index":62873},"line":1856,"code":"  it('adds a favicon with a publicPath set to /[hash]/ and replaces the hash', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/[hash]/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\/[a-z0-9]{20}\\/favicon\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with a publicPath set to [hash]/ and replaces the hash","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1870,"column":75,"index":63380},"line":1870,"code":"  it('adds a favicon with a publicPath set to [hash]/ and replaces the hash', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '[hash]/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[a-z0-9]{20}\\/favicon\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with inject enabled","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1884,"column":40,"index":63849},"line":1884,"code":"  it('adds a favicon with inject enabled', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"adds a favicon with xhtml enabled","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1898,"column":39,"index":64292},"line":1898,"code":"  it('adds a favicon with xhtml enabled', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        xhtml: true,\n        minify: {\n          keepClosingSlash: true\n        },\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\"\\/>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"shows an error if the favicon could not be load","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1916,"column":53,"index":64834},"line":1916,"code":"  it('shows an error if the favicon could not be load', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      optimization: {\n        emitOnErrors: true\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        favicon: path.join(__dirname, 'fixtures/does_not_exist.ico')\n      })]\n    }, ['Error: HtmlWebpackPlugin: could not load file'], null, done, true);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"works with webpack bannerplugin","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1933,"column":37,"index":65356},"line":1933,"code":"  it('works with webpack bannerplugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new webpack.BannerPlugin('Copyright and such.'), new HtmlWebpackPlugin()]\n    }, ['<html'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"shows an error when a template fails to load","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1944,"column":50,"index":65736},"line":1944,"code":"  it('shows an error when a template fails to load', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/non-existing-template.html')\n      })]\n    }, [Number(webpackMajorVersion) >= 5 ? 'Child compilation failed:\\n  Module not found:' : 'Child compilation failed:\\n  Entry module not found:'], null, done, true);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should sort the chunks in auto mode","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1957,"column":41,"index":66285},"line":1957,"code":"  it('should sort the chunks in auto mode', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      optimization: {\n        splitChunks: {\n          cacheGroups: {\n            commons: {\n              chunks: 'initial',\n              name: 'common',\n              enforce: true\n            }\n          }\n        }\n      },\n      plugins: [new HtmlWebpackPlugin({\n        chunksSortMode: 'auto'\n      })]\n    }, [/(<script defer=\"defer\" src=\"common_bundle.js\">.+<script defer=\"defer\" src=\"util_bundle.js\">.+<script defer=\"defer\" src=\"index_bundle.js\">)|(<script defer=\"defer\" src=\"common_bundle.js\">.+<script defer=\"defer\" src=\"index_bundle.js\">.+<script defer=\"defer\" src=\"util_bundle.js\">)/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should sort the chunks in custom (reverse alphabetical) order","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":1984,"column":67,"index":67256},"line":1984,"code":"  it('should sort the chunks in custom (reverse alphabetical) order', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        b: path.join(__dirname, 'fixtures/index.js'),\n        c: path.join(__dirname, 'fixtures/util.js'),\n        a: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        chunksSortMode: function (a, b) {\n          if (a < b) {\n            return 1;\n          }\n          if (a > b) {\n            return -1;\n          }\n          return 0;\n        }\n      })]\n    }, [/<script defer=\"defer\" src=\"c_bundle.js\">.+<script defer=\"defer\" src=\"b_bundle.js\">.+<script defer=\"defer\" src=\"a_bundle.js\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should sort manually by the chunks","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2009,"column":40,"index":68021},"line":2009,"code":"  it('should sort manually by the chunks', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        b: path.join(__dirname, 'fixtures/util.js'),\n        a: path.join(__dirname, 'fixtures/theme.js'),\n        d: path.join(__dirname, 'fixtures/util.js'),\n        c: path.join(__dirname, 'fixtures/theme.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          loader: 'css-loader'\n        }]\n      },\n      optimization: {\n        splitChunks: {\n          cacheGroups: {\n            commons: {\n              chunks: 'initial',\n              name: 'common',\n              enforce: true\n            }\n          }\n        }\n      },\n      plugins: [new HtmlWebpackPlugin({\n        chunksSortMode: 'manual',\n        chunks: ['common', 'a', 'b', 'c']\n      })]\n    }, [/<script defer=\"defer\" src=\"common_bundle.js\">.+<script defer=\"defer\" src=\"a_bundle.js\">.+<script defer=\"defer\" src=\"b_bundle.js\">.+<script defer=\"defer\" src=\"c_bundle.js\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should add the webpack compilation object as a property of the templateParam object","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2045,"column":89,"index":69164},"line":2045,"code":"  it('should add the webpack compilation object as a property of the templateParam object', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false\n      })]\n    }, ['templateParams keys: \"compilation,webpackConfig,htmlWebpackPlugin\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should add the webpack compilation object as a property of the templateParam object with cjs","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2059,"column":98,"index":69704},"line":2059,"code":"  it('should add the webpack compilation object as a property of the templateParam object with cjs', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.cjs'),\n        inject: false\n      })]\n    }, ['templateParams keys: \"compilation,webpackConfig,htmlWebpackPlugin\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to disable template parameters","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2073,"column":49,"index":70196},"line":2073,"code":"  it('should allow to disable template parameters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: false\n      })]\n    }, ['templateParams keys: \"\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to set specific template parameters","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2088,"column":54,"index":70684},"line":2088,"code":"  it('should allow to set specific template parameters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: {\n          foo: 'bar'\n        }\n      })]\n    }, ['templateParams keys: \"compilation,webpackConfig,htmlWebpackPlugin,foo\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to set specific template parameters using a function","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2105,"column":71,"index":71263},"line":2105,"code":"  it('should allow to set specific template parameters using a function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: function () {\n          return {\n            'foo': 'bar'\n          };\n        }\n      })]\n    }, ['templateParams keys: \"foo\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to set specific template parameters using a async function","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2124,"column":77,"index":71852},"line":2124,"code":"  it('should allow to set specific template parameters using a async function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: function () {\n          return Promise.resolve({\n            'foo': 'bar'\n          });\n        }\n      })]\n    }, ['templateParams keys: \"foo\"'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should not treat templateContent set to an empty string as missing","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2143,"column":72,"index":72453},"line":2143,"code":"  it('should not treat templateContent set to an empty string as missing', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'app_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        templateContent: ''\n      })]\n    }, [/^<head><script defer=\"defer\" src=\"app_bundle\\.js\"><\\/script><\\/head>$/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to inject the assets into the body of the given spaced closing tag template","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2158,"column":92,"index":72948},"line":2158,"code":"  it('allows you to inject the assets into the body of the given spaced closing tag template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'body',\n        template: path.join(__dirname, 'fixtures/spaced_plain.html')\n      })]\n    }, [/<body>[\\s]*<script defer=\"defer\" src=\"index_bundle.js\"><\\/script>[\\s]*<\\/body>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows you to inject the assets into the head of the given spaced closing tag template","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2172,"column":92,"index":73496},"line":2172,"code":"  it('allows you to inject the assets into the head of the given spaced closing tag template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'head',\n        template: path.join(__dirname, 'fixtures/spaced_plain.html')\n      })]\n    }, [/<script defer=\"defer\" src=\"index_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should minify by default when mode is production","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2186,"column":54,"index":73995},"line":2186,"code":"  it('should minify by default when mode is production', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<!doctype html><html><head><meta charset=\"utf-8\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should not minify by default when mode is development","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2197,"column":59,"index":74379},"line":2197,"code":"  it('should not minify by default when mode is development', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<!DOCTYPE html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should minify in production if options.minify is true","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2208,"column":59,"index":74773},"line":2208,"code":"  it('should minify in production if options.minify is true', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: true\n      })]\n    }, [/<!doctype html><html><head><meta charset=\"utf-8\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should minify in development if options.minify is true","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2221,"column":60,"index":75189},"line":2221,"code":"  it('should minify in development if options.minify is true', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: true\n      })]\n    }, [/<!doctype html><html><head><meta charset=\"utf-8\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should not minify in production if options.minify is false","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2234,"column":64,"index":75609},"line":2234,"code":"  it('should not minify in production if options.minify is false', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: false\n      })]\n    }, [/<!DOCTYPE html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should not minify in development if options.minify is false","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2247,"column":65,"index":76039},"line":2247,"code":"  it('should not minify in development if options.minify is false', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: false\n      })]\n    }, [/<!DOCTYPE html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow custom minify options and not merge them with the defaults","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2260,"column":77,"index":76482},"line":2260,"code":"  it('should allow custom minify options and not merge them with the defaults', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: {\n          useShortDoctype: true\n        }\n      })]\n    }, [/<!doctype html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to inject scripts with a defer=\"defer\" attribute","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2275,"column":67,"index":76952},"line":2275,"code":"  it('should allow to inject scripts with a defer=\"defer\" attribute', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer'\n      })]\n    }, [/<script defer=\"defer\" .+<body>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to inject scripts with a type=\"module\" attribute","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2288,"column":67,"index":77365},"line":2288,"code":"  it('should allow to inject scripts with a type=\"module\" attribute', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'module'\n      })]\n    }, [/<script type=\"module\" src=\"index_bundle.js\"><\\/script>.+<body>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to inject scripts with a defer=\"defer\" attribute to the body","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2301,"column":79,"index":77823},"line":2301,"code":"  it('should allow to inject scripts with a defer=\"defer\" attribute to the body', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        inject: 'body'\n      })]\n    }, [/<body>.*<script defer=\"defer\"/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to inject scripts with a defer=\"defer\" in front of styles","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2315,"column":76,"index":78268},"line":2315,"code":"  it('should allow to inject scripts with a defer=\"defer\" in front of styles', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer'\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, [/<script defer=\"defer\".+<link href=\"styles.css\"/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should keep closing slashes from the template","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2336,"column":51,"index":78888},"line":2336,"code":"  it('should keep closing slashes from the template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        templateContent: '<html><body> <selfclosed /> </body></html>'\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, [/<selfclosed\\/>/], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should add the javascript assets to the head for inject:true with scriptLoading:defer","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2358,"column":91,"index":79587},"line":2358,"code":"  it('should add the javascript assets to the head for inject:true with scriptLoading:defer', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        inject: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"></script><link href=\"styles.css\" rel=\"stylesheet\"></head>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to use headTags and bodyTags directly in string literals","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2380,"column":75,"index":80308},"line":2380,"code":"  it('should allow to use headTags and bodyTags directly in string literals', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        scriptLoading: 'blocking',\n        inject: false,\n        templateContent: ({\n          htmlWebpackPlugin\n        }) => `\n            <html>\n              <head>${htmlWebpackPlugin.tags.headTags}</head>\n              <body>${htmlWebpackPlugin.tags.bodyTags}</body>\n            </html>\n            `\n      })]\n    }, ['<head><link href=\"styles.css\" rel=\"stylesheet\"></head>', '<script src=\"index_bundle.js\"></script></body>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should add the javascript assets to the head for inject:true with scriptLoading:defer","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2410,"column":91,"index":81302},"line":2410,"code":"  it('should add the javascript assets to the head for inject:true with scriptLoading:defer', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        inject: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"></script><link href=\"styles.css\" rel=\"stylesheet\"></head>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to use headTags and bodyTags directly in string literals","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2432,"column":75,"index":82023},"line":2432,"code":"  it('should allow to use headTags and bodyTags directly in string literals', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        inject: false,\n        templateContent: ({\n          htmlWebpackPlugin\n        }) => `\n            <html>\n              <head>${htmlWebpackPlugin.tags.headTags}</head>\n              <body>${htmlWebpackPlugin.tags.bodyTags}</body>\n            </html>\n            `\n      })]\n    }, ['<head><script defer=\"defer\" src=\"index_bundle.js\"></script><link href=\"styles.css\" rel=\"stylesheet\"></head>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should allow to use experiments:{outputModule:true}","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2461,"column":57,"index":82951},"line":2461,"code":"  it('should allow to use experiments:{outputModule:true}', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        module: true\n      },\n      experiments: {\n        outputModule: true\n      },\n      plugins: [new HtmlWebpackPlugin({})]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"></script>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"generates relative path for asset/resource","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2476,"column":48,"index":83409},"line":2476,"code":"  it('generates relative path for asset/resource', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        assetModuleFilename: 'assets/demo[ext]'\n      },\n      module: {\n        rules: [{\n          test: /\\.png$/,\n          type: 'asset/resource'\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: 'html-loader!' + path.join(__dirname, 'fixtures/logo.html'),\n        filename: 'demo/index.js'\n      })]\n    }, ['<img src=\"../assets/demo.png'], 'demo/index.js', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"uses the absolute path for asset/resource","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2497,"column":47,"index":84056},"line":2497,"code":"  it('uses the absolute path for asset/resource', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        assetModuleFilename: 'assets/demo[ext]'\n      },\n      module: {\n        rules: [{\n          test: /\\.png$/,\n          type: 'asset/resource'\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: 'html-loader!' + path.join(__dirname, 'fixtures/logo.html'),\n        filename: 'demo/index.js',\n        publicPath: '/foo/'\n      })]\n    }, ['<img src=\"/foo/assets/demo.png'], 'demo/index.js', done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"generates an html file if entry is empty","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2519,"column":46,"index":84733},"line":2519,"code":"  it('generates an html file if entry is empty', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: {},\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        assetModuleFilename: 'assets/demo[ext]'\n      },\n      plugins: [new HtmlWebpackPlugin({})]\n    }, ['<body>'], null, done);\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"allows to set custom loader interpolation settings","suites":["HtmlWebpackPlugin"],"updatePoint":{"line":2531,"column":56,"index":85084},"line":2531,"code":"  it('allows to set custom loader interpolation settings', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.html$/,\n          loader: require.resolve('../lib/loader.js'),\n          options: {\n            interpolate: /\\{%=([\\s\\S]+?)%\\}/g\n          }\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        title: 'Interpolation Demo',\n        template: path.join(__dirname, 'fixtures/interpolation.html')\n      })]\n    }, ['Interpolation Demo'], null, () => {\n      done();\n    });\n  });","file":"basic.spec.js","skipped":false,"dir":"spec"},{"name":"should compile nothing if no file was changed","suites":["HtmlWebpackPluginCaching"],"updatePoint":{"line":82,"column":51,"index":2352},"line":82,"code":"  it('should compile nothing if no file was changed', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      template: template\n    });\n    let childCompilerHash;\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    compiler.run()\n    // Change the template file and compile again\n    .then(() => {\n      childCompilerHash = htmlWebpackPlugin.childCompilerHash;\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats);\n      // Verify that no file was built\n      expect(getCompiledModules(stats.toJson())).toEqual([]);\n      // Verify that the html was processed only during the initial build\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(1);\n      // Verify that the child compilation was executed twice\n      expect(htmlWebpackPlugin.childCompilerHash).toBe(childCompilerHash);\n    }).then(done);\n  });","file":"caching.spec.js","skipped":false,"dir":"spec"},{"name":"should not compile the webpack html file if only a javascript file was changed","suites":["HtmlWebpackPluginCaching"],"updatePoint":{"line":106,"column":84,"index":3433},"line":106,"code":"  it('should not compile the webpack html file if only a javascript file was changed', done => {\n    const htmlWebpackPlugin = new HtmlWebpackPlugin();\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    let childCompilerHash;\n    compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    compiler.run()\n    // Change a js file and compile again\n    .then(() => {\n      childCompilerHash = htmlWebpackPlugin.childCompilerHash;\n      compiler.simulateFileChange(path.join(__dirname, 'fixtures/index.js'), {\n        footer: '//1'\n      });\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats);\n      // Verify that only one file was built\n      expect(getCompiledModuleCount(stats.toJson())).toBe(1);\n      // Verify that the html was processed only during the initial build\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(1);\n      // Verify that the child compilation was executed only once\n      expect(htmlWebpackPlugin.childCompilerHash).toBe(childCompilerHash);\n    }).then(done);\n  });","file":"caching.spec.js","skipped":false,"dir":"spec"},{"name":"should compile the webpack html file even if only a javascript file was changed if caching is disabled","suites":["HtmlWebpackPluginCaching"],"updatePoint":{"line":130,"column":108,"index":4553},"line":130,"code":"  it('should compile the webpack html file even if only a javascript file was changed if caching is disabled', done => {\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      cache: false\n    });\n    let childCompilerHash;\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    compiler.run()\n    // Change a js file and compile again\n    .then(() => {\n      childCompilerHash = htmlWebpackPlugin.childCompilerHash;\n      compiler.simulateFileChange(path.join(__dirname, 'fixtures/index.js'), {\n        footer: '//1'\n      });\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats);\n      // Verify that only one file was built\n      expect(getCompiledModuleCount(stats.toJson())).toBe(1);\n      // Verify that the html was processed on every run\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(2);\n      // Verify that the child compilation was executed only once\n      expect(htmlWebpackPlugin.childCompilerHash).toBe(childCompilerHash);\n    }).then(done);\n  });","file":"caching.spec.js","skipped":false,"dir":"spec"},{"name":"should compile the webpack html if the template file was changed","suites":["HtmlWebpackPluginCaching"],"updatePoint":{"line":156,"column":70,"index":5644},"line":156,"code":"  it('should compile the webpack html if the template file was changed', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      template: template\n    });\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(template);\n    compiler.run()\n    // Change the template file and compile again\n    .then(() => {\n      compiler.simulateFileChange(template, {\n        footer: '<!-- 1 -->'\n      });\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats);\n      // Verify that only one file was built\n      expect(getCompiledModuleCount(stats.toJson())).toBe(1);\n      // Verify that the html was processed twice\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(2);\n      const [evaluateCompilationResultArgs1, evaluateCompilationResultArgs2] = htmlWebpackPlugin.evaluateCompilationResult.mock.calls;\n      const compiledSource = evaluateCompilationResultArgs1[0];\n      const compiledSourceSecondRun = evaluateCompilationResultArgs2[0];\n\n      // Verify that the child compilation was executed twice\n      expect(compiledSource).not.toBe(compiledSourceSecondRun);\n    }).then(done);\n  });","file":"caching.spec.js","skipped":false,"dir":"spec"},{"name":"should not slow down linear (10 plugins should not take 2.5 as much time as a 1 plugin)","suites":["HtmlWebpackPluginCaching"],"updatePoint":{"line":185,"column":93,"index":6940},"line":185,"code":"  it('should not slow down linear (10 plugins should not take 2.5 as much time as a 1 plugin)', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n    const createHtmlWebpackPlugin = () => new HtmlWebpackPlugin({\n      template: template,\n      minify: false\n    });\n    let singlePluginCompileStart;\n    let singleCompileRunDuration;\n    let multiPluginComileStart;\n    let multiCompileRunDuration;\n    let singleCompiler = setUpCompiler(createHtmlWebpackPlugin());\n    let multiCompiler = setUpCompiler.apply(null, Array(10).fill(0).map(() => createHtmlWebpackPlugin()));\n    Promise.resolve().then(function singleCompileRun() {\n      singlePluginCompileStart = process.hrtime();\n      return singleCompiler.run()\n      // Change the template file and compile again\n      .then(() => {\n        singleCompileRunDuration = process.hrtime(singlePluginCompileStart);\n      });\n    }).then(function multiCompileRun() {\n      multiPluginComileStart = process.hrtime();\n      return multiCompiler.run()\n      // Change the template file and compile again\n      .then(() => {\n        multiCompileRunDuration = process.hrtime(multiPluginComileStart);\n      });\n    }).then(function meassureTime() {\n      const singleCompileRunDurationInNs = singleCompileRunDuration[0] * 1e9 + singleCompileRunDuration[1];\n      const multiCompileRunDurationInNs = multiCompileRunDuration[0] * 1e9 + multiCompileRunDuration[1];\n      const speedComarision = multiCompileRunDurationInNs / singleCompileRunDurationInNs * 100;\n      expect(speedComarision).toBeLessThan(250);\n      done();\n    });\n  });","file":"caching.spec.js","skipped":false,"dir":"spec"},{"name":"should keep watching the webpack html if only a js file was changed","suites":["HtmlWebpackPluginCaching"],"updatePoint":{"line":219,"column":73,"index":8523},"line":219,"code":"  it('should keep watching the webpack html if only a js file was changed', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n    const jsFile = path.join(__dirname, 'fixtures/index.js');\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      template: template\n    });\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(template);\n    compiler.addTestFile(jsFile);\n    // Build the template file for the first time\n    compiler.startWatching()\n    // Change the template file (second build)\n    .then(() => {\n      compiler.simulateFileChange(template, {\n        footer: '<!-- 1 -->'\n      });\n      return compiler.waitForWatchRunComplete();\n    })\n    // Change js\n    .then(() => {\n      compiler.simulateFileChange(jsFile, {\n        footer: '// 1'\n      });\n      return compiler.waitForWatchRunComplete();\n    })\n    // Change js\n    .then(() => {\n      compiler.simulateFileChange(jsFile, {\n        footer: '// 2'\n      });\n      return compiler.waitForWatchRunComplete();\n    })\n    // Change js\n    .then(() => {\n      compiler.simulateFileChange(jsFile, {\n        footer: '// 3'\n      });\n      return compiler.waitForWatchRunComplete();\n    })\n    // Change the template file (third build)\n    .then(() => {\n      compiler.simulateFileChange(template, {\n        footer: '<!-- 2 -->'\n      });\n      return compiler.waitForWatchRunComplete();\n    }).then(() => {\n      // Verify that the html was processed trice\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(3);\n    }).then(() => compiler.stopWatching()).then(done);\n  });","file":"caching.spec.js","skipped":false,"dir":"spec"},{"name":"custom-template example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":63,"column":29,"index":2261},"line":63,"code":"  it('custom-template example', done => {\n    runExample('custom-template', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"default example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":66,"column":21,"index":2342},"line":66,"code":"  it('default example', done => {\n    runExample('default', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"favicon example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":69,"column":21,"index":2415},"line":69,"code":"  it('favicon example', done => {\n    runExample('favicon', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"html-loader example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":72,"column":25,"index":2492},"line":72,"code":"  it('html-loader example', done => {\n    runExample('html-loader', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"inline example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":75,"column":20,"index":2568},"line":75,"code":"  it('inline example', done => {\n    runExample('inline', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"pug-loader example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":78,"column":24,"index":2643},"line":78,"code":"  it('pug-loader example', done => {\n    runExample('pug-loader', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"javascript example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":81,"column":24,"index":2722},"line":81,"code":"  it('javascript example', done => {\n    runExample('javascript', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"javascript-advanced example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":84,"column":33,"index":2810},"line":84,"code":"  it('javascript-advanced example', done => {\n    runExample('javascript-advanced', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"sort manually example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":87,"column":27,"index":2901},"line":87,"code":"  it('sort manually example', done => {\n    runExample('sort-manually', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"multi-page example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":90,"column":24,"index":2983},"line":90,"code":"  it('multi-page example', done => {\n    runExample('multi-page', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"template-parameters example","suites":["HtmlWebpackPlugin Examples"],"updatePoint":{"line":93,"column":33,"index":3071},"line":93,"code":"  it('template-parameters example', done => {\n    runExample('template-parameters', done);\n  });","file":"example.spec.js","skipped":false,"dir":"spec"},{"name":"should not cause errors for the main compilation if hot-reload is active","suites":["HtmlWebpackPluginHMR"],"updatePoint":{"line":26,"column":78,"index":1015},"line":26,"code":"  it('should not cause errors for the main compilation if hot-reload is active', () => {\n    const config = {\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR\n      },\n      plugins: [new webpack.HotModuleReplacementPlugin(), new HtmlWebpackPlugin({\n        template: DEFAULT_TEMPLATE\n      })]\n    };\n    const compiler = new WebpackRecompilationSimulator(webpack(config));\n    const jsFileTempPath = compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    fs.writeFileSync(jsFileTempPath, 'module.exports = function calc(a, b){ return a + b };');\n    return compiler.startWatching()\n    // Change the template file and compile again\n    .then(() => {\n      fs.writeFileSync(jsFileTempPath, 'module.exports = function calc(a, b){ return a - b };');\n      return compiler.waitForWatchRunComplete();\n    }).then(stats => {\n      expect(stats.compilation.errors).toEqual([]);\n    }).then(() => compiler.stopWatching());\n  });","file":"hot.spec.js","skipped":false,"dir":"spec"},{"name":"should not cause missing hot-reloaded code of the main compilation","suites":["HtmlWebpackPluginHMR"],"updatePoint":{"line":49,"column":72,"index":2021},"line":49,"code":"  it('should not cause missing hot-reloaded code of the main compilation', () => {\n    const config = {\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      target: 'node',\n      output: {\n        path: OUTPUT_DIR\n      },\n      plugins: [new webpack.HotModuleReplacementPlugin(), new HtmlWebpackPlugin({\n        template: DEFAULT_TEMPLATE\n      })]\n    };\n    const compiler = new WebpackRecompilationSimulator(webpack(config));\n    const jsFileTempPath = compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    fs.writeFileSync(jsFileTempPath, 'global = 1; module.hot.accept();');\n    return compiler.startWatching()\n    // Change the template file and compile again\n    .then(() => {\n      fs.writeFileSync(jsFileTempPath, 'global = 2; module.hot.accept();');\n      return compiler.waitForWatchRunComplete();\n    }).then(stats => {\n      const hotUpdateJsFileNames = Object.keys(stats.compilation.assets).filter(fileName => /\\.hot-update\\.js$/.test(fileName));\n      expect(hotUpdateJsFileNames).not.toEqual([]);\n      expect(hotUpdateJsFileNames.length).toEqual(1);\n      const hotUpdateFileSize = stats.compilation.assets[hotUpdateJsFileNames[0]].size();\n      expect(hotUpdateFileSize).not.toEqual(0);\n    }).then(() => compiler.stopWatching());\n  });","file":"hot.spec.js","skipped":false,"dir":"spec"}]}