{
    "repo": "reactide/reactide",
    "url": "https://github.com/reactide/reactide",
    "branch": "master",
    "configs": [
        {
            "package": "reactide",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should render",
            "suites": [
                "React Components",
                "CreateForm"
            ],
            "updatePoint": {
                "line": 34,
                "column": 21
            },
            "line": 34,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(CreateForm, {\n        createItem: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire keypress event when key is pressed",
            "suites": [
                "React Components",
                "CreateForm"
            ],
            "updatePoint": {
                "line": 40,
                "column": 54
            },
            "line": 40,
            "code": "    it('should fire keypress event when key is pressed', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(CreateForm, {\n        createItem: spy\n      }));\n      wrapper.find('input').simulate('keyPress');\n      expect(spy.called).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "CreateMenu"
            ],
            "updatePoint": {
                "line": 50,
                "column": 21
            },
            "line": 50,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n        createMenuHandler: () => {},\n        id: 1\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire",
            "suites": [
                "React Components",
                "CreateMenu",
                "File create onClick"
            ],
            "updatePoint": {
                "line": 58,
                "column": 21
            },
            "line": 58,
            "code": "      it('should fire', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy,\n          id: 1\n        }));\n        wrapper.find('button').first().simulate('click');\n        expect(spy.called).toEqual(true);\n      });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be called with proper params",
            "suites": [
                "React Components",
                "CreateMenu",
                "File create onClick"
            ],
            "updatePoint": {
                "line": 67,
                "column": 45
            },
            "line": 67,
            "code": "      it('should be called with proper params', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy,\n          id: 1\n        }));\n        wrapper.find('button').first().simulate('click');\n        expect(spy.calledWith(1, 'file')).toEqual(true);\n      });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire",
            "suites": [
                "React Components",
                "CreateMenu",
                "Directory create onClick"
            ],
            "updatePoint": {
                "line": 78,
                "column": 21
            },
            "line": 78,
            "code": "      it('should fire', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy\n        }));\n        wrapper.find('button').at(1).simulate('click');\n        expect(spy.called).toEqual(true);\n      });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be called with proper params",
            "suites": [
                "React Components",
                "CreateMenu",
                "Directory create onClick"
            ],
            "updatePoint": {
                "line": 86,
                "column": 45
            },
            "line": 86,
            "code": "      it('should be called with proper params', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy,\n          id: 1\n        }));\n        wrapper.find('button').at(1).simulate('click');\n        expect(spy.calledWith(1, 'directory')).toEqual(true);\n      });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "DeletePrompt"
            ],
            "updatePoint": {
                "line": 98,
                "column": 21
            },
            "line": 98,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render prop name",
            "suites": [
                "React Components",
                "DeletePrompt"
            ],
            "updatePoint": {
                "line": 104,
                "column": 31
            },
            "line": 104,
            "code": "    it('should render prop name', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: () => {},\n        name: \"Jonny Greenwood\"\n      }));\n      expect(wrapper.find('h1').text()).toEqual('Are you sure you want to delete Jonny Greenwood?');\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be false when no is clicked",
            "suites": [
                "React Components",
                "DeletePrompt"
            ],
            "updatePoint": {
                "line": 111,
                "column": 42
            },
            "line": 111,
            "code": "    it('should be false when no is clicked', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: spy,\n        name: \"Jonny Greenwood\"\n      }));\n      wrapper.find('button').first().simulate('click');\n      expect(spy.calledWith(false)).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be true when yes is clicked",
            "suites": [
                "React Components",
                "DeletePrompt"
            ],
            "updatePoint": {
                "line": 120,
                "column": 42
            },
            "line": 120,
            "code": "    it('should be true when yes is clicked', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: spy,\n        name: \"Jonny Greenwood\"\n      }));\n      wrapper.find('button').at(1).simulate('click');\n      expect(spy.calledWith(true)).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 131,
                "column": 21
            },
            "line": 131,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the right amount of subdirectories",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 148,
                "column": 56
            },
            "line": 148,
            "code": "    it('should render the right amount of subdirectories', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          files: [],\n          opened: true\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(Directory).length).toEqual(2);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the right amount of files",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 170,
                "column": 47
            },
            "line": 170,
            "code": "    it('should render the right amount of files', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          opened: true\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(File).length).toEqual(2);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the right amount of both subdirectories and files",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 192,
                "column": 71
            },
            "line": 192,
            "code": "    it('should render the right amount of both subdirectories and files', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          files: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          opened: true\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(File).length).toEqual(2);\n      expect(wrapper.find(Directory).length).toEqual(2);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shouldn't render any subdirectories or files if directory.opened = false",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 219,
                "column": 81
            },
            "line": 219,
            "code": "    it('shouldn\\'t render any subdirectories or files if directory.opened = false', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          files: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          opened: false\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(File).length).toEqual(0);\n      expect(wrapper.find(Directory).length).toEqual(0);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should invoke clickHandler on click",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 246,
                "column": 43
            },
            "line": 246,
            "code": "    it('should invoke clickHandler on click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: spy,\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      wrapper.find('.list-item').simulate('click');\n      expect(spy.called).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should invoke clickHandler with the right arguments",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 265,
                "column": 59
            },
            "line": 265,
            "code": "    it('should invoke clickHandler with the right arguments', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: [],\n          path: 'light',\n          type: 'my'\n        },\n        clickHandler: spy,\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1\n      }));\n      wrapper.find('.list-item').simulate('click');\n      expect(spy.calledWith(1, 'light', 'my')).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render CreateMenu if openMenuId is equal to id",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 287,
                "column": 61
            },
            "line": 287,
            "code": "    it('should render CreateMenu if openMenuId is equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1,\n        openMenuId: 1\n      }));\n      expect(wrapper.find(CreateMenu).exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shouldn't render CreateMenu if openMenuId is not equal to id",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 306,
                "column": 69
            },
            "line": 306,
            "code": "    it('shouldn\\'t render CreateMenu if openMenuId is not equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find(CreateMenu).exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render CreateForm if createMenuInfo.id is equal to id",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 325,
                "column": 68
            },
            "line": 325,
            "code": "    it('should render CreateForm if createMenuInfo.id is equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find(CreateForm).exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render CreateForm if createMenuInfo.id is not equal to id",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 344,
                "column": 76
            },
            "line": 344,
            "code": "    it('should not render CreateForm if createMenuInfo.id is not equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find(CreateForm).exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "item should have class name selected if selected (selectedItem.id === id)",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 363,
                "column": 81
            },
            "line": 363,
            "code": "    it('item should have class name selected if selected (selectedItem.id === id)', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find('.list-nested-item .selected').exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "item should not have class name selected if not selected (selectedItem.id !== id)",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 382,
                "column": 89
            },
            "line": 382,
            "code": "    it('item should not have class name selected if not selected (selectedItem.id !== id)', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 2\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find('.list-nested-item .selected').exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render RenameForm if renameFlag && selectedItem.id === id",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 401,
                "column": 72
            },
            "line": 401,
            "code": "    it('should render RenameForm if renameFlag && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2,\n        renameFlag: true\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render RenameForm if renameFlag && selectedItem.id !== id",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 421,
                "column": 76
            },
            "line": 421,
            "code": "    it('should not render RenameForm if renameFlag && selectedItem.id !== id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 2\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2,\n        renameFlag: false\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render the directory/file if renameFlag && selectedItem.id === id",
            "suites": [
                "React Components",
                "Directory"
            ],
            "updatePoint": {
                "line": 441,
                "column": 84
            },
            "line": 441,
            "code": "    it('should not render the directory/file if renameFlag && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2,\n        renameFlag: true\n      }));\n      expect(wrapper.find('.list-item').exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 463,
                "column": 21
            },
            "line": 463,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: ''\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call dblClickHandler on doubleClick",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 477,
                "column": 50
            },
            "line": 477,
            "code": "    it('should call dblClickHandler on doubleClick', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: ''\n        },\n        dblClickHandler: spy,\n        clickHandler: () => {}\n      }));\n      wrapper.simulate('doubleClick');\n      expect(spy.called).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call dblClickHandler with file on doubleClick",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 493,
                "column": 60
            },
            "line": 493,
            "code": "    it('should call dblClickHandler with file on doubleClick', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: 'a',\n          name: 'a'\n        },\n        dblClickHandler: spy,\n        clickHandler: () => {}\n      }));\n      wrapper.simulate('doubleClick');\n      expect(spy.calledWith({\n        path: 'a',\n        name: 'a'\n      })).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call clickHandler on single click",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 512,
                "column": 48
            },
            "line": 512,
            "code": "    it('should call clickHandler on single click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: ''\n        },\n        dblClickHandler: () => {},\n        clickHandler: spy\n      }));\n      wrapper.simulate('click');\n      expect(spy.called).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call clickHandler with id and file.path on single click",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 528,
                "column": 70
            },
            "line": 528,
            "code": "    it('should call clickHandler with id and file.path on single click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        file: {\n          path: 'a',\n          name: ''\n        },\n        dblClickHandler: () => {},\n        clickHandler: spy\n      }));\n      wrapper.simulate('click');\n      expect(spy.calledWith(1, 'a')).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the name of the file",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 545,
                "column": 42
            },
            "line": 545,
            "code": "    it('should render the name of the file', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find('span').text()).toEqual('Jonny Greenwood');\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render RenameForm if rename && selectedItem.id === id",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 559,
                "column": 68
            },
            "line": 559,
            "code": "    it('should render RenameForm if rename && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        renameFlag: true,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render RenameForm if rename && selectedItem.id === id",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 575,
                "column": 72
            },
            "line": 575,
            "code": "    it('should not render RenameForm if rename && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        renameFlag: false,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have className list-item selected if selectedItem.id === id",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 591,
                "column": 74
            },
            "line": 591,
            "code": "    it('should have className list-item selected if selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        renameFlag: false,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find('.selected').exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not have className selected if selectedItem.id === id",
            "suites": [
                "React Components",
                "File"
            ],
            "updatePoint": {
                "line": 607,
                "column": 68
            },
            "line": 607,
            "code": "    it('should not have className selected if selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 2,\n        renameFlag: false,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find('.selected').exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "FileTree"
            ],
            "updatePoint": {
                "line": 625,
                "column": 21
            },
            "line": 625,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(FileTree, null));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render file tree if passed to FileTree",
            "suites": [
                "React Components",
                "FileTree"
            ],
            "updatePoint": {
                "line": 629,
                "column": 53
            },
            "line": 629,
            "code": "    it('should render file tree if passed to FileTree', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(FileTree, {\n        fileTree: true\n      }));\n      const directory = wrapper.find(Directory);\n      expect(directory.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render file tree if not passed to FileTree",
            "suites": [
                "React Components",
                "FileTree"
            ],
            "updatePoint": {
                "line": 636,
                "column": 61
            },
            "line": 636,
            "code": "    it('should not render file tree if not passed to FileTree', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(FileTree, {\n        fileTree: false\n      }));\n      const directory = wrapper.find(Directory);\n      expect(directory.exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "Rename Form"
            ],
            "updatePoint": {
                "line": 645,
                "column": 21
            },
            "line": 645,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(RenameForm, {\n        renameHandler: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call renameHandler on keyPress",
            "suites": [
                "React Components",
                "Rename Form"
            ],
            "updatePoint": {
                "line": 651,
                "column": 45
            },
            "line": 651,
            "code": "    it('should call renameHandler on keyPress', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(RenameForm, {\n        renameHandler: spy\n      }));\n      wrapper.find('input').simulate('keyPress');\n      expect(spy.called).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "Tab"
            ],
            "updatePoint": {
                "line": 661,
                "column": 21
            },
            "line": 661,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire setActiveTab on click",
            "suites": [
                "React Components",
                "Tab"
            ],
            "updatePoint": {
                "line": 668,
                "column": 41
            },
            "line": 668,
            "code": "    it('should fire setActiveTab on click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        setActiveTab: spy,\n        closeTab: () => {}\n      }));\n      wrapper.find('li').simulate('click');\n      expect(spy.called).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire setActiveTab on click",
            "suites": [
                "React Components",
                "Tab"
            ],
            "updatePoint": {
                "line": 677,
                "column": 41
            },
            "line": 677,
            "code": "    it('should fire setActiveTab on click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        closeTab: spy,\n        setActiveTab: () => {}\n      }));\n      wrapper.find('.close-icon').simulate('click');\n      expect(spy.called).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render prop name",
            "suites": [
                "React Components",
                "Tab"
            ],
            "updatePoint": {
                "line": 686,
                "column": 31
            },
            "line": 686,
            "code": "    it('should render prop name', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        closeTab: () => {},\n        setActiveTab: () => {},\n        name: \"Reactide\"\n      }));\n      expect(wrapper.find('.title').text()).toEqual('Reactide');\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass id into setActiveTab",
            "suites": [
                "React Components",
                "Tab"
            ],
            "updatePoint": {
                "line": 694,
                "column": 40
            },
            "line": 694,
            "code": "    it('should pass id into setActiveTab', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        closeTab: () => {},\n        setActiveTab: spy,\n        id: 1\n      }));\n      wrapper.find('li').simulate('click');\n      expect(spy.calledWithMatch(1)).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass id into closeTab",
            "suites": [
                "React Components",
                "Tab"
            ],
            "updatePoint": {
                "line": 704,
                "column": 36
            },
            "line": 704,
            "code": "    it('should pass id into closeTab', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        setActiveTab: () => {},\n        closeTab: spy,\n        id: 1\n      }));\n      wrapper.find('.close-icon').simulate('click');\n      expect(spy.calledWithMatch(1)).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "TabContainer"
            ],
            "updatePoint": {
                "line": 716,
                "column": 21
            },
            "line": 716,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TabContainer, {\n        appState: {\n          openTabs: [{\n            name: 'Jonny Greenwood',\n            id: 1\n          }]\n        }\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the right amount of tabs",
            "suites": [
                "React Components",
                "TabContainer"
            ],
            "updatePoint": {
                "line": 727,
                "column": 46
            },
            "line": 727,
            "code": "    it('should render the right amount of tabs', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TabContainer, {\n        appState: {\n          openTabs: [{\n            name: 'Jonny Greenwood',\n            id: 1\n          }, {\n            name: 'Thom Yorke',\n            id: 2\n          }]\n        },\n        setActiveTab: () => {}\n      }));\n      expect(wrapper.find(Tab).length).toEqual(2);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "TextEditor"
            ],
            "updatePoint": {
                "line": 744,
                "column": 21
            },
            "line": 744,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, null));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render div with class editor-container",
            "suites": [
                "React Components",
                "TextEditor"
            ],
            "updatePoint": {
                "line": 748,
                "column": 53
            },
            "line": 748,
            "code": "    it('should render div with class editor-container', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, null));\n      expect(wrapper.find('.editor-container').exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render with className 'block' if id is equal to active tab id",
            "suites": [
                "React Components",
                "TextEditor"
            ],
            "updatePoint": {
                "line": 752,
                "column": 78
            },
            "line": 752,
            "code": "    it('should render with className \\'block\\' if id is equal to active tab id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, {\n        id: 1,\n        activeTab: 1\n      }));\n      chai.expect(wrapper.find('.item-views')).to.have.style('display', 'block');\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render with className 'none' if id is not equal to active tab id",
            "suites": [
                "React Components",
                "TextEditor"
            ],
            "updatePoint": {
                "line": 759,
                "column": 81
            },
            "line": 759,
            "code": "    it('should render with className \\'none\\' if id is not equal to active tab id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, {\n        id: 1,\n        activeTab: 2\n      }));\n      chai.expect(wrapper.find('.item-views')).to.have.style('display', 'none');\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render",
            "suites": [
                "React Components",
                "TextEditorPane"
            ],
            "updatePoint": {
                "line": 768,
                "column": 21
            },
            "line": 768,
            "code": "    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: () => {}\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render TextEditor when openTabs.length > 0",
            "suites": [
                "React Components",
                "TextEditorPane"
            ],
            "updatePoint": {
                "line": 778,
                "column": 57
            },
            "line": 778,
            "code": "    it('should render TextEditor when openTabs.length > 0', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [{\n            id: 1\n          }],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TextEditor).exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render TextEditors for each open tab",
            "suites": [
                "React Components",
                "TextEditorPane"
            ],
            "updatePoint": {
                "line": 791,
                "column": 51
            },
            "line": 791,
            "code": "    it('should render TextEditors for each open tab', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TextEditor).length).toEqual(2);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render TextEditor when openTabs.length = 0",
            "suites": [
                "React Components",
                "TextEditorPane"
            ],
            "updatePoint": {
                "line": 806,
                "column": 61
            },
            "line": 806,
            "code": "    it('should not render TextEditor when openTabs.length = 0', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TextEditor).exists()).toEqual(false);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a TabContainer",
            "suites": [
                "React Components",
                "TextEditorPane"
            ],
            "updatePoint": {
                "line": 817,
                "column": 36
            },
            "line": 817,
            "code": "    it('should render a TabContainer', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TabContainer).exists()).toEqual(true);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass props to TabContainer",
            "suites": [
                "React Components",
                "TextEditorPane"
            ],
            "updatePoint": {
                "line": 828,
                "column": 41
            },
            "line": 828,
            "code": "    it('should pass props to TabContainer', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [],\n          activeTab: 1\n        },\n        setActiveTab: () => {\n          return 1;\n        },\n        closeTab: () => {\n          return 1;\n        },\n        addEditorInstance: () => {\n          return 1;\n        }\n      }));\n      expect(wrapper.find(TabContainer).props().closeTab()).toEqual(1);\n      expect(wrapper.find(TabContainer).props().setActiveTab()).toEqual(1);\n      expect(wrapper.find(TabContainer).props().appState).toEqual({\n        openTabs: [],\n        activeTab: 1\n      });\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass props to TextEditor",
            "suites": [
                "React Components",
                "TextEditorPane"
            ],
            "updatePoint": {
                "line": 851,
                "column": 39
            },
            "line": 851,
            "code": "    it('should pass props to TextEditor', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [{\n            id: 1\n          }],\n          activeTab: 1\n        },\n        activeTab: 1,\n        setActiveTab: () => {\n          return 1;\n        },\n        closeTab: () => {\n          return 1;\n        },\n        addEditorInstance: () => {\n          return 1;\n        }\n      }));\n      const TE = wrapper.find(TextEditor);\n      expect(TE.props().id).toEqual(1);\n      expect(TE.props().tab).toEqual({\n        id: 1\n      });\n      expect(TE.props().addEditorInstance()).toEqual(1);\n      expect(TE.props().activeTab).toEqual(1);\n    });",
            "file": "test.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "reactide__reactide.svg"
}