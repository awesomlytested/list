{"repo":"svgdotjs/svg.js","url":"https://github.com/svgdotjs/svg.js","branch":"master","configs":[{"package":"@svgdotjs/svg.js","lang":"js","dir":"spec","framework":"jasmine","pattern":"**/*.{js,ts}"}],"tests":[{"name":"calls a function after a specific time","suites":["Animator.js","timeout()"],"line":17,"updatePoint":{"line":17,"column":46,"index":601},"code":"    it('calls a function after a specific time', () => {\n      var spy = jasmine.createSpy('tester');\n      Animator.timeout(spy, 100);\n      jasmine.RequestAnimationFrame.tick(99);\n      expect(spy).not.toHaveBeenCalled();\n      jasmine.RequestAnimationFrame.tick();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/animation/Animator.js","skipped":false,"dir":"spec"},{"name":"cancels a timeout which was created with timeout()","suites":["Animator.js","cancelTimeout()"],"line":27,"updatePoint":{"line":27,"column":58,"index":971},"code":"    it('cancels a timeout which was created with timeout()', () => {\n      var spy = jasmine.createSpy('tester');\n      var id = Animator.timeout(spy, 100);\n      Animator.clearTimeout(id);\n      expect(spy).not.toHaveBeenCalled();\n      jasmine.RequestAnimationFrame.tick(100);\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"spec/animation/Animator.js","skipped":false,"dir":"spec"},{"name":"calls a function at the next animationFrame","suites":["Animator.js","frame()"],"line":37,"updatePoint":{"line":37,"column":51,"index":1329},"code":"    it('calls a function at the next animationFrame', () => {\n      var spy = jasmine.createSpy('tester');\n      Animator.frame(spy);\n      expect(spy).not.toHaveBeenCalled();\n      jasmine.RequestAnimationFrame.tick();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/animation/Animator.js","skipped":false,"dir":"spec"},{"name":"cancels a single frame which was created with frame()","suites":["Animator.js","cancelFrame()"],"line":46,"updatePoint":{"line":46,"column":61,"index":1647},"code":"    it('cancels a single frame which was created with frame()', () => {\n      var spy = jasmine.createSpy('tester');\n      const id = Animator.frame(spy);\n      Animator.cancelFrame(id);\n      expect(spy).not.toHaveBeenCalled();\n      jasmine.RequestAnimationFrame.tick();\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"spec/animation/Animator.js","skipped":false,"dir":"spec"},{"name":"calls a function at the next animationFrame but after all frames are processed","suites":["Animator.js","immediate()"],"line":56,"updatePoint":{"line":56,"column":86,"index":2035},"code":"    it('calls a function at the next animationFrame but after all frames are processed', () => {\n      var spy = jasmine.createSpy('tester');\n      Animator.immediate(spy);\n      expect(spy).not.toHaveBeenCalled();\n      jasmine.RequestAnimationFrame.tick();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/animation/Animator.js","skipped":false,"dir":"spec"},{"name":"cancels an immediate cakk which was created with immediate()","suites":["Animator.js","cancelImmediate()"],"line":65,"updatePoint":{"line":65,"column":68,"index":2368},"code":"    it('cancels an immediate cakk which was created with immediate()', () => {\n      var spy = jasmine.createSpy('tester');\n      const id = Animator.immediate(spy);\n      Animator.cancelImmediate(id);\n      expect(spy).not.toHaveBeenCalled();\n      jasmine.RequestAnimationFrame.tick();\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"spec/animation/Animator.js","skipped":false,"dir":"spec"},{"name":"is 0 at 0","suites":["Controller.js","easing"],"line":19,"updatePoint":{"line":19,"column":21,"index":492},"code":"        it('is 0 at 0', () => {\n          expect(easing[el](0)).toBe(0);\n        });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is 1 at 1","suites":["Controller.js","easing"],"line":22,"updatePoint":{"line":22,"column":21,"index":577},"code":"        it('is 1 at 1', () => {\n          expect(Math.round(easing[el](1) * 1000) / 1000).toBe(1); // we need to round cause for some reason at some point 1==0.999999999\n        });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is eased at 0.5","suites":["Controller.js","easing"],"line":26,"updatePoint":{"line":26,"column":27,"index":766},"code":"        it('is eased at 0.5', () => {\n          expect(easing[el](0.5)).toBeCloseTo(easedValues[el]);\n        });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is 0 at 0","suites":["Controller.js","easing","beziere()"],"line":37,"updatePoint":{"line":37,"column":19,"index":1178},"code":"      it('is 0 at 0', () => {\n        expect(b1(0)).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is 1 at 1","suites":["Controller.js","easing","beziere()"],"line":40,"updatePoint":{"line":40,"column":19,"index":1249},"code":"      it('is 1 at 1', () => {\n        expect(b1(1)).toBe(1);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is eased at 0.5","suites":["Controller.js","easing","beziere()"],"line":43,"updatePoint":{"line":43,"column":25,"index":1326},"code":"      it('is eased at 0.5', () => {\n        expect(b1(0.5)).toBe(0.5);\n        expect(b2(0.5)).toBe(0.3125);\n        expect(b3(0.5)).toBe(1.0625);\n        expect(b4(0.5)).toBe(1.25);\n        expect(b5(0.5)).toBe(-1);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"handles values bigger 1","suites":["Controller.js","easing","beziere()"],"line":50,"updatePoint":{"line":50,"column":33,"index":1561},"code":"      it('handles values bigger 1', () => {\n        expect(b1(1.5)).toBe(1.5);\n        expect(b2(1.5)).toBe(1.5);\n        expect(b3(1.5)).toBe(1.5);\n        expect(b4(1.5)).toBe(1);\n        expect(b5(1.5)).toBe(1.5);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"handles values lower 0","suites":["Controller.js","easing","beziere()"],"line":57,"updatePoint":{"line":57,"column":32,"index":1787},"code":"      it('handles values lower 0', () => {\n        expect(b1(-0.5)).toBe(-0.5);\n        expect(b2(-0.5)).toBe(-0.5);\n        expect(b3(-0.5)).toBe(-0.5);\n        expect(b4(-0.5)).toBe(-0.5);\n        expect(b5(-0.5)).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is 0 at 0","suites":["Controller.js","easing","steps()"],"line":71,"updatePoint":{"line":71,"column":19,"index":2251},"code":"      it('is 0 at 0', () => {\n        expect(s1(0)).toBe(0);\n        expect(s1(0, true)).toBe(0);\n        expect(s2(0)).toBe(0.2);\n        expect(s2(0, true)).toBe(0);\n        expect(s3(0)).toBe(0);\n        expect(s3(0, true)).toBe(0);\n        expect(s4(0)).toBe(0);\n        expect(s4(0, true)).toBe(0);\n        expect(s5(0)).toBe(1 / 6);\n        expect(s5(0, true)).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"also works at values < 0","suites":["Controller.js","easing","steps()"],"line":83,"updatePoint":{"line":83,"column":34,"index":2652},"code":"      it('also works at values < 0', () => {\n        expect(s1(-0.1)).toBe(-0.2);\n        expect(s1(-0.1, true)).toBe(-0.2);\n        expect(s2(-0.1)).toBe(0);\n        expect(s2(-0.1, true)).toBe(0);\n        expect(s3(-0.1)).toBe(-0.2);\n        expect(s3(-0.1, true)).toBe(-0.2);\n        expect(s4(-0.1)).toBe(-0.25);\n        expect(s4(-0.1, true)).toBe(-0.25);\n        expect(s5(-0.1)).toBe(0);\n        expect(s5(-0.1, true)).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is 1 at 1","suites":["Controller.js","easing","steps()"],"line":95,"updatePoint":{"line":95,"column":19,"index":3082},"code":"      it('is 1 at 1', () => {\n        expect(s1(1)).toBe(1);\n        expect(s1(1, true)).toBe(0.8);\n        expect(s2(1)).toBe(1);\n        expect(s2(1, true)).toBe(1);\n        expect(s3(1)).toBe(1);\n        expect(s3(1, true)).toBe(0.8);\n        expect(s4(1)).toBe(1);\n        expect(s4(1, true)).toBe(1);\n        expect(s5(1)).toBe(1);\n        expect(s5(1, true)).toBe(5 / 6);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"also works at values > 1","suites":["Controller.js","easing","steps()"],"line":107,"updatePoint":{"line":107,"column":34,"index":3485},"code":"      it('also works at values > 1', () => {\n        expect(s1(1.1)).toBe(1);\n        expect(s1(1.1, true)).toBe(1);\n        expect(s2(1.1)).toBe(1.2);\n        expect(s2(1.1, true)).toBe(1.2);\n        expect(s3(1.1)).toBe(1);\n        expect(s3(1.1, true)).toBe(1);\n        expect(s4(1.1)).toBe(1.25);\n        expect(s4(1.1, true)).toBe(1.25);\n        expect(s5(1.1)).toBe(1);\n        expect(s5(1.1, true)).toBe(1);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is eased at 0.1","suites":["Controller.js","easing","steps()"],"line":119,"updatePoint":{"line":119,"column":25,"index":3901},"code":"      it('is eased at 0.1', () => {\n        expect(s1(0.1)).toBe(0);\n        expect(s1(0.1, true)).toBe(0);\n        expect(s2(0.1)).toBe(0.2);\n        expect(s2(0.1, true)).toBe(0);\n        expect(s3(0.1)).toBe(0);\n        expect(s3(0.1, true)).toBe(0);\n        expect(s4(0.1)).toBe(0);\n        expect(s4(0.1, true)).toBe(0);\n        expect(s5(0.1)).toBe(1 / 6);\n        expect(s5(0.1, true)).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is eased at 0.15","suites":["Controller.js","easing","steps()"],"line":131,"updatePoint":{"line":131,"column":26,"index":4314},"code":"      it('is eased at 0.15', () => {\n        expect(s1(0.15)).toBe(0);\n        expect(s1(0.15, true)).toBe(0);\n        expect(s2(0.15)).toBe(0.2);\n        expect(s2(0.15, true)).toBe(0);\n        expect(s3(0.15)).toBe(0);\n        expect(s3(0.15, true)).toBe(0);\n        expect(s4(0.15)).toBe(0);\n        expect(s4(0.15, true)).toBe(0);\n        expect(s5(0.15)).toBe(1 / 6);\n        expect(s5(0.15, true)).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is eased at 0.2","suites":["Controller.js","easing","steps()"],"line":143,"updatePoint":{"line":143,"column":25,"index":4736},"code":"      it('is eased at 0.2', () => {\n        expect(s1(0.2)).toBe(0.2);\n        expect(s1(0.2, true)).toBe(0.2);\n        expect(s2(0.2)).toBe(0.4);\n        expect(s2(0.2, true)).toBe(0.4);\n        expect(s3(0.2)).toBe(0.2);\n        expect(s3(0.2, true)).toBe(0.2);\n        expect(s4(0.2)).toBe(0.25);\n        expect(s4(0.2, true)).toBe(0.25);\n        expect(s5(0.2)).toBe(1 / 3);\n        expect(s5(0.2, true)).toBe(1 / 3);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is eased at 0.25","suites":["Controller.js","easing","steps()"],"line":155,"updatePoint":{"line":155,"column":26,"index":5169},"code":"      it('is eased at 0.25', () => {\n        expect(s1(0.25)).toBe(0.2);\n        expect(s1(0.25, true)).toBe(0.2);\n        expect(s2(0.25)).toBe(0.4);\n        expect(s2(0.25, true)).toBe(0.4);\n        expect(s3(0.25)).toBe(0.2);\n        expect(s3(0.25, true)).toBe(0.2);\n        expect(s4(0.25)).toBe(0.25);\n        expect(s4(0.25, true)).toBe(0.25);\n        expect(s5(0.25)).toBe(1 / 3);\n        expect(s5(0.25, true)).toBe(1 / 3);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"has a done() method","suites":["Controller.js","Stepper"],"line":170,"updatePoint":{"line":170,"column":27,"index":5657},"code":"    it('has a done() method', () => {\n      const stepper = new Stepper();\n      expect(stepper).toEqual(any(Stepper));\n      expect(stepper.done()).toBe(false);\n    });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"wraps the default easing function by default","suites":["Controller.js","Ease","()"],"line":178,"updatePoint":{"line":178,"column":54,"index":5914},"code":"      it('wraps the default easing function by default', () => {\n        const ease = new Ease();\n        expect(ease.ease).toBe(easing[defaults.timeline.ease]);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"wraps an easing function found in \"easing\"","suites":["Controller.js","Ease","()"],"line":182,"updatePoint":{"line":182,"column":52,"index":6084},"code":"      it('wraps an easing function found in \"easing\"', () => {\n        const ease = new Ease('-');\n        expect(ease.ease).toBe(easing['-']);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"wraps a a custom easing function","suites":["Controller.js","Ease","()"],"line":186,"updatePoint":{"line":186,"column":42,"index":6228},"code":"      it('wraps a a custom easing function', () => {\n        const ease = new Ease(easing['-']);\n        expect(ease.ease).toBe(easing['-']);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"provides an eased value to a position","suites":["Controller.js","Ease","step()"],"line":192,"updatePoint":{"line":192,"column":47,"index":6424},"code":"      it('provides an eased value to a position', () => {\n        let ease = new Ease(easing['-']);\n        expect(ease.step(2, 4, 0.5)).toBe(3);\n        ease = new Ease(() => 3);\n        expect(ease.step(2, 4, 0.5)).toBe(8);\n        ease = new Ease();\n        expect(ease.step(2, 4, 0.5)).toBeCloseTo(3.414, 3);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"jumps to \"to\" value at pos 1 if from is not a number","suites":["Controller.js","Ease","step()"],"line":200,"updatePoint":{"line":200,"column":62,"index":6762},"code":"      it('jumps to \"to\" value at pos 1 if from is not a number', () => {\n        const ease = new Ease('-');\n        expect(ease.step('Hallo', 'Welt', 0.999)).toBe('Hallo');\n        expect(ease.step('Hallo', 'Welt', 1)).toBe('Welt');\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"constructs a controller with the given stepper function set","suites":["Controller.js","Controller","()"],"line":209,"updatePoint":{"line":209,"column":69,"index":7087},"code":"      it('constructs a controller with the given stepper function set', () => {\n        const spy = createSpy();\n        const controller = new Controller(spy);\n        expect(controller).toEqual(any(Controller));\n        expect(controller.stepper).toBe(spy);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"runs the stepper with current value, target value, dt and context","suites":["Controller.js","Controller","step()"],"line":217,"updatePoint":{"line":217,"column":75,"index":7402},"code":"      it('runs the stepper with current value, target value, dt and context', () => {\n        const spy = createSpy().and.returnValue('foo');\n        const controller = new Controller(spy);\n        expect(controller.step(10, 20, 30, 'bar')).toBe('foo');\n        expect(spy).toHaveBeenCalledWith(10, 20, 30, 'bar');\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"returns given values \"done\" property","suites":["Controller.js","Controller","done()"],"line":225,"updatePoint":{"line":225,"column":46,"index":7737},"code":"      it('returns given values \"done\" property', () => {\n        const spy = createSpy();\n        const controller = new Controller(spy);\n        expect(controller.done({\n          done: 'yes'\n        })).toBe('yes');\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"creates a spring with default duration and overshoot","suites":["Controller.js","Spring","()"],"line":236,"updatePoint":{"line":236,"column":62,"index":8051},"code":"      it('creates a spring with default duration and overshoot', () => {\n        const spring = new Spring();\n        expect(spring).toEqual(any(Spring));\n        expect(spring.duration()).toBe(500);\n        expect(spring.overshoot()).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"creates a spring with given duration and overshoot","suites":["Controller.js","Spring","()"],"line":242,"updatePoint":{"line":242,"column":60,"index":8303},"code":"      it('creates a spring with given duration and overshoot', () => {\n        const spring = new Spring(100, 10);\n        expect(spring).toEqual(any(Spring));\n        expect(spring.duration()).toBe(100);\n        expect(spring.overshoot()).toBe(10);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"gets and sets a new duration for the spring controller","suites":["Controller.js","Spring","duration()"],"line":250,"updatePoint":{"line":250,"column":64,"index":8610},"code":"      it('gets and sets a new duration for the spring controller', () => {\n        const spring = new Spring().duration(100);\n        expect(spring.duration()).toBe(100);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"gets and sets a new overshoot for the spring controller","suites":["Controller.js","Spring","overshoot()"],"line":256,"updatePoint":{"line":256,"column":65,"index":8836},"code":"      it('gets and sets a new overshoot for the spring controller', () => {\n        const spring = new Spring().overshoot(10);\n        expect(spring.overshoot()).toBe(10);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"calculates the new spring position","suites":["Controller.js","Spring","step()"],"line":262,"updatePoint":{"line":262,"column":44,"index":9036},"code":"      it('calculates the new spring position', () => {\n        const spring = new Spring();\n        expect(spring.step(0, 100, 16, {})).toBeCloseTo(0.793, 3);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"returns current if current is a string","suites":["Controller.js","Spring","step()"],"line":266,"updatePoint":{"line":266,"column":48,"index":9209},"code":"      it('returns current if current is a string', () => {\n        const spring = new Spring();\n        expect(spring.step('Hallo', 'Welt', 16, {})).toBe('Hallo');\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"returns current if dt is 0","suites":["Controller.js","Spring","step()"],"line":270,"updatePoint":{"line":270,"column":36,"index":9371},"code":"      it('returns current if dt is 0', () => {\n        const spring = new Spring();\n        expect(spring.step(0, 100, 0, {})).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is done if dt is infinity and returns target","suites":["Controller.js","Spring","step()"],"line":274,"updatePoint":{"line":274,"column":54,"index":9535},"code":"      it('is done if dt is infinity and returns target', () => {\n        const spring = new Spring();\n        const context = {};\n        expect(spring.step(0, 100, Infinity, context)).toBe(100);\n        expect(spring.done(context)).toBe(true);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"uses dt of 16 if it is over 100","suites":["Controller.js","Spring","step()"],"line":280,"updatePoint":{"line":280,"column":41,"index":9777},"code":"      it('uses dt of 16 if it is over 100', () => {\n        const spring = new Spring();\n        expect(spring.step(0, 100, 101, {})).toBe(spring.step(0, 100, 16, {}));\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"creates a PID controller with default values","suites":["Controller.js","PID","()"],"line":288,"updatePoint":{"line":288,"column":54,"index":10036},"code":"      it('creates a PID controller with default values', () => {\n        const pid = new PID();\n        expect(pid).toEqual(any(PID));\n        expect(pid.p()).toBe(0.1);\n        expect(pid.i()).toBe(0.01);\n        expect(pid.d()).toBe(0);\n        expect(pid.windup()).toBe(1000);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"creates a PID controller with given values","suites":["Controller.js","PID","()"],"line":296,"updatePoint":{"line":296,"column":52,"index":10324},"code":"      it('creates a PID controller with given values', () => {\n        const pid = new PID(1, 2, 3, 4);\n        expect(pid).toEqual(any(PID));\n        expect(pid.p()).toBe(1);\n        expect(pid.i()).toBe(2);\n        expect(pid.d()).toBe(3);\n        expect(pid.windup()).toBe(4);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"gets and sets the p parameter of the controller","suites":["Controller.js","PID","p()"],"line":306,"updatePoint":{"line":306,"column":57,"index":10655},"code":"      it('gets and sets the p parameter of the controller', () => {\n        const pid = new PID().p(100);\n        expect(pid.p()).toBe(100);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"gets and sets the i parameter of the controller","suites":["Controller.js","PID","i()"],"line":312,"updatePoint":{"line":312,"column":57,"index":10842},"code":"      it('gets and sets the i parameter of the controller', () => {\n        const pid = new PID().i(100);\n        expect(pid.i()).toBe(100);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"gets and sets the d parameter of the controller","suites":["Controller.js","PID","d()"],"line":318,"updatePoint":{"line":318,"column":57,"index":11029},"code":"      it('gets and sets the d parameter of the controller', () => {\n        const pid = new PID().d(100);\n        expect(pid.d()).toBe(100);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"gets and sets the windup parameter of the controller","suites":["Controller.js","PID","windup()"],"line":324,"updatePoint":{"line":324,"column":62,"index":11226},"code":"      it('gets and sets the windup parameter of the controller', () => {\n        const pid = new PID().windup(100);\n        expect(pid.windup()).toBe(100);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"returns current if current is a string","suites":["Controller.js","PID","step()"],"line":330,"updatePoint":{"line":330,"column":48,"index":11417},"code":"      it('returns current if current is a string', () => {\n        const pid = new PID();\n        expect(pid.step('Hallo', 'Welt', 16, {})).toBe('Hallo');\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"returns current if dt is 0","suites":["Controller.js","PID","step()"],"line":334,"updatePoint":{"line":334,"column":36,"index":11570},"code":"      it('returns current if dt is 0', () => {\n        const pid = new PID();\n        expect(pid.step(0, 100, 0, {})).toBe(0);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"is done if dt is infinity and returns target","suites":["Controller.js","PID","step()"],"line":338,"updatePoint":{"line":338,"column":54,"index":11725},"code":"      it('is done if dt is infinity and returns target', () => {\n        const pid = new PID();\n        const context = {};\n        expect(pid.step(0, 100, Infinity, context)).toBe(100);\n        expect(pid.done(context)).toBe(true);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"calculates a new value","suites":["Controller.js","PID","step()"],"line":344,"updatePoint":{"line":344,"column":32,"index":11946},"code":"      it('calculates a new value', () => {\n        const pid = new PID();\n        expect(pid.step(0, 100, 16, {})).toBe(20);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"uses antiwindup to restrict i power","suites":["Controller.js","PID","step()"],"line":348,"updatePoint":{"line":348,"column":45,"index":12094},"code":"      it('uses antiwindup to restrict i power', () => {\n        const pid = new PID(0, 5, 0, 100);\n        expect(pid.step(0, 100, 1000, {})).toBe(500);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"doesnt uses antiwindup if disabled","suites":["Controller.js","PID","step()"],"line":352,"updatePoint":{"line":352,"column":44,"index":12256},"code":"      it('doesnt uses antiwindup if disabled', () => {\n        const pid = new PID(0, 5, 0, false);\n        expect(pid.step(0, 100, 1000, {})).toBe(500000);\n      });","file":"spec/animation/Controller.js","skipped":false,"dir":"spec"},{"name":"sets a default stepper","suites":["Morphable.js","()"],"line":12,"updatePoint":{"line":12,"column":30,"index":450},"code":"    it('sets a default stepper', () => {\n      const morpher = new Morphable();\n      expect(morpher.stepper().ease).toBe(easing['-']);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"sets the passed stepper","suites":["Morphable.js","()"],"line":16,"updatePoint":{"line":16,"column":31,"index":595},"code":"    it('sets the passed stepper', () => {\n      const ease = new Ease();\n      const morpher = new Morphable(ease);\n      expect(morpher.stepper()).toBe(ease);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Morphable with SVGNumber","suites":["Morphable.js","constructors"],"line":23,"updatePoint":{"line":23,"column":32,"index":805},"code":"    it('Morphable with SVGNumber', () => {\n      const morpher = new Morphable().from(10).to(5);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(SVGNumber);\n      expect(morpher.at(0.5)).toEqual(any(SVGNumber));\n      expect(morpher.at(0.5).valueOf()).toBe(7.5);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Morphable with String","suites":["Morphable.js","constructors"],"line":30,"updatePoint":{"line":30,"column":29,"index":1106},"code":"    it('Morphable with String', () => {\n      const morpher = new Morphable().from('foo').to('bar');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(NonMorphable);\n      expect(morpher.at(0.5)).toEqual(any(NonMorphable));\n      expect(morpher.at(0.5).valueOf()).toBe('foo');\n      expect(morpher.at(1).valueOf()).toBe('bar');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Morphable with Object","suites":["Morphable.js","constructors"],"line":38,"updatePoint":{"line":38,"column":29,"index":1473},"code":"    it('Morphable with Object', () => {\n      const morpher = new Morphable().from({\n        a: 5,\n        b: 10\n      }).to({\n        a: 10,\n        b: 20\n      });\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(ObjectBag);\n      expect(morpher.at(0.5)).toEqual(any(Object));\n      expect(morpher.at(0.5).valueOf()).toEqual(objectContaining({\n        a: new SVGNumber(7.5),\n        b: new SVGNumber(15)\n      }));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Morphable from object containing css values","suites":["Morphable.js","constructors"],"line":54,"updatePoint":{"line":54,"column":51,"index":1952},"code":"    it('Morphable from object containing css values', () => {\n      const morpher = new Morphable().from({\n        opacity: '0',\n        'stroke-width': '10px'\n      }).to({\n        opacity: 1,\n        'stroke-width': 20\n      });\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(ObjectBag);\n      expect(morpher.at(0.5)).toEqual(any(Object));\n      expect(morpher.at(0.5).valueOf()).toEqual(objectContaining({\n        opacity: new SVGNumber(0.5),\n        'stroke-width': new SVGNumber('15px')\n      }));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an SVGNumber","suites":["Morphable.js","constructors"],"line":70,"updatePoint":{"line":70,"column":47,"index":2493},"code":"    it('Creates a morphable out of an SVGNumber', () => {\n      const morpher = new SVGNumber(5).to(10);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(SVGNumber);\n      expect(morpher.at(0.5)).toEqual(any(SVGNumber));\n      expect(morpher.at(0.5).valueOf()).toBe(7.5);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an Color","suites":["Morphable.js","constructors"],"line":77,"updatePoint":{"line":77,"column":43,"index":2801},"code":"    it('Creates a morphable out of an Color', () => {\n      const morpher = new Color('#fff').to('#000');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(Color);\n      expect(morpher.at(0.5)).toEqual(any(Color));\n      expect(morpher.at(0.5).toHex()).toBe('#808080');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an Box","suites":["Morphable.js","constructors"],"line":84,"updatePoint":{"line":84,"column":41,"index":3108},"code":"    it('Creates a morphable out of an Box', () => {\n      const morpher = new Box(1, 2, 3, 4).to([5, 6, 7, 8]);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(Box);\n      expect(morpher.at(0.5)).toEqual(any(Box));\n      expect(morpher.at(0.5)).toEqual(objectContaining({\n        x: 3,\n        y: 4,\n        width: 5,\n        height: 6\n      }));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an Matrix","suites":["Morphable.js","constructors"],"line":96,"updatePoint":{"line":96,"column":44,"index":3499},"code":"    it('Creates a morphable out of an Matrix', () => {\n      const morpher = new Matrix(1, 2, 3, 4, 5, 6).to([3, 4, 5, 6, 7, 8]);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(Matrix);\n      expect(morpher.at(0.5)).toEqual(any(Matrix));\n      expect(morpher.at(0.5)).toEqual(objectContaining(new Matrix(2, 3, 4, 5, 6, 7)));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an SVGArray","suites":["Morphable.js","constructors"],"line":103,"updatePoint":{"line":103,"column":46,"index":3868},"code":"    it('Creates a morphable out of an SVGArray', () => {\n      const morpher = new SVGArray([1, 2, 3, 4, 5, 6]).to([3, 4, 5, 6, 7, 8]);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(SVGArray);\n      expect(morpher.at(0.5)).toEqual(any(SVGArray));\n      expect(morpher.at(0.5).toArray()).toEqual(arrayContaining([2, 3, 4, 5, 6, 7]));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an PointArray","suites":["Morphable.js","constructors"],"line":110,"updatePoint":{"line":110,"column":48,"index":4246},"code":"    it('Creates a morphable out of an PointArray', () => {\n      const morpher = new PointArray([1, 2, 3, 4, 5, 6]).to([3, 4, 5, 6, 7, 8]);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(PointArray);\n      expect(morpher.at(0.5)).toEqual(any(PointArray));\n      expect(morpher.at(0.5).toArray()).toEqual(arrayContaining([2, 3, 4, 5, 6, 7]));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an PathArray","suites":["Morphable.js","constructors"],"line":117,"updatePoint":{"line":117,"column":47,"index":4629},"code":"    it('Creates a morphable out of an PathArray', () => {\n      const morpher = new PathArray(['M', 1, 2, 'L', 3, 4, 'L', 5, 6]).to(['M', 3, 4, 'L', 5, 6, 'L', 7, 8]);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(PathArray);\n      expect(morpher.at(0.5)).toEqual(any(PathArray));\n      expect(morpher.at(0.5).toArray()).toEqual(arrayContaining(['M', 2, 3, 'L', 4, 5, 'L', 6, 7]));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates a morphable from unmorphable types","suites":["Morphable.js","constructors"],"line":124,"updatePoint":{"line":124,"column":50,"index":5057},"code":"    it('creates a morphable from unmorphable types', () => {\n      const morpher = new Morphable().from('Hallo').to('Welt');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(NonMorphable);\n      expect(morpher.at(0.5)).toEqual(any(NonMorphable));\n      expect(morpher.at(0.5).valueOf()).toBe('Hallo');\n      expect(morpher.at(1).valueOf()).toBe('Welt');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an TransformBag","suites":["Morphable.js","constructors"],"line":132,"updatePoint":{"line":132,"column":50,"index":5451},"code":"    it('Creates a morphable out of an TransformBag', () => {\n      const morpher = new TransformBag({\n        rotate: 0,\n        translateX: 0\n      }).to({\n        rotate: 50,\n        translateX: 20\n      });\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(TransformBag);\n      expect(morpher.at(0.5)).toEqual(any(TransformBag));\n      expect(morpher.at(0.5)).toEqual(objectContaining({\n        rotate: 25,\n        translateX: 10\n      }));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"Creates a morphable out of an ObjectBag","suites":["Morphable.js","constructors"],"line":148,"updatePoint":{"line":148,"column":47,"index":5931},"code":"    it('Creates a morphable out of an ObjectBag', () => {\n      const morpher = new ObjectBag({\n        a: 5,\n        b: 10\n      }).to({\n        a: 10,\n        b: 20\n      });\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(ObjectBag);\n      expect(morpher.at(0.5)).toEqual(any(Object));\n      expect(morpher.at(0.5).valueOf()).toEqual(objectContaining({\n        a: new SVGNumber(7.5),\n        b: new SVGNumber(15)\n      }));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates a morphable from a color string","suites":["Morphable.js","constructors"],"line":164,"updatePoint":{"line":164,"column":47,"index":6399},"code":"    it('creates a morphable from a color string', () => {\n      let morpher = new Morphable().from('#fff').to('#000');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(Color);\n      expect(morpher.at(0.5)).toEqual(any(Color));\n      expect(morpher.at(0.5).toHex()).toBe('#808080');\n      morpher = new Morphable().from('rgb(255,255,255)').to('rgb(0,0,0)');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(Color);\n      expect(morpher.at(0.5)).toEqual(any(Color));\n      expect(morpher.at(0.5).toHex()).toBe('#808080');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates a morphable from path string","suites":["Morphable.js","constructors"],"line":176,"updatePoint":{"line":176,"column":44,"index":6988},"code":"    it('creates a morphable from path string', () => {\n      const morpher = new Morphable().from('M 0 0 L 10 10').to('M 0 0 L 20 20');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(PathArray);\n      expect(morpher.at(0.5)).toEqual(any(PathArray));\n      expect(morpher.at(0.5).toString()).toBe('M0 0L15 15 ');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates a morphable from number string","suites":["Morphable.js","constructors"],"line":183,"updatePoint":{"line":183,"column":46,"index":7344},"code":"    it('creates a morphable from number string', () => {\n      let morpher = new Morphable().from('10').to('20');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(SVGNumber);\n      expect(morpher.at(0.5)).toEqual(any(SVGNumber));\n      expect(morpher.at(0.5).toString()).toBe('15');\n      morpher = new Morphable().from('10px').to('20px');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(SVGNumber);\n      expect(morpher.at(0.5)).toEqual(any(SVGNumber));\n      expect(morpher.at(0.5).toString()).toBe('15px');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates a morphable from delimited string","suites":["Morphable.js","constructors"],"line":195,"updatePoint":{"line":195,"column":49,"index":7930},"code":"    it('creates a morphable from delimited string', () => {\n      const morpher = new Morphable().from(' 0 1,  2  , 3  ').to('4,5,6,7');\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(SVGArray);\n      expect(morpher.at(0.5)).toEqual(any(SVGArray));\n      expect(morpher.at(0.5)).toEqual([2, 3, 4, 5]);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates a morphable from an array","suites":["Morphable.js","constructors"],"line":202,"updatePoint":{"line":202,"column":41,"index":8266},"code":"    it('creates a morphable from an array', () => {\n      const morpher = new Morphable().from([0, 1, 2, 3]).to([4, 5, 6, 7]);\n      expect(morpher).toEqual(any(Morphable));\n      expect(morpher.type()).toBe(SVGArray);\n      expect(morpher.at(0.5)).toEqual(any(SVGArray));\n      expect(morpher.at(0.5)).toEqual([2, 3, 4, 5]);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"converts the to-color to the from-type","suites":["Morphable.js","constructors"],"line":209,"updatePoint":{"line":209,"column":46,"index":8605},"code":"    it('converts the to-color to the from-type', () => {\n      const morpher = new Color('#fff').to(new Color(1, 2, 3, 'hsl'));\n      expect(new Color(morpher.from()).space).toBe('rgb');\n      expect(morpher.at(0.5).space).toBe('rgb');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"converts the from-color to the to-type","suites":["Morphable.js","constructors"],"line":214,"updatePoint":{"line":214,"column":46,"index":8849},"code":"    it('converts the from-color to the to-type', () => {\n      const morpher = new Morphable().to(new Color(1, 2, 3, 'hsl')).from('#fff');\n      expect(new Color(morpher.from()).space).toBe('hsl');\n      expect(morpher.at(0.5).space).toBe('hsl');\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"sets the type of the runner","suites":["Morphable.js","from()"],"line":221,"updatePoint":{"line":221,"column":35,"index":9128},"code":"    it('sets the type of the runner', () => {\n      const morpher = new Morphable().from(5);\n      expect(morpher.type()).toBe(SVGNumber);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"sets the from attribute to an array representation of the morphable type","suites":["Morphable.js","from()"],"line":225,"updatePoint":{"line":225,"column":80,"index":9320},"code":"    it('sets the from attribute to an array representation of the morphable type', () => {\n      const morpher = new Morphable().from(5);\n      expect(morpher.from()).toEqual(arrayContaining([5]));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"sets the type of the runner","suites":["Morphable.js","type()"],"line":231,"updatePoint":{"line":231,"column":35,"index":9516},"code":"    it('sets the type of the runner', () => {\n      const morpher = new Morphable().type(SVGNumber);\n      expect(morpher._type).toBe(SVGNumber);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"gets the type of the runner","suites":["Morphable.js","type()"],"line":235,"updatePoint":{"line":235,"column":35,"index":9670},"code":"    it('gets the type of the runner', () => {\n      const morpher = new Morphable().type(SVGNumber);\n      expect(morpher.type()).toBe(SVGNumber);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"sets the type of the runner","suites":["Morphable.js","to()"],"line":241,"updatePoint":{"line":241,"column":35,"index":9858},"code":"    it('sets the type of the runner', () => {\n      const morpher = new Morphable().to(5);\n      expect(morpher.type()).toBe(SVGNumber);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"sets the from attribute to an array representation of the morphable type","suites":["Morphable.js","to()"],"line":245,"updatePoint":{"line":245,"column":80,"index":10048},"code":"    it('sets the from attribute to an array representation of the morphable type', () => {\n      const morpher = new Morphable().to(5);\n      expect(morpher.to()).toEqual(arrayContaining([5]));\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"sets and gets the stepper of the Morphable","suites":["Morphable.js","stepper()"],"line":251,"updatePoint":{"line":251,"column":50,"index":10258},"code":"    it('sets and gets the stepper of the Morphable', () => {\n      const stepper = new Stepper();\n      const morpher = new Morphable().stepper(stepper);\n      expect(morpher.stepper()).toBe(stepper);\n    });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"wraps any type into a NonMorphable from an array","suites":["Morphable.js","NonMorphable","()"],"line":259,"updatePoint":{"line":259,"column":58,"index":10543},"code":"      it('wraps any type into a NonMorphable from an array', () => {\n        const non = new NonMorphable([5]);\n        expect(non.valueOf()).toBe(5);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"wraps any type into a NonMorphable from any type","suites":["Morphable.js","NonMorphable","()"],"line":263,"updatePoint":{"line":263,"column":58,"index":10704},"code":"      it('wraps any type into a NonMorphable from any type', () => {\n        expect(new NonMorphable(5).valueOf()).toBe(5);\n        expect(new NonMorphable('Hello').valueOf()).toBe('Hello');\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"returns array representation of NonMorphable","suites":["Morphable.js","NonMorphable","toArray()"],"line":269,"updatePoint":{"line":269,"column":54,"index":10943},"code":"      it('returns array representation of NonMorphable', () => {\n        expect(new NonMorphable(5).toArray()).toEqual([5]);\n        expect(new NonMorphable('Hello').toArray()).toEqual(['Hello']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates an object which holds transformations for morphing by passing array","suites":["Morphable.js","TransformBag","()"],"line":277,"updatePoint":{"line":277,"column":85,"index":11257},"code":"      it('creates an object which holds transformations for morphing by passing array', () => {\n        const bag = new TransformBag([0, 1, 2, 3, 4, 5, 6, 7]);\n        expect(bag.toArray()).toEqual([0, 1, 2, 3, 4, 5, 6, 7]);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates an object which holds transformations for morphing by passing object","suites":["Morphable.js","TransformBag","()"],"line":281,"updatePoint":{"line":281,"column":86,"index":11493},"code":"      it('creates an object which holds transformations for morphing by passing object', () => {\n        const bag = new TransformBag({\n          scaleX: 0,\n          scaleY: 1,\n          shear: 2,\n          rotate: 3,\n          translateX: 4,\n          translateY: 5,\n          originX: 6,\n          originY: 7\n        });\n        expect(bag.toArray()).toEqual([0, 1, 2, 3, 4, 5, 6, 7]);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates an array out of the transform values","suites":["Morphable.js","TransformBag","toArray()"],"line":296,"updatePoint":{"line":296,"column":54,"index":11902},"code":"      it('creates an array out of the transform values', () => {\n        const bag = new TransformBag([0, 1, 2, 3, 4, 5, 6, 7]);\n        expect(bag.toArray()).toEqual([0, 1, 2, 3, 4, 5, 6, 7]);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"wraps an object into a morphable object by passing an array","suites":["Morphable.js","ObjectBag","()"],"line":304,"updatePoint":{"line":304,"column":69,"index":12194},"code":"      it('wraps an object into a morphable object by passing an array', () => {\n        const bag = new ObjectBag(['foo', SVGNumber, 2, 1, '', 'bar', SVGNumber, 2, 2, '', 'baz', SVGNumber, 2, 3, '']);\n        expect(bag.values).toEqual(['foo', SVGNumber, 2, 1, '', 'bar', SVGNumber, 2, 2, '', 'baz', SVGNumber, 2, 3, '']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"wraps an object into a morphable object by passing an object","suites":["Morphable.js","ObjectBag","()"],"line":308,"updatePoint":{"line":308,"column":70,"index":12528},"code":"      it('wraps an object into a morphable object by passing an object', () => {\n        const bag = new ObjectBag({\n          foo: 1,\n          bar: 2,\n          baz: 3\n        });\n        expect(bag.values).toEqual(['bar', SVGNumber, 2, 2, '', 'baz', SVGNumber, 2, 3, '', 'foo', SVGNumber, 2, 1, '']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"wraps an object with morphable values in an ObjectBag","suites":["Morphable.js","ObjectBag","()"],"line":316,"updatePoint":{"line":316,"column":63,"index":12835},"code":"      it('wraps an object with morphable values in an ObjectBag', () => {\n        const bag = new ObjectBag({\n          fill: new Color(),\n          bar: 2\n        });\n        expect(bag.values).toEqual(['bar', SVGNumber, 2, 2, '', 'fill', Color, 5, 0, 0, 0, 0, 'rgb']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"wraps an array with morphable representation in an ObjectBag","suites":["Morphable.js","ObjectBag","()"],"line":323,"updatePoint":{"line":323,"column":70,"index":13123},"code":"      it('wraps an array with morphable representation in an ObjectBag', () => {\n        const bag = new ObjectBag(['bar', SVGNumber, 2, 2, '', 'fill', Color, 5, 0, 0, 0, 0, 'rgb']);\n        expect(bag.toArray()).toEqual(['bar', SVGNumber, 2, 2, '', 'fill', Color, 5, 0, 0, 0, 0, 'rgb']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates an array out of the object","suites":["Morphable.js","ObjectBag","toArray()"],"line":329,"updatePoint":{"line":329,"column":44,"index":13438},"code":"      it('creates an array out of the object', () => {\n        const bag = new ObjectBag({\n          foo: 1,\n          bar: 2,\n          baz: 3\n        });\n        expect(bag.toArray()).toEqual(['bar', SVGNumber, 2, 2, '', 'baz', SVGNumber, 2, 3, '', 'foo', SVGNumber, 2, 1, '']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates a flattened array out of the object with morphable values","suites":["Morphable.js","ObjectBag","toArray()"],"line":337,"updatePoint":{"line":337,"column":75,"index":13760},"code":"      it('creates a flattened array out of the object with morphable values', () => {\n        const bag = new ObjectBag({\n          fill: new Color(),\n          bar: 2\n        });\n        expect(bag.toArray()).toEqual(['bar', SVGNumber, 2, 2, '', 'fill', Color, 5, 0, 0, 0, 0, 'rgb']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates morphable objects from the stored values","suites":["Morphable.js","ObjectBag","valueOf()"],"line":346,"updatePoint":{"line":346,"column":58,"index":14081},"code":"      it('creates morphable objects from the stored values', () => {\n        const bag = new ObjectBag({\n          foo: 1,\n          bar: 2,\n          baz: 3\n        });\n        expect(bag.valueOf()).toEqual({\n          foo: new SVGNumber(1),\n          bar: new SVGNumber(2),\n          baz: new SVGNumber(3)\n        });\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"creates also morphable objects from the stored values","suites":["Morphable.js","ObjectBag","valueOf()"],"line":358,"updatePoint":{"line":358,"column":63,"index":14416},"code":"      it('creates also morphable objects from the stored values', () => {\n        const bag = new ObjectBag({\n          fill: new Color(),\n          bar: 2\n        });\n        expect(bag.valueOf()).toEqual({\n          fill: objectContaining(new Color()),\n          bar: new SVGNumber(2)\n        });\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"aligns color spaces between two object bags","suites":["Morphable.js","ObjectBag","align()"],"line":370,"updatePoint":{"line":370,"column":53,"index":14755},"code":"      it('aligns color spaces between two object bags', () => {\n        const bag1 = new ObjectBag({\n          x: 1,\n          y: '#fff'\n        });\n        const bag2 = new ObjectBag({\n          x: 2,\n          y: new Color().hsl()\n        });\n        bag1.align(bag2.toArray());\n        expect(bag1.toArray()).toEqual(['x', SVGNumber, 2, 1, '', 'y', Color, 5, 0, 0, 100, 0, 'hsl']);\n      });","file":"spec/animation/Morphable.js","skipped":false,"dir":"spec"},{"name":"returns null if no item in the queue","suites":["Queue.js","first ()"],"line":6,"updatePoint":{"line":6,"column":44,"index":199},"code":"    it('returns null if no item in the queue', function () {\n      var queue = new Queue();\n      expect(queue.first()).toEqual(null);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"returns the first value in the queue","suites":["Queue.js","first ()"],"line":10,"updatePoint":{"line":10,"column":44,"index":342},"code":"    it('returns the first value in the queue', function () {\n      var queue = new Queue();\n      queue.push(1);\n      expect(queue.first()).toBe(1);\n      queue.push(2);\n      expect(queue.first()).toBe(1);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"returns null if no item in the queue","suites":["Queue.js","last ()"],"line":19,"updatePoint":{"line":19,"column":44,"index":600},"code":"    it('returns null if no item in the queue', function () {\n      var queue = new Queue();\n      expect(queue.last()).toEqual(null);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"returns the last value added","suites":["Queue.js","last ()"],"line":23,"updatePoint":{"line":23,"column":36,"index":734},"code":"    it('returns the last value added', function () {\n      var queue = new Queue();\n      queue.push(1);\n      expect(queue.last()).toBe(1);\n      queue.push(2);\n      expect(queue.last()).toBe(2);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"adds an element to the end of the queue","suites":["Queue.js","push ()"],"line":32,"updatePoint":{"line":32,"column":47,"index":993},"code":"    it('adds an element to the end of the queue', function () {\n      var queue = new Queue();\n      queue.push(1);\n      queue.push(2);\n      queue.push(3);\n      expect(queue.first()).toBe(1);\n      expect(queue.last()).toBe(3);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"adds an item to the end of the queue","suites":["Queue.js","push ()"],"line":40,"updatePoint":{"line":40,"column":44,"index":1229},"code":"    it('adds an item to the end of the queue', function () {\n      var queue = new Queue();\n      queue.push(1);\n      const item = queue.push(2);\n      queue.push(3);\n      queue.remove(item);\n      queue.push(item);\n      expect(queue.first()).toBe(1);\n      expect(queue.last()).toBe(2);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"removes the given item from the queue","suites":["Queue.js","remove ()"],"line":52,"updatePoint":{"line":52,"column":45,"index":1573},"code":"    it('removes the given item from the queue', function () {\n      var queue = new Queue();\n      queue.push(1);\n      queue.push(2);\n      var item = queue.push(3);\n      queue.remove(item);\n      expect(queue.last()).toBe(2);\n      expect(queue.first()).toBe(1);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"removes the given item from the queue","suites":["Queue.js","remove ()"],"line":61,"updatePoint":{"line":61,"column":45,"index":1847},"code":"    it('removes the given item from the queue', function () {\n      var queue = new Queue();\n      var item = queue.push(1);\n      queue.push(2);\n      queue.push(3);\n      queue.remove(item);\n      expect(queue.last()).toBe(3);\n      expect(queue.first()).toBe(2);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"returns nothing if queue is empty","suites":["Queue.js","shift ()"],"line":72,"updatePoint":{"line":72,"column":41,"index":2160},"code":"    it('returns nothing if queue is empty', function () {\n      var queue = new Queue();\n      var val = queue.shift();\n      expect(val).toBeFalsy();\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"returns the first item of the queue and removes it","suites":["Queue.js","shift ()"],"line":77,"updatePoint":{"line":77,"column":58,"index":2336},"code":"    it('returns the first item of the queue and removes it', function () {\n      var queue = new Queue();\n      queue.push(1);\n      queue.push(2);\n      queue.push(3);\n      var val = queue.shift();\n      expect(queue.last()).toBe(3);\n      expect(queue.first()).toBe(2);\n      expect(val).toBe(1);\n    });","file":"spec/animation/Queue.js","skipped":false,"dir":"spec"},{"name":"can handle all form of input","suites":["Runner.js","Runner","sanitise()"],"line":30,"updatePoint":{"line":30,"column":38,"index":1100},"code":"      it('can handle all form of input', () => {\n        var fn = Runner.sanitise;\n        expect(fn(200, 200, 'now')).toEqual(objectContaining({\n          duration: 200,\n          delay: 200,\n          when: 'now',\n          times: 1,\n          wait: 0,\n          swing: false\n        }));\n        expect(fn(200, 200)).toEqual(objectContaining({\n          duration: 200,\n          delay: 200,\n          when: 'last',\n          times: 1,\n          wait: 0,\n          swing: false\n        }));\n        expect(fn(200)).toEqual(objectContaining({\n          duration: 200,\n          delay: defaults.timeline.delay,\n          when: 'last',\n          times: 1,\n          wait: 0,\n          swing: false\n        }));\n        expect(fn(runFn)).toEqual(objectContaining({\n          duration: runFn,\n          delay: defaults.timeline.delay,\n          when: 'last',\n          times: 1,\n          wait: 0,\n          swing: false\n        }));\n        expect(fn({\n          delay: 200\n        })).toEqual(objectContaining({\n          duration: defaults.timeline.duration,\n          delay: 200,\n          when: 'last',\n          times: 1,\n          wait: 0,\n          swing: false\n        }));\n        expect(fn({\n          times: 3,\n          delay: 200,\n          when: 'now',\n          swing: true,\n          wait: 200\n        })).toEqual(objectContaining({\n          duration: defaults.timeline.duration,\n          delay: 200,\n          when: 'now',\n          times: 3,\n          wait: 200,\n          swing: true\n        }));\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates a runner with defaults","suites":["Runner.js","Runner","())"],"line":91,"updatePoint":{"line":91,"column":40,"index":2664},"code":"      it('creates a runner with defaults', () => {\n        var runner = new Runner();\n        expect(runner instanceof Runner).toBe(true);\n        expect(runner._duration).toBe(defaults.timeline.duration);\n        expect(runner._stepper instanceof Ease).toBe(true);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates a runner with duration set","suites":["Runner.js","Runner","())"],"line":97,"updatePoint":{"line":97,"column":44,"index":2944},"code":"      it('creates a runner with duration set', () => {\n        var runner = new Runner(1000);\n        expect(runner instanceof Runner).toBe(true);\n        expect(runner._duration).toBe(1000);\n        expect(runner._stepper instanceof Ease).toBe(true);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates a runner with controller set","suites":["Runner.js","Runner","())"],"line":103,"updatePoint":{"line":103,"column":46,"index":3208},"code":"      it('creates a runner with controller set', () => {\n        var runner = new Runner(runFn);\n        expect(runner instanceof Runner).toBe(true);\n        expect(runner._duration).toBeFalsy();\n        expect(runner._stepper instanceof Controller).toBe(true);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds another closure to the runner","suites":["Runner.js","Runner","queue()"],"line":111,"updatePoint":{"line":111,"column":44,"index":3518},"code":"      it('adds another closure to the runner', () => {\n        var runner = new Runner();\n        runner.queue(initFn, runFn, true);\n        expect(runner._queue[0]).toEqual(objectContaining({\n          initialiser: initFn,\n          initialised: false,\n          runner: runFn,\n          finished: false\n        }));\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Runner.js","Runner","step()"],"line":123,"updatePoint":{"line":123,"column":24,"index":3865},"code":"      it('returns itself', () => {\n        var runner = new Runner();\n        expect(runner.step()).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does nothing when not active","suites":["Runner.js","Runner","step()"],"line":127,"updatePoint":{"line":127,"column":38,"index":4003},"code":"      it('does nothing when not active', () => {\n        const runner = new Runner().active(false);\n        const frozen = Object.freeze(runner);\n        expect(frozen.step()).toEqual(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls initFn once and runFn at every step","suites":["Runner.js","Runner","step()"],"line":132,"updatePoint":{"line":132,"column":51,"index":4219},"code":"      it('calls initFn once and runFn at every step', () => {\n        var runner = new Runner();\n        runner.queue(initFn, runFn, false);\n        runner.step();\n        expect(initFn).toHaveBeenCalled();\n        expect(runFn).toHaveBeenCalled();\n        runner.step();\n        expect(initFn.calls.count()).toBe(1);\n        expect(runFn.calls.count()).toBe(2);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls initFn on every step if its declaritive","suites":["Runner.js","Runner","step()"],"line":142,"updatePoint":{"line":142,"column":55,"index":4596},"code":"      it('calls initFn on every step if its declaritive', () => {\n        var runner = new Runner(new Controller());\n        runner.queue(initFn, runFn, true);\n        runner.step();\n        expect(initFn).toHaveBeenCalled();\n        expect(runFn).toHaveBeenCalled();\n        runner.step();\n        expect(initFn.calls.count()).toBe(2);\n        expect(runFn.calls.count()).toBe(2);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"steps forward a certain time","suites":["Runner.js","Runner","step()"],"line":159,"updatePoint":{"line":159,"column":38,"index":5166},"code":"      it('steps forward a certain time', () => {\n        var spy = createSpy('stepper');\n        var r = new Runner(1000).loop(10, false, 100);\n        r.queue(null, spy);\n        r.step(300); // should be 0.3s\n        expect(spy).toHaveBeenCalledWith(0.3);\n        expect(getLoop(r)).toBe(0);\n        r.step(300); // should be 0.6s\n        expect(spy).toHaveBeenCalledWith(0.6);\n        expect(getLoop(r)).toBe(0);\n        r.step(600); // should be 0.1s\n        expect(spy).toHaveBeenCalledWith(0.1);\n        expect(getLoop(r)).toBe(1);\n        r.step(-300); // should be 0.9s\n        expect(spy).toHaveBeenCalledWith(0.9);\n        expect(getLoop(r)).toBe(0);\n        r.step(2000); // should be 0.7s\n        expect(spy).toHaveBeenCalledWith(0.7);\n        expect(getLoop(r)).toBe(2);\n        r.step(-2000); // should be 0.9s\n        expect(spy).toHaveBeenCalledWith(0.9);\n        expect(getLoop(r)).toBe(0);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"handles dts which are bigger than the animation time","suites":["Runner.js","Runner","step()"],"line":182,"updatePoint":{"line":182,"column":62,"index":6108},"code":"      it('handles dts which are bigger than the animation time', () => {\n        var runner = new Runner(1000);\n        runner.queue(initFn, runFn, true);\n        runner.step(1100);\n        expect(initFn).toHaveBeenCalled();\n        expect(runFn).toHaveBeenCalledWith(1);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","without wait","unreversed","nonswinging"],"line":193,"updatePoint":{"line":193,"column":66,"index":6554},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, false);\n                runner.queue(null, spy);\n                runner.step(5750);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","without wait","unreversed","nonswinging"],"line":202,"updatePoint":{"line":202,"column":68,"index":6980},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, false);\n                runner.queue(null, spy);\n                runner.step(4750);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","without wait","unreversed","swinging"],"line":213,"updatePoint":{"line":213,"column":66,"index":7461},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, true);\n                runner.queue(null, spy);\n                runner.step(5750);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","without wait","unreversed","swinging"],"line":222,"updatePoint":{"line":222,"column":68,"index":7886},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, true);\n                runner.queue(null, spy);\n                runner.step(4750);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","without wait","reversed","nonswinging"],"line":235,"updatePoint":{"line":235,"column":66,"index":8422},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, false).reverse();\n                runner.queue(null, spy);\n                runner.step(5750);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","without wait","reversed","nonswinging"],"line":244,"updatePoint":{"line":244,"column":68,"index":8858},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, false).reverse();\n                runner.queue(null, spy);\n                runner.step(4750);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","without wait","reversed","swinging"],"line":255,"updatePoint":{"line":255,"column":66,"index":9349},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, true).reverse();\n                runner.queue(null, spy);\n                runner.step(5750);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","without wait","reversed","swinging"],"line":264,"updatePoint":{"line":264,"column":68,"index":9784},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, true).reverse();\n                runner.queue(null, spy);\n                runner.step(4750);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","with wait","unreversed","nonswinging"],"line":279,"updatePoint":{"line":279,"column":66,"index":10382},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, false, 100);\n                runner.queue(null, spy);\n                runner.step(5450);\n                expect(spy).toHaveBeenCalledWith(1);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","with wait","unreversed","nonswinging"],"line":291,"updatePoint":{"line":291,"column":68,"index":10935},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, false, 100);\n                runner.queue(null, spy);\n                runner.step(4350);\n                expect(spy).toHaveBeenCalledWith(1);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","with wait","unreversed","swinging"],"line":305,"updatePoint":{"line":305,"column":66,"index":11543},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, true, 100);\n                runner.queue(null, spy);\n                runner.step(5450);\n                expect(spy).toHaveBeenCalledWith(1);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","with wait","unreversed","swinging"],"line":317,"updatePoint":{"line":317,"column":68,"index":12095},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, true, 100);\n                runner.queue(null, spy);\n                runner.step(4350);\n                expect(spy).toHaveBeenCalledWith(0);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","with wait","reversed","nonswinging"],"line":333,"updatePoint":{"line":333,"column":66,"index":12758},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, false, 100).reverse();\n                runner.queue(null, spy);\n                runner.step(5450);\n                expect(spy).toHaveBeenCalledWith(0);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","with wait","reversed","nonswinging"],"line":345,"updatePoint":{"line":345,"column":68,"index":13321},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, false, 100).reverse();\n                runner.queue(null, spy);\n                runner.step(4350);\n                expect(spy).toHaveBeenCalledWith(0);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an even loop","suites":["Runner.js","Runner","step()","looping","with wait","reversed","swinging"],"line":359,"updatePoint":{"line":359,"column":66,"index":13939},"code":"              it('does behave correctly at the end of an even loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(6, true, 100).reverse();\n                runner.queue(null, spy);\n                runner.step(5450);\n                expect(spy).toHaveBeenCalledWith(0);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.75);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(1);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does behave correctly at the end of an uneven loop","suites":["Runner.js","Runner","step()","looping","with wait","reversed","swinging"],"line":371,"updatePoint":{"line":371,"column":68,"index":14501},"code":"              it('does behave correctly at the end of an uneven loop', () => {\n                var spy = createSpy('stepper');\n                var runner = new Runner(1000).loop(5, true, 100).reverse();\n                runner.queue(null, spy);\n                runner.step(4350);\n                expect(spy).toHaveBeenCalledWith(1);\n                spy.calls.reset();\n                runner.step(800);\n                expect(spy).toHaveBeenCalledWith(0.25);\n                runner.step(250);\n                expect(spy).toHaveBeenCalledWith(0);\n              });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"acts as a getter without parameters","suites":["Runner.js","Runner","active()"],"line":389,"updatePoint":{"line":389,"column":45,"index":15133},"code":"      it('acts as a getter without parameters', () => {\n        var runner = new Runner();\n        expect(runner.active()).toBe(true);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"disables the runner when false is passed","suites":["Runner.js","Runner","active()"],"line":393,"updatePoint":{"line":393,"column":50,"index":15283},"code":"      it('disables the runner when false is passed', () => {\n        var runner = new Runner();\n        expect(runner.active(false)).toBe(runner);\n        expect(runner.active()).toBe(false);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"enables the runner when true is passed","suites":["Runner.js","Runner","active()"],"line":398,"updatePoint":{"line":398,"column":48,"index":15483},"code":"      it('enables the runner when true is passed', () => {\n        var runner = new Runner();\n        expect(runner.active(false)).toBe(runner);\n        expect(runner.active(true)).toBe(runner);\n        expect(runner.active()).toBe(true);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"return the full duration of the runner including all loops and waits","suites":["Runner.js","Runner","duration()"],"line":406,"updatePoint":{"line":406,"column":78,"index":15805},"code":"      it('return the full duration of the runner including all loops and waits', () => {\n        var runner = new Runner(800).loop(10, true, 200);\n        expect(runner.duration()).toBe(9800);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"makes this runner looping","suites":["Runner.js","Runner","loop()"],"line":412,"updatePoint":{"line":412,"column":35,"index":16004},"code":"      it('makes this runner looping', () => {\n        var runner = new Runner(1000).loop(5);\n        expect(runner.duration()).toBe(5000);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"makes this runner indefinitey by passing true","suites":["Runner.js","Runner","loop()"],"line":416,"updatePoint":{"line":416,"column":55,"index":16173},"code":"      it('makes this runner indefinitey by passing true', () => {\n        var runner = new Runner(1000).loop(true);\n        expect(runner.duration()).toBe(Infinity);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"makes this runner indefinitey by passing nothing","suites":["Runner.js","Runner","loop()"],"line":420,"updatePoint":{"line":420,"column":58,"index":16352},"code":"      it('makes this runner indefinitey by passing nothing', () => {\n        var runner = new Runner(1000).loop();\n        expect(runner.duration()).toBe(Infinity);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Runner.js","Runner","time()"],"line":426,"updatePoint":{"line":426,"column":24,"index":16532},"code":"      it('returns itself', () => {\n        var runner = new Runner();\n        expect(runner.time(0)).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"acts as a getter with no parameter passed","suites":["Runner.js","Runner","time()"],"line":430,"updatePoint":{"line":430,"column":51,"index":16684},"code":"      it('acts as a getter with no parameter passed', () => {\n        var runner = new Runner();\n        expect(runner.time()).toBe(0);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"reschedules the runner to a new time","suites":["Runner.js","Runner","time()"],"line":434,"updatePoint":{"line":434,"column":46,"index":16825},"code":"      it('reschedules the runner to a new time', () => {\n        var runner = new Runner();\n        runner.time(10);\n        expect(runner.time()).toBe(10);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls step to reschedule","suites":["Runner.js","Runner","time()"],"line":439,"updatePoint":{"line":439,"column":34,"index":16980},"code":"      it('calls step to reschedule', () => {\n        var runner = new Runner();\n        spyOn(runner, 'step');\n        runner.time(10);\n        expect(runner.step).toHaveBeenCalledWith(10);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"get the loops of a runner","suites":["Runner.js","Runner","loops()"],"line":447,"updatePoint":{"line":447,"column":35,"index":17221},"code":"      it('get the loops of a runner', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).queue(null, spy);\n        runner.step(300);\n        expect(spy).toHaveBeenCalledWith(0.3);\n        expect(runner.loops()).toBe(0.3);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets the loops of the runner","suites":["Runner.js","Runner","loops()"],"line":454,"updatePoint":{"line":454,"column":38,"index":17491},"code":"      it('sets the loops of the runner', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).queue(null, spy);\n        expect(runner.loops(0.5).loops()).toBe(0.5);\n        expect(spy).toHaveBeenCalledWith(0.5);\n        expect(runner.loops(0.1).loops()).toBe(0.1);\n        expect(spy).toHaveBeenCalledWith(0.1);\n        expect(runner.loops(1.5).loops()).toBe(1);\n        expect(spy).toHaveBeenCalledWith(1);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets the loops of the runner in a loop","suites":["Runner.js","Runner","loops()"],"line":464,"updatePoint":{"line":464,"column":48,"index":17952},"code":"      it('sets the loops of the runner in a loop', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).loop(5, true, 500).queue(null, spy);\n        expect(runner.loops(1.3).loops()).toBe(1.3);\n        expect(spy).toHaveBeenCalledWith(0.7);\n        expect(runner.loops(0.3).loops()).toBe(0.3);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"gets the progress of a runner","suites":["Runner.js","Runner","progress()"],"line":473,"updatePoint":{"line":473,"column":39,"index":18323},"code":"      it('gets the progress of a runner', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).queue(null, spy);\n        runner.step(300);\n        expect(spy).toHaveBeenCalledWith(0.3);\n        expect(runner.progress()).toBe(0.3);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"gets the progress of a runner when looping","suites":["Runner.js","Runner","progress()"],"line":480,"updatePoint":{"line":480,"column":52,"index":18610},"code":"      it('gets the progress of a runner when looping', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(800).queue(null, spy).loop(10, false, 200); // duration should be 9800\n\n        // middle of animation, in the middle of wait time\n        runner.step(4900);\n        expect(runner.progress()).toBe(0.5);\n        expect(spy).toHaveBeenCalledWith(1);\n\n        // start of next loop\n        runner.step(100);\n        expect(spy).toHaveBeenCalledWith(0);\n\n        // move 400 into current loop which is 0.5 progress\n        // the progress value is 5400 / 9800\n        runner.step(400);\n        expect(spy).toHaveBeenCalledWith(0.5);\n        expect(runner.progress()).toBe(5400 / 9800);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets the progress of a runner","suites":["Runner.js","Runner","progress()"],"line":499,"updatePoint":{"line":499,"column":39,"index":19324},"code":"      it('sets the progress of a runner', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).queue(null, spy);\n        expect(runner.progress(0.5).progress()).toBe(0.5);\n        expect(spy).toHaveBeenCalledWith(0.5);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets the progress of a runner when looping","suites":["Runner.js","Runner","progress()"],"line":505,"updatePoint":{"line":505,"column":52,"index":19599},"code":"      it('sets the progress of a runner when looping', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(800).queue(null, spy).loop(10, false, 200);\n\n        // progress 0.5 somewhere in the middle of wait time\n        expect(runner.progress(0.5).progress()).toBe(0.5);\n        expect(spy).toHaveBeenCalledWith(1);\n\n        // start of next loop\n        runner.step(100);\n        expect(spy).toHaveBeenCalledWith(0);\n\n        // should move 0.5 into the next loop\n        expect(runner.progress(5400 / 9800).progress()).toBe(5400 / 9800);\n        expect(spy.calls.mostRecent().args[0]).toBeCloseTo(0.5);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"gets the position of a runner","suites":["Runner.js","Runner","position()"],"line":523,"updatePoint":{"line":523,"column":39,"index":20273},"code":"      it('gets the position of a runner', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).queue(null, spy);\n        runner.step(300);\n        expect(spy).toHaveBeenCalledWith(0.3);\n        expect(runner.position()).toBe(0.3);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"gets the position of a runner when looping","suites":["Runner.js","Runner","position()"],"line":530,"updatePoint":{"line":530,"column":52,"index":20560},"code":"      it('gets the position of a runner when looping', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).loop(5, true, 100).queue(null, spy);\n        runner.step(1200);\n        expect(spy).toHaveBeenCalledWith(0.9);\n        expect(runner.position()).toBe(0.9);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets the position of a runner","suites":["Runner.js","Runner","position()"],"line":537,"updatePoint":{"line":537,"column":39,"index":20854},"code":"      it('sets the position of a runner', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).queue(null, spy);\n        expect(runner.position(0.5).position()).toBe(0.5);\n        expect(spy).toHaveBeenCalledWith(0.5);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets the position of a runner in a loop","suites":["Runner.js","Runner","position()"],"line":543,"updatePoint":{"line":543,"column":49,"index":21126},"code":"      it('sets the position of a runner in a loop', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).loop(5, true, 100).queue(null, spy);\n        runner.step(1200);\n        expect(runner.position(0.4).position()).toBe(0.4);\n        expect(spy).toHaveBeenCalledWith(0.4);\n        expect(runner.position(0).position()).toBe(0);\n        expect(spy).toHaveBeenCalledWith(0);\n        expect(runner.position(1).position()).toBe(1);\n        expect(spy).toHaveBeenCalledWith(1);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns the element bound to this runner if any","suites":["Runner.js","Runner","element()"],"line":556,"updatePoint":{"line":556,"column":57,"index":21694},"code":"      it('returns the element bound to this runner if any', () => {\n        var runner1 = new Runner();\n        expect(runner1.element()).toBe(null);\n        var element = SVG('<rect />');\n        var runner2 = element.animate();\n        expect(runner2.element()).toBe(element);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets an element to be bound to the runner","suites":["Runner.js","Runner","element()"],"line":563,"updatePoint":{"line":563,"column":51,"index":21977},"code":"      it('sets an element to be bound to the runner', () => {\n        var runner = new Runner();\n        var element = SVG('<rect />');\n        expect(runner.element(element)).toBe(runner);\n        expect(runner.element()).toBe(element);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns the timeline bound to this runner if any","suites":["Runner.js","Runner","timeline()"],"line":571,"updatePoint":{"line":571,"column":58,"index":22275},"code":"      it('returns the timeline bound to this runner if any', () => {\n        var runner1 = new Runner();\n        expect(runner1.element()).toBe(null);\n        var element = SVG('<rect />');\n        var runner2 = element.animate();\n        expect(runner2.timeline()).toBe(element.timeline());\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"sets a timeline to be bound to the runner","suites":["Runner.js","Runner","timeline()"],"line":578,"updatePoint":{"line":578,"column":51,"index":22570},"code":"      it('sets a timeline to be bound to the runner', () => {\n        var runner = new Runner();\n        var timeline = new Timeline();\n        expect(runner.timeline(timeline)).toBe(runner);\n        expect(runner.timeline()).toBe(timeline);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"schedules the runner on a timeline","suites":["Runner.js","Runner","schedule()"],"line":586,"updatePoint":{"line":586,"column":44,"index":22858},"code":"      it('schedules the runner on a timeline', () => {\n        var runner = new Runner();\n        var timeline = new Timeline();\n        var spy = spyOn(timeline, 'schedule').and.callThrough();\n        expect(runner.schedule(timeline, 200, 'now')).toBe(runner);\n        expect(runner.timeline()).toBe(timeline);\n        expect(spy).toHaveBeenCalledWith(runner, 200, 'now');\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"schedules the runner on its own timeline","suites":["Runner.js","Runner","schedule()"],"line":594,"updatePoint":{"line":594,"column":50,"index":23248},"code":"      it('schedules the runner on its own timeline', () => {\n        var runner = new Runner();\n        var timeline = new Timeline();\n        var spy = spyOn(timeline, 'schedule');\n        runner.timeline(timeline);\n        expect(runner.schedule(200, 'now')).toBe(runner);\n        expect(runner.timeline()).toBe(timeline);\n        expect(spy).toHaveBeenCalledWith(runner, 200, 'now');\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"throws if no timeline is given","suites":["Runner.js","Runner","schedule()"],"line":603,"updatePoint":{"line":603,"column":40,"index":23635},"code":"      it('throws if no timeline is given', () => {\n        var runner = new Runner();\n        expect(() => runner.schedule(200, 'now')).toThrowError('Runner cannot be scheduled without timeline');\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"unschedules this runner from its timeline","suites":["Runner.js","Runner","unschedule()"],"line":609,"updatePoint":{"line":609,"column":51,"index":23898},"code":"      it('unschedules this runner from its timeline', () => {\n        var runner = new Runner();\n        var timeline = new Timeline();\n        var spy = spyOn(timeline, 'unschedule').and.callThrough();\n        expect(runner.schedule(timeline, 200, 'now')).toBe(runner);\n        expect(runner.unschedule()).toBe(runner);\n        expect(spy).toHaveBeenCalledWith(runner);\n        expect(runner.timeline()).toBe(null);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates a new runner scheduled after the first","suites":["Runner.js","Runner","animate()"],"line":620,"updatePoint":{"line":620,"column":56,"index":24372},"code":"      it('creates a new runner scheduled after the first', () => {\n        var runner = new Runner(1000);\n        var timeline = new Timeline();\n        runner.schedule(timeline);\n        var runner2 = runner.animate(500, 1000);\n        var t = timeline.time();\n        expect(runner2.timeline()).toBe(timeline);\n        expect(runner2.time()).toBe(0);\n        expect(timeline.schedule()).toEqual(arrayContaining([objectContaining({\n          start: t,\n          duration: 1000,\n          end: t + 1000,\n          runner: runner\n        }), objectContaining({\n          start: t + 2000,\n          duration: 500,\n          end: t + 2500,\n          runner: runner2\n        })]));\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"reuses timeline and element of current runner","suites":["Runner.js","Runner","animate()"],"line":640,"updatePoint":{"line":640,"column":55,"index":25059},"code":"      it('reuses timeline and element of current runner', () => {\n        const element = new Rect();\n        const timeline = new Timeline();\n        const runner = new Runner().element(element).timeline(timeline);\n        const after = runner.animate();\n        expect(after.timeline()).toBe(timeline);\n        expect(after.element()).toBe(element);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"doesnt reuse element if not set","suites":["Runner.js","Runner","animate()"],"line":648,"updatePoint":{"line":648,"column":41,"index":25407},"code":"      it('doesnt reuse element if not set', () => {\n        const timeline = new Timeline();\n        const runner = new Runner().timeline(timeline);\n        const after = runner.animate();\n        expect(after.element()).toBe(null);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls animate with delay parameters","suites":["Runner.js","Runner","delay()"],"line":656,"updatePoint":{"line":656,"column":45,"index":25694},"code":"      it('calls animate with delay parameters', () => {\n        var runner = new Runner(1000);\n        spyOn(runner, 'animate');\n        runner.delay(500);\n        expect(runner.animate).toHaveBeenCalledWith(0, 500);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Runner.js","Runner","during()"],"line":664,"updatePoint":{"line":664,"column":24,"index":25941},"code":"      it('returns itself', () => {\n        var runner = new Runner();\n        expect(runner.during(runFn)).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls queue passing only a function to call on every step","suites":["Runner.js","Runner","during()"],"line":668,"updatePoint":{"line":668,"column":67,"index":26115},"code":"      it('calls queue passing only a function to call on every step', () => {\n        var runner = new Runner();\n        spyOn(runner, 'queue');\n        runner.during(runFn);\n        expect(runner.queue).toHaveBeenCalledWith(null, runFn);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Runner.js","Runner","after()"],"line":676,"updatePoint":{"line":676,"column":24,"index":26361},"code":"      it('returns itself', () => {\n        var runner = new Runner();\n        expect(runner.after(runFn)).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"binds a function to the after event","suites":["Runner.js","Runner","after()"],"line":680,"updatePoint":{"line":680,"column":45,"index":26512},"code":"      it('binds a function to the after event', () => {\n        var runner = new Runner();\n        spyOn(runner, 'on');\n        runner.after(runFn);\n        expect(runner.on).toHaveBeenCalledWith('finished', runFn);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Runner.js","Runner","finish()"],"line":688,"updatePoint":{"line":688,"column":24,"index":26758},"code":"      it('returns itself', () => {\n        var runner = new Runner();\n        expect(runner.finish()).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls step with Infinity as argument","suites":["Runner.js","Runner","finish()"],"line":692,"updatePoint":{"line":692,"column":46,"index":26906},"code":"      it('calls step with Infinity as argument', () => {\n        var runner = new Runner();\n        spyOn(runner, 'step');\n        runner.finish();\n        expect(runner.step).toHaveBeenCalledWith(Infinity);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Runner.js","Runner","reverse()"],"line":700,"updatePoint":{"line":700,"column":24,"index":27144},"code":"      it('returns itself', () => {\n        var runner = new Runner();\n        expect(runner.reverse()).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"reverses the runner","suites":["Runner.js","Runner","reverse()"],"line":704,"updatePoint":{"line":704,"column":29,"index":27276},"code":"      it('reverses the runner', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).reverse().queue(null, spy);\n        runner.step(750);\n        expect(spy).toHaveBeenCalledWith(0.25);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"reverses the runner when true is passed","suites":["Runner.js","Runner","reverse()"],"line":710,"updatePoint":{"line":710,"column":49,"index":27526},"code":"      it('reverses the runner when true is passed', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).reverse(true).queue(null, spy);\n        runner.step(750);\n        expect(spy).toHaveBeenCalledWith(0.25);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"unreverses the runner when true is passed","suites":["Runner.js","Runner","reverse()"],"line":716,"updatePoint":{"line":716,"column":51,"index":27782},"code":"      it('unreverses the runner when true is passed', () => {\n        var spy = createSpy('stepper');\n        var runner = new Runner(1000).reverse(false).queue(null, spy);\n        runner.step(750);\n        expect(spy).toHaveBeenCalledWith(0.75);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Runner.js","Runner","ease()"],"line":724,"updatePoint":{"line":724,"column":24,"index":28051},"code":"      it('returns itself', () => {\n        var runner = new Runner();\n        expect(runner.ease(() => {})).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates an easing Controller from the easing function","suites":["Runner.js","Runner","ease()"],"line":728,"updatePoint":{"line":728,"column":63,"index":28222},"code":"      it('creates an easing Controller from the easing function', () => {\n        var runner = new Runner();\n        runner.ease(() => {});\n        expect(runner._stepper instanceof Ease).toBe(true);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"resets the runner by setting it to time 0","suites":["Runner.js","Runner","reset()"],"line":735,"updatePoint":{"line":735,"column":51,"index":28460},"code":"      it('resets the runner by setting it to time 0', () => {\n        var runner = new Runner().step(16);\n        expect(runner.time()).toBe(16);\n        expect(runner.reset()).toBe(runner);\n        expect(runner.time()).toBe(0);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"doesnt reset if already reseted","suites":["Runner.js","Runner","reset()"],"line":741,"updatePoint":{"line":741,"column":41,"index":28690},"code":"      it('doesnt reset if already reseted', () => {\n        var runner = Object.freeze(new Runner().reset());\n        expect(runner.reset()).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a morpher for a method to the runner","suites":["Runner.js","Runner","private Methods","_rememberMorpher()"],"line":748,"updatePoint":{"line":748,"column":53,"index":28960},"code":"        it('adds a morpher for a method to the runner', () => {\n          const runner = new Runner();\n          const morpher = new Morphable();\n          runner._rememberMorpher('move', morpher);\n          expect(runner._history.move).toEqual({\n            morpher,\n            caller: undefined\n          });\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"resumes the timeline in case this runner uses a controller","suites":["Runner.js","Runner","private Methods","_rememberMorpher()"],"line":757,"updatePoint":{"line":757,"column":70,"index":29301},"code":"        it('resumes the timeline in case this runner uses a controller', () => {\n          const timeline = new Timeline();\n          const spy = spyOn(timeline, 'play');\n          const runner = new Runner(new Controller(() => 0)).timeline(timeline);\n          const morpher = new Morphable();\n          runner._rememberMorpher('move', morpher);\n          expect(spy).toHaveBeenCalled();\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"tries to retarget a morpher for the animation and returns true","suites":["Runner.js","Runner","private Methods","_tryRetarget()"],"line":767,"updatePoint":{"line":767,"column":74,"index":29757},"code":"        it('tries to retarget a morpher for the animation and returns true', () => {\n          const rect = new Rect().move(0, 0);\n          const runner = rect.animate().move(10, 10);\n          jasmine.RequestAnimationFrame.tick(16);\n          expect(runner._tryRetarget('x', 20)).toBe(true);\n          expect(runner._history.x.morpher.to()).toEqual([20, '']);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"throws away the morpher if it wasnt initialized yet and returns false","suites":["Runner.js","Runner","private Methods","_tryRetarget()"],"line":774,"updatePoint":{"line":774,"column":81,"index":30138},"code":"        it('throws away the morpher if it wasnt initialized yet and returns false', () => {\n          const rect = new Rect().move(0, 0);\n          const runner = rect.animate().move(10, 10);\n          // In that case tryRetarget is not successfull\n          expect(runner._tryRetarget('x', 20)).toBe(false);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does nothing if method wasnt found","suites":["Runner.js","Runner","private Methods","_tryRetarget()"],"line":780,"updatePoint":{"line":780,"column":46,"index":30424},"code":"        it('does nothing if method wasnt found', () => {\n          const rect = new Rect().move(0, 0);\n          const runner = rect.animate().move(10, 10);\n          jasmine.RequestAnimationFrame.tick(16);\n          // In that case tryRetarget is not successfull\n          expect(runner._tryRetarget('foo', 20)).toBe(false);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does only work with controller for transformations and uses retarget function when retargeting transformations","suites":["Runner.js","Runner","private Methods","_tryRetarget()"],"line":787,"updatePoint":{"line":787,"column":122,"index":30838},"code":"        it('does only work with controller for transformations and uses retarget function when retargeting transformations', () => {\n          const rect = new Rect();\n          const runner = rect.animate(new Controller(() => 0)).transform({\n            translate: [10, 10]\n          });\n          jasmine.RequestAnimationFrame.tick(16);\n          // In that case tryRetarget is not successfull\n          expect(runner._tryRetarget('transform', {\n            translate: [20, 20]\n          })).toBe(true);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"starts the timeline if retarget was successfull","suites":["Runner.js","Runner","private Methods","_tryRetarget()"],"line":798,"updatePoint":{"line":798,"column":59,"index":31293},"code":"        it('starts the timeline if retarget was successfull', () => {\n          const timeline = new Timeline();\n          const rect = new Rect().move(0, 0).timeline(timeline);\n          const runner = rect.animate().move(10, 10);\n          jasmine.RequestAnimationFrame.tick(16);\n          const spy = spyOn(timeline, 'play');\n          expect(runner._tryRetarget('x', 20)).toBe(true);\n          expect(runner._history.x.morpher.to()).toEqual([20, '']);\n          expect(spy).toHaveBeenCalledTimes(1);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does nothing if false is passed","suites":["Runner.js","Runner","private Methods","_initialise"],"line":810,"updatePoint":{"line":810,"column":43,"index":31841},"code":"        it('does nothing if false is passed', () => {\n          const runner = Object.freeze(new Runner());\n          expect(runner._initialise(false)).toBe(undefined);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does nothing if true is passed and runner is not declaritive","suites":["Runner.js","Runner","private Methods","_initialise"],"line":814,"updatePoint":{"line":814,"column":72,"index":32051},"code":"        it('does nothing if true is passed and runner is not declaritive', () => {\n          const runner = Object.freeze(new Runner());\n          expect(runner._initialise(true)).toBe(undefined);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls the initializer function on the queue when runner is declaritive","suites":["Runner.js","Runner","private Methods","_initialise"],"line":818,"updatePoint":{"line":818,"column":82,"index":32270},"code":"        it('calls the initializer function on the queue when runner is declaritive', () => {\n          const runner = new Runner(() => 0).queue(initFn, runFn);\n          runner._initialise();\n          expect(initFn).toHaveBeenCalledTimes(1);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls the initializer function on the queue when true is passed and runner is not declaritive","suites":["Runner.js","Runner","private Methods","_initialise"],"line":823,"updatePoint":{"line":823,"column":105,"index":32548},"code":"        it('calls the initializer function on the queue when true is passed and runner is not declaritive', () => {\n          const runner = new Runner().queue(initFn, runFn);\n          runner._initialise(true);\n          expect(initFn).toHaveBeenCalledTimes(1);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does nothing if function is already initialized","suites":["Runner.js","Runner","private Methods","_initialise"],"line":828,"updatePoint":{"line":828,"column":59,"index":32777},"code":"        it('does nothing if function is already initialized', () => {\n          const runner = new Runner().queue(initFn, runFn);\n          runner._initialise(true);\n          runner._initialise(true);\n          expect(initFn).toHaveBeenCalledTimes(1);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"runs each queued function for the position or dt given","suites":["Runner.js","Runner","private Methods","_run()"],"line":836,"updatePoint":{"line":836,"column":66,"index":33092},"code":"        it('runs each queued function for the position or dt given', () => {\n          const runner = new Runner().queue(initFn, runFn);\n          runner._run(16);\n          expect(runFn).toHaveBeenCalledWith(16);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns true if all runners converged","suites":["Runner.js","Runner","private Methods","_run()"],"line":841,"updatePoint":{"line":841,"column":49,"index":33301},"code":"        it('returns true if all runners converged', () => {\n          const spy = createSpy().and.returnValue(true);\n          const runner = new Runner().queue(initFn, spy);\n          expect(runner._run(16)).toBe(true);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns true if all runners finished","suites":["Runner.js","Runner","private Methods","_run()"],"line":846,"updatePoint":{"line":846,"column":48,"index":33533},"code":"        it('returns true if all runners finished', () => {\n          const spy = createSpy().and.returnValue(true);\n          const runner = new Runner(100).queue(initFn, spy);\n          runner._run(200);\n          expect(runner._run(1)).toBe(true);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a transformation by multiplying","suites":["Runner.js","Runner","private Methods","addTransform()"],"line":854,"updatePoint":{"line":854,"column":48,"index":33846},"code":"        it('adds a transformation by multiplying', () => {\n          const runner = new Runner();\n          runner.addTransform({\n            translate: [10, 10]\n          });\n          expect(runner.transforms).toEqual(new Matrix(1, 0, 0, 1, 10, 10));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"resets the transformations to identity","suites":["Runner.js","Runner","private Methods","clearTransform()"],"line":863,"updatePoint":{"line":863,"column":50,"index":34166},"code":"        it('resets the transformations to identity', () => {\n          const runner = new Runner();\n          runner.addTransform({\n            translate: [10, 10]\n          });\n          runner.clearTransform();\n          expect(runner.transforms).toEqual(new Matrix());\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"deletes all functions from the queue which are transformations","suites":["Runner.js","Runner","private Methods","clearTransformsFromQueue"],"line":873,"updatePoint":{"line":873,"column":74,"index":34535},"code":"        it('deletes all functions from the queue which are transformations', () => {\n          const runner = new Runner().queue(initFn, runFn);\n          runner.transform({\n            translate: [10, 20]\n          });\n          runner.clearTransformsFromQueue();\n          expect(runner._queue.length).toBe(1);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates a runner with the element set and schedules it on the timeline","suites":["Runner.js","Runner","Element","animate()"],"line":885,"updatePoint":{"line":885,"column":82,"index":34954},"code":"        it('creates a runner with the element set and schedules it on the timeline', () => {\n          var element = SVG('<rect />');\n          var runner = element.animate();\n          expect(runner instanceof Runner);\n          expect(runner.element()).toBe(element);\n          expect(runner.timeline()).toBe(element.timeline());\n          expect(element.timeline().getLastRunnerInfo().runner).toBe(runner);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls animate with correct parameters","suites":["Runner.js","Runner","Element","delay()"],"line":895,"updatePoint":{"line":895,"column":49,"index":35387},"code":"        it('calls animate with correct parameters', () => {\n          var element = SVG('<rect />');\n          spyOn(element, 'animate');\n          element.delay(100, 'now');\n          expect(element.animate).toHaveBeenCalledWith(0, 100, 'now');\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls clearBefore on the runner array","suites":["Runner.js","Runner","Element","_clearTransformRunnersBefore()"],"line":903,"updatePoint":{"line":903,"column":49,"index":35712},"code":"        it('calls clearBefore on the runner array', () => {\n          const rect = new Rect();\n          rect._prepareRunner();\n          const spy = spyOn(rect._transformationRunners, 'clearBefore');\n          rect._clearTransformRunnersBefore({\n            id: 1\n          });\n          expect(spy).toHaveBeenCalledWith(1);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calculates the current transformation of this element","suites":["Runner.js","Runner","Element","_currentTransform()"],"line":914,"updatePoint":{"line":914,"column":65,"index":36122},"code":"        it('calculates the current transformation of this element', () => {\n          const rect = new Rect();\n          rect._prepareRunner();\n          const runner1 = new Runner().addTransform({\n            translate: [10, 20]\n          });\n          const runner2 = new Runner().addTransform({\n            rotate: 45\n          });\n          const runner3 = new Runner().addTransform({\n            translate: [10, 20]\n          });\n          rect._addRunner(runner1);\n          rect._addRunner(runner2);\n          rect._addRunner(runner3);\n          expect(rect._currentTransform(runner3)).toEqual(new Matrix({\n            translate: [10, 20]\n          }).rotate(45).translate(10, 20));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a runner to the runner array of this element","suites":["Runner.js","Runner","Element","_addRunner()"],"line":935,"updatePoint":{"line":935,"column":61,"index":36869},"code":"        it('adds a runner to the runner array of this element', () => {\n          const rect = new Rect();\n          rect._prepareRunner();\n          const spy = spyOn(rect._transformationRunners, 'add');\n          const runner = new Runner();\n          rect._addRunner(runner);\n          expect(spy).toHaveBeenCalledWith(runner);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a runner array to the element","suites":["Runner.js","Runner","Element","_prepareRunner()"],"line":945,"updatePoint":{"line":945,"column":46,"index":37250},"code":"        it('adds a runner array to the element', () => {\n          const rect = new Rect();\n          expect(rect._transformationRunners).toBe(undefined);\n          rect._prepareRunner();\n          expect(rect._transformationRunners).toEqual(any(RunnerArray));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"only adds it if no animation is in progress","suites":["Runner.js","Runner","Element","_prepareRunner()"],"line":951,"updatePoint":{"line":951,"column":55,"index":37532},"code":"        it('only adds it if no animation is in progress', () => {\n          const rect = new Rect();\n          expect(rect._transformationRunners).toBe(undefined);\n          rect._prepareRunner();\n          const arr = rect._transformationRunners;\n          rect._frameId = 1;\n          rect._prepareRunner();\n          expect(rect._transformationRunners).toBe(arr);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"relays to styleAttr with \"attr\" as parameter","suites":["Runner.js","Runner","methods","attr()"],"line":964,"updatePoint":{"line":964,"column":56,"index":37995},"code":"        it('relays to styleAttr with \"attr\" as parameter', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, 'styleAttr');\n          runner.attr(1, 2);\n          expect(spy).toHaveBeenCalledWith('attr', 1, 2);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"relays to styleAttr with \"css\" as parameter","suites":["Runner.js","Runner","methods","css()"],"line":972,"updatePoint":{"line":972,"column":55,"index":38291},"code":"        it('relays to styleAttr with \"css\" as parameter', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, 'styleAttr');\n          runner.css(1, 2);\n          expect(spy).toHaveBeenCalledWith('css', 1, 2);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a morpher for attr","suites":["Runner.js","Runner","methods","styleAttr()"],"line":980,"updatePoint":{"line":980,"column":35,"index":38571},"code":"        it('adds a morpher for attr', () => {\n          const runner = new Runner();\n          runner.styleAttr('attr', 'x', 5);\n          expect(runner._history.attr.morpher).toEqual(any(Morphable));\n          expect(runner._history.attr.morpher.to()).toEqual(['x', SVGNumber, 2, 5, '']);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a morpher for css","suites":["Runner.js","Runner","methods","styleAttr()"],"line":986,"updatePoint":{"line":986,"column":34,"index":38872},"code":"        it('adds a morpher for css', () => {\n          const runner = new Runner();\n          runner.styleAttr('css', 'x', 5);\n          expect(runner._history.css.morpher).toEqual(any(Morphable));\n          expect(runner._history.css.morpher.to()).toEqual(['x', SVGNumber, 2, 5, '']);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds init and run fn for execution when runner runs","suites":["Runner.js","Runner","methods","styleAttr()"],"line":992,"updatePoint":{"line":992,"column":63,"index":39199},"code":"        it('adds init and run fn for execution when runner runs', () => {\n          const element = new Rect().move(0, 0);\n          const runner = new Runner(100).ease('-').element(element);\n          runner.styleAttr('attr', 'x', 5);\n          runner.step(50);\n          expect(runner._history.attr.morpher.from()).toEqual(['x', SVGNumber, 2, 0, '']);\n          expect(runner._history.attr.morpher.to()).toEqual(['x', SVGNumber, 2, 5, '']);\n          expect(element.x()).toBe(2.5);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"it also works when the object contains other morphable values","suites":["Runner.js","Runner","methods","styleAttr()"],"line":1001,"updatePoint":{"line":1001,"column":73,"index":39705},"code":"        it('it also works when the object contains other morphable values', () => {\n          const element = new Rect().fill('#fff').stroke('#000');\n          const runner = new Runner(100).ease('-').element(element);\n          runner.styleAttr('attr', {\n            fill: '#000',\n            stroke: new Color('#fff')\n          });\n          runner.step(50);\n          expect(runner._history.attr.morpher.from()).toEqual(['fill', Color, 5, 255, 255, 255, 0, 'rgb', 'stroke', Color, 5, 0, 0, 0, 0, 'rgb']);\n          expect(runner._history.attr.morpher.to()).toEqual(['fill', Color, 5, 0, 0, 0, 0, 'rgb', 'stroke', Color, 5, 255, 255, 255, 0, 'rgb']);\n          const result = runner._history.attr.morpher.at(0.5).valueOf();\n          expect(result.fill).toEqual(any(Color));\n          expect(result.stroke).toEqual(any(Color));\n          expect(result.fill.toArray()).toEqual([127.5, 127.5, 127.5, 0, 'rgb']);\n          expect(result.stroke.toArray()).toEqual([127.5, 127.5, 127.5, 0, 'rgb']);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"it changes color space","suites":["Runner.js","Runner","methods","styleAttr()"],"line":1017,"updatePoint":{"line":1017,"column":34,"index":40674},"code":"        it('it changes color space', () => {\n          const element = new Rect().fill('#fff');\n          const runner = new Runner(100).ease('-').element(element);\n          runner.styleAttr('attr', {\n            fill: new Color(100, 12, 12, 'hsl')\n          });\n          runner.step(50);\n          expect(runner._history.attr.morpher.from()).toEqual(['fill', Color, 5, 0, 0, 100, 0, 'hsl']);\n          expect(runner._history.attr.morpher.to()).toEqual(['fill', Color, 5, 100, 12, 12, 0, 'hsl']);\n          const result = runner._history.attr.morpher.at(0.5).valueOf();\n          expect(result.fill).toEqual(any(Color));\n          expect(result.fill.toArray()).toEqual([50, 6, 56, 0, 'hsl']);\n          expect(element.fill()).toBe('#969388');\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets if called two times with new key","suites":["Runner.js","Runner","methods","styleAttr()"],"line":1031,"updatePoint":{"line":1031,"column":54,"index":41451},"code":"        it('retargets if called two times with new key', () => {\n          const element = new Rect().fill('#fff');\n          const runner = new Runner(100).ease('-').element(element);\n          runner.styleAttr('attr', {\n            fill: new Color(100, 12, 12, 'hsl')\n          });\n          runner.step(50);\n          expect(element.fill()).toBe('#969388');\n          runner.styleAttr('attr', {\n            fill: new Color(100, 50, 50, 'hsl'),\n            x: 50\n          });\n          runner.step(25);\n          expect(element.fill()).toBe('#b1c37c');\n          expect(element.x()).toBe(37.5);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets if called two times without new key","suites":["Runner.js","Runner","methods","styleAttr()"],"line":1047,"updatePoint":{"line":1047,"column":57,"index":42064},"code":"        it('retargets if called two times without new key', () => {\n          const element = new Rect().fill('#fff');\n          const runner = new Runner(100).ease('-').element(element);\n          runner.styleAttr('attr', {\n            fill: new Color(100, 12, 12, 'hsl')\n          });\n          runner.step(50);\n          expect(element.fill()).toBe('#969388');\n          runner.styleAttr('attr', {\n            fill: new Color(100, 50, 50, 'hsl')\n          });\n          runner.step(25);\n          expect(element.fill()).toBe('#b1c37c');\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a zoom morpher to the queue","suites":["Runner.js","Runner","methods","zoom()"],"line":1105,"updatePoint":{"line":1105,"column":44,"index":44278},"code":"        it('adds a zoom morpher to the queue', () => {\n          const element = SVG().size(100, 100).viewbox(0, 0, 100, 100);\n          const runner = new Runner(100).ease('-').element(element);\n          runner.zoom(2, {\n            x: 0,\n            y: 0\n          });\n          runner.step(50);\n          expect(runner._history.zoom.morpher.from()).toEqual([1, '']);\n          expect(runner._history.zoom.morpher.to()).toEqual([2, '']);\n          expect(element.zoom()).toBeCloseTo(1.5, 10);\n          expect(element.viewbox().toArray()).toEqual([0, 0, closeTo(66.666, 3), closeTo(66.666, 3)]);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets if called twice","suites":["Runner.js","Runner","methods","zoom()"],"line":1118,"updatePoint":{"line":1118,"column":37,"index":44882},"code":"        it('retargets if called twice', () => {\n          const element = SVG().size(100, 100).viewbox(0, 0, 100, 100);\n          const runner = new Runner(100).ease('-').element(element);\n          runner.zoom(2, {\n            x: 0,\n            y: 0\n          });\n          runner.step(50);\n          runner.zoom(4, {\n            x: 0,\n            y: 0\n          });\n          expect(runner._history.zoom.morpher.from()).toEqual([1, '']);\n          expect(runner._history.zoom.morpher.to()).toEqual([4, '']);\n          runner.step(25);\n          expect(element.zoom()).toBeCloseTo(3.25, 10);\n          expect(element.viewbox().toArray()).toEqual([0, 0, closeTo(30.769, 3), closeTo(30.769, 3)]);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does not retarget for non-declaritive transformations","suites":["Runner.js","Runner","methods","transform()"],"line":1138,"updatePoint":{"line":1138,"column":65,"index":45666},"code":"        it('does not retarget for non-declaritive transformations', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_tryRetarget');\n          runner.transform({\n            translate: [10, 20]\n          });\n          expect(spy).not.toHaveBeenCalled();\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does not retarget for relative transformations","suites":["Runner.js","Runner","methods","transform()"],"line":1146,"updatePoint":{"line":1146,"column":58,"index":45960},"code":"        it('does not retarget for relative transformations', () => {\n          const runner = new Runner(new Controller(() => 0));\n          const spy = spyOn(runner, '_tryRetarget');\n          runner.transform({\n            translate: [10, 20]\n          }, true);\n          expect(spy).not.toHaveBeenCalled();\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does retarget for absolute declaritive transformations","suites":["Runner.js","Runner","methods","transform()"],"line":1154,"updatePoint":{"line":1154,"column":66,"index":46291},"code":"        it('does retarget for absolute declaritive transformations', () => {\n          const runner = new Runner(new Controller(() => 0));\n          const spy = spyOn(runner, '_tryRetarget');\n          runner.transform({\n            translate: [10, 20]\n          });\n          expect(spy).toHaveBeenCalled();\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls queue with isTransform=true","suites":["Runner.js","Runner","methods","transform()"],"line":1162,"updatePoint":{"line":1162,"column":45,"index":46591},"code":"        it('calls queue with isTransform=true', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, 'queue');\n          runner.transform({\n            translate: [10, 20]\n          });\n          expect(spy).toHaveBeenCalledWith(any(Function), any(Function), any(Function), true);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"steps an affine transformation correctly","suites":["Runner.js","Runner","methods","transform()"],"line":1170,"updatePoint":{"line":1170,"column":52,"index":46921},"code":"        it('steps an affine transformation correctly', () => {\n          const element = new Rect();\n          const runner = new Runner(100).ease('-').element(element);\n          runner.transform({\n            translate: [10, 20],\n            scale: 2,\n            rotate: 90\n          });\n          runner.step(50);\n          // transform sets an immediate callback to apply all merged transforms\n          // when every runner had the chance to add its bit of tranforms\n          jasmine.RequestAnimationFrame.tick(1);\n          expect(element.matrix().decompose()).toEqual(objectContaining({\n            translateX: 5,\n            translateY: 10,\n            scaleX: closeTo(1.5, 10),\n            scaleY: closeTo(1.5),\n            rotate: closeTo(45, 10)\n          }));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets an affine transformation correctly","suites":["Runner.js","Runner","methods","transform()"],"line":1190,"updatePoint":{"line":1190,"column":56,"index":47711},"code":"        it('retargets an affine transformation correctly', () => {\n          const element = new Rect();\n          const runner = new Runner(() => 1).element(element);\n          runner.transform({\n            translate: [10, 20],\n            scale: 2,\n            rotate: 90\n          });\n          runner.step(50);\n          runner.transform({\n            scale: 2\n          });\n\n          // transform sets its to-target to the morpher in the initialisation step\n          // because it depends on the from-target. Declaritive animation run the init-step\n          // on every frame. Thats why we step here to see the effect of our retargeting\n          runner.step(25);\n          expect(runner._history.transform.morpher.to()).toEqual([2, 2, 0, 0, 0, 0, 0, 0]);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets an affine transformation correctly and sets new origin","suites":["Runner.js","Runner","methods","transform()"],"line":1209,"updatePoint":{"line":1209,"column":76,"index":48508},"code":"        it('retargets an affine transformation correctly and sets new origin', () => {\n          const element = new Rect();\n          const runner = new Runner(() => 1).element(element);\n          runner.transform({\n            translate: [10, 20],\n            scale: 2,\n            rotate: 90\n          });\n          runner.step(50);\n          runner.transform({\n            scale: 2,\n            origin: [10, 10]\n          });\n\n          // transform sets its to-target to the morpher in the initialisation step\n          // because it depends on the from-target. Declaritive animation run the init-step\n          // on every frame. Thats why we step here to see the effect of our retargeting\n          runner.step(25);\n          expect(runner._history.transform.morpher.to()).toEqual([2, 2, 0, 0, 0, 0, 10, 10]);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"steps multiple relative animations correctly","suites":["Runner.js","Runner","methods","transform()"],"line":1229,"updatePoint":{"line":1229,"column":56,"index":49317},"code":"        it('steps multiple relative animations correctly', () => {\n          const element = new Rect();\n          const runner = new Runner(100).ease('-').element(element);\n          runner.translate(10, 20).scale(2).rotate(45);\n          runner.step(50);\n          // transform sets an immediate callback to apply all merged transforms\n          // when every runner had the chance to add its bit of tranforms\n          jasmine.RequestAnimationFrame.tick(1);\n\n          // The origin is transformed with every\n          expect(element.matrix()).toEqual(new Matrix().translate(5, 10).scale(1.5, 5, 10).rotate(22.5, 5, 10));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"steps multiple relative animations correctly from multiple runners","suites":["Runner.js","Runner","methods","transform()"],"line":1241,"updatePoint":{"line":1241,"column":78,"index":49976},"code":"        it('steps multiple relative animations correctly from multiple runners', () => {\n          const element = new Rect();\n          const runner1 = new Runner(100).ease('-').element(element);\n          const runner2 = new Runner(100).ease('-').element(element);\n          const runner3 = new Runner(100).ease('-').element(element);\n          runner1.translate(10, 20);\n          runner2.scale(2);\n          runner3.rotate(45);\n          runner1.step(50);\n          runner2.step(50);\n          runner3.step(50);\n          // transform sets an immediate callback to apply all merged transforms\n          // when every runner had the chance to add its bit of tranforms\n          jasmine.RequestAnimationFrame.tick(1);\n\n          // The origin is transformed with every\n          expect(element.matrix()).toEqual(new Matrix().translate(5, 10).scale(1.5, 5, 10).rotate(22.5, 5, 10));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"absolute transformations correctly overwrite relatives","suites":["Runner.js","Runner","methods","transform()"],"line":1259,"updatePoint":{"line":1259,"column":66,"index":50860},"code":"        it('absolute transformations correctly overwrite relatives', () => {\n          const element = new Rect();\n          const runner1 = new Runner(100).ease('-').element(element);\n          const runner2 = new Runner(100).ease('-').element(element);\n          const runner3 = new Runner(100).ease('-').element(element);\n          runner1.translate(10, 20);\n          runner2.transform({\n            scale: 2\n          });\n          runner3.rotate(45);\n          runner1.step(50);\n          runner2.step(50);\n          runner3.step(50);\n          // transform sets an immediate callback to apply all merged transforms\n          // when every runner had the chance to add its bit of tranforms\n          jasmine.RequestAnimationFrame.tick(1);\n          expect(runner1._queue.length).toBe(0);\n\n          // The origin is transformed with every\n          expect(element.matrix()).toEqual(new Matrix().scale(1.5).rotate(22.5));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"correctly animates matrices directly","suites":["Runner.js","Runner","methods","transform()"],"line":1280,"updatePoint":{"line":1280,"column":48,"index":51781},"code":"        it('correctly animates matrices directly', () => {\n          const element = new Rect();\n          const runner = new Runner(100).ease('-').element(element);\n          runner.transform(new Matrix({\n            rotate: 90\n          }));\n          runner.step(50);\n          // transform sets an immediate callback to apply all merged transforms\n          // when every runner had the chance to add its bit of tranforms\n          jasmine.RequestAnimationFrame.tick(1);\n\n          // The origin is transformed with every\n          expect(element.matrix()).toEqual(new Matrix(0.5, 0.5, -0.5, 0.5, 0, 0));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"correctly animates matrices affine","suites":["Runner.js","Runner","methods","transform()"],"line":1294,"updatePoint":{"line":1294,"column":46,"index":52400},"code":"        it('correctly animates matrices affine', () => {\n          const element = new Rect();\n          const runner = new Runner(100).ease('-').element(element);\n          runner.transform(Object.assign({\n            affine: true\n          }, new Matrix({\n            rotate: 90\n          })));\n          runner.step(50);\n          // transform sets an immediate callback to apply all merged transforms\n          // when every runner had the chance to add its bit of tranforms\n          jasmine.RequestAnimationFrame.tick(1);\n\n          // The origin is transformed with every\n          expect(element.matrix()).toEqual(new Matrix({\n            rotate: 45\n          }));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"correctly animates matrices affine by passing third parameter","suites":["Runner.js","Runner","methods","transform()"],"line":1312,"updatePoint":{"line":1312,"column":73,"index":53112},"code":"        it('correctly animates matrices affine by passing third parameter', () => {\n          const element = new Rect();\n          const runner = new Runner(100).ease('-').element(element);\n          runner.transform(new Matrix({\n            rotate: 90\n          }), true, true);\n          runner.step(50);\n          // transform sets an immediate callback to apply all merged transforms\n          // when every runner had the chance to add its bit of tranforms\n          jasmine.RequestAnimationFrame.tick(1);\n\n          // The origin is transformed with every\n          expect(element.matrix()).toEqual(new Matrix({\n            rotate: 45\n          }));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"correctly animates a declaritive relative rotation","suites":["Runner.js","Runner","methods","transform()"],"line":1328,"updatePoint":{"line":1328,"column":62,"index":53770},"code":"        it('correctly animates a declaritive relative rotation', () => {\n          const element = new Rect();\n          const runner = new Runner(() => 1).element(element);\n          runner.transform({\n            rotate: 90\n          }, true);\n          runner.step(16);\n          jasmine.RequestAnimationFrame.tick(1);\n          runner.step(16);\n          jasmine.RequestAnimationFrame.tick(1);\n          expect(element.matrix()).not.toEqual(new Matrix());\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","x()"],"line":1342,"updatePoint":{"line":1342,"column":26,"index":54246},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumber');\n          runner.x(10);\n          expect(spy).toHaveBeenCalledWith('x', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","y()"],"line":1350,"updatePoint":{"line":1350,"column":26,"index":54504},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumber');\n          runner.y(10);\n          expect(spy).toHaveBeenCalledWith('y', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","dx()"],"line":1358,"updatePoint":{"line":1358,"column":26,"index":54763},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumberDelta');\n          runner.dx(10);\n          expect(spy).toHaveBeenCalledWith('x', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"uses a delta of 0 by default","suites":["Runner.js","Runner","methods","dx()"],"line":1364,"updatePoint":{"line":1364,"column":40,"index":55001},"code":"        it('uses a delta of 0 by default', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumberDelta');\n          runner.dx();\n          expect(spy).toHaveBeenCalledWith('x', 0);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a number","suites":["Runner.js","Runner","methods","dy()"],"line":1372,"updatePoint":{"line":1372,"column":27,"index":55264},"code":"        it('queues a number', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumberDelta');\n          runner.dy(10);\n          expect(spy).toHaveBeenCalledWith('y', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"uses a delta of 0 by default","suites":["Runner.js","Runner","methods","dy()"],"line":1378,"updatePoint":{"line":1378,"column":40,"index":55502},"code":"        it('uses a delta of 0 by default', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumberDelta');\n          runner.dy();\n          expect(spy).toHaveBeenCalledWith('y', 0);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls dx and dy","suites":["Runner.js","Runner","methods","dmove()"],"line":1386,"updatePoint":{"line":1386,"column":27,"index":55768},"code":"        it('calls dx and dy', () => {\n          const runner = new Runner();\n          const spy1 = spyOn(runner, 'dx').and.returnValue(runner);\n          const spy2 = spyOn(runner, 'dy').and.returnValue(runner);\n          runner.dmove(10, 20);\n          expect(spy1).toHaveBeenCalledWith(10);\n          expect(spy2).toHaveBeenCalledWith(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a morpher of type SVGNumber","suites":["Runner.js","Runner","methods","_queueNumberDelta"],"line":1396,"updatePoint":{"line":1396,"column":46,"index":56196},"code":"        it('queues a morpher of type SVGNumber', () => {\n          const element = new Rect().x(10);\n          const runner = new Runner(100).ease('-').element(element);\n          runner._queueNumberDelta('x', 10);\n          runner.step(50);\n          expect(runner._history.x.morpher.type()).toEqual(SVGNumber);\n          expect(runner._history.x.morpher.from()).toEqual([10, '']);\n          expect(runner._history.x.morpher.to()).toEqual([20, '']);\n          expect(element.x()).toBe(15);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets correctly","suites":["Runner.js","Runner","methods","_queueNumberDelta"],"line":1406,"updatePoint":{"line":1406,"column":31,"index":56684},"code":"        it('retargets correctly', () => {\n          const element = new Rect().x(10);\n          const runner = new Runner(100).ease('-').element(element);\n          runner._queueNumberDelta('x', 10);\n          runner.step(25);\n          runner._queueNumberDelta('x', 20);\n          expect(runner._history.x.morpher.to()).toEqual([30, '']);\n          runner.step(25);\n          expect(element.x()).toBe(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a morphable object","suites":["Runner.js","Runner","methods","_queueObject"],"line":1418,"updatePoint":{"line":1418,"column":37,"index":57158},"code":"        it('queues a morphable object', () => {\n          const element = new Rect().x(10);\n          const runner = new Runner(100).ease('-').element(element);\n          runner._queueObject('x', new SVGNumber(20));\n          runner.step(50);\n          expect(runner._history.x.morpher.type()).toEqual(SVGNumber);\n          expect(runner._history.x.morpher.from()).toEqual([10, '']);\n          expect(runner._history.x.morpher.to()).toEqual([20, '']);\n          expect(element.x()).toBe(15);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a morphable primitive","suites":["Runner.js","Runner","methods","_queueObject"],"line":1428,"updatePoint":{"line":1428,"column":40,"index":57665},"code":"        it('queues a morphable primitive', () => {\n          const element = new Rect().fill('#000');\n          const runner = new Runner(100).ease('-').element(element);\n          runner._queueObject('fill', '#fff');\n          runner.step(50);\n          expect(runner._history.fill.morpher.type()).toEqual(Color);\n          expect(element.fill()).toBe('#808080');\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets correctly","suites":["Runner.js","Runner","methods","_queueObject"],"line":1436,"updatePoint":{"line":1436,"column":31,"index":58033},"code":"        it('retargets correctly', () => {\n          const element = new Rect().x(10);\n          const runner = new Runner(100).ease('-').element(element);\n          runner._queueObject('x', 20);\n          runner.step(25);\n          runner._queueObject('x', 30);\n          runner.step(25);\n          expect(element.x()).toBe(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues an SVGNumber with _queueObject","suites":["Runner.js","Runner","methods","_queueNumber"],"line":1447,"updatePoint":{"line":1447,"column":49,"index":58441},"code":"        it('queues an SVGNumber with _queueObject', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueObject');\n          runner._queueNumber('x', 10);\n          expect(spy).toHaveBeenCalledWith('x', equal(new SVGNumber(10)));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","cy()"],"line":1455,"updatePoint":{"line":1455,"column":26,"index":58738},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumber');\n          runner.cy(10);\n          expect(spy).toHaveBeenCalledWith('cy', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","cx()"],"line":1463,"updatePoint":{"line":1463,"column":26,"index":58999},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumber');\n          runner.cx(10);\n          expect(spy).toHaveBeenCalledWith('cx', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls x and y","suites":["Runner.js","Runner","methods","move()"],"line":1471,"updatePoint":{"line":1471,"column":25,"index":59261},"code":"        it('calls x and y', () => {\n          const runner = new Runner();\n          const spy1 = spyOn(runner, 'x').and.returnValue(runner);\n          const spy2 = spyOn(runner, 'y').and.returnValue(runner);\n          runner.move(10, 20);\n          expect(spy1).toHaveBeenCalledWith(10);\n          expect(spy2).toHaveBeenCalledWith(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls cx and cy","suites":["Runner.js","Runner","methods","center()"],"line":1481,"updatePoint":{"line":1481,"column":27,"index":59658},"code":"        it('calls cx and cy', () => {\n          const runner = new Runner();\n          const spy1 = spyOn(runner, 'cx').and.returnValue(runner);\n          const spy2 = spyOn(runner, 'cy').and.returnValue(runner);\n          runner.center(10, 20);\n          expect(spy1).toHaveBeenCalledWith(10);\n          expect(spy2).toHaveBeenCalledWith(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"calls width and height","suites":["Runner.js","Runner","methods","size()"],"line":1491,"updatePoint":{"line":1491,"column":34,"index":60064},"code":"        it('calls width and height', () => {\n          const runner = new Runner();\n          const spy1 = spyOn(runner, 'width').and.returnValue(runner);\n          const spy2 = spyOn(runner, 'height').and.returnValue(runner);\n          runner.size(10, 20);\n          expect(spy1).toHaveBeenCalledWith(10);\n          expect(spy2).toHaveBeenCalledWith(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"figures out height if only width given","suites":["Runner.js","Runner","methods","size()"],"line":1499,"updatePoint":{"line":1499,"column":50,"index":60448},"code":"        it('figures out height if only width given', () => {\n          const element = new Rect().size(10, 10);\n          const runner = new Runner().element(element);\n          const spy1 = spyOn(runner, 'width').and.returnValue(runner);\n          const spy2 = spyOn(runner, 'height').and.returnValue(runner);\n          runner.size(20);\n          expect(spy1).toHaveBeenCalledWith(20);\n          expect(spy2).toHaveBeenCalledWith(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"figures out width if only height given","suites":["Runner.js","Runner","methods","size()"],"line":1508,"updatePoint":{"line":1508,"column":50,"index":60896},"code":"        it('figures out width if only height given', () => {\n          const element = new Rect().size(10, 10);\n          const runner = new Runner().element(element);\n          const spy1 = spyOn(runner, 'width').and.returnValue(runner);\n          const spy2 = spyOn(runner, 'height').and.returnValue(runner);\n          runner.size(null, 20);\n          expect(spy1).toHaveBeenCalledWith(20);\n          expect(spy2).toHaveBeenCalledWith(20);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","width()"],"line":1519,"updatePoint":{"line":1519,"column":26,"index":61370},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumber');\n          runner.width(10);\n          expect(spy).toHaveBeenCalledWith('width', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","height()"],"line":1527,"updatePoint":{"line":1527,"column":26,"index":61641},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumber');\n          runner.height(10);\n          expect(spy).toHaveBeenCalledWith('height', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a morphable array","suites":["Runner.js","Runner","methods","plot()"],"line":1535,"updatePoint":{"line":1535,"column":36,"index":61922},"code":"        it('queues a morphable array', () => {\n          const element = new Polygon().plot([10, 10, 20, 20]);\n          const runner = new Runner(100).ease('-').element(element);\n          runner.plot(20, 20, 30, 30);\n          runner.step(50);\n          expect(runner._history.plot.morpher.from()).toEqual([10, 10, 20, 20]);\n          expect(runner._history.plot.morpher.to()).toEqual([20, 20, 30, 30]);\n          expect(element.array()).toEqual(new PointArray([15, 15, 25, 25]));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"retargets correctly","suites":["Runner.js","Runner","methods","plot()"],"line":1544,"updatePoint":{"line":1544,"column":31,"index":62412},"code":"        it('retargets correctly', () => {\n          const element = new Polygon().plot([10, 10, 20, 20]);\n          const runner = new Runner(100).ease('-').element(element);\n          runner.plot(20, 20, 30, 30);\n          runner.step(25);\n          runner.plot(30, 30, 40, 40);\n          runner.step(25);\n          expect(runner._history.plot.morpher.from()).toEqual([10, 10, 20, 20]);\n          expect(runner._history.plot.morpher.to()).toEqual([30, 30, 40, 40]);\n          expect(element.array()).toEqual(new PointArray([20, 20, 30, 30]));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","leading()"],"line":1557,"updatePoint":{"line":1557,"column":26,"index":63009},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueNumber');\n          runner.leading(10);\n          expect(spy).toHaveBeenCalledWith('leading', 10);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"queues a numer","suites":["Runner.js","Runner","methods","viewbox()"],"line":1565,"updatePoint":{"line":1565,"column":26,"index":63285},"code":"        it('queues a numer', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, '_queueObject');\n          runner.viewbox(10, 10, 100, 100);\n          expect(spy).toHaveBeenCalledWith('viewbox', equal(new Box(10, 10, 100, 100)));\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"relays to attr call","suites":["Runner.js","Runner","methods","update()"],"line":1573,"updatePoint":{"line":1573,"column":31,"index":63609},"code":"        it('relays to attr call', () => {\n          const runner = new Runner();\n          const spy = spyOn(runner, 'attr');\n          runner.update(0.5, '#fff', 1);\n          expect(spy).toHaveBeenCalledWith('offset', 0.5);\n          expect(spy).toHaveBeenCalledWith('stop-color', '#fff');\n          expect(spy).toHaveBeenCalledWith('stop-opacity', 1);\n        });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates a new FakeRunner with a new matrix which is always done","suites":["Runner.js","FakeRunner","()"],"line":1586,"updatePoint":{"line":1586,"column":73,"index":64102},"code":"      it('creates a new FakeRunner with a new matrix which is always done', () => {\n        const runner = new FakeRunner();\n        expect(runner.transforms).toEqual(new Matrix());\n        expect(runner.id).toBe(-1);\n        expect(runner.done).toBe(true);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"merges the transformations of a runner with another and returns a FakeRunner","suites":["Runner.js","FakeRunner","mergeWith()"],"line":1594,"updatePoint":{"line":1594,"column":86,"index":64427},"code":"      it('merges the transformations of a runner with another and returns a FakeRunner', () => {\n        const fake = new FakeRunner();\n        const runner = new Runner().addTransform({\n          translate: [10, 20]\n        });\n        const newRunner = fake.mergeWith(runner);\n        expect(newRunner).toEqual(any(FakeRunner));\n        expect(newRunner.transforms).toEqual(new Matrix({\n          translate: [10, 20]\n        }));\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"adds a runner to the runner array","suites":["Runner.js","RunnerArray","add()"],"line":1609,"updatePoint":{"line":1609,"column":43,"index":64904},"code":"      it('adds a runner to the runner array', () => {\n        const runner = new Runner();\n        const arr = new RunnerArray();\n        arr.add(runner);\n        expect(arr.length()).toBe(1);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"does not add the same runner twice","suites":["Runner.js","RunnerArray","add()"],"line":1615,"updatePoint":{"line":1615,"column":44,"index":65108},"code":"      it('does not add the same runner twice', () => {\n        const runner = new Runner();\n        const arr = new RunnerArray();\n        arr.add(runner);\n        arr.add(runner);\n        expect(arr.length()).toBe(1);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns a runner by its id","suites":["Runner.js","RunnerArray","getByID()"],"line":1624,"updatePoint":{"line":1624,"column":36,"index":65371},"code":"      it('returns a runner by its id', () => {\n        const runner = new Runner();\n        const arr = new RunnerArray();\n        arr.add(runner);\n        expect(arr.getByID(runner.id)).toBe(runner);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"removes a runner by its id","suites":["Runner.js","RunnerArray","remove()"],"line":1632,"updatePoint":{"line":1632,"column":36,"index":65623},"code":"      it('removes a runner by its id', () => {\n        const runner = new Runner();\n        const arr = new RunnerArray();\n        arr.add(runner);\n        arr.remove(runner.id);\n        expect(arr.length()).toBe(0);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"merges all runners which are done","suites":["Runner.js","RunnerArray","merge()"],"line":1641,"updatePoint":{"line":1641,"column":43,"index":65897},"code":"      it('merges all runners which are done', () => {\n        const runner1 = new Runner().addTransform({\n          translate: [10, 20]\n        });\n        const runner2 = new Runner().addTransform({\n          rotate: 45\n        });\n        const runner3 = new Runner().addTransform({\n          translate: [10, 20]\n        });\n        const arr = new RunnerArray();\n        arr.add(runner1).add(runner2).add(runner3);\n        runner1.done = true;\n        runner2.done = true;\n        runner3.done = true;\n        arr.merge();\n        expect(arr.runners[0]).toEqual(any(FakeRunner));\n        expect(arr.runners[0].transforms).toEqual(new Matrix({\n          translate: [10, 20]\n        }).rotate(45).translate(10, 20));\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"skips runners which are not done","suites":["Runner.js","RunnerArray","merge()"],"line":1662,"updatePoint":{"line":1662,"column":42,"index":66624},"code":"      it('skips runners which are not done', () => {\n        const runner1 = new Runner().addTransform({\n          translate: [10, 20]\n        });\n        const runner2 = new Runner().addTransform({\n          rotate: 45\n        });\n        const runner3 = new Runner().addTransform({\n          rotate: 45\n        });\n        const runner4 = new Runner().addTransform({\n          translate: [10, 20]\n        });\n        const runner5 = new Runner().addTransform({\n          rotate: 45\n        });\n        const arr = new RunnerArray();\n        arr.add(runner1).add(runner2).add(runner3).add(runner4).add(runner5);\n        runner1.done = true;\n        runner2.done = true;\n        runner3.done = false;\n        runner4.done = true;\n        runner5.done = true;\n        arr.merge();\n        expect(arr.runners[0]).toEqual(any(FakeRunner));\n        expect(arr.runners[0].transforms).toEqual(new Matrix({\n          translate: [10, 20]\n        }).rotate(45));\n        expect(arr.runners[2]).toEqual(any(FakeRunner));\n        expect(arr.runners[2].transforms).toEqual(new Matrix({\n          translate: [10, 20]\n        }).rotate(45));\n        expect(arr.runners[1]).toBe(runner3);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"skips runners which have a timeline and are scheduled on that timeline","suites":["Runner.js","RunnerArray","merge()"],"line":1696,"updatePoint":{"line":1696,"column":80,"index":67846},"code":"      it('skips runners which have a timeline and are scheduled on that timeline', () => {\n        const runner1 = new Runner().addTransform({\n          translate: [10, 20]\n        });\n        const runner2 = new Runner().addTransform({\n          rotate: 45\n        });\n        const runner3 = new Runner().addTransform({\n          rotate: 45\n        });\n        const runner4 = new Runner().addTransform({\n          translate: [10, 20]\n        });\n        const runner5 = new Runner().addTransform({\n          rotate: 45\n        });\n        const arr = new RunnerArray();\n        arr.add(runner1).add(runner2).add(runner3).add(runner4).add(runner5);\n        runner1.done = true;\n        runner2.done = true;\n        runner3.done = true;\n        runner4.done = true;\n        runner5.done = true;\n        runner3.schedule(new Timeline());\n        arr.merge();\n        expect(arr.runners[0]).toEqual(any(FakeRunner));\n        expect(arr.runners[0].transforms).toEqual(new Matrix({\n          translate: [10, 20]\n        }).rotate(45));\n        expect(arr.runners[2]).toEqual(any(FakeRunner));\n        expect(arr.runners[2].transforms).toEqual(new Matrix({\n          translate: [10, 20]\n        }).rotate(45));\n        expect(arr.runners[1]).toBe(runner3);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"replaces one runner with another","suites":["Runner.js","RunnerArray","edit()"],"line":1733,"updatePoint":{"line":1733,"column":42,"index":69110},"code":"      it('replaces one runner with another', () => {\n        const arr = new RunnerArray();\n        const runner1 = new Runner();\n        const runner2 = new Runner();\n        arr.add(runner1);\n        arr.edit(runner1.id, runner2);\n        expect(arr.length()).toBe(1);\n        expect(arr.runners[0]).toBe(runner2);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"returns the number of runners in the array","suites":["Runner.js","RunnerArray","length()"],"line":1744,"updatePoint":{"line":1744,"column":52,"index":69488},"code":"      it('returns the number of runners in the array', () => {\n        const arr = new RunnerArray().add(new Runner()).add(new Runner());\n        expect(arr.length()).toBe(2);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"removes all runners before a certain runner","suites":["Runner.js","RunnerArray","clearBefore"],"line":1750,"updatePoint":{"line":1750,"column":53,"index":69719},"code":"      it('removes all runners before a certain runner', () => {\n        const runner1 = new Runner();\n        const runner2 = new Runner();\n        const runner3 = new Runner();\n        const runner4 = new Runner();\n        const runner5 = new Runner();\n        const arr = new RunnerArray();\n        arr.add(runner1).add(runner2).add(runner3).add(runner4).add(runner5);\n        arr.clearBefore(runner3.id);\n        expect(arr.length()).toBe(4);\n        expect(arr.runners).toEqual([any(FakeRunner), runner3, runner4, runner5]);\n      });","file":"spec/animation/Runner.js","skipped":false,"dir":"spec"},{"name":"creates a new Timeline with a default timesource","suites":["Timeline.js","()"],"line":22,"updatePoint":{"line":22,"column":56,"index":748},"code":"    it('creates a new Timeline with a default timesource', () => {\n      const timeline = new Timeline();\n      expect(timeline.source()).toEqual(any(Function));\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"creates a new Timeline with the passed timesource","suites":["Timeline.js","()"],"line":26,"updatePoint":{"line":26,"column":57,"index":919},"code":"    it('creates a new Timeline with the passed timesource', () => {\n      const source = createSpy();\n      const timeline = new Timeline(source);\n      expect(timeline.source()).toBe(source);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules a runner at the start of the queue with a default delay of 0","suites":["Timeline.js","schedule()"],"line":33,"updatePoint":{"line":33,"column":78,"index":1180},"code":"    it('schedules a runner at the start of the queue with a default delay of 0', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner);\n      expect(timeline._runners[0].start).toEqual(0);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"sets a reference of the timeline to the runner","suites":["Timeline.js","schedule()"],"line":39,"updatePoint":{"line":39,"column":54,"index":1417},"code":"    it('sets a reference of the timeline to the runner', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner);\n      expect(runner.timeline()).toBe(timeline);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules after when no when is past","suites":["Timeline.js","schedule()"],"line":45,"updatePoint":{"line":45,"column":44,"index":1639},"code":"    it('schedules after when no when is past', () => {\n      const timeline = new Timeline().schedule(new Runner(1000));\n      const runner = new Runner(1000);\n      timeline.schedule(runner);\n      expect(timeline._runners[1].start).toBe(1000);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules after when when is last","suites":["Timeline.js","schedule()"],"line":51,"updatePoint":{"line":51,"column":41,"index":1890},"code":"    it('schedules after when when is last', () => {\n      const timeline = new Timeline().schedule(new Runner(1000));\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'last');\n      expect(timeline._runners[1].start).toBe(1000);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules after when when is after","suites":["Timeline.js","schedule()"],"line":57,"updatePoint":{"line":57,"column":42,"index":2153},"code":"    it('schedules after when when is after', () => {\n      const timeline = new Timeline().schedule(new Runner(1000));\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'after');\n      expect(timeline._runners[1].start).toBe(1000);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"starts the animation right away when there is no runner to schedule after and when is after","suites":["Timeline.js","schedule()"],"line":63,"updatePoint":{"line":63,"column":99,"index":2474},"code":"    it('starts the animation right away when there is no runner to schedule after and when is after', () => {\n      const timeline = new Timeline().time(100);\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'after');\n      expect(timeline._runners[0].start).toBe(100);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules with start of the last runner when when is with-last","suites":["Timeline.js","schedule()"],"line":69,"updatePoint":{"line":69,"column":70,"index":2748},"code":"    it('schedules with start of the last runner when when is with-last', () => {\n      const timeline = new Timeline().schedule(new Runner(1000), 200);\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'with-last');\n      expect(timeline._runners[1].start).toBe(200);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"starts the animation right away when there is no runner to schedule after and when is after","suites":["Timeline.js","schedule()"],"line":75,"updatePoint":{"line":75,"column":99,"index":3077},"code":"    it('starts the animation right away when there is no runner to schedule after and when is after', () => {\n      const timeline = new Timeline().time(100);\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'with-last');\n      expect(timeline._runners[0].start).toBe(100);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"respects passed delay","suites":["Timeline.js","schedule()"],"line":81,"updatePoint":{"line":81,"column":29,"index":3314},"code":"    it('respects passed delay', () => {\n      const timeline = new Timeline().schedule(new Runner(1000), 1000);\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'after');\n      expect(timeline._runners[1].start).toBe(2000);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules the runner absolutely with absolute","suites":["Timeline.js","schedule()"],"line":87,"updatePoint":{"line":87,"column":53,"index":3595},"code":"    it('schedules the runner absolutely with absolute', () => {\n      const timeline = new Timeline().schedule(new Runner(1000));\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'absolute');\n      expect(timeline._runners[1].start).toBe(0);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules the runner absolutely with start","suites":["Timeline.js","schedule()"],"line":93,"updatePoint":{"line":93,"column":50,"index":3867},"code":"    it('schedules the runner absolutely with start', () => {\n      const timeline = new Timeline().schedule(new Runner(1000));\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 0, 'start');\n      expect(timeline._runners[1].start).toBe(0);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules the runner relatively to old start with relative","suites":["Timeline.js","schedule()"],"line":99,"updatePoint":{"line":99,"column":66,"index":4152},"code":"    it('schedules the runner relatively to old start with relative', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 100).schedule(runner, 100, 'relative');\n      expect(timeline._runners[0].start).toBe(200);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"schedules the runner as absolute if this runner wasnt on the timeline","suites":["Timeline.js","schedule()"],"line":105,"updatePoint":{"line":105,"column":77,"index":4450},"code":"    it('schedules the runner as absolute if this runner wasnt on the timeline', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 100, 'relative');\n      expect(timeline._runners[0].start).toBe(100);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"throws if when is not supported","suites":["Timeline.js","schedule()"],"line":111,"updatePoint":{"line":111,"column":39,"index":4688},"code":"    it('throws if when is not supported', () => {\n      const timeline = new Timeline().schedule(new Runner(1000), 1000);\n      const runner = new Runner(1000);\n      expect(() => timeline.schedule(runner, 0, 'not supported')).toThrowError('Invalid value for the \"when\" parameter');\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"uses persist value of the runner of present","suites":["Timeline.js","schedule()"],"line":116,"updatePoint":{"line":116,"column":51,"index":4991},"code":"    it('uses persist value of the runner of present', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000).persist(100);\n      timeline.schedule(runner);\n      expect(timeline._runners[0].persist).toBe(100);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"removes a runner from the timeline","suites":["Timeline.js","unschedule()"],"line":124,"updatePoint":{"line":124,"column":42,"index":5271},"code":"    it('removes a runner from the timeline', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner).unschedule(runner);\n      expect(runner.timeline()).toBe(null);\n      expect(timeline._runners).toEqual([]);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"gets a runner by its id from the timeline","suites":["Timeline.js","getRunnerInfoById()"],"line":133,"updatePoint":{"line":133,"column":49,"index":5606},"code":"    it('gets a runner by its id from the timeline', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      expect(timeline.schedule(runner).getRunnerInfoById(runner.id).runner).toBe(runner);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"returns null of runner not found","suites":["Timeline.js","getRunnerInfoById()"],"line":138,"updatePoint":{"line":138,"column":40,"index":5833},"code":"    it('returns null of runner not found', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      expect(timeline.getRunnerInfoById(runner.id)).toBe(null);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"gets a runner by its id from the timeline","suites":["Timeline.js","getLastRunnerInfo()"],"line":145,"updatePoint":{"line":145,"column":49,"index":6091},"code":"    it('gets a runner by its id from the timeline', () => {\n      const timeline = new Timeline().schedule(new Runner(1000));\n      const runner = new Runner(1000);\n      expect(timeline.schedule(runner).getLastRunnerInfo().runner).toBe(runner);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"returns the end time of the runner which started last","suites":["Timeline.js","getEndTime()"],"line":152,"updatePoint":{"line":152,"column":61,"index":6398},"code":"    it('returns the end time of the runner which started last', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      const runner2 = new Runner(100);\n      timeline.schedule(runner).schedule(runner2, 500, 'start');\n      expect(timeline.getEndTime()).toBe(600);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"returns the timeline time if no runner is scheduled","suites":["Timeline.js","getEndTime()"],"line":159,"updatePoint":{"line":159,"column":59,"index":6705},"code":"    it('returns the timeline time if no runner is scheduled', () => {\n      const timeline = new Timeline().time(100);\n      expect(timeline.getEndTime()).toBe(100);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"returns 0 if no runners are scheduled","suites":["Timeline.js","getEndTimeOfTimeline"],"line":165,"updatePoint":{"line":165,"column":45,"index":6914},"code":"    it('returns 0 if no runners are scheduled', () => {\n      const timeline = new Timeline();\n      const endTime = timeline.getEndTimeOfTimeline();\n      expect(endTime).toEqual(0);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"returns the time all runners are finished","suites":["Timeline.js","getEndTimeOfTimeline"],"line":170,"updatePoint":{"line":170,"column":49,"index":7110},"code":"    it('returns the time all runners are finished', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      const runner2 = new Runner(100);\n      timeline.schedule(runner).schedule(runner2, 500, 'start');\n      expect(timeline.getEndTimeOfTimeline()).toBe(1000);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"places all elements at the right position - single runner","suites":["Timeline.js","finish - issue #964"],"line":183,"updatePoint":{"line":183,"column":65,"index":7568},"code":"    it('places all elements at the right position - single runner', () => {\n      const timeline = new Timeline();\n      const rect = canvas.rect(20, 20);\n      rect.timeline(timeline);\n      rect.animate().move(100, 200);\n      timeline.finish();\n      expect(rect.x()).toEqual(100);\n      expect(rect.y()).toEqual(200);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"places all elements at the right position - runner that finishes latest is in first position","suites":["Timeline.js","finish - issue #964"],"line":192,"updatePoint":{"line":192,"column":100,"index":7933},"code":"    it('places all elements at the right position - runner that finishes latest is in first position', () => {\n      const timeline = new Timeline();\n      const rect1 = canvas.rect(10, 10);\n      rect1.timeline(timeline);\n      const rect2 = canvas.rect(10, 10);\n      rect2.timeline(timeline);\n      const rect3 = canvas.rect(10, 10);\n      rect3.timeline(timeline);\n      rect1.animate(2000, 0, 'now').move(100, 200);\n      rect2.animate(1000, 0, 'now').move(100, 200);\n      rect3.animate(1000, 500, 'now').move(100, 200);\n      timeline.finish();\n      expect(rect1.x()).toEqual(100);\n      expect(rect1.y()).toEqual(200);\n      expect(rect2.x()).toEqual(100);\n      expect(rect2.y()).toEqual(200);\n      expect(rect3.x()).toEqual(100);\n      expect(rect3.y()).toEqual(200);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"places all elements at the right position - runner that finishes latest is in middle position","suites":["Timeline.js","finish - issue #964"],"line":211,"updatePoint":{"line":211,"column":101,"index":8722},"code":"    it('places all elements at the right position - runner that finishes latest is in middle position', () => {\n      const timeline = new Timeline();\n      const rect1 = canvas.rect(10, 10);\n      rect1.timeline(timeline);\n      const rect2 = canvas.rect(10, 10);\n      rect2.timeline(timeline);\n      const rect3 = canvas.rect(10, 10);\n      rect3.timeline(timeline);\n      rect2.animate(1000, 0, 'now').move(100, 200);\n      rect1.animate(2000, 0, 'now').move(100, 200);\n      rect3.animate(1000, 500, 'now').move(100, 200);\n      timeline.finish();\n      expect(rect1.x()).toEqual(100);\n      expect(rect1.y()).toEqual(200);\n      expect(rect2.x()).toEqual(100);\n      expect(rect2.y()).toEqual(200);\n      expect(rect3.x()).toEqual(100);\n      expect(rect3.y()).toEqual(200);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"places all elements at the right position - runner that finishes latest is in last position","suites":["Timeline.js","finish - issue #964"],"line":230,"updatePoint":{"line":230,"column":99,"index":9509},"code":"    it('places all elements at the right position - runner that finishes latest is in last position', () => {\n      const timeline = new Timeline();\n      const rect1 = canvas.rect(10, 10);\n      rect1.timeline(timeline);\n      const rect2 = canvas.rect(10, 10);\n      rect2.timeline(timeline);\n      const rect3 = canvas.rect(10, 10);\n      rect3.timeline(timeline);\n      rect2.animate(1000, 0, 'now').move(100, 200);\n      rect3.animate(1000, 500, 'now').move(100, 200);\n      rect1.animate(2000, 0, 'now').move(100, 200);\n      timeline.finish();\n      expect(rect1.x()).toEqual(100);\n      expect(rect1.y()).toEqual(200);\n      expect(rect2.x()).toEqual(100);\n      expect(rect2.y()).toEqual(200);\n      expect(rect3.x()).toEqual(100);\n      expect(rect3.y()).toEqual(200);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"sets the time to the current time","suites":["Timeline.js","updateTime()"],"line":251,"updatePoint":{"line":251,"column":41,"index":10279},"code":"    it('sets the time to the current time', () => {\n      const timeline = new Timeline(() => 200).play();\n      expect(timeline._lastSourceTime).toBe(200);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"sets the time to 0 and pauses the timeline","suites":["Timeline.js","stop()"],"line":257,"updatePoint":{"line":257,"column":50,"index":10488},"code":"    it('sets the time to 0 and pauses the timeline', () => {\n      const timeline = new Timeline().time(100);\n      expect(timeline.stop().time()).toBe(0);\n      expect(timeline._paused).toBe(true);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"gets or sets the speed of the timeline","suites":["Timeline.js","speed()"],"line":264,"updatePoint":{"line":264,"column":46,"index":10727},"code":"    it('gets or sets the speed of the timeline', () => {\n      const timeline = new Timeline().speed(2);\n      expect(timeline.speed()).toBe(2);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"reverses the timeline with no parameter given","suites":["Timeline.js","reverse()"],"line":270,"updatePoint":{"line":270,"column":53,"index":10925},"code":"    it('reverses the timeline with no parameter given', () => {\n      const timeline = new Timeline().speed(2);\n      const spy = spyOn(timeline, 'speed').and.callThrough();\n      timeline.reverse();\n      expect(spy).toHaveBeenCalledWith(-2);\n      timeline.reverse();\n      expect(spy).toHaveBeenCalledWith(2);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"reverses the timeline when true was passed","suites":["Timeline.js","reverse()"],"line":278,"updatePoint":{"line":278,"column":50,"index":11243},"code":"    it('reverses the timeline when true was passed', () => {\n      const timeline = new Timeline().speed(2);\n      const spy = spyOn(timeline, 'speed').and.callThrough();\n      timeline.reverse(true);\n      expect(spy).toHaveBeenCalledWith(-2);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"plays normal direction when false was passed","suites":["Timeline.js","reverse()"],"line":284,"updatePoint":{"line":284,"column":52,"index":11498},"code":"    it('plays normal direction when false was passed', () => {\n      const timeline = new Timeline().speed(-2);\n      const spy = spyOn(timeline, 'speed').and.callThrough();\n      timeline.reverse(false);\n      expect(spy).toHaveBeenCalledWith(2);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"seeks the time by a given delta","suites":["Timeline.js","seek()"],"line":292,"updatePoint":{"line":292,"column":39,"index":11776},"code":"    it('seeks the time by a given delta', () => {\n      const timeline = new Timeline().time(100).seek(200);\n      expect(timeline.time()).toBe(300);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"gets and sets the current time of the timeline","suites":["Timeline.js","time()"],"line":298,"updatePoint":{"line":298,"column":54,"index":11984},"code":"    it('gets and sets the current time of the timeline', () => {\n      const timeline = new Timeline().time(100);\n      expect(timeline.time()).toBe(100);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"gets and sets the persist property of the timeline","suites":["Timeline.js","persist()"],"line":304,"updatePoint":{"line":304,"column":58,"index":12189},"code":"    it('gets and sets the persist property of the timeline', () => {\n      const timeline = new Timeline().persist(true);\n      expect(timeline.persist()).toBe(true);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"gets or sets the time source of the timeline","suites":["Timeline.js","source()"],"line":310,"updatePoint":{"line":310,"column":52,"index":12395},"code":"    it('gets or sets the time source of the timeline', () => {\n      const source = () => 200;\n      const timeline = new Timeline().source(source);\n      expect(timeline.source()).toBe(source);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"does a step in the timeline and runs all runners","suites":["Timeline.js","_stepFn"],"line":317,"updatePoint":{"line":317,"column":56,"index":12638},"code":"    it('does a step in the timeline and runs all runners', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(16);\n      expect(runner.time()).toBe(16);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"doenst run runners which start later","suites":["Timeline.js","_stepFn"],"line":324,"updatePoint":{"line":324,"column":44,"index":12951},"code":"    it('doenst run runners which start later', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner, 100).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(16);\n      expect(runner.time()).toBe(0);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"reset runner if timeline was seeked backwards","suites":["Timeline.js","_stepFn"],"line":331,"updatePoint":{"line":331,"column":53,"index":13277},"code":"    it('reset runner if timeline was seeked backwards', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner);\n      const spy = spyOn(runner, 'reset').and.callThrough();\n      jasmine.RequestAnimationFrame.tick(1000);\n      timeline.seek(-1000);\n      expect(runner.time()).toBe(0);\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"doesnt run runners if they are not active","suites":["Timeline.js","_stepFn"],"line":341,"updatePoint":{"line":341,"column":49,"index":13667},"code":"    it('doesnt run runners if they are not active', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000).active(false);\n      timeline.schedule(runner).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(16);\n      expect(runner.time()).toBe(0);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"unschedules runner if its finished","suites":["Timeline.js","_stepFn"],"line":348,"updatePoint":{"line":348,"column":42,"index":13991},"code":"    it('unschedules runner if its finished', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000);\n      timeline.schedule(runner).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(1000);\n      jasmine.RequestAnimationFrame.tick(1);\n      expect(runner.time()).toBe(1001);\n      expect(timeline.getRunnerInfoById(runner.id)).toBe(null);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"does not unschedule if runner is persistent forever","suites":["Timeline.js","_stepFn"],"line":357,"updatePoint":{"line":357,"column":59,"index":14432},"code":"    it('does not unschedule if runner is persistent forever', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000).persist(true);\n      timeline.schedule(runner).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(1000);\n      jasmine.RequestAnimationFrame.tick(1);\n      expect(runner.time()).toBe(1001);\n      expect(timeline.getRunnerInfoById(runner.id)).not.toBe(null);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"does not unschedule if runner is persistent for a certain time","suites":["Timeline.js","_stepFn"],"line":366,"updatePoint":{"line":366,"column":70,"index":14902},"code":"    it('does not unschedule if runner is persistent for a certain time', () => {\n      const timeline = new Timeline();\n      const runner = new Runner(1000).persist(100);\n      timeline.schedule(runner).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(1000);\n      jasmine.RequestAnimationFrame.tick(1);\n      expect(runner.time()).toBe(1001);\n      expect(timeline.getRunnerInfoById(runner.id)).not.toBe(null);\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"fires finish if no runners left","suites":["Timeline.js","_stepFn"],"line":375,"updatePoint":{"line":375,"column":39,"index":15340},"code":"    it('fires finish if no runners left', () => {\n      const spy = createSpy();\n      const timeline = new Timeline().on('finished', spy);\n      const runner = new Runner(1000);\n      spy.calls.reset();\n      timeline.schedule(runner).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(1000);\n      jasmine.RequestAnimationFrame.tick(1);\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"continues if there are still runners left from us when going back in time","suites":["Timeline.js","_stepFn"],"line":385,"updatePoint":{"line":385,"column":81,"index":15813},"code":"    it('continues if there are still runners left from us when going back in time', () => {\n      const spy = createSpy();\n      const timeline = new Timeline().on('finished', spy).time(1200).reverse(true);\n      const runner = new Runner(1000);\n      spy.calls.reset();\n      timeline.schedule(runner, 0).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(1);\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"finishes if time is backwards and 0","suites":["Timeline.js","_stepFn"],"line":394,"updatePoint":{"line":394,"column":43,"index":16232},"code":"    it('finishes if time is backwards and 0', () => {\n      const spy = createSpy();\n      const timeline = new Timeline().on('finished', spy).reverse(true);\n      const runner = new Runner(1000);\n      spy.calls.reset();\n      timeline.schedule(runner, 0).play(); // we have to play because its synchronous here\n      jasmine.RequestAnimationFrame.tick(1);\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"sets and gets the timeline of the element","suites":["Timeline.js","Element","timeline()"],"line":406,"updatePoint":{"line":406,"column":51,"index":16715},"code":"      it('sets and gets the timeline of the element', () => {\n        const timeline = new Timeline();\n        const rect = new Rect().timeline(timeline);\n        expect(rect.timeline()).toBe(timeline);\n      });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"creates a timeline on the fly when getting it","suites":["Timeline.js","Element","timeline()"],"line":411,"updatePoint":{"line":411,"column":55,"index":16932},"code":"      it('creates a timeline on the fly when getting it', () => {\n        expect(new Rect().timeline()).toEqual(any(Timeline));\n      });","file":"spec/animation/Timeline.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type A","suites":["A.js","()"],"line":10,"updatePoint":{"line":10,"column":38,"index":245},"code":"    it('creates a new object of type A', () => {\n      expect(new A()).toEqual(any(A));\n    });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["A.js","()"],"line":13,"updatePoint":{"line":13,"column":45,"index":348},"code":"    it('sets passed attributes on the element', () => {\n      expect(new A({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"creates xlink:href attribute","suites":["A.js","to()"],"line":20,"updatePoint":{"line":20,"column":36,"index":503},"code":"    it('creates xlink:href attribute', () => {\n      const link = new A();\n      link.to(url);\n      expect(link.attr('href')).toBe(url);\n    });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"creates target attribute","suites":["A.js","target()"],"line":27,"updatePoint":{"line":27,"column":32,"index":682},"code":"    it('creates target attribute', () => {\n      const link = new A();\n      link.target('_blank');\n      expect(link.attr('target')).toBe('_blank');\n    });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"creates a link with given url","suites":["A.js","Container","link()"],"line":35,"updatePoint":{"line":35,"column":39,"index":916},"code":"      it('creates a link with given url', () => {\n        const group = new G();\n        const link = group.link(url);\n        expect(link.attr('href')).toBe(url);\n        expect(link).toEqual(any(A));\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"returns the instance of the link of a linked element","suites":["A.js","Element","linker()"],"line":45,"updatePoint":{"line":45,"column":62,"index":1228},"code":"      it('returns the instance of the link of a linked element', () => {\n        const link = new A().to(url);\n        const rect = link.rect(100, 100);\n        expect(rect.linker()).toBe(link);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"returns null if no link is found","suites":["A.js","Element","linker()"],"line":50,"updatePoint":{"line":50,"column":42,"index":1413},"code":"      it('returns null if no link is found', () => {\n        const group = new G();\n        const rect = group.rect(100, 100);\n        expect(rect.linker()).toBe(null);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"returns null when el is not in dom at all","suites":["A.js","Element","linker()"],"line":55,"updatePoint":{"line":55,"column":51,"index":1601},"code":"      it('returns null when el is not in dom at all', () => {\n        const group = new G();\n        expect(group.linker()).toBe(null);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["A.js","Element","unlink()"],"line":61,"updatePoint":{"line":61,"column":24,"index":1761},"code":"      it('returns itself', () => {\n        const group = new G();\n        expect(group.unlink()).toBe(group);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"removes the link","suites":["A.js","Element","unlink()"],"line":65,"updatePoint":{"line":65,"column":26,"index":1883},"code":"      it('removes the link', () => {\n        const group = new G();\n        const link = group.link(url);\n        const rect = link.rect(100, 100);\n        expect(rect.unlink().parent()).toBe(group);\n        expect(link.parent()).toBe(null);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"removes also the link when link wasn't in document","suites":["A.js","Element","unlink()"],"line":72,"updatePoint":{"line":72,"column":61,"index":2170},"code":"      it('removes also the link when link wasn\\'t in document', () => {\n        const link = new A().to(url);\n        const rect = link.rect(100, 100);\n        expect(rect.unlink().parent()).toBe(null);\n        expect(link.parent()).toBe(null);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"wraps the called element in a link with given url","suites":["A.js","Element","linkTo()"],"line":80,"updatePoint":{"line":80,"column":59,"index":2464},"code":"      it('wraps the called element in a link with given url', () => {\n        const rect = new Rect();\n        rect.linkTo(url);\n        expect(rect.linker()).toEqual(any(A));\n        expect(rect.linker().attr('href')).toBe(url);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"wraps the called element in a link with given block","suites":["A.js","Element","linkTo()"],"line":86,"updatePoint":{"line":86,"column":61,"index":2706},"code":"      it('wraps the called element in a link with given block', () => {\n        const rect = new Rect();\n        rect.linkTo(function (link) {\n          link.to(url).target('_blank');\n        });\n        expect(rect.linker().attr('href')).toBe(url);\n        expect(rect.linker().attr('target')).toBe('_blank');\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"reuses existing link if possible","suites":["A.js","Element","linkTo()"],"line":94,"updatePoint":{"line":94,"column":42,"index":3008},"code":"      it('reuses existing link if possible', () => {\n        const rect = new Rect();\n        rect.linkTo(url);\n        const link = rect.linker();\n        rect.linkTo(url + '/something');\n        expect(rect.linker()).toBe(link);\n      });","file":"spec/elements/A.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Circle","suites":["Circle.js","()"],"line":14,"updatePoint":{"line":14,"column":43,"index":328},"code":"    it('creates a new object of type Circle', () => {\n      expect(new Circle()).toEqual(any(Circle));\n    });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Circle.js","()"],"line":17,"updatePoint":{"line":17,"column":45,"index":441},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Circle({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"calls attr with r","suites":["Circle.js","radius()"],"line":24,"updatePoint":{"line":24,"column":25,"index":594},"code":"    it('calls attr with r', () => {\n      const spy = spyOn(circle, 'attr').and.callThrough();\n      circle.radius(123);\n      expect(spy).toHaveBeenCalledWith('r', 123);\n    });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"calls attr with r","suites":["Circle.js","rx()"],"line":31,"updatePoint":{"line":31,"column":25,"index":806},"code":"    it('calls attr with r', () => {\n      const spy = spyOn(circle, 'attr');\n      circle.rx(123);\n      expect(spy).toHaveBeenCalledWith('r', 123);\n    });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"calls rx","suites":["Circle.js","ry()"],"line":38,"updatePoint":{"line":38,"column":16,"index":987},"code":"    it('calls rx', () => {\n      const spy = spyOn(circle, 'rx');\n      circle.ry(123);\n      expect(spy).toHaveBeenCalledWith(123);\n    });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"calls radius with half of the size","suites":["Circle.js","size()"],"line":45,"updatePoint":{"line":45,"column":42,"index":1189},"code":"    it('calls radius with half of the size', () => {\n      const spy = spyOn(circle, 'radius');\n      circle.size(100);\n      expect(spy).toHaveBeenCalledWith(objectContaining({\n        value: 50\n      }));\n    });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"creates a circle with given size","suites":["Circle.js","Container","circle()"],"line":55,"updatePoint":{"line":55,"column":42,"index":1475},"code":"      it('creates a circle with given size', () => {\n        const group = new G();\n        const circle = group.circle(50);\n        expect(circle.attr('r')).toBe(25);\n        expect(circle).toEqual(any(Circle));\n      });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"defaults to zero size","suites":["Circle.js","Container","circle()"],"line":61,"updatePoint":{"line":61,"column":31,"index":1687},"code":"      it('defaults to zero size', () => {\n        const group = new G();\n        const circle = group.circle();\n        expect(circle.attr('r')).toBe(0);\n        expect(circle).toEqual(any(Circle));\n      });","file":"spec/elements/Circle.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type ClipPath","suites":["ClipPath.js","()"],"line":9,"updatePoint":{"line":9,"column":45,"index":264},"code":"    it('creates a new object of type ClipPath', () => {\n      expect(new ClipPath()).toEqual(any(ClipPath));\n    });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["ClipPath.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":381},"code":"    it('sets passed attributes on the element', () => {\n      expect(new ClipPath({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"unclips all targets","suites":["ClipPath.js","remove()"],"line":19,"updatePoint":{"line":19,"column":27,"index":538},"code":"    it('unclips all targets', () => {\n      const canvas = SVG().addTo(container);\n      const clip = canvas.clip();\n      const rect = canvas.rect(100, 100).clipWith(clip);\n      expect(clip.remove()).toBe(clip);\n      expect(rect.clipper()).toBe(null);\n    });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"calls remove on parent class","suites":["ClipPath.js","remove()"],"line":26,"updatePoint":{"line":26,"column":36,"index":810},"code":"    it('calls remove on parent class', () => {\n      const clip = new ClipPath();\n      const spy = spyOn(Container.prototype, 'remove');\n      clip.remove();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"gets all targets of this clipPath","suites":["ClipPath.js","targets()"],"line":34,"updatePoint":{"line":34,"column":41,"index":1058},"code":"    it('gets all targets of this clipPath', () => {\n      const canvas = SVG().addTo(container);\n      const clip = canvas.clip();\n      const rect = canvas.rect(100, 100).clipWith(clip);\n      expect(clip.targets()).toEqual([rect]);\n    });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"creates a clipPath in the defs","suites":["ClipPath.js","Container","clip()"],"line":43,"updatePoint":{"line":43,"column":40,"index":1368},"code":"      it('creates a clipPath in the defs', () => {\n        const canvas = SVG();\n        const clip = canvas.clip();\n        expect(clip).toEqual(any(ClipPath));\n        expect(canvas.defs().children()).toEqual([clip]);\n      });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"returns the instance of ClipPath the current element is clipped with","suites":["ClipPath.js","Element","clipper()"],"line":53,"updatePoint":{"line":53,"column":78,"index":1714},"code":"      it('returns the instance of ClipPath the current element is clipped with', () => {\n        const canvas = SVG().addTo(container);\n        const clip = canvas.clip();\n        const rect = canvas.rect(100, 100).clipWith(clip);\n        expect(rect.clipper()).toEqual(clip);\n      });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"returns null if no clipPath was found","suites":["ClipPath.js","Element","clipper()"],"line":59,"updatePoint":{"line":59,"column":47,"index":1970},"code":"      it('returns null if no clipPath was found', () => {\n        expect(new Rect().clipper()).toBe(null);\n      });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"sets the clip-path attribute on the element to the id of the clipPath","suites":["ClipPath.js","Element","clipWith()"],"line":64,"updatePoint":{"line":64,"column":79,"index":2162},"code":"      it('sets the clip-path attribute on the element to the id of the clipPath', () => {\n        const clip = new ClipPath().id('foo');\n        const rect = new Rect().clipWith(clip);\n        expect(rect.attr('clip-path')).toBe('url(\"#foo\")');\n      });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"creates a clipPath and appends the passed element to it to clip current element","suites":["ClipPath.js","Element","clipWith()"],"line":69,"updatePoint":{"line":69,"column":89,"index":2427},"code":"      it('creates a clipPath and appends the passed element to it to clip current element', () => {\n        const canvas = SVG().addTo(container);\n        const circle = canvas.circle(40);\n        const rect = canvas.rect(100, 100).clipWith(circle);\n        expect(circle.parent()).toEqual(any(ClipPath));\n        expect(rect.attr('clip-path')).toBe(`url(\"#${circle.parent().id()}\")`);\n      });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"sets the clip-target attribute to null and returns itself","suites":["ClipPath.js","Element","unclip()"],"line":78,"updatePoint":{"line":78,"column":67,"index":2842},"code":"      it('sets the clip-target attribute to null and returns itself', () => {\n        const clip = new ClipPath().id('foo');\n        const rect = new Rect().clipWith(clip);\n        expect(rect.unclip()).toBe(rect);\n        expect(rect.attr('clip-path')).toBe(undefined);\n      });","file":"spec/elements/ClipPath.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Container","suites":["Container.js","()"],"line":9,"updatePoint":{"line":9,"column":46,"index":263},"code":"    it('creates a new object of type Container', () => {\n      expect(new Container(create('g'))).toEqual(any(Container));\n    });","file":"spec/elements/Container.js","skipped":false,"dir":"spec"},{"name":"flattens the whole document when called on the root","suites":["Container.js","flatten()"],"line":59,"updatePoint":{"line":59,"column":59,"index":1515},"code":"    it('flattens the whole document when called on the root', () => {\n      canvas.flatten();\n      expect(canvas.children()).toEqual([rect1, rect2, circle1, circle2, line1, line2, circle3, rect3]);\n    });","file":"spec/elements/Container.js","skipped":false,"dir":"spec"},{"name":"flattens a group and places all children into its parent when called on a group - 1","suites":["Container.js","flatten()"],"line":63,"updatePoint":{"line":63,"column":91,"index":1754},"code":"    it('flattens a group and places all children into its parent when called on a group - 1', () => {\n      group1.flatten();\n\n      /* now should be:\n        canvas\n          rect1\n          group1\n            rect2\n            circle1\n            circle2\n            line1\n            line2\n            circle3\n          group4\n            rect3\n      */\n\n      expect(canvas.children()).toEqual([rect1, group1, group4]);\n      expect(group1.children()).toEqual([rect2, circle1, circle2, line1, line2, circle3]);\n    });","file":"spec/elements/Container.js","skipped":false,"dir":"spec"},{"name":"flattens a group and places all children into its parent when called on a group - 2","suites":["Container.js","flatten()"],"line":83,"updatePoint":{"line":83,"column":91,"index":2277},"code":"    it('flattens a group and places all children into its parent when called on a group - 2', () => {\n      group2.flatten();\n\n      /* now should be:\n        canvas\n          rect1\n          group1\n            rect2\n            circle1\n            group2\n              circle2\n              line1\n              line2\n              circle3\n          group4\n            rect3\n      */\n\n      expect(group2.children()).toEqual([circle2, line1, line2, circle3]);\n    });","file":"spec/elements/Container.js","skipped":false,"dir":"spec"},{"name":"ungroups a group and inserts all children in the correct order in the parent parent of the group","suites":["Container.js","ungroup()"],"line":105,"updatePoint":{"line":105,"column":104,"index":2796},"code":"    it('ungroups a group and inserts all children in the correct order in the parent parent of the group', () => {\n      group1.ungroup();\n      expect(canvas.children()).toEqual([rect1, rect2, circle1, group2, group4]);\n      group4.ungroup();\n      expect(canvas.children()).toEqual([rect1, rect2, circle1, group2, rect3]);\n    });","file":"spec/elements/Container.js","skipped":false,"dir":"spec"},{"name":"ungroups a group into another group and appends the elements to the other group","suites":["Container.js","ungroup()"],"line":111,"updatePoint":{"line":111,"column":87,"index":3113},"code":"    it('ungroups a group into another group and appends the elements to the other group', () => {\n      group1.ungroup(group4);\n      expect(group4.children()).toEqual([rect3, rect2, circle1, group2]);\n    });","file":"spec/elements/Container.js","skipped":false,"dir":"spec"},{"name":"ungroups a group into another group at the specified position","suites":["Container.js","ungroup()"],"line":115,"updatePoint":{"line":115,"column":69,"index":3305},"code":"    it('ungroups a group into another group at the specified position', () => {\n      group2.ungroup(group1, 1);\n      expect(group1.children()).toEqual([rect2, circle2, group3, circle3, circle1]);\n    });","file":"spec/elements/Container.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Defs","suites":["Defs.js","()"],"line":9,"updatePoint":{"line":9,"column":41,"index":212},"code":"    it('creates a new object of type Defs', () => {\n      expect(new Defs()).toEqual(any(Defs));\n    });","file":"spec/elements/Defs.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Defs.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":321},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Defs({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Defs.js","skipped":false,"dir":"spec"},{"name":"does nothing and returns itself","suites":["Defs.js","flatten()"],"line":19,"updatePoint":{"line":19,"column":39,"index":487},"code":"    it('does nothing and returns itself', () => {\n      const defs = Object.freeze(new Defs());\n      expect(defs.flatten()).toBe(defs);\n    });","file":"spec/elements/Defs.js","skipped":false,"dir":"spec"},{"name":"does nothing and returns itself","suites":["Defs.js","ungroup()"],"line":25,"updatePoint":{"line":25,"column":39,"index":670},"code":"    it('does nothing and returns itself', () => {\n      const defs = Object.freeze(new Defs());\n      expect(defs.ungroup()).toBe(defs);\n    });","file":"spec/elements/Defs.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Dom","suites":["Dom.js","()"],"line":13,"updatePoint":{"line":13,"column":40,"index":463},"code":"    it('creates a new object of type Dom', () => {\n      const rect = new Rect();\n      expect(new Dom(rect.node)).toEqual(any(Dom));\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Dom.js","()"],"line":17,"updatePoint":{"line":17,"column":45,"index":610},"code":"    it('sets passed attributes on the element', () => {\n      const rect = new Rect();\n      expect(new Dom(rect.node, {\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"references the passed node on the instance","suites":["Dom.js","()"],"line":23,"updatePoint":{"line":23,"column":50,"index":790},"code":"    it('references the passed node on the instance', () => {\n      const rect = new Rect();\n      expect(new Dom(rect.node).node).toBe(rect.node);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"sets the type according to the nodename","suites":["Dom.js","()"],"line":27,"updatePoint":{"line":27,"column":47,"index":942},"code":"    it('sets the type according to the nodename', () => {\n      const rect = new Rect();\n      expect(new Dom(rect.node).type).toBe(rect.node.nodeName);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"adds an element as child to the end with no second argument given","suites":["Dom.js","add()"],"line":33,"updatePoint":{"line":33,"column":73,"index":1163},"code":"    it('adds an element as child to the end with no second argument given', () => {\n      const g = new G();\n      g.add(new Rect());\n      const rect = new Rect();\n      g.add(rect);\n      expect(g.children().length).toBe(2);\n      expect(g.get(1)).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"adds an element at the specified position with second argument given","suites":["Dom.js","add()"],"line":41,"updatePoint":{"line":41,"column":76,"index":1436},"code":"    it('adds an element at the specified position with second argument given', () => {\n      const g = new G();\n      g.add(new Rect());\n      g.add(new Rect());\n      const rect = new Rect();\n      g.add(rect, 1);\n      expect(g.children().length).toBe(3);\n      expect(g.get(1)).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"does nothing if element is already the element at that position","suites":["Dom.js","add()"],"line":50,"updatePoint":{"line":50,"column":71,"index":1732},"code":"    it('does nothing if element is already the element at that position', () => {\n      const g = new G();\n      g.rect(100, 100);\n      const rect = g.rect(100, 100);\n      g.add(rect, 1);\n      expect(g.get(1)).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"handles svg strings","suites":["Dom.js","add()"],"line":57,"updatePoint":{"line":57,"column":27,"index":1921},"code":"    it('handles svg strings', () => {\n      const g = new G();\n      g.add('<rect />');\n      expect(g.children().length).toBe(1);\n      expect(g.get(0)).toEqual(any(Rect));\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"handles query selectors","suites":["Dom.js","add()"],"line":63,"updatePoint":{"line":63,"column":31,"index":2107},"code":"    it('handles query selectors', () => {\n      const canvas = SVG().addTo(container);\n      const rect = canvas.rect(100, 100).addClass('test');\n      const g = canvas.group();\n      g.add('.test');\n      expect(g.children().length).toBe(1);\n      expect(g.get(0)).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"handles a node","suites":["Dom.js","add()"],"line":71,"updatePoint":{"line":71,"column":22,"index":2384},"code":"    it('handles a node', () => {\n      const g = new G();\n      const node = create('rect');\n      g.add(node);\n      expect(g.children().length).toBe(1);\n      expect(g.get(0)).toEqual(any(Rect));\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the current element","suites":["Dom.js","addTo()"],"line":80,"updatePoint":{"line":80,"column":35,"index":2639},"code":"    it('returns the current element', () => {\n      const g = new G();\n      const rect = new Rect();\n      expect(rect.addTo(g)).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"puts an element into another element","suites":["Dom.js","addTo()"],"line":85,"updatePoint":{"line":85,"column":44,"index":2798},"code":"    it('puts an element into another element', () => {\n      const g = new G();\n      const rect = new Rect();\n      const spy = spyOn(g, 'put');\n      rect.addTo(g, 0);\n      expect(spy).toHaveBeenCalledWith(rect, 0);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"works with svg strings","suites":["Dom.js","addTo()"],"line":92,"updatePoint":{"line":92,"column":30,"index":3011},"code":"    it('works with svg strings', () => {\n      const rect = new Rect();\n      rect.addTo('<g />');\n      expect(rect.parent()).toEqual(any(G));\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"works with query selector","suites":["Dom.js","addTo()"],"line":97,"updatePoint":{"line":97,"column":33,"index":3166},"code":"    it('works with query selector', () => {\n      const canvas = SVG().addTo(container);\n      const rect = canvas.rect(100, 100);\n      const g = canvas.group().addClass('test');\n      rect.addTo('.test');\n      expect(g.children().length).toBe(1);\n      expect(g.get(0)).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns a List of all children","suites":["Dom.js","children()"],"line":107,"updatePoint":{"line":107,"column":38,"index":3503},"code":"    it('returns a List of all children', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      const circle = g.circle(100, 100);\n      const children = g.children();\n      expect(children).toEqual([rect, circle]);\n      expect(children).toEqual(any(List));\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the current element","suites":["Dom.js","clear()"],"line":117,"updatePoint":{"line":117,"column":35,"index":3824},"code":"    it('returns the current element', () => {\n      const g = new G();\n      g.rect(100, 100);\n      g.circle(100, 100);\n      expect(g.clear()).toBe(g);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"removes all children from an element","suites":["Dom.js","clear()"],"line":123,"updatePoint":{"line":123,"column":44,"index":3995},"code":"    it('removes all children from an element', () => {\n      const g = new G();\n      g.rect(100, 100);\n      g.circle(100, 100);\n      g.clear();\n      expect(g.children()).toEqual([]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"clones the current element and returns it","suites":["Dom.js","clone()"],"line":132,"updatePoint":{"line":132,"column":49,"index":4231},"code":"    it('clones the current element and returns it', () => {\n      const rect = new Rect();\n      const clone = rect.clone();\n      expect(rect).not.toBe(clone);\n      expect(clone).toEqual(any(Rect));\n      expect(clone.type).toBe(rect.type);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"also clones the children by default","suites":["Dom.js","clone()"],"line":139,"updatePoint":{"line":139,"column":43,"index":4476},"code":"    it('also clones the children by default', () => {\n      const group = new G();\n      const rect = group.rect(100, 100);\n      const clone = group.clone();\n      expect(clone.get(0)).not.toBe(rect);\n      expect(clone.get(0)).toEqual(any(Rect));\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"does not clone the children when passing false","suites":["Dom.js","clone()"],"line":146,"updatePoint":{"line":146,"column":54,"index":4744},"code":"    it('does not clone the children when passing false', () => {\n      const group = new G();\n      group.rect(100, 100);\n      const clone = group.clone(false);\n      expect(clone.children()).toEqual([]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"assigns a new id to the element and to child elements by default","suites":["Dom.js","clone()"],"line":152,"updatePoint":{"line":152,"column":72,"index":4976},"code":"    it('assigns a new id to the element and to child elements by default', () => {\n      const group = new G().id('group');\n      const rect = group.rect(100, 100).id('rect');\n      const clone = group.clone();\n      expect(clone.get(0).id()).not.toBe(rect.id());\n      expect(clone.id()).not.toBe(group.id());\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"does not assign a new id to the element and to child elements","suites":["Dom.js","clone()"],"line":159,"updatePoint":{"line":159,"column":69,"index":5292},"code":"    it('does not assign a new id to the element and to child elements', () => {\n      const group = new G().id('group');\n      const rect = group.rect(100, 100).id('rect');\n      const clone = group.clone(true, false);\n      expect(clone.get(0).id()).toBe(rect.id());\n      expect(clone.id()).toBe(group.id());\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns an instance of the same class the method was called on","suites":["Dom.js","clone()"],"line":166,"updatePoint":{"line":166,"column":70,"index":5612},"code":"    it('returns an instance of the same class the method was called on', () => {\n      const rect = new Dom(create('rect'));\n      expect(rect.constructor).toBe(Dom);\n      expect(rect.clone().constructor).toBe(Dom);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"iterates over all children and executes the passed function on then","suites":["Dom.js","each()"],"line":173,"updatePoint":{"line":173,"column":75,"index":5877},"code":"    it('iterates over all children and executes the passed function on then', () => {\n      const group = new G();\n      const group2 = group.group();\n      const circle = group.circle(100, 100);\n      const spy = createSpy('each');\n      group.each(spy);\n      expect(spy.calls.all()).toEqual([objectContaining({\n        object: group2,\n        args: [0, [group2, circle]]\n      }), objectContaining({\n        object: circle,\n        args: [1, [group2, circle]]\n      })]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"iterates over all children recursively and executes the passed function on then when deep is true","suites":["Dom.js","each()"],"line":187,"updatePoint":{"line":187,"column":105,"index":6390},"code":"    it('iterates over all children recursively and executes the passed function on then when deep is true', () => {\n      const group = new G();\n      const group2 = group.group();\n      const rect = group2.rect(100, 100);\n      const circle = group.circle(100, 100);\n      const spy = createSpy('each');\n      group.each(spy, true);\n      expect(spy.calls.all()).toEqual([objectContaining({\n        object: group2,\n        args: [0, [group2, circle]]\n      }), objectContaining({\n        object: rect,\n        args: [0, [rect]]\n      }), objectContaining({\n        object: circle,\n        args: [1, [group2, circle]]\n      })]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"creates an element of given type and appends it to the current element","suites":["Dom.js","element()"],"line":207,"updatePoint":{"line":207,"column":78,"index":7039},"code":"    it('creates an element of given type and appends it to the current element', () => {\n      const g = new G();\n      const el = g.element('title');\n      expect(el).toEqual(any(Dom));\n      expect(el.type).toBe('title');\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"sets the specified attributes passed as second argument","suites":["Dom.js","element()"],"line":213,"updatePoint":{"line":213,"column":63,"index":7256},"code":"    it('sets the specified attributes passed as second argument', () => {\n      const g = new G();\n      const el = g.element('title', {\n        id: 'foo'\n      });\n      expect(el.id()).toBe('foo');\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the first child","suites":["Dom.js","first()"],"line":222,"updatePoint":{"line":222,"column":31,"index":7468},"code":"    it('returns the first child', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      g.circle(100, 100);\n      expect(g.first()).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns null if no first child exists","suites":["Dom.js","first()"],"line":228,"updatePoint":{"line":228,"column":45,"index":7656},"code":"    it('returns null if no first child exists', () => {\n      expect(new G().first()).toBe(null);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the child at the given position","suites":["Dom.js","get()"],"line":233,"updatePoint":{"line":233,"column":47,"index":7798},"code":"    it('returns the child at the given position', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      const circle = g.circle(100, 100);\n      expect(g.get(0)).toBe(rect);\n      expect(g.get(1)).toBe(circle);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the node because it holds all events on the object","suites":["Dom.js","getEventHolder()"],"line":242,"updatePoint":{"line":242,"column":66,"index":8103},"code":"    it('returns the node because it holds all events on the object', () => {\n      const dom = new Dom({});\n      expect(dom.getEventHolder()).toBe(dom.node);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the node because it is the target of the event","suites":["Dom.js","getEventTarget()"],"line":248,"updatePoint":{"line":248,"column":62,"index":8311},"code":"    it('returns the node because it is the target of the event', () => {\n      const dom = new Dom({});\n      expect(dom.getEventTarget()).toBe(dom.node);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns true if the element has the passed element as child","suites":["Dom.js","has()"],"line":254,"updatePoint":{"line":254,"column":67,"index":8513},"code":"    it('returns true if the element has the passed element as child', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      expect(g.has(rect)).toBe(true);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns false if the element hasn't the passed element as child","suites":["Dom.js","has()"],"line":259,"updatePoint":{"line":259,"column":72,"index":8704},"code":"    it('returns false if the element hasn\\'t the passed element as child', () => {\n      const g = new G();\n      const rect = new Rect();\n      expect(g.has(rect)).toBe(false);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"calls xml with the html namespace","suites":["Dom.js","html()"],"line":266,"updatePoint":{"line":266,"column":41,"index":8894},"code":"    it('calls xml with the html namespace', () => {\n      const group = new G();\n      const spy = spyOn(group, 'xml');\n      group.html('<foo>');\n      expect(spy).toHaveBeenCalledWith('<foo>', undefined, html);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns current element when called as setter","suites":["Dom.js","id()"],"line":274,"updatePoint":{"line":274,"column":53,"index":9160},"code":"    it('returns current element when called as setter', () => {\n      const g = new G();\n      expect(g.id('asd')).toBe(g);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"sets the id with argument given","suites":["Dom.js","id()"],"line":278,"updatePoint":{"line":278,"column":39,"index":9278},"code":"    it('sets the id with argument given', () => {\n      expect(new G().id('foo').node.id).toBe('foo');\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"gets the id when no argument given","suites":["Dom.js","id()"],"line":281,"updatePoint":{"line":281,"column":42,"index":9392},"code":"    it('gets the id when no argument given', () => {\n      const g = new G({\n        id: 'foo'\n      });\n      expect(g.id()).toBe('foo');\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"generates an id on getting if none is set","suites":["Dom.js","id()"],"line":287,"updatePoint":{"line":287,"column":49,"index":9546},"code":"    it('generates an id on getting if none is set', () => {\n      const g = new G();\n      expect(g.node.id).toBe('');\n      g.id();\n      expect(g.node.id).not.toBe('');\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"gets the position of the passed child","suites":["Dom.js","index()"],"line":295,"updatePoint":{"line":295,"column":45,"index":9757},"code":"    it('gets the position of the passed child', () => {\n      const g = new G();\n      g.rect(100, 100);\n      const rect = g.rect(100, 100);\n      expect(g.index(rect)).toBe(1);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns -1 if element is no child","suites":["Dom.js","index()"],"line":301,"updatePoint":{"line":301,"column":41,"index":9940},"code":"    it('returns -1 if element is no child', () => {\n      const g = new G();\n      const rect = new Rect();\n      expect(g.index(rect)).toBe(-1);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"gets the last child of the element","suites":["Dom.js","last()"],"line":308,"updatePoint":{"line":308,"column":42,"index":10130},"code":"    it('gets the last child of the element', () => {\n      const g = new G();\n      g.rect(100, 100);\n      const rect = g.rect(100, 100);\n      expect(g.last()).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns null if no last child exists","suites":["Dom.js","last()"],"line":314,"updatePoint":{"line":314,"column":44,"index":10314},"code":"    it('returns null if no last child exists', () => {\n      expect(new G().last()).toBe(null);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the svg parent with no argument given","suites":["Dom.js","parent()"],"line":326,"updatePoint":{"line":326,"column":53,"index":10693},"code":"    it('returns the svg parent with no argument given', () => {\n      expect(rect.parent()).toBe(group2);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the closest parent with the correct type","suites":["Dom.js","parent()"],"line":329,"updatePoint":{"line":329,"column":56,"index":10810},"code":"    it('returns the closest parent with the correct type', () => {\n      expect(rect.parent(Svg)).toBe(canvas);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the closest parent matching the selector","suites":["Dom.js","parent()"],"line":332,"updatePoint":{"line":332,"column":56,"index":10930},"code":"    it('returns the closest parent matching the selector', () => {\n      expect(rect.parent('.test')).toBe(group1);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns null if it cannot find a parent matching the argument","suites":["Dom.js","parent()"],"line":335,"updatePoint":{"line":335,"column":69,"index":11067},"code":"    it('returns null if it cannot find a parent matching the argument', () => {\n      expect(rect.parent('.not-there')).toBe(null);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns null if it cannot find a parent matching the argument in a #document-fragment","suites":["Dom.js","parent()"],"line":338,"updatePoint":{"line":338,"column":93,"index":11231},"code":"    it('returns null if it cannot find a parent matching the argument in a #document-fragment', () => {\n      const fragment = getWindow().document.createDocumentFragment();\n      const svg = new Svg().addTo(fragment);\n      const rect = svg.rect(100, 100);\n      expect(rect.parent('.not-there')).toBe(null);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns Dom if parent is #document-fragment","suites":["Dom.js","parent()"],"line":344,"updatePoint":{"line":344,"column":51,"index":11507},"code":"    it('returns Dom if parent is #document-fragment', () => {\n      const fragment = getWindow().document.createDocumentFragment();\n      const svg = new Svg().addTo(fragment);\n      expect(svg.parent()).toEqual(any(Dom));\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns html parents, too","suites":["Dom.js","parent()"],"line":349,"updatePoint":{"line":349,"column":33,"index":11720},"code":"    it('returns html parents, too', () => {\n      expect(canvas.parent().node).toBe(container);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"calls add() but returns the added element instead","suites":["Dom.js","put()"],"line":354,"updatePoint":{"line":354,"column":57,"index":11882},"code":"    it('calls add() but returns the added element instead', () => {\n      const g = new G();\n      const rect = new Rect();\n      const spy = spyOn(g, 'add').and.callThrough();\n      expect(g.put(rect, 0)).toBe(rect);\n      expect(spy).toHaveBeenCalledWith(rect, 0);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"creates object from svg string","suites":["Dom.js","put()"],"line":361,"updatePoint":{"line":361,"column":38,"index":12138},"code":"    it('creates object from svg string', () => {\n      const g = new G();\n      const rect = '<rect />';\n      const spy = spyOn(g, 'add').and.callThrough();\n      const ret = g.put(rect, 0);\n      expect(ret).toEqual(any(Rect));\n      expect(spy).toHaveBeenCalledWith(ret, 0);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"works with a query selector","suites":["Dom.js","put()"],"line":369,"updatePoint":{"line":369,"column":35,"index":12421},"code":"    it('works with a query selector', () => {\n      const canvas = SVG().addTo(container);\n      const rect = canvas.rect().addClass('test');\n      const g = canvas.group();\n      const spy = spyOn(g, 'add').and.callThrough();\n      const ret = g.put('.test', 0);\n      expect(ret).toEqual(rect);\n      expect(spy).toHaveBeenCalledWith(rect, 0);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"calls add on the given parent","suites":["Dom.js","putIn()"],"line":380,"updatePoint":{"line":380,"column":37,"index":12813},"code":"    it('calls add on the given parent', () => {\n      const g = new G();\n      const rect = new Rect();\n      const spy = spyOn(g, 'add');\n      rect.putIn(g, 0);\n      expect(spy).toHaveBeenCalledWith(rect, 0);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the passed element","suites":["Dom.js","putIn()"],"line":387,"updatePoint":{"line":387,"column":34,"index":13030},"code":"    it('returns the passed element', () => {\n      const g = new G();\n      const rect = new Rect();\n      expect(rect.putIn(g, 0)).toBe(g);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns an instance when svg string given","suites":["Dom.js","putIn()"],"line":392,"updatePoint":{"line":392,"column":49,"index":13194},"code":"    it('returns an instance when svg string given', () => {\n      const g = '<g />';\n      const rect = new Rect();\n      const ret = rect.putIn(g);\n      expect(ret).toEqual(any(G));\n      expect(ret.children()).toEqual([rect]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"works with a query selector","suites":["Dom.js","putIn()"],"line":399,"updatePoint":{"line":399,"column":35,"index":13418},"code":"    it('works with a query selector', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group().addClass('test');\n      const rect = canvas.rect(100, 100);\n      const ret = rect.putIn('.test');\n      expect(ret).toBe(g);\n      expect(g.children()).toEqual([rect]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the removed element","suites":["Dom.js","remove()"],"line":409,"updatePoint":{"line":409,"column":35,"index":13755},"code":"    it('returns the removed element', () => {\n      const canvas = SVG().addTo(container);\n      const rect = canvas.rect(100, 100);\n      expect(rect.remove()).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"removes the element from the parent","suites":["Dom.js","remove()"],"line":414,"updatePoint":{"line":414,"column":43,"index":13944},"code":"    it('removes the element from the parent', () => {\n      const canvas = SVG().addTo(container);\n      const rect = canvas.rect(100, 100);\n      expect(canvas.children()).toEqual([rect]);\n      rect.remove();\n      expect(canvas.children()).toEqual([]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"is a noop when element is not attached to the dom","suites":["Dom.js","remove()"],"line":421,"updatePoint":{"line":421,"column":57,"index":14222},"code":"    it('is a noop when element is not attached to the dom', () => {\n      const rect = new Rect();\n      expect(rect.remove()).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"also works when direct child of document-fragment","suites":["Dom.js","remove()"],"line":425,"updatePoint":{"line":425,"column":57,"index":14369},"code":"    it('also works when direct child of document-fragment', () => {\n      const fragment = new Fragment();\n      const rect = fragment.rect(100, 100);\n      expect(fragment.children()).toEqual([rect]);\n      expect(rect.remove()).toBe(rect);\n      expect(fragment.children()).toEqual([]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Dom.js","removeElement()"],"line":434,"updatePoint":{"line":434,"column":22,"index":14675},"code":"    it('returns itself', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      expect(g.removeElement(rect)).toBe(g);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"removes the given child","suites":["Dom.js","removeElement()"],"line":439,"updatePoint":{"line":439,"column":31,"index":14832},"code":"    it('removes the given child', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      expect(g.removeElement(rect).children()).toEqual([]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"throws if the given element is not a child","suites":["Dom.js","removeElement()"],"line":444,"updatePoint":{"line":444,"column":50,"index":15023},"code":"    it('throws if the given element is not a child', () => {\n      const g = new G();\n      const rect = new Rect();\n      try {\n        g.removeElement(rect);\n      } catch (e) {\n        expect(e).toEqual(objectContaining({\n          code: 8\n        }));\n      }\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the new element","suites":["Dom.js","replace()"],"line":457,"updatePoint":{"line":457,"column":31,"index":15314},"code":"    it('returns the new element', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      const circle = new Circle();\n      expect(rect.replace(circle)).toBe(circle);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"replaces the child at the correct position","suites":["Dom.js","replace()"],"line":463,"updatePoint":{"line":463,"column":50,"index":15529},"code":"    it('replaces the child at the correct position', () => {\n      const g = new G();\n      const rect1 = g.rect(100, 100);\n      const rect2 = g.rect(100, 100);\n      const rect3 = g.rect(100, 100);\n      const circle = new Circle();\n      rect2.replace(circle);\n      expect(g.children()).toEqual([rect1, circle, rect3]);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"also works without a parent","suites":["Dom.js","replace()"],"line":472,"updatePoint":{"line":472,"column":35,"index":15846},"code":"    it('also works without a parent', () => {\n      const rect = new Rect();\n      const circle = new Circle();\n      expect(rect.replace(circle)).toBe(circle);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"rounds all attributes whose values are numbers to two decimals by default","suites":["Dom.js","round()"],"line":479,"updatePoint":{"line":479,"column":81,"index":16097},"code":"    it('rounds all attributes whose values are numbers to two decimals by default', () => {\n      const rect = new Rect({\n        id: 'foo',\n        x: 10.678,\n        y: 3,\n        width: 123.456\n      });\n      expect(rect.round().attr()).toEqual({\n        id: 'foo',\n        x: 10.68,\n        y: 3,\n        width: 123.46\n      });\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"rounds all attributes whose values are numbers to the passed precision","suites":["Dom.js","round()"],"line":493,"updatePoint":{"line":493,"column":78,"index":16436},"code":"    it('rounds all attributes whose values are numbers to the passed precision', () => {\n      const rect = new Rect({\n        id: 'foo',\n        x: 10.678,\n        y: 3,\n        width: 123.456\n      });\n      expect(rect.round(1).attr()).toEqual({\n        id: 'foo',\n        x: 10.7,\n        y: 3,\n        width: 123.5\n      });\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"rounds the given attributes whose values are numbers to the passed precision","suites":["Dom.js","round()"],"line":507,"updatePoint":{"line":507,"column":84,"index":16780},"code":"    it('rounds the given attributes whose values are numbers to the passed precision', () => {\n      const rect = new Rect({\n        id: 'foo',\n        x: 10.678,\n        y: 3,\n        width: 123.456\n      });\n      expect(rect.round(1, ['id', 'x']).attr()).toEqual({\n        id: 'foo',\n        x: 10.7,\n        y: 3,\n        width: 123.456\n      });\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"calls xml with the svg namespace","suites":["Dom.js","svg()"],"line":523,"updatePoint":{"line":523,"column":40,"index":17129},"code":"    it('calls xml with the svg namespace', () => {\n      const group = new G();\n      const spy = spyOn(group, 'xml');\n      group.svg('<foo>');\n      expect(spy).toHaveBeenCalledWith('<foo>', undefined, svg);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"calls id() and returns its result","suites":["Dom.js","toString()"],"line":531,"updatePoint":{"line":531,"column":41,"index":17387},"code":"    it('calls id() and returns its result', () => {\n      const rect = new Rect({\n        id: 'foo'\n      });\n      const spy = spyOn(rect, 'id').and.callThrough();\n      expect(rect.toString()).toBe('foo');\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"sets the nodes textContent to the given value","suites":["Dom.js","words"],"line":541,"updatePoint":{"line":541,"column":53,"index":17687},"code":"    it('sets the nodes textContent to the given value', () => {\n      const tspan = new Tspan().words('Hello World');\n      expect(tspan.text()).toBe('Hello World');\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the current element","suites":["Dom.js","wrap()"],"line":553,"updatePoint":{"line":553,"column":35,"index":18009},"code":"    it('returns the current element', function () {\n      expect(rect.wrap(new G())).toBe(rect);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"wraps the passed element around the current element","suites":["Dom.js","wrap()"],"line":556,"updatePoint":{"line":556,"column":59,"index":18138},"code":"    it('wraps the passed element around the current element', function () {\n      var g = new G();\n      expect(rect.wrap(g).parent()).toBe(g);\n      expect(g.parent()).toBe(canvas);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"wraps also when element is not in the dom","suites":["Dom.js","wrap()"],"line":561,"updatePoint":{"line":561,"column":49,"index":18319},"code":"    it('wraps also when element is not in the dom', () => {\n      var g = new G();\n      var rect = new Rect();\n      expect(rect.wrap(g).parent()).toBe(g);\n      expect(g.parent()).toBe(null);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"inserts at the correct position","suites":["Dom.js","wrap()"],"line":567,"updatePoint":{"line":567,"column":39,"index":18511},"code":"    it('inserts at the correct position', () => {\n      canvas.rect(100, 100);\n      rect = canvas.rect(100, 100);\n      var position = rect.position();\n      var g = new G();\n      expect(rect.wrap(g).parent().position()).toBe(position);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"allows to pass an svg string as element","suites":["Dom.js","wrap()"],"line":574,"updatePoint":{"line":574,"column":47,"index":18766},"code":"    it('allows to pass an svg string as element', () => {\n      rect.wrap('<g />');\n      expect(rect.parent()).toEqual(any(G));\n      expect(rect.parent().parent()).toBe(canvas);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"allows to pass an svg string as element","suites":["Dom.js","wrap()"],"line":579,"updatePoint":{"line":579,"column":47,"index":18954},"code":"    it('allows to pass an svg string as element', () => {\n      rect.wrap('<g />');\n      expect(rect.parent()).toEqual(any(G));\n      expect(rect.parent().parent()).toBe(canvas);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"allows to pass an svg string as element when element not in the dom","suites":["Dom.js","wrap()"],"line":584,"updatePoint":{"line":584,"column":75,"index":19170},"code":"    it('allows to pass an svg string as element when element not in the dom', () => {\n      var rect = new Rect();\n      rect.wrap(SVG('<g />'));\n      expect(rect.parent()).toEqual(any(G));\n      expect(rect.parent().parent()).toBe(null);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"allows to pass an svg node as element","suites":["Dom.js","wrap()"],"line":590,"updatePoint":{"line":590,"column":45,"index":19388},"code":"    it('allows to pass an svg node as element', () => {\n      const node = create('g');\n      rect.wrap(node);\n      expect(rect.parent()).toEqual(any(G));\n      expect(rect.parent().node).toBe(node);\n      expect(rect.parent().parent()).toBe(canvas);\n    });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Dom.js","xml()","as setter"],"line":603,"updatePoint":{"line":603,"column":24,"index":19767},"code":"      it('returns itself', () => {\n        const g = new G();\n        expect(g.xml('<rect />', undefined, svg)).toBe(g);\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"imports a single element","suites":["Dom.js","xml()","as setter"],"line":607,"updatePoint":{"line":607,"column":34,"index":19908},"code":"      it('imports a single element', () => {\n        const g = new G().xml('<rect />', undefined, svg);\n        expect(g.children()).toEqual([any(Rect)]);\n        expect(g.children()[0].node.namespaceURI).toBe(svg);\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"imports multiple elements","suites":["Dom.js","xml()","as setter"],"line":612,"updatePoint":{"line":612,"column":35,"index":20135},"code":"      it('imports multiple elements', () => {\n        const g = new G().xml('<rect /><circle />', undefined, svg);\n        expect(g.children()).toEqual([any(Rect), any(Circle)]);\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"replaces the current element with the imported elements with outerHtml = true","suites":["Dom.js","xml()","as setter"],"line":616,"updatePoint":{"line":616,"column":87,"index":20376},"code":"      it('replaces the current element with the imported elements with outerHtml = true', () => {\n        const canvas = new Svg();\n        const g = canvas.group();\n        g.xml('<rect /><circle />', true, svg);\n        expect(canvas.children()).toEqual([any(Rect), any(Circle)]);\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the parent when outerHtml = true","suites":["Dom.js","xml()","as setter"],"line":622,"updatePoint":{"line":622,"column":50,"index":20632},"code":"      it('returns the parent when outerHtml = true', () => {\n        const canvas = new Svg();\n        const g = canvas.group();\n        expect(g.xml('<rect /><circle />', true, svg)).toBe(canvas);\n        expect(canvas.children()).toEqual([any(Rect), any(Circle)]);\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"works without a parent","suites":["Dom.js","xml()","as setter"],"line":628,"updatePoint":{"line":628,"column":32,"index":20891},"code":"      it('works without a parent', () => {\n        const canvas = new Svg();\n        expect(canvas.xml('<rect /><circle />', undefined, svg)).toBe(canvas);\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the svg string of the element by default","suites":["Dom.js","xml()","as getter"],"line":640,"updatePoint":{"line":640,"column":58,"index":21314},"code":"      it('returns the svg string of the element by default', () => {\n        expect(rect.xml(), svg).toBe('<rect width=\"123.456\" height=\"234.567\"></rect>');\n        expect(canvas.xml(), svg).toBe('<svg><g><rect width=\"123.456\" height=\"234.567\"></rect></g></svg>');\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"returns the innerHtml when outerHtml = false","suites":["Dom.js","xml()","as getter"],"line":644,"updatePoint":{"line":644,"column":54,"index":21585},"code":"      it('returns the innerHtml when outerHtml = false', () => {\n        expect(rect.xml(false, svg)).toBe('');\n        expect(canvas.xml(false, svg)).toBe('<g><rect width=\"123.456\" height=\"234.567\"></rect></g>');\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"runs a function on every exported node","suites":["Dom.js","xml()","as getter"],"line":648,"updatePoint":{"line":648,"column":48,"index":21803},"code":"      it('runs a function on every exported node', () => {\n        expect(rect.xml(el => el.round(1))).toBe('<rect width=\"123.5\" height=\"234.6\"></rect>');\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"runs a function on every exported node and replaces node with returned node if return value is not falsy","suites":["Dom.js","xml()","as getter"],"line":651,"updatePoint":{"line":651,"column":114,"index":22034},"code":"      it('runs a function on every exported node and replaces node with returned node if return value is not falsy', () => {\n        expect(rect.xml(el => new Circle(), svg)).toBe('<circle></circle>');\n        expect(canvas.xml(el => new G(), svg)).toBe('<g></g>'); // outer <svg> was replaced by an empty g\n        expect(canvas.xml(el => {\n          if (el instanceof Rect) return new Circle();\n          if (el instanceof Svg) el.removeNamespace();\n        }, svg)).toBe('<svg><g><circle></circle></g></svg>');\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"runs a function on every exported node and removes node if return value is false","suites":["Dom.js","xml()","as getter"],"line":659,"updatePoint":{"line":659,"column":90,"index":22534},"code":"      it('runs a function on every exported node and removes node if return value is false', () => {\n        expect(group.xml(() => false, svg)).toBe('');\n        expect(canvas.xml(() => false, svg)).toBe('');\n        expect(canvas.xml(el => {\n          if (el instanceof Svg) {\n            el.removeNamespace();\n          } else {\n            return false;\n          }\n        }, svg)).toBe('<svg></svg>');\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"runs a function on every inner node and exports it when outerHtml = false","suites":["Dom.js","xml()","as getter"],"line":670,"updatePoint":{"line":670,"column":83,"index":22945},"code":"      it('runs a function on every inner node and exports it when outerHtml = false', () => {\n        expect(canvas.xml(() => false, false, svg)).toBe('');\n        expect(canvas.xml(() => undefined, false, svg)).toBe('<g><rect width=\"123.456\" height=\"234.567\"></rect></g>');\n      });","file":"spec/elements/Dom.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Element","suites":["Element.js","()"],"line":14,"updatePoint":{"line":14,"column":44,"index":384},"code":"    it('creates a new object of type Element', () => {\n      expect(element).toEqual(any(Element));\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Element.js","()"],"line":17,"updatePoint":{"line":17,"column":45,"index":493},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Element(create('rect'), {\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"references the instance on the passed node","suites":["Element.js","()"],"line":22,"updatePoint":{"line":22,"column":50,"index":651},"code":"    it('references the instance on the passed node', () => {\n      expect(element.node.instance).toBe(element);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"sets the dom property to an empty object","suites":["Element.js","()"],"line":25,"updatePoint":{"line":25,"column":48,"index":769},"code":"    it('sets the dom property to an empty object', () => {\n      expect(element.dom).toEqual({});\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"hydrates the dom property with data found in the dom","suites":["Element.js","()"],"line":28,"updatePoint":{"line":28,"column":60,"index":887},"code":"    it('hydrates the dom property with data found in the dom', () => {\n      element.dom = {\n        foo: 'bar'\n      };\n      element.writeDataToDom();\n      expect(new Element(element.node).dom).toEqual({\n        foo: 'bar'\n      });\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"falls back to empty object when attribute is null","suites":["Element.js","()"],"line":37,"updatePoint":{"line":37,"column":57,"index":1128},"code":"    it('falls back to empty object when attribute is null', () => {\n      element.node.setAttribute('svgjs:data', 'null');\n      expect(new Element(element.node).dom).toEqual({});\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls cx and cy with passed parameters and returns itself","suites":["Element.js","center()"],"line":43,"updatePoint":{"line":43,"column":65,"index":1361},"code":"    it('calls cx and cy with passed parameters and returns itself', () => {\n      const spyCx = spyOn(element, 'cx').and.callThrough();\n      const spyCy = spyOn(element, 'cy').and.callThrough();\n      expect(element.center(1, 2)).toBe(element);\n      expect(spyCx).toHaveBeenCalledWith(1);\n      expect(spyCy).toHaveBeenCalledWith(2);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"gets the elements center along the x axis","suites":["Element.js","cx()"],"line":52,"updatePoint":{"line":52,"column":49,"index":1722},"code":"    it('gets the elements center along the x axis', () => {\n      element.attr({\n        x: 10,\n        width: 100\n      });\n      expect(element.cx()).toBe(60);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"centers the element along the x axis and returns itself","suites":["Element.js","cx()"],"line":59,"updatePoint":{"line":59,"column":63,"index":1906},"code":"    it('centers the element along the x axis and returns itself', () => {\n      element.attr({\n        x: 10,\n        width: 100\n      });\n      expect(element.cx(100)).toBe(element);\n      expect(element.attr('x')).toBe(50);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"gets the elements center along the y axis","suites":["Element.js","cy()"],"line":69,"updatePoint":{"line":69,"column":49,"index":2159},"code":"    it('gets the elements center along the y axis', () => {\n      element.attr({\n        y: 10,\n        height: 100\n      });\n      expect(element.cy()).toBe(60);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"centers the element along the y axis and returns itself","suites":["Element.js","cy()"],"line":76,"updatePoint":{"line":76,"column":63,"index":2344},"code":"    it('centers the element along the y axis and returns itself', () => {\n      element.attr({\n        y: 10,\n        height: 100\n      });\n      expect(element.cy(100)).toBe(element);\n      expect(element.attr('y')).toBe(50);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"returns null if detached","suites":["Element.js","defs()"],"line":86,"updatePoint":{"line":86,"column":32,"index":2583},"code":"    it('returns null if detached', () => {\n      expect(new Rect().defs()).toBe(null);\n      expect(new G().put(new Rect()).defs()).toBe(null);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls defs on root node","suites":["Element.js","defs()"],"line":90,"updatePoint":{"line":90,"column":31,"index":2734},"code":"    it('calls defs on root node', () => {\n      const canvas = SVG();\n      const rect = canvas.rect(100, 100);\n      const spy = spyOn(canvas, 'defs').and.callThrough();\n      expect(rect.defs()).toBe(canvas.defs());\n      expect(spy.calls.count()).toBe(2);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls dx and dy with passed parameters and returns itself","suites":["Element.js","dmove()"],"line":99,"updatePoint":{"line":99,"column":65,"index":3071},"code":"    it('calls dx and dy with passed parameters and returns itself', () => {\n      const spyDx = spyOn(element, 'dx').and.callThrough();\n      const spyDy = spyOn(element, 'dy').and.callThrough();\n      expect(element.dmove(1, 2)).toBe(element);\n      expect(spyDx).toHaveBeenCalledWith(1);\n      expect(spyDy).toHaveBeenCalledWith(2);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"moves by zero by default","suites":["Element.js","dx()"],"line":108,"updatePoint":{"line":108,"column":32,"index":3414},"code":"    it('moves by zero by default', () => {\n      element.attr({\n        x: 10,\n        width: 100\n      });\n      expect(element.dx().x()).toBe(10);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"moves the element along the x axis relatively and returns itself","suites":["Element.js","dx()"],"line":115,"updatePoint":{"line":115,"column":72,"index":3611},"code":"    it('moves the element along the x axis relatively and returns itself', () => {\n      element.attr({\n        x: 10,\n        width: 100\n      });\n      expect(element.dx(100)).toBe(element);\n      expect(element.attr('x')).toBe(110);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"moves by zero by default","suites":["Element.js","dy()"],"line":125,"updatePoint":{"line":125,"column":32,"index":3848},"code":"    it('moves by zero by default', () => {\n      element.attr({\n        y: 10,\n        height: 100\n      });\n      expect(element.dy().y()).toBe(10);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"moves the element along the x axis relatively and returns itself","suites":["Element.js","dy()"],"line":132,"updatePoint":{"line":132,"column":72,"index":4046},"code":"    it('moves the element along the x axis relatively and returns itself', () => {\n      element.attr({\n        y: 10,\n        height: 100\n      });\n      expect(element.dy(100)).toBe(element);\n      expect(element.attr('y')).toBe(110);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"returns the root of this element","suites":["Element.js","root()"],"line":142,"updatePoint":{"line":142,"column":40,"index":4294},"code":"    it('returns the root of this element', () => {\n      const canvas = SVG();\n      const rect = canvas.rect();\n      expect(rect.root()).toBe(canvas);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"returns null if element is detached","suites":["Element.js","root()"],"line":147,"updatePoint":{"line":147,"column":43,"index":4458},"code":"    it('returns null if element is detached', () => {\n      expect(new G().put(new Rect()).root()).toBe(null);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Element.js","getEventHolder()"],"line":152,"updatePoint":{"line":152,"column":22,"index":4601},"code":"    it('returns itself', () => {\n      expect(element.getEventHolder()).toBe(element);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls attr with height","suites":["Element.js","height()"],"line":157,"updatePoint":{"line":157,"column":30,"index":4741},"code":"    it('calls attr with height', () => {\n      const spy = spyOn(element, 'attr');\n      element.height(123);\n      expect(spy).toHaveBeenCalledWith('height', 123);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls x and y with passed parameters and returns itself","suites":["Element.js","move()"],"line":164,"updatePoint":{"line":164,"column":63,"index":4982},"code":"    it('calls x and y with passed parameters and returns itself', () => {\n      const spyx = spyOn(element, 'x').and.callThrough();\n      const spyy = spyOn(element, 'y').and.callThrough();\n      expect(element.move(1, 2)).toBe(element);\n      expect(spyx).toHaveBeenCalledWith(1);\n      expect(spyy).toHaveBeenCalledWith(2);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"returns array of parents until the passed element or root svg","suites":["Element.js","parents()"],"line":173,"updatePoint":{"line":173,"column":69,"index":5360},"code":"    it('returns array of parents until the passed element or root svg', () => {\n      const canvas = SVG().addTo(container);\n      const groupA = canvas.group().addClass('test');\n      const group1 = canvas.group().addClass('test');\n      const group2 = group1.group();\n      const group3 = group2.group();\n      const rect = group3.rect(100, 100);\n      expect(rect.parents('.test')).toEqual([group3, group2, group1]);\n      expect(rect.parents(group2)).toEqual([group3, group2]);\n      expect(rect.parents(group1).length).toBe(3);\n      expect(rect.parents()).toEqual([group3, group2, group1, canvas]);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"returns array of parents until the closest matching parent","suites":["Element.js","parents()"],"line":185,"updatePoint":{"line":185,"column":66,"index":5970},"code":"    it('returns array of parents until the closest matching parent', () => {\n      const canvas = SVG().addTo(container);\n      const groupA = canvas.group().addClass('test');\n      const group1 = canvas.group().addClass('test');\n      const group2 = group1.group().addClass('test').addClass('foo');\n      const group3 = group2.group().addClass('foo');\n      const rect = group3.rect(100, 100);\n      expect(rect.parents('.test')).toEqual([group3, group2]);\n      expect(rect.parents('.foo')).toEqual([group3]);\n      expect(rect.parents('.test:not(.foo)')).toEqual([group3, group2, group1]);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"returns null if the passed element is not an ancestor","suites":["Element.js","parents()"],"line":196,"updatePoint":{"line":196,"column":61,"index":6566},"code":"    it('returns null if the passed element is not an ancestor', () => {\n      const canvas = SVG().addTo(container);\n      const groupA = canvas.group().addClass('test');\n      const group1 = canvas.group();\n      const group2 = group1.group();\n      const group3 = group2.group();\n      const rect = group3.rect(100, 100);\n      expect(rect.parents('.does-not-exist')).toEqual(null);\n      expect(rect.parents('.test')).toEqual(null);\n      expect(rect.parents(groupA)).toEqual(null);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"gets a referenced element from a given attribute","suites":["Element.js","reference()"],"line":209,"updatePoint":{"line":209,"column":56,"index":7095},"code":"    it('gets a referenced element from a given attribute', () => {\n      const canvas = SVG().addTo(container);\n      const rect = canvas.defs().rect(100, 100);\n      const use = canvas.use(rect);\n      const mark = canvas.marker(10, 10);\n      const path = canvas.path('M0 0 50 50').marker('end', mark);\n      expect(use.reference('href')).toBe(rect);\n      expect(path.reference('marker-end')).toBe(mark);\n      expect(rect.reference('width')).toBe(null);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"sets the given data to the dom property and returns itself","suites":["Element.js","setData()"],"line":221,"updatePoint":{"line":221,"column":66,"index":7609},"code":"    it('sets the given data to the dom property and returns itself', () => {\n      expect(element.setData({\n        foo: 'bar'\n      })).toBe(element);\n      expect(element.dom).toEqual({\n        foo: 'bar'\n      });\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls width and height with passed parameters and returns itself","suites":["Element.js","size()"],"line":231,"updatePoint":{"line":231,"column":72,"index":7875},"code":"    it('calls width and height with passed parameters and returns itself', () => {\n      const spyWidth = spyOn(element, 'width').and.callThrough();\n      const spyHeight = spyOn(element, 'height').and.callThrough();\n      expect(element.size(1, 2)).toBe(element);\n      expect(spyWidth).toHaveBeenCalledWith(objectContaining({\n        value: 1\n      }));\n      expect(spyHeight).toHaveBeenCalledWith(objectContaining({\n        value: 2\n      }));\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"changes height proportionally if null","suites":["Element.js","size()"],"line":242,"updatePoint":{"line":242,"column":45,"index":8304},"code":"    it('changes height proportionally if null', () => {\n      const canvas = SVG().addTo(container);\n      const element = canvas.rect(100, 100);\n      const spyWidth = spyOn(element, 'width').and.callThrough();\n      const spyHeight = spyOn(element, 'height').and.callThrough();\n      expect(element.size(200, null)).toBe(element);\n      expect(spyWidth).toHaveBeenCalledWith(objectContaining({\n        value: 200\n      }));\n      expect(spyHeight).toHaveBeenCalledWith(objectContaining({\n        value: 200\n      }));\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"changes width proportionally if null","suites":["Element.js","size()"],"line":255,"updatePoint":{"line":255,"column":44,"index":8831},"code":"    it('changes width proportionally if null', () => {\n      const canvas = SVG().addTo(container);\n      const element = canvas.rect(100, 100);\n      const spyWidth = spyOn(element, 'width').and.callThrough();\n      const spyHeight = spyOn(element, 'height').and.callThrough();\n      expect(element.size(null, 200)).toBe(element);\n      expect(spyWidth).toHaveBeenCalledWith(objectContaining({\n        value: 200\n      }));\n      expect(spyHeight).toHaveBeenCalledWith(objectContaining({\n        value: 200\n      }));\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls attr with width","suites":["Element.js","width()"],"line":270,"updatePoint":{"line":270,"column":29,"index":9379},"code":"    it('calls attr with width', () => {\n      const spy = spyOn(element, 'attr');\n      element.width(123);\n      expect(spy).toHaveBeenCalledWith('width', 123);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"removes previously set data","suites":["Element.js","writeDataToDom()"],"line":277,"updatePoint":{"line":277,"column":35,"index":9600},"code":"    it('removes previously set data', () => {\n      element.node.setAttribute('svgjs:data', JSON.stringify({\n        foo: 'bar'\n      }));\n      element.writeDataToDom();\n      expect(element.node.getAttribute('svgjs:data')).toBe(null);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"writes data from the dom property into the dom","suites":["Element.js","writeDataToDom()"],"line":284,"updatePoint":{"line":284,"column":54,"index":9864},"code":"    it('writes data from the dom property into the dom', () => {\n      element.dom = {\n        foo: 'bar'\n      };\n      element.writeDataToDom();\n      expect(element.node.getAttribute('svgjs:data')).toBe(JSON.stringify({\n        foo: 'bar'\n      }));\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"recursively calls writeDataToDom on all children","suites":["Element.js","writeDataToDom()"],"line":293,"updatePoint":{"line":293,"column":56,"index":10127},"code":"    it('recursively calls writeDataToDom on all children', () => {\n      const g = new G();\n      const rect = g.rect(100, 100);\n      const spy = spyOn(rect, 'writeDataToDom');\n      g.writeDataToDom();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls attr with x","suites":["Element.js","x()"],"line":302,"updatePoint":{"line":302,"column":25,"index":10378},"code":"    it('calls attr with x', () => {\n      const spy = spyOn(element, 'attr');\n      element.x(123);\n      expect(spy).toHaveBeenCalledWith('x', 123);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"calls attr with y","suites":["Element.js","y()"],"line":309,"updatePoint":{"line":309,"column":25,"index":10568},"code":"    it('calls attr with y', () => {\n      const spy = spyOn(element, 'attr');\n      element.y(123);\n      expect(spy).toHaveBeenCalledWith('y', 123);\n    });","file":"spec/elements/Element.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Ellipse","suites":["Ellipse.js","()"],"line":10,"updatePoint":{"line":10,"column":44,"index":267},"code":"    it('creates a new object of type Ellipse', () => {\n      expect(new Ellipse()).toEqual(any(Ellipse));\n    });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Ellipse.js","()"],"line":13,"updatePoint":{"line":13,"column":45,"index":382},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Ellipse({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"calls rx and ry with passed parameters and returns itself","suites":["Ellipse.js","size()"],"line":20,"updatePoint":{"line":20,"column":65,"index":574},"code":"    it('calls rx and ry with passed parameters and returns itself', () => {\n      const ellipse = new Ellipse();\n      const spyrx = spyOn(ellipse, 'rx').and.callThrough();\n      const spyry = spyOn(ellipse, 'ry').and.callThrough();\n      expect(ellipse.size(4, 2)).toBe(ellipse);\n      expect(spyrx).toHaveBeenCalledWith(objectContaining({\n        value: 2\n      }));\n      expect(spyry).toHaveBeenCalledWith(objectContaining({\n        value: 1\n      }));\n    });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"changes ry proportionally if null","suites":["Ellipse.js","size()"],"line":32,"updatePoint":{"line":32,"column":41,"index":1015},"code":"    it('changes ry proportionally if null', () => {\n      const canvas = SVG().addTo(container);\n      const ellipse = canvas.ellipse(100, 100);\n      const spyrx = spyOn(ellipse, 'rx').and.callThrough();\n      const spyry = spyOn(ellipse, 'ry').and.callThrough();\n      expect(ellipse.size(200, null)).toBe(ellipse);\n      expect(spyrx).toHaveBeenCalledWith(objectContaining({\n        value: 100\n      }));\n      expect(spyry).toHaveBeenCalledWith(objectContaining({\n        value: 100\n      }));\n    });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"changes rx proportionally if null","suites":["Ellipse.js","size()"],"line":45,"updatePoint":{"line":45,"column":41,"index":1521},"code":"    it('changes rx proportionally if null', () => {\n      const canvas = SVG().addTo(container);\n      const ellipse = canvas.ellipse(100, 100);\n      const spyrx = spyOn(ellipse, 'rx').and.callThrough();\n      const spyry = spyOn(ellipse, 'ry').and.callThrough();\n      expect(ellipse.size(null, 200)).toBe(ellipse);\n      expect(spyrx).toHaveBeenCalledWith(objectContaining({\n        value: 100\n      }));\n      expect(spyry).toHaveBeenCalledWith(objectContaining({\n        value: 100\n      }));\n    });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"creates a ellipse with given size","suites":["Ellipse.js","Container","ellipse()"],"line":61,"updatePoint":{"line":61,"column":43,"index":2101},"code":"      it('creates a ellipse with given size', () => {\n        const group = new G();\n        const ellipse = group.ellipse(50, 50);\n        expect(ellipse.attr('rx')).toBe(25);\n        expect(ellipse.attr('ry')).toBe(25);\n        expect(ellipse).toEqual(any(Ellipse));\n      });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"defaults to same radius with one argument","suites":["Ellipse.js","Container","ellipse()"],"line":68,"updatePoint":{"line":68,"column":51,"index":2388},"code":"      it('defaults to same radius with one argument', () => {\n        const group = new G();\n        const ellipse = group.ellipse(50);\n        expect(ellipse.attr('rx')).toBe(25);\n        expect(ellipse.attr('ry')).toBe(25);\n        expect(ellipse).toEqual(any(Ellipse));\n      });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"defaults to zero radius with no argument","suites":["Ellipse.js","Container","ellipse()"],"line":75,"updatePoint":{"line":75,"column":50,"index":2670},"code":"      it('defaults to zero radius with no argument', () => {\n        const group = new G();\n        const ellipse = group.ellipse();\n        expect(ellipse.attr('rx')).toBe(0);\n        expect(ellipse.attr('ry')).toBe(0);\n        expect(ellipse).toEqual(any(Ellipse));\n      });","file":"spec/elements/Ellipse.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type ForeignObject","suites":["ForeignObject.js","()"],"line":9,"updatePoint":{"line":9,"column":50,"index":253},"code":"    it('creates a new object of type ForeignObject', () => {\n      expect(new ForeignObject()).toEqual(any(ForeignObject));\n    });","file":"spec/elements/ForeignObject.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["ForeignObject.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":380},"code":"    it('sets passed attributes on the element', () => {\n      expect(new ForeignObject({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/ForeignObject.js","skipped":false,"dir":"spec"},{"name":"creates a foreignObject in the container","suites":["ForeignObject.js","Container","foreignObject()"],"line":20,"updatePoint":{"line":20,"column":50,"index":606},"code":"      it('creates a foreignObject in the container', () => {\n        const canvas = makeInstance().addTo('#canvas');\n        const foreignObject = canvas.foreignObject();\n        expect(foreignObject).toEqual(any(ForeignObject));\n        expect(foreignObject.parent()).toBe(canvas);\n      });","file":"spec/elements/ForeignObject.js","skipped":false,"dir":"spec"},{"name":"sets width and height correctly on construction","suites":["ForeignObject.js","Container","foreignObject()"],"line":26,"updatePoint":{"line":26,"column":57,"index":906},"code":"      it('sets width and height correctly on construction', () => {\n        const canvas = makeInstance().addTo('#canvas');\n        const foreignObject = canvas.foreignObject(100, 200);\n        expect(foreignObject.width()).toBe(100);\n        expect(foreignObject.height()).toBe(200);\n      });","file":"spec/elements/ForeignObject.js","skipped":false,"dir":"spec"},{"name":"is usable with Elements methods such as height() and width()","suites":["ForeignObject.js","Element methods"],"line":35,"updatePoint":{"line":35,"column":68,"index":1264},"code":"    it('is usable with Elements methods such as height() and width()', () => {\n      const canvas = makeInstance().addTo('#canvas');\n      const foreignObject = canvas.foreignObject();\n      foreignObject.width(100).height(200).x(10).y(20);\n      expect(foreignObject.width()).toBe(100);\n      expect(foreignObject.height()).toBe(200);\n      expect(foreignObject.x()).toBe(10);\n      expect(foreignObject.y()).toBe(20);\n    });","file":"spec/elements/ForeignObject.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Fragment","suites":["Fragment.js","()"],"line":11,"updatePoint":{"line":11,"column":45,"index":357},"code":"    it('creates a new object of type Fragment', () => {\n      expect(new Fragment()).toEqual(any(Fragment));\n    });","file":"spec/elements/Fragment.js","skipped":false,"dir":"spec"},{"name":"uses passed node instead of creating","suites":["Fragment.js","()"],"line":14,"updatePoint":{"line":14,"column":44,"index":473},"code":"    it('uses passed node instead of creating', () => {\n      const fragment = getWindow().document.createDocumentFragment();\n      expect(new Fragment(fragment).node).toBe(fragment);\n    });","file":"spec/elements/Fragment.js","skipped":false,"dir":"spec"},{"name":"has all Container methods available","suites":["Fragment.js","()"],"line":18,"updatePoint":{"line":18,"column":43,"index":663},"code":"    it('has all Container methods available', () => {\n      const frag = new Fragment();\n      const rect = frag.rect(100, 100);\n      expect(frag.children()).toEqual([rect]);\n    });","file":"spec/elements/Fragment.js","skipped":false,"dir":"spec"},{"name":"calls parent method with outerHtml = false","suites":["Fragment.js","xml()","as setter"],"line":26,"updatePoint":{"line":26,"column":52,"index":924},"code":"      it('calls parent method with outerHtml = false', () => {\n        const frag = new Fragment();\n        const spy = spyOn(Dom.prototype, 'xml').and.callThrough();\n        frag.xml('<rect />', true, svg);\n        expect(spy).toHaveBeenCalledWith('<rect />', false, svg);\n      });","file":"spec/elements/Fragment.js","skipped":false,"dir":"spec"},{"name":"calls parent method with outerHtml = false - 1","suites":["Fragment.js","xml()","as getter"],"line":34,"updatePoint":{"line":34,"column":56,"index":1254},"code":"      it('calls parent method with outerHtml = false - 1', () => {\n        const frag = new Fragment();\n        const group = frag.group();\n        group.rect(123.456, 234.567);\n        const spy = spyOn(Dom.prototype, 'xml').and.callThrough();\n        expect(frag.xml(false, svg)).toBe('<g><rect width=\"123.456\" height=\"234.567\"></rect></g>');\n        expect(spy).toHaveBeenCalledWith(false, svg);\n      });","file":"spec/elements/Fragment.js","skipped":false,"dir":"spec"},{"name":"calls parent method with outerHtml = false - 2","suites":["Fragment.js","xml()","as getter"],"line":42,"updatePoint":{"line":42,"column":56,"index":1663},"code":"      it('calls parent method with outerHtml = false - 2', () => {\n        const frag = new Fragment();\n        const group = frag.group();\n        group.rect(123.456, 234.567);\n        const spy = spyOn(Dom.prototype, 'xml').and.callThrough();\n        expect(frag.xml(true, svg)).toBe('<g><rect width=\"123.456\" height=\"234.567\"></rect></g>');\n        expect(spy).toHaveBeenCalledWith(false, svg);\n      });","file":"spec/elements/Fragment.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type G","suites":["G.js","()"],"line":9,"updatePoint":{"line":9,"column":38,"index":219},"code":"    it('creates a new object of type G', () => {\n      expect(new G()).toEqual(any(G));\n    });","file":"spec/elements/G.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["G.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":322},"code":"    it('sets passed attributes on the element', () => {\n      expect(new G({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/G.js","skipped":false,"dir":"spec"},{"name":"creates a group in the container","suites":["G.js","Container","group()"],"line":20,"updatePoint":{"line":20,"column":42,"index":520},"code":"      it('creates a group in the container', () => {\n        const canvas = SVG().addTo(container);\n        const g = canvas.group();\n        expect(g).toEqual(any(G));\n        expect(g.parent()).toBe(canvas);\n      });","file":"spec/elements/G.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type LinearGradient","suites":["Gradient.js","()"],"line":11,"updatePoint":{"line":11,"column":51,"index":297},"code":"    it('creates a new object of type LinearGradient', () => {\n      const gradient = new Gradient('linear');\n      expect(gradient).toEqual(any(Gradient));\n      expect(gradient.type).toBe('linearGradient');\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type RadialGradient","suites":["Gradient.js","()"],"line":16,"updatePoint":{"line":16,"column":51,"index":513},"code":"    it('creates a new object of type RadialGradient', () => {\n      const gradient = new Gradient('radial');\n      expect(gradient).toEqual(any(Gradient));\n      expect(gradient.type).toBe('radialGradient');\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Gradient.js","()"],"line":21,"updatePoint":{"line":21,"column":45,"index":723},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Gradient('linear', {\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"relays to parents attr method for any call except transformation","suites":["Gradient.js","attr()"],"line":28,"updatePoint":{"line":28,"column":72,"index":933},"code":"    it('relays to parents attr method for any call except transformation', () => {\n      const gradient = new Gradient('linear');\n      const spy = spyOn(Container.prototype, 'attr');\n      gradient.attr(1, 2, 3);\n      gradient.attr('transform', 2, 3);\n      expect(spy).toHaveBeenCalledWith(1, 2, 3);\n      expect(spy).toHaveBeenCalledWith('gradientTransform', 2, 3);\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"returns an empty box","suites":["Gradient.js","bbox()"],"line":38,"updatePoint":{"line":38,"column":28,"index":1302},"code":"    it('returns an empty box', () => {\n      expect(new Gradient('linear').bbox().isNulled()).toBe(true);\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"gets all targets of this gradient","suites":["Gradient.js","targets()"],"line":43,"updatePoint":{"line":43,"column":41,"index":1467},"code":"    it('gets all targets of this gradient', () => {\n      const canvas = SVG().addTo(container);\n      const gradient = canvas.gradient('linear');\n      const rect = canvas.rect(100, 100).fill(gradient);\n      expect(gradient.targets()).toEqual([rect]);\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"calls url() and returns the result","suites":["Gradient.js","toString()"],"line":51,"updatePoint":{"line":51,"column":42,"index":1769},"code":"    it('calls url() and returns the result', () => {\n      const gradient = new Gradient('linear');\n      expect(gradient.toString()).toBe(gradient.url());\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"clears the element","suites":["Gradient.js","update()"],"line":57,"updatePoint":{"line":57,"column":26,"index":1954},"code":"    it('clears the element', () => {\n      const gradient = new Gradient('linear');\n      gradient.stop(0.1, '#fff');\n      expect(gradient.update().children()).toEqual([]);\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"executes a function in the context of the gradient","suites":["Gradient.js","update()"],"line":62,"updatePoint":{"line":62,"column":58,"index":2168},"code":"    it('executes a function in the context of the gradient', () => {\n      const gradient = new Gradient('linear');\n      const spy = createSpy('gradient');\n      gradient.update(spy);\n      expect(spy.calls.all()).toEqual([objectContaining({\n        object: gradient,\n        args: [gradient]\n      })]);\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"returns url(#id)","suites":["Gradient.js","url()"],"line":73,"updatePoint":{"line":73,"column":24,"index":2482},"code":"    it('returns url(#id)', () => {\n      const gradient = new Gradient('linear').id('foo');\n      expect(gradient.url()).toBe('url(\"#foo\")');\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"relays the call to defs","suites":["Gradient.js","Container"],"line":79,"updatePoint":{"line":79,"column":31,"index":2677},"code":"    it('relays the call to defs', () => {\n      const canvas = new SVG();\n      const defs = canvas.defs();\n      const spy = spyOn(defs, 'gradient').and.callThrough();\n      const spy2 = createSpy('gradient');\n      canvas.gradient('linear', spy2);\n      expect(spy).toHaveBeenCalledWith('linear', spy2);\n      expect(spy2).toHaveBeenCalled();\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"creates a pattern in the defs","suites":["Gradient.js","Defs"],"line":90,"updatePoint":{"line":90,"column":37,"index":3069},"code":"    it('creates a pattern in the defs', () => {\n      const canvas = new SVG();\n      const defs = canvas.defs();\n      const spy = createSpy('gradient');\n      const gradient = defs.gradient('linear', spy);\n      expect(gradient).toEqual(any(Gradient));\n      expect(gradient.type).toBe('linearGradient');\n      expect(defs.children()).toEqual([gradient]);\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/Gradient.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Image","suites":["Image.js","()"],"line":13,"updatePoint":{"line":13,"column":42,"index":359},"code":"    it('creates a new object of type Image', () => {\n      expect(new Image()).toEqual(any(Image));\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Image.js","()"],"line":16,"updatePoint":{"line":16,"column":45,"index":470},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Image({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"is a noop when url is falsy and returns itself","suites":["Image.js","load()"],"line":23,"updatePoint":{"line":23,"column":54,"index":649},"code":"    it('is a noop when url is falsy and returns itself', () => {\n      const image = Object.freeze(new Image());\n      expect(image.load()).toBe(image);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"executes a callback when the image is loaded","suites":["Image.js","load()"],"line":27,"updatePoint":{"line":27,"column":52,"index":808},"code":"    it('executes a callback when the image is loaded', done => {\n      const spy = createSpy('image', e => {\n        expect(e.target.complete).toBe(true);\n        expect(spy.calls.all()).toEqual([objectContaining({\n          object: image,\n          args: [any(getWindow().Event)]\n        })]);\n        done();\n      }).and.callThrough();\n      const image = new Image().load(url, spy);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"errors when image cant be loaded","suites":["Image.js","load()"],"line":38,"updatePoint":{"line":38,"column":40,"index":1191},"code":"    it('errors when image cant be loaded', () => {\n      // cant test this because of jasmine timeouts and browser disconnects\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"should set width and height automatically if no size is given","suites":["Image.js","load()"],"line":46,"updatePoint":{"line":46,"column":69,"index":1501},"code":"    it('should set width and height automatically if no size is given', done => {\n      const image = new Image().load(url, () => {\n        expect(image.attr('height')).toBe(1);\n        expect(image.attr('width')).toBe(1);\n        done();\n      });\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"should not change with and height when size already set","suites":["Image.js","load()"],"line":53,"updatePoint":{"line":53,"column":63,"index":1752},"code":"    it('should not change with and height when size already set', done => {\n      const image = new Image().load(url, () => {\n        expect(image.attr('height')).toBe(100);\n        expect(image.attr('width')).toBe(100);\n        done();\n      }).size(100, 100);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"changes size of pattern to image size if parent is pattern and size is 0","suites":["Image.js","load()"],"line":60,"updatePoint":{"line":60,"column":80,"index":2039},"code":"    it('changes size of pattern to image size if parent is pattern and size is 0', done => {\n      const pattern = new Pattern().size(0, 0);\n      new Image().load(url, () => {\n        expect(pattern.attr('height')).toBe(100);\n        expect(pattern.attr('width')).toBe(100);\n        done();\n      }).size(100, 100).addTo(pattern);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"does not change size of pattern if pattern has a size set","suites":["Image.js","load()"],"line":68,"updatePoint":{"line":68,"column":65,"index":2364},"code":"    it('does not change size of pattern if pattern has a size set', done => {\n      const pattern = new Pattern().size(50, 50);\n      new Image().load(url, () => {\n        expect(pattern.attr('height')).toBe(50);\n        expect(pattern.attr('width')).toBe(50);\n        done();\n      }).size(100, 100).addTo(pattern);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"creates image in the container","suites":["Image.js","Container","image()"],"line":79,"updatePoint":{"line":79,"column":40,"index":2734},"code":"      it('creates image in the container', () => {\n        const canvas = SVG();\n        const image = canvas.image(url);\n        expect(image).toBe(image);\n        expect(canvas.children()).toEqual([image]);\n      });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"creates a pattern in defs when value is an image and puts image there","suites":["Image.js","attribute hook"],"line":88,"updatePoint":{"line":88,"column":77,"index":3041},"code":"    it('creates a pattern in defs when value is an image and puts image there', () => {\n      const canvas = SVG();\n      const image = new Image();\n      canvas.rect(100, 100).attr('something', image);\n      expect(canvas.defs().children()).toEqual([any(Pattern)]);\n      expect(canvas.defs().findOne('image')).toBe(image);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"creates an image from image path in defs with pattern when attr is fill","suites":["Image.js","attribute hook"],"line":95,"updatePoint":{"line":95,"column":79,"index":3376},"code":"    it('creates an image from image path in defs with pattern when attr is fill', () => {\n      const canvas = SVG();\n      canvas.rect(100, 100).attr('fill', url);\n      expect(canvas.defs().children()).toEqual([any(Pattern)]);\n      expect(canvas.defs().findOne('image').attr('href')).toBe(url);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"creates an image from image path in defs with pattern when attr is stroke","suites":["Image.js","attribute hook"],"line":101,"updatePoint":{"line":101,"column":81,"index":3684},"code":"    it('creates an image from image path in defs with pattern when attr is stroke', () => {\n      const canvas = SVG();\n      canvas.rect(100, 100).attr('stroke', url);\n      expect(canvas.defs().children()).toEqual([any(Pattern)]);\n      expect(canvas.defs().findOne('image').attr('href')).toBe(url);\n    });","file":"spec/elements/Image.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Line","suites":["Line.js","()"],"line":14,"updatePoint":{"line":14,"column":41,"index":344},"code":"    it('creates a new object of type Line', () => {\n      expect(new Line()).toEqual(any(Line));\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Line.js","()"],"line":17,"updatePoint":{"line":17,"column":45,"index":453},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Line({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"returns a PointArray containing the points of the line","suites":["Line.js","array()"],"line":24,"updatePoint":{"line":24,"column":62,"index":640},"code":"    it('returns a PointArray containing the points of the line', () => {\n      const array = line.plot(1, 2, 3, 4).array();\n      expect(array).toEqual(any(PointArray));\n      expect(array).toEqual([[1, 2], [3, 4]]);\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Line.js","move()"],"line":31,"updatePoint":{"line":31,"column":22,"index":860},"code":"    it('returns itself', () => {\n      expect(line.move(0, 0)).toBe(line);\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"moves the line along x and y axis","suites":["Line.js","move()"],"line":34,"updatePoint":{"line":34,"column":41,"index":962},"code":"    it('moves the line along x and y axis', () => {\n      const canvas = SVG().addTo(container);\n      const line = canvas.line(1, 2, 3, 4);\n      line.move(50, 50);\n      expect(line.bbox()).toEqual(objectContaining({\n        x: 50,\n        y: 50,\n        width: 2,\n        height: 2\n      }));\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"relays to array() as getter","suites":["Line.js","plot()"],"line":47,"updatePoint":{"line":47,"column":35,"index":1295},"code":"    it('relays to array() as getter', () => {\n      const spy = spyOn(line, 'array');\n      line.plot();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"calls attr with line attributes when 4 parameters given","suites":["Line.js","plot()"],"line":52,"updatePoint":{"line":52,"column":63,"index":1474},"code":"    it('calls attr with line attributes when 4 parameters given', () => {\n      const spy = spyOn(line, 'attr');\n      line.plot(1, 2, 3, 4);\n      expect(spy).toHaveBeenCalledWith({\n        x1: 1,\n        y1: 2,\n        x2: 3,\n        y2: 4\n      });\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"calls attr with line attributes when string given","suites":["Line.js","plot()"],"line":62,"updatePoint":{"line":62,"column":57,"index":1728},"code":"    it('calls attr with line attributes when string given', () => {\n      const spy = spyOn(line, 'attr');\n      line.plot('1, 2, 3, 4');\n      expect(spy).toHaveBeenCalledWith({\n        x1: 1,\n        y1: 2,\n        x2: 3,\n        y2: 4\n      });\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"calls attr with line attributes when array given","suites":["Line.js","plot()"],"line":72,"updatePoint":{"line":72,"column":56,"index":1983},"code":"    it('calls attr with line attributes when array given', () => {\n      const spy = spyOn(line, 'attr');\n      line.plot([1, 2, 3, 4]);\n      expect(spy).toHaveBeenCalledWith({\n        x1: 1,\n        y1: 2,\n        x2: 3,\n        y2: 4\n      });\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"calls attr with line attributes when multi array given","suites":["Line.js","plot()"],"line":82,"updatePoint":{"line":82,"column":62,"index":2244},"code":"    it('calls attr with line attributes when multi array given', () => {\n      const spy = spyOn(line, 'attr');\n      line.plot([[1, 2], [3, 4]]);\n      expect(spy).toHaveBeenCalledWith({\n        x1: 1,\n        y1: 2,\n        x2: 3,\n        y2: 4\n      });\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"calls attr with line attributes when PointArray given","suites":["Line.js","plot()"],"line":92,"updatePoint":{"line":92,"column":61,"index":2508},"code":"    it('calls attr with line attributes when PointArray given', () => {\n      const spy = spyOn(line, 'attr');\n      line.plot(new PointArray([[1, 2], [3, 4]]));\n      expect(spy).toHaveBeenCalledWith({\n        x1: 1,\n        y1: 2,\n        x2: 3,\n        y2: 4\n      });\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Line.js","size()"],"line":104,"updatePoint":{"line":104,"column":22,"index":2784},"code":"    it('returns itself', () => {\n      expect(line.size(50, 50)).toBe(line);\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"sets the size of the line","suites":["Line.js","size()"],"line":107,"updatePoint":{"line":107,"column":33,"index":2880},"code":"    it('sets the size of the line', () => {\n      const canvas = SVG().addTo(container);\n      const line = canvas.line(1, 2, 3, 4);\n      line.size(50, 50);\n      expect(line.bbox()).toEqual(objectContaining({\n        width: 50,\n        height: 50,\n        x: 1,\n        y: 2\n      }));\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"changes height proportionally","suites":["Line.js","size()"],"line":118,"updatePoint":{"line":118,"column":37,"index":3180},"code":"    it('changes height proportionally', () => {\n      const canvas = SVG().addTo(container);\n      const line = canvas.line(1, 2, 3, 4);\n      line.size(50, null);\n      expect(line.bbox()).toEqual(objectContaining({\n        width: 50,\n        height: 50,\n        x: 1,\n        y: 2\n      }));\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"changes width proportionally","suites":["Line.js","size()"],"line":129,"updatePoint":{"line":129,"column":36,"index":3481},"code":"    it('changes width proportionally', () => {\n      const canvas = SVG().addTo(container);\n      const line = canvas.line(1, 2, 3, 4);\n      line.size(null, 50);\n      expect(line.bbox()).toEqual(objectContaining({\n        width: 50,\n        height: 50,\n        x: 1,\n        y: 2\n      }));\n    });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"creates a line with given points","suites":["Line.js","Container","line()"],"line":143,"updatePoint":{"line":143,"column":42,"index":3857},"code":"      it('creates a line with given points', () => {\n        const group = new G();\n        const line = group.line(1, 2, 3, 4);\n        expect(line.array()).toEqual([[1, 2], [3, 4]]);\n        expect(line).toEqual(any(Line));\n      });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"defaults to zero line","suites":["Line.js","Container","line()"],"line":149,"updatePoint":{"line":149,"column":31,"index":4082},"code":"      it('defaults to zero line', () => {\n        const group = new G();\n        const line = group.line();\n        expect(line.array()).toEqual([[0, 0], [0, 0]]);\n        expect(line).toEqual(any(Line));\n      });","file":"spec/elements/Line.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Marker","suites":["Marker.js","()"],"line":9,"updatePoint":{"line":9,"column":43,"index":258},"code":"    it('creates a new object of type Marker', () => {\n      expect(new Marker()).toEqual(any(Marker));\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Marker.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":371},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Marker({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"sets the markerWidth attribute","suites":["Marker.js","width()"],"line":19,"updatePoint":{"line":19,"column":38,"index":536},"code":"    it('sets the markerWidth attribute', () => {\n      const marker = new Marker().width(100);\n      expect(marker.attr('markerWidth')).toBe(100);\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"sets the markerHeight attribute","suites":["Marker.js","height()"],"line":25,"updatePoint":{"line":25,"column":39,"index":729},"code":"    it('sets the markerHeight attribute', () => {\n      const marker = new Marker().height(100);\n      expect(marker.attr('markerHeight')).toBe(100);\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"sets the orient attribute","suites":["Marker.js","orient()"],"line":31,"updatePoint":{"line":31,"column":33,"index":918},"code":"    it('sets the orient attribute', () => {\n      const marker = new Marker().orient('auto');\n      expect(marker.attr('orient')).toBe('auto');\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"sets refX and refY attribute","suites":["Marker.js","ref()"],"line":37,"updatePoint":{"line":37,"column":36,"index":1107},"code":"    it('sets refX and refY attribute', () => {\n      const marker = new Marker().ref(10, 20);\n      expect(marker.attr('refX')).toBe(10);\n      expect(marker.attr('refY')).toBe(20);\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"updates the marker","suites":["Marker.js","update()"],"line":44,"updatePoint":{"line":44,"column":26,"index":1324},"code":"    it('updates the marker', () => {\n      const marker = new Marker();\n      marker.rect(100, 100);\n      marker.update(function (m) {\n        m.rect(100, 100);\n        expect(this).toBe(marker);\n        expect(m).toBe(marker);\n      });\n      expect(marker.children().length).toBe(1);\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"returns the url identifier for this marker","suites":["Marker.js","toString()"],"line":56,"updatePoint":{"line":56,"column":50,"index":1682},"code":"    it('returns the url identifier for this marker', () => {\n      const marker = new Marker();\n      expect(marker.toString()).toBe('url(#' + marker.id() + ')');\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates an instance of Marker","suites":["Marker.js","Container","marker()"],"line":69,"updatePoint":{"line":69,"column":39,"index":2027},"code":"      it('creates an instance of Marker', () => {\n        const marker = group.marker(10, 12);\n        expect(marker instanceof Marker).toBeTrue();\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates marker in defs","suites":["Marker.js","Container","marker()"],"line":73,"updatePoint":{"line":73,"column":32,"index":2178},"code":"      it('creates marker in defs', () => {\n        const marker = group.marker(10, 12);\n        expect(marker.parent() instanceof Defs).toBeTruthy();\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"sets the refX to half of the given width and height","suites":["Marker.js","Container","marker()"],"line":77,"updatePoint":{"line":77,"column":61,"index":2367},"code":"      it('sets the refX to half of the given width and height', () => {\n        const marker = group.marker(10, 12);\n        expect(marker.node.getAttribute('refX')).toBe('5');\n        expect(marker.node.getAttribute('refY')).toBe('6');\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates a marker in the defs and sets all attributes","suites":["Marker.js","Defs","marker()"],"line":86,"updatePoint":{"line":86,"column":62,"index":2689},"code":"      it('creates a marker in the defs and sets all attributes', () => {\n        const canvas = SVG();\n        const defs = canvas.defs();\n        const marker = defs.marker(10, 12);\n        expect(marker.attr('refX')).toBe(5);\n        expect(marker.attr('refY')).toBe(6);\n        expect(marker.attr('markerWidth')).toBe(10);\n        expect(marker.attr('markerHeight')).toBe(12);\n        expect(marker.attr('viewBox')).toBe('0 0 10 12');\n        expect(marker.attr('orient')).toBe('auto');\n        expect(marker).toEqual(any(Marker));\n        expect(defs.children()).toEqual([marker]);\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates an instance of Marker","suites":["Marker.js","marker"],"line":108,"updatePoint":{"line":108,"column":37,"index":3600},"code":"    it('creates an instance of Marker', () => {\n      path.marker('mid', 10, 12, function (add) {\n        add.rect(10, 12);\n        this.ref(5, 6);\n      });\n      expect(path.reference('marker-mid').children().length).toBe(1);\n      expect(path.reference('marker-mid').attr('refX')).toBe(5);\n      expect(path.reference('marker-mid') instanceof Marker).toBeTruthy();\n    });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"returns the target element","suites":["Marker.js","marker","marker()"],"line":118,"updatePoint":{"line":118,"column":36,"index":4008},"code":"      it('returns the target element', () => {\n        expect(path.marker('start', 10, 12)).toBe(path);\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates a marker and applies it to the marker-start attribute","suites":["Marker.js","marker","marker()"],"line":121,"updatePoint":{"line":121,"column":71,"index":4157},"code":"      it('creates a marker and applies it to the marker-start attribute', () => {\n        path.marker('start', 10, 12);\n        marker = path.reference('marker-start');\n        expect(path.node.getAttribute('marker-start')).toBe(marker.toString());\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates a marker and applies it to the marker-mid attribute","suites":["Marker.js","marker","marker()"],"line":126,"updatePoint":{"line":126,"column":69,"index":4414},"code":"      it('creates a marker and applies it to the marker-mid attribute', () => {\n        path.marker('mid', 10, 12);\n        marker = path.reference('marker-mid');\n        expect(path.node.getAttribute('marker-mid')).toBe(marker.toString());\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates a marker and applies it to the marker-end attribute","suites":["Marker.js","marker","marker()"],"line":131,"updatePoint":{"line":131,"column":69,"index":4665},"code":"      it('creates a marker and applies it to the marker-end attribute', () => {\n        path.marker('end', 10, 12);\n        marker = path.reference('marker-end');\n        expect(path.node.getAttribute('marker-end')).toBe(marker.toString());\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates a marker and applies it to the marker-end attribute","suites":["Marker.js","marker","marker()"],"line":136,"updatePoint":{"line":136,"column":69,"index":4916},"code":"      it('creates a marker and applies it to the marker-end attribute', () => {\n        path.marker('all', 10, 12);\n        marker = path.reference('marker');\n        expect(path.node.getAttribute('marker')).toBe(marker.toString());\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"accepts an instance of an existing marker element as the second argument","suites":["Marker.js","marker","marker()"],"line":141,"updatePoint":{"line":141,"column":82,"index":5172},"code":"      it('accepts an instance of an existing marker element as the second argument', () => {\n        marker = new Marker().size(11, 11);\n        path.marker('mid', marker);\n        expect(path.node.getAttribute('marker-mid')).toBe(marker.toString());\n      });","file":"spec/elements/Marker.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Mask","suites":["Mask.js","()"],"line":9,"updatePoint":{"line":9,"column":41,"index":252},"code":"    it('creates a new object of type Mask', () => {\n      expect(new Mask()).toEqual(any(Mask));\n    });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Mask.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":361},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Mask({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"unmasks all targets","suites":["Mask.js","remove()"],"line":19,"updatePoint":{"line":19,"column":27,"index":514},"code":"    it('unmasks all targets', () => {\n      const canvas = SVG().addTo(container);\n      const mask = canvas.mask();\n      const rect = canvas.rect(100, 100).maskWith(mask);\n      expect(mask.remove()).toBe(mask);\n      expect(rect.masker()).toBe(null);\n    });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"calls remove on parent class","suites":["Mask.js","remove()"],"line":26,"updatePoint":{"line":26,"column":36,"index":785},"code":"    it('calls remove on parent class', () => {\n      const mask = new Mask();\n      const spy = spyOn(Container.prototype, 'remove');\n      mask.remove();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"gets all targets of this maskPath","suites":["Mask.js","targets()"],"line":34,"updatePoint":{"line":34,"column":41,"index":1029},"code":"    it('gets all targets of this maskPath', () => {\n      const canvas = SVG().addTo(container);\n      const mask = canvas.mask();\n      const rect = canvas.rect(100, 100).maskWith(mask);\n      expect(mask.targets()).toEqual([rect]);\n    });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"creates a maskPath in the defs","suites":["Mask.js","Container","mask()"],"line":43,"updatePoint":{"line":43,"column":40,"index":1339},"code":"      it('creates a maskPath in the defs', () => {\n        const canvas = SVG();\n        const mask = canvas.mask();\n        expect(mask).toEqual(any(Mask));\n        expect(canvas.defs().children()).toEqual([mask]);\n      });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"returns the instance of Mask the current element is masked with","suites":["Mask.js","Element","masker()"],"line":53,"updatePoint":{"line":53,"column":73,"index":1675},"code":"      it('returns the instance of Mask the current element is masked with', () => {\n        const canvas = SVG().addTo(container);\n        const mask = canvas.mask();\n        const rect = canvas.rect(100, 100).maskWith(mask);\n        expect(rect.masker()).toEqual(mask);\n      });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"returns null if no maskPath was found","suites":["Mask.js","Element","masker()"],"line":59,"updatePoint":{"line":59,"column":47,"index":1930},"code":"      it('returns null if no maskPath was found', () => {\n        expect(new Rect().masker()).toBe(null);\n      });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"sets the mask attribute on the element to the id of the maskPath","suites":["Mask.js","Element","maskWith()"],"line":64,"updatePoint":{"line":64,"column":74,"index":2116},"code":"      it('sets the mask attribute on the element to the id of the maskPath', () => {\n        const mask = new Mask().id('foo');\n        const rect = new Rect().maskWith(mask);\n        expect(rect.attr('mask')).toBe('url(\"#foo\")');\n      });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"creates a maskPath and appends the passed element to it to mask current element","suites":["Mask.js","Element","maskWith()"],"line":69,"updatePoint":{"line":69,"column":89,"index":2372},"code":"      it('creates a maskPath and appends the passed element to it to mask current element', () => {\n        const canvas = SVG().addTo(container);\n        const circle = canvas.circle(40);\n        const rect = canvas.rect(100, 100).maskWith(circle);\n        expect(circle.parent()).toEqual(any(Mask));\n        expect(rect.attr('mask')).toBe(`url(\"#${circle.parent().id()}\")`);\n      });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"sets the mask-target attribute to null and returns itself","suites":["Mask.js","Element","unmask()"],"line":78,"updatePoint":{"line":78,"column":67,"index":2778},"code":"      it('sets the mask-target attribute to null and returns itself', () => {\n        const mask = new Mask().id('foo');\n        const rect = new Rect().maskWith(mask);\n        expect(rect.unmask()).toBe(rect);\n        expect(rect.attr('mask')).toBe(undefined);\n      });","file":"spec/elements/Mask.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Path","suites":["Path.js","()"],"line":14,"updatePoint":{"line":14,"column":41,"index":340},"code":"    it('creates a new object of type Path', () => {\n      expect(new Path()).toEqual(any(Path));\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Path.js","()"],"line":17,"updatePoint":{"line":17,"column":45,"index":449},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Path({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"returns the underlying PathArray","suites":["Path.js","array()"],"line":24,"updatePoint":{"line":24,"column":40,"index":614},"code":"    it('returns the underlying PathArray', () => {\n      const array = path.plot('M1 2 3 4').array();\n      expect(array).toEqual(any(PathArray));\n      expect(array).toEqual([['M', 1, 2], ['L', 3, 4]]);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"clears the array cache and returns itself","suites":["Path.js","clear()"],"line":31,"updatePoint":{"line":31,"column":49,"index":871},"code":"    it('clears the array cache and returns itself', () => {\n      const array = path.plot('M1 2 3 4').array();\n      expect(path.clear()).toBe(path);\n      expect(array).not.toBe(path._array);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"gets the height of the path","suites":["Path.js","height()"],"line":38,"updatePoint":{"line":38,"column":35,"index":1095},"code":"    it('gets the height of the path', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      expect(path.height()).toBe(50);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"sets the height of the path and returns itself","suites":["Path.js","height()"],"line":43,"updatePoint":{"line":43,"column":54,"index":1298},"code":"    it('sets the height of the path and returns itself', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      expect(path.height(100)).toBe(path);\n      expect(path.height()).toBe(100);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Path.js","move()"],"line":51,"updatePoint":{"line":51,"column":22,"index":1548},"code":"    it('returns itself', () => {\n      expect(path.move(0, 0)).toBe(path);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"moves the path along x and y axis","suites":["Path.js","move()"],"line":54,"updatePoint":{"line":54,"column":41,"index":1650},"code":"    it('moves the path along x and y axis', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      path.move(50, 50);\n      expect(path.bbox()).toEqual(objectContaining({\n        x: 50,\n        y: 50,\n        width: 50,\n        height: 50\n      }));\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"relays to array() as getter","suites":["Path.js","plot()"],"line":67,"updatePoint":{"line":67,"column":35,"index":1988},"code":"    it('relays to array() as getter', () => {\n      const spy = spyOn(path, 'array');\n      path.plot();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"works by passing a string","suites":["Path.js","plot()"],"line":72,"updatePoint":{"line":72,"column":33,"index":2137},"code":"    it('works by passing a string', () => {\n      const spy = spyOn(path, 'attr');\n      path.plot('M0 0 50 50');\n      expect(spy).toHaveBeenCalledWith('d', 'M0 0 50 50');\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"works with flat array","suites":["Path.js","plot()"],"line":77,"updatePoint":{"line":77,"column":29,"index":2314},"code":"    it('works with flat array', () => {\n      const spy = spyOn(path, 'attr');\n      path.plot(['M', 0, 0, 'L', 50, 50]);\n      expect(spy).toHaveBeenCalledWith('d', [['M', 0, 0], ['L', 50, 50]]);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"works with multi array","suites":["Path.js","plot()"],"line":82,"updatePoint":{"line":82,"column":30,"index":2520},"code":"    it('works with multi array', () => {\n      const spy = spyOn(path, 'attr');\n      path.plot([['M', 0, 0], ['L', 50, 50]]);\n      expect(spy).toHaveBeenCalledWith('d', [['M', 0, 0], ['L', 50, 50]]);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"works with PathArray","suites":["Path.js","plot()"],"line":87,"updatePoint":{"line":87,"column":28,"index":2728},"code":"    it('works with PathArray', () => {\n      const spy = spyOn(path, 'attr');\n      path.plot(new PathArray([['M', 0, 0], ['L', 50, 50]]));\n      expect(spy).toHaveBeenCalledWith('d', [['M', 0, 0], ['L', 50, 50]]);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Path.js","size()"],"line":94,"updatePoint":{"line":94,"column":22,"index":2980},"code":"    it('returns itself', () => {\n      expect(path.size(50, 50)).toBe(path);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"sets the size of the path","suites":["Path.js","size()"],"line":97,"updatePoint":{"line":97,"column":33,"index":3076},"code":"    it('sets the size of the path', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      path.size(100, 100);\n      expect(path.bbox()).toEqual(objectContaining({\n        width: 100,\n        height: 100,\n        x: 0,\n        y: 0\n      }));\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"changes height proportionally","suites":["Path.js","size()"],"line":108,"updatePoint":{"line":108,"column":37,"index":3383},"code":"    it('changes height proportionally', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      path.size(100, null);\n      expect(path.bbox()).toEqual(objectContaining({\n        width: 100,\n        height: 100,\n        x: 0,\n        y: 0\n      }));\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"changes width proportionally","suites":["Path.js","size()"],"line":119,"updatePoint":{"line":119,"column":36,"index":3690},"code":"    it('changes width proportionally', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      path.size(null, 100);\n      expect(path.bbox()).toEqual(objectContaining({\n        width: 100,\n        height: 100,\n        x: 0,\n        y: 0\n      }));\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"gets the width of the path","suites":["Path.js","width()"],"line":132,"updatePoint":{"line":132,"column":34,"index":4031},"code":"    it('gets the width of the path', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      expect(path.width()).toBe(50);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"sets the width of the path and returns itself","suites":["Path.js","width()"],"line":137,"updatePoint":{"line":137,"column":53,"index":4232},"code":"    it('sets the width of the path and returns itself', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      expect(path.width(100)).toBe(path);\n      expect(path.width()).toBe(100);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"gets the x position of the path","suites":["Path.js","x()"],"line":145,"updatePoint":{"line":145,"column":39,"index":4494},"code":"    it('gets the x position of the path', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M10 10 50, 50');\n      expect(path.x()).toBe(10);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"sets the x position of the path and returns itself","suites":["Path.js","x()"],"line":150,"updatePoint":{"line":150,"column":58,"index":4698},"code":"    it('sets the x position of the path and returns itself', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      expect(path.x(100)).toBe(path);\n      expect(path.x()).toBe(100);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"gets the y position of the path","suites":["Path.js","y()"],"line":158,"updatePoint":{"line":158,"column":39,"index":4952},"code":"    it('gets the y position of the path', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M10 10 50, 50');\n      expect(path.y()).toBe(10);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"sets the y position of the path and returns itself","suites":["Path.js","y()"],"line":163,"updatePoint":{"line":163,"column":58,"index":5156},"code":"    it('sets the y position of the path and returns itself', () => {\n      const canvas = SVG().addTo(container);\n      const path = canvas.path('M0 0 50, 50');\n      expect(path.y(100)).toBe(path);\n      expect(path.y()).toBe(100);\n    });","file":"spec/elements/Path.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Pattern","suites":["Pattern.js","()"],"line":11,"updatePoint":{"line":11,"column":44,"index":288},"code":"    it('creates a new object of type Pattern', () => {\n      const pattern = new Pattern();\n      expect(pattern).toEqual(any(Pattern));\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Pattern.js","()"],"line":15,"updatePoint":{"line":15,"column":45,"index":434},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Pattern({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"relays to parents attr method for any call except transformation","suites":["Pattern.js","attr()"],"line":22,"updatePoint":{"line":22,"column":72,"index":633},"code":"    it('relays to parents attr method for any call except transformation', () => {\n      const pattern = new Pattern();\n      const spy = spyOn(Container.prototype, 'attr');\n      pattern.attr(1, 2, 3);\n      pattern.attr('transform', 2, 3);\n      expect(spy).toHaveBeenCalledWith(1, 2, 3);\n      expect(spy).toHaveBeenCalledWith('patternTransform', 2, 3);\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"returns an empty box","suites":["Pattern.js","bbox()"],"line":32,"updatePoint":{"line":32,"column":28,"index":989},"code":"    it('returns an empty box', () => {\n      expect(new Pattern().bbox().isNulled()).toBe(true);\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"gets all targets of this pattern","suites":["Pattern.js","targets()"],"line":37,"updatePoint":{"line":37,"column":40,"index":1144},"code":"    it('gets all targets of this pattern', () => {\n      const canvas = SVG().addTo(container);\n      const pattern = canvas.pattern();\n      const rect = canvas.rect(100, 100).fill(pattern);\n      expect(pattern.targets()).toEqual([rect]);\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"calls url() and returns the result","suites":["Pattern.js","toString()"],"line":45,"updatePoint":{"line":45,"column":42,"index":1434},"code":"    it('calls url() and returns the result', () => {\n      const pattern = new Pattern();\n      expect(pattern.toString()).toBe(pattern.url());\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"clears the element","suites":["Pattern.js","update()"],"line":51,"updatePoint":{"line":51,"column":26,"index":1607},"code":"    it('clears the element', () => {\n      const pattern = new Pattern();\n      pattern.rect(100, 100);\n      expect(pattern.update().children()).toEqual([]);\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"executes a function in the context of the pattern","suites":["Pattern.js","update()"],"line":56,"updatePoint":{"line":56,"column":57,"index":1805},"code":"    it('executes a function in the context of the pattern', () => {\n      const pattern = new Pattern();\n      const spy = createSpy('pattern');\n      pattern.update(spy);\n      expect(spy.calls.all()).toEqual([objectContaining({\n        object: pattern,\n        args: [pattern]\n      })]);\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"returns url(#id)","suites":["Pattern.js","url()"],"line":67,"updatePoint":{"line":67,"column":24,"index":2105},"code":"    it('returns url(#id)', () => {\n      const pattern = new Pattern().id('foo');\n      expect(pattern.url()).toBe('url(\"#foo\")');\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"relays the call to defs","suites":["Pattern.js","Container"],"line":73,"updatePoint":{"line":73,"column":31,"index":2289},"code":"    it('relays the call to defs', () => {\n      const canvas = new SVG();\n      const defs = canvas.defs();\n      const spy = spyOn(defs, 'pattern').and.callThrough();\n      const spy2 = createSpy('pattern');\n      canvas.pattern(100, 100, spy2);\n      expect(spy).toHaveBeenCalledWith(100, 100, spy2);\n      expect(spy2).toHaveBeenCalled();\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"creates a pattern in the defs and sets its size and position","suites":["Pattern.js","Defs"],"line":84,"updatePoint":{"line":84,"column":68,"index":2709},"code":"    it('creates a pattern in the defs and sets its size and position', () => {\n      const canvas = new SVG();\n      const defs = canvas.defs();\n      const spy = createSpy('pattern');\n      const pattern = defs.pattern(100, 100, spy);\n      expect(pattern).toEqual(any(Pattern));\n      expect(defs.children()).toEqual([pattern]);\n      expect(spy).toHaveBeenCalled();\n      expect(pattern.attr(['x', 'y', 'width', 'height'])).toEqual({\n        x: 0,\n        y: 0,\n        width: 100,\n        height: 100\n      });\n    });","file":"spec/elements/Pattern.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Polygon","suites":["Polygon.js","()"],"line":9,"updatePoint":{"line":9,"column":44,"index":224},"code":"    it('creates a new object of type Polygon', () => {\n      expect(new Polygon()).toEqual(any(Polygon));\n    });","file":"spec/elements/Polygon.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Polygon.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":339},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Polygon({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Polygon.js","skipped":false,"dir":"spec"},{"name":"creates a polygon with given points","suites":["Polygon.js","Container","polygon()"],"line":20,"updatePoint":{"line":20,"column":45,"index":548},"code":"      it('creates a polygon with given points', () => {\n        const group = new G();\n        const polygon = group.polygon([1, 2, 3, 4]);\n        expect(polygon.array()).toEqual([[1, 2], [3, 4]]);\n        expect(polygon).toEqual(any(Polygon));\n      });","file":"spec/elements/Polygon.js","skipped":false,"dir":"spec"},{"name":"creates a polygon with one point by default","suites":["Polygon.js","Container","polygon()"],"line":27,"updatePoint":{"line":27,"column":51,"index":818},"code":"    it('creates a polygon with one point by default', () => {\n      const group = new G();\n      const polygon = group.polygon();\n      expect(polygon.array()).toEqual([[0, 0]]);\n      expect(polygon).toEqual(any(Polygon));\n    });","file":"spec/elements/Polygon.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Polyline","suites":["Polyline.js","()"],"line":9,"updatePoint":{"line":9,"column":45,"index":227},"code":"    it('creates a new object of type Polyline', () => {\n      expect(new Polyline()).toEqual(any(Polyline));\n    });","file":"spec/elements/Polyline.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Polyline.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":344},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Polyline({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Polyline.js","skipped":false,"dir":"spec"},{"name":"creates a polyline with given points","suites":["Polyline.js","Container","polyline()"],"line":20,"updatePoint":{"line":20,"column":46,"index":556},"code":"      it('creates a polyline with given points', () => {\n        const group = new G();\n        const polyline = group.polyline([1, 2, 3, 4]);\n        expect(polyline.array()).toEqual([[1, 2], [3, 4]]);\n        expect(polyline).toEqual(any(Polyline));\n      });","file":"spec/elements/Polyline.js","skipped":false,"dir":"spec"},{"name":"creates a polyline with one point by default","suites":["Polyline.js","Container","polyline()"],"line":26,"updatePoint":{"line":26,"column":54,"index":826},"code":"      it('creates a polyline with one point by default', () => {\n        const group = new G();\n        const polyline = group.polyline();\n        expect(polyline.array()).toEqual([[0, 0]]);\n        expect(polyline).toEqual(any(Polyline));\n      });","file":"spec/elements/Polyline.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Rect","suites":["Rect.js","()"],"line":9,"updatePoint":{"line":9,"column":41,"index":215},"code":"    it('creates a new object of type Rect', () => {\n      expect(new Rect()).toEqual(any(Rect));\n    });","file":"spec/elements/Rect.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Rect.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":324},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Rect({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Rect.js","skipped":false,"dir":"spec"},{"name":"creates a rect with given size","suites":["Rect.js","Container","rect()"],"line":20,"updatePoint":{"line":20,"column":40,"index":522},"code":"      it('creates a rect with given size', () => {\n        const group = new G();\n        const rect = group.rect(100, 100);\n        expect(rect.attr(['width', 'height'])).toEqual({\n          width: 100,\n          height: 100\n        });\n        expect(rect).toEqual(any(Rect));\n      });","file":"spec/elements/Rect.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Shape","suites":["Rect.js","()"],"line":9,"updatePoint":{"line":9,"column":42,"index":222},"code":"    it('creates a new object of type Shape', () => {\n      expect(new Shape(create('rect'))).toEqual(any(Shape));\n    });","file":"spec/elements/Shape.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Rect.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":347},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Shape(create('rect'), {\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Shape.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Stop","suites":["Stop.js","()"],"line":9,"updatePoint":{"line":9,"column":41,"index":222},"code":"    it('creates a new object of type Stop', () => {\n      expect(new Stop()).toEqual(any(Stop));\n    });","file":"spec/elements/Stop.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Stop.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":331},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Stop({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Stop.js","skipped":false,"dir":"spec"},{"name":"sets offset, color and opacity with 3 arguments given","suites":["Stop.js","update()"],"line":19,"updatePoint":{"line":19,"column":61,"index":518},"code":"    it('sets offset, color and opacity with 3 arguments given', () => {\n      const stop = new Stop();\n      stop.update(0.1, '#ffffff', 0.5);\n      expect(stop.attr('offset')).toBe(0.1);\n      expect(stop.attr('stop-color')).toBe('#ffffff');\n      expect(stop.attr('stop-opacity')).toBe(0.5);\n    });","file":"spec/elements/Stop.js","skipped":false,"dir":"spec"},{"name":"sets offset, color and opacity with object given","suites":["Stop.js","update()"],"line":26,"updatePoint":{"line":26,"column":56,"index":815},"code":"    it('sets offset, color and opacity with object given', () => {\n      const stop = new Stop();\n      stop.update({\n        offset: 0.1,\n        color: '#ffffff',\n        opacity: 0.5\n      });\n      expect(stop.attr('offset')).toBe(0.1);\n      expect(stop.attr('stop-color')).toBe('#ffffff');\n      expect(stop.attr('stop-opacity')).toBe(0.5);\n    });","file":"spec/elements/Stop.js","skipped":false,"dir":"spec"},{"name":"sets efault values if not all supplied","suites":["Stop.js","update()"],"line":37,"updatePoint":{"line":37,"column":46,"index":1160},"code":"    it('sets efault values if not all supplied', () => {\n      let stop = new Stop();\n      stop.update({\n        offset: 0.1\n      });\n      expect(stop.attr('offset')).toBe(0.1);\n      expect(stop.attr('stop-color')).toBe('#000000');\n      expect(stop.attr('stop-opacity')).toBe(1);\n      stop = new Stop();\n      stop.update({\n        color: '#ffffff'\n      });\n      expect(stop.attr('offset')).toBe(0);\n      expect(stop.attr('stop-color')).toBe('#ffffff');\n      expect(stop.attr('stop-opacity')).toBe(1);\n      stop = new Stop();\n      stop.update({\n        opacity: 0.5\n      });\n      expect(stop.attr('offset')).toBe(0);\n      expect(stop.attr('stop-color')).toBe('#000000');\n      expect(stop.attr('stop-opacity')).toBe(0.5);\n    });","file":"spec/elements/Stop.js","skipped":false,"dir":"spec"},{"name":"creates a stop in the gradient with 3 arguments","suites":["Stop.js","Gradient","stop()"],"line":63,"updatePoint":{"line":63,"column":57,"index":1984},"code":"      it('creates a stop in the gradient with 3 arguments', () => {\n        const gradient = new Gradient('linear');\n        const stop = gradient.stop(0.1, '#ffffff', 0.5);\n        expect(stop).toEqual(any(Stop));\n        expect(stop.attr('offset')).toBe(0.1);\n        expect(stop.attr('stop-color')).toBe('#ffffff');\n        expect(stop.attr('stop-opacity')).toBe(0.5);\n      });","file":"spec/elements/Stop.js","skipped":false,"dir":"spec"},{"name":"creates stop in the gradient with object given","suites":["Stop.js","Gradient","stop()"],"line":71,"updatePoint":{"line":71,"column":56,"index":2365},"code":"      it('creates stop in the gradient with object given', () => {\n        const gradient = new Gradient('linear');\n        const stop = gradient.stop({\n          offset: 0.1,\n          color: '#ffffff',\n          opacity: 0.5\n        });\n        expect(stop.attr('offset')).toBe(0.1);\n        expect(stop.attr('stop-color')).toBe('#ffffff');\n        expect(stop.attr('stop-opacity')).toBe(0.5);\n      });","file":"spec/elements/Stop.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Style","suites":["Style.js","()"],"line":9,"updatePoint":{"line":9,"column":42,"index":218},"code":"    it('creates a new object of type Style', () => {\n      expect(new Style()).toEqual(any(Style));\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Style.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":329},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Style({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"appends a string to the current textContent and returns itself","suites":["Style.js","addText()"],"line":19,"updatePoint":{"line":19,"column":70,"index":527},"code":"    it('appends a string to the current textContent and returns itself', () => {\n      const style = new Style();\n      expect(style.addText('foo').node.textContent).toBe('foo');\n      expect(style.addText('bar').node.textContent).toBe('foobar');\n      expect(style.addText('foobar')).toBe(style);\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"appends an empty string if nothing passed","suites":["Style.js","addText()"],"line":25,"updatePoint":{"line":25,"column":49,"index":812},"code":"    it('appends an empty string if nothing passed', () => {\n      const style = new Style();\n      expect(style.addText().node.textContent).toBe('');\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"adds a font-face rule to load a custom font and returns itself","suites":["Style.js","font()"],"line":31,"updatePoint":{"line":31,"column":70,"index":1026},"code":"    it('adds a font-face rule to load a custom font and returns itself', () => {\n      const style = new Style();\n      expect(style.font('fontName', 'url')).toBe(style);\n      expect(style.node.textContent).toBe('@font-face{font-family:fontName;src:url;}');\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"adds extra parameters if wanted","suites":["Style.js","font()"],"line":36,"updatePoint":{"line":36,"column":39,"index":1262},"code":"    it('adds extra parameters if wanted', () => {\n      const style = new Style();\n      style.font('fontName', 'url', {\n        foo: 'bar'\n      });\n      expect(style.node.textContent).toBe('@font-face{font-family:fontName;src:url;foo:bar;}');\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"adds a css rule","suites":["Style.js","rule()"],"line":45,"updatePoint":{"line":45,"column":23,"index":1535},"code":"    it('adds a css rule', () => {\n      const style = new Style();\n      expect(style.rule('#id', {\n        fontSize: 15\n      })).toBe(style);\n      expect(style.node.textContent).toBe('#id{font-size:15;}');\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"adds only selector when no obj was given","suites":["Style.js","rule()"],"line":52,"updatePoint":{"line":52,"column":48,"index":1777},"code":"    it('adds only selector when no obj was given', () => {\n      const style = new Style();\n      style.rule('#id');\n      expect(style.node.textContent).toBe('#id');\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"adds nothing if no selector was given","suites":["Style.js","rule()"],"line":57,"updatePoint":{"line":57,"column":45,"index":1949},"code":"    it('adds nothing if no selector was given', () => {\n      const style = new Style();\n      style.rule();\n      expect(style.node.textContent).toBe('');\n    });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"creates a style element in the container and adds a rule","suites":["Style.js","Container","style()"],"line":65,"updatePoint":{"line":65,"column":66,"index":2204},"code":"      it('creates a style element in the container and adds a rule', () => {\n        const g = new G();\n        const style = g.style('#id', {\n          fontSize: 15\n        });\n        expect(style).toEqual(any(Style));\n        expect(style.node.textContent).toBe('#id{font-size:15;}');\n      });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"creates a style element in the container and adds a font-face rule","suites":["Style.js","Container","fontface()"],"line":75,"updatePoint":{"line":75,"column":76,"index":2555},"code":"      it('creates a style element in the container and adds a font-face rule', () => {\n        const g = new G();\n        const style = g.fontface('fontName', 'url', {\n          foo: 'bar'\n        });\n        expect(style).toEqual(any(Style));\n        expect(style.node.textContent).toBe('@font-face{font-family:fontName;src:url;foo:bar;}');\n      });","file":"spec/elements/Style.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Svg","suites":["Svg.js","()"],"line":11,"updatePoint":{"line":11,"column":40,"index":372},"code":"    it('creates a new object of type Svg', () => {\n      expect(new Svg()).toEqual(any(Svg));\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Svg.js","()"],"line":14,"updatePoint":{"line":14,"column":45,"index":479},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Svg({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"creates namespaces on creation","suites":["Svg.js","()"],"line":19,"updatePoint":{"line":19,"column":38,"index":605},"code":"    it('creates namespaces on creation', () => {\n      const svg = new Svg();\n      expect(svg.attr('xmlns')).toBe(ns);\n      expect(svg.attr('version')).toBe(1.1);\n      expect(svg.attr('xmlns:xlink')).toBe(xlink);\n      expect(svg.attr('xmlns:svgjs')).toBe(svgjs);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns the defs if its the root svg","suites":["Svg.js","defs()"],"line":28,"updatePoint":{"line":28,"column":44,"index":921},"code":"    it('returns the defs if its the root svg', () => {\n      const svg = new Svg();\n      const defs = new Defs().addTo(svg);\n      expect(svg.defs()).toBe(defs);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns the defs if its not the root svg","suites":["Svg.js","defs()"],"line":33,"updatePoint":{"line":33,"column":48,"index":1096},"code":"    it('returns the defs if its not the root svg', () => {\n      const svg = new Svg();\n      const defs = new Defs().addTo(svg);\n      const nested = new Svg().addTo(svg);\n      expect(nested.defs()).toBe(defs);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"creates the defs if not found","suites":["Svg.js","defs()"],"line":39,"updatePoint":{"line":39,"column":37,"index":1306},"code":"    it('creates the defs if not found', () => {\n      const svg = new SVG();\n      expect(svg.findOne('defs')).toBe(null);\n      const defs = svg.defs();\n      expect(svg.findOne('defs')).toBe(defs);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Svg.js","namespace()"],"line":47,"updatePoint":{"line":47,"column":22,"index":1539},"code":"    it('returns itself', () => {\n      const svg = SVG('<svg />');\n      expect(svg.namespace()).toBe(svg);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"creates the namespace attributes on the svg","suites":["Svg.js","namespace()"],"line":51,"updatePoint":{"line":51,"column":51,"index":1684},"code":"    it('creates the namespace attributes on the svg', () => {\n      const svg = SVG('<svg />');\n      expect(svg.attr('xmlns')).toBe(undefined);\n      svg.namespace();\n      expect(svg.attr('xmlns')).toBe(ns);\n      expect(svg.attr('version')).toBe(1.1);\n      expect(svg.attr('xmlns:xlink')).toBe(xlink);\n      expect(svg.attr('xmlns:svgjs')).toBe(svgjs);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns true if svg is the root svg","suites":["Svg.js","isRoot()"],"line":62,"updatePoint":{"line":62,"column":43,"index":2078},"code":"    it('returns true if svg is the root svg', () => {\n      const canvas = SVG().addTo(container);\n      expect(canvas.isRoot()).toBe(true);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns true if its detached from the dom","suites":["Svg.js","isRoot()"],"line":66,"updatePoint":{"line":66,"column":49,"index":2233},"code":"    it('returns true if its detached from the dom', () => {\n      const svg = new Svg();\n      expect(svg.isRoot()).toBe(true);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns true if its the root child of the document","suites":["Svg.js","isRoot()"],"line":70,"updatePoint":{"line":70,"column":58,"index":2378},"code":"    it('returns true if its the root child of the document', () => {\n      // cannot be tested here\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns false if its the child of a document-fragment","suites":["Svg.js","isRoot()"],"line":73,"updatePoint":{"line":73,"column":61,"index":2489},"code":"    it('returns false if its the child of a document-fragment', () => {\n      const fragment = getWindow().document.createDocumentFragment();\n      const svg = new Svg().addTo(fragment);\n      expect(svg.isRoot()).toBe(false);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns false if its a child of another svg element","suites":["Svg.js","isRoot()"],"line":78,"updatePoint":{"line":78,"column":59,"index":2722},"code":"    it('returns false if its a child of another svg element', () => {\n      const svg = new Svg();\n      const nested = new Svg().addTo(svg);\n      expect(nested.isRoot()).toBe(false);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Svg.js","removeNamespace()"],"line":85,"updatePoint":{"line":85,"column":22,"index":2924},"code":"    it('returns itself', () => {\n      const svg = new Svg();\n      expect(svg.removeNamespace()).toBe(svg);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"removes the namespace attributes from the svg element","suites":["Svg.js","removeNamespace()"],"line":89,"updatePoint":{"line":89,"column":61,"index":3080},"code":"    it('removes the namespace attributes from the svg element', () => {\n      const svg = new Svg();\n      expect(svg.attr('xmlns')).toBe(ns);\n      svg.removeNamespace();\n      expect(svg.attr('xmlns')).toBe(undefined);\n      expect(svg.attr('version')).toBe(undefined);\n      expect(svg.attr('xmlns:xlink')).toBe(undefined);\n      expect(svg.attr('xmlns:svgjs')).toBe(undefined);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns itself if its the root svg","suites":["Svg.js","root()"],"line":100,"updatePoint":{"line":100,"column":42,"index":3486},"code":"    it('returns itself if its the root svg', () => {\n      const svg = new Svg();\n      expect(svg.root()).toBe(svg);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"returns the actual root if its not the root svg","suites":["Svg.js","root()"],"line":104,"updatePoint":{"line":104,"column":55,"index":3625},"code":"    it('returns the actual root if its not the root svg', () => {\n      const svg = new Svg();\n      const nested = new Svg().addTo(svg);\n      expect(nested.root()).toBe(svg);\n    });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"creates an svg element in the container","suites":["Svg.js","Container","nested()"],"line":112,"updatePoint":{"line":112,"column":49,"index":3875},"code":"      it('creates an svg element in the container', () => {\n        const svg = new Svg();\n        const nested = svg.nested();\n        expect(nested).toEqual(any(Svg));\n        expect(nested.parent()).toBe(svg);\n      });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"has no namespaces set","suites":["Svg.js","Container","nested()"],"line":118,"updatePoint":{"line":118,"column":31,"index":4080},"code":"      it('has no namespaces set', () => {\n        const svg = new Svg();\n        const nested = svg.nested();\n        expect(nested.attr('xmlns')).toBe(undefined);\n        expect(nested.attr('version')).toBe(undefined);\n        expect(nested.attr('xmlns:xlink')).toBe(undefined);\n        expect(nested.attr('xmlns:svgjs')).toBe(undefined);\n      });","file":"spec/elements/Svg.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Symbol","suites":["Symbol.js","()"],"line":9,"updatePoint":{"line":9,"column":43,"index":221},"code":"    it('creates a new object of type Symbol', () => {\n      expect(new Symbol()).toEqual(any(Symbol));\n    });","file":"spec/elements/Symbol.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Symbol.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":334},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Symbol({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Symbol.js","skipped":false,"dir":"spec"},{"name":"creates a symbol in the container","suites":["Symbol.js","Container","symbol()"],"line":20,"updatePoint":{"line":20,"column":43,"index":539},"code":"      it('creates a symbol in the container', () => {\n        const g = new G();\n        const symbol = g.symbol();\n        expect(symbol).toEqual(any(Symbol));\n        expect(g.children()).toEqual([symbol]);\n      });","file":"spec/elements/Symbol.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Text","suites":["Text.js","()"],"line":9,"updatePoint":{"line":9,"column":41,"index":274},"code":"    it('creates a new object of type Text', () => {\n      expect(new Text()).toEqual(any(Text));\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Text.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":383},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Text({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"sets the text content of the tspan and returns itself","suites":["Text.js","text()"],"line":19,"updatePoint":{"line":19,"column":61,"index":568},"code":"    it('sets the text content of the tspan and returns itself', () => {\n      const text = new Text();\n      expect(text.text('Hello World')).toBe(text);\n      expect(text.node.textContent).toBe('Hello World');\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"creates tspans for every line","suites":["Text.js","text()"],"line":24,"updatePoint":{"line":24,"column":37,"index":763},"code":"    it('creates tspans for every line', () => {\n      const text = new Text().text('Hello World\\nHow is it\\ngoing');\n      expect(text.children().length).toBe(3);\n      expect(text.get(0).node.textContent).toBe('Hello World');\n      expect(text.get(1).node.textContent).toBe('How is it');\n      expect(text.get(2).node.textContent).toBe('going');\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"increases dy after empty line","suites":["Text.js","text()"],"line":31,"updatePoint":{"line":31,"column":37,"index":1118},"code":"    it('increases dy after empty line', () => {\n      const canvas = SVG().addTo(container);\n      const text = canvas.text('Hello World\\n\\nHow is it\\ngoing');\n      expect(text.children().length).toBe(4);\n      expect(text.get(0).node.textContent).toBe('Hello World');\n      expect(text.get(1).node.textContent).toBe('');\n      expect(text.get(2).node.textContent).toBe('How is it');\n      expect(text.get(3).node.textContent).toBe('going');\n      expect(text.get(2).dy()).toBe(text.get(3).dy() * 2);\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"returns the correct text with newlines","suites":["Text.js","text()"],"line":41,"updatePoint":{"line":41,"column":46,"index":1637},"code":"    it('returns the correct text with newlines', () => {\n      const text = new Text().text('Hello World\\nHow is it\\ngoing');\n      expect(text.text()).toBe('Hello World\\nHow is it\\ngoing');\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"returns the correct text with newlines and skips textPaths","suites":["Text.js","text()"],"line":45,"updatePoint":{"line":45,"column":66,"index":1856},"code":"    it('returns the correct text with newlines and skips textPaths', () => {\n      const path = new Path();\n      const text = new Text();\n      const textPath = text.text('Hello World\\nHow is it\\ngoing').path(path);\n      textPath.children().addTo(text);\n      text.add(new TextPath(), 3);\n      expect(text.text()).toBe('Hello World\\nHow is it\\ngoing');\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"executes passed block","suites":["Text.js","text()"],"line":53,"updatePoint":{"line":53,"column":29,"index":2183},"code":"    it('executes passed block', () => {\n      const text = new Text();\n      text.text(function (t) {\n        t.tspan('Hello World').newLine();\n        t.tspan('How is it').newLine();\n        t.tspan('going').newLine();\n        expect(this).toBe(text);\n        expect(t).toBe(text);\n      });\n      expect(text.text()).toBe('Hello World\\nHow is it\\ngoing');\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"triggers rebuild","suites":["Text.js","text()"],"line":64,"updatePoint":{"line":64,"column":24,"index":2544},"code":"    it('triggers rebuild', () => {\n      const text = new Text();\n      const spy = spyOn(text, 'rebuild');\n      text.text('foo');\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"returns the leading value of the text without an argument","suites":["Text.js","leading()"],"line":72,"updatePoint":{"line":72,"column":65,"index":2801},"code":"    it('returns the leading value of the text without an argument', () => {\n      const text = new Text();\n      expect(text.leading() instanceof SVGNumber);\n      expect(text.leading().valueOf()).toBe(1.3);\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"sets the leading value of the text with the first argument","suites":["Text.js","leading()"],"line":77,"updatePoint":{"line":77,"column":66,"index":3018},"code":"    it('sets the leading value of the text with the first argument', () => {\n      const text = new Text();\n      expect(text.leading(1.5).dom.leading.valueOf()).toBe(1.5);\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"disables the rebuild if called with false","suites":["Text.js","rebuild()"],"line":83,"updatePoint":{"line":83,"column":49,"index":3220},"code":"    it('disables the rebuild if called with false', () => {\n      const text = new Text();\n      expect(text.rebuild(false)._rebuild).toBeFalse();\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"enables the rebuild if called with true","suites":["Text.js","rebuild()"],"line":87,"updatePoint":{"line":87,"column":47,"index":3373},"code":"    it('enables the rebuild if called with true', () => {\n      const text = new Text();\n      expect(text.rebuild(true)._rebuild).toBeTrue();\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"rebuilds the text without an argument given","suites":["Text.js","rebuild()"],"line":91,"updatePoint":{"line":91,"column":51,"index":3528},"code":"    it('rebuilds the text without an argument given', () => {\n      const canvas = SVG().addTo(container);\n      const text = new Text().addTo(canvas);\n      text.text(t => {\n        t.tspan('Hello World').newLine();\n        t.tspan('How is it').newLine();\n        t.tspan('going').newLine();\n      });\n      const dy = text.get(1).dy();\n      text.leading(1.7);\n      expect(dy).not.toBe(text.get(1).dy());\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"read all data from the svgjs:data attribute and assign it to el.dom","suites":["Text.js","setData()"],"line":105,"updatePoint":{"line":105,"column":75,"index":4006},"code":"    it('read all data from the svgjs:data attribute and assign it to el.dom', () => {\n      const text = new Text();\n      text.attr('svgjs:data', '{\"foo\":\"bar\",\"leading\":\"3px\"}');\n      text.setData(JSON.parse(text.attr('svgjs:data')));\n      expect(text.dom.foo).toBe('bar');\n      expect(text.dom.leading instanceof SVGNumber).toBeTruthy();\n      expect(text.dom.leading.value).toBe(3);\n      expect(text.dom.leading.unit).toBe('px');\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"uses a leading of 1.3 when no leading is set or 0","suites":["Text.js","setData()"],"line":114,"updatePoint":{"line":114,"column":57,"index":4434},"code":"    it('uses a leading of 1.3 when no leading is set or 0', () => {\n      const text = new Text();\n      text.setData({\n        leading: 0\n      });\n      expect(text.dom.leading.value).toBe(1.3);\n    });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"creates a text element with lines","suites":["Text.js","Container","text()"],"line":124,"updatePoint":{"line":124,"column":43,"index":4694},"code":"      it('creates a text element with lines', () => {\n        const group = new G();\n        const text = group.text('Hello World\\nHow is it\\ngoing');\n        expect(text).toEqual(any(Text));\n        expect(text.text()).toBe('Hello World\\nHow is it\\ngoing');\n      });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"defaults to empty string","suites":["Text.js","Container","text()"],"line":130,"updatePoint":{"line":130,"column":34,"index":4954},"code":"      it('defaults to empty string', () => {\n        const group = new G();\n        const text = group.text();\n        expect(text).toEqual(any(Text));\n        expect(text.text()).toBe('');\n      });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"creates plain text","suites":["Text.js","Container","plain()"],"line":138,"updatePoint":{"line":138,"column":28,"index":5188},"code":"      it('creates plain text', () => {\n        const group = new G();\n        const text = group.plain('A piece');\n        expect(text).toEqual(any(Text));\n        expect(text.node.childNodes[0].data).toBe('A piece');\n      });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"defaults to empty string","suites":["Text.js","Container","plain()"],"line":144,"updatePoint":{"line":144,"column":34,"index":5422},"code":"      it('defaults to empty string', () => {\n        const group = new G();\n        const text = group.plain();\n        expect(text).toEqual(any(Text));\n        expect(text.node.childNodes[0].data).toBe('');\n      });","file":"spec/elements/Text.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type TextPath","suites":["TextPath.js","()"],"line":17,"updatePoint":{"line":17,"column":45,"index":576},"code":"    it('creates a new object of type TextPath', () => {\n      expect(new TextPath()).toEqual(any(TextPath));\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["TextPath.js","()"],"line":20,"updatePoint":{"line":20,"column":45,"index":693},"code":"    it('sets passed attributes on the element', () => {\n      expect(new TextPath({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"returns the referenced path instance","suites":["TextPath.js","track()"],"line":27,"updatePoint":{"line":27,"column":44,"index":866},"code":"    it('returns the referenced path instance', () => {\n      const textPath = text.path(path);\n      expect(textPath.track()).toBe(path);\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"returns the path array of the underlying path","suites":["TextPath.js","array()"],"line":33,"updatePoint":{"line":33,"column":53,"index":1057},"code":"    it('returns the path array of the underlying path', () => {\n      expect(text.path(path).array()).toEqual(path.array());\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"returns null if there is no underlying path","suites":["TextPath.js","array()"],"line":36,"updatePoint":{"line":36,"column":51,"index":1188},"code":"    it('returns null if there is no underlying path', () => {\n      const textPath = new TextPath();\n      expect(textPath.array()).toBe(null);\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"changes the array of the underlying path","suites":["TextPath.js","plot()"],"line":42,"updatePoint":{"line":42,"column":48,"index":1372},"code":"    it('changes the array of the underlying path', () => {\n      expect(text.path().plot(path.array()).array()).toEqual(path.array());\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"return the path array of the underlying path when no arguments is passed","suites":["TextPath.js","plot()"],"line":45,"updatePoint":{"line":45,"column":80,"index":1547},"code":"    it('return the path array of the underlying path when no arguments is passed', () => {\n      const textPath = text.path(path);\n      expect(textPath.plot()).toBe(textPath.array());\n      expect(textPath.plot()).not.toBe(null);\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"does nothing if no path is attached as track","suites":["TextPath.js","plot()"],"line":50,"updatePoint":{"line":50,"column":52,"index":1758},"code":"    it('does nothing if no path is attached as track', () => {\n      const textPath = Object.freeze(new TextPath());\n      expect(textPath.plot('M0 0')).toBe(textPath);\n    });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"creates a textPath from string text and string path","suites":["TextPath.js","Container","textPath()"],"line":57,"updatePoint":{"line":57,"column":61,"index":2017},"code":"      it('creates a textPath from string text and string path', () => {\n        const textPath = canvas.textPath(txt, data);\n        expect(textPath).toEqual(any(TextPath));\n        expect(textPath.parent()).toEqual(any(Text));\n        expect(textPath.track()).toEqual(any(Path));\n        expect(textPath.track().parent()).toBe(canvas.defs());\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"creates a textPath from Text and Path","suites":["TextPath.js","Container","textPath()"],"line":64,"updatePoint":{"line":64,"column":47,"index":2357},"code":"      it('creates a textPath from Text and Path', () => {\n        const textPath = canvas.textPath(text, path);\n        expect(textPath.parent()).toEqual(text);\n        expect(textPath.track()).toEqual(path);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"passes the text into textPath and not text","suites":["TextPath.js","Container","textPath()"],"line":69,"updatePoint":{"line":69,"column":52,"index":2581},"code":"      it('passes the text into textPath and not text', () => {\n        const tspan = text.first();\n        const textPath = canvas.textPath(text, path);\n        expect(textPath.first()).toBe(tspan);\n        expect(text.first()).toBe(textPath);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"returns an instance of TextPath","suites":["TextPath.js","Text","path()"],"line":79,"updatePoint":{"line":79,"column":41,"index":2896},"code":"      it('returns an instance of TextPath', () => {\n        expect(text.path(data)).toEqual(any(TextPath));\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"creates a textPath node in the text element","suites":["TextPath.js","Text","path()"],"line":82,"updatePoint":{"line":82,"column":53,"index":3026},"code":"      it('creates a textPath node in the text element', () => {\n        text.path(data);\n        expect(text.node.querySelector('textPath')).not.toBe(null);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"references the passed path","suites":["TextPath.js","Text","path()"],"line":86,"updatePoint":{"line":86,"column":36,"index":3176},"code":"      it('references the passed path', () => {\n        const textPath = text.path(path);\n        expect(textPath.reference('href')).toBe(path);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"imports all nodes from the text by default","suites":["TextPath.js","Text","path()"],"line":90,"updatePoint":{"line":90,"column":52,"index":3346},"code":"      it('imports all nodes from the text by default', () => {\n        const children = text.children();\n        const textPath = text.path(path);\n        expect(textPath.children()).toEqual(children);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"does not import all nodes from the text when second parameter false","suites":["TextPath.js","Text","path()"],"line":95,"updatePoint":{"line":95,"column":77,"index":3583},"code":"      it('does not import all nodes from the text when second parameter false', () => {\n        const textPath = text.path(path, false);\n        expect(textPath.children()).toEqual([]);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"returns the textPath element of this text","suites":["TextPath.js","Text","textPath()"],"line":101,"updatePoint":{"line":101,"column":51,"index":3796},"code":"      it('returns the textPath element of this text', () => {\n        const textPath = text.path(path);\n        expect(text.textPath()).toBe(textPath);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"returns an instance of TextPath","suites":["TextPath.js","Path","text()"],"line":109,"updatePoint":{"line":109,"column":41,"index":4020},"code":"      it('returns an instance of TextPath', () => {\n        expect(path.text(txt)).toEqual(any(TextPath));\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"creates a text with textPath node and inserts it after the path","suites":["TextPath.js","Path","text()"],"line":112,"updatePoint":{"line":112,"column":73,"index":4169},"code":"      it('creates a text with textPath node and inserts it after the path', () => {\n        var textPath = path.text(txt);\n        expect(textPath.parent()).toEqual(any(Text));\n        expect(SVG(path.node.nextSibling)).toBe(textPath.parent());\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"transplants the node from text to textPath","suites":["TextPath.js","Path","text()"],"line":117,"updatePoint":{"line":117,"column":52,"index":4403},"code":"      it('transplants the node from text to textPath', () => {\n        const nodesInText = [].slice.call(text.node.childNodes);\n        var textPath = path.text(text);\n        const nodesInTextPath = [].slice.call(textPath.node.childNodes);\n        expect(nodesInText).toEqual(nodesInTextPath);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"returns all elements referencing this path with href","suites":["TextPath.js","Path","targets"],"line":125,"updatePoint":{"line":125,"column":62,"index":4758},"code":"      it('returns all elements referencing this path with href', () => {\n        const textPath = text.path(path);\n        expect(path.targets()).toEqual([textPath]);\n      });","file":"spec/elements/TextPath.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Tspan","suites":["Tspan.js","()"],"line":10,"updatePoint":{"line":10,"column":42,"index":316},"code":"    it('creates a new object of type Tspan', () => {\n      expect(new Tspan()).toEqual(any(Tspan));\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Tspan.js","()"],"line":13,"updatePoint":{"line":13,"column":45,"index":427},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Tspan({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"sets the text content of the tspan and returns itself","suites":["Tspan.js","text()"],"line":20,"updatePoint":{"line":20,"column":61,"index":613},"code":"    it('sets the text content of the tspan and returns itself', () => {\n      const tspan = new Tspan();\n      expect(tspan.text('Hello World')).toBe(tspan);\n      expect(tspan.node.textContent).toBe('Hello World');\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"returns the textContent of the tspan","suites":["Tspan.js","text()"],"line":25,"updatePoint":{"line":25,"column":44,"index":820},"code":"    it('returns the textContent of the tspan', () => {\n      const tspan = new Tspan().text('Hello World');\n      expect(tspan.text()).toBe('Hello World');\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"adds a newline when this tspan is a newline","suites":["Tspan.js","text()"],"line":29,"updatePoint":{"line":29,"column":51,"index":991},"code":"    it('adds a newline when this tspan is a newline', () => {\n      const tspan = new Tspan().text('Hello World').newLine();\n      expect(tspan.text()).toBe('Hello World\\n');\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"executes a function in the context of the tspan","suites":["Tspan.js","text()"],"line":33,"updatePoint":{"line":33,"column":55,"index":1178},"code":"    it('executes a function in the context of the tspan', () => {\n      const tspan = new Tspan();\n      tspan.text(function (t) {\n        expect(this).toBe(tspan);\n        expect(t).toBe(tspan);\n      });\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"sets the dx attribute and returns itself","suites":["Tspan.js","dx()"],"line":42,"updatePoint":{"line":42,"column":48,"index":1418},"code":"    it('sets the dx attribute and returns itself', () => {\n      const tspan = new Tspan();\n      expect(tspan.dx(20)).toBe(tspan);\n      expect(tspan.attr('dx')).toBe(20);\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"returns the dx attribute","suites":["Tspan.js","dx()"],"line":47,"updatePoint":{"line":47,"column":32,"index":1583},"code":"    it('returns the dx attribute', () => {\n      const tspan = new Tspan().dx(20);\n      expect(tspan.dx()).toBe(20);\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"sets the dy attribute and returns itself","suites":["Tspan.js","dy()"],"line":53,"updatePoint":{"line":53,"column":48,"index":1758},"code":"    it('sets the dy attribute and returns itself', () => {\n      const tspan = new Tspan();\n      expect(tspan.dy(20)).toBe(tspan);\n      expect(tspan.attr('dy')).toBe(20);\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"returns the dy attribute","suites":["Tspan.js","dy()"],"line":58,"updatePoint":{"line":58,"column":32,"index":1923},"code":"    it('returns the dy attribute', () => {\n      const tspan = new Tspan().dy(20);\n      expect(tspan.dy()).toBe(20);\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"works without text parent","suites":["Tspan.js","newLine()"],"line":64,"updatePoint":{"line":64,"column":33,"index":2088},"code":"    it('works without text parent', () => {\n      // should not fail\n      const tspan = new Tspan().newLine();\n      expect(tspan.dom.newLined).toBeTrue();\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Tspan.js","newLine()"],"line":69,"updatePoint":{"line":69,"column":22,"index":2242},"code":"    it('returns itself', () => {\n      const tspan = new Tspan();\n      expect(tspan.newLine()).toBe(tspan);\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"marks the tspan as a newline","suites":["Tspan.js","newLine()"],"line":73,"updatePoint":{"line":73,"column":36,"index":2373},"code":"    it('marks the tspan as a newline', () => {\n      const tspan = new Tspan().wrap(new Text()).newLine();\n      expect(tspan.dom.newLined).toBeTrue();\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"sets dy to zero of first line","suites":["Tspan.js","newLine()"],"line":77,"updatePoint":{"line":77,"column":37,"index":2534},"code":"    it('sets dy to zero of first line', () => {\n      const text = new Text();\n      const first = text.tspan('First Line').newLine();\n      expect(first.dy()).toBe(0);\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"sets dy corresponding to line and leading","suites":["Tspan.js","newLine()"],"line":82,"updatePoint":{"line":82,"column":49,"index":2723},"code":"    it('sets dy corresponding to line and leading', () => {\n      const canvas = SVG().addTo(container);\n      const text = new Text().leading(2).build(true).addTo(canvas);\n      text.tspan('First Line').newLine();\n      text.tspan('Second Line').newLine();\n      const third = text.tspan('Third Line').newLine();\n      const fontSize = getWindow().getComputedStyle(third.node).getPropertyValue('font-size');\n      const dy = 2 * new SVGNumber(fontSize);\n      expect(third.dy()).toBe(dy);\n    });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"creates a tspan in a text","suites":["Tspan.js","Tspan","tspan()"],"line":95,"updatePoint":{"line":95,"column":35,"index":3273},"code":"      it('creates a tspan in a text', () => {\n        const text = new Text();\n        const tspan = text.tspan();\n        expect(tspan).toEqual(any(Tspan));\n        expect(tspan.parent()).toBe(text);\n      });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"creates a tspan in a tspan","suites":["Tspan.js","Tspan","tspan()"],"line":101,"updatePoint":{"line":101,"column":36,"index":3485},"code":"      it('creates a tspan in a tspan', () => {\n        const tspan1 = new Tspan();\n        const tspan2 = tspan1.tspan();\n        expect(tspan2).toEqual(any(Tspan));\n        expect(tspan2.parent()).toBe(tspan1);\n      });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"creates a tspan and calls newLine() on it","suites":["Tspan.js","Text","newLine()"],"line":111,"updatePoint":{"line":111,"column":51,"index":3797},"code":"      it('creates a tspan and calls newLine() on it', () => {\n        const text = new Text();\n        const tspan = text.newLine();\n        expect(tspan).toEqual(any(Tspan));\n        expect(tspan.parent()).toBe(text);\n        expect(tspan.dom.newLined).toBeTrue();\n      });","file":"spec/elements/Tspan.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Use","suites":["Use.js","()"],"line":9,"updatePoint":{"line":9,"column":40,"index":231},"code":"    it('creates a new object of type Use', () => {\n      expect(new Use()).toEqual(any(Use));\n    });","file":"spec/elements/Use.js","skipped":false,"dir":"spec"},{"name":"sets passed attributes on the element","suites":["Use.js","()"],"line":12,"updatePoint":{"line":12,"column":45,"index":338},"code":"    it('sets passed attributes on the element', () => {\n      expect(new Use({\n        id: 'foo'\n      }).id()).toBe('foo');\n    });","file":"spec/elements/Use.js","skipped":false,"dir":"spec"},{"name":"links an element","suites":["Use.js","use()"],"line":19,"updatePoint":{"line":19,"column":24,"index":484},"code":"    it('links an element', () => {\n      const rect = new Rect();\n      const use = new Use().use(rect);\n      expect(use.attr('href')).toBe('#' + rect.id());\n    });","file":"spec/elements/Use.js","skipped":false,"dir":"spec"},{"name":"links an element from a different file","suites":["Use.js","use()"],"line":24,"updatePoint":{"line":24,"column":46,"index":673},"code":"    it('links an element from a different file', () => {\n      const use = new Use().use('id', 'file');\n      expect(use.attr('href')).toBe('file#id');\n    });","file":"spec/elements/Use.js","skipped":false,"dir":"spec"},{"name":"creates a use element linked to the given element","suites":["Use.js","Container","use()"],"line":31,"updatePoint":{"line":31,"column":59,"index":914},"code":"      it('creates a use element linked to the given element', () => {\n        const canvas = new SVG().addTo(container);\n        const rect = canvas.rect(100, 100);\n        const use = canvas.use(rect);\n        expect(use.attr('href')).toBe('#' + rect.id());\n        expect(use.reference('href')).toBe(rect);\n      });","file":"spec/elements/Use.js","skipped":false,"dir":"spec"},{"name":"returns itself as setter","suites":["attr.js","attr()"],"line":14,"updatePoint":{"line":14,"column":32,"index":425},"code":"    it('returns itself as setter', () => {\n      expect(element.attr('fill', '#ff0066')).toBe(element);\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"sets one attribute when two arguments are given","suites":["attr.js","attr()"],"line":17,"updatePoint":{"line":17,"column":55,"index":560},"code":"    it('sets one attribute when two arguments are given', () => {\n      element.attr('fill', '#ff0066');\n      expect(element.node.getAttribute('fill')).toBe('#ff0066');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"sets various attributes when an object is given","suites":["attr.js","attr()"],"line":21,"updatePoint":{"line":21,"column":55,"index":738},"code":"    it('sets various attributes when an object is given', () => {\n      element.attr({\n        fill: '#00ff66',\n        stroke: '#ff2233',\n        'stroke-width': 10\n      });\n      expect(element.node.getAttribute('fill')).toBe('#00ff66');\n      expect(element.node.getAttribute('stroke')).toBe('#ff2233');\n      expect(element.node.getAttribute('stroke-width')).toBe('10');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"gets the value of the string value given as first argument","suites":["attr.js","attr()"],"line":31,"updatePoint":{"line":31,"column":66,"index":1133},"code":"    it('gets the value of the string value given as first argument', () => {\n      element.attr('fill', '#ff0066');\n      expect(element.attr('fill')).toEqual('#ff0066');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"gets an object with all attributes without any arguments","suites":["attr.js","attr()"],"line":35,"updatePoint":{"line":35,"column":64,"index":1310},"code":"    it('gets an object with all attributes without any arguments', () => {\n      element.attr({\n        fill: '#00ff66',\n        stroke: '#ff2233'\n      });\n      var attr = element.attr();\n      expect(attr.fill).toBe('#00ff66');\n      expect(attr.stroke).toBe('#ff2233');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"removes an attribute if the second argument is explicitly set to null","suites":["attr.js","attr()"],"line":44,"updatePoint":{"line":44,"column":77,"index":1605},"code":"    it('removes an attribute if the second argument is explicitly set to null', () => {\n      element.attr('stroke-width', 10);\n      expect(element.node.getAttribute('stroke-width')).toBe('10');\n      element.attr('stroke-width', null);\n      expect(element.node.getAttribute('stroke-width')).toBe(null);\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"correctly parses numeric values as a getter","suites":["attr.js","attr()"],"line":50,"updatePoint":{"line":50,"column":51,"index":1893},"code":"    it('correctly parses numeric values as a getter', () => {\n      element.attr('stroke-width', 11);\n      expect(element.node.getAttribute('stroke-width')).toBe('11');\n      expect(element.attr('stroke-width')).toBe(11);\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"correctly parses negative numeric values as a getter","suites":["attr.js","attr()"],"line":55,"updatePoint":{"line":55,"column":60,"index":2133},"code":"    it('correctly parses negative numeric values as a getter', () => {\n      element.attr('x', -120);\n      expect(element.node.getAttribute('x')).toBe('-120');\n      expect(element.attr('x')).toBe(-120);\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"falls back on default values if attribute is not present","suites":["attr.js","attr()"],"line":60,"updatePoint":{"line":60,"column":64,"index":2350},"code":"    it('falls back on default values if attribute is not present', () => {\n      expect(element.attr('stroke-linejoin')).toBe('miter');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"gets the \"style\" attribute as a string","suites":["attr.js","attr()"],"line":63,"updatePoint":{"line":63,"column":46,"index":2476},"code":"    it('gets the \"style\" attribute as a string', () => {\n      element.css('cursor', 'pointer');\n      expect(element.attr('style')).toBe('cursor: pointer;');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"sets the style attribute correctly","suites":["attr.js","attr()"],"line":67,"updatePoint":{"line":67,"column":42,"index":2639},"code":"    it('sets the style attribute correctly', () => {\n      element.attr('style', 'cursor:move;');\n      expect(element.node.style.cursor).toBe('move');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"acts as getter for an array of values passed","suites":["attr.js","attr()"],"line":71,"updatePoint":{"line":71,"column":52,"index":2809},"code":"    it('acts as getter for an array of values passed', () => {\n      element.attr({\n        x: 1,\n        y: 2,\n        width: 20,\n        'fill-opacity': 0.5\n      });\n      const ret = element.attr(['x', 'fill-opacity']);\n      expect(ret).toEqual({\n        x: 1,\n        'fill-opacity': 0.5\n      });\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"correctly creates SVG.Array if array given","suites":["attr.js","attr()"],"line":84,"updatePoint":{"line":84,"column":50,"index":3119},"code":"    it('correctly creates SVG.Array if array given', () => {\n      element.attr('something', [2, 3, 4]);\n      expect(element.attr('something')).toBe('2 3 4');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"redirects to the leading() method when setting leading","suites":["attr.js","attr()"],"line":88,"updatePoint":{"line":88,"column":62,"index":3299},"code":"    it('redirects to the leading() method when setting leading', () => {\n      const text = new Text().text('Hello World');\n      const spy = spyOn(text, 'leading');\n      text.attr('leading', 2);\n      expect(spy).toHaveBeenCalledWith(objectContaining({\n        value: 2\n      }));\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"ignores leading if no leading method is available","suites":["attr.js","attr()"],"line":96,"updatePoint":{"line":96,"column":57,"index":3585},"code":"    it('ignores leading if no leading method is available', () => {\n      const frozen = Object.freeze(element);\n      expect(frozen.attr('leading', 2)).toBe(frozen);\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"executes registered hooks","suites":["attr.js","attr()"],"line":100,"updatePoint":{"line":100,"column":33,"index":3736},"code":"    it('executes registered hooks', () => {\n      registerAttrHook((attr, val, el) => {\n        if (el.node.id === 'somethingVeryRandom' && attr === 'name') {\n          throw new Error('This hook should only be executed in one test');\n        }\n        return val;\n      });\n      element.id('somethingVeryRandom');\n      const throwingFn = () => {\n        element.attr('name', 'Bob');\n      };\n      expect(throwingFn).toThrowError('This hook should only be executed in one test');\n    });","file":"spec/modules/core/attr.js","skipped":false,"dir":"spec"},{"name":"calls attribute with rx and returns itself","suites":["circled.js","rx()"],"line":13,"updatePoint":{"line":13,"column":50,"index":364},"code":"    it('calls attribute with rx and returns itself', () => {\n      const spy = spyOn(element, 'attr').and.callThrough();\n      expect(element.rx(50)).toBe(element);\n      expect(spy).toHaveBeenCalledWith('rx', 50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"calls attribute with ry and returns itself","suites":["circled.js","ry()"],"line":20,"updatePoint":{"line":20,"column":50,"index":620},"code":"    it('calls attribute with ry and returns itself', () => {\n      const spy = spyOn(element, 'attr').and.callThrough();\n      expect(element.ry(50)).toBe(element);\n      expect(spy).toHaveBeenCalledWith('ry', 50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"sets x position and returns itself","suites":["circled.js","x()"],"line":27,"updatePoint":{"line":27,"column":42,"index":867},"code":"    it('sets x position and returns itself', () => {\n      element = SVG().addTo(container).ellipse(50, 50);\n      expect(element.x(50)).toBe(element);\n      expect(element.bbox().x).toBe(50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"gets the x position","suites":["circled.js","x()"],"line":32,"updatePoint":{"line":32,"column":27,"index":1053},"code":"    it('gets the x position', () => {\n      element.x(50);\n      expect(element.x()).toBe(50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"sets y position and returns itself","suites":["circled.js","y()"],"line":38,"updatePoint":{"line":38,"column":42,"index":1203},"code":"    it('sets y position and returns itself', () => {\n      element = SVG().addTo(container).ellipse(50, 50);\n      expect(element.y(50)).toBe(element);\n      expect(element.bbox().y).toBe(50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"gets the y position","suites":["circled.js","y()"],"line":43,"updatePoint":{"line":43,"column":27,"index":1389},"code":"    it('gets the y position', () => {\n      element.y(50);\n      expect(element.y()).toBe(50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"calls attribute with cx and returns itself","suites":["circled.js","cx()"],"line":49,"updatePoint":{"line":49,"column":50,"index":1548},"code":"    it('calls attribute with cx and returns itself', () => {\n      const spy = spyOn(element, 'attr').and.callThrough();\n      expect(element.cx(50)).toBe(element);\n      expect(spy).toHaveBeenCalledWith('cx', 50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"calls attribute with cy and returns itself","suites":["circled.js","cy()"],"line":56,"updatePoint":{"line":56,"column":50,"index":1804},"code":"    it('calls attribute with cy and returns itself', () => {\n      const spy = spyOn(element, 'attr').and.callThrough();\n      expect(element.cy(50)).toBe(element);\n      expect(spy).toHaveBeenCalledWith('cy', 50);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"sets rx by half the given width","suites":["circled.js","width()"],"line":63,"updatePoint":{"line":63,"column":39,"index":2052},"code":"    it('sets rx by half the given width', () => {\n      const spy = spyOn(element, 'rx').and.callThrough();\n      expect(element.width(50)).toBe(element);\n      expect(spy).toHaveBeenCalledWith(objectContaining({\n        value: 25\n      }));\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"gets the width of the element","suites":["circled.js","width()"],"line":70,"updatePoint":{"line":70,"column":37,"index":2300},"code":"    it('gets the width of the element', () => {\n      element.width(100);\n      expect(element.width()).toBe(100);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"sets ry by half the given height","suites":["circled.js","height()"],"line":76,"updatePoint":{"line":76,"column":40,"index":2463},"code":"    it('sets ry by half the given height', () => {\n      const spy = spyOn(element, 'ry').and.callThrough();\n      expect(element.height(50)).toBe(element);\n      expect(spy).toHaveBeenCalledWith(objectContaining({\n        value: 25\n      }));\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"gets the height of the element","suites":["circled.js","height()"],"line":83,"updatePoint":{"line":83,"column":38,"index":2713},"code":"    it('gets the height of the element', () => {\n      element.height(100);\n      expect(element.height()).toBe(100);\n    });","file":"spec/modules/core/circled.js","skipped":false,"dir":"spec"},{"name":"moves the bbox of the group by a certain amount (1)","suites":["containerGeometry.js","dmove()"],"line":10,"updatePoint":{"line":10,"column":59,"index":319},"code":"    it('moves the bbox of the group by a certain amount (1)', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.dmove(10, 10);\n      const box = g.bbox();\n      expect(box).toEqual(objectContaining({\n        x: 20,\n        y: 30,\n        width: box.width,\n        height: box.height\n      }));\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"moves the bbox of the group by a certain amount (2)","suites":["containerGeometry.js","dmove()"],"line":34,"updatePoint":{"line":34,"column":59,"index":871},"code":"    it('moves the bbox of the group by a certain amount (2)', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.rect(400, 200).move(123, 312).rotate(34).skew(12);\n      g.rect(100, 50).move(11, 43).translate(123, 32).skew(-12);\n      g.rect(400, 200).rotate(90);\n      g.group().rotate(23).group().skew(32).rect(100, 40).skew(11).rotate(12);\n      const oldBox = g.bbox();\n      g.dmove(10, 10);\n      const newBox = g.bbox();\n      expect(newBox.x).toBeCloseTo(oldBox.x + 10, 4);\n      expect(newBox.y).toBeCloseTo(oldBox.y + 10, 4);\n      expect(newBox.w).toBeCloseTo(oldBox.w, 4);\n      expect(newBox.h).toBeCloseTo(oldBox.h, 4);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"it does not fail when hitting elements without bbox","suites":["containerGeometry.js","dmove()"],"line":49,"updatePoint":{"line":49,"column":59,"index":1555},"code":"    it('it does not fail when hitting elements without bbox', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.add(new Element(create('title')));\n      const fn = () => g.dmove(10, 10);\n      expect(fn).not.toThrowError();\n      const box = g.bbox();\n      expect(box).toEqual(objectContaining({\n        x: 20,\n        y: 30,\n        width: box.width,\n        height: box.height\n      }));\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"calls dmove with dy=0 and returns itself","suites":["containerGeometry.js","dx()"],"line":77,"updatePoint":{"line":77,"column":48,"index":2226},"code":"    it('calls dmove with dy=0 and returns itself', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      const spy = spyOn(g, 'dmove').and.callThrough();\n      expect(g.dx(10)).toBe(g);\n      expect(spy).toHaveBeenCalledWith(10, 0);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"calls dmove with dx=0 and returns itself","suites":["containerGeometry.js","dy()"],"line":86,"updatePoint":{"line":86,"column":48,"index":2537},"code":"    it('calls dmove with dx=0 and returns itself', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      const spy = spyOn(g, 'dmove').and.callThrough();\n      expect(g.dy(10)).toBe(g);\n      expect(spy).toHaveBeenCalledWith(0, 10);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"calls dmove() with the correct difference","suites":["containerGeometry.js","move()"],"line":95,"updatePoint":{"line":95,"column":49,"index":2851},"code":"    it('calls dmove() with the correct difference', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.rect(100, 200).move(111, 223);\n      spyOn(g, 'dmove');\n      g.move(100, 150);\n      expect(g.dmove).toHaveBeenCalledWith(-11, -73);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"defaults to x=0 and y=0","suites":["containerGeometry.js","move()"],"line":103,"updatePoint":{"line":103,"column":31,"index":3120},"code":"    it('defaults to x=0 and y=0', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.rect(100, 200).move(111, 223);\n      spyOn(g, 'dmove');\n      g.move();\n      expect(g.dmove).toHaveBeenCalledWith(-111, -223);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"gets the x value of the bbox","suites":["containerGeometry.js","x()"],"line":113,"updatePoint":{"line":113,"column":36,"index":3420},"code":"    it('gets the x value of the bbox', () => {\n      const canvas = SVG().addTo(container);\n      const g = new G();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.addTo(canvas);\n      expect(g.x()).toBe(g.bbox().x);\n      expect(g.x()).toBe(10);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"calls move with the parameter as x","suites":["containerGeometry.js","x()"],"line":132,"updatePoint":{"line":132,"column":42,"index":3849},"code":"    it('calls move with the parameter as x', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.rect(100, 200).move(111, 223);\n      spyOn(g, 'move');\n      g.x(100);\n      expect(g.move).toHaveBeenCalledWith(100, g.bbox().y, any(Box));\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"gets the y value of the bbox","suites":["containerGeometry.js","y()"],"line":142,"updatePoint":{"line":142,"column":36,"index":4162},"code":"    it('gets the y value of the bbox', () => {\n      const canvas = SVG().addTo(container);\n      const g = new G();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.addTo(canvas);\n      expect(g.y()).toBe(g.bbox().y);\n      expect(g.y()).toBe(20);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"calls move with the parameter as y","suites":["containerGeometry.js","y()"],"line":161,"updatePoint":{"line":161,"column":42,"index":4591},"code":"    it('calls move with the parameter as y', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.rect(100, 200).move(111, 223);\n      spyOn(g, 'move');\n      g.y(100);\n      expect(g.move).toHaveBeenCalledWith(g.bbox().x, 100, any(Box));\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"changes the dimensions of the bbox (1)","suites":["containerGeometry.js","size()"],"line":171,"updatePoint":{"line":171,"column":46,"index":4917},"code":"    it('changes the dimensions of the bbox (1)', () => {\n      const canvas = SVG().addTo(container);\n      const g = new G();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.addTo(canvas);\n      const oldBox = g.bbox();\n      expect(g.size(100, 100)).toBe(g);\n      const newBox = g.bbox();\n      expect(newBox.x).toBeCloseTo(oldBox.x, 4);\n      expect(newBox.y).toBeCloseTo(oldBox.y, 4);\n      expect(newBox.w).toBeCloseTo(100, 4);\n      expect(newBox.h).toBeCloseTo(100, 4);\n      const rbox1 = g.children()[0].rbox();\n      const rbox2 = g.children()[1].rbox();\n      expect(rbox1.width).toBeCloseTo(90.9, 1);\n      expect(Math.floor(rbox2.width * 10) / 10).toBeCloseTo(63.6, 1); // Browsers have different opinion on this one (chrome: 63.6, ff: 63.7)\n\n      expect(rbox1.x).toBeCloseTo(10, 1);\n      expect(rbox2.x).toBeCloseTo(46.4, 1);\n      expect(rbox1.height).toBeCloseTo(85.7, 1);\n      expect(rbox2.height).toBeCloseTo(71.4, 1);\n      expect(rbox1.y).toBeCloseTo(20, 1);\n      expect(rbox2.y).toBeCloseTo(48.6, 1);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"changes the dimensions of the bbox (2)","suites":["containerGeometry.js","size()"],"line":206,"updatePoint":{"line":206,"column":46,"index":6119},"code":"    it('changes the dimensions of the bbox (2)', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      g.rect(400, 200).move(123, 312).rotate(34).skew(12);\n      g.rect(100, 50).move(11, 43).translate(123, 32).skew(-12);\n      g.rect(400, 200).rotate(90);\n      g.group().rotate(23).group().skew(32).rect(100, 40).skew(11).rotate(12);\n      const oldBox = g.bbox();\n      g.size(100, 100);\n      const newBox = g.bbox();\n      expect(newBox.x).toBeCloseTo(oldBox.x, 4);\n      expect(newBox.y).toBeCloseTo(oldBox.y, 4);\n      expect(newBox.w).toBeCloseTo(100, 4);\n      expect(newBox.h).toBeCloseTo(100, 4);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"gets the width value of the bbox","suites":["containerGeometry.js","width()"],"line":223,"updatePoint":{"line":223,"column":40,"index":6801},"code":"    it('gets the width value of the bbox', () => {\n      const canvas = SVG().addTo(container);\n      const g = new G();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.addTo(canvas);\n      expect(g.width()).toBe(g.bbox().width);\n      expect(g.width()).toBe(110);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"sets the width value of the bbox by moving all children","suites":["containerGeometry.js","width()"],"line":242,"updatePoint":{"line":242,"column":63,"index":7264},"code":"    it('sets the width value of the bbox by moving all children', () => {\n      const canvas = SVG().addTo(container);\n      const g = new G();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.addTo(canvas);\n      expect(g.width(100)).toBe(g);\n      expect(g.bbox().width).toBe(100);\n      const rbox1 = g.children()[0].rbox();\n      const rbox2 = g.children()[1].rbox();\n      expect(rbox1.width).toBeCloseTo(90.9, 1);\n      expect(Math.floor(rbox2.width * 10) / 10).toBeCloseTo(63.6, 1); // Browsers have different opinion on this one (chrome: 63.6, ff: 63.7)\n\n      expect(rbox1.x).toBeCloseTo(10, 3);\n      expect(rbox2.x).toBeCloseTo(46.4, 1);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"gets the height value of the bbox","suites":["containerGeometry.js","height()"],"line":270,"updatePoint":{"line":270,"column":41,"index":8102},"code":"    it('gets the height value of the bbox', () => {\n      const canvas = SVG().addTo(container);\n      const g = new G();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.addTo(canvas);\n      expect(g.height()).toBe(g.bbox().height);\n      expect(g.height()).toBe(140);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"sets the height value of the bbox by moving all children","suites":["containerGeometry.js","height()"],"line":289,"updatePoint":{"line":289,"column":64,"index":8569},"code":"    it('sets the height value of the bbox by moving all children', () => {\n      const canvas = SVG().addTo(container);\n      const g = new G();\n      g.add(new Rect({\n        width: 100,\n        height: 120,\n        x: 10,\n        y: 20\n      }));\n      g.add(new Rect({\n        width: 70,\n        height: 100,\n        x: 50,\n        y: 60\n      }));\n      g.addTo(canvas);\n      expect(g.height(100)).toBe(g);\n      expect(g.bbox().height).toBeCloseTo(100, 3);\n      const rbox1 = g.children()[0].rbox();\n      const rbox2 = g.children()[1].rbox();\n      expect(rbox1.height).toBeCloseTo(85.7, 1);\n      expect(rbox2.height).toBeCloseTo(71.4, 1);\n      expect(rbox1.y).toBeCloseTo(20, 3);\n      expect(rbox2.y).toBeCloseTo(48.6, 1);\n    });","file":"spec/modules/core/containerGeometry.js","skipped":false,"dir":"spec"},{"name":"returns the instance events for an EventTarget","suites":["event.js","getEvents()"],"line":11,"updatePoint":{"line":11,"column":54,"index":459},"code":"    it('returns the instance events for an EventTarget', () => {\n      const eventTarget = new EventTarget();\n      eventTarget.events = 'Test';\n      const events = getEvents(eventTarget);\n      expect(events).toBe('Test');\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"accesses windowEvents if instance is window","suites":["event.js","getEvents()"],"line":17,"updatePoint":{"line":17,"column":51,"index":689},"code":"    it('accesses windowEvents if instance is window', () => {\n      windowEvents.events = 'bla';\n      const events = getEvents(SVG(getWindow()));\n      expect(events).toBe(windowEvents.events);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"calls getEventTarget() on the instance","suites":["event.js","getEventTarget()"],"line":24,"updatePoint":{"line":24,"column":46,"index":932},"code":"    it('calls getEventTarget() on the instance', () => {\n      const eventTarget = new EventTarget();\n      const spy = spyOn(eventTarget, 'getEventTarget');\n      getEventTarget(eventTarget);\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"sets events to an empty object","suites":["event.js","clearEvents()"],"line":32,"updatePoint":{"line":32,"column":38,"index":1205},"code":"    it('sets events to an empty object', () => {\n      const eventTarget = new EventTarget();\n      eventTarget.events = 'Test';\n      clearEvents(eventTarget);\n      expect(eventTarget.events).toEqual({});\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"doesnt do anything if no event object is found on the instance","suites":["event.js","clearEvents()"],"line":38,"updatePoint":{"line":38,"column":70,"index":1452},"code":"    it('doesnt do anything if no event object is found on the instance', () => {\n      const eventTarget = new EventTarget();\n      delete eventTarget.events;\n      clearEvents(eventTarget);\n      expect(eventTarget.events).toBe(undefined);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"binds an event to an EventTarget","suites":["event.js","on()"],"line":46,"updatePoint":{"line":46,"column":40,"index":1704},"code":"    it('binds an event to an EventTarget', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, 'event', spy);\n      dispatch(eventTarget, 'event');\n      expect(spy).toHaveBeenCalledWith(any(getWindow().CustomEvent));\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"binds to multiple events with space or comma separated string","suites":["event.js","on()"],"line":53,"updatePoint":{"line":53,"column":69,"index":2018},"code":"    it('binds to multiple events with space or comma separated string', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, 'event1 event2, event3', spy);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      expect(spy).toHaveBeenCalledTimes(3);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"binds to multiple events passed as array","suites":["event.js","on()"],"line":62,"updatePoint":{"line":62,"column":48,"index":2380},"code":"    it('binds to multiple events passed as array', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, ['event1', 'event2', 'event3'], spy);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      expect(spy).toHaveBeenCalledTimes(3);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"binds a namespaced event of form event.namespace","suites":["event.js","on()"],"line":71,"updatePoint":{"line":71,"column":56,"index":2757},"code":"    it('binds a namespaced event of form event.namespace', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, 'event.namespace', spy);\n      dispatch(eventTarget, 'event');\n      expect(spy).toHaveBeenCalledWith(any(getWindow().CustomEvent));\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"unbinds an event of an EventTarget","suites":["event.js","off()"],"line":80,"updatePoint":{"line":80,"column":42,"index":3088},"code":"    it('unbinds an event of an EventTarget', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, 'event', spy);\n      dispatch(eventTarget, 'event');\n      off(eventTarget, 'event', spy);\n      dispatch(eventTarget, 'event');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"unbinds multiple events with space or comma separated string","suites":["event.js","off()"],"line":89,"updatePoint":{"line":89,"column":68,"index":3451},"code":"    it('unbinds multiple events with space or comma separated string', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, 'event1 event2, event3', spy);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      off(eventTarget, 'event1 event2, event3', spy);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      expect(spy).toHaveBeenCalledTimes(3);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"unbinds multiple events with space or comma separated string","suites":["event.js","off()"],"line":102,"updatePoint":{"line":102,"column":68,"index":4004},"code":"    it('unbinds multiple events with space or comma separated string', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, ['event1', 'event2', 'event3'], spy);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      off(eventTarget, ['event1', 'event2', 'event3'], spy);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      expect(spy).toHaveBeenCalledTimes(3);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"unbinds a namespaced event","suites":["event.js","off()"],"line":115,"updatePoint":{"line":115,"column":34,"index":4537},"code":"    it('unbinds a namespaced event', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, 'event.namespace', spy);\n      dispatch(eventTarget, 'event');\n      off(eventTarget, 'event.namespace', spy);\n      dispatch(eventTarget, 'event');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"unbinds all events including namespaced ones when only event is passed","suites":["event.js","off()"],"line":124,"updatePoint":{"line":124,"column":78,"index":4930},"code":"    it('unbinds all events including namespaced ones when only event is passed', () => {\n      const eventTarget = new EventTarget();\n      const spy = createSpy('spy');\n      on(eventTarget, ['event1.ns1', 'event2.ns2', 'event3'], spy);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      off(eventTarget, ['event1', 'event2', 'event3']);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      expect(spy).toHaveBeenCalledTimes(3);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"unbinds with namespace only","suites":["event.js","off()"],"line":137,"updatePoint":{"line":137,"column":35,"index":5467},"code":"    it('unbinds with namespace only', () => {\n      const eventTarget = new EventTarget();\n      const spy1 = createSpy('spy1');\n      const spy2 = createSpy('spy2');\n      const spy3 = createSpy('spy3');\n      on(eventTarget, 'event1.ns1', spy1);\n      on(eventTarget, 'event2.ns1', spy2);\n      on(eventTarget, 'event3.ns2', spy3);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      off(eventTarget, '.ns1');\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      expect(spy1).toHaveBeenCalledTimes(1);\n      expect(spy2).toHaveBeenCalledTimes(1);\n      expect(spy3).toHaveBeenCalledTimes(2);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"unbinds all events when called without event","suites":["event.js","off()"],"line":156,"updatePoint":{"line":156,"column":52,"index":6227},"code":"    it('unbinds all events when called without event', () => {\n      const eventTarget = new EventTarget();\n      const spy1 = createSpy('spy1');\n      const spy2 = createSpy('spy2');\n      const spy3 = createSpy('spy3');\n      on(eventTarget, 'event1.ns1', spy1);\n      on(eventTarget, 'event2.ns1', spy2);\n      on(eventTarget, 'event3.ns2', spy3);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      off(eventTarget);\n      dispatch(eventTarget, 'event1');\n      dispatch(eventTarget, 'event2');\n      dispatch(eventTarget, 'event3');\n      expect(spy1).toHaveBeenCalledTimes(1);\n      expect(spy2).toHaveBeenCalledTimes(1);\n      expect(spy3).toHaveBeenCalledTimes(1);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"dispatches a custom event on the EventTarget by calling dispatchEvent()","suites":["event.js","dispatch()"],"line":177,"updatePoint":{"line":177,"column":79,"index":7045},"code":"    it('dispatches a custom event on the EventTarget by calling dispatchEvent()', () => {\n      const eventTarget = new EventTarget();\n      const spy = spyOn(eventTarget, 'dispatchEvent');\n      const event = dispatch(eventTarget, 'event', {\n        some: 'data'\n      }, {\n        cancelable: false\n      });\n      expect(event).toEqual(any(getWindow().CustomEvent));\n      expect(spy).toHaveBeenCalledWith(event);\n      expect(event.detail).toEqual({\n        some: 'data'\n      });\n      expect(event.cancelable).toBe(false);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"dispatches the passed event directly","suites":["event.js","dispatch()"],"line":192,"updatePoint":{"line":192,"column":44,"index":7547},"code":"    it('dispatches the passed event directly', () => {\n      const eventTarget = new EventTarget();\n      const spy = spyOn(eventTarget, 'dispatchEvent');\n      const CustomEvent = getWindow().CustomEvent;\n      const event1 = new CustomEvent('event', {\n        detail: {\n          some: 'data'\n        }\n      });\n      const event2 = dispatch(eventTarget, event1);\n      expect(event1).toBe(event2);\n      expect(spy).toHaveBeenCalledWith(event1);\n    });","file":"spec/modules/core/event.js","skipped":false,"dir":"spec"},{"name":"sets fx and fy for radial gradients and returns itself","suites":["gradiented.js","from()"],"line":6,"updatePoint":{"line":6,"column":62,"index":214},"code":"    it('sets fx and fy for radial gradients and returns itself', () => {\n      const gradient = new Gradient('radial');\n      expect(gradient.from(10, 20)).toBe(gradient);\n      expect(gradient.attr('fx')).toBe(10);\n      expect(gradient.attr('fy')).toBe(20);\n    });","file":"spec/modules/core/gradiented.js","skipped":false,"dir":"spec"},{"name":"sets x1 and y1 for linear gradients and returns itself","suites":["gradiented.js","from()"],"line":12,"updatePoint":{"line":12,"column":62,"index":482},"code":"    it('sets x1 and y1 for linear gradients and returns itself', () => {\n      const gradient = new Gradient('linear');\n      expect(gradient.from(10, 20)).toBe(gradient);\n      expect(gradient.attr('x1')).toBe(10);\n      expect(gradient.attr('y1')).toBe(20);\n    });","file":"spec/modules/core/gradiented.js","skipped":false,"dir":"spec"},{"name":"sets cx and cy for radial gradients and returns itself","suites":["gradiented.js","to()"],"line":20,"updatePoint":{"line":20,"column":62,"index":783},"code":"    it('sets cx and cy for radial gradients and returns itself', () => {\n      const gradient = new Gradient('radial');\n      expect(gradient.to(10, 20)).toBe(gradient);\n      expect(gradient.attr('cx')).toBe(10);\n      expect(gradient.attr('cy')).toBe(20);\n    });","file":"spec/modules/core/gradiented.js","skipped":false,"dir":"spec"},{"name":"sets x2 and y2 for linear gradients and returns itself","suites":["gradiented.js","to()"],"line":26,"updatePoint":{"line":26,"column":62,"index":1049},"code":"    it('sets x2 and y2 for linear gradients and returns itself', () => {\n      const gradient = new Gradient('linear');\n      expect(gradient.to(10, 20)).toBe(gradient);\n      expect(gradient.attr('x2')).toBe(10);\n      expect(gradient.attr('y2')).toBe(20);\n    });","file":"spec/modules/core/gradiented.js","skipped":false,"dir":"spec"},{"name":"returns an object with svg and path","suites":["parser.js","parser()"],"line":7,"updatePoint":{"line":7,"column":43,"index":263},"code":"    it('returns an object with svg and path', () => {\n      const nodes = parser();\n      expect(nodes.path).toBeDefined();\n      expect(nodes.svg).toBeDefined();\n    });","file":"spec/modules/core/parser.js","skipped":false,"dir":"spec"},{"name":"creates an svg node in the dom","suites":["parser.js","parser()"],"line":12,"updatePoint":{"line":12,"column":38,"index":429},"code":"    it('creates an svg node in the dom', () => {\n      expect(getWindow().document.querySelector('svg')).toBe(null);\n      const nodes = parser();\n      expect(getWindow().document.querySelector('svg')).toBe(nodes.svg.node);\n    });","file":"spec/modules/core/parser.js","skipped":false,"dir":"spec"},{"name":"reuses parser instance when it was removed","suites":["parser.js","parser()"],"line":17,"updatePoint":{"line":17,"column":50,"index":674},"code":"    it('reuses parser instance when it was removed', () => {\n      const nodes = parser();\n      nodes.svg.remove();\n      const nodes2 = parser();\n      expect(nodes.svg).toBe(nodes2.svg);\n      expect(nodes.path).toBe(nodes2.path);\n    });","file":"spec/modules/core/parser.js","skipped":false,"dir":"spec"},{"name":"returns the underlying PointArray","suites":["Polygon.js","array()"],"line":14,"updatePoint":{"line":14,"column":41,"index":358},"code":"    it('returns the underlying PointArray', () => {\n      const array = poly.plot('1 2 3 4').array();\n      expect(array).toEqual(any(PointArray));\n      expect(array).toEqual([[1, 2], [3, 4]]);\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"clears the array cache and returns itself","suites":["Polygon.js","clear()"],"line":21,"updatePoint":{"line":21,"column":49,"index":605},"code":"    it('clears the array cache and returns itself', () => {\n      const array = poly.plot('1 2 3 4').array();\n      expect(poly.clear()).toBe(poly);\n      expect(array).not.toBe(poly._array);\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Polygon.js","move()"],"line":28,"updatePoint":{"line":28,"column":22,"index":813},"code":"    it('returns itself', () => {\n      expect(poly.move(0, 0)).toBe(poly);\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"moves the poly along x and y axis","suites":["Polygon.js","move()"],"line":31,"updatePoint":{"line":31,"column":41,"index":915},"code":"    it('moves the poly along x and y axis', () => {\n      const canvas = SVG().addTo(container);\n      const poly = canvas.polygon('0 0 50 50');\n      poly.move(50, 50);\n      expect(poly.bbox()).toEqual(objectContaining({\n        x: 50,\n        y: 50,\n        width: 50,\n        height: 50\n      }));\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"relays to array() as getter","suites":["Polygon.js","plot()"],"line":44,"updatePoint":{"line":44,"column":35,"index":1254},"code":"    it('relays to array() as getter', () => {\n      const spy = spyOn(poly, 'array');\n      poly.plot();\n      expect(spy).toHaveBeenCalled();\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"works by passing a string","suites":["Polygon.js","plot()"],"line":49,"updatePoint":{"line":49,"column":33,"index":1403},"code":"    it('works by passing a string', () => {\n      const spy = spyOn(poly, 'attr');\n      poly.plot('1 2 3 4');\n      expect(spy).toHaveBeenCalledWith('points', '1 2 3 4');\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"works with flat array","suites":["Polygon.js","plot()"],"line":54,"updatePoint":{"line":54,"column":29,"index":1579},"code":"    it('works with flat array', () => {\n      const spy = spyOn(poly, 'attr');\n      poly.plot([1, 2, 3, 4]);\n      expect(spy).toHaveBeenCalledWith('points', [[1, 2], [3, 4]]);\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"works with multi array","suites":["Polygon.js","plot()"],"line":59,"updatePoint":{"line":59,"column":30,"index":1766},"code":"    it('works with multi array', () => {\n      const spy = spyOn(poly, 'attr');\n      poly.plot([[1, 2], [3, 4]]);\n      expect(spy).toHaveBeenCalledWith('points', [[1, 2], [3, 4]]);\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"works with PointArray","suites":["Polygon.js","plot()"],"line":64,"updatePoint":{"line":64,"column":29,"index":1956},"code":"    it('works with PointArray', () => {\n      const spy = spyOn(poly, 'attr');\n      poly.plot(new PointArray([[1, 2], [3, 4]]));\n      expect(spy).toHaveBeenCalledWith('points', [[1, 2], [3, 4]]);\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["Polygon.js","size()"],"line":71,"updatePoint":{"line":71,"column":22,"index":2190},"code":"    it('returns itself', () => {\n      expect(poly.size(50, 50)).toBe(poly);\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"sets the size of the poly","suites":["Polygon.js","size()"],"line":74,"updatePoint":{"line":74,"column":33,"index":2286},"code":"    it('sets the size of the poly', () => {\n      const canvas = SVG().addTo(container);\n      const poly = canvas.polygon('0 0 50 50');\n      poly.size(100, 100);\n      expect(poly.bbox()).toEqual(objectContaining({\n        width: 100,\n        height: 100,\n        x: 0,\n        y: 0\n      }));\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"changes height proportionally","suites":["Polygon.js","size()"],"line":85,"updatePoint":{"line":85,"column":37,"index":2594},"code":"    it('changes height proportionally', () => {\n      const canvas = SVG().addTo(container);\n      const poly = canvas.polygon('0 0 50 50');\n      poly.size(100, null);\n      expect(poly.bbox()).toEqual(objectContaining({\n        width: 100,\n        height: 100,\n        x: 0,\n        y: 0\n      }));\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"changes width proportionally","suites":["Polygon.js","size()"],"line":96,"updatePoint":{"line":96,"column":36,"index":2902},"code":"    it('changes width proportionally', () => {\n      const canvas = SVG().addTo(container);\n      const poly = canvas.polygon('0 0 50 50');\n      poly.size(null, 100);\n      expect(poly.bbox()).toEqual(objectContaining({\n        width: 100,\n        height: 100,\n        x: 0,\n        y: 0\n      }));\n    });","file":"spec/modules/core/poly.js","skipped":false,"dir":"spec"},{"name":"matches number and unit 12px","suites":["regex.js","numberAndUnit"],"line":6,"updatePoint":{"line":6,"column":36,"index":187},"code":"    it('matches number and unit 12px', () => {\n      const match = '12px'.match(regex.numberAndUnit);\n      expect(match[1]).toBe('12');\n      expect(match[5]).toBe('px');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches number and unit 12","suites":["regex.js","numberAndUnit"],"line":11,"updatePoint":{"line":11,"column":34,"index":365},"code":"    it('matches number and unit 12', () => {\n      const match = '12'.match(regex.numberAndUnit);\n      expect(match[1]).toBe('12');\n      expect(match[5]).toBe('');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches number and unit 12%","suites":["regex.js","numberAndUnit"],"line":16,"updatePoint":{"line":16,"column":35,"index":540},"code":"    it('matches number and unit 12%', () => {\n      const match = '12%'.match(regex.numberAndUnit);\n      expect(match[1]).toBe('12');\n      expect(match[5]).toBe('%');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches number and unit -12%","suites":["regex.js","numberAndUnit"],"line":21,"updatePoint":{"line":21,"column":36,"index":718},"code":"    it('matches number and unit -12%', () => {\n      const match = '-12%'.match(regex.numberAndUnit);\n      expect(match[1]).toBe('-12');\n      expect(match[5]).toBe('%');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches number and unit -12.123%","suites":["regex.js","numberAndUnit"],"line":26,"updatePoint":{"line":26,"column":40,"index":902},"code":"    it('matches number and unit -12.123%', () => {\n      const match = '-12.123%'.match(regex.numberAndUnit);\n      expect(match[1]).toBe('-12.123');\n      expect(match[5]).toBe('%');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches number and unit -12.123e12%","suites":["regex.js","numberAndUnit"],"line":31,"updatePoint":{"line":31,"column":43,"index":1097},"code":"    it('matches number and unit -12.123e12%', () => {\n      const match = '-12.123e12%'.match(regex.numberAndUnit);\n      expect(match[1]).toBe('-12.123e12');\n      expect(match[5]).toBe('%');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches a 6 digit hex","suites":["regex.js","hex"],"line":38,"updatePoint":{"line":38,"column":29,"index":1316},"code":"    it('matches a 6 digit hex', () => {\n      const match = '#123456'.match(regex.hex);\n      expect(match[1]).toBe('12');\n      expect(match[2]).toBe('34');\n      expect(match[3]).toBe('56');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"doesnt matches other then 0-f #","suites":["regex.js","hex"],"line":50,"updatePoint":{"line":50,"column":39,"index":1662},"code":"    it('doesnt matches other then 0-f #', () => {\n      const match = '#09afhz'.match(regex.hex);\n      expect(match).toBe(null);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"doesnt matches non full hex","suites":["regex.js","hex"],"line":54,"updatePoint":{"line":54,"column":35,"index":1796},"code":"    it('doesnt matches non full hex', () => {\n      const match = '#aaa'.match(regex.hex);\n      expect(match).toBe(null);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches rgb values of rgb(...) command","suites":["regex.js","rgb"],"line":60,"updatePoint":{"line":60,"column":46,"index":1970},"code":"    it('matches rgb values of rgb(...) command', () => {\n      const match = 'rgb(12,34,56)'.match(regex.rgb);\n      expect(match[1]).toBe('12');\n      expect(match[2]).toBe('34');\n      expect(match[3]).toBe('56');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"doesnt match in the wrong format","suites":["regex.js","rgb"],"line":66,"updatePoint":{"line":66,"column":40,"index":2188},"code":"    it('doesnt match in the wrong format', () => {\n      expect('rgb(   12 , 34  ,     56)'.match(regex.rgb)).toBe(null);\n      expect('12,34,56'.match(regex.rgb)).toBe(null);\n      expect('(12,34,56)'.match(regex.rgb)).toBe(null);\n      expect('rgb(aa,34,56)'.match(regex.rgb)).toBe(null);\n      expect('rgb(12,34)'.match(regex.rgb)).toBe(null);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"matches a reference","suites":["regex.js","reference"],"line":75,"updatePoint":{"line":75,"column":27,"index":2568},"code":"    it('matches a reference', () => {\n      const match = '#soMe_cRazy-1_id'.match(regex.reference);\n      expect(match[1]).toBe('#soMe_cRazy-1_id');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"tries to match malformed references","suites":["regex.js","reference"],"line":79,"updatePoint":{"line":79,"column":43,"index":2742},"code":"    it('tries to match malformed references', () => {\n      const match = '#some_crazy%-1_id'.match(regex.reference);\n      expect(match[0]).toBe('#some_crazy');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"splits a transform chain","suites":["regex.js","transforms"],"line":85,"updatePoint":{"line":85,"column":32,"index":2940},"code":"    it('splits a transform chain', () => {\n      const split = 'rotate(34) translate(1,2), translate(1 ,  3),rotate(12)    ,   something(1,2,3)'.split(regex.transforms);\n      expect(split).toEqual(['rotate(34', 'translate(1,2', 'translate(1 ,  3', 'rotate(12', 'something(1,2,3', '']);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"replaces all whitespaces","suites":["regex.js","whitespace"],"line":91,"updatePoint":{"line":91,"column":32,"index":3274},"code":"    it('replaces all whitespaces', () => {\n      expect('   \\n \\r   \\t   '.replace(regex.whitespace, ' ')).toBe('             ');\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns true when testing hex values","suites":["regex.js","isHex"],"line":96,"updatePoint":{"line":96,"column":44,"index":3458},"code":"    it('returns true when testing hex values', () => {\n      expect(regex.isHex.test('#123')).toBe(true);\n      expect(regex.isHex.test('#abc')).toBe(true);\n      expect(regex.isHex.test('#123456')).toBe(true);\n      expect(regex.isHex.test('#abcdef')).toBe(true);\n      expect(regex.isHex.test('#16fde9')).toBe(true);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns false when testing non hex values","suites":["regex.js","isHex"],"line":103,"updatePoint":{"line":103,"column":49,"index":3790},"code":"    it('returns false when testing non hex values', () => {\n      expect(regex.isHex.test('#12')).toBe(false);\n      expect(regex.isHex.test('abc')).toBe(false);\n      expect(regex.isHex.test('#1234563')).toBe(false);\n      expect(regex.isHex.test('#kasdhs')).toBe(false);\n      expect(regex.isHex.test('#abcd')).toBe(false);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns true when testing rgb values","suites":["regex.js","isRgb"],"line":112,"updatePoint":{"line":112,"column":44,"index":4153},"code":"    it('returns true when testing rgb values', () => {\n      expect(regex.isRgb.test('rgb(1,2,3)')).toBe(true);\n      expect(regex.isRgb.test('rgb( 3,   1,3)')).toBe(true);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns false when testing non rgb values","suites":["regex.js","isRgb"],"line":116,"updatePoint":{"line":116,"column":49,"index":4339},"code":"    it('returns false when testing non rgb values', () => {\n      expect(regex.isRgb.test('hsl(1,2,3)')).toBe(false);\n      expect(regex.isRgb.test('#123')).toBe(false);\n      expect(regex.isRgb.test('something')).toBe(false);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns true if something is blank","suites":["regex.js","isBlank"],"line":123,"updatePoint":{"line":123,"column":42,"index":4603},"code":"    it('returns true if something is blank', () => {\n      expect(regex.isBlank.test('')).toBe(true);\n      expect(regex.isBlank.test(' ')).toBe(true);\n      expect(regex.isBlank.test('\\n')).toBe(true);\n      expect(regex.isBlank.test('\\r')).toBe(true);\n      expect(regex.isBlank.test('\\t')).toBe(true);\n      expect(regex.isBlank.test(' \\n\\r\\t')).toBe(true);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns false if something is not blank","suites":["regex.js","isBlank"],"line":131,"updatePoint":{"line":131,"column":47,"index":4977},"code":"    it('returns false if something is not blank', () => {\n      expect(regex.isBlank.test('a')).toBe(false);\n      expect(regex.isBlank.test('1')).toBe(false);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns true if something is a number","suites":["regex.js","isNumber"],"line":137,"updatePoint":{"line":137,"column":45,"index":5180},"code":"    it('returns true if something is a number', () => {\n      expect(regex.isNumber.test('123')).toBe(true);\n      expect(regex.isNumber.test('-123')).toBe(true);\n      expect(regex.isNumber.test('-12.3')).toBe(true);\n      expect(regex.isNumber.test('-12.3e12')).toBe(true);\n      expect(regex.isNumber.test('-12.3e-12')).toBe(true);\n      expect(regex.isNumber.test('+12.3e-12')).toBe(true);\n      expect(regex.isNumber.test('+12.3E-12')).toBe(true);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns false if something is not a number","suites":["regex.js","isNumber"],"line":146,"updatePoint":{"line":146,"column":50,"index":5646},"code":"    it('returns false if something is not a number', () => {\n      expect(regex.isNumber.test('a')).toBe(false);\n      expect(regex.isNumber.test('-a')).toBe(false);\n      expect(regex.isNumber.test('-12a')).toBe(false);\n      expect(regex.isNumber.test('-12.3a12')).toBe(false);\n      expect(regex.isNumber.test('-12.3e-1a')).toBe(false);\n      expect(regex.isNumber.test('12.12.12')).toBe(false);\n      expect(regex.isNumber.test('12.12e12.3')).toBe(false);\n      expect(regex.isNumber.test('12.12e12e4')).toBe(false);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns true if something is an image filename","suites":["regex.js","isImage"],"line":158,"updatePoint":{"line":158,"column":54,"index":6215},"code":"    it('returns true if something is an image filename', () => {\n      expect(regex.isImage.test('a.jpg')).toBe(true);\n      expect(regex.isImage.test('a.jpeg')).toBe(true);\n      expect(regex.isImage.test('a.png')).toBe(true);\n      expect(regex.isImage.test('a.gif')).toBe(true);\n      expect(regex.isImage.test('a.svg')).toBe(true);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns false if something is not an image filename","suites":["regex.js","isImage"],"line":165,"updatePoint":{"line":165,"column":59,"index":6564},"code":"    it('returns false if something is not an image filename', () => {\n      expect(regex.isImage.test('a.abc')).toBe(false);\n      expect(regex.isImage.test('a.txt')).toBe(false);\n      expect(regex.isImage.test('a.doc')).toBe(false);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"splits at whitespace and comma","suites":["regex.js","delimiter"],"line":172,"updatePoint":{"line":172,"column":38,"index":6824},"code":"    it('splits at whitespace and comma', () => {\n      const split = '1,2 3 , 4   5,,  6'.split(regex.delimiter);\n      expect(split).toEqual(['1', '2', '3', '4', '5', '6']);\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns true if something is a path letter","suites":["regex.js","isPathLetter"],"line":178,"updatePoint":{"line":178,"column":50,"index":7060},"code":"    it('returns true if something is a path letter', () => {\n      'MLHVCSQTAZmlhvcsqtaz'.split('').forEach(l => {\n        expect(regex.isPathLetter.test(l)).toBe(true);\n      });\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"returns false if something is not path letter","suites":["regex.js","isPathLetter"],"line":183,"updatePoint":{"line":183,"column":53,"index":7251},"code":"    it('returns false if something is not path letter', () => {\n      '123biuBIU$%&'.split('').forEach(l => {\n        expect(regex.isPathLetter.test(l)).toBe(false);\n      });\n    });","file":"spec/modules/core/regex.js","skipped":false,"dir":"spec"},{"name":"finds all elements of a selector in the document","suites":["selector.js","baseFind()"],"line":7,"updatePoint":{"line":7,"column":56,"index":286},"code":"    it('finds all elements of a selector in the document', () => {\n      const div = SVG('<div />', true).id('foo').addTo(container);\n      const span = SVG('<span />', true).addClass('bar').addTo(div);\n      const span2 = SVG('<span />', true).addTo(div);\n      expect(find('#canvas').map(el => el.node)).toEqual([container]);\n      expect(find('span')).toEqual([span, span2]);\n      expect(find('#foo')).toEqual([div]);\n      expect(find('.bar')).toEqual([span]);\n    });","file":"spec/modules/core/selector.js","skipped":false,"dir":"spec"},{"name":"finds all elements of a selector scoped to an element","suites":["selector.js","baseFind()"],"line":16,"updatePoint":{"line":16,"column":61,"index":765},"code":"    it('finds all elements of a selector scoped to an element', () => {\n      const div = SVG('<div />', true).id('foo').addTo(container);\n      expect(find('#canvas', getWindow().document)[0].node).toBe(container);\n      expect(find('#foo', container)).toEqual([div]);\n      expect(find('#canvas', div.node)).toEqual([]);\n    });","file":"spec/modules/core/selector.js","skipped":false,"dir":"spec"},{"name":"finds all elements matching the selector in this element","suites":["selector.js","Dom","find()"],"line":25,"updatePoint":{"line":25,"column":66,"index":1164},"code":"      it('finds all elements matching the selector in this element', () => {\n        const g1 = new G();\n        const g2 = new G().addTo(g1).id('foo');\n        const g3 = new G().addTo(g1).addClass('bar');\n        const g4 = new G().addTo(g2);\n        const g5 = new G().addTo(g3);\n        expect(g1.find('g')).toEqual([g2, g4, g3, g5]);\n        expect(g2.find('g')).toEqual([g4]);\n        expect(g1.find('#foo')).toEqual([g2]);\n        expect(g2.find('#foo')).toEqual([]);\n        expect(g1.find('.bar')).toEqual([g3]);\n      });","file":"spec/modules/core/selector.js","skipped":false,"dir":"spec"},{"name":"finds an element in this element","suites":["selector.js","Dom","findOne()"],"line":39,"updatePoint":{"line":39,"column":42,"index":1714},"code":"      it('finds an element in this element', () => {\n        const g1 = new G();\n        const g2 = new G().addTo(g1).id('foo');\n        const g3 = new G().addTo(g1).addClass('bar');\n        const g4 = new G().addTo(g2);\n        expect(g1.findOne('g')).toBe(g2);\n        expect(g2.findOne('g')).toBe(g4);\n        expect(g1.findOne('#foo')).toBe(g2);\n        expect(g2.findOne('#foo')).toBe(null);\n        expect(g1.findOne('.bar')).toBe(g3);\n      });","file":"spec/modules/core/selector.js","skipped":false,"dir":"spec"},{"name":"returns the value of x without an argument on a text","suites":["textable.js","x()"],"line":12,"updatePoint":{"line":12,"column":60,"index":413},"code":"    it('returns the value of x without an argument on a text', () => {\n      expect(text.x(0).x()).toBe(0);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the x value of the bbox with the first argument on a text","suites":["textable.js","x()"],"line":15,"updatePoint":{"line":15,"column":70,"index":539},"code":"    it('sets the x value of the bbox with the first argument on a text', () => {\n      text.x(123);\n      expect(text.bbox().x).toBe(123);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of all lines","suites":["textable.js","x()"],"line":19,"updatePoint":{"line":19,"column":35,"index":651},"code":"    it('sets the value of all lines', () => {\n      text.x(200);\n      text.each(function () {\n        expect(this.x()).toBe(text.x());\n      });\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of x without an argument on a tspan","suites":["textable.js","x()"],"line":25,"updatePoint":{"line":25,"column":61,"index":831},"code":"    it('returns the value of x without an argument on a tspan', () => {\n      expect(tspan.x(10).x()).toBe(10);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the x value of the bbox with the first argument on a tspan","suites":["textable.js","x()"],"line":28,"updatePoint":{"line":28,"column":71,"index":961},"code":"    it('sets the x value of the bbox with the first argument on a tspan', () => {\n      tspan.x(123);\n      expect(tspan.bbox().x).toBe(123);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of y without an argument on a text","suites":["textable.js","y()"],"line":34,"updatePoint":{"line":34,"column":60,"index":1132},"code":"    it('returns the value of y without an argument on a text', () => {\n      expect(text.y(0).y()).toBe(0);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the y value of the bbox with the first argument on a text","suites":["textable.js","y()"],"line":37,"updatePoint":{"line":37,"column":70,"index":1258},"code":"    it('sets the y value of the bbox with the first argument on a text', () => {\n      text.y(123);\n      expect(text.bbox().y).toBe(123);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the y position of first line","suites":["textable.js","y()"],"line":41,"updatePoint":{"line":41,"column":41,"index":1376},"code":"    it('sets the y position of first line', () => {\n      text.y(200);\n      expect(text.first().y()).toBe(text.y());\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of y without an argument on a tspan","suites":["textable.js","y()"],"line":45,"updatePoint":{"line":45,"column":61,"index":1522},"code":"    it('returns the value of y without an argument on a tspan', () => {\n      expect(tspan.y(10).y()).toBe(10);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the y value of the bbox with the first argument on a tspan","suites":["textable.js","y()"],"line":48,"updatePoint":{"line":48,"column":71,"index":1652},"code":"    it('sets the y value of the bbox with the first argument on a tspan', () => {\n      tspan.y(123);\n      expect(tspan.bbox().y).toBe(123);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"calls x() and y() with parameters on text","suites":["textable.js","move()"],"line":54,"updatePoint":{"line":54,"column":49,"index":1815},"code":"    it('calls x() and y() with parameters on text', () => {\n      const spyX = spyOn(text, 'x').and.callThrough();\n      const spyY = spyOn(text, 'y').and.callThrough();\n      const box = new Box();\n      text.move(1, 2, box);\n      expect(spyX).toHaveBeenCalledWith(1, box);\n      expect(spyY).toHaveBeenCalledWith(2, box);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"calls x() and y() with parameters on tspan","suites":["textable.js","move()"],"line":62,"updatePoint":{"line":62,"column":50,"index":2149},"code":"    it('calls x() and y() with parameters on tspan', () => {\n      const spyX = spyOn(tspan, 'x').and.callThrough();\n      const spyY = spyOn(tspan, 'y').and.callThrough();\n      const box = new Box();\n      tspan.move(1, 2, box);\n      expect(spyX).toHaveBeenCalledWith(1, box);\n      expect(spyY).toHaveBeenCalledWith(2, box);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of x with a percent value with Text","suites":["textable.js","ax()"],"line":72,"updatePoint":{"line":72,"column":58,"index":2527},"code":"    it('sets the value of x with a percent value with Text', () => {\n      text.ax('40%');\n      expect(text.node.getAttribute('x')).toBe('40%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of x when x is a percentual value with Text","suites":["textable.js","ax()"],"line":76,"updatePoint":{"line":76,"column":69,"index":2692},"code":"    it('returns the value of x when x is a percentual value with Text', () => {\n      expect(text.ax('40%').ax()).toBe('40%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of x with a percent value with Tspan","suites":["textable.js","ax()"],"line":79,"updatePoint":{"line":79,"column":59,"index":2817},"code":"    it('sets the value of x with a percent value with Tspan', () => {\n      tspan.ax('40%');\n      expect(tspan.node.getAttribute('x')).toBe('40%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of x when x is a percentual value with Tspan","suites":["textable.js","ax()"],"line":83,"updatePoint":{"line":83,"column":70,"index":2985},"code":"    it('returns the value of x when x is a percentual value with Tspan', () => {\n      tspan.ax('40%');\n      expect(tspan.ax()).toBe('40%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of y with a percent value with Text","suites":["textable.js","ay()"],"line":89,"updatePoint":{"line":89,"column":58,"index":3156},"code":"    it('sets the value of y with a percent value with Text', () => {\n      text.ay('40%');\n      expect(text.node.getAttribute('y')).toBe('40%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of y when y is a percentual value with Tspan","suites":["textable.js","ay()"],"line":93,"updatePoint":{"line":93,"column":70,"index":3322},"code":"    it('returns the value of y when y is a percentual value with Tspan', () => {\n      expect(text.ay('45%').ay()).toBe('45%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of y with a percent value with Text","suites":["textable.js","ay()"],"line":96,"updatePoint":{"line":96,"column":58,"index":3446},"code":"    it('sets the value of y with a percent value with Text', () => {\n      tspan.ay('40%');\n      expect(tspan.node.getAttribute('y')).toBe('40%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of y when y is a percentual value with Tspan","suites":["textable.js","ay()"],"line":100,"updatePoint":{"line":100,"column":70,"index":3614},"code":"    it('returns the value of y when y is a percentual value with Tspan', () => {\n      tspan.ay('40%');\n      expect(tspan.ay()).toBe('40%');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"calls ax() and ay() with parameters on text","suites":["textable.js","move()"],"line":106,"updatePoint":{"line":106,"column":51,"index":3780},"code":"    it('calls ax() and ay() with parameters on text', () => {\n      const spyX = spyOn(text, 'ax').and.callThrough();\n      const spyY = spyOn(text, 'ay').and.callThrough();\n      text.amove(1, 2);\n      expect(spyX).toHaveBeenCalledWith(1);\n      expect(spyY).toHaveBeenCalledWith(2);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"calls ax() and ay() with parameters on tspan","suites":["textable.js","move()"],"line":113,"updatePoint":{"line":113,"column":52,"index":4075},"code":"    it('calls ax() and ay() with parameters on tspan', () => {\n      const spyX = spyOn(tspan, 'ax').and.callThrough();\n      const spyY = spyOn(tspan, 'ay').and.callThrough();\n      tspan.amove(1, 2);\n      expect(spyX).toHaveBeenCalledWith(1);\n      expect(spyY).toHaveBeenCalledWith(2);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of cx without an argument with Text","suites":["textable.js","cx()"],"line":124,"updatePoint":{"line":124,"column":61,"index":4520},"code":"    it('returns the value of cx without an argument with Text', () => {\n      var box = text.bbox();\n      expect(text.cx()).toBeCloseTo(box.x + box.width / 2);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of cx with the first argument with Text","suites":["textable.js","cx()"],"line":128,"updatePoint":{"line":128,"column":62,"index":4690},"code":"    it('sets the value of cx with the first argument with Text', () => {\n      text.cx(123);\n      var box = text.bbox();\n      expect(box.cx).toBeCloseTo(box.x + box.width / 2);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of cx without an argument with Tspan","suites":["textable.js","cx()"],"line":133,"updatePoint":{"line":133,"column":62,"index":4877},"code":"    it('returns the value of cx without an argument with Tspan', () => {\n      var box = tspan.bbox();\n      expect(tspan.cx()).toBeCloseTo(box.x + box.width / 2);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of cx with the first argument with Tspan","suites":["textable.js","cx()"],"line":137,"updatePoint":{"line":137,"column":63,"index":5050},"code":"    it('sets the value of cx with the first argument with Tspan', () => {\n      tspan.cx(123);\n      var box = tspan.bbox();\n      expect(box.cx).toBeCloseTo(box.x + box.width / 2);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of cy without an argument with Tspan","suites":["textable.js","cy()"],"line":144,"updatePoint":{"line":144,"column":62,"index":5272},"code":"    it('returns the value of cy without an argument with Tspan', () => {\n      var box = tspan.bbox();\n      expect(tspan.cy()).toBe(box.cy);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of cy with the first argument with Tspan","suites":["textable.js","cy()"],"line":148,"updatePoint":{"line":148,"column":63,"index":5423},"code":"    it('sets the value of cy with the first argument with Tspan', () => {\n      tspan.cy(345);\n      var box = tspan.bbox();\n      expect(Math.round(box.cy * 10) / 10).toBe(345);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns the value of cy without an argument with Tspan","suites":["textable.js","cy()"],"line":153,"updatePoint":{"line":153,"column":62,"index":5609},"code":"    it('returns the value of cy without an argument with Tspan', () => {\n      var box = tspan.bbox();\n      expect(tspan.cy()).toBe(box.cy);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"sets the value of cy with the first argument with Tspan","suites":["textable.js","cy()"],"line":157,"updatePoint":{"line":157,"column":63,"index":5760},"code":"    it('sets the value of cy with the first argument with Tspan', () => {\n      tspan.cy(345);\n      var box = tspan.bbox();\n      expect(Math.round(box.cy * 10) / 10).toBe(345);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"calls cx() and cy() with parameters on Text","suites":["textable.js","center()"],"line":164,"updatePoint":{"line":164,"column":51,"index":5972},"code":"    it('calls cx() and cy() with parameters on Text', () => {\n      const spyX = spyOn(text, 'cx').and.callThrough();\n      const spyY = spyOn(text, 'cy').and.callThrough();\n      const box = new Box();\n      text.center(1, 2, box);\n      expect(spyX).toHaveBeenCalledWith(1, box);\n      expect(spyY).toHaveBeenCalledWith(2, box);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"calls cx() and cy() with parameters on Tspan","suites":["textable.js","center()"],"line":172,"updatePoint":{"line":172,"column":52,"index":6312},"code":"    it('calls cx() and cy() with parameters on Tspan', () => {\n      const spyX = spyOn(tspan, 'cx').and.callThrough();\n      const spyY = spyOn(tspan, 'cy').and.callThrough();\n      const box = new Box();\n      tspan.center(1, 2, box);\n      expect(spyX).toHaveBeenCalledWith(1, box);\n      expect(spyY).toHaveBeenCalledWith(2, box);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"adds content without a tspan with Text","suites":["textable.js","plain()"],"line":182,"updatePoint":{"line":182,"column":46,"index":6685},"code":"    it('adds content without a tspan with Text', () => {\n      text.plain('It is a bear!');\n      expect(text.node.childNodes[0].nodeType).toBe(3);\n      expect(text.node.childNodes[0].data).toBe('It is a bear!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"clears content before adding new content with Text","suites":["textable.js","plain()"],"line":187,"updatePoint":{"line":187,"column":58,"index":6919},"code":"    it('clears content before adding new content with Text', () => {\n      text.plain('It is not a bear!');\n      expect(text.node.childNodes.length).toBe(1);\n      expect(text.node.childNodes[0].data).toBe('It is not a bear!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"restores the content from the dom with Text","suites":["textable.js","plain()"],"line":192,"updatePoint":{"line":192,"column":51,"index":7149},"code":"    it('restores the content from the dom with Text', () => {\n      text.plain('Just plain text!');\n      expect(text.text()).toBe('Just plain text!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"adds content without a tspan with Tspan","suites":["textable.js","plain()"],"line":196,"updatePoint":{"line":196,"column":47,"index":7305},"code":"    it('adds content without a tspan with Tspan', () => {\n      tspan.plain('It is a bear!');\n      expect(tspan.node.childNodes[0].nodeType).toBe(3);\n      expect(tspan.node.childNodes[0].data).toBe('It is a bear!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"clears content before adding new content with Tspan","suites":["textable.js","plain()"],"line":201,"updatePoint":{"line":201,"column":59,"index":7543},"code":"    it('clears content before adding new content with Tspan', () => {\n      tspan.plain('It is not a bear!');\n      expect(tspan.node.childNodes.length).toBe(1);\n      expect(tspan.node.childNodes[0].data).toBe('It is not a bear!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"restores the content from the dom with Tspan","suites":["textable.js","plain()"],"line":206,"updatePoint":{"line":206,"column":52,"index":7777},"code":"    it('restores the content from the dom with Tspan', () => {\n      // We create a new Tspan here because the one used before was part of text creation\n      // and therefore is marked as newline and thats not what we want to test\n      const tspan = new Tspan().plain('Just plain text!');\n      expect(tspan.text()).toBe('Just plain text!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"gets total length of text","suites":["textable.js","length()"],"line":214,"updatePoint":{"line":214,"column":33,"index":8147},"code":"    it('gets total length of text', () => {\n      text.text(function (add) {\n        add.tspan('The first.');\n        add.tspan('The second.');\n        add.tspan('The third.');\n      });\n      expect(text.length()).toBeCloseTo(text.get(0).length() + text.get(1).length() + text.get(2).length(), 3);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"gets total length of tspan","suites":["textable.js","length()"],"line":222,"updatePoint":{"line":222,"column":34,"index":8455},"code":"    it('gets total length of tspan', () => {\n      tspan.text(function (add) {\n        add.tspan('The first.');\n        add.tspan('The second.');\n        add.tspan('The third.');\n      });\n      expect(tspan.length()).toBeCloseTo(tspan.get(0).length() + tspan.get(1).length() + tspan.get(2).length(), 3);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"enables adding multiple plain text nodes when given true for Text","suites":["textable.js","build()"],"line":232,"updatePoint":{"line":232,"column":73,"index":8843},"code":"    it('enables adding multiple plain text nodes when given true for Text', () => {\n      text.clear().build(true);\n      text.plain('A great piece!');\n      text.plain('Another great piece!');\n      expect(text.node.childNodes[0].data).toBe('A great piece!');\n      expect(text.node.childNodes[1].data).toBe('Another great piece!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"enables adding multiple tspan nodes when given true for Text","suites":["textable.js","build()"],"line":239,"updatePoint":{"line":239,"column":68,"index":9180},"code":"    it('enables adding multiple tspan nodes when given true for Text', () => {\n      text.clear().build(true);\n      text.tspan('A great piece!');\n      text.tspan('Another great piece!');\n      expect(text.node.childNodes[0].childNodes[0].data).toBe('A great piece!');\n      expect(text.node.childNodes[1].childNodes[0].data).toBe('Another great piece!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"disables adding multiple plain text nodes when given false for Text","suites":["textable.js","build()"],"line":246,"updatePoint":{"line":246,"column":75,"index":9552},"code":"    it('disables adding multiple plain text nodes when given false for Text', () => {\n      text.clear().build(true);\n      text.plain('A great piece!');\n      text.build(false).plain('Another great piece!');\n      expect(text.node.childNodes[0].data).toBe('Another great piece!');\n      expect(text.node.childNodes[1]).toBe(undefined);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"disables adding multiple tspan nodes when given false for Text","suites":["textable.js","build()"],"line":253,"updatePoint":{"line":253,"column":70,"index":9892},"code":"    it('disables adding multiple tspan nodes when given false for Text', () => {\n      text.clear().build(true);\n      text.tspan('A great piece!');\n      text.build(false).tspan('Another great piece!');\n      expect(text.node.childNodes[0].childNodes[0].data).toBe('Another great piece!');\n      expect(text.node.childNodes[1]).toBe(undefined);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"enables adding multiple plain text nodes when given true for Tspan","suites":["textable.js","build()"],"line":260,"updatePoint":{"line":260,"column":74,"index":10250},"code":"    it('enables adding multiple plain text nodes when given true for Tspan', () => {\n      tspan.clear().build(true);\n      tspan.plain('A great piece!');\n      tspan.plain('Another great piece!');\n      expect(tspan.node.childNodes[0].data).toBe('A great piece!');\n      expect(tspan.node.childNodes[1].data).toBe('Another great piece!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"enables adding multiple text nodes when given true for Tspan","suites":["textable.js","build()"],"line":267,"updatePoint":{"line":267,"column":68,"index":10592},"code":"    it('enables adding multiple text nodes when given true for Tspan', () => {\n      tspan.clear().build(true);\n      tspan.tspan('A great piece!');\n      tspan.tspan('Another great piece!');\n      expect(tspan.node.childNodes[0].childNodes[0].data).toBe('A great piece!');\n      expect(tspan.node.childNodes[1].childNodes[0].data).toBe('Another great piece!');\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"disables adding multiple plain text nodes when given false for Tspan","suites":["textable.js","build()"],"line":274,"updatePoint":{"line":274,"column":76,"index":10970},"code":"    it('disables adding multiple plain text nodes when given false for Tspan', () => {\n      tspan.clear().build(true);\n      tspan.plain('A great piece!');\n      tspan.build(false).plain('Another great piece!');\n      expect(tspan.node.childNodes[0].data).toBe('Another great piece!');\n      expect(tspan.node.childNodes[1]).toBe(undefined);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"disables adding multiple tspan nodes when given false for Tspan","suites":["textable.js","build()"],"line":281,"updatePoint":{"line":281,"column":71,"index":11316},"code":"    it('disables adding multiple tspan nodes when given false for Tspan', () => {\n      tspan.clear().build(true);\n      tspan.tspan('A great piece!');\n      tspan.build(false).tspan('Another great piece!');\n      expect(tspan.node.childNodes[0].childNodes[0].data).toBe('Another great piece!');\n      expect(tspan.node.childNodes[1]).toBe(undefined);\n    });","file":"spec/modules/core/textable.js","skipped":false,"dir":"spec"},{"name":"returns all siblings including the node itself","suites":["arrange.js","Dom","siblings()"],"line":7,"updatePoint":{"line":7,"column":56,"index":236},"code":"      it('returns all siblings including the node itself', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        expect(circle.siblings()).toEqual([rect, circle, line]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns the position in the parent","suites":["arrange.js","Dom","position()"],"line":16,"updatePoint":{"line":16,"column":44,"index":554},"code":"      it('returns the position in the parent', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        expect(rect.position()).toBe(0);\n        expect(circle.position()).toBe(1);\n        expect(line.position()).toBe(2);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns the next sibling","suites":["arrange.js","Dom","next()"],"line":27,"updatePoint":{"line":27,"column":34,"index":918},"code":"      it('returns the next sibling', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        expect(rect.next()).toBe(circle);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns undefined if there is no sibling","suites":["arrange.js","Dom","next()"],"line":33,"updatePoint":{"line":33,"column":50,"index":1135},"code":"      it('returns undefined if there is no sibling', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        expect(rect.next()).toBe(undefined);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns the next sibling","suites":["arrange.js","Dom","prev()"],"line":40,"updatePoint":{"line":40,"column":34,"index":1340},"code":"      it('returns the next sibling', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        expect(circle.prev()).toBe(rect);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns undefined if there is no sibling","suites":["arrange.js","Dom","prev()"],"line":46,"updatePoint":{"line":46,"column":50,"index":1557},"code":"      it('returns undefined if there is no sibling', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        expect(rect.prev()).toBe(undefined);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["arrange.js","Dom","forward()"],"line":53,"updatePoint":{"line":53,"column":24,"index":1755},"code":"      it('returns itself', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        expect(rect.forward()).toBe(rect);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"moves an element one step forward","suites":["arrange.js","Dom","forward()"],"line":58,"updatePoint":{"line":58,"column":43,"index":1928},"code":"      it('moves an element one step forward', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        rect.forward();\n        expect(g.children()).toEqual([circle, rect, line]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"does nothing when the element is already the last one","suites":["arrange.js","Dom","forward()"],"line":66,"updatePoint":{"line":66,"column":63,"index":2241},"code":"      it('does nothing when the element is already the last one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        line.forward();\n        expect(g.children()).toEqual([rect, circle, line]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["arrange.js","Dom","backward()"],"line":76,"updatePoint":{"line":76,"column":24,"index":2558},"code":"      it('returns itself', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        expect(rect.backward()).toBe(rect);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"moves an element one step backward","suites":["arrange.js","Dom","backward()"],"line":81,"updatePoint":{"line":81,"column":44,"index":2733},"code":"      it('moves an element one step backward', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        line.backward();\n        expect(g.children()).toEqual([rect, line, circle]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"does nothing when the element is already the first one","suites":["arrange.js","Dom","backward()"],"line":89,"updatePoint":{"line":89,"column":64,"index":3048},"code":"      it('does nothing when the element is already the first one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        rect.backward();\n        expect(g.children()).toEqual([rect, circle, line]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["arrange.js","Dom","front()"],"line":99,"updatePoint":{"line":99,"column":24,"index":3363},"code":"      it('returns itself', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        expect(rect.front()).toBe(rect);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"moves an element to the front","suites":["arrange.js","Dom","front()"],"line":104,"updatePoint":{"line":104,"column":39,"index":3530},"code":"      it('moves an element to the front', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        rect.front();\n        expect(g.children()).toEqual([circle, line, rect]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"does nothing when the element is already the last one","suites":["arrange.js","Dom","front()"],"line":112,"updatePoint":{"line":112,"column":63,"index":3841},"code":"      it('does nothing when the element is already the last one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        line.front();\n        expect(g.children()).toEqual([rect, circle, line]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["arrange.js","Dom","back()"],"line":122,"updatePoint":{"line":122,"column":24,"index":4152},"code":"      it('returns itself', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        expect(rect.back()).toBe(rect);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"moves an element to the back","suites":["arrange.js","Dom","back()"],"line":127,"updatePoint":{"line":127,"column":38,"index":4317},"code":"      it('moves an element to the back', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        line.back();\n        expect(g.children()).toEqual([line, rect, circle]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"does nothing when the element is already the first one","suites":["arrange.js","Dom","back()"],"line":135,"updatePoint":{"line":135,"column":64,"index":4628},"code":"      it('does nothing when the element is already the first one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = g.line(1, 2, 3, 4);\n        rect.back();\n        expect(g.children()).toEqual([rect, circle, line]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"inserts an element before this one","suites":["arrange.js","Dom","before()"],"line":145,"updatePoint":{"line":145,"column":44,"index":4960},"code":"      it('inserts an element before this one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = new Line();\n        circle.before(line);\n        expect(g.children()).toEqual([rect, line, circle]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"inserts an element after this one","suites":["arrange.js","Dom","after()"],"line":155,"updatePoint":{"line":155,"column":43,"index":5290},"code":"      it('inserts an element after this one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = new Line();\n        rect.after(line);\n        expect(g.children()).toEqual([rect, line, circle]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"inserts the current element before another one","suites":["arrange.js","Dom","insertBefore()"],"line":165,"updatePoint":{"line":165,"column":56,"index":5637},"code":"      it('inserts the current element before another one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = new Line().insertBefore(circle);\n        expect(g.children()).toEqual([rect, line, circle]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"inserts the current element after another one","suites":["arrange.js","Dom","insertAfter()"],"line":174,"updatePoint":{"line":174,"column":55,"index":5977},"code":"      it('inserts the current element after another one', () => {\n        const g = new G();\n        const rect = g.rect(100, 100);\n        const circle = g.circle(100);\n        const line = new Line().insertAfter(rect);\n        expect(g.children()).toEqual([rect, line, circle]);\n      });","file":"spec/modules/optional/arrange.js","skipped":false,"dir":"spec"},{"name":"returns all classes on an element","suites":["class.js","Dom","classes()"],"line":7,"updatePoint":{"line":7,"column":43,"index":217},"code":"      it('returns all classes on an element', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        });\n        expect(rect.classes()).toEqual(['myClass', 'myClass2']);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"returns an empty array if no class on the element","suites":["class.js","Dom","classes()"],"line":13,"updatePoint":{"line":13,"column":59,"index":442},"code":"      it('returns an empty array if no class on the element', () => {\n        const rect = new Rect();\n        expect(rect.classes()).toEqual([]);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"returns true if a class is present on the element","suites":["class.js","Dom","hasClass()"],"line":19,"updatePoint":{"line":19,"column":59,"index":642},"code":"      it('returns true if a class is present on the element', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        });\n        expect(rect.hasClass('myClass')).toBe(true);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"returns false if a class is not present on the element","suites":["class.js","Dom","hasClass()"],"line":25,"updatePoint":{"line":25,"column":64,"index":860},"code":"      it('returns false if a class is not present on the element', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        });\n        expect(rect.hasClass('myClass3')).toBe(false);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["class.js","Dom","addClass()"],"line":33,"updatePoint":{"line":33,"column":24,"index":1083},"code":"      it('returns itself', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        });\n        expect(rect.addClass('myClass3')).toBe(rect);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"adds a class to the element","suites":["class.js","Dom","addClass()"],"line":39,"updatePoint":{"line":39,"column":37,"index":1275},"code":"      it('adds a class to the element', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        }).addClass('myClass3');\n        expect(rect.classes()).toEqual(['myClass', 'myClass2', 'myClass3']);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"does nothing if class already present on the element","suites":["class.js","Dom","addClass()"],"line":45,"updatePoint":{"line":45,"column":62,"index":1536},"code":"      it('does nothing if class already present on the element', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        }).addClass('myClass');\n        expect(rect.classes()).toEqual(['myClass', 'myClass2']);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["class.js","Dom","removeClass()"],"line":53,"updatePoint":{"line":53,"column":24,"index":1792},"code":"      it('returns itself', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        });\n        expect(rect.removeClass('myClass3')).toBe(rect);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"removes a class from the element","suites":["class.js","Dom","removeClass()"],"line":59,"updatePoint":{"line":59,"column":42,"index":1992},"code":"      it('removes a class from the element', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        }).removeClass('myClass2');\n        expect(rect.classes()).toEqual(['myClass']);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"does nothing if class is not present on the element","suites":["class.js","Dom","removeClass()"],"line":65,"updatePoint":{"line":65,"column":61,"index":2231},"code":"      it('does nothing if class is not present on the element', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        }).removeClass('myClass3');\n        expect(rect.classes()).toEqual(['myClass', 'myClass2']);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["class.js","Dom","toggleClass()"],"line":73,"updatePoint":{"line":73,"column":24,"index":2491},"code":"      it('returns itself', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        });\n        expect(rect.toggleClass('myClass3')).toBe(rect);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"removes a class from the element when its present","suites":["class.js","Dom","toggleClass()"],"line":79,"updatePoint":{"line":79,"column":59,"index":2708},"code":"      it('removes a class from the element when its present', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        }).toggleClass('myClass2');\n        expect(rect.classes()).toEqual(['myClass']);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"adds a class to the element if its not present","suites":["class.js","Dom","toggleClass()"],"line":85,"updatePoint":{"line":85,"column":56,"index":2942},"code":"      it('adds a class to the element if its not present', () => {\n        const rect = new Rect({\n          class: 'myClass myClass2'\n        }).toggleClass('myClass3');\n        expect(rect.classes()).toEqual(['myClass', 'myClass2', 'myClass3']);\n      });","file":"spec/modules/optional/class.js","skipped":false,"dir":"spec"},{"name":"returns all css as object","suites":["css.js","Dom","css()","as getter"],"line":8,"updatePoint":{"line":8,"column":37,"index":241},"code":"        it('returns all css as object', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css()).toEqual({\n            fill: 'none',\n            'outline-width': '1px',\n            stroke: 'none'\n          });\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns an object with selected css properties","suites":["css.js","Dom","css()","as getter"],"line":18,"updatePoint":{"line":18,"column":58,"index":578},"code":"        it('returns an object with selected css properties', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css(['fill', 'stroke'])).toEqual({\n            fill: 'none',\n            stroke: 'none'\n          });\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns a single property with property name given","suites":["css.js","Dom","css()","as getter"],"line":27,"updatePoint":{"line":27,"column":62,"index":901},"code":"        it('returns a single property with property name given', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css('fill')).toBe('none');\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns undefined if css property is not set","suites":["css.js","Dom","css()","as getter"],"line":33,"updatePoint":{"line":33,"column":56,"index":1143},"code":"        it('returns undefined if css property is not set', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css('outline-color')).toBe('');\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["css.js","Dom","css()","as setter"],"line":41,"updatePoint":{"line":41,"column":26,"index":1406},"code":"        it('returns itself', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css('fill', 'black')).toBe(rect);\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"adds a css property","suites":["css.js","Dom","css()","as setter"],"line":47,"updatePoint":{"line":47,"column":31,"index":1630},"code":"        it('adds a css property', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css('stroke-width', '2px').css('stroke-width')).toBe('2px');\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"changes a css property","suites":["css.js","Dom","css()","as setter"],"line":53,"updatePoint":{"line":53,"column":34,"index":1884},"code":"        it('changes a css property', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css('fill', 'black').css('fill')).toBe('black');\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"sets an object of properties","suites":["css.js","Dom","css()","as setter"],"line":59,"updatePoint":{"line":59,"column":40,"index":2132},"code":"        it('sets an object of properties', () => {\n          const rect = new Rect();\n          expect(rect.css({\n            fill: 'none',\n            stroke: 'none'\n          }).css()).toEqual({\n            fill: 'none',\n            stroke: 'none'\n          });\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"removes property if empty string is passed as value","suites":["css.js","Dom","css()","as setter"],"line":69,"updatePoint":{"line":69,"column":63,"index":2431},"code":"        it('removes property if empty string is passed as value', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css('fill', '').css('fill')).toBe('');\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"removes property if null is passed as value","suites":["css.js","Dom","css()","as setter"],"line":75,"updatePoint":{"line":75,"column":55,"index":2684},"code":"        it('removes property if null is passed as value', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css('fill', null).css('fill')).toBe('');\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"removes property if null is passed as part of object","suites":["css.js","Dom","css()","as setter"],"line":81,"updatePoint":{"line":81,"column":64,"index":2948},"code":"        it('removes property if null is passed as part of object', () => {\n          const rect = new Rect({\n            style: 'fill: none; outline-width: 1px; stroke: none'\n          });\n          expect(rect.css({\n            fill: null,\n            stroke: 'black'\n          }).css('fill')).toBe('');\n        });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["css.js","Dom","show()"],"line":93,"updatePoint":{"line":93,"column":24,"index":3274},"code":"      it('returns itself', () => {\n        const rect = new Rect();\n        expect(rect.show()).toBe(rect);\n      });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"removes the display property","suites":["css.js","Dom","show()"],"line":97,"updatePoint":{"line":97,"column":38,"index":3406},"code":"      it('removes the display property', () => {\n        const rect = new Rect().hide();\n        expect(rect.show().css('display')).toBe('');\n      });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["css.js","Dom","hide()"],"line":103,"updatePoint":{"line":103,"column":24,"index":3583},"code":"      it('returns itself', () => {\n        const rect = new Rect();\n        expect(rect.hide()).toBe(rect);\n      });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"sets the css display property to none","suites":["css.js","Dom","hide()"],"line":107,"updatePoint":{"line":107,"column":47,"index":3724},"code":"      it('sets the css display property to none', () => {\n        const rect = new Rect();\n        expect(rect.hide().css('display')).toBe('none');\n      });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns true if display is not none","suites":["css.js","Dom","visible()"],"line":113,"updatePoint":{"line":113,"column":45,"index":3922},"code":"      it('returns true if display is not none', () => {\n        const rect = new Rect();\n        expect(rect.show().visible()).toBe(true);\n        expect(rect.css('display', 'block').visible()).toBe(true);\n      });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns false if display is none","suites":["css.js","Dom","visible()"],"line":118,"updatePoint":{"line":118,"column":42,"index":4135},"code":"      it('returns false if display is none', () => {\n        const rect = new Rect();\n        expect(rect.hide().visible()).toBe(false);\n      });","file":"spec/modules/optional/css.js","skipped":false,"dir":"spec"},{"name":"returns all data as object","suites":["data.js","Dom","data()","as getter"],"line":8,"updatePoint":{"line":8,"column":38,"index":244},"code":"        it('returns all data as object', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data()).toEqual({\n            fill: 'none',\n            'outline-width': '1px',\n            stroke: 'none'\n          });\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"returns an object with selected data properties","suites":["data.js","Dom","data()","as getter"],"line":20,"updatePoint":{"line":20,"column":59,"index":625},"code":"        it('returns an object with selected data properties', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data(['fill', 'stroke'])).toEqual({\n            fill: 'none',\n            stroke: 'none'\n          });\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"returns a single property with property name given","suites":["data.js","Dom","data()","as getter"],"line":31,"updatePoint":{"line":31,"column":62,"index":991},"code":"        it('returns a single property with property name given', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data('fill')).toBe('none');\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"returns undefined if data property is not set","suites":["data.js","Dom","data()","as getter"],"line":39,"updatePoint":{"line":39,"column":57,"index":1277},"code":"        it('returns undefined if data property is not set', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data('outline-color')).toBe(undefined);\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["data.js","Dom","data()","as setter"],"line":49,"updatePoint":{"line":49,"column":26,"index":1590},"code":"        it('returns itself', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data('fill', 'black')).toBe(rect);\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"adds a data property","suites":["data.js","Dom","data()","as setter"],"line":57,"updatePoint":{"line":57,"column":32,"index":1858},"code":"        it('adds a data property', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data('stroke-width', '2px').data('stroke-width')).toBe('2px');\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"changes a data property","suites":["data.js","Dom","data()","as setter"],"line":65,"updatePoint":{"line":65,"column":35,"index":2157},"code":"        it('changes a data property', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data('fill', 'black').data('fill')).toBe('black');\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"sets an object of properties","suites":["data.js","Dom","data()","as setter"],"line":73,"updatePoint":{"line":73,"column":40,"index":2449},"code":"        it('sets an object of properties', () => {\n          const rect = new Rect();\n          expect(rect.data({\n            fill: 'none',\n            stroke: 'none'\n          }).data()).toEqual({\n            fill: 'none',\n            stroke: 'none'\n          });\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"removes property if null is passed as value","suites":["data.js","Dom","data()","as setter"],"line":83,"updatePoint":{"line":83,"column":55,"index":2742},"code":"        it('removes property if null is passed as value', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data('fill', null).data('fill')).toBe(undefined);\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"removes property if null is passed as part of object","suites":["data.js","Dom","data()","as setter"],"line":91,"updatePoint":{"line":91,"column":64,"index":3057},"code":"        it('removes property if null is passed as part of object', () => {\n          const rect = new Rect({\n            'data-fill': 'none',\n            'data-outline-width': '1px',\n            'data-stroke': 'none'\n          });\n          expect(rect.data({\n            fill: null,\n            stroke: 'black'\n          }).data('fill')).toBe(undefined);\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"converts everything except number and strings to JSON","suites":["data.js","Dom","data()","as setter"],"line":102,"updatePoint":{"line":102,"column":65,"index":3426},"code":"        it('converts everything except number and strings to JSON', () => {\n          const rect = new Rect();\n          expect(rect.data('fill', {\n            some: 'object'\n          }).attr('data-fill')).toBe(JSON.stringify({\n            some: 'object'\n          }));\n          expect(rect.data('fill', 5).attr('data-fill')).toBe(5);\n          expect(rect.data('fill', 'string').attr('data-fill')).toBe('string');\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"doesnt convert to json with third parameter true","suites":["data.js","Dom","data()","as setter"],"line":112,"updatePoint":{"line":112,"column":60,"index":3850},"code":"        it('doesnt convert to json with third parameter true', () => {\n          const rect = new Rect();\n          expect(rect.data('fill', {\n            some: 'object'\n          }, true).attr('data-fill')).toBe({}.toString());\n        });","file":"spec/modules/optional/data.js","skipped":false,"dir":"spec"},{"name":"returns all memory as object","suites":["memory.js","Dom","memory()"],"line":7,"updatePoint":{"line":7,"column":38,"index":212},"code":"      it('returns all memory as object', () => {\n        const rect = new Rect().remember({\n          fill: 'none',\n          'outline-width': '1px',\n          stroke: 'none'\n        });\n        expect(rect.memory()).toEqual({\n          fill: 'none',\n          'outline-width': '1px',\n          stroke: 'none'\n        });\n      });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"returns a single property with property name given","suites":["memory.js","Dom","remember()","as getter"],"line":22,"updatePoint":{"line":22,"column":62,"index":647},"code":"        it('returns a single property with property name given', () => {\n          const rect = new Rect().remember({\n            fill: 'none',\n            'outline-width': '1px',\n            stroke: 'none'\n          });\n          expect(rect.remember('fill')).toBe('none');\n        });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"returns undefined if memory property is not set","suites":["memory.js","Dom","remember()","as getter"],"line":30,"updatePoint":{"line":30,"column":59,"index":931},"code":"        it('returns undefined if memory property is not set', () => {\n          const rect = new Rect().remember({\n            fill: 'none',\n            'outline-width': '1px',\n            stroke: 'none'\n          });\n          expect(rect.remember('outline-color')).toBe(undefined);\n        });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["memory.js","Dom","remember()","as setter"],"line":40,"updatePoint":{"line":40,"column":26,"index":1240},"code":"        it('returns itself', () => {\n          const rect = new Rect().remember({\n            fill: 'none',\n            'outline-width': '1px',\n            stroke: 'none'\n          });\n          expect(rect.remember('fill', 'black')).toBe(rect);\n        });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"adds a memory property","suites":["memory.js","Dom","remember()","as setter"],"line":48,"updatePoint":{"line":48,"column":34,"index":1506},"code":"        it('adds a memory property', () => {\n          const rect = new Rect().remember({\n            fill: 'none',\n            'outline-width': '1px',\n            stroke: 'none'\n          });\n          expect(rect.remember('stroke-width', '2px').remember('stroke-width')).toBe('2px');\n        });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"changes a memory property","suites":["memory.js","Dom","remember()","as setter"],"line":56,"updatePoint":{"line":56,"column":37,"index":1807},"code":"        it('changes a memory property', () => {\n          const rect = new Rect().remember({\n            fill: 'none',\n            'outline-width': '1px',\n            stroke: 'none'\n          });\n          expect(rect.remember('fill', 'black').remember('fill')).toBe('black');\n        });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"sets an object of properties","suites":["memory.js","Dom","remember()","as setter"],"line":64,"updatePoint":{"line":64,"column":40,"index":2099},"code":"        it('sets an object of properties', () => {\n          const rect = new Rect();\n          expect(rect.remember({\n            fill: 'none',\n            stroke: 'none'\n          }).memory()).toEqual({\n            fill: 'none',\n            stroke: 'none'\n          });\n        });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"removes property","suites":["memory.js","Dom","forget()"],"line":77,"updatePoint":{"line":77,"column":26,"index":2420},"code":"      it('removes property', () => {\n        const rect = new Rect().remember({\n          fill: 'none',\n          'outline-width': '1px',\n          stroke: 'none'\n        });\n        expect(rect.forget('fill').remember('fill')).toBe(undefined);\n      });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"removes multiple properties","suites":["memory.js","Dom","forget()"],"line":85,"updatePoint":{"line":85,"column":37,"index":2686},"code":"      it('removes multiple properties', () => {\n        const rect = new Rect().remember({\n          fill: 'none',\n          'outline-width': '1px',\n          stroke: 'none'\n        });\n        expect(rect.forget('fill', 'stroke').memory()).toEqual({\n          'outline-width': '1px'\n        });\n      });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"erases the whole object with nothing passed","suites":["memory.js","Dom","forget()"],"line":95,"updatePoint":{"line":95,"column":53,"index":3008},"code":"      it('erases the whole object with nothing passed', () => {\n        const rect = new Rect().remember({\n          fill: 'none',\n          'outline-width': '1px',\n          stroke: 'none'\n        });\n        expect(rect.forget().memory()).toEqual({});\n      });","file":"spec/modules/optional/memory.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["sugar.js","Element/Runner","fill()","as setter"],"line":8,"updatePoint":{"line":8,"column":26,"index":306},"code":"        it('returns itself', () => {\n          const rect = new Rect();\n          expect(rect.fill('black')).toBe(rect);\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets a fill color","suites":["sugar.js","Element/Runner","fill()","as setter"],"line":12,"updatePoint":{"line":12,"column":29,"index":442},"code":"        it('sets a fill color', () => {\n          const rect = new Rect();\n          expect(rect.fill('black').attr('fill')).toBe('black');\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets a fill pattern when pattern given","suites":["sugar.js","Element/Runner","fill()","as setter"],"line":16,"updatePoint":{"line":16,"column":50,"index":615},"code":"        it('sets a fill pattern when pattern given', () => {\n          const canvas = SVG().addTo(container);\n          const pattern = canvas.pattern();\n          const rect = canvas.rect(100, 100);\n          expect(rect.fill(pattern).attr('fill')).toBe(pattern.url());\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets a fill pattern when image given","suites":["sugar.js","Element/Runner","fill()","as setter"],"line":22,"updatePoint":{"line":22,"column":48,"index":896},"code":"        it('sets a fill pattern when image given', () => {\n          const canvas = SVG().addTo(container);\n          const image = canvas.image('spec/fictures/pixel.png');\n          const rect = canvas.rect(100, 100);\n          expect(rect.fill(image).attr('fill')).toBe(image.parent().url());\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets an object of fill properties","suites":["sugar.js","Element/Runner","fill()","as setter"],"line":28,"updatePoint":{"line":28,"column":45,"index":1200},"code":"        it('sets an object of fill properties', () => {\n          const rect = new Rect();\n          expect(rect.fill({\n            color: 'black',\n            opacity: 0.5,\n            rule: 'even-odd'\n          }).attr()).toEqual({\n            fill: 'black',\n            'fill-opacity': 0.5,\n            'fill-rule': 'even-odd'\n          });\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns fill color","suites":["sugar.js","Element/Runner","fill()","as getter"],"line":42,"updatePoint":{"line":42,"column":30,"index":1587},"code":"        it('returns fill color', () => {\n          const rect = new Rect().fill('black');\n          expect(rect.fill()).toBe('black');\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns default fill color if nothing is set","suites":["sugar.js","Element/Runner","fill()","as getter"],"line":46,"updatePoint":{"line":46,"column":56,"index":1760},"code":"        it('returns default fill color if nothing is set', () => {\n          const rect = new Rect();\n          expect(rect.fill()).toBe('#000000');\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["sugar.js","Element/Runner","stroke()","as setter"],"line":54,"updatePoint":{"line":54,"column":26,"index":1978},"code":"        it('returns itself', () => {\n          const rect = new Rect();\n          expect(rect.stroke('black')).toBe(rect);\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets a stroke color","suites":["sugar.js","Element/Runner","stroke()","as setter"],"line":58,"updatePoint":{"line":58,"column":31,"index":2118},"code":"        it('sets a stroke color', () => {\n          const rect = new Rect();\n          expect(rect.stroke('black').attr('stroke')).toBe('black');\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets a stroke pattern when pattern given","suites":["sugar.js","Element/Runner","stroke()","as setter"],"line":62,"updatePoint":{"line":62,"column":52,"index":2297},"code":"        it('sets a stroke pattern when pattern given', () => {\n          const canvas = SVG().addTo(container);\n          const pattern = canvas.pattern();\n          const rect = canvas.rect(100, 100);\n          expect(rect.stroke(pattern).attr('stroke')).toBe(pattern.url());\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets a stroke pattern when image given","suites":["sugar.js","Element/Runner","stroke()","as setter"],"line":68,"updatePoint":{"line":68,"column":50,"index":2584},"code":"        it('sets a stroke pattern when image given', () => {\n          const canvas = SVG().addTo(container);\n          const image = canvas.image('spec/fictures/pixel.png');\n          const rect = canvas.rect(100, 100);\n          expect(rect.stroke(image).attr('stroke')).toBe(image.parent().url());\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets an object of stroke properties","suites":["sugar.js","Element/Runner","stroke()","as setter"],"line":74,"updatePoint":{"line":74,"column":47,"index":2894},"code":"        it('sets an object of stroke properties', () => {\n          const rect = new Rect();\n          expect(rect.stroke({\n            color: 'black',\n            width: 2,\n            opacity: 0.5,\n            linecap: 'butt',\n            linejoin: 'miter',\n            miterlimit: 10,\n            dasharray: '2 2',\n            dashoffset: 15\n          }).attr()).toEqual({\n            stroke: 'black',\n            'stroke-width': 2,\n            'stroke-opacity': 0.5,\n            'stroke-linecap': 'butt',\n            'stroke-linejoin': 'miter',\n            'stroke-miterlimit': 10,\n            'stroke-dasharray': '2 2',\n            'stroke-dashoffset': 15\n          });\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets stroke dasharray with array passed","suites":["sugar.js","Element/Runner","stroke()","as setter"],"line":96,"updatePoint":{"line":96,"column":51,"index":3585},"code":"        it('sets stroke dasharray with array passed', () => {\n          const rect = new Rect().stroke({\n            dasharray: [2, 2]\n          });\n          expect(rect.attr()).toEqual({\n            'stroke-dasharray': '2 2'\n          });\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns stroke color","suites":["sugar.js","Element/Runner","stroke()","as getter"],"line":106,"updatePoint":{"line":106,"column":32,"index":3865},"code":"        it('returns stroke color', () => {\n          const rect = new Rect().stroke('black');\n          expect(rect.stroke()).toBe('black');\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns default stroke color if nothing is set","suites":["sugar.js","Element/Runner","stroke()","as getter"],"line":110,"updatePoint":{"line":110,"column":58,"index":4044},"code":"        it('returns default stroke color if nothing is set', () => {\n          const rect = new Rect();\n          expect(rect.stroke()).toBe('#000000');\n        });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"gets the matrix with no argument passed","suites":["sugar.js","Element/Runner","matrix()"],"line":117,"updatePoint":{"line":117,"column":49,"index":4251},"code":"      it('gets the matrix with no argument passed', () => {\n        const rect = new Rect().transform(new Matrix(1, 0, 1, 1, 1, 0));\n        expect(rect.matrix()).toEqual(new Matrix(1, 0, 1, 1, 1, 0));\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets the matrix if matrix given","suites":["sugar.js","Element/Runner","matrix()"],"line":121,"updatePoint":{"line":121,"column":41,"index":4455},"code":"      it('sets the matrix if matrix given', () => {\n        const rect = new Rect().matrix(new Matrix(1, 0, 1, 1, 1, 0));\n        expect(rect.matrix()).toEqual(new Matrix(1, 0, 1, 1, 1, 0));\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets the matrix with 6 arguments given","suites":["sugar.js","Element/Runner","matrix()"],"line":125,"updatePoint":{"line":125,"column":48,"index":4663},"code":"      it('sets the matrix with 6 arguments given', () => {\n        const rect = new Rect().matrix(1, 0, 1, 1, 1, 0);\n        expect(rect.matrix()).toEqual(new Matrix(1, 0, 1, 1, 1, 0));\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform()","suites":["sugar.js","Element/Runner","rotate()"],"line":131,"updatePoint":{"line":131,"column":34,"index":4892},"code":"      it('redirects to transform()', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.rotate(1, 2, 3);\n        expect(spy).toHaveBeenCalledWith({\n          rotate: 1,\n          ox: 2,\n          oy: 3\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with no argument","suites":["sugar.js","Element/Runner","skew()"],"line":143,"updatePoint":{"line":143,"column":51,"index":5239},"code":"      it('redirects to transform() with no argument', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.skew();\n        expect(spy).toHaveBeenCalledWith({\n          skew: [undefined, undefined],\n          ox: undefined,\n          oy: undefined\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with one argument","suites":["sugar.js","Element/Runner","skew()"],"line":153,"updatePoint":{"line":153,"column":52,"index":5568},"code":"      it('redirects to transform() with one argument', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.skew(5);\n        expect(spy).toHaveBeenCalledWith({\n          skew: 5,\n          ox: undefined,\n          oy: undefined\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with two argument","suites":["sugar.js","Element/Runner","skew()"],"line":163,"updatePoint":{"line":163,"column":52,"index":5877},"code":"      it('redirects to transform() with two argument', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.skew(5, 6);\n        expect(spy).toHaveBeenCalledWith({\n          skew: [5, 6],\n          ox: undefined,\n          oy: undefined\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with three arguments","suites":["sugar.js","Element/Runner","skew()"],"line":173,"updatePoint":{"line":173,"column":55,"index":6197},"code":"      it('redirects to transform() with three arguments', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.skew(5, 6, 7);\n        expect(spy).toHaveBeenCalledWith({\n          skew: 5,\n          ox: 6,\n          oy: 7\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with four arguments","suites":["sugar.js","Element/Runner","skew()"],"line":183,"updatePoint":{"line":183,"column":54,"index":6498},"code":"      it('redirects to transform() with four arguments', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.skew(5, 6, 7, 8);\n        expect(spy).toHaveBeenCalledWith({\n          skew: [5, 6],\n          ox: 7,\n          oy: 8\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform()","suites":["sugar.js","Element/Runner","shear"],"line":195,"updatePoint":{"line":195,"column":34,"index":6825},"code":"      it('redirects to transform()', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.shear(1, 2, 3);\n        expect(spy).toHaveBeenCalledWith({\n          shear: 1,\n          ox: 2,\n          oy: 3\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with no argument","suites":["sugar.js","Element/Runner","scale()"],"line":207,"updatePoint":{"line":207,"column":51,"index":7171},"code":"      it('redirects to transform() with no argument', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.scale();\n        expect(spy).toHaveBeenCalledWith({\n          scale: [undefined, undefined],\n          ox: undefined,\n          oy: undefined\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with one argument","suites":["sugar.js","Element/Runner","scale()"],"line":217,"updatePoint":{"line":217,"column":52,"index":7502},"code":"      it('redirects to transform() with one argument', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.scale(5);\n        expect(spy).toHaveBeenCalledWith({\n          scale: 5,\n          ox: undefined,\n          oy: undefined\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with two argument","suites":["sugar.js","Element/Runner","scale()"],"line":227,"updatePoint":{"line":227,"column":52,"index":7813},"code":"      it('redirects to transform() with two argument', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.scale(5, 6);\n        expect(spy).toHaveBeenCalledWith({\n          scale: [5, 6],\n          ox: undefined,\n          oy: undefined\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with three arguments","suites":["sugar.js","Element/Runner","scale()"],"line":237,"updatePoint":{"line":237,"column":55,"index":8135},"code":"      it('redirects to transform() with three arguments', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.scale(5, 6, 7);\n        expect(spy).toHaveBeenCalledWith({\n          scale: 5,\n          ox: 6,\n          oy: 7\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform() with four arguments","suites":["sugar.js","Element/Runner","scale()"],"line":247,"updatePoint":{"line":247,"column":54,"index":8438},"code":"      it('redirects to transform() with four arguments', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.scale(5, 6, 7, 8);\n        expect(spy).toHaveBeenCalledWith({\n          scale: [5, 6],\n          ox: 7,\n          oy: 8\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform()","suites":["sugar.js","Element/Runner","translate()"],"line":259,"updatePoint":{"line":259,"column":34,"index":8779},"code":"      it('redirects to transform()', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.translate(1, 2);\n        expect(spy).toHaveBeenCalledWith({\n          translate: [1, 2]\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform()","suites":["sugar.js","Element/Runner","relative()"],"line":269,"updatePoint":{"line":269,"column":34,"index":9081},"code":"      it('redirects to transform()', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.relative(1, 2);\n        expect(spy).toHaveBeenCalledWith({\n          relative: [1, 2]\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to transform()","suites":["sugar.js","Element/Runner","flip()"],"line":279,"updatePoint":{"line":279,"column":34,"index":9383},"code":"      it('redirects to transform()', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.flip('x', 2);\n        expect(spy).toHaveBeenCalledWith({\n          flip: 'x',\n          origin: 2\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets flip to \"both\" when calling without anything","suites":["sugar.js","Element/Runner","flip()"],"line":288,"updatePoint":{"line":288,"column":59,"index":9677},"code":"      it('sets flip to \"both\" when calling without anything', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.flip();\n        expect(spy).toHaveBeenCalledWith({\n          flip: 'both',\n          origin: 'center'\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets flip to both and origin to number when called with origin only","suites":["sugar.js","Element/Runner","flip()"],"line":299,"updatePoint":{"line":299,"column":77,"index":10093},"code":"      it('sets flip to both and origin to number when called with origin only', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'transform');\n        rect.flip(5);\n        expect(spy).toHaveBeenCalledWith({\n          flip: 'both',\n          origin: 5\n        }, true);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects to attr() directly","suites":["sugar.js","Element/Runner","opacity()"],"line":310,"updatePoint":{"line":310,"column":38,"index":10412},"code":"      it('redirects to attr() directly', function () {\n        const rect = new Rect();\n        const spy = spyOn(rect, 'attr');\n        rect.opacity(0.5);\n        expect(spy).toHaveBeenCalledWith('opacity', 0.5);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets leading when given","suites":["sugar.js","Element/Runner","font()"],"line":324,"updatePoint":{"line":324,"column":33,"index":10840},"code":"      it('sets leading when given', function () {\n        const spy = spyOn(text, 'leading');\n        text.font({\n          leading: 3\n        });\n        expect(spy).toHaveBeenCalledWith(3);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets text-anchor when anchor given","suites":["sugar.js","Element/Runner","font()"],"line":331,"updatePoint":{"line":331,"column":44,"index":11053},"code":"      it('sets text-anchor when anchor given', function () {\n        const spy = spyOn(text, 'attr');\n        text.font({\n          anchor: 'start'\n        });\n        expect(spy).toHaveBeenCalledWith('text-anchor', 'start');\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets all font properties via attr()","suites":["sugar.js","Element/Runner","font()"],"line":338,"updatePoint":{"line":338,"column":45,"index":11290},"code":"      it('sets all font properties via attr()', function () {\n        const spy = spyOn(text, 'attr');\n        text.font({\n          size: 20,\n          family: 'Verdana',\n          weight: 'bold',\n          stretch: 'wider',\n          variant: 'small-caps',\n          style: 'italic'\n        });\n        expect(spy).toHaveBeenCalledWith('font-size', 20);\n        expect(spy).toHaveBeenCalledWith('font-family', 'Verdana');\n        expect(spy).toHaveBeenCalledWith('font-weight', 'bold');\n        expect(spy).toHaveBeenCalledWith('font-stretch', 'wider');\n        expect(spy).toHaveBeenCalledWith('font-variant', 'small-caps');\n        expect(spy).toHaveBeenCalledWith('font-style', 'italic');\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"redirects all other stuff directly to attr()","suites":["sugar.js","Element/Runner","font()"],"line":355,"updatePoint":{"line":355,"column":54,"index":12003},"code":"      it('redirects all other stuff directly to attr()', function () {\n        const spy = spyOn(text, 'attr');\n        text.font({\n          foo: 'bar',\n          bar: 'baz'\n        });\n        expect(spy).toHaveBeenCalledWith('foo', 'bar');\n        expect(spy).toHaveBeenCalledWith('bar', 'baz');\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets key value pair when called with 2 parameters","suites":["sugar.js","Element/Runner","font()"],"line":364,"updatePoint":{"line":364,"column":59,"index":12317},"code":"      it('sets key value pair when called with 2 parameters', function () {\n        const spy = spyOn(text, 'attr');\n        text.font('size', 20);\n        expect(spy).toHaveBeenCalledWith('font-size', 20);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"gets value if called with one parameter","suites":["sugar.js","Element/Runner","font()"],"line":369,"updatePoint":{"line":369,"column":49,"index":12524},"code":"      it('gets value if called with one parameter', function () {\n        const spy = spyOn(text, 'attr');\n        text.font('size');\n        expect(spy).toHaveBeenCalledWith('font-size', undefined);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets rx and ry on the rectangle","suites":["sugar.js","radius()","Rect"],"line":378,"updatePoint":{"line":378,"column":41,"index":12800},"code":"      it('sets rx and ry on the rectangle', () => {\n        const rect = new Rect().radius(5, 10);\n        expect(rect.attr()).toEqual({\n          rx: 5,\n          ry: 10\n        });\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets rx and ry on the rectangle","suites":["sugar.js","radius()","Ellipse"],"line":387,"updatePoint":{"line":387,"column":41,"index":13033},"code":"      it('sets rx and ry on the rectangle', () => {\n        const rect = new Ellipse().radius(5, 10);\n        expect(rect.attr()).toEqual({\n          rx: 5,\n          ry: 10\n        });\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"sets rx and ry on the rectangle","suites":["sugar.js","radius()","radialGradient"],"line":396,"updatePoint":{"line":396,"column":41,"index":13276},"code":"      it('sets rx and ry on the rectangle', () => {\n        const rect = new Gradient('radial').radius(5);\n        expect(rect.attr()).toEqual({\n          r: 5\n        });\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns the full length of the path","suites":["sugar.js","Path","length"],"line":406,"updatePoint":{"line":406,"column":45,"index":13534},"code":"      it('returns the full length of the path', () => {\n        const canvas = SVG().addTo(container);\n        const path = canvas.path('M0 0 L 0 5');\n        expect(path.length()).toBe(5);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns a point at a specific length","suites":["sugar.js","Path","pointAt"],"line":413,"updatePoint":{"line":413,"column":46,"index":13775},"code":"      it('returns a point at a specific length', () => {\n        const canvas = SVG().addTo(container);\n        const path = canvas.path('M0 0 L 0 5');\n        const point = path.pointAt(3);\n        expect(point.x).toBeCloseTo(0); // chrome has rounding issues -.-\n        expect(point.y).toBe(3);\n      });","file":"spec/modules/optional/sugar.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["transform.js","untransform()"],"line":6,"updatePoint":{"line":6,"column":22,"index":207},"code":"    it('returns itself', () => {\n      const rect = new Rect();\n      expect(rect.untransform()).toBe(rect);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"deletes the transform attribute","suites":["transform.js","untransform()"],"line":10,"updatePoint":{"line":10,"column":39,"index":341},"code":"    it('deletes the transform attribute', () => {\n      const rect = new Rect();\n      expect(rect.untransform().attr('transform')).toBe(undefined);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"reduces all transformations of the transform list into one matrix - 1","suites":["transform.js","matrixify()"],"line":16,"updatePoint":{"line":16,"column":77,"index":576},"code":"    it('reduces all transformations of the transform list into one matrix - 1', () => {\n      const rect = new Rect().attr('transform', 'matrix(1, 0, 1, 1, 0, 1)');\n      expect(rect.matrixify()).toEqual(new Matrix(1, 0, 1, 1, 0, 1));\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"reduces all transformations of the transform list into one matrix - 2","suites":["transform.js","matrixify()"],"line":20,"updatePoint":{"line":20,"column":77,"index":819},"code":"    it('reduces all transformations of the transform list into one matrix - 2', () => {\n      const rect = new Rect().attr('transform', 'translate(10, 20) rotate(45)');\n      expect(rect.matrixify()).toEqual(new Matrix().rotate(45).translate(10, 20));\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"reduces all transformations of the transform list into one matrix - 3","suites":["transform.js","matrixify()"],"line":24,"updatePoint":{"line":24,"column":77,"index":1079},"code":"    it('reduces all transformations of the transform list into one matrix - 3', () => {\n      const rect = new Rect().attr('transform', 'translate(10, 20) rotate(45) skew(1,2) skewX(10) skewY(20)');\n      expect(rect.matrixify()).toEqual(new Matrix().skewY(20).skewX(10).skew(1, 2).rotate(45).translate(10, 20));\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["transform.js","toParent()"],"line":30,"updatePoint":{"line":30,"column":22,"index":1384},"code":"    it('returns itself', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      const rect = g.rect(100, 100);\n      expect(rect.toParent(canvas)).toBe(rect);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"does nothing if the parent is the the current element","suites":["transform.js","toParent()"],"line":36,"updatePoint":{"line":36,"column":61,"index":1626},"code":"    it('does nothing if the parent is the the current element', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      const parent = g.parent();\n      const position = g.position();\n      g.toParent(g);\n      expect(g.parent()).toBe(parent);\n      expect(g.position()).toBe(position);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"moves an element to a different container without changing its visual representation - 1","suites":["transform.js","toParent()"],"line":45,"updatePoint":{"line":45,"column":96,"index":1991},"code":"    it('moves an element to a different container without changing its visual representation - 1', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group().matrix(1, 0, 1, 1, 0, 1);\n      const rect = g.rect(100, 100);\n      rect.toParent(canvas);\n      expect(rect.matrix()).toEqual(new Matrix(1, 0, 1, 1, 0, 1));\n      expect(rect.parent()).toBe(canvas);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"moves an element to a different container without changing its visual representation - 2","suites":["transform.js","toParent()"],"line":53,"updatePoint":{"line":53,"column":96,"index":2383},"code":"    it('moves an element to a different container without changing its visual representation - 2', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group().translate(10, 20);\n      const rect = g.rect(100, 100);\n      const g2 = canvas.group().rotate(10);\n      rect.toParent(g2);\n      const actual = rect.matrix();\n      const expected = new Matrix().translate(10, 20).rotate(-10)\n\n      // funny enough the dom seems to shorten the floats and precision gets lost\n      ;\n      [...'abcdef'].forEach(prop => expect(actual[prop]).toBeCloseTo(expected[prop], 5));\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"inserts the element at the specified position","suites":["transform.js","toParent()"],"line":66,"updatePoint":{"line":66,"column":53,"index":2939},"code":"    it('inserts the element at the specified position', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group();\n      const rect = g.rect(100, 100);\n      canvas.rect(100, 100);\n      canvas.rect(100, 100);\n      expect(rect.toParent(canvas, 2).position()).toBe(2);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"calls toParent() with root node","suites":["transform.js","toRoot()"],"line":76,"updatePoint":{"line":76,"column":39,"index":3265},"code":"    it('calls toParent() with root node', () => {\n      const canvas = SVG().addTo(container);\n      const g = canvas.group().matrix(1, 0, 1, 1, 0, 1);\n      const rect = g.rect(100, 100);\n      const spy = spyOn(rect, 'toParent');\n      rect.toRoot(3);\n      expect(spy).toHaveBeenCalledWith(canvas, 3);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"acts as full getter with no argument","suites":["transform.js","transform()"],"line":86,"updatePoint":{"line":86,"column":44,"index":3623},"code":"    it('acts as full getter with no argument', () => {\n      const rect = new Rect().attr('transform', 'translate(10, 20) rotate(45)');\n      const actual = rect.transform();\n      const expected = new Matrix().rotate(45).translate(10, 20).decompose();\n      expect(actual).toEqual(expected);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"returns a single transformation value when string was passed","suites":["transform.js","transform()"],"line":92,"updatePoint":{"line":92,"column":68,"index":3948},"code":"    it('returns a single transformation value when string was passed', () => {\n      const rect = new Rect().attr('transform', 'translate(10, 20) rotate(45)');\n      expect(rect.transform('rotate')).toBe(45);\n      expect(rect.transform('translateX')).toBe(10);\n      expect(rect.transform('translateY')).toBe(20);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"sets the transformation with an object","suites":["transform.js","transform()"],"line":98,"updatePoint":{"line":98,"column":46,"index":4249},"code":"    it('sets the transformation with an object', () => {\n      const rect = new Rect().transform({\n        rotate: 45,\n        translate: [10, 20]\n      });\n      expect(rect.transform('rotate')).toBe(45);\n      expect(rect.transform('translateX')).toBe(10);\n      expect(rect.transform('translateY')).toBe(20);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"performs a relative transformation with flag=true","suites":["transform.js","transform()"],"line":107,"updatePoint":{"line":107,"column":57,"index":4580},"code":"    it('performs a relative transformation with flag=true', () => {\n      const rect = new Rect().transform({\n        rotate: 45,\n        translate: [10, 20]\n      }).transform({\n        rotate: 10\n      }, true);\n      expect(rect.transform('rotate')).toBeCloseTo(55, 5); // rounding errors\n      expect(rect.transform('translateX')).toBe(10);\n      expect(rect.transform('translateY')).toBe(20);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"performs a relative transformation with flag=other matrix","suites":["transform.js","transform()"],"line":118,"updatePoint":{"line":118,"column":65,"index":4994},"code":"    it('performs a relative transformation with flag=other matrix', () => {\n      const rect = new Rect().transform({\n        rotate: 45,\n        translate: [10, 20]\n      }).transform({\n        rotate: 10\n      }, new Matrix().rotate(30));\n      expect(rect.transform('rotate')).toBeCloseTo(40, 5); // rounding errors\n      expect(rect.transform('translateX')).toBe(0);\n      expect(rect.transform('translateY')).toBe(0);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"performs a relative transformation with flag=other element","suites":["transform.js","transform()"],"line":129,"updatePoint":{"line":129,"column":66,"index":5426},"code":"    it('performs a relative transformation with flag=other element', () => {\n      const referenceElement = new Rect().transform({\n        rotate: 30\n      });\n      const rect = new Rect().transform({\n        rotate: 45,\n        translate: [10, 20]\n      }).transform({\n        rotate: 10\n      }, referenceElement);\n      expect(rect.transform('rotate')).toBeCloseTo(40, 5); // rounding errors\n      expect(rect.transform('translateX')).toBe(0);\n      expect(rect.transform('translateY')).toBe(0);\n    });","file":"spec/modules/optional/transform.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type Base","suites":["Base.js"],"line":8,"updatePoint":{"line":8,"column":39,"index":187},"code":"  it('creates a new object of type Base', () => {\n    expect(new Base()).toEqual(any(Base));\n  });","file":"spec/types/Base.js","skipped":false,"dir":"spec"},{"name":"returns true if x, y, with and height is 0","suites":["Box.js","isNulledBox"],"line":18,"updatePoint":{"line":18,"column":50,"index":592},"code":"    it('returns true if x, y, with and height is 0', () => {\n      expect(isNulledBox({\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      })).toBe(true);\n    });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns false if one or more of x, y, with and height is not 0","suites":["Box.js","isNulledBox"],"line":26,"updatePoint":{"line":26,"column":70,"index":794},"code":"    it('returns false if one or more of x, y, with and height is not 0', () => {\n      expect(isNulledBox({\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 1\n      })).toBe(false);\n      expect(isNulledBox({\n        x: 0,\n        y: 1,\n        width: 0,\n        height: 1\n      })).toBe(false);\n    });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns true if node is in the dom","suites":["Box.js","domContains()","with native function"],"line":43,"updatePoint":{"line":43,"column":44,"index":1172},"code":"      it('returns true if node is in the dom', () => {\n        expect(domContains(container)).toBe(true);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns false if node is not in the dom","suites":["Box.js","domContains()","with native function"],"line":46,"updatePoint":{"line":46,"column":49,"index":1293},"code":"      it('returns false if node is not in the dom', () => {\n        const g = new G();\n        const rect = new Rect().addTo(g);\n        expect(domContains(rect.node)).toBe(false);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns true if node is in the dom","suites":["Box.js","domContains()","with polyfill"],"line":61,"updatePoint":{"line":61,"column":44,"index":1826},"code":"      it('returns true if node is in the dom', () => {\n        expect(domContains(container)).toBe(true);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns false if node is not in the dom","suites":["Box.js","domContains()","with polyfill"],"line":64,"updatePoint":{"line":64,"column":49,"index":1947},"code":"      it('returns false if node is not in the dom', () => {\n        const g = new G();\n        const rect = new Rect().addTo(g);\n        expect(domContains(rect.node)).toBe(false);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"creates a new Box with default attributes","suites":["Box.js","Box","()"],"line":73,"updatePoint":{"line":73,"column":51,"index":2207},"code":"      it('creates a new Box with default attributes', () => {\n        const box = new Box();\n        expect(box).toEqual(any(Box));\n        expect(box).toEqual(objectContaining({\n          width: 0,\n          height: 0,\n          x: 0,\n          y: 0,\n          w: 0,\n          h: 0,\n          cx: 0,\n          cy: 0,\n          x2: 0,\n          y2: 0\n        }));\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"inits or reinits the box according to input","suites":["Box.js","Box","init()"],"line":91,"updatePoint":{"line":91,"column":53,"index":2622},"code":"      it('inits or reinits the box according to input', () => {\n        expect(new Box().init(1, 2, 3, 4).toArray()).toEqual([1, 2, 3, 4]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"works with array input","suites":["Box.js","Box","init()"],"line":94,"updatePoint":{"line":94,"column":32,"index":2751},"code":"      it('works with array input', () => {\n        expect(new Box().init([1, 2, 3, 4]).toArray()).toEqual([1, 2, 3, 4]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"works with 3 arguments as input","suites":["Box.js","Box","init()"],"line":97,"updatePoint":{"line":97,"column":41,"index":2891},"code":"      it('works with 3 arguments as input', () => {\n        expect(new Box().init(1, 2, 3, 4).toArray()).toEqual([1, 2, 3, 4]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"works with string input","suites":["Box.js","Box","init()"],"line":100,"updatePoint":{"line":100,"column":33,"index":3021},"code":"      it('works with string input', () => {\n        expect(new Box().init('1,2,3,4').toArray()).toEqual([1, 2, 3, 4]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"creates a new box from parsed string with exponential values","suites":["Box.js","Box","init()"],"line":103,"updatePoint":{"line":103,"column":70,"index":3187},"code":"      it('creates a new box from parsed string with exponential values', function () {\n        expect(new Box().init('-1.12e1 1e-2 +2e2 +.3e+4').toArray()).toEqual([-11.2, 0.01, 200, 3000]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"works with object input","suites":["Box.js","Box","init()"],"line":106,"updatePoint":{"line":106,"column":33,"index":3351},"code":"      it('works with object input', () => {\n        expect(new Box().init({\n          x: 1,\n          y: 2,\n          width: 3,\n          height: 4\n        }).toArray()).toEqual([1, 2, 3, 4]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"calculates all derived values correctly","suites":["Box.js","Box","init()"],"line":114,"updatePoint":{"line":114,"column":49,"index":3570},"code":"      it('calculates all derived values correctly', () => {\n        expect(new Box().init(2, 4, 6, 8)).toEqual(objectContaining({\n          cx: 5,\n          cy: 8,\n          x2: 8,\n          y2: 12,\n          w: 6,\n          h: 8\n        }));\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"can handle input with left instead of x and top instead of y","suites":["Box.js","Box","init()"],"line":124,"updatePoint":{"line":124,"column":70,"index":3844},"code":"      it('can handle input with left instead of x and top instead of y', () => {\n        expect(new Box().init({\n          left: 1,\n          top: 2,\n          width: 3,\n          height: 4\n        }).toArray()).toEqual([1, 2, 3, 4]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"merges various bounding boxes","suites":["Box.js","Box","merge()"],"line":134,"updatePoint":{"line":134,"column":39,"index":4098},"code":"      it('merges various bounding boxes', () => {\n        var box1 = new Box(50, 50, 100, 100);\n        var box2 = new Box(300, 400, 100, 100);\n        var box3 = new Box(500, 100, 100, 100);\n        var merged = box1.merge(box2).merge(box3);\n        expect(merged.toArray()).toEqual([50, 50, 550, 450]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns a new instance","suites":["Box.js","Box","merge()"],"line":141,"updatePoint":{"line":141,"column":32,"index":4406},"code":"      it('returns a new instance', () => {\n        var box1 = new Box(50, 50, 100, 100);\n        var box2 = new Box(300, 400, 100, 100);\n        var merged = box1.merge(box2);\n        expect(merged).toEqual(any(Box));\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"transforms the box with given matrix","suites":["Box.js","Box","transform()"],"line":149,"updatePoint":{"line":149,"column":46,"index":4692},"code":"      it('transforms the box with given matrix', () => {\n        var box1 = new Box(50, 50, 100, 100).transform(new Matrix(1, 0, 0, 1, 20, 20));\n        var box2 = new Box(50, 50, 100, 100).transform(new Matrix(2, 0, 0, 2, 0, 0));\n        var box3 = new Box(-200, -200, 100, 100).transform(new Matrix(1, 0, 0, 1, -20, -20));\n        expect(box1.toArray()).toEqual([70, 70, 100, 100]);\n        expect(box2.toArray()).toEqual([100, 100, 200, 200]);\n        expect(box3.toArray()).toEqual([-220, -220, 100, 100]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"also works with matrix like input","suites":["Box.js","Box","transform()"],"line":157,"updatePoint":{"line":157,"column":43,"index":5210},"code":"      it('also works with matrix like input', () => {\n        var box1 = new Box(50, 50, 100, 100).transform(new Matrix(1, 0, 0, 1, 20, 20).toArray());\n        var box2 = new Box(50, 50, 100, 100).transform(new Matrix(2, 0, 0, 2, 0, 0).toArray());\n        var box3 = new Box(-200, -200, 100, 100).transform(new Matrix(1, 0, 0, 1, -20, -20).toArray());\n        expect(box1.toArray()).toEqual([70, 70, 100, 100]);\n        expect(box2.toArray()).toEqual([100, 100, 200, 200]);\n        expect(box3.toArray()).toEqual([-220, -220, 100, 100]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns a new instance","suites":["Box.js","Box","addOffset()"],"line":167,"updatePoint":{"line":167,"column":32,"index":5791},"code":"      it('returns a new instance', () => {\n        withWindow({\n          pageXOffset: 50,\n          pageYOffset: 25\n        }, () => {\n          const box = new Box(100, 100, 100, 100);\n          const box2 = box.addOffset();\n          expect(box2).toEqual(any(Box));\n          expect(box2).not.toBe(box);\n        });\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"adds the current page offset to the box","suites":["Box.js","Box","addOffset()"],"line":178,"updatePoint":{"line":178,"column":49,"index":6137},"code":"      it('adds the current page offset to the box', () => {\n        withWindow({\n          pageXOffset: 50,\n          pageYOffset: 25\n        }, () => {\n          const box = new Box(100, 100, 100, 100).addOffset();\n          expect(box.toArray()).toEqual([150, 125, 100, 100]);\n        });\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns a string representation of the box","suites":["Box.js","Box","toString()"],"line":189,"updatePoint":{"line":189,"column":52,"index":6484},"code":"      it('returns a string representation of the box', () => {\n        expect(new Box(1, 2, 3, 4).toString()).toBe('1 2 3 4');\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns an array representation of the box","suites":["Box.js","Box","toArray()"],"line":194,"updatePoint":{"line":194,"column":52,"index":6663},"code":"      it('returns an array representation of the box', () => {\n        expect(new Box(1, 2, 3, 4).toArray()).toEqual([1, 2, 3, 4]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"checks if the box consists of only zeros","suites":["Box.js","Box","isNulled()"],"line":199,"updatePoint":{"line":199,"column":50,"index":6846},"code":"      it('checks if the box consists of only zeros', () => {\n        expect(new Box().isNulled()).toBe(true);\n        expect(new Box(1, 2, 3, 4).isNulled()).toBe(false);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns the bounding box of the element","suites":["Box.js","Element","bbox()"],"line":207,"updatePoint":{"line":207,"column":49,"index":7100},"code":"      it('returns the bounding box of the element', () => {\n        const canvas = SVG().addTo(container);\n        const rect = new Rect().size(100, 200).move(20, 30).addTo(canvas);\n        expect(rect.bbox()).toEqual(any(Box));\n        expect(rect.bbox().toArray()).toEqual([20, 30, 100, 200]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns the bounding box of the element even if the node is not in the dom","suites":["Box.js","Element","bbox()"],"line":213,"updatePoint":{"line":213,"column":84,"index":7441},"code":"      it('returns the bounding box of the element even if the node is not in the dom', () => {\n        const rect = new Rect().size(100, 200).move(20, 30);\n        expect(rect.bbox().toArray()).toEqual([20, 30, 100, 200]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"throws when it is not possible to get a bbox","suites":["Box.js","Element","bbox()"],"line":217,"updatePoint":{"line":217,"column":54,"index":7644},"code":"      it('throws when it is not possible to get a bbox', () => {\n        const spy = spyOn(getWindow().SVGGraphicsElement.prototype, 'getBBox').and.callFake(() => {\n          throw new Error('No BBox for you');\n        });\n        const rect = new Rect();\n        expect(() => rect.bbox()).toThrow();\n        expect(spy).toHaveBeenCalled();\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns the BoundingClientRect of the element","suites":["Box.js","Element","rbox()"],"line":227,"updatePoint":{"line":227,"column":55,"index":8035},"code":"      it('returns the BoundingClientRect of the element', () => {\n        const canvas = SVG().addTo(container);\n        const rect = new Rect().size(100, 200).move(20, 30).addTo(canvas).attr('transform', new Matrix({\n          scale: 2,\n          translate: [40, 50]\n        }));\n        expect(rect.rbox()).toEqual(any(Box));\n        expect(rect.rbox().toArray()).toEqual([80, 110, 200, 400]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"returns the rbox box of the element in the coordinate system of the passed element","suites":["Box.js","Element","rbox()"],"line":236,"updatePoint":{"line":236,"column":92,"index":8478},"code":"      it('returns the rbox box of the element in the coordinate system of the passed element', () => {\n        const canvas = SVG().addTo(container);\n        const group = canvas.group().translate(1, 1);\n        const rect = new Rect().size(100, 200).move(20, 30).addTo(canvas).attr('transform', new Matrix({\n          scale: 2,\n          translate: [40, 50]\n        }));\n        expect(rect.rbox(group)).toEqual(any(Box));\n        expect(rect.rbox(group).toArray()).toEqual([79, 109, 200, 400]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"throws when element is not in dom","suites":["Box.js","Element","rbox()"],"line":251,"updatePoint":{"line":251,"column":43,"index":9314},"code":"      it('throws when element is not in dom', () => {\n        expect(() => new Rect().rbox()).toThrow();\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"checks if a point is in the elements borders","suites":["Box.js","Element","inside()"],"line":256,"updatePoint":{"line":256,"column":54,"index":9481},"code":"      it('checks if a point is in the elements borders', () => {\n        const canvas = SVG().addTo(container);\n        const rect = canvas.rect(100, 100);\n        expect(rect.inside(50, 50)).toBe(true);\n        expect(rect.inside(101, 101)).toBe(false);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"sets the viewbox of the element","suites":["Box.js","Element","viewbox()"],"line":264,"updatePoint":{"line":264,"column":41,"index":9775},"code":"      it('sets the viewbox of the element', () => {\n        const canvas = SVG().addTo(container).viewbox(10, 10, 200, 200);\n        expect(canvas.attr('viewBox')).toEqual('10 10 200 200');\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"gets the viewbox of the element","suites":["Box.js","Element","viewbox()"],"line":268,"updatePoint":{"line":268,"column":41,"index":9975},"code":"      it('gets the viewbox of the element', () => {\n        const canvas = SVG().addTo(container).viewbox(10, 10, 200, 200);\n        expect(canvas.viewbox()).toEqual(any(Box));\n        expect(canvas.viewbox().toArray()).toEqual([10, 10, 200, 200]);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"zooms around the center by default","suites":["Box.js","Element","zoom()"],"line":275,"updatePoint":{"line":275,"column":44,"index":10276},"code":"      it('zooms around the center by default', () => {\n        const canvas = SVG().size(100, 50).viewbox(0, 0, 100, 50).addTo(container).zoom(2);\n        expect(canvas.attr('viewBox')).toEqual('25 12.5 50 25');\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"zooms around a point","suites":["Box.js","Element","zoom()"],"line":279,"updatePoint":{"line":279,"column":30,"index":10484},"code":"      it('zooms around a point', () => {\n        const canvas = SVG().size(100, 50).viewbox(0, 0, 100, 50).addTo(container).zoom(2, [0, 0]);\n        expect(canvas.attr('viewBox')).toEqual('0 0 50 25');\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"gets the zoom","suites":["Box.js","Element","zoom()"],"line":283,"updatePoint":{"line":283,"column":23,"index":10689},"code":"      it('gets the zoom', () => {\n        // We use a nested here because its actually harder to get a width and height for a nested svg because clientHeight\n        // is not available\n        const svg = SVG().size(100, 50).addTo(container).nested().size(100, 50).viewbox(0, 0, 100, 50).zoom(2);\n        expect(svg.zoom()).toEqual(2);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"gets the zoom with clientHeight","suites":["Box.js","Element","zoom()"],"line":289,"updatePoint":{"line":289,"column":41,"index":11054},"code":"      it('gets the zoom with clientHeight', () => {\n        const svg = SVG().css({\n          width: '100px',\n          height: '50px'\n        }).addTo(container).viewbox(25, 12.5, 50, 25);\n        const node = svg.node;\n\n        // svgdom doesn't support clientHeight\n        // so we mock it here\n        if (typeof node.clientHeight === 'undefined') {\n          node.clientHeight = 50;\n          node.clientWidth = 100;\n        }\n        expect(svg.zoom()).toEqual(2);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"throws an error if it is impossible to get an absolute value","suites":["Box.js","Element","zoom()"],"line":304,"updatePoint":{"line":304,"column":70,"index":11565},"code":"      it('throws an error if it is impossible to get an absolute value', () => {\n        const svg = SVG().size(100, 50).addTo(container).nested().viewbox(0, 0, 100, 50);\n        expect(() => svg.zoom()).toThrowError('Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element');\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"handles zoom level 0 which is - which basically sets the viewbox to a very high value","suites":["Box.js","Element","zoom()"],"line":308,"updatePoint":{"line":308,"column":95,"index":11943},"code":"      it('handles zoom level 0 which is - which basically sets the viewbox to a very high value', () => {\n        const svg = SVG().size(100, 50).viewbox(0, 0, 100, 50).addTo(container).zoom(0);\n        expect(svg.zoom()).toBeCloseTo(0, 10);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"handles zoom level 0 and can recover from it","suites":["Box.js","Element","zoom()"],"line":312,"updatePoint":{"line":312,"column":54,"index":12154},"code":"      it('handles zoom level 0 and can recover from it', () => {\n        const svg = SVG().size(100, 50).viewbox(0, 0, 100, 50).addTo(container).zoom(0).zoom(1);\n        expect(svg.zoom()).toBe(1);\n      });","file":"spec/types/Box.js","skipped":false,"dir":"spec"},{"name":"rgb","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":18,"updatePoint":{"line":18,"column":13,"index":401},"code":"      it('rgb', () => {\n        const color = new Color({\n          r: 255,\n          g: 0,\n          b: 128\n        });\n        expect(color.r).toBe(255);\n        expect(color.g).toBe(0);\n        expect(color.b).toBe(128);\n        expect(color.space).toBe('rgb');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"xyz","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":29,"updatePoint":{"line":29,"column":13,"index":676},"code":"      it('xyz', () => {\n        const color = new Color({\n          x: 255,\n          y: 0,\n          z: 128\n        });\n        expect(color.x).toBe(255);\n        expect(color.y).toBe(0);\n        expect(color.z).toBe(128);\n        expect(color.space).toBe('xyz');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"hsl","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":40,"updatePoint":{"line":40,"column":13,"index":951},"code":"      it('hsl', () => {\n        const color = new Color({\n          h: 255,\n          s: 0,\n          l: 128\n        });\n        expect(color.h).toBe(255);\n        expect(color.s).toBe(0);\n        expect(color.l).toBe(128);\n        expect(color.space).toBe('hsl');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"lab","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":51,"updatePoint":{"line":51,"column":13,"index":1226},"code":"      it('lab', () => {\n        const color = new Color({\n          l: 255,\n          a: 0,\n          b: 128\n        });\n        expect(color.l).toBe(255);\n        expect(color.a).toBe(0);\n        expect(color.b).toBe(128);\n        expect(color.space).toBe('lab');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"lch","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":62,"updatePoint":{"line":62,"column":13,"index":1501},"code":"      it('lch', () => {\n        const color = new Color({\n          l: 255,\n          c: 0,\n          h: 128\n        });\n        expect(color.l).toBe(255);\n        expect(color.c).toBe(0);\n        expect(color.h).toBe(128);\n        expect(color.space).toBe('lch');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"cmyk","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":73,"updatePoint":{"line":73,"column":14,"index":1777},"code":"      it('cmyk', () => {\n        const color2 = new Color({\n          c: 20,\n          y: 15,\n          m: 10,\n          k: 5\n        });\n        expect(color2.c).toBe(20);\n        expect(color2.m).toBe(10);\n        expect(color2.y).toBe(15);\n        expect(color2.k).toBe(5);\n        expect(color2.space).toBe('cmyk');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"and default to rgb when unknown parameters are passed","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":86,"updatePoint":{"line":86,"column":63,"index":2156},"code":"      it('and default to rgb when unknown parameters are passed', () => {\n        const color = new Color({\n          h: 12,\n          b: 10,\n          l: 100\n        });\n        expect(color.r).toBe(0);\n        expect(color.g).toBe(0);\n        expect(color.b).toBe(0);\n        expect(color.space).toBe('rgb');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"constructs a color from an array","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":98,"updatePoint":{"line":98,"column":40,"index":2462},"code":"    it('constructs a color from an array', () => {\n      const color = new Color([30, 24, 50]);\n      expect(color.r).toBe(30);\n      expect(color.g).toBe(24);\n      expect(color.b).toBe(50);\n      expect(color.space).toBe('rgb');\n    });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"constructs a color from an array with space in array","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":105,"updatePoint":{"line":105,"column":60,"index":2721},"code":"    it('constructs a color from an array with space in array', () => {\n      const color = new Color([50, 50, 5, 'lab']);\n      expect(color.l).toBe(50);\n      expect(color.a).toBe(50);\n      expect(color.b).toBe(5);\n      expect(color.space).toBe('lab');\n    });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"constructs a color from an array with space given","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":112,"updatePoint":{"line":112,"column":57,"index":2982},"code":"    it('constructs a color from an array with space given', () => {\n      const color = new Color([50, 50, 5], 'lab');\n      expect(color.l).toBe(50);\n      expect(color.a).toBe(50);\n      expect(color.b).toBe(5);\n      expect(color.space).toBe('lab');\n    });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"correclty parses an rgb string","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":119,"updatePoint":{"line":119,"column":38,"index":3224},"code":"    it('correclty parses an rgb string', () => {\n      const color = new Color('rgb(255,0,128)');\n      expect(color.r).toBe(255);\n      expect(color.g).toBe(0);\n      expect(color.b).toBe(128);\n    });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"correclty parses a 3 digit hex string","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":125,"updatePoint":{"line":125,"column":45,"index":3434},"code":"    it('correclty parses a 3 digit hex string', () => {\n      color = new Color('#f06');\n      expect(color.r).toBe(255);\n      expect(color.g).toBe(0);\n      expect(color.b).toBe(102);\n    });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"correclty parses a 6 digit hex string","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":131,"updatePoint":{"line":131,"column":45,"index":3628},"code":"    it('correclty parses a 6 digit hex string', () => {\n      color = new Color('#0066ff');\n      expect(color.r).toBe(0);\n      expect(color.g).toBe(102);\n      expect(color.b).toBe(255);\n    });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"throws an error if unsupported string format was given","suites":["Color.js","()","constructs a color from an object in the correct color space"],"line":137,"updatePoint":{"line":137,"column":62,"index":3842},"code":"    it('throws an error if unsupported string format was given', () => {\n      expect(() => new Color('#0066')).toThrowError('Unsupported string format, can\\'t construct Color');\n    });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns a hex color","suites":["Color.js","input and output: Importing and exporting colors","toHex()"],"line":143,"updatePoint":{"line":143,"column":29,"index":4105},"code":"      it('returns a hex color', () => {\n        expect(color.toHex()).toBe('#0066ff');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns a rgb string color","suites":["Color.js","input and output: Importing and exporting colors","toRgb()"],"line":148,"updatePoint":{"line":148,"column":36,"index":4249},"code":"      it('returns a rgb string color', () => {\n        expect(color.toRgb()).toBe('rgb(0,102,255)');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert rgb to lab","suites":["Color.js","color spaces: The color spaces supported by our library","lab()"],"line":155,"updatePoint":{"line":155,"column":32,"index":4478},"code":"      it('can convert rgb to lab', () => {\n        const color = new Color(255, 0, 128);\n        const lab = color.lab();\n        expect(lab.l).toBeCloseTo(54.88, 1);\n        expect(lab.a).toBeCloseTo(84.55, 1);\n        expect(lab.b).toBeCloseTo(4.065, 1);\n        expect(lab.space).toBe('lab');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert from lab to rgb","suites":["Color.js","color spaces: The color spaces supported by our library","lab()"],"line":163,"updatePoint":{"line":163,"column":37,"index":4789},"code":"      it('can convert from lab to rgb', () => {\n        const lab = new Color(54.88, 84.55, 4.065, 'lab');\n        const rgb = lab.rgb();\n        expect(rgb.r).toBeCloseTo(255, 0);\n        expect(rgb.g).toBeCloseTo(0, 0);\n        expect(rgb.b).toBeCloseTo(128, 0);\n        expect(rgb.space).toBe('rgb');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"is invertable","suites":["Color.js","color spaces: The color spaces supported by our library","lab()"],"line":171,"updatePoint":{"line":171,"column":23,"index":5089},"code":"      it('is invertable', () => {\n        const {\n          r,\n          g,\n          b\n        } = new Color(255, 0, 128).lab().rgb();\n        expect(r).toBeCloseTo(255, 0);\n        expect(g).toBeCloseTo(0, 0);\n        expect(b).toBeCloseTo(128, 0);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles black","suites":["Color.js","color spaces: The color spaces supported by our library","lab()"],"line":181,"updatePoint":{"line":181,"column":23,"index":5350},"code":"      it('handles black', () => {\n        const color = new Color(0, 0, 0).lab().rgb();\n        expect(color.r).toBeCloseTo(0, 0);\n        expect(color.g).toBeCloseTo(0, 0);\n        expect(color.b).toBeCloseTo(0, 0);\n        expect(color.toHex()).toBe('#000000');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles white","suites":["Color.js","color spaces: The color spaces supported by our library","lab()"],"line":188,"updatePoint":{"line":188,"column":23,"index":5624},"code":"      it('handles white', () => {\n        const color = new Color(255, 255, 255).lab().rgb();\n        expect(color.r).toBeCloseTo(255, 0);\n        expect(color.g).toBeCloseTo(255, 0);\n        expect(color.b).toBeCloseTo(255, 0);\n        expect(color.toHex()).toBe('#ffffff');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert rgb to lch","suites":["Color.js","color spaces: The color spaces supported by our library","lch()"],"line":197,"updatePoint":{"line":197,"column":32,"index":5957},"code":"      it('can convert rgb to lch', () => {\n        const color = new Color(255, 0, 128);\n        const lch = color.lch();\n        expect(lch.l).toBeCloseTo(54.88, 1);\n        expect(lch.c).toBeCloseTo(84.65, 1);\n        expect(lch.h).toBeCloseTo(2.75, 1);\n        expect(lch.space).toBe('lch');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert from lch to rgb","suites":["Color.js","color spaces: The color spaces supported by our library","lch()"],"line":205,"updatePoint":{"line":205,"column":37,"index":6267},"code":"      it('can convert from lch to rgb', () => {\n        const lch = new Color(54.88, 84.65, 2.75, 'lch');\n        const rgb = lch.rgb();\n        expect(rgb.r).toBeCloseTo(255, 0);\n        expect(rgb.g).toBeCloseTo(0, 0);\n        expect(rgb.b).toBeCloseTo(128, 0);\n        expect(rgb.space).toBe('rgb');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"is invertable","suites":["Color.js","color spaces: The color spaces supported by our library","lch()"],"line":213,"updatePoint":{"line":213,"column":23,"index":6566},"code":"      it('is invertable', () => {\n        const {\n          r,\n          g,\n          b\n        } = new Color(255, 0, 128).lch().rgb();\n        expect(r).toBeCloseTo(255, 0);\n        expect(g).toBeCloseTo(0, 0);\n        expect(b).toBeCloseTo(128, 0);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles black","suites":["Color.js","color spaces: The color spaces supported by our library","lch()"],"line":223,"updatePoint":{"line":223,"column":23,"index":6827},"code":"      it('handles black', () => {\n        const color = new Color(0, 0, 0).lch().rgb();\n        expect(color.r).toBeCloseTo(0, 0);\n        expect(color.g).toBeCloseTo(0, 0);\n        expect(color.b).toBeCloseTo(0, 0);\n        expect(color.toHex()).toBe('#000000');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles white","suites":["Color.js","color spaces: The color spaces supported by our library","lch()"],"line":230,"updatePoint":{"line":230,"column":23,"index":7101},"code":"      it('handles white', () => {\n        const color = new Color(255, 255, 255).lch().rgb();\n        expect(color.r).toBeCloseTo(255, 0);\n        expect(color.g).toBeCloseTo(255, 0);\n        expect(color.b).toBeCloseTo(255, 0);\n        expect(color.toHex()).toBe('#ffffff');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert from rgb to hsl","suites":["Color.js","color spaces: The color spaces supported by our library","hsl()"],"line":239,"updatePoint":{"line":239,"column":37,"index":7439},"code":"      it('can convert from rgb to hsl', () => {\n        const color = new Color(255, 0, 128);\n        const hsl = color.hsl();\n        expect(hsl.h).toBeCloseTo(329.88, 1);\n        expect(hsl.s).toBeCloseTo(100, 1);\n        expect(hsl.l).toBeCloseTo(50, 1);\n        expect(hsl.space).toBe('hsl');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert from hsl to rgb","suites":["Color.js","color spaces: The color spaces supported by our library","hsl()"],"line":247,"updatePoint":{"line":247,"column":37,"index":7746},"code":"      it('can convert from hsl to rgb', () => {\n        const hsl = new Color(329.88, 100, 50, 'hsl');\n        const rgb = hsl.rgb();\n        expect(rgb.r).toBeCloseTo(255, 0);\n        expect(rgb.g).toBeCloseTo(0, 0);\n        expect(rgb.b).toBeCloseTo(128, 0);\n        expect(rgb.space).toBe('rgb');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"is invertable","suites":["Color.js","color spaces: The color spaces supported by our library","hsl()"],"line":255,"updatePoint":{"line":255,"column":23,"index":8042},"code":"      it('is invertable', () => {\n        const {\n          r,\n          g,\n          b\n        } = new Color(255, 0, 128).hsl().rgb();\n        expect(r).toBeCloseTo(255, 0);\n        expect(g).toBeCloseTo(0, 0);\n        expect(b).toBeCloseTo(128, 0);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles black","suites":["Color.js","color spaces: The color spaces supported by our library","hsl()"],"line":265,"updatePoint":{"line":265,"column":23,"index":8303},"code":"      it('handles black', () => {\n        const color = new Color(0, 0, 0).hsl().rgb();\n        expect(color.r).toBeCloseTo(0, 0);\n        expect(color.g).toBeCloseTo(0, 0);\n        expect(color.b).toBeCloseTo(0, 0);\n        expect(color.toHex()).toBe('#000000');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles white","suites":["Color.js","color spaces: The color spaces supported by our library","hsl()"],"line":272,"updatePoint":{"line":272,"column":23,"index":8577},"code":"      it('handles white', () => {\n        const color = new Color(255, 255, 255).hsl().rgb();\n        expect(color.r).toBeCloseTo(255, 0);\n        expect(color.g).toBeCloseTo(255, 0);\n        expect(color.b).toBeCloseTo(255, 0);\n        expect(color.toHex()).toBe('#ffffff');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert from rgb to cmyk","suites":["Color.js","color spaces: The color spaces supported by our library","cmyk()"],"line":328,"updatePoint":{"line":328,"column":38,"index":10615},"code":"      it('can convert from rgb to cmyk', () => {\n        const color = new Color(255, 0, 128);\n        const cmyk = color.cmyk();\n        expect(cmyk.c).toBeCloseTo(0, 1);\n        expect(cmyk.m).toBeCloseTo(1, 1);\n        expect(cmyk.y).toBeCloseTo(0.49, 1);\n        expect(cmyk.k).toBeCloseTo(0, 1);\n        expect(cmyk.space).toBe('cmyk');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"can convert from cmyk to rgb","suites":["Color.js","color spaces: The color spaces supported by our library","cmyk()"],"line":337,"updatePoint":{"line":337,"column":38,"index":10967},"code":"      it('can convert from cmyk to rgb', () => {\n        const color = new Color(0, 1, 0.49, 0, 'cmyk');\n        const rgb = color.rgb();\n        expect(rgb.r).toBeCloseTo(255, -1);\n        expect(rgb.g).toBeCloseTo(0, -1);\n        expect(rgb.b).toBeCloseTo(128, -1);\n        expect(rgb.space).toBe('rgb');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"is invertable","suites":["Color.js","color spaces: The color spaces supported by our library","cmyk()"],"line":345,"updatePoint":{"line":345,"column":23,"index":11269},"code":"      it('is invertable', () => {\n        const {\n          r,\n          g,\n          b\n        } = new Color(255, 0, 128).cmyk().rgb();\n        expect(r).toBeCloseTo(255, 0);\n        expect(g).toBeCloseTo(0, 0);\n        expect(b).toBeCloseTo(128, 0);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles black","suites":["Color.js","color spaces: The color spaces supported by our library","cmyk()"],"line":355,"updatePoint":{"line":355,"column":23,"index":11531},"code":"      it('handles black', () => {\n        const color = new Color(0, 0, 0).cmyk().rgb();\n        expect(color.r).toBeCloseTo(0, 0);\n        expect(color.g).toBeCloseTo(0, 0);\n        expect(color.b).toBeCloseTo(0, 0);\n        expect(color.toHex()).toBe('#000000');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"handles white","suites":["Color.js","color spaces: The color spaces supported by our library","cmyk()"],"line":362,"updatePoint":{"line":362,"column":23,"index":11806},"code":"      it('handles white', () => {\n        const color = new Color(255, 255, 255).cmyk().rgb();\n        expect(color.r).toBeCloseTo(255, 0);\n        expect(color.g).toBeCloseTo(255, 0);\n        expect(color.b).toBeCloseTo(255, 0);\n        expect(color.toHex()).toBe('#ffffff');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color","suites":["Color.js","static methods","random()"],"line":373,"updatePoint":{"line":373,"column":23,"index":12177},"code":"      it('returns color', () => {\n        expect(Color.random()).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color with mode=vibrant","suites":["Color.js","static methods","random()"],"line":376,"updatePoint":{"line":376,"column":41,"index":12291},"code":"      it('returns color with mode=vibrant', () => {\n        expect(Color.random('vibrant')).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color with mode=sine","suites":["Color.js","static methods","random()"],"line":379,"updatePoint":{"line":379,"column":38,"index":12411},"code":"      it('returns color with mode=sine', () => {\n        expect(Color.random('sine')).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color with mode=pastel","suites":["Color.js","static methods","random()"],"line":382,"updatePoint":{"line":382,"column":40,"index":12530},"code":"      it('returns color with mode=pastel', () => {\n        expect(Color.random('pastel')).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color with mode=dark","suites":["Color.js","static methods","random()"],"line":385,"updatePoint":{"line":385,"column":38,"index":12649},"code":"      it('returns color with mode=dark', () => {\n        expect(Color.random('dark')).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color with mode=rgb","suites":["Color.js","static methods","random()"],"line":388,"updatePoint":{"line":388,"column":37,"index":12765},"code":"      it('returns color with mode=rgb', () => {\n        expect(Color.random('rgb')).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color with mode=lab","suites":["Color.js","static methods","random()"],"line":391,"updatePoint":{"line":391,"column":37,"index":12880},"code":"      it('returns color with mode=lab', () => {\n        expect(Color.random('lab')).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns color with mode=grey","suites":["Color.js","static methods","random()"],"line":394,"updatePoint":{"line":394,"column":38,"index":12996},"code":"      it('returns color with mode=grey', () => {\n        expect(Color.random('grey')).toEqual(any(Color));\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"throws an error if mode is unknown","suites":["Color.js","static methods","random()"],"line":397,"updatePoint":{"line":397,"column":44,"index":13119},"code":"      it('throws an error if mode is unknown', () => {\n        expect(() => Color.random('foo')).toThrowError('Unsupported random color mode');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns false for non strings","suites":["Color.js","static methods","test()"],"line":402,"updatePoint":{"line":402,"column":39,"index":13307},"code":"      it('returns false for non strings', () => {\n        expect(Color.test(1)).toBe(false);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns true if a given string is a color - hex","suites":["Color.js","static methods","test()"],"line":405,"updatePoint":{"line":405,"column":57,"index":13428},"code":"      it('returns true if a given string is a color - hex', () => {\n        expect(Color.test('#abc')).toBe(true);\n        expect(Color.test('#abcdef')).toBe(true);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns true if a given string is a color - rgb","suites":["Color.js","static methods","test()"],"line":409,"updatePoint":{"line":409,"column":57,"index":13603},"code":"      it('returns true if a given string is a color - rgb', () => {\n        expect(Color.test('rgb(1,2,3)')).toBe(true);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns false if a given string is a not a color","suites":["Color.js","static methods","test()"],"line":412,"updatePoint":{"line":412,"column":58,"index":13735},"code":"      it('returns false if a given string is a not a color', () => {\n        expect(Color.test('#1234')).toBe(false);\n        expect(Color.test('#Hallo Welt')).toBe(false);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns true if object has all rgb properties set","suites":["Color.js","static methods","isRgb()"],"line":418,"updatePoint":{"line":418,"column":59,"index":13959},"code":"      it('returns true if object has all rgb properties set', () => {\n        expect(Color.isRgb({\n          r: 12,\n          g: 45,\n          b: 11,\n          blub: true\n        })).toBe(true);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"returns false if object has not all rgb properties set or they are not numbers","suites":["Color.js","static methods","isRgb()"],"line":426,"updatePoint":{"line":426,"column":88,"index":14193},"code":"      it('returns false if object has not all rgb properties set or they are not numbers', () => {\n        expect(Color.isRgb({\n          r: 12,\n          g: 45\n        })).toBe(false);\n        expect(Color.isRgb({\n          r: 12,\n          g: 45,\n          b: '1'\n        })).toBe(false);\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"tests if given value is a color","suites":["Color.js","static methods","isColor"],"line":439,"updatePoint":{"line":439,"column":41,"index":14487},"code":"      it('tests if given value is a color', () => {\n        const spy1 = spyOn(Color, 'isRgb');\n        const spy2 = spyOn(Color, 'test');\n        expect(Color.isColor(new Color())).toBe(true);\n        Color.isColor('#000');\n        const color = {\n          r: 12,\n          g: 45,\n          b: 11\n        };\n        Color.isColor(color);\n        expect(spy1).toHaveBeenCalledWith('#000');\n        expect(spy1).toHaveBeenCalledWith(color);\n        expect(spy2).toHaveBeenCalledWith('#000');\n      });","file":"spec/types/Color.js","skipped":false,"dir":"spec"},{"name":"creates a new object of type EventTarget","suites":["EventTarget.js","()"],"line":16,"updatePoint":{"line":16,"column":48,"index":437},"code":"    it('creates a new object of type EventTarget', () => {\n      expect(new EventTarget()).toEqual(any(EventTarget));\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"is a noop","suites":["EventTarget.js","addEventListener()"],"line":21,"updatePoint":{"line":21,"column":17,"index":579},"code":"    it('is a noop', () => {\n      const target = new EventTarget();\n      const frozen = Object.freeze(target);\n      frozen.addEventListener();\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"eventually calls dispatchEvent on the target and returns the event","suites":["EventTarget.js","dispatch()"],"line":28,"updatePoint":{"line":28,"column":74,"index":828},"code":"    it('eventually calls dispatchEvent on the target and returns the event', () => {\n      const target = new EventTarget();\n      const spy = spyOn(target, 'dispatchEvent').and.callThrough();\n      const options = {\n        cancelable: false\n      };\n      const event = target.dispatch('bla', 'foo', options);\n      expect(spy).toHaveBeenCalledWith(event);\n      expect(event).toEqual(objectContaining({\n        type: 'bla',\n        detail: 'foo',\n        cancelable: false\n      }));\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"returns true if no events are bound","suites":["EventTarget.js","dispatchEvent()"],"line":44,"updatePoint":{"line":44,"column":43,"index":1336},"code":"    it('returns true if no events are bound', () => {\n      const target = new EventTarget();\n      expect(target.dispatchEvent(event('event'))).toBe(true);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"calls the handler for a bound event","suites":["EventTarget.js","dispatchEvent()"],"line":48,"updatePoint":{"line":48,"column":43,"index":1501},"code":"    it('calls the handler for a bound event', () => {\n      const target = new EventTarget();\n      const spy = createSpy('event');\n      const ev = event('event');\n      target.on('event', spy);\n      const ret = target.dispatchEvent(ev);\n      expect(spy).toHaveBeenCalledWith(ev);\n      expect(ret).toBe(!ev.defaultPrevented);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"returns negative default prevented","suites":["EventTarget.js","dispatchEvent()"],"line":57,"updatePoint":{"line":57,"column":42,"index":1838},"code":"    it('returns negative default prevented', () => {\n      const target = new EventTarget();\n      const ev = event('event');\n      ev.preventDefault();\n      const ret = target.dispatchEvent(ev);\n      expect(ret).toBe(!ev.defaultPrevented);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"calls dispatch and returns the element","suites":["EventTarget.js","fire()"],"line":66,"updatePoint":{"line":66,"column":46,"index":2128},"code":"    it('calls dispatch and returns the element', () => {\n      const target = new EventTarget();\n      const spy = spyOn(target, 'dispatch');\n      expect(target.fire('event', 'foo', 'bar')).toBe(target);\n      expect(spy).toHaveBeenCalledWith('event', 'foo', 'bar');\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["EventTarget.js","getEventHolder()"],"line":74,"updatePoint":{"line":74,"column":22,"index":2425},"code":"    it('returns itself', () => {\n      const target = new EventTarget();\n      expect(target.getEventHolder()).toBe(target);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["EventTarget.js","getEventTarget()"],"line":80,"updatePoint":{"line":80,"column":22,"index":2603},"code":"    it('returns itself', () => {\n      const target = new EventTarget();\n      expect(target.getEventTarget()).toBe(target);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["EventTarget.js","off()"],"line":86,"updatePoint":{"line":86,"column":22,"index":2770},"code":"    it('returns itself', () => {\n      const target = new EventTarget();\n      const spy = createSpy();\n      expect(target.on('event', spy)).toBe(target);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"removes an event binding from the target","suites":["EventTarget.js","off()"],"line":91,"updatePoint":{"line":91,"column":48,"index":2960},"code":"    it('removes an event binding from the target', () => {\n      const target = new EventTarget();\n      const spy = createSpy();\n      target.on('event', spy);\n      target.dispatch('event');\n      expect(spy.calls.count()).toBe(1);\n      target.off('event', spy);\n      target.dispatch('event');\n      expect(spy.calls.count()).toBe(1);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"removes an event binding with options from the target","suites":["EventTarget.js","off()"],"line":101,"updatePoint":{"line":101,"column":61,"index":3320},"code":"    it('removes an event binding with options from the target', () => {\n      const target = new EventTarget();\n      const spy = createSpy();\n      target.on('event', spy, undefined, {\n        capture: true\n      });\n      target.dispatch('event');\n      expect(spy.calls.count()).toBe(1);\n      target.off('event', spy, {\n        capture: true\n      });\n      target.dispatch('event');\n      expect(spy.calls.count()).toBe(1);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["EventTarget.js","on()"],"line":117,"updatePoint":{"line":117,"column":22,"index":3751},"code":"    it('returns itself', () => {\n      const target = new EventTarget();\n      const spy = createSpy();\n      expect(target.off('event', spy)).toBe(target);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"adds an event binding to the target","suites":["EventTarget.js","on()"],"line":122,"updatePoint":{"line":122,"column":43,"index":3937},"code":"    it('adds an event binding to the target', () => {\n      const target = new EventTarget();\n      const spy = createSpy();\n      expect(spy.calls.count()).toBe(0);\n      target.on('event', spy);\n      target.dispatch('event');\n      expect(spy.calls.count()).toBe(1);\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"is a noop","suites":["EventTarget.js","removeEventListener()"],"line":132,"updatePoint":{"line":132,"column":17,"index":4239},"code":"    it('is a noop', () => {\n      const target = new EventTarget();\n      const frozen = Object.freeze(target);\n      frozen.removeEventListener();\n    });","file":"spec/types/EventTarget.js","skipped":false,"dir":"spec"},{"name":"creates a new List from Array","suites":["List.js","()"],"line":11,"updatePoint":{"line":11,"column":37,"index":241},"code":"    it('creates a new List from Array', () => {\n      const list = new List([1, 2, 3]);\n      expect(list).toEqual(any(List));\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"creates preallocated List like Array(1)","suites":["List.js","()"],"line":15,"updatePoint":{"line":15,"column":47,"index":386},"code":"    it('creates preallocated List like Array(1)', () => {\n      const list = new List(1);\n      expect(list.length).toBe(1);\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"is instance of Array","suites":["List.js","()"],"line":19,"updatePoint":{"line":19,"column":28,"index":500},"code":"    it('is instance of Array', () => {\n      const list = new List([1, 2, 3]);\n      expect(list).toEqual(any(Array));\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"allows index access","suites":["List.js","()"],"line":23,"updatePoint":{"line":23,"column":27,"index":626},"code":"    it('allows index access', () => {\n      const list = new List([1, 2, 3]);\n      expect(list[1]).toBe(2);\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"works like map but with context set to the element when a function is passed","suites":["List.js","each()"],"line":29,"updatePoint":{"line":29,"column":84,"index":835},"code":"    it('works like map but with context set to the element when a function is passed', () => {\n      const list = new List([1, 2, 3]).each(el => el * 2);\n      expect(list).toEqual(any(List));\n      expect(list).toEqual([2, 4, 6]);\n      const spy = createSpy();\n      const obj = {};\n      const list2 = new List([obj]);\n      list2.each(spy);\n      expect(spy.calls.first()).toEqual(objectContaining({\n        object: obj,\n        args: [obj, 0, list2]\n      }));\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"calls a method on every element in the list and passes arguments when a string is passed","suites":["List.js","each()"],"line":42,"updatePoint":{"line":42,"column":96,"index":1321},"code":"    it('calls a method on every element in the list and passes arguments when a string is passed', () => {\n      const list = new List([10, 11, 12]);\n      expect(list.each('toString', 16)).toEqual(['a', 'b', 'c']);\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"returns a plain array from the contents of the list","suites":["List.js","toArray()"],"line":48,"updatePoint":{"line":48,"column":59,"index":1546},"code":"    it('returns a plain array from the contents of the list', () => {\n      const list = new List([1, 2, 3]);\n      const arr = list.toArray();\n      expect(arr).toEqual(any(Array));\n      expect(arr).not.toEqual(any(List));\n      expect(arr).toEqual([1, 2, 3]);\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"adds new method names to the List","suites":["List.js","static extend()"],"line":57,"updatePoint":{"line":57,"column":41,"index":1843},"code":"    it('adds new method names to the List', () => {\n      List.extend(['fooBar']);\n      expect(new List().fooBar).toEqual(any(Function));\n      const obj = {\n        fooBar: createSpy()\n      };\n      new List([obj]).fooBar();\n      expect(obj.fooBar).toHaveBeenCalled();\n      delete List.prototype.fooBar;\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"skips reserved names","suites":["List.js","static extend()"],"line":67,"updatePoint":{"line":67,"column":28,"index":2147},"code":"    it('skips reserved names', () => {\n      const {\n        constructor,\n        each,\n        toArray\n      } = List.prototype;\n      List.extend(['constructor', 'each', 'toArray']);\n      expect(List.prototype).toEqual(objectContaining({\n        constructor,\n        each,\n        toArray\n      }));\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"skips private methods starting with an underscore","suites":["List.js","static extend()"],"line":80,"updatePoint":{"line":80,"column":57,"index":2487},"code":"    it('skips private methods starting with an underscore', () => {\n      List.extend(['_private']);\n      expect(new List()._private).toBe(undefined);\n    });","file":"spec/types/List.js","skipped":false,"dir":"spec"},{"name":"creates a new matrix with default values","suites":["Matrix.js","initialization"],"line":19,"updatePoint":{"line":19,"column":48,"index":415},"code":"    it('creates a new matrix with default values', () => {\n      const matrix = new Matrix();\n      expect(matrix).toEqual(objectContaining({\n        a: 1,\n        b: 0,\n        c: 0,\n        d: 1,\n        e: 0,\n        f: 0\n      }));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"parses the current transform matrix from an element","suites":["Matrix.js","initialization"],"line":30,"updatePoint":{"line":30,"column":59,"index":670},"code":"    it('parses the current transform matrix from an element', () => {\n      const rect = new Rect().transform(comp);\n      const matrix = new Matrix(rect);\n      expect(matrix).toEqual(objectContaining(comp));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"parses a string value correctly","suites":["Matrix.js","initialization"],"line":35,"updatePoint":{"line":35,"column":39,"index":868},"code":"    it('parses a string value correctly', () => {\n      const matrix = new Matrix('2, 0, 0, 2, 100, 50');\n      expect(matrix).toEqual(objectContaining(comp));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"parses an array correctly","suites":["Matrix.js","initialization"],"line":39,"updatePoint":{"line":39,"column":33,"index":1030},"code":"    it('parses an array correctly', () => {\n      const matrix = new Matrix([2, 0, 0, 2, 100, 50]);\n      expect(matrix).toEqual(objectContaining(comp));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"parses an object correctly","suites":["Matrix.js","initialization"],"line":43,"updatePoint":{"line":43,"column":34,"index":1193},"code":"    it('parses an object correctly', () => {\n      const matrix = new Matrix(comp);\n      expect(matrix).toEqual(objectContaining(comp));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"parses a transform object correctly","suites":["Matrix.js","initialization"],"line":47,"updatePoint":{"line":47,"column":43,"index":1348},"code":"    it('parses a transform object correctly', () => {\n      const matrix = new Matrix({\n        scale: 2,\n        translate: [100, 50]\n      });\n      expect(matrix).toEqual(objectContaining(comp));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"parses 6 arguments correctly","suites":["Matrix.js","initialization"],"line":54,"updatePoint":{"line":54,"column":36,"index":1548},"code":"    it('parses 6 arguments correctly', () => {\n      const matrix = new Matrix(2, 0, 0, 2, 100, 50);\n      expect(matrix).toEqual(objectContaining(comp));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"falls back to base if source is missing values","suites":["Matrix.js","initialization"],"line":58,"updatePoint":{"line":58,"column":54,"index":1729},"code":"    it('falls back to base if source is missing values', () => {\n      const matrix = new Matrix([]);\n      expect(matrix).toEqual(new Matrix());\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"exports correctly to a string","suites":["Matrix.js","toString()"],"line":64,"updatePoint":{"line":64,"column":37,"index":1905},"code":"    it('exports correctly to a string', () => {\n      expect(new Matrix().toString()).toBe('matrix(1,0,0,1,0,0)');\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"does simple left matrix multiplication if matrixlike object is passed","suites":["Matrix.js","transform()"],"line":69,"updatePoint":{"line":69,"column":77,"index":2108},"code":"    it('does simple left matrix multiplication if matrixlike object is passed', () => {\n      const matrix = new Matrix().transform(new Matrix().scale(2));\n      expect(matrix).toEqual(new Matrix().lmultiplyO(new Matrix().scale(2)));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"forces the origin to a specific place if position.x is passed","suites":["Matrix.js","transform()"],"line":73,"updatePoint":{"line":73,"column":69,"index":2342},"code":"    it('forces the origin to a specific place if position.x is passed', () => {\n      const matrix = new Matrix().transform({\n        px: 10\n      });\n      expect(matrix.e).toBe(10);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"forces the origin to a specific place if position.y is passed","suites":["Matrix.js","transform()"],"line":79,"updatePoint":{"line":79,"column":69,"index":2534},"code":"    it('forces the origin to a specific place if position.y is passed', () => {\n      const matrix = new Matrix().transform({\n        py: 10\n      });\n      expect(matrix.f).toBe(10);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"decomposes a matrix properly","suites":["Matrix.js","decompose()"],"line":87,"updatePoint":{"line":87,"column":36,"index":2733},"code":"    it('decomposes a matrix properly', () => {\n      var matrix = new Matrix().scale(3, 2.5).shear(4).rotate(30).translate(20, 30);\n      var decomposed = matrix.decompose();\n      expect(decomposed.scaleX).toBeCloseTo(3);\n      expect(decomposed.scaleY).toBeCloseTo(2.5);\n      expect(decomposed.shear).toBeCloseTo(4);\n      expect(decomposed.rotate).toBeCloseTo(30);\n      expect(decomposed.translateX).toBeCloseTo(20);\n      expect(decomposed.translateY).toBeCloseTo(30);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"can be recomposed to the same matrix","suites":["Matrix.js","decompose()"],"line":97,"updatePoint":{"line":97,"column":44,"index":3224},"code":"    it('can be recomposed to the same matrix', () => {\n      var matrix = new Matrix().scale(3, 2.5).shear(4).rotate(30).translate(20, 30);\n      var decomposed = matrix.decompose();\n\n      // Get rid of the matrix values before recomposing with the matrix constructor\n      for (const prop in 'abcdef') delete decomposed[prop];\n      var composed = new Matrix(decomposed);\n      expect(matrix.a).toBeCloseTo(composed.a);\n      expect(matrix.b).toBeCloseTo(composed.b);\n      expect(matrix.c).toBeCloseTo(composed.c);\n      expect(matrix.d).toBeCloseTo(composed.d);\n      expect(matrix.e).toBeCloseTo(composed.e);\n      expect(matrix.f).toBeCloseTo(composed.f);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns a clone of the matrix","suites":["Matrix.js","clone()"],"line":113,"updatePoint":{"line":113,"column":37,"index":3923},"code":"    it('returns a clone of the matrix', () => {\n      var matrix = new Matrix(2, 0, 0, 5, 0, 0);\n      var clone = matrix.clone();\n      expect(matrix).not.toBe(clone);\n      for (var i in 'abcdef') {\n        expect(matrix[i]).toEqual(clone[i]);\n      }\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"multiplies two matrices","suites":["Matrix.js","multiply()"],"line":123,"updatePoint":{"line":123,"column":31,"index":4218},"code":"    it('multiplies two matrices', () => {\n      var matrix1 = new Matrix(1, 4, 2, 5, 3, 6);\n      var matrix2 = new Matrix(7, 8, 8, 7, 9, 6);\n      var matrix3 = matrix1.multiply(matrix2);\n      expect(matrix1.toString()).toBe('matrix(1,4,2,5,3,6)');\n      expect(matrix2.toString()).toBe('matrix(7,8,8,7,9,6)');\n      expect(matrix3.toString()).toBe('matrix(23,68,22,67,24,72)');\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"accepts matrices in any form","suites":["Matrix.js","multiply()"],"line":131,"updatePoint":{"line":131,"column":36,"index":4612},"code":"    it('accepts matrices in any form', () => {\n      var matrix1 = new Matrix(1, 4, 2, 5, 3, 6);\n      var matrix2 = matrix1.multiply('7,8,8,7,9,6');\n      expect(matrix1.toString()).toBe('matrix(1,4,2,5,3,6)');\n      expect(matrix2.toString()).toBe('matrix(23,68,22,67,24,72)');\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"inverses matrix","suites":["Matrix.js","inverse()"],"line":139,"updatePoint":{"line":139,"column":23,"index":4925},"code":"    it('inverses matrix', () => {\n      var matrix1 = new Matrix(2, 0, 0, 5, 4, 3);\n      var matrix2 = matrix1.inverse();\n      var abcdef = [0.5, 0, 0, 0.2, -2, -0.6];\n      for (var i in 'abcdef') {\n        expect(matrix2['abcdef'[i]]).toBeCloseTo(abcdef[i]);\n      }\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"throws if matrix is not invertible","suites":["Matrix.js","inverse()"],"line":147,"updatePoint":{"line":147,"column":42,"index":5223},"code":"    it('throws if matrix is not invertible', () => {\n      const matrix = new Matrix(0, 0, 0, 0, 0, 0);\n      expect(() => matrix.inverse()).toThrowError('Cannot invert matrix(0,0,0,0,0,0)');\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"translates matrix by given x and y values","suites":["Matrix.js","translate()"],"line":153,"updatePoint":{"line":153,"column":49,"index":5470},"code":"    it('translates matrix by given x and y values', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).translate(10, 12.5);\n      expect(matrix.e).toBe(14);\n      expect(matrix.f).toBe(15.5);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"does nothing if you give it no x or y value","suites":["Matrix.js","translate()"],"line":158,"updatePoint":{"line":158,"column":51,"index":5677},"code":"    it('does nothing if you give it no x or y value', () => {\n      var matrix = new Matrix(1, 2, 3, 4, 5, 6).translate();\n      expect(matrix.e).toBe(5);\n      expect(matrix.f).toBe(6);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a uniformal scale with one value","suites":["Matrix.js","scale()"],"line":165,"updatePoint":{"line":165,"column":49,"index":5906},"code":"    it('performs a uniformal scale with one value', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).scale(3);\n      expect(matrix.a).toBe(3);\n      expect(matrix.d).toBe(3);\n      expect(matrix.e).toBe(4 * 3);\n      expect(matrix.f).toBe(3 * 3);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a non-uniformal scale with two values","suites":["Matrix.js","scale()"],"line":172,"updatePoint":{"line":172,"column":54,"index":6173},"code":"    it('performs a non-uniformal scale with two values', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).scale(2.5, 3.5);\n      expect(matrix.a).toBe(2.5);\n      expect(matrix.d).toBe(3.5);\n      expect(matrix.e).toBe(4 * 2.5);\n      expect(matrix.f).toBe(3 * 3.5);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a uniformal scale at a given center point with three values","suites":["Matrix.js","scale()"],"line":179,"updatePoint":{"line":179,"column":76,"index":6477},"code":"    it('performs a uniformal scale at a given center point with three values', () => {\n      var matrix = new Matrix(1, 3, 2, 3, 4, 3).scale(3, 2, 3);\n      expect(matrix.a).toBe(3);\n      expect(matrix.b).toBe(9);\n      expect(matrix.c).toBe(6);\n      expect(matrix.d).toBe(9);\n      expect(matrix.e).toBe(8);\n      expect(matrix.f).toBe(3);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a non-uniformal scale at a given center point with four values","suites":["Matrix.js","scale()"],"line":188,"updatePoint":{"line":188,"column":79,"index":6831},"code":"    it('performs a non-uniformal scale at a given center point with four values', () => {\n      var matrix = new Matrix(1, 3, 2, 3, 4, 3).scale(3, 2, 2, 3);\n      expect(matrix.a).toBe(3);\n      expect(matrix.b).toBe(6);\n      expect(matrix.c).toBe(6);\n      expect(matrix.d).toBe(6);\n      expect(matrix.e).toBe(8);\n      expect(matrix.f).toBe(3);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a rotation with one argument","suites":["Matrix.js","rotate()"],"line":199,"updatePoint":{"line":199,"column":45,"index":7191},"code":"    it('performs a rotation with one argument', () => {\n      var matrix = new Matrix(1, 3, 2, 3, 4, 3).rotate(30);\n      expect(matrix.a).toBeCloseTo(-0.6339746);\n      expect(matrix.b).toBeCloseTo(3.09807621);\n      expect(matrix.c).toBeCloseTo(0.23205081);\n      expect(matrix.d).toBeCloseTo(3.59807621);\n      expect(matrix.e).toBeCloseTo(1.96410162);\n      expect(matrix.f).toBeCloseTo(4.59807621);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a rotation around a given point with three arguments","suites":["Matrix.js","rotate()"],"line":208,"updatePoint":{"line":208,"column":69,"index":7627},"code":"    it('performs a rotation around a given point with three arguments', () => {\n      var matrix = new Matrix(1, 3, 2, 3, 4, 3).rotate(30, 2, 3);\n      expect(matrix.a).toBeCloseTo(-0.633974596216);\n      expect(matrix.b).toBeCloseTo(3.09807621135);\n      expect(matrix.c).toBeCloseTo(0.232050807569);\n      expect(matrix.d).toBeCloseTo(3.59807621135);\n      expect(matrix.e).toBeCloseTo(3.73205080757);\n      expect(matrix.f).toBeCloseTo(4.0);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a flip over the horizontal axis with one argument","suites":["Matrix.js","flip()","with x given"],"line":220,"updatePoint":{"line":220,"column":68,"index":8151},"code":"      it('performs a flip over the horizontal axis with one argument', () => {\n        var matrix = new Matrix(1, 0, 0, 1, 4, 3).flip('x');\n        expect(matrix.a).toBe(-1);\n        expect(matrix.d).toBe(1);\n        expect(matrix.e).toBe(-4);\n        expect(matrix.f).toBe(3);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a flip over the horizontal axis over a given point with two arguments","suites":["Matrix.js","flip()","with x given"],"line":227,"updatePoint":{"line":227,"column":88,"index":8459},"code":"      it('performs a flip over the horizontal axis over a given point with two arguments', () => {\n        var matrix = new Matrix(1, 0, 0, 1, 4, 3).flip('x', 150);\n        expect(matrix.a).toBe(-1);\n        expect(matrix.d).toBe(1);\n        expect(matrix.e).toBe(296);\n        expect(matrix.f).toBe(3);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a flip over the vertical axis with one argument","suites":["Matrix.js","flip()","with y given"],"line":236,"updatePoint":{"line":236,"column":66,"index":8796},"code":"      it('performs a flip over the vertical axis with one argument', () => {\n        var matrix = new Matrix(1, 0, 0, 1, 4, 3).flip('y');\n        expect(matrix.a).toBe(1);\n        expect(matrix.d).toBe(-1);\n        expect(matrix.e).toBe(4);\n        expect(matrix.f).toBe(-3);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a flip over the vertical axis over a given point with two arguments","suites":["Matrix.js","flip()","with y given"],"line":243,"updatePoint":{"line":243,"column":86,"index":9102},"code":"      it('performs a flip over the vertical axis over a given point with two arguments', () => {\n        var matrix = new Matrix(1, 0, 0, 1, 4, 3).flip('y', 100);\n        expect(matrix.a).toBe(1);\n        expect(matrix.d).toBe(-1);\n        expect(matrix.e).toBe(4);\n        expect(matrix.f).toBe(197);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a flip over the horizontal and vertical axis with no argument","suites":["Matrix.js","flip()","with no axis given"],"line":252,"updatePoint":{"line":252,"column":80,"index":9459},"code":"      it('performs a flip over the horizontal and vertical axis with no argument', () => {\n        var matrix = new Matrix(1, 0, 0, 1, 4, 3).flip();\n        expect(matrix.a).toBe(-1);\n        expect(matrix.d).toBe(-1);\n        expect(matrix.e).toBe(-4);\n        expect(matrix.f).toBe(-3);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a flip over the horizontal and vertical axis over a given point with one argument that represent both coordinates","suites":["Matrix.js","flip()","with no axis given"],"line":259,"updatePoint":{"line":259,"column":132,"index":9810},"code":"      it('performs a flip over the horizontal and vertical axis over a given point with one argument that represent both coordinates', () => {\n        var matrix = new Matrix(1, 0, 0, 1, 4, 3).flip(100);\n        expect(matrix.a).toBe(-1);\n        expect(matrix.d).toBe(-1);\n        expect(matrix.e).toBe(196);\n        expect(matrix.f).toBe(197);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a flip over the horizontal and vertical axis over a given point with two arguments","suites":["Matrix.js","flip()","with no axis given"],"line":266,"updatePoint":{"line":266,"column":101,"index":10135},"code":"      it('performs a flip over the horizontal and vertical axis over a given point with two arguments', () => {\n        var matrix = new Matrix(1, 0, 0, 1, 4, 3).flip(50, 100);\n        expect(matrix.a).toBe(-1);\n        expect(matrix.d).toBe(-1);\n        expect(matrix.e).toBe(96);\n        expect(matrix.f).toBe(197);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a uniformal skew with one value","suites":["Matrix.js","skew()"],"line":276,"updatePoint":{"line":276,"column":48,"index":10453},"code":"    it('performs a uniformal skew with one value', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skew(30);\n      expect(matrix.a).toBe(1);\n      expect(matrix.b).toBeCloseTo(0.57735026919);\n      expect(matrix.c).toBeCloseTo(0.57735026919);\n      expect(matrix.d).toBe(1);\n      expect(matrix.e).toBeCloseTo(5.73205080757);\n      expect(matrix.f).toBeCloseTo(5.30940107676);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a non-uniformal skew with two values","suites":["Matrix.js","skew()"],"line":285,"updatePoint":{"line":285,"column":53,"index":10851},"code":"    it('performs a non-uniformal skew with two values', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skew(30, 20);\n      expect(matrix.a).toBe(1);\n      expect(matrix.b).toBeCloseTo(0.363970234266);\n      expect(matrix.c).toBeCloseTo(0.57735026919);\n      expect(matrix.d).toBe(1);\n      expect(matrix.e).toBeCloseTo(5.73205080757);\n      expect(matrix.f).toBeCloseTo(4.45588093706);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a uniformal skew at a given center point with three values","suites":["Matrix.js","skew()"],"line":294,"updatePoint":{"line":294,"column":75,"index":11276},"code":"    it('performs a uniformal skew at a given center point with three values', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skew(30, 150, 100);\n      expect(matrix.a).toBe(1);\n      expect(matrix.b).toBeCloseTo(0.57735026919);\n      expect(matrix.c).toBeCloseTo(0.57735026919);\n      expect(matrix.d).toBe(1);\n      expect(matrix.e).toBeCloseTo(-52.0029761114);\n      expect(matrix.f).toBeCloseTo(-81.2931393017);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a non-uniformal skew at a given center point with four values","suites":["Matrix.js","skew()"],"line":303,"updatePoint":{"line":303,"column":78,"index":11711},"code":"    it('performs a non-uniformal skew at a given center point with four values', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skew(30, 20, 150, 100);\n      expect(matrix.a).toBe(1.0);\n      expect(matrix.b).toBeCloseTo(0.363970234266);\n      expect(matrix.c).toBeCloseTo(0.57735026919);\n      expect(matrix.d).toBe(1.0);\n      expect(matrix.e).toBeCloseTo(-52.0029761114);\n      expect(matrix.f).toBeCloseTo(-50.1396542029);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"can be chained","suites":["Matrix.js","skew()"],"line":312,"updatePoint":{"line":312,"column":22,"index":12099},"code":"    it('can be chained', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skew(20, 30).skew(30, 20);\n      expect(matrix.a).toBeCloseTo(1.33333333333);\n      expect(matrix.b).toBeCloseTo(0.941320503456);\n      expect(matrix.c).toBeCloseTo(0.941320503456);\n      expect(matrix.d).toBeCloseTo(1.13247433143);\n      expect(matrix.e).toBeCloseTo(8.1572948437);\n      expect(matrix.f).toBeCloseTo(7.16270500812);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a skew along the x axis with one value","suites":["Matrix.js","skewX"],"line":323,"updatePoint":{"line":323,"column":55,"index":12589},"code":"    it('performs a skew along the x axis with one value', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skewX(30);\n      expect(matrix.a).toBe(1);\n      expect(matrix.b).toBe(0);\n      expect(matrix.c).toBeCloseTo(0.57735026919);\n      expect(matrix.d).toBe(1);\n      expect(matrix.e).toBeCloseTo(5.73205080757);\n      expect(matrix.f).toBe(3);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a skew along the x axis at a given center point with three values","suites":["Matrix.js","skewX"],"line":332,"updatePoint":{"line":332,"column":82,"index":12979},"code":"    it('performs a skew along the x axis at a given center point with three values', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skewX(30, 150, 100);\n      expect(matrix.a).toBe(1);\n      expect(matrix.b).toBe(0);\n      expect(matrix.c).toBeCloseTo(0.57735026919);\n      expect(matrix.d).toBe(1);\n      expect(matrix.e).toBeCloseTo(-52.0029761114);\n      expect(matrix.f).toBe(3);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a skew along the y axis with one value","suites":["Matrix.js","skewY"],"line":343,"updatePoint":{"line":343,"column":55,"index":13387},"code":"    it('performs a skew along the y axis with one value', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skewY(30);\n      expect(matrix.a).toBe(1);\n      expect(matrix.b).toBeCloseTo(0.57735026919);\n      expect(matrix.c).toBe(0);\n      expect(matrix.d).toBe(1);\n      expect(matrix.e).toBe(4);\n      expect(matrix.f).toBeCloseTo(5.30940107676);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a skew along the y axis at a given center point with three values","suites":["Matrix.js","skewY"],"line":352,"updatePoint":{"line":352,"column":82,"index":13777},"code":"    it('performs a skew along the y axis at a given center point with three values', () => {\n      var matrix = new Matrix(1, 0, 0, 1, 4, 3).skewY(30, 150, 100);\n      expect(matrix.a).toBe(1);\n      expect(matrix.b).toBeCloseTo(0.57735026919);\n      expect(matrix.c).toBe(0);\n      expect(matrix.d).toBe(1);\n      expect(matrix.e).toBe(4);\n      expect(matrix.f).toBeCloseTo(-81.2931393017);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"performs a matrix operation around an origin by shifting the origin to 0,0","suites":["Matrix.js","around()"],"line":363,"updatePoint":{"line":363,"column":82,"index":14215},"code":"    it('performs a matrix operation around an origin by shifting the origin to 0,0', () => {\n      const matrix = new Matrix(1, 0, 0, 1, 0, 0).around(10, 10, new Matrix().scale(2));\n      expect(matrix).toEqual(new Matrix(2, 0, 0, 2, -10, -10));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"defaults to around center of 0,0","suites":["Matrix.js","around()"],"line":367,"updatePoint":{"line":367,"column":40,"index":14427},"code":"    it('defaults to around center of 0,0', () => {\n      const matrix = new Matrix(1, 0, 0, 1, 0, 0).around(0, 0, new Matrix().scale(2));\n      expect(matrix).toEqual(new Matrix(2, 0, 0, 2, 0, 0));\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns true if the same matrix is passed","suites":["Matrix.js","equals()"],"line":373,"updatePoint":{"line":373,"column":49,"index":14679},"code":"    it('returns true if the same matrix is passed', () => {\n      const matrix = new Matrix();\n      expect(matrix.equals(matrix)).toBe(true);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns true if the components match","suites":["Matrix.js","equals()"],"line":377,"updatePoint":{"line":377,"column":44,"index":14825},"code":"    it('returns true if the components match', () => {\n      const matrix = new Matrix();\n      expect(matrix.equals(matrix.clone())).toBe(true);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns false if the components do not match","suites":["Matrix.js","equals()"],"line":381,"updatePoint":{"line":381,"column":52,"index":14987},"code":"    it('returns false if the components do not match', () => {\n      const matrix = new Matrix();\n      expect(matrix.equals(matrix.scale(2))).toBe(false);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns an object containing the matrix components","suites":["Matrix.js","valueOf()"],"line":387,"updatePoint":{"line":387,"column":58,"index":15195},"code":"    it('returns an object containing the matrix components', () => {\n      const matrix = new Matrix().valueOf();\n      expect(matrix).not.toEqual(any(Matrix));\n      expect(matrix).toEqual({\n        a: 1,\n        b: 0,\n        c: 0,\n        d: 1,\n        e: 0,\n        f: 0\n      });\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"converts matrix to array","suites":["Matrix.js","toArray"],"line":401,"updatePoint":{"line":401,"column":32,"index":15498},"code":"    it('converts matrix to array', () => {\n      const arr = new Matrix().toArray();\n      expect(arr).toEqual([1, 0, 0, 1, 0, 0]);\n    });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"creates a matrix like object from an array","suites":["Matrix.js","static","fromArray()"],"line":408,"updatePoint":{"line":408,"column":52,"index":15729},"code":"      it('creates a matrix like object from an array', () => {\n        const matrix = Matrix.fromArray([1, 2, 3, 4, 5, 6]);\n        expect(matrix).not.toEqual(any(Matrix));\n        expect(matrix).toEqual(new Matrix(1, 2, 3, 4, 5, 6).valueOf());\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns true if object contains all components","suites":["Matrix.js","static","isMatrixLike"],"line":415,"updatePoint":{"line":415,"column":56,"index":16033},"code":"      it('returns true if object contains all components', () => {\n        expect(Matrix.isMatrixLike(new Matrix())).toBe(true);\n        expect(Matrix.isMatrixLike(new Matrix().valueOf())).toBe(true);\n        expect(Matrix.isMatrixLike({\n          f: 0\n        })).toBe(true);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns false if no component is found","suites":["Matrix.js","static","isMatrixLike"],"line":422,"updatePoint":{"line":422,"column":48,"index":16312},"code":"      it('returns false if no component is found', () => {\n        expect(Matrix.isMatrixLike({\n          foo: 'bar'\n        })).toBe(false);\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"formats all transform input varieties to a canonical form","suites":["Matrix.js","static","formatTransforms()"],"line":429,"updatePoint":{"line":429,"column":67,"index":16534},"code":"      it('formats all transform input varieties to a canonical form', () => {\n        expect(Matrix.formatTransforms({\n          flip: true,\n          skew: 5,\n          scale: 5,\n          originX: 5,\n          originY: 5,\n          positionX: 5,\n          positionY: 5,\n          translateX: 5,\n          translateY: 5,\n          relativeX: 5,\n          relativeY: 5\n        })).toEqual({\n          scaleX: -5,\n          scaleY: -5,\n          skewX: 5,\n          skewY: 5,\n          shear: 0,\n          theta: 0,\n          rx: 5,\n          ry: 5,\n          tx: 5,\n          ty: 5,\n          ox: 5,\n          oy: 5,\n          px: 5,\n          py: 5\n        });\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"respects flip=x","suites":["Matrix.js","static","formatTransforms()"],"line":459,"updatePoint":{"line":459,"column":25,"index":17164},"code":"      it('respects flip=x', () => {\n        expect(Matrix.formatTransforms({\n          flip: 'x',\n          scale: [1, 2],\n          skew: [1, 2]\n        })).toEqual(objectContaining({\n          scaleX: -1,\n          scaleY: 2,\n          skewX: 1,\n          skewY: 2\n        }));\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"respects flip=y","suites":["Matrix.js","static","formatTransforms()"],"line":471,"updatePoint":{"line":471,"column":25,"index":17454},"code":"      it('respects flip=y', () => {\n        expect(Matrix.formatTransforms({\n          flip: 'y',\n          scaleX: 1,\n          scaleY: 2,\n          skewX: 1,\n          skewY: 2\n        })).toEqual(objectContaining({\n          scaleX: 1,\n          scaleY: -2,\n          skewX: 1,\n          skewY: 2\n        }));\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"makes position NaN if not passed","suites":["Matrix.js","static","formatTransforms()"],"line":485,"updatePoint":{"line":485,"column":42,"index":17794},"code":"      it('makes position NaN if not passed', () => {\n        expect(Matrix.formatTransforms({\n          flip: 'y',\n          scaleX: 1,\n          scaleY: 2,\n          skewX: 1,\n          skewY: 2\n        })).toEqual(objectContaining({\n          px: NaN,\n          py: NaN\n        }));\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns the native ctm wrapped into a matrix","suites":["Matrix.js","Element","ctm()"],"line":501,"updatePoint":{"line":501,"column":54,"index":18175},"code":"      it('returns the native ctm wrapped into a matrix', () => {\n        const rect = new Rect();\n        const spy = spyOn(rect.node, 'getCTM');\n        rect.ctm();\n        expect(spy).toHaveBeenCalled();\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"returns the native screenCTM wrapped into a matrix for a normal element","suites":["Matrix.js","Element","screenCTM()"],"line":509,"updatePoint":{"line":509,"column":81,"index":18462},"code":"      it('returns the native screenCTM wrapped into a matrix for a normal element', () => {\n        const rect = new Rect();\n        const spy = spyOn(rect.node, 'getScreenCTM');\n        rect.screenCTM();\n        expect(spy).toHaveBeenCalled();\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"does extra work for nested svgs because firefox needs it","suites":["Matrix.js","Element","screenCTM()"],"line":515,"updatePoint":{"line":515,"column":66,"index":18702},"code":"      it('does extra work for nested svgs because firefox needs it', () => {\n        const spy = spyOn(getWindow().SVGGraphicsElement.prototype, 'getScreenCTM');\n        const svg = SVG().nested();\n        svg.screenCTM();\n        expect(spy).toHaveBeenCalled();\n      });","file":"spec/types/Matrix.js","skipped":false,"dir":"spec"},{"name":"parses flat arrays correctly","suites":["PathArray.js"],"line":11,"updatePoint":{"line":11,"column":34,"index":446},"code":"  it('parses flat arrays correctly', () => {\n    const arr = new PathArray(['M', 0, 0, 'L', 100, 100, 'z']);\n    expect(arr.toString()).toBe('M0 0L100 100Z ');\n  });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"parses nested arrays correctly","suites":["PathArray.js"],"line":15,"updatePoint":{"line":15,"column":36,"index":614},"code":"  it('parses nested arrays correctly', () => {\n    const arr = new PathArray([['M', 0, 0], ['L', 100, 100], ['z']]);\n    expect(arr.toString()).toBe('M0 0L100 100Z ');\n  });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"returns the valueOf when PathArray is given","suites":["PathArray.js"],"line":21,"updatePoint":{"line":21,"column":49,"index":888},"code":"  it('returns the valueOf when PathArray is given', () => {\n    const p = new PathArray('m10 10 h 80 v 80 h -80 l 300 400 z');\n    expect(new PathArray(p)).toEqual(p);\n  });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"moves all points in a straight path","suites":["PathArray.js","move()"],"line":26,"updatePoint":{"line":26,"column":43,"index":1085},"code":"    it('moves all points in a straight path', () => {\n      expect(p1.move(100, 200).toString()).toBe('M100 200H180V280H100L400 680Z ');\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"moves all points in a curved path","suites":["PathArray.js","move()"],"line":29,"updatePoint":{"line":29,"column":41,"index":1228},"code":"    it('moves all points in a curved path', () => {\n      expect(p2.move(100, 200).toString()).toBe('M100 200C140 210 165 210 195 280S345 430 375 360T675 660Q727 670 770 740Z ');\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"moves all points in a arc path","suites":["PathArray.js","move()"],"line":32,"updatePoint":{"line":32,"column":38,"index":1412},"code":"    it('moves all points in a arc path', () => {\n      expect(p3.move(100, 200).toString()).toBe('M100 200A45 45 0 0 0 145 245L145 200Z ');\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"does nothing if passed number is not a number","suites":["PathArray.js","move()"],"line":35,"updatePoint":{"line":35,"column":53,"index":1575},"code":"    it('does nothing if passed number is not a number', () => {\n      expect(p3.move()).toEqual(p3);\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"resizes all points in a straight path","suites":["PathArray.js","size()"],"line":40,"updatePoint":{"line":40,"column":45,"index":1711},"code":"    it('resizes all points in a straight path', () => {\n      expect(p1.size(600, 200).toString()).toBe('M10 10H170V43.333333333333336H10L610 210Z ');\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"resizes all points in a curved path","suites":["PathArray.js","size()"],"line":43,"updatePoint":{"line":43,"column":43,"index":1868},"code":"    it('resizes all points in a curved path', () => {\n      expect(p2.size(600, 200).toString()).toBe('M10 80C45.82089552238806 83.70370370370371 68.2089552238806 83.70370370370371 95.07462686567165 109.62962962962963S229.40298507462686 165.1851851851852 256.2686567164179 139.25925925925927T524.9253731343283 250.37037037037038Q571.4925373134329 254.07407407407408 610 280Z ');\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"resizes all points in a arc path","suites":["PathArray.js","size()"],"line":46,"updatePoint":{"line":46,"column":40,"index":2252},"code":"    it('resizes all points in a arc path', () => {\n      const expected = [['M', 80, 80], ['A', 600, 200, 0, 0, 0, 680, 280], ['L', 680, 80], ['Z']];\n      const toBeTested = p3.size(600, 200);\n      for (let i = toBeTested.length; i--;) {\n        expect(toBeTested[i].shift().toUpperCase()).toBe(expected[i].shift().toUpperCase());\n        for (let j = toBeTested[i].length; j--;) {\n          expect(toBeTested[i][j]).toBeCloseTo(expected[i][j]);\n        }\n      }\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"calculates the bounding box of the PathArray","suites":["PathArray.js","bbox()"],"line":58,"updatePoint":{"line":58,"column":52,"index":2773},"code":"    it('calculates the bounding box of the PathArray', () => {\n      const box = new PathArray('M0 0 L 10 10').bbox();\n      expect(box).toEqual(new Box(0, 0, 10, 10));\n    });","file":"spec/types/PathArray.js","skipped":false,"dir":"spec"},{"name":"creates a new point with default values","suites":["Point.js","initialization","without a source"],"line":11,"updatePoint":{"line":11,"column":49,"index":349},"code":"      it('creates a new point with default values', () => {\n        expect(point.x).toBe(0);\n        expect(point.y).toBe(0);\n      });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"creates a point with given values","suites":["Point.js","initialization","with x and y given"],"line":17,"updatePoint":{"line":17,"column":43,"index":530},"code":"      it('creates a point with given values', () => {\n        var point = new Point(2, 4);\n        expect(point.x).toBe(2);\n        expect(point.y).toBe(4);\n      });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"sets the y value to 0","suites":["Point.js","initialization","with only x given"],"line":24,"updatePoint":{"line":24,"column":31,"index":735},"code":"      it('sets the y value to 0', () => {\n        var point = new Point(7);\n        expect(point.x).toBe(7);\n        expect(point.y).toBe(0);\n      });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"creates a point from array","suites":["Point.js","initialization","with array given"],"line":31,"updatePoint":{"line":31,"column":36,"index":941},"code":"      it('creates a point from array', () => {\n        var point = new Point([2, 4]);\n        expect(point.x).toBe(2);\n        expect(point.y).toBe(4);\n      });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"creates a point from object","suites":["Point.js","initialization","with object given"],"line":38,"updatePoint":{"line":38,"column":37,"index":1154},"code":"      it('creates a point from object', () => {\n        var point = new Point({\n          x: 2,\n          y: 4\n        });\n        expect(point.x).toBe(2);\n        expect(point.y).toBe(4);\n      });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"creates a point from Point","suites":["Point.js","initialization","with Point given"],"line":48,"updatePoint":{"line":48,"column":36,"index":1401},"code":"      it('creates a point from Point', () => {\n        var point = new Point(new Point(2, 4));\n        expect(point.x).toBe(2);\n        expect(point.y).toBe(4);\n      });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"transforms a point with a matrix","suites":["Point.js","transform()"],"line":56,"updatePoint":{"line":56,"column":40,"index":1624},"code":"    it('transforms a point with a matrix', () => {\n      expect(new Point().transform(new Matrix({\n        translate: [10, 10]\n      }))).toEqual(new Point(10, 10));\n    });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"transforms a point with a transformation object","suites":["Point.js","transform()"],"line":61,"updatePoint":{"line":61,"column":55,"index":1813},"code":"    it('transforms a point with a transformation object', () => {\n      expect(new Point().transform({\n        translate: [10, 10]\n      })).toEqual(new Point(10, 10));\n    });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"returns cloned point","suites":["Point.js","clone()"],"line":68,"updatePoint":{"line":68,"column":28,"index":1999},"code":"    it('returns cloned point', () => {\n      var point1 = new Point(1, 1);\n      var point2 = point1.clone();\n      expect(point1).toEqual(point2);\n      expect(point1).not.toBe(point2);\n    });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"creates an array representation of Point","suites":["Point.js","toArray()"],"line":76,"updatePoint":{"line":76,"column":48,"index":2252},"code":"    it('creates an array representation of Point', () => {\n      const p = new Point(1, 2);\n      expect(p.toArray()).toEqual([1, 2]);\n    });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"transforms a screen point into the coordinate system of the element","suites":["Point.js","Element","point()"],"line":83,"updatePoint":{"line":83,"column":77,"index":2492},"code":"      it('transforms a screen point into the coordinate system of the element', () => {\n        const rect = new Rect();\n        spyOn(rect, 'screenCTM').and.callFake(() => new Matrix(1, 0, 0, 1, 20, 20));\n        expect(rect.point({\n          x: 10,\n          y: 10\n        })).toEqual(new Point(-10, -10));\n      });","file":"spec/types/Point.js","skipped":false,"dir":"spec"},{"name":"parses a string to a point array","suites":["PointArray.js","()"],"line":7,"updatePoint":{"line":7,"column":40,"index":244},"code":"    it('parses a string to a point array', () => {\n      var array = new PointArray('0,1 -.05,7.95 1000.0001,-200.222');\n      expect(array.valueOf()).toEqual([[0, 1], [-0.05, 7.95], [1000.0001, -200.222]]);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses a points array correctly to string","suites":["PointArray.js","()"],"line":11,"updatePoint":{"line":11,"column":49,"index":469},"code":"    it('parses a points array correctly to string', () => {\n      var array = new PointArray([[0, 0.15], [-100, -3.141592654], [50, 100]]);\n      expect(array + '').toBe('0,0.15 -100,-3.141592654 50,100');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses a flat array of x/y coordinates to a point array","suites":["PointArray.js","()"],"line":15,"updatePoint":{"line":15,"column":63,"index":697},"code":"    it('parses a flat array of x/y coordinates to a point array', () => {\n      var array = new PointArray([1, 4, 5, 68, 12, 24]);\n      expect(array.valueOf()).toEqual([[1, 4], [5, 68], [12, 24]]);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses points with space delimitered x/y coordinates","suites":["PointArray.js","()"],"line":19,"updatePoint":{"line":19,"column":60,"index":901},"code":"    it('parses points with space delimitered x/y coordinates', () => {\n      var array = new PointArray('221.08 191.79 0.46 191.79 0.46 63.92 63.8 0.46 284.46 0.46 284.46 128.37 221.08 191.79');\n      expect(array + '').toBe('221.08,191.79 0.46,191.79 0.46,63.92 63.8,0.46 284.46,0.46 284.46,128.37 221.08,191.79');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses points with comma delimitered x/y coordinates","suites":["PointArray.js","()"],"line":23,"updatePoint":{"line":23,"column":60,"index":1225},"code":"    it('parses points with comma delimitered x/y coordinates', () => {\n      var array = new PointArray('221.08,191.79,0.46,191.79,0.46,63.92,63.8,0.46,284.46,0.46,284.46,128.37,221.08,191.79');\n      expect(array + '').toBe('221.08,191.79 0.46,191.79 0.46,63.92 63.8,0.46 284.46,0.46 284.46,128.37 221.08,191.79');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses points with comma and space delimitered x/y coordinates","suites":["PointArray.js","()"],"line":27,"updatePoint":{"line":27,"column":70,"index":1559},"code":"    it('parses points with comma and space delimitered x/y coordinates', () => {\n      var array = new PointArray('221.08, 191.79, 0.46, 191.79, 0.46, 63.92, 63.8, 0.46, 284.46, 0.46, 284.46, 128.37, 221.08, 191.79');\n      expect(array + '').toBe('221.08,191.79 0.46,191.79 0.46,63.92 63.8,0.46 284.46,0.46 284.46,128.37 221.08,191.79');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses points with space and comma delimitered x/y coordinates","suites":["PointArray.js","()"],"line":31,"updatePoint":{"line":31,"column":70,"index":1906},"code":"    it('parses points with space and comma delimitered x/y coordinates', () => {\n      var array = new PointArray('221.08 ,191.79 ,0.46 ,191.79 ,0.46 ,63.92 ,63.8 ,0.46 ,284.46 ,0.46 ,284.46 ,128.37 ,221.08 ,191.79');\n      expect(array + '').toBe('221.08,191.79 0.46,191.79 0.46,63.92 63.8,0.46 284.46,0.46 284.46,128.37 221.08,191.79');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses points with redundant spaces at the end","suites":["PointArray.js","()"],"line":35,"updatePoint":{"line":35,"column":54,"index":2237},"code":"    it('parses points with redundant spaces at the end', () => {\n      var array = new PointArray('2176.6,1708.8 2176.4,1755.8 2245.8,1801.5 2297,1787.8  ');\n      expect(array + '').toBe('2176.6,1708.8 2176.4,1755.8 2245.8,1801.5 2297,1787.8');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses points with space delimitered x/y coordinates - even with leading or trailing space","suites":["PointArray.js","()"],"line":39,"updatePoint":{"line":39,"column":98,"index":2535},"code":"    it('parses points with space delimitered x/y coordinates - even with leading or trailing space', () => {\n      var array = new PointArray('  1 2 3 4  ');\n      expect(array + '').toBe('1,2 3,4');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses odd number of points with space delimitered x/y coordinates and silently remove the odd point","suites":["PointArray.js","()"],"line":43,"updatePoint":{"line":43,"column":108,"index":2753},"code":"    it('parses odd number of points with space delimitered x/y coordinates and silently remove the odd point', () => {\n      // this  is according to spec: https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n      var array = new PointArray('1 2 3');\n      expect(array + '').toBe('1,2');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"parses odd number of points in a flat array of x/y coordinates and silently remove the odd point","suites":["PointArray.js","()"],"line":48,"updatePoint":{"line":48,"column":104,"index":3050},"code":"    it('parses odd number of points in a flat array of x/y coordinates and silently remove the odd point', () => {\n      // this  is according to spec: https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n      var array = new PointArray([1, 2, 3]);\n      expect(array.valueOf()).toEqual([[1, 2]]);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"moves the whole array by the passed value","suites":["PointArray.js","move()"],"line":55,"updatePoint":{"line":55,"column":49,"index":3340},"code":"    it('moves the whole array by the passed value', () => {\n      const arr = new PointArray([1, 2, 3, 4]).move(10, 10);\n      expect(arr.toArray()).toEqual([10, 10, 12, 12]);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"does nothing if values not numbers","suites":["PointArray.js","move()"],"line":59,"updatePoint":{"line":59,"column":42,"index":3517},"code":"    it('does nothing if values not numbers', () => {\n      const arr = new PointArray([1, 2, 3, 4]).move();\n      expect(arr.toArray()).toEqual([1, 2, 3, 4]);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"correctly sizes the points over the whole area","suites":["PointArray.js","size()"],"line":65,"updatePoint":{"line":65,"column":54,"index":3731},"code":"    it('correctly sizes the points over the whole area', () => {\n      var array = new PointArray([10, 10, 20, 20, 30, 30]);\n      expect(array.size(60, 60).valueOf()).toEqual([[10, 10], [40, 40], [70, 70]]);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"let coordinates untouched when width/height is zero","suites":["PointArray.js","size()"],"line":69,"updatePoint":{"line":69,"column":59,"index":3953},"code":"    it('let coordinates untouched when width/height is zero', () => {\n      var array = new PointArray([10, 10, 10, 20, 10, 30]);\n      expect(array.size(60, 60).valueOf()).toEqual([[10, 10], [10, 40], [10, 70]]);\n      array = new PointArray([10, 10, 20, 10, 30, 10]);\n      expect(array.size(60, 60).valueOf()).toEqual([[10, 10], [40, 10], [70, 10]]);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"converts to comma sepereated list","suites":["PointArray.js","toString()"],"line":77,"updatePoint":{"line":77,"column":41,"index":4336},"code":"    it('converts to comma sepereated list', () => {\n      const square = new PointArray(squareString);\n      expect(square.toString()).toEqual(squareString);\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"returns an object which can be passed to a line as point attributes","suites":["PointArray.js","toLine"],"line":83,"updatePoint":{"line":83,"column":75,"index":4571},"code":"    it('returns an object which can be passed to a line as point attributes', () => {\n      const arr = new PointArray([1, 2, 3, 4]);\n      expect(arr.toLine()).toEqual({\n        x1: 1,\n        y1: 2,\n        x2: 3,\n        y2: 4\n      });\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"translates correctly","suites":["PointArray.js","transform()"],"line":94,"updatePoint":{"line":94,"column":28,"index":4812},"code":"    it('translates correctly', () => {\n      const square = new PointArray(squareString);\n      const translation = new Matrix({\n        translate: [2, 1]\n      });\n      const newSquare = square.transform(translation);\n      expect(newSquare.toString()).toEqual('2,1 3,1 3,2 2,2');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"transforms like Point","suites":["PointArray.js","transform()"],"line":102,"updatePoint":{"line":102,"column":29,"index":5104},"code":"    it('transforms like Point', () => {\n      const square = new PointArray(squareString);\n      const matrix = new Matrix(1, 2, 3, 4, 5, 6);\n      const newSquare = square.transform(matrix);\n      for (let i = 0; i < square.length; i++) {\n        const squarePoint = new Point(square[i]);\n        const newSquarePoint = new Point(newSquare[i]);\n        expect(squarePoint.transform(matrix)).toEqual(newSquarePoint);\n      }\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"works with transform object instead of matrix","suites":["PointArray.js","transform()"],"line":112,"updatePoint":{"line":112,"column":53,"index":5561},"code":"    it('works with transform object instead of matrix', () => {\n      const square = new PointArray(squareString);\n      const newSquare = square.transform({\n        translate: [2, 1]\n      });\n      expect(newSquare.toString()).toEqual('2,1 3,1 3,2 2,2');\n    });","file":"spec/types/PointArray.js","skipped":false,"dir":"spec"},{"name":"preallocates memory if only number is passed","suites":["SVGArray.js","()"],"line":9,"updatePoint":{"line":9,"column":52,"index":263},"code":"    it('preallocates memory if only number is passed', () => {\n      const arr = new SVGArray(1);\n      expect(arr.length).toBe(1);\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"parses a matrix array correctly to string","suites":["SVGArray.js","()"],"line":13,"updatePoint":{"line":13,"column":49,"index":400},"code":"    it('parses a matrix array correctly to string', () => {\n      const array = new SVGArray([0.343, 0.669, 0.119, 0, 0, 0.249, -0.626, 0.130, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0.000, 0.000, 0.000, 1, -0]);\n      expect(array + '').toBe('0.343 0.669 0.119 0 0 0.249 -0.626 0.13 0 0 0.172 0.334 0.111 0 0 0 0 0 1 0');\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"parses space separated string and converts it to array","suites":["SVGArray.js","()"],"line":17,"updatePoint":{"line":17,"column":62,"index":737},"code":"    it('parses space separated string and converts it to array', () => {\n      expect(new SVGArray('1 2 3 4').valueOf()).toEqual([1, 2, 3, 4]);\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"parses comma separated string and converts it to array","suites":["SVGArray.js","()"],"line":20,"updatePoint":{"line":20,"column":62,"index":889},"code":"    it('parses comma separated string and converts it to array', () => {\n      expect(new SVGArray('1,2,3,4').valueOf()).toEqual([1, 2, 3, 4]);\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"reverses the array","suites":["SVGArray.js","reverse()"],"line":25,"updatePoint":{"line":25,"column":26,"index":1043},"code":"    it('reverses the array', () => {\n      const array = new SVGArray([1, 2, 3, 4, 5]).reverse();\n      expect(array.valueOf()).toEqual([5, 4, 3, 2, 1]);\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"returns itself","suites":["SVGArray.js","reverse()"],"line":29,"updatePoint":{"line":29,"column":22,"index":1201},"code":"    it('returns itself', () => {\n      const array = new SVGArray();\n      expect(array.reverse()).toBe(array);\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"creates a shallow clone of the array","suites":["SVGArray.js","clone()"],"line":35,"updatePoint":{"line":35,"column":44,"index":1379},"code":"    it('creates a shallow clone of the array', () => {\n      const array = new SVGArray([1, 2, 3, 4, 5]);\n      const clone = array.clone();\n      expect(array).toEqual(clone);\n      expect(array).not.toBe(clone);\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"also works with PointArray (one depths clone)","suites":["SVGArray.js","clone()"],"line":41,"updatePoint":{"line":41,"column":53,"index":1610},"code":"    it('also works with PointArray (one depths clone)', () => {\n      const array = new PointArray([[1, 2], [3, 4], [5, 6]]);\n      const clone = array.clone();\n      expect(array).toEqual(clone);\n      expect(array).not.toBe(clone);\n      for (let i = array.length; i--;) {\n        expect(array[i]).not.toBe(clone[i]);\n      }\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"also works with PathArray (one depths clone)","suites":["SVGArray.js","clone()"],"line":50,"updatePoint":{"line":50,"column":52,"index":1945},"code":"    it('also works with PathArray (one depths clone)', () => {\n      const array = new PathArray([['M', 1, 2], ['L', 3, 4], ['L', 5, 6]]);\n      const clone = array.clone();\n      expect(array).toEqual(clone);\n      expect(array).not.toBe(clone);\n      for (let i = array.length; i--;) {\n        expect(array[i]).not.toBe(clone[i]);\n      }\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"creates a Set from the Array","suites":["SVGArray.js","toSet()"],"line":61,"updatePoint":{"line":61,"column":36,"index":2314},"code":"    it('creates a Set from the Array', () => {\n      const set = new SVGArray([1, 1, 2, 3]).toSet();\n      expect(set).toEqual(any(Set));\n      expect(set).toEqual(new Set([1, 2, 3]));\n    });","file":"spec/types/SVGArray.js","skipped":false,"dir":"spec"},{"name":"is zero","suites":["Number.js","()"],"line":13,"updatePoint":{"line":13,"column":15,"index":286},"code":"    it('is zero', () => {\n      expect(number.value).toBe(0);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"has a blank unit","suites":["Number.js","()"],"line":16,"updatePoint":{"line":16,"column":24,"index":365},"code":"    it('has a blank unit', () => {\n      expect(number.unit).toBe('');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"accepts the unit as a second argument","suites":["Number.js","()"],"line":19,"updatePoint":{"line":19,"column":45,"index":465},"code":"    it('accepts the unit as a second argument', () => {\n      number = new SVGNumber(30, '%');\n      expect(number.value).toBe(30);\n      expect(number.unit).toBe('%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"parses a pixel value","suites":["Number.js","()"],"line":24,"updatePoint":{"line":24,"column":28,"index":625},"code":"    it('parses a pixel value', () => {\n      number = new SVGNumber('20px');\n      expect(number.value).toBe(20);\n      expect(number.unit).toBe('px');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"parses a percent value","suites":["Number.js","()"],"line":29,"updatePoint":{"line":29,"column":30,"index":787},"code":"    it('parses a percent value', () => {\n      number = new SVGNumber('99%');\n      expect(number.value).toBe(0.99);\n      expect(number.unit).toBe('%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"parses a seconds value","suites":["Number.js","()"],"line":34,"updatePoint":{"line":34,"column":30,"index":949},"code":"    it('parses a seconds value', () => {\n      number = new SVGNumber('2s');\n      expect(number.value).toBe(2000);\n      expect(number.unit).toBe('s');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"parses a negative percent value","suites":["Number.js","()"],"line":39,"updatePoint":{"line":39,"column":39,"index":1119},"code":"    it('parses a negative percent value', () => {\n      number = new SVGNumber('-89%');\n      expect(number.value).toBe(-0.89);\n      expect(number.unit).toBe('%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"falls back to 0 if given value is NaN","suites":["Number.js","()"],"line":44,"updatePoint":{"line":44,"column":45,"index":1298},"code":"    it('falls back to 0 if given value is NaN', () => {\n      number = new SVGNumber(NaN);\n      expect(number.value).toBe(0);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"falls back to maximum value if given number is positive infinite","suites":["Number.js","()"],"line":48,"updatePoint":{"line":48,"column":72,"index":1460},"code":"    it('falls back to maximum value if given number is positive infinite', () => {\n      number = new SVGNumber(1.7976931348623157E+10308);\n      expect(number.value).toBe(3.4e+38);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"falls back to minimum value if given number is negative infinite","suites":["Number.js","()"],"line":52,"updatePoint":{"line":52,"column":72,"index":1650},"code":"    it('falls back to minimum value if given number is negative infinite', () => {\n      number = new SVGNumber(-1.7976931348623157E+10308);\n      expect(number.value).toBe(-3.4e+38);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"converts the number to a string","suites":["Number.js","toString()"],"line":58,"updatePoint":{"line":58,"column":39,"index":1848},"code":"    it('converts the number to a string', () => {\n      expect(number.toString()).toBe('0');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"appends the unit","suites":["Number.js","toString()"],"line":61,"updatePoint":{"line":61,"column":24,"index":1934},"code":"    it('appends the unit', () => {\n      number.value = 1.21;\n      number.unit = 'px';\n      expect(number.toString()).toBe('1.21px');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"converts percent values properly","suites":["Number.js","toString()"],"line":66,"updatePoint":{"line":66,"column":40,"index":2094},"code":"    it('converts percent values properly', () => {\n      number.value = 1.36;\n      number.unit = '%';\n      expect(number.toString()).toBe('136%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"converts second values properly","suites":["Number.js","toString()"],"line":71,"updatePoint":{"line":71,"column":39,"index":2250},"code":"    it('converts second values properly', () => {\n      number.value = 2500;\n      number.unit = 's';\n      expect(number.toString()).toBe('2.5s');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"returns a numeric value for default units","suites":["Number.js","valueOf()"],"line":78,"updatePoint":{"line":78,"column":49,"index":2454},"code":"    it('returns a numeric value for default units', () => {\n      expect(typeof number.valueOf()).toBe('number');\n      number = new SVGNumber('12');\n      expect(typeof number.valueOf()).toBe('number');\n      number = new SVGNumber(13);\n      expect(typeof number.valueOf()).toBe('number');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"returns a numeric value for pixel units","suites":["Number.js","valueOf()"],"line":85,"updatePoint":{"line":85,"column":47,"index":2752},"code":"    it('returns a numeric value for pixel units', () => {\n      number = new SVGNumber('10px');\n      expect(typeof number.valueOf()).toBe('number');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"returns a numeric value for percent units","suites":["Number.js","valueOf()"],"line":89,"updatePoint":{"line":89,"column":49,"index":2912},"code":"    it('returns a numeric value for percent units', () => {\n      number = new SVGNumber('20%');\n      expect(typeof number.valueOf()).toBe('number');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"converts to a primitive when multiplying","suites":["Number.js","valueOf()"],"line":93,"updatePoint":{"line":93,"column":48,"index":3070},"code":"    it('converts to a primitive when multiplying', () => {\n      number.value = 80;\n      expect(number * 4).toBe(320);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"returns a new instance","suites":["Number.js","plus()"],"line":99,"updatePoint":{"line":99,"column":30,"index":3215},"code":"    it('returns a new instance', () => {\n      expect(number.plus(4.5)).not.toBe(number);\n      expect(number.plus(4.5)).toEqual(any(SVGNumber));\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"adds a given number","suites":["Number.js","plus()"],"line":103,"updatePoint":{"line":103,"column":27,"index":3366},"code":"    it('adds a given number', () => {\n      expect(number.plus(3.5).valueOf()).toBe(3.5);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"adds a given percentage value","suites":["Number.js","plus()"],"line":106,"updatePoint":{"line":106,"column":37,"index":3474},"code":"    it('adds a given percentage value', () => {\n      expect(number.plus('225%').valueOf()).toBe(2.25);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"adds a given pixel value","suites":["Number.js","plus()"],"line":109,"updatePoint":{"line":109,"column":32,"index":3581},"code":"    it('adds a given pixel value', () => {\n      expect(number.plus('83px').valueOf()).toBe(83);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of this number as the unit of the returned number by default","suites":["Number.js","plus()"],"line":112,"updatePoint":{"line":112,"column":81,"index":3735},"code":"    it('use the unit of this number as the unit of the returned number by default', () => {\n      expect(new SVGNumber('12s').plus('3%').unit).toBe('s');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of the passed number as the unit of the returned number when this number as no unit","suites":["Number.js","plus()"],"line":115,"updatePoint":{"line":115,"column":104,"index":3920},"code":"    it('use the unit of the passed number as the unit of the returned number when this number as no unit', () => {\n      expect(number.plus('15%').unit).toBe('%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"subtracts a given number","suites":["Number.js","minus()"],"line":120,"updatePoint":{"line":120,"column":32,"index":4056},"code":"    it('subtracts a given number', () => {\n      expect(number.minus(3.7).valueOf()).toBe(-3.7);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"subtracts a given percentage value","suites":["Number.js","minus()"],"line":123,"updatePoint":{"line":123,"column":42,"index":4171},"code":"    it('subtracts a given percentage value', () => {\n      expect(number.minus('223%').valueOf()).toBe(-2.23);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"subtracts a given pixel value","suites":["Number.js","minus()"],"line":126,"updatePoint":{"line":126,"column":37,"index":4285},"code":"    it('subtracts a given pixel value', () => {\n      expect(number.minus('85px').valueOf()).toBe(-85);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of this number as the unit of the returned number by default","suites":["Number.js","minus()"],"line":129,"updatePoint":{"line":129,"column":81,"index":4441},"code":"    it('use the unit of this number as the unit of the returned number by default', () => {\n      expect(new SVGNumber('12s').minus('3%').unit).toBe('s');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of the passed number as the unit of the returned number when this number as no unit","suites":["Number.js","minus()"],"line":132,"updatePoint":{"line":132,"column":104,"index":4627},"code":"    it('use the unit of the passed number as the unit of the returned number when this number as no unit', () => {\n      expect(number.minus('15%').unit).toBe('%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"multiplies with a given number","suites":["Number.js","times()"],"line":140,"updatePoint":{"line":140,"column":38,"index":4832},"code":"    it('multiplies with a given number', () => {\n      expect(number.times(3).valueOf()).toBe(12);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"multiplies with a given percentage value","suites":["Number.js","times()"],"line":143,"updatePoint":{"line":143,"column":48,"index":4949},"code":"    it('multiplies with a given percentage value', () => {\n      expect(number.times('110%').valueOf()).toBe(4.4);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"multiplies with a given pixel value","suites":["Number.js","times()"],"line":146,"updatePoint":{"line":146,"column":43,"index":5067},"code":"    it('multiplies with a given pixel value', () => {\n      expect(number.times('85px').valueOf()).toBe(340);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of this number as the unit of the returned number by default","suites":["Number.js","times()"],"line":149,"updatePoint":{"line":149,"column":81,"index":5223},"code":"    it('use the unit of this number as the unit of the returned number by default', () => {\n      expect(new SVGNumber('12s').times('3%').unit).toBe('s');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of the passed number as the unit of the returned number when this number as no unit","suites":["Number.js","times()"],"line":152,"updatePoint":{"line":152,"column":104,"index":5409},"code":"    it('use the unit of the passed number as the unit of the returned number when this number as no unit', () => {\n      expect(number.times('15%').unit).toBe('%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"divides by a given number","suites":["Number.js","divide()"],"line":160,"updatePoint":{"line":160,"column":33,"index":5611},"code":"    it('divides by a given number', () => {\n      expect(number.divide(3).valueOf()).toBe(30);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"divides by a given percentage value","suites":["Number.js","divide()"],"line":163,"updatePoint":{"line":163,"column":43,"index":5724},"code":"    it('divides by a given percentage value', () => {\n      expect(number.divide('3000%').valueOf()).toBe(3);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"divides by a given pixel value","suites":["Number.js","divide()"],"line":166,"updatePoint":{"line":166,"column":38,"index":5837},"code":"    it('divides by a given pixel value', () => {\n      expect(number.divide('45px').valueOf()).toBe(2);\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of this number as the unit of the returned number by default","suites":["Number.js","divide()"],"line":169,"updatePoint":{"line":169,"column":81,"index":5992},"code":"    it('use the unit of this number as the unit of the returned number by default', () => {\n      expect(new SVGNumber('12s').divide('3%').unit).toBe('s');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"use the unit of the passed number as the unit of the returned number when this number as no unit","suites":["Number.js","divide()"],"line":172,"updatePoint":{"line":172,"column":104,"index":6179},"code":"    it('use the unit of the passed number as the unit of the returned number when this number as no unit', () => {\n      expect(number.divide('15%').unit).toBe('%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"changes the unit of the number","suites":["Number.js","convert()"],"line":177,"updatePoint":{"line":177,"column":38,"index":6325},"code":"    it('changes the unit of the number', () => {\n      const number = new SVGNumber('12px').convert('%');\n      expect(number.toString()).toBe('1200%');\n    });","file":"spec/types/SVGNumber.js","skipped":false,"dir":"spec"},{"name":"creates a node of the specified type","suites":["adopter.js","create()"],"line":18,"updatePoint":{"line":18,"column":44,"index":681},"code":"    it('creates a node of the specified type', () => {\n      const rect = create('rect');\n      expect(rect).toEqual(any(Node));\n      expect(rect.nodeName).toBe('rect');\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates a root-object when no argument given","suites":["adopter.js","makeInstance()"],"line":33,"updatePoint":{"line":33,"column":52,"index":1114},"code":"    it('creates a root-object when no argument given', () => {\n      const doc = makeInstance();\n      expect(doc).toEqual(any(getClass(root)));\n      expect(doc).toEqual(any(Element));\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"returns a given svg.js object directly","suites":["adopter.js","makeInstance()"],"line":38,"updatePoint":{"line":38,"column":46,"index":1302},"code":"    it('returns a given svg.js object directly', () => {\n      const rect = new Rect();\n      const samerect = makeInstance(rect);\n      expect(rect).toBe(samerect);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates an element from passed svg string","suites":["adopter.js","makeInstance()"],"line":43,"updatePoint":{"line":43,"column":49,"index":1479},"code":"    it('creates an element from passed svg string', () => {\n      const rect = makeInstance('<rect width=\"200px\" />');\n      expect(adoptSpy).toHaveBeenCalledWith(any(Node));\n      expect(adoptSpy).toHaveBeenCalledWith(objectContaining({\n        nodeName: 'rect'\n      }));\n      expect(rect).toEqual(any(Rect));\n      expect(rect.parent()).toBe(null);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates an element in the html namespace from passed html string","suites":["adopter.js","makeInstance()"],"line":52,"updatePoint":{"line":52,"column":72,"index":1863},"code":"    it('creates an element in the html namespace from passed html string', () => {\n      const div = makeInstance('<div />', true);\n      expect(adoptSpy).toHaveBeenCalledWith(any(Node));\n      expect(adoptSpy).toHaveBeenCalledWith(objectContaining({\n        nodeName: 'DIV',\n        namespaceURI: 'http://www.w3.org/1999/xhtml'\n      }));\n      expect(div).toEqual(any(Dom));\n      expect(div.parent()).toBe(null);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"does not have its wrapper attached","suites":["adopter.js","makeInstance()"],"line":62,"updatePoint":{"line":62,"column":42,"index":2257},"code":"    it('does not have its wrapper attached', () => {\n      const rect = makeInstance('<rect width=\"200px\" />');\n      expect(rect.parent()).toBe(null);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"searches for element in dom if selector given","suites":["adopter.js","makeInstance()"],"line":66,"updatePoint":{"line":66,"column":53,"index":2428},"code":"    it('searches for element in dom if selector given', () => {\n      buildFixtures();\n      const path = globals.window.document.getElementById('lineAB');\n      const pathInst = makeInstance('#lineAB');\n      const noEl = makeInstance('#doesNotExist');\n      expect(adoptSpy).toHaveBeenCalledWith(path);\n      expect(adoptSpy).toHaveBeenCalledWith(null);\n      expect(pathInst).toEqual(any(Path));\n      expect(noEl).toBe(null);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"calls adopt when passed a node","suites":["adopter.js","makeInstance()"],"line":76,"updatePoint":{"line":76,"column":38,"index":2851},"code":"    it('calls adopt when passed a node', () => {\n      const rect = makeInstance(create('rect'));\n      expect(adoptSpy).toHaveBeenCalledWith(any(Node));\n      expect(adoptSpy).toHaveBeenCalledWith(objectContaining({\n        nodeName: 'rect'\n      }));\n      expect(rect).toEqual(any(Rect));\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"returns null of passed node is null","suites":["adopter.js","adopt()"],"line":86,"updatePoint":{"line":86,"column":43,"index":3192},"code":"    it('returns null of passed node is null', () => {\n      expect(adopt(null)).toBe(null);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"returns instance from node if present","suites":["adopter.js","adopt()"],"line":89,"updatePoint":{"line":89,"column":45,"index":3294},"code":"    it('returns instance from node if present', () => {\n      const rect = new Rect();\n      expect(adopt(rect.node)).toBe(rect);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates Fragment when document fragment is passed","suites":["adopter.js","adopt()"],"line":93,"updatePoint":{"line":93,"column":57,"index":3444},"code":"    it('creates Fragment when document fragment is passed', () => {\n      const frag = getWindow().document.createDocumentFragment();\n      expect(adopt(frag)).toEqual(any(Fragment));\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates instance when node without instance is passed","suites":["adopter.js","adopt()"],"line":97,"updatePoint":{"line":97,"column":61,"index":3640},"code":"    it('creates instance when node without instance is passed', () => {\n      const rect = new Rect();\n      const node = rect.node;\n      delete node.instance;\n      expect(adopt(node)).toEqual(any(Rect));\n      expect(adopt(node)).not.toBe(rect);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates instance when node without instance is passed with gradients","suites":["adopter.js","adopt()"],"line":104,"updatePoint":{"line":104,"column":76,"index":3912},"code":"    it('creates instance when node without instance is passed with gradients', () => {\n      const gradient = new Gradient('linear');\n      const node = gradient.node;\n      delete node.instance;\n      expect(adopt(node)).toEqual(any(Gradient));\n      expect(adopt(node).type).toBe('linearGradient');\n      expect(adopt(node)).not.toBe(gradient);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates Dom instances for unknown nodes","suites":["adopter.js","adopt()"],"line":112,"updatePoint":{"line":112,"column":47,"index":4238},"code":"    it('creates Dom instances for unknown nodes', () => {\n      const div = getWindow().document.createElement('div');\n      expect(adopt(div)).toEqual(any(Dom));\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"creates a node of node argument is null","suites":["adopter.js","nodeOrNew()"],"line":118,"updatePoint":{"line":118,"column":47,"index":4449},"code":"    it('creates a node of node argument is null', () => {\n      const rect = nodeOrNew('rect', null);\n      expect(rect).toEqual(any(Node));\n      expect(rect.nodeName).toBe('rect');\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"returns the node if one is passed","suites":["adopter.js","nodeOrNew()"],"line":123,"updatePoint":{"line":123,"column":41,"index":4634},"code":"    it('returns the node if one is passed', () => {\n      const div = globals.window.document.createElement('div');\n      const node = nodeOrNew('something', div);\n\n      // jasmine chucks on this when using the node directly\n      expect(node.outerHTML).toBe(div.outerHTML);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"sets and gets a class from the class register","suites":["adopter.js","register()/getClass()"],"line":132,"updatePoint":{"line":132,"column":53,"index":4980},"code":"    it('sets and gets a class from the class register', () => {\n      const A = class {};\n      register(A);\n      expect(getClass('A')).toBe(A);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"returns a unique id","suites":["adopter.js","eid()"],"line":139,"updatePoint":{"line":139,"column":27,"index":5142},"code":"    it('returns a unique id', () => {\n      expect(eid('foo')).not.toBe(eid('foo'));\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"assigns a new id if id is present on element","suites":["adopter.js","assignNewId()"],"line":144,"updatePoint":{"line":144,"column":52,"index":5302},"code":"    it('assigns a new id if id is present on element', () => {\n      const rect = new Rect().id('foo');\n      assignNewId(rect.node);\n      expect(rect.id()).not.toBe('foo');\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"does not set id if no id is present on element","suites":["adopter.js","assignNewId()"],"line":149,"updatePoint":{"line":149,"column":54,"index":5487},"code":"    it('does not set id if no id is present on element', () => {\n      const rect = new Rect();\n      assignNewId(rect.node);\n      expect(rect.attr('id')).toBe(undefined);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"recursively sets new ids on children","suites":["adopter.js","assignNewId()"],"line":154,"updatePoint":{"line":154,"column":44,"index":5658},"code":"    it('recursively sets new ids on children', () => {\n      const group = new G().id('foo');\n      const rect = group.rect(100, 100).id('bar');\n      assignNewId(group.node);\n      expect(group.id()).not.toBe('foo');\n      expect(rect.id()).not.toBe('bar');\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"adds all functions in the given object to the target object","suites":["adopter.js","extend()"],"line":163,"updatePoint":{"line":163,"column":67,"index":5985},"code":"    it('adds all functions in the given object to the target object', () => {\n      const A = class {};\n      extend(A, {\n        test() {\n          this.prop = 'test';\n          return this;\n        }\n      });\n      expect(typeof A.prototype.test).toBe('function');\n      expect(new A().test().prop).toBe('test');\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"accepts and extend multiple modules at once","suites":["adopter.js","extend()"],"line":174,"updatePoint":{"line":174,"column":51,"index":6293},"code":"    it('accepts and extend multiple modules at once', () => {\n      const A = class {};\n      const B = class {};\n      const C = class {};\n      extend([A, B, C], {\n        test() {\n          this.prop = 'test';\n          return this;\n        }\n      });\n      expect(typeof A.prototype.test).toBe('function');\n      expect(new A().test().prop).toBe('test');\n      expect(typeof B.prototype.test).toBe('function');\n      expect(new B().test().prop).toBe('test');\n      expect(typeof C.prototype.test).toBe('function');\n      expect(new C().test().prop).toBe('test');\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"wraps a function so that it calls an attr function if an object is passed","suites":["adopter.js","wrapWithAttrCheck()"],"line":193,"updatePoint":{"line":193,"column":81,"index":6947},"code":"    it('wraps a function so that it calls an attr function if an object is passed', () => {\n      const attrSpy = createSpy('attr');\n      const A = class {};\n      extend(A, {\n        test: wrapWithAttrCheck(function () {\n          this.prop = 'test';\n          return this;\n        }),\n        attr: attrSpy\n      });\n      const obj = {};\n      expect(new A().test().prop).toBe('test');\n      expect(attrSpy).not.toHaveBeenCalled();\n      new A().test(obj);\n      expect(attrSpy).toHaveBeenCalledWith(obj);\n    });","file":"spec/utils/adopter.js","skipped":false,"dir":"spec"},{"name":"adds methods for a given type of classes with object given","suites":["methods.js","registerMethods() / getMethodsFor() / addMethodNames / getMethodNames()"],"line":6,"updatePoint":{"line":6,"column":66,"index":324},"code":"    it('adds methods for a given type of classes with object given', () => {\n      const foo = {\n        func1: () => {}\n      };\n      registerMethods({\n        foo\n      });\n      expect(getMethodsFor('foo')).toEqual(foo);\n    });","file":"spec/utils/methods.js","skipped":false,"dir":"spec"},{"name":"adds methods for a given type of classes with 2 parameters given","suites":["methods.js","registerMethods() / getMethodsFor() / addMethodNames / getMethodNames()"],"line":15,"updatePoint":{"line":15,"column":72,"index":563},"code":"    it('adds methods for a given type of classes with 2 parameters given', () => {\n      const foo = {\n        func1: () => {}\n      };\n      registerMethods('foo', foo);\n      expect(getMethodsFor('foo')).toEqual(foo);\n    });","file":"spec/utils/methods.js","skipped":false,"dir":"spec"},{"name":"adds a method name","suites":["methods.js","registerMethods() / getMethodsFor() / addMethodNames / getMethodNames()"],"line":22,"updatePoint":{"line":22,"column":26,"index":745},"code":"    it('adds a method name', () => {\n      registerMethods({\n        bar: {\n          func2: () => {}\n        }\n      });\n      expect(getMethodNames()).toContain('func2');\n    });","file":"spec/utils/methods.js","skipped":false,"dir":"spec"},{"name":"parses all paths correctly","suites":["pathParser.js","pathParser()"],"line":6,"updatePoint":{"line":6,"column":34,"index":201},"code":"    it('parses all paths correctly', () => {\n      expect(pathParser('M2,0a2 2 0 00-2 2a2 2 0 002 2a.5.5 0 011 0z')).toEqual([['M', 2, 0], ['A', 2, 2, 0, 0, 0, 0, 2], ['A', 2, 2, 0, 0, 0, 2, 4], ['A', 0.5, 0.5, 0, 0, 1, 3, 4], ['Z']]);\n      expect(pathParser('M2,0a2 2 0 00-2 2a2 2 0 002 2a.5.5 0 111 0z')).toEqual([['M', 2, 0], ['A', 2, 2, 0, 0, 0, 0, 2], ['A', 2, 2, 0, 0, 0, 2, 4], ['A', 0.5, 0.5, 0, 1, 1, 3, 4], ['Z']]);\n      expect(pathParser('m10 10 h 80 v 80 h -80 l 300 400 z')).toEqual([['M', 10, 10], ['H', 90], ['V', 90], ['H', 10], ['L', 310, 490], ['Z']]);\n      expect(pathParser('m10 80 c 40 10 65 10 95 80 s 150 150 180 80 t 300 300 q 52 10 95 80 z')).toEqual([['M', 10, 80], ['C', 50, 90, 75, 90, 105, 160], ['S', 255, 310, 285, 240], ['T', 585, 540], ['Q', 637, 550, 680, 620], ['Z']]);\n      expect(pathParser('m80 80 A 45 45, 0, 0, 0, 125 125 L 125 80 z')).toEqual([['M', 80, 80], ['A', 45, 45, 0, 0, 0, 125, 125], ['L', 125, 80], ['Z']]);\n      expect(pathParser('M215.458,245.23c0,0,77.403,0,94.274,0S405,216.451,405,138.054S329.581,15,287.9,15c-41.68,0-139.924,0-170.688,0C86.45,15,15,60.65,15,134.084c0,73.434,96.259,112.137,114.122,112.137C146.984,246.221,215.458,245.23,215.458,245.23z')).toEqual([['M', 215.458, 245.23], ['C', 215.458, 245.23, 292.861, 245.23, 309.73199999999997, 245.23], ['S', 405, 216.451, 405, 138.054], ['S', 329.581, 15, 287.9, 15], ['C', 246.21999999999997, 15, 147.97599999999997, 15, 117.21199999999999, 15], ['C', 86.45, 15, 15, 60.65, 15, 134.084], ['C', 15, 207.518, 111.259, 246.221, 129.122, 246.221], ['C', 146.984, 246.221, 215.458, 245.23, 215.458, 245.23], ['Z']]);\n      expect(pathParser('M10 10-45-30.5.5 .89L2e-2.5.5-.5C.5.5.5.5.5.5L-3-4z')).toEqual([['M', 10, 10], ['L', -45, -30.5], ['L', 0.5, 0.89], ['L', 0.02, 0.5], ['L', 0.5, -0.5], ['C', 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], ['L', -3, -4], ['Z']]);\n      expect(pathParser('m 0,0 0,3189 2209,0 0,-3189 -2209,0 z m 154,154 1901,0 0,2881 -1901,0 0,-2881 z')).toEqual([['M', 0, 0], ['L', 0, 3189], ['L', 2209, 3189], ['L', 2209, 0], ['L', 0, 0], ['Z'], ['M', 154, 154], ['L', 2055, 154], ['L', 2055, 3035], ['L', 154, 3035], ['L', 154, 154], ['Z']]);\n      expect(pathParser('m 0,0 a 45 45, 0, 0, 0, 125 125')).toEqual([['M', 0, 0], ['A', 45, 45, 0, 0, 0, 125, 125]]);\n      expect(pathParser('M10 10 80 80 30 30 Z')).toEqual([['M', 10, 10], ['L', 80, 80], ['L', 30, 30], ['Z']]);\n      expect(pathParser('M10 10L.5.5.3.3Z')).toEqual([['M', 10, 10], ['L', 0.5, 0.5], ['L', 0.3, 0.3], ['Z']]);\n\n      // \"a\" commands without optional whitespace around the flag params and ending coordinate pair\n      expect(pathParser('a32 32 0 00.03-45.22', false)).toEqual([['a', 32.0, 32.0, 0.0, 0.0, 0.0, 0.03, -45.22]]);\n      expect(pathParser('a48 48 0 1148-48', false)).toEqual([['a', 48.0, 48.0, 0.0, 1.0, 1.0, 48.0, -48.0]]);\n      expect(pathParser('a82.6 82.6 0 0033.48-20.25', false)).toEqual([['a', 82.6, 82.6, 0.0, 0.0, 0.0, 33.48, -20.25]]);\n      expect(pathParser('a82.45 82.45 0 00-20.24 33.47', false)).toEqual([['a', 82.45, 82.45, 0.0, 0.0, 0.0, -20.24, 33.47]]);\n      expect(pathParser('a2.51 2.51 0 01.25.32', false)).toEqual([['a', 2.51, 2.51, 0, 0, 1, 0.25, 0.32]]);\n      expect(pathParser('a2.51 2.51 0 00.25.32', false)).toEqual([['a', 2.51, 2.51, 0, 0, 0, 0.25, 0.32]]);\n      expect(pathParser('a2.51 2.51 0 000.25.32', false)).toEqual([['a', 2.51, 2.51, 0, 0, 0, 0.25, 0.32]]);\n      expect(pathParser('a48 48 0 1148-48 48 48 0 01-48 48', false)).toEqual([['a', 48.0, 48.0, 0.0, 1.0, 1.0, 48.0, -48.0], ['a', 48.0, 48.0, 0.0, 0.0, 1.0, -48.0, 48.0]]);\n    });","file":"spec/utils/pathParser.js","skipped":false,"dir":"spec"},{"name":"returns a new array","suites":["utils.js","map()"],"line":17,"updatePoint":{"line":17,"column":27,"index":487},"code":"    it('returns a new array', function () {\n      expect(arr2).toEqual(any(Array));\n      expect(arr2).not.toBe(arr1);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"executes a function on every element and returns the result in a new array","suites":["utils.js","map()"],"line":21,"updatePoint":{"line":21,"column":82,"index":669},"code":"    it('executes a function on every element and returns the result in a new array', function () {\n      expect(arr2).toEqual([2, 4, 6, 8]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"returns a new array","suites":["utils.js","filter()"],"line":34,"updatePoint":{"line":34,"column":27,"index":979},"code":"    it('returns a new array', function () {\n      expect(arr2).toEqual(any(Array));\n      expect(arr2).not.toBe(arr1);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"filters elements by function","suites":["utils.js","filter()"],"line":38,"updatePoint":{"line":38,"column":36,"index":1115},"code":"    it('filters elements by function', function () {\n      expect(arr2).toEqual([2, 4]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"converts degrees to radians","suites":["utils.js","radians()"],"line":43,"updatePoint":{"line":43,"column":35,"index":1255},"code":"    it('converts degrees to radians', function () {\n      expect(radians(270)).toBe(1.5 * Math.PI);\n      expect(radians(90)).toBe(Math.PI / 2);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"caps at 360 degrees","suites":["utils.js","radians()"],"line":47,"updatePoint":{"line":47,"column":27,"index":1400},"code":"    it('caps at 360 degrees', function () {\n      expect(radians(360)).toBe(0);\n      expect(radians(360 + 180)).toBe(Math.PI);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"converts radians to degrees","suites":["utils.js","degrees()"],"line":53,"updatePoint":{"line":53,"column":35,"index":1588},"code":"    it('converts radians to degrees', function () {\n      expect(degrees(1.5 * Math.PI)).toBe(270);\n      expect(degrees(Math.PI / 2)).toBe(90);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"caps at 2 PI","suites":["utils.js","degrees()"],"line":57,"updatePoint":{"line":57,"column":20,"index":1726},"code":"    it('caps at 2 PI', function () {\n      expect(degrees(2 * Math.PI)).toBe(0);\n      expect(degrees(3 * Math.PI)).toBe(180);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"converts dash-case and PascalCase to camelCase","suites":["utils.js","camelCase()"],"line":63,"updatePoint":{"line":63,"column":54,"index":1941},"code":"    it('converts dash-case and PascalCase to camelCase', function () {\n      var dash1 = 'dash-1';\n      var dashTwo = 'dash-two';\n      var camelOne = 'camelOne';\n      var pascalOne = 'PascalOne';\n      var mixOne = 'mix-One';\n      expect(camelCase(dash1)).toBe('dash1');\n      expect(camelCase(dashTwo)).toBe('dashTwo');\n      expect(camelCase(camelOne)).toBe('camelone');\n      expect(camelCase(pascalOne)).toBe('pascalone');\n      expect(camelCase(mixOne)).toBe('mixOne');\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"converts camelCase to dash-case","suites":["utils.js","unCamelCase()"],"line":77,"updatePoint":{"line":77,"column":39,"index":2461},"code":"    it('converts camelCase to dash-case', function () {\n      var dash1 = 'dash-1';\n      var dashTwo = 'dash-two';\n      var camelOne = 'camelOne';\n      var pascalOne = 'PascalOne';\n      expect(unCamelCase(dash1)).toBe('dash-1');\n      expect(unCamelCase(dashTwo)).toBe('dash-two');\n      expect(unCamelCase(camelOne)).toBe('camel-one');\n      expect(unCamelCase(pascalOne)).toBe('-pascal-one');\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"capitalizes the first letter","suites":["utils.js","capitalize()"],"line":89,"updatePoint":{"line":89,"column":36,"index":2912},"code":"    it('capitalizes the first letter', function () {\n      var dash1 = 'dash-1';\n      var dashTwo = 'dash-two';\n      var camelOne = 'camelOne';\n      var pascalOne = 'PascalOne';\n      expect(capitalize(dash1)).toBe('Dash-1');\n      expect(capitalize(dashTwo)).toBe('Dash-two');\n      expect(capitalize(camelOne)).toBe('CamelOne');\n      expect(capitalize(pascalOne)).toBe('PascalOne');\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"calculates height proportionally","suites":["utils.js","proportionalSize()"],"line":111,"updatePoint":{"line":111,"column":40,"index":3517},"code":"    it('calculates height proportionally', function () {\n      expect(proportionalSize(el, 400, null)).toEqual({\n        width: 400,\n        height: 200\n      });\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"calculates width proportionally","suites":["utils.js","proportionalSize()"],"line":117,"updatePoint":{"line":117,"column":39,"index":3687},"code":"    it('calculates width proportionally', function () {\n      expect(proportionalSize(el, null, 200)).toEqual({\n        width: 400,\n        height: 200\n      });\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"prefers passed box over element","suites":["utils.js","proportionalSize()"],"line":123,"updatePoint":{"line":123,"column":39,"index":3857},"code":"    it('prefers passed box over element', function () {\n      expect(proportionalSize(el, 300, null, box)).toEqual({\n        width: 300,\n        height: 200\n      });\n      expect(proportionalSize(el, null, 200, box)).toEqual({\n        width: 300,\n        height: 200\n      });\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from [ox, oy]","suites":["utils.js","getOrigin()"],"line":143,"updatePoint":{"line":143,"column":37,"index":4311},"code":"    it('gets the origin from [ox, oy]', function () {\n      var origin = {\n        origin: [10, 20]\n      };\n      expect(getOrigin(origin, el)).toEqual([10, 20]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from [ox, oy] as strings","suites":["utils.js","getOrigin()"],"line":149,"updatePoint":{"line":149,"column":48,"index":4494},"code":"    it('gets the origin from [ox, oy] as strings', function () {\n      var origin = {\n        origin: ['center', 'top']\n      };\n      expect(getOrigin(origin, el)).toEqual([400, 400]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from {x, y}","suites":["utils.js","getOrigin()"],"line":155,"updatePoint":{"line":155,"column":35,"index":4675},"code":"    it('gets the origin from {x, y}', function () {\n      var origin = {\n        origin: {\n          x: 10,\n          y: 20\n        }\n      };\n      expect(getOrigin(origin, el)).toEqual([10, 20]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from {ox, oy}","suites":["utils.js","getOrigin()"],"line":164,"updatePoint":{"line":164,"column":37,"index":4883},"code":"    it('gets the origin from {ox, oy}', function () {\n      var origin = {\n        ox: 10,\n        oy: 20\n      };\n      expect(getOrigin(origin, el)).toEqual([10, 20]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from {ox, oy} as strings","suites":["utils.js","getOrigin()"],"line":171,"updatePoint":{"line":171,"column":48,"index":5072},"code":"    it('gets the origin from {ox, oy} as strings', function () {\n      var origin = {\n        ox: 'center',\n        oy: 'top'\n      };\n      expect(getOrigin(origin, el)).toEqual([400, 400]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from {originX, originY}","suites":["utils.js","getOrigin()"],"line":178,"updatePoint":{"line":178,"column":47,"index":5271},"code":"    it('gets the origin from {originX, originY}', function () {\n      var origin = {\n        originX: 10,\n        originY: 20\n      };\n      expect(getOrigin(origin, el)).toEqual([10, 20]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from {originX, originY} as strings","suites":["utils.js","getOrigin()"],"line":185,"updatePoint":{"line":185,"column":58,"index":5480},"code":"    it('gets the origin from {originX, originY} as strings', function () {\n      var origin = {\n        originX: 'center',\n        originY: 'top'\n      };\n      expect(getOrigin(origin, el)).toEqual([400, 400]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from string","suites":["utils.js","getOrigin()"],"line":192,"updatePoint":{"line":192,"column":35,"index":5677},"code":"    it('gets the origin from string', function () {\n      var origin = {\n        origin: 'center top'\n      };\n      expect(getOrigin(origin, el)).toEqual([400, 400]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"gets the origin from number","suites":["utils.js","getOrigin()"],"line":198,"updatePoint":{"line":198,"column":35,"index":5853},"code":"    it('gets the origin from number', function () {\n      var origin = {\n        origin: 5\n      };\n      expect(getOrigin(origin, el)).toEqual([5, 5]);\n    });","file":"spec/utils/utils.js","skipped":false,"dir":"spec"},{"name":"sets a new window as global","suites":["window.js","registerWindow()"],"line":6,"updatePoint":{"line":6,"column":35,"index":263},"code":"    it('sets a new window as global', () => {\n      saveWindow();\n      const win = {};\n      const doc = {};\n      registerWindow(win, doc);\n      expect(globals.window).toBe(win);\n      expect(globals.document).toBe(doc);\n      restoreWindow(); // we need this or jasmine will fail in afterAll\n    });","file":"spec/utils/window.js","skipped":false,"dir":"spec"},{"name":"runs a function in the specified window context","suites":["window.js","withWindow()"],"line":18,"updatePoint":{"line":18,"column":55,"index":629},"code":"    it('runs a function in the specified window context', () => {\n      const win = {\n        foo: 'bar',\n        document: {}\n      };\n      const oldWindow = globals.window;\n      expect(globals.window).not.toBe(win);\n      withWindow({\n        foo: 'bar',\n        document: {}\n      }, () => {\n        expect(globals.window).toEqual(win);\n        expect(globals.document).toEqual(win.document);\n      });\n      expect(globals.window).toBe(oldWindow);\n    });","file":"spec/utils/window.js","skipped":false,"dir":"spec"},{"name":"returns the registered window","suites":["window.js","getWindow()"],"line":36,"updatePoint":{"line":36,"column":37,"index":1113},"code":"    it('returns the registered window', () => {\n      expect(getWindow()).toBe(globals.window);\n    });","file":"spec/utils/window.js","skipped":false,"dir":"spec"}]}