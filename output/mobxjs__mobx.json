{
    "repo": "mobxjs/mobx",
    "url": "https://github.com/mobxjs/mobx",
    "branch": "main",
    "configs": [
        {
            "package": "eslint-plugin-mobx",
            "lang": "js",
            "dir": "packages/eslint-plugin-mobx/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "mobx-react-lite",
            "lang": "ts",
            "dir": "packages/mobx-react-lite/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "mobx-react",
            "lang": "ts",
            "dir": "packages/mobx-react/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "mobx-undecorate",
            "lang": "ts",
            "dir": "packages/mobx-undecorate/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "mobx",
            "lang": "js",
            "dir": "packages/mobx/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "correct api should be exposed",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 35
            },
            "line": 3,
            "code": "test(\"correct api should be exposed\", function () {\n    expect(\n        Object.keys(api)\n            .filter(key => api[key] !== undefined)\n            .sort()\n    ).toEqual(\n        [\n            \"isUsingStaticRendering\",\n            \"enableStaticRendering\",\n            \"observer\",\n            \"Observer\",\n            \"useLocalObservable\",\n            \"useLocalStore\",\n            \"useAsObservableSource\",\n            \"clearTimers\",\n            \"useObserver\",\n            \"isObserverBatched\",\n            \"observerBatching\",\n            \"useStaticRendering\",\n            \"_observerFinalizationRegistry\"\n        ].sort()\n    )\n})",
            "file": "api.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react-lite/__tests__"
        },
        {
            "name": "throws if react is not installed",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 36
            },
            "line": 6,
            "code": "it(\"throws if react is not installed\", () => {\n    jest.mock(\"react\", () => ({}))\n    expect(() => require(\"../src/utils/assertEnvironment.ts\")).toThrowErrorMatchingInlineSnapshot(\n        `\"mobx-react-lite requires React with Hooks support\"`\n    )\n})",
            "file": "assertEnvironment.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react-lite/__tests__"
        },
        {
            "name": "throws if mobx is not installed",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 35
            },
            "line": 13,
            "code": "it(\"throws if mobx is not installed\", () => {\n    jest.mock(\"react\", () => ({ useState: true }))\n    jest.mock(\"mobx\", () => ({}))\n    expect(() => require(\"../src/utils/assertEnvironment.ts\")).toThrowErrorMatchingInlineSnapshot(\n        `\"mobx-react-lite@3 requires mobx at least version 6 to be available\"`\n    )\n})",
            "file": "assertEnvironment.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react-lite/__tests__"
        },
        {
            "name": "printDebugValue",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 21
            },
            "line": 4,
            "code": "test(\"printDebugValue\", () => {\n    const money = observable({\n        euro: 10,\n        get pound() {\n            return this.euro / 1.15\n        }\n    })\n\n    const disposer = autorun(() => {\n        const { euro, pound } = money\n        if (euro === pound) {\n            // tslint:disable-next-line: no-console\n            console.log(\"Weird..\")\n        }\n    })\n\n    const value = (disposer as any)[$mobx]\n\n    expect(printDebugValue(value)).toMatchSnapshot()\n\n    disposer()\n\n    expect(printDebugValue(value)).toMatchSnapshot()\n})",
            "file": "printDebugValue.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react-lite/__tests__"
        },
        {
            "name": "Valid values",
            "suites": [],
            "updatePoint": {
                "line": 66,
                "column": 18
            },
            "line": 66,
            "code": "test(\"Valid values\", () => {\n    typeCheckPass(MRPropTypes.observableArray, observable([]))\n    typeCheckPass(MRPropTypes.observableArrayOf(PropTypes.string), observable([\"\"]))\n    typeCheckPass(MRPropTypes.arrayOrObservableArray, observable([]))\n    typeCheckPass(MRPropTypes.arrayOrObservableArray, [])\n    typeCheckPass(MRPropTypes.arrayOrObservableArrayOf(PropTypes.string), observable([\"\"]))\n    typeCheckPass(MRPropTypes.arrayOrObservableArrayOf(PropTypes.string), [\"\"])\n    typeCheckPass(MRPropTypes.observableObject, observable({}))\n    typeCheckPass(MRPropTypes.objectOrObservableObject, {})\n    typeCheckPass(MRPropTypes.objectOrObservableObject, observable({}))\n    typeCheckPass(MRPropTypes.observableMap, observable(observable.map({}, { deep: false })))\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "should be implicitly optional and not warn",
            "suites": [],
            "updatePoint": {
                "line": 79,
                "column": 48
            },
            "line": 79,
            "code": "test(\"should be implicitly optional and not warn\", () => {\n    typeCheckPass(MRPropTypes.observableArray)\n    typeCheckPass(MRPropTypes.observableArrayOf(PropTypes.string))\n    typeCheckPass(MRPropTypes.arrayOrObservableArray)\n    typeCheckPass(MRPropTypes.arrayOrObservableArrayOf(PropTypes.string))\n    typeCheckPass(MRPropTypes.observableObject)\n    typeCheckPass(MRPropTypes.objectOrObservableObject)\n    typeCheckPass(MRPropTypes.observableMap)\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "should warn for missing required values, function (test)",
            "suites": [],
            "updatePoint": {
                "line": 89,
                "column": 62
            },
            "line": 89,
            "code": "test(\"should warn for missing required values, function (test)\", () => {\n    typeCheckFailRequiredValues(MRPropTypes.observableArray.isRequired)\n    typeCheckFailRequiredValues(MRPropTypes.observableArrayOf(PropTypes.string).isRequired)\n    typeCheckFailRequiredValues(MRPropTypes.arrayOrObservableArray.isRequired)\n    typeCheckFailRequiredValues(MRPropTypes.arrayOrObservableArrayOf(PropTypes.string).isRequired)\n    typeCheckFailRequiredValues(MRPropTypes.observableObject.isRequired)\n    typeCheckFailRequiredValues(MRPropTypes.objectOrObservableObject.isRequired)\n    typeCheckFailRequiredValues(MRPropTypes.observableMap.isRequired)\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "should fail date and regexp correctly",
            "suites": [],
            "updatePoint": {
                "line": 99,
                "column": 43
            },
            "line": 99,
            "code": "test(\"should fail date and regexp correctly\", () => {\n    typeCheckFail(\n        MRPropTypes.observableObject,\n        new Date(),\n        \"Invalid prop `testProp` of type `date` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableObject`.\"\n    )\n    typeCheckFail(\n        MRPropTypes.observableArray,\n        /please/,\n        \"Invalid prop `testProp` of type `regexp` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableArray`.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "observableArray",
            "suites": [],
            "updatePoint": {
                "line": 114,
                "column": 21
            },
            "line": 114,
            "code": "test(\"observableArray\", () => {\n    typeCheckFail(\n        MRPropTypes.observableArray,\n        [],\n        \"Invalid prop `testProp` of type `array` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableArray`.\"\n    )\n    typeCheckFail(\n        MRPropTypes.observableArray,\n        \"\",\n        \"Invalid prop `testProp` of type `string` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableArray`.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "arrayOrObservableArray",
            "suites": [],
            "updatePoint": {
                "line": 129,
                "column": 28
            },
            "line": 129,
            "code": "test(\"arrayOrObservableArray\", () => {\n    typeCheckFail(\n        MRPropTypes.arrayOrObservableArray,\n        \"\",\n        \"Invalid prop `testProp` of type `string` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableArray` or javascript `array`.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "observableObject",
            "suites": [],
            "updatePoint": {
                "line": 138,
                "column": 22
            },
            "line": 138,
            "code": "test(\"observableObject\", () => {\n    typeCheckFail(\n        MRPropTypes.observableObject,\n        {},\n        \"Invalid prop `testProp` of type `object` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableObject`.\"\n    )\n    typeCheckFail(\n        MRPropTypes.observableObject,\n        \"\",\n        \"Invalid prop `testProp` of type `string` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableObject`.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "objectOrObservableObject",
            "suites": [],
            "updatePoint": {
                "line": 153,
                "column": 30
            },
            "line": 153,
            "code": "test(\"objectOrObservableObject\", () => {\n    typeCheckFail(\n        MRPropTypes.objectOrObservableObject,\n        \"\",\n        \"Invalid prop `testProp` of type `string` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableObject` or javascript `object`.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "observableMap",
            "suites": [],
            "updatePoint": {
                "line": 162,
                "column": 19
            },
            "line": 162,
            "code": "test(\"observableMap\", () => {\n    typeCheckFail(\n        MRPropTypes.observableMap,\n        {},\n        \"Invalid prop `testProp` of type `object` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableMap`.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "observableArrayOf",
            "suites": [],
            "updatePoint": {
                "line": 171,
                "column": 23
            },
            "line": 171,
            "code": "test(\"observableArrayOf\", () => {\n    typeCheckFail(\n        MRPropTypes.observableArrayOf(PropTypes.string),\n        2,\n        \"Invalid prop `testProp` of type `number` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableArray`.\"\n    )\n    typeCheckFail(\n        MRPropTypes.observableArrayOf(PropTypes.string),\n        observable([2]),\n        \"Invalid prop `testProp[0]` of type `number` supplied to \" +\n            \"`testComponent`, expected `string`.\"\n    )\n    typeCheckFail(\n        MRPropTypes.observableArrayOf({ foo: (MRPropTypes as any).string } as any),\n        { foo: \"bar\" },\n        \"Property `testProp` of component `testComponent` has invalid PropType notation.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "arrayOrObservableArrayOf",
            "suites": [],
            "updatePoint": {
                "line": 191,
                "column": 30
            },
            "line": 191,
            "code": "test(\"arrayOrObservableArrayOf\", () => {\n    typeCheckFail(\n        MRPropTypes.arrayOrObservableArrayOf(PropTypes.string),\n        2,\n        \"Invalid prop `testProp` of type `number` supplied to \" +\n            \"`testComponent`, expected `mobx.ObservableArray` or javascript `array`.\"\n    )\n    typeCheckFail(\n        MRPropTypes.arrayOrObservableArrayOf(PropTypes.string),\n        observable([2]),\n        \"Invalid prop `testProp[0]` of type `number` supplied to \" +\n            \"`testComponent`, expected `string`.\"\n    )\n    typeCheckFail(\n        MRPropTypes.arrayOrObservableArrayOf(PropTypes.string),\n        [2],\n        \"Invalid prop `testProp[0]` of type `number` supplied to \" +\n            \"`testComponent`, expected `string`.\"\n    )\n    // TODO:\n    typeCheckFail(\n        MRPropTypes.arrayOrObservableArrayOf({ foo: (MRPropTypes as any).string } as any),\n        { foo: \"bar\" },\n        \"Property `testProp` of component `testComponent` has invalid PropType notation.\"\n    )\n})",
            "file": "propTypes.test.ts",
            "skipped": false,
            "dir": "packages/mobx-react/__tests__"
        },
        {
            "name": "basic observable",
            "suites": [
                "general"
            ],
            "updatePoint": {
                "line": 17,
                "column": 26
            },
            "line": 17,
            "code": "    test(\"basic observable\", () => {\n        expect(\n            convert(`import { observable } from \"mobx\"\n\n  class Box {\n      /*0*/\n      @observable\n      /*1*/\n      field /*2 */ = /*3*/ 1 /*4*/\n  }`)\n        ).toMatchInlineSnapshot(`\n                                                            \"import { observable, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                            class Box {\n                                                                /*0*/\n                                                                /*1*/\n                                                                field /*2 */ = /*3*/ 1; /*4*/\n\n                                                                constructor() {\n                                                                    makeObservable(this, {\n                                                                        field: observable\n                                                                    });\n                                                                }\n                                                            }\"\n                                        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "basic observable - skip imports",
            "suites": [
                "general"
            ],
            "updatePoint": {
                "line": 44,
                "column": 41
            },
            "line": 44,
            "code": "    test(\"basic observable - skip imports\", () => {\n        expect(\n            convert(\n                `\n  class Box {\n      /*0*/\n      @observable\n      /*1*/\n      field /*2 */ = /*3*/ 1 /*4*/\n  }`,\n                { ignoreImports: true }\n            )\n        ).toMatchInlineSnapshot(`\n            \"class Box {\n                /*0*/\n                /*1*/\n                field /*2 */ = /*3*/ 1; /*4*/\n\n                constructor() {\n                    makeObservable(this, {\n                        field: observable\n                    });\n                }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "basic observable - skip imports - keepDecorators",
            "suites": [
                "general"
            ],
            "updatePoint": {
                "line": 71,
                "column": 58
            },
            "line": 71,
            "code": "    test(\"basic observable - skip imports - keepDecorators\", () => {\n        expect(\n            convert(\n                `\n  class Box {\n      /*0*/\n      @observable\n      /*1*/\n      field /*2 */ = /*3*/ 1 /*4*/\n  }`,\n                { ignoreImports: true, keepDecorators: true }\n            )\n        ).toMatchInlineSnapshot(`\n            \"class Box {\n                /*0*/\n                @observable\n                /*1*/\n                field /*2 */ = /*3*/ 1 /*4*/\n\n                constructor() {\n                    makeObservable(this);\n                }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class with method and extends",
            "suites": [
                "general"
            ],
            "updatePoint": {
                "line": 97,
                "column": 39
            },
            "line": 97,
            "code": "    test(\"class with method and extends\", () => {\n        expect(\n            convert(`\n          import { observable } from \"mobx\"\n\n          class ExtendsHasMethod extends Box {\n              @observable x = 1\n\n              // test\n              method() {\n                  console.log(\"hi\")\n              }\n          }\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import { observable, makeObservable } from \\\\\"mobx\\\\\";\n\n            class ExtendsHasMethod extends Box {\n                x = 1;\n\n                constructor() {\n                    // TODO: [mobx-undecorate] verify the constructor arguments and the arguments of this automatically generated super call\n                    super();\n\n                    makeObservable(this, {\n                        x: observable\n                    });\n                }\n\n                // test\n                method() {\n                    console.log(\\\\\"hi\\\\\")\n                }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class with constructor",
            "suites": [
                "general"
            ],
            "updatePoint": {
                "line": 134,
                "column": 32
            },
            "line": 134,
            "code": "    test(\"class with constructor\", () => {\n        expect(\n            convert(`\n          import { observable } from \"mobx\"\n\n          class ExtendsHasConstructor {\n              @observable x = 1\n\n              constructor() {\n                  console.log(\"hi\")\n              }\n          }`)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { observable, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class ExtendsHasConstructor {\n                                                                            x = 1;\n\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: observable\n                                                                                });\n\n                                                                                console.log(\\\\\"hi\\\\\")\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "extended class with constructor",
            "suites": [
                "general"
            ],
            "updatePoint": {
                "line": 163,
                "column": 41
            },
            "line": 163,
            "code": "    test(\"extended class with constructor\", () => {\n        expect(\n            convert(`\n          import { observable } from \"mobx\"\n\n          class ExtendsHasConstructorSuper extends Box {\n              @observable x = 1\n\n              constructor() {\n                  super()\n                  console.log(\"hi\")\n              }\n          }\n        `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { observable, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class ExtendsHasConstructorSuper extends Box {\n                                                                            x = 1;\n\n                                                                            constructor() {\n                                                                                super()\n\n                                                                                makeObservable(this, {\n                                                                                    x: observable\n                                                                                });\n\n                                                                                console.log(\\\\\"hi\\\\\")\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "field - bound - named",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 198,
                "column": 31
            },
            "line": 198,
            "code": "    test(\"field - bound - named\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action.bound(\"test\")\n                x = (arg: number) => {\n                    console.log('hi')\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            x = (arg: number) => {\n                                                                                console.log('hi')\n                                                                            };\n\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action.bound(\\\\\"test\\\\\")\n                                                                                });\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - bound - named",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 227,
                "column": 32
            },
            "line": 227,
            "code": "    test(\"method - bound - named\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action.bound(\"test\")\n                async x(arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action.bound(\\\\\"test\\\\\")\n                                                                                });\n                                                                            }\n\n                                                                            async x(arg: number): boolean {\n                                                                                console.log('hi')\n                                                                                return true\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - bound - named - generator",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 258,
                "column": 44
            },
            "line": 258,
            "code": "    test(\"method - bound - named - generator\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action.bound(\"test\")\n                * x(arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action.bound(\\\\\"test\\\\\")\n                                                                                });\n                                                                            }\n\n                                                                            *x(arg: number): boolean {\n                                                                                console.log('hi')\n                                                                                return true\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "field - named",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 289,
                "column": 23
            },
            "line": 289,
            "code": "    test(\"field - named\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action(\"test\")\n                x = async (arg: number): boolean => {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            x = async (arg: number): boolean => {\n                                                                                console.log('hi')\n                                                                                return true\n                                                                            };\n\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action(\\\\\"test\\\\\")\n                                                                                });\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "field - unnamed",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 320,
                "column": 25
            },
            "line": 320,
            "code": "    test(\"field - unnamed\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action\n                x = (arg: number): boolean => {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            x = (arg: number): boolean => {\n                                                                                console.log('hi')\n                                                                                return true\n                                                                            };\n\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action\n                                                                                });\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - bound - unnamed",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 351,
                "column": 34
            },
            "line": 351,
            "code": "    test(\"method - bound - unnamed\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action.bound\n                x (arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action.bound\n                                                                                });\n                                                                            }\n\n                                                                            x(arg: number): boolean {\n                                                                                console.log('hi')\n                                                                                return true\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - unbound - named",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 382,
                "column": 34
            },
            "line": 382,
            "code": "    test(\"method - unbound - named\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action(\"test\")\n                x (arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action(\\\\\"test\\\\\")\n                                                                                });\n                                                                            }\n\n                                                                            x(arg: number): boolean {\n                                                                                console.log('hi')\n                                                                                return true\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - unbound - unnamed",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 413,
                "column": 36
            },
            "line": 413,
            "code": "    test(\"method - unbound - unnamed\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action\n                x (arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: action\n                                                                                });\n                                                                            }\n\n                                                                            x(arg: number): boolean {\n                                                                                console.log('hi')\n                                                                                return true\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - unbound - computed name",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 444,
                "column": 42
            },
            "line": 444,
            "code": "    test(\"method - unbound - computed name\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box {\n                @action\n                ['x' + 'y'](arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                \"import { action, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                class Box {\n                                                    constructor() {\n                                                        makeObservable(this, {\n                                                            ['x' + 'y']: action\n                                                        });\n                                                    }\n\n                                                    ['x' + 'y'](arg: number): boolean {\n                                                        console.log('hi')\n                                                        return true\n                                                    }\n                                                }\"\n                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - override",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 475,
                "column": 27
            },
            "line": 475,
            "code": "    test(\"method - override\", () => {\n        expect(\n            convert(`\n            import { action } from \"mobx\"\n\n            class Box extends Shape {\n                constructor(arg) {\n                    super(arg)\n                }\n\n                @action\n                override method(arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n                                                \"import { action, override, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                class Box extends Shape {\n                                                    constructor(arg) {\n                                                        super(arg)\n\n                                                        makeObservable(this, {\n                                                            method: override\n                                                        });\n                                                    }\n\n                                                    override method(arg: number): boolean {\n                                                        console.log('hi')\n                                                        return true\n                                                    }\n                                                }\"\n                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "method - override - keepDecorators",
            "suites": [
                "action"
            ],
            "updatePoint": {
                "line": 512,
                "column": 44
            },
            "line": 512,
            "code": "    test(\"method - override - keepDecorators\", () => {\n        expect(\n            convert(\n                `\n            import { action } from \"mobx\"\n\n            class Box extends Shape {\n                constructor(arg) {\n                    super(arg)\n                }\n\n                @action\n                override method(arg: number): boolean {\n                    console.log('hi')\n                    return true\n                }\n            }\n            `,\n                { keepDecorators: true }\n            )\n        ).toMatchInlineSnapshot(`\n                                                \"import { action, override, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                class Box extends Shape {\n                                                    constructor(arg) {\n                                                        super(arg)\n                                                        makeObservable(this);\n                                                    }\n\n                                                    @override\n                                                    override method(arg: number): boolean {\n                                                        console.log('hi')\n                                                        return true\n                                                    }\n                                                }\"\n                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "observable ",
            "suites": [
                "observable"
            ],
            "updatePoint": {
                "line": 552,
                "column": 21
            },
            "line": 552,
            "code": "    test(\"observable \", () => {\n        expect(\n            convert(`\n      import { observable } from \"mobx\"\n\n      class Box {\n          @observable x = 1\n      }\n    `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { observable, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            x = 1;\n\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: observable\n                                                                                });\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "observable - shallow ",
            "suites": [
                "observable"
            ],
            "updatePoint": {
                "line": 576,
                "column": 31
            },
            "line": 576,
            "code": "    test(\"observable - shallow \", () => {\n        expect(\n            convert(`\n          import { observable } from \"mobx\"\n\n          class Box {\n            @observable.shallow x = 1\n        }\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import { observable, makeObservable } from \\\\\"mobx\\\\\";\n\n              class Box {\n                x = 1;\n\n                constructor() {\n                  makeObservable(this, {\n                    x: observable.shallow\n                  });\n                }\n              }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "observable - shallow - computed name ",
            "suites": [
                "observable"
            ],
            "updatePoint": {
                "line": 600,
                "column": 47
            },
            "line": 600,
            "code": "    test(\"observable - shallow - computed name \", () => {\n        expect(\n            convert(`\n              import { observable } from \"mobx\"\n\n              class Box {\n                @observable.shallow ['x'] = 1\n            }\n            `)\n        ).toMatchInlineSnapshot(`\n            \"import { observable, makeObservable } from \\\\\"mobx\\\\\";\n\n              class Box {\n                ['x'] = 1;\n\n                constructor() {\n                  makeObservable(this, {\n                    [\\\\\"x\\\\\"]: observable.shallow\n                  });\n                }\n              }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "computed ",
            "suites": [
                "computed"
            ],
            "updatePoint": {
                "line": 626,
                "column": 19
            },
            "line": 626,
            "code": "    test(\"computed \", () => {\n        expect(\n            convert(`\n      import { computed } from \"mobx\"\n\n      class Box {\n          @computed get x() {\n              return 1;\n          }\n      }\n    `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { computed, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: computed\n                                                                                });\n                                                                            }\n\n                                                                            get x() {\n                                                                                return 1;\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "computed - setter",
            "suites": [
                "computed"
            ],
            "updatePoint": {
                "line": 654,
                "column": 27
            },
            "line": 654,
            "code": "    test(\"computed - setter\", () => {\n        expect(\n            convert(`\n      import { computed } from \"mobx\"\n\n      class Box {\n          @computed get x() {\n              return 1;\n          }\n          set x(v) {\n              console.log(v)\n          }\n      }\n    `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { computed, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: computed\n                                                                                });\n                                                                            }\n\n                                                                            get x() {\n                                                                                return 1;\n                                                                            }\n                                                                            set x(v) {\n                                                                                console.log(v)\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "computed - setter - options",
            "suites": [
                "computed"
            ],
            "updatePoint": {
                "line": 688,
                "column": 37
            },
            "line": 688,
            "code": "    test(\"computed - setter - options\", () => {\n        expect(\n            convert(`\n      import { computed } from \"mobx\"\n\n      class Box {\n          @computed({ name: \"test\" }) get x() {\n              return 1;\n          }\n          set y(z) {\n              console.log(\"wrong\");\n          }\n          set x(v) {\n              console.log(v)\n          }\n      }\n    `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { computed, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: computed({ name: \\\\\"test\\\\\" })\n                                                                                });\n                                                                            }\n\n                                                                            get x() {\n                                                                                return 1;\n                                                                            }\n                                                                            set y(z) {\n                                                                                console.log(\\\\\"wrong\\\\\");\n                                                                            }\n                                                                            set x(v) {\n                                                                                console.log(v)\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "computed - setter - struct",
            "suites": [
                "computed"
            ],
            "updatePoint": {
                "line": 728,
                "column": 36
            },
            "line": 728,
            "code": "    test(\"computed - setter - struct\", () => {\n        expect(\n            convert(`\n      import { computed } from \"mobx\"\n\n      class Box {\n          @computed.struct get x() {\n              return 1;\n          }\n          set x(v) {\n              console.log(v)\n          }\n      }\n    `)\n        ).toMatchInlineSnapshot(`\n                                                                        \"import { computed, makeObservable } from \\\\\"mobx\\\\\";\n\n                                                                        class Box {\n                                                                            constructor() {\n                                                                                makeObservable(this, {\n                                                                                    x: computed.struct\n                                                                                });\n                                                                            }\n\n                                                                            get x() {\n                                                                                return 1;\n                                                                            }\n                                                                            set x(v) {\n                                                                                console.log(v)\n                                                                            }\n                                                                        }\"\n                                                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "basic",
            "suites": [
                "decorate"
            ],
            "updatePoint": {
                "line": 764,
                "column": 15
            },
            "line": 764,
            "code": "    test(\"basic\", () => {\n        expect(\n            convert(`\n            import { observable, decorate, computed, action } from \"mobx\"\n\n            class Box {\n                width = 3\n                height = 2\n\n                // gets the size of the thing\n                get size() {\n                    return this.width * this.height\n                }\n\n                // make it twice as large\n                double() {\n                    this.width *= 2;\n                }\n            }\n\n            decorate(Box, {\n                width: observable,\n                height: observable.shallow,\n                size: computed,\n                double: action\n            })\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import { observable, computed, action, makeObservable } from \\\\\"mobx\\\\\"\n\n            class Box {\n                width = 3\n                height = 2\n\n                constructor() {\n                    makeObservable(this, {\n                        width: observable,\n                        height: observable.shallow,\n                        size: computed,\n                        double: action\n                    });\n                }\n\n                // gets the size of the thing\n                get size() {\n                    return this.width * this.height\n                }\n\n                // make it twice as large\n                double() {\n                    this.width *= 2;\n                }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "multiple targets",
            "suites": [
                "decorate"
            ],
            "updatePoint": {
                "line": 820,
                "column": 26
            },
            "line": 820,
            "code": "    test(\"multiple targets\", () => {\n        expect(\n            convert(`\n            import { observable, decorate, computed, action } from \"mobx\"\n\n            test(\"a\", () => {\n                class Box {\n                    width = 3\n                }\n\n                decorate(Box, {\n                    width: observable,\n                })\n            })\n\n            test(\"b\", () => {\n                class Box {\n                    method() {}\n                }\n\n                decorate(Box, {\n                    method: action\n                })\n            })\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import { observable, computed, action, makeObservable } from \\\\\"mobx\\\\\"\n\n            test(\\\\\"a\\\\\", () => {\n                class Box {\n                    width = 3\n\n                    constructor() {\n                        makeObservable(this, {\n                            width: observable,\n                        });\n                    }\n                }\n            })\n\n            test(\\\\\"b\\\\\", () => {\n                class Box {\n                    constructor() {\n                        makeObservable(this, {\n                            method: action\n                        });\n                    }\n\n                    method() {}\n                }\n            })\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "handle undeclared observable members",
            "suites": [
                "decorate"
            ],
            "updatePoint": {
                "line": 874,
                "column": 46
            },
            "line": 874,
            "code": "    test(\"handle undeclared observable members\", () => {\n        expect(\n            convert(`\n            import { observable, decorate, computed, action } from \"mobx\"\n\n            class Box {\n\n            }\n\n            decorate(Box, {\n                // stuff\n                width: observable,\n                height: observable.shallow,\n            })\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import { observable, computed, action, makeObservable } from \\\\\"mobx\\\\\"\n\n            class Box {\n                constructor() {\n                    makeObservable(this, {\n                        // stuff\n                        width: observable,\n                        height: observable.shallow,\n                    });\n                }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "handle non-classes - 1",
            "suites": [
                "decorate"
            ],
            "updatePoint": {
                "line": 904,
                "column": 32
            },
            "line": 904,
            "code": "    test(\"handle non-classes - 1\", () => {\n        expect(\n            convert(`\n            import { observable, decorate, computed, action } from \"mobx\"\n\n            const box = {\n\n            }\n\n            decorate(box, {\n                width: observable,\n                height: observable.shallow,\n            })\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import { observable, computed, action, makeObservable } from \\\\\"mobx\\\\\"\n\n            const box = {\n\n            }\n\n            makeObservable(box, {\n                width: observable,\n                height: observable.shallow,\n            })\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "handle non-classes - 2",
            "suites": [
                "decorate"
            ],
            "updatePoint": {
                "line": 932,
                "column": 32
            },
            "line": 932,
            "code": "    test(\"handle non-classes - 2\", () => {\n        expect(\n            convert(`\n            import { observable, decorate, computed, action } from \"mobx\"\n\n            decorate({}, {\n                width: observable,\n                height: observable.shallow,\n            })\n        `)\n        ).toMatchInlineSnapshot(`\n                        \"import { observable, computed, action, makeObservable } from \\\\\"mobx\\\\\"\n\n                        makeObservable({}, {\n                            width: observable,\n                            height: observable.shallow,\n                        })\"\n                `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "create generic arguments for makeObservable",
            "suites": [
                "privates"
            ],
            "updatePoint": {
                "line": 954,
                "column": 53
            },
            "line": 954,
            "code": "    test(\"create generic arguments for makeObservable\", () => {\n        expect(\n            convert(\n                `\n                import { observable, decorate, computed, action } from \"mobx\"\n    \n    class TryToGetThis {\n        @observable\n        private privateField1: number = 1\n        @observable\n        protected privateField2 = 1\n        @observable\n        public publicField: string = \"test\"\n      }\n                `\n            )\n        ).toMatchInlineSnapshot(`\n            \"import { observable, computed, action, makeObservable } from \\\\\"mobx\\\\\"\n\n            class TryToGetThis {\n                        private privateField1: number = 1;\n                        protected privateField2 = 1;\n                        public publicField: string = \\\\\"test\\\\\";\n\n                        constructor() {\n                                    makeObservable<TryToGetThis, \\\\\"privateField1\\\\\" | \\\\\"privateField2\\\\\">(this, {\n                                                privateField1: observable,\n                                                privateField2: observable,\n                                                publicField: observable\n                                    });\n                        }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "do not create generic arguments for makeObservable - keepDecorators",
            "suites": [
                "privates"
            ],
            "updatePoint": {
                "line": 989,
                "column": 77
            },
            "line": 989,
            "code": "    test(\"do not create generic arguments for makeObservable - keepDecorators\", () => {\n        expect(\n            convert(\n                `\n                import { observable, decorate, computed, action } from \"mobx\"\n    \n    class TryToGetThis {\n        @observable\n        private privateField1: number = 1\n        @observable\n        protected privateField2 = 1\n        @observable\n        public publicField: string = \"test\"\n      }\n                `,\n                {\n                    keepDecorators: true\n                }\n            )\n        ).toMatchInlineSnapshot(`\n            \"import { observable, computed, action, makeObservable } from \\\\\"mobx\\\\\"\n\n            class TryToGetThis {\n                        @observable\n                        private privateField1: number = 1\n                        @observable\n                        protected privateField2 = 1\n                        @observable\n                        public publicField: string = \\\\\"test\\\\\"\n\n                        constructor() {\n                                    makeObservable(this);\n                        }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1028,
                "column": 20
            },
            "line": 1028,
            "code": "    test(\"class comp\", () => {\n        expect(\n            convert(`\n        import {observer} from 'mobx-react'\n\n        /* 1 */\n        @observer /* 2 */ class X extends React.Component {\n            render() {\n                return <div>hi</div>\n            }\n        }\n\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import {observer} from 'mobx-react'\n\n            /* 1 */\n            const X = observer(class /* 2 */ X extends React.Component {\n                render() {\n                    return <div>hi</div>\n                }\n            });\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with export before",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1053,
                "column": 39
            },
            "line": 1053,
            "code": "    test(\"class comp with export before\", () => {\n        expect(\n            convert(`\n        import {observer} from 'mobx-react-lite'\n\n\n        /* 1 */\n        @observer /* 2 */ export /* 3 */ class X extends React.Component {\n\n        }\n\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import {observer} from 'mobx-react-lite'\n\n\n            /* 1 */\n            export const X = observer(class /* 2 */ /* 3 */ X extends React.Component {\n\n            });\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with export after",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1076,
                "column": 38
            },
            "line": 1076,
            "code": "    test(\"class comp with export after\", () => {\n        expect(\n            convert(\n                `\n        import {observer} from 'mobx-react-lite'\n\n\n        /* 1 */\n        export /* 2 */ @observer /* 3 */ class X extends React.Component {\n\n        }\n\n        `,\n                { decoratorsAfterExport: true }\n            )\n        ).toMatchInlineSnapshot(`\n            \"import {observer} from 'mobx-react-lite'\n\n\n            /* 1 */\n            export const X = observer(class /* 2 */ /* 3 */ X extends React.Component {\n\n            });\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with inject",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1102,
                "column": 32
            },
            "line": 1102,
            "code": "    test(\"class comp with inject\", () => {\n        expect(\n            convert(`\n        import {observer, inject} from 'mobx-react'\n\n\n        /* 1 */\n        @inject(\"test\") /* 2 */ export /* 3 */ class X extends React.Component {\n\n        }\n\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import {observer, inject} from 'mobx-react'\n\n\n            /* 1 */\n            export const X = inject(\\\\\"test\\\\\")(class /* 2 */ /* 3 */ X extends React.Component {\n\n            });\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with inject and observer",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1125,
                "column": 45
            },
            "line": 1125,
            "code": "    test(\"class comp with inject and observer\", () => {\n        expect(\n            convert(`\n        import {observer, inject} from 'mobx-react'\n\n\n        /* 1 */\n        @inject(\"test\") @observer /* 2 */ export /* 3 */ class X extends React.Component {\n\n        }\n\n        `)\n        ).toMatchInlineSnapshot(`\n            \"import {observer, inject} from 'mobx-react'\n\n\n            /* 1 */\n            export const X = inject(\\\\\"test\\\\\")(observer(class /* 2 */ /* 3 */ X extends React.Component {\n\n            }));\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with local fields - 1",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1148,
                "column": 42
            },
            "line": 1148,
            "code": "    test(\"class comp with local fields - 1\", () => {\n        expect(\n            convert(\n                `\n        import {observer, inject} from 'mobx-react'\n        import {observable} from \"mobx\"\n        import {Component} from \"react\"\n\n        @observer class X extends React.Component {\n            @observable field =  1\n        }\n\n        `,\n                { keepDecorators: false }\n            )\n        ).toMatchInlineSnapshot(`\n            \"import {observer, inject} from 'mobx-react'\n            import { observable, makeObservable } from \\\\\"mobx\\\\\";\n            import {Component} from \\\\\"react\\\\\"\n\n            const X = observer(class X extends React.Component {\n                field = 1;\n\n                constructor(props) {\n                    super(props);\n\n                    makeObservable(this, {\n                        field: observable\n                    });\n                }\n            });\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with local fields preserves Props generic",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1182,
                "column": 62
            },
            "line": 1182,
            "code": "    test(\"class comp with local fields preserves Props generic\", () => {\n        expect(\n            convert(\n                `\n        import {observer, inject} from 'mobx-react'\n        import {observable} from \"mobx\"\n        import {PureComponent} from \"react\"\n\n        @observer class X extends PureComponent<{x: boolean}> {\n            @observable field =  1\n        }\n\n        `,\n                { keepDecorators: false }\n            )\n        ).toMatchInlineSnapshot(`\n            \"import {observer, inject} from 'mobx-react'\n            import { observable, makeObservable } from \\\\\"mobx\\\\\";\n            import {PureComponent} from \\\\\"react\\\\\"\n\n            const X = observer(class X extends PureComponent<{x: boolean}> {\n                field = 1;\n\n                constructor(props: {x: boolean}) {\n                    super(props);\n\n                    makeObservable(this, {\n                        field: observable\n                    });\n                }\n            });\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with local fields preserves Props generic",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1216,
                "column": 62
            },
            "line": 1216,
            "code": "    test(\"class comp with local fields preserves Props generic\", () => {\n        expect(\n            convert(\n                `\n        import {observer, inject} from 'mobx-react'\n        import {observable} from \"mobx\"\n        import {PureComponent} from \"react\"\n\n        @observer class X extends PureComponent<{x: boolean}> {\n            @observable field =  1\n        }\n\n        `,\n                { keepDecorators: true }\n            )\n        ).toMatchInlineSnapshot(`\n            \"import {observer, inject} from 'mobx-react'\n            import { observable, makeObservable } from \\\\\"mobx\\\\\";\n            import {PureComponent} from \\\\\"react\\\\\"\n\n            @observer class X extends PureComponent<{x: boolean}> {\n                @observable field =  1\n\n                constructor(props: {x: boolean}) {\n                    super(props);\n                    makeObservable(this);\n                }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "makeObservable gets added to the non-type import #2415",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1247,
                "column": 64
            },
            "line": 1247,
            "code": "    test(\"makeObservable gets added to the non-type import #2415\", () => {\n        expect(\n            convert(\n                `\n        import type { IReactionDisposer } from 'mobx';\n        import { reaction, observable } from 'mobx';\n\n        export default class Store {\n            @observable counter = 0;\n\n            removeReaction: IReactionDisposer;\n\n            constructor() {\n                this.removeReaction = reaction(() => this.counter, () => {\n                    console.log('it changed');\n                });\n            }\n\n            cleanup() {\n                this.removeReaction();\n            }\n        }\n        `\n            )\n        ).toMatchInlineSnapshot(`\n            \"import type { IReactionDisposer } from 'mobx';\n            import { reaction, observable, makeObservable } from 'mobx';\n\n            export default class Store {\n                counter = 0;\n\n                removeReaction: IReactionDisposer;\n\n                constructor() {\n                    makeObservable(this, {\n                        counter: observable\n                    });\n\n                    this.removeReaction = reaction(() => this.counter, () => {\n                        console.log('it changed');\n                    });\n                }\n\n                cleanup() {\n                    this.removeReaction();\n                }\n            }\"\n        `)\n    })",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "weird syntaxes",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1298,
                "column": 20
            },
            "line": 1298,
            "code": "test(\"weird syntaxes\", () => {\n    expect(\n        convert(`\n        import { observable } from 'mobx';\n\n        type NamedTuple = [first: string, other: number, ...rest: Boolean[]]\n\n        class X {\n            @observable x = 3;\n        }\n\n        class Y {\n            async fn() { await tes() }\n\n            *generatorFn() {\n                yield 3\n            }\n\n            doesJSX() {\n                return <hi {...there}>Stuff {/*with comments */}</hi>\n            }\n        }\n        `)\n    ).toMatchInlineSnapshot(`\n        \"import { observable, makeObservable } from 'mobx';\n\n        type NamedTuple = [first: string, other: number, ...rest: Boolean[]]\n\n        class X {\n            x = 3;\n\n            constructor() {\n                makeObservable(this, {\n                    x: observable\n                });\n            }\n        }\n\n        class Y {\n            async fn() { await tes() }\n\n            *generatorFn() {\n                yield 3\n            }\n\n            doesJSX() {\n                return <hi {...there}>Stuff {/*with comments */}</hi>\n            }\n        }\"\n    `)\n})",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with observer and decorator from another package",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1350,
                "column": 65
            },
            "line": 1350,
            "code": "test(\"class comp with observer and decorator from another package\", () => {\n    expect(\n        convert(`\n    import {observer} from 'mobx-react'\n    import {withRouter} from 'react-router-dom'\n    /* 1 */\n    @withRouter @observer /* 2 */ export /* 3 */ class X extends React.Component {}\n    `)\n    ).toMatchInlineSnapshot(`\n        \"import {observer} from 'mobx-react'\n        import {withRouter} from 'react-router-dom'\n        /* 1 */\n        export const X = withRouter(observer(class /* 2 */ /* 3 */ X extends React.Component {}));\"\n    `)\n})",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class comp with observer, inject and decorator from another package",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1366,
                "column": 73
            },
            "line": 1366,
            "code": "test(\"class comp with observer, inject and decorator from another package\", () => {\n    expect(\n        convert(`\n    import {observer, inject} from 'mobx-react'\n    import {withRouter} from 'react-router-dom'\n    /* 1 */\n    @withRouter @inject(\"test\") @observer /* 2 */ export /* 3 */ class X extends React.Component {}\n    `)\n    ).toMatchInlineSnapshot(`\n        \"import {observer, inject} from 'mobx-react'\n        import {withRouter} from 'react-router-dom'\n        /* 1 */\n        export const X = withRouter(\n          inject(\\\\\"test\\\\\")(observer(class /* 2 */ /* 3 */ X extends React.Component {}))\n        );\"\n    `)\n})",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "makeObservable not added to imports #2540",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1384,
                "column": 47
            },
            "line": 1384,
            "code": "test(\"makeObservable not added to imports #2540\", () => {\n    expect(\n        convert(`\n        import { decorate, observable, action } from 'mobx';\n        class TestStore\n        {\n            testValue = 1;\n            testFunc = () =>\n            {\n                this.testValue++;\n            }\n        }\n        decorate(TestStore, {\n            testValue: observable,\n            testFunc: action\n        });\n        `)\n    ).toMatchInlineSnapshot(`\n        \"import { observable, action, makeObservable } from 'mobx';\n        class TestStore\n        {\n            testValue = 1;\n            testFunc = () =>\n            {\n                this.testValue++;\n            }\n\n            constructor() {\n                makeObservable(this, {\n                    testValue: observable,\n                    testFunc: action\n                });\n            }\n        }\"\n    `)\n})",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class default export comp with observer and inject",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1421,
                "column": 56
            },
            "line": 1421,
            "code": "test(\"class default export comp with observer and inject\", () => {\n    expect(\n        convert(`\n        import {observer, inject} from 'mobx-react'\n        \n        @inject(\"test\") @observer export default class X extends React.Component {}\n    `)\n    ).toMatchInlineSnapshot(`\n        \"import {observer, inject} from 'mobx-react'\n        \n        class X extends React.Component {}\n        export default inject(\\\\\"test\\\\\")(observer(X));\"\n    `)\n})",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "class default export comp with observer and inject",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1436,
                "column": 56
            },
            "line": 1436,
            "code": "test(\"class default export comp with observer and inject\", () => {\n    expect(\n        convert(`\n        import {observer, inject} from 'mobx-react'\n        import {withRouter} from 'react-router-dom'\n\n        @inject(\"test\") @observer class X extends React.Component {}\n\n        export default withRouter(X)\n\n    `)\n    ).toMatchInlineSnapshot(`\n        \"import {observer, inject} from 'mobx-react'\n        import {withRouter} from 'react-router-dom'\n\n        class X extends React.Component {}\n        \n        export default withRouter(inject(\\\\\"test\\\\\")(observer(X)))\"\n    `)\n})",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        },
        {
            "name": "non-null assertion operator is preserved",
            "suites": [
                "@observer"
            ],
            "updatePoint": {
                "line": 1457,
                "column": 46
            },
            "line": 1457,
            "code": "test(\"non-null assertion operator is preserved\", () => {\n    expect(\n        convert(`\n        import { observable } from 'mobx';\n        class X {\n          @observable todos!: ObservableMap<string, TodoModel>\n        }\n    `)\n    ).toMatchInlineSnapshot(`\n        \"import { observable, makeObservable } from 'mobx';\n        class X {\n          todos!: ObservableMap<string, TodoModel>;\n\n          constructor() {\n            makeObservable(this, {\n              todos: observable\n            });\n          }\n        }\"\n    `)\n})",
            "file": "undecorate.spec.ts",
            "skipped": false,
            "dir": "packages/mobx-undecorate/__tests__"
        }
    ],
    "error": "Cannot read properties of undefined (reading 'name')"
}