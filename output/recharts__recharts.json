{"repo":"recharts/recharts","url":"https://github.com/recharts/recharts","branch":"master","configs":[{"package":"recharts","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"apply() should return the expected value","suites":["ScaleHelper"],"updatePoint":{"line":4,"column":46,"index":268},"line":4,"code":"  it('apply() should return the expected value', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(2)).toEqual(2);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"apply() should return the expected value when bandAware = true","suites":["ScaleHelper"],"updatePoint":{"line":8,"column":68,"index":442},"line":8,"code":"  it('apply() should return the expected value when bandAware = true', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(2, {\n      bandAware: true\n    })).toEqual(2);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"apply() should return the expected value for band scale","suites":["ScaleHelper"],"updatePoint":{"line":14,"column":61,"index":640},"line":14,"code":"  it('apply() should return the expected value for band scale', () => {\n    const scale = new ScaleHelper(scaleBand().domain(['0', '1', '2', '3']).range([0, 100]));\n    expect(scale.apply('2')).toEqual(50);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"apply() should return the expected value for band scale when bandAware = true","suites":["ScaleHelper"],"updatePoint":{"line":18,"column":83,"index":875},"line":18,"code":"  it('apply() should return the expected value for band scale when bandAware = true', () => {\n    const scale = new ScaleHelper(scaleBand().domain(['0', '1', '2', '3']).range([0, 100]));\n    expect(scale.apply('2', {\n      bandAware: true\n    })).toEqual(50 + 25 / 2);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"apply() should return undefined for undefined","suites":["ScaleHelper"],"updatePoint":{"line":24,"column":51,"index":1118},"line":24,"code":"  it('apply() should return undefined for undefined', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(undefined)).toEqual(undefined);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"apply() should return undefined for undefined","suites":["ScaleHelper"],"updatePoint":{"line":28,"column":51,"index":1291},"line":28,"code":"  it('apply() should return undefined for undefined', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(undefined)).toEqual(undefined);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"isInRange() should return true for a value in range","suites":["ScaleHelper"],"updatePoint":{"line":32,"column":57,"index":1470},"line":32,"code":"  it('isInRange() should return true for a value in range', () => {\n    const scale = new ScaleHelper(scaleLinear().domain([-200, 200]).range([0, 50]));\n    expect(scale.isInRange(35)).toEqual(true);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"isInRange() should return false for a value out of range","suites":["ScaleHelper"],"updatePoint":{"line":36,"column":62,"index":1681},"line":36,"code":"  it('isInRange() should return false for a value out of range', () => {\n    const scale = new ScaleHelper(scaleLinear().domain([-200, 200]).range([0, 50]));\n    expect(scale.isInRange(-10)).toEqual(false);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"apply() should return the expected values","suites":["createLabeledScales"],"updatePoint":{"line":42,"column":47,"index":1923},"line":42,"code":"  it('apply() should return the expected values', () => {\n    const scales = createLabeledScales({\n      x: scaleBand().domain(['0', '1', '2', '3']).range([0, 100]),\n      y: scaleLinear().domain([-200, 200]).range([0, 50])\n    });\n    expect(scales.apply({\n      x: '2'\n    }, {\n      bandAware: true\n    })).toEqual({\n      x: 50 + 25 / 2\n    });\n    expect(scales.apply({\n      x: '2'\n    }, {\n      bandAware: true,\n      position: 'start'\n    })).toEqual({\n      x: 50\n    });\n    expect(scales.apply({\n      x: '2'\n    }, {\n      bandAware: true,\n      position: 'middle'\n    })).toEqual({\n      x: 50 + 25 / 2.0\n    });\n    expect(scales.apply({\n      x: '2'\n    }, {\n      bandAware: true,\n      position: 'end'\n    })).toEqual({\n      x: 50 + 25\n    });\n    expect(scales.apply({\n      y: '100'\n    }, {\n      bandAware: true\n    })).toEqual({\n      y: 37.5\n    });\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"},{"name":"isInRange() should return the expected values","suites":["createLabeledScales"],"updatePoint":{"line":86,"column":51,"index":2808},"line":86,"code":"  it('isInRange() should return the expected values', () => {\n    const scales = createLabeledScales({\n      x: scaleBand().domain(['0', '1', '2', '3']).range([0, 100]),\n      y: scaleLinear().domain([-200, 200]).range([0, 50])\n    });\n    expect(scales.isInRange({\n      x: 50\n    })).toEqual(true);\n    expect(scales.isInRange({\n      x: 50,\n      y: 35\n    })).toEqual(true);\n    expect(scales.isInRange({\n      y: 35\n    })).toEqual(true);\n    expect(scales.isInRange({\n      y: 100\n    })).toEqual(false);\n    expect(scales.isInRange({\n      x: 50,\n      y: 100\n    })).toEqual(false);\n    expect(scales.isInRange({})).toEqual(true);\n  });","file":"util/CartesianUtils.spec.ts","skipped":false,"dir":"test"}]}