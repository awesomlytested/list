{
    "repo": "airbnb/hypernova",
    "url": "https://github.com/airbnb/hypernova",
    "branch": "master",
    "configs": [
        {
            "package": "hypernova",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "returns a plugin data map that persists across the plugin",
            "suites": [
                "BatchManager",
                "request contexts"
            ],
            "updatePoint": {
                "line": 52,
                "column": 65
            },
            "line": 52,
            "code": "    it('returns a plugin data map that persists across the plugin', () => {\n      const context1 = manager.contextFor(plugins[0], 'foo');\n      const context2 = manager.contextFor(plugins[0], 'foo');\n      const context3 = manager.contextFor(plugins[1], 'foo');\n      context1.data.set('foo', 'bar');\n      assert.equal(context2.data.get('foo'), 'bar');\n      assert.isUndefined(context3.data.get('foo'));\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contains information about the specific job",
            "suites": [
                "BatchManager",
                "request contexts"
            ],
            "updatePoint": {
                "line": 60,
                "column": 51
            },
            "line": 60,
            "code": "    it('contains information about the specific job', () => {\n      const context1 = manager.contextFor(plugins[0], 'foo');\n      assert.equal(context1.token, 'foo');\n      const context2 = manager.contextFor(plugins[0], 'bar');\n      assert.equal(context2.token, 'bar');\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contains information about the batch",
            "suites": [
                "BatchManager",
                "request contexts"
            ],
            "updatePoint": {
                "line": 68,
                "column": 44
            },
            "line": 68,
            "code": "    it('contains information about the batch', () => {\n      const context1 = manager.contextFor(plugins[0]);\n      assert.deepEqual(context1.tokens, Object.keys(jobs));\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the html and duration for the right context",
            "suites": [
                "BatchManager",
                ".render()"
            ],
            "updatePoint": {
                "line": 74,
                "column": 56
            },
            "line": 74,
            "code": "    it('sets the html and duration for the right context', done => {\n      manager.render('foo').then(() => {\n        const context = manager.jobContexts.foo;\n        assert.equal(context.html, 'html');\n        assert.equal(context.statusCode, 200);\n        assert.isNotNull(context.duration);\n        done();\n      });\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fails if component is not registered",
            "suites": [
                "BatchManager",
                ".render()"
            ],
            "updatePoint": {
                "line": 83,
                "column": 44
            },
            "line": 83,
            "code": "    it('fails if component is not registered', done => {\n      manager.render('bar').catch(err => {\n        assert.equal(err.message, 'Component \"bar\" not registered');\n        done();\n      });\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fails when a component returns falsy html",
            "suites": [
                "BatchManager",
                ".render()"
            ],
            "updatePoint": {
                "line": 89,
                "column": 49
            },
            "line": 89,
            "code": "    it('fails when a component returns falsy html', done => {\n      manager.render('baz').catch(err => {\n        assert.equal(err.message, 'HTML was not returned to Hypernova, this is most likely an error within your application. Check your logs for any uncaught errors and/or rejections.');\n        done();\n      });\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets error and status code for the jobContext, when token is present",
            "suites": [
                "BatchManager",
                ".recordError()"
            ],
            "updatePoint": {
                "line": 97,
                "column": 76
            },
            "line": 97,
            "code": "    it('sets error and status code for the jobContext, when token is present', () => {\n      manager.recordError(new Error(), 'foo');\n      const context = manager.contextFor(plugins[0], 'foo');\n      assert.equal(context.statusCode, 500);\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets error and status code for the batch, when no token is present",
            "suites": [
                "BatchManager",
                ".recordError()"
            ],
            "updatePoint": {
                "line": 102,
                "column": 74
            },
            "line": 102,
            "code": "    it('sets error and status code for the batch, when no token is present', () => {\n      manager.recordError(new Error());\n      assert.equal(manager.statusCode, 500);\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an object with the html of the right jobContext",
            "suites": [
                "BatchManager",
                ".getResult()"
            ],
            "updatePoint": {
                "line": 108,
                "column": 63
            },
            "line": 108,
            "code": "    it('returns an object with the html of the right jobContext', done => {\n      manager.render('foo').then(() => {\n        const result = manager.getResult('foo');\n        assert.equal(result.html, 'html');\n        assert.isTrue(result.success);\n        assert.isNull(result.error);\n        done();\n      });\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an object with the html of the right jobContext",
            "suites": [
                "BatchManager",
                ".getResult()"
            ],
            "updatePoint": {
                "line": 117,
                "column": 63
            },
            "line": 117,
            "code": "    it('returns an object with the html of the right jobContext', () => {\n      manager.recordError(new Error(), 'bar');\n      const result = manager.getResult('bar');\n      assert.isFalse(result.success);\n      assert.isNotNull(result.error);\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an object with keys of tokens of each job",
            "suites": [
                "BatchManager",
                ".getResults()"
            ],
            "updatePoint": {
                "line": 125,
                "column": 57
            },
            "line": 125,
            "code": "    it('returns an object with keys of tokens of each job', done => {\n      manager.render('foo').then(() => {\n        manager.recordError(new Error(), 'bar');\n        const response = manager.getResults();\n        assert.isDefined(response.success);\n        assert.isDefined(response.error);\n        assert.isDefined(response.results);\n        assert.isDefined(response.results.foo);\n        assert.isDefined(response.results.bar);\n        assert.equal(response.results.foo.html, 'html');\n        done();\n      });\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contains a duration even if there is an error",
            "suites": [
                "BatchManager",
                ".getResults()"
            ],
            "updatePoint": {
                "line": 138,
                "column": 53
            },
            "line": 138,
            "code": "    it('contains a duration even if there is an error', done => {\n      manager.render('bar').catch(() => {\n        const response = manager.getResults();\n        assert.isDefined(response.results.bar.duration);\n        assert.isNumber(response.results.bar.duration);\n        done();\n      });\n    });",
            "file": "BatchManager-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should load up the DOM",
            "suites": [],
            "updatePoint": {
                "line": 26,
                "column": 28
            },
            "line": 26,
            "code": "  it('should load up the DOM', () => {\n    const $ = cheerio.load(result);\n    const spy = sinon.spy();\n\n    global.document.querySelector = className => {\n      spy(className);\n      return cheerioToDOM($, className);\n    };\n\n    global.document.querySelectorAll = classname => [cheerioToDOM($, classname)]; // Calling it again for the client.\n\n\n    load('Component3');\n    assert.ok(spy.calledOnce, 'our spy was called');\n  });",
            "file": "client-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not be called unless there is a node",
            "suites": [],
            "updatePoint": {
                "line": 41,
                "column": 49
            },
            "line": 41,
            "code": "  it('should not be called unless there is a node', () => {\n    global.document = {\n      querySelector() {\n        return null;\n      },\n\n      querySelectorAll() {\n        return [];\n      }\n\n    };\n    const arr = load('foo');\n    assert.ok(arr.length === 0);\n    delete global.document;\n  });",
            "file": "client-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be called if there is a node",
            "suites": [],
            "updatePoint": {
                "line": 56,
                "column": 41
            },
            "line": 56,
            "code": "  it('should be called if there is a node', () => {\n    const $ = cheerio.load(result);\n    global.document = {\n      querySelector(className) {\n        return cheerioToDOM($, className);\n      },\n\n      querySelectorAll(className) {\n        return [cheerioToDOM($, className)];\n      }\n\n    };\n    load('Component3').forEach(({\n      node,\n      data\n    }) => {\n      assert.isDefined(node);\n      assert.isObject(data, 'state is an object');\n      assert.equal(data.name, 'Serenity', 'state obj has proper state');\n    });\n  });",
            "file": "client-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "default method returns correct number of cpus",
            "suites": [
                "coordinator"
            ],
            "updatePoint": {
                "line": 6,
                "column": 51
            },
            "line": 6,
            "code": "  it('default method returns correct number of cpus', () => {\n    assert.equal(getDefaultCPUs(5), 4, 'getDefaultCPUs returns n - 1 CPUs');\n    assert.throws(getDefaultCPUs, TypeError, 'getDefaultCPUs must accept a positive integer');\n    assert.throws(() => {\n      getDefaultCPUs('three');\n    }, TypeError, 'getDefaultCPUs must accept a positive integer');\n    assert.throws(() => {\n      getDefaultCPUs(0);\n    }, TypeError, 'getDefaultCPUs must accept a positive integer');\n  });",
            "file": "coordinator-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses the correct number of cpus",
            "suites": [
                "coordinator"
            ],
            "updatePoint": {
                "line": 16,
                "column": 37
            },
            "line": 16,
            "code": "  it('uses the correct number of cpus', () => {\n    const sandbox = sinon.sandbox.create();\n    const dummyCPUs = Array.from({\n      length: 5\n    }, () => ({}));\n    sandbox.stub(os, 'cpus').returns(dummyCPUs);\n    assert.equal(getWorkerCount(), dummyCPUs.length - 1, 'getWorkerCount defaults to all available cpus minus one');\n    assert.equal(getWorkerCount(() => 3), 3, 'getWorkerCount uses specified cpus');\n    assert.throws(() => {\n      getWorkerCount(3);\n    }, TypeError, 'getCPUs must be a function');\n    assert.throws(() => {\n      getWorkerCount(() => 'three');\n    }, TypeError, 'getCPUs must return a positive integer');\n    assert.throws(() => {\n      getWorkerCount(() => 0);\n    }, TypeError, 'getCPUs must return a positive integer');\n    sandbox.restore();\n  });",
            "file": "coordinator-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the module if it exists",
            "suites": [
                "createGetComponent"
            ],
            "updatePoint": {
                "line": 9,
                "column": 37
            },
            "line": 9,
            "code": "  it('returns the module if it exists', () => {\n    const component = getComponent('HypernovaExample');\n    assert(component !== null, 'HypernovaExample exists');\n  });",
            "file": "createGetComponent-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns null if it does not exist",
            "suites": [
                "createGetComponent"
            ],
            "updatePoint": {
                "line": 13,
                "column": 39
            },
            "line": 13,
            "code": "  it('returns null if it does not exist', () => {\n    const component = getComponent('FooBarBazz');\n    assert.isNull(component, 'component does not exist');\n  });",
            "file": "createGetComponent-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs the code",
            "suites": [
                "createVM"
            ],
            "updatePoint": {
                "line": 8,
                "column": 19
            },
            "line": 8,
            "code": "  it('runs the code', () => {\n    const code = `\n      module.exports = 12;\n    `;\n    const num = vm.run('test.js', code);\n    assert(num === 12, 'returned value was given');\n  });",
            "file": "createVM-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "caches module.exports",
            "suites": [
                "createVM"
            ],
            "updatePoint": {
                "line": 15,
                "column": 27
            },
            "line": 15,
            "code": "  it('caches module.exports', () => {\n    process.foo = 0;\n    const code = `\n      process.foo += 1;\n      module.exports = process.foo;\n    `;\n    const num = vm.run('test.js', code);\n    assert(num === 1, 'the resulting code was incremented');\n    const nextNum = vm.run('test.js', code);\n    assert(nextNum === 1, 'the module.exports was cached');\n  });",
            "file": "createVM-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "flushes the cache",
            "suites": [
                "createVM"
            ],
            "updatePoint": {
                "line": 26,
                "column": 23
            },
            "line": 26,
            "code": "  it('flushes the cache', () => {\n    vm.run('test.js', '');\n    assert(vm.exportsCache.itemCount === 1, 'the cache has 1 entry');\n    vm.exportsCache.reset();\n    assert(vm.exportsCache.itemCount === 0, 'the cache was reset');\n  });",
            "file": "createVM-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "escapes",
            "suites": [
                "escaping"
            ],
            "updatePoint": {
                "line": 6,
                "column": 13
            },
            "line": 6,
            "code": "  it('escapes', () => {\n    const html = serialize('foo', '', {\n      foo: '</script>',\n      bar: '&gt;'\n    });\n    assert.include(html, '</script&gt;');\n    assert.include(html, '&amp;gt;');\n  });",
            "file": "escape-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads the escaped content correctly",
            "suites": [
                "escaping"
            ],
            "updatePoint": {
                "line": 15,
                "column": 43
            },
            "line": 15,
            "code": "    it('loads the escaped content correctly', () => {\n      const html = toScript({\n        a: 'b'\n      }, {\n        foo: '</script>',\n        bar: '&gt;',\n        baz: '&amp;'\n      });\n      const $ = cheerio.load(html);\n\n      global.document.querySelector = () => ({\n        innerHTML: $($('script')[0]).html()\n      });\n\n      const res = fromScript({\n        a: 'b'\n      });\n      assert.isObject(res);\n      assert.equal(res.foo, '</script>');\n      assert.equal(res.bar, '&gt;');\n      assert.equal(res.baz, '&amp;');\n    });",
            "file": "escape-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "escapes multiple times the same, with interleaved decoding",
            "suites": [
                "escaping"
            ],
            "updatePoint": {
                "line": 37,
                "column": 66
            },
            "line": 37,
            "code": "    it('escapes multiple times the same, with interleaved decoding', () => {\n      const makeHTML = () => toScript({\n        attr: 'key'\n      }, {\n        props: 'yay',\n        needsEncoding: '\" &gt; </script>' // \"needsEncoding\" is necessary\n\n      });\n\n      const script1 = makeHTML();\n      const script2 = makeHTML();\n      assert.equal(script1, script2, 'two successive toScripts result in identical HTML');\n      const $ = cheerio.load(script1);\n\n      global.document.querySelector = () => ({\n        innerHTML: $($('script')[0]).html()\n      });\n\n      const res = fromScript({\n        attr: 'key'\n      });\n      const script3 = makeHTML();\n      assert.equal(script1, script3, 'third toScript after a fromScript call results in the same HTML');\n      assert.isObject(res);\n      assert.equal(res.props, 'yay');\n    });",
            "file": "escape-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "escapes quotes and fixes data attributes",
            "suites": [
                "escaping"
            ],
            "updatePoint": {
                "line": 64,
                "column": 46
            },
            "line": 64,
            "code": "  it('escapes quotes and fixes data attributes', () => {\n    const markup = toScript({\n      'ZOMG-ok': 'yes',\n      'data-x': 'y',\n      '1337!!!': 'w00t',\n      '---valid': '',\n      'Is this ok?': '',\n      'weird-values': '\"]<script>alert(1);</script>',\n      'weird-values2': '\"&quot;\"'\n    }, {});\n    const $ = cheerio.load(markup);\n    const $node = $('script');\n    assert.isString($node.data('zomg-ok'));\n    assert.isString($node.data('data-x'));\n    assert.isString($node.data('1337'));\n    assert.isString($node.data('---valid'));\n    assert.isString($node.data('isthisok'));\n    assert.equal($node.data('weird-values'), '\"]<script>alert(1);</script>');\n    assert.equal($node.data('weird-values2'), '\"&quot;\"');\n    assert.isUndefined($node.data('ZOMG-ok'));\n    assert.isUndefined($node.data('x'));\n    assert.isUndefined($node.data('Is this ok?'));\n  });",
            "file": "escape-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "retrieves files",
            "suites": [
                "getFiles"
            ],
            "updatePoint": {
                "line": 5,
                "column": 21
            },
            "line": 5,
            "code": "  it('retrieves files', () => {\n    const files = getFiles(path.join('test', 'components'));\n    assert(files.length, 2);\n    assert.property(files[0], 'name');\n    assert.property(files[0], 'path');\n  });",
            "file": "getFiles-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs server if window is not defined",
            "suites": [
                "the runner"
            ],
            "updatePoint": {
                "line": 6,
                "column": 42
            },
            "line": 6,
            "code": "  it('runs server if window is not defined', () => {\n    const server = sinon.spy();\n    hypernova({\n      server\n    });\n    assert.ok(server.calledOnce);\n  });",
            "file": "hypernova-runner-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "DATA_KEY constant should be importable",
            "suites": [
                "hypernova"
            ],
            "updatePoint": {
                "line": 4,
                "column": 44
            },
            "line": 4,
            "code": "  it('DATA_KEY constant should be importable', () => {\n    assert.equal(DATA_KEY, 'hypernova-key');\n  });",
            "file": "index-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "DATA_ID constant should be importable",
            "suites": [
                "hypernova"
            ],
            "updatePoint": {
                "line": 7,
                "column": 43
            },
            "line": 7,
            "code": "  it('DATA_ID constant should be importable', () => {\n    assert.equal(DATA_ID, 'hypernova-id');\n  });",
            "file": "index-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs with sync methods",
            "suites": [
                "lifecycle",
                ".runAppLifecycle"
            ],
            "updatePoint": {
                "line": 38,
                "column": 30
            },
            "line": 38,
            "code": "    it('runs with sync methods', () => {\n      const plugin = mockPlugin();\n      const config = {};\n      return lifecycle.runAppLifecycle('initialize', [plugin], config).then(() => {\n        assert.propertyVal(plugin.initialize, 'callCount', 1);\n        assert.deepEqual(plugin.initialize.args[0][0], config);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs with async methods",
            "suites": [
                "lifecycle",
                ".runAppLifecycle"
            ],
            "updatePoint": {
                "line": 46,
                "column": 31
            },
            "line": 46,
            "code": "    it('runs with async methods', () => {\n      const config = {};\n      const plugin = mockPlugin();\n      let resolved = false;\n      const promise = new Promise(resolve => {\n        setTimeout(() => {\n          resolved = true;\n          resolve();\n        }, 20);\n      });\n      plugin.initialize = sinon.stub().returns(promise);\n      return lifecycle.runAppLifecycle('initialize', [plugin], config).then(() => {\n        assert.propertyVal(plugin.initialize, 'callCount', 1);\n        assert.deepEqual(plugin.initialize.args[0][0], config);\n        assert.isTrue(resolved);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs with multiple plugins",
            "suites": [
                "lifecycle",
                ".runAppLifecycle"
            ],
            "updatePoint": {
                "line": 63,
                "column": 34
            },
            "line": 63,
            "code": "    it('runs with multiple plugins', () => {\n      const config = {};\n      const plugins = [mockPlugin(), mockPlugin(), mockPlugin()];\n      plugins[0].initialize = sinon.stub().returns(Promise.resolve());\n      plugins[1].initialize = sinon.stub().returns(Promise.resolve());\n      return lifecycle.runAppLifecycle('initialize', plugins, config).then(() => {\n        assert.equal(plugins[0].initialize.callCount, 1);\n        assert.deepEqual(plugins[0].initialize.args[0][0], config);\n        assert.equal(plugins[1].initialize.callCount, 1);\n        assert.deepEqual(plugins[1].initialize.args[0][0], config);\n        assert.equal(plugins[2].initialize.callCount, 1);\n        assert.deepEqual(plugins[2].initialize.args[0][0], config);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs with sync methods",
            "suites": [
                "lifecycle",
                ".runLifecycle"
            ],
            "updatePoint": {
                "line": 79,
                "column": 30
            },
            "line": 79,
            "code": "    it('runs with sync methods', () => {\n      const plugin = mockPlugin();\n      const manager = batchManagerInstance(jobs, [plugin]);\n      return lifecycle.runLifecycle('jobStart', [plugin], manager, 'foo').then(() => {\n        assert.equal(plugin.jobStart.callCount, 1, 'calls the method passed in');\n        assert.deepEqual(plugin.jobStart.args[0][0], manager.contextFor(plugin, 'foo'));\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs with async methods",
            "suites": [
                "lifecycle",
                ".runLifecycle"
            ],
            "updatePoint": {
                "line": 87,
                "column": 31
            },
            "line": 87,
            "code": "    it('runs with async methods', () => {\n      const plugins = [mockPlugin(), mockPlugin()];\n      const manager = batchManagerInstance(jobs, plugins);\n      let resolved = false;\n      const promise = new Promise(resolve => {\n        setTimeout(() => {\n          resolved = true;\n          resolve();\n        }, 20);\n      });\n      plugins[0].jobStart = sinon.stub().returns(promise);\n      return lifecycle.runLifecycle('jobStart', plugins, manager, 'foo').then(() => {\n        const context = manager.contextFor(plugins[0], 'foo');\n        assert.equal(plugins[0].jobStart.callCount, 1);\n        assert.deepEqual(plugins[0].jobStart.args[0][0], context);\n        assert.equal(plugins[1].jobStart.callCount, 1);\n        assert.deepEqual(plugins[1].jobStart.args[0][0], context);\n        assert.isTrue(resolved);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs with promises and sync methods",
            "suites": [
                "lifecycle",
                ".runLifecycle"
            ],
            "updatePoint": {
                "line": 107,
                "column": 43
            },
            "line": 107,
            "code": "    it('runs with promises and sync methods', () => {\n      const plugins = [mockPlugin(), mockPlugin(), mockPlugin()];\n      plugins[0].jobStart = sinon.stub().returns(Promise.resolve());\n      plugins[1].jobStart = sinon.stub().returns(Promise.resolve());\n      const manager = batchManagerInstance(jobs, plugins);\n      lifecycle.runLifecycle('jobStart', plugins, manager, 'foo').then(() => {\n        const context = manager.contextFor(plugins[0], 'foo');\n        assert.equal(plugins[0].jobStart.callCount, 1);\n        assert.deepEqual(plugins[0].jobStart.args[0][0], context);\n        assert.equal(plugins[1].jobStart.callCount, 1);\n        assert.deepEqual(plugins[1].jobStart.args[0][0], context);\n        assert.equal(plugins[2].jobStart.callCount, 1);\n        assert.deepEqual(plugins[2].jobStart.args[0][0], context);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "runs methods synchronously",
            "suites": [
                "lifecycle",
                ".runLifecycleSync"
            ],
            "updatePoint": {
                "line": 124,
                "column": 34
            },
            "line": 124,
            "code": "    it('runs methods synchronously', () => {\n      const plugins = [mockPlugin(), mockPlugin(), mockPlugin()];\n      const manager = batchManagerInstance(jobs, plugins);\n      lifecycle.runLifecycleSync('beforeRender', plugins, manager, 'foo');\n      const context = manager.contextFor(plugins[0], 'foo');\n      assert.equal(plugins[0].beforeRender.callCount, 1);\n      assert.deepEqual(plugins[0].beforeRender.args[0][0], context);\n      assert.equal(plugins[1].beforeRender.callCount, 1);\n      assert.deepEqual(plugins[1].beforeRender.args[0][0], context);\n      assert.equal(plugins[2].beforeRender.callCount, 1);\n      assert.deepEqual(plugins[2].beforeRender.args[0][0], context);\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "calls onError synchronously with error object",
            "suites": [
                "lifecycle",
                ".errorSync"
            ],
            "updatePoint": {
                "line": 138,
                "column": 53
            },
            "line": 138,
            "code": "    it('calls onError synchronously with error object', () => {\n      const err = new Error('message');\n      const plugins = [mockPlugin(), mockPlugin(), mockPlugin()];\n      const manager = batchManagerInstance(jobs, plugins);\n      lifecycle.errorSync(err, plugins, manager, 'foo');\n      const context = manager.contextFor(plugins[0], 'foo');\n      assert.equal(plugins[0].onError.callCount, 1);\n      assert.deepEqual(plugins[0].onError.args[0][0], context);\n      assert.equal(plugins[0].onError.args[0][1], err);\n      assert.equal(plugins[1].onError.callCount, 1);\n      assert.deepEqual(plugins[1].onError.args[0][0], context);\n      assert.equal(plugins[1].onError.args[0][1], err);\n      assert.equal(plugins[1].onError.callCount, 1);\n      assert.deepEqual(plugins[1].onError.args[0][0], context);\n      assert.equal(plugins[1].onError.args[0][1], err);\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "calls lifecycle methods in correct order",
            "suites": [
                "lifecycle",
                ".processJob"
            ],
            "updatePoint": {
                "line": 164,
                "column": 48
            },
            "line": 164,
            "code": "    it('calls lifecycle methods in correct order', () => lifecycle.processJob('foo', plugins, manager).then(() => {\n      sinon.assert.callOrder(plugins[0].jobStart, plugins[1].jobStart, plugins[2].jobStart, plugins[0].beforeRender, plugins[1].beforeRender, plugins[2].beforeRender, manager.render, plugins[0].afterRender, plugins[1].afterRender, plugins[2].afterRender, plugins[0].jobEnd, plugins[1].jobEnd, plugins[2].jobEnd);\n    }));",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "calls plugin methods with proper arguments",
            "suites": [
                "lifecycle",
                ".processJob"
            ],
            "updatePoint": {
                "line": 167,
                "column": 50
            },
            "line": 167,
            "code": "    it('calls plugin methods with proper arguments', () => {\n      const contexts = [manager.contextFor(plugins[0], 'foo'), manager.contextFor(plugins[1], 'foo'), manager.contextFor(plugins[2], 'foo')];\n      return lifecycle.processJob('foo', plugins, manager).then(() => {\n        sinon.assert.calledWith(plugins[0].jobStart, contexts[0]);\n        sinon.assert.calledWith(plugins[1].jobStart, contexts[1]);\n        sinon.assert.calledWith(plugins[2].jobStart, contexts[2]);\n        sinon.assert.calledWith(plugins[0].beforeRender, contexts[0]);\n        sinon.assert.calledWith(plugins[1].beforeRender, contexts[1]);\n        sinon.assert.calledWith(plugins[2].beforeRender, contexts[2]);\n        sinon.assert.calledWith(manager.render, 'foo');\n        sinon.assert.calledWith(plugins[0].afterRender, contexts[0]);\n        sinon.assert.calledWith(plugins[1].afterRender, contexts[1]);\n        sinon.assert.calledWith(plugins[2].afterRender, contexts[2]);\n        sinon.assert.calledWith(plugins[0].jobEnd, contexts[0]);\n        sinon.assert.calledWith(plugins[1].jobEnd, contexts[1]);\n        sinon.assert.calledWith(plugins[2].jobEnd, contexts[2]);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on an error, fails fast",
            "suites": [
                "lifecycle",
                ".processJob"
            ],
            "updatePoint": {
                "line": 185,
                "column": 31
            },
            "line": 185,
            "code": "    it('on an error, fails fast', () => {\n      plugins[0].beforeRender = sinon.stub().throws();\n      return lifecycle.processJob('foo', plugins, manager).then(() => {\n        sinon.assert.called(plugins[0].jobStart);\n        sinon.assert.called(plugins[1].jobStart);\n        sinon.assert.called(plugins[2].jobStart);\n        sinon.assert.notCalled(plugins[0].jobEnd);\n        sinon.assert.notCalled(plugins[1].jobEnd);\n        sinon.assert.notCalled(plugins[2].jobEnd);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on an error, calls manager.recordError",
            "suites": [
                "lifecycle",
                ".processJob"
            ],
            "updatePoint": {
                "line": 196,
                "column": 46
            },
            "line": 196,
            "code": "    it('on an error, calls manager.recordError', () => {\n      plugins[0].beforeRender = sinon.stub().throws();\n      return lifecycle.processJob('foo', plugins, manager).then(() => {\n        sinon.assert.called(manager.recordError);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on an error, calls onError for plugins",
            "suites": [
                "lifecycle",
                ".processJob"
            ],
            "updatePoint": {
                "line": 202,
                "column": 46
            },
            "line": 202,
            "code": "    it('on an error, calls onError for plugins', () => {\n      plugins[0].beforeRender = sinon.stub().throws();\n      return lifecycle.processJob('foo', plugins, manager).then(() => {\n        sinon.assert.called(plugins[0].onError);\n        sinon.assert.called(plugins[1].onError);\n        sinon.assert.called(plugins[2].onError);\n      });\n    });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "calls lifecycle methods in correct order",
            "suites": [
                "lifecycle",
                ".processBatch",
                "when concurrent is "
            ],
            "updatePoint": {
                "line": 222,
                "column": 52
            },
            "line": 222,
            "code": "        it('calls lifecycle methods in correct order', () => lifecycle.processBatch(jobs, plugins, manager, concurrent).then(() => {\n          sinon.assert.callOrder(plugins[0].batchStart, plugins[1].batchStart, plugins[2].batchStart, // gets called once for each job\n          manager.render, manager.render, plugins[0].batchEnd, plugins[1].batchEnd, plugins[2].batchEnd);\n        }));",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on an error, fails fast",
            "suites": [
                "lifecycle",
                ".processBatch",
                "when concurrent is "
            ],
            "updatePoint": {
                "line": 226,
                "column": 35
            },
            "line": 226,
            "code": "        it('on an error, fails fast', () => {\n          plugins[0].batchStart = sinon.stub().throws();\n          return lifecycle.processBatch(jobs, plugins, manager, concurrent).then(() => {\n            sinon.assert.called(plugins[0].batchStart);\n            sinon.assert.notCalled(manager.render);\n            sinon.assert.notCalled(plugins[0].batchEnd);\n          });\n        });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on an error, calls manager.recordError",
            "suites": [
                "lifecycle",
                ".processBatch",
                "when concurrent is "
            ],
            "updatePoint": {
                "line": 234,
                "column": 50
            },
            "line": 234,
            "code": "        it('on an error, calls manager.recordError', () => {\n          plugins[0].batchStart = sinon.stub().throws();\n          return lifecycle.processBatch(jobs, plugins, manager, concurrent).then(() => {\n            sinon.assert.called(manager.recordError);\n          });\n        });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on an error, calls onError for plugins",
            "suites": [
                "lifecycle",
                ".processBatch",
                "when concurrent is "
            ],
            "updatePoint": {
                "line": 240,
                "column": 50
            },
            "line": 240,
            "code": "        it('on an error, calls onError for plugins', () => {\n          plugins[0].batchStart = sinon.stub().throws();\n          return lifecycle.processBatch(jobs, plugins, manager, concurrent).then(() => {\n            sinon.assert.called(plugins[0].onError);\n            sinon.assert.called(plugins[1].onError);\n            sinon.assert.called(plugins[2].onError);\n          });\n        });",
            "file": "lifecycle-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads the respective environment",
            "suites": [
                "loadModules"
            ],
            "updatePoint": {
                "line": 3,
                "column": 38
            },
            "line": 3,
            "code": "  it('loads the respective environment', () => {\n    const environment = loadModules(require, ['./a.js', './b.js']);\n    const vm = createVM({\n      environment\n    });\n    vm.run('test/loadModules-test.js', `\n      const assert = require('chai').assert;\n\n      assert.isDefined(global.a);\n      assert.isDefined(global.b);\n    `);\n  });",
            "file": "loadModules-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works if one module is passed",
            "suites": [
                "loadModules"
            ],
            "updatePoint": {
                "line": 15,
                "column": 35
            },
            "line": 15,
            "code": "  it('works if one module is passed', () => {\n    const environment = loadModules(require, ['./a.js']);\n    const vm = createVM({\n      environment\n    });\n    vm.run('test/loadModules-test.js', `\n      const assert = require('chai').assert;\n\n      assert.isDefined(global.a);\n    `);\n  });",
            "file": "loadModules-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "still works if a module that does not exist is passed",
            "suites": [
                "loadModules"
            ],
            "updatePoint": {
                "line": 26,
                "column": 59
            },
            "line": 26,
            "code": "  it('still works if a module that does not exist is passed', () => {\n    const environment = loadModules(require, ['./a.js', './does-not-exist.js']);\n    const vm = createVM({\n      environment\n    });\n    vm.run('test/loadModules-test.js', `\n      const assert = require('chai').assert;\n\n      assert.isDefined(global.a);\n    `);\n  });",
            "file": "loadModules-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "still works if a module that does not exist is passed in first",
            "suites": [
                "loadModules"
            ],
            "updatePoint": {
                "line": 37,
                "column": 68
            },
            "line": 37,
            "code": "  it('still works if a module that does not exist is passed in first', () => {\n    const environment = loadModules(require, ['./does-not-exist.js', './a.js']);\n    const vm = createVM({\n      environment\n    });\n    vm.run('test/loadModules-test.js', `\n      const assert = require('chai').assert;\n\n      assert.isDefined(global.a);\n    `);\n  });",
            "file": "loadModules-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not leak globals across requests",
            "suites": [
                "Module"
            ],
            "updatePoint": {
                "line": 17,
                "column": 43
            },
            "line": 17,
            "code": "  it('does not leak globals across requests', () => {\n    global.foo = 10;\n    const code = `\n      global.foo = global.foo || 0;\n      global.foo += 1;\n    `;\n    run(code);\n    assert(global.foo === 10, 'our environment\\'s global was unaffected');\n    run(code);\n    assert(global.foo === 10, 'our environment\\'s global was unaffected after a second run');\n  });",
            "file": "Module-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads a module and return the instance",
            "suites": [
                "Module"
            ],
            "updatePoint": {
                "line": 28,
                "column": 44
            },
            "line": 28,
            "code": "  it('loads a module and return the instance', () => {\n    const module = Module.load('./test/mutableArray.js');\n    assert(has(module, 'exports') === true, 'module has exports property');\n    assert.isArray(module.exports, 'module.exports is our array');\n  });",
            "file": "Module-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not be able to mutate singletons",
            "suites": [
                "Module"
            ],
            "updatePoint": {
                "line": 33,
                "column": 45
            },
            "line": 33,
            "code": "  it('should not be able to mutate singletons', () => {\n    assert(mutableArray.length === 0, 'our array is empty');\n    mutableArray.push(1, 2, 3);\n    assert(mutableArray.length === 3, 'our array has a length of 3');\n    const code = `\n      var mutableArray = require('./mutableArray');\n      mutableArray.push(1);\n      module.exports = mutableArray;\n    `;\n    const arr = run(code);\n    assert(mutableArray !== arr, 'both arrays do not equal each other');\n    assert(arr.length === 1, 'returned mutableArray has length of 1');\n    assert(mutableArray.length === 3, 'our array still has a length of 3');\n  });",
            "file": "Module-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns a batch properly",
            "suites": [
                "renderBatch",
                "when processJobsConcurrently is "
            ],
            "updatePoint": {
                "line": 51,
                "column": 34
            },
            "line": 51,
            "code": "      it('returns a batch properly', done => {\n        const expressRoute = renderBatch({\n          getComponent() {\n            return null;\n          },\n\n          plugins: [],\n          processJobsConcurrently\n        }, () => false);\n        const {\n          req,\n          res\n        } = makeExpress();\n        expressRoute(req, res).then(() => {\n          assert.isObject(res.getResponse());\n          const {\n            status,\n            json\n          } = res.getResponse();\n          assert.isDefined(status);\n          assert.equal(status, 200);\n          assert.isTrue(json.success);\n          assert.isNull(json.error);\n          const {\n            a\n          } = json.results;\n          assert.isDefined(a);\n          assert.property(a, 'html');\n          assert.property(a, 'meta');\n          assert.property(a, 'duration');\n          assert.property(a, 'success');\n          assert.property(a, 'error');\n          done();\n        });\n      });",
            "file": "renderBatch-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "rejects a Promise with a string and its ok",
            "suites": [
                "renderBatch",
                "when processJobsConcurrently is "
            ],
            "updatePoint": {
                "line": 86,
                "column": 52
            },
            "line": 86,
            "code": "      it('rejects a Promise with a string and its ok', done => {\n        const expressRoute = renderBatch({\n          getComponent() {\n            return Promise.reject('Nope');\n          },\n\n          plugins: [],\n          processJobsConcurrently\n        }, () => false);\n        const {\n          req,\n          res\n        } = makeExpress();\n        expressRoute(req, res).then(() => {\n          const {\n            json\n          } = res.getResponse();\n          const {\n            a\n          } = json.results;\n          assert.equal(a.error.name, 'Error');\n          assert.equal(a.error.message, 'Nope');\n          done();\n        });\n      });",
            "file": "renderBatch-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "rejects a Promise with a ReferenceError",
            "suites": [
                "renderBatch",
                "when processJobsConcurrently is "
            ],
            "updatePoint": {
                "line": 111,
                "column": 49
            },
            "line": 111,
            "code": "      it('rejects a Promise with a ReferenceError', done => {\n        const expressRoute = renderBatch({\n          getComponent() {\n            return Promise.reject(new ReferenceError());\n          },\n\n          plugins: [],\n          processJobsConcurrently\n        }, () => false);\n        const {\n          req,\n          res\n        } = makeExpress();\n        expressRoute(req, res).then(() => {\n          const {\n            json\n          } = res.getResponse();\n          const {\n            a\n          } = json.results;\n          assert.equal(a.error.name, 'ReferenceError');\n          done();\n        });\n      });",
            "file": "renderBatch-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "rejects a Promise with an Array",
            "suites": [
                "renderBatch",
                "when processJobsConcurrently is "
            ],
            "updatePoint": {
                "line": 135,
                "column": 41
            },
            "line": 135,
            "code": "      it('rejects a Promise with an Array', done => {\n        const expressRoute = renderBatch({\n          getComponent() {\n            return Promise.reject([1, 2, 3]);\n          },\n\n          plugins: [],\n          processJobsConcurrently\n        }, () => false);\n        const {\n          req,\n          res\n        } = makeExpress();\n        expressRoute(req, res).then(() => {\n          const {\n            json\n          } = res.getResponse();\n          const {\n            a\n          } = json.results;\n          assert.equal(a.error.name, 'Error');\n          assert.equal(a.error.message, '1,2,3');\n          done();\n        });\n      });",
            "file": "renderBatch-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "blows up if hypernova does not get getComponent",
            "suites": [
                "Hypernova server"
            ],
            "updatePoint": {
                "line": 16,
                "column": 53
            },
            "line": 16,
            "code": "  it('blows up if hypernova does not get getComponent', () => {\n    assert.throws(hypernova, TypeError);\n  });",
            "file": "server-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "blows up if hypernova gets `createApplication` that isnt a function",
            "suites": [
                "Hypernova server"
            ],
            "updatePoint": {
                "line": 19,
                "column": 73
            },
            "line": 19,
            "code": "  it('blows up if hypernova gets `createApplication` that isnt a function', () => {\n    assert.throws(() => hypernova({\n      devMode: true,\n      getComponent,\n      createApplication: {}\n    }), TypeError);\n  });",
            "file": "server-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "blows up if hypernova gets `createApplication` that doesnt return an express app",
            "suites": [
                "Hypernova server"
            ],
            "updatePoint": {
                "line": 26,
                "column": 86
            },
            "line": 26,
            "code": "  it('blows up if hypernova gets `createApplication` that doesnt return an express app', () => {\n    assert.throws(() => hypernova({\n      devMode: true,\n      getComponent,\n      createApplication: () => {}\n    }), TypeError);\n  });",
            "file": "server-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "starts up the hypernova server without blowing up",
            "suites": [
                "Hypernova server"
            ],
            "updatePoint": {
                "line": 33,
                "column": 55
            },
            "line": 33,
            "code": "  it('starts up the hypernova server without blowing up', () => {\n    hypernova({\n      devMode: true,\n      getComponent\n    });\n  });",
            "file": "server-test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "starts up the hypernova server and an express instance without blowing up",
            "suites": [
                "Hypernova server"
            ],
            "updatePoint": {
                "line": 39,
                "column": 79
            },
            "line": 39,
            "code": "  it('starts up the hypernova server and an express instance without blowing up', () => {\n    const APP_TITLE = 'my custom express instance';\n\n    const createApplication = () => {\n      const app = express();\n      app.locals.name = APP_TITLE;\n      return app;\n    };\n\n    const hypernovaServer = hypernova({\n      devMode: true,\n      getComponent,\n      createApplication,\n      port: 8090\n    });\n    assert.equal(APP_TITLE, hypernovaServer.locals.name);\n  });",
            "file": "server-test.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "airbnb__hypernova.svg"
}