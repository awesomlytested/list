{"repo":"joshwcomeau/react-flip-move","url":"https://github.com/joshwcomeau/react-flip-move","branch":"master","configs":[{"package":"react-flip-move","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"renders the children components","suites":["FlipMove"],"updatePoint":{"line":130,"column":37,"index":4369},"line":130,"code":"  it('renders the children components', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ListParent, null));\n    expect(wrapper.find(ListItem).length).to.equal(3);\n    expect(wrapper.find('li').length).to.equal(3);\n    const outputComponents = wrapper.find(ListItem);\n\n    // Check that they're rendered in order\n    expect(outputComponents.at(0).prop('id')).to.equal('a');\n    expect(outputComponents.at(1).prop('id')).to.equal('b');\n    expect(outputComponents.at(2).prop('id')).to.equal('c');\n  });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"renders the children components as fragments","suites":["FlipMove"],"updatePoint":{"line":141,"column":50,"index":4903},"line":141,"code":"  it('renders the children components as fragments', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ListParent, {\n      useFragment: true\n    }));\n    expect(wrapper.find(ListItem).length).to.equal(3);\n    expect(wrapper.find('li').length).to.equal(3);\n    const outputComponents = wrapper.find(ListItem);\n\n    // Check that they're rendered in order\n    expect(outputComponents.at(0).prop('id')).to.equal('a');\n    expect(outputComponents.at(1).prop('id')).to.equal('b');\n    expect(outputComponents.at(2).prop('id')).to.equal('c');\n  });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"renders the children without wrapper if typeName prop is falsy","suites":["FlipMove"],"updatePoint":{"line":154,"column":68,"index":5482},"line":154,"code":"  it('renders the children without wrapper if typeName prop is falsy', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ListParent, {\n      withoutWrapper: true\n    }));\n    expect(wrapper.find(ListItem).length).to.equal(3);\n    expect(wrapper.find('li').length).to.equal(3);\n    const outputComponents = wrapper.find('FlipMove').children();\n\n    // Check that they're rendered in order\n    expect(outputComponents.at(0).prop('id')).to.equal('a');\n    expect(outputComponents.at(1).prop('id')).to.equal('b');\n    expect(outputComponents.at(2).prop('id')).to.equal('c');\n  });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"rearranges the components and DOM nodes","suites":["FlipMove","updating state"],"updatePoint":{"line":177,"column":47,"index":6346},"line":177,"code":"    it('rearranges the components and DOM nodes', () => {\n      const outputComponents = attachedWrapper.find(ListItem);\n      const outputTags = attachedWrapper.find('li');\n      expect(outputComponents.at(0).prop('id')).to.equal('c');\n      expect(outputComponents.at(1).prop('id')).to.equal('b');\n      expect(outputComponents.at(2).prop('id')).to.equal('a');\n      expect(outputTags.at(0).prop('id')).to.equal('c');\n      expect(outputTags.at(1).prop('id')).to.equal('b');\n      expect(outputTags.at(2).prop('id')).to.equal('a');\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"doesn't actually move the elements on-screen synchronously","suites":["FlipMove","updating state"],"updatePoint":{"line":187,"column":66,"index":6907},"line":187,"code":"    it(\"doesn't actually move the elements on-screen synchronously\", () => {\n      // The animation has not started yet.\n      // While the DOM nodes might have changed places, their on-screen\n      // positions should be consistent with where they started.\n      const newPositions = getTagPositions(attachedWrapper);\n\n      // Even though, in terms of the DOM, tag C is at the top,\n      // its bounding box should still be the lowest\n      expect(newPositions).to.deep.equal(originalPositions);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"stacks all the elements on top of each other after 250ms","suites":["FlipMove","updating state"],"updatePoint":{"line":197,"column":64,"index":7411},"line":197,"code":"    it('stacks all the elements on top of each other after 250ms', done => {\n      // We know the total duration of the animation is 500ms.\n      // Three items are being re-arranged; top and bottom changing places.\n      // Therefore, if we wait 250ms, all 3 items should be stacked.\n      setTimeout(() => {\n        const newPositions = getTagPositions(attachedWrapper);\n        // B should not move at all\n        expect(newPositions.b).to.deep.equal(originalPositions.b);\n\n        // In an ideal world, these three elements would be near-identical\n        // in their placement.\n        // This works very well on localhost, but travis doesn't run so quick.\n        // I'm just going to assume that as long as it's somewhere between\n        // initial and final, things are good.\n        expect(newPositions.a.top).to.be.greaterThan(originalPositions.a.top);\n        expect(newPositions.c.top).to.be.lessThan(originalPositions.c.top);\n        done();\n      }, 250);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"finishes the animation after 750ms","suites":["FlipMove","updating state"],"updatePoint":{"line":216,"column":42,"index":8367},"line":216,"code":"    it('finishes the animation after 750ms', done => {\n      // Waiting 750ms. Giving a buffer because\n      // Travis is slowwww\n      setTimeout(() => {\n        const newPositions = getTagPositions(attachedWrapper);\n\n        // B should still be in the same place.\n        expect(newPositions.b).to.deep.equal(originalPositions.b);\n\n        // A and C should have swapped places.\n        expect(newPositions.a).to.deep.equal(originalPositions.c);\n        expect(newPositions.c).to.deep.equal(originalPositions.a);\n        done();\n      }, 750);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"should fire the onStart handler immediately","suites":["FlipMove","callbacks"],"updatePoint":{"line":239,"column":51,"index":9103},"line":239,"code":"    it('should fire the onStart handler immediately', () => {\n      expect(attachedWrapper.instance().count).to.equal(-2);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"should fire onFinish after the animation","suites":["FlipMove","callbacks"],"updatePoint":{"line":242,"column":48,"index":9231},"line":242,"code":"    it('should fire onFinish after the animation', done => {\n      setTimeout(() => {\n        expect(attachedWrapper.instance().count).to.equal(0);\n        done();\n      }, 750);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"should fire the onFinishAll stub only once","suites":["FlipMove","callbacks"],"updatePoint":{"line":248,"column":50,"index":9420},"line":248,"code":"    it('should fire the onFinishAll stub only once', done => {\n      setTimeout(() => {\n        expect(finishAllStub).to.have.been.calledOnce;\n        done();\n      }, 750);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"doesn't run checks in production environment","suites":["FlipMove","prop runtime checking and conversion"],"updatePoint":{"line":274,"column":52,"index":10076},"line":274,"code":"    it(\"doesn't run checks in production environment\", () => {\n      process.env = {\n        NODE_ENV: 'production'\n      };\n      shallow( /*#__PURE__*/React.createElement(FlipMove, null, /*#__PURE__*/React.createElement(SFC, {\n        key: \"hi\"\n      })));\n      shallow( /*#__PURE__*/React.createElement(FlipMove, null, \"hi\"));\n      shallow( /*#__PURE__*/React.createElement(FlipMove, {\n        duration: \"hi\"\n      }));\n      shallow( /*#__PURE__*/React.createElement(FlipMove, {\n        appearAnimation: \"unknown\"\n      }));\n      expect(errorStub).to.not.have.been.called;\n      expect(warnStub).to.not.have.been.called;\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"applies a bogus string","suites":["FlipMove","prop runtime checking and conversion","timing props"],"updatePoint":{"line":292,"column":32,"index":10729},"line":292,"code":"      it('applies a bogus string', () => {\n        shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          duration: \"hi\"\n        }));\n        expect(errorStub).to.have.been.calledWith(`\n>> Error, via react-flip-move <<\n\nThe prop you provided for 'duration' is invalid. It needs to be a positive integer, or a string that can be resolved to a number. The value you provided is 'hi'.\n\nAs a result,  the default value for this parameter will be used, which is '350'.\n`);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"applies an array prop and throws","suites":["FlipMove","prop runtime checking and conversion","timing props"],"updatePoint":{"line":304,"column":42,"index":11226},"line":304,"code":"      it('applies an array prop and throws', () => {\n        shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          duration: ['hi']\n        }));\n        expect(errorStub).to.have.been.calledWith(`\n>> Error, via react-flip-move <<\n\nThe prop you provided for 'duration' is invalid. It needs to be a positive integer, or a string that can be resolved to a number. The value you provided is 'hi'.\n\nAs a result,  the default value for this parameter will be used, which is '350'.\n`);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"applies a string that can be converted to an int","suites":["FlipMove","prop runtime checking and conversion","timing props"],"updatePoint":{"line":316,"column":58,"index":11741},"line":316,"code":"      it('applies a string that can be converted to an int', () => {\n        shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          duration: \"10\"\n        }));\n        expect(errorStub).to.not.have.been.called;\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"doesn't warn about SFC without key","suites":["FlipMove","prop runtime checking and conversion","unsupported children"],"updatePoint":{"line":324,"column":44,"index":12010},"line":324,"code":"      it(\"doesn't warn about SFC without key\", () => {\n        shallow( /*#__PURE__*/React.createElement(FlipMove, null, /*#__PURE__*/React.createElement(SFC, null)));\n        expect(warnStub).to.not.have.been.called;\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"warns once about SFC with key","suites":["FlipMove","prop runtime checking and conversion","unsupported children"],"updatePoint":{"line":328,"column":39,"index":12233},"line":328,"code":"      it('warns once about SFC with key', () => {\n        shallow( /*#__PURE__*/React.createElement(FlipMove, null, /*#__PURE__*/React.createElement(SFC, {\n          key: \"foo\"\n        }), /*#__PURE__*/React.createElement(SFC, {\n          key: \"bar\"\n        })));\n        expect(warnStub).to.have.been.calledOnce;\n        expect(warnStub).to.have.been.calledWith(`\n>> Error, via react-flip-move <<\n\nYou provided a stateless functional component as a child to <FlipMove>. Unfortunately, SFCs aren't supported, because Flip Move needs access to the backing instances via refs, and SFCs don't have a public instance that holds that info.\n\nPlease wrap your components in a native element (eg. <div>), or a non-functional component.\n`);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"warns once about plain text children","suites":["FlipMove","prop runtime checking and conversion","unsupported children"],"updatePoint":{"line":343,"column":46,"index":12982},"line":343,"code":"      it('warns once about plain text children', () => {\n        shallow( /*#__PURE__*/React.createElement(FlipMove, null, \"hi\", /*#__PURE__*/React.createElement(\"div\", {\n          key: \"foo\"\n        }), \"hi\"));\n        expect(warnStub).to.have.been.calledOnce;\n        expect(warnStub).to.have.been.calledWith(`\n>> Error, via react-flip-move <<\n\nYou provided a primitive (text or number) node as a child to <FlipMove>. Flip Move needs containers with unique keys to move children around.\n\nPlease wrap your value in a native element (eg. <span>), or a component.\n`);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"doesn't warn when key is present","suites":["FlipMove","prop runtime checking and conversion","unsupported children"],"updatePoint":{"line":356,"column":42,"index":13555},"line":356,"code":"      it(\"doesn't warn when key is present\", () => {\n        shallow( /*#__PURE__*/React.createElement(FlipMove, null, /*#__PURE__*/React.createElement(\"div\", {\n          key: \"hi\"\n        })));\n        expect(warnStub).to.not.have.been.called;\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"warns when child has disabled attribute","suites":["FlipMove","prop runtime checking and conversion","unsupported children"],"updatePoint":{"line":362,"column":49,"index":13817},"line":362,"code":"      it('warns when child has disabled attribute', () => {\n        const items = [/*#__PURE__*/React.createElement(\"button\", {\n          disabled: true,\n          key: \"1\"\n        }), /*#__PURE__*/React.createElement(\"button\", {\n          disabled: true,\n          key: \"2\"\n        })];\n        class ButtonList extends Component {\n          state = {\n            items\n          };\n          render() {\n            return /*#__PURE__*/React.createElement(FlipMove, null, this.state.items);\n          }\n        }\n        const component = mount( /*#__PURE__*/React.createElement(ButtonList, null));\n        component.setState({\n          items: [items[0]]\n        });\n        expect(warnStub).to.have.been.calledWith(`\n>> Warning, via react-flip-move <<\n\nOne or more of Flip Move's child elements have the html attribute 'disabled' set to true.\n\nPlease note that this will cause animations to break in Internet Explorer 11 and below. Either remove the disabled attribute or set 'animation' to false.\n`);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"doesn't warn when child has disabled attribute if animations are disabled","suites":["FlipMove","prop runtime checking and conversion","unsupported children"],"updatePoint":{"line":390,"column":83,"index":14866},"line":390,"code":"      it(\"doesn't warn when child has disabled attribute if animations are disabled\", () => {\n        const items = [/*#__PURE__*/React.createElement(\"button\", {\n          disabled: true,\n          key: \"1\"\n        }), /*#__PURE__*/React.createElement(\"button\", {\n          disabled: true,\n          key: \"2\"\n        })];\n        class ButtonList extends Component {\n          state = {\n            items\n          };\n          render() {\n            return /*#__PURE__*/React.createElement(FlipMove, {\n              disableAllAnimations: true\n            }, this.state.items);\n          }\n        }\n        const component = mount( /*#__PURE__*/React.createElement(ButtonList, null));\n        component.setState({\n          items: [items[0]]\n        });\n        expect(warnStub).not.to.have.been.calledWith(`\n>> Warning, via react-flip-move <<\n\nOne or more of Flip Move's child elements have the html attribute 'disabled' set to true.\n\nPlease note that this will cause animations to break in Internet Explorer 11 and below. Either remove the disabled attribute or set 'animation' to false.\n`);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"adds a falsy child to the articles","suites":["FlipMove","prop runtime checking and conversion","falsy children"],"updatePoint":{"line":428,"column":44,"index":16135},"line":428,"code":"      it('adds a falsy child to the articles', () => {\n        expect(errorStub).to.not.have.been.called;\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"transitions without issue","suites":["FlipMove","prop runtime checking and conversion","falsy children"],"updatePoint":{"line":431,"column":35,"index":16242},"line":431,"code":"      it('transitions without issue', done => {\n        setTimeout(() => {\n          expect(errorStub).to.not.have.been.called;\n          done();\n        }, 750);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"accepts animation object","suites":["FlipMove","prop runtime checking and conversion","animation props"],"updatePoint":{"line":439,"column":34,"index":16462},"line":439,"code":"      it('accepts animation object', () => {\n        const wrapper = shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          appearAnimation: {\n            from: {\n              opacity: '0'\n            },\n            to: {\n              opacity: '0.5'\n            }\n          }\n        }));\n        expect(errorStub).to.not.have.been.called;\n        expect(wrapper.prop('appearAnimation')).to.deep.equal({\n          from: {\n            opacity: '0'\n          },\n          to: {\n            opacity: '0.5'\n          }\n        });\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"uses default preset when value is `true`","suites":["FlipMove","prop runtime checking and conversion","animation props"],"updatePoint":{"line":460,"column":50,"index":17026},"line":460,"code":"      it('uses default preset when value is `true`', () => {\n        const wrapper = shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          appearAnimation: true\n        }));\n        expect(errorStub).to.not.have.been.called;\n        expect(wrapper.prop('appearAnimation')).to.deep.equal(appearPresets[defaultPreset]);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"uses empty preset when value is `false`","suites":["FlipMove","prop runtime checking and conversion","animation props"],"updatePoint":{"line":467,"column":49,"index":17363},"line":467,"code":"      it('uses empty preset when value is `false`', () => {\n        const wrapper = shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          appearAnimation: false\n        }));\n        expect(errorStub).to.not.have.been.called;\n        expect(wrapper.prop('appearAnimation')).to.deep.equal(appearPresets[disablePreset]);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"finds a preset by name","suites":["FlipMove","prop runtime checking and conversion","animation props"],"updatePoint":{"line":474,"column":32,"index":17684},"line":474,"code":"      it('finds a preset by name', () => {\n        const wrapper = shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          appearAnimation: \"fade\"\n        }));\n        expect(errorStub).to.not.have.been.called;\n        expect(wrapper.prop('appearAnimation')).to.deep.equal(appearPresets.fade);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"throws on an unknown preset","suites":["FlipMove","prop runtime checking and conversion","animation props"],"updatePoint":{"line":481,"column":37,"index":18001},"line":481,"code":"      it('throws on an unknown preset', () => {\n        const wrapper = shallow( /*#__PURE__*/React.createElement(FlipMove, {\n          appearAnimation: \"unknown\"\n        }));\n        expect(errorStub).to.have.been.calledWith(`\n>> Error, via react-flip-move <<\n\nThe enter/leave preset you provided is invalid. We don't currently have a 'unknown preset.'\n\nAcceptable values are elevator, fade, accordionVertical, accordionHorizontal, none. The default value of 'elevator' will be used.\n`);\n        expect(wrapper.prop('appearAnimation')).to.deep.equal(appearPresets[defaultPreset]);\n      });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"should transition immediately","suites":["FlipMove","disabling animation"],"updatePoint":{"line":507,"column":37,"index":18914},"line":507,"code":"    it('should transition immediately', () => {\n      const newPositions = getTagPositions(attachedWrapper);\n      expect(newPositions.a).to.deep.equal(originalPositions.c);\n      expect(newPositions.b).to.deep.equal(originalPositions.b);\n      expect(newPositions.c).to.deep.equal(originalPositions.a);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"should be maintained","suites":["FlipMove","container height"],"updatePoint":{"line":525,"column":28,"index":19538},"line":525,"code":"    it('should be maintained', () => {\n      expect(containerBox.height).to.equal(getContainerBox(attachedWrapper).height);\n    });","file":"index.spec.js","skipped":false,"dir":"test"},{"name":"should shallow-render styled components","suites":["FlipMove","styled components 4"],"updatePoint":{"line":530,"column":47,"index":19737},"line":530,"code":"    it('should shallow-render styled components', () => {\n      const El = styled.div``;\n      const wrapper = mount( /*#__PURE__*/React.createElement(FlipMove, null, /*#__PURE__*/React.createElement(El, {\n        key: \"a\",\n        id: \"a\"\n      }, \"Test\"), /*#__PURE__*/React.createElement(El, {\n        key: \"b\",\n        id: \"b\"\n      }, \"Test\"), /*#__PURE__*/React.createElement(El, {\n        key: \"c\",\n        id: \"c\"\n      }, \"Test\")));\n      expect(wrapper.find('div#a').length).to.equal(1);\n      expect(wrapper.find('div#b').length).to.equal(1);\n      expect(wrapper.find('div#c').length).to.equal(1);\n    });","file":"index.spec.js","skipped":false,"dir":"test"}]}