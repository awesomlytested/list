{
    "repo": "chakra-ui/chakra-ui",
    "url": "https://github.com/chakra-ui/chakra-ui",
    "branch": "main",
    "configs": [
        {
            "package": "@chakra-ui/accordion",
            "lang": "js",
            "dir": "packages/accordion/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/alert",
            "lang": "js",
            "dir": "packages/alert/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/avatar",
            "lang": "js",
            "dir": "packages/avatar/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/breadcrumb",
            "lang": "js",
            "dir": "packages/breadcrumb/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/button",
            "lang": "js",
            "dir": "packages/button/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/checkbox",
            "lang": "js",
            "dir": "packages/checkbox/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/clickable",
            "lang": "js",
            "dir": "packages/clickable/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/close-button",
            "lang": "js",
            "dir": "packages/close-button/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/color-mode",
            "lang": "ts",
            "dir": "packages/color-mode/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@chakra-ui/control-box",
            "lang": "js",
            "dir": "packages/control-box/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/counter",
            "lang": "js",
            "dir": "packages/counter/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/editable",
            "lang": "js",
            "dir": "packages/editable/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/react-env",
            "lang": "js",
            "dir": "packages/env/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/focus-lock",
            "lang": "js",
            "dir": "packages/focus-lock/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/form-control",
            "lang": "js",
            "dir": "packages/form-control/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/hooks",
            "lang": "js",
            "dir": "packages/hooks/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/icon",
            "lang": "js",
            "dir": "packages/icon/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/image",
            "lang": "js",
            "dir": "packages/image/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/input",
            "lang": "js",
            "dir": "packages/input/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/layout",
            "lang": "js",
            "dir": "packages/layout/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/live-region",
            "lang": "js",
            "dir": "packages/live-region/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/media-query",
            "lang": "ts",
            "dir": "packages/media-query/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@chakra-ui/menu",
            "lang": "js",
            "dir": "packages/menu/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/modal",
            "lang": "js",
            "dir": "packages/modal/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/number-input",
            "lang": "js",
            "dir": "packages/number-input/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/pin-input",
            "lang": "js",
            "dir": "packages/pin-input/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/popover",
            "lang": "js",
            "dir": "packages/popover/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/popper",
            "lang": "ts",
            "dir": "packages/popper/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@chakra-ui/portal",
            "lang": "js",
            "dir": "packages/portal/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/progress",
            "lang": "js",
            "dir": "packages/progress/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/radio",
            "lang": "js",
            "dir": "packages/radio/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/react",
            "lang": "js",
            "dir": "packages/react/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/select",
            "lang": "js",
            "dir": "packages/select/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/skeleton",
            "lang": "ts",
            "dir": "packages/skeleton/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/slider",
            "lang": "js",
            "dir": "packages/slider/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/spinner",
            "lang": "js",
            "dir": "packages/spinner/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/stat",
            "lang": "js",
            "dir": "packages/stat/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/styled-system",
            "lang": "ts",
            "dir": "packages/styled-system/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@chakra-ui/switch",
            "lang": "js",
            "dir": "packages/switch/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/system",
            "lang": "ts",
            "dir": "packages/system/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@chakra-ui/table",
            "lang": "js",
            "dir": "packages/table/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/tabs",
            "lang": "js",
            "dir": "packages/tabs/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/tag",
            "lang": "js",
            "dir": "packages/tag/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/textarea",
            "lang": "js",
            "dir": "packages/textarea/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/theme",
            "lang": "ts",
            "dir": "packages/theme/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@chakra-ui/toast",
            "lang": "js",
            "dir": "packages/toast/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/tooltip",
            "lang": "js",
            "dir": "packages/tooltip/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/transition",
            "lang": "js",
            "dir": "packages/transition/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/utils",
            "lang": "ts",
            "dir": "packages/utils/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@chakra-ui/visually-hidden",
            "lang": "js",
            "dir": "packages/visually-hidden/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@chakra-ui/cli",
            "lang": "ts",
            "dir": "tooling/cli/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "given '%s', cookieStorageManager.get returns '%s'",
            "suites": [],
            "line": 3,
            "code": "test.each([\n  [\"\", undefined],\n  [\"f\", undefined],\n  [\"n;o;i;c;e\", undefined],\n  [storageKey, undefined],\n  [`${storageKey}=dark`, \"dark\"],\n  [`${storageKey}=light`, \"light\"],\n  [`${storageKey}=light; foo=bar`, \"light\"],\n  [`${storageKey}=dark; foo=bar`, \"dark\"],\n  [`some=cookie; ${storageKey}=dark; foo=bar`, \"dark\"],\n  [`some=cookie; ${storageKey}=light; foo=bar`, \"light\"],\n])(\"given '%s', cookieStorageManager.get returns '%s'\", (input, output) => {\n  const manager = cookieStorageManager(input)\n\n  expect(manager.get()).toBe(output)\n})",
            "file": "storage-manager.test.ts",
            "skipped": false,
            "dir": "packages/color-mode/test"
        },
        {
            "name": "given a different initial value, cookieStorageManger prefers cookie value",
            "suites": [],
            "updatePoint": {
                "line": 20,
                "column": 79
            },
            "line": 20,
            "code": "test(\"given a different initial value, cookieStorageManger prefers cookie value\", () => {\n  const manager = cookieStorageManager(`${storageKey}=dark`)\n\n  expect(manager.get(\"light\")).toBe(\"dark\")\n})",
            "file": "storage-manager.test.ts",
            "skipped": false,
            "dir": "packages/color-mode/test"
        },
        {
            "name": "creates media queries for each named breakpoint",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 53
            },
            "line": 5,
            "code": "test(\"creates media queries for each named breakpoint\", () => {\n  expect(createMediaQueries(breakpoints)).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"breakpoint\": \"base\",\n        \"maxWidth\": \"100px\",\n        \"minWidth\": \"0px\",\n        \"query\": \"(min-width: 0px) and (max-width: 99px)\",\n      },\n      Object {\n        \"breakpoint\": \"sm\",\n        \"maxWidth\": \"200px\",\n        \"minWidth\": \"100px\",\n        \"query\": \"(min-width: 100px) and (max-width: 199px)\",\n      },\n      Object {\n        \"breakpoint\": \"md\",\n        \"maxWidth\": \"300px\",\n        \"minWidth\": \"200px\",\n        \"query\": \"(min-width: 200px) and (max-width: 299px)\",\n      },\n      Object {\n        \"breakpoint\": \"lg\",\n        \"maxWidth\": \"400px\",\n        \"minWidth\": \"300px\",\n        \"query\": \"(min-width: 300px) and (max-width: 399px)\",\n      },\n      Object {\n        \"breakpoint\": \"xl\",\n        \"maxWidth\": \"500px\",\n        \"minWidth\": \"400px\",\n        \"query\": \"(min-width: 400px) and (max-width: 499px)\",\n      },\n      Object {\n        \"breakpoint\": \"customBreakpoint\",\n        \"maxWidth\": undefined,\n        \"minWidth\": \"500px\",\n        \"query\": \"(min-width: 500px)\",\n      },\n    ]\n  `)\n})",
            "file": "create-media-query.test.ts",
            "skipped": false,
            "dir": "packages/media-query/tests"
        },
        {
            "name": "matches snapshot (order matters)",
            "suites": [],
            "updatePoint": {
                "line": 48,
                "column": 38
            },
            "line": 48,
            "code": "test(\"matches snapshot (order matters)\", () => {\n  const breakpoints = createBreakpoints({\n    customBreakpoint: \"20em\",\n    sm: \"36em\",\n    md: \"46.25em\",\n    lg: \"60em\",\n    xs: \"30em\",\n    xl: \"78.125em\",\n    xxl: \"95em\",\n  })\n\n  expect(createMediaQueries(breakpoints)).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"breakpoint\": \"base\",\n        \"maxWidth\": \"20em\",\n        \"minWidth\": \"0em\",\n        \"query\": \"(min-width: 0em) and (max-width: 19.99em)\",\n      },\n      Object {\n        \"breakpoint\": \"customBreakpoint\",\n        \"maxWidth\": \"30em\",\n        \"minWidth\": \"20em\",\n        \"query\": \"(min-width: 20em) and (max-width: 29.99em)\",\n      },\n      Object {\n        \"breakpoint\": \"xs\",\n        \"maxWidth\": \"36em\",\n        \"minWidth\": \"30em\",\n        \"query\": \"(min-width: 30em) and (max-width: 35.99em)\",\n      },\n      Object {\n        \"breakpoint\": \"sm\",\n        \"maxWidth\": \"46.25em\",\n        \"minWidth\": \"36em\",\n        \"query\": \"(min-width: 36em) and (max-width: 46.24em)\",\n      },\n      Object {\n        \"breakpoint\": \"md\",\n        \"maxWidth\": \"60em\",\n        \"minWidth\": \"46.25em\",\n        \"query\": \"(min-width: 46.25em) and (max-width: 59.99em)\",\n      },\n      Object {\n        \"breakpoint\": \"lg\",\n        \"maxWidth\": \"78.125em\",\n        \"minWidth\": \"60em\",\n        \"query\": \"(min-width: 60em) and (max-width: 78.115em)\",\n      },\n      Object {\n        \"breakpoint\": \"xl\",\n        \"maxWidth\": \"95em\",\n        \"minWidth\": \"78.125em\",\n        \"query\": \"(min-width: 78.125em) and (max-width: 94.99em)\",\n      },\n      Object {\n        \"breakpoint\": \"xxl\",\n        \"maxWidth\": undefined,\n        \"minWidth\": \"95em\",\n        \"query\": \"(min-width: 95em)\",\n      },\n    ]\n  `)\n})",
            "file": "create-media-query.test.ts",
            "skipped": false,
            "dir": "packages/media-query/tests"
        },
        {
            "name": "should report the correct media query match on window resize",
            "suites": [
                "with useMediaQuery"
            ],
            "updatePoint": {
                "line": 25,
                "column": 68
            },
            "line": 25,
            "code": "  test(\"should report the correct media query match on window resize\", () => {\n    const { result } = renderHook(() =>\n      useMediaQuery([\n        \"(max-width: 410px)\",\n        \"(min-width: 411px) and (max-width: 615px)\",\n        \"(min-width: 616px) and (max-width: 1023px)\",\n        \"(min-width: 1024px)\",\n      ]),\n    )\n\n    expect(result.current).toEqual([false, false, false, true])\n\n    act(() => window.resizeTo(736, 414))\n    expect(result.current).toEqual([false, false, true, false])\n\n    act(() => window.resizeTo(414, 736))\n    expect(result.current).toEqual([false, true, false, false])\n\n    act(() => window.resizeTo(360, 640))\n    expect(result.current).toEqual([true, false, false, false])\n  })",
            "file": "use-media-query.test.ts",
            "skipped": false,
            "dir": "packages/media-query/tests"
        },
        {
            "name": "should get the closest responsive value",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 45
            },
            "line": 3,
            "code": "test(\"should get the closest responsive value\", () => {\n  expect(getClosestValue({ base: \"40px\", md: \"500px\" }, \"xl\")).toBe(\"500px\")\n  expect(getClosestValue({ base: \"40px\", md: \"500px\" }, \"sm\")).toBe(\"40px\")\n  expect(getClosestValue({ base: \"40px\" }, \"lg\")).toBe(\"40px\")\n  expect(getClosestValue({ sm: \"40px\", md: \"500px\" }, \"sm\")).toBe(\"40px\")\n  expect(getClosestValue({ sm: \"40px\", md: \"500px\" }, \"base\")).toBe(undefined)\n  expect(getClosestValue({}, \"\")).toBe(undefined)\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "packages/media-query/tests"
        },
        {
            "name": "should get the closest responsive value with custom breakpoints",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 69
            },
            "line": 11,
            "code": "test(\"should get the closest responsive value with custom breakpoints\", () => {\n  const customBreakPoints = [\"base\", \"sm\", \"md\", \"custom\", \"xl\"]\n  expect(\n    getClosestValue(\n      { base: \"40px\", md: \"500px\", custom: \"600px\" },\n      \"xl\",\n      customBreakPoints,\n    ),\n  ).toBe(\"600px\")\n  expect(\n    getClosestValue({ base: \"40px\", md: \"500px\" }, \"sm\", customBreakPoints),\n  ).toBe(\"40px\")\n  expect(getClosestValue({ base: \"40px\" }, \"custom\", customBreakPoints)).toBe(\n    \"40px\",\n  )\n  expect(\n    getClosestValue({ sm: \"40px\", md: \"500px\" }, \"sm\", customBreakPoints),\n  ).toBe(\"40px\")\n  expect(\n    getClosestValue({ sm: \"40px\", md: \"500px\" }, \"base\", customBreakPoints),\n  ).toBe(undefined)\n  expect(getClosestValue({}, \"\")).toBe(undefined)\n})",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "packages/media-query/tests"
        },
        {
            "name": "should work",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 17
            },
            "line": 1,
            "code": "test(\"should work\", () => {\n  expect(true).toBeTruthy()\n})",
            "file": "popper.utils.test.ts",
            "skipped": false,
            "dir": "packages/popper/tests"
        },
        {
            "name": "standard usage",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "  it(\"standard usage\", () => {\n    expect(calc(\"10px\").add(\"20px\").toString()).toMatchInlineSnapshot(\n      `\"calc(10px + 20px)\"`,\n    )\n    expect(calc(\"10px\").add(\"20px\", \"30px\").toString()).toMatchInlineSnapshot(\n      `\"calc(10px + 20px + 30px)\"`,\n    )\n    expect(calc(\"20px\").subtract(\"10px\").toString()).toMatchInlineSnapshot(\n      `\"calc(20px - 10px)\"`,\n    )\n    expect(\n      calc(\"20px\").subtract(\"5px\", \"5px\").toString(),\n    ).toMatchInlineSnapshot(`\"calc(20px - 5px - 5px)\"`)\n    expect(calc(\"10px\").multiply(10).toString()).toMatchInlineSnapshot(\n      `\"calc(10px * 10)\"`,\n    )\n    expect(calc(\"10px\").multiply(10, 2).toString()).toMatchInlineSnapshot(\n      `\"calc(10px * 10 * 2)\"`,\n    )\n    expect(calc(\"10px\").divide(10).toString()).toMatchInlineSnapshot(\n      `\"calc(10px / 10)\"`,\n    )\n    expect(calc(\"10px\").divide(10, 2).toString()).toMatchInlineSnapshot(\n      `\"calc(10px / 10 / 2)\"`,\n    )\n    expect(\n      calc(\"10px\").add(\"20px\").multiply(2).toString(),\n    ).toMatchInlineSnapshot(`\"calc((10px + 20px) * 2)\"`)\n    expect(calc(\"10px\").add(\"20px\").divide(2).toString()).toMatchInlineSnapshot(\n      `\"calc((10px + 20px) / 2)\"`,\n    )\n    expect(\n      calc(\"20px\").subtract(\"10px\").negate().toString(),\n    ).toMatchInlineSnapshot(`\"calc((20px - 10px) * -1)\"`)\n    expect(\n      calc(\"10px\").multiply(100).divide(2).negate().toString(),\n    ).toMatchInlineSnapshot(`\"calc(((10px * 100) / 2) * -1)\"`)\n    expect(\n      calc(\"10px\")\n        .add(\"50px\")\n        .subtract(\"20px\")\n        .multiply(100)\n        .divide(2)\n        .negate()\n        .toString(),\n    ).toMatchInlineSnapshot(`\"calc(((((10px + 50px) - 20px) * 100) / 2) * -1)\"`)\n  })",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "bailing early",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 52,
                "column": 19
            },
            "line": 52,
            "code": "  it(\"bailing early\", () => {\n    expect(calc(\"10px\").toString()).toMatchInlineSnapshot(`\"10px\"`)\n  })",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "string coercion",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 56,
                "column": 21
            },
            "line": 56,
            "code": "  it(\"string coercion\", () => {\n    expect(calc(\"10px\").toString()).toMatchInlineSnapshot(`\"10px\"`)\n    expect(calc(\"10px\").add(\"20px\").toString()).toMatchInlineSnapshot(\n      `\"calc(10px + 20px)\"`,\n    )\n    expect(`${calc(\"10px\").add(\"20px\")}`).toMatchInlineSnapshot(\n      `\"calc(10px + 20px)\"`,\n    )\n  })",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "add",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 67,
                "column": 7
            },
            "line": 67,
            "code": "it(\"add\", () => {\n  expect(calc.add(1, 2)).toMatchInlineSnapshot(`\"calc(1 + 2)\"`)\n  expect(calc.add(1, 2, 3)).toMatchInlineSnapshot(`\"calc(1 + 2 + 3)\"`)\n  expect(calc.add(\"1\", 2, 3 - 4)).toMatchInlineSnapshot(`\"calc(1 + 2 + -1)\"`)\n  expect(calc.add(\"10px\", \"2em\")).toMatchInlineSnapshot(`\"calc(10px + 2em)\"`)\n  expect(calc.add(\"10px\", \"2em\", calc.add(\"2\", \"6rem\"))).toMatchInlineSnapshot(\n    `\"calc(10px + 2em + (2 + 6rem))\"`,\n  )\n  expect(\n    calc.add(\n      calc.multiply(calc.subtract(\"10px\", \"2em\"), calc.add(\"2\", \"6rem\"), \"4px\"),\n    ),\n  ).toMatchInlineSnapshot(`\"calc(((10px - 2em) * (2 + 6rem) * 4px))\"`)\n})",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "subtract",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 82,
                "column": 12
            },
            "line": 82,
            "code": "it(\"subtract\", () => {\n  expect(calc.subtract(1, 2)).toMatchInlineSnapshot(`\"calc(1 - 2)\"`)\n  expect(calc.subtract(1, 2, 3)).toMatchInlineSnapshot(`\"calc(1 - 2 - 3)\"`)\n  expect(calc.subtract(\"1\", 2, 3 - 4)).toMatchInlineSnapshot(\n    `\"calc(1 - 2 - -1)\"`,\n  )\n  expect(calc.subtract(\"10px\", \"2em\")).toMatchInlineSnapshot(\n    `\"calc(10px - 2em)\"`,\n  )\n  expect(\n    calc.subtract(\"10px\", \"2em\", calc.add(\"2\", \"6rem\")),\n  ).toMatchInlineSnapshot(`\"calc(10px - 2em - (2 + 6rem))\"`)\n})",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "muliply",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 96,
                "column": 11
            },
            "line": 96,
            "code": "it(\"muliply\", () => {\n  expect(calc.multiply(1, 2)).toMatchInlineSnapshot(`\"calc(1 * 2)\"`)\n  expect(calc.multiply(1, 2, 3)).toMatchInlineSnapshot(`\"calc(1 * 2 * 3)\"`)\n  expect(calc.multiply(\"1\", 2, 3 - 4)).toMatchInlineSnapshot(\n    `\"calc(1 * 2 * -1)\"`,\n  )\n  expect(calc.multiply(\"10px\", \"2em\")).toMatchInlineSnapshot(\n    `\"calc(10px * 2em)\"`,\n  )\n  expect(\n    calc.multiply(\"10px\", \"2em\", calc.add(\"2\", \"6rem\")),\n  ).toMatchInlineSnapshot(`\"calc(10px * 2em * (2 + 6rem))\"`)\n})",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "divide",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 110,
                "column": 10
            },
            "line": 110,
            "code": "it(\"divide\", () => {\n  expect(calc.divide(1, 2)).toMatchInlineSnapshot(`\"calc(1 / 2)\"`)\n  expect(calc.divide(1, 2, 3)).toMatchInlineSnapshot(`\"calc(1 / 2 / 3)\"`)\n  expect(calc.divide(\"1\", 2, 3 - 4)).toMatchInlineSnapshot(`\"calc(1 / 2 / -1)\"`)\n  expect(calc.divide(\"10px\", \"2em\")).toMatchInlineSnapshot(`\"calc(10px / 2em)\"`)\n  expect(\n    calc.divide(\"10px\", \"2em\", calc.add(\"2\", \"6rem\")),\n  ).toMatchInlineSnapshot(`\"calc(10px / 2em / (2 + 6rem))\"`)\n})",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "negate",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 120,
                "column": 10
            },
            "line": 120,
            "code": "it(\"negate\", () => {\n  expect(calc.negate(2)).toMatchInlineSnapshot(`\"-2\"`)\n  expect(calc.negate(3 - 4)).toMatchInlineSnapshot(`\"1\"`)\n  expect(calc.negate(calc.add(\"10px\", \"2em\"))).toMatchInlineSnapshot(\n    `\"calc((10px + 2em) * -1)\"`,\n  )\n})",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "negate css var",
            "suites": [
                "calc"
            ],
            "updatePoint": {
                "line": 128,
                "column": 18
            },
            "line": 128,
            "code": "it(\"negate css var\", () => {\n  const variable = cssVar(\"my-var\", undefined, \"prefix\")\n  expect(calc.negate(variable)).toMatchInlineSnapshot(\n    `\"calc(var(--prefix-my-var) * -1)\"`,\n  )\n})",
            "file": "calc.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "RTL: should transform logical css properties",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 50
            },
            "line": 4,
            "code": "test(\"RTL: should transform logical css properties\", () => {\n  const result = css({\n    float: \"left\",\n    marginStart: \"sm\",\n    roundedStart: [\"20px\", \"40px\"],\n    borderColor: \"red\",\n    insetStart: \"sm\",\n  })(createTheme(\"rtl\"))\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 40em)\": Object {\n        \"borderBottomRightRadius\": \"40px\",\n        \"borderTopRightRadius\": \"40px\",\n      },\n      \"borderBottomRightRadius\": \"20px\",\n      \"borderColor\": \"red\",\n      \"borderTopRightRadius\": \"20px\",\n      \"float\": \"right\",\n      \"marginInlineStart\": \"var(--space-sm)\",\n      \"right\": \"var(--space-sm)\",\n    }\n  `)\n})",
            "file": "css-rtl.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "can override logical properties",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 37
            },
            "line": 29,
            "code": "test(\"can override logical properties\", () => {\n  const result = css({\n    insetStart: \"md\",\n    // inset-start is `right` in rtl, so let's override it\n    right: \"40px\",\n  })(createTheme(\"rtl\"))\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"right\": \"40px\",\n    }\n  `)\n})",
            "file": "css-rtl.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "LTR: should transform logical css properties",
            "suites": [],
            "updatePoint": {
                "line": 42,
                "column": 50
            },
            "line": 42,
            "code": "test(\"LTR: should transform logical css properties\", () => {\n  const result = css({\n    float: \"left\",\n    marginEnd: \"sm\",\n    borderStartRadius: [\"20px\", \"40px\"],\n    borderColor: \"red\",\n  })(createTheme(\"ltr\"))\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 40em)\": Object {\n        \"borderBottomLeftRadius\": \"40px\",\n        \"borderTopLeftRadius\": \"40px\",\n      },\n      \"borderBottomLeftRadius\": \"20px\",\n      \"borderColor\": \"red\",\n      \"borderTopLeftRadius\": \"20px\",\n      \"float\": \"left\",\n      \"marginInlineEnd\": \"var(--space-sm)\",\n    }\n  `)\n})",
            "file": "css-rtl.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should work after refactoring. hehe",
            "suites": [],
            "updatePoint": {
                "line": 65,
                "column": 41
            },
            "line": 65,
            "code": "test(\"should work after refactoring. hehe\", () => {\n  const result = css({\n    mx: \"40px\",\n    w: 0.4,\n    bg: \"pinkish\",\n  })(createTheme(\"ltr\"))\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"background\": \"var(--colors-pinkish)\",\n      \"marginInlineEnd\": \"40px\",\n      \"marginInlineStart\": \"40px\",\n      \"width\": \"40%\",\n    }\n  `)\n})",
            "file": "css-rtl.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should be assignable to Chakra style props",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 48
            },
            "line": 3,
            "code": "test(\"should be assignable to Chakra style props\", () => {\n  const base: StyleProps = {\n    margin: 4,\n  }\n\n  const styles: SystemStyleObject = {\n    ...base,\n    isolation: \"isolate\",\n    pe: \"4\",\n    srOnly: true,\n    \"---test\": \"dfd\",\n    margin: [40, 50],\n    padding: { sm: \"40\", md: \"50\" },\n    mb: \"ref\",\n    color: \"pink\",\n    _hover: {\n      content: \"\",\n      background: \"red\",\n    },\n    \".dfdfd\": {\n      margin: \"40px\",\n      color: [\"red\", \"pink\"],\n      _hover: {\n        background: \"red\",\n      },\n    },\n  }\n\n  expect(styles).toBeTruthy()\n})",
            "file": "css-type.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should be assignable to react css properties",
            "suites": [],
            "updatePoint": {
                "line": 34,
                "column": 50
            },
            "line": 34,
            "code": "test(\"should be assignable to react css properties\", () => {\n  const base: React.CSSProperties = {\n    margin: 4,\n  }\n\n  const styles: SystemStyleObject = {\n    ...base,\n    isolation: \"isolate\",\n    pe: \"4\",\n    margin: [40, 50],\n    padding: { sm: \"40\", md: \"50\" },\n    mb: \"ref\",\n    color: \"pink\",\n    _hover: {\n      content: \"\",\n      background: \"red\",\n    },\n    \".dfdfd\": {\n      margin: \"40px\",\n      color: [\"red\", \"pink\"],\n      _hover: {\n        background: \"red\",\n      },\n    },\n  }\n\n  expect(styles).toBeTruthy()\n})",
            "file": "css-type.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should support deep nesting",
            "suites": [],
            "updatePoint": {
                "line": 63,
                "column": 33
            },
            "line": 63,
            "code": "test(\"should support deep nesting\", () => {\n  const styles: SystemStyleObject = {\n    display: \"block\",\n    position: \"relative\",\n    margin: \"32px 0\",\n    maxWidth: \"480px\",\n    minHeight: \"132px\",\n    borderRadius: \"4px\",\n    bg: \"ref\",\n    color: \"inherit\",\n    \"@media (max-width: 480px)\": {\n      fontSize: \"0.875em\",\n    },\n    a: {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      \"&:hover\": {\n        textDecoration: \"underline\",\n      },\n    },\n    \".carbon-wrap\": {\n      display: \"flex\",\n      padding: \"16px\",\n    },\n    \".carbon-img\": {\n      marginRight: \"16px\",\n      img: {\n        display: \"block\",\n      },\n    },\n    \".carbon-text\": {\n      fontSize: \"0.8rem\",\n      lineHeight: 1.4,\n    },\n    \".carbon-poweredby\": {\n      position: \"absolute\",\n      bottom: \"16px\",\n      left: \"162px\",\n      display: \"block\",\n      fontSize: \"10px\",\n      fontWeight: \"semibold\",\n      textTransform: \"uppercase\",\n      lineHeight: 1,\n      letterSpacing: \"0.2px\",\n    },\n  }\n\n  expect(styles).toBeTruthy()\n})",
            "file": "css-type.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should allow arbitrary breakpoint names by default",
            "suites": [],
            "updatePoint": {
                "line": 113,
                "column": 56
            },
            "line": 113,
            "code": "test(\"should allow arbitrary breakpoint names by default\", () => {\n  const styles: SystemStyleObject = {\n    mt: {\n      base: \"130px\",\n      tablet: \"152px\",\n    },\n  }\n\n  expect(styles).toBeTruthy()\n})",
            "file": "css-type.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should expand css var token",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 33
            },
            "line": 4,
            "code": "test(\"should expand css var token\", () => {\n  expect(\n    css({\n      \"--banner-height\": \"sizes.sm\",\n      \"--checkbox-disabled-color\": \"colors.pinkish\",\n      \"&:disabled\": {\n        color: \"var(--checkbox-disabled-color)\",\n      },\n    })(createTheme(\"ltr\")),\n  ).toMatchInlineSnapshot(`\n    Object {\n      \"&:disabled\": Object {\n        \"color\": \"var(--checkbox-disabled-color)\",\n      },\n      \"--banner-height\": \"var(--sizes-sm)\",\n      \"--checkbox-disabled-color\": \"var(--colors-pinkish)\",\n    }\n  `)\n})",
            "file": "css-var-token.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should expand responsive css var token",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 44
            },
            "line": 24,
            "code": "test(\"should expand responsive css var token\", () => {\n  expect(\n    css({\n      //@ts-ignore Resolve this type @segunadebayo\n      \"--checkbox-disabled-color\": [\"colors.pinkish\", \"colors.redish\"],\n      \"&:disabled\": {\n        color: \"var(--checkbox-disabled-color)\",\n      },\n    })(createTheme(\"ltr\")),\n  ).toMatchInlineSnapshot(`\n    Object {\n      \"&:disabled\": Object {\n        \"color\": \"var(--checkbox-disabled-color)\",\n      },\n      \"--checkbox-disabled-color\": \"var(--colors-pinkish)\",\n      \"@media screen and (min-width: 40em)\": Object {\n        \"--checkbox-disabled-color\": \"var(--colors-redish)\",\n      },\n    }\n  `)\n})",
            "file": "css-var-token.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should convert to css variables",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 37
            },
            "line": 3,
            "code": "test(\"should convert to css variables\", () => {\n  expect(\n    toCSSVar({\n      space: {\n        sm: \"8px\",\n        md: \"16px\",\n        lg: \"24px\",\n      },\n    }),\n  ).toMatchInlineSnapshot(`\n    Object {\n      \"__breakpoints\": null,\n      \"__cssMap\": Object {\n        \"space.-lg\": Object {\n          \"value\": \"-24px\",\n          \"var\": \"--space-lg\",\n          \"varRef\": \"calc(var(--space-lg) * -1)\",\n        },\n        \"space.-md\": Object {\n          \"value\": \"-16px\",\n          \"var\": \"--space-md\",\n          \"varRef\": \"calc(var(--space-md) * -1)\",\n        },\n        \"space.-sm\": Object {\n          \"value\": \"-8px\",\n          \"var\": \"--space-sm\",\n          \"varRef\": \"calc(var(--space-sm) * -1)\",\n        },\n        \"space.lg\": Object {\n          \"value\": \"24px\",\n          \"var\": \"--space-lg\",\n          \"varRef\": \"var(--space-lg)\",\n        },\n        \"space.md\": Object {\n          \"value\": \"16px\",\n          \"var\": \"--space-md\",\n          \"varRef\": \"var(--space-md)\",\n        },\n        \"space.sm\": Object {\n          \"value\": \"8px\",\n          \"var\": \"--space-sm\",\n          \"varRef\": \"var(--space-sm)\",\n        },\n      },\n      \"__cssVars\": Object {\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\",\n        \"--space-lg\": \"24px\",\n        \"--space-md\": \"16px\",\n        \"--space-sm\": \"8px\",\n      },\n      \"space\": Object {\n        \"lg\": \"24px\",\n        \"md\": \"16px\",\n        \"sm\": \"8px\",\n      },\n    }\n  `)\n})",
            "file": "css-var.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should convert to css variables - 2",
            "suites": [],
            "updatePoint": {
                "line": 69,
                "column": 41
            },
            "line": 69,
            "code": "test(\"should convert to css variables - 2\", () => {\n  expect(\n    toCSSVar({\n      space: [8, 12, 16, 33],\n    }),\n  ).toMatchInlineSnapshot(`\n    Object {\n      \"__breakpoints\": null,\n      \"__cssMap\": Object {\n        \"space.-0\": Object {\n          \"value\": \"-8\",\n          \"var\": \"--space-0\",\n          \"varRef\": \"calc(var(--space-0) * -1)\",\n        },\n        \"space.-1\": Object {\n          \"value\": \"-12\",\n          \"var\": \"--space-1\",\n          \"varRef\": \"calc(var(--space-1) * -1)\",\n        },\n        \"space.-2\": Object {\n          \"value\": \"-16\",\n          \"var\": \"--space-2\",\n          \"varRef\": \"calc(var(--space-2) * -1)\",\n        },\n        \"space.-3\": Object {\n          \"value\": \"-33\",\n          \"var\": \"--space-3\",\n          \"varRef\": \"calc(var(--space-3) * -1)\",\n        },\n        \"space.0\": Object {\n          \"value\": 8,\n          \"var\": \"--space-0\",\n          \"varRef\": \"var(--space-0)\",\n        },\n        \"space.1\": Object {\n          \"value\": 12,\n          \"var\": \"--space-1\",\n          \"varRef\": \"var(--space-1)\",\n        },\n        \"space.2\": Object {\n          \"value\": 16,\n          \"var\": \"--space-2\",\n          \"varRef\": \"var(--space-2)\",\n        },\n        \"space.3\": Object {\n          \"value\": 33,\n          \"var\": \"--space-3\",\n          \"varRef\": \"var(--space-3)\",\n        },\n      },\n      \"__cssVars\": Object {\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\",\n        \"--space-0\": 8,\n        \"--space-1\": 12,\n        \"--space-2\": 16,\n        \"--space-3\": 33,\n      },\n      \"space\": Array [\n        8,\n        12,\n        16,\n        33,\n      ],\n    }\n  `)\n})",
            "file": "css-var.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should handle nested theme with css-var",
            "suites": [],
            "updatePoint": {
                "line": 143,
                "column": 45
            },
            "line": 143,
            "code": "test(\"should handle nested theme with css-var\", () => {\n  const baseTheme = toCSSVar({ space: [2, 3, 4] })\n  const theme = { ...baseTheme, colors: { red: { 100: \"#100\", 200: \"#200\" } } }\n  expect(toCSSVar(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"__breakpoints\": null,\n      \"__cssMap\": Object {\n        \"colors.red.100\": Object {\n          \"value\": \"#100\",\n          \"var\": \"--colors-red-100\",\n          \"varRef\": \"var(--colors-red-100)\",\n        },\n        \"colors.red.200\": Object {\n          \"value\": \"#200\",\n          \"var\": \"--colors-red-200\",\n          \"varRef\": \"var(--colors-red-200)\",\n        },\n        \"space.-0\": Object {\n          \"value\": \"-2\",\n          \"var\": \"--space-0\",\n          \"varRef\": \"calc(var(--space-0) * -1)\",\n        },\n        \"space.-1\": Object {\n          \"value\": \"-3\",\n          \"var\": \"--space-1\",\n          \"varRef\": \"calc(var(--space-1) * -1)\",\n        },\n        \"space.-2\": Object {\n          \"value\": \"-4\",\n          \"var\": \"--space-2\",\n          \"varRef\": \"calc(var(--space-2) * -1)\",\n        },\n        \"space.0\": Object {\n          \"value\": 2,\n          \"var\": \"--space-0\",\n          \"varRef\": \"var(--space-0)\",\n        },\n        \"space.1\": Object {\n          \"value\": 3,\n          \"var\": \"--space-1\",\n          \"varRef\": \"var(--space-1)\",\n        },\n        \"space.2\": Object {\n          \"value\": 4,\n          \"var\": \"--space-2\",\n          \"varRef\": \"var(--space-2)\",\n        },\n      },\n      \"__cssVars\": Object {\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\",\n        \"--colors-red-100\": \"#100\",\n        \"--colors-red-200\": \"#200\",\n        \"--space-0\": 2,\n        \"--space-1\": 3,\n        \"--space-2\": 4,\n      },\n      \"colors\": Object {\n        \"red\": Object {\n          \"100\": \"#100\",\n          \"200\": \"#200\",\n        },\n      },\n      \"space\": Array [\n        2,\n        3,\n        4,\n      ],\n    }\n  `)\n})",
            "file": "css-var.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should handle values provided as CSS variables",
            "suites": [],
            "updatePoint": {
                "line": 221,
                "column": 52
            },
            "line": 221,
            "code": "test(\"should handle values provided as CSS variables\", () => {\n  const theme = toCSSVar({\n    colors: {\n      red: {\n        50: \"var(--CUSTOM-red-50)\",\n      },\n    },\n    space: {\n      sm: \"var(--CUSTOM-sm)\",\n    },\n  })\n  expect(toCSSVar(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"__breakpoints\": null,\n      \"__cssMap\": Object {\n        \"colors.red.50\": Object {\n          \"value\": \"var(--CUSTOM-red-50)\",\n          \"var\": \"--colors-red-50\",\n          \"varRef\": \"var(--colors-red-50)\",\n        },\n        \"space.-sm\": Object {\n          \"value\": \"calc(var(--CUSTOM-sm) * -1)\",\n          \"var\": \"--space-sm\",\n          \"varRef\": \"calc(var(--space-sm) * -1)\",\n        },\n        \"space.sm\": Object {\n          \"value\": \"var(--CUSTOM-sm)\",\n          \"var\": \"--space-sm\",\n          \"varRef\": \"var(--space-sm)\",\n        },\n      },\n      \"__cssVars\": Object {\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\",\n        \"--colors-red-50\": \"var(--CUSTOM-red-50)\",\n        \"--space-sm\": \"var(--CUSTOM-sm)\",\n      },\n      \"colors\": Object {\n        \"red\": Object {\n          \"50\": \"var(--CUSTOM-red-50)\",\n        },\n      },\n      \"space\": Object {\n        \"sm\": \"var(--CUSTOM-sm)\",\n      },\n    }\n  `)\n})",
            "file": "css-var.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should handle spaces in keys",
            "suites": [],
            "updatePoint": {
                "line": 276,
                "column": 34
            },
            "line": 276,
            "code": "test(\"should handle spaces in keys\", () => {\n  const theme = toCSSVar({\n    colors: {\n      \"i have spaces\": \"#b4d455\",\n    },\n  })\n\n  expect(toCSSVar(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"__breakpoints\": null,\n      \"__cssMap\": Object {\n        \"colors.i have spaces\": Object {\n          \"value\": \"#b4d455\",\n          \"var\": \"--colors-i-have-spaces\",\n          \"varRef\": \"var(--colors-i-have-spaces)\",\n        },\n      },\n      \"__cssVars\": Object {\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\",\n        \"--colors-i-have-spaces\": \"#b4d455\",\n      },\n      \"colors\": Object {\n        \"i have spaces\": \"#b4d455\",\n      },\n    }\n  `)\n})",
            "file": "css-var.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should add a css var prefix if provided",
            "suites": [],
            "updatePoint": {
                "line": 311,
                "column": 45
            },
            "line": 311,
            "code": "test(\"should add a css var prefix if provided\", () => {\n  const theme = toCSSVar({\n    colors: {\n      red: \"#ec0016\",\n    },\n    config: {\n      cssVarPrefix: \"ck\",\n    },\n  })\n\n  expect(toCSSVar(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"__breakpoints\": null,\n      \"__cssMap\": Object {\n        \"colors.red\": Object {\n          \"value\": \"#ec0016\",\n          \"var\": \"--ck-colors-red\",\n          \"varRef\": \"var(--ck-colors-red)\",\n        },\n      },\n      \"__cssVars\": Object {\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\",\n        \"--ck-colors-red\": \"#ec0016\",\n      },\n      \"colors\": Object {\n        \"red\": \"#ec0016\",\n      },\n      \"config\": Object {\n        \"cssVarPrefix\": \"ck\",\n      },\n    }\n  `)\n})",
            "file": "css-var.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should convert transition tokens",
            "suites": [],
            "updatePoint": {
                "line": 352,
                "column": 38
            },
            "line": 352,
            "code": "test(\"should convert transition tokens\", () => {\n  const theme = {\n    transition: {\n      property: {\n        colors: \"background-color, background\",\n      },\n    },\n  }\n  expect(toCSSVar(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"__breakpoints\": null,\n      \"__cssMap\": Object {\n        \"transition.property.colors\": Object {\n          \"value\": \"background-color, background\",\n          \"var\": \"--transition-property-colors\",\n          \"varRef\": \"var(--transition-property-colors)\",\n        },\n      },\n      \"__cssVars\": Object {\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\",\n        \"--transition-property-colors\": \"background-color, background\",\n      },\n      \"transition\": Object {\n        \"property\": Object {\n          \"colors\": \"background-color, background\",\n        },\n      },\n    }\n  `)\n})",
            "file": "css-var.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns system props styles",
            "suites": [],
            "updatePoint": {
                "line": 80,
                "column": 33
            },
            "line": 80,
            "code": "test(\"returns system props styles\", () => {\n  const result = css({\n    color: \"primary\",\n    fontSize: [2, 3, 4],\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 40em)\": Object {\n        \"fontSize\": \"var(--fontSizes-3)\",\n      },\n      \"@media screen and (min-width: 52em)\": Object {\n        \"fontSize\": \"var(--fontSizes-4)\",\n      },\n      \"color\": \"var(--colors-primary)\",\n      \"fontSize\": \"var(--fontSizes-2)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns nested system props styles",
            "suites": [],
            "updatePoint": {
                "line": 100,
                "column": 40
            },
            "line": 100,
            "code": "test(\"returns nested system props styles\", () => {\n  const result = css({\n    color: \"primary\",\n    \"&:hover\": {\n      color: \"secondary\",\n    },\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"&:hover\": Object {\n        \"color\": \"var(--colors-secondary)\",\n      },\n      \"color\": \"var(--colors-primary)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns nested responsive styles",
            "suites": [],
            "updatePoint": {
                "line": 118,
                "column": 38
            },
            "line": 118,
            "code": "test(\"returns nested responsive styles\", () => {\n  const result = css({\n    color: \"primary\",\n    h1: {\n      py: [3, 4],\n    },\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"color\": \"var(--colors-primary)\",\n      \"h1\": Object {\n        \"@media screen and (min-width: 40em)\": Object {\n          \"paddingBottom\": \"var(--space-4)\",\n          \"paddingTop\": \"var(--space-4)\",\n        },\n        \"paddingBottom\": \"var(--space-3)\",\n        \"paddingTop\": \"var(--space-3)\",\n      },\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "handles all core styled system props",
            "suites": [],
            "updatePoint": {
                "line": 141,
                "column": 42
            },
            "line": 141,
            "code": "test(\"handles all core styled system props\", () => {\n  const result = css({\n    m: 0,\n    mb: 2,\n    mx: \"auto\",\n    p: 3,\n    py: 4,\n    fontSize: 3,\n    fontWeight: \"bold\",\n    color: \"primary\",\n    bg: \"secondary\",\n    fontFamily: \"monospace\",\n    lineHeight: \"body\",\n    textTransform: \"uppercase\",\n  })(theme)\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"background\": \"var(--colors-secondary)\",\n      \"color\": \"var(--colors-primary)\",\n      \"fontFamily\": \"var(--fonts-monospace)\",\n      \"fontSize\": \"var(--fontSizes-3)\",\n      \"fontWeight\": \"var(--fontWeights-bold)\",\n      \"lineHeight\": \"var(--lineHeights-body)\",\n      \"margin\": \"var(--space-0)\",\n      \"marginBottom\": \"var(--space-2)\",\n      \"marginInlineEnd\": \"auto\",\n      \"marginInlineStart\": \"auto\",\n      \"padding\": \"var(--space-3)\",\n      \"paddingBottom\": \"var(--space-4)\",\n      \"paddingTop\": \"var(--space-4)\",\n      \"textTransform\": \"uppercase\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "works with the css prop",
            "suites": [],
            "updatePoint": {
                "line": 176,
                "column": 29
            },
            "line": 176,
            "code": "test(\"works with the css prop\", () => {\n  const result = css({\n    color: \"primary\",\n    m: 0,\n    fontSize: 2,\n  })(theme)\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"color\": \"var(--colors-primary)\",\n      \"fontSize\": \"var(--fontSizes-2)\",\n      \"margin\": \"var(--space-0)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "works with functional arguments",
            "suites": [],
            "updatePoint": {
                "line": 191,
                "column": 37
            },
            "line": 191,
            "code": "test(\"works with functional arguments\", () => {\n  const result = css((t: any) => ({\n    color: t.colors.primary,\n  }))(theme)\n  expect(result).toEqual({\n    color: \"tomato\",\n  })\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "supports functional values",
            "suites": [],
            "updatePoint": {
                "line": 200,
                "column": 32
            },
            "line": 200,
            "code": "test(\"supports functional values\", () => {\n  const result = css({\n    color: (t: any) => t.colors.primary,\n  })(theme)\n  expect(result).toEqual({\n    color: \"tomato\",\n  })\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns variants from theme",
            "suites": [],
            "updatePoint": {
                "line": 209,
                "column": 33
            },
            "line": 209,
            "code": "test(\"returns variants from theme\", () => {\n  const result = css({\n    apply: \"buttons.primary\",\n  })(theme)\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"background\": \"var(--colors-primary)\",\n      \"borderRadius\": \"2px\",\n      \"color\": \"white\",\n      \"fontWeight\": \"var(--fontWeights-bold)\",\n      \"padding\": \"var(--space-3)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "handles variants with responsive values",
            "suites": [],
            "updatePoint": {
                "line": 224,
                "column": 45
            },
            "line": 224,
            "code": "test(\"handles variants with responsive values\", () => {\n  const result = css({\n    apply: \"text.caps\",\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 40em)\": Object {\n        \"fontSize\": \"var(--fontSizes-2)\",\n      },\n      \"fontSize\": \"var(--fontSizes-1)\",\n      \"letterSpacing\": \"0.1em\",\n      \"textTransform\": \"uppercase\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "handles responsive variants",
            "suites": [],
            "updatePoint": {
                "line": 241,
                "column": 33
            },
            "line": 241,
            "code": "test(\"handles responsive variants\", () => {\n  const result = css({\n    apply: \"text.title\",\n  })(theme)\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 40em)\": Object {\n        \"fontSize\": \"var(--fontSizes-4)\",\n        \"letterSpacing\": \"-0.02em\",\n      },\n      \"fontSize\": \"var(--fontSizes-3)\",\n      \"letterSpacing\": \"-0.01em\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "handles negative margins from scale",
            "suites": [],
            "updatePoint": {
                "line": 257,
                "column": 41
            },
            "line": 257,
            "code": "test(\"handles negative margins from scale\", () => {\n  const result = css({\n    mt: -3,\n    mx: -4,\n  })(theme)\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"marginInlineEnd\": \"calc(var(--space-4) * -1)\",\n      \"marginInlineStart\": \"calc(var(--space-4) * -1)\",\n      \"marginTop\": \"calc(var(--space-3) * -1)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "handles negative values from custom css var scale",
            "suites": [],
            "updatePoint": {
                "line": 271,
                "column": 55
            },
            "line": 271,
            "code": "test(\"handles negative values from custom css var scale\", () => {\n  const customTheme = toCSSVar({\n    ...theme,\n    space: [\"var(--size-0)\", \"var(--size-1)\", \"var(--size-2)\", \"var(--size-3)\"],\n  })\n\n  const result = css({\n    mt: -1,\n    mx: -2,\n    top: -3,\n    right: -3,\n    bottom: -3,\n    left: -3,\n  })(customTheme)\n\n  // Custom CSS variables are mapped to CSS vars controlled by chakra\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"bottom\": \"calc(var(--space-3) * -1)\",\n      \"left\": \"calc(var(--space-3) * -1)\",\n      \"marginInlineEnd\": \"calc(var(--space-2) * -1)\",\n      \"marginInlineStart\": \"calc(var(--space-2) * -1)\",\n      \"marginTop\": \"calc(var(--space-1) * -1)\",\n      \"right\": \"calc(var(--space-3) * -1)\",\n      \"top\": \"calc(var(--space-3) * -1)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "handles negative top, left, bottom, and right from scale",
            "suites": [],
            "updatePoint": {
                "line": 300,
                "column": 62
            },
            "line": 300,
            "code": "test(\"handles negative top, left, bottom, and right from scale\", () => {\n  const result = css({\n    top: -1,\n    right: -4,\n    bottom: -3,\n    left: -2,\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"bottom\": \"calc(var(--space-3) * -1)\",\n      \"left\": \"calc(var(--space-2) * -1)\",\n      \"right\": \"calc(var(--space-4) * -1)\",\n      \"top\": \"calc(var(--space-1) * -1)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "skip breakpoints",
            "suites": [],
            "updatePoint": {
                "line": 318,
                "column": 22
            },
            "line": 318,
            "code": "test(\"skip breakpoints\", () => {\n  const result = css({\n    width: [\"100%\", null, \"50%\"],\n  })(theme)\n  expect(result).toEqual({\n    width: \"100%\",\n    \"@media screen and (min-width: 40em)\": {},\n    \"@media screen and (min-width: 52em)\": {\n      width: \"50%\",\n    },\n  })\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "padding shorthand does not collide with nested p selector",
            "suites": [],
            "updatePoint": {
                "line": 331,
                "column": 63
            },
            "line": 331,
            "code": "test(\"padding shorthand does not collide with nested p selector\", () => {\n  const result = css({\n    p: {\n      fontSize: 32,\n      color: \"tomato\",\n      p: 2,\n    },\n    padding: 32,\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"p\": Object {\n        \"color\": \"tomato\",\n        \"fontSize\": \"32px\",\n        \"padding\": \"var(--space-2)\",\n      },\n      \"padding\": \"32px\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "functional values can return responsive arrays",
            "suites": [],
            "updatePoint": {
                "line": 377,
                "column": 52
            },
            "line": 377,
            "code": "test(\"functional values can return responsive arrays\", () => {\n  const result = css({\n    color: (t: any) => [t.colors.primary, t.colors.secondary],\n  })(theme)\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 40em)\": Object {\n        \"color\": \"cyan\",\n      },\n      \"color\": \"tomato\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "resolves color correctly",
            "suites": [],
            "updatePoint": {
                "line": 391,
                "column": 30
            },
            "line": 391,
            "code": "test(\"resolves color correctly\", () => {\n  const result = css({\n    color: \"red\",\n  })(theme)\n\n  expect(result).toEqual({\n    color: \"red\",\n  })\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns individual border styles",
            "suites": [],
            "updatePoint": {
                "line": 401,
                "column": 38
            },
            "line": 401,
            "code": "test(\"returns individual border styles\", () => {\n  const result = css({\n    borderTopWidth: \"thin\",\n    borderTopColor: \"primary\",\n    borderTopStyle: \"thick\",\n    borderTopLeftRadius: \"small\",\n    borderTopRightRadius: \"small\",\n    borderBottomWidth: \"thin\",\n    borderBottomColor: \"primary\",\n    borderBottomStyle: \"thick\",\n    borderBottomLeftRadius: \"small\",\n    borderBottomRightRadius: \"small\",\n    borderRightWidth: \"thin\",\n    borderRightColor: \"primary\",\n    borderRightStyle: \"thick\",\n    borderLeftWidth: \"thin\",\n    borderLeftColor: \"primary\",\n    borderLeftStyle: \"thick\",\n  })(toCSSVar(theme))\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"borderBottomColor\": \"var(--colors-primary)\",\n      \"borderBottomLeftRadius\": \"var(--radii-small)\",\n      \"borderBottomRightRadius\": \"var(--radii-small)\",\n      \"borderBottomStyle\": \"var(--borderStyles-thick)\",\n      \"borderBottomWidth\": \"var(--borderWidths-thin)\",\n      \"borderLeftColor\": \"var(--colors-primary)\",\n      \"borderLeftStyle\": \"var(--borderStyles-thick)\",\n      \"borderLeftWidth\": \"var(--borderWidths-thin)\",\n      \"borderRightColor\": \"var(--colors-primary)\",\n      \"borderRightStyle\": \"var(--borderStyles-thick)\",\n      \"borderRightWidth\": \"var(--borderWidths-thin)\",\n      \"borderTopColor\": \"var(--colors-primary)\",\n      \"borderTopLeftRadius\": \"var(--radii-small)\",\n      \"borderTopRightRadius\": \"var(--radii-small)\",\n      \"borderTopStyle\": \"var(--borderStyles-thick)\",\n      \"borderTopWidth\": \"var(--borderWidths-thin)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "flexBasis uses theme.sizes",
            "suites": [],
            "updatePoint": {
                "line": 443,
                "column": 32
            },
            "line": 443,
            "code": "test(\"flexBasis uses theme.sizes\", () => {\n  const style = css({\n    flexBasis: \"sidebar\",\n  })(toCSSVar(theme))\n  expect(style).toMatchInlineSnapshot(`\n    Object {\n      \"flexBasis\": \"var(--sizes-sidebar)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "fill and stroke use theme.colors",
            "suites": [],
            "updatePoint": {
                "line": 454,
                "column": 38
            },
            "line": 454,
            "code": "test(\"fill and stroke use theme.colors\", () => {\n  const style = css({\n    fill: \"primary\",\n    stroke: \"secondary\",\n  })(theme)\n\n  expect(style).toMatchInlineSnapshot(`\n    Object {\n      \"fill\": \"var(--colors-primary)\",\n      \"stroke\": \"var(--colors-secondary)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "multiples are transformed",
            "suites": [],
            "updatePoint": {
                "line": 468,
                "column": 31
            },
            "line": 468,
            "code": "test(\"multiples are transformed\", () => {\n  const style = css({\n    marginX: 2,\n    marginY: 2,\n    paddingX: 2,\n    paddingY: 2,\n    width: \"large\",\n  })(theme)\n\n  expect(style).toMatchInlineSnapshot(`\n    Object {\n      \"marginBottom\": \"var(--space-2)\",\n      \"marginInlineEnd\": \"var(--space-2)\",\n      \"marginInlineStart\": \"var(--space-2)\",\n      \"marginTop\": \"var(--space-2)\",\n      \"paddingBottom\": \"var(--space-2)\",\n      \"paddingInlineEnd\": \"var(--space-2)\",\n      \"paddingInlineStart\": \"var(--space-2)\",\n      \"paddingTop\": \"var(--space-2)\",\n      \"width\": \"var(--sizes-large)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns outline color from theme",
            "suites": [],
            "updatePoint": {
                "line": 492,
                "column": 38
            },
            "line": 492,
            "code": "test(\"returns outline color from theme\", () => {\n  const result = css({\n    outlineColor: \"primary\",\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"outlineColor\": \"var(--colors-primary)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns correct media query order",
            "suites": [],
            "updatePoint": {
                "line": 504,
                "column": 39
            },
            "line": 504,
            "code": "test(\"returns correct media query order\", () => {\n  const result = css({\n    width: [\"100%\", null, \"50%\"],\n    color: [\"red\", \"green\", \"blue\"],\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 40em)\": Object {\n        \"color\": \"green\",\n      },\n      \"@media screen and (min-width: 52em)\": Object {\n        \"color\": \"blue\",\n        \"width\": \"50%\",\n      },\n      \"color\": \"red\",\n      \"width\": \"100%\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "returns correct media query 2nd order",
            "suites": [],
            "updatePoint": {
                "line": 525,
                "column": 43
            },
            "line": 525,
            "code": "test(\"returns correct media query 2nd order\", () => {\n  const result = css({\n    flexDirection: \"column\",\n    justifyContent: [null, \"flex-start\", \"flex-end\"],\n    color: \"background\",\n    height: \"100%\",\n    px: [2, 3, 4],\n    py: 4,\n  })(theme)\n\n  const keys = Object.keys(result)\n\n  expect(keys).toMatchInlineSnapshot(`\n    Array [\n      \"flexDirection\",\n      \"justifyContent\",\n      \"@media screen and (min-width: 40em)\",\n      \"@media screen and (min-width: 52em)\",\n      \"color\",\n      \"height\",\n      \"paddingInlineStart\",\n      \"paddingInlineEnd\",\n      \"paddingTop\",\n      \"paddingBottom\",\n    ]\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "pseudo selectors are transformed",
            "suites": [],
            "updatePoint": {
                "line": 553,
                "column": 38
            },
            "line": 553,
            "code": "test(\"pseudo selectors are transformed\", () => {\n  const result = css({\n    _before: {\n      paddingBottom: 2,\n      paddingLeft: [2, 3, 4],\n      paddingRight: { base: 1, sm: 2 },\n    },\n  })(theme)\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"&::before\": Object {\n        \"@media screen and (min-width: 40em)\": Object {\n          \"paddingLeft\": \"var(--space-3)\",\n          \"paddingRight\": \"var(--space-2)\",\n        },\n        \"@media screen and (min-width: 52em)\": Object {\n          \"paddingLeft\": \"var(--space-4)\",\n        },\n        \"paddingBottom\": \"var(--space-2)\",\n        \"paddingLeft\": \"var(--space-2)\",\n        \"paddingRight\": \"var(--space-1)\",\n      },\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should expand textStyle and layerStyle",
            "suites": [],
            "updatePoint": {
                "line": 580,
                "column": 44
            },
            "line": 580,
            "code": "test(\"should expand textStyle and layerStyle\", () => {\n  const theme = toCSSVar({\n    colors: { red: { 300: \"#red\" } },\n    breakpoints: {\n      sm: \"400px\",\n      md: \"768px\",\n      lg: \"1200px\",\n      xl: \"1800px\",\n    },\n    layerStyles: {\n      v1: {\n        color: \"red.300\",\n        bg: \"tomato\",\n      },\n    },\n    textStyles: {\n      caps: {\n        textTransform: \"uppercase\",\n        letterSpacing: \"wide\",\n        fontSize: \"lg\",\n      },\n      lower: {\n        textTransform: \"lowercase\",\n        letterSpacing: \"0.2px\",\n        fontSize: \"sm\",\n      },\n    },\n  })\n\n  expect(css({ layerStyle: \"v1\" })(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"background\": \"tomato\",\n      \"color\": \"var(--colors-red-300)\",\n    }\n  `)\n\n  expect(css({ textStyle: \"caps\" })(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"fontSize\": \"lg\",\n      \"letterSpacing\": \"wide\",\n      \"textTransform\": \"uppercase\",\n    }\n  `)\n\n  expect(css({ textStyle: [\"caps\", \"lower\"] })(theme)).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 400px)\": Object {\n        \"fontSize\": \"sm\",\n        \"letterSpacing\": \"0.2px\",\n        \"textTransform\": \"lowercase\",\n      },\n      \"fontSize\": \"lg\",\n      \"letterSpacing\": \"wide\",\n      \"textTransform\": \"uppercase\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "transition tokens are replaced correctly",
            "suites": [],
            "updatePoint": {
                "line": 638,
                "column": 46
            },
            "line": 638,
            "code": "test(\"transition tokens are replaced correctly\", () => {\n  expect(\n    css({\n      transitionProperty: \"common\",\n      transitionDuration: \"slow\",\n      transitionTimingFunction: \"smooth\",\n    })(theme),\n  ).toMatchInlineSnapshot(`\n    Object {\n      \"transitionDuration\": \"var(--transition-duration-slow)\",\n      \"transitionProperty\": \"var(--transition-property-common)\",\n      \"transitionTimingFunction\": \"var(--transition-easing-smooth)\",\n    }\n  `)\n})",
            "file": "css.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should handle array interpolations",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 40
            },
            "line": 4,
            "code": "test(\"should handle array interpolations\", () => {\n  const customBreakpoints = createBreakpoints({\n    sm: \"40em\",\n    md: \"50em\",\n    lg: \"60em\",\n    xl: \"70em\",\n  })\n\n  // @ts-ignore\n  const result = css({ \"&\": [{ bg: \"red\" }, { bg: \"green\" }] })(\n    toCSSVar({\n      breakpoints: customBreakpoints,\n    }),\n  )\n\n  expect(result).toEqual({\n    \"&\": { background: \"red\" },\n    \"@media screen and (min-width: 40em)\": { \"&\": { background: \"green\" } },\n  })\n})",
            "file": "interpolation.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should convert simple value",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 16,
                "column": 35
            },
            "line": 16,
            "code": "  test(\"should convert simple value\", () => {\n    const input = \"linear(to-t, red, green)\"\n    const output = parseGradient(input, theme)\n    expect(output).toMatchInlineSnapshot(\n      `\"linear-gradient(to top, var(--colors-red), var(--colors-green))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should convert value with HEX code",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 24,
                "column": 42
            },
            "line": 24,
            "code": "  test(\"should convert value with HEX code\", () => {\n    const input = \"linear(to-t, #fff, #bbb)\"\n    const output = parseGradient(input, theme)\n    expect(output).toMatchInlineSnapshot(\n      `\"linear-gradient(to top, #fff, #bbb)\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should convert without direction",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 32,
                "column": 40
            },
            "line": 32,
            "code": "  test(\"should convert without direction\", () => {\n    const input = \"linear(red,green)\"\n    const output = parseGradient(input, theme)\n    expect(output).toMatchInlineSnapshot(\n      `\"linear-gradient(var(--colors-red), var(--colors-green))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should convert with double space",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 40,
                "column": 40
            },
            "line": 40,
            "code": "  test(\"should convert with double space\", () => {\n    // Oops! user added double space after direction\n    const input = \"linear(to-tl,red,green)\"\n    const output = parseGradient(input, theme)\n    // we clean up the extra space\n    expect(output).toMatchInlineSnapshot(\n      `\"linear-gradient(to top left, var(--colors-red), var(--colors-green))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should not parse if value is none",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 50,
                "column": 41
            },
            "line": 50,
            "code": "  test(\"should not parse if value is none\", () => {\n    expect(parseGradient(\"none\", theme)).toMatchInlineSnapshot(`\"none\"`)\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should not parse null",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 54,
                "column": 29
            },
            "line": 54,
            "code": "  test(\"should not parse null\", () => {\n    expect(parseGradient(null, theme)).toBeNull()\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse nested colors",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 58,
                "column": 34
            },
            "line": 58,
            "code": "  test(\"should parse nested colors\", () => {\n    expect(\n      parseGradient(\"radial(to-b, pink.light, pink.dark)\", theme),\n    ).toMatchInlineSnapshot(\n      `\"radial-gradient(to bottom, var(--colors-pink-light), var(--colors-pink-dark))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse nested colors and css value - 1",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 66,
                "column": 52
            },
            "line": 66,
            "code": "  test(\"should parse nested colors and css value - 1\", () => {\n    expect(\n      parseGradient(\"radial(to-b, pink, pink.dark)\", theme),\n    ).toMatchInlineSnapshot(\n      `\"radial-gradient(to bottom, pink, var(--colors-pink-dark))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse nested colors and css value - 2",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 74,
                "column": 52
            },
            "line": 74,
            "code": "  test(\"should parse nested colors and css value - 2\", () => {\n    expect(\n      parseGradient(\"radial(to-b, #bbb, pink.dark)\", theme),\n    ).toMatchInlineSnapshot(\n      `\"radial-gradient(to bottom, #bbb, var(--colors-pink-dark))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse color stop with percentage",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 82,
                "column": 47
            },
            "line": 82,
            "code": "  test(\"should parse color stop with percentage\", () => {\n    expect(\n      parseGradient(\"radial(to-b, #bbb 15%, pink.dark 15%)\", theme),\n    ).toMatchInlineSnapshot(\n      `\"radial-gradient(to bottom, #bbb 15%, var(--colors-pink-dark) 15%)\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse color stop with function",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 90,
                "column": 45
            },
            "line": 90,
            "code": "  test(\"should parse color stop with function\", () => {\n    expect(\n      parseGradient(\"linear(to-r, green, pink.dark calc(20px + 20px))\", theme),\n    ).toMatchInlineSnapshot(\n      `\"linear-gradient(to right, var(--colors-green), var(--colors-pink-dark) calc(20px + 20px))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse colors in rgb",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 98,
                "column": 34
            },
            "line": 98,
            "code": "  test(\"should parse colors in rgb\", () => {\n    expect(\n      parseGradient(\"linear(to-l, rgb(0,0,0), rgb(255,255,255))\", theme),\n    ).toMatchInlineSnapshot(\n      `\"linear-gradient(to left, rgb(0, 0, 0), rgb(255, 255, 255))\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse colors in rgb with percentage",
            "suites": [
                "linear gradient"
            ],
            "updatePoint": {
                "line": 106,
                "column": 50
            },
            "line": 106,
            "code": "  test(\"should parse colors in rgb with percentage\", () => {\n    expect(\n      parseGradient(\n        \"linear(to-l, rgb(0,0,0) 15%, rgb(255,255,255) 15%)\",\n        theme,\n      ),\n    ).toMatchInlineSnapshot(\n      `\"linear-gradient(to left, rgb(0, 0, 0) 15%, rgb(255, 255, 255) 15%)\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse gradient with a named position",
            "suites": [
                "radial gradient"
            ],
            "updatePoint": {
                "line": 119,
                "column": 51
            },
            "line": 119,
            "code": "  test(\"should parse gradient with a named position\", () => {\n    expect(\n      parseGradient(\"radial(circle at center, #fff, #000)\", theme),\n    ).toMatchInlineSnapshot(`\"radial-gradient(circle at center, #fff, #000)\"`)\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should parse gradient with a position",
            "suites": [
                "radial gradient"
            ],
            "updatePoint": {
                "line": 124,
                "column": 45
            },
            "line": 124,
            "code": "  test(\"should parse gradient with a position\", () => {\n    expect(\n      parseGradient(\"radial(farthest-corner at 50% 50%, #fff, #000)\", theme),\n    ).toMatchInlineSnapshot(\n      `\"radial-gradient(farthest-corner at 50% 50%, #fff, #000)\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "basic value",
            "suites": [
                "conic gradient"
            ],
            "updatePoint": {
                "line": 134,
                "column": 19
            },
            "line": 134,
            "code": "  test(\"basic value\", () => {\n    expect(parseGradient(\"conic(#fff, #000)\", theme)).toMatchInlineSnapshot(\n      `\"conic-gradient(#fff, #000)\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "replace color tokens",
            "suites": [
                "conic gradient"
            ],
            "updatePoint": {
                "line": 140,
                "column": 28
            },
            "line": 140,
            "code": "  test(\"replace color tokens\", () => {\n    expect(\n      parseGradient(\"conic(pink.light, #ttt)\", theme),\n    ).toMatchInlineSnapshot(`\"conic-gradient(var(--colors-pink-light), #ttt)\"`)\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "replace color tokens - with from(...)",
            "suites": [
                "conic gradient"
            ],
            "updatePoint": {
                "line": 146,
                "column": 45
            },
            "line": 146,
            "code": "  test(\"replace color tokens - with from(...)\", () => {\n    expect(\n      parseGradient(\"conic(from 90deg, #fff, #000)\", theme),\n    ).toMatchInlineSnapshot(`\"conic-gradient(from 90deg, #fff, #000)\"`)\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "replace color tokens - with long values",
            "suites": [
                "conic gradient"
            ],
            "updatePoint": {
                "line": 152,
                "column": 47
            },
            "line": 152,
            "code": "  test(\"replace color tokens - with long values\", () => {\n    expect(\n      parseGradient(\n        \"conic(pap, yellow, lime, aqua, blue, magenta, pap)\",\n        theme,\n      ),\n    ).toMatchInlineSnapshot(\n      `\"conic-gradient(pap, yellow, lime, aqua, blue, magenta, pap)\"`,\n    )\n  })",
            "file": "parse-gradient.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should be resolve peer style",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 34
            },
            "line": 4,
            "code": "test(\"should be resolve peer style\", () => {\n  const styles: SystemStyleObject = {\n    bg: \"redish\",\n    _peerChecked: {\n      bg: \"pinkish\",\n    },\n  }\n\n  expect(css(styles)(createTheme(\"ltr\"))).toMatchInlineSnapshot(`\n    Object {\n      \"[data-peer]:checked ~ &, [data-peer][data-checked] ~ &, .peer:checked ~ &, .peer[data-checked] ~ &\": Object {\n        \"background\": \"var(--colors-pinkish)\",\n      },\n      \"background\": \"var(--colors-redish)\",\n    }\n  `)\n})",
            "file": "peer.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should process sr-only",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 28
            },
            "line": 4,
            "code": "test(\"should process sr-only\", () => {\n  const result = css({\n    srOnly: true,\n    _active: {\n      srOnly: \"focusable\",\n    },\n  })(createTheme(\"ltr\"))\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"&:active, &[data-active]\": Object {\n        \"clip\": \"auto\",\n        \"height\": \"auto\",\n        \"margin\": \"0\",\n        \"overflow\": \"visible\",\n        \"padding\": \"0\",\n        \"position\": \"static\",\n        \"whiteSpace\": \"normal\",\n        \"width\": \"auto\",\n      },\n      \"border\": \"0px\",\n      \"clip\": \"rect(0, 0, 0, 0)\",\n      \"height\": \"1px\",\n      \"margin\": \"-1px\",\n      \"overflow\": \"hidden\",\n      \"padding\": \"0px\",\n      \"position\": \"absolute\",\n      \"whiteSpace\": \"nowrap\",\n      \"width\": \"1px\",\n    }\n  `)\n})",
            "file": "sr-only.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should override text style",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 32
            },
            "line": 22,
            "code": "test(\"should override text style\", () => {\n  expect(css({ textStyle: \"big\", fontSize: \"60px\" })(theme)).toMatchObject({\n    fontSize: \"60px\",\n    lineHeight: \"80px\",\n  })\n})",
            "file": "text-styles.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should override responsive style",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 38
            },
            "line": 29,
            "code": "test(\"should override responsive style\", () => {\n  expect(\n    css({ textStyle: \"responsiveValue\", fontSize: \"60px\" })(theme),\n  ).toMatchObject({\n    fontSize: \"60px\",\n  })\n})",
            "file": "text-styles.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should merge reponsive values in textStyles with other responsive styles",
            "suites": [],
            "updatePoint": {
                "line": 37,
                "column": 78
            },
            "line": 37,
            "code": "test(\"should merge reponsive values in textStyles with other responsive styles\", () => {\n  expect(\n    css({\n      textStyle: \"h1\",\n      mt: [3, 4],\n    })(theme),\n  ).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 30em)\": Object {\n        \"color\": \"red\",\n        \"fontSize\": \"var(--chakra-fontSizes-4xl)\",\n        \"marginTop\": \"var(--chakra-space-4)\",\n      },\n      \"color\": \"blue\",\n      \"fontSize\": \"var(--chakra-fontSizes-2xl)\",\n      \"fontWeight\": \"var(--chakra-fontWeights-bold)\",\n      \"marginTop\": \"var(--chakra-space-3)\",\n    }\n  `)\n})",
            "file": "text-styles.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should merge reponsive values in textStyles + override",
            "suites": [],
            "updatePoint": {
                "line": 58,
                "column": 60
            },
            "line": 58,
            "code": "test(\"should merge reponsive values in textStyles + override\", () => {\n  expect(\n    css({\n      textStyle: \"h1\",\n      mt: [3, 4],\n      fontSize: \"30px\",\n    })(theme),\n  ).toMatchInlineSnapshot(`\n    Object {\n      \"@media screen and (min-width: 30em)\": Object {\n        \"color\": \"red\",\n        \"marginTop\": \"var(--chakra-space-4)\",\n      },\n      \"color\": \"blue\",\n      \"fontSize\": \"30px\",\n      \"fontWeight\": \"var(--chakra-fontWeights-bold)\",\n      \"marginTop\": \"var(--chakra-space-3)\",\n    }\n  `)\n})",
            "file": "text-styles.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "should transform background image",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 39
            },
            "line": 3,
            "code": "test(\"should transform background image\", () => {\n  expect(t.bgImage(\"/testing.png\")).toBe(\"url(/testing.png)\")\n\n  const linear = \"linear-gradient(green, gren)\"\n  expect(t.bgImage(linear)).toBe(linear)\n\n  expect(t.bgImage(undefined)).toBe(undefined)\n  expect(t.bgImage(\"unset\")).toBe(\"unset\")\n  expect(t.bgImage(null)).toBe(null)\n})",
            "file": "transform-functions.test.ts",
            "skipped": false,
            "dir": "packages/styled-system/tests"
        },
        {
            "name": "resolves a single value",
            "suites": [
                "useToken"
            ],
            "updatePoint": {
                "line": 52,
                "column": 31
            },
            "line": 52,
            "code": "  test(\"resolves a single value\", () => {\n    setupMock()\n\n    const { result } = renderHook(() => useToken(\"colors\", \"red.100\"))\n\n    expect(result.current).not.toBeInstanceOf(Array)\n    expect(result.current).toStrictEqual(mockRed[100])\n  })",
            "file": "hooks.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "resolves a value which contains a dot",
            "suites": [
                "useToken"
            ],
            "updatePoint": {
                "line": 61,
                "column": 45
            },
            "line": 61,
            "code": "  test(\"resolves a value which contains a dot\", () => {\n    setupMock()\n    const { result } = renderHook(() => useToken(\"space\", \"1.5\"))\n\n    expect(result.current).not.toBeInstanceOf(Array)\n    expect(result.current).toStrictEqual(mockSpace[\"1.5\"])\n  })",
            "file": "hooks.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "resolves multiple values",
            "suites": [
                "useToken"
            ],
            "updatePoint": {
                "line": 69,
                "column": 32
            },
            "line": 69,
            "code": "  test(\"resolves multiple values\", () => {\n    setupMock()\n\n    const { result } = renderHook(() =>\n      useToken(\"colors\", [\"red.100\", \"blue.300\"]),\n    )\n\n    expect(result.current).toHaveLength(2)\n    expect(result.current).toStrictEqual([mockRed[100], mockBlue[300]])\n  })",
            "file": "hooks.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "unknown values resolve as fallbacks",
            "suites": [
                "useToken"
            ],
            "updatePoint": {
                "line": 80,
                "column": 43
            },
            "line": 80,
            "code": "  test(\"unknown values resolve as fallbacks\", () => {\n    setupMock()\n\n    const input = [\"foo\", \"bar\", \"baz\"]\n\n    const { result } = renderHook(() => useToken(\"colors\", input))\n\n    expect(result.current).toHaveLength(input.length)\n    expect(result.current).toStrictEqual(input)\n  })",
            "file": "hooks.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "known and unknown values mixed",
            "suites": [
                "useToken"
            ],
            "updatePoint": {
                "line": 91,
                "column": 38
            },
            "line": 91,
            "code": "  test(\"known and unknown values mixed\", () => {\n    setupMock()\n\n    const { result } = renderHook(() =>\n      useToken(\"colors\", [\"red.100\", \"blue.300\", \"foo\", \"bar\", \"baz\"]),\n    )\n\n    expect(result.current).toHaveLength(5)\n    expect(result.current).toStrictEqual([\n      mockRed[100],\n      mockBlue[300],\n      \"foo\",\n      \"bar\",\n      \"baz\",\n    ])\n  })",
            "file": "hooks.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "resolves a single breakpoint string value",
            "suites": [
                "useToken"
            ],
            "updatePoint": {
                "line": 108,
                "column": 49
            },
            "line": 108,
            "code": "  test(\"resolves a single breakpoint string value\", () => {\n    setupMock()\n\n    const { result } = renderHook(() => useToken(\"breakpoints\", \"md\"))\n\n    expect(result.current).not.toBeInstanceOf(Array)\n    expect(result.current).toStrictEqual(mockBreakpoints[\"md\"])\n  })",
            "file": "hooks.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "resolves multiple breakpoint string values",
            "suites": [
                "useToken"
            ],
            "updatePoint": {
                "line": 117,
                "column": 50
            },
            "line": 117,
            "code": "  test(\"resolves multiple breakpoint string values\", () => {\n    setupMock()\n\n    const { result } = renderHook(() => useToken(\"breakpoints\", [\"sm\", \"lg\"]))\n\n    expect(result.current).toHaveLength(2)\n    expect(result.current).toStrictEqual([\n      mockBreakpoints[\"sm\"],\n      mockBreakpoints[\"lg\"],\n    ])\n  })",
            "file": "hooks.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "%s",
            "suites": [
                "does not forward styled-system props"
            ],
            "line": 5,
            "code": "  test.each(propNames)(\"%s\", (propName) => {\n    expect(shouldForwardProp(propName.toString())).toBe(false)\n  })",
            "file": "should-forward-prop.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "%s",
            "suites": [
                "does not forward reserved internal props"
            ],
            "line": 13,
            "code": "  test.each(internalPropNames)(\"%s\", (propName) => {\n    expect(shouldForwardProp(propName)).toBe(false)\n  })",
            "file": "should-forward-prop.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "forwards \"children\" prop",
            "suites": [
                "does not forward reserved internal props"
            ],
            "updatePoint": {
                "line": 18,
                "column": 30
            },
            "line": 18,
            "code": "test('forwards \"children\" prop', () => {\n  expect(shouldForwardProp(\"children\")).toBe(true)\n})",
            "file": "should-forward-prop.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "%s",
            "suites": [
                "forwards other random props"
            ],
            "line": 25,
            "code": "  test.each(randomPropNames)(\"%s\", (propName) => {\n    expect(shouldForwardProp(propName)).toBe(true)\n  })",
            "file": "should-forward-prop.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "should resolve styles correctly",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 37
            },
            "line": 27,
            "code": "test(\"should resolve styles correctly\", () => {\n  const result = toCSSObject({ baseStyle: { bgPosition: \"center\" } })({\n    theme,\n    layerStyle: \"v1\",\n    noOfLines: [3, 4],\n    __css: {\n      px: 4,\n      color: \"green.300\",\n    },\n    css: {\n      paddingLeft: 40,\n    },\n    color: \"pink.300\",\n    px: 5,\n    textTransform: \"capitalize\",\n    apply: { base: \"textStyles.caps\", sm: \"textStyles.lower\" },\n    sx: {\n      letterSpacing: \"2px\",\n    },\n    letterSpacing: [\"8px\", \"50px\"],\n    fontSize: [10, 23],\n    backgroundPosition: \"top left\",\n    _hover: {\n      bg: \"green.300\",\n      fontSize: [12, 26],\n      _before: {\n        content: \"\",\n        display: \"block\",\n      },\n    },\n  })\n\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"&:hover, &[data-hover]\": Object {\n          \"&::before\": Object {\n            \"content\": \"\",\n            \"display\": \"block\",\n          },\n          \"@media screen and (min-width: 30em)\": Object {\n            \"fontSize\": \"26px\",\n          },\n          \"background\": \"var(--chakra-colors-green-300)\",\n          \"fontSize\": \"12px\",\n        },\n        \"--chakra-line-clamp\": 3,\n        \"@media screen and (min-width: 30em)\": Object {\n          \"--chakra-line-clamp\": 4,\n          \"fontSize\": \"23px\",\n          \"letterSpacing\": \"0.2px\",\n          \"textTransform\": \"lowercase\",\n        },\n        \"WebkitBoxOrient\": \"vertical\",\n        \"WebkitLineClamp\": \"var(--chakra-line-clamp)\",\n        \"background\": \"tomato\",\n        \"backgroundPosition\": \"top left\",\n        \"color\": \"var(--chakra-colors-pink-300)\",\n        \"display\": \"-webkit-box\",\n        \"fontSize\": \"10px\",\n        \"letterSpacing\": \"2px\",\n        \"overflow\": \"hidden\",\n        \"paddingInlineEnd\": \"var(--chakra-space-5)\",\n        \"paddingInlineStart\": \"var(--chakra-space-5)\",\n        \"textOverflow\": \"ellipsis\",\n        \"textTransform\": \"capitalize\",\n      },\n      Object {\n        \"paddingLeft\": 40,\n      },\n    ]\n  `)\n})",
            "file": "style-resolver.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "should resolve styles correctly",
            "suites": [],
            "updatePoint": {
                "line": 100,
                "column": 37
            },
            "line": 100,
            "code": "test(\"should resolve styles correctly\", () => {\n  const result = toCSSObject({ baseStyle: (props) => ({ bg: props.color }) })({\n    theme,\n    color: \"pink.300\",\n  })\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"background\": \"var(--chakra-colors-pink-300)\",\n      \"color\": \"var(--chakra-colors-pink-300)\",\n    }\n  `)\n})",
            "file": "style-resolver.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "should override padding correctly",
            "suites": [],
            "updatePoint": {
                "line": 114,
                "column": 39
            },
            "line": 114,
            "code": "test(\"should override padding correctly\", () => {\n  const result = toCSSObject({})({\n    theme,\n    __css: {\n      paddingX: 4,\n      color: \"green.300\",\n    },\n    paddingRight: 3,\n    mr: \"5\",\n    bg: \"pinkish\",\n  })\n\n  expect(result).toMatchInlineSnapshot(`\n    Object {\n      \"background\": \"pinkish\",\n      \"color\": \"var(--chakra-colors-green-300)\",\n      \"marginRight\": \"var(--chakra-space-5)\",\n      \"paddingInlineEnd\": \"var(--chakra-space-4)\",\n      \"paddingInlineStart\": \"var(--chakra-space-4)\",\n      \"paddingRight\": \"var(--chakra-space-3)\",\n    }\n  `)\n})",
            "file": "style-resolver.test.ts",
            "skipped": false,
            "dir": "packages/system/tests"
        },
        {
            "name": "should be of type ChakraTheme",
            "suites": [
                "Theme"
            ],
            "updatePoint": {
                "line": 4,
                "column": 35
            },
            "line": 4,
            "code": "  it(\"should be of type ChakraTheme\", () => {\n    // Check if default theme is of type ChakraTheme\n    const defaultThemeIsAChakraTheme: ChakraTheme = theme\n    expect(defaultThemeIsAChakraTheme).toBeTruthy()\n  })",
            "file": "theme.test.ts",
            "skipped": false,
            "dir": "packages/theme/tests"
        },
        {
            "name": "should be check that this is a ChakraTheme",
            "suites": [
                "Theme"
            ],
            "updatePoint": {
                "line": 10,
                "column": 48
            },
            "line": 10,
            "code": "  it(\"should be check that this is a ChakraTheme\", () => {\n    expect(isChakraTheme(theme)).toBeTruthy()\n  })",
            "file": "theme.test.ts",
            "skipped": false,
            "dir": "packages/theme/tests"
        },
        {
            "name": "should be check that this is not a ChakraTheme",
            "suites": [
                "Theme"
            ],
            "updatePoint": {
                "line": 14,
                "column": 52
            },
            "line": 14,
            "code": "  it(\"should be check that this is not a ChakraTheme\", () => {\n    expect(isChakraTheme({ colors: {} })).toBeFalsy()\n  })",
            "file": "theme.test.ts",
            "skipped": false,
            "dir": "packages/theme/tests"
        },
        {
            "name": "should get first item",
            "suites": [
                "first or last item queries"
            ],
            "updatePoint": {
                "line": 19,
                "column": 29
            },
            "line": 19,
            "code": "  test(\"should get first item\", () => {\n    expect(getFirstItem(array)).toEqual(1)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get last item",
            "suites": [
                "first or last item queries"
            ],
            "updatePoint": {
                "line": 23,
                "column": 28
            },
            "line": 23,
            "code": "  test(\"should get last item\", () => {\n    expect(getLastItem(array)).toEqual(8)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should loop if at the end",
            "suites": [
                "previous item/index queries"
            ],
            "updatePoint": {
                "line": 29,
                "column": 33
            },
            "line": 29,
            "code": "  test(\"should loop if at the end\", () => {\n    const currentIndex = 0\n    const result = getPrevItem(currentIndex, array)\n    expect(result).toEqual(8)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get previous item",
            "suites": [
                "previous item/index queries"
            ],
            "updatePoint": {
                "line": 35,
                "column": 32
            },
            "line": 35,
            "code": "  test(\"should get previous item\", () => {\n    const currentIndex = 5\n    const result = getPrevItem(currentIndex, array)\n    expect(result).toEqual(5)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get previous index given current index",
            "suites": [
                "previous item/index queries"
            ],
            "updatePoint": {
                "line": 41,
                "column": 53
            },
            "line": 41,
            "code": "  test(\"should get previous index given current index\", () => {\n    expect(getPrevIndex(0, 5)).toEqual(4)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should remove item at index",
            "suites": [
                "remove and add operations"
            ],
            "updatePoint": {
                "line": 47,
                "column": 35
            },
            "line": 47,
            "code": "  test(\"should remove item at index\", () => {\n    const result = removeIndex(array, 1)\n    expect(result).toEqual([1, 3, 4, 5, 6, 7, 8])\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should add new item to end of array",
            "suites": [
                "remove and add operations"
            ],
            "updatePoint": {
                "line": 52,
                "column": 43
            },
            "line": 52,
            "code": "  test(\"should add new item to end of array\", () => {\n    const result = addItem(array, 9)\n    expect(result).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should remove item from array",
            "suites": [
                "remove and add operations"
            ],
            "updatePoint": {
                "line": 57,
                "column": 37
            },
            "line": 57,
            "code": "  test(\"should remove item from array\", () => {\n    const result = removeItem(array, 8)\n    expect(result).toEqual([1, 2, 3, 4, 5, 6, 7])\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get the next index",
            "suites": [
                "next item or index queries"
            ],
            "updatePoint": {
                "line": 64,
                "column": 33
            },
            "line": 64,
            "code": "  test(\"should get the next index\", () => {\n    const currentIndex = 1\n    const result = getNextIndex(currentIndex, array.length)\n    expect(result).toEqual(2)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get the next item based on current index",
            "suites": [
                "next item or index queries"
            ],
            "updatePoint": {
                "line": 70,
                "column": 55
            },
            "line": 70,
            "code": "  test(\"should get the next item based on current index\", () => {\n    const currentIndex = 1\n    const result = getNextItem(currentIndex, array)\n    expect(result).toEqual(3)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should loop index back to the start",
            "suites": [
                "next item or index queries"
            ],
            "updatePoint": {
                "line": 76,
                "column": 43
            },
            "line": 76,
            "code": "  test(\"should loop index back to the start\", () => {\n    const currentIndex = 7\n    const result = getNextIndex(currentIndex, array.length)\n    expect(result).toEqual(0)\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should chunk symmetric array into 2 groups",
            "suites": [
                "chunk array"
            ],
            "updatePoint": {
                "line": 84,
                "column": 50
            },
            "line": 84,
            "code": "  test(\"should chunk symmetric array into 2 groups\", () => {\n    const array = [1, 2, 3, 4, 5, 6, 7, 8]\n    const result = chunk(array, 4)\n    expect(result).toEqual([\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n    ])\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should chunk non-symmetric array into 2 groups",
            "suites": [
                "chunk array"
            ],
            "updatePoint": {
                "line": 93,
                "column": 54
            },
            "line": 93,
            "code": "  test(\"should chunk non-symmetric array into 2 groups\", () => {\n    const array = [1, 2, 3, 4, 5, 6, 7]\n    const result = chunk(array, 4)\n    expect(result).toEqual([\n      [1, 2, 3, 4],\n      [5, 6, 7],\n    ])\n  })",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "get next item based on search",
            "suites": [
                "chunk array"
            ],
            "updatePoint": {
                "line": 103,
                "column": 35
            },
            "line": 103,
            "code": "test(\"get next item based on search\", () => {\n  const array = [{ value: \"React\" }, { value: \"Vue\" }, { value: \"Svelte\" }]\n  const currentItem = { value: \"React\" }\n  const result = getNextItemFromSearch(\n    array,\n    \"vu\",\n    (item) => item.value,\n    currentItem,\n  )\n  expect(result).toEqual({ value: \"Vue\" })\n})",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "given %s, returns %s",
            "suites": [
                "chunk array"
            ],
            "line": 115,
            "code": "test.each([\n  [\"base\", true],\n  [\"sm\", true],\n  [\"md\", true],\n  [\"lg\", true],\n  [\"xl\", true],\n  [\"xxl\", true],\n  [\"custom\", true],\n  [\"2xl\", true],\n  [\"0\", false],\n  [\"1\", false],\n  [\"2\", false],\n  [\"3\", false],\n  [\"4\", false],\n  [\"5\", false],\n])(\"given %s, returns %s\", (given, expected) => {\n  expect(isCustomBreakpoint(given)).toBe(expected)\n})",
            "file": "array.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is number",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 15
            },
            "line": 19,
            "code": "test(\"is number\", () => {\n  expect(isNumber(1.2)).toBeTruthy()\n  expect(isNumber(\"20\")).toBeFalsy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is integer",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 16
            },
            "line": 24,
            "code": "test(\"is integer\", () => {\n  expect(isNumeric(\"1.3\")).toBeTruthy()\n  expect(isNumeric(\"2.03\")).toBeTruthy()\n\n  expect(isNumeric(\"2.03.34\")).toBeFalsy()\n  expect(isNumeric(\"dfd\")).toBeFalsy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is object",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 15
            },
            "line": 32,
            "code": "test(\"is object\", () => {\n  expect(isObject([])).toBeFalsy()\n  expect(isObject({})).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is empty",
            "suites": [],
            "updatePoint": {
                "line": 37,
                "column": 14
            },
            "line": 37,
            "code": "test(\"is empty\", () => {\n  expect(isEmpty([])).toBeTruthy()\n  expect(isEmpty({})).toBeTruthy()\n  expect(isEmpty(\"\")).toBeTruthy()\n  expect(isEmpty(null)).toBeTruthy()\n\n  expect(isEmpty([1, 2])).toBeFalsy()\n  expect(isEmpty({ a: 2 })).toBeFalsy()\n  expect(isEmpty(\"df\")).toBeFalsy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is empty object",
            "suites": [],
            "updatePoint": {
                "line": 48,
                "column": 21
            },
            "line": 48,
            "code": "test(\"is empty object\", () => {\n  expect(isEmptyObject({})).toBeTruthy()\n  expect(isEmptyObject({ a: 3 })).toBeFalsy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is not number",
            "suites": [],
            "updatePoint": {
                "line": 53,
                "column": 19
            },
            "line": 53,
            "code": "test(\"is not number\", () => {\n  expect(isNotNumber(\"1\")).toBeTruthy()\n  expect(isNotNumber(1)).toBeFalsy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is array",
            "suites": [],
            "updatePoint": {
                "line": 58,
                "column": 14
            },
            "line": 58,
            "code": "test(\"is array\", () => {\n  expect(isArray([1])).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is empty array",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 20
            },
            "line": 62,
            "code": "test(\"is empty array\", () => {\n  expect(isEmptyArray([])).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is function",
            "suites": [],
            "updatePoint": {
                "line": 66,
                "column": 17
            },
            "line": 66,
            "code": "test(\"is function\", () => {\n  expect(isFunction(() => {})).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is defined",
            "suites": [],
            "updatePoint": {
                "line": 70,
                "column": 16
            },
            "line": 70,
            "code": "test(\"is defined\", () => {\n  expect(isDefined(\"1\")).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is undefined",
            "suites": [],
            "updatePoint": {
                "line": 74,
                "column": 18
            },
            "line": 74,
            "code": "test(\"is undefined\", () => {\n  expect(isUndefined(undefined)).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is null",
            "suites": [],
            "updatePoint": {
                "line": 78,
                "column": 13
            },
            "line": 78,
            "code": "test(\"is null\", () => {\n  expect(isNull(null)).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is string",
            "suites": [],
            "updatePoint": {
                "line": 82,
                "column": 15
            },
            "line": 82,
            "code": "test(\"is string\", () => {\n  expect(isString(\"1\")).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "is css var",
            "suites": [],
            "updatePoint": {
                "line": 86,
                "column": 16
            },
            "line": 86,
            "code": "test(\"is css var\", () => {\n  expect(isCssVar(\"var(--whatever-you-want)\")).toBeTruthy()\n  expect(isCssVar(\"4\")).not.toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should check is object is not empty",
            "suites": [],
            "updatePoint": {
                "line": 91,
                "column": 41
            },
            "line": 91,
            "code": "test(\"should check is object is not empty\", () => {\n  expect(isNotEmptyObject({})).toBeFalsy()\n  expect(isNotEmptyObject({ size: \"sm\" })).toBeTruthy()\n})",
            "file": "assertion.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "adds 1 + 2 to equal 3",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "test(\"adds 1 + 2 to equal 3\", () => {\n  expect(1 + 2).toBe(3)\n})",
            "file": "dom-query.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get window object",
            "suites": [],
            "updatePoint": {
                "line": 10,
                "column": 30
            },
            "line": 10,
            "code": "test(\"should get window object\", () => {\n  expect(getOwnerWindow()).toBe(window)\n})",
            "file": "dom.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should return data attribute value from boolean",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 53
            },
            "line": 14,
            "code": "test(\"should return data attribute value from boolean\", () => {\n  const isActive = true\n  expect(dataAttr(isActive)).toBe(\"\")\n})",
            "file": "dom.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should return aria attribute value from boolean",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 53
            },
            "line": 19,
            "code": "test(\"should return aria attribute value from boolean\", () => {\n  const isDisabled = false\n  expect(ariaAttr(isDisabled)).toBeUndefined()\n})",
            "file": "dom.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get document object",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 32
            },
            "line": 24,
            "code": "test(\"should get document object\", () => {\n  expect(getOwnerDocument()).toBe(document)\n})",
            "file": "dom.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get window object from event",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 41
            },
            "line": 28,
            "code": "test(\"should get window object from event\", () => {\n  const event = new UIEvent(\"change\", { view: window })\n  expect(getEventWindow(event)).toBe(window)\n})",
            "file": "dom.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should normalize keyboard events",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 38
            },
            "line": 33,
            "code": "test(\"should normalize keyboard events\", () => {\n  const keyboardEvent: any = { key: \"Left\", keyCode: 38 }\n  expect(normalizeEventKey(keyboardEvent)).toBe(\"ArrowLeft\")\n})",
            "file": "dom.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should run function if function or else return value",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 58
            },
            "line": 3,
            "code": "test(\"should run function if function or else return value\", () => {\n  expect(runIfFn(() => 1 + 1)).toStrictEqual(2)\n  expect(runIfFn(2)).toStrictEqual(2)\n})",
            "file": "function.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should call all passed functions on event triggered",
            "suites": [],
            "updatePoint": {
                "line": 10,
                "column": 57
            },
            "line": 10,
            "code": "test(\"should call all passed functions on event triggered\", () => {\n  let val1 = 0\n  let val2 = 0\n  const func1 = (event: any) => {\n    val1 = event.target.value + 1\n  }\n  const func2 = (event: any) => {\n    val2 = event.target.value + 2\n  }\n\n  callAllHandlers(func1, func2)(event)\n  expect(val1).toStrictEqual(2)\n  expect(val2).toStrictEqual(3)\n})",
            "file": "function.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "adds 1 + 2 to equal 3",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "test(\"adds 1 + 2 to equal 3\", () => {\n  expect(1 + 2).toBe(3)\n})",
            "file": "keydown.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "determineLazyBehavior",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "test(\"determineLazyBehavior\", () => {\n  // when not lazy, tab panels are always rendered\n  expect(determineLazyBehavior({ isLazy: false })).toBe(true)\n\n  expect(determineLazyBehavior({ isLazy: false, isSelected: false })).toBe(true)\n\n  expect(determineLazyBehavior({ isLazy: false, hasBeenSelected: false })).toBe(\n    true,\n  )\n  expect(\n    determineLazyBehavior({\n      isLazy: false,\n      lazyBehavior: \"unmount\",\n    }),\n  ).toBe(true)\n\n  // when lazy and unmounting hidden panels, tab panels are only\n  // rendered when selected\n  expect(determineLazyBehavior({ isLazy: true, lazyBehavior: \"unmount\" })).toBe(\n    false,\n  )\n\n  expect(\n    determineLazyBehavior({\n      isLazy: true,\n      lazyBehavior: \"keepMounted\",\n      hasBeenSelected: true,\n      isSelected: false,\n    }),\n  ).toBe(true)\n\n  expect(\n    determineLazyBehavior({\n      isLazy: true,\n      lazyBehavior: \"unmount\",\n      isSelected: true,\n    }),\n  ).toBe(true)\n\n  expect(\n    determineLazyBehavior({\n      isLazy: true,\n      lazyBehavior: \"unmount\",\n      isSelected: false,\n      hasBeenSelected: true,\n    }),\n  ).toBe(false)\n\n  // when lazy and leaving hidden panels mounted, tab panels are only rendered\n  // when selected or if they were previously selected\n  expect(determineLazyBehavior({ isLazy: true, isSelected: true })).toBe(true)\n\n  expect(\n    determineLazyBehavior({\n      isLazy: true,\n      isSelected: false,\n      hasBeenSelected: true,\n      lazyBehavior: \"keepMounted\",\n    }),\n  ).toBe(true)\n\n  expect(determineLazyBehavior({ isLazy: true })).toBe(false)\n})",
            "file": "lazy.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should round number to specific precision",
            "suites": [],
            "updatePoint": {
                "line": 10,
                "column": 47
            },
            "line": 10,
            "code": "test(\"should round number to specific precision\", () => {\n  expect(toPrecision(1.4567, 2)).toStrictEqual(\"1.46\")\n})",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should return number of decimal places",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 44
            },
            "line": 14,
            "code": "test(\"should return number of decimal places\", () => {\n  expect(countDecimalPlaces(1.4567)).toStrictEqual(4)\n})",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should return percent of value in a specific range",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 56
            },
            "line": 18,
            "code": "test(\"should return percent of value in a specific range\", () => {\n  expect(valueToPercent(5, 0, 10)).toStrictEqual(50)\n})",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should return value of percent in a specific range",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 56
            },
            "line": 22,
            "code": "test(\"should return value of percent in a specific range\", () => {\n  expect(percentToValue(50, 0, 10)).toStrictEqual(500)\n})",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "with both even from & step",
            "suites": [
                "should get next value of value after specified step"
            ],
            "updatePoint": {
                "line": 27,
                "column": 34
            },
            "line": 27,
            "code": "  test(\"with both even from & step\", () => {\n    expect(roundValueToStep(4, 0, 2)).toStrictEqual(\"4\")\n    expect(roundValueToStep(5, 0, 2)).toStrictEqual(\"6\")\n    expect(roundValueToStep(6, 0, 2)).toStrictEqual(\"6\")\n  })",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "with both odd from & step",
            "suites": [
                "should get next value of value after specified step"
            ],
            "updatePoint": {
                "line": 33,
                "column": 33
            },
            "line": 33,
            "code": "  test(\"with both odd from & step\", () => {\n    expect(roundValueToStep(3, 3, 5)).toStrictEqual(\"3\")\n    expect(roundValueToStep(4, 3, 5)).toStrictEqual(\"3\")\n    expect(roundValueToStep(5, 3, 5)).toStrictEqual(\"3\")\n    expect(roundValueToStep(6, 3, 5)).toStrictEqual(\"8\")\n    expect(roundValueToStep(7, 3, 5)).toStrictEqual(\"8\")\n    expect(roundValueToStep(8, 3, 5)).toStrictEqual(\"8\")\n  })",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "with odd from and even step",
            "suites": [
                "should get next value of value after specified step"
            ],
            "updatePoint": {
                "line": 42,
                "column": 35
            },
            "line": 42,
            "code": "  test(\"with odd from and even step\", () => {\n    expect(roundValueToStep(3, 1, 2)).toStrictEqual(\"3\")\n    expect(roundValueToStep(4, 1, 2)).toStrictEqual(\"5\")\n    expect(roundValueToStep(5, 1, 2)).toStrictEqual(\"5\")\n    expect(roundValueToStep(6, 1, 2)).toStrictEqual(\"7\")\n  })",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should clamp value to specified minimum",
            "suites": [
                "should get next value of value after specified step"
            ],
            "updatePoint": {
                "line": 50,
                "column": 45
            },
            "line": 50,
            "code": "test(\"should clamp value to specified minimum\", () => {\n  expect(clampValue(5, 6, 10)).toStrictEqual(6)\n})",
            "file": "number.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should return object with omitted property",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 48
            },
            "line": 13,
            "code": "test(\"should return object with omitted property\", () => {\n  expect(omit(obj, [\"a\"])).toStrictEqual({ b: 2, c: { d: 3 } })\n})",
            "file": "object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should return property in object with specified key",
            "suites": [],
            "updatePoint": {
                "line": 17,
                "column": 57
            },
            "line": 17,
            "code": "test(\"should return property in object with specified key\", () => {\n  expect(pick(obj, [\"a\"])).toStrictEqual({ a: 1 })\n})",
            "file": "object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should split object by key and return array of split objects",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 66
            },
            "line": 21,
            "code": "test(\"should split object by key and return array of split objects\", () => {\n  expect(split(obj, [\"a\"])).toStrictEqual([{ a: 1 }, { b: 2, c: { d: 3 } }])\n})",
            "file": "object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get value of specified path in object",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 50
            },
            "line": 25,
            "code": "test(\"should get value of specified path in object\", () => {\n  expect(get(obj, \"c.d\")).toStrictEqual(3)\n})",
            "file": "object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get value of specified path in object or return path as default if value not found",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 95
            },
            "line": 29,
            "code": "test(\"should get value of specified path in object or return path as default if value not found\", () => {\n  expect(getWithDefault(\"c.d\", obj)).toStrictEqual(3)\n  expect(getWithDefault(\"c.e\", obj)).toStrictEqual(\"c.e\")\n})",
            "file": "object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should filter undefined values in object",
            "suites": [],
            "updatePoint": {
                "line": 34,
                "column": 46
            },
            "line": 34,
            "code": "test(\"should filter undefined values in object\", () => {\n  const result = filterUndefined({\n    size: null,\n    variant: undefined,\n    colorScheme: \"red\",\n  })\n  expect(result).toStrictEqual({ colorScheme: \"red\" })\n})",
            "file": "object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should get memoized value on successive calls",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 51
            },
            "line": 43,
            "code": "test(\"should get memoized value on successive calls\", () => {\n  const mockGet = jest.fn(() => true)\n  const memoizedMockGet = memoize(mockGet)\n\n  // run the memoized get twice\n  expect(memoizedMockGet(obj, \"path\")).toStrictEqual(true)\n  expect(memoizedMockGet(obj, \"path\")).toStrictEqual(true)\n  // make sure get was only called once\n  expect(mockGet).toHaveBeenCalledTimes(1)\n})",
            "file": "object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should run mapper on array or object and return mapped data",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 65
            },
            "line": 14,
            "code": "test(\"should run mapper on array or object and return mapped data\", () => {\n  expect(mapResponsive(arr, mapper)).toStrictEqual([\n    \"grid-template-columns(2, 1fr )\",\n    \"grid-template-columns(3, 1fr )\",\n  ])\n  expect(mapResponsive(obj, mapper)).toStrictEqual({\n    sm: \"grid-template-columns(2, 1fr )\",\n    md: \"grid-template-columns(3, 1fr )\",\n  })\n})",
            "file": "responsive.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should convert object to array notation",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 45
            },
            "line": 25,
            "code": "test(\"should convert object to array notation\", () => {\n  expect(objectToArrayNotation({ lg: 400, sm: 100, base: 40 })).toEqual([\n    40,\n    100,\n    null,\n    400,\n  ])\n  expect(objectToArrayNotation({ sm: 100 })).toEqual([null, 100])\n  expect(objectToArrayNotation({ md: 100 })).toEqual([null, null, 100])\n  expect(objectToArrayNotation({ base: 100 })).toEqual([100])\n  expect(objectToArrayNotation({ base: 100, lg: 1300 })).toEqual([\n    100,\n    null,\n    null,\n    1300,\n  ])\n  expect(objectToArrayNotation({ base: 100, md: 400 })).toEqual([\n    100,\n    null,\n    400,\n  ])\n  expect(objectToArrayNotation({})).toEqual([])\n})",
            "file": "responsive.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should tell if object is responsive-like",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 46
            },
            "line": 49,
            "code": "test(\"should tell if object is responsive-like\", () => {\n  expect(isResponsiveObjectLike({ lg: 400, sm: 100, base: 40 })).toBe(true)\n  expect(isResponsiveObjectLike({ base: 40 })).toBe(true)\n  expect(isResponsiveObjectLike({ sm: 100 })).toBe(true)\n  expect(isResponsiveObjectLike({})).toBe(false)\n  expect(isResponsiveObjectLike({ base: 40, paddingTop: 4 })).toBe(false)\n  expect(isResponsiveObjectLike({ md: 40, paddingTop: 4 })).toBe(false)\n  expect(isResponsiveObjectLike({ paddingTop: 4, paddingLeft: 4 })).toBe(false)\n})",
            "file": "responsive.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should convert array to object value",
            "suites": [],
            "updatePoint": {
                "line": 59,
                "column": 42
            },
            "line": 59,
            "code": "test(\"should convert array to object value\", () => {\n  expect(arrayToObjectNotation([\"20px\", null, null, \"60px\"])).toEqual({\n    base: \"20px\",\n    lg: \"60px\",\n  })\n  expect(arrayToObjectNotation([\"30px\"])).toEqual({ base: \"30px\" })\n  expect(arrayToObjectNotation([\"30px\", \"50px\"])).toEqual({\n    base: \"30px\",\n    sm: \"50px\",\n  })\n  expect(arrayToObjectNotation([])).toEqual({})\n})",
            "file": "responsive.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should work correctly",
            "suites": [],
            "updatePoint": {
                "line": 72,
                "column": 27
            },
            "line": 72,
            "code": "test(\"should work correctly\", () => {\n  expect(\n    analyzeBreakpoints({\n      sm: \"320px\",\n      md: \"640px\",\n      lg: \"1000px\",\n      xl: \"4000px\",\n    })?.details,\n  ).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"breakpoint\": \"base\",\n        \"maxW\": \"319px\",\n        \"maxWQuery\": \"@media screen and (max-width: 319px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 0px) and @media screen and (max-width: 319px)\",\n        \"minW\": \"0px\",\n        \"minWQuery\": \"@media screen and (min-width: 0px)\",\n      },\n      Object {\n        \"breakpoint\": \"sm\",\n        \"maxW\": \"639px\",\n        \"maxWQuery\": \"@media screen and (max-width: 639px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 320px) and @media screen and (max-width: 639px)\",\n        \"minW\": \"320px\",\n        \"minWQuery\": \"@media screen and (min-width: 320px)\",\n      },\n      Object {\n        \"breakpoint\": \"md\",\n        \"maxW\": \"999px\",\n        \"maxWQuery\": \"@media screen and (max-width: 999px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 640px) and @media screen and (max-width: 999px)\",\n        \"minW\": \"640px\",\n        \"minWQuery\": \"@media screen and (min-width: 640px)\",\n      },\n      Object {\n        \"breakpoint\": \"lg\",\n        \"maxW\": \"3999px\",\n        \"maxWQuery\": \"@media screen and (max-width: 3999px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 1000px) and @media screen and (max-width: 3999px)\",\n        \"minW\": \"1000px\",\n        \"minWQuery\": \"@media screen and (min-width: 1000px)\",\n      },\n      Object {\n        \"breakpoint\": \"xl\",\n        \"maxW\": undefined,\n        \"maxWQuery\": \"\",\n        \"minMaxQuery\": \"@media screen and (min-width: 4000px)\",\n        \"minW\": \"4000px\",\n        \"minWQuery\": \"@media screen and (min-width: 4000px)\",\n      },\n    ]\n  `)\n})",
            "file": "responsive.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should work with createBreakpoint output",
            "suites": [],
            "updatePoint": {
                "line": 127,
                "column": 46
            },
            "line": 127,
            "code": "test(\"should work with createBreakpoint output\", () => {\n  expect(\n    analyzeBreakpoints(\n      createBreakpoints({\n        sm: \"320px\",\n        md: \"640px\",\n        lg: \"1000px\",\n        xl: \"4000px\",\n      }),\n    )?.details,\n  ).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"breakpoint\": \"base\",\n        \"maxW\": \"319px\",\n        \"maxWQuery\": \"@media screen and (max-width: 319px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 0em) and @media screen and (max-width: 319px)\",\n        \"minW\": \"0em\",\n        \"minWQuery\": \"@media screen and (min-width: 0em)\",\n      },\n      Object {\n        \"breakpoint\": \"sm\",\n        \"maxW\": \"639px\",\n        \"maxWQuery\": \"@media screen and (max-width: 639px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 320px) and @media screen and (max-width: 639px)\",\n        \"minW\": \"320px\",\n        \"minWQuery\": \"@media screen and (min-width: 320px)\",\n      },\n      Object {\n        \"breakpoint\": \"md\",\n        \"maxW\": \"999px\",\n        \"maxWQuery\": \"@media screen and (max-width: 999px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 640px) and @media screen and (max-width: 999px)\",\n        \"minW\": \"640px\",\n        \"minWQuery\": \"@media screen and (min-width: 640px)\",\n      },\n      Object {\n        \"breakpoint\": \"lg\",\n        \"maxW\": \"3999px\",\n        \"maxWQuery\": \"@media screen and (max-width: 3999px)\",\n        \"minMaxQuery\": \"@media screen and (min-width: 1000px) and @media screen and (max-width: 3999px)\",\n        \"minW\": \"1000px\",\n        \"minWQuery\": \"@media screen and (min-width: 1000px)\",\n      },\n      Object {\n        \"breakpoint\": \"xl\",\n        \"maxW\": undefined,\n        \"maxWQuery\": \"\",\n        \"minMaxQuery\": \"@media screen and (min-width: 4000px)\",\n        \"minW\": \"4000px\",\n        \"minWQuery\": \"@media screen and (min-width: 4000px)\",\n      },\n    ]\n  `)\n})",
            "file": "responsive.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "adds 1 + 2 to equal 3",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "test(\"adds 1 + 2 to equal 3\", () => {\n  expect(1 + 2).toBe(3)\n})",
            "file": "tabbable.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should handle an object",
            "suites": [
                "walkObject"
            ],
            "updatePoint": {
                "line": 4,
                "column": 29
            },
            "line": 4,
            "code": "  it(\"should handle an object\", () => {\n    const target = {\n      key: \"original\",\n      nested: {\n        nestedKey: \"nestedOriginal\",\n      },\n    }\n    const replaceWith = \"It's me\"\n    const result = walkObject(target, () => replaceWith)\n\n    expect(result).toEqual({\n      key: replaceWith,\n      nested: {\n        nestedKey: replaceWith,\n      },\n    })\n  })",
            "file": "walk-object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should handle an array",
            "suites": [
                "walkObject"
            ],
            "updatePoint": {
                "line": 22,
                "column": 28
            },
            "line": 22,
            "code": "  it(\"should handle an array\", () => {\n    const target = [\n      \"very\",\n      \"original\",\n      {\n        nested: {\n          nestedKey: \"nestedOriginal\",\n        },\n      },\n    ]\n    const replaceWith = \"It's me\"\n    const result = walkObject(target, () => replaceWith)\n    expect(result).toEqual([\n      replaceWith,\n      replaceWith,\n      {\n        nested: {\n          nestedKey: replaceWith,\n        },\n      },\n    ])\n  })",
            "file": "walk-object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should handle a string",
            "suites": [
                "walkObject"
            ],
            "updatePoint": {
                "line": 45,
                "column": 28
            },
            "line": 45,
            "code": "  it(\"should handle a string\", () => {\n    const target = \"original\"\n    const replaceWith = \"It's me\"\n    const result = walkObject(target, () => replaceWith)\n    expect(result).toBe(replaceWith)\n  })",
            "file": "walk-object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should handle a number",
            "suites": [
                "walkObject"
            ],
            "updatePoint": {
                "line": 52,
                "column": 28
            },
            "line": 52,
            "code": "  it(\"should handle a number\", () => {\n    const target = 1\n    const replaceWith = \"It's me\"\n    const result = walkObject(target, () => replaceWith)\n    expect(result).toBe(replaceWith)\n  })",
            "file": "walk-object.test.ts",
            "skipped": false,
            "dir": "packages/utils/tests"
        },
        {
            "name": "should extract all component types",
            "suites": [
                "Extract Component Types"
            ],
            "updatePoint": {
                "line": 4,
                "column": 40
            },
            "line": 4,
            "code": "  it(\"should extract all component types\", () => {\n    const theme = {\n      components: {\n        TestComponent: {\n          variants: {\n            outline: {},\n            unstyled: {},\n          },\n        },\n      },\n    }\n\n    const componentTypes = extractComponentTypes(theme)\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Object {\n        \"TestComponent\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [\n            \"outline\",\n            \"unstyled\",\n          ],\n        },\n      }\n    `)\n  })",
            "file": "extract-component-types.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should handle empty variants or sizes",
            "suites": [
                "Extract Component Types"
            ],
            "updatePoint": {
                "line": 31,
                "column": 43
            },
            "line": 31,
            "code": "  it(\"should handle empty variants or sizes\", () => {\n    const theme = {\n      components: {\n        TestComponent: {},\n      },\n    }\n\n    const componentTypes = extractComponentTypes(theme)\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Object {\n        \"TestComponent\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [],\n        },\n      }\n    `)\n  })",
            "file": "extract-component-types.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should handle arbitrary component names",
            "suites": [
                "Extract Component Types"
            ],
            "updatePoint": {
                "line": 50,
                "column": 45
            },
            "line": 50,
            "code": "  it(\"should handle arbitrary component names\", () => {\n    const theme = {\n      components: {\n        \"design-system/Button\": {},\n        \"design-system_Button\": {},\n      },\n    }\n\n    const componentTypes = extractComponentTypes(theme)\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Object {\n        \"design-system/Button\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [],\n        },\n        \"design-system_Button\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [],\n        },\n      }\n    `)\n  })",
            "file": "extract-component-types.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should extract top-level keys from the given property",
            "suites": [
                "Extract Keys"
            ],
            "updatePoint": {
                "line": 4,
                "column": 59
            },
            "line": 4,
            "code": "  it(\"should extract top-level keys from the given property\", () => {\n    const theme = {\n      textStyles: {\n        styleOne: {\n          fontSize: 16,\n          fontWeight: \"bold\",\n        },\n        styleTwo: {\n          fontSize: 64,\n        },\n      },\n    }\n\n    const textStyles = extractPropertyKeys(theme, \"textStyles\")\n    expect(textStyles).toMatchInlineSnapshot(`\n      Array [\n        \"styleOne\",\n        \"styleTwo\",\n      ]\n    `)\n  })",
            "file": "extract-keys.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should handle empty entries",
            "suites": [
                "Extract Keys"
            ],
            "updatePoint": {
                "line": 26,
                "column": 33
            },
            "line": 26,
            "code": "  it(\"should handle empty entries\", () => {\n    const theme = {\n      textStyles: {\n        emptyStyle: {},\n      },\n    }\n\n    const componentTypes = extractPropertyKeys(theme, \"textStyles\")\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Array [\n        \"emptyStyle\",\n      ]\n    `)\n  })",
            "file": "extract-keys.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should handle missing properties",
            "suites": [
                "Extract Keys"
            ],
            "updatePoint": {
                "line": 42,
                "column": 38
            },
            "line": 42,
            "code": "  it(\"should handle missing properties\", () => {\n    const theme = {}\n\n    const textStyles = extractPropertyKeys(theme, \"textStyles\")\n\n    expect(textStyles).toMatchInlineSnapshot(`Array []`)\n  })",
            "file": "extract-keys.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should extract all property paths",
            "suites": [
                "Extract Property Paths"
            ],
            "updatePoint": {
                "line": 28,
                "column": 39
            },
            "line": 28,
            "code": "  it(\"should extract all property paths\", () => {\n    const maxDepth = 4\n\n    const propertyPaths = extractPropertyPaths(target, maxDepth)\n\n    expect(propertyPaths).toMatchInlineSnapshot(`\n      Array [\n        \"1.11.111\",\n        \"1.11.112\",\n        \"1.12.121\",\n        \"1.12.122\",\n        \"1.12.123.231\",\n        \"1.12.123.232\",\n        \"2.21\",\n        \"2.22\",\n      ]\n    `)\n  })",
            "file": "extract-property-paths.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should omit too deep keys",
            "suites": [
                "Extract Property Paths"
            ],
            "updatePoint": {
                "line": 47,
                "column": 31
            },
            "line": 47,
            "code": "  it(\"should omit too deep keys\", () => {\n    const maxDepth = 3\n\n    const propertyPaths = extractPropertyPaths(target, maxDepth)\n\n    expect(propertyPaths).toMatchInlineSnapshot(`\n      Array [\n        \"1.11.111\",\n        \"1.11.112\",\n        \"1.12.121\",\n        \"1.12.122\",\n        \"2.21\",\n        \"2.22\",\n      ]\n    `)\n  })",
            "file": "extract-property-paths.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should print TS union",
            "suites": [
                "Extract Property Paths"
            ],
            "updatePoint": {
                "line": 64,
                "column": 27
            },
            "line": 64,
            "code": "  it(\"should print TS union\", () => {\n    const union = { key: [\"value1\", \"value2\"] }\n\n    const interfacePartial = printUnionMap(union)\n\n    expect(interfacePartial).toMatchInlineSnapshot(\n      `\"key: \\\\\"value1\\\\\" | \\\\\"value2\\\\\";\"`,\n    )\n  })",
            "file": "extract-property-paths.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should print type never for empty array",
            "suites": [
                "Extract Property Paths"
            ],
            "updatePoint": {
                "line": 74,
                "column": 45
            },
            "line": 74,
            "code": "  it(\"should print type never for empty array\", () => {\n    const union = { key: [] }\n\n    const interfacePartial = printUnionMap(union)\n\n    expect(interfacePartial).toMatchInlineSnapshot(`\"key: never;\"`)\n  })",
            "file": "extract-property-paths.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should format with prettier",
            "suites": [
                "Format With Prettier"
            ],
            "updatePoint": {
                "line": 4,
                "column": 33
            },
            "line": 4,
            "code": "  it(\"should format with prettier\", async () => {\n    const content =\n      \"export interface ThemeTypings { fonts: 'test1'|'test2'|'test3'}\"\n\n    const pretty = await formatWithPrettierIfAvailable(content)\n\n    expect(pretty).toMatchInlineSnapshot(`\n      \"export interface ThemeTypings {\n        fonts: \\\\\"test1\\\\\" | \\\\\"test2\\\\\" | \\\\\"test3\\\\\"\n      }\n      \"\n    `)\n  })",
            "file": "format-with-prettier.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should not fail if prettier is not available",
            "suites": [
                "Format With Prettier"
            ],
            "updatePoint": {
                "line": 18,
                "column": 50
            },
            "line": 18,
            "code": "  it(\"should not fail if prettier is not available\", async () => {\n    jest.mock(\"prettier\", () => {\n      throw new Error(\"module not found\")\n    })\n\n    const content =\n      \"export interface ThemeTypings { fonts: 'test1'|'test2'|'test3'}\"\n    const pretty = await formatWithPrettierIfAvailable(content)\n\n    expect(pretty).toMatchInlineSnapshot(\n      `\"export interface ThemeTypings { fonts: 'test1'|'test2'|'test3'}\"`,\n    )\n  })",
            "file": "format-with-prettier.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should create typings for a theme",
            "suites": [
                "Theme typings"
            ],
            "updatePoint": {
                "line": 78,
                "column": 39
            },
            "line": 78,
            "code": "  it(\"should create typings for a theme\", async () => {\n    const themeUnderTest = smallTheme\n\n    const themeInterface = await createThemeTypingsInterface(themeUnderTest, {\n      config: themeKeyConfiguration,\n    })\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      export interface ThemeTypings {\n        blur: never\n        borders: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        borderStyles: never\n        borderWidths: never\n        breakpoints: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        colors:\n          | \\\\\"niceColor\\\\\"\n          | \\\\\"suchWowColor\\\\\"\n          | \\\\\"onlyColorSchemeColor.50\\\\\"\n          | \\\\\"onlyColorSchemeColor.100\\\\\"\n          | \\\\\"onlyColorSchemeColor.200\\\\\"\n          | \\\\\"onlyColorSchemeColor.300\\\\\"\n          | \\\\\"onlyColorSchemeColor.400\\\\\"\n          | \\\\\"onlyColorSchemeColor.500\\\\\"\n          | \\\\\"onlyColorSchemeColor.600\\\\\"\n          | \\\\\"onlyColorSchemeColor.700\\\\\"\n          | \\\\\"onlyColorSchemeColor.800\\\\\"\n          | \\\\\"onlyColorSchemeColor.900\\\\\"\n          | \\\\\"such.deep.color\\\\\"\n        colorSchemes: \\\\\"onlyColorSchemeColor\\\\\"\n        fonts: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        fontSizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        fontWeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        layerStyles: \\\\\"red\\\\\" | \\\\\"blue\\\\\"\n        letterSpacings: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        lineHeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        radii: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        shadows: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        sizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        space: \\\\\"sm\\\\\" | \\\\\"-sm\\\\\" | \\\\\"md\\\\\" | \\\\\"-md\\\\\"\n        textStyles: \\\\\"small\\\\\" | \\\\\"large\\\\\"\n        transition: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        zIndices: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        components: {\n          Button: {\n            sizes: \\\\\"sm\\\\\"\n            variants: \\\\\"extraordinary\\\\\" | \\\\\"awesome\\\\\" | \\\\\"unused\\\\\"\n          }\n        }\n      }\n      \"\n    `)\n  })",
            "file": "theme-typings.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        },
        {
            "name": "should not omit empty unions",
            "suites": [
                "Theme typings"
            ],
            "updatePoint": {
                "line": 133,
                "column": 34
            },
            "line": 133,
            "code": "  it(\"should not omit empty unions\", async () => {\n    const themeUnderTest = {}\n\n    const themeInterface = await createThemeTypingsInterface(themeUnderTest, {\n      config: themeKeyConfiguration,\n    })\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      export interface ThemeTypings {\n        blur: never\n        borders: never\n        borderStyles: never\n        borderWidths: never\n        breakpoints: never\n        colors: never\n        colorSchemes: never\n        fonts: never\n        fontSizes: never\n        fontWeights: never\n        layerStyles: never\n        letterSpacings: never\n        lineHeights: never\n        radii: never\n        shadows: never\n        sizes: never\n        space: never\n        textStyles: never\n        transition: never\n        zIndices: never\n        components: {}\n      }\n      \"\n    `)\n  })",
            "file": "theme-typings.test.ts",
            "skipped": false,
            "dir": "tooling/cli/test"
        }
    ],
    "badge": "chakra-ui__chakra-ui.svg"
}