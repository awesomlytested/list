{"repo":"FredrikNoren/ungit","url":"https://github.com/FredrikNoren/ungit","branch":"master","configs":[{"package":"ungit","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"parseAddress ssh://some.address.com/my/awesome/project","suites":["git-parser addresses"],"updatePoint":{"line":4,"column":60,"index":198},"line":4,"code":"  it('parseAddress ssh://some.address.com/my/awesome/project', () => {\n    const addr = 'ssh://some.address.com/my/awesome/project';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.port).to.be(undefined);\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress ssh://some.address.com:8080/my/awesome/project","suites":["git-parser addresses"],"updatePoint":{"line":12,"column":65,"index":594},"line":12,"code":"  it('parseAddress ssh://some.address.com:8080/my/awesome/project', () => {\n    const addr = 'ssh://some.address.com:8080/my/awesome/project';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.port).to.be('8080');\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress some.address.com:my/awesome/project.git","suites":["git-parser addresses"],"updatePoint":{"line":20,"column":58,"index":985},"line":20,"code":"  it('parseAddress some.address.com:my/awesome/project.git', () => {\n    const addr = 'some.address.com:my/awesome/project.git';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress someuser@some.address.com:my/awesome/project.git","suites":["git-parser addresses"],"updatePoint":{"line":27,"column":67,"index":1339},"line":27,"code":"  it('parseAddress someuser@some.address.com:my/awesome/project.git', () => {\n    const addr = 'someuser@some.address.com:my/awesome/project.git';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.username).to.be('someuser');\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress some.address.com:my/awesome/project","suites":["git-parser addresses"],"updatePoint":{"line":35,"column":54,"index":1736},"line":35,"code":"  it('parseAddress some.address.com:my/awesome/project', () => {\n    const addr = 'some.address.com:my/awesome/project';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress someuser@some.address.com:my/awesome/project","suites":["git-parser addresses"],"updatePoint":{"line":42,"column":63,"index":2082},"line":42,"code":"  it('parseAddress someuser@some.address.com:my/awesome/project', () => {\n    const addr = 'someuser@some.address.com:my/awesome/project';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.username).to.be('someuser');\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress https://some.address.com/my/awesome/project","suites":["git-parser addresses"],"updatePoint":{"line":50,"column":62,"index":2483},"line":50,"code":"  it('parseAddress https://some.address.com/my/awesome/project', () => {\n    const addr = 'https://some.address.com/my/awesome/project';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress https://some.address.com/my/awesome/project.git","suites":["git-parser addresses"],"updatePoint":{"line":57,"column":66,"index":2840},"line":57,"code":"  it('parseAddress https://some.address.com/my/awesome/project.git', () => {\n    const addr = 'https://some.address.com/my/awesome/project.git';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('some.address.com');\n    expect(parsed.project).to.be('my/awesome/project');\n    expect(parsed.shortProject).to.be('project');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress /home/username/somerepo","suites":["git-parser addresses"],"updatePoint":{"line":64,"column":42,"index":3177},"line":64,"code":"  it('parseAddress /home/username/somerepo', () => {\n    const addr = '/home/username/somerepo';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('localhost');\n    expect(parsed.project).to.be('somerepo');\n    expect(parsed.shortProject).to.be('somerepo');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress ~/something/somerepo","suites":["git-parser addresses"],"updatePoint":{"line":71,"column":39,"index":3471},"line":71,"code":"  it('parseAddress ~/something/somerepo', () => {\n    const addr = '~/something/somerepo';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('localhost');\n    expect(parsed.project).to.be('somerepo');\n    expect(parsed.shortProject).to.be('somerepo');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress C:\\something\\somerepo","suites":["git-parser addresses"],"updatePoint":{"line":78,"column":42,"index":3765},"line":78,"code":"  it('parseAddress C:\\\\something\\\\somerepo', () => {\n    const addr = 'C:\\\\something\\\\somerepo';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('localhost');\n    expect(parsed.project).to.be('somerepo');\n    expect(parsed.shortProject).to.be('somerepo');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress C:\\somerepo","suites":["git-parser addresses"],"updatePoint":{"line":85,"column":31,"index":4051},"line":85,"code":"  it('parseAddress C:\\\\somerepo', () => {\n    const addr = 'C:\\\\somerepo';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('localhost');\n    expect(parsed.project).to.be('somerepo');\n    expect(parsed.shortProject).to.be('somerepo');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"parseAddress C:\\something\\somerepo\\","suites":["git-parser addresses"],"updatePoint":{"line":92,"column":44,"index":4339},"line":92,"code":"  it('parseAddress C:\\\\something\\\\somerepo\\\\', () => {\n    const addr = 'C:\\\\something\\\\somerepo\\\\';\n    const parsed = addressParser.parseAddress(addr);\n    expect(parsed.host).to.be('localhost');\n    expect(parsed.project).to.be('somerepo');\n    expect(parsed.shortProject).to.be('somerepo');\n  });","file":"spec.address-parser.js","skipped":false,"dir":"test"},{"name":"should be invokable several times","suites":["cache"],"updatePoint":{"line":4,"column":39,"index":151},"line":4,"code":"  it('should be invokable several times', () => {\n    let i = 0;\n    const key = cache.registerFunc(() => i++);\n    return cache.resolveFunc(key).then(val => {\n      expect(val).to.be(0);\n    }).then(() => cache.resolveFunc(key)).then(val => expect(val).to.be(0));\n  });","file":"spec.cache.js","skipped":false,"dir":"test"},{"name":"should work when failing sync","suites":["cache"],"updatePoint":{"line":11,"column":35,"index":418},"line":11,"code":"  it('should work when failing sync', () => {\n    const errorMsg = 'A nasty error...';\n    const key = cache.registerFunc(() => {\n      throw new Error(errorMsg);\n    });\n    return cache.resolveFunc(key).then(() => {\n      throw new Error('should have thrown exception!');\n    }).catch(e => {\n      if (e.message !== errorMsg) throw new Error('error message does not match!');\n    });\n  });","file":"spec.cache.js","skipped":false,"dir":"test"},{"name":"should work when failing async","suites":["cache"],"updatePoint":{"line":22,"column":36,"index":811},"line":22,"code":"  it('should work when failing async', () => {\n    const errorMsg = 'A nasty error...';\n    const key = cache.registerFunc(() => Promise.reject(new Error(errorMsg)));\n    return cache.resolveFunc(key).then(() => {\n      throw new Error('should have thrown exception!');\n    }).catch(e => {\n      if (e.message !== errorMsg) throw new Error('error message does not match!');\n    });\n  });","file":"spec.cache.js","skipped":false,"dir":"test"},{"name":"should be possible to invalidate cache","suites":["cache"],"updatePoint":{"line":31,"column":44,"index":1207},"line":31,"code":"  it('should be possible to invalidate cache', () => {\n    let i = 0;\n    const key = cache.registerFunc(() => i++);\n    return cache.resolveFunc(key).then(val => {\n      expect(val).to.be(0);\n    }).then(() => {\n      cache.invalidateFunc(key);\n      return cache.resolveFunc(key);\n    }).then(val => {\n      expect(val).to.be(1);\n    });\n  });","file":"spec.cache.js","skipped":false,"dir":"test"},{"name":"creating a same function with different keys","suites":["cache"],"updatePoint":{"line":43,"column":50,"index":1559},"line":43,"code":"  it('creating a same function with different keys', () => {\n    let i = 0;\n    const key1 = 'func1';\n    const key2 = 'func2';\n    const func = () => i++;\n    cache.registerFunc(func, key1);\n    cache.registerFunc(func, key2);\n    return cache.resolveFunc(key1).then(val => {\n      expect(val).to.be(0);\n    }).then(() => cache.resolveFunc(key1)).then(val => {\n      expect(val).to.be(0);\n    }).then(() => cache.resolveFunc(key2)).then(val => {\n      expect(val).to.be(1);\n    }).then(() => {\n      cache.invalidateFunc(key1);\n      return cache.resolveFunc(key1);\n    }).then(val => {\n      expect(val).to.be(2);\n    }).then(() => cache.resolveFunc(key2)).then(val => {\n      expect(val).to.be(1);\n    });\n  });","file":"spec.cache.js","skipped":false,"dir":"test"},{"name":"Testing ttl","suites":["cache"],"updatePoint":{"line":65,"column":17,"index":2241},"line":65,"code":"  it('Testing ttl', function () {\n    let i = 0;\n    const func = () => i++;\n    const key = cache.registerFunc(func, null, 1);\n    this.timeout(3000);\n    return cache.resolveFunc(key).then(val => {\n      expect(val).to.be(0);\n    }).then(() => new Promise(resolve => setTimeout(resolve, 500))).then(() => {\n      return cache.resolveFunc(key);\n    }).then(val => {\n      expect(val).to.be(0);\n    }).then(() => new Promise(resolve => setTimeout(resolve, 1000))).then(() => {\n      return cache.resolveFunc(key);\n    }).then(val => {\n      expect(val).to.be(1);\n    }).then(() => new Promise(resolve => setTimeout(resolve, 500))).then(() => cache.resolveFunc(key)).then(val => {\n      expect(val).to.be(1);\n    });\n  });","file":"spec.cache.js","skipped":false,"dir":"test"},{"name":"should be invokable","suites":["credentials-helper"],"updatePoint":{"line":6,"column":25,"index":224},"line":6,"code":"  it('should be invokable', done => {\n    const socketId = Math.floor(Math.random() * 1000);\n    const remote = 'origin';\n    const payload = {\n      username: 'testuser',\n      password: 'testpassword'\n    };\n    const server = http.createServer((req, res) => {\n      try {\n        const reqUrl = new URL(req.url, `http://${req.headers.host}`);\n        expect(reqUrl.pathname).to.be('/api/credentials');\n        expect(reqUrl.searchParams.get('remote')).to.be(`${remote}`);\n        expect(reqUrl.searchParams.get('socketId')).to.be(`${socketId}`);\n        res.writeHead(200, {\n          'Content-Type': 'application/json'\n        });\n        res.end(JSON.stringify(payload));\n      } finally {\n        if (!res.writableFinished) {\n          res.statusCode = 500;\n          res.end();\n        }\n      }\n    });\n    server.listen({\n      port: config.port\n    }, () => {\n      const command = `node bin/credentials-helper ${socketId} ${config.port} ${remote} get`;\n      child_process.exec(command, (err, stdout, stderr) => {\n        server.close();\n        expect(err).to.not.be.ok();\n        const ss = stdout.split('\\n');\n        expect(ss[0]).to.be(`username=${payload.username}`);\n        expect(ss[1]).to.be(`password=${payload.password}`);\n        done();\n      });\n    });\n  });","file":"spec.credentials-helper.js","skipped":false,"dir":"test"},{"name":"should be able to detrmine image file vs text files.","suites":["file type"],"updatePoint":{"line":4,"column":58,"index":184},"line":4,"code":"  it('should be able to detrmine image file vs text files.', () => {\n    expect(fileType('example.txt')).to.be('text');\n    expect(fileType('example')).to.be('text');\n    expect(fileType('example.aBc')).to.be('text');\n    expect(fileType('examplepng.jpg.er')).to.be('text');\n    expect(fileType('example.png')).to.be('image');\n    expect(fileType('example.jpg')).to.be('image');\n    expect(fileType('example.bmp')).to.be('image');\n    expect(fileType('example.gIf')).to.be('image');\n    expect(fileType('example.JPEG')).to.be('image');\n  });","file":"spec.file-type.js","skipped":false,"dir":"test"},{"name":"should be possible to commit to master","suites":["git-api branching"],"updatePoint":{"line":31,"column":44,"index":843},"line":31,"code":"  it('should be possible to commit to master', () => {\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile1)\n    }).then(() => common.post(req, '/commit', {\n      path: testDir,\n      message: commitMessage,\n      files: [{\n        name: testFile1\n      }]\n    }));\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"listing branches should work","suites":["git-api branching"],"updatePoint":{"line":42,"column":34,"index":1146},"line":42,"code":"  it('listing branches should work', () => {\n    return common.get(req, '/branches', {\n      path: testDir\n    }).then(res => {\n      expect(res.length).to.be(1);\n      expect(res[0].name).to.be('master');\n      expect(res[0].current).to.be(true);\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"creating a branch should work","suites":["git-api branching"],"updatePoint":{"line":52,"column":35,"index":1444},"line":52,"code":"  it('creating a branch should work', () => {\n    return common.post(req, '/branches', {\n      path: testDir,\n      name: testBranch,\n      startPoint: 'master'\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"listing branches should show the new branch","suites":["git-api branching"],"updatePoint":{"line":59,"column":49,"index":1633},"line":59,"code":"  it('listing branches should show the new branch', () => {\n    return common.get(req, '/branches', {\n      path: testDir\n    }).then(res => {\n      expect(res.length).to.be(2);\n      expect(res[0].name).to.be('master');\n      expect(res[0].current).to.be(true);\n      expect(res[1].name).to.be(testBranch);\n      expect(res[1].current).to.be(undefined);\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to switch to a branch","suites":["git-api branching"],"updatePoint":{"line":70,"column":46,"index":1999},"line":70,"code":"  it('should be possible to switch to a branch', () => {\n    return common.post(req, '/checkout', {\n      path: testDir,\n      name: testBranch\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"listing branches should show the new branch as current","suites":["git-api branching"],"updatePoint":{"line":76,"column":60,"index":2171},"line":76,"code":"  it('listing branches should show the new branch as current', () => {\n    return common.get(req, '/branches', {\n      path: testDir\n    }).then(res => {\n      expect(res.length).to.be(2);\n      expect(res[0].name).to.be('master');\n      expect(res[0].current).to.be(undefined);\n      expect(res[1].name).to.be(testBranch);\n      expect(res[1].current).to.be(true);\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"get branch should show the new branch as current","suites":["git-api branching"],"updatePoint":{"line":87,"column":54,"index":2545},"line":87,"code":"  it('get branch should show the new branch as current', () => {\n    return common.get(req, '/checkout', {\n      path: testDir\n    }).then(res => expect(res).to.be(testBranch));\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to commit to the branch","suites":["git-api branching"],"updatePoint":{"line":94,"column":48,"index":2797},"line":94,"code":"  it('should be possible to commit to the branch', () => {\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile2)\n    }).then(() => common.post(req, '/commit', {\n      path: testDir,\n      message: commitMessage3,\n      files: [{\n        name: testFile2\n      }]\n    }));\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"log should show both branches and all commits","suites":["git-api branching"],"updatePoint":{"line":105,"column":51,"index":3118},"line":105,"code":"  it('log should show both branches and all commits', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.skip).to.be(0);\n      expect(res.limit).to.be(25);\n      const nodes = res.nodes;\n      expect(nodes).to.be.a('array');\n      expect(nodes.length).to.be(2);\n      const objs = {};\n      nodes.forEach(obj => {\n        obj.refs.sort();\n        objs[obj.refs[0]] = obj;\n      });\n      const master = objs['refs/heads/master'];\n      const HEAD = objs['HEAD'];\n      expect(master.message.indexOf(commitMessage)).to.be(0);\n      expect(master.authorDate).to.be.a('string');\n      expect(master.authorName).to.be(gitConfig['user.name']);\n      expect(master.authorEmail).to.be(gitConfig['user.email']);\n      expect(master.commitDate).to.be.a('string');\n      expect(master.committerName).to.be(gitConfig['user.name']);\n      expect(master.committerEmail).to.be(gitConfig['user.email']);\n      expect(master.refs).to.eql(['refs/heads/master']);\n      expect(master.parents).to.eql([]);\n      expect(master.sha1).to.be.ok();\n      expect(HEAD.message.indexOf(commitMessage3)).to.be(0);\n      expect(HEAD.authorDate).to.be.a('string');\n      expect(HEAD.authorName).to.be(gitConfig['user.name']);\n      expect(HEAD.authorEmail).to.be(gitConfig['user.email']);\n      expect(HEAD.commitDate).to.be.a('string');\n      expect(HEAD.committerName).to.be(gitConfig['user.name']);\n      expect(HEAD.committerEmail).to.be(gitConfig['user.email']);\n      expect(HEAD.refs).to.eql(['HEAD', `refs/heads/${testBranch}`]);\n      expect(HEAD.parents).to.eql([master.sha1]);\n      expect(HEAD.sha1).to.be.ok();\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to modify some local file","suites":["git-api branching"],"updatePoint":{"line":143,"column":50,"index":4780},"line":143,"code":"  it('should be possible to modify some local file', () => {\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile1)\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to checkout another branch with local modifications","suites":["git-api branching"],"updatePoint":{"line":148,"column":76,"index":4976},"line":148,"code":"  it('should be possible to checkout another branch with local modifications', () => {\n    return common.post(req, '/checkout', {\n      path: testDir,\n      name: 'master'\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"status should list the changed file","suites":["git-api branching"],"updatePoint":{"line":154,"column":41,"index":5127},"line":154,"code":"  it('status should list the changed file', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile1]).to.eql({\n        displayName: testFile1,\n        fileName: testFile1,\n        oldFileName: testFile1,\n        isNew: false,\n        staged: false,\n        removed: false,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '1',\n        deletions: '1'\n      });\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to create a tag","suites":["git-api branching"],"updatePoint":{"line":174,"column":40,"index":5661},"line":174,"code":"  it('should be possible to create a tag', () => {\n    return common.post(req, '/tags', {\n      path: testDir,\n      name: 'v1.0'\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to list tag","suites":["git-api branching"],"updatePoint":{"line":180,"column":36,"index":5801},"line":180,"code":"  it('should be possible to list tag', () => {\n    return common.get(req, '/tags', {\n      path: testDir\n    }).then(res => expect(res.length).to.be(1));\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to delete a tag","suites":["git-api branching"],"updatePoint":{"line":185,"column":40,"index":5965},"line":185,"code":"  it('should be possible to delete a tag', () => {\n    return common.delete(req, '/tags', {\n      path: testDir,\n      name: 'v1.0'\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"tag should be removed","suites":["git-api branching"],"updatePoint":{"line":191,"column":27,"index":6098},"line":191,"code":"  it('tag should be removed', () => {\n    return common.get(req, '/tags', {\n      path: testDir\n    }).then(res => expect(res.length).to.be(0));\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to delete a branch","suites":["git-api branching"],"updatePoint":{"line":196,"column":43,"index":6265},"line":196,"code":"  it('should be possible to delete a branch', () => {\n    return common.delete(req, '/branches', {\n      path: testDir,\n      name: testBranch\n    });\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"branch should be removed","suites":["git-api branching"],"updatePoint":{"line":202,"column":30,"index":6409},"line":202,"code":"  it('branch should be removed', () => {\n    return common.get(req, '/branches', {\n      path: testDir\n    }).then(res => expect(res.length).to.be(1));\n  });","file":"spec.git-api.branching.js","skipped":false,"dir":"test"},{"name":"should be possible to make some changes","suites":["git-api conflict checkout no auto stash"],"updatePoint":{"line":50,"column":45,"index":1430},"line":50,"code":"  it('should be possible to make some changes', () => {\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile1)\n    });\n  });","file":"spec.git-api.conflict-no-auto-stash.js","skipped":false,"dir":"test"},{"name":"should not be possible to checkout with local files that will conflict","suites":["git-api conflict checkout no auto stash"],"updatePoint":{"line":55,"column":76,"index":1626},"line":55,"code":"  it('should not be possible to checkout with local files that will conflict', () => {\n    return common.post(req, `${restGit.pathPrefix}/checkout`, {\n      path: testDir,\n      name: testBranch\n    }).then(gitErr => expect(gitErr.errorCode).to.be('local-changes-would-be-overwritten'));\n  });","file":"spec.git-api.conflict-no-auto-stash.js","skipped":false,"dir":"test"},{"name":"checkout should say we are still on master","suites":["git-api conflict checkout no auto stash"],"updatePoint":{"line":61,"column":48,"index":1892},"line":61,"code":"  it('checkout should say we are still on master', () => {\n    return common.get(req, '/checkout', {\n      path: testDir\n    }).then(res => expect(res).to.be('master'));\n  });","file":"spec.git-api.conflict-no-auto-stash.js","skipped":false,"dir":"test"},{"name":"should be possible to rebase on master","suites":["git-api conflict rebase"],"updatePoint":{"line":59,"column":44,"index":1766},"line":59,"code":"  it('should be possible to rebase on master', done => {\n    req.post(`${restGit.pathPrefix}/rebase`).send({\n      path: testDir,\n      onto: 'master'\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end((err, res) => {\n      expect(res.body.errorCode).to.be('merge-failed');\n      done();\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"status should list files in conflict","suites":["git-api conflict rebase"],"updatePoint":{"line":68,"column":42,"index":2103},"line":68,"code":"  it('status should list files in conflict', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(res.inRebase).to.be(true);\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile1]).to.eql({\n        displayName: testFile1,\n        fileName: testFile1,\n        oldFileName: testFile1,\n        isNew: false,\n        staged: false,\n        removed: false,\n        conflict: true,\n        renamed: false,\n        type: 'text',\n        additions: '4',\n        deletions: '0'\n      });\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible fix the conflict","suites":["git-api conflict rebase"],"updatePoint":{"line":89,"column":41,"index":2677},"line":89,"code":"  it('should be possible fix the conflict', () => {\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile1)\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to resolve","suites":["git-api conflict rebase"],"updatePoint":{"line":94,"column":35,"index":2832},"line":94,"code":"  it('should be possible to resolve', () => {\n    return common.post(req, '/resolveconflicts', {\n      path: testDir,\n      files: [testFile1]\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible continue the rebase","suites":["git-api conflict rebase"],"updatePoint":{"line":100,"column":44,"index":2998},"line":100,"code":"  it('should be possible continue the rebase', () => {\n    return common.post(req, '/rebase/continue', {\n      path: testDir\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to make some changes","suites":["git-api conflict checkout"],"updatePoint":{"line":135,"column":45,"index":4013},"line":135,"code":"  it('should be possible to make some changes', () => {\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile1)\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to checkout with local files that will conflict","suites":["git-api conflict checkout"],"updatePoint":{"line":140,"column":72,"index":4205},"line":140,"code":"  it('should be possible to checkout with local files that will conflict', done => {\n    req.post(`${restGit.pathPrefix}/checkout`).send({\n      path: testDir,\n      name: testBranch\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end((err, res) => {\n      expect(res.body.errorCode).to.be('merge-failed');\n      done();\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"status should list files in conflict","suites":["git-api conflict checkout"],"updatePoint":{"line":149,"column":42,"index":4546},"line":149,"code":"  it('status should list files in conflict', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(res.inRebase).to.be(false);\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile1]).to.eql({\n        displayName: testFile1,\n        fileName: testFile1,\n        oldFileName: testFile1,\n        isNew: false,\n        staged: false,\n        removed: false,\n        conflict: true,\n        renamed: false,\n        type: 'text',\n        additions: '4',\n        deletions: '0'\n      });\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to merge the branches","suites":["git-api conflict merge"],"updatePoint":{"line":211,"column":46,"index":6358},"line":211,"code":"  it('should be possible to merge the branches', done => {\n    req.post(`${restGit.pathPrefix}/merge`).send({\n      path: testDir,\n      with: 'master'\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end((err, res) => {\n      expect(res.body.errorCode).to.be('merge-failed');\n      done();\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"status should list files in conflict","suites":["git-api conflict merge"],"updatePoint":{"line":220,"column":42,"index":6694},"line":220,"code":"  it('status should list files in conflict', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(res.inMerge).to.be(true);\n      expect(res.commitMessage).to.be.ok();\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile1]).to.eql({\n        displayName: testFile1,\n        fileName: testFile1,\n        oldFileName: testFile1,\n        isNew: false,\n        staged: false,\n        removed: false,\n        conflict: true,\n        renamed: false,\n        type: 'text',\n        additions: '4',\n        deletions: '0'\n      });\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible fix the conflict","suites":["git-api conflict merge"],"updatePoint":{"line":242,"column":41,"index":7311},"line":242,"code":"  it('should be possible fix the conflict', () => {\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile1)\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to resolve","suites":["git-api conflict merge"],"updatePoint":{"line":247,"column":35,"index":7466},"line":247,"code":"  it('should be possible to resolve', () => {\n    return common.post(req, '/resolveconflicts', {\n      path: testDir,\n      files: [testFile1]\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible continue the merge","suites":["git-api conflict merge"],"updatePoint":{"line":253,"column":43,"index":7631},"line":253,"code":"  it('should be possible continue the merge', () => {\n    return common.post(req, '/merge/continue', {\n      path: testDir,\n      message: 'something'\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"log should show changes on the merge commit","suites":["git-api conflict merge"],"updatePoint":{"line":259,"column":49,"index":7802},"line":259,"code":"  it('log should show changes on the merge commit', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(4);\n      expect(res.nodes[0].additions).to.eql(1);\n      expect(res.nodes[0].deletions).to.eql(1);\n      expect(res.nodes[0].fileLineDiffs.length).to.be(1);\n      expect(res.nodes[0].fileLineDiffs[0]).to.eql({\n        additions: 1,\n        deletions: 1,\n        fileName: testFile1,\n        oldFileName: testFile1,\n        displayName: testFile1,\n        type: 'text'\n      });\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to rebase on master","suites":["git-api conflict solve by deleting"],"updatePoint":{"line":320,"column":44,"index":9719},"line":320,"code":"  it('should be possible to rebase on master', done => {\n    req.post(`${restGit.pathPrefix}/rebase`).send({\n      path: testDir,\n      onto: 'master'\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end((err, res) => {\n      expect(res.body.errorCode).to.be('merge-failed');\n      done();\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"status should list files in conflict","suites":["git-api conflict solve by deleting"],"updatePoint":{"line":329,"column":42,"index":10056},"line":329,"code":"  it('status should list files in conflict', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(res.inRebase).to.be(true);\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile1]).to.eql({\n        displayName: testFile1,\n        fileName: testFile1,\n        oldFileName: testFile1,\n        isNew: false,\n        staged: false,\n        removed: false,\n        conflict: true,\n        renamed: false,\n        type: 'text',\n        additions: '4',\n        deletions: '0'\n      });\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to remove the file","suites":["git-api conflict solve by deleting"],"updatePoint":{"line":350,"column":43,"index":10632},"line":350,"code":"  it('should be possible to remove the file', () => {\n    return common.post(req, '/testing/removefile', {\n      file: path.join(testDir, testFile1)\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible to resolve","suites":["git-api conflict solve by deleting"],"updatePoint":{"line":355,"column":35,"index":10787},"line":355,"code":"  it('should be possible to resolve', () => {\n    return common.post(req, '/resolveconflicts', {\n      path: testDir,\n      files: [testFile1]\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"should be possible continue the rebase","suites":["git-api conflict solve by deleting"],"updatePoint":{"line":361,"column":44,"index":10953},"line":361,"code":"  it('should be possible continue the rebase', () => {\n    return common.post(req, '/rebase/continue', {\n      path: testDir\n    });\n  });","file":"spec.git-api.conflict.js","skipped":false,"dir":"test"},{"name":"diff on non existing file should fail","suites":["git-api diff"],"updatePoint":{"line":27,"column":43,"index":832},"line":27,"code":"  it('diff on non existing file should fail', () => {\n    return common.get(req, '/diff', {\n      path: testDir,\n      file: testFile\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to create a file","suites":["git-api diff"],"updatePoint":{"line":34,"column":41,"index":993},"line":34,"code":"  it('should be possible to create a file', () => {\n    content = ['A', 'few', 'lines', 'of', 'content', ''];\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile),\n      content: content.join('\\n')\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to create an image file","suites":["git-api diff"],"updatePoint":{"line":41,"column":48,"index":1253},"line":41,"code":"  it('should be possible to create an image file', () => {\n    return common.post(req, '/testing/createimagefile', {\n      file: path.join(testDir, testImage)\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on created file should work","suites":["git-api diff"],"updatePoint":{"line":46,"column":38,"index":1416},"line":46,"code":"  it('diff on created file should work', () => {\n    return common.get(req, '/diff', {\n      path: testDir,\n      file: testFile\n    }).then(res => {\n      for (let i = 0; i < content.length; i++) {\n        expect(res.indexOf(content[i])).to.be.above(-1);\n      }\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on image file should work","suites":["git-api diff"],"updatePoint":{"line":56,"column":36,"index":1692},"line":56,"code":"  it('diff on image file should work', () => {\n    return common.getPng(req, '/diff/image', {\n      path: testDir,\n      filename: testImage,\n      version: 'current'\n    }).then(res => expect(res.toString()).to.be('png'));\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to commit a file","suites":["git-api diff"],"updatePoint":{"line":63,"column":41,"index":1927},"line":63,"code":"  it('should be possible to commit a file', () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: 'Init File',\n      files: [{\n        name: testFile\n      }]\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to commit an image file","suites":["git-api diff"],"updatePoint":{"line":72,"column":48,"index":2138},"line":72,"code":"  it('should be possible to commit an image file', () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: 'Init Image',\n      files: [{\n        name: testImage\n      }]\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on first commit should work","suites":["git-api diff"],"updatePoint":{"line":81,"column":38,"index":2341},"line":81,"code":"  it('diff on first commit should work', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.nodes.length).to.be(2);\n      return common.get(req, '/diff', {\n        path: testDir,\n        file: testFile,\n        sha1: res.nodes[1].sha1\n      });\n    }).then(res => {\n      for (let i = 0; i < content.length; i++) {\n        expect(res.indexOf(content[i])).to.be.above(-1);\n      }\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on commited file should work","suites":["git-api diff"],"updatePoint":{"line":97,"column":39,"index":2791},"line":97,"code":"  it('diff on commited file should work', () => {\n    return common.get(req, '/diff', {\n      path: testDir,\n      file: testFile\n    }).then(res => {\n      expect(res).to.be.an('array');\n      expect(res.length).to.be(0);\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on commited image file should work","suites":["git-api diff"],"updatePoint":{"line":106,"column":45,"index":3034},"line":106,"code":"  it('diff on commited image file should work', () => {\n    return common.getPng(req, '/diff/image', {\n      path: testDir,\n      filename: testImage,\n      version: 'current'\n    }).then(res => expect(res.toString()).to.be('png'));\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to modify a file","suites":["git-api diff"],"updatePoint":{"line":113,"column":41,"index":3269},"line":113,"code":"  it('should be possible to modify a file', () => {\n    content.splice(2, 0, 'more');\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile),\n      content: content.join('\\n')\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to modify an image file","suites":["git-api diff"],"updatePoint":{"line":120,"column":48,"index":3505},"line":120,"code":"  it('should be possible to modify an image file', () => {\n    return common.post(req, '/testing/changeimagefile', {\n      file: path.join(testDir, testImage)\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on modified file should work","suites":["git-api diff"],"updatePoint":{"line":125,"column":39,"index":3669},"line":125,"code":"  it('diff on modified file should work', () => {\n    return common.get(req, '/diff', {\n      path: testDir,\n      file: testFile\n    }).then(res => {\n      expect(res.indexOf('diff --git a/afile.txt b/afile.txt')).to.be.above(-1);\n      expect(res.indexOf('+more')).to.be.above(-1);\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on file commit should work if file is changing","suites":["git-api diff"],"updatePoint":{"line":134,"column":57,"index":3985},"line":134,"code":"  it('diff on file commit should work if file is changing', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.nodes.length).to.be(2);\n      return common.get(req, '/diff', {\n        path: testDir,\n        file: testFile,\n        sha1: res.nodes[1].sha1\n      });\n    }).then(res => {\n      expect(res.indexOf('diff --git a/afile.txt b/afile.txt')).to.be.above(-1);\n      expect(res.indexOf('+more')).to.be(-1);\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"getting current image file should work","suites":["git-api diff"],"updatePoint":{"line":149,"column":44,"index":4453},"line":149,"code":"  it('getting current image file should work', () => {\n    return common.getPng(req, '/diff/image', {\n      path: testDir,\n      filename: testImage,\n      version: 'current'\n    }).then(res => expect(res.toString()).to.be('png ~~'));\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"getting previous image file should work","suites":["git-api diff"],"updatePoint":{"line":156,"column":45,"index":4695},"line":156,"code":"  it('getting previous image file should work', () => {\n    return common.getPng(req, '/diff/image', {\n      path: testDir,\n      filename: testImage,\n      version: 'HEAD'\n    }).then(res => expect(res.toString()).to.be('png'));\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to rename a modified file","suites":["git-api diff"],"updatePoint":{"line":163,"column":50,"index":4936},"line":163,"code":"  it('should be possible to rename a modified file', () => {\n    return common.post(req, '/testing/git', {\n      path: testDir,\n      command: ['mv', testFile, testFile2]\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on renamed and modified file should work","suites":["git-api diff"],"updatePoint":{"line":169,"column":51,"index":5122},"line":169,"code":"  it('diff on renamed and modified file should work', () => {\n    return common.get(req, '/diff', {\n      path: testDir,\n      file: testFile2,\n      oldFile: testFile\n    }).then(res => {\n      expect(res.indexOf('diff --git a/afile.txt b/anotherfile.txt')).to.be.above(-1);\n      expect(res.indexOf('+more')).to.be.above(-1);\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to commit the renamed and modified file","suites":["git-api diff"],"updatePoint":{"line":179,"column":64,"index":5477},"line":179,"code":"  it('should be possible to commit the renamed and modified file', () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: 'Move and Change',\n      files: [{\n        name: testFile2\n      }]\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on commit with renamed and modified file should work","suites":["git-api diff"],"updatePoint":{"line":188,"column":63,"index":5710},"line":188,"code":"  it('diff on commit with renamed and modified file should work', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.nodes.length).to.be(3);\n      return common.get(req, '/diff', {\n        path: testDir,\n        file: testFile2,\n        oldFile: testFile,\n        sha1: res.nodes[0].sha1\n      });\n    }).then(res => {\n      for (let i = 0; i < content.length; i++) {\n        expect(res.indexOf(content[i])).to.be.above(-1);\n      }\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"removing a test file should work","suites":["git-api diff"],"updatePoint":{"line":205,"column":38,"index":6187},"line":205,"code":"  it('removing a test file should work', () => {\n    return common.post(req, '/testing/removefile', {\n      file: path.join(testDir, testFile2)\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be possible to commit an image file","suites":["git-api diff"],"updatePoint":{"line":210,"column":48,"index":6355},"line":210,"code":"  it('should be possible to commit an image file', () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: 'Init',\n      files: [{\n        name: testImage\n      }]\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"removing a test image file should work","suites":["git-api diff"],"updatePoint":{"line":219,"column":44,"index":6558},"line":219,"code":"  it('removing a test image file should work', () => {\n    return common.post(req, '/testing/removefile', {\n      file: path.join(testDir, testImage)\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on removed file should work","suites":["git-api diff"],"updatePoint":{"line":224,"column":38,"index":6716},"line":224,"code":"  it('diff on removed file should work', () => {\n    return common.get(req, '/diff', {\n      path: testDir,\n      file: testFile2\n    }).then(res => {\n      expect(res.indexOf('deleted file')).to.be.above(-1);\n      expect(res.indexOf('@@ -1,6 +0,0 @@')).to.be.above(-1);\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"getting previous image file should work","suites":["git-api diff"],"updatePoint":{"line":233,"column":45,"index":7009},"line":233,"code":"  it('getting previous image file should work', () => {\n    return common.getPng(req, '/diff/image', {\n      path: testDir,\n      filename: testImage,\n      version: 'HEAD'\n    }).then(res => expect(res.toString()).to.be('png ~~'));\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"diff on bare repository file should work","suites":["git-api diff"],"updatePoint":{"line":240,"column":46,"index":7249},"line":240,"code":"  it('diff on bare repository file should work', () => {\n    // first add remote and push all commits\n    return common.post(req, '/remotes/barerepository', {\n      path: testDir,\n      url: testBareDir\n    }).then(() => common.post(req, '/push', {\n      path: testDir,\n      remote: 'barerepository'\n    })).then(() => common.get(req, '/gitlog', {\n      path: testDir\n    })).then(res => {\n      // find a commit which contains the testFile\n      const commit = res.nodes.filter(commit => commit.fileLineDiffs.some(lineDiff => lineDiff.fileName == testFile))[0];\n      return common.get(req, '/diff', {\n        path: testDir,\n        sha1: commit.sha1,\n        file: testFile\n      });\n    });\n  });","file":"spec.git-api.diff.js","skipped":false,"dir":"test"},{"name":"should be able to discard a new file","suites":["git-api discardchanges"],"updatePoint":{"line":18,"column":42,"index":526},"line":18,"code":"  it('should be able to discard a new file', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile1 = 'test.txt';\n      return common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile1)\n      }).then(() => common.post(req, '/discardchanges', {\n        path: dir,\n        file: testFile1\n      })).then(() => common.get(req, '/status', {\n        path: dir\n      })).then(res => expect(Object.keys(res.files).length).to.be(0));\n    });\n  });","file":"spec.git-api.discardchanges.js","skipped":false,"dir":"test"},{"name":"should be able to discard a changed file","suites":["git-api discardchanges"],"updatePoint":{"line":31,"column":46,"index":1021},"line":31,"code":"  it('should be able to discard a changed file', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile1 = 'test.txt';\n      return common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile1)\n      }).then(() => common.post(req, '/commit', {\n        path: dir,\n        message: 'lol',\n        files: [{\n          name: testFile1\n        }]\n      })).then(() => common.post(req, '/testing/changefile', {\n        file: path.join(dir, testFile1)\n      })).then(() => common.post(req, '/discardchanges', {\n        path: dir,\n        file: testFile1\n      })).then(() => common.get(req, '/status', {\n        path: dir\n      })).then(res => expect(Object.keys(res.files).length).to.be(0));\n    });\n  });","file":"spec.git-api.discardchanges.js","skipped":false,"dir":"test"},{"name":"should be able to discard a removed file","suites":["git-api discardchanges"],"updatePoint":{"line":52,"column":46,"index":1768},"line":52,"code":"  it('should be able to discard a removed file', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile1 = 'test.txt';\n      return common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile1)\n      }).then(() => common.post(req, '/commit', {\n        path: dir,\n        message: 'lol',\n        files: [{\n          name: testFile1\n        }]\n      })).then(() => common.post(req, '/testing/removefile', {\n        file: path.join(dir, testFile1)\n      })).then(() => common.post(req, '/discardchanges', {\n        path: dir,\n        file: testFile1\n      })).then(() => common.get(req, '/status', {\n        path: dir\n      })).then(res => expect(Object.keys(res.files).length).to.be(0));\n    });\n  });","file":"spec.git-api.discardchanges.js","skipped":false,"dir":"test"},{"name":"should be able to discard a new and staged file","suites":["git-api discardchanges"],"updatePoint":{"line":73,"column":53,"index":2522},"line":73,"code":"  it('should be able to discard a new and staged file', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile1 = 'test.txt';\n      return common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile1)\n      }).then(() => common.post(req, '/testing/git', {\n        path: dir,\n        command: ['add', testFile1]\n      })).then(() => common.post(req, '/discardchanges', {\n        path: dir,\n        file: testFile1\n      })).then(() => common.get(req, '/status', {\n        path: dir\n      })).then(res => expect(Object.keys(res.files).length).to.be(0));\n    });\n  });","file":"spec.git-api.discardchanges.js","skipped":false,"dir":"test"},{"name":"should be able to discard a staged and removed file","suites":["git-api discardchanges"],"updatePoint":{"line":89,"column":57,"index":3139},"line":89,"code":"  it('should be able to discard a staged and removed file', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile1 = 'test.txt';\n      return common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile1)\n      }).then(() => common.post(req, '/testing/git', {\n        path: dir,\n        command: ['add', testFile1]\n      })).then(() => common.post(req, '/testing/removefile', {\n        file: path.join(dir, testFile1)\n      })).then(() => common.post(req, '/discardchanges', {\n        path: dir,\n        file: testFile1\n      })).then(() => common.get(req, '/status', {\n        path: dir\n      })).then(res => expect(Object.keys(res.files).length).to.be(0));\n    });\n  });","file":"spec.git-api.discardchanges.js","skipped":false,"dir":"test"},{"name":"should be able to discard discard submodule changes","suites":["git-api discardchanges"],"updatePoint":{"line":107,"column":57,"index":3859},"line":107,"code":"  it('should be able to discard discard submodule changes', function () {\n    const testFile = 'smalltestfile.txt';\n    const submodulePath = 'subrepo';\n    return common.createSmallRepo(req).then(dir => {\n      return common.createSmallRepo(req).then(subrepoDir => {\n        return common.post(req, '/submodules/add', {\n          submoduleUrl: subrepoDir,\n          submodulePath: submodulePath,\n          path: dir\n        }).then(() => dir);\n      });\n    }).then(dir => {\n      return common.post(req, '/commit', {\n        path: dir,\n        message: 'lol',\n        files: [{\n          name: '.gitmodules'\n        }]\n      }).then(() => common.post(req, '/testing/changefile', {\n        file: path.join(dir, submodulePath, testFile)\n      })).then(() => common.post(req, '/discardchanges', {\n        path: dir,\n        file: submodulePath\n      })).then(() => common.get(req, '/status', {\n        path: dir\n      })).then(res => expect(Object.keys(res.files).length).to.be(0));\n    });\n  });","file":"spec.git-api.discardchanges.js","skipped":false,"dir":"test"},{"name":"Add a file to .gitignore file through api call","suites":["git-api: test ignorefile call"],"updatePoint":{"line":19,"column":52,"index":578},"line":19,"code":"  it('Add a file to .gitignore file through api call', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile = 'test.txt';\n\n      // Create .gitignore file prior to append\n      return fs.writeFile(path.join(dir, '.gitignore'), 'test git ignore file...').then(() => common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile)\n      })).then(() => common.post(req, '/ignorefile', {\n        path: dir,\n        file: testFile\n      })).then(() => {\n        return common.get(req, '/status', {\n          path: dir\n        }).then(res => {\n          expect(Object.keys(res.files).toString()).to.be('.gitignore');\n        });\n      }).then(() => {\n        return fs.readFile(path.join(dir, '.gitignore'), {\n          encoding: 'utf8'\n        }).then(data => {\n          if (data.indexOf(testFile) < 0) {\n            throw new Error('Test file is not added to the .gitignore file.');\n          }\n        });\n      });\n    });\n  });","file":"spec.git-api.ignorefile.js","skipped":false,"dir":"test"},{"name":"Add a file to .gitignore file through api call when .gitignore is missing","suites":["git-api: test ignorefile call"],"updatePoint":{"line":46,"column":79,"index":1579},"line":46,"code":"  it('Add a file to .gitignore file through api call when .gitignore is missing', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile = 'test.txt';\n      return common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile)\n      }).then(() => common.post(req, '/ignorefile', {\n        path: dir,\n        file: testFile\n      })).then(() => {\n        return common.get(req, '/status', {\n          path: dir\n        }).then(res => {\n          expect(Object.keys(res.files).toString()).to.be('.gitignore');\n        });\n      }).then(() => {\n        return fs.readFile(path.join(dir, '.gitignore'), {\n          encoding: 'utf8'\n        }).then(data => {\n          if (data.indexOf(testFile) < 0) {\n            throw new Error('Test file is not added to the .gitignore file.');\n          }\n        });\n      });\n    });\n  });","file":"spec.git-api.ignorefile.js","skipped":false,"dir":"test"},{"name":"Attempt to add a file where similar name alread exist in .gitignore through api call","suites":["git-api: test ignorefile call"],"updatePoint":{"line":71,"column":90,"index":2460},"line":71,"code":"  it('Attempt to add a file where similar name alread exist in .gitignore through api call', () => {\n    return common.createSmallRepo(req).then(dir => {\n      const testFile = 'test.txt';\n\n      // add part of file name to gitignore\n      return fs.appendFile(path.join(dir, '.gitignore'), testFile.split('.')[0]).then(() => common.post(req, '/testing/createfile', {\n        file: path.join(dir, testFile)\n      })).then(() => common.post(req, '/ignorefile', {\n        path: dir,\n        file: testFile\n      })).then(() => {\n        return common.get(req, '/status', {\n          path: dir\n        }).then(res => {\n          expect(Object.keys(res.files).toString()).to.be('.gitignore');\n        });\n      }).then(() => {\n        return fs.readFile(path.join(dir, '.gitignore'), {\n          encoding: 'utf8'\n        }).then(data => {\n          if (data.indexOf(testFile) < 0) {\n            throw new Error('Test file is not added to the .gitignore file.');\n          }\n        });\n      });\n    });\n  });","file":"spec.git-api.ignorefile.js","skipped":false,"dir":"test"},{"name":"gitconfig should return config data","suites":["git-api"],"updatePoint":{"line":38,"column":41,"index":1200},"line":38,"code":"  it('gitconfig should return config data', () => {\n    return common.get(req, '/gitconfig', {\n      path: testDir\n    }).then(res => {\n      expect(res).to.be.an('object');\n      expect(res['user.name']).to.be.ok();\n      expect(res['user.email']).to.be.ok();\n      gitConfig = res;\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should fail in uninited directory","suites":["git-api"],"updatePoint":{"line":48,"column":46,"index":1503},"line":48,"code":"  it('status should fail in uninited directory', done => {\n    req.get(`${restGit.pathPrefix}/status`).query({\n      path: path.join(testDir, 'nowhere')\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end((err, res) => {\n      expect(res.body.errorCode).to.be('no-such-path');\n      done();\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"quickstatus should say uninited in uninited directory","suites":["git-api"],"updatePoint":{"line":56,"column":59,"index":1857},"line":56,"code":"  it('quickstatus should say uninited in uninited directory', () => {\n    return common.get(req, '/quickstatus', {\n      path: testDir\n    }).then(res => expect(res).to.eql({\n      type: 'uninited',\n      subRepos: [],\n      gitRootPath: testDir\n    }));\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"quickstatus should say uninited with sub repos if it has sub repos","suites":["git-api"],"updatePoint":{"line":65,"column":72,"index":2131},"line":65,"code":"  it('quickstatus should say uninited with sub repos if it has sub repos', () => {\n    let testDirWithSubRepos;\n    let subRepo1, subRepo2;\n    return common.post(req, '/testing/createtempdir').then(res => {\n      expect(res.path).to.be.ok();\n      return fs.realpath(res.path).then(dir => {\n        testDirWithSubRepos = dir;\n      });\n    }).then(() => {\n      subRepo1 = path.join(testDirWithSubRepos, 'repo1');\n      return fs.mkdir(subRepo1).then(() => common.post(req, '/init', {\n        path: subRepo1\n      }));\n    }).then(() => {\n      subRepo2 = path.join(testDirWithSubRepos, 'repo2');\n      return fs.mkdir(subRepo2).then(() => common.post(req, '/init', {\n        path: subRepo2\n      }));\n    }).then(() => {\n      return common.get(req, '/quickstatus', {\n        path: testDirWithSubRepos\n      }).then(res => expect(res).to.eql({\n        type: 'uninited',\n        subRepos: [subRepo1, subRepo2],\n        gitRootPath: testDirWithSubRepos\n      }));\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should fail in non-existing directory","suites":["git-api"],"updatePoint":{"line":93,"column":50,"index":3087},"line":93,"code":"  it('status should fail in non-existing directory', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).catch(e => expect(e.errorCode).to.be('no-such-path'));\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"quickstatus should say false in non-existing directory","suites":["git-api"],"updatePoint":{"line":98,"column":60,"index":3286},"line":98,"code":"  it('quickstatus should say false in non-existing directory', () => {\n    return common.get(req, '/quickstatus', {\n      path: path.join(testDir, 'nowhere')\n    }).then(res => expect(res).to.eql({\n      type: 'no-such-path',\n      gitRootPath: path.join(testDir, 'nowhere')\n    }));\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"init should succeed in uninited directory","suites":["git-api"],"updatePoint":{"line":106,"column":47,"index":3563},"line":106,"code":"  it('init should succeed in uninited directory', () => {\n    return common.post(req, '/init', {\n      path: testDir\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should succeed in inited directory","suites":["git-api"],"updatePoint":{"line":111,"column":47,"index":3694},"line":111,"code":"  it('status should succeed in inited directory', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"quickstatus should say inited in inited directory","suites":["git-api"],"updatePoint":{"line":116,"column":55,"index":3834},"line":116,"code":"  it('quickstatus should say inited in inited directory', () => {\n    return common.get(req, '/quickstatus', {\n      path: testDir\n    }).then(res => expect(res).to.eql({\n      type: 'inited',\n      gitRootPath: testDir\n    }));\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"commit should fail on when there's no files to commit","suites":["git-api"],"updatePoint":{"line":124,"column":59,"index":4073},"line":124,"code":"  it(\"commit should fail on when there's no files to commit\", done => {\n    req.post(`${restGit.pathPrefix}/commit`).send({\n      path: testDir,\n      message: 'test',\n      files: []\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end(done);\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"log should be empty before first commit","suites":["git-api"],"updatePoint":{"line":134,"column":45,"index":4360},"line":134,"code":"  it('log should be empty before first commit', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(0);\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"head should be empty before first commit","suites":["git-api"],"updatePoint":{"line":142,"column":46,"index":4595},"line":142,"code":"  it('head should be empty before first commit', () => {\n    return common.get(req, '/head', {\n      path: testDir\n    }).then(res => {\n      expect(res).to.be.a('array');\n      expect(res.length).to.be(0);\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"commit should fail on non-existing file","suites":["git-api"],"updatePoint":{"line":150,"column":45,"index":4815},"line":150,"code":"  it('commit should fail on non-existing file', done => {\n    req.post(`${restGit.pathPrefix}/commit`).send({\n      path: testDir,\n      message: 'test',\n      files: [{\n        name: testFile\n      }]\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end(done);\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"creating test file should work","suites":["git-api"],"updatePoint":{"line":159,"column":36,"index":5109},"line":159,"code":"  it('creating test file should work', () => {\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should list untracked file","suites":["git-api"],"updatePoint":{"line":164,"column":39,"index":5267},"line":164,"code":"  it('status should list untracked file', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile]).to.eql({\n        displayName: testFile,\n        fileName: testFile,\n        oldFileName: testFile,\n        isNew: true,\n        staged: false,\n        removed: false,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '-',\n        deletions: '-'\n      });\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"commit should fail without commit message","suites":["git-api"],"updatePoint":{"line":187,"column":47,"index":5824},"line":187,"code":"  it('commit should fail without commit message', done => {\n    req.post(`${restGit.pathPrefix}/commit`).send({\n      path: testDir,\n      message: undefined,\n      files: [{\n        name: testFile\n      }]\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(400).end(done);\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"commit should succeed when there's files to commit","suites":["git-api"],"updatePoint":{"line":196,"column":56,"index":6141},"line":196,"code":"  it(\"commit should succeed when there's files to commit\", () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: commitMessage,\n      files: [{\n        name: testFile\n      }]\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"log should show latest commit","suites":["git-api"],"updatePoint":{"line":205,"column":35,"index":6341},"line":205,"code":"  it('log should show latest commit', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(1);\n      expect(res.nodes[0].message.indexOf(commitMessage)).to.be(0);\n      expect(res.nodes[0].authorName).to.be(gitConfig['user.name']);\n      expect(res.nodes[0].authorEmail).to.be(gitConfig['user.email']);\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"head should show latest commit","suites":["git-api"],"updatePoint":{"line":216,"column":36,"index":6774},"line":216,"code":"  it('head should show latest commit', () => {\n    return common.get(req, '/head', {\n      path: testDir\n    }).then(res => {\n      expect(res).to.be.a('array');\n      expect(res.length).to.be(1);\n      expect(res[0].message.indexOf(commitMessage)).to.be(0);\n      expect(res[0].authorName).to.be(gitConfig['user.name']);\n      expect(res[0].authorEmail).to.be(gitConfig['user.email']);\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"modifying a test file should work","suites":["git-api"],"updatePoint":{"line":227,"column":39,"index":7178},"line":227,"code":"  it('modifying a test file should work', () => {\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"modified file should show up in status","suites":["git-api"],"updatePoint":{"line":232,"column":44,"index":7341},"line":232,"code":"  it('modified file should show up in status', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile]).to.eql({\n        displayName: testFile,\n        fileName: testFile,\n        oldFileName: testFile,\n        isNew: false,\n        staged: false,\n        removed: false,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '1',\n        deletions: '1'\n      });\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"discarding changes should work","suites":["git-api"],"updatePoint":{"line":252,"column":36,"index":7867},"line":252,"code":"  it('discarding changes should work', () => {\n    return common.post(req, '/discardchanges', {\n      path: testDir,\n      file: testFile\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"modifying a test file should work part deux","suites":["git-api"],"updatePoint":{"line":258,"column":49,"index":8032},"line":258,"code":"  it('modifying a test file should work part deux', () => {\n    return common.post(req, '/testing/changefile', {\n      file: path.join(testDir, testFile)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"commit ammend should work","suites":["git-api"],"updatePoint":{"line":263,"column":31,"index":8182},"line":263,"code":"  it('commit ammend should work', () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: commitMessage,\n      files: [{\n        name: testFile\n      }],\n      amend: true\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"amend should not produce additional log-entry","suites":["git-api"],"updatePoint":{"line":273,"column":51,"index":8417},"line":273,"code":"  it('amend should not produce additional log-entry', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => expect(res.nodes.length).to.be(1));\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"creating a multi word test file should work","suites":["git-api"],"updatePoint":{"line":281,"column":49,"index":8615},"line":281,"code":"  it('creating a multi word test file should work', () => {\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile2)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should list the new file","suites":["git-api"],"updatePoint":{"line":286,"column":37,"index":8772},"line":286,"code":"  it('status should list the new file', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile2]).to.eql({\n        displayName: testFile2,\n        fileName: testFile2,\n        oldFileName: testFile2,\n        isNew: true,\n        staged: false,\n        removed: false,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '-',\n        deletions: '-'\n      });\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"discarding the new file should work","suites":["git-api"],"updatePoint":{"line":306,"column":41,"index":9306},"line":306,"code":"  it('discarding the new file should work', done => {\n    req.post(`${restGit.pathPrefix}/discardchanges`).send({\n      path: testDir,\n      file: testFile2\n    }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200).end(done);\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"creating test sub dir should work","suites":["git-api"],"updatePoint":{"line":315,"column":39,"index":9580},"line":315,"code":"  it('creating test sub dir should work', () => {\n    return common.post(req, '/createdir', {\n      dir: path.join(testDir, testSubDir)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"creating test multi layer dir should work","suites":["git-api"],"updatePoint":{"line":320,"column":47,"index":9738},"line":320,"code":"  it('creating test multi layer dir should work', () => {\n    return common.post(req, '/createdir', {\n      dir: path.join(testDir, `${testSubDir}test/moretest/andmore`)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"creating a test file in sub dir should work","suites":["git-api"],"updatePoint":{"line":328,"column":49,"index":9941},"line":328,"code":"  it('creating a test file in sub dir should work', () => {\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile3)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should list the new file once again","suites":["git-api"],"updatePoint":{"line":333,"column":48,"index":10109},"line":333,"code":"  it('status should list the new file once again', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile3]).to.eql({\n        displayName: testFile3,\n        fileName: testFile3,\n        oldFileName: testFile3,\n        isNew: true,\n        staged: false,\n        removed: false,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '-',\n        deletions: '-'\n      });\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"commit should succeed with file in sub dir","suites":["git-api"],"updatePoint":{"line":356,"column":48,"index":10672},"line":356,"code":"  it('commit should succeed with file in sub dir', () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: commitMessage3,\n      files: [{\n        name: testFile3\n      }]\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"log should show last commit","suites":["git-api"],"updatePoint":{"line":365,"column":33,"index":10872},"line":365,"code":"  it('log should show last commit', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(2);\n      const HEAD = res.nodes[0];\n      expect(HEAD.message.indexOf(commitMessage3)).to.be(0);\n      expect(HEAD.authorDate).to.be.a('string');\n      expect(HEAD.authorName).to.be(gitConfig['user.name']);\n      expect(HEAD.authorEmail).to.be(gitConfig['user.email']);\n      expect(HEAD.commitDate).to.be.a('string');\n      expect(HEAD.committerName).to.be(gitConfig['user.name']);\n      expect(HEAD.committerEmail).to.be(gitConfig['user.email']);\n      expect(HEAD.sha1).to.be.ok();\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"removing a test file should work","suites":["git-api"],"updatePoint":{"line":382,"column":38,"index":11581},"line":382,"code":"  it('removing a test file should work', () => {\n    return common.post(req, '/testing/removefile', {\n      file: path.join(testDir, testFile)\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should list the removed file","suites":["git-api"],"updatePoint":{"line":387,"column":41,"index":11741},"line":387,"code":"  it('status should list the removed file', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile]).to.eql({\n        displayName: testFile,\n        fileName: testFile,\n        oldFileName: testFile,\n        isNew: false,\n        staged: false,\n        removed: true,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '0',\n        deletions: '2'\n      });\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"commit on removed file should work","suites":["git-api"],"updatePoint":{"line":410,"column":40,"index":12292},"line":410,"code":"  it('commit on removed file should work', () => {\n    return common.post(req, '/commit', {\n      path: testDir,\n      message: commitMessage4,\n      files: [{\n        name: testFile\n      }]\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should list nothing","suites":["git-api"],"updatePoint":{"line":419,"column":32,"index":12490},"line":419,"code":"  it('status should list nothing', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => expect(Object.keys(res.files).length).to.be(0));\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"renaming a file should work","suites":["git-api"],"updatePoint":{"line":427,"column":33,"index":12685},"line":427,"code":"  it('renaming a file should work', () => {\n    return common.post(req, '/testing/git', {\n      path: testDir,\n      command: ['mv', testFile3, testFile4]\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"status should list the renamed file","suites":["git-api"],"updatePoint":{"line":433,"column":41,"index":12862},"line":433,"code":"  it('status should list the renamed file', () => {\n    return common.get(req, '/status', {\n      path: testDir\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(1);\n      expect(res.files[testFile4]).to.eql({\n        displayName: `${testFile3} → ${testFile4}`,\n        fileName: testFile4,\n        oldFileName: testFile3,\n        isNew: false,\n        staged: false,\n        removed: false,\n        conflict: false,\n        renamed: true,\n        type: 'text',\n        additions: '0',\n        deletions: '0'\n      });\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"log with limit should only return specified number of items","suites":["git-api"],"updatePoint":{"line":453,"column":65,"index":13440},"line":453,"code":"  it('log with limit should only return specified number of items', () => {\n    return common.get(req, '/gitlog', {\n      path: testDir,\n      limit: 1\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(1);\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"get the baserepopath without base repo should work","suites":["git-api"],"updatePoint":{"line":462,"column":56,"index":13701},"line":462,"code":"  it('get the baserepopath without base repo should work', done => {\n    const baseRepoPathTestDir = path.join(testDir, 'depth1', 'depth2');\n    mkdirp(baseRepoPathTestDir).then(() => {\n      return common.get(req, '/baserepopath', {\n        path: baseRepoPathTestDir\n      }).then(res => {\n        // Some oses uses symlink and path will be different as git will return resolved symlink\n        expect(res.path).to.contain(testDir);\n        done();\n      });\n    });\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"test gitignore api endpoint","suites":["git-api"],"updatePoint":{"line":474,"column":33,"index":14152},"line":474,"code":"  it('test gitignore api endpoint', () => {\n    return common.put(req, '/gitignore', {\n      path: testDir,\n      data: 'abc'\n    }).then(() => common.get(req, '/gitignore', {\n      path: testDir\n    })).then(res => expect(res.content).to.be('abc')).then(() => common.put(req, '/gitignore', {\n      path: testDir,\n      data: ''\n    })).then(() => common.get(req, '/gitignore', {\n      path: testDir\n    })).then(res => expect(res.content).to.be(''));\n  });","file":"spec.git-api.js","skipped":false,"dir":"test"},{"name":"creating test dir should work","suites":["git-api: test patch api"],"updatePoint":{"line":92,"column":35,"index":2455},"line":92,"code":"  it('creating test dir should work', () => {\n    return common.post(req, '/testing/createtempdir').then(res => {\n      expect(res.path).to.be.ok();\n      testDir = res.path;\n    });\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"init test dir should work","suites":["git-api: test patch api"],"updatePoint":{"line":98,"column":31,"index":2640},"line":98,"code":"  it('init test dir should work', () => {\n    return common.post(req, '/init', {\n      path: testDir,\n      bare: false\n    });\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"Create a file with 10 lines, commit, change each 10 lines, and commit patch with all selected.","suites":["git-api: test patch api"],"updatePoint":{"line":109,"column":100,"index":3019},"line":109,"code":"  it('Create a file with 10 lines, commit, change each 10 lines, and commit patch with all selected.', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    const patchLineList = [];\n    for (let n = 0; n < testFileSize * 2; n++) {\n      patchLineList.push(true);\n    }\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"Create a file with 10 lines, commit, change each 10 lines, and commit patch with none selected.","suites":["git-api: test patch api"],"updatePoint":{"line":122,"column":101,"index":3526},"line":122,"code":"  it('Create a file with 10 lines, commit, change each 10 lines, and commit patch with none selected.', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const patchLineList = getPatchLineList(testFileSize * 2);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"10 lines, 10 edit, 0~2 selected","suites":["git-api: test patch api"],"updatePoint":{"line":132,"column":37,"index":3914},"line":132,"code":"  it('10 lines, 10 edit, 0~2 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const patchLineList = getPatchLineList(testFileSize * 2, [0, 1, 2]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"10 lines, 10 edit, 18~19 selected","suites":["git-api: test patch api"],"updatePoint":{"line":142,"column":39,"index":4315},"line":142,"code":"  it('10 lines, 10 edit, 18~19 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const patchLineList = getPatchLineList(testFileSize * 2, [18, 19]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"10 lines, 10 edit, 0~2 and 18~19 selected","suites":["git-api: test patch api"],"updatePoint":{"line":152,"column":47,"index":4723},"line":152,"code":"  it('10 lines, 10 edit, 0~2 and 18~19 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const patchLineList = getPatchLineList(testFileSize * 2, [0, 1, 2, 18, 19]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"10 lines, 10 edit, 5~7 selected","suites":["git-api: test patch api"],"updatePoint":{"line":162,"column":37,"index":5130},"line":162,"code":"  it('10 lines, 10 edit, 5~7 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const patchLineList = getPatchLineList(testFileSize * 2, [5, 6, 7]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 30 edit, 0~2 and 28 ~ 29 selected","suites":["git-api: test patch api"],"updatePoint":{"line":172,"column":49,"index":5541},"line":172,"code":"  it('30 lines, 30 edit, 0~2 and 28 ~ 29 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const patchLineList = getPatchLineList(testFileSize * 2, [0, 1, 2, 28, 29]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 30 edit, 0~2, 28~29, 58~59 selected","suites":["git-api: test patch api"],"updatePoint":{"line":182,"column":51,"index":5962},"line":182,"code":"  it('30 lines, 30 edit, 0~2, 28~29, 58~59 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const patchLineList = getPatchLineList(testFileSize * 2, [0, 1, 2, 28, 29, 57, 58, 59]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 30 edit, 6~8, 16~18 and 58 selected","suites":["git-api: test patch api"],"updatePoint":{"line":192,"column":51,"index":6395},"line":192,"code":"  it('30 lines, 30 edit, 6~8, 16~18 and 58 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const patchLineList = getPatchLineList(testFileSize * 2, [6, 7, 8, 16, 17, 18, 58]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 30 edit, 12~15 and 17~19 selected","suites":["git-api: test patch api"],"updatePoint":{"line":202,"column":49,"index":6822},"line":202,"code":"  it('30 lines, 30 edit, 12~15 and 17~19 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const patchLineList = getPatchLineList(testFileSize * 2, [12, 13, 14, 15, 17, 18, 19]);\n    const contentsToPatch = getContentsToPatch(testFileSize);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 12~19 edit, 0~7, 10~16 selected ","suites":["git-api: test patch api"],"updatePoint":{"line":212,"column":48,"index":7251},"line":212,"code":"  it('30 lines, 12~19 edit, 0~7, 10~16 selected ', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const linesToChange = [12, 13, 14, 15, 16, 17, 18, 19];\n    const contentsToPatch = getContentsToPatch(testFileSize, linesToChange);\n    const patchLineList = getPatchLineList(linesToChange.length * 2, [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16]);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 2~4, 12~14, 22~24 edit, all selected","suites":["git-api: test patch api"],"updatePoint":{"line":228,"column":52,"index":7964},"line":228,"code":"  it('30 lines, 2~4, 12~14, 22~24 edit, all selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const linesToChange = [2, 3, 4, 12, 13, 14, 22, 23, 24];\n    const contentsToPatch = getContentsToPatch(testFileSize, linesToChange);\n    const patchLineList = getPatchLineList(linesToChange.length * 2, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 2~4, 12~14, 22~24 edit, 0~5, 12~17 selected","suites":["git-api: test patch api"],"updatePoint":{"line":239,"column":59,"index":8522},"line":239,"code":"  it('30 lines, 2~4, 12~14, 22~24 edit, 0~5, 12~17 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const linesToChange = [2, 3, 4, 12, 13, 14, 22, 23, 24];\n    const contentsToPatch = getContentsToPatch(testFileSize, linesToChange);\n    const patchLineList = getPatchLineList(linesToChange.length * 2, [0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 16, 17]);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 2~4, 12~14, 22~24 edit, 6~11 selected","suites":["git-api: test patch api"],"updatePoint":{"line":250,"column":53,"index":9054},"line":250,"code":"  it('30 lines, 2~4, 12~14, 22~24 edit, 6~11 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const linesToChange = [2, 3, 4, 12, 13, 14, 22, 23, 24];\n    const contentsToPatch = getContentsToPatch(testFileSize, linesToChange);\n    const patchLineList = getPatchLineList(linesToChange.length * 2, [6, 7, 8, 9, 10, 11]);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 2~4, 12~14, 22~24 edit, none selected","suites":["git-api: test patch api"],"updatePoint":{"line":261,"column":53,"index":9564},"line":261,"code":"  it('30 lines, 2~4, 12~14, 22~24 edit, none selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const linesToChange = [2, 3, 4, 12, 13, 14, 22, 23, 24];\n    const contentsToPatch = getContentsToPatch(testFileSize, linesToChange);\n    const patchLineList = getPatchLineList(linesToChange.length * 2);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"30 lines, 12~14, 16~18 edit, 6~11 selected","suites":["git-api: test patch api"],"updatePoint":{"line":272,"column":48,"index":10047},"line":272,"code":"  it('30 lines, 12~14, 16~18 edit, 6~11 selected', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 30;\n    const linesToChange = [12, 13, 14, 22, 23, 24];\n    const contentsToPatch = getContentsToPatch(testFileSize, linesToChange);\n    const patchLineList = getPatchLineList(linesToChange.length * 2, [6, 7, 8, 9, 10, 11]);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"10 lines, add 5 lines, select 0~1, 5","suites":["git-api: test patch api"],"updatePoint":{"line":285,"column":42,"index":10586},"line":285,"code":"  it('10 lines, add 5 lines, select 0~1, 5', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const linesToAdd = 5;\n    const contentsToPatch = getContentsToPatchWithAdd(testFileSize, linesToAdd);\n    const patchLineList = getPatchLineList(linesToAdd, [0, 1, 5]);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"10 lines, delete 5 lines, select 0~1, 5","suites":["git-api: test patch api"],"updatePoint":{"line":298,"column":45,"index":11083},"line":298,"code":"  it('10 lines, delete 5 lines, select 0~1, 5', () => {\n    const testFileName = md5(Date.now());\n    const testFileSize = 10;\n    const linesToDelete = 5;\n    const contentsToPatch = getContentsToPatchWithDelete(testFileSize, linesToDelete);\n    const patchLineList = getPatchLineList(linesToDelete, [0, 1, 5]);\n    return testPatch(req, testDir, testFileName, contentsToPatch, [{\n      name: testFileName,\n      patchLineList: patchLineList\n    }]);\n  });","file":"spec.git-api.patch.js","skipped":false,"dir":"test"},{"name":"init a bare \"remote\" test dir should work","suites":["git-api remote"],"updatePoint":{"line":30,"column":47,"index":1010},"line":30,"code":"  it('init a bare \"remote\" test dir should work', () => {\n    return common.post(req, '/init', {\n      path: testDirRemote,\n      bare: true\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"remotes in no-remotes-repo should be zero","suites":["git-api remote"],"updatePoint":{"line":36,"column":47,"index":1165},"line":36,"code":"  it('remotes in no-remotes-repo should be zero', () => {\n    return common.get(req, '/remotes', {\n      path: testDirRemote\n    }).then(res => expect(res.length).to.be(0));\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"cloning \"remote\" to \"local1\" should work","suites":["git-api remote"],"updatePoint":{"line":41,"column":46,"index":1344},"line":41,"code":"  it('cloning \"remote\" to \"local1\" should work', () => {\n    return common.post(req, '/clone', {\n      path: testDirLocal1,\n      url: testDirRemote,\n      destinationDir: '.'\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"remotes in cloned-repo should be one","suites":["git-api remote"],"updatePoint":{"line":48,"column":42,"index":1530},"line":48,"code":"  it('remotes in cloned-repo should be one', () => {\n    return common.get(req, '/remotes', {\n      path: testDirLocal1\n    }).then(res => {\n      expect(res.length).to.be(1);\n      expect(res[0]).to.be('origin');\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"remote/origin in cloned-repo should work","suites":["git-api remote"],"updatePoint":{"line":56,"column":46,"index":1762},"line":56,"code":"  it('remote/origin in cloned-repo should work', () => {\n    return common.get(req, '/remotes/origin', {\n      path: testDirLocal1\n    }).then(res => expect(res.address).to.be(testDirRemote));\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"creating a commit in \"local1\" repo should work","suites":["git-api remote"],"updatePoint":{"line":61,"column":52,"index":1967},"line":61,"code":"  it('creating a commit in \"local1\" repo should work', () => {\n    const testFile = path.join(testDirLocal1, 'testfile1.txt');\n    return common.post(req, '/testing/createfile', {\n      file: testFile\n    }).then(() => {\n      return common.post(req, '/commit', {\n        path: testDirLocal1,\n        message: 'Init',\n        files: [{\n          name: testFile\n        }]\n      });\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"log in \"local1\" should show the init commit","suites":["git-api remote"],"updatePoint":{"line":75,"column":49,"index":2360},"line":75,"code":"  it('log in \"local1\" should show the init commit', () => {\n    return common.get(req, '/gitlog', {\n      path: testDirLocal1\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(1);\n      const init = res.nodes[0];\n      expect(init.message.indexOf('Init')).to.be(0);\n      expect(init.refs).to.contain('HEAD');\n      expect(init.refs).to.contain('refs/heads/master');\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"pushing form \"local1\" to \"remote\" should work","suites":["git-api remote"],"updatePoint":{"line":87,"column":51,"index":2793},"line":87,"code":"  it('pushing form \"local1\" to \"remote\" should work', () => {\n    return common.post(req, '/push', {\n      path: testDirLocal1,\n      remote: 'origin'\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"cloning \"remote\" to \"local2\" should work","suites":["git-api remote"],"updatePoint":{"line":93,"column":46,"index":2953},"line":93,"code":"  it('cloning \"remote\" to \"local2\" should work', () => {\n    return common.post(req, '/clone', {\n      path: testDirLocal2,\n      url: testDirRemote,\n      destinationDir: '.',\n      isRecursiveSubmodule: true\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"log in \"local2\" should show the init commit","suites":["git-api remote"],"updatePoint":{"line":101,"column":49,"index":3180},"line":101,"code":"  it('log in \"local2\" should show the init commit', () => {\n    common.get(req, '/gitlog', {\n      path: testDirLocal2\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(1);\n      const init = res.nodes[0];\n      expect(init.message.indexOf('Init')).to.be(0);\n      expect(init.refs).to.contain('HEAD');\n      expect(init.refs).to.contain('refs/heads/master');\n      expect(init.refs).to.contain('refs/remotes/origin/master');\n      expect(init.refs).to.contain('refs/remotes/origin/HEAD');\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"creating and pushing a commit in \"local1\" repo should work","suites":["git-api remote"],"updatePoint":{"line":115,"column":64,"index":3749},"line":115,"code":"  it('creating and pushing a commit in \"local1\" repo should work', () => {\n    const testFile = path.join(testDirLocal1, 'testfile2.txt');\n    return common.post(req, '/testing/createfile', {\n      file: testFile\n    }).then(() => new Promise(resolve => setTimeout(resolve, 500))).then(() => common.post(req, '/commit', {\n      path: testDirLocal1,\n      message: 'Commit2',\n      files: [{\n        name: testFile\n      }]\n    })).then(() => common.post(req, '/push', {\n      path: testDirLocal1,\n      remote: 'origin'\n    }));\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"fetching in \"local2\" should work","suites":["git-api remote"],"updatePoint":{"line":130,"column":38,"index":4258},"line":130,"code":"  it('fetching in \"local2\" should work', () => {\n    return common.post(req, '/fetch', {\n      path: testDirLocal2,\n      remote: 'origin'\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"log in \"local2\" should show the branch as one behind","suites":["git-api remote"],"updatePoint":{"line":136,"column":58,"index":4431},"line":136,"code":"  it('log in \"local2\" should show the branch as one behind', () => {\n    common.get(req, '/gitlog', {\n      path: testDirLocal2\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(2);\n      const init = _.find(res.nodes, node => node.message.indexOf('Init') == 0);\n      const commit2 = _.find(res.nodes, node => node.message.indexOf('Commit2') == 0);\n      expect(init).to.be.ok();\n      expect(commit2).to.be.ok();\n      expect(init.refs).to.contain('HEAD');\n      expect(init.refs).to.contain('refs/heads/master');\n      expect(commit2.refs).to.contain('refs/remotes/origin/master');\n      expect(commit2.refs).to.contain('refs/remotes/origin/HEAD');\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"rebasing local master onto remote master should work in \"local2\"","suites":["git-api remote"],"updatePoint":{"line":152,"column":70,"index":5159},"line":152,"code":"  it('rebasing local master onto remote master should work in \"local2\"', () => {\n    return common.post(req, '/rebase', {\n      path: testDirLocal2,\n      onto: 'origin/master'\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"log in \"local2\" should show the branch as in sync","suites":["git-api remote"],"updatePoint":{"line":158,"column":55,"index":5335},"line":158,"code":"  it('log in \"local2\" should show the branch as in sync', () => {\n    common.get(req, '/gitlog', {\n      path: testDirLocal2\n    }).then(res => {\n      expect(res.nodes).to.be.a('array');\n      expect(res.nodes.length).to.be(2);\n      const init = _.find(res.nodes, node => node.message.indexOf('Init') == 0);\n      const commit2 = _.find(res.nodes, node => node.message.indexOf('Commit2') == 0);\n      expect(init).to.be.ok();\n      expect(commit2).to.be.ok();\n      expect(init.refs).to.eql([]);\n      expect(commit2.refs).to.contain('HEAD');\n      expect(commit2.refs).to.contain('refs/heads/master');\n      expect(commit2.refs).to.contain('refs/remotes/origin/master');\n      expect(commit2.refs).to.contain('refs/remotes/origin/HEAD');\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"creating a commit in \"local2\" repo should work","suites":["git-api remote"],"updatePoint":{"line":175,"column":52,"index":6087},"line":175,"code":"  it('creating a commit in \"local2\" repo should work', () => {\n    const testFile = path.join(testDirLocal2, 'testfile3.txt');\n    return common.post(req, '/testing/createfile', {\n      file: testFile\n    }).then(() => new Promise(resolve => setTimeout(resolve, 500))).then(() => common.post(req, '/commit', {\n      path: testDirLocal2,\n      message: 'Commit3',\n      files: [{\n        name: testFile\n      }]\n    }));\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"resetting local master to remote master should work in \"local2\"","suites":["git-api remote"],"updatePoint":{"line":187,"column":69,"index":6530},"line":187,"code":"  it('resetting local master to remote master should work in \"local2\"', () => {\n    return common.post(req, '/reset', {\n      path: testDirLocal2,\n      to: 'origin/master',\n      mode: 'hard'\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"log in \"local2\" should show the branch as in sync","suites":["git-api remote"],"updatePoint":{"line":194,"column":55,"index":6723},"line":194,"code":"  it('log in \"local2\" should show the branch as in sync', () => {\n    return common.get(req, '/gitlog', {\n      path: testDirLocal2\n    }, res => {\n      expect(res.nodes.length).to.be(2);\n      const init = _.find(res.nodes, node => node.message.indexOf('Init') == 0);\n      const commit2 = _.find(res.nodes, node => node.message.indexOf('Commit2') == 0);\n      expect(init.refs).to.eql([]);\n      expect(commit2.refs).to.contain('HEAD');\n      expect(commit2.refs).to.contain('refs/heads/master');\n      expect(commit2.refs).to.contain('refs/remotes/origin/master');\n      expect(commit2.refs).to.contain('refs/remotes/origin/HEAD');\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"status should show nothing","suites":["git-api remote"],"updatePoint":{"line":208,"column":32,"index":7350},"line":208,"code":"  it('status should show nothing', () => {\n    return common.get(req, '/status', {\n      path: testDirLocal2\n    }).then(res => expect(Object.keys(res.files).length).to.be(0));\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"should be possible to create a tag in \"local2\"","suites":["git-api remote"],"updatePoint":{"line":213,"column":52,"index":7553},"line":213,"code":"  it('should be possible to create a tag in \"local2\"', () => {\n    return common.post(req, '/tags', {\n      path: testDirLocal2,\n      name: 'v1.0'\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"should be possible to push a tag from \"local2\"","suites":["git-api remote"],"updatePoint":{"line":219,"column":52,"index":7715},"line":219,"code":"  it('should be possible to push a tag from \"local2\"', () => {\n    return common.post(req, '/push', {\n      path: testDirLocal2,\n      remote: 'origin',\n      refSpec: 'v1.0',\n      remoteBranch: 'v1.0'\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"log in \"local2\" should show the local tag","suites":["git-api remote"],"updatePoint":{"line":227,"column":47,"index":7927},"line":227,"code":"  it('log in \"local2\" should show the local tag', () => {\n    return common.get(req, '/gitlog', {\n      path: testDirLocal2\n    }).then(res => {\n      const commit2 = _.find(res.nodes, node => node.message.indexOf('Commit2') == 0);\n      expect(commit2.refs).to.contain('tag: refs/tags/v1.0');\n    });\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"remote tags in \"local2\" should show the remote tag","suites":["git-api remote"],"updatePoint":{"line":235,"column":56,"index":8244},"line":235,"code":"  it('remote tags in \"local2\" should show the remote tag', () => {\n    return common.get(req, '/remote/tags', {\n      path: testDirLocal2,\n      remote: 'origin'\n    }).then(res => expect(res.map(tag => tag.name)).to.contain('refs/tags/v1.0^{}'));\n  });","file":"spec.git-api.remote.js","skipped":false,"dir":"test"},{"name":"establish root branch","suites":["git-api conflict rebase"],"updatePoint":{"line":27,"column":27,"index":733},"line":27,"code":"  it('establish root branch', () => {\n    return common.post(req, '/branches', {\n      path: testDir,\n      name: rootBranch,\n      startPoint: 'master'\n    });\n  });","file":"spec.git-api.squash.js","skipped":false,"dir":"test"},{"name":"create some commits","suites":["git-api conflict rebase"],"updatePoint":{"line":34,"column":25,"index":898},"line":34,"code":"  it('create some commits', () => {\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile1)\n    }).then(() => common.post(req, '/commit', {\n      path: testDir,\n      message: `a commit for ${testFile1}`,\n      files: [{\n        name: testFile1\n      }]\n    })).then(() => common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile2)\n    })).then(() => common.post(req, '/commit', {\n      path: testDir,\n      message: `a commit for ${testFile2}`,\n      files: [{\n        name: testFile2\n      }]\n    }));\n  });","file":"spec.git-api.squash.js","skipped":false,"dir":"test"},{"name":"checkout master","suites":["git-api conflict rebase"],"updatePoint":{"line":53,"column":21,"index":1468},"line":53,"code":"  it('checkout master', () => {\n    return common.post(req, '/checkout', {\n      path: testDir,\n      name: rootBranch\n    });\n  });","file":"spec.git-api.squash.js","skipped":false,"dir":"test"},{"name":"squash 2 commits to 1","suites":["git-api conflict rebase"],"updatePoint":{"line":59,"column":27,"index":1607},"line":59,"code":"  it('squash 2 commits to 1', () => {\n    return common.post(req, '/squash', {\n      path: testDir,\n      target: 'master'\n    }).then(() => common.get(req, '/status', {\n      path: testDir\n    })).then(res => expect(Object.keys(res.files).length).to.be(2));\n  });","file":"spec.git-api.squash.js","skipped":false,"dir":"test"},{"name":"discard all","suites":["git-api conflict rebase"],"updatePoint":{"line":67,"column":17,"index":1862},"line":67,"code":"  it('discard all', () => {\n    return common.post(req, '/discardchanges', {\n      path: testDir,\n      all: true\n    }).then(() => common.get(req, '/status', {\n      path: testDir\n    })).then(res => expect(Object.keys(res.files).length).to.be(0));\n  });","file":"spec.git-api.squash.js","skipped":false,"dir":"test"},{"name":"making conflicting commit","suites":["git-api conflict rebase"],"updatePoint":{"line":75,"column":31,"index":2132},"line":75,"code":"  it('making conflicting commit', () => {\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDir, testFile1)\n    }).then(() => common.post(req, '/commit', {\n      path: testDir,\n      message: `a 2nd commit for ${testFile1}`,\n      files: [{\n        name: testFile1\n      }]\n    }));\n  });","file":"spec.git-api.squash.js","skipped":false,"dir":"test"},{"name":"squash 2 commits to 1 with conflict","suites":["git-api conflict rebase"],"updatePoint":{"line":86,"column":41,"index":2460},"line":86,"code":"  it('squash 2 commits to 1 with conflict', () => {\n    return common.post(req, '/squash', {\n      path: testDir,\n      target: 'master'\n    }).then(() => common.get(req, '/status', {\n      path: testDir\n    })).then(res => {\n      expect(res.inConflict).to.be(true);\n      expect(Object.keys(res.files).length).to.be(2);\n    });\n  });","file":"spec.git-api.squash.js","skipped":false,"dir":"test"},{"name":"should be possible to stash","suites":["git-api conflict rebase"],"updatePoint":{"line":27,"column":33,"index":782},"line":27,"code":"  it('should be possible to stash', () => common.post(req, '/stashes', {\n    path: testDir\n  }));","file":"spec.git-api.stash.js","skipped":false,"dir":"test"},{"name":"stashes should list the stashed item","suites":["git-api conflict rebase"],"updatePoint":{"line":30,"column":42,"index":889},"line":30,"code":"  it('stashes should list the stashed item', () => {\n    return common.get(req, '/stashes', {\n      path: testDir\n    }).then(res => {\n      expect(res.length).to.be(1);\n      expect(res[0].reflogId).to.be('0');\n      expect(res[0].reflogName).to.be('stash@{0}');\n    });\n  });","file":"spec.git-api.stash.js","skipped":false,"dir":"test"},{"name":"should be possible to drop stash","suites":["git-api conflict rebase"],"updatePoint":{"line":39,"column":38,"index":1163},"line":39,"code":"  it('should be possible to drop stash', () => {\n    return common.delete(req, '/stashes/0', {\n      path: testDir\n    });\n  });","file":"spec.git-api.stash.js","skipped":false,"dir":"test"},{"name":"submodule add should work","suites":["git-api submodule"],"updatePoint":{"line":27,"column":31,"index":784},"line":27,"code":"  it('submodule add should work', () => {\n    return common.post(req, '/submodules/add', {\n      path: testDirMain,\n      submodulePath: submodulePath,\n      submoduleUrl: testDirSecondary\n    });\n  });","file":"spec.git-api.submodule.js","skipped":false,"dir":"test"},{"name":"submodule should show up in status","suites":["git-api submodule"],"updatePoint":{"line":34,"column":40,"index":996},"line":34,"code":"  it('submodule should show up in status', () => {\n    return common.get(req, '/status', {\n      path: testDirMain\n    }).then(res => {\n      expect(Object.keys(res.files).length).to.be(2);\n      expect(res.files[submodulePath]).to.eql({\n        displayName: submodulePath,\n        fileName: submodulePath,\n        oldFileName: submodulePath,\n        isNew: true,\n        staged: true,\n        removed: false,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '1',\n        deletions: '0'\n      });\n      expect(res.files['.gitmodules']).to.eql({\n        displayName: '.gitmodules',\n        fileName: '.gitmodules',\n        oldFileName: '.gitmodules',\n        isNew: true,\n        staged: true,\n        removed: false,\n        conflict: false,\n        renamed: false,\n        type: 'text',\n        additions: '3',\n        deletions: '0'\n      });\n    });\n  });","file":"spec.git-api.submodule.js","skipped":false,"dir":"test"},{"name":"commit should succeed","suites":["git-api submodule"],"updatePoint":{"line":67,"column":27,"index":1883},"line":67,"code":"  it('commit should succeed', () => {\n    return common.post(req, '/commit', {\n      path: testDirMain,\n      message: 'Add submodule',\n      files: [{\n        name: submodulePath\n      }, {\n        name: '.gitmodules'\n      }]\n    });\n  });","file":"spec.git-api.submodule.js","skipped":false,"dir":"test"},{"name":"status should be empty after commit","suites":["git-api submodule"],"updatePoint":{"line":78,"column":41,"index":2139},"line":78,"code":"  it('status should be empty after commit', () => {\n    return common.get(req, '/status', {\n      path: testDirMain\n    }).then(res => expect(Object.keys(res.files).length).to.be(0));\n  });","file":"spec.git-api.submodule.js","skipped":false,"dir":"test"},{"name":"creating a test file in sub dir should work","suites":["git-api submodule"],"updatePoint":{"line":83,"column":49,"index":2337},"line":83,"code":"  it('creating a test file in sub dir should work', () => {\n    const testFile = path.join(submodulePath, 'testy.txt');\n    return common.post(req, '/testing/createfile', {\n      file: path.join(testDirMain, testFile)\n    });\n  });","file":"spec.git-api.submodule.js","skipped":false,"dir":"test"},{"name":"submodule should show up in status when it's dirty","suites":["git-api submodule"],"line":91,"code":"  it.skip(\"submodule should show up in status when it's dirty\", () => {","file":"spec.git-api.submodule.js","skipped":true,"dir":"test"},{"name":"diff on submodule should work","suites":["git-api submodule"],"line":113,"code":"  it.skip('diff on submodule should work', () => {","file":"spec.git-api.submodule.js","skipped":true,"dir":"test"},{"name":"should be possible to parse stashed show","suites":["git-parser stash show"],"updatePoint":{"line":6,"column":46,"index":241},"line":6,"code":"  it('should be possible to parse stashed show', () => {\n    const text = ' New Text Document (2).txt | 5 +++++\\n 1 file changed, 5 insertions(+)\\n';\n    const res = gitParser.parseGitStashShow(text);\n    expect(res).to.be.an('array');\n    expect(res.length).to.be(1);\n    expect(res[0]).to.eql({\n      filename: 'New Text Document (2).txt'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"all diff selected","suites":["git-parser parseDiffResult"],"updatePoint":{"line":17,"column":23,"index":624},"line":17,"code":"  it('all diff selected', () => {\n    const gitDiff = dedent`\n      diff --git a/package.json b/package.json\n      index f71e0064..08964575 100644\n      --- a/package.json\n      +++ b/package.json\n      @@ -87,9 +87,10 @@\n        \"grunt-mocha-test\": \"~0.13.3\",\n        \"grunt-plato\": \"~1.4.0\",\n        \"grunt-release\": \"~0.14.0\",\n      - \"istanbul\": \"~0.4.5\",\n      + \"istanbul\": \"^0.4.5\",\n        \"mocha\": \"~5.2.0\",\n        \"nightmare\": \"~3.0.1\",\n      + \"nyc\": \"^13.1.0\",\n        \"supertest\": \"~3.3.0\"\n    `;\n    expect(gitParser.parsePatchDiffResult([true, true, true], gitDiff)).to.eql(dedent`\n      diff --git a/package.json b/package.json\n      index f71e0064..08964575 100644\n      --- a/package.json\n      +++ b/package.json\n      @@ -87,9 +87,10 @@\n        \"grunt-mocha-test\": \"~0.13.3\",\n        \"grunt-plato\": \"~1.4.0\",\n        \"grunt-release\": \"~0.14.0\",\n      - \"istanbul\": \"~0.4.5\",\n      + \"istanbul\": \"^0.4.5\",\n        \"mocha\": \"~5.2.0\",\n        \"nightmare\": \"~3.0.1\",\n      + \"nyc\": \"^13.1.0\",\n        \"supertest\": \"~3.3.0\"\n    `);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"no diff selected","suites":["git-parser parseDiffResult"],"updatePoint":{"line":51,"column":22,"index":1677},"line":51,"code":"  it('no diff selected', () => {\n    const gitDiff = dedent`\n      diff --git a/package.json b/package.json\n      index f71e0064..08964575 100644\n      --- a/package.json\n      +++ b/package.json\n      @@ -87,9 +87,10 @@\n        \"grunt-mocha-test\": \"~0.13.3\",\n        \"grunt-plato\": \"~1.4.0\",\n        \"grunt-release\": \"~0.14.0\",\n      - \"istanbul\": \"~0.4.5\",\n      + \"istanbul\": \"^0.4.5\",\n        \"mocha\": \"~5.2.0\",\n        \"nightmare\": \"~3.0.1\",\n      + \"nyc\": \"^13.1.0\",\n        \"supertest\": \"~3.3.0\"\n    `;\n    expect(gitParser.parsePatchDiffResult([false, false, false], gitDiff)).to.eql(null);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"one +- diff selected","suites":["git-parser parseDiffResult"],"updatePoint":{"line":70,"column":26,"index":2286},"line":70,"code":"  it('one +- diff selected', () => {\n    const gitDiff = dedent`\n      diff --git a/package.json b/package.json\n      index f71e0064..08964575 100644\n      --- a/package.json\n      +++ b/package.json\n      @@ -87,9 +87,10 @@\n      \t\"grunt-mocha-test\": \"~0.13.3\",\n      \t\"grunt-plato\": \"~1.4.0\",\n      \t\"grunt-release\": \"~0.14.0\",\n      -\t\"istanbul\": \"~0.4.5\",\n      +\t\"istanbul\": \"^0.4.5\",\n      \t\"mocha\": \"~5.2.0\",\n      \t\"nightmare\": \"~3.0.1\",\n      +\t\"nyc\": \"^13.1.0\",\n      \t\"supertest\": \"~3.3.0\"\n    `;\n    expect(gitParser.parsePatchDiffResult([true, true, false], gitDiff)).to.eql(dedent`\n      diff --git a/package.json b/package.json\n      index f71e0064..08964575 100644\n      --- a/package.json\n      +++ b/package.json\n      @@ -87,9 +87,9 @@\n      \t\"grunt-mocha-test\": \"~0.13.3\",\n      \t\"grunt-plato\": \"~1.4.0\",\n      \t\"grunt-release\": \"~0.14.0\",\n      -\t\"istanbul\": \"~0.4.5\",\n      +\t\"istanbul\": \"^0.4.5\",\n      \t\"mocha\": \"~5.2.0\",\n      \t\"nightmare\": \"~3.0.1\",\n      \t\"supertest\": \"~3.3.0\"\n    `);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"only one + diff selected","suites":["git-parser parseDiffResult"],"updatePoint":{"line":103,"column":30,"index":3309},"line":103,"code":"  it('only one + diff selected', () => {\n    const gitDiff = dedent`\n      diff --git a/package.json b/package.json\n      index f71e0064..08964575 100644\n      --- a/package.json\n      +++ b/package.json\n      @@ -87,9 +87,10 @@\n      \t\"grunt-mocha-test\": \"~0.13.3\",\n      \t\"grunt-plato\": \"~1.4.0\",\n      \t\"grunt-release\": \"~0.14.0\",\n      -\t\"istanbul\": \"~0.4.5\",\n      +\t\"istanbul\": \"^0.4.5\",\n      \t\"mocha\": \"~5.2.0\",\n      \t\"nightmare\": \"~3.0.1\",\n      +\t\"nyc\": \"^13.1.0\",\n      \t\"supertest\": \"~3.3.0\"\n    `;\n    expect(gitParser.parsePatchDiffResult([false, false, true], gitDiff)).to.eql('diff --git a/package.json b/package.json\\nindex f71e0064..08964575 100644\\n--- a/package.json\\n+++ b/package.json\\n@@ -87,9 +87,10 @@\\n\\t\"grunt-mocha-test\": \"~0.13.3\",\\n\\t\"grunt-plato\": \"~1.4.0\",\\n\\t\"grunt-release\": \"~0.14.0\",\\n \\t\"istanbul\": \"~0.4.5\",\\n\\t\"mocha\": \"~5.2.0\",\\n\\t\"nightmare\": \"~3.0.1\",\\n+\\t\"nyc\": \"^13.1.0\",\\n\\t\"supertest\": \"~3.3.0\"');\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"works with multiple diffs","suites":["git-parser parseDiffResult"],"updatePoint":{"line":122,"column":31,"index":4261},"line":122,"code":"  it('works with multiple diffs', () => {\n    const gitDiff = dedent`\n      diff --git a/README.md b/README.md\n      index 96700c3a..dc141a51 100644\n      --- a/README.md\n      +++ b/README.md\n      @@ -1,4 +1,3 @@\n      -ungit\n      ======\n      [![NPM version](https://badge.fury.io/js/ungit.svg)](http://badge.fury.io/js/ungit)\n      [![Build Status](https://travis-ci.org/FredrikNoren/ungit.svg)](https://travis-ci.org/FredrikNoren/ungit)\n      @@ -133,7 +132,6 @@ Changelog\n      See [CHANGELOG.md](CHANGELOG.md).\n\n      -License (MIT)\n      See [LICENSE.md](LICENSE.md). To read about the Faircode experiment go to [#974](https://github.com/FredrikNoren/ungit/issues/974). Ungit is now once again MIT.\n    `;\n    expect(gitParser.parsePatchDiffResult([true, false], gitDiff)).to.eql('diff --git a/README.md b/README.md\\nindex 96700c3a..dc141a51 100644\\n--- a/README.md\\n+++ b/README.md\\n@@ -1,4 +1,3 @@\\n-ungit\\n======\\n[![NPM version](https://badge.fury.io/js/ungit.svg)](http://badge.fury.io/js/ungit)\\n[![Build Status](https://travis-ci.org/FredrikNoren/ungit.svg)](https://travis-ci.org/FredrikNoren/ungit)\\n@@ -133,7 +132,7 @@ Changelog\\nSee [CHANGELOG.md](CHANGELOG.md).\\n\\n License (MIT)\\nSee [LICENSE.md](LICENSE.md). To read about the Faircode experiment go to [#974](https://github.com/FredrikNoren/ungit/issues/974). Ungit is now once again MIT.');\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"works with empty diff","suites":["git-parser parseDiffResult"],"updatePoint":{"line":141,"column":27,"index":5629},"line":141,"code":"  it('works with empty diff', () => {\n    expect(gitParser.parsePatchDiffResult([], null)).to.eql(null);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with branch name with ()","suites":["git-parser parseGitLog"],"updatePoint":{"line":146,"column":42,"index":5802},"line":146,"code":"  it('should work with branch name with ()', () => {\n    const refs = gitParser.parseGitLog('commit AAA BBB (HEAD, (test), fw(4rw), 5), ((, ()')[0].refs;\n    expect(refs.length).to.be(6);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with no branch name","suites":["git-parser parseGitLog"],"updatePoint":{"line":150,"column":37,"index":5991},"line":150,"code":"  it('should work with no branch name', () => {\n    const refs = gitParser.parseGitLog('commit AAA BBB')[0].refs;\n    expect(refs.length).to.be(0);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with empty lines","suites":["git-parser parseGitLog"],"updatePoint":{"line":154,"column":34,"index":6142},"line":154,"code":"  it('should work with empty lines', () => {\n    expect(gitParser.parseGitLog('')).to.eql([]);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses authors without emails","suites":["git-parser parseGitLog"],"updatePoint":{"line":157,"column":35,"index":6244},"line":157,"code":"  it('parses authors without emails', () => {\n    const gitLog = dedent`\n      commit 37d1154434b70854ed243967e0d7e37aa3564551 d58c8e117fc257520d90b099fd2c6acd7c1e8861 (HEAD -> refs/heads/git-parser-specs)\n      Author:     Test ungit\n      Commit:     Test ungit\n    `;\n    expect(gitParser.parseGitLog(gitLog)[0]).to.eql({\n      authorName: 'Test ungit',\n      committerName: 'Test ungit',\n      additions: 0,\n      deletions: 0,\n      fileLineDiffs: [],\n      isHead: true,\n      message: '',\n      parents: ['d58c8e117fc257520d90b099fd2c6acd7c1e8861'],\n      refs: ['HEAD', 'refs/heads/git-parser-specs'],\n      sha1: '37d1154434b70854ed243967e0d7e37aa3564551'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses multiple commits in a row","suites":["git-parser parseGitLog"],"updatePoint":{"line":176,"column":38,"index":6926},"line":176,"code":"  it('parses multiple commits in a row', () => {\n    const gitLog = dedent(`\n      commit 5867e2766b0a0f81ad59ce9e9895d9b1a3523aa4 37d1154434b70854ed243967e0d7e37aa3564551 (HEAD -> refs/heads/git-parser-specs)\n      Author:     Test ungit <test@example.com>\n      AuthorDate: Fri Jan 4 14:54:06 2019 +0100\n      Commit:     Test ungit <test@example.com>\n      CommitDate: Fri Jan 4 14:54:06 2019 +0100\n\n        parseGitLog + gix reflox parsing\n\n      1\t1\tsource/git-parser.js\\x00175\t0\ttest/spec.git-parser.js\\x00\\x00commit 37d1154434b70854ed243967e0d7e37aa3564551 d58c8e117fc257520d90b099fd2c6acd7c1e8861\n      Author:     Test ungit <test@example.com>\n      AuthorDate: Fri Jan 4 14:03:56 2019 +0100\n      Commit:     Test ungit <test@example.com>\n      CommitDate: Fri Jan 4 14:03:56 2019 +0100\n\n        submodules parser\n\n      32\t0\ttest/spec.git-parser.js\\x00\\x00commit 02efa0da7b1eccb1e0f1c2ff0433ce7387738f60 985617e19e30e9abe0a5711bf455f0dc10f97dff\n      Author:     Test ungit <test@example.com>\n      AuthorDate: Fri Jan 4 14:02:56 2019 +0100\n      Commit:     Test ungit <test@example.com>\n      CommitDate: Fri Jan 4 14:02:56 2019 +0100\n      \n          empty commit\n      \\x00commit 621a04f931ea9007ac826c04a1a02832e20aa470 4e5d611fdad85bcad44abf65936c95f748abef4e e2dc3ef6e2cbf6ab0acb456c0837257dc01baafd\n      Merge: 4e5d611f e2dc3ef6\n      Author:     Test ungit <test@example.com>\n      AuthorDate: Fri Jan 4 14:01:56 2019 +0100\n      Commit:     Test ungit <test@example.com>\n      CommitDate: Fri Jan 4 14:01:56 2019 +0100\n      \n          Merge pull request #1268 from campersau/prepare_152\n          \n          Prepare version 1.5.2\n      \\x004\t1\tCHANGELOG.md\\x001\t1\tpackage-lock.json\\x001\t1\tpackage.json\\x008\t6\tsource/git-parser.js\\x00\\x00`);\n    const res = gitParser.parseGitLog(gitLog);\n    expect(res[0]).to.eql({\n      authorDate: 'Fri Jan 4 14:54:06 2019 +0100',\n      authorEmail: 'test@example.com',\n      authorName: 'Test ungit',\n      commitDate: 'Fri Jan 4 14:54:06 2019 +0100',\n      committerEmail: 'test@example.com',\n      committerName: 'Test ungit',\n      additions: 176,\n      deletions: 1,\n      fileLineDiffs: [{\n        additions: 1,\n        deletions: 1,\n        displayName: 'source/git-parser.js',\n        fileName: 'source/git-parser.js',\n        oldFileName: 'source/git-parser.js',\n        type: 'text'\n      }, {\n        additions: 175,\n        deletions: 0,\n        displayName: 'test/spec.git-parser.js',\n        fileName: 'test/spec.git-parser.js',\n        oldFileName: 'test/spec.git-parser.js',\n        type: 'text'\n      }],\n      isHead: true,\n      message: 'parseGitLog + gix reflox parsing',\n      parents: ['37d1154434b70854ed243967e0d7e37aa3564551'],\n      refs: ['HEAD', 'refs/heads/git-parser-specs'],\n      sha1: '5867e2766b0a0f81ad59ce9e9895d9b1a3523aa4'\n    });\n    expect(res[1]).to.eql({\n      authorDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      authorEmail: 'test@example.com',\n      authorName: 'Test ungit',\n      commitDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      committerEmail: 'test@example.com',\n      committerName: 'Test ungit',\n      additions: 32,\n      deletions: 0,\n      fileLineDiffs: [{\n        additions: 32,\n        deletions: 0,\n        displayName: 'test/spec.git-parser.js',\n        fileName: 'test/spec.git-parser.js',\n        oldFileName: 'test/spec.git-parser.js',\n        type: 'text'\n      }],\n      isHead: false,\n      message: 'submodules parser',\n      parents: ['d58c8e117fc257520d90b099fd2c6acd7c1e8861'],\n      refs: [],\n      sha1: '37d1154434b70854ed243967e0d7e37aa3564551'\n    });\n    // empty commit\n    expect(res[2]).to.eql({\n      authorDate: 'Fri Jan 4 14:02:56 2019 +0100',\n      authorEmail: 'test@example.com',\n      authorName: 'Test ungit',\n      commitDate: 'Fri Jan 4 14:02:56 2019 +0100',\n      committerEmail: 'test@example.com',\n      committerName: 'Test ungit',\n      additions: 0,\n      deletions: 0,\n      fileLineDiffs: [],\n      isHead: false,\n      message: 'empty commit',\n      parents: ['985617e19e30e9abe0a5711bf455f0dc10f97dff'],\n      refs: [],\n      sha1: '02efa0da7b1eccb1e0f1c2ff0433ce7387738f60'\n    });\n    // merge commit\n    expect(res[3]).to.eql({\n      authorDate: 'Fri Jan 4 14:01:56 2019 +0100',\n      authorEmail: 'test@example.com',\n      authorName: 'Test ungit',\n      commitDate: 'Fri Jan 4 14:01:56 2019 +0100',\n      committerEmail: 'test@example.com',\n      committerName: 'Test ungit',\n      additions: 14,\n      deletions: 9,\n      fileLineDiffs: [{\n        additions: 4,\n        deletions: 1,\n        displayName: 'CHANGELOG.md',\n        fileName: 'CHANGELOG.md',\n        oldFileName: 'CHANGELOG.md',\n        type: 'text'\n      }, {\n        additions: 1,\n        deletions: 1,\n        displayName: 'package-lock.json',\n        fileName: 'package-lock.json',\n        oldFileName: 'package-lock.json',\n        type: 'text'\n      }, {\n        additions: 1,\n        deletions: 1,\n        displayName: 'package.json',\n        fileName: 'package.json',\n        oldFileName: 'package.json',\n        type: 'text'\n      }, {\n        additions: 8,\n        deletions: 6,\n        displayName: 'source/git-parser.js',\n        fileName: 'source/git-parser.js',\n        oldFileName: 'source/git-parser.js',\n        type: 'text'\n      }],\n      isHead: false,\n      message: 'Merge pull request #1268 from campersau/prepare_152\\n\\nPrepare version 1.5.2',\n      parents: ['4e5d611fdad85bcad44abf65936c95f748abef4e', 'e2dc3ef6e2cbf6ab0acb456c0837257dc01baafd'],\n      refs: [],\n      sha1: '621a04f931ea9007ac826c04a1a02832e20aa470'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses multiple commits in a row multiple nul separators","suites":["git-parser parseGitLog"],"updatePoint":{"line":329,"column":62,"index":12534},"line":329,"code":"  it('parses multiple commits in a row multiple nul separators', () => {\n    const gitLog = dedent(`\n      commit ad4c559f05796e78095a51679324cefd9afca879 47185090d5096033db0d5c0bbf883d9295ca084e b360295026ae6afac3525b89145aa22d61e818ff (HEAD -> refs/heads/dev)\n      Merge: 4718509 b360295\n      Author:     Ungit Commiter <ungit.commiter@example.com>\n      AuthorDate: Sat May 22 22:21:04 2021 +0200\n      Commit:     Ungit Commiter <ungit.commiter@example.com>\n      CommitDate: Sat May 22 22:21:04 2021 +0200\n\n          Merge branch 'a' into dev\n      \\x00\\x00commit 7d7a4d7d9fc625aff46a0ff4d7e95f86d01d25c7 47185090d5096033db0d5c0bbf883d9295ca084e (refs/heads/b)\n      Author:     Ungit Commiter <ungit.commiter@example.com>\n      AuthorDate: Sat May 22 22:20:28 2021 +0200\n      Commit:     Ungit Commiter <ungit.commiter@example.com>\n      CommitDate: Sat May 22 22:20:28 2021 +0200\n\n          b\n      \\x00commit b360295026ae6afac3525b89145aa22d61e818ff 47185090d5096033db0d5c0bbf883d9295ca084e (refs/heads/a)\n      Author:     Ungit Commiter <ungit.commiter@example.com>\n      AuthorDate: Sat May 22 22:20:23 2021 +0200\n      Commit:     Ungit Commiter <ungit.commiter@example.com>\n      CommitDate: Sat May 22 22:20:23 2021 +0200\n\n          a\n      \\x00commit 47185090d5096033db0d5c0bbf883d9295ca084e (refs/heads/master)\n      Author:     Ungit Commiter <ungit.commiter@example.com>\n      AuthorDate: Sat May 22 22:19:31 2021 +0200\n      Commit:     Ungit Commiter <ungit.commiter@example.com>\n      CommitDate: Sat May 22 22:19:31 2021 +0200\n\n          Initial commit`);\n    const res = gitParser.parseGitLog(gitLog);\n    expect(res.length).to.eql(4);\n    expect(res[0].message).to.eql(\"Merge branch 'a' into dev\");\n    expect(res[1].message).to.eql('b');\n    expect(res[2].message).to.eql('a');\n    expect(res[3].message).to.eql('Initial commit');\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses reflog commits without email","suites":["git-parser parseGitLog"],"updatePoint":{"line":367,"column":41,"index":14378},"line":367,"code":"  it('parses reflog commits without email', () => {\n    const gitLog = dedent(`\n      commit 37d11544 d58c8e11 (HEAD -> refs/heads/git-parser-specs)\n      Reflog: git-parser-specs@{Fri Jan 4 14:03:56 2019 +0100} (Test ungit)\n      Reflog message: commit: submodules parser\n      Author:     Test ungit <test@example.com>\n      AuthorDate: Fri Jan 4 14:03:56 2019 +0100\n      Commit:     Test ungit <test@example.com>\n      CommitDate: Fri Jan 4 14:03:56 2019 +0100\n\n          submodules parser\n\n      32\t0\ttest/spec.git-parser.js\\x00\\x00`);\n    expect(gitParser.parseGitLog(gitLog)[0]).to.eql({\n      authorDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      authorEmail: 'test@example.com',\n      authorName: 'Test ungit',\n      commitDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      committerEmail: 'test@example.com',\n      committerName: 'Test ungit',\n      additions: 32,\n      deletions: 0,\n      fileLineDiffs: [{\n        additions: 32,\n        deletions: 0,\n        displayName: 'test/spec.git-parser.js',\n        fileName: 'test/spec.git-parser.js',\n        oldFileName: 'test/spec.git-parser.js',\n        type: 'text'\n      }],\n      isHead: true,\n      message: 'submodules parser',\n      parents: ['d58c8e11'],\n      reflogAuthorName: 'Test ungit',\n      reflogId: 'Fri Jan 4 14:03:56 2019 +0100',\n      reflogName: 'git-parser-specs@{Fri',\n      refs: ['HEAD', 'refs/heads/git-parser-specs'],\n      sha1: '37d11544'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses reflog commits","suites":["git-parser parseGitLog"],"updatePoint":{"line":407,"column":27,"index":15796},"line":407,"code":"  it('parses reflog commits', () => {\n    const gitLog = dedent(`\n      commit 37d11544 d58c8e11 (HEAD -> refs/heads/git-parser-specs)\n      Reflog: git-parser-specs@{Fri Jan 4 14:03:56 2019 +0100} (Test ungit <test@example.com>)\n      Reflog message: commit: submodules parser\n      Author:     Test ungit <test@example.com>\n      AuthorDate: Fri Jan 4 14:03:56 2019 +0100\n      Commit:     Test ungit <test@example.com>\n      CommitDate: Fri Jan 4 14:03:56 2019 +0100\n\n          submodules parser\n\n      32\t0\ttest/spec.git-parser.js\\x00\\x00`);\n    expect(gitParser.parseGitLog(gitLog)[0]).to.eql({\n      authorDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      authorEmail: 'test@example.com',\n      authorName: 'Test ungit',\n      commitDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      committerEmail: 'test@example.com',\n      committerName: 'Test ungit',\n      additions: 32,\n      deletions: 0,\n      fileLineDiffs: [{\n        additions: 32,\n        deletions: 0,\n        displayName: 'test/spec.git-parser.js',\n        fileName: 'test/spec.git-parser.js',\n        oldFileName: 'test/spec.git-parser.js',\n        type: 'text'\n      }],\n      isHead: true,\n      message: 'submodules parser',\n      parents: ['d58c8e11'],\n      reflogAuthorEmail: 'test@example.com',\n      reflogAuthorName: 'Test ungit',\n      reflogId: 'Fri Jan 4 14:03:56 2019 +0100',\n      reflogName: 'git-parser-specs@{Fri',\n      refs: ['HEAD', 'refs/heads/git-parser-specs'],\n      sha1: '37d11544'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses wrongly signed commits","suites":["git-parser parseGitLog"],"updatePoint":{"line":448,"column":35,"index":17286},"line":448,"code":"  it('parses wrongly signed commits', () => {\n    const gitLog = dedent`\n      commit 37d1154434b70854ed243967e0d7e37aa3564551 d58c8e117fc257520d90b099fd2c6acd7c1e8861 (HEAD -> refs/heads/git-parser-specs)\n      gpg: Signature made Wed Jun  4 19:49:17 2014 PDT using RSA key ID 0AAAAAAA\n      gpg: Can't check signature: public key not found\n      Author: Test Ungit <test@example.com>\n      Date:   Wed Jun 4 19:49:17 2014 -0700\n      signed commit\n    `;\n    expect(gitParser.parseGitLog(gitLog)[0]).to.eql({\n      authorEmail: 'test@example.com',\n      authorName: 'Test Ungit',\n      additions: 0,\n      deletions: 0,\n      fileLineDiffs: [],\n      isHead: true,\n      message: '',\n      parents: ['d58c8e117fc257520d90b099fd2c6acd7c1e8861'],\n      refs: ['HEAD', 'refs/heads/git-parser-specs'],\n      sha1: '37d1154434b70854ed243967e0d7e37aa3564551'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses signed commits","suites":["git-parser parseGitLog"],"updatePoint":{"line":470,"column":27,"index":18147},"line":470,"code":"  it('parses signed commits', () => {\n    const gitLog = dedent`\n      commit 37d1154434b70854ed243967e0d7e37aa3564551 d58c8e117fc257520d90b099fd2c6acd7c1e8861 (HEAD -> refs/heads/git-parser-specs)\n      gpg: Signature made Wed Jun  4 19:49:17 2014 PDT using RSA key ID 0AAAAAAA\n      gpg: Good signature from \"Test ungit (Git signing key) <test@example.com>\"\n      Author: Test Ungit <test@example.com>\n      Date:   Wed Jun 4 19:49:17 2014 -0700\n      signed commit\n    `;\n    expect(gitParser.parseGitLog(gitLog)[0]).to.eql({\n      authorEmail: 'test@example.com',\n      authorName: 'Test Ungit',\n      additions: 0,\n      deletions: 0,\n      fileLineDiffs: [],\n      isHead: true,\n      message: '',\n      parents: ['d58c8e117fc257520d90b099fd2c6acd7c1e8861'],\n      refs: ['HEAD', 'refs/heads/git-parser-specs'],\n      sha1: '37d1154434b70854ed243967e0d7e37aa3564551',\n      signatureDate: 'Wed Jun  4 19:49:17 2014 PDT using RSA key ID 0AAAAAAA',\n      signatureMade: '\"Test ungit (Git signing key) <test@example.com>\"'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses the git log","suites":["git-parser parseGitLog"],"updatePoint":{"line":494,"column":24,"index":19184},"line":494,"code":"  it('parses the git log', () => {\n    const gitLog = dedent(`\n      commit 37d1154434b70854ed243967e0d7e37aa3564551 d58c8e117fc257520d90b099fd2c6acd7c1e8861 (HEAD -> refs/heads/git-parser-specs)\n      Author:     Test ungit <test@example.com>\n      AuthorDate: Fri Jan 4 14:03:56 2019 +0100\n      Commit:     Test ungit <test@example.com>\n      CommitDate: Fri Jan 4 14:03:56 2019 +0100\n\n          submodules parser\n\n      32\t0\ttest/spec.git-parser.js\\x00\\x00`);\n    expect(gitParser.parseGitLog(gitLog)[0]).to.eql({\n      refs: ['HEAD', 'refs/heads/git-parser-specs'],\n      additions: 32,\n      deletions: 0,\n      fileLineDiffs: [{\n        additions: 32,\n        deletions: 0,\n        displayName: 'test/spec.git-parser.js',\n        fileName: 'test/spec.git-parser.js',\n        oldFileName: 'test/spec.git-parser.js',\n        type: 'text'\n      }],\n      sha1: '37d1154434b70854ed243967e0d7e37aa3564551',\n      parents: ['d58c8e117fc257520d90b099fd2c6acd7c1e8861'],\n      isHead: true,\n      authorName: 'Test ungit',\n      authorEmail: 'test@example.com',\n      authorDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      committerName: 'Test ungit',\n      committerEmail: 'test@example.com',\n      commitDate: 'Fri Jan 4 14:03:56 2019 +0100',\n      message: 'submodules parser'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with empty string","suites":["git-parser submodule"],"updatePoint":{"line":531,"column":35,"index":20529},"line":531,"code":"  it('should work with empty string', () => {\n    const gitmodules = '';\n    const submodules = gitParser.parseGitSubmodule(gitmodules);\n    expect(submodules).to.eql([]);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with name, path and url","suites":["git-parser submodule"],"updatePoint":{"line":536,"column":41,"index":20713},"line":536,"code":"  it('should work with name, path and url', () => {\n    const gitmodules = '[submodule \"test1\"]\\npath = /path/to/sub1\\nurl = http://example1.com';\n    const submodules = gitParser.parseGitSubmodule(gitmodules);\n    expect(submodules.length).to.be(1);\n    expect(submodules[0]).to.eql({\n      name: 'test1',\n      path: path.join('/path', 'to', 'sub1'),\n      rawUrl: 'http://example1.com',\n      url: 'http://example1.com'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with multiple name, path and url","suites":["git-parser submodule"],"updatePoint":{"line":547,"column":50,"index":21159},"line":547,"code":"  it('should work with multiple name, path and url', () => {\n    const gitmodules = ['[submodule \"test1\"]\\npath = /path/to/sub1\\nurl = http://example1.com', '[submodule \"test2\"]\\npath = /path/to/sub2\\nurl = http://example2.com'].join('\\n');\n    const submodules = gitParser.parseGitSubmodule(gitmodules);\n    expect(submodules.length).to.be(2);\n    expect(submodules[0]).to.eql({\n      name: 'test1',\n      path: path.join('/path', 'to', 'sub1'),\n      rawUrl: 'http://example1.com',\n      url: 'http://example1.com'\n    });\n    expect(submodules[1]).to.eql({\n      name: 'test2',\n      path: path.join('/path', 'to', 'sub2'),\n      rawUrl: 'http://example2.com',\n      url: 'http://example2.com'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with multiple name, path, url, update, branch, fetchRecurseSubmodules and ignore","suites":["git-parser submodule"],"updatePoint":{"line":564,"column":98,"index":21918},"line":564,"code":"  it('should work with multiple name, path, url, update, branch, fetchRecurseSubmodules and ignore', () => {\n    const gitmodules = ['[submodule \"test1\"]\\npath = /path/to/sub1\\nurl = http://example1.com\\nupdate = checkout\\nbranch = master\\nfetchRecurseSubmodules = true\\nignore = all', '[submodule  \"test2\"]\\n\\npath   = /path/to/sub2\\nurl= git://example2.com'].join('\\n');\n    const submodules = gitParser.parseGitSubmodule(gitmodules);\n    expect(submodules.length).to.be(2);\n    expect(submodules[0]).to.eql({\n      branch: 'master',\n      fetchRecurseSubmodules: 'true',\n      ignore: 'all',\n      name: 'test1',\n      path: path.join('/path', 'to', 'sub1'),\n      rawUrl: 'http://example1.com',\n      update: 'checkout',\n      url: 'http://example1.com'\n    });\n    expect(submodules[1]).to.eql({\n      name: 'test2',\n      path: path.join('/path', 'to', 'sub2'),\n      rawUrl: 'git://example2.com',\n      url: 'http://example2.com'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with git submodules","suites":["git-parser submodule"],"updatePoint":{"line":585,"column":37,"index":22808},"line":585,"code":"  it('should work with git submodules', () => {\n    const gitmodules = dedent`\n      [submodule \"test1\"]\n      path = /path/to/sub1\n      url = git://example1.com\n      update = checkout\n      branch = master\n      fetchRecurseSubmodules = true\n      ignore = all\n    `;\n    expect(gitParser.parseGitSubmodule(gitmodules)).to.eql([{\n      name: 'test1',\n      path: path.join('/path', 'to', 'sub1'),\n      rawUrl: 'git://example1.com',\n      url: 'http://example1.com',\n      update: 'checkout',\n      branch: 'master',\n      fetchRecurseSubmodules: 'true',\n      ignore: 'all'\n    }]);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"should work with ssh submodules","suites":["git-parser submodule"],"updatePoint":{"line":606,"column":37,"index":23401},"line":606,"code":"  it('should work with ssh submodules', () => {\n    const gitmodules = dedent`\n      [submodule \"test1\"]\n      path = /path/to/sub1\n      url = ssh://login@server.com:12345\n      update = checkout\n      branch = master\n      fetchRecurseSubmodules = true\n      ignore = all\n    `;\n    expect(gitParser.parseGitSubmodule(gitmodules)).to.eql([{\n      name: 'test1',\n      path: path.join('/path', 'to', 'sub1'),\n      rawUrl: 'ssh://login@server.com:12345',\n      url: 'http://server.com/12345',\n      update: 'checkout',\n      branch: 'master',\n      fetchRecurseSubmodules: 'true',\n      ignore: 'all'\n    }]);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses the git config","suites":["parseGitConfig"],"updatePoint":{"line":629,"column":27,"index":24047},"line":629,"code":"  it('parses the git config', () => {\n    const gitConfig = dedent`\n      user.email=test@example.com\n      user.name=Ungit Test\n      core.repositoryformatversion=0\n      core.filemode=true\n      core.bare=false\n      core.logallrefupdates=true\n      remote.origin.url=git@github.com:ungit/ungit.git\n      branch.master.remote=origin\n      branch.master.merge=refs/heads/master\n    `;\n    expect(gitParser.parseGitConfig(gitConfig)).to.eql({\n      'user.email': 'test@example.com',\n      'user.name': 'Ungit Test',\n      'core.repositoryformatversion': '0',\n      'core.filemode': 'true',\n      'core.bare': 'false',\n      'core.logallrefupdates': 'true',\n      'remote.origin.url': 'git@github.com:ungit/ungit.git',\n      'branch.master.remote': 'origin',\n      'branch.master.merge': 'refs/heads/master'\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses the branches","suites":["parseGitBranches"],"updatePoint":{"line":655,"column":25,"index":24907},"line":655,"code":"  it('parses the branches', () => {\n    const gitBranches = dedent`\n      * dev\n        master\n        testbuild\n    `;\n    expect(gitParser.parseGitBranches(gitBranches)).to.eql([{\n      name: 'dev',\n      current: true\n    }, {\n      name: 'master'\n    }, {\n      name: 'testbuild'\n    }]);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses the tags","suites":["parseGitTags"],"updatePoint":{"line":672,"column":21,"index":25239},"line":672,"code":"  it('parses the tags', () => {\n    const gitTags = dedent`\n      0.1.0\n      0.1.1\n      0.1.2\n    `;\n    expect(gitParser.parseGitTags(gitTags)).to.eql(['0.1.0', '0.1.1', '0.1.2']);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses the remotes","suites":["parseGitRemotes"],"updatePoint":{"line":682,"column":24,"index":25472},"line":682,"code":"  it('parses the remotes', () => {\n    const gitRemotes = dedent`\n      origin\n      upstream\n    `;\n    expect(gitParser.parseGitRemotes(gitRemotes)).to.eql(['origin', 'upstream']);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses the ls remote","suites":["parseGitLsRemote"],"updatePoint":{"line":691,"column":26,"index":25704},"line":691,"code":"  it('parses the ls remote', () => {\n    const gitLsRemote = dedent`\n      86bec6415fa7ec0d7550a62389de86adb493d546\trefs/tags/0.1.0\n      668ab7beae996c5a7b36da0be64b98e45ba2aa0b\trefs/tags/0.1.0^{}\n      d3ec9678acf285637ef11c7cba897d697820de07\trefs/tags/0.1.1\n      ad00b6c8b7b0cbdd0bd92d44dece559b874a4ae6\trefs/tags/0.1.1^{}\n    `;\n    expect(gitParser.parseGitLsRemote(gitLsRemote)).to.eql([{\n      sha1: '86bec6415fa7ec0d7550a62389de86adb493d546',\n      name: 'refs/tags/0.1.0'\n    }, {\n      sha1: '668ab7beae996c5a7b36da0be64b98e45ba2aa0b',\n      name: 'refs/tags/0.1.0^{}'\n    }, {\n      sha1: 'd3ec9678acf285637ef11c7cba897d697820de07',\n      name: 'refs/tags/0.1.1'\n    }, {\n      sha1: 'ad00b6c8b7b0cbdd0bd92d44dece559b874a4ae6',\n      name: 'refs/tags/0.1.1^{}'\n    }]);\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses the git status numstat","suites":["parseGitStatusNumstat"],"updatePoint":{"line":714,"column":35,"index":26547},"line":714,"code":"  it('parses the git status numstat', () => {\n    const gitStatusNumstat = '1459\t202\tpackage-lock.json\\x002\t1\tpackage.json\\x0013\t0\ttest/spec.git-parser.js\\x00';\n    expect(gitParser.parseGitStatusNumstat(gitStatusNumstat)).to.eql({\n      'package-lock.json': {\n        additions: '1459',\n        deletions: '202'\n      },\n      'package.json': {\n        additions: '2',\n        deletions: '1'\n      },\n      'test/spec.git-parser.js': {\n        additions: '13',\n        deletions: '0'\n      }\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"skips empty lines","suites":["parseGitStatusNumstat"],"updatePoint":{"line":731,"column":23,"index":27042},"line":731,"code":"  it('skips empty lines', () => {\n    const gitStatusNumstat = dedent(`\n      1459\t202\tpackage-lock.json\\x00\n\n\n      2\t1\tpackage.json\\x0013\t0\ttest/spec.git-parser.js\\x00\n    `);\n    expect(gitParser.parseGitStatusNumstat(gitStatusNumstat)).to.eql({\n      'package-lock.json': {\n        additions: '1459',\n        deletions: '202'\n      },\n      'package.json': {\n        additions: '2',\n        deletions: '1'\n      },\n      'test/spec.git-parser.js': {\n        additions: '13',\n        deletions: '0'\n      }\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"},{"name":"parses git status","suites":["parseGitStatus"],"updatePoint":{"line":755,"column":23,"index":27605},"line":755,"code":"  it('parses git status', () => {\n    const gitStatus = '## git-parser-specs\\x00' + 'A  file1.js\\x00' + 'M  file2.js\\x00' + 'D  file3.js\\x00' + ' D file4.js\\x00' + ' U file5.js\\x00' + 'U  file6.js\\x00' + 'AA file7.js\\x00' + '?  file8.js\\x00' + 'A  file9.js\\x00' + '?D file10.js\\x00' + 'AD file11.js\\x00' + ' M file12.js\\x00' + '?? file13.js\\x00' + 'R  ../source/sys.js\\x00../source/sysinfo.js\\x00';\n    expect(gitParser.parseGitStatus(gitStatus)).to.eql({\n      branch: 'git-parser-specs',\n      files: {\n        '../source/sys.js': {\n          conflict: false,\n          displayName: '../source/sysinfo.js → ../source/sys.js',\n          fileName: '../source/sys.js',\n          oldFileName: '../source/sysinfo.js',\n          isNew: false,\n          removed: false,\n          renamed: true,\n          staged: false,\n          type: 'text'\n        },\n        'file1.js': {\n          conflict: false,\n          displayName: 'file1.js',\n          fileName: 'file1.js',\n          oldFileName: 'file1.js',\n          isNew: true,\n          removed: false,\n          renamed: false,\n          staged: true,\n          type: 'text'\n        },\n        'file2.js': {\n          conflict: false,\n          displayName: 'file2.js',\n          fileName: 'file2.js',\n          oldFileName: 'file2.js',\n          isNew: false,\n          removed: false,\n          renamed: false,\n          staged: true,\n          type: 'text'\n        },\n        'file3.js': {\n          conflict: false,\n          displayName: 'file3.js',\n          fileName: 'file3.js',\n          oldFileName: 'file3.js',\n          isNew: false,\n          removed: true,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        },\n        'file4.js': {\n          conflict: false,\n          displayName: 'file4.js',\n          fileName: 'file4.js',\n          oldFileName: 'file4.js',\n          isNew: false,\n          removed: true,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        },\n        'file5.js': {\n          conflict: true,\n          displayName: 'file5.js',\n          fileName: 'file5.js',\n          oldFileName: 'file5.js',\n          isNew: false,\n          removed: false,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        },\n        'file6.js': {\n          conflict: true,\n          displayName: 'file6.js',\n          fileName: 'file6.js',\n          oldFileName: 'file6.js',\n          isNew: false,\n          removed: false,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        },\n        'file7.js': {\n          conflict: true,\n          displayName: 'file7.js',\n          fileName: 'file7.js',\n          oldFileName: 'file7.js',\n          isNew: true,\n          removed: false,\n          renamed: false,\n          staged: true,\n          type: 'text'\n        },\n        'file8.js': {\n          conflict: false,\n          displayName: 'file8.js',\n          fileName: 'file8.js',\n          oldFileName: 'file8.js',\n          isNew: true,\n          removed: false,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        },\n        'file9.js': {\n          conflict: false,\n          displayName: 'file9.js',\n          fileName: 'file9.js',\n          oldFileName: 'file9.js',\n          isNew: true,\n          removed: false,\n          renamed: false,\n          staged: true,\n          type: 'text'\n        },\n        'file10.js': {\n          conflict: false,\n          displayName: 'file10.js',\n          fileName: 'file10.js',\n          oldFileName: 'file10.js',\n          isNew: false,\n          removed: true,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        },\n        'file11.js': {\n          conflict: false,\n          displayName: 'file11.js',\n          fileName: 'file11.js',\n          oldFileName: 'file11.js',\n          isNew: false,\n          removed: true,\n          renamed: false,\n          staged: true,\n          type: 'text'\n        },\n        'file12.js': {\n          conflict: false,\n          displayName: 'file12.js',\n          fileName: 'file12.js',\n          oldFileName: 'file12.js',\n          isNew: false,\n          removed: false,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        },\n        'file13.js': {\n          conflict: false,\n          displayName: 'file13.js',\n          fileName: 'file13.js',\n          oldFileName: 'file13.js',\n          isNew: true,\n          removed: false,\n          renamed: false,\n          staged: false,\n          type: 'text'\n        }\n      }\n    });\n  });","file":"spec.git-parser.js","skipped":false,"dir":"test"}]}