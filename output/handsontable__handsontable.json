{
    "repo": "handsontable/handsontable",
    "url": "https://github.com/handsontable/handsontable",
    "branch": "master",
    "configs": [
        {
            "package": "angular-basic-example",
            "lang": "js",
            "dir": "examples/10.0.0/docs/angular/basic-example/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "vanilla-basic-example",
            "lang": "js",
            "dir": "examples/10.0.0/docs/js/basic-example/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-basic-example",
            "lang": "js",
            "dir": "examples/10.0.0/docs/react/basic-example/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "vue-basic-example",
            "lang": "js",
            "dir": "examples/10.0.0/docs/vue/basic-example/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "angular-template",
            "lang": "js",
            "dir": "examples/templates/angular/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "vanilla-template",
            "lang": "js",
            "dir": "examples/templates/js/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-template",
            "lang": "js",
            "dir": "examples/templates/react/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "vue-template",
            "lang": "js",
            "dir": "examples/templates/vue/spec",
            "framework": "jasmine",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "handsontable",
            "lang": "js",
            "dir": "handsontable/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@handsontable/react",
            "lang": "ts",
            "dir": "wrappers/react/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@handsontable/vue",
            "lang": "ts",
            "dir": "wrappers/vue/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "should render Handsontable",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 32
            },
            "code": "  it('should render Handsontable', async () => {\n    const hotCell = await page.$('.handsontable td'); // assertion\n\n    await expect(hotCell).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/10.0.0/docs/angular/basic-example/spec"
        },
        {
            "name": "should render Handsontable",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 32
            },
            "code": "  it('should render Handsontable', async () => {\n    const hotCell = await page.$('.handsontable td'); // assertion\n\n    await expect(hotCell).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/10.0.0/docs/js/basic-example/spec"
        },
        {
            "name": "should render Handsontable",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 32
            },
            "code": "  it('should render Handsontable', async () => {\n    const hotCell = await page.$('.handsontable td'); // assertion\n\n    await expect(hotCell).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/10.0.0/docs/react/basic-example/spec"
        },
        {
            "name": "should render Handsontable",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 32
            },
            "code": "  it('should render Handsontable', async () => {\n    const hotCell = await page.$('.handsontable td'); // assertion\n\n    await expect(hotCell).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/10.0.0/docs/vue/basic-example/spec"
        },
        {
            "name": "should fail",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 17
            },
            "code": "  it('should fail', async () => {\n    // failing assertion, this should encourage developers to write tests for new code snippets\n    await expect(false).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/templates/angular/spec"
        },
        {
            "name": "should fail",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 17
            },
            "code": "  it('should fail', async () => {\n    // failing assertion, this should encourage developers to write tests for new code snippets\n    await expect(false).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/templates/js/spec"
        },
        {
            "name": "should fail",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 17
            },
            "code": "  it('should fail', async () => {\n    // failing assertion, this should encourage developers to write tests for new code snippets\n    await expect(false).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/templates/react/spec"
        },
        {
            "name": "should fail",
            "suites": [
                "Smoke check"
            ],
            "line": 18,
            "updatePoint": {
                "line": 18,
                "column": 17
            },
            "code": "  it('should fail', async () => {\n    // failing assertion, this should encourage developers to write tests for new code snippets\n    await expect(false).toBeTruthy();\n  });",
            "file": "Smoke.spec.js",
            "skipped": false,
            "dir": "examples/templates/vue/spec"
        }
    ],
    "error": "Cannot read property 'object' of undefined",
    "badge": "handsontable__handsontable.svg"
}