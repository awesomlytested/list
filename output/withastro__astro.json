{"repo":"withastro/astro","url":"https://github.com/withastro/astro","branch":"main","configs":[{"package":"astro","lang":"js","dir":"packages/astro/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"create-astro","lang":"js","dir":"packages/create-astro/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"HTML and CSS scoped correctly","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":31,"column":39,"index":1109},"line":31,"code":"      it('HTML and CSS scoped correctly', async () => {\n        const el1 = $('#dynamic-class');\n        const el2 = $('#dynamic-vis');\n        const classes = $('#class').attr('class').split(' ');\n        const scopedClass = classes.find(name => /^astro-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el1.attr('class')).to.equal(`blue ${scopedClass}`);\n        expect(el2.attr('class')).to.equal(`visible ${scopedClass}`); // 2. check CSS\n\n        const expected = `.blue.${scopedClass}{color:#b0e0e6}.color\\\\\\\\:blue.${scopedClass}{color:#b0e0e6}.visible.${scopedClass}{display:block}`;\n        expect(bundledCSS).to.include(expected);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"No <style> skips scoping","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":43,"column":34,"index":1765},"line":43,"code":"      it('No <style> skips scoping', async () => {\n        // Astro component without <style> should not include scoped class\n        expect($('#no-scope').attr('class')).to.equal(undefined);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Child inheritance","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":47,"column":27,"index":1960},"line":47,"code":"      it('Child inheritance', async () => {\n        expect($('#passed-in').attr('class')).to.match(/outer astro-[A-Z0-9]+ astro-[A-Z0-9]+/);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Using hydrated components adds astro-root styles","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":50,"column":58,"index":2142},"line":50,"code":"      it('Using hydrated components adds astro-root styles', async () => {\n        const inline = $('style').html();\n        expect(inline).to.include('display: contents');\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":54,"column":29,"index":2296},"line":54,"code":"      it('<style lang=\"sass\">', async () => {\n        expect(bundledCSS).to.match(new RegExp('h1.astro-[^{]*{color:#90ee90}'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":57,"column":29,"index":2434},"line":57,"code":"      it('<style lang=\"scss\">', async () => {\n        expect(bundledCSS).to.match(new RegExp('h1.astro-[^{]*{color:#ff69b4}'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".css","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":62,"column":14,"index":2604},"line":62,"code":"      it('.css', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-css[^{]*{color:gold'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".sass","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":65,"column":15,"index":2726},"line":65,"code":"      it('.sass', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-sass[^{]*{color:#789'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".scss","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":68,"column":15,"index":2849},"line":68,"code":"      it('.scss', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-scss[^{]*{color:#6b8e23'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".css","suites":["CSS","build","JSX"],"updatePoint":{"line":73,"column":14,"index":3010},"line":73,"code":"      it('.css', async () => {\n        const el = $('#react-css'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-title'); // 2. check CSS\n\n        expect(bundledCSS).to.include('.react-title');\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.css","suites":["CSS","build","JSX"],"updatePoint":{"line":80,"column":21,"index":3244},"line":80,"code":"      it('.module.css', async () => {\n        const el = $('#react-module-css');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".sass","suites":["CSS","build","JSX"],"updatePoint":{"line":89,"column":15,"index":3656},"line":89,"code":"      it('.sass', async () => {\n        const el = $('#react-sass'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-sass-title'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.react-sass-title[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".scss","suites":["CSS","build","JSX"],"updatePoint":{"line":96,"column":15,"index":3931},"line":96,"code":"      it('.scss', async () => {\n        const el = $('#react-scss'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-scss-title'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.react-scss-title[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.sass","suites":["CSS","build","JSX"],"updatePoint":{"line":103,"column":22,"index":4213},"line":103,"code":"      it('.module.sass', async () => {\n        const el = $('#react-module-sass');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.scss","suites":["CSS","build","JSX"],"updatePoint":{"line":112,"column":22,"index":4633},"line":112,"code":"      it('.module.scss', async () => {\n        const el = $('#react-module-scss');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style>","suites":["CSS","build","Vue"],"updatePoint":{"line":123,"column":17,"index":5084},"line":123,"code":"      it('<style>', async () => {\n        const el = $('#vue-css'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-css'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-css[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style scoped>","suites":["CSS","build","Vue"],"updatePoint":{"line":130,"column":24,"index":5346},"line":130,"code":"      it('<style scoped>', async () => {\n        const el = $('#vue-scoped'); // find data-v-* attribute (how Vue CSS scoping works)\n\n        const {\n          attribs\n        } = el.get(0);\n        const scopeId = Object.keys(attribs).find(k => k.startsWith('data-v-'));\n        expect(scopeId).to.be.ok; // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-scoped'); // 2. check CSS\n\n        expect(bundledCSS).to.include(`.vue-scoped[${scopeId}]`);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style module>","suites":["CSS","build","Vue"],"updatePoint":{"line":143,"column":24,"index":5822},"line":143,"code":"      it('<style module>', async () => {\n        const el = $('#vue-modules');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:cursive}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Vue"],"updatePoint":{"line":152,"column":29,"index":6243},"line":152,"code":"      it('<style lang=\"sass\">', async () => {\n        const el = $('#vue-sass'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-sass'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-sass[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Vue"],"updatePoint":{"line":159,"column":29,"index":6513},"line":159,"code":"      it('<style lang=\"scss\">', async () => {\n        const el = $('#vue-scss'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-scss'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-scss[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style>","suites":["CSS","build","Svelte"],"updatePoint":{"line":168,"column":17,"index":6810},"line":168,"code":"      it('<style>', async () => {\n        const el = $('#svelte-css');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => name !== 'svelte-css' && /^svelte-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-css'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-css.${scopedClass}[^{]*{font-family:Comic Sans MS`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Svelte"],"updatePoint":{"line":177,"column":29,"index":7271},"line":177,"code":"      it('<style lang=\"sass\">', async () => {\n        const el = $('#svelte-sass');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => name !== 'svelte-sass' && /^svelte-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-sass'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-sass.${scopedClass}[^{]*{font-family:Comic Sans MS`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Svelte"],"updatePoint":{"line":186,"column":29,"index":7736},"line":186,"code":"      it('<style lang=\"scss\">', async () => {\n        const el = $('#svelte-scss');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => name !== 'svelte-scss' && /^svelte-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-scss'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-scss.${scopedClass}[^{]*{font-family:Comic Sans MS`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS in public/","suites":["CSS","dev"],"updatePoint":{"line":209,"column":31,"index":8615},"line":209,"code":"    it('resolves CSS in public/', async () => {\n      const href = $('link[href=\"/global.css\"]').attr('href');\n      expect((await fixture.fetch(href)).status).to.equal(200);\n    }); // Skipped until upstream fix lands","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolved imported CSS with ?url","suites":["CSS","dev"],"line":217,"code":"    it.skip('resolved imported CSS with ?url', async () => {","file":"0-css.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"resolves Astro styles","suites":["CSS","dev"],"updatePoint":{"line":222,"column":29,"index":9247},"line":222,"code":"    it('resolves Astro styles', async () => {\n      const astroPageCss = $('link[rel=stylesheet][href^=/src/pages/index.astro?astro&type=style]');\n      expect(astroPageCss.length).to.equal(4, 'The index.astro page should generate 4 stylesheets, 1 for each <style> tag on the page.');\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves Styles from React","suites":["CSS","dev"],"updatePoint":{"line":226,"column":34,"index":9545},"line":226,"code":"    it('resolves Styles from React', async () => {\n      const styles = ['ReactCSS.css', 'ReactModules.module.css', 'ReactModules.module.scss', 'ReactModules.module.sass', 'ReactSass.sass', 'ReactScss.scss'];\n\n      for (const style of styles) {\n        const href = $(`link[href$=\"${style}\"]`).attr('href');\n        expect((await fixture.fetch(href)).status, style).to.equal(200);\n      }\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS from Svelte","suites":["CSS","dev"],"updatePoint":{"line":234,"column":32,"index":9941},"line":234,"code":"    it('resolves CSS from Svelte', async () => {\n      const scripts = ['SvelteCSS.svelte?svelte&type=style&lang.css', 'SvelteSass.svelte?svelte&type=style&lang.css', 'SvelteScss.svelte?svelte&type=style&lang.css'];\n\n      for (const script of scripts) {\n        const src = $(`script[src$=\"${script}\"]`).attr('src');\n        expect((await fixture.fetch(src)).status, script).to.equal(200);\n      }\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS from Vue","suites":["CSS","dev"],"updatePoint":{"line":242,"column":29,"index":10345},"line":242,"code":"    it('resolves CSS from Vue', async () => {\n      const styles = ['VueCSS.vue?vue&type=style&index=0&lang.css', 'VueModules.vue?vue&type=style&index=0&lang.module.scss', 'VueSass.vue?vue&type=style&index=0&lang.sass', 'VueScoped.vue?vue&type=style&index=0&scoped=true&lang.css', 'VueScss.vue?vue&type=style&index=0&lang.scss'];\n\n      for (const style of styles) {\n        const href = $(`link[href$=\"${style}\"]`).attr('href');\n        expect((await fixture.fetch(href)).status, style).to.equal(200);\n      }\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the base image","suites":["Assets"],"updatePoint":{"line":16,"column":26,"index":474},"line":16,"code":"  it('built the base image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const imgPath = $('img').attr('src');\n    const data = await fixture.readFile(imgPath);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the 2x image","suites":["Assets"],"updatePoint":{"line":23,"column":24,"index":738},"line":23,"code":"  it('built the 2x image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const srcset = $('img').attr('srcset');\n    const candidates = matchSrcset(srcset);\n    const match = candidates.find(a => a.density === 2);\n    const data = await fixture.readFile(match.url);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the 3x image","suites":["Assets"],"updatePoint":{"line":32,"column":24,"index":1107},"line":32,"code":"  it('built the 3x image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const srcset = $('img').attr('srcset');\n    const candidates = matchSrcset(srcset);\n    const match = candidates.find(a => a.density === 3);\n    const data = await fixture.readFile(match.url);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built image from an import specifier","suites":["Assets"],"updatePoint":{"line":41,"column":42,"index":1494},"line":41,"code":"  it('built image from an import specifier', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const src = $('#import-no-url').attr('src');\n    const data = await fixture.readFile(src);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built image from an import specifier using ?url","suites":["Assets"],"updatePoint":{"line":48,"column":53,"index":1790},"line":48,"code":"  it('built image from an import specifier using ?url', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const src = $('#import-url').attr('src');\n    const data = await fixture.readFile(src);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes attributes to elements as expected","suites":["Attributes"],"updatePoint":{"line":12,"column":47,"index":350},"line":12,"code":"  it('Passes attributes to elements as expected', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const attrs = {\n      'false-str': {\n        attribute: 'attr',\n        value: 'false'\n      },\n      'true-str': {\n        attribute: 'attr',\n        value: 'true'\n      },\n      false: {\n        attribute: 'attr',\n        value: undefined\n      },\n      true: {\n        attribute: 'attr',\n        value: 'true'\n      },\n      empty: {\n        attribute: 'attr',\n        value: ''\n      },\n      null: {\n        attribute: 'attr',\n        value: undefined\n      },\n      undefined: {\n        attribute: 'attr',\n        value: undefined\n      },\n      'html-boolean': {\n        attribute: 'async',\n        value: 'async'\n      },\n      'html-boolean-true': {\n        attribute: 'async',\n        value: 'async'\n      },\n      'html-boolean-false': {\n        attribute: 'async',\n        value: undefined\n      },\n      'html-enum': {\n        attribute: 'draggable',\n        value: 'true'\n      },\n      'html-enum-true': {\n        attribute: 'draggable',\n        value: 'true'\n      },\n      'html-enum-false': {\n        attribute: 'draggable',\n        value: 'false'\n      }\n    };\n\n    for (const id of Object.keys(attrs)) {\n      const {\n        attribute,\n        value\n      } = attrs[id];\n      const attr = $(`#${id}`).attr(attribute);\n      expect(attr).to.equal(value);\n    }\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes boolean attributes to components as expected","suites":["Attributes"],"updatePoint":{"line":79,"column":57,"index":1807},"line":79,"code":"  it('Passes boolean attributes to components as expected', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html);\n    expect($('#true').attr('attr')).to.equal('attr-true');\n    expect($('#true').attr('type')).to.equal('boolean');\n    expect($('#false').attr('attr')).to.equal('attr-false');\n    expect($('#false').attr('type')).to.equal('boolean');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes namespaced attributes as expected","suites":["Attributes"],"updatePoint":{"line":87,"column":46,"index":2211},"line":87,"code":"  it('Passes namespaced attributes as expected', async () => {\n    const html = await fixture.readFile('/namespaced/index.html');\n    const $ = cheerio.load(html);\n    expect($('div').attr('xmlns:happy')).to.equal('https://example.com/schemas/happy');\n    expect($('img').attr('happy:smile')).to.equal('sweet');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes namespaced attributes to components as expected","suites":["Attributes"],"updatePoint":{"line":93,"column":60,"index":2543},"line":93,"code":"  it('Passes namespaced attributes to components as expected', async () => {\n    const html = await fixture.readFile('/namespaced-component/index.html');\n    const $ = cheerio.load(html);\n    expect($('span').attr('on:click')).to.deep.equal('(event) => console.log(event)');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load page","suites":["Astro basics","build"],"updatePoint":{"line":19,"column":21,"index":540},"line":19,"code":"    it('Can load page', async () => {\n      const html = await fixture.readFile(`/index.html`);\n      const $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Hello world!');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Correctly serializes boolean attributes","suites":["Astro basics","build"],"updatePoint":{"line":24,"column":47,"index":761},"line":24,"code":"    it('Correctly serializes boolean attributes', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('h1').attr('data-something')).to.equal('');\n      expect($('h2').attr('not-data-ok')).to.equal('');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Selector with an empty body","suites":["Astro basics","build"],"updatePoint":{"line":30,"column":35,"index":1030},"line":30,"code":"    it('Selector with an empty body', async () => {\n      const html = await fixture.readFile('/empty-class/index.html');\n      const $ = cheerio.load(html);\n      expect($('.author')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows forward-slashes in mustache tags (#407)","suites":["Astro basics","build"],"updatePoint":{"line":35,"column":54,"index":1263},"line":35,"code":"    it('Allows forward-slashes in mustache tags (#407)', async () => {\n      const html = await fixture.readFile('/forward-slash/index.html');\n      const $ = cheerio.load(html);\n      expect($('a[href=\"/post/one\"]')).to.have.lengthOf(1);\n      expect($('a[href=\"/post/two\"]')).to.have.lengthOf(1);\n      expect($('a[href=\"/post/three\"]')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows spread attributes (#521)","suites":["Astro basics","build"],"updatePoint":{"line":42,"column":39,"index":1617},"line":42,"code":"    it('Allows spread attributes (#521)', async () => {\n      const html = await fixture.readFile('/spread/index.html');\n      const $ = cheerio.load(html);\n      expect($('#spread-leading')).to.have.lengthOf(1);\n      expect($('#spread-leading').attr('a')).to.equal('0');\n      expect($('#spread-leading').attr('b')).to.equal('1');\n      expect($('#spread-leading').attr('c')).to.equal('2');\n      expect($('#spread-trailing')).to.have.lengthOf(1);\n      expect($('#spread-trailing').attr('a')).to.equal('0');\n      expect($('#spread-trailing').attr('b')).to.equal('1');\n      expect($('#spread-trailing').attr('c')).to.equal('2');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows spread attributes with TypeScript (#521)","suites":["Astro basics","build"],"updatePoint":{"line":54,"column":55,"index":2274},"line":54,"code":"    it('Allows spread attributes with TypeScript (#521)', async () => {\n      const html = await fixture.readFile('/spread/index.html');\n      const $ = cheerio.load(html);\n      expect($('#spread-ts')).to.have.lengthOf(1);\n      expect($('#spread-ts').attr('a')).to.equal('0');\n      expect($('#spread-ts').attr('b')).to.equal('1');\n      expect($('#spread-ts').attr('c')).to.equal('2');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows using the Fragment element to be used","suites":["Astro basics","build"],"updatePoint":{"line":62,"column":52,"index":2668},"line":62,"code":"    it('Allows using the Fragment element to be used', async () => {\n      const html = await fixture.readFile('/fragment/index.html');\n      const $ = cheerio.load(html); // will be 1 if element rendered correctly\n\n      expect($('#one')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"supports special chars in filename","suites":["Astro basics","build"],"updatePoint":{"line":68,"column":42,"index":2927},"line":68,"code":"    it('supports special chars in filename', async () => {\n      // will have already erred by now, but add test anyway\n      expect(await fixture.readFile('/special-“characters” -in-file/index.html')).to.be.ok;\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Supports void elements whose name is a string (#2062)","suites":["Astro basics","build"],"updatePoint":{"line":73,"column":59,"index":3170},"line":73,"code":"  it('Supports void elements whose name is a string (#2062)', async () => {\n    const html = await fixture.readFile('/input/index.html');\n    const $ = cheerio.load(html); // <Input />\n\n    expect($('body > :nth-child(1)').prop('outerHTML')).to.equal('<input>'); // <Input type=\"password\" />\n\n    expect($('body > :nth-child(2)').prop('outerHTML')).to.equal('<input type=\"password\">'); // <Input type=\"text\" />\n\n    expect($('body > :nth-child(3)').prop('outerHTML')).to.equal('<input type=\"text\">'); // <Input type=\"select\"><option>option</option></Input>\n\n    expect($('body > :nth-child(4)').prop('outerHTML')).to.equal('<select><option>option</option></select>'); // <Input type=\"textarea\">textarea</Input>\n\n    expect($('body > :nth-child(5)').prop('outerHTML')).to.equal('<textarea>textarea</textarea>');\n  });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns 200 for valid URLs","suites":["Astro basics","preview"],"updatePoint":{"line":88,"column":34,"index":3992},"line":88,"code":"    it('returns 200 for valid URLs', async () => {\n      const result = await fixture.fetch('/');\n      expect(result.status).to.equal(200);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns 404 for invalid URLs","suites":["Astro basics","preview"],"updatePoint":{"line":92,"column":36,"index":4143},"line":92,"code":"    it('returns 404 for invalid URLs', async () => {\n      const result = await fixture.fetch('/bad-url');\n      expect(result.status).to.equal(404);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes string children to framework components","suites":["Component children"],"updatePoint":{"line":12,"column":52,"index":360},"line":12,"code":"  it('Passes string children to framework components', async () => {\n    const html = await fixture.readFile('/strings/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass text to Preact components\n\n    const $preact = $('#preact');\n    expect($preact.text().trim()).to.equal('Hello world'); // test 2: Can pass text to Vue components\n\n    const $vue = $('#vue');\n    expect($vue.text().trim()).to.equal('Hello world'); // test 3: Can pass text to Svelte components\n\n    const $svelte = $('#svelte');\n    expect($svelte.text().trim()).to.equal('Hello world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes markup children to framework components","suites":["Component children"],"updatePoint":{"line":25,"column":52,"index":941},"line":25,"code":"  it('Passes markup children to framework components', async () => {\n    const html = await fixture.readFile('/markup/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass markup to Preact components\n\n    const $preact = $('#preact h1');\n    expect($preact.text().trim()).to.equal('Hello world'); // test 2: Can pass markup to Vue components\n\n    const $vue = $('#vue h1');\n    expect($vue.text().trim()).to.equal('Hello world'); // test 3: Can pass markup to Svelte components\n\n    const $svelte = $('#svelte h1');\n    expect($svelte.text().trim()).to.equal('Hello world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes multiple children to framework components","suites":["Component children"],"updatePoint":{"line":38,"column":54,"index":1538},"line":38,"code":"  it('Passes multiple children to framework components', async () => {\n    const html = await fixture.readFile('/multiple/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass multiple children to Preact components\n\n    const $preact = $('#preact');\n    expect($preact.children()).to.have.lengthOf(2);\n    expect($preact.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($preact.children(':last-child').text().trim()).to.equal('Goodbye world'); // test 2: Can pass multiple children to Vue components\n\n    const $vue = $('#vue');\n    expect($vue.children()).to.have.lengthOf(2);\n    expect($vue.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($vue.children(':last-child').text().trim()).to.equal('Goodbye world'); // test 3: Can pass multiple children to Svelte components\n\n    const $svelte = $('#svelte');\n    expect($svelte.children()).to.have.lengthOf(2);\n    expect($svelte.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($svelte.children(':last-child').text().trim()).to.equal('Goodbye world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a template when children are not rendered for client components","suites":["Component children"],"updatePoint":{"line":57,"column":77,"index":2664},"line":57,"code":"  it('Renders a template when children are not rendered for client components', async () => {\n    const html = await fixture.readFile('/no-render/index.html');\n    const $ = cheerio.load(html); // test 1: If SSR only, no children are rendered.\n\n    expect($('#ssr-only').children()).to.have.lengthOf(0); // test 2: If client, and no children are rendered, a template is.\n\n    expect($('#client').parent().children()).to.have.lengthOf(2, 'rendered the client component and a template');\n    expect($('#client').parent().find('template[data-astro-template]')).to.have.lengthOf(1, 'Found 1 template'); // test 3: If client, and children are rendered, no template is.\n\n    expect($('#client-render').parent().children()).to.have.lengthOf(1);\n    expect($('#client-render').parent().find('template')).to.have.lengthOf(0); // test 4: If client and no children are provided, no template is.\n\n    expect($('#client-no-children').parent().children()).to.have.lengthOf(1);\n    expect($('#client-no-children').parent().find('template')).to.have.lengthOf(0);\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes class:list attributes as expected to elements","suites":["Class List"],"updatePoint":{"line":12,"column":58,"index":366},"line":12,"code":"  it('Passes class:list attributes as expected to elements', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('[class=\"test control\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test expression\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test true\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test truthy\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test set\"]')).to.have.lengthOf(1);\n    expect($('[class=\"hello goodbye world friend\"]')).to.have.lengthOf(1);\n    expect($('.false, .noshow1, .noshow2, .noshow3, .noshow4')).to.have.lengthOf(0);\n  });","file":"astro-class-list.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes class:list attributes as expected to components","suites":["Class List"],"updatePoint":{"line":23,"column":60,"index":999},"line":23,"code":"  it('Passes class:list attributes as expected to components', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html);\n    expect($('[class=\"test control\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test expression\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test true\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test truthy\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test set\"]')).to.have.lengthOf(1);\n    expect($('[class=\"hello goodbye world friend\"]')).to.have.lengthOf(1);\n  });","file":"astro-class-list.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Client only components"],"updatePoint":{"line":12,"column":44,"index":370},"line":12,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html); // test 1: <astro-root> is empty\n\n    expect($('astro-root').html()).to.equal('');\n    const $script = $('script');\n    const script = $script.html(); // test 2: svelte renderer is on the page\n\n    expect(/import\\(\".\\/entry.*/g.test(script)).to.be.ok;\n  });","file":"astro-client-only.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Adds the CSS to the page","suites":["Client only components"],"updatePoint":{"line":22,"column":30,"index":764},"line":22,"code":"  it('Adds the CSS to the page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html);\n    expect($('link[rel=stylesheet]')).to.have.lengthOf(2);\n  });","file":"astro-client-only.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code> without lang or theme","suites":["<Code>"],"updatePoint":{"line":12,"column":34,"index":336},"line":12,"code":"  it('<Code> without lang or theme', async () => {\n    let html = await fixture.readFile('/no-lang/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto;', 'applies default and overflow');\n    expect($('pre > code')).to.have.lengthOf(1); // test: contains some generated spans\n\n    expect($('pre > code span').length).to.be.greaterThan(1);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code lang=\"...\">","suites":["<Code>"],"updatePoint":{"line":21,"column":23,"index":796},"line":21,"code":"  it('<Code lang=\"...\">', async () => {\n    let html = await fixture.readFile('/basic/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class'), 'astro-code');\n    expect($('pre > code')).to.have.lengthOf(1); // test: contains many generated spans\n\n    expect($('pre > code span').length).to.be.greaterThanOrEqual(6);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code theme=\"...\">","suites":["<Code>"],"updatePoint":{"line":30,"column":24,"index":1187},"line":30,"code":"  it('<Code theme=\"...\">', async () => {\n    let html = await fixture.readFile('/custom-theme/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class')).to.equal('astro-code');\n    expect($('pre').attr('style')).to.equal('background-color: #2e3440ff; overflow-x: auto;', 'applies custom theme');\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code wrap>","suites":["<Code>"],"updatePoint":{"line":37,"column":17,"index":1548},"line":37,"code":"  it('<Code wrap>', async () => {\n    {\n      let html = await fixture.readFile('/wrap-true/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;');\n    }\n    {\n      let html = await fixture.readFile('/wrap-false/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto;');\n    }\n    {\n      let html = await fixture.readFile('/wrap-null/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117');\n    }\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code lang=\"...\" theme=\"css-variables\">","suites":["<Code>"],"updatePoint":{"line":60,"column":45,"index":2499},"line":60,"code":"  it('<Code lang=\"...\" theme=\"css-variables\">', async () => {\n    let html = await fixture.readFile('/css-theme/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class')).to.equal('astro-code');\n    expect($('pre, pre span').map((i, f) => f.attribs ? f.attribs.style : 'no style found').toArray()).to.deep.equal(['background-color: var(--astro-code-color-background); overflow-x: auto;', 'color: var(--astro-code-token-constant)', 'color: var(--astro-code-token-function)', 'color: var(--astro-code-color-text)', 'color: var(--astro-code-token-string-expression)', 'color: var(--astro-code-color-text)']);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code> with custom theme and lang","suites":["<Code>"],"updatePoint":{"line":67,"column":39,"index":3171},"line":67,"code":"  it('<Code> with custom theme and lang', async () => {\n    let html = await fixture.readFile('/imported/index.html');\n    const $ = cheerio.load(html);\n    expect($('#theme > pre')).to.have.lengthOf(1);\n    expect($('#theme > pre').attr('style'), 'background-color: #FDFDFE; overflow-x: auto;');\n    expect($('#lang > pre')).to.have.lengthOf(1);\n    expect($('#lang > pre > code span').length).to.equal(3);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"CSS output in import order","suites":["CSS Bundling (ESM import)"],"updatePoint":{"line":12,"column":32,"index":358},"line":12,"code":"  it('CSS output in import order', async () => {\n    // note: this test is a little confusing, but the main idea is that\n    // page-2.astro contains all of page-1.astro, plus some unique styles.\n    // we only test page-2 to ensure the proper order is observed.\n    const html = await fixture.readFile('/page-2/index.html');\n    const $ = cheerio.load(html);\n    let css = '';\n\n    for (const style of $('link[rel=stylesheet]')) {\n      const href = style.attribs.href.replace(/^\\.\\./, '');\n      if (!href) continue;\n      css += await fixture.readFile(href);\n    } // test 1: insure green comes after red (site.css)\n\n\n    expect(css.indexOf('p{color:green}')).to.be.greaterThan(css.indexOf('p{color:red}')); // test 2: insure green comes after blue (page-1.css)\n\n    expect(css.indexOf('p{color:green}')).to.be.greaterThan(css.indexOf('p{color:#00f}'));\n  });","file":"astro-css-bundling-import.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"no empty CSS files","suites":["CSS Bundling (ESM import)"],"updatePoint":{"line":31,"column":24,"index":1213},"line":31,"code":"  it('no empty CSS files', async () => {\n    for (const page of ['/page-1/index.html', '/page-2/index.html']) {\n      const html = await fixture.readFile(page);\n      const $ = cheerio.load(html);\n\n      for (const style of $('link[rel=stylesheet]')) {\n        const href = style.attribs.href.replace(/^\\.\\./, '');\n        if (!href) continue;\n        const css = await fixture.readFile(href);\n        expect(css).to.be.ok;\n      }\n    }\n  });","file":"astro-css-bundling-import.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"?raw and ?url CSS imports are ignored","suites":["CSS Bundling (ESM import)"],"updatePoint":{"line":44,"column":43,"index":1676},"line":44,"code":"  it('?raw and ?url CSS imports are ignored', async () => {\n    // note: this test is a little confusing as well, but the main idea is that\n    // page-3.astro should have site.css imported as an ESM in InlineLayout.astro\n    // as well as the styles from page-3.css as an inline <style>.\n    const html = await fixture.readFile('/page-3/index.html');\n    const $ = cheerio.load(html);\n    let css = '';\n\n    for (const style of $('link[rel=stylesheet]')) {\n      const href = style.attribs.href.replace(/^\\.\\./, '');\n      if (!href) continue;\n      css += await fixture.readFile(href);\n    } // test 1: insure green is included (site.css)\n\n\n    expect(css.indexOf('p{color:red}')).to.be.greaterThanOrEqual(0); // test 2: insure purple is not included as an import (page-3.css)\n    // this makes sure the styles imported with ?raw and ?url weren't bundled\n\n    expect(css.indexOf('p{color:purple}')).to.be.lessThan(0); // test 3: insure purple was inlined (page-3.css inlined with set:html)\n    // this makes sure the styles imported with ?url were inlined\n\n    let inlineCss = $('style').html().replace(/\\s/g, '').replace('/n', '');\n    expect(inlineCss.indexOf('p{color:purple;}')).to.be.greaterThanOrEqual(0);\n  });","file":"astro-css-bundling-import.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Bundles CSS","suites":["CSS Bundling"],"updatePoint":{"line":23,"column":17,"index":937},"line":23,"code":"  it('Bundles CSS', async () => {\n    const builtCSS = new Set(); // for all HTML files…\n\n    for (const [filepath, css] of Object.entries(EXPECTED_CSS)) {\n      const html = await fixture.readFile(filepath);\n      const $ = cheerio.load(html); // test 1: assert new bundled CSS is present\n\n      for (const href of css) {\n        const link = $(`link[rel=\"stylesheet\"][href^=\"${href}\"]`);\n        expect(link.length).to.be.greaterThanOrEqual(1);\n        const outHref = link.attr('href');\n        builtCSS.add(outHref.startsWith('../') ? outHref.slice(2) : outHref);\n      } // test 2: assert old CSS was removed\n\n\n      for (const href of UNEXPECTED_CSS) {\n        const link = $(`link[rel=\"stylesheet\"][href=\"${href}\"]`);\n        expect(link).to.have.lengthOf(0);\n      } // test 3: assert all bundled CSS was built and contains CSS\n\n\n      for (const url of builtCSS.keys()) {\n        const css = await fixture.readFile(url);\n        expect(css).to.be.ok;\n      }\n    }\n  });","file":"astro-css-bundling.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes define:vars to script elements","suites":["Directives"],"updatePoint":{"line":12,"column":43,"index":351},"line":12,"code":"  it('Passes define:vars to script elements', async () => {\n    const html = await fixture.readFile('/define-vars/index.html');\n    const $ = cheerio.load(html);\n    expect($('script#inline')).to.have.lengthOf(1);\n    expect($('script#inline').toString()).to.include('let foo = \"bar\"');\n  });","file":"astro-directives.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"set:html","suites":["Directives"],"updatePoint":{"line":18,"column":14,"index":615},"line":18,"code":"  it('set:html', async () => {\n    const html = await fixture.readFile('/set-html/index.html');\n    const $ = cheerio.load(html);\n    expect($('#text')).to.have.lengthOf(1);\n    expect($('#text').text()).to.equal('a');\n    expect($('#zero')).to.have.lengthOf(1);\n    expect($('#zero').text()).to.equal('0');\n    expect($('#number')).to.have.lengthOf(1);\n    expect($('#number').text()).to.equal('1');\n    expect($('#undefined')).to.have.lengthOf(1);\n    expect($('#undefined').text()).to.equal('');\n    expect($('#null')).to.have.lengthOf(1);\n    expect($('#null').text()).to.equal('');\n    expect($('#false')).to.have.lengthOf(1);\n    expect($('#false').text()).to.equal('');\n    expect($('#true')).to.have.lengthOf(1);\n    expect($('#true').text()).to.equal('true');\n  });","file":"astro-directives.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Automatically prepends the standards mode doctype","suites":["Doctype"],"updatePoint":{"line":12,"column":55,"index":351},"line":12,"code":"  it('Automatically prepends the standards mode doctype', async () => {\n    const html = await fixture.readFile('/prepend/index.html'); // test that Doctype always included\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"No attributes added when doctype is provided by user","suites":["Doctype"],"updatePoint":{"line":17,"column":58,"index":582},"line":17,"code":"  it('No attributes added when doctype is provided by user', async () => {\n    const html = await fixture.readFile('/provided/index.html'); // test that Doctype always included\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Preserves user provided doctype","suites":["Doctype"],"updatePoint":{"line":22,"column":37,"index":793},"line":22,"code":"  it('Preserves user provided doctype', async () => {\n    const html = await fixture.readFile('/preserve/index.html'); // test that Doctype included was preserved\n\n    expect(html).to.match(new RegExp('^<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">', 'i'));\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"User provided doctype is case insensitive","suites":["Doctype"],"updatePoint":{"line":27,"column":47,"index":1124},"line":27,"code":"  it('User provided doctype is case insensitive', async () => {\n    const html = await fixture.readFile('/capital/index.html'); // test 1: Doctype left alone\n\n    expect(html).to.match(/^<!DOCTYPE html>/i); // test 2: no closing tag\n\n    expect(html).not.to.match(/<\\/!DOCTYPE>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doctype can be provided in a layout","suites":["Doctype"],"line":34,"code":"  it.skip('Doctype can be provided in a layout', async () => {","file":"astro-doctype.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Doctype is added in a layout without one","suites":["Doctype"],"updatePoint":{"line":42,"column":46,"index":1750},"line":42,"code":"  it('Doctype is added in a layout without one', async () => {\n    const html = await fixture.readFile('/in-layout-no-doctype/index.html'); // test that doctype is at the front\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doctype is added in a layout used with markdown pages","suites":["Doctype"],"updatePoint":{"line":47,"column":59,"index":1995},"line":47,"code":"  it('Doctype is added in a layout used with markdown pages', async () => {\n    const html = await fixture.readFile('/in-layout-article/index.html'); // test 1: doctype is at the front\n\n    expect(html).to.match(/^<!DOCTYPE html>/i); // test 2: A link inside of the head\n\n    const $ = cheerio.load(html);\n    expect($('head link')).to.have.lengthOf(1);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads packages that only run code in client","suites":["Dynamic components"],"updatePoint":{"line":12,"column":49,"index":356},"line":12,"code":"  it('Loads packages that only run code in client', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('script').length).to.eq(2);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:media hydrator","suites":["Dynamic components"],"updatePoint":{"line":17,"column":45,"index":555},"line":17,"code":"  it('Loads pages using client:media hydrator', async () => {\n    const root = new URL('http://example.com/media/index.html');\n    const html = await fixture.readFile('/media/index.html');\n    const $ = cheerio.load(html); // test 1: static value rendered\n\n    expect($('script').length).to.equal(2); // One for each\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Dynamic components"],"updatePoint":{"line":24,"column":44,"index":877},"line":24,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/client-only/index.html');\n    const $ = cheerio.load(html); // test 1: <astro-root> is empty.\n\n    expect($('<astro-root>').html()).to.equal(''); // test 2: correct script is being loaded.\n    // because of bundling, we don't have access to the source import,\n    // only the bundled import.\n\n    expect($('script').html()).to.include(`import setup from '../entry`);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"builds without throwing","suites":["Environment Variables"],"updatePoint":{"line":11,"column":29,"index":300},"line":11,"code":"  it('builds without throwing', async () => {\n    expect(true).to.equal(true);\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render public env and private env","suites":["Environment Variables"],"updatePoint":{"line":14,"column":44,"index":400},"line":14,"code":"  it('does render public env and private env', async () => {\n    let indexHtml = await fixture.readFile('/index.html');\n    expect(indexHtml).to.include('CLUB_33');\n    expect(indexHtml).to.include('BLUE_BAYOU');\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render destructured public env and private env","suites":["Environment Variables"],"updatePoint":{"line":19,"column":57,"index":632},"line":19,"code":"  it('does render destructured public env and private env', async () => {\n    let indexHtml = await fixture.readFile('/destructured/index.html');\n    expect(indexHtml).to.include('CLUB_33');\n    expect(indexHtml).to.include('BLUE_BAYOU');\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"includes public env in client-side JS","suites":["Environment Variables"],"updatePoint":{"line":24,"column":43,"index":863},"line":24,"code":"  it('includes public env in client-side JS', async () => {\n    let dirs = await fixture.readdir('/');\n    let found = false; // Look in all of the .js files to see if the public env is inlined.\n    // Testing this way prevents hardcoding expected js files.\n    // If we find it in any of them that's good enough to know its working.\n\n    await Promise.all(dirs.map(async path => {\n      if (path.endsWith('.js')) {\n        let js = await fixture.readFile(`/${path}`);\n\n        if (js.includes('BLUE_BAYOU')) {\n          found = true;\n        }\n      }\n    }));\n    expect(found).to.equal(true, 'found the public env variable in the JS build');\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does not include private env in client-side JS","suites":["Environment Variables"],"updatePoint":{"line":41,"column":52,"index":1523},"line":41,"code":"  it('does not include private env in client-side JS', async () => {\n    let dirs = await fixture.readdir('/');\n    let found = false; // Look in all of the .js files to see if the public env is inlined.\n    // Testing this way prevents hardcoding expected js files.\n    // If we find it in any of them that's good enough to know its NOT working.\n\n    await Promise.all(dirs.map(async path => {\n      if (path.endsWith('.js')) {\n        let js = await fixture.readFile(`/${path}`);\n\n        if (js.includes('CLUB_33')) {\n          found = true;\n        }\n      }\n    }));\n    expect(found).to.equal(false, 'found the private env variable in the JS build');\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load page","suites":["Expressions"],"updatePoint":{"line":12,"column":19,"index":316},"line":12,"code":"  it('Can load page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of strings","suites":["Expressions"],"updatePoint":{"line":20,"column":42,"index":575},"line":20,"code":"  it('Ignores characters inside of strings', async () => {\n    const html = await fixture.readFile('/strings/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of line comments","suites":["Expressions"],"updatePoint":{"line":28,"column":48,"index":848},"line":28,"code":"  it('Ignores characters inside of line comments', async () => {\n    const html = await fixture.readFile('/line-comments/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of multiline comments","suites":["Expressions"],"updatePoint":{"line":36,"column":53,"index":1132},"line":36,"code":"  it('Ignores characters inside of multiline comments', async () => {\n    const html = await fixture.readFile('/multiline-comments/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows multiple JSX children in mustache","suites":["Expressions"],"updatePoint":{"line":44,"column":46,"index":1414},"line":44,"code":"  it('Allows multiple JSX children in mustache', async () => {\n    const html = await fixture.readFile('/multiple-children/index.html');\n    expect(html).to.include('#f');\n    expect(html).not.to.include('#t');\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows <> Fragments in expressions","suites":["Expressions"],"updatePoint":{"line":49,"column":40,"index":1625},"line":49,"code":"  it('Allows <> Fragments in expressions', async () => {\n    const html = await fixture.readFile('/multiple-children/index.html');\n    const $ = cheerio.load(html);\n    expect($('#fragment').children()).to.have.lengthOf(3);\n    expect($('#fragment').children('#a')).to.have.lengthOf(1);\n    expect($('#fragment').children('#b')).to.have.lengthOf(1);\n    expect($('#fragment').children('#c')).to.have.lengthOf(1);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not render falsy values using &&","suites":["Expressions"],"updatePoint":{"line":57,"column":43,"index":2047},"line":57,"code":"  it('Does not render falsy values using &&', async () => {\n    const html = await fixture.readFile('/falsy/index.html');\n    const $ = cheerio.load(html); // test 1: Expected {true && <span id=\"true\" />} to render\n\n    expect($('#true')).to.have.lengthOf(1); // test 2: Expected {0 && \"VALUE\"} to render \"0\"\n\n    expect($('#zero').text()).to.equal('0'); // test 3: Expected {false && <span id=\"false\" />} not to render\n\n    expect($('#false')).to.have.lengthOf(0); // test 4: Expected {null && <span id=\"null\" />} not to render\n\n    expect($('#null')).to.have.lengthOf(0); // test 5: Expected {undefined && <span id=\"undefined\" />} not to render\n\n    expect($('#undefined')).to.have.lengthOf(0); // Inside of a component\n    // test 6: Expected {true && <span id=\"true\" />} to render\n\n    expect($('#frag-true')).to.have.lengthOf(1); // test 7: Expected {false && <span id=\"false\" />} not to render\n\n    expect($('#frag-false')).to.have.lengthOf(0); // test 8: Expected {null && <span id=\"null\" />} not to render\n\n    expect($('#frag-null')).to.have.lengthOf(0); // test 9: Expected {undefined && <span id=\"undefined\" />} not to render\n\n    expect($('#frag-undefined')).to.have.lengthOf(0);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Escapes HTML by default","suites":["Expressions"],"updatePoint":{"line":80,"column":29,"index":3231},"line":80,"code":"  it('Escapes HTML by default', async () => {\n    const html = await fixture.readFile('/escape/index.html');\n    const $ = cheerio.load(html);\n    expect($('body').children()).to.have.lengthOf(2);\n    expect($('body').html()).to.include('&lt;script&gt;console.log(\"pwnd\")&lt;/script&gt;');\n    expect($('#trusted')).to.have.lengthOf(1);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not double-escape HTML","suites":["Expressions"],"updatePoint":{"line":87,"column":33,"index":3578},"line":87,"code":"  it('Does not double-escape HTML', async () => {\n    const html = await fixture.readFile('/escape/index.html');\n    const $ = cheerio.load(html);\n    expect($('#single-escape').html()).to.equal('Astro &amp; Vite');\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is skipped","suites":[],"line":21,"code":"it.skip('is skipped', () => {});","file":"astro-external-files.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Shows static content","suites":["Dynamic component fallback"],"updatePoint":{"line":12,"column":26,"index":341},"line":12,"code":"  it('Shows static content', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#fallback').text()).to.equal('static');\n  });","file":"astro-fallback.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is only called once during build","suites":["getStaticPaths - build calls"],"updatePoint":{"line":12,"column":38,"index":375},"line":12,"code":"  it('is only called once during build', () => {\n    // useless expect; if build() throws in setup then this test fails\n    expect(true).to.equal(true);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static path - named params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":29,"column":57,"index":857},"line":29,"code":"  it('resolves 200 on matching static path - named params', async () => {\n    const res = await fixture.fetch('/pizza/provolone-sausage');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 404 on pattern match without static path - named params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":33,"column":70,"index":1053},"line":33,"code":"  it('resolves 404 on pattern match without static path - named params', async () => {\n    const res = await fixture.fetch('/pizza/provolone-pineapple');\n    expect(res.status).to.equal(404);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static path - rest params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":37,"column":56,"index":1237},"line":37,"code":"  it('resolves 200 on matching static path - rest params', async () => {\n    const res = await fixture.fetch('/pizza/grimaldis/new-york');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 404 on pattern match without static path - rest params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":41,"column":69,"index":1433},"line":41,"code":"  it('resolves 404 on pattern match without static path - rest params', async () => {\n    const res = await fixture.fetch('/pizza/pizza-hut');\n    expect(res.status).to.equal(404);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on mathcing static path - string params","suites":["getStaticPaths - route params type validation"],"updatePoint":{"line":55,"column":58,"index":1879},"line":55,"code":"  it('resolves 200 on mathcing static path - string params', async () => {\n    // route provided with { params: { year: \"2022\", slug: \"post-2\" }}\n    const res = await fixture.fetch('/blog/2022/post-1');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static path - numeric params","suites":["getStaticPaths - route params type validation"],"updatePoint":{"line":60,"column":59,"index":2128},"line":60,"code":"  it('resolves 200 on matching static path - numeric params', async () => {\n    // route provided with { params: { year: 2022, slug: \"post-2\" }}\n    const res = await fixture.fetch('/blog/2022/post-2');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.url","suites":["Astro.*","dev"],"updatePoint":{"line":22,"column":25,"index":605},"line":22,"code":"    it('Astro.request.url', async () => {\n      expect($('#pathname').text()).to.equal('/blog/');\n      expect($('#searchparams').text()).to.equal('{}');\n      expect($('#child-pathname').text()).to.equal('/blog/');\n      expect($('#nested-child-pathname').text()).to.equal('/blog/');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.url","suites":["Astro.*","build"],"updatePoint":{"line":33,"column":25,"index":994},"line":33,"code":"    it('Astro.request.url', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#pathname').text()).to.equal('/blog/');\n      expect($('#searchparams').text()).to.equal('{}');\n      expect($('#child-pathname').text()).to.equal('/blog/');\n      expect($('#nested-child-pathname').text()).to.equal('/blog/');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.canonicalURL","suites":["Astro.*","build"],"updatePoint":{"line":41,"column":26,"index":1382},"line":41,"code":"    it('Astro.canonicalURL', async () => {\n      // given a URL, expect the following canonical URL\n      const canonicalURLs = {\n        '/index.html': 'https://mysite.dev/blog/',\n        '/post/post/index.html': 'https://mysite.dev/blog/post/post/',\n        '/posts/1/index.html': 'https://mysite.dev/blog/posts/',\n        '/posts/2/index.html': 'https://mysite.dev/blog/posts/2/'\n      };\n\n      for (const [url, canonicalURL] of Object.entries(canonicalURLs)) {\n        const html = await fixture.readFile(url);\n        const $ = cheerio.load(html);\n        expect($('link[rel=\"canonical\"]').attr('href')).to.equal(canonicalURL);\n      }\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.site","suites":["Astro.*","build"],"updatePoint":{"line":56,"column":18,"index":2024},"line":56,"code":"    it('Astro.site', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#site').attr('href')).to.equal('https://mysite.dev/blog/');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.glob() correctly returns an array of all posts","suites":["Astro.*","build"],"updatePoint":{"line":61,"column":60,"index":2279},"line":61,"code":"    it('Astro.glob() correctly returns an array of all posts', async () => {\n      const html = await fixture.readFile('/posts/1/index.html');\n      const $ = cheerio.load(html);\n      expect($('.post-url').attr('href')).to.equal('/blog/post/post-2');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Compiles styles for Astro components within imported markdown","suites":["Imported markdown CSS","build"],"updatePoint":{"line":25,"column":69,"index":920},"line":25,"code":"    it('Compiles styles for Astro components within imported markdown', () => {\n      const importedAstroComponent = $(`#${IMPORTED_ASTRO_COMPONENT_ID}`)?.[0];\n      expect(importedAstroComponent?.name).to.equal('h2');\n      const cssClass = $(importedAstroComponent).attr('class')?.split(/\\s+/)?.[0];\n      expect(bundledCSS).to.match(new RegExp(`h2.${cssClass}{color:#00f}`));\n    });","file":"astro-markdown-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Compiles styles for Astro components within imported markdown","suites":["Imported markdown CSS","dev"],"updatePoint":{"line":43,"column":69,"index":1613},"line":43,"code":"    it('Compiles styles for Astro components within imported markdown', async () => {\n      const importedAstroComponent = $(`#${IMPORTED_ASTRO_COMPONENT_ID}`)?.[0];\n      expect(importedAstroComponent?.name).to.equal('h2');\n      const cssClass = $(importedAstroComponent).attr('class')?.split(/\\s+/)?.[0];\n      const astroCSSHREF = $('link[rel=stylesheet][href^=/src/components/Visual.astro]').attr('href');\n      const css = await fixture.fetch(astroCSSHREF.replace(/^\\/?/, '/')).then(res => res.text());\n      expect(css).to.match(new RegExp(`h2.${cssClass}{color:#00f}`));\n    });","file":"astro-markdown-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not render the draft post","suites":["Astro Markdown with draft posts disabled"],"updatePoint":{"line":12,"column":36,"index":373},"line":12,"code":"  it('Does not render the draft post', async () => {\n    try {\n      await fixture.readFile('/wip/index.html');\n    } catch (err) {\n      expect(err.code).to.equal('ENOENT');\n    }\n  });","file":"astro-markdown-drafts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders the draft post","suites":["Astro Markdown with draft posts enabled"],"updatePoint":{"line":31,"column":28,"index":825},"line":31,"code":"  it('Renders the draft post', async () => {\n    const html = await fixture.readFile('/wip/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').length).to.be.ok;\n    expect($('h1').text()).to.equal('WIP');\n  });","file":"astro-markdown-drafts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with plugins","suites":["Astro Markdown plugins"],"updatePoint":{"line":23,"column":38,"index":739},"line":23,"code":"  it('Can render markdown with plugins', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: Added a TOC\n\n    expect($('.toc')).to.have.lengthOf(1); // teste 2: Added .title to h1\n\n    expect($('#hello-world').hasClass('title')).to.equal(true);\n  });","file":"astro-markdown-plugins.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render Astro <Markdown> with plugins","suites":["Astro Markdown plugins"],"updatePoint":{"line":31,"column":46,"index":1061},"line":31,"code":"  it('Can render Astro <Markdown> with plugins', async () => {\n    const html = await fixture.readFile('/astro/index.html');\n    const $ = cheerio.load(html); // test 1: Added a TOC\n\n    expect($('.toc')).to.have.lengthOf(1); // teste 2: Added .title to h1\n\n    expect($('#hello-world').hasClass('title')).to.equal(true);\n  });","file":"astro-markdown-plugins.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with shiki","suites":["Astro Markdown Shiki","Render shiki"],"updatePoint":{"line":13,"column":38,"index":410},"line":13,"code":"    it('Can render markdown with shiki', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html); // There should be no HTML from Prism\n\n      expect($('.token')).to.have.lengthOf(0);\n      expect($('pre')).to.have.lengthOf(2);\n      expect($('pre').hasClass('astro-code')).to.equal(true);\n      expect($('pre').attr().style).to.equal('background-color: #0d1117; overflow-x: auto;');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render Astro <Markdown> with shiki","suites":["Astro Markdown Shiki","Render shiki"],"updatePoint":{"line":22,"column":46,"index":861},"line":22,"code":"    it('Can render Astro <Markdown> with shiki', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html); // There should be no HTML from Prism\n\n      expect($('.token')).to.have.lengthOf(0);\n      expect($('pre')).to.have.lengthOf(2);\n      expect($('span.line')).to.have.lengthOf(2);\n      expect($('span.line').get(0).children).to.have.lengthOf(1);\n      expect($('span.line').get(1).children).to.have.lengthOf(5);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render diff syntax with \"user-select: none\"","suites":["Astro Markdown Shiki","Render shiki"],"updatePoint":{"line":32,"column":55,"index":1353},"line":32,"code":"    it('Can render diff syntax with \"user-select: none\"', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const diffBlockHtml = $('pre').last().html();\n      expect(diffBlockHtml).to.contain(`<span style=\"user-select: none;\">+</span>`);\n      expect(diffBlockHtml).to.contain(`<span style=\"user-select: none;\">-</span>`);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Themes","Integrated theme"],"updatePoint":{"line":49,"column":23,"index":2005},"line":49,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #ffffff; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Themes","Integrated theme"],"updatePoint":{"line":56,"column":32,"index":2368},"line":56,"code":"      it('<Markdown /> component', async () => {\n        const html = await fixture.readFile('/astro/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #ffffff; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Themes","Custom theme"],"updatePoint":{"line":72,"column":23,"index":2981},"line":72,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #FDFDFE; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Themes","Custom theme"],"updatePoint":{"line":79,"column":32,"index":3344},"line":79,"code":"      it('<Markdown /> component', async () => {\n        const html = await fixture.readFile('/astro/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #FDFDFE; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Custom langs"],"updatePoint":{"line":96,"column":21,"index":3931},"line":96,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const segments = $('.line').get(6).children;\n      expect(segments).to.have.lengthOf(3);\n      expect(segments[0].attribs.style).to.be.equal('color: #C9D1D9');\n      expect(segments[1].attribs.style).to.be.equal('color: #79C0FF');\n      expect(segments[2].attribs.style).to.be.equal('color: #C9D1D9');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Custom langs"],"updatePoint":{"line":105,"column":30,"index":4388},"line":105,"code":"    it('<Markdown /> component', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html);\n      const segments = $('.line').get(6).children;\n      expect(segments).to.have.lengthOf(3);\n      expect(segments[0].attribs.style).to.be.equal('color: #C9D1D9');\n      expect(segments[1].attribs.style).to.be.equal('color: #79C0FF');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Wrap","wrap = true"],"updatePoint":{"line":124,"column":23,"index":5154},"line":124,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').attr('style')).to.equal(style);\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Wrap","wrap = true"],"updatePoint":{"line":130,"column":32,"index":5413},"line":130,"code":"      it('<Markdown /> component', async () => {\n        const html = await fixture.readFile('/astro/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre').get(0).attribs.style).to.equal(style);\n        expect($('pre').get(1).attribs.style).to.equal(style);\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","wrap = false"],"updatePoint":{"line":147,"column":21,"index":5991},"line":147,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1);\n      expect($('pre').attr('style')).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","wrap = false"],"updatePoint":{"line":153,"column":30,"index":6238},"line":153,"code":"    it('<Markdown /> component', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre').get(0).attribs.style).to.equal(style);\n      expect($('pre').get(1).attribs.style).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","wrap = null"],"updatePoint":{"line":169,"column":21,"index":6777},"line":169,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1);\n      expect($('pre').attr('style')).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","wrap = null"],"updatePoint":{"line":175,"column":30,"index":7024},"line":175,"code":"    it('<Markdown /> component', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre').get(0).attribs.style).to.equal(style);\n      expect($('pre').get(1).attribs.style).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: always","suites":["Astro Markdown URL","With subpath"],"updatePoint":{"line":7,"column":29,"index":285},"line":7,"code":"    it('trailingSlash: always', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/with-subpath-always/', import.meta.url),\n        base: '/my-cool-base',\n        trailingSlash: 'always'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl + '/');\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: never","suites":["Astro Markdown URL","With subpath"],"updatePoint":{"line":19,"column":28,"index":780},"line":19,"code":"    it('trailingSlash: never', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/with-subpath-never/', import.meta.url),\n        base: '/my-cool-base',\n        trailingSlash: 'never'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: ignore","suites":["Astro Markdown URL","With subpath"],"updatePoint":{"line":31,"column":29,"index":1268},"line":31,"code":"    it('trailingSlash: ignore', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/with-subpath-ignore/', import.meta.url),\n        base: '/my-cool-base',\n        trailingSlash: 'ignore'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: always","suites":["Astro Markdown URL","Without subpath"],"updatePoint":{"line":46,"column":29,"index":1856},"line":46,"code":"    it('trailingSlash: always', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/without-subpath-always/', import.meta.url),\n        trailingSlash: 'always'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl + '/');\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: never","suites":["Astro Markdown URL","Without subpath"],"updatePoint":{"line":57,"column":28,"index":2323},"line":57,"code":"    it('trailingSlash: never', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/without-subpath-never/', import.meta.url),\n        trailingSlash: 'never'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: ignore","suites":["Astro Markdown URL","Without subpath"],"updatePoint":{"line":68,"column":29,"index":2783},"line":68,"code":"    it('trailingSlash: ignore', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/without-subpath-ignore/', import.meta.url),\n        trailingSlash: 'ignore'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load markdown pages with Astro","suites":["Astro Markdown"],"updatePoint":{"line":12,"column":40,"index":344},"line":12,"code":"  it('Can load markdown pages with Astro', async () => {\n    const html = await fixture.readFile('/post/index.html');\n    const $ = cheerio.load(html); // test 1: There is a div added in markdown\n\n    expect($('#first').length).to.be.ok; // test 2: There is a div added via a component from markdown\n\n    expect($('#test').length).to.be.ok;\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can parse JSX expressions in markdown pages","suites":["Astro Markdown"],"updatePoint":{"line":20,"column":49,"index":700},"line":20,"code":"  it('Can parse JSX expressions in markdown pages', async () => {\n    const html = await fixture.readFile('/jsx-expressions/index.html');\n    const $ = cheerio.load(html);\n    expect($('h2').html()).to.equal('Blog Post with JSX expressions');\n    expect($('p').first().html()).to.equal('JSX at the start of the line!');\n\n    for (let listItem of ['test-1', 'test-2', 'test-3']) {\n      expect($(`#${listItem}`).html()).to.equal(`\\n${listItem}\\n`);\n    }\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load more complex jsxy stuff","suites":["Astro Markdown"],"updatePoint":{"line":30,"column":38,"index":1149},"line":30,"code":"  it('Can load more complex jsxy stuff', async () => {\n    const html = await fixture.readFile('/complex/index.html');\n    const $ = cheerio.load(html);\n    expect($('#test').text()).to.equal('Hello world');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Empty code blocks do not fail","suites":["Astro Markdown"],"updatePoint":{"line":35,"column":35,"index":1360},"line":35,"code":"  it('Empty code blocks do not fail', async () => {\n    const html = await fixture.readFile('/empty-code/index.html');\n    const $ = cheerio.load(html); // test 1: There is not a `<code>` in the codeblock\n\n    expect($('pre')[0].children).to.have.lengthOf(1); // test 2: The empty `<pre>` failed to render\n\n    expect($('pre')[1].children).to.have.lengthOf(0);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Runs code blocks through syntax highlighter","suites":["Astro Markdown"],"updatePoint":{"line":43,"column":49,"index":1741},"line":43,"code":"  it('Runs code blocks through syntax highlighter', async () => {\n    const html = await fixture.readFile('/code/index.html');\n    const $ = cheerio.load(html); // test 1: There are child spans in code blocks\n\n    expect($('code span').length).greaterThan(0);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Scoped styles should not break syntax highlight","suites":["Astro Markdown"],"updatePoint":{"line":49,"column":53,"index":2011},"line":49,"code":"  it('Scoped styles should not break syntax highlight', async () => {\n    const html = await fixture.readFile('/scopedStyles-code/index.html');\n    const $ = cheerio.load(html); // test 1: <pre> tag has correct shiki class\n\n    expect($('pre').hasClass('astro-code')).to.equal(true); // test 2: inline styles are still applied\n\n    expect($('pre').is('[style]')).to.equal(true); // test 3: There are styled child spans in code blocks\n\n    expect($('pre code span').length).to.be.greaterThan(0);\n    expect($('pre code span').is('[style]')).to.equal(true);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Scoped styles should be applied to syntax highlighted lines","suites":["Astro Markdown"],"updatePoint":{"line":65,"column":65,"index":2662},"line":65,"code":"  it('Scoped styles should be applied to syntax highlighted lines', async () => {\n    const html = await fixture.readFile('/scopedStyles-code/index.html');\n    const $ = cheerio.load(html); // test 1: the \"pre\" tag receives scoped style\n\n    const preClassList = $('pre').attr('class').split(/\\s+/);\n    expect(preClassList.length).to.equal(2);\n    const preAstroClass = preClassList.find(isAstroScopedClass);\n    expect(Boolean(preAstroClass)).to.equal(true); // test 2: each \"span\" line receives scoped style\n\n    const spanClassList = $('pre code span').attr('class').split(/\\s+/);\n    expect(spanClassList.length).to.equal(2);\n    const spanAstroClass = spanClassList.find(isAstroScopedClass);\n    expect(Boolean(spanAstroClass)).to.equal(true);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders correctly when deeply nested on a page","suites":["Astro Markdown"],"updatePoint":{"line":79,"column":52,"index":3405},"line":79,"code":"  it('Renders correctly when deeply nested on a page', async () => {\n    const html = await fixture.readFile('/deep/index.html');\n    const $ = cheerio.load(html); // test 1: Rendered all children\n\n    expect($('#deep').children()).to.have.lengthOf(3); // tests 2–4: Only rendered title in each section\n\n    expect($('.a').children()).to.have.lengthOf(1);\n    expect($('.b').children()).to.have.lengthOf(1);\n    expect($('.c').children()).to.have.lengthOf(1); // test 5–7: Rendered title in correct section\n\n    expect($('.a > h2').text()).to.equal('A');\n    expect($('.b > h2').text()).to.equal('B');\n    expect($('.c > h2').text()).to.equal('C');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders dynamic content though the content attribute","suites":["Astro Markdown"],"updatePoint":{"line":93,"column":58,"index":4066},"line":93,"code":"  it('Renders dynamic content though the content attribute', async () => {\n    const html = await fixture.readFile('/external/index.html');\n    const $ = cheerio.load(html); // test 1: Rendered markdown content\n\n    expect($('#outer')).to.have.lengthOf(1); // test 2: Nested markdown content\n\n    expect($('#inner')).to.have.lengthOf(1); // test 3: Scoped class passed down\n\n    expect($('#inner').is('[class]')).to.equal(true);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders curly braces correctly","suites":["Astro Markdown"],"updatePoint":{"line":103,"column":36,"index":4479},"line":103,"code":"  it('Renders curly braces correctly', async () => {\n    const html = await fixture.readFile('/braces/index.html');\n    const $ = cheerio.load(html); // test 1: Rendered curly braces markdown content\n\n    expect($('code')).to.have.lengthOf(3); // test 2: Rendered curly braces markdown content\n\n    expect($('code:first-child').text()).to.equal('({})'); // test 3: Rendered curly braces markdown content\n\n    expect($('code:nth-child(2)').text()).to.equal('{...props}'); // test 4: Rendered curly braces markdown content\n\n    expect($('code:last-child').text()).to.equal('{/* JavaScript */}');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not close parent early when using content attribute (#494)","suites":["Astro Markdown"],"updatePoint":{"line":115,"column":69,"index":5112},"line":115,"code":"  it('Does not close parent early when using content attribute (#494)', async () => {\n    const html = await fixture.readFile('/close/index.html');\n    const $ = cheerio.load(html); // test <Markdown content /> closed div#target early\n\n    expect($('#target').children()).to.have.lengthOf(2);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with --- for horizontal rule","suites":["Astro Markdown"],"updatePoint":{"line":121,"column":54,"index":5396},"line":121,"code":"  it('Can render markdown with --- for horizontal rule', async () => {\n    const html = await fixture.readFile('/dash/index.html');\n    expect(!!html).to.equal(true);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown content prop (#1259)","suites":["Astro Markdown"],"updatePoint":{"line":125,"column":46,"index":5561},"line":125,"code":"  it('Can render markdown content prop (#1259)', async () => {\n    const html = await fixture.readFile('/content/index.html');\n    const $ = cheerio.load(html); // test Markdown rendered correctly via content prop\n\n    expect($('h1').text()).to.equal('Foo');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"doesn't occurs TypeError when no elements","suites":["Astro Markdown"],"updatePoint":{"line":131,"column":47,"index":5827},"line":131,"code":"  it(\"doesn't occurs TypeError when no elements\", async () => {\n    const html = await fixture.readFile('/no-elements/index.html'); // render html without error\n\n    expect(html).to.be.ok;\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can render nested list correctly","suites":["Astro Markdown"],"updatePoint":{"line":136,"column":38,"index":6013},"line":136,"code":"  it('can render nested list correctly', async () => {\n    const html = await fixture.readFile('/nested-list/index.html');\n    const $ = cheerio.load(html);\n    /**\n     * - list\n     *  - list\n     */\n\n    expect($('#target > ul > li').children()).to.have.lengthOf(1);\n    expect($('#target > ul > li > ul > li').text()).to.equal('nested list');\n    /**\n     * 1. Hello\n     *  1. nested hello\n     */\n\n    expect($('#target > ol > li').children()).to.have.lengthOf(1);\n    expect($('#target > ol > li > ol > li').text()).to.equal('nested hello');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"outputs","suites":["build format"],"updatePoint":{"line":14,"column":13,"index":335},"line":14,"code":"  it('outputs', async () => {\n    expect(await fixture.readFile('/client.html')).to.be.ok;\n    expect(await fixture.readFile('/nested-md.html')).to.be.ok;\n    expect(await fixture.readFile('/nested-astro.html')).to.be.ok;\n  });","file":"astro-pageDirectoryUrl.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can find page with \"index\" at the end file name","suites":["Pages"],"updatePoint":{"line":12,"column":53,"index":345},"line":12,"code":"  it('Can find page with \"index\" at the end file name', async () => {\n    const html = await fixture.readFile('/posts/name-with-index/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('Name with index');\n  });","file":"astro-pages.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"optional root page","suites":["Pagination"],"updatePoint":{"line":14,"column":24,"index":382},"line":14,"code":"  it('optional root page', async () => {\n    for (const file of ['/posts/optional-root-page/index.html', '/posts/optional-root-page/2/index.html', '/posts/optional-root-page/3/index.html']) {\n      expect(await fixture.readFile(file)).to.be.ok;\n    }\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"named root page","suites":["Pagination"],"updatePoint":{"line":19,"column":21,"index":636},"line":19,"code":"  it('named root page', async () => {\n    for (const file of ['/posts/named-root-page/1/index.html', '/posts/named-root-page/2/index.html', '/posts/named-root-page/3/index.html']) {\n      expect(await fixture.readFile(file)).to.be.ok;\n    }\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"multiple params","suites":["Pagination"],"updatePoint":{"line":24,"column":21,"index":883},"line":24,"code":"  it('multiple params', async () => {\n    const params = [{\n      color: 'red',\n      p: '1'\n    }, {\n      color: 'blue',\n      p: '1'\n    }, {\n      color: 'blue',\n      p: '2'\n    }];\n    await Promise.all(params.map(async ({\n      color,\n      p\n    }) => {\n      const html = await fixture.readFile(`/posts/${color}/${p}/index.html`);\n      const $ = cheerio.load(html);\n      expect($('#page-a').text()).to.equal(p);\n      expect($('#page-b').text()).to.equal(p);\n      expect($('#filter').text()).to.equal(color);\n    }));\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"injects Astro styles and scripts","suites":["Partial HTML"],"updatePoint":{"line":16,"column":38,"index":444},"line":16,"code":"  it('injects Astro styles and scripts', async () => {\n    const html = await fixture.fetch('/astro').then(res => res.text());\n    const $ = cheerio.load(html); // test 1: Doctype first\n\n    expect(html).to.match(/^<!DOCTYPE html/); // test 2: correct CSS present\n\n    const link = $('link').attr('href');\n    const css = await fixture.fetch(link, {\n      headers: {\n        accept: 'text/css'\n      }\n    }).then(res => res.text());\n    expect(css).to.match(/\\.astro-[^{]+{color:red}/);\n  });","file":"astro-partial-html.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"injects framework styles","suites":["Partial HTML"],"updatePoint":{"line":30,"column":30,"index":930},"line":30,"code":"  it('injects framework styles', async () => {\n    const html = await fixture.fetch('/jsx').then(res => res.text());\n    const $ = cheerio.load(html); // test 1: Doctype first\n\n    expect(html).to.match(/^<!DOCTYPE html/); // test 2: link tag present\n\n    const href = $('link[rel=stylesheet][data-astro-injected]').attr('href');\n    expect(href).to.be.ok;\n  });","file":"astro-partial-html.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"css and js files do not get bundled","suites":["Public"],"updatePoint":{"line":11,"column":41,"index":299},"line":11,"code":"  it('css and js files do not get bundled', async () => {\n    let indexHtml = await fixture.readFile('/index.html');\n    expect(indexHtml).to.include('<script src=\"/example.js\"></script>');\n    expect(indexHtml).to.include('<link href=\"/example.css\" rel=\"stylesheet\">');\n    expect(indexHtml).to.include('<img src=\"/images/twitter.png\">');\n  });","file":"astro-public.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works from a page","suites":["Returning responses"],"updatePoint":{"line":19,"column":23,"index":507},"line":19,"code":"  it('Works from a page', async () => {\n    let response = await fixture.fetch('/not-found');\n    expect(response.status).to.equal(404);\n  });","file":"astro-response.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works from a component","suites":["Returning responses"],"updatePoint":{"line":23,"column":28,"index":655},"line":23,"code":"  it('Works from a component', async () => {\n    let response = await fixture.fetch('/not-found-component');\n    expect(response.status).to.equal(404);\n  });","file":"astro-response.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Moves external scripts up","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":18,"column":31,"index":451},"line":18,"code":"  it('Moves external scripts up', async () => {\n    const html = await fixture.readFile('/external/index.html');\n    const $ = cheerio.load(html);\n    expect($('head script[type=\"module\"]:not([src=\"/regular_script.js\"])')).to.have.lengthOf(1);\n    expect($('body script')).to.have.lengthOf(0);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Moves inline scripts up","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":24,"column":29,"index":749},"line":24,"code":"  it('Moves inline scripts up', async () => {\n    const html = await fixture.readFile('/inline/index.html');\n    const $ = cheerio.load(html);\n    expect($('head script[type=\"module\"]')).to.have.lengthOf(1);\n    expect($('body script')).to.have.lengthOf(0);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Inline page builds the scripts to a single bundle","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":30,"column":55,"index":1039},"line":30,"code":"  it('Inline page builds the scripts to a single bundle', async () => {\n    // Inline page\n    let inline = await fixture.readFile('/inline/index.html');\n    let $ = cheerio.load(inline); // test 1: Just one entry module\n\n    expect($('script')).to.have.lengthOf(1); // test 2: attr removed\n\n    expect($('script').attr('data-astro')).to.equal(undefined);\n    const entryURL = $('script').attr('src');\n    const inlineEntryJS = await fixture.readFile(entryURL); // test 3: the JS exists\n\n    expect(inlineEntryJS).to.be.ok;\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page builds the hoisted scripts to a single bundle","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":43,"column":65,"index":1579},"line":43,"code":"  it('External page builds the hoisted scripts to a single bundle', async () => {\n    let external = await fixture.readFile('/external/index.html');\n    let $ = cheerio.load(external); // test 1: there are two scripts\n\n    expect($('script')).to.have.lengthOf(2);\n    let el = $('script').get(1);\n    let entryURL = $(el).attr('src');\n    let externalEntryJS = await fixture.readFile(entryURL); // test 2: the JS exists\n\n    expect(externalEntryJS).to.be.ok;\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page using non-hoist scripts that are modules are built standalone","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":54,"column":81,"index":2060},"line":54,"code":"  it('External page using non-hoist scripts that are modules are built standalone', async () => {\n    let external = await fixture.readFile('/external-no-hoist/index.html');\n    let $ = cheerio.load(external); // test 1: there is 1 scripts\n\n    expect($('script')).to.have.lengthOf(1); // test 2: inside assets\n\n    let entryURL = $('script').attr('src');\n    expect(entryURL.includes('assets/')).to.equal(true);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page using non-hoist scripts that are not modules are built standalone","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":63,"column":85,"index":2483},"line":63,"code":"  it('External page using non-hoist scripts that are not modules are built standalone', async () => {\n    let external = await fixture.readFile('/external-no-hoist-classic/index.html');\n    let $ = cheerio.load(external); // test 1: there is 1 scripts\n\n    expect($('script')).to.have.lengthOf(1); // test 2: inside assets\n\n    let entryURL = $('script').attr('src');\n    expect(entryURL.includes('assets/')).to.equal(true);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Basic named slots work","suites":["Slots"],"updatePoint":{"line":12,"column":28,"index":320},"line":12,"code":"  it('Basic named slots work', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('A');\n    expect($('#b').text().trim()).to.equal('B');\n    expect($('#c').text().trim()).to.equal('C');\n    expect($('#default').text().trim()).to.equal('Default');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Dynamic named slots work","suites":["Slots"],"updatePoint":{"line":20,"column":30,"index":671},"line":20,"code":"  it('Dynamic named slots work', async () => {\n    const html = await fixture.readFile('/dynamic/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('A');\n    expect($('#b').text().trim()).to.equal('B');\n    expect($('#c').text().trim()).to.equal('C');\n    expect($('#default').text().trim()).to.equal('Default');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots render fallback content by default","suites":["Slots"],"updatePoint":{"line":28,"column":46,"index":1046},"line":28,"code":"  it('Slots render fallback content by default', async () => {\n    const html = await fixture.readFile('/fallback/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots override fallback content","suites":["Slots"],"updatePoint":{"line":33,"column":37,"index":1252},"line":33,"code":"  it('Slots override fallback content', async () => {\n    const html = await fixture.readFile('/fallback-override/index.html');\n    const $ = cheerio.load(html);\n    expect($('#override')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots work with multiple elements","suites":["Slots"],"updatePoint":{"line":38,"column":39,"index":1470},"line":38,"code":"  it('Slots work with multiple elements', async () => {\n    const html = await fixture.readFile('/multiple/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('ABC');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots work on Components","suites":["Slots"],"updatePoint":{"line":43,"column":30,"index":1673},"line":43,"code":"  it('Slots work on Components', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html); // test 1: #a renders\n\n    expect($('#a')).to.have.lengthOf(1); // test 2: Slotted component into #a\n\n    expect($('#a').children('astro-component')).to.have.lengthOf(1); // test 3: Slotted component into default slot\n\n    expect($('#default').children('astro-component')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots API work on Components","suites":["Slots"],"updatePoint":{"line":53,"column":34,"index":2124},"line":53,"code":"  it('Slots API work on Components', async () => {\n    // IDs will exist whether the slots are filled or not\n    {\n      const html = await fixture.readFile('/slottedapi-default/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(1);\n      expect($('#b')).to.have.lengthOf(1);\n      expect($('#c')).to.have.lengthOf(1);\n      expect($('#default')).to.have.lengthOf(1);\n    } // IDs will not exist because the slots are not filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-empty/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(0);\n      expect($('#b')).to.have.lengthOf(0);\n      expect($('#c')).to.have.lengthOf(0);\n      expect($('#default')).to.have.lengthOf(0);\n    } // IDs will exist because the slots are filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-filled/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(1);\n      expect($('#b')).to.have.lengthOf(1);\n      expect($('#c')).to.have.lengthOf(1);\n      expect($('#default')).to.have.lengthOf(0); // the default slot is not filled\n    } // Default ID will exist because the default slot is filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-default-filled/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(0);\n      expect($('#b')).to.have.lengthOf(0);\n      expect($('#c')).to.have.lengthOf(0);\n      expect($('#default')).to.have.lengthOf(1); // the default slot is filled\n    }\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots.render() API","suites":["Slots"],"updatePoint":{"line":91,"column":24,"index":3674},"line":91,"code":"  it('Slots.render() API', async () => {\n    // Simple imperative slot render\n    {\n      const html = await fixture.readFile('/slottedapi-render/index.html');\n      const $ = cheerio.load(html);\n      expect($('#render')).to.have.lengthOf(1);\n      expect($('#render').text()).to.equal('render');\n    } // Child function render without args\n\n    {\n      const html = await fixture.readFile('/slottedapi-render/index.html');\n      const $ = cheerio.load(html);\n      expect($('#render-fn')).to.have.lengthOf(1);\n      expect($('#render-fn').text()).to.equal('render-fn');\n    } // Child function render with args\n\n    {\n      const html = await fixture.readFile('/slottedapi-render/index.html');\n      const $ = cheerio.load(html);\n      expect($('#render-args')).to.have.lengthOf(1);\n      expect($('#render-args').text()).to.equal('render-args');\n    }\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro","suites":["astro cli"],"updatePoint":{"line":12,"column":11,"index":484},"line":12,"code":"  it('astro', async () => {\n    const proc = await cli();\n    expect(proc.stdout).to.include('Futuristic web development tool');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro --version","suites":["astro cli"],"updatePoint":{"line":16,"column":21,"index":629},"line":16,"code":"  it('astro --version', async () => {\n    const pkgURL = new URL('../package.json', import.meta.url);\n    const pkgVersion = await fs.readFile(pkgURL, 'utf8').then(data => JSON.parse(data).version);\n    const proc = await cli('--version');\n    expect(proc.stdout).to.include(pkgVersion);\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro build","suites":["astro cli"],"updatePoint":{"line":22,"column":17,"index":919},"line":22,"code":"  it('astro build', async () => {\n    const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n    const proc = await cli('build', '--root', fileURLToPath(projectRootURL));\n    expect(proc.stdout).to.include('Complete');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro dev welcome","suites":["astro cli"],"updatePoint":{"line":27,"column":23,"index":1171},"line":27,"code":"  it('astro dev welcome', async () => {\n    const pkgURL = new URL('../package.json', import.meta.url);\n    const pkgVersion = await fs.readFile(pkgURL, 'utf8').then(data => JSON.parse(data).version);\n    const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n    const proc = cli('dev', '--root', fileURLToPath(projectRootURL));\n    const {\n      messages\n    } = await parseCliDevStart(proc);\n    expect(messages[0]).to.contain('astro');\n    expect(messages[0]).to.contain(pkgVersion);\n    expect(messages[0]).to.contain('started in');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro    - network log","suites":["astro cli"],"updatePoint":{"line":42,"column":63,"index":1932},"line":42,"code":"      it(`astro ${cmd} ${flag} ${flagValue ?? ''} - network log`, async () => {\n        const {\n          local,\n          network\n        } = await cliServerLogSetupWithFixture(flagValue ? [flag, flagValue] : [flag], cmd);\n        expect(local).to.not.be.undefined;\n        expect(network).to.not.be.undefined;\n        const localURL = new URL(local);\n        const networkURL = new URL(network);\n        expect(localURL.hostname).to.be.equal(flagValue ?? 'localhost', `Expected local URL to be on localhost`); // Note: our tests run in parallel so this could be 3000+!\n\n        expect(Number.parseInt(localURL.port)).to.be.greaterThanOrEqual(3000, `Expected Port to be >= 3000`);\n        expect(networkURL.port).to.be.equal(localURL.port, `Expected local and network ports to be equal`);\n        expect(isIPv4(networkURL.hostname)).to.be.equal(true, `Expected network URL to respect --host flag`);\n      });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro    - host to expose","suites":["astro cli"],"updatePoint":{"line":60,"column":60,"index":2944},"line":60,"code":"      it(`astro ${cmd} ${flag} ${flagValue} - host to expose`, async () => {\n        const {\n          local,\n          network\n        } = await cliServerLogSetupWithFixture([flag, flagValue], cmd);\n        expect(local).to.not.be.undefined;\n        expect(network).to.not.be.undefined;\n        const localURL = new URL(local);\n        expect(localURL.hostname).to.be.equal('localhost', `Expected local URL to be on localhost`);\n        expect(() => new URL(networkURL)).to.throw();\n      });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro    - no network log","suites":["astro cli"],"updatePoint":{"line":74,"column":60,"index":3583},"line":74,"code":"      it(`astro ${cmd} ${flag} ${flagValue} - no network log`, async () => {\n        const {\n          local,\n          network\n        } = await cliServerLogSetupWithFixture([flag, flagValue], cmd);\n        expect(local).to.not.be.undefined;\n        expect(network).to.be.undefined;\n        const localURL = new URL(local);\n        expect(localURL.hostname).to.be.equal(flagValue, `Expected local URL to be on localhost`);\n      });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"empty user config is valid","suites":["Config Validation"],"updatePoint":{"line":7,"column":32,"index":289},"line":7,"code":"  it('empty user config is valid', async () => {\n    expect(() => validateConfig({}, process.cwd()).catch(err => err)).not.to.throw();\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Zod errors are returned when invalid config is used","suites":["Config Validation"],"updatePoint":{"line":10,"column":57,"index":455},"line":10,"code":"  it('Zod errors are returned when invalid config is used', async () => {\n    const configError = await validateConfig({\n      site: 42\n    }, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"A validation error can be formatted correctly","suites":["Config Validation"],"updatePoint":{"line":16,"column":51,"index":694},"line":16,"code":"  it('A validation error can be formatted correctly', async () => {\n    const configError = await validateConfig({\n      site: 42\n    }, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n    const formattedError = stripAnsi(formatConfigErrorMessage(configError));\n    expect(formattedError).to.equal(`[config] Astro found issue(s) with your configuration:\n  ! site  Expected string, received number.`);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Multiple validation errors can be formatted correctly","suites":["Config Validation"],"updatePoint":{"line":25,"column":59,"index":1157},"line":25,"code":"  it('Multiple validation errors can be formatted correctly', async () => {\n    const veryBadConfig = {\n      integrations: [42],\n      build: {\n        format: 'invalid'\n      }\n    };\n    const configError = await validateConfig(veryBadConfig, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n    const formattedError = stripAnsi(formatConfigErrorMessage(configError));\n    expect(formattedError).to.equal(`[config] Astro found issue(s) with your configuration:\n  ! integrations.0  Expected object, received number.\n  ! build.format  Invalid input.`);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores falsey \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":39,"column":41,"index":1746},"line":39,"code":"  it('ignores falsey \"integration\" values', async () => {\n    const result = await validateConfig({\n      integrations: [0, false, null, undefined]\n    }, process.cwd());\n    expect(result.integrations).to.deep.equal([]);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"normalizes \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":45,"column":37,"index":1970},"line":45,"code":"  it('normalizes \"integration\" values', async () => {\n    const result = await validateConfig({\n      integrations: [{\n        name: '@astrojs/a'\n      }]\n    }, process.cwd());\n    expect(result.integrations).to.deep.equal([{\n      name: '@astrojs/a',\n      hooks: {}\n    }]);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"flattens array \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":56,"column":41,"index":2258},"line":56,"code":"  it('flattens array \"integration\" values', async () => {\n    const result = await validateConfig({\n      integrations: [{\n        name: '@astrojs/a'\n      }, [{\n        name: '@astrojs/b'\n      }, {\n        name: '@astrojs/c'\n      }]]\n    }, process.cwd());\n    expect(result.integrations).to.deep.equal([{\n      name: '@astrojs/a',\n      hooks: {}\n    }, {\n      name: '@astrojs/b',\n      hooks: {}\n    }, {\n      name: '@astrojs/c',\n      hooks: {}\n    }]);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"blocks third-party \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":77,"column":45,"index":2730},"line":77,"code":"  it('blocks third-party \"integration\" values', async () => {\n    const configError = await validateConfig({\n      integrations: [{\n        name: '@my-plugin/a'\n      }]\n    }, process.cwd()).catch(err => err);\n    expect(configError).to.be.instanceOf(Error);\n    expect(configError.message).to.include('Astro integrations are still experimental.');\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"allows third-party \"integration\" values with the --experimental-integrations flag","suites":["Config Validation"],"updatePoint":{"line":86,"column":87,"index":3128},"line":86,"code":"  it('allows third-party \"integration\" values with the --experimental-integrations flag', async () => {\n    await validateConfig({\n      integrations: [{\n        name: '@my-plugin/a'\n      }],\n      experimental: {\n        integrations: true\n      }\n    }, process.cwd()).catch(err => err);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified in astro.config.mjs","suites":["config","host"],"updatePoint":{"line":22,"column":44,"index":592},"line":22,"code":"    it('can be specified in astro.config.mjs', async () => {\n      expect(hostFixture.config.server.host).to.equal(true);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified via --host flag","suites":["config","host"],"updatePoint":{"line":25,"column":40,"index":718},"line":25,"code":"    it('can be specified via --host flag', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const {\n        network\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--host']);\n      const networkURL = new URL(network);\n      expect(isIPv4(networkURL.hostname)).to.be.equal(true, `Expected network URL to respect --host flag`);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be passed via --config","suites":["config","path"],"updatePoint":{"line":35,"column":34,"index":1161},"line":35,"code":"    it('can be passed via --config', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = new URL('./fixtures/config-path/config/my-config.mjs', import.meta.url);\n      const {\n        network\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL.pathname]);\n      const networkURL = new URL(network);\n      expect(isIPv4(networkURL.hostname)).to.be.equal(true, `Expected network URL to respect --host flag`);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be passed via relative --config","suites":["config","relative path"],"updatePoint":{"line":46,"column":43,"index":1749},"line":46,"code":"    it('can be passed via relative --config', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = 'my-config.mjs';\n      const {\n        local\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL]);\n      const localURL = new URL(local);\n      expect(localURL.port).to.equal('8080');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be passed via relative --config","suites":["config","relative path with leading ./"],"updatePoint":{"line":57,"column":43,"index":2220},"line":57,"code":"    it('can be passed via relative --config', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = './my-config.mjs';\n      const {\n        local\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL]);\n      const localURL = new URL(local);\n      expect(localURL.port).to.equal('8080');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"fails and exits when config does not exist","suites":["config","incorrect path"],"updatePoint":{"line":68,"column":50,"index":2685},"line":68,"code":"    it('fails and exits when config does not exist', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = './does-not-exist.mjs';\n      let exit = 0;\n\n      try {\n        await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL]);\n      } catch (e) {\n        if (e.message.includes('Unable to resolve --config')) {\n          exit = 1;\n        }\n      }\n\n      expect(exit).to.equal(1, 'Throws helpful error message when --config does not exist');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified in astro.config.mjs","suites":["config","port"],"updatePoint":{"line":85,"column":44,"index":3273},"line":85,"code":"    it('can be specified in astro.config.mjs', async () => {\n      expect(portFixture.config.server.port).to.deep.equal(5006);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Work as constructors","suites":["Custom Elements"],"updatePoint":{"line":15,"column":26,"index":401},"line":15,"code":"  it('Work as constructors', async () => {\n    const html = await fixture.readFile('/ctr/index.html');\n    const $ = cheerioLoad(html); // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendererd\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with exported tagName","suites":["Custom Elements"],"updatePoint":{"line":23,"column":33,"index":732},"line":23,"code":"  it('Works with exported tagName', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html); // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendered\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Hydration works with exported tagName","suites":["Custom Elements"],"updatePoint":{"line":31,"column":43,"index":1068},"line":31,"code":"  it('Hydration works with exported tagName', async () => {\n    const html = await fixture.readFile('/load/index.html');\n    const $ = cheerioLoad(html); // SSR\n    // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendered\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1); // Hydration\n    // test 3: Component and polyfill scripts bundled separately\n\n    expect($('script[type=module]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Custom elements not claimed by renderer are rendered as regular HTML","suites":["Custom Elements"],"updatePoint":{"line":43,"column":74,"index":1588},"line":43,"code":"  it('Custom elements not claimed by renderer are rendered as regular HTML', async () => {\n    const html = await fixture.readFile('/nossr/index.html');\n    const $ = cheerioLoad(html); // test 1: Rendered the client-only element\n\n    expect($('client-element')).to.have.lengthOf(1); // No children\n\n    expect($('client-element').text()).to.equal('');\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can import a client-only element that is nested in JSX","suites":["Custom Elements"],"updatePoint":{"line":51,"column":60,"index":1933},"line":51,"code":"  it('Can import a client-only element that is nested in JSX', async () => {\n    const html = await fixture.readFile('/nested/index.html');\n    const $ = cheerioLoad(html); // test 1: Element rendered\n\n    expect($('client-only-element')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works in markdown pages","suites":["<Debug />"],"updatePoint":{"line":23,"column":29,"index":610},"line":23,"code":"  it('Works in markdown pages', async () => {\n    const response = await fixture.fetch('/posts/first');\n    expect(response.status).to.equal(200);\n  });","file":"debug-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /","suites":["Development Routing","No site config"],"updatePoint":{"line":20,"column":26,"index":596},"line":20,"code":"    it('200 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when adding search params","suites":["Development Routing","No site config"],"updatePoint":{"line":24,"column":37,"index":752},"line":24,"code":"    it('200 when adding search params', async () => {\n      const response = await fixture.fetch('/?foo=bar');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading non-root page","suites":["Development Routing","No site config"],"updatePoint":{"line":28,"column":38,"index":917},"line":28,"code":"    it('200 when loading non-root page', async () => {\n      const response = await fixture.fetch('/another');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","No site config"],"updatePoint":{"line":32,"column":38,"index":1081},"line":32,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/1');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","No site config"],"updatePoint":{"line":36,"column":46,"index":1247},"line":36,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/2');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /","suites":["Development Routing","No subpath used"],"updatePoint":{"line":58,"column":26,"index":1894},"line":58,"code":"    it('200 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading non-root page","suites":["Development Routing","No subpath used"],"updatePoint":{"line":62,"column":38,"index":2051},"line":62,"code":"    it('200 when loading non-root page', async () => {\n      const response = await fixture.fetch('/another');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","No subpath used"],"updatePoint":{"line":66,"column":38,"index":2215},"line":66,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/1');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","No subpath used"],"updatePoint":{"line":70,"column":46,"index":2381},"line":70,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/2');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":93,"column":26,"index":3062},"line":93,"code":"    it('404 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":97,"column":37,"index":3218},"line":97,"code":"    it('200 when loading subpath root', async () => {\n      const response = await fixture.fetch('/blog/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":101,"column":60,"index":3402},"line":101,"code":"    it('404 when loading subpath root without trailing slash', async () => {\n      const response = await fixture.fetch('/blog');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":105,"column":55,"index":3580},"line":105,"code":"    it('200 when loading another page with subpath used', async () => {\n      const response = await fixture.fetch('/blog/another/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":109,"column":38,"index":3750},"line":109,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/blog/1/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":113,"column":46,"index":3922},"line":113,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/blog/2/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":135,"column":26,"index":4576},"line":135,"code":"    it('404 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":139,"column":57,"index":4752},"line":139,"code":"    it('200 when loading subpath root with trailing slash', async () => {\n      const response = await fixture.fetch('/blog/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":143,"column":60,"index":4936},"line":143,"code":"    it('404 when loading subpath root without trailing slash', async () => {\n      const response = await fixture.fetch('/blog');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":147,"column":55,"index":5114},"line":147,"code":"    it('200 when loading another page with subpath used', async () => {\n      const response = await fixture.fetch('/blog/another/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":151,"column":38,"index":5284},"line":151,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/blog/1/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":155,"column":46,"index":5456},"line":155,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/blog/2/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /home.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":176,"column":35,"index":6077},"line":176,"code":"    it('200 when loading /home.json', async () => {\n      const response = await fixture.fetch('/home.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.title).to.equal('home');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /thing1.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":182,"column":37,"index":6358},"line":182,"code":"    it('200 when loading /thing1.json', async () => {\n      const response = await fixture.fetch('/thing1.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing1');\n      expect(body.title).to.equal('[slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /thing2.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":189,"column":37,"index":6687},"line":189,"code":"    it('200 when loading /thing2.json', async () => {\n      const response = await fixture.fetch('/thing2.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing2');\n      expect(body.title).to.equal('[slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /data/thing3.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":196,"column":42,"index":7021},"line":196,"code":"    it('200 when loading /data/thing3.json', async () => {\n      const response = await fixture.fetch('/data/thing3.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing3');\n      expect(body.title).to.equal('data [slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /data/thing4.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":203,"column":42,"index":7365},"line":203,"code":"    it('200 when loading /data/thing4.json', async () => {\n      const response = await fixture.fetch('/data/thing4.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing4');\n      expect(body.title).to.equal('data [slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"properly detect syntax errors in template","suites":["Error display","Astro"],"line":16,"code":"    it.skip('properly detect syntax errors in template', async () => {","file":"errors.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Is available in Astro pages","suites":["Global Fetch"],"updatePoint":{"line":12,"column":33,"index":326},"line":12,"code":"  it('Is available in Astro pages', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#astro-page').text()).to.equal('function', 'Fetch supported in .astro page');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in Astro components","suites":["Global Fetch"],"updatePoint":{"line":17,"column":38,"index":569},"line":17,"code":"  it('Is available in Astro components', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#astro-component').text()).to.equal('function', 'Fetch supported in .astro components');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in non-Astro components","suites":["Global Fetch"],"updatePoint":{"line":22,"column":42,"index":827},"line":22,"code":"  it('Is available in non-Astro components', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#jsx').text()).to.equal('function', 'Fetch supported in .jsx');\n    expect($('#svelte').text()).to.equal('function', 'Fetch supported in .svelte');\n    expect($('#vue').text()).to.equal('function', 'Fetch supported in .vue');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Respects existing code","suites":["Global Fetch"],"updatePoint":{"line":29,"column":28,"index":1208},"line":29,"code":"  it('Respects existing code', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#already-imported').text()).to.equal('function', 'Existing fetch imports respected');\n    expect($('#custom-declaration').text()).to.equal('number', 'Custom fetch declarations respected');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a custom element by tag name","suites":["LitElement test"],"updatePoint":{"line":22,"column":42,"index":618},"line":22,"code":"  it('Renders a custom element by tag name', async () => {\n    // @lit-labs/ssr/ requires Node 13.9 or higher\n    if (NODE_VERSION < 13.9) {\n      return;\n    }\n\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: attributes rendered – non reactive properties\n\n    expect($('my-element').attr('foo')).to.equal('bar'); // test 2: shadow rendered\n\n    expect($('my-element').html()).to.include(`<div>Testing...</div>`); // test 3: string reactive property set\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"str\">initialized</div>`); // test 4: boolean reactive property correctly set\n    // <my-element bool=\"false\"> Lit will equate to true because it uses\n    // this.hasAttribute to determine its value\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"bool\">B</div>`); // test 5: object reactive property set\n    // by default objects will be stringifed to [object Object]\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"data\">data: 1</div>`); // test 6: reactive properties are not rendered as attributes\n\n    expect($('my-element').attr('obj')).to.equal(undefined);\n    expect($('my-element').attr('bool')).to.equal(undefined);\n    expect($('my-element').attr('str')).to.equal(undefined); // test 7: reflected reactive props are rendered as attributes\n\n    expect($('my-element').attr('reflectedbool')).to.equal('');\n    expect($('my-element').attr('reflected-str')).to.equal('default reflected string');\n    expect($('my-element').attr('reflected-str-prop')).to.equal('initialized reflected');\n  }); // Skipped because not supported by Lit","file":"lit-element.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a custom element by the constructor","suites":["LitElement test"],"line":53,"code":"  it.skip('Renders a custom element by the constructor', async () => {","file":"lit-element.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Can load a simple markdown page with Astro","suites":["Markdown tests"],"updatePoint":{"line":12,"column":48,"index":346},"line":12,"code":"  it('Can load a simple markdown page with Astro', async () => {\n    const html = await fixture.readFile('/post/index.html');\n    const $ = cheerio.load(html);\n    expect($('p').first().text()).to.equal('Hello world!');\n    expect($('#first').text()).to.equal('Some content');\n    expect($('#interesting-topic').text()).to.equal('Interesting Topic');\n  });","file":"markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load a realworld markdown page with Astro","suites":["Markdown tests"],"updatePoint":{"line":19,"column":51,"index":706},"line":19,"code":"  it('Can load a realworld markdown page with Astro', async () => {\n    const html = await fixture.readFile('/realworld/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(7);\n  });","file":"markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doesn't add page styles for a page without style imports","suites":["Page-level styles"],"updatePoint":{"line":13,"column":62,"index":402},"line":13,"code":"  it(\"Doesn't add page styles for a page without style imports\", async () => {\n    let html = await fixture.readFile('/index.html');\n    let $ = await cheerioLoad(html);\n    expect($('link').length).to.equal(0);\n  });","file":"page-level-styles.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does add page styles for pages with style imports (or deps)","suites":["Page-level styles"],"updatePoint":{"line":18,"column":65,"index":623},"line":18,"code":"  it('Does add page styles for pages with style imports (or deps)', async () => {\n    let html = await fixture.readFile('/blog/index.html');\n    let $ = await cheerioLoad(html);\n    expect($('link').length).to.equal(1);\n  });","file":"page-level-styles.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Astro page styles","suites":["PostCSS"],"updatePoint":{"line":20,"column":32,"index":735},"line":20,"code":"  it('works in Astro page styles', () => {\n    expect(bundledCSS).to.match(new RegExp(`.astro-page.astro-[^{]+${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Astro component styles","suites":["PostCSS"],"updatePoint":{"line":23,"column":37,"index":876},"line":23,"code":"  it('works in Astro component styles', () => {\n    expect(bundledCSS).to.match(new RegExp(`.astro-component.astro-[^{]+${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in JSX","suites":["PostCSS"],"updatePoint":{"line":26,"column":18,"index":1003},"line":26,"code":"  it('works in JSX', () => {\n    expect(bundledCSS).to.match(new RegExp(`.solid[^{]*${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Vue","suites":["PostCSS"],"updatePoint":{"line":29,"column":18,"index":1113},"line":29,"code":"  it('works in Vue', () => {\n    expect(bundledCSS).to.match(new RegExp(`.vue[^{]*${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Svelte","suites":["PostCSS"],"updatePoint":{"line":32,"column":21,"index":1224},"line":32,"code":"  it('works in Svelte', () => {\n    expect(bundledCSS).to.match(new RegExp(`.svelte.s[^{]+${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores CSS in public/","suites":["PostCSS"],"updatePoint":{"line":35,"column":28,"index":1347},"line":35,"code":"  it('ignores CSS in public/', async () => {\n    const publicCSS = await fixture.readFile('/global.css'); // neither minified nor prefixed\n\n    expect(eol.lf(publicCSS.trim())).to.equal(`.global {\\n  appearance: none;\\n}`);\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load class component","suites":["Preact component"],"updatePoint":{"line":12,"column":30,"index":338},"line":12,"code":"  it('Can load class component', async () => {\n    const html = await fixture.readFile('/class/index.html');\n    const $ = cheerio.load(html); // test 1: Can use class components\n\n    expect($('#class-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load function component","suites":["Preact component"],"updatePoint":{"line":18,"column":33,"index":582},"line":18,"code":"  it('Can load function component', async () => {\n    const html = await fixture.readFile('/fn/index.html');\n    const $ = cheerio.load(html); // test 1: Can use function components\n\n    expect($('#fn-component')).to.have.lengthOf(1); // test 2: Can use function components\n\n    expect($('#arrow-fn-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load TS component","suites":["Preact component"],"updatePoint":{"line":26,"column":27,"index":915},"line":26,"code":"  it('Can load TS component', async () => {\n    const html = await fixture.readFile('/ts-components/index.html');\n    const $ = cheerio.load(html); // test 1: Can use TS components\n\n    expect($('.ts-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use hooks","suites":["Preact component"],"updatePoint":{"line":32,"column":19,"index":1147},"line":32,"code":"  it('Can use hooks', async () => {\n    const html = await fixture.readFile('/hooks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#world')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can export a Fragment","suites":["Preact component"],"updatePoint":{"line":37,"column":27,"index":1338},"line":37,"code":"  it('Can export a Fragment', async () => {\n    const html = await fixture.readFile('/frag/index.html');\n    const $ = cheerio.load(html); // test 1: nothing rendered but it didn’t throw\n\n    expect($('body').children()).to.have.lengthOf(0);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use a pragma comment","suites":["Preact component"],"updatePoint":{"line":43,"column":30,"index":1589},"line":43,"code":"  it('Can use a pragma comment', async () => {\n    const html = await fixture.readFile('/pragma-comment/index.html');\n    const $ = cheerio.load(html); // test 1: rendered the PragmaComment component\n\n    expect($('.pragma-comment')).to.have.lengthOf(1);\n    expect($('.pragma-comment-tsx')).to.have.lengthOf(1);\n  }); // In moving over to Vite, the jsx-runtime import is now obscured. TODO: update the method of finding this.","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Uses the new JSX transform","suites":["Preact component"],"line":51,"code":"  it.skip('Uses the new JSX transform', async () => {","file":"preact-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":30,"column":28,"index":1003},"line":30,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":34,"column":59,"index":1187},"line":34,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n        expect(response.redirected).to.equal(false);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":39,"column":62,"index":1432},"line":39,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":43,"column":57,"index":1618},"line":43,"code":"      it('404 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":47,"column":40,"index":1796},"line":47,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":51,"column":48,"index":1975},"line":51,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":78,"column":28,"index":2894},"line":78,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":82,"column":59,"index":3078},"line":82,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":86,"column":62,"index":3270},"line":86,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":90,"column":57,"index":3456},"line":90,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath not used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":94,"column":61,"index":3655},"line":94,"code":"      it('404 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":98,"column":40,"index":3832},"line":98,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":102,"column":48,"index":4012},"line":102,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":129,"column":28,"index":4932},"line":129,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":133,"column":59,"index":5116},"line":133,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":137,"column":62,"index":5308},"line":137,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":141,"column":57,"index":5494},"line":141,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath not used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":145,"column":61,"index":5693},"line":145,"code":"      it('200 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":149,"column":40,"index":5870},"line":149,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":153,"column":48,"index":6050},"line":153,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":185,"column":28,"index":7074},"line":185,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":189,"column":59,"index":7258},"line":189,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n        expect(response.redirected).to.equal(false);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":194,"column":62,"index":7503},"line":194,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":198,"column":57,"index":7689},"line":198,"code":"      it('404 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":202,"column":40,"index":7867},"line":202,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":206,"column":48,"index":8046},"line":206,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":236,"column":28,"index":9024},"line":236,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":240,"column":59,"index":9208},"line":240,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":244,"column":62,"index":9400},"line":244,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":248,"column":57,"index":9586},"line":248,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath not used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":252,"column":61,"index":9785},"line":252,"code":"      it('404 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":256,"column":40,"index":9962},"line":256,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":260,"column":48,"index":10142},"line":260,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":290,"column":28,"index":11121},"line":290,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":294,"column":59,"index":11305},"line":294,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":298,"column":62,"index":11497},"line":298,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":302,"column":57,"index":11683},"line":302,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath not used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":306,"column":61,"index":11882},"line":306,"code":"      it('200 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":310,"column":40,"index":12059},"line":310,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":314,"column":48,"index":12239},"line":314,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":344,"column":28,"index":13177},"line":344,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath with index.html","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":348,"column":50,"index":13352},"line":348,"code":"      it('200 when loading subpath with index.html', async () => {\n        const response = await fixture.fetch('/blog/index.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":352,"column":57,"index":13549},"line":352,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":356,"column":40,"index":13731},"line":356,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":360,"column":48,"index":13915},"line":360,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2.html');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load React","suites":["React Components","build"],"updatePoint":{"line":15,"column":22,"index":412},"line":15,"code":"    it('Can load React', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerioLoad(html); // test 1: basic component renders\n\n      expect($('#react-static').text()).to.equal('Hello static!'); // test 2: no reactroot\n\n      expect($('#react-static').attr('data-reactroot')).to.equal(undefined); // test 3: Can use function components\n\n      expect($('#arrow-fn-component')).to.have.lengthOf(1); // test 4: Can use spread for components\n\n      expect($('#component-spread-props')).to.have.lengthOf(1); // test 5: spread props renders\n\n      expect($('#component-spread-props').text(), 'Hello world!'); // test 6: Can use TS components\n\n      expect($('.ts-component')).to.have.lengthOf(1); // test 7: Can use Pure components\n\n      expect($('#pure')).to.have.lengthOf(1); // test 8: Check number of islands\n\n      expect($('astro-root[uid]')).to.have.lengthOf(5); // test 9: Check island deduplication\n\n      const uniqueRootUIDs = new Set($('astro-root').map((i, el) => $(el).attr('uid')));\n      expect(uniqueRootUIDs.size).to.equal(4);\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Vue","suites":["React Components","build"],"updatePoint":{"line":38,"column":20,"index":1498},"line":38,"code":"    it('Can load Vue', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerioLoad(html);\n      expect($('#vue-h2').text()).to.equal('Hasta la vista, baby');\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use a pragma comment","suites":["React Components","build"],"updatePoint":{"line":43,"column":32,"index":1716},"line":43,"code":"    it('Can use a pragma comment', async () => {\n      const html = await fixture.readFile('/pragma-comment/index.html');\n      const $ = cheerioLoad(html); // test 1: rendered the PragmaComment component\n\n      expect($('.pragma-comment')).to.have.lengthOf(2);\n    }); // TODO: is this still a relevant test?","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Includes reactroot on hydrating components","suites":["React Components","build"],"line":50,"code":"    it.skip('Includes reactroot on hydrating components', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Can load Suspense-using components","suites":["React Components","build"],"updatePoint":{"line":59,"column":42,"index":2416},"line":59,"code":"    it('Can load Suspense-using components', async () => {\n      const html = await fixture.readFile('/suspense/index.html');\n      const $ = cheerioLoad(html);\n      expect($('#client #lazy')).to.have.lengthOf(1);\n      expect($('#server #lazy')).to.have.lengthOf(1);\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["React Components","dev"],"updatePoint":{"line":75,"column":31,"index":2903},"line":75,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerioLoad(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    }); // TODO: move this to separate dev test?","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Throws helpful error message on window SSR","suites":["React Components","dev"],"line":88,"code":"    it.skip('Throws helpful error message on window SSR', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"uses the new JSX transform","suites":["React Components","dev"],"line":96,"code":"    it.skip('uses the new JSX transform', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Includes all styles on the page","suites":["Remote CSS"],"updatePoint":{"line":12,"column":37,"index":333},"line":12,"code":"  it('Includes all styles on the page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const relPath = $('link').attr('href');\n    const css = await fixture.readFile(relPath);\n    expect(css).to.match(/https:\\/\\/unpkg.com\\/open-props/);\n    expect(css).to.match(/body/);\n  });","file":"remote-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Preact"],"updatePoint":{"line":12,"column":26,"index":327},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: React"],"updatePoint":{"line":12,"column":26,"index":325},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Solid"],"updatePoint":{"line":12,"column":26,"index":325},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Svelte"],"updatePoint":{"line":12,"column":26,"index":327},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Vue"],"updatePoint":{"line":12,"column":26,"index":321},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load a component","suites":["Solid component","build"],"updatePoint":{"line":15,"column":28,"index":408},"line":15,"code":"    it('Can load a component', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html); // test 1: Works\n\n      expect($('.hello')).to.have.lengthOf(1);\n    });","file":"solid-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Solid component","dev"],"updatePoint":{"line":31,"column":31,"index":844},"line":31,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"solid-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Puts client files in the client folder","suites":["Integration buildConfig hook"],"updatePoint":{"line":67,"column":44,"index":2030},"line":67,"code":"  it('Puts client files in the client folder', async () => {\n    let data = await fixture.readFile('/.root/client/cars.json');\n    expect(data).to.not.be.undefined;\n  });","file":"ssr-adapter-build-config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Puts the server entry into the server folder","suites":["Integration buildConfig hook"],"updatePoint":{"line":71,"column":50,"index":2207},"line":71,"code":"  it('Puts the server entry into the server folder', async () => {\n    let data = await fixture.readFile('/.root/server/entry.mjs');\n    expect(data).to.not.be.undefined;\n  });","file":"ssr-adapter-build-config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Basic pages work","suites":["API routes in SSR"],"updatePoint":{"line":18,"column":22,"index":483},"line":18,"code":"  it('Basic pages work', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/');\n    const response = await app.render(request);\n    const html = await response.text();\n    expect(html).to.not.be.empty;\n  });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load the API route too","suites":["API routes in SSR"],"updatePoint":{"line":25,"column":32,"index":768},"line":25,"code":"  it('Can load the API route too', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/food.json');\n    const response = await app.render(request);\n    expect(response.status).to.equal(200);\n    expect(response.headers.get('Content-Type')).to.equal('application/json');\n    expect(response.headers.get('Content-Length')).to.not.be.empty;\n    const body = await response.json();\n    expect(body.length).to.equal(3);\n  });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can POST to API routes","suites":["API routes in SSR","API Routes - Dev"],"updatePoint":{"line":43,"column":30,"index":1456},"line":43,"code":"    it('Can POST to API routes', async () => {\n      const response = await fixture.fetch('/food.json', {\n        method: 'POST',\n        body: `some data`\n      });\n      expect(response.status).to.equal(200);\n      const text = await response.text();\n      expect(text).to.equal(`ok`);\n    });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can set multiple headers of the same type","suites":["API routes in SSR","API Routes - Dev"],"updatePoint":{"line":52,"column":49,"index":1771},"line":52,"code":"    it('Can set multiple headers of the same type', async () => {\n      const response = await fixture.fetch('/login', {\n        method: 'POST'\n      });\n      const setCookie = response.headers.get('set-cookie');\n      expect(setCookie).to.equal('foo=foo; HttpOnly, bar=bar; HttpOnly');\n    });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Do not have to implement getStaticPaths","suites":["Dynamic pages in SSR"],"updatePoint":{"line":36,"column":45,"index":1073},"line":36,"code":"  it('Do not have to implement getStaticPaths', async () => {\n    const html = await fetchHTML('/123');\n    const $ = cheerioLoad(html);\n    expect($('h1').text()).to.equal('Item 123');\n  });","file":"ssr-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Includes page styles","suites":["Dynamic pages in SSR"],"updatePoint":{"line":41,"column":26,"index":1246},"line":41,"code":"  it('Includes page styles', async () => {\n    const html = await fetchHTML('/123');\n    const $ = cheerioLoad(html);\n    expect($('link').length).to.equal(1);\n  });","file":"ssr-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Dynamic API routes work","suites":["Dynamic pages in SSR"],"updatePoint":{"line":46,"column":29,"index":1415},"line":46,"code":"  it('Dynamic API routes work', async () => {\n    const json = await fetchJSON('/api/products/33');\n    expect(json.id).to.equal('33');\n  });","file":"ssr-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is able to load","suites":["Lit integration in SSR"],"updatePoint":{"line":27,"column":21,"index":773},"line":27,"code":"  it('Is able to load', async () => {\n    delete globalThis.window;\n    const html = await fetchHTML('/');\n    const $ = cheerioLoad(html);\n    expect($('#win').text()).to.equal('function');\n  });","file":"ssr-lit.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders markdown pages correctly","suites":["Markdown pages in SSR"],"updatePoint":{"line":27,"column":38,"index":790},"line":27,"code":"  it('Renders markdown pages correctly', async () => {\n    const html = await fetchHTML('/post');\n    const $ = cheerioLoad(html);\n    expect($('#subheading').text()).to.equal('Subheading');\n  });","file":"ssr-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders the Markdown component correctly","suites":["Markdown pages in SSR"],"updatePoint":{"line":32,"column":46,"index":995},"line":32,"code":"  it('Renders the Markdown component correctly', async () => {\n    const html = await fetchHTML('/page');\n    const $ = cheerioLoad(html);\n    expect($('#something')).to.have.lengthOf(1);\n  });","file":"ssr-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Gets the request pased in","suites":["Using Astro.request in SSR"],"updatePoint":{"line":19,"column":31,"index":546},"line":19,"code":"  it('Gets the request pased in', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/request');\n    const response = await app.render(request);\n    const html = await response.text();\n    const $ = cheerioLoad(html);\n    expect($('#origin').text()).to.equal('http://example.com');\n  });","file":"ssr-request.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"public file is copied over","suites":["Using Astro.request in SSR"],"updatePoint":{"line":27,"column":32,"index":901},"line":27,"code":"  it('public file is copied over', async () => {\n    const json = await fixture.readFile('/client/cars.json');\n    expect(json).to.not.be.undefined;\n  });","file":"ssr-request.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is able to build successfully","suites":["Code component inside static build"],"updatePoint":{"line":12,"column":35,"index":372},"line":12,"code":"  it('Is able to build successfully', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre').length, 1, 'pre tag loaded');\n  });","file":"static-build-code-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build preact","suites":["Static build - frameworks"],"updatePoint":{"line":16,"column":22,"index":393},"line":16,"code":"  it('can build preact', async () => {\n    const html = await fixture.readFile('/preact/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build react","suites":["Static build - frameworks"],"updatePoint":{"line":20,"column":21,"index":536},"line":20,"code":"  it('can build react', async () => {\n    const html = await fixture.readFile('/react/index.html');\n    expect(html).to.be.a('string');\n  }); // SKIP: Lit polyfills the server in a way that breaks `sass` require/import","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build lit","suites":["Static build - frameworks"],"line":26,"code":"  it.skip('can build lit', async () => {","file":"static-build-frameworks.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"can build nested framework usage","suites":["Static build - frameworks"],"updatePoint":{"line":30,"column":38,"index":1001},"line":30,"code":"  it('can build nested framework usage', async () => {\n    const html = await fixture.readFile('/nested/index.html');\n    const $ = cheerio.load(html);\n    const counter = $('.nested-counter .counter');\n    expect(counter.length).to.equal(1, 'Found the counter');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds pages in root","suites":["Static build - format: 'file'"],"updatePoint":{"line":17,"column":26,"index":447},"line":17,"code":"  it('Builds pages in root', async () => {\n    const html = await fixture.readFile('/one.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-page-url-format.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds pages in subfolders","suites":["Static build - format: 'file'"],"updatePoint":{"line":21,"column":32,"index":592},"line":21,"code":"  it('Builds pages in subfolders', async () => {\n    const html = await fixture.readFile('/sub/page.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-page-url-format.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .astro pages","suites":["Static build"],"updatePoint":{"line":42,"column":29,"index":958},"line":42,"code":"  it('Builds out .astro pages', async () => {\n    const html = await fixture.readFile('/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build pages using Astro.glob()","suites":["Static build"],"updatePoint":{"line":46,"column":40,"index":1113},"line":46,"code":"  it('can build pages using Astro.glob()', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html);\n    const link = $('.posts a');\n    const href = link.attr('href');\n    expect(href).to.be.equal('/subpath/posts/thoughts');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .md pages","suites":["Static build"],"updatePoint":{"line":53,"column":26,"index":1376},"line":53,"code":"  it('Builds out .md pages', async () => {\n    const html = await fixture.readFile('/posts/thoughts/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .json files","suites":["Static build"],"updatePoint":{"line":57,"column":28,"index":1534},"line":57,"code":"  it('Builds out .json files', async () => {\n    const content = await fixture.readFile('/company.json').then(text => JSON.parse(text));\n    expect(content.name).to.equal('Astro Technology Company');\n    expect(content.url).to.equal('https://astro.build/');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out async .json files","suites":["Static build"],"updatePoint":{"line":62,"column":34,"index":1804},"line":62,"code":"  it('Builds out async .json files', async () => {\n    const content = await fixture.readFile('/posts.json').then(text => JSON.parse(text));\n    expect(Array.isArray(content)).to.equal(true);\n    expect(content).deep.equal([{\n      filename: './posts/nested/more.md',\n      title: 'More post'\n    }, {\n      filename: './posts/thoughts.md',\n      title: 'Thoughts post'\n    }]);\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out dynamic .json files","suites":["Static build"],"updatePoint":{"line":73,"column":36,"index":2191},"line":73,"code":"  it('Builds out dynamic .json files', async () => {\n    const slugs = ['thing1', 'thing2'];\n\n    for (const slug of slugs) {\n      const content = await fixture.readFile(`/data/${slug}.json`).then(text => JSON.parse(text));\n      expect(content.name).to.equal('Astro Technology Company');\n      expect(content.url).to.equal('https://astro.build/');\n      expect(content.slug).to.equal(slug);\n    }\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Page level CSS is added","suites":["Static build","Page CSS"],"updatePoint":{"line":113,"column":31,"index":3494},"line":113,"code":"    it('Page level CSS is added', async () => {\n      const found = await findEvidence('/index.html');\n      expect(found).to.equal(true, 'Did not find page-level CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Included on the index page","suites":["Static build","Shared CSS"],"updatePoint":{"line":120,"column":34,"index":3786},"line":120,"code":"    it('Included on the index page', async () => {\n      const found = await findEvidence('/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Included on a md page","suites":["Static build","Shared CSS"],"updatePoint":{"line":124,"column":29,"index":3971},"line":124,"code":"    it('Included on a md page', async () => {\n      const found = await findEvidence('/posts/thoughts/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is included in the index CSS","suites":["Static build","CSS modules"],"updatePoint":{"line":131,"column":36,"index":4283},"line":131,"code":"    it('Is included in the index CSS', async () => {\n      const found = await findEvidence('/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS module code');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Get bundled together on the page","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":137,"column":40,"index":4522},"line":137,"code":"    it('Get bundled together on the page', async () => {\n      const html = await fixture.readFile('/hoisted/index.html');\n      const $ = cheerioLoad(html);\n      expect($('script[type=\"module\"]').length).to.equal(1, 'hoisted script added');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Do not get added to the wrong page","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":142,"column":42,"index":4775},"line":142,"code":"    it('Do not get added to the wrong page', async () => {\n      const hoistedHTML = await fixture.readFile('/hoisted/index.html');\n      const $ = cheerioLoad(hoistedHTML);\n      const href = $('script[type=\"module\"]').attr('src');\n      const indexHTML = await fixture.readFile('/index.html');\n      const $$ = cheerioLoad(indexHTML);\n      expect($$(`script[src=\"${href}\"]`).length).to.equal(0, 'no script added to different page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"honors ssr config","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":151,"column":23,"index":5206},"line":151,"code":"  it('honors ssr config', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html);\n    expect($('#ssr-config').text()).to.equal('testing');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"warns when accessing headers","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":156,"column":34,"index":5409},"line":156,"code":"  it('warns when accessing headers', async () => {\n    let found = false;\n\n    for (const log of logs) {\n      if (log.type === 'ssg' && /[hH]eaders are not exposed in static-site generation/.test(log.args[0])) {\n        found = true;\n      }\n    }\n\n    expect(found).to.equal(true, 'Found the log message');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Copies public files","suites":["Static build SSR"],"updatePoint":{"line":169,"column":25,"index":5756},"line":169,"code":"  it('Copies public files', async () => {\n    const fixture = await loadFixture({\n      root: './fixtures/static-build-ssr/'\n    });\n    await fixture.build();\n    const asset = await fixture.readFile('/client/nested/asset2.txt');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"builds to 404.html","suites":["Status Code Pages"],"updatePoint":{"line":12,"column":24,"index":311},"line":12,"code":"  it('builds to 404.html', async () => {\n    const html = await fixture.readFile('/404.html');\n    expect(html).to.be.ok;\n  });","file":"status-page.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with TypeScript","suites":["Svelte component","build"],"updatePoint":{"line":15,"column":29,"index":411},"line":15,"code":"    it('Works with TypeScript', async () => {\n      const html = await fixture.readFile('/typescript/index.html');\n      const $ = cheerio.load(html);\n      expect($('#svelte-ts').text()).to.equal('Hello, TypeScript');\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with custom Svelte config","suites":["Svelte component","build"],"updatePoint":{"line":20,"column":39,"index":648},"line":20,"code":"    it('Works with custom Svelte config', async () => {\n      const html = await fixture.readFile('/typescript/index.html');\n      const $ = cheerio.load(html);\n      expect($('#svelte-custom-ext').text()).to.equal('Hello, Custom Extensions');\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Svelte component","dev"],"updatePoint":{"line":35,"column":31,"index":1113},"line":35,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS in src/styles","suites":["Tailwind","build"],"updatePoint":{"line":24,"column":34,"index":787},"line":24,"code":"    it('resolves CSS in src/styles', async () => {\n      expect(bundledCSS, 'includes used component classes').to.match(/\\.bg-purple-600{/); // tests a random tailwind class that isn't used on the page\n\n      expect(bundledCSS, 'purges unused classes').not.to.match(/\\.bg-blue-600{/); // tailwind escapes colons, `lg:py-3` compiles to `lg\\:py-3`\n\n      expect(bundledCSS, 'includes responsive classes').to.match(/\\.lg\\\\:py-3{/); // tailwind escapes brackets, `font-[900]` compiles to `font-\\[900\\]`\n\n      expect(bundledCSS, 'supports arbitrary value classes').to.match(/\\.font-\\\\\\[900\\\\\\]{font-weight:900}/); // custom theme colors were included\n\n      expect(bundledCSS, 'includes custom theme colors').to.match(/\\.text-midnight{/);\n      expect(bundledCSS, 'includes custom theme colors').to.match(/\\.bg-dawn{/);\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"maintains classes in HTML","suites":["Tailwind","build"],"updatePoint":{"line":36,"column":33,"index":1610},"line":36,"code":"    it('maintains classes in HTML', async () => {\n      const button = $('button');\n      expect(button.hasClass('text-white'), 'basic class').to.be.true;\n      expect(button.hasClass('lg:py-3'), 'responsive class').to.be.true;\n      expect(button.hasClass('font-[900]', 'arbitrary value')).to.be.true;\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"handles complex classes in HTML","suites":["Tailwind","build"],"updatePoint":{"line":42,"column":39,"index":1927},"line":42,"code":"    it('handles complex classes in HTML', async () => {\n      const button = $('#complex');\n      expect(button.hasClass('w-10/12'), 'solidus').to.be.true;\n      expect(button.hasClass('2xl:w-[80%]'), 'complex class').to.be.true;\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"handles Markdown pages","suites":["Tailwind","build"],"updatePoint":{"line":47,"column":30,"index":2156},"line":47,"code":"    it('handles Markdown pages', async () => {\n      const html = await fixture.readFile('/markdown-page/index.html');\n      const $ = cheerio.load(html);\n      const bundledCSSHREF = $('link[rel=stylesheet][href^=/assets/]').attr('href');\n      const bundledCSS = await fixture.readFile(bundledCSSHREF.replace(/^\\/?/, '/'));\n      expect(bundledCSS, 'includes used component classes').to.match(/\\.bg-purple-600{/);\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS in src/styles","suites":["Tailwind","dev"],"updatePoint":{"line":67,"column":34,"index":3003},"line":67,"code":"    it('resolves CSS in src/styles', async () => {\n      const bundledCSSHREF = $('link[rel=stylesheet]').attr('href');\n      const res = await fixture.fetch(bundledCSSHREF);\n      expect(res.status).to.equal(200);\n      const text = await res.text();\n      expect(text, 'includes used component classes').to.match(/\\.bg-purple-600/); // tests a random tailwind class that isn't used on the page\n\n      expect(text, 'purges unused classes').not.to.match(/\\.bg-blue-600/); // tailwind escapes colons, `lg:py-3` compiles to `lg\\:py-3`\n\n      expect(text, 'includes responsive classes').to.match(/\\.lg\\\\\\\\:py-3/); // tailwind escapes brackets, `font-[900]` compiles to `font-\\[900\\]`\n\n      expect(text, 'supports arbitrary value classes').to.match(/.font-\\\\[900\\\\]/); // custom theme colors were included\n\n      expect(text, 'includes custom theme colors').to.match(/\\.text-midnight/);\n      expect(text, 'includes custom theme colors').to.match(/\\.bg-dawn/);\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"maintains classes in HTML","suites":["Tailwind","dev"],"updatePoint":{"line":83,"column":33,"index":3968},"line":83,"code":"    it('maintains classes in HTML', async () => {\n      const button = $('button');\n      expect(button.hasClass('text-white'), 'basic class').to.be.true;\n      expect(button.hasClass('lg:py-3'), 'responsive class').to.be.true;\n      expect(button.hasClass('font-[900]', 'arbitrary value')).to.be.true;\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Vue","suites":["Vue component","build"],"updatePoint":{"line":15,"column":20,"index":396},"line":15,"code":"    it('Can load Vue', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const allPreValues = $('pre').toArray().map(el => $(el).text()); // test 1: renders all components correctly\n\n      expect(allPreValues).to.deep.equal(['0', '1', '1', '1', '10', '100', '1000']); // test 2: renders 3 <astro-root>s\n\n      expect($('astro-root')).to.have.lengthOf(6); // test 3: all <astro-root>s have uid attributes\n\n      expect($('astro-root[uid]')).to.have.lengthOf(6); // test 4: treats <my-button> as a custom element\n\n      expect($('my-button')).to.have.lengthOf(7); // test 5: components with identical render output and props have been deduplicated\n\n      const uniqueRootUIDs = $('astro-root').map((i, el) => $(el).attr('uid'));\n      expect(new Set(uniqueRootUIDs).size).to.equal(5);\n    });","file":"vue-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Vue component","dev"],"updatePoint":{"line":41,"column":31,"index":1483},"line":41,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"vue-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"should use \"astro add\" when user has installed dependencies","suites":["[create-astro] astro add"],"updatePoint":{"line":22,"column":65,"index":801},"line":22,"code":"  it('should use \"astro add\" when user has installed dependencies', function () {\n    const {\n      stdout,\n      stdin\n    } = setup([tempDir, '--dryrun']);\n    return promiseWithTimeout(resolve => {\n      const seen = new Set();\n      const installPrompt = PROMPT_MESSAGES.install('npm');\n      stdout.on('data', chunk => {\n        if (!seen.has(PROMPT_MESSAGES.template) && chunk.includes(PROMPT_MESSAGES.template)) {\n          seen.add(PROMPT_MESSAGES.template);\n          stdin.write('\\x0D');\n        }\n\n        if (!seen.has(installPrompt) && chunk.includes(installPrompt)) {\n          seen.add(installPrompt);\n          stdin.write('\\x0D');\n        }\n\n        if (chunk.includes(PROMPT_MESSAGES.astroAdd('astro add --yes'))) {\n          resolve();\n        }\n      });\n    });\n  });","file":"astro-add-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should use \"npx astro@latest add\" when use has NOT installed dependencies","suites":["[create-astro] astro add"],"updatePoint":{"line":47,"column":79,"index":1604},"line":47,"code":"  it('should use \"npx astro@latest add\" when use has NOT installed dependencies', function () {\n    const {\n      stdout,\n      stdin\n    } = setup([tempDir, '--dryrun']);\n    return promiseWithTimeout(resolve => {\n      const seen = new Set();\n      const installPrompt = PROMPT_MESSAGES.install('npm');\n      stdout.on('data', chunk => {\n        if (!seen.has(PROMPT_MESSAGES.template) && chunk.includes(PROMPT_MESSAGES.template)) {\n          seen.add(PROMPT_MESSAGES.template);\n          stdin.write('\\x0D');\n        }\n\n        if (!seen.has(installPrompt) && chunk.includes(installPrompt)) {\n          seen.add(installPrompt);\n          stdin.write('n\\x0D');\n        }\n\n        if (chunk.includes(PROMPT_MESSAGES.astroAdd('npx astro@latest add --yes'))) {\n          resolve();\n        }\n      });\n    });\n  });","file":"astro-add-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should prompt for directory when none is provided","suites":["[create-astro] select directory"],"updatePoint":{"line":11,"column":55,"index":496},"line":11,"code":"  it('should prompt for directory when none is provided', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup();\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.directory)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should NOT proceed on a non-empty directory","suites":["[create-astro] select directory"],"updatePoint":{"line":23,"column":49,"index":800},"line":23,"code":"  it('should NOT proceed on a non-empty directory', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup([inputs.nonEmptyDir]);\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.directory)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should proceed on an empty directory","suites":["[create-astro] select directory"],"updatePoint":{"line":35,"column":42,"index":1117},"line":35,"code":"  it('should proceed on an empty directory', async function () {\n    const resolvedEmptyDirPath = resolve(testDir, inputs.emptyDir);\n\n    if (!existsSync(resolvedEmptyDirPath)) {\n      await promises.mkdir(resolvedEmptyDirPath);\n    }\n\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup([inputs.emptyDir]);\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.template)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should proceed when directory does not exist","suites":["[create-astro] select directory"],"updatePoint":{"line":53,"column":50,"index":1615},"line":53,"code":"  it('should proceed when directory does not exist', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup([inputs.nonexistentDir]);\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.template)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should error on bad directory selection in prompt","suites":["[create-astro] select directory"],"updatePoint":{"line":65,"column":55,"index":1947},"line":65,"code":"  it('should error on bad directory selection in prompt', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout,\n        stdin\n      } = setup();\n      stdout.on('data', chunk => {\n        if (chunk.includes('is not empty!')) {\n          resolve();\n        }\n\n        if (chunk.includes(PROMPT_MESSAGES.directory)) {\n          stdin.write(`${inputs.nonEmptyDir}\\x0D`);\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should respect package manager in prompt","suites":["[create-astro] install"],"updatePoint":{"line":20,"column":46,"index":695},"line":20,"code":"  it('should respect package manager in prompt', function () {\n    const {\n      stdout,\n      stdin\n    } = setup([tempDir, '--dryrun']);\n    return promiseWithTimeout(resolve => {\n      const seen = new Set();\n      const installPrompt = PROMPT_MESSAGES.install(FAKE_PACKAGE_MANAGER);\n      stdout.on('data', chunk => {\n        if (!seen.has(PROMPT_MESSAGES.template) && chunk.includes(PROMPT_MESSAGES.template)) {\n          seen.add(PROMPT_MESSAGES.template);\n          stdin.write('\\x0D');\n        }\n\n        if (!seen.has(installPrompt) && chunk.includes(installPrompt)) {\n          seen.add(installPrompt);\n          resolve();\n        }\n      });\n    });\n  });","file":"install-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should respect package manager in next steps","suites":["[create-astro] install"],"updatePoint":{"line":41,"column":50,"index":1367},"line":41,"code":"  it('should respect package manager in next steps', function () {\n    const {\n      stdout,\n      stdin\n    } = setup([tempDir, '--dryrun']);\n    return promiseWithTimeout(resolve => {\n      const seen = new Set();\n      const installPrompt = PROMPT_MESSAGES.install(FAKE_PACKAGE_MANAGER);\n      const astroAddPrompt = PROMPT_MESSAGES.astroAdd();\n      stdout.on('data', chunk => {\n        if (!seen.has(PROMPT_MESSAGES.template) && chunk.includes(PROMPT_MESSAGES.template)) {\n          seen.add(PROMPT_MESSAGES.template);\n          stdin.write('\\x0D');\n        }\n\n        if (!seen.has(installPrompt) && chunk.includes(installPrompt)) {\n          seen.add(installPrompt);\n          stdin.write('n\\x0D');\n        }\n\n        if (!seen.has(astroAddPrompt) && chunk.includes(astroAddPrompt)) {\n          seen.add(astroAddPrompt);\n          stdin.write('\\x0D');\n        }\n\n        if (chunk.includes('banana dev')) {\n          resolve();\n        }\n      });\n    });\n  });","file":"install-step.test.js","skipped":false,"dir":"packages/create-astro/test"}]}