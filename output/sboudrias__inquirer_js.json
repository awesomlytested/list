{"repo":"SBoudrias/Inquirer.js","url":"https://github.com/SBoudrias/Inquirer.js","branch":"master","configs":[{"package":"inquirer","lang":"js","dir":"packages/inquirer/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should filter the user input","suites":["filter API"],"updatePoint":{"line":40,"column":38,"index":1065},"line":40,"code":"      it('should filter the user input', () => new Promise(done => {\n        ctx.fixture.filter = function () {\n          return 'pass';\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run().then(answer => {\n          expect(answer).to.equal('pass');\n          done();\n        });\n        ctx.rl.emit('line', '');\n      }));","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow filter function to be asynchronous","suites":["filter API"],"updatePoint":{"line":51,"column":57,"index":1447},"line":51,"code":"      it('should allow filter function to be asynchronous', () => new Promise(done => {\n        ctx.fixture.filter = function () {\n          const done = this.async();\n          setTimeout(() => {\n            done(null, 'pass');\n          }, 0);\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run().then(answer => {\n          expect(answer).to.equal('pass');\n          done();\n        });\n        ctx.rl.emit('line', '');\n      }));","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should handle errors produced in async filters","suites":["filter API"],"updatePoint":{"line":65,"column":56,"index":1918},"line":65,"code":"      it('should handle errors produced in async filters', () => {\n        let called = 0;\n        const {\n          rl\n        } = ctx;\n        ctx.fixture.filter = function () {\n          called++;\n          const cb = this.async();\n          if (called === 2) {\n            return cb(null, 'pass');\n          }\n          rl.emit('line');\n          return cb(new Error('fail'));\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        const promise = prompt.run();\n        ctx.rl.emit('line');\n        return promise;\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass previous answers to the prompt filter function","suites":["filter API"],"updatePoint":{"line":84,"column":68,"index":2483},"line":84,"code":"      it('should pass previous answers to the prompt filter function', () => {\n        const prompt = inquirer.createPromptModule();\n        const questions = [{\n          type: 'confirm',\n          name: 'q1',\n          message: 'message'\n        }, {\n          type: 'confirm',\n          name: 'q2',\n          message: 'message',\n          filter(input, answers) {\n            expect(answers.q1).to.equal(true);\n            return input;\n          },\n          default: false\n        }];\n        const promise = prompt(questions);\n        autosubmit(promise.ui);\n        return promise.then(answers => {\n          expect(answers.q1).to.equal(true);\n          expect(answers.q2).to.equal(false);\n        });\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should reject input if boolean false is returned","suites":["validate API"],"updatePoint":{"line":111,"column":58,"index":3260},"line":111,"code":"      it('should reject input if boolean false is returned', () => {\n        let called = 0;\n        ctx.fixture.validate = () => {\n          called++;\n          // Make sure returning false won't continue\n          if (called === 2) {\n            return true;\n          }\n          ctx.rl.emit('line');\n          return false;\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        const promise = prompt.run();\n        ctx.rl.emit('line');\n        return promise;\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should reject input if a string is returned","suites":["validate API"],"updatePoint":{"line":127,"column":53,"index":3755},"line":127,"code":"      it('should reject input if a string is returned', done => {\n        let called = 0;\n        const errorMessage = 'uh oh, error!';\n        ctx.fixture.validate = function () {\n          called++;\n          // Make sure returning false won't continue\n          if (called === 2) {\n            done();\n            return;\n          }\n          ctx.rl.emit('line');\n          return errorMessage;\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run();\n        ctx.rl.emit('line');\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should reject input if a Promise is returned which rejects","suites":["validate API"],"updatePoint":{"line":144,"column":68,"index":4301},"line":144,"code":"      it('should reject input if a Promise is returned which rejects', done => {\n        let called = 0;\n        const errorMessage = 'uh oh, error!';\n        ctx.fixture.validate = function () {\n          called++;\n          // Make sure returning false won't continue\n          if (called === 2) {\n            done();\n            return;\n          }\n          ctx.rl.emit('line');\n          return Promise.reject(errorMessage);\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run();\n        ctx.rl.emit('line');\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should accept input if boolean true is returned","suites":["validate API"],"updatePoint":{"line":161,"column":57,"index":4852},"line":161,"code":"      it('should accept input if boolean true is returned', () => {\n        let called = 0;\n        ctx.fixture.validate = function () {\n          called++;\n          return true;\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        const promise = prompt.run().then(() => {\n          expect(called).to.equal(1);\n        });\n        ctx.rl.emit('line');\n        return promise;\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow validate function to be asynchronous","suites":["validate API"],"updatePoint":{"line":174,"column":59,"index":5268},"line":174,"code":"      it('should allow validate function to be asynchronous', () => {\n        let called = 0;\n        ctx.fixture.validate = function () {\n          const done = this.async();\n          setTimeout(() => {\n            called++;\n            // Make sure returning false won't continue\n            if (called === 2) {\n              done(null, true);\n            } else {\n              ctx.rl.emit('line');\n            }\n            done(false);\n          }, 0);\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        const promise = prompt.run();\n        ctx.rl.emit('line');\n        return promise;\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow validate function to return a Promise","suites":["validate API"],"updatePoint":{"line":194,"column":60,"index":5900},"line":194,"code":"      it('should allow validate function to return a Promise', () => {\n        ctx.fixture.validate = function () {\n          return Promise.resolve(true);\n        };\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        const promise = prompt.run();\n        ctx.rl.emit('line');\n        return promise;\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass previous answers to the prompt validation function","suites":["validate API"],"updatePoint":{"line":203,"column":72,"index":6240},"line":203,"code":"      it('should pass previous answers to the prompt validation function', () => {\n        const prompt = inquirer.createPromptModule();\n        const questions = [{\n          type: 'confirm',\n          name: 'q1',\n          message: 'message'\n        }, {\n          type: 'confirm',\n          name: 'q2',\n          message: 'message',\n          validate(input, answers) {\n            expect(answers.q1).to.equal(true);\n            return true;\n          },\n          default: false\n        }];\n        const promise = prompt(questions);\n        autosubmit(promise.ui);\n        return promise.then(answers => {\n          expect(answers.q1).to.equal(true);\n          expect(answers.q2).to.equal(false);\n        });\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default value","suites":["default API"],"updatePoint":{"line":230,"column":38,"index":6996},"line":230,"code":"      it('should allow a default value', () => new Promise(done => {\n        ctx.fixture.default = 'pass';\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run().then(answer => {\n          expect(ctx.rl.output.__raw__).to.contain('(pass)');\n          expect(answer).to.equal('pass');\n          done();\n        });\n        ctx.rl.emit('line', '');\n      }));","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a falsy default value","suites":["default API"],"updatePoint":{"line":240,"column":44,"index":7386},"line":240,"code":"      it('should allow a falsy default value', () => new Promise(done => {\n        ctx.fixture.default = 0;\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run().then(answer => {\n          expect(ctx.rl.output.__raw__).to.contain('(0)');\n          expect(answer).to.equal(0);\n          done();\n        });\n        ctx.rl.emit('line', '');\n      }));","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should print message on screen","suites":["message API"],"updatePoint":{"line":254,"column":40,"index":7825},"line":254,"code":"      it('should print message on screen', () => {\n        ctx.fixture.message = 'Foo bar bar foo bar';\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run();\n        expect(ctx.rl.output.__raw__).to.contain(ctx.fixture.message);\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to name for message","suites":["message API"],"updatePoint":{"line":260,"column":44,"index":8096},"line":260,"code":"      it('should default to name for message', () => {\n        ctx.fixture.name = 'testfoobarbarfoobar';\n        delete ctx.fixture.message;\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        prompt.run();\n        expect(ctx.rl.output.__raw__).to.contain(ctx.fixture.name + ':');\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should print choices to screen","suites":["choices API"],"updatePoint":{"line":271,"column":40,"index":8465},"line":271,"code":"      it('should print choices to screen', () => {\n        const prompt = new ctx.Prompt(ctx.fixture, ctx.rl);\n        const {\n          choices\n        } = prompt.opt;\n        prompt.run();\n        choices.filter(inquirer.Separator.exclude).forEach(choice => {\n          expect(ctx.rl.output.__raw__).to.contain(choice.name);\n        });\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"`name` should throw","suites":["Missing value"],"updatePoint":{"line":285,"column":29,"index":8878},"line":285,"code":"      it('`name` should throw', () => {\n        expect(() => {\n          delete ctx.fixture.name;\n          return new ctx.Prompt(ctx.fixture, ctx.rl);\n        }).to.throw(/name/);\n      });","file":"specs/api.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should close and create a new readline instances each time it's called","suites":["inquirer.prompt"],"updatePoint":{"line":25,"column":76,"index":717},"line":25,"code":"  it(\"should close and create a new readline instances each time it's called\", async () => {\n    const promise = prompt({\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    });\n    const rl1 = promise.ui.rl;\n    sandbox.spy(rl1, 'close');\n    sandbox.spy(rl1.output, 'end');\n    rl1.emit('line');\n    return promise.then(() => {\n      expect(rl1.close.calledOnce).to.equal(true);\n      expect(rl1.output.end.calledOnce).to.equal(true);\n      const promise2 = prompt({\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      });\n      const rl2 = promise2.ui.rl;\n      sandbox.spy(rl2, 'close');\n      sandbox.spy(rl2.output, 'end');\n      rl2.emit('line');\n      return promise2.then(() => {\n        expect(rl2.close.calledOnce).to.equal(true);\n        expect(rl2.output.end.calledOnce).to.equal(true);\n        expect(rl1).to.not.equal(rl2);\n      });\n    });\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should close readline instance on rejected promise","suites":["inquirer.prompt"],"updatePoint":{"line":54,"column":56,"index":1604},"line":54,"code":"  it('should close readline instance on rejected promise', async () => new Promise(done => {\n    prompt.registerPrompt('stub', () => {});\n    const promise = prompt({\n      type: 'stub',\n      name: 'q1'\n    });\n    const rl1 = promise.ui.rl;\n    sandbox.spy(rl1, 'close');\n    sandbox.spy(rl1.output, 'end');\n    promise.catch(() => {\n      expect(rl1.close.calledOnce).to.equal(true);\n      expect(rl1.output.end.calledOnce).to.equal(true);\n      done();\n    });\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts array and return answers","suites":["inquirer.prompt"],"updatePoint":{"line":69,"column":52,"index":2072},"line":69,"code":"  it('should take a prompts array and return answers', async () => {\n    const prompts = [{\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    }, {\n      type: 'confirm',\n      name: 'q2',\n      message: 'message',\n      default: false\n    }];\n    const promise = prompt(prompts);\n    autosubmit(promise.ui);\n    return promise.then(answers => {\n      expect(answers.q1).to.equal(true);\n      expect(answers.q2).to.equal(false);\n    });\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts nested object and return answers","suites":["inquirer.prompt"],"updatePoint":{"line":87,"column":60,"index":2542},"line":87,"code":"  it('should take a prompts nested object and return answers', async () => {\n    const prompts = {\n      q1: {\n        type: 'confirm',\n        message: 'message'\n      },\n      q2: {\n        type: 'input',\n        message: 'message',\n        default: 'Foo'\n      }\n    };\n    const promise = prompt(prompts);\n    autosubmit(promise.ui);\n    const {\n      q1,\n      q2\n    } = await promise;\n    expect(q1).to.equal(true);\n    expect(q2).to.equal('Foo');\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts array with nested names","suites":["inquirer.prompt"],"updatePoint":{"line":108,"column":51,"index":2994},"line":108,"code":"  it('should take a prompts array with nested names', async () => {\n    const prompts = [{\n      type: 'confirm',\n      name: 'foo.bar.q1',\n      message: 'message'\n    }, {\n      type: 'confirm',\n      name: 'foo.q2',\n      message: 'message',\n      default: false\n    }];\n    const promise = prompt(prompts);\n    autosubmit(promise.ui);\n    return promise.then(answers => {\n      expect(answers).to.deep.equal({\n        foo: {\n          bar: {\n            q1: true\n          },\n          q2: false\n        }\n      });\n    });\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a single prompt and return answer","suites":["inquirer.prompt"],"updatePoint":{"line":132,"column":51,"index":3528},"line":132,"code":"  it('should take a single prompt and return answer', async () => {\n    const config = {\n      type: 'input',\n      name: 'q1',\n      message: 'message',\n      default: 'bar'\n    };\n    const promise = prompt(config);\n    promise.ui.rl.emit('line');\n    const answers = await promise;\n    expect(answers.q1).to.equal('bar');\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse `message` if passed as a function","suites":["inquirer.prompt"],"updatePoint":{"line":144,"column":52,"index":3860},"line":144,"code":"  it('should parse `message` if passed as a function', async () => {\n    const stubMessage = 'foo';\n    prompt.registerPrompt('stub', function (params) {\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(params.message).to.equal(stubMessage);\n    });\n    const msgFunc = function (answers) {\n      expect(answers.name1).to.equal('bar');\n      return stubMessage;\n    };\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: msgFunc\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n    promise.ui.rl.emit('line');\n    await promise;\n    // Ensure we're not overwriting original prompt values.\n    expect(prompts[1].message).to.equal(msgFunc);\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run asynchronous `messageasync `","suites":["inquirer.prompt"],"updatePoint":{"line":171,"column":45,"index":4672},"line":171,"code":"  it('should run asynchronous `messageasync `', () => new Promise(done => {\n    const stubMessage = 'foo';\n    prompt.registerPrompt('stub', function (params) {\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(params.message).to.equal(stubMessage);\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message(answers) {\n        expect(answers.name1).to.equal('bar');\n        const goOn = this.async();\n        setTimeout(() => {\n          goOn(null, stubMessage);\n        }, 0);\n      }\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse `default` if passed as a function","suites":["inquirer.prompt"],"updatePoint":{"line":197,"column":52,"index":5409},"line":197,"code":"  it('should parse `default` if passed as a function', async () => new Promise(done => {\n    const stubDefault = 'foo';\n    prompt.registerPrompt('stub', function (params) {\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(params.default).to.equal(stubDefault);\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: 'message',\n      default(answers) {\n        expect(answers.name1).to.equal('bar');\n        return stubDefault;\n      }\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run asynchronous `default`","suites":["inquirer.prompt"],"updatePoint":{"line":221,"column":39,"index":6081},"line":221,"code":"  it('should run asynchronous `default`', async () => {\n    let goesInDefault = false;\n    const input2Default = 'foo';\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'input2',\n      name: 'q2',\n      message: 'message',\n      default(answers) {\n        goesInDefault = true;\n        expect(answers.name1).to.equal('bar');\n        const goOn = this.async();\n        setTimeout(() => {\n          goOn(null, input2Default);\n        }, 0);\n        setTimeout(() => {\n          promise.ui.rl.emit('line');\n        }, 10);\n      }\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n    const answers = await promise;\n    expect(goesInDefault).to.equal(true);\n    expect(answers.q2).to.equal(input2Default);\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass previous answers to the prompt constructor","suites":["inquirer.prompt"],"updatePoint":{"line":251,"column":60,"index":6922},"line":251,"code":"  it('should pass previous answers to the prompt constructor', async () => new Promise(done => {\n    prompt.registerPrompt('stub', function (params, rl, answers) {\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(answers.name1).to.equal('bar');\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: 'message'\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse `choices` if passed as a function","suites":["inquirer.prompt"],"updatePoint":{"line":270,"column":52,"index":7473},"line":270,"code":"  it('should parse `choices` if passed as a function', async () => new Promise(done => {\n    const stubChoices = ['foo', 'bar'];\n    prompt.registerPrompt('stub', function (params) {\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(params.choices).to.equal(stubChoices);\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: 'message',\n      choices(answers) {\n        expect(answers.name1).to.equal('bar');\n        return stubChoices;\n      }\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should returns a promise","suites":["inquirer.prompt"],"updatePoint":{"line":294,"column":30,"index":8145},"line":294,"code":"  it('should returns a promise', async () => new Promise(done => {\n    const config = {\n      type: 'input',\n      name: 'q1',\n      message: 'message',\n      default: 'bar'\n    };\n    const promise = prompt(config);\n    promise.then(answers => {\n      expect(answers.q1).to.equal('bar');\n      done();\n    });\n    promise.ui.rl.emit('line');\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should expose the Reactive interface","suites":["inquirer.prompt"],"updatePoint":{"line":308,"column":42,"index":8507},"line":308,"code":"  it('should expose the Reactive interface', async () => new Promise(done => {\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'input',\n      name: 'name',\n      message: 'message',\n      default: 'doe'\n    }];\n    const promise = prompt(prompts);\n    const spy = sinon.spy();\n    promise.ui.process.subscribe(spy, () => {}, () => {\n      sinon.assert.calledWith(spy, {\n        name: 'name1',\n        answer: 'bar'\n      });\n      sinon.assert.calledWith(spy, {\n        name: 'name',\n        answer: 'doe'\n      });\n      done();\n    });\n    autosubmit(promise.ui);\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should expose the UI","suites":["inquirer.prompt"],"updatePoint":{"line":335,"column":26,"index":9149},"line":335,"code":"  it('should expose the UI', async () => new Promise(done => {\n    const promise = prompt([]);\n    expect(promise.ui.answers).to.be.an('object');\n    done();\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"takes an Observable as question","suites":["inquirer.prompt"],"updatePoint":{"line":340,"column":37,"index":9325},"line":340,"code":"  it('takes an Observable as question', async () => {\n    const prompts = Observable.create(obs => {\n      obs.next({\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      });\n      setTimeout(() => {\n        obs.next({\n          type: 'confirm',\n          name: 'q2',\n          message: 'message',\n          default: false\n        });\n        obs.complete();\n        promise.ui.rl.emit('line');\n      }, 30);\n    });\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n    return promise.then(answers => {\n      expect(answers.q1).to.equal(true);\n      expect(answers.q2).to.equal(false);\n    });\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts array and answers and return answers","suites":["inquirer.prompt"],"updatePoint":{"line":365,"column":64,"index":9997},"line":365,"code":"  it('should take a prompts array and answers and return answers', async () => {\n    const prompts = [{\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    }];\n    const answers = {\n      prefiled: true\n    };\n    const promise = prompt(prompts, answers);\n    autosubmit(promise.ui);\n    return promise.then(answers => {\n      expect(answers.prefiled).to.equal(true);\n      expect(answers.q1).to.equal(true);\n    });\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should provide answers in filter callback for lists","suites":["inquirer.prompt"],"updatePoint":{"line":381,"column":57,"index":10431},"line":381,"code":"  it('should provide answers in filter callback for lists', async () => new Promise(done => {\n    const filter = sinon.stub();\n    filter.returns('foo');\n    const prompts = [{\n      type: 'list',\n      name: 'q1',\n      default: 'foo',\n      choices: ['foo', 'bar'],\n      message: 'message',\n      filter\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n    promise.then(() => {\n      const spyCall = filter.getCall(0);\n      expect(spyCall.args[0]).to.equal('foo');\n      expect(spyCall.args[1]).to.be.an('object');\n      done();\n    });\n  }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass current answers to `when`","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":402,"column":45,"index":11044},"line":402,"code":"    it('should pass current answers to `when`', async () => {\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        name: 'q2',\n        message: 'message',\n        when(answers) {\n          expect(answers).to.be.an('object');\n          expect(answers.q1).to.equal(true);\n        }\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      return promise;\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if `when` returns true","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":419,"column":48,"index":11499},"line":419,"code":"    it('should run prompt if `when` returns true', async () => {\n      let goesInWhen = false;\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'input',\n        name: 'q2',\n        message: 'message',\n        default: 'bar-var',\n        when() {\n          goesInWhen = true;\n          return true;\n        }\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(goesInWhen).to.equal(true);\n        expect(answers.q2).to.equal('bar-var');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if `when` is true","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":442,"column":43,"index":12102},"line":442,"code":"    it('should run prompt if `when` is true', async () => {\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'input',\n        name: 'q2',\n        message: 'message',\n        default: 'bar-var',\n        when: true\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.q2).to.equal('bar-var');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if `when` returns false","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":460,"column":53,"index":12582},"line":460,"code":"    it('should not run prompt if `when` returns false', async () => {\n      let goesInWhen = false;\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message',\n        when() {\n          goesInWhen = true;\n          return false;\n        }\n      }, {\n        type: 'input',\n        name: 'q3',\n        message: 'message',\n        default: 'foo'\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(goesInWhen).to.equal(true);\n        expect(answers.q2).to.equal(undefined);\n        expect(answers.q3).to.equal('foo');\n        expect(answers.q1).to.equal(true);\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if `when` is false","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":489,"column":48,"index":13357},"line":489,"code":"    it('should not run prompt if `when` is false', async () => {\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message',\n        when: false\n      }, {\n        type: 'input',\n        name: 'q3',\n        message: 'message',\n        default: 'foo'\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.q2).to.equal(undefined);\n        expect(answers.q3).to.equal('foo');\n        expect(answers.q1).to.equal(true);\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run asynchronous `when`","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":513,"column":38,"index":13989},"line":513,"code":"    it('should run asynchronous `when`', async () => {\n      let goesInWhen = false;\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'input',\n        name: 'q2',\n        message: 'message',\n        default: 'foo-bar',\n        when() {\n          goesInWhen = true;\n          const goOn = this.async();\n          setTimeout(() => {\n            goOn(null, true);\n          }, 0);\n          setTimeout(() => {\n            promise.ui.rl.emit('line');\n          }, 10);\n        }\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(goesInWhen).to.equal(true);\n        expect(answers.q2).to.equal('foo-bar');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should get the value which set in `when` on returns false","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":542,"column":65,"index":14791},"line":542,"code":"    it('should get the value which set in `when` on returns false', async () => {\n      const prompts = [{\n        name: 'q',\n        message: 'message',\n        when(answers) {\n          answers.q = 'foo';\n          return false;\n        }\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.q).to.equal('foo');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if answer exists for question","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":557,"column":59,"index":15205},"line":557,"code":"    it('should not run prompt if answer exists for question', async () => {\n      const throwFunc = function (step) {\n        throw new Error(`askAnswered Error ${step}`);\n      };\n      const prompts = [{\n        type: 'input',\n        name: 'prefiled',\n        when: throwFunc.bind(undefined, 'when'),\n        validate: throwFunc.bind(undefined, 'validate'),\n        transformer: throwFunc.bind(undefined, 'transformer'),\n        filter: throwFunc.bind(undefined, 'filter'),\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: 'prefiled'\n      };\n      const promise = prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled).to.equal('prefiled');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if nested answer exists for question","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":580,"column":66,"index":16007},"line":580,"code":"    it('should not run prompt if nested answer exists for question', async () => {\n      const throwFunc = function (step) {\n        throw new Error(`askAnswered Error ${step}`);\n      };\n      const prompts = [{\n        type: 'input',\n        name: 'prefiled.nested',\n        when: throwFunc.bind(undefined, 'when'),\n        validate: throwFunc.bind(undefined, 'validate'),\n        transformer: throwFunc.bind(undefined, 'transformer'),\n        filter: throwFunc.bind(undefined, 'filter'),\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: {\n          nested: 'prefiled'\n        }\n      };\n      const promise = prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled.nested).to.equal('prefiled');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if answer exists for question and askAnswered is set","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":605,"column":78,"index":16865},"line":605,"code":"    it('should run prompt if answer exists for question and askAnswered is set', async () => {\n      const prompts = [{\n        askAnswered: true,\n        type: 'input',\n        name: 'prefiled',\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: 'prefiled'\n      };\n      const promise = prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled).to.equal('newValue');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if nested answer exists for question and askAnswered is set","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":622,"column":85,"index":17386},"line":622,"code":"    it('should run prompt if nested answer exists for question and askAnswered is set', async () => {\n      const prompts = [{\n        askAnswered: true,\n        type: 'input',\n        name: 'prefiled.nested',\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: {\n          nested: 'prefiled'\n        }\n      };\n      const promise = prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled.nested).to.equal('newValue');\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"register new prompt types","suites":["inquirer.prompt","#registerPrompt()"],"updatePoint":{"line":643,"column":33,"index":17945},"line":643,"code":"    it('register new prompt types', () => new Promise(done => {\n      const questions = [{\n        type: 'foo',\n        message: 'something'\n      }];\n      inquirer.registerPrompt('foo', function (question, rl, answers) {\n        expect(question).to.eql(questions[0]);\n        expect(answers).to.eql({});\n        this.run = sinon.stub().returns(Promise.resolve());\n        done();\n      });\n      inquirer.prompt(questions);\n    }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"overwrite default prompt types","suites":["inquirer.prompt","#registerPrompt()"],"updatePoint":{"line":656,"column":38,"index":18385},"line":656,"code":"    it('overwrite default prompt types', () => new Promise(done => {\n      const questions = [{\n        type: 'confirm',\n        message: 'something'\n      }];\n      inquirer.registerPrompt('confirm', function () {\n        this.run = sinon.stub().returns(Promise.resolve());\n        done();\n      });\n      inquirer.prompt(questions);\n      inquirer.restoreDefaultPrompts();\n    }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"restore default prompts","suites":["inquirer.prompt","#restoreDefaultPrompts()"],"updatePoint":{"line":670,"column":31,"index":18815},"line":670,"code":"    it('restore default prompts', async () => {\n      const ConfirmPrompt = inquirer.prompt.prompts.confirm;\n      inquirer.registerPrompt('confirm', () => {});\n      inquirer.restoreDefaultPrompts();\n      expect(ConfirmPrompt).to.equal(inquirer.prompt.prompts.confirm);\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"does not throw exception if cli-width reports width of 0","suites":["inquirer.prompt","#restoreDefaultPrompts()"],"updatePoint":{"line":679,"column":62,"index":19193},"line":679,"code":"  it('does not throw exception if cli-width reports width of 0', async () => {\n    const original = process.stdout.getWindowSize;\n    process.stdout.getWindowSize = function () {\n      return [0];\n    };\n    const localPrompt = inquirer.createPromptModule();\n    const prompts = [{\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    }];\n    const promise = localPrompt(prompts);\n    promise.ui.rl.emit('line');\n    return promise.then(answers => {\n      process.stdout.getWindowSize = original;\n      expect(answers.q1).to.equal(true);\n    });\n  });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Throw an exception when run in non-tty","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":706,"column":46,"index":19972},"line":706,"code":"    it('Throw an exception when run in non-tty', async () => {\n      const localPrompt = inquirer.createPromptModule({\n        skipTTYChecks: false\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }];\n      const promise = localPrompt(prompts);\n      return promise.then(() => {\n        // Failure\n        expect(true).to.equal(false);\n      }).catch(error => {\n        expect(error.isTtyError).to.equal(true);\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Don't throw an exception when run in non-tty by defaultasync ","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":723,"column":69,"index":20488},"line":723,"code":"    it(\"Don't throw an exception when run in non-tty by defaultasync \", () => new Promise(done => {\n      const localPrompt = inquirer.createPromptModule();\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message'\n      }];\n      const promise = localPrompt(prompts);\n      autosubmit(promise.ui);\n      promise.then(() => {\n        done();\n      }).catch(error => {\n        console.log(error);\n        expect(error.isTtyError).to.equal(false);\n      });\n    }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Don't throw an exception when run in non-tty and skipTTYChecks is trueasync ","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":743,"column":84,"index":21090},"line":743,"code":"    it(\"Don't throw an exception when run in non-tty and skipTTYChecks is trueasync \", () => new Promise(done => {\n      const prompt = inquirer.createPromptModule({\n        skipTTYChecks: true\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message'\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      promise.then(() => {\n        done();\n      }).catch(error => {\n        console.log(error);\n        expect(error.isTtyError).to.equal(false);\n      });\n    }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Don't throw an exception when run in non-tty and custom input is providedasync ","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":765,"column":87,"index":21722},"line":765,"code":"    it(\"Don't throw an exception when run in non-tty and custom input is providedasync \", () => new Promise(done => {\n      const localPrompt = inquirer.createPromptModule({\n        input: new stream.Readable({\n          // We must have a default read implementation\n          // for this to work, if not it will error out\n          // with the following error message during testing\n          // Uncaught Error [ERR_METHOD_NOT_IMPLEMENTED]: The _read() method is not implemented\n          read() {}\n        })\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message'\n      }];\n      const promise = localPrompt(prompts);\n      autosubmit(promise.ui);\n      promise.then(() => {\n        done();\n      }).catch(error => {\n        console.log(error);\n        expect(error.isTtyError).to.equal(false);\n      });\n    }));","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Throw an exception when run in non-tty and custom input is provided with skipTTYChecks: false","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":793,"column":101,"index":22687},"line":793,"code":"    it('Throw an exception when run in non-tty and custom input is provided with skipTTYChecks: false', async () => {\n      const localPrompt = inquirer.createPromptModule({\n        input: new stream.Readable(),\n        skipTTYChecks: false\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }];\n      const promise = localPrompt(prompts);\n      return promise.then(() => {\n        // Failure\n        expect(true).to.equal(false);\n      }).catch(error => {\n        expect(error.isTtyError).to.equal(true);\n      });\n    });","file":"specs/inquirer.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should normalize accept String as value","suites":["Choice object"],"updatePoint":{"line":6,"column":45,"index":262},"line":6,"code":"  it('should normalize accept String as value', () => {\n    const choice = new Choice('foo');\n    expect(choice.name).to.equal('foo');\n    expect(choice.value).to.equal('foo');\n  });","file":"specs/objects/choice.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use value|name as default if default property is missing","suites":["Choice object"],"updatePoint":{"line":11,"column":69,"index":469},"line":11,"code":"  it('should use value|name as default if default property is missing', () => {\n    const onlyName = new Choice({\n      name: 'foo'\n    });\n    const onlyVal = new Choice({\n      value: 'bar'\n    });\n    expect(onlyName.name).to.equal('foo');\n    expect(onlyName.value).to.equal('foo');\n    expect(onlyName.short).to.equal('foo');\n    expect(onlyVal.name).to.equal('bar');\n    expect(onlyVal.value).to.equal('bar');\n    expect(onlyVal.short).to.equal('bar');\n  });","file":"specs/objects/choice.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should keep extra keys","suites":["Choice object"],"updatePoint":{"line":25,"column":28,"index":893},"line":25,"code":"  it('should keep extra keys', () => {\n    const choice = new Choice({\n      name: 'foo',\n      extra: '1'\n    });\n    expect(choice.extra).to.equal('1');\n    expect(choice.name).to.equal('foo');\n    expect(choice.value).to.equal('foo');\n  });","file":"specs/objects/choice.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't process Separator object","suites":["Choice object"],"updatePoint":{"line":34,"column":40,"index":1149},"line":34,"code":"  it(\"shouldn't process Separator object\", () => {\n    const sep = new Choice(new Separator());\n    expect(sep).to.be.instanceOf(Separator);\n  });","file":"specs/objects/choice.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't process object with property type=separator","suites":["Choice object"],"updatePoint":{"line":38,"column":59,"index":1315},"line":38,"code":"  it(\"shouldn't process object with property type=separator\", () => {\n    const obj = {\n      type: 'separator'\n    };\n    const sep = new Choice(obj);\n    expect(sep).to.equal(obj);\n  });","file":"specs/objects/choice.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should create Choice object from array member","suites":["Choices collection"],"updatePoint":{"line":7,"column":51,"index":318},"line":7,"code":"  it('should create Choice object from array member', () => {\n    const choices = new Choices(['bar', {\n      name: 'foo'\n    }]);\n    expect(choices.getChoice(0)).to.be.instanceOf(Choice);\n    expect(choices.getChoice(1)).to.be.instanceOf(Choice);\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should support for number","suites":["Choices collection"],"updatePoint":{"line":14,"column":31,"index":553},"line":14,"code":"  it('should support for number', () => {\n    const choices = new Choices([1, 2, 3, 4]);\n    expect(choices.getChoice(0).value).to.equal(1);\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not process Separator object","suites":["Choices collection"],"updatePoint":{"line":18,"column":41,"index":710},"line":18,"code":"  it('should not process Separator object', () => {\n    const sep = new inquirer.Separator();\n    const choices = new Choices(['Bar', sep]);\n    expect(choices.get(0).name).to.equal('Bar');\n    expect(choices.get(1)).to.equal(sep);\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should provide access to length information","suites":["Choices collection"],"updatePoint":{"line":24,"column":49,"index":956},"line":24,"code":"  it('should provide access to length information', () => {\n    const choices = new Choices(['Bar', new inquirer.Separator(), 'foo']);\n    expect(choices.length).to.equal(3);\n    expect(choices.realLength).to.equal(2);\n    choices.length = 1;\n    expect(choices.length).to.equal(1);\n    expect(choices.get(1)).to.equal(undefined);\n    expect(() => {\n      choices.realLength = 0;\n    }).to.throw();\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow plucking choice content","suites":["Choices collection"],"updatePoint":{"line":35,"column":42,"index":1354},"line":35,"code":"  it('should allow plucking choice content', () => {\n    const choices = new Choices([{\n      name: 'n',\n      key: 'foo'\n    }, {\n      name: 'a',\n      key: 'lab'\n    }]);\n    expect(choices.pluck('key')).to.eql(['foo', 'lab']);\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow filtering value with where","suites":["Choices collection"],"updatePoint":{"line":45,"column":45,"index":1594},"line":45,"code":"  it('should allow filtering value with where', () => {\n    const choices = new Choices([{\n      name: 'n',\n      key: 'foo'\n    }, {\n      name: 'a',\n      key: 'lab'\n    }]);\n    expect(choices.where({\n      key: 'lab'\n    })).to.eql([{\n      name: 'a',\n      value: 'a',\n      short: 'a',\n      key: 'lab',\n      disabled: undefined\n    }]);\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should façade forEach","suites":["Choices collection"],"updatePoint":{"line":63,"column":27,"index":1927},"line":63,"code":"  it('should façade forEach', () => {\n    const raw = ['a', 'b', 'c'];\n    const choices = new Choices(raw);\n    choices.forEach((val, i) => {\n      expect(val.name).to.equal(raw[i]);\n    });\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should façade filter","suites":["Choices collection"],"updatePoint":{"line":70,"column":26,"index":2124},"line":70,"code":"  it('should façade filter', () => {\n    const choices = new Choices(['a', 'b', 'c']);\n    const filtered = choices.filter(val => val.name === 'a');\n    expect(filtered.length).to.equal(1);\n    expect(filtered[0].name).to.equal('a');\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should façade push and update the realChoices internally","suites":["Choices collection"],"updatePoint":{"line":76,"column":62,"index":2400},"line":76,"code":"  it('should façade push and update the realChoices internally', () => {\n    const choices = new Choices(['a', {\n      name: 'b',\n      disabled: true\n    }]);\n    choices.push('b', new inquirer.Separator());\n    expect(choices.length).to.equal(4);\n    expect(choices.realLength).to.equal(2);\n    expect(choices.getChoice(0)).to.be.instanceOf(Choice).and.have.property('name', 'a');\n    expect(choices.getChoice(1)).to.be.instanceOf(Choice).and.have.property('name', 'b');\n    expect(choices.get(1)).to.be.instanceOf(Choice).and.have.property('disabled', true);\n    expect(choices.get(3)).to.be.instanceOf(inquirer.Separator);\n  });","file":"specs/objects/choices.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should set a default","suites":["Separator constructor"],"updatePoint":{"line":7,"column":26,"index":283},"line":7,"code":"  it('should set a default', () => {\n    const sep = new Separator();\n    expect(stripAnsi(sep.toString())).to.equal('──────────────');\n  });","file":"specs/objects/separator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should set user input as separator","suites":["Separator constructor"],"updatePoint":{"line":11,"column":40,"index":439},"line":11,"code":"  it('should set user input as separator', () => {\n    const sep = new Separator('foo bar');\n    expect(stripAnsi(sep.toString())).to.equal('foo bar');\n  });","file":"specs/objects/separator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"instances should be stringified when appended to a string","suites":["Separator constructor"],"updatePoint":{"line":15,"column":63,"index":620},"line":15,"code":"  it('instances should be stringified when appended to a string', () => {\n    const sep = new Separator('foo bar');\n    expect(stripAnsi(String(sep))).to.equal('foo bar');\n  });","file":"specs/objects/separator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should be exposed on Inquirer object","suites":["Separator constructor"],"updatePoint":{"line":19,"column":42,"index":777},"line":19,"code":"  it('should be exposed on Inquirer object', () => {\n    expect(inquirer.Separator).to.equal(Separator);\n  });","file":"specs/objects/separator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should expose a helper function to check for separator","suites":["Separator constructor"],"updatePoint":{"line":22,"column":60,"index":906},"line":22,"code":"  it('should expose a helper function to check for separator', () => {\n    expect(Separator.exclude({})).to.equal(true);\n    expect(Separator.exclude(new Separator())).to.equal(false);\n  });","file":"specs/objects/separator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"give the type 'separator' to its object","suites":["Separator constructor"],"updatePoint":{"line":26,"column":45,"index":1082},"line":26,"code":"  it(\"give the type 'separator' to its object\", () => {\n    const sep = new Separator();\n    expect(sep.type).to.equal('separator');\n  });","file":"specs/objects/separator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not point by reference to the entry `question` object","suites":["`base` prompt (e.g. prompt helpers)"],"updatePoint":{"line":10,"column":66,"index":374},"line":10,"code":"  it('should not point by reference to the entry `question` object', () => {\n    const question = {\n      message: 'foo bar',\n      name: 'name'\n    };\n    const base = new Base(question, rl);\n    expect(question).to.not.equal(base.opt);\n    expect(question.name).to.equal(base.opt.name);\n    expect(question.message).to.equal(base.opt.message);\n  });","file":"specs/prompts/base.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return a single selected choice in an array","suites":["`checkbox` prompt"],"updatePoint":{"line":18,"column":56,"index":554},"line":18,"code":"  it('should return a single selected choice in an array', () => new Promise(done => {\n    checkbox.run().then(answer => {\n      expect(answer).to.be.an('array');\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 1');\n      done();\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return multiples selected choices in an array","suites":["`checkbox` prompt"],"updatePoint":{"line":30,"column":58,"index":921},"line":30,"code":"  it('should return multiples selected choices in an array', () => new Promise(done => {\n    checkbox.run().then(answer => {\n      expect(answer).to.be.an('array');\n      expect(answer.length).to.equal(2);\n      expect(answer[0]).to.equal('choice 1');\n      expect(answer[1]).to.equal('choice 2');\n      done();\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should check defaults choices","suites":["`checkbox` prompt"],"updatePoint":{"line":49,"column":35,"index":1441},"line":49,"code":"  it('should check defaults choices', () => new Promise(done => {\n    fixture.choices = [{\n      name: '1',\n      checked: true\n    }, {\n      name: '2',\n      checked: false\n    }, {\n      name: '3',\n      checked: false\n    }];\n    checkbox = new Checkbox(fixture, rl);\n    checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('1');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"provide an array of checked choice to validate","suites":["`checkbox` prompt"],"updatePoint":{"line":68,"column":52,"index":1896},"line":68,"code":"  it('provide an array of checked choice to validate', () => {\n    fixture.choices = [{\n      name: '1',\n      checked: true\n    }, {\n      name: '2',\n      checked: 1\n    }, {\n      name: '3',\n      checked: false\n    }];\n    fixture.validate = function (answer) {\n      expect(answer).to.eql(['1', '2']);\n      return true;\n    };\n    checkbox = new Checkbox(fixture, rl);\n    const promise = checkbox.run();\n    rl.emit('line');\n    return promise;\n  });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should check defaults choices if given as array of values","suites":["`checkbox` prompt"],"updatePoint":{"line":88,"column":63,"index":2365},"line":88,"code":"  it('should check defaults choices if given as array of values', () => new Promise(done => {\n    fixture.choices = [{\n      name: '1'\n    }, {\n      name: '2'\n    }, {\n      name: '3'\n    }];\n    fixture.default = ['1', '3'];\n    checkbox = new Checkbox(fixture, rl);\n    checkbox.run().then(answer => {\n      expect(answer.length).to.equal(2);\n      expect(answer[0]).to.equal('1');\n      expect(answer[1]).to.equal('3');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should toggle choice when hitting space","suites":["`checkbox` prompt"],"updatePoint":{"line":106,"column":45,"index":2821},"line":106,"code":"  it('should toggle choice when hitting space', () => new Promise(done => {\n    checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 1');\n      done();\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation","suites":["`checkbox` prompt"],"updatePoint":{"line":126,"column":39,"index":3324},"line":126,"code":"  it('should allow for arrow navigation', () => new Promise(done => {\n    checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    rl.input.emit('keypress', null, {\n      name: 'up'\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for vi-style navigation","suites":["`checkbox` prompt"],"updatePoint":{"line":146,"column":42,"index":3828},"line":146,"code":"  it('should allow for vi-style navigation', () => new Promise(done => {\n    checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    rl.input.emit('keypress', 'k', {\n      name: 'k'\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for emacs-style navigation","suites":["`checkbox` prompt"],"updatePoint":{"line":166,"column":45,"index":4325},"line":166,"code":"  it('should allow for emacs-style navigation', () => new Promise(done => {\n    checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    rl.input.emit('keypress', 'p', {\n      name: 'p',\n      ctrl: true\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow 1-9 shortcut key","suites":["`checkbox` prompt"],"updatePoint":{"line":189,"column":35,"index":4866},"line":189,"code":"  it('should allow 1-9 shortcut key', () => new Promise(done => {\n    checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    rl.input.emit('keypress', '2');\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select all answers if <a> is pressed","suites":["`checkbox` prompt"],"updatePoint":{"line":198,"column":49,"index":5155},"line":198,"code":"  it('should select all answers if <a> is pressed', () => {\n    const promise = checkbox.run();\n    rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    rl.emit('line');\n    return promise.then(answer => {\n      expect(answer.length).to.equal(3);\n    });\n  });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select no answers if <a> is pressed a second time","suites":["`checkbox` prompt"],"updatePoint":{"line":208,"column":62,"index":5437},"line":208,"code":"  it('should select no answers if <a> is pressed a second time', () => {\n    const promise = checkbox.run();\n    rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    rl.emit('line');\n    return promise.then(answer => {\n      expect(answer.length).to.equal(0);\n    });\n  });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select the inverse of the current selection when <i> is pressed","suites":["`checkbox` prompt"],"updatePoint":{"line":221,"column":76,"index":5794},"line":221,"code":"  it('should select the inverse of the current selection when <i> is pressed', () => {\n    const promise = checkbox.run();\n    rl.input.emit('keypress', 'i', {\n      name: 'i'\n    });\n    rl.emit('line');\n    return promise.then(answer => {\n      expect(answer.length).to.equal(3);\n    });\n  });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"pagination works with multiline choices","suites":["`checkbox` prompt"],"updatePoint":{"line":231,"column":45,"index":6059},"line":231,"code":"  it('pagination works with multiline choices', () => new Promise(done => {\n    const multilineFixture = {\n      message: 'message',\n      name: 'name',\n      choices: ['a\\n\\n', 'b\\n\\n']\n    };\n    const list = new Checkbox(multilineFixture, rl);\n    const spy = sinon.spy(list.paginator, 'paginate');\n    list.run().then(answer => {\n      const realIndexPosition1 = spy.firstCall.args[1];\n      const realIndexPosition2 = spy.secondCall.args[1];\n\n      // 'a\\n\\n': 0th index, but pagination at 2nd index position due to 2 extra newlines\n      expect(realIndexPosition1).to.equal(2);\n      // 'b\\n\\n': 1st index, but pagination at 5th index position due to 4 extra newlines\n      expect(realIndexPosition2).to.equal(5);\n      expect(answer[0]).to.equal('b\\n\\n');\n      done();\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"output disabled choices and custom messages","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":270,"column":51,"index":7296},"line":270,"code":"    it('output disabled choices and custom messages', () => {\n      const promise = checkbox.run();\n      rl.emit('line');\n      return promise.then(() => {\n        expect(rl.output.__raw__).to.contain('- dis1 (Disabled)');\n        expect(rl.output.__raw__).to.contain('- dis2 (uh oh)');\n      });\n    });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"skip disabled choices","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":278,"column":29,"index":7580},"line":278,"code":"    it('skip disabled choices', () => new Promise(done => {\n      checkbox.run().then(answer => {\n        expect(answer[0]).to.equal('choice 1');\n        done();\n      });\n      rl.input.emit('keypress', null, {\n        name: 'down'\n      });\n      rl.input.emit('keypress', null, {\n        name: 'down'\n      });\n      rl.input.emit('keypress', null, {\n        name: 'down'\n      });\n      rl.input.emit('keypress', ' ', {\n        name: 'space'\n      });\n      rl.emit('line');\n    }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"uncheck defaults choices who're disabled","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":297,"column":48,"index":8087},"line":297,"code":"    it(\"uncheck defaults choices who're disabled\", () => new Promise(done => {\n      fixture.choices = [{\n        name: '1',\n        checked: true,\n        disabled: true\n      }, {\n        name: '2'\n      }];\n      checkbox = new Checkbox(fixture, rl);\n      checkbox.run().then(answer => {\n        expect(answer.length).to.equal(0);\n        done();\n      });\n      rl.emit('line');\n    }));","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"disabled can be a function","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":312,"column":34,"index":8466},"line":312,"code":"    it('disabled can be a function', () => {\n      fixture.choices = [{\n        name: 'dis1',\n        disabled(answers) {\n          expect(answers.foo).to.equal('foo');\n          return true;\n        }\n      }];\n      checkbox = new Checkbox(fixture, rl, {\n        foo: 'foo'\n      });\n      const promise = checkbox.run();\n      rl.emit('line');\n      promise.then(() => {\n        expect(rl.output.__raw__).to.contain('- dis1 (Disabled)');\n      });\n    });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to bottom when too far up","suites":["`checkbox` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":332,"column":41,"index":9035},"line":332,"code":"      it('loops to bottom when too far up', async () => {\n        const promise = checkbox.run();\n        rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 2');\n      });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to top when too far down","suites":["`checkbox` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":348,"column":40,"index":9523},"line":348,"code":"      it('loops to top when too far down', async () => {\n        const promise = checkbox.run();\n        rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 1');\n      });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at top when too far up","suites":["`checkbox` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":374,"column":38,"index":10270},"line":374,"code":"      it('stays at top when too far up', async () => {\n        const promise = checkbox.run();\n        rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 1');\n      });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at bottom when too far down","suites":["`checkbox` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":390,"column":43,"index":10761},"line":390,"code":"      it('stays at bottom when too far down', async () => {\n        const promise = checkbox.run();\n        rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 3');\n      });","file":"specs/prompts/checkbox.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to true","suites":["`confirm` prompt"],"updatePoint":{"line":17,"column":28,"index":492},"line":17,"code":"  it('should default to true', () => new Promise(done => {\n    confirm.run().then(answer => {\n      expect(rl.output.__raw__).to.contain('Y/n');\n      expect(answer).to.equal(true);\n      done();\n    });\n    rl.emit('line', '');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default `false` value","suites":["`confirm` prompt"],"updatePoint":{"line":25,"column":42,"index":742},"line":25,"code":"  it('should allow a default `false` value', () => new Promise(done => {\n    fixture.default = false;\n    const falseConfirm = new Confirm(fixture, rl);\n    falseConfirm.run().then(answer => {\n      expect(rl.output.__raw__).to.contain('y/N');\n      expect(answer).to.equal(false);\n      done();\n    });\n    rl.emit('line', '');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default `true` value","suites":["`confirm` prompt"],"updatePoint":{"line":35,"column":41,"index":1077},"line":35,"code":"  it('should allow a default `true` value', () => new Promise(done => {\n    fixture.default = true;\n    const falseConfirm = new Confirm(fixture, rl);\n    falseConfirm.run().then(answer => {\n      expect(rl.output.__raw__).to.contain('Y/n');\n      expect(answer).to.equal(true);\n      done();\n    });\n    rl.emit('line', '');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse 'Y' value to boolean true","suites":["`confirm` prompt"],"updatePoint":{"line":45,"column":44,"index":1413},"line":45,"code":"  it(\"should parse 'Y' value to boolean true\", () => new Promise(done => {\n    confirm.run().then(answer => {\n      expect(answer).to.equal(true);\n      done();\n    });\n    rl.emit('line', 'Y');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse 'Yes' value to boolean true","suites":["`confirm` prompt"],"updatePoint":{"line":52,"column":46,"index":1617},"line":52,"code":"  it(\"should parse 'Yes' value to boolean true\", () => new Promise(done => {\n    confirm.run().then(answer => {\n      expect(answer).to.equal(true);\n      done();\n    });\n    rl.emit('line', 'Yes');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse 'No' value to boolean false","suites":["`confirm` prompt"],"updatePoint":{"line":59,"column":46,"index":1823},"line":59,"code":"  it(\"should parse 'No' value to boolean false\", () => new Promise(done => {\n    confirm.run().then(answer => {\n      expect(answer).to.equal(false);\n      done();\n    });\n    rl.emit('line', 'No');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse every other string value to boolean false","suites":["`confirm` prompt"],"updatePoint":{"line":66,"column":60,"index":2043},"line":66,"code":"  it('should parse every other string value to boolean false', () => new Promise(done => {\n    confirm.run().then(answer => {\n      expect(answer).to.equal(false);\n      done();\n    });\n    rl.emit('line', 'bla bla foo');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should tranform the output based on the boolean value","suites":["`confirm` prompt"],"updatePoint":{"line":73,"column":59,"index":2271},"line":73,"code":"  it('should tranform the output based on the boolean value', () => new Promise(done => {\n    fixture.transformer = value => value ? '👍' : '👎';\n    const confirmOutput = new Confirm(fixture, rl);\n    confirmOutput.run().then(answer => {\n      expect(answer).to.equal('👍');\n      done();\n    }).catch(err => console.log(err));\n    rl.emit('line', 'y');\n  }));","file":"specs/prompts/confirm.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should retrieve temporary files contents","suites":["`editor` prompt"],"updatePoint":{"line":25,"column":46,"index":845},"line":25,"code":"  it('should retrieve temporary files contents', async () => {\n    const prompt = new Editor(fixture, rl);\n    const promise = prompt.run();\n    rl.emit('line', '');\n    const answer = await promise;\n    expect(answer).to.equal(answer);\n  });","file":"specs/prompts/editor.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should open editor without waiting for the user to press enter","suites":["`editor` prompt"],"updatePoint":{"line":32,"column":68,"index":1110},"line":32,"code":"  it('should open editor without waiting for the user to press enter', async () => {\n    const prompt = new Editor({\n      ...fixture,\n      waitUserInput: false\n    }, rl);\n    const answer = await prompt.run();\n    expect(answer).to.equal(answer);\n  });","file":"specs/prompts/editor.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is missing","suites":["`expand` prompt"],"updatePoint":{"line":17,"column":38,"index":495},"line":17,"code":"  it('should throw if `key` is missing', () => {\n    expect(() => {\n      fixture.choices = ['a', 'a'];\n      return new Expand(fixture, rl);\n    }).to.throw(/Format error/);\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is duplicate","suites":["`expand` prompt"],"updatePoint":{"line":23,"column":40,"index":678},"line":23,"code":"  it('should throw if `key` is duplicate', () => {\n    expect(() => {\n      fixture.choices = [{\n        key: 'a',\n        name: 'foo'\n      }, {\n        key: 'a',\n        name: 'foo'\n      }];\n      return new Expand(fixture, rl);\n    }).to.throw(/Duplicate key error/);\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is duplicate case insensitive","suites":["`expand` prompt"],"updatePoint":{"line":35,"column":57,"index":973},"line":35,"code":"  it('should throw if `key` is duplicate case insensitive', () => {\n    expect(() => {\n      fixture.choices = [{\n        key: 'a',\n        name: 'foo'\n      }, {\n        key: 'A',\n        name: 'foo'\n      }];\n      return new Expand(fixture, rl);\n    }).to.throw(/Duplicate key error/);\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is `h`","suites":["`expand` prompt"],"updatePoint":{"line":47,"column":34,"index":1245},"line":47,"code":"  it('should throw if `key` is `h`', () => {\n    expect(() => {\n      fixture.choices = [{\n        key: 'h',\n        name: 'foo'\n      }];\n      return new Expand(fixture, rl);\n    }).to.throw(/Reserved key error/);\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow false as a value","suites":["`expand` prompt"],"updatePoint":{"line":56,"column":35,"index":1468},"line":56,"code":"  it('should allow false as a value', () => {\n    const promise = expand.run();\n    rl.emit('line', 'd');\n    return promise.then(answer => {\n      expect(answer).to.equal(false);\n    });\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"pass the value as answer, and display short on the prompt","suites":["`expand` prompt"],"updatePoint":{"line":63,"column":63,"index":1690},"line":63,"code":"  it('pass the value as answer, and display short on the prompt', () => {\n    fixture.choices = [{\n      key: 'a',\n      name: 'A Name',\n      value: 'a value',\n      short: 'ShortA'\n    }, {\n      key: 'b',\n      name: 'B Name',\n      value: 'b value',\n      short: 'ShortB'\n    }];\n    const prompt = new Expand(fixture, rl);\n    const promise = prompt.run();\n    rl.emit('line', 'b');\n    return promise.then(answer => {\n      expect(answer).to.equal('b value');\n      expect(rl.output.__raw__).to.match(/ShortB/);\n    });\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use a string the `default` value","suites":["`expand` prompt"],"updatePoint":{"line":83,"column":45,"index":2204},"line":83,"code":"  it('should use a string the `default` value', () => new Promise(done => {\n    fixture.default = 'chile';\n    expand = new Expand(fixture, rl);\n    expand.run().then(answer => {\n      expect(answer).to.equal('chile');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use the `default` argument value","suites":["`expand` prompt"],"updatePoint":{"line":92,"column":45,"index":2473},"line":92,"code":"  it('should use the `default` argument value', () => new Promise(done => {\n    fixture.default = 1;\n    expand = new Expand(fixture, rl);\n    expand.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return the user input","suites":["`expand` prompt"],"updatePoint":{"line":101,"column":34,"index":2723},"line":101,"code":"  it('should return the user input', () => new Promise(done => {\n    expand.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.emit('line', 'b');\n  }));","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should strip the user input","suites":["`expand` prompt"],"updatePoint":{"line":108,"column":33,"index":2914},"line":108,"code":"  it('should strip the user input', () => new Promise(done => {\n    expand.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.emit('line', ' b ');\n  }));","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should have help option","suites":["`expand` prompt"],"updatePoint":{"line":115,"column":29,"index":3103},"line":115,"code":"  it('should have help option', () => new Promise(done => {\n    expand.run().then(answer => {\n      expect(rl.output.__raw__).to.match(/a\\) acab/);\n      expect(rl.output.__raw__).to.match(/b\\) bar/);\n      expect(answer).to.equal('chile');\n      done();\n    });\n    rl.emit('line', 'h');\n    rl.emit('line', 'c');\n  }));","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not allow invalid command","suites":["`expand` prompt"],"updatePoint":{"line":125,"column":38,"index":3434},"line":125,"code":"  it('should not allow invalid command', () => {\n    const promise = expand.run();\n    rl.emit('line', 'blah');\n    setTimeout(() => {\n      rl.emit('line', 'a');\n    }, 10);\n    return promise;\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice `key`","suites":["`expand` prompt"],"updatePoint":{"line":133,"column":60,"index":3657},"line":133,"code":"  it('should display and capitalize the default choice `key`', () => {\n    fixture.default = 1;\n    expand = new Expand(fixture, rl);\n    expand.run();\n    expect(rl.output.__raw__).to.contain('(aBcdh)');\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice by name value","suites":["`expand` prompt"],"updatePoint":{"line":139,"column":68,"index":3876},"line":139,"code":"  it('should display and capitalize the default choice by name value', () => {\n    fixture.default = 'chile';\n    expand = new Expand(fixture, rl);\n    expand.run();\n    expect(rl.output.__raw__).to.contain('(abCdh)');\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice H (Help) `key` if no string default matched","suites":["`expand` prompt"],"updatePoint":{"line":145,"column":98,"index":4131},"line":145,"code":"  it('should display and capitalize the default choice H (Help) `key` if no string default matched', () => {\n    fixture.default = 'chile!';\n    expand = new Expand(fixture, rl);\n    expand.run();\n    expect(rl.output.__raw__).to.contain('(abcdH)');\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice H (Help) `key` if none provided","suites":["`expand` prompt"],"updatePoint":{"line":151,"column":86,"index":4375},"line":151,"code":"  it('should display and capitalize the default choice H (Help) `key` if none provided', () => {\n    delete fixture.default;\n    expand = new Expand(fixture, rl);\n    expand.run();\n    expect(rl.output.__raw__).to.contain('(abcdH)');\n  });","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should 'autocomplete' the user input","suites":["`expand` prompt"],"updatePoint":{"line":157,"column":42,"index":4571},"line":157,"code":"  it(\"should 'autocomplete' the user input\", () => new Promise(done => {\n    expand = new Expand(fixture, rl);\n    expand.run();\n    rl.line = 'a';\n    rl.emit('keypress');\n    setTimeout(() => {\n      expect(rl.output.__raw__).to.contain('acab');\n      done();\n    }, 10);\n  }));","file":"specs/prompts/expand.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use raw value from the user","suites":["`input` prompt"],"updatePoint":{"line":15,"column":40,"index":498},"line":15,"code":"  it('should use raw value from the user', function (done) {\n    const input = new Input(this.fixture, this.rl);\n    input.run().then(answer => {\n      expect(answer).to.equal('Inquirer');\n      done();\n    });\n    this.rl.emit('line', 'Inquirer');\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should output filtered value","suites":["`input` prompt"],"updatePoint":{"line":23,"column":34,"index":747},"line":23,"code":"  it('should output filtered value', function () {\n    this.fixture.filter = function () {\n      return 'pass';\n    };\n    const prompt = new Input(this.fixture, this.rl);\n    const promise = prompt.run();\n    this.rl.emit('line', '');\n    return promise.then(() => {\n      expect(this.rl.output.__raw__).to.contain('pass');\n    });\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should apply the provided transform to the value","suites":["`input` prompt"],"updatePoint":{"line":34,"column":54,"index":1106},"line":34,"code":"  it('should apply the provided transform to the value', function (done) {\n    this.fixture.transformer = function (value) {\n      return value.split('').reverse().join('');\n    };\n    const prompt = new Input(this.fixture, this.rl);\n    prompt.run();\n    this.rl.line = 'Inquirer';\n    this.rl.input.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.contain('reriuqnI');\n      done();\n    }, 10);\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use the answers object in the provided transformer","suites":["`input` prompt"],"updatePoint":{"line":47,"column":63,"index":1550},"line":47,"code":"  it('should use the answers object in the provided transformer', function (done) {\n    this.fixture.transformer = function (value, answers) {\n      return answers.capitalize ? value.toUpperCase() : value;\n    };\n    const answers = {\n      capitalize: true\n    };\n    const prompt = new Input(this.fixture, this.rl, answers);\n    prompt.run();\n    this.rl.line = 'inquirer';\n    this.rl.input.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.contain('INQUIRER');\n      done();\n    }, 200);\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use the flags object in the provided transformer","suites":["`input` prompt"],"updatePoint":{"line":63,"column":61,"index":2077},"line":63,"code":"  it('should use the flags object in the provided transformer', function (done) {\n    this.fixture.transformer = function (value, answers, flags) {\n      const text = answers.capitalize ? value.toUpperCase() : value;\n      if (flags.isFinal) return text + '!';\n      return text;\n    };\n    const answers = {\n      capitalize: true\n    };\n    const prompt = new Input(this.fixture, this.rl, answers);\n    prompt.run();\n    this.rl.line = 'inquirer';\n    this.rl.input.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.contain('INQUIRER');\n      done();\n    }, 200);\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should clear default on input","suites":["`input` prompt"],"updatePoint":{"line":81,"column":35,"index":2654},"line":81,"code":"  it('should clear default on input', function (done) {\n    const defaultValue = 'default-string';\n    const input = new Input({\n      ...this.fixture,\n      default: defaultValue\n    }, this.rl);\n    input.run();\n    this.rl.line = 'inquirer';\n    this.rl.input.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.have.entriesCount(defaultValue, 1);\n      done();\n    }, 200);\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to first choice","suites":["`list` prompt"],"updatePoint":{"line":18,"column":36,"index":506},"line":18,"code":"  it('should default to first choice', () => new Promise(done => {\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should move selected cursor on keypress","suites":["`list` prompt"],"updatePoint":{"line":25,"column":45,"index":702},"line":25,"code":"  it('should move selected cursor on keypress', () => new Promise(done => {\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation","suites":["`list` prompt"],"updatePoint":{"line":35,"column":39,"index":955},"line":35,"code":"  it('should allow for arrow navigation', () => new Promise(done => {\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.input.emit('keypress', '', {\n      name: 'up'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for vi-style navigation","suites":["`list` prompt"],"updatePoint":{"line":51,"column":42,"index":1335},"line":51,"code":"  it('should allow for vi-style navigation', () => new Promise(done => {\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    rl.input.emit('keypress', 'k', {\n      name: 'k'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for emacs-style navigation","suites":["`list` prompt"],"updatePoint":{"line":67,"column":45,"index":1714},"line":67,"code":"  it('should allow for emacs-style navigation', () => new Promise(done => {\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    rl.input.emit('keypress', 'p', {\n      name: 'p',\n      ctrl: true\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to bottom when too far up","suites":["`list` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":99,"column":41,"index":2494},"line":99,"code":"      it('loops to bottom when too far up', async () => {\n        const promise = list.run();\n        pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('bar');\n      });","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to top when too far down","suites":["`list` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":105,"column":40,"index":2702},"line":105,"code":"      it('loops to top when too far down', async () => {\n        const promise = list.run();\n        pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at top when too far up","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":118,"column":38,"index":3082},"line":118,"code":"      it('stays at top when too far up', async () => {\n        const promise = list.run();\n        pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at bottom when too far down","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":124,"column":43,"index":3293},"line":124,"code":"      it('stays at bottom when too far down', async () => {\n        const promise = list.run();\n        pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('bum');\n      });","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should require a choices array","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":132,"column":36,"index":3513},"line":132,"code":"  it('should require a choices array', () => {\n    expect(() => new List({\n      name: 'foo',\n      message: 'bar'\n    })).to.throw(/choices/);\n  });","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a numeric default","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":138,"column":36,"index":3663},"line":138,"code":"  it('should allow a numeric default', () => new Promise(done => {\n    fixture.default = 1;\n    const list = new List(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should work from a numeric default being the index","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":147,"column":56,"index":3935},"line":147,"code":"  it('should work from a numeric default being the index', () => new Promise(done => {\n    fixture.default = 1;\n    const list = new List(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bum');\n      done();\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a string default being the value","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":159,"column":51,"index":4265},"line":159,"code":"  it('should allow a string default being the value', () => new Promise(done => {\n    fixture.default = 'bar';\n    const list = new List(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should work from a string default","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":168,"column":39,"index":4524},"line":168,"code":"  it('should work from a string default', () => new Promise(done => {\n    fixture.default = 'bar';\n    const list = new List(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bum');\n      done();\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid string default to change position","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":180,"column":66,"index":4873},"line":180,"code":"  it(\"shouldn't allow an invalid string default to change position\", () => new Promise(done => {\n    fixture.default = 'babar';\n    const list = new List(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid index as default","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":189,"column":49,"index":5144},"line":189,"code":"  it(\"shouldn't allow an invalid index as default\", () => new Promise(done => {\n    fixture.default = 4;\n    const list = new List(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow 1-9 shortcut key","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":198,"column":35,"index":5395},"line":198,"code":"  it('should allow 1-9 shortcut key', () => new Promise(done => {\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.input.emit('keypress', '2');\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"pagination works with multiline choices","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":206,"column":45,"index":5627},"line":206,"code":"  it('pagination works with multiline choices', () => new Promise(done => {\n    const multilineFixture = {\n      message: 'message',\n      name: 'name',\n      choices: ['a\\n\\n', 'b\\n\\n']\n    };\n    const list = new List(multilineFixture, rl);\n    const spy = sinon.spy(list.paginator, 'paginate');\n    list.run().then(answer => {\n      const realIndexPosition1 = spy.firstCall.args[1];\n      const realIndexPosition2 = spy.secondCall.args[1];\n\n      // 'a\\n\\n': 0th index, but pagination at 2nd index position due to 2 extra newlines\n      expect(realIndexPosition1).to.equal(2);\n      // 'b\\n\\n': 1st index, but pagination at 5th index position due to 4 extra newlines\n      expect(realIndexPosition2).to.equal(5);\n      expect(answer).to.equal('b\\n\\n');\n      done();\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"paginator uses non infinite version with loop:false","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":230,"column":57,"index":6508},"line":230,"code":"  it('paginator uses non infinite version with loop:false', () => {\n    const list = new List({\n      name: 'numbers',\n      choices: [1, 2, 3],\n      loop: false\n    }, rl);\n    expect(list.paginator.isInfinite).equal(false);\n  });","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should provide answers in the \"filter\" callback option","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":238,"column":60,"index":6744},"line":238,"code":"  it('should provide answers in the \"filter\" callback option', () => new Promise(done => {\n    const answers = {};\n    fixture.filter = function () {\n      return true;\n    };\n    sinon.spy(fixture, 'filter');\n    const list = new List(fixture, rl, answers);\n    list.run().then(() => {\n      const spyCall = fixture.filter.getCall(0);\n      expect(spyCall.args[1]).to.equal(answers);\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/list.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse the largest number","suites":["`number` prompt"],"updatePoint":{"line":18,"column":37,"index":538},"line":18,"code":"  it('should parse the largest number', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.equal(Number.MAX_SAFE_INTEGER);\n      done();\n    });\n    rl.emit('line', String(Number.MAX_SAFE_INTEGER));\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse the smallest number","suites":["`number` prompt"],"updatePoint":{"line":25,"column":38,"index":780},"line":25,"code":"  it('should parse the smallest number', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.equal(Number.MIN_SAFE_INTEGER);\n      done();\n    });\n    rl.emit('line', String(Number.MIN_SAFE_INTEGER));\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse an integer","suites":["`number` prompt"],"updatePoint":{"line":32,"column":29,"index":1013},"line":32,"code":"  it('should parse an integer', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.equal(42);\n      done();\n    });\n    rl.emit('line', '42');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a negative integer","suites":["`number` prompt"],"updatePoint":{"line":39,"column":37,"index":1206},"line":39,"code":"  it('should parse a negative integer', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.equal(-363);\n      done();\n    });\n    rl.emit('line', '-363');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a positive float","suites":["`number` prompt"],"updatePoint":{"line":46,"column":35,"index":1401},"line":46,"code":"  it('should parse a positive float', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.be.closeTo(4353.43, ACCEPTABLE_ERROR);\n      done();\n    });\n    rl.emit('line', '4353.43');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a negative float","suites":["`number` prompt"],"updatePoint":{"line":53,"column":35,"index":1625},"line":53,"code":"  it('should parse a negative float', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.be.closeTo(-4353.43, ACCEPTABLE_ERROR);\n      done();\n    });\n    rl.emit('line', '-4353.43');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a float with no digits before the decimal","suites":["`number` prompt"],"updatePoint":{"line":60,"column":60,"index":1876},"line":60,"code":"  it('should parse a float with no digits before the decimal', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.be.closeTo(0.01264, ACCEPTABLE_ERROR);\n      done();\n    });\n    rl.emit('line', '.01264');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a float with no digits after the decimal","suites":["`number` prompt"],"updatePoint":{"line":67,"column":59,"index":2123},"line":67,"code":"  it('should parse a float with no digits after the decimal', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.be.closeTo(1234.0, ACCEPTABLE_ERROR);\n      done();\n    });\n    rl.emit('line', '1234.');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a float with exponents","suites":["`number` prompt"],"updatePoint":{"line":74,"column":41,"index":2350},"line":74,"code":"  it('should parse a float with exponents', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.be.closeTo(534e12, ACCEPTABLE_ERROR);\n      done();\n    });\n    rl.emit('line', '534e12');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse any other string as NaN","suites":["`number` prompt"],"updatePoint":{"line":81,"column":42,"index":2579},"line":81,"code":"  it('should parse any other string as NaN', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.be.NaN; // eslint-disable-line no-unused-expressions\n      done();\n    });\n    rl.emit('line', 'The cat');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse the empty string as NaN","suites":["`number` prompt"],"updatePoint":{"line":88,"column":42,"index":2824},"line":88,"code":"  it('should parse the empty string as NaN', () => new Promise(done => {\n    number.run().then(answer => {\n      expect(answer).to.be.NaN; // eslint-disable-line no-unused-expressions\n      done();\n    });\n    rl.emit('line', '');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return default value if it is set on a bad input","suites":["`number` prompt"],"updatePoint":{"line":95,"column":61,"index":3081},"line":95,"code":"  it('should return default value if it is set on a bad input', () => new Promise(done => {\n    number.opt.default = 11;\n    number.run().then(answer => {\n      expect(answer).to.equal(11);\n      done();\n    });\n    rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/number.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use raw value from the user without masking","suites":["`password` prompt"],"updatePoint":{"line":27,"column":56,"index":797},"line":27,"code":"  it('should use raw value from the user without masking', () => {\n    const password = new Password(fixture, rl);\n    const promise = password.run().then(testMasking(rl, false));\n    rl.emit('line', 'Inquirer');\n    return promise;\n  });","file":"specs/prompts/password.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should mask the input with \"*\" if the `mask` option was provided by the user was `true`","suites":["`password` prompt"],"updatePoint":{"line":33,"column":93,"index":1073},"line":33,"code":"  it('should mask the input with \"*\" if the `mask` option was provided by the user was `true`', () => {\n    fixture.mask = true;\n    const password = new Password(fixture, rl);\n    const promise = password.run().then(testMasking(rl, '********'));\n    rl.emit('line', 'Inquirer');\n    return promise;\n  });","file":"specs/prompts/password.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should mask the input if a `mask` string was provided by the user","suites":["`password` prompt"],"updatePoint":{"line":40,"column":71,"index":1357},"line":40,"code":"  it('should mask the input if a `mask` string was provided by the user', () => {\n    fixture.mask = '#';\n    const password = new Password(fixture, rl);\n    const promise = password.run().then(testMasking(rl, '########'));\n    rl.emit('line', 'Inquirer');\n    return promise;\n  });","file":"specs/prompts/password.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Preserves default","suites":["`password` prompt"],"updatePoint":{"line":47,"column":23,"index":1592},"line":47,"code":"  it('Preserves default', () => {\n    fixture.default = 'Inquirer';\n    const password = new Password(fixture, rl);\n    const promise = password.run().then(answer => expect(answer).to.equal('Inquirer'));\n    rl.emit('line', '');\n    return promise;\n  });","file":"specs/prompts/password.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Clears default on keypress","suites":["`password` prompt"],"updatePoint":{"line":54,"column":32,"index":1856},"line":54,"code":"  it('Clears default on keypress', () => {\n    fixture.default = 'Inquirer';\n    const password = new Password(fixture, rl);\n    const promise = password.run().then(answer => expect(answer).to.equal(''));\n    password.onKeypress({\n      name: 'backspace'\n    });\n    rl.emit('line', '');\n    return promise;\n  });","file":"specs/prompts/password.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not display input during async validation","suites":["`password` prompt"],"updatePoint":{"line":66,"column":54,"index":2256},"line":66,"code":"  it('should not display input during async validation', () => {\n    let output = '';\n    let renderCount = 0;\n    fixture.validate = () => new Promise(resolve => {\n      const id = setInterval(() => {\n        // Make sure we render at least once.\n        if (renderCount > 1) {\n          clearInterval(id);\n          resolve(true);\n        }\n      }, 10);\n    });\n    const password = new Password(fixture, rl);\n    const input = 'wvAq82yVujm5S9pf';\n\n    // Override screen.render to capture all output\n    const {\n      screen\n    } = password;\n    const {\n      render\n    } = screen;\n    screen.render = (...args) => {\n      output += stripAnsi(args.join(''));\n      renderCount += 1;\n      return render.call(screen, ...args);\n    };\n\n    /* This test should fail if you uncomment this line: */\n    // password.getSpinningValue = (value) => value;\n\n    const promise = password.run().then(answer => {\n      expect(output).to.not.contain(input);\n      expect(answer).to.equal(input);\n    });\n    rl.emit('line', input);\n    return promise;\n  });","file":"specs/prompts/password.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to first choice","suites":["`rawlist` prompt"],"updatePoint":{"line":17,"column":36,"index":500},"line":17,"code":"  it('should default to first choice', () => new Promise(done => {\n    rawlist.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select given index","suites":["`rawlist` prompt"],"updatePoint":{"line":24,"column":31,"index":685},"line":24,"code":"  it('should select given index', () => new Promise(done => {\n    rawlist.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.emit('line', '2');\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not allow invalid index","suites":["`rawlist` prompt"],"updatePoint":{"line":31,"column":36,"index":880},"line":31,"code":"  it('should not allow invalid index', () => {\n    const promise = rawlist.run();\n    rl.emit('line', 'blah');\n    setTimeout(() => {\n      rl.emit('line', '1');\n    }, 10);\n    return promise;\n  });","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should require a choices array","suites":["`rawlist` prompt"],"updatePoint":{"line":39,"column":36,"index":1080},"line":39,"code":"  it('should require a choices array', () => {\n    const mkPrompt = function () {\n      return new Rawlist({\n        name: 'foo',\n        message: 'bar'\n      });\n    };\n    expect(mkPrompt).to.throw(/choices/);\n  });","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default index","suites":["`rawlist` prompt"],"updatePoint":{"line":48,"column":34,"index":1296},"line":48,"code":"  it('should allow a default index', () => new Promise(done => {\n    fixture.default = 1;\n    const list = new Rawlist(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid index as default","suites":["`rawlist` prompt"],"updatePoint":{"line":57,"column":49,"index":1564},"line":57,"code":"  it(\"shouldn't allow an invalid index as default\", () => new Promise(done => {\n    fixture.default = 4;\n    const list = new Rawlist(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow string default being the value","suites":["`rawlist` prompt"],"updatePoint":{"line":66,"column":49,"index":1832},"line":66,"code":"  it('should allow string default being the value', () => new Promise(done => {\n    fixture.default = 'bum';\n    const list = new Rawlist(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bum');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid string default to change position","suites":["`rawlist` prompt"],"updatePoint":{"line":75,"column":66,"index":2121},"line":75,"code":"  it(\"shouldn't allow an invalid string default to change position\", () => new Promise(done => {\n    fixture.default = 'bumby';\n    const list = new Rawlist(fixture, rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    rl.emit('line');\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation","suites":["`rawlist` prompt"],"updatePoint":{"line":84,"column":39,"index":2385},"line":84,"code":"  it('should allow for arrow navigation', () => new Promise(done => {\n    rawlist.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.input.emit('keypress', '', {\n      name: 'up'\n    });\n    rl.emit('line', rl.line);\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation after invalid input","suites":["`rawlist` prompt"],"updatePoint":{"line":100,"column":59,"index":2794},"line":100,"code":"  it('should allow for arrow navigation after invalid input', () => new Promise(done => {\n    rawlist.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    }).catch(done);\n    rl.emit('line', 'blah');\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    rl.input.emit('keypress', '', {\n      name: 'up'\n    });\n    rl.emit('line', rl.line);\n  }));","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to bottom when too far up","suites":["`rawlist` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":130,"column":41,"index":3586},"line":130,"code":"      it('loops to bottom when too far up', async () => {\n        const promise = rawlist.run();\n        pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('bar');\n      });","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to top when too far down","suites":["`rawlist` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":136,"column":40,"index":3797},"line":136,"code":"      it('loops to top when too far down', async () => {\n        const promise = rawlist.run();\n        pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at top when too far up","suites":["`rawlist` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":149,"column":38,"index":4186},"line":149,"code":"      it('stays at top when too far up', async () => {\n        const promise = rawlist.run();\n        pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at bottom when too far down","suites":["`rawlist` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":155,"column":43,"index":4400},"line":155,"code":"      it('stays at bottom when too far down', async () => {\n        const promise = rawlist.run();\n        pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('bum');\n      });","file":"specs/prompts/rawlist.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"does nothing if output is smaller than page size","suites":["paginator"],"updatePoint":{"line":46,"column":54,"index":691},"line":46,"code":"  it('does nothing if output is smaller than page size', () => {\n    expect(paginator.paginate(output, 0, endIndex + 1)).equal(output);\n  });","file":"specs/utils/paginator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"paginate returns slice of lines","suites":["paginator"],"updatePoint":{"line":49,"column":37,"index":816},"line":49,"code":"  it('paginate returns slice of lines', () => {\n    expect(getPage(paginator, 0)).equal(`\\\na\nb\nc`);\n  });","file":"specs/utils/paginator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"slice has offset after later pages are rendered","suites":["paginator"],"updatePoint":{"line":55,"column":53,"index":938},"line":55,"code":"  it('slice has offset after later pages are rendered', () => {\n    expect(getPage(paginator, 0)).equal(`\\\na\nb\nc`);\n    expect(getPage(paginator, 1)).equal(`\\\na\nb\nc`);\n    expect(getPage(paginator, 2)).equal(`\\\nb\nc\nd`);\n  });","file":"specs/utils/paginator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"slice offset does not reset","suites":["paginator"],"updatePoint":{"line":69,"column":33,"index":1144},"line":69,"code":"  it('slice offset does not reset', () => {\n    expect(getPage(paginator, 2));\n    expect(getPage(paginator, 0)).equal(`\\\nz\na\nb`);\n  });","file":"specs/utils/paginator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shows start for as long as possible","suites":["paginator","non infinite mode"],"updatePoint":{"line":82,"column":43,"index":1443},"line":82,"code":"    it('shows start for as long as possible', () => {\n      expect(getPage(paginator, 0)).equal(`\\\na\nb\nc`);\n      expect(getPage(paginator, 1)).equal(`\\\na\nb\nc`);\n      expect(getPage(paginator, 2)).equal(`\\\na\nb\nc`);\n      expect(getPage(paginator, 3)).equal(`\\\nb\nc\nd`);\n    });","file":"specs/utils/paginator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"slice offset does reset","suites":["paginator","non infinite mode"],"updatePoint":{"line":100,"column":31,"index":1709},"line":100,"code":"    it('slice offset does reset', () => {\n      getPage(paginator, 3);\n      expect(getPage(paginator, 0)).equal(`\\\na\nb\nc`);\n    });","file":"specs/utils/paginator.test.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"aligns end to bottom","suites":["paginator","non infinite mode"],"updatePoint":{"line":107,"column":28,"index":1839},"line":107,"code":"    it('aligns end to bottom', () => {\n      expect(getPage(paginator, endIndex - 3)).equal(`\\\nu\nv\nw`);\n      expect(getPage(paginator, endIndex - 2)).equal(`\\\nv\nw\nx`);\n      expect(getPage(paginator, endIndex - 1)).equal(`\\\nw\nx\ny`);\n      expect(getPage(paginator, endIndex)).equal(`\\\nx\ny\nz`);\n    });","file":"specs/utils/paginator.test.js","skipped":false,"dir":"packages/inquirer/test"}]}