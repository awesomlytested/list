{"repo":"winstonjs/winston","url":"https://github.com/winstonjs/winston","branch":"master","configs":[{"package":"winston","lang":"ts","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"non-TTY environment","suites":["winston.format.colorize (Integration)"],"updatePoint":{"line":34,"column":25},"line":34,"code":"  it('non-TTY environment', function (done) {\n    spawnColorizer(function (err, data) {\n      assume(err).equals(null);\n      assume(data).includes('\\u001b[32mSimply a test\\u001b[39m');\n      done();\n    })\n  });","file":"integration/formats.test.js","skipped":false,"dir":"test"},{"name":"winston.transports","suites":["winston"],"updatePoint":{"line":15,"column":24},"line":15,"code":"  it('winston.transports', function () {\n    assume(winston.transports).is.an('object');\n    assume(winston.Transport).is.a('function');\n    assume(!winston.transports.Transport).true();\n    assume(winston.transports.Console).is.a('function');\n    assume(winston.transports.File).is.a('function');\n  });","file":"integration/winston.test.js","skipped":false,"dir":"test"},{"name":"has expected initial state","suites":["winston"],"updatePoint":{"line":23,"column":32},"line":23,"code":"  it('has expected initial state', function () {\n    assume(winston.default.transports).deep.equals([]);\n    assume(winston.level).equals('info');\n  });","file":"integration/winston.test.js","skipped":false,"dir":"test"},{"name":"has expected methods","suites":["winston"],"updatePoint":{"line":28,"column":26},"line":28,"code":"  it('has expected methods', function () {\n    assume(winston.config).is.an('object');\n    ['createLogger', 'add', 'remove', 'clear', 'child']\n      .concat(Object.keys(winston.config.npm.levels))\n      .forEach(function (key) {\n        assume(winston[key]).is.a('function', 'winston.' + key);\n      });\n  });","file":"integration/winston.test.js","skipped":false,"dir":"test"},{"name":"exposes version","suites":["winston"],"updatePoint":{"line":37,"column":21},"line":37,"code":"  it('exposes version', function () {\n    assume(winston.version).equals(require('../../package.json').version);\n  });","file":"integration/winston.test.js","skipped":false,"dir":"test"},{"name":"abstract-winston-logger","suites":["winston"],"updatePoint":{"line":41,"column":29},"line":41,"code":"  it('abstract-winston-logger');","file":"integration/winston.test.js","skipped":false,"dir":"test"},{"name":"logger.log(level, error)","suites":["format.errors (integration)"],"updatePoint":{"line":39,"column":30},"line":39,"code":"  it('logger.log(level, error)', (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info);\n      done();\n    }, format.errors());\n\n    logger.log('info', new Error('Errors lack .toJSON() lulz'));\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.log(level, error) [custom error properties]","suites":["format.errors (integration)"],"updatePoint":{"line":48,"column":56},"line":48,"code":"  it('logger.log(level, error) [custom error properties]', (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, {\n        something: true,\n        wut: 'another string'\n      });\n\n      done();\n    }, format.errors());\n\n    const err = new Error('Errors lack .toJSON() lulz');\n    err.something = true;\n    err.wut = 'another string';\n\n    logger.log('info', err);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.log(level, error, meta)","suites":["format.errors (integration)"],"updatePoint":{"line":65,"column":36},"line":65,"code":"  it('logger.log(level, error, meta)', (done) => {\n    const meta = {\n      thisIsMeta: true,\n      anyValue: 'a string'\n    };\n\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, meta);\n      done();\n    }, format.errors());\n\n    logger.log('info', new Error('Errors lack .toJSON() lulz'), meta);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.log(level, error, meta) [custom error properties]","suites":["format.errors (integration)"],"updatePoint":{"line":79,"column":62},"line":79,"code":"  it('logger.log(level, error, meta) [custom error properties]', (done) => {\n    const meta = {\n      thisIsMeta: true,\n      anyValue: 'a string'\n    };\n\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, Object.assign({\n        something: true,\n        wut: 'another string'\n      }, meta));\n\n      done();\n    }, format.errors());\n\n    const err = new Error('Errors lack .toJSON() lulz');\n    err.something = true;\n    err.wut = 'another string';\n\n    logger.log('info', err, meta);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.log(level, msg, meta<error>)","suites":["format.errors (integration)"],"updatePoint":{"line":101,"column":41},"line":101,"code":"  it('logger.log(level, msg, meta<error>)', (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, {\n        message: 'Caught error: Errors lack .toJSON() lulz'\n      });\n\n      done();\n    }, format.combine(\n      format.errors(),\n      format.printf(info => info.message)\n    ));\n\n    logger.log('info', 'Caught error:', new Error('Errors lack .toJSON() lulz'));\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.log(level, msg, meta<error>) [custom error properties]","suites":["format.errors (integration)"],"updatePoint":{"line":116,"column":67},"line":116,"code":"  it('logger.log(level, msg, meta<error>) [custom error properties]', (done) => {\n    const err = new Error('Errors lack .toJSON() lulz');\n    err.something = true;\n    err.wut = 'another string';\n\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, {\n        message: 'Caught error: Errors lack .toJSON() lulz',\n        stack: err.stack,\n        something: true,\n        wut: 'another string'\n      });\n\n      done();\n    }, format.combine(\n      format.errors(),\n      format.printf(info => info.message)\n    ));\n\n    logger.log('info', 'Caught error:', err);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.<level>(error)","suites":["format.errors (integration)"],"updatePoint":{"line":138,"column":27},"line":138,"code":"  it('logger.<level>(error)', (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info);\n      done();\n    }, format.errors());\n\n    logger.info(new Error('Errors lack .toJSON() lulz'));\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.<level>(error) [custom error properties]","suites":["format.errors (integration)"],"updatePoint":{"line":147,"column":53},"line":147,"code":"  it('logger.<level>(error) [custom error properties]', (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, {\n        something: true,\n        wut: 'another string'\n      });\n\n      done();\n    }, format.errors());\n\n    const err = new Error('Errors lack .toJSON() lulz');\n    err.something = true;\n    err.wut = 'another string';\n\n    logger.info(err);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.<level>(error, meta)","suites":["format.errors (integration)"],"updatePoint":{"line":164,"column":33},"line":164,"code":"  it('logger.<level>(error, meta)', (done) => {\n    const meta = {\n      thisIsMeta: true,\n      anyValue: 'a string'\n    };\n\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, meta);\n      done();\n    }, format.errors());\n\n    logger.info(new Error('Errors lack .toJSON() lulz'), meta);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.<level>(error, meta) [custom error properties]","suites":["format.errors (integration)"],"updatePoint":{"line":178,"column":59},"line":178,"code":"  it('logger.<level>(error, meta) [custom error properties]', (done) => {\n    const meta = {\n      thisIsMeta: true,\n      anyValue: 'a string'\n    };\n\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, Object.assign({\n        something: true,\n        wut: 'another string'\n      }, meta));\n\n      done();\n    }, format.errors());\n\n    const err = new Error('Errors lack .toJSON() lulz');\n    err.something = true;\n    err.wut = 'another string';\n\n    logger.info(err, meta);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.<level>(msg, meta<error>)","suites":["format.errors (integration)"],"updatePoint":{"line":200,"column":38},"line":200,"code":"  it('logger.<level>(msg, meta<error>)', (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, {\n        message: 'Caught error: Errors lack .toJSON() lulz'\n      });\n\n      done();\n    }, format.combine(\n      format.errors(),\n      format.printf(info => info.message)\n    ));\n\n    logger.info('Caught error:', new Error('Errors lack .toJSON() lulz'));\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"logger.<level>(msg, meta<error>) [custom error properties]","suites":["format.errors (integration)"],"updatePoint":{"line":215,"column":64},"line":215,"code":"  it('logger.<level>(msg, meta<error>) [custom error properties]', (done) => {\n    const err = new Error('Errors lack .toJSON() lulz');\n    err.something = true;\n    err.wut = 'another string';\n\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, {\n        message: 'Caught error: Errors lack .toJSON() lulz',\n        stack: err.stack,\n        something: true,\n        wut: 'another string'\n      });\n\n      done();\n    }, format.combine(\n      format.errors(),\n      format.printf(info => info.message)\n    ));\n\n    logger.info('Caught error:', err);\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"Promise.reject().catch(logger.<level>)","suites":["format.errors (integration)"],"updatePoint":{"line":237,"column":44},"line":237,"code":"  it(`Promise.reject().catch(logger.<level>)`, (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, { level: 'error' });\n      done();\n    }, format.errors());\n\n    new Promise((done, reject) => {\n      throw new Error('Errors lack .toJSON() lulz')\n    }).catch(logger.error.bind(logger));\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"Promise.reject().catch(logger.<level>) [custom error properties]","suites":["format.errors (integration)"],"updatePoint":{"line":248,"column":70},"line":248,"code":"  it(`Promise.reject().catch(logger.<level>) [custom error properties]`, (done) => {\n    const logger = helpers.createLogger(function (info) {\n      assumeExpectedInfo(info, {\n        level: 'error',\n        something: true,\n        wut: 'a string'\n      });\n\n      done();\n    }, format.errors());\n\n    new Promise((done, reject) => {\n      const err = new Error('Errors lack .toJSON() lulz');\n      err.something = true;\n      err.wut = 'a string';\n\n      throw err;\n    }).catch(logger.error.bind(logger));\n  });","file":"unit/formats/errors.test.js","skipped":false,"dir":"test"},{"name":"should have expected methods","suites":["winston.config"],"updatePoint":{"line":14,"column":34},"line":14,"code":"  it('should have expected methods', function () {\n    assume(winston.config).is.an('object');\n    assume(winston.config.addColors).is.a('function');\n    assume(winston.config.cli).is.an('object');\n    assume(winston.config.npm).is.an('object');\n    assume(winston.config.syslog).is.an('object');\n  });","file":"unit/winston/config/config.test.js","skipped":false,"dir":"test"},{"name":".add(default-test)","suites":["Container","no transports"],"updatePoint":{"line":17,"column":26},"line":17,"code":"    it('.add(default-test)', function () {\n      defaultTest = container.add('default-test');\n      assume(defaultTest.log).is.a('function');\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".get(default-test)","suites":["Container","no transports"],"updatePoint":{"line":22,"column":26},"line":22,"code":"    it('.get(default-test)', function () {\n      assume(container.get('default-test')).equals(defaultTest);\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".has(default-test)","suites":["Container","no transports"],"updatePoint":{"line":26,"column":26},"line":26,"code":"    it('.has(default-test)', function () {\n      assume(container.has('default-test')).true();\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".has(not-has)","suites":["Container","no transports"],"updatePoint":{"line":30,"column":21},"line":30,"code":"    it('.has(not-has)', function () {\n      assume(container.has('not-has')).false();\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".close(default-test)","suites":["Container","no transports"],"updatePoint":{"line":34,"column":28},"line":34,"code":"    it('.close(default-test)', function () {\n      container.close('default-test');\n      assume(container.loggers.has('default-test')).falsy();\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".close(non-existent)","suites":["Container","no transports"],"updatePoint":{"line":39,"column":28},"line":39,"code":"    it('.close(non-existent)', function () {\n      container.close('non-existent');\n      assume(container.loggers.has('non-existent')).falsy();\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".close()","suites":["Container","no transports"],"updatePoint":{"line":44,"column":16},"line":44,"code":"    it('.close()', function () {\n      container.close();\n      assume(container.loggers.has()).falsy();\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".get(some-logger)","suites":["Container","explicit transports"],"updatePoint":{"line":55,"column":25},"line":55,"code":"    it('.get(some-logger)', function () {\n      all.someLogger = container.get('some-logger');\n      assume(all.someLogger._readableState.pipes).instanceOf(winston.transports.Http);\n      assume(all.someLogger._readableState.pipes).equals(transports[0]);\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":".get(some-other-logger)","suites":["Container","explicit transports"],"updatePoint":{"line":61,"column":31},"line":61,"code":"    it('.get(some-other-logger)', function () {\n      all.someOtherLogger = container.get('some-other-logger');\n\n      assume(all.someOtherLogger._readableState.pipes).instanceOf(winston.transports.Http);\n      assume(all.someOtherLogger._readableState.pipes).equals(transports[0]);\n      assume(all.someOtherLogger._readableState.pipes).equals(all.someLogger._readableState.pipes);\n    });","file":"unit/winston/container.test.js","skipped":false,"dir":"test"},{"name":"should build a logger with default values","suites":["Create Logger"],"updatePoint":{"line":8,"column":49},"line":8,"code":"    it('should build a logger with default values', function () {\n        let logger = winston.createLogger();\n        assume(logger).is.an('object');\n        assume(isStream(logger.format));\n        assume(logger.level).equals('info');\n        assume(logger.exitOnError).equals(true);\n    });","file":"unit/winston/create-logger.test.js","skipped":false,"dir":"test"},{"name":"new Logger({ silent: true })","suites":["Create Logger"],"updatePoint":{"line":16,"column":36},"line":16,"code":"    it('new Logger({ silent: true })', function (done) {\n        const neverLogTo = new TransportStream({\n            log: function (info) {\n                assume(false).true('TransportStream was improperly written to');\n            }\n        });\n\n        var logger = winston.createLogger({\n            transports: [neverLogTo],\n            silent: true\n        });\n\n        logger.log({\n            level: 'info',\n            message: 'This should be ignored'\n        });\n\n        setImmediate(() => done());\n    });","file":"unit/winston/create-logger.test.js","skipped":false,"dir":"test"},{"name":"new Logger({ parameters })","suites":["Create Logger"],"updatePoint":{"line":36,"column":34},"line":36,"code":"    it('new Logger({ parameters })', function () {\n        let myFormat = format(function (info, opts) {\n            return info;\n        })();\n\n        let logger = winston.createLogger({\n            format: myFormat,\n            level: 'error',\n            exitOnError: false,\n            transports: []\n        });\n\n        assume(logger.format).equals(myFormat);\n        assume(logger.level).equals('error');\n        assume(logger.exitOnError).equals(false);\n        assume(logger._readableState.pipesCount).equals(0);\n    });","file":"unit/winston/create-logger.test.js","skipped":false,"dir":"test"},{"name":"new Logger({ levels }) defines custom methods","suites":["Create Logger"],"updatePoint":{"line":54,"column":53},"line":54,"code":"    it('new Logger({ levels }) defines custom methods', function () {\n        let myFormat = format(function (info, opts) {\n            return info;\n        })();\n\n        let logger = winston.createLogger({\n            levels: winston.config.syslog.levels,\n            format: myFormat,\n            level: 'error',\n            exitOnError: false,\n            transports: []\n        });\n\n        Object.keys(winston.config.syslog.levels).forEach(level => {\n            assume(logger[level]).is.a('function');\n        })\n    });","file":"unit/winston/create-logger.test.js","skipped":false,"dir":"test"},{"name":"new Logger({ levels }) custom methods are not bound to instance","suites":["Create Logger"],"updatePoint":{"line":72,"column":71},"line":72,"code":"    it('new Logger({ levels }) custom methods are not bound to instance', function (done) {\n        let logger = winston.createLogger({\n            level: 'error',\n            exitOnError: false,\n            transports: []\n        });\n\n        let logs = [];\n        let extendedLogger = Object.create(logger, {\n            write: {\n                value: function (...args) {\n                    logs.push(args);\n                    if (logs.length === 4) {\n                        assume(logs.length).is.eql(4);\n                        assume(logs[0]).is.eql([{test: 1, level: 'info'}]);\n                        assume(logs[1]).is.eql([{test: 2, level: 'warn'}]);\n                        assume(logs[2]).is.eql([{message: 'test3', level: 'info'}])\n                        assume(logs[3]).is.eql([{\n                            with: 'meta',\n                            test: 4,\n                            level: 'warn',\n                            message: 'a warning'\n                        }]);\n\n                        done();\n                    }\n                }\n            }\n        });\n\n        extendedLogger.log('info', {test: 1});\n        extendedLogger.log('warn', {test: 2});\n        extendedLogger.info('test3');\n        extendedLogger.warn('a warning', {with: 'meta', test: 4});\n    });","file":"unit/winston/create-logger.test.js","skipped":false,"dir":"test"},{"name":"has expected methods","suites":["ExceptionHandler"],"updatePoint":{"line":29,"column":26},"line":29,"code":"  it('has expected methods', function () {\n    var handler = helpers.exceptionHandler();\n    assume(handler.handle).is.a('function');\n    assume(handler.unhandle).is.a('function');\n    assume(handler.getAllInfo).is.a('function');\n    assume(handler.getProcessInfo).is.a('function');\n    assume(handler.getOsInfo).is.a('function');\n    assume(handler.getTrace).is.a('function');\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":"new ExceptionHandler()","suites":["ExceptionHandler"],"updatePoint":{"line":39,"column":28},"line":39,"code":"  it('new ExceptionHandler()', function () {\n    assume(function () {\n      new winston.ExceptionHandler();\n    }).throws(/Logger is required/);\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":"new ExceptionHandler(logger)","suites":["ExceptionHandler"],"updatePoint":{"line":45,"column":34},"line":45,"code":"  it('new ExceptionHandler(logger)', function () {\n    var logger = winston.createLogger();\n    var handler = new winston.ExceptionHandler(logger);\n    assume(handler.logger).equals(logger);\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":".getProcessInfo()","suites":["ExceptionHandler"],"updatePoint":{"line":51,"column":23},"line":51,"code":"  it('.getProcessInfo()', function () {\n    var handler = helpers.exceptionHandler();\n    helpers.assertProcessInfo(handler.getProcessInfo());\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":".getOsInfo()","suites":["ExceptionHandler"],"updatePoint":{"line":56,"column":18},"line":56,"code":"  it('.getOsInfo()', function () {\n    var handler = helpers.exceptionHandler();\n    helpers.assertOsInfo(handler.getOsInfo());\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":".getTrace(new Error)","suites":["ExceptionHandler"],"updatePoint":{"line":61,"column":26},"line":61,"code":"  it('.getTrace(new Error)', function () {\n    var handler = helpers.exceptionHandler();\n    helpers.assertTrace(handler.getTrace(new Error()));\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":".getTrace()","suites":["ExceptionHandler"],"updatePoint":{"line":66,"column":17},"line":66,"code":"  it('.getTrace()', function () {\n    var handler = helpers.exceptionHandler();\n    helpers.assertTrace(handler.getTrace());\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":".handle()","suites":["ExceptionHandler"],"updatePoint":{"line":71,"column":15},"line":71,"code":"  it('.handle()', function (done) {\n    var existing = helpers.clearExceptions();\n    var writeable = new stream.Writable({\n      objectMode: true,\n      write: function (info) {\n        assume(info).is.an('object');\n        assume(info.error).is.an('error');\n        assume(info.error.message).equals('wtf this error');\n        assume(info.message).includes('uncaughtException: wtf this error');\n        assume(info.stack).is.a('string');\n        assume(info.process).is.an('object');\n        assume(info.os).is.an('object');\n        assume(info.trace).is.an('array');\n\n        existing.restore();\n        done();\n      }\n    });\n\n    var transport = new winston.transports.Stream({ stream: writeable });\n    var handler = helpers.exceptionHandler({\n      exitOnError: false,\n      transports: [transport]\n    });\n\n    assume(handler.catcher).equals(undefined);\n\n    transport.handleExceptions = true;\n    handler.handle();\n\n    assume(handler.catcher).is.a('function');\n    assume(process.listeners('uncaughtException')).deep.equals([\n      handler.catcher\n    ]);\n\n    helpers.throw('wtf this error');\n  });","file":"unit/winston/exception-handler.test.js","skipped":false,"dir":"test"},{"name":"has expected methods","suites":["ExceptionStream"],"updatePoint":{"line":17,"column":26},"line":17,"code":"  it('has expected methods', function () {\n    var filename = path.join(testLogFixturesPath, 'exception-stream.log');\n    var transport = new winston.transports.File({ filename });\n    var instance = new ExceptionStream(transport);\n\n    assume(instance.handleExceptions).is.true();\n    assume(instance.transport).equals(transport);\n    assume(instance._write).is.a('function');\n    assume(instance).instanceof(ExceptionStream);\n    assume(instance).inherits(Writable);\n  });","file":"unit/winston/exception-stream.test.js","skipped":false,"dir":"test"},{"name":"throws without a transport","suites":["ExceptionStream"],"updatePoint":{"line":29,"column":32},"line":29,"code":"  it('throws without a transport', function () {\n    assume(function () {\n      var stream = new ExceptionStream();\n      stream._write({ exception: true });\n    }).throws('ExceptionStream requires a TransportStream instance.');\n  })","file":"unit/winston/exception-stream.test.js","skipped":false,"dir":"test"},{"name":"does not log to any transports","suites":["Logger, ExceptionHandler",".exceptions.unhandle()"],"updatePoint":{"line":22,"column":38},"line":22,"code":"    it('does not log to any transports', function (done) {\n      var logFile = path.join(testLogFixturesPath, 'unhandle-exception.log');\n\n      helpers.tryUnlink(logFile);\n\n      spawn('node', [path.join(testHelperScriptsPath, 'unhandle-exceptions.js')])\n        .on('exit', function () {\n          fs.exists(logFile, function (exists) {\n            assume(exists).false();\n            done();\n          });\n        });\n    });","file":"unit/winston/log-exception.test.js","skipped":false,"dir":"test"},{"name":"handlers immutable","suites":["Logger, ExceptionHandler",".exceptions.unhandle()"],"updatePoint":{"line":36,"column":26},"line":36,"code":"    it('handlers immutable', function () {\n      //\n      // A single default listener is added by mocha confirming\n      // that our assumptions about mocha are maintained.\n      //\n      assume(process.listeners('uncaughtException').length).equals(1);\n      var logger = winston.createLogger({\n        exceptionHandlers: [\n          new winston.transports.Console(),\n          new winston.transports.File({ filename: path.join(testLogFixturesPath, 'filelog.log') })\n        ]\n      });\n\n      assume(logger.exceptions.handlers.size).equals(2);\n      assume(process.listeners('uncaughtException').length).equals(2);\n      logger.exceptions.unhandle();\n      assume(logger.exceptions.handlers.size).equals(2);\n      assume(process.listeners('uncaughtException').length).equals(1);\n    });","file":"unit/winston/log-exception.test.js","skipped":false,"dir":"test"},{"name":"Custom exitOnError function does not exit","suites":["Logger, ExceptionHandler",".exceptions.unhandle()"],"updatePoint":{"line":57,"column":47},"line":57,"code":"  it('Custom exitOnError function does not exit', function (done) {\n    const child = spawn('node', [path.join(testHelperScriptsPath, 'exit-on-error.js')]);\n    const stdout = [];\n\n    child.stdout.setEncoding('utf8');\n    child.stdout.on('data', function (line) {\n      stdout.push(line);\n    });\n\n    setTimeout(function () {\n      assume(child.killed).false();\n      assume(stdout).deep.equals(['Ignore this error']);\n      child.kill();\n      done();\n    }, 1000);\n  });","file":"unit/winston/log-exception.test.js","skipped":false,"dir":"test"},{"name":"when strings are thrown as errors","suites":["Logger, ExceptionHandler",".exceptions.handle()","should save the error information to the specified file"],"updatePoint":{"line":76,"column":43},"line":76,"code":"      it('when strings are thrown as errors', helpers.assertHandleExceptions({\n        script: path.join(testHelperScriptsPath, 'log-string-exception.js'),\n        logfile: path.join(testLogFixturesPath, 'string-exception.log'),\n        message: 'OMG NEVER DO THIS STRING EXCEPTIONS ARE AWFUL'\n      }));","file":"unit/winston/log-exception.test.js","skipped":false,"dir":"test"},{"name":"with a custom winston.Logger instance","suites":["Logger, ExceptionHandler",".exceptions.handle()","should save the error information to the specified file"],"updatePoint":{"line":82,"column":47},"line":82,"code":"      it('with a custom winston.Logger instance', helpers.assertHandleExceptions({\n        script: path.join(testHelperScriptsPath, 'log-exceptions.js'),\n        logfile: path.join(testLogFixturesPath, 'exception.log')\n      }));","file":"unit/winston/log-exception.test.js","skipped":false,"dir":"test"},{"name":"with the default winston logger","suites":["Logger, ExceptionHandler",".exceptions.handle()","should save the error information to the specified file"],"updatePoint":{"line":87,"column":41},"line":87,"code":"      it('with the default winston logger', helpers.assertHandleExceptions({\n        script: path.join(testHelperScriptsPath, 'default-exceptions.js'),\n        logfile: path.join(testLogFixturesPath, 'default-exception.log')\n      }));","file":"unit/winston/log-exception.test.js","skipped":false,"dir":"test"},{"name":".add()","suites":[],"updatePoint":{"line":30,"column":21},"line":30,"code":"    it(`.add(${name})`, function () {\n      stdMocks.use();\n      var logger = winston.createLogger();\n      var transport = new TransportClass();\n      logger.add(transport);\n      stdMocks.restore();\n      var output = stdMocks.flush();\n\n      assume(logger._readableState.pipesCount).equals(1);\n      assume(logger._readableState.pipes.transport).is.an('object');\n      assume(logger._readableState.pipes.transport).equals(transport);\n      assume(output.stderr.join('')).to.include(`${name} is a legacy winston transport. Consider upgrading`);\n    });","file":"unit/winston/logger-legacy.test.js","skipped":false,"dir":"test"},{"name":".add() multiple","suites":[],"updatePoint":{"line":44,"column":30},"line":44,"code":"    it(`.add(${name}) multiple`, function () {\n      stdMocks.use();\n      var logger = winston.createLogger({\n        transports: [\n          new TransportClass(),\n          new TransportClass(),\n          new TransportClass()\n        ]\n      });\n\n      stdMocks.restore();\n      var output = stdMocks.flush();\n\n      assume(logger._readableState.pipesCount).equals(3);\n      var errorMsg = `${name} is a legacy winston transport. Consider upgrading`;\n      assume(output.stderr.join('')).to.include(errorMsg);\n    });","file":"unit/winston/logger-legacy.test.js","skipped":false,"dir":"test"},{"name":".remove() [LegacyTransportStream]","suites":[],"updatePoint":{"line":62,"column":41},"line":62,"code":"    it('.remove() [LegacyTransportStream]', function () {\n      var transports = [\n        new winston.transports.Console(),\n        new TransportClass()\n      ];\n\n      const logger = winston.createLogger({ transports: transports });\n      assume(logger.transports.length).equals(2);\n      logger.remove(transports[1]);\n      assume(logger.transports.length).equals(1);\n      assume(logger.transports[0]).equals(transports[0]);\n    });","file":"unit/winston/logger-legacy.test.js","skipped":false,"dir":"test"},{"name":"new Logger({ DEPRECATED })","suites":["Logger (legacy API)"],"updatePoint":{"line":78,"column":32},"line":78,"code":"  it('new Logger({ DEPRECATED })', function () {\n    var deprecated = [\n      { colors: true },\n      { emitErrs: true },\n      { formatters: [] },\n      { padLevels: true },\n      { rewriters: [] },\n      { stripColors: true }\n    ];\n\n    deprecated.forEach(function (opts) {\n      assume(function () {\n        var logger = winston.createLogger(opts)\n      }).throws(/Use a custom/);\n    });\n  });","file":"unit/winston/logger-legacy.test.js","skipped":false,"dir":"test"},{"name":".cli() throws","suites":["Logger (legacy API)","LegacyMixedTransport (inherits from winston@3 Transport)"],"updatePoint":{"line":113,"column":19},"line":113,"code":"  it('.cli() throws', function () {\n    var logger = winston.createLogger();\n    assume(logger.cli).throws(/Use a custom/);\n  });","file":"unit/winston/logger-legacy.test.js","skipped":false,"dir":"test"},{"name":".configure()","suites":["Logger Instance","Configuration"],"updatePoint":{"line":28,"column":20},"line":28,"code":"    it('.configure()', function () {\n      let logger = winston.createLogger({\n        transports: [new winston.transports.Console()]\n      });\n\n      assume(logger.transports.length).equals(1);\n      assume(logger.transports[0].name).equals('console');\n\n      logger.configure();\n\n      assume(logger.transports.length).equals(0);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".configure({ transports })","suites":["Logger Instance","Configuration"],"updatePoint":{"line":41,"column":34},"line":41,"code":"    it('.configure({ transports })', function () {\n      let logger = winston.createLogger();\n\n      assume(logger.transports.length).equals(0);\n\n      logger.configure({\n        transports: [new winston.transports.Console()]\n      });\n\n      assume(logger.transports.length).equals(1);\n      assume(logger.transports[0].name).equals('console');\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".configure({ transports, format })","suites":["Logger Instance","Configuration"],"updatePoint":{"line":54,"column":42},"line":54,"code":"    it('.configure({ transports, format })', function () {\n      let logger = winston.createLogger(),\n          format = logger.format;\n\n      assume(logger.transports.length).equals(0);\n\n      logger.configure({\n        transports: [new winston.transports.Console()],\n        format: winston.format.json()\n      });\n\n      assume(logger.transports.length).equals(1);\n      assume(logger.transports[0].name).equals('console');\n      assume(logger.format).not.equals(format);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should throw error when adding an invalid transport","suites":["Logger Instance","Transports","add"],"updatePoint":{"line":73,"column":61},"line":73,"code":"      it('should throw error when adding an invalid transport', function () {\n        let logger = winston.createLogger();\n        assume(function () {\n          logger.add(5);\n        }).throws(/invalid transport/i);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should add the expected transport","suites":["Logger Instance","Transports","add"],"updatePoint":{"line":80,"column":43},"line":80,"code":"      it('should add the expected transport', function (done) {\n        let logger = winston.createLogger();\n        let expected = {message: 'foo', level: 'info'};\n        let transport = new TransportStream({\n          log: function (info) {\n            assume(info.message).equals('foo');\n            assume(info.level).equals('info');\n            assume(JSON.parse(info[MESSAGE])).deep.equals({level: 'info', message: 'foo'});\n            done();\n          }\n        });\n\n        logger.add(transport);\n        logger.log(expected);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should allow adding multiple transports","suites":["Logger Instance","Transports","add"],"updatePoint":{"line":96,"column":49},"line":96,"code":"      it('should allow adding multiple transports', function () {\n        let transports = [\n          new winston.transports.File({\n            name: 'filelog-info.log',\n            filename: path.join(testLogFixturesPath, 'filelog-info.log'),\n            level: 'info'\n          }),\n          new winston.transports.File({\n            name: 'filelog-error.log',\n            filename: path.join(testLogFixturesPath, 'filelog-error.log'),\n            level: 'error'\n          })\n        ];\n        let logger = winston.createLogger({\n          transports: transports\n        });\n\n        assume(logger.transports.length).equals(2);\n        assume(logger.transports.map(function (wrap) {\n          return wrap.transport || wrap;\n        })).deep.equals(transports);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should do nothing if transport was not added","suites":["Logger Instance","Transports","remove"],"updatePoint":{"line":121,"column":54},"line":121,"code":"      it('should do nothing if transport was not added', function () {\n        let transports = [\n          new winston.transports.Console(),\n          new winston.transports.File({filename: path.join(testLogFixturesPath, 'filelog.log')})\n        ];\n\n        let logger = winston.createLogger({transports: transports})\n            .remove(new winston.transports.Console());\n\n        assume(logger.transports.length).equals(2);\n        assume(logger.transports.map(function (wrap) {\n          // Unwrap LegacyTransportStream instances\n          return wrap.transport || wrap;\n        })).deep.equals(transports);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should remove transport when matching one is found","suites":["Logger Instance","Transports","remove"],"updatePoint":{"line":137,"column":60},"line":137,"code":"      it('should remove transport when matching one is found', function () {\n        let transports = [\n          new winston.transports.Console(),\n          new winston.transports.File({filename: path.join(testLogFixturesPath, 'filelog.log')})\n        ];\n\n        let logger = winston.createLogger({transports: transports});\n\n        assume(logger.transports.length).equals(2);\n        logger.remove(transports[0]);\n        assume(logger.transports.length).equals(1);\n        assume(logger.transports[0]).equals(transports[1]);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should remove specified logger even when duplicate exists","suites":["Logger Instance","Transports","remove"],"updatePoint":{"line":151,"column":67},"line":151,"code":"      it('should remove specified logger even when duplicate exists', function () {\n        let transports = [\n          new winston.transports.File({\n            name: 'filelog-info.log',\n            filename: path.join(testLogFixturesPath, 'filelog-info.log'),\n            level: 'info'\n          }),\n          new winston.transports.File({\n            name: 'filelog-error.log',\n            filename: path.join(testLogFixturesPath, 'filelog-error.log'),\n            level: 'error'\n          })\n        ];\n        let logger = winston.createLogger({\n          transports: transports\n        });\n\n        logger.remove(transports[0]);\n        assume(logger.transports.length).equals(1);\n        assume(logger.transports[0]).equals(transports[1]);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should do nothing when no transports exist","suites":["Logger Instance","Transports","clear"],"updatePoint":{"line":175,"column":52},"line":175,"code":"      it('should do nothing when no transports exist', function () {\n        let logger = winston.createLogger();\n        assume(logger.transports.length).equals(0);\n        logger.clear();\n        assume(logger.transports.length).equals(0);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should remove all transports","suites":["Logger Instance","Transports","clear"],"updatePoint":{"line":182,"column":38},"line":182,"code":"      it('should remove all transports', function () {\n        let logger = winston.createLogger({\n          transports: [new winston.transports.Console()]\n        });\n\n        assume(logger.transports.length).equals(1);\n        logger.clear();\n        assume(logger.transports.length).equals(0);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should return a log stream for all transports","suites":["Logger Instance","Transports","stream"],"updatePoint":{"line":194,"column":55},"line":194,"code":"      it('should return a log stream for all transports', function () {\n        let logger = winston.createLogger();\n        let outStream = logger.stream();\n\n        assume(isStream(outStream)).true();\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"report unknown levels","suites":["Logger Instance","Log Levels"],"updatePoint":{"line":204,"column":29},"line":204,"code":"    it('report unknown levels', function (done) {\n      stdMocks.use();\n      let logger = helpers.createLogger(function (info) {\n      });\n      let expected = {message: 'foo', level: 'bar'};\n      logger.log(expected);\n\n      stdMocks.restore();\n      let output = stdMocks.flush();\n\n      assume(output.stderr).deep.equals(['[winston] Unknown logger level: bar\\n']);\n      done();\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".<level>()","suites":["Logger Instance","Log Levels"],"updatePoint":{"line":218,"column":18},"line":218,"code":"    it('.<level>()', function (done) {\n      let logger = helpers.createLogger(function (info) {\n        assume(info).is.an('object');\n        assume(info.level).equals('info');\n        assume(info.message).is.a('string');\n        assume(info[MESSAGE]).is.a('string');\n        assume(info.message).equals('');\n        assume(JSON.parse(info[MESSAGE])).deep.equals({\n          level: 'info',\n          message: ''\n        });\n\n        done();\n      });\n\n      logger.info();\n      logger.info('');\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"default levels","suites":["Logger Instance","Log Levels"],"updatePoint":{"line":237,"column":22},"line":237,"code":"    it('default levels', function (done) {\n      let logger = winston.createLogger();\n      let expected = {message: 'foo', level: 'debug'};\n\n      function logLevelTransport(level) {\n        return new TransportStream({\n          level: level,\n          log: function (obj) {\n            if (level === 'info') {\n              assume(obj).equals(undefined, 'Transport on level info should never be called');\n            }\n\n            assume(obj.message).equals('foo');\n            assume(obj.level).equals('debug');\n            assume(JSON.parse(obj[MESSAGE])).deep.equals({level: 'debug', message: 'foo'});\n            done();\n          }\n        });\n      }\n\n      assume(logger.info).is.a('function');\n      assume(logger.debug).is.a('function');\n\n      logger\n          .add(logLevelTransport('info'))\n          .add(logLevelTransport('debug'))\n          .log(expected);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"custom levels","suites":["Logger Instance","Log Levels"],"updatePoint":{"line":266,"column":21},"line":266,"code":"    it('custom levels', function (done) {\n      let logger = winston.createLogger({\n        levels: {\n          bad: 0,\n          test: 1,\n          ok: 2\n        }\n      });\n\n      let expected = {message: 'foo', level: 'test'};\n\n      function filterLevelTransport(level) {\n        return new TransportStream({\n          level: level,\n          log: function (obj) {\n            if (level === 'bad') {\n              assume(obj).equals(undefined, 'transport on level \"bad\" should never be called');\n            }\n\n            assume(obj.message).equals('foo');\n            assume(obj.level).equals('test');\n            assume(JSON.parse(obj[MESSAGE])).deep.equals({level: 'test', message: 'foo'});\n            done();\n          }\n        });\n      }\n\n      assume(logger.bad).is.a('function');\n      assume(logger.test).is.a('function');\n      assume(logger.ok).is.a('function');\n\n      logger\n          .add(filterLevelTransport('bad'))\n          .add(filterLevelTransport('ok'))\n          .log(expected);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"sets transports levels","suites":["Logger Instance","Log Levels"],"updatePoint":{"line":303,"column":30},"line":303,"code":"    it('sets transports levels', done => {\n      let logger;\n      const transport = new TransportStream({\n        log(obj) {\n          if (obj.level === 'info') {\n            assume(obj).equals(undefined, 'Transport on level info should never be called');\n          }\n\n          assume(obj.message).equals('foo');\n          assume(obj.level).equals('error');\n          assume(JSON.parse(obj[MESSAGE])).deep.equals({level: 'error', message: 'foo'});\n          done();\n        }\n      });\n\n      // Begin our test in the next tick after the pipe event is\n      // emitted from the transport.\n      transport.once('pipe', () => setImmediate(() => {\n        const expectedError = {message: 'foo', level: 'error'};\n        const expectedInfo = {message: 'bar', level: 'info'};\n\n        assume(logger.error).is.a('function');\n        assume(logger.info).is.a('function');\n\n        // Set the level\n        logger.level = 'error';\n\n        // Log the messages. \"info\" should never arrive.\n        logger\n            .log(expectedInfo)\n            .log(expectedError);\n      }));\n\n      logger = winston.createLogger({\n        transports: [transport]\n      });\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"default levels","suites":["Logger Instance","Log Levels","Log Levels Enabled"],"updatePoint":{"line":342,"column":24},"line":342,"code":"      it('default levels', function () {\n        let logger = winston.createLogger({\n          level: 'verbose',\n          levels: winston.config.npm.levels,\n          transports: [new winston.transports.Console()]\n        });\n\n        assume(logger.isLevelEnabled).is.a('function');\n\n        assume(logger.isErrorEnabled).is.a('function');\n        assume(logger.isWarnEnabled).is.a('function');\n        assume(logger.isInfoEnabled).is.a('function');\n        assume(logger.isVerboseEnabled).is.a('function');\n        assume(logger.isDebugEnabled).is.a('function');\n        assume(logger.isSillyEnabled).is.a('function');\n\n        assume(logger.isLevelEnabled('error')).true();\n        assume(logger.isLevelEnabled('warn')).true();\n        assume(logger.isLevelEnabled('info')).true();\n        assume(logger.isLevelEnabled('verbose')).true();\n        assume(logger.isLevelEnabled('debug')).false();\n        assume(logger.isLevelEnabled('silly')).false();\n\n        assume(logger.isErrorEnabled()).true();\n        assume(logger.isWarnEnabled()).true();\n        assume(logger.isInfoEnabled()).true();\n        assume(logger.isVerboseEnabled()).true();\n        assume(logger.isDebugEnabled()).false();\n        assume(logger.isSillyEnabled()).false();\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"default levels, transport override","suites":["Logger Instance","Log Levels","Log Levels Enabled"],"updatePoint":{"line":373,"column":44},"line":373,"code":"      it('default levels, transport override', function () {\n        let transport = new winston.transports.Console();\n        transport.level = 'debug';\n\n        let logger = winston.createLogger({\n          level: 'info',\n          levels: winston.config.npm.levels,\n          transports: [transport]\n        });\n\n        assume(logger.isLevelEnabled).is.a('function');\n\n        assume(logger.isErrorEnabled).is.a('function');\n        assume(logger.isWarnEnabled).is.a('function');\n        assume(logger.isInfoEnabled).is.a('function');\n        assume(logger.isVerboseEnabled).is.a('function');\n        assume(logger.isDebugEnabled).is.a('function');\n        assume(logger.isSillyEnabled).is.a('function');\n\n        assume(logger.isLevelEnabled('error')).true();\n        assume(logger.isLevelEnabled('warn')).true();\n        assume(logger.isLevelEnabled('info')).true();\n        assume(logger.isLevelEnabled('verbose')).true();\n        assume(logger.isLevelEnabled('debug')).true();\n        assume(logger.isLevelEnabled('silly')).false();\n\n        assume(logger.isErrorEnabled()).true();\n        assume(logger.isWarnEnabled()).true();\n        assume(logger.isInfoEnabled()).true();\n        assume(logger.isVerboseEnabled()).true();\n        assume(logger.isDebugEnabled()).true();\n        assume(logger.isSillyEnabled()).false();\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"default levels, no transports","suites":["Logger Instance","Log Levels","Log Levels Enabled"],"updatePoint":{"line":407,"column":39},"line":407,"code":"      it('default levels, no transports', function () {\n        let logger = winston.createLogger({\n          level: 'verbose',\n          levels: winston.config.npm.levels,\n          transports: []\n        });\n\n        assume(logger.isLevelEnabled).is.a('function');\n\n        assume(logger.isErrorEnabled).is.a('function');\n        assume(logger.isWarnEnabled).is.a('function');\n        assume(logger.isInfoEnabled).is.a('function');\n        assume(logger.isVerboseEnabled).is.a('function');\n        assume(logger.isDebugEnabled).is.a('function');\n        assume(logger.isSillyEnabled).is.a('function');\n\n        assume(logger.isLevelEnabled('error')).true();\n        assume(logger.isLevelEnabled('warn')).true();\n        assume(logger.isLevelEnabled('info')).true();\n        assume(logger.isLevelEnabled('verbose')).true();\n        assume(logger.isLevelEnabled('debug')).false();\n        assume(logger.isLevelEnabled('silly')).false();\n\n        assume(logger.isErrorEnabled()).true();\n        assume(logger.isWarnEnabled()).true();\n        assume(logger.isInfoEnabled()).true();\n        assume(logger.isVerboseEnabled()).true();\n        assume(logger.isDebugEnabled()).false();\n        assume(logger.isSillyEnabled()).false();\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"custom levels","suites":["Logger Instance","Log Levels","Log Levels Enabled"],"updatePoint":{"line":438,"column":23},"line":438,"code":"      it('custom levels', function () {\n        let logger = winston.createLogger({\n          level: 'test',\n          levels: {\n            bad: 0,\n            test: 1,\n            ok: 2\n          },\n          transports: [new winston.transports.Console()]\n        });\n\n        assume(logger.isLevelEnabled).is.a('function');\n\n        assume(logger.isBadEnabled).is.a('function');\n        assume(logger.isTestEnabled).is.a('function');\n        assume(logger.isOkEnabled).is.a('function');\n\n        assume(logger.isLevelEnabled('bad')).true();\n        assume(logger.isLevelEnabled('test')).true();\n        assume(logger.isLevelEnabled('ok')).false();\n\n        assume(logger.isBadEnabled()).true();\n        assume(logger.isTestEnabled()).true();\n        assume(logger.isOkEnabled()).false();\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"custom levels, no transports","suites":["Logger Instance","Log Levels","Log Levels Enabled"],"updatePoint":{"line":464,"column":38},"line":464,"code":"      it('custom levels, no transports', function () {\n        let logger = winston.createLogger({\n          level: 'test',\n          levels: {\n            bad: 0,\n            test: 1,\n            ok: 2\n          },\n          transports: []\n        });\n\n        assume(logger.isLevelEnabled).is.a('function');\n\n        assume(logger.isBadEnabled).is.a('function');\n        assume(logger.isTestEnabled).is.a('function');\n        assume(logger.isOkEnabled).is.a('function');\n\n        assume(logger.isLevelEnabled('bad')).true();\n        assume(logger.isLevelEnabled('test')).true();\n        assume(logger.isLevelEnabled('ok')).false();\n\n        assume(logger.isBadEnabled()).true();\n        assume(logger.isTestEnabled()).true();\n        assume(logger.isOkEnabled()).false();\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"custom levels, transport override","suites":["Logger Instance","Log Levels","Log Levels Enabled"],"updatePoint":{"line":490,"column":43},"line":490,"code":"      it('custom levels, transport override', function () {\n        let transport = new winston.transports.Console();\n        transport.level = 'ok';\n\n        let logger = winston.createLogger({\n          level: 'bad',\n          levels: {\n            bad: 0,\n            test: 1,\n            ok: 2\n          },\n          transports: [transport]\n        });\n\n        assume(logger.isLevelEnabled).is.a('function');\n\n        assume(logger.isBadEnabled).is.a('function');\n        assume(logger.isTestEnabled).is.a('function');\n        assume(logger.isOkEnabled).is.a('function');\n\n        assume(logger.isLevelEnabled('bad')).true();\n        assume(logger.isLevelEnabled('test')).true();\n        assume(logger.isLevelEnabled('ok')).true();\n\n        assume(logger.isBadEnabled()).true();\n        assume(logger.isTestEnabled()).true();\n        assume(logger.isOkEnabled()).true();\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"'finish' event awaits transports to emit 'finish'","suites":["Logger Instance","Transport Events"],"updatePoint":{"line":522,"column":57},"line":522,"code":"    it(`'finish' event awaits transports to emit 'finish'`, function (done) {\n      const transports = [\n        new TransportStream({\n          log: function () {\n          }\n        }),\n        new TransportStream({\n          log: function () {\n          }\n        }),\n        new TransportStream({\n          log: function () {\n          }\n        })\n      ];\n\n      const finished = [];\n      const logger = winston.createLogger({transports});\n\n      // Assert each transport emits finish\n      transports.forEach((transport, i) => {\n        transport.on('finish', () => finished[i] = true);\n      });\n\n      // Manually end the last transport to simulate mixed\n      // finished state\n      transports[2].end();\n\n      // Assert that all transport 'finish' events have been\n      // emitted when the logger emits 'finish'.\n      logger.on('finish', function () {\n        assume(finished[0]).true();\n        assume(finished[1]).true();\n        assume(finished[2]).true();\n        done();\n      });\n\n      setImmediate(() => logger.end());\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"error","suites":["Logger Instance","Transport Events"],"updatePoint":{"line":562,"column":13},"line":562,"code":"    it('error', (done) => {\n      const consoleTransport = new winston.transports.Console();\n      const logger = winston.createLogger({\n        transports: [consoleTransport]\n      });\n\n      logger.on('error', (err, transport) => {\n        assume(err).instanceOf(Error);\n        assume(transport).is.an('object');\n        done();\n      });\n      consoleTransport.emit('error', new Error());\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"warn","suites":["Logger Instance","Transport Events"],"updatePoint":{"line":576,"column":12},"line":576,"code":"    it('warn', (done) => {\n      const consoleTransport = new winston.transports.Console();\n      const logger = winston.createLogger({\n        transports: [consoleTransport]\n      });\n\n      logger.on('warn', (err, transport) => {\n        assume(err).instanceOf(Error);\n        assume(transport).is.an('object');\n        done();\n      });\n      consoleTransport.emit('warn', new Error());\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"rethrows errors from user-defined formats","suites":["Logger Instance","Formats"],"updatePoint":{"line":592,"column":49},"line":592,"code":"    it(`rethrows errors from user-defined formats`, function () {\n      stdMocks.use();\n      const logger = winston.createLogger({\n        transports: [new winston.transports.Console()],\n        format: winston.format.printf((info) => {\n          // Set a trap.\n          if (info.message === 'ENDOR') {\n            throw new Error('ITS A TRAP!');\n          }\n\n          return info.message;\n        })\n      });\n\n      // Trigger the trap.  Swallow the error so processing continues.\n      try {\n        logger.info('ENDOR');\n      } catch (err) {\n        assume(err.message).equals('ITS A TRAP!');\n      }\n\n      const expected = [\n        'Now witness the power of the fully armed and operational logger',\n        'Consider the philosophical and metaphysical – BANANA BANANA BANANA',\n        'I was god once. I saw – you were doing well until everyone died.'\n      ];\n\n      expected.forEach(msg => logger.info(msg));\n\n      stdMocks.restore();\n      const actual = stdMocks.flush();\n      assume(actual.stdout).deep.equals(expected.map(msg => `${msg}${EOL}`));\n      assume(actual.stderr).deep.equals([]);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"ending profiler with object argument should be included in output","suites":["Logger Instance","Profiling"],"updatePoint":{"line":629,"column":73},"line":629,"code":"    it('ending profiler with object argument should be included in output', function (done) {\n      let logger = helpers.createLogger(function (info) {\n        assume(info).is.an('object');\n        assume(info.something).equals('ok');\n        assume(info.level).equals('info');\n        assume(info.durationMs).is.a('number');\n        assume(info.message).equals('testing1');\n        assume(info[MESSAGE]).is.a('string');\n        done();\n      });\n\n      logger.profile('testing1');\n      setTimeout(function () {\n        logger.profile('testing1', {\n          something: 'ok',\n          level: 'info'\n        })\n      }, 100);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"calling profile with a callback function should not make a difference","suites":["Logger Instance","Profiling"],"updatePoint":{"line":650,"column":77},"line":650,"code":"    it('calling profile with a callback function should not make a difference', function (done) {\n      let logger = helpers.createLogger(function (info) {\n        assume(info).is.an('object');\n        assume(info.something).equals('ok');\n        assume(info.level).equals('info');\n        assume(info.durationMs).is.a('number');\n        assume(info.message).equals('testing2');\n        assume(info[MESSAGE]).is.a('string');\n        done();\n      });\n\n      logger.profile('testing2', function () {\n        done(new Error('Unexpected callback invoked'));\n      });\n\n      setTimeout(function () {\n        logger.profile('testing2', {\n          something: 'ok',\n          level: 'info'\n        })\n      }, 100);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"should stop a timer when `done` is called on it","suites":["Logger Instance","Profiling"],"updatePoint":{"line":673,"column":55},"line":673,"code":"    it('should stop a timer when `done` is called on it', function (done) {\n      let logger = helpers.createLogger(function (info) {\n        assume(info).is.an('object');\n        assume(info.something).equals('ok');\n        assume(info.level).equals('info');\n        assume(info.durationMs).is.a('number');\n        assume(info.message).equals('testing1');\n        assume(info[MESSAGE]).is.a('string');\n        done();\n      });\n\n      let timer = logger.startTimer();\n      setTimeout(function () {\n        timer.done({\n          message: 'testing1',\n          something: 'ok',\n          level: 'info'\n        });\n      }, 100);\n    });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(new Error()) uses Error instance as info","suites":["Logger Instance","Logging non-primitive data types",".log"],"updatePoint":{"line":698,"column":55},"line":698,"code":"      it(`.log(new Error()) uses Error instance as info`, function (done) {\n        const err = new Error('test');\n        err.level = 'info';\n\n        const logger = helpers.createLogger(function (info) {\n          assume(info).instanceOf(Error);\n          assume(info).equals(err);\n          done();\n        });\n\n        logger.log(err);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".info('Hello') preserve meta without splat format","suites":["Logger Instance","Logging non-primitive data types",".log"],"updatePoint":{"line":711,"column":59},"line":711,"code":"      it(`.info('Hello') preserve meta without splat format`, function (done) {\n        const logged = [];\n        const logger = helpers.createLogger(function (info, enc, next) {\n          logged.push(info);\n          assume(info.label).equals('world');\n          next();\n\n          if (logged.length === 1) done();\n        });\n\n        logger.info('Hello', {label: 'world'});\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".info('Hello %d') does not mutate unnecessarily with string interpolation tokens","suites":["Logger Instance","Logging non-primitive data types",".log"],"updatePoint":{"line":724,"column":90},"line":724,"code":"      it(`.info('Hello %d') does not mutate unnecessarily with string interpolation tokens`, function (done) {\n        const logged = [];\n        const logger = helpers.createLogger(function (info, enc, next) {\n          logged.push(info);\n          assume(info.label).equals(undefined);\n          next();\n\n          if (logged.length === 1) done();\n        });\n\n        logger.info('Hello %j', {label: 'world'}, {extra: true});\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".info('Hello') and .info('Hello %d') preserve meta with splat format","suites":["Logger Instance","Logging non-primitive data types",".log"],"updatePoint":{"line":737,"column":78},"line":737,"code":"      it(`.info('Hello') and .info('Hello %d') preserve meta with splat format`, function (done) {\n        const logged = [];\n        const logger = helpers.createLogger(function (info, enc, next) {\n          logged.push(info);\n          assume(info.label).equals('world');\n          next();\n\n          if (logged.length === 2) done();\n        }, format.splat());\n\n        logger.info('Hello', {label: 'world'});\n        logger.info('Hello %d', 100, {label: 'world'});\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".info(undefined) creates info with { message: undefined }","suites":["Logger Instance","Logging non-primitive data types",".info"],"updatePoint":{"line":753,"column":67},"line":753,"code":"      it('.info(undefined) creates info with { message: undefined }', function (done) {\n        const logger = helpers.createLogger(function (info) {\n          assume(info.message).equals(undefined);\n          done();\n        });\n\n        logger.info(undefined);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".info(null) creates info with { message: null }","suites":["Logger Instance","Logging non-primitive data types",".info"],"updatePoint":{"line":762,"column":57},"line":762,"code":"      it('.info(null) creates info with { message: null }', function (done) {\n        const logger = helpers.createLogger(function (info) {\n          assume(info.message).equals(null);\n          done();\n        });\n\n        logger.info(null);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".info(new Error()) uses Error instance as info","suites":["Logger Instance","Logging non-primitive data types",".info"],"updatePoint":{"line":771,"column":56},"line":771,"code":"      it('.info(new Error()) uses Error instance as info', function (done) {\n        const err = new Error('test');\n        const logger = helpers.createLogger(function (info) {\n          assume(info).instanceOf(Error);\n          assume(info).equals(err);\n          done();\n        });\n\n        logger.info(err);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".info('any string', new Error())","suites":["Logger Instance","Logging non-primitive data types",".info"],"line":783,"code":"      it.skip(`.info('any string', new Error())`, function (done) {","file":"unit/winston/logger.test.js","skipped":true,"dir":"test"},{"name":"sets child meta for text messages correctly","suites":["Logger Instance","Metadata Precedence","Should support child loggers & defaultMeta"],"updatePoint":{"line":796,"column":53},"line":796,"code":"      it('sets child meta for text messages correctly', (done) => {\n        const assertFn = ((msg) => {\n          assume(msg.level).equals('info');\n          assume(msg.message).equals('dummy message');\n          assume(msg.requestId).equals('451');\n          done();\n        });\n\n        const logger = winston.createLogger({\n          transports: [\n            mockTransport.createMockTransport(assertFn)\n          ]\n        });\n\n        const childLogger = logger.child({requestId: '451'});\n        childLogger.info('dummy message');\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"sets child meta for json messages correctly","suites":["Logger Instance","Metadata Precedence","Should support child loggers & defaultMeta"],"updatePoint":{"line":814,"column":53},"line":814,"code":"      it('sets child meta for json messages correctly', (done) => {\n        const assertFn = ((msg) => {\n          assume(msg.level).equals('info');\n          assume(msg.message.text).equals('dummy');\n          assume(msg.requestId).equals('451');\n          done();\n        });\n\n        const logger = winston.createLogger({\n          transports: [\n            mockTransport.createMockTransport(assertFn)\n          ]\n        });\n\n        const childLogger = logger.child({requestId: '451'});\n        childLogger.info({text: 'dummy'});\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"merges child and provided meta correctly","suites":["Logger Instance","Metadata Precedence","Should support child loggers & defaultMeta"],"updatePoint":{"line":832,"column":50},"line":832,"code":"      it('merges child and provided meta correctly', (done) => {\n        const assertFn = ((msg) => {\n          assume(msg.level).equals('info');\n          assume(msg.message).equals('dummy message');\n          assume(msg.service).equals('user-service');\n          assume(msg.requestId).equals('451');\n          done();\n        });\n\n        const logger = winston.createLogger({\n          transports: [\n            mockTransport.createMockTransport(assertFn)\n          ]\n        });\n\n        const childLogger = logger.child({service: 'user-service'});\n        childLogger.info('dummy message', {requestId: '451'});\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"provided meta take precedence over defaultMeta","suites":["Logger Instance","Metadata Precedence","Should support child loggers & defaultMeta"],"updatePoint":{"line":851,"column":56},"line":851,"code":"      it('provided meta take precedence over defaultMeta', (done) => {\n        const assertFn = ((msg) => {\n          assume(msg.level).equals('info');\n          assume(msg.message).equals('dummy message');\n          assume(msg.service).equals('audit-service');\n          assume(msg.requestId).equals('451');\n          done();\n        });\n\n        const logger = winston.createLogger({\n          defaultMeta: {service: 'user-service'},\n          transports: [\n            mockTransport.createMockTransport(assertFn)\n          ]\n        });\n\n        logger.info('dummy message', {\n          requestId: '451',\n          service: 'audit-service'\n        });\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"provided meta take precedence over child meta","suites":["Logger Instance","Metadata Precedence","Should support child loggers & defaultMeta"],"updatePoint":{"line":873,"column":55},"line":873,"code":"      it('provided meta take precedence over child meta', (done) => {\n        const assertFn = ((msg) => {\n          assume(msg.level).equals('info');\n          assume(msg.message).equals('dummy message');\n          assume(msg.service).equals('audit-service');\n          assume(msg.requestId).equals('451');\n          done();\n        });\n\n        const logger = winston.createLogger({\n          transports: [\n            mockTransport.createMockTransport(assertFn)\n          ]\n        });\n\n        const childLogger = logger.child({service: 'user-service'});\n        childLogger.info('dummy message', {\n          requestId: '451',\n          service: 'audit-service'\n        });\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"handles error stack traces in child loggers correctly","suites":["Logger Instance","Metadata Precedence","Should support child loggers & defaultMeta"],"updatePoint":{"line":895,"column":63},"line":895,"code":"      it('handles error stack traces in child loggers correctly', (done) => {\n        const assertFn = ((msg) => {\n          assume(msg.level).equals('error');\n          assume(msg.message).equals('dummy error');\n          assume(msg.stack).includes('logger.test.js');\n          assume(msg.service).equals('user-service');\n          done();\n        });\n\n        const logger = winston.createLogger({\n          transports: [\n            mockTransport.createMockTransport(assertFn)\n          ]\n        });\n\n        const childLogger = logger.child({service: 'user-service'});\n        childLogger.error(Error('dummy error'));\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"defaultMeta() autobinds correctly","suites":["Logger Instance","Metadata Precedence","Should support child loggers & defaultMeta"],"updatePoint":{"line":914,"column":43},"line":914,"code":"      it('defaultMeta() autobinds correctly', (done) => {\n        const logger = helpers.createLogger(info => {\n          assume(info.message).equals('test');\n          done();\n        });\n\n        const log = logger.info;\n        log('test');\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(level, message)","suites":["Logger Instance","Backwards Compatability","Winston V2 Log"],"updatePoint":{"line":928,"column":30},"line":928,"code":"      it('.log(level, message)', function (done) {\n        let logger = helpers.createLogger(function (info) {\n          assume(info).is.an('object');\n          assume(info.level).equals('info');\n          assume(info.message).equals('Some super awesome log message');\n          assume(info[MESSAGE]).is.a('string');\n          done();\n        });\n\n        logger.log('info', 'Some super awesome log message')\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(level, undefined) creates info with { message: undefined }","suites":["Logger Instance","Backwards Compatability","Winston V2 Log"],"updatePoint":{"line":940,"column":73},"line":940,"code":"      it(`.log(level, undefined) creates info with { message: undefined }`, function (done) {\n        const logger = helpers.createLogger(function (info) {\n          assume(info.message).equals(undefined);\n          done();\n        });\n\n        logger.log('info', undefined);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(level, null) creates info with { message: null }","suites":["Logger Instance","Backwards Compatability","Winston V2 Log"],"updatePoint":{"line":949,"column":63},"line":949,"code":"      it(`.log(level, null) creates info with { message: null }`, function (done) {\n        const logger = helpers.createLogger(function (info) {\n          assume(info.message).equals(null);\n          done();\n        });\n\n        logger.log('info', null);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(level, new Error()) uses Error instance as info","suites":["Logger Instance","Backwards Compatability","Winston V2 Log"],"updatePoint":{"line":958,"column":62},"line":958,"code":"      it(`.log(level, new Error()) uses Error instance as info`, function (done) {\n        const err = new Error('test');\n        const logger = helpers.createLogger(function (info) {\n          assume(info).instanceOf(Error);\n          assume(info).equals(err);\n          done();\n        });\n\n        logger.log('info', err);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(level, message, meta)","suites":["Logger Instance","Backwards Compatability","Winston V2 Log"],"updatePoint":{"line":969,"column":36},"line":969,"code":"      it('.log(level, message, meta)', function (done) {\n        let meta = {one: 2};\n        let logger = helpers.createLogger(function (info) {\n          assume(info).is.an('object');\n          assume(info.level).equals('info');\n          assume(info.message).equals('Some super awesome log message');\n          assume(info.one).equals(2);\n          assume(info[MESSAGE]).is.a('string');\n          done();\n        });\n\n        logger.log('info', 'Some super awesome log message', meta);\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(level, formatStr, ...splat)","suites":["Logger Instance","Backwards Compatability","Winston V2 Log"],"updatePoint":{"line":983,"column":42},"line":983,"code":"      it('.log(level, formatStr, ...splat)', function (done) {\n        const format = winston.format.combine(\n            winston.format.splat(),\n            winston.format.printf(info => `${info.level}: ${info.message}`)\n        );\n\n        let logger = helpers.createLogger(function (info) {\n          assume(info).is.an('object');\n          assume(info.level).equals('info');\n          assume(info.message).equals('100% such wow {\"much\":\"javascript\"}');\n          assume(info[SPLAT]).deep.equals([100, 'wow', {much: 'javascript'}]);\n          assume(info[MESSAGE]).equals('info: 100% such wow {\"much\":\"javascript\"}');\n          done();\n        }, format);\n\n        logger.log('info', '%d%% such %s %j', 100, 'wow', {much: 'javascript'});\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":".log(level, formatStr, ...splat, meta)","suites":["Logger Instance","Backwards Compatability","Winston V2 Log"],"updatePoint":{"line":1001,"column":48},"line":1001,"code":"      it('.log(level, formatStr, ...splat, meta)', function (done) {\n        const format = winston.format.combine(\n            winston.format.splat(),\n            winston.format.printf(info => `${info.level}: ${info.message} ${JSON.stringify({thisIsMeta: info.thisIsMeta})}`)\n        );\n\n        let logger = helpers.createLogger(function (info) {\n          assume(info).is.an('object');\n          assume(info.level).equals('info');\n          assume(info.message).equals('100% such wow {\"much\":\"javascript\"}');\n          assume(info[SPLAT]).deep.equals([100, 'wow', {much: 'javascript'}]);\n          assume(info.thisIsMeta).true();\n          assume(info[MESSAGE]).equals('info: 100% such wow {\"much\":\"javascript\"} {\"thisIsMeta\":true}');\n          done();\n        }, format);\n\n        logger.log('info', '%d%% such %s %j', 100, 'wow', {much: 'javascript'}, {thisIsMeta: true});\n      });","file":"unit/winston/logger.test.js","skipped":false,"dir":"test"},{"name":"new Profiler()","suites":["Profiler"],"updatePoint":{"line":13,"column":20},"line":13,"code":"  it('new Profiler()', function () {\n    assume(function () {\n      var profiler = new Profiler();\n    }).throws();\n  });","file":"unit/winston/profiler.test.js","skipped":false,"dir":"test"},{"name":".done({ info })","suites":["Profiler"],"updatePoint":{"line":19,"column":21},"line":19,"code":"  it('.done({ info })', function (done) {\n    var profiler = new Profiler({\n      write: function (info) {\n        assume(info).is.an('object');\n        assume(info.something).equals('ok');\n        assume(info.level).equals('info');\n        assume(info.durationMs).is.a('number');\n        assume(info.message).equals('testing1');\n        done();\n      }\n    });\n\n    setTimeout(function () {\n      profiler.done({\n        something: 'ok',\n        level: 'info',\n        message: 'testing1'\n      });\n    }, 200);\n  });","file":"unit/winston/profiler.test.js","skipped":false,"dir":"test"},{"name":"has expected methods","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":29,"column":26},"line":29,"code":"  it('has expected methods', function () {\n    var handler = helpers.rejectionHandler();\n    assume(handler.handle).is.a('function');\n    assume(handler.unhandle).is.a('function');\n    assume(handler.getAllInfo).is.a('function');\n    assume(handler.getProcessInfo).is.a('function');\n    assume(handler.getOsInfo).is.a('function');\n    assume(handler.getTrace).is.a('function');\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":"new RejectionHandler()","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":39,"column":28},"line":39,"code":"  it('new RejectionHandler()', function () {\n    assume(function () {\n      new winston.RejectionHandler();\n    }).throws(/Logger is required/);\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":"new RejectionHandler(logger)","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":45,"column":34},"line":45,"code":"  it('new RejectionHandler(logger)', function () {\n    var logger = winston.createLogger();\n    var handler = new winston.RejectionHandler(logger);\n    assume(handler.logger).equals(logger);\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":".getProcessInfo()","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":51,"column":23},"line":51,"code":"  it('.getProcessInfo()', function () {\n    var handler = helpers.rejectionHandler();\n    helpers.assertProcessInfo(handler.getProcessInfo());\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":".getOsInfo()","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":56,"column":18},"line":56,"code":"  it('.getOsInfo()', function () {\n    var handler = helpers.rejectionHandler();\n    helpers.assertOsInfo(handler.getOsInfo());\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":".getTrace(new Error)","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":61,"column":26},"line":61,"code":"  it('.getTrace(new Error)', function () {\n    var handler = helpers.rejectionHandler();\n    helpers.assertTrace(handler.getTrace(new Error()));\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":".getTrace()","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":66,"column":17},"line":66,"code":"  it('.getTrace()', function () {\n    var handler = helpers.rejectionHandler();\n    helpers.assertTrace(handler.getTrace());\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":".handle()","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":71,"column":15},"line":71,"code":"  it('.handle()', function (done) {\n    var existing = helpers.clearRejections();\n    var writeable = new stream.Writable({\n      objectMode: true,\n      write: function (info) {\n        assume(info).is.an('object');\n        assume(info.error).is.an('error');\n        assume(info.error.message).equals('wtf this rejection');\n        assume(info.message).includes('unhandledRejection: wtf this rejection');\n        assume(info.stack).is.a('string');\n        assume(info.process).is.an('object');\n        assume(info.os).is.an('object');\n        assume(info.trace).is.an('array');\n\n        existing.restore();\n        done();\n      }\n    });\n\n    var transport = new winston.transports.Stream({ stream: writeable });\n    var handler = helpers.rejectionHandler({\n      exitOnError: false,\n      transports: [transport]\n    });\n\n    assume(handler.catcher).equals(undefined);\n\n    transport.handleRejections = true;\n    handler.handle();\n\n    assume(handler.catcher).is.a('function');\n    assume(process.listeners('unhandledRejection')).deep.equals([\n      handler.catcher\n    ]);\n\n    helpers.reject('wtf this rejection').then(done());\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":".getAllInfo(undefined)","suites":["UnhandledRejectionHandler"],"updatePoint":{"line":109,"column":28},"line":109,"code":"  it('.getAllInfo(undefined)', function () {\n    var handler = helpers.rejectionHandler();\n    // eslint-disable-next-line no-undefined\n    handler.getAllInfo(undefined);\n  });","file":"unit/winston/rejection-handler.test.js","skipped":false,"dir":"test"},{"name":"is a function","suites":["tailFile"],"updatePoint":{"line":58,"column":19},"line":58,"code":"  it('is a function', function () {\n    assume(tailFile).is.a('function');\n    assume(tailFile.length).equals(2);\n  });","file":"unit/winston/tail-file.test.js","skipped":false,"dir":"test"},{"name":"returns a stream that emits \"line\" for every line","suites":["tailFile"],"updatePoint":{"line":63,"column":55},"line":63,"code":"  it('returns a stream that emits \"line\" for every line', function (done) {\n    var tailable = path.join(testLogFixturesPath, 'common-tail-file.log');\n    var expected = 0;\n    //\n    // Performs the actual tail and asserts it.\n    //\n    function startTailFile() {\n      var stream = tailFile({ file: tailable });\n      assume(stream).instanceof(Stream);\n\n      stream.on('line', function (buff) {\n        expected += 1;\n        assume(JSON.parse('' + buff)).is.an('object');\n      });\n    }\n\n    logOnInterval({\n      file: tailable,\n      open: startTailFile,\n      timeout: 5000\n    }, function (err, actual) {\n      assume(expected).equals(actual.write);\n      done();\n    });\n  });","file":"unit/winston/tail-file.test.js","skipped":false,"dir":"test"},{"name":"should handle a high volume of writes","suites":["File (stress)"],"updatePoint":{"line":31,"column":43},"line":31,"code":"  it('should handle a high volume of writes', function (done) {\n    const logger = winston.createLogger({\n      transports: [new winston.transports.File({\n        filename: fileStressLogFile\n      })]\n    });\n\n    const counters = {\n      write: 0,\n      read: 0\n    };\n\n    const interval = setInterval(function () {\n      logger.info(++counters.write);\n    }, 0);\n\n    setTimeout(function () {\n      clearInterval(interval);\n\n      helpers.tryRead(fileStressLogFile)\n        .on('error', function (err) {\n          assume(err).false();\n          logger.close();\n          done();\n        })\n        .pipe(split())\n        .on('data', function (d) {\n          const json = JSON.parse(d);\n          assume(json.level).equal('info');\n          assume(json.message).equal(++counters.read);\n        })\n        .on('end', function () {\n          assume(counters.write).equal(counters.read);\n          logger.close();\n          done();\n        });\n    }, 10000);\n  });","file":"unit/winston/transports/00-file-stress.test.js","skipped":false,"dir":"test"},{"name":"should handle a high volume of large writes","suites":["File (stress)"],"updatePoint":{"line":70,"column":49},"line":70,"code":"  it('should handle a high volume of large writes', function (done) {\n    const logger = winston.createLogger({\n      transports: [new winston.transports.File({\n        filename: fileStressLogFile\n      })]\n    });\n\n    const counters = {\n      write: 0,\n      read: 0\n    };\n\n    const interval = setInterval(function () {\n      const msg = {\n        counter: ++counters.write,\n        message: 'a'.repeat(16384 - os.EOL.length - 1)\n      };\n      logger.info(msg);\n    }, 0);\n\n    setTimeout(function () {\n      clearInterval(interval);\n\n      helpers.tryRead(fileStressLogFile)\n        .on('error', function (err) {\n          assume(err).false();\n          logger.close();\n          done();\n        })\n        .pipe(split())\n        .on('data', function (d) {\n          const json = JSON.parse(d);\n          assume(json.level).equal('info');\n          assume(json.message).equal('a'.repeat(16384 - os.EOL.length - 1));\n          assume(json.counter).equal(++counters.read);\n        })\n        .on('end', function () {\n          assume(counters.write).equal(counters.read);\n          logger.close();\n          done();\n        });\n    }, 10000);\n  });","file":"unit/winston/transports/00-file-stress.test.js","skipped":false,"dir":"test"},{"name":"should handle a high volume of large writes synchronous","suites":["File (stress)"],"updatePoint":{"line":114,"column":61},"line":114,"code":"  it('should handle a high volume of large writes synchronous', function (done) {\n    const logger = winston.createLogger({\n      transports: [new winston.transports.File({\n        filename: fileStressLogFile\n      })]\n    });\n\n    const counters = {\n      write: 0,\n      read: 0\n    };\n\n    const msgs = new Array(10).fill().map(() => ({\n      counter: ++counters.write,\n      message: 'a'.repeat(16384 - os.EOL.length - 1)\n    }));\n    msgs.forEach(msg => logger.info(msg));\n\n    setTimeout(function () {\n      helpers.tryRead(fileStressLogFile)\n        .on('error', function (err) {\n          assume(err).false();\n          logger.close();\n          done();\n        })\n        .pipe(split())\n        .on('data', function (d) {\n          const json = JSON.parse(d);\n          assume(json.level).equal('info');\n          assume(json.message).equal('a'.repeat(16384 - os.EOL.length - 1));\n          assume(json.counter).equal(++counters.read);\n        })\n        .on('end', function () {\n          assume(counters.write).equal(counters.read);\n          logger.close();\n          done();\n        });\n    }, 10000);\n  });","file":"unit/winston/transports/00-file-stress.test.js","skipped":false,"dir":"test"},{"name":"should create multiple files correctly when passed more than the maxsize","suites":["File (maxsize)"],"updatePoint":{"line":34,"column":78},"line":34,"code":"  it('should create multiple files correctly when passed more than the maxsize', function (done) {\n    const fillWith = ['a', 'b', 'c', 'd', 'e'];\n    const maxsizeTransport = new winston.transports.File({\n      level: 'info',\n      format: winston.format.printf(info => info.message),\n      filename: path.join(testLogFixturesPath, 'testmaxsize.log'),\n      maxsize: 4096\n    })\n\n    //\n    // Have to wait for `fs.stats` to be done in `maxsizeTransport.open()`.\n    // Otherwise the maxsizeTransport._dest is undefined. See https://github.com/winstonjs/winston/issues/1174\n    //\n    setTimeout(() => logKbytes(4), 100);\n\n    //\n    // Setup a list of files which we will later stat.\n    //\n    const files = [];\n\n    //\n    // Assets all the files have been created with the\n    // correct filesize\n    //\n    function assumeFilesCreated() {\n      files.map(function (file, i) {\n        let stats;\n        try {\n          stats = fs.statSync(file);\n        } catch (ex) {\n          assume(stats).is.an('object', `${file} failed to open: ${ex.message}`);\n        }\n\n        const text = fs.readFileSync(file, 'utf8');\n        assume(text[0]).equals(fillWith[i]);\n        // Either 4096 on Unix or 4100 on Windows\n        // because of the eol.\n        if (process.platform === 'win32') {\n          assume(stats.size).equals(4100);\n        } else {\n          assume(stats.size).equals(4096);\n        }\n      });\n\n      done();\n    }\n\n    //\n    // Log the specified kbytes to the transport\n    //\n    function logKbytes(kbytes) {\n      //\n      // Shift the next fill char off the array then push it back\n      // to rotate the chars.\n      //\n      const filler = fillWith.shift();\n      fillWith.push(filler);\n\n      //\n      //\n      // To not make each file not fail the assertion of the filesize we can\n      // make the array 1023 characters long.\n      //\n      const kbStr = Array(1023).fill(filler).join('');\n\n      //\n      // With printf format that displays the message only\n      // winston adds exactly 0 characters.\n      //\n      for (var i = 0; i < kbytes; i++) {\n        maxsizeTransport.log({ level: 'info', [MESSAGE]: kbStr });\n      }\n    }\n\n    maxsizeTransport.on('open', function (file) {\n      if (testDone) return; // ignore future notifications\n\n      const match = file.match(/(\\d+)\\.log$/);\n      const count = match ? match[1] : 0;\n\n      if (files.length === 5) {\n        return assumeFilesCreated();\n      }\n\n      files.push(file);\n      setImmediate(() => logKbytes(4));\n    });\n  });","file":"unit/winston/transports/01-file-maxsize.test.js","skipped":false,"dir":"test"},{"name":"logs all levels to stdout","suites":["Console transport","with defaults"],"updatePoint":{"line":64,"column":33},"line":64,"code":"    it('logs all levels to stdout', function () {\n      stdMocks.use();\n      transports.defaults.levels = defaultLevels;\n      Object.keys(defaultLevels)\n        .forEach(function (level) {\n          const info = {\n            [LEVEL]: level,\n            message: `This is level ${level}`,\n            level\n          };\n\n          info[MESSAGE] = JSON.stringify(info);\n          transports.defaults.log(info);\n        });\n\n      stdMocks.restore();\n      var output = stdMocks.flush();\n      assume(output.stderr).is.an('array');\n      assume(output.stderr).length(0);\n      assume(output.stdout).is.an('array');\n      assume(output.stdout).length(7);\n    });","file":"unit/winston/transports/console.test.js","skipped":false,"dir":"test"},{"name":"should set stderrLevels to [] by default","suites":["Console transport","with defaults"],"updatePoint":{"line":87,"column":48},"line":87,"code":"    it(\"should set stderrLevels to [] by default\", assertLogLevelsValues(\n      transports.defaults,\n      [],\n      'stderrLevels'\n    ));","file":"unit/winston/transports/console.test.js","skipped":false,"dir":"test"},{"name":"if stderrLevels is set, but not an Array { stderrLevels: 'Not an Array' }","suites":["Console transport","throws an appropriate error when"],"updatePoint":{"line":95,"column":81},"line":95,"code":"    it(\"if stderrLevels is set, but not an Array { stderrLevels: 'Not an Array' }\", function () {\n      assume(function () {\n        let throwing = new winston.transports.Console({\n          stderrLevels: 'Not an Array'\n        })\n      }).throws(/Cannot make set from type other than Array of string elements/);\n    });","file":"unit/winston/transports/console.test.js","skipped":false,"dir":"test"},{"name":"if stderrLevels contains non-string elements { stderrLevels: ['good', /^invalid$/, 'valid']","suites":["Console transport","throws an appropriate error when"],"updatePoint":{"line":103,"column":99},"line":103,"code":"    it(\"if stderrLevels contains non-string elements { stderrLevels: ['good', /^invalid$/, 'valid']\", function () {\n      assume(function () {\n        let throwing = new winston.transports.Console({\n          stderrLevels: ['good', /^invalid$/, 'valid']\n        })\n      }).throws(/Cannot make set from type other than Array of string elements/);\n    });","file":"unit/winston/transports/console.test.js","skipped":false,"dir":"test"},{"name":"{ stderrLevels: ['info', 'error'] } logs to them appropriately","suites":["Console transport","throws an appropriate error when"],"updatePoint":{"line":112,"column":68},"line":112,"code":"  it(\"{ stderrLevels: ['info', 'error'] } logs to them appropriately\", assertLogLevelsValues(\n    transports.stderrLevels,\n    ['info', 'error'],\n    'stderrLevels'\n  ));","file":"unit/winston/transports/console.test.js","skipped":false,"dir":"test"},{"name":"{ consoleWarnLevels: ['warn', 'debug'] } logs to them appropriately","suites":["Console transport","throws an appropriate error when"],"updatePoint":{"line":117,"column":73},"line":117,"code":"  it(\"{ consoleWarnLevels: ['warn', 'debug'] } logs to them appropriately\", assertLogLevelsValues(\n    transports.consoleWarnLevels,\n    ['warn', 'debug'],\n    'consoleWarnLevels'\n  ));","file":"unit/winston/transports/console.test.js","skipped":false,"dir":"test"},{"name":"{ eol } adds a custom EOL delimiter","suites":["Console transport","throws an appropriate error when"],"updatePoint":{"line":123,"column":41},"line":123,"code":"  it('{ eol } adds a custom EOL delimiter', function (done) {\n    stdMocks.use();\n    transports.eol.log({ [MESSAGE]: 'info: testing. 1 2 3...' }, function () {\n      stdMocks.restore();\n\n      var output = stdMocks.flush(),\n          line   = output.stdout[0];\n\n      assume(line).equal('info: testing. 1 2 3...X');\n      done();\n    });\n  });","file":"unit/winston/transports/console.test.js","skipped":false,"dir":"test"},{"name":"logger transport has single correct transport","suites":["transports issue 1364","only log once"],"updatePoint":{"line":50,"column":53},"line":50,"code":"    it('logger transport has single correct transport', () => {\n      const transports = logger.transports;\n      assume(transports).is.an('array');\n      assume(transports).length(1);\n      assume(transports).contains(transport);\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"error didn't","suites":["transports issue 1364","only log once"],"updatePoint":{"line":57,"column":20},"line":57,"code":"    it(\"error didn't\", () => {\n      assume(logError).not.exists();\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"logger transport has single correct transport","suites":["transports issue 1364","log twice"],"updatePoint":{"line":68,"column":53},"line":68,"code":"    it('logger transport has single correct transport', () => {\n      const transports = logger.transports;\n      assume(transports).is.an('array');\n      assume(transports).length(1);\n      assume(transports).contains(transport);\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"error occurred","suites":["transports issue 1364","log twice"],"updatePoint":{"line":75,"column":22},"line":75,"code":"    it('error occurred', () => {\n      assume(logError).property('message', mainError);\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"logger transport has single correct transport","suites":["transports issue 1364","log thrice"],"updatePoint":{"line":87,"column":53},"line":87,"code":"    it('logger transport has single correct transport', () => {\n      const transports = logger.transports;\n      assume(transports).is.an('array');\n      assume(transports).length(1);\n      assume(transports).contains(transport);\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"error occurred","suites":["transports issue 1364","log thrice"],"updatePoint":{"line":94,"column":22},"line":94,"code":"    it('error occurred', () => {\n      assume(logError).property('message', mainError);\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"logger transport has single correct transport","suites":["transports issue 1364","log four times"],"updatePoint":{"line":107,"column":53},"line":107,"code":"    it('logger transport has single correct transport', () => {\n      const transports = logger.transports;\n      assume(transports).is.an('array');\n      assume(transports).length(1);\n      assume(transports).contains(transport);\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"other error occurred","suites":["transports issue 1364","log four times"],"updatePoint":{"line":114,"column":28},"line":114,"code":"    it('other error occurred', () => {\n      assume(logError).property('message', otherError);\n    });","file":"unit/winston/transports/error.test.js","skipped":false,"dir":"test"},{"name":"init logger AFTER cleaning up old files","suites":["winston/transports/file/zippedArchive","An instance of the File Transport with tailable true"],"updatePoint":{"line":34,"column":47},"line":34,"code":"    it('init logger AFTER cleaning up old files', function () {\n      archiveTransport = new winston.transports.File({\n        timestamp: true,\n        json: false,\n        zippedArchive: true,\n        tailable: true,\n        filename: 'testarchive.log',\n        dirname: testLogFixturesPath,\n        maxsize: 4096,\n        maxFiles: 3\n      });\n    });","file":"unit/winston/transports/file-archive.test.js","skipped":false,"dir":"test"},{"name":"when created archived files are rolled","suites":["winston/transports/file/zippedArchive","An instance of the File Transport with tailable true"],"updatePoint":{"line":47,"column":46},"line":47,"code":"    it('when created archived files are rolled', function (done) {\n      let created = 0;\n      let loggedTotal = 0;\n\n      function data(ch, kb) {\n        return String.fromCharCode(65 + ch).repeat(kb * 1024 - 1);\n      }\n\n      function logKbytes(kbytes, txt) {\n        const toLog = {};\n        toLog[MESSAGE] = data(txt, kbytes);\n        archiveTransport.log(toLog);\n      }\n\n      archiveTransport.on('logged', function (info) {\n        loggedTotal += info[MESSAGE].length + 1;\n        if (loggedTotal >= 14 * 1024) { // just over 3 x 4kb files\n          return done();\n        }\n\n        if (loggedTotal % 4096 === 0) {\n          created++;\n        }\n        // eslint-disable-next-line max-nested-callbacks\n        setTimeout(() => logKbytes(1, created), 1);\n      });\n\n      logKbytes(1, created);\n    });","file":"unit/winston/transports/file-archive.test.js","skipped":false,"dir":"test"},{"name":"should be only 3 files called testarchive.log, testarchive1.log.gz and testarchive2.log.gz","suites":["winston/transports/file/zippedArchive","An instance of the File Transport with tailable true"],"updatePoint":{"line":77,"column":98},"line":77,"code":"    it('should be only 3 files called testarchive.log, testarchive1.log.gz and testarchive2.log.gz', function () {\n      for (var num = 0; num < 4; num++) {\n        const file = !num ? 'testarchive.log' : 'testarchive' + num + '.log.gz';\n        const fullpath = path.join(testLogFixturesPath, file);\n\n        if (num === 3) {\n          return assert.throws(function () {\n            fs.statSync(fullpath);\n          }, Error);\n        }\n\n        assert.doesNotThrow(function () {\n          fs.statSync(fullpath);\n        }, Error);\n      }\n    });","file":"unit/winston/transports/file-archive.test.js","skipped":false,"dir":"test"},{"name":"should create directory if it does not exist","suites":["winston/transports/file/createLogDir"],"updatePoint":{"line":23,"column":50},"line":23,"code":"  it('should create directory if it does not exist', function () {\n    winston.createLogger({\n      transports: [\n        new winston.transports.File({\n          filename: path.join(logDir, 'file.log')\n        })\n      ]\n    });\n\n    assert(fs.existsSync(logDir));\n  });","file":"unit/winston/transports/file-create-dir.test.js","skipped":false,"dir":"test"},{"name":"should create directory if it does not exist when write to the stream","suites":["winston/transports/file/createLogDir"],"updatePoint":{"line":35,"column":75},"line":35,"code":"  it('should create directory if it does not exist when write to the stream', function () {\n    const streamfile = path.join(logDir, 'simple-stream.log');\n    const stream = fs.createWriteStream(streamfile);\n\n    winston.createLogger({\n      transports: [\n        new winston.transports.File({\n          stream: stream\n        })\n      ]\n    });\n\n    assert(fs.existsSync(logDir));\n  });","file":"unit/winston/transports/file-create-dir.test.js","skipped":false,"dir":"test"},{"name":"init logger AFTER cleaning up old files","suites":["winston/transports/file/tailrolling","An instance of the File Transport"],"updatePoint":{"line":27,"column":47},"line":27,"code":"    it('init logger AFTER cleaning up old files', function () {\n      tailrollTransport = new winston.transports.File({\n        timestamp: false,\n        json: false,\n        filename: path.join(testLogFixturesPath, 'testtailrollingfiles.log'),\n        maxsize: 4096,\n        maxFiles: 3,\n        tailable: true\n      })\n        .on('open', console.log); // eslint-disable-line no-console\n    });","file":"unit/winston/transports/file-tailrolling.test.js","skipped":false,"dir":"test"},{"name":"and when passed more files than the maxFiles","suites":["winston/transports/file/tailrolling","An instance of the File Transport"],"updatePoint":{"line":39,"column":52},"line":39,"code":"    it('and when passed more files than the maxFiles', function (done) {\n      let created = 0;\n      let loggedTotal = 0;\n\n      function data(ch, kb) {\n        return String.fromCharCode(65 + ch).repeat(kb * 1024 - 1);\n      }\n\n      function logKbytes(kbytes, txt) {\n        const toLog = {};\n\t      toLog[MESSAGE] = data(txt, kbytes);\n        tailrollTransport.log(toLog);\n      }\n\n      tailrollTransport.on('logged', function (info) {\n        loggedTotal += info[MESSAGE].length + 1;\n        if (loggedTotal >= 14 * 1024) { // just over 3 x 4kb files\n          return done();\n        }\n\n        if (loggedTotal % 4096 === 0) {\n          created++;\n        }\n        // eslint-disable-next-line max-nested-callbacks\n        setTimeout(() => logKbytes(1, created), 1);\n      });\n\n      logKbytes(1, created);\n    });","file":"unit/winston/transports/file-tailrolling.test.js","skipped":false,"dir":"test"},{"name":"should be 3 log files, base to maxFiles - 1","suites":["winston/transports/file/tailrolling","An instance of the File Transport"],"updatePoint":{"line":69,"column":51},"line":69,"code":"    it('should be 3 log files, base to maxFiles - 1', function () {\n      for (var num = 0; num < 4; num++) {\n        const file = !num ? 'testtailrollingfiles.log' : 'testtailrollingfiles' + num + '.log';\n        const fullpath = path.join(testLogFixturesPath, file);\n\n        if (num === 3) {\n          return assert.ok(!fs.existsSync(fullpath));\n        }\n\n        assert.ok(fs.existsSync(fullpath));\n      }\n\n      return false;\n    });","file":"unit/winston/transports/file-tailrolling.test.js","skipped":false,"dir":"test"},{"name":"should have files in correct order","suites":["winston/transports/file/tailrolling","An instance of the File Transport"],"updatePoint":{"line":84,"column":42},"line":84,"code":"    it('should have files in correct order', function () {\n      ['D', 'C', 'B'].forEach(function (letter, i) {\n        const file = !i ? 'testtailrollingfiles.log' : 'testtailrollingfiles' + i + '.log';\n        let content = fs.readFileSync(path.join(testLogFixturesPath, file), 'ascii');\n        content = content.replace(/\\s+/g, '');\n\n        assert(content.match(new RegExp(letter, 'g'))[0].length, content.length);\n      });\n    });","file":"unit/winston/transports/file-tailrolling.test.js","skipped":false,"dir":"test"},{"name":"should write to the file when logged to with expected object","suites":["File({ filename })"],"updatePoint":{"line":17,"column":66},"line":17,"code":"  it('should write to the file when logged to with expected object', function (done) {\n    var filename = path.join(testFileFixturesPath, 'simple.log');\n    var transport = new winston.transports.File({\n      filename: filename\n    });\n\n    var info = { [MESSAGE]: 'this is my log message' };\n    var logged = 0;\n    var read = 0\n\n    function cleanup() {\n      fs.unlinkSync(filename);\n    }\n\n    transport.log(info, noop);\n    setImmediate(function () {\n      helpers.tryRead(filename)\n        .on('error', function (err) {\n          assume(err).false();\n          cleanup();\n          done();\n        })\n        .pipe(split())\n        .on('data', function (d) {\n          assume(++read).lte(logged);\n          assume(d).to.equal(info[MESSAGE]);\n        })\n        .on('end', function () {\n          cleanup();\n          done();\n        });\n    });\n\n    transport.once('logged', function () {\n      logged++;\n    });\n  });","file":"unit/winston/transports/file.test.js","skipped":false,"dir":"test"},{"name":"should display the deprecation notice","suites":["File({ stream })"],"updatePoint":{"line":98,"column":43},"line":98,"code":"  it('should display the deprecation notice');","file":"unit/winston/transports/file.test.js","skipped":false,"dir":"test"},{"name":"should write to the stream when logged to with expected object","suites":["File({ stream })"],"updatePoint":{"line":99,"column":68},"line":99,"code":"  it('should write to the stream when logged to with expected object', function (done) {\n    var streamfile = path.join(testFileFixturesPath, 'simple-stream.log');\n    var stream = fs.createWriteStream(streamfile);\n    var streamTransport = new winston.transports.File({\n      stream: stream\n    });\n\n    done();\n    //\n    // TODO: Flesh out these assertions\n    //\n  });","file":"unit/winston/transports/file.test.js","skipped":false,"dir":"test"},{"name":"should send logs over HTTP","suites":["Http({ host, port, path })","nominal"],"updatePoint":{"line":68,"column":34},"line":68,"code":"    it('should send logs over HTTP', function (done) {\n      const httpTransport = new Http({\n        host: host,\n        port: server.address().port,\n        path: 'log'\n      }).on('error', assumeError).on('logged', function () {\n        onLogged(context, done);\n      });\n      httpTransport.log(dummyLog, assumeError);\n    });","file":"unit/winston/transports/http.test.js","skipped":false,"dir":"test"},{"name":"test max message reached","suites":["Http({ host, port, path })","bacth mode: max message"],"updatePoint":{"line":88,"column":32},"line":88,"code":"    it('test max message reached', function (done) {\n      const httpTransport = new Http({\n        host: host,\n        port: server.address().port,\n        path: 'log',\n        batch: true,\n        batchCount: 5\n      })\n        .on('error', assumeError)\n        .on('logged', function () {\n          onLogged(context, done);\n        });\n\n      httpTransport.log(dummyLog, assumeError);\n      httpTransport.log(dummyLog, assumeError);\n      httpTransport.log(dummyLog, assumeError);\n      httpTransport.log(dummyLog, assumeError);\n      httpTransport.log(dummyLog, assumeError);\n    });","file":"unit/winston/transports/http.test.js","skipped":false,"dir":"test"},{"name":"test timeout reached","suites":["Http({ host, port, path })","bacth mode: timeout"],"updatePoint":{"line":117,"column":28},"line":117,"code":"    it('test timeout reached', function (done) {\n      this.timeout(5000);\n      const httpTransport = new Http({\n        host: host,\n        port: server.address().port,\n        path: 'log',\n        batch: true,\n        batchCount: 5,\n        batchInterval: 2000\n      })\n        .on('error', assumeError)\n        .on('logged', function () {\n          onLogged(context, done);\n        });\n\n      httpTransport.log(dummyLog, assumeError);\n      httpTransport.log(dummyLog, assumeError);\n    });","file":"unit/winston/transports/http.test.js","skipped":false,"dir":"test"},{"name":"should be able to handle options with circular structure","suites":["Http({ host, port, path })","circular structure"],"updatePoint":{"line":152,"column":64},"line":152,"code":"    it('should be able to handle options with circular structure', function (done) {\n      const httpTransport = new Http({\n        host: host,\n        port: server.address().port,\n        path: 'log'\n      })\n        .on('error', assumeError)\n        .on('logged', function () {\n          onLogged(context, done);\n        });\n\n      httpTransport.log(circularLog, assumeError);\n    });","file":"unit/winston/transports/http.test.js","skipped":false,"dir":"test"},{"name":"should support objectMode streams","suites":["Stream({ stream })"],"updatePoint":{"line":12,"column":39},"line":12,"code":"  it('should support objectMode streams', function (done) {\n    const expected = {\n      level: 'info',\n      message: 'lolwut testing!'\n    };\n\n    const stream = writeable(function (info) {\n      assume(info).equals(expected);\n      done();\n    });\n\n    const transport = new winston.transports.Stream({ stream });\n    transport.log(expected);\n  });","file":"unit/winston/transports/stream.test.js","skipped":false,"dir":"test"},{"name":"should support UTF8 encoding streams","suites":["Stream({ stream })"],"updatePoint":{"line":27,"column":42},"line":27,"code":"  it('should support UTF8 encoding streams', function (done) {\n    const expected = {\n      level: 'info',\n      message: 'lolwut testing!',\n      [MESSAGE]: 'info: lolwut testing!'\n    };\n\n    const stream = writeable(function (raw) {\n      assume(raw.toString()).equals(`${expected[MESSAGE]}${os.EOL}`);\n      done();\n    }, false);\n\n    const transport = new winston.transports.Stream({ stream });\n    transport.log(expected);\n  });","file":"unit/winston/transports/stream.test.js","skipped":false,"dir":"test"},{"name":"should throw when not passed a stream","suites":["Stream({ stream })"],"updatePoint":{"line":43,"column":43},"line":43,"code":"  it('should throw when not passed a stream', function () {\n    assume(function () {\n      const stream = new winston.transports.Stream()\n    }).throws('options.stream is required.');''\n  });","file":"unit/winston/transports/stream.test.js","skipped":false,"dir":"test"}]}