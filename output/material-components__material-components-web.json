{"repo":"material-components/material-components-web","url":"https://github.com/material-components/material-components-web","branch":"master","configs":[{"package":"@material/animation","lang":"ts","dir":"packages/mdc-animation/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/auto-init","lang":"ts","dir":"packages/mdc-auto-init/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/banner","lang":"ts","dir":"packages/mdc-banner/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/base","lang":"ts","dir":"packages/mdc-base/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/button","lang":"ts","dir":"packages/mdc-button/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/card","lang":"ts","dir":"packages/mdc-card/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/checkbox","lang":"ts","dir":"packages/mdc-checkbox/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/circular-progress","lang":"ts","dir":"packages/mdc-circular-progress/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/data-table","lang":"ts","dir":"packages/mdc-data-table/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/dialog","lang":"ts","dir":"packages/mdc-dialog/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/dom","lang":"ts","dir":"packages/mdc-dom/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/drawer","lang":"ts","dir":"packages/mdc-drawer/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/elevation","lang":"ts","dir":"packages/mdc-elevation/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/fab","lang":"ts","dir":"packages/mdc-fab/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/floating-label","lang":"ts","dir":"packages/mdc-floating-label/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/form-field","lang":"ts","dir":"packages/mdc-form-field/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/icon-button","lang":"ts","dir":"packages/mdc-icon-button/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/image-list","lang":"ts","dir":"packages/mdc-image-list/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/line-ripple","lang":"ts","dir":"packages/mdc-line-ripple/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/linear-progress","lang":"ts","dir":"packages/mdc-linear-progress/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/list","lang":"ts","dir":"packages/mdc-list/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/menu-surface","lang":"ts","dir":"packages/mdc-menu-surface/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/menu","lang":"ts","dir":"packages/mdc-menu/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/notched-outline","lang":"ts","dir":"packages/mdc-notched-outline/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/radio","lang":"ts","dir":"packages/mdc-radio/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/ripple","lang":"ts","dir":"packages/mdc-ripple/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/rtl","lang":"ts","dir":"packages/mdc-rtl/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/select","lang":"ts","dir":"packages/mdc-select/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/shape","lang":"ts","dir":"packages/mdc-shape/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/slider","lang":"ts","dir":"packages/mdc-slider/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/snackbar","lang":"ts","dir":"packages/mdc-snackbar/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/switch","lang":"ts","dir":"packages/mdc-switch/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/tab-bar","lang":"ts","dir":"packages/mdc-tab-bar/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/tab-indicator","lang":"ts","dir":"packages/mdc-tab-indicator/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/tab-scroller","lang":"ts","dir":"packages/mdc-tab-scroller/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/tab","lang":"ts","dir":"packages/mdc-tab/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/textfield","lang":"ts","dir":"packages/mdc-textfield/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/theme","lang":"ts","dir":"packages/mdc-theme/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/tooltip","lang":"ts","dir":"packages/mdc-tooltip/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/top-app-bar","lang":"ts","dir":"packages/mdc-top-app-bar/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/touch-target","lang":"ts","dir":"packages/mdc-touch-target/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@material/typography","lang":"ts","dir":"packages/mdc-typography/test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"#request adds an animation frame callback","suites":["AnimationFrame"],"line":30,"updatePoint":{"line":30,"column":47},"code":"  it('#request adds an animation frame callback', () => {\n    const af = new AnimationFrame();\n    const cb = jasmine.createSpy('callback');\n    af.request('x', cb);\n    jasmine.clock().tick(1);\n    expect(cb).toHaveBeenCalledTimes(1);\n  });","file":"animationframe.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#request with duplicate keys only executes the latest callback","suites":["AnimationFrame"],"line":38,"updatePoint":{"line":38,"column":68},"code":"  it('#request with duplicate keys only executes the latest callback', () => {\n    const af = new AnimationFrame();\n    const cb1 = jasmine.createSpy('callback1');\n    const cb2 = jasmine.createSpy('callback2');\n    const cb3 = jasmine.createSpy('callback3');\n    af.request('x', cb1);\n    af.request('x', cb2);\n    af.request('x', cb3);\n    jasmine.clock().tick(1);\n    expect(cb1).not.toHaveBeenCalled();\n    expect(cb2).not.toHaveBeenCalled();\n    expect(cb3).toHaveBeenCalledTimes(1);\n  });","file":"animationframe.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#cancel will cancel the keyed callback","suites":["AnimationFrame"],"line":52,"updatePoint":{"line":52,"column":44},"code":"  it('#cancel will cancel the keyed callback', () => {\n    const af = new AnimationFrame();\n    const cb = jasmine.createSpy('callback');\n    af.request('x', cb);\n    af.cancel('x');\n    jasmine.clock().tick(1);\n    expect(cb).not.toHaveBeenCalled();\n  });","file":"animationframe.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#cancel will not cancel a mismatched key","suites":["AnimationFrame"],"line":61,"updatePoint":{"line":61,"column":46},"code":"  it('#cancel will not cancel a mismatched key', () => {\n    const af = new AnimationFrame();\n    const cb = jasmine.createSpy('callback');\n    af.request('x', cb);\n    af.cancel('a');\n    jasmine.clock().tick(1);\n    expect(cb).toHaveBeenCalledTimes(1);\n  });","file":"animationframe.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#cancelAll cancels all keys","suites":["AnimationFrame"],"line":70,"updatePoint":{"line":70,"column":33},"code":"  it('#cancelAll cancels all keys', () => {\n    const af = new AnimationFrame();\n    const cb1 = jasmine.createSpy('callback1');\n    const cb2 = jasmine.createSpy('callback2');\n    const cb3 = jasmine.createSpy('callback3');\n    af.request('x', cb1);\n    af.request('y', cb2);\n    af.request('z', cb3);\n    af.cancelAll();\n    jasmine.clock().tick(3);\n    expect(cb1).not.toHaveBeenCalled();\n    expect(cb2).not.toHaveBeenCalled();\n    expect(cb3).not.toHaveBeenCalled();\n  });","file":"animationframe.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getQueue will return the keys in the order they were entered","suites":["AnimationFrame"],"line":85,"updatePoint":{"line":85,"column":67},"code":"  it('#getQueue will return the keys in the order they were entered', () => {\n    const af = new AnimationFrame();\n    const cb1 = jasmine.createSpy('callback1');\n    const cb2 = jasmine.createSpy('callback2');\n    const cb3 = jasmine.createSpy('callback3');\n    af.request('x', cb1);\n    af.request('y', cb2);\n    af.request('z', cb3);\n    expect(af.getQueue()).toEqual(['x', 'y', 'z']);\n  });","file":"animationframe.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getQueue will return not return keys that have finished","suites":["AnimationFrame"],"line":96,"updatePoint":{"line":96,"column":62},"code":"  it('#getQueue will return not return keys that have finished', () => {\n    const af = new AnimationFrame();\n    const cb = jasmine.createSpy('callback');\n    af.request('x', cb);\n    jasmine.clock().tick(1);\n    expect(af.getQueue()).toEqual([]);\n  });","file":"animationframe.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getCorrectEventName does not prefix events when not necessary","suites":["MDCAnimation"],"line":39,"updatePoint":{"line":39,"column":68},"code":"  it('#getCorrectEventName does not prefix events when not necessary', () => {\n    const windowObj = {\n      document: {\n        createElement: () => ({\n          style: {\n            animation: 'none',\n          },\n        })\n      },\n    } as any;\n\n    expect(getCorrectEventName(windowObj, 'animationstart'))\n        .toEqual('animationstart');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getCorrectPropertyName does not prefix events when not necessary","suites":["MDCAnimation"],"line":54,"updatePoint":{"line":54,"column":71},"code":"  it('#getCorrectPropertyName does not prefix events when not necessary',\n     () => {\n       const windowObj = {\n         document: {\n           createElement: () => ({\n             style: {\n               animation: 'none',\n             },\n           })\n         },\n       } as any;\n\n       expect(getCorrectPropertyName(windowObj, 'animation'))\n           .toEqual('animation');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getCorrectEventName does not prefix events if window does not contain a DOM node","suites":["MDCAnimation"],"line":70,"updatePoint":{"line":70,"column":87},"code":"  it('#getCorrectEventName does not prefix events if window does not contain a DOM node',\n     () => {\n       const windowObj = {} as any;\n\n       expect(getCorrectEventName(windowObj, 'animationstart'))\n           .toEqual('animationstart');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getCorrectPropertyName does not prefix events if window does not contain a DOM node","suites":["MDCAnimation"],"line":78,"updatePoint":{"line":78,"column":90},"code":"  it('#getCorrectPropertyName does not prefix events if window does not contain a DOM node',\n     () => {\n       const windowObj = {} as any;\n\n       expect(getCorrectPropertyName(windowObj, 'transition'))\n           .toEqual('transition');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getCorrectPropertyName prefixes css properties when required","suites":["MDCAnimation"],"line":86,"updatePoint":{"line":86,"column":67},"code":"  it('#getCorrectPropertyName prefixes css properties when required', () => {\n    expect(getCorrectPropertyName(legacyWindowObj, 'animation'))\n        .toEqual('-webkit-animation');\n\n    expect(getCorrectPropertyName(legacyWindowObj, 'transform'))\n        .toEqual('-webkit-transform');\n\n    expect(getCorrectPropertyName(legacyWindowObj, 'transition'))\n        .toEqual('-webkit-transition');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"#getCorrectEventName prefixes javascript events when required","suites":["MDCAnimation"],"line":97,"updatePoint":{"line":97,"column":67},"code":"  it('#getCorrectEventName prefixes javascript events when required', () => {\n    expect(getCorrectEventName(legacyWindowObj, 'animationstart'))\n        .toEqual('webkitAnimationStart');\n\n    expect(getCorrectEventName(legacyWindowObj, 'animationend'))\n        .toEqual('webkitAnimationEnd');\n\n    expect(getCorrectEventName(legacyWindowObj, 'animationiteration'))\n        .toEqual('webkitAnimationIteration');\n\n    expect(getCorrectEventName(legacyWindowObj, 'transitionend'))\n        .toEqual('webkitTransitionEnd');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-animation/test"},{"name":"calls attachTo() on components registered for identifier on nodes w/ data-mdc-auto-init attr","suites":["MDCAutoInit"],"line":73,"updatePoint":{"line":73,"column":98},"code":"  it('calls attachTo() on components registered for identifier on nodes w/ data-mdc-auto-init attr',\n     () => {\n       const root = setupTest();\n       mdcAutoInit(root);\n\n       expect(\n           (root.querySelector('.mdc-fake') as FakeHTMLElement)\n               .FakeComponent instanceof\n           FakeComponent)\n           .toBeTruthy();\n     });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"throws when attachTo() is missing","suites":["MDCAutoInit"],"line":85,"updatePoint":{"line":85,"column":39},"code":"  it('throws when attachTo() is missing', () => {\n    const root = setupInvalidTest();\n    expect(() => mdcAutoInit(root)).toThrow();\n  });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"passes the node where \"data-mdc-auto-init\" was found to attachTo()","suites":["MDCAutoInit"],"line":90,"updatePoint":{"line":90,"column":72},"code":"  it('passes the node where \"data-mdc-auto-init\" was found to attachTo()',\n     () => {\n       const root = setupTest();\n       mdcAutoInit(root);\n\n       const fake = root.querySelector('.mdc-fake') as FakeHTMLElement;\n       expect(fake.FakeComponent.node).toEqual(fake);\n     });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"throws when no constructor name is specified within \"data-mdc-auto-init\"","suites":["MDCAutoInit"],"line":99,"updatePoint":{"line":99,"column":78},"code":"  it('throws when no constructor name is specified within \"data-mdc-auto-init\"',\n     () => {\n       const root = setupTest();\n       (root.querySelector('.mdc-fake') as HTMLElement).dataset['mdcAutoInit'] =\n           '';\n\n       expect(() => mdcAutoInit(root)).toThrow();\n     });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"throws when constructor is not registered","suites":["MDCAutoInit"],"line":108,"updatePoint":{"line":108,"column":47},"code":"  it('throws when constructor is not registered', () => {\n    const root = setupTest();\n    (root.querySelector('.mdc-fake') as HTMLElement).dataset['mdcAutoInit'] =\n        'MDCUnregisteredComponent';\n\n    expect(() => mdcAutoInit(root)).toThrow();\n  });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"#register warns when registered key is being overridden","suites":["MDCAutoInit"],"line":116,"updatePoint":{"line":116,"column":61},"code":"  it('#register warns when registered key is being overridden', () => {\n    setupTest();\n    const warn = jasmine.createSpy('warn');\n    mdcAutoInit.register(\n        'FakeComponent',\n        (() => ({overridden: true})) as unknown as MDCAttachable, warn);\n    expect(warn).toHaveBeenCalledWith(\n        jasmine.stringMatching(/Overriding registration/));\n  });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"#dispatches a MDCAutoInit:End event when all components are initialized","suites":["MDCAutoInit"],"line":126,"updatePoint":{"line":126,"column":77},"code":"  it('#dispatches a MDCAutoInit:End event when all components are initialized',\n     () => {\n       const handler = jasmine.createSpy('eventHandler');\n       const type = 'MDCAutoInit:End';\n\n       document.addEventListener(type, handler);\n       mdcAutoInit(document);\n\n       expect(handler).toHaveBeenCalledWith(jasmine.objectContaining({type}));\n     });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"#dispatches a MDCAutoInit:End event when all components are initialized - custom events not supported","suites":["MDCAutoInit"],"line":141,"updatePoint":{"line":141,"column":107},"code":"  it('#dispatches a MDCAutoInit:End event when all components are initialized - custom events not supported',\n     () => {\n       const handler = jasmine.createSpy('eventHandler');\n       const type = 'MDCAutoInit:End';\n\n       document.addEventListener(type, handler);\n\n       const customEvent = CustomEvent;\n       (window as unknown as WindowWithCustomEvent).CustomEvent = undefined!;\n       try {\n         mdcAutoInit(document);\n       } finally {\n        (window as unknown as WindowWithCustomEvent).CustomEvent = customEvent;\n       }\n\n       expect(handler).toHaveBeenCalledWith(jasmine.objectContaining({type}));\n     });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"#returns the initialized components","suites":["MDCAutoInit"],"line":159,"updatePoint":{"line":159,"column":41},"code":"  it('#returns the initialized components', () => {\n    const root = setupTest();\n    const components = mdcAutoInit(root);\n\n    expect(components.length).toEqual(1);\n    expect(components[0] instanceof FakeComponent).toBeTruthy();\n  });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"does not register any components if element has data-mdc-auto-init-state=\"initialized\"","suites":["MDCAutoInit"],"line":167,"updatePoint":{"line":167,"column":92},"code":"  it('does not register any components if element has data-mdc-auto-init-state=\"initialized\"',\n     () => {\n       const root = setupTest();\n       root.querySelector('[data-mdc-auto-init]')!.setAttribute(\n           'data-mdc-auto-init-state', 'initialized');\n       mdcAutoInit(root);\n\n       expect(\n           (root.querySelector('.mdc-fake') as FakeHTMLElement)\n               .FakeComponent instanceof\n           FakeComponent)\n           .toBe(false);\n     });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"does not return any new components after calling autoInit a second time","suites":["MDCAutoInit"],"line":181,"updatePoint":{"line":181,"column":77},"code":"  it('does not return any new components after calling autoInit a second time',\n     () => {\n       const root = setupTest();\n\n       let components = mdcAutoInit(root);\n       expect(components.length).toEqual(1);\n       components = mdcAutoInit(root);\n       expect(components.length).toEqual(0);\n     });","file":"mdc-auto-init.test.ts","skipped":false,"dir":"packages/mdc-auto-init/test"},{"name":"attachTo returns a component instance","suites":["MDCBanner"],"line":80,"updatePoint":{"line":80,"column":43},"code":"  it('attachTo returns a component instance', () => {\n    expect(MDCBanner.attachTo(fixture)).toEqual(jasmine.any(MDCBanner));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#initialize registers click handlers for primary action button","suites":["MDCBanner"],"line":84,"updatePoint":{"line":84,"column":68},"code":"  it('#initialize registers click handlers for primary action button', () => {\n    const {component, primaryActionEl} = setupTest(fixture);\n    const handler = jasmine.createSpy('notifyClosingHandler');\n\n    component.open();\n    component.listen(events.CLOSING, handler);\n    emitEvent(primaryActionEl, 'click', {bubbles: true});\n    component.unlisten(events.CLOSING, handler);\n\n    expect(handler).toHaveBeenCalledWith(\n        jasmine.objectContaining({detail: {reason: CloseReason.PRIMARY}}));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#initialize registers click handlers for secondary action button","suites":["MDCBanner"],"line":97,"updatePoint":{"line":97,"column":70},"code":"  it('#initialize registers click handlers for secondary action button', () => {\n    const {component, secondaryActionEl} = setupTest(fixture);\n    const handler = jasmine.createSpy('notifyClosingHandler');\n\n    component.open();\n    component.listen(events.CLOSING, handler);\n    emitEvent(secondaryActionEl, 'click', {bubbles: true});\n    component.unlisten(events.CLOSING, handler);\n\n    expect(handler).toHaveBeenCalledWith(\n        jasmine.objectContaining({detail: {reason: CloseReason.SECONDARY}}));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#initialSyncWithDom adds a click event listener on the content element","suites":["MDCBanner"],"line":110,"updatePoint":{"line":110,"column":76},"code":"  it('#initialSyncWithDom adds a click event listener on the content element',\n     () => {\n       const contentEl =\n           fixture.querySelector('.mdc-banner__content') as HTMLElement;\n       spyOn(contentEl, 'addEventListener').and.callThrough();\n       const component = MDCBanner.attachTo(fixture);\n\n       component.open();\n       expect(contentEl.addEventListener)\n           .toHaveBeenCalledWith('click', jasmine.any(Function));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#destroy removes the click event listener on the content element","suites":["MDCBanner"],"line":122,"updatePoint":{"line":122,"column":70},"code":"  it('#destroy removes the click event listener on the content element', () => {\n    const {component, contentEl} = setupTest(fixture);\n    spyOn(contentEl, 'removeEventListener').and.callThrough();\n\n    component.destroy();\n    expect(contentEl.removeEventListener)\n        .toHaveBeenCalledWith('click', jasmine.any(Function));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"clicking on content element does nothing","suites":["MDCBanner"],"line":131,"updatePoint":{"line":131,"column":46},"code":"  it('clicking on content element does nothing', () => {\n    const {component, contentEl} = setupTest(fixture);\n    const handler = jasmine.createSpy('notifyClosingHandler');\n\n    component.open();\n    component.listen(events.CLOSING, handler);\n    emitEvent(contentEl, 'click', {bubbles: true});\n    component.unlisten(events.CLOSING, handler);\n\n    expect(handler).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#open emits opening animation events and adds/removes necessary classes","suites":["MDCBanner"],"line":143,"updatePoint":{"line":143,"column":77},"code":"  it('#open emits opening animation events and adds/removes necessary classes',\n     () => {\n       const {component} = setupTest(fixture);\n       const openingHandler = jasmine.createSpy('notifyOpeningHandler');\n       const openedHandler = jasmine.createSpy('notifyOpenedHandler');\n\n       component.listen(events.OPENING, openingHandler);\n       component.listen(events.OPENED, openedHandler);\n       component.open();\n       expect(openingHandler).toHaveBeenCalled();\n       expect(fixture.classList.contains(cssClasses.OPENING)).toBe(true);\n       expect(fixture.classList.contains(cssClasses.CLOSING)).toBe(false);\n       jasmine.clock().tick(1);\n       expect(fixture.classList.contains(cssClasses.OPEN)).toBe(true);\n       jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n       expect(openedHandler).toHaveBeenCalled();\n       expect(fixture.classList.contains(cssClasses.OPENING)).toBe(false);\n       component.unlisten(events.OPENING, openingHandler);\n       component.unlisten(events.OPENED, openedHandler);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close emits closing animation events and adds/removes necessary classes","suites":["MDCBanner"],"line":164,"updatePoint":{"line":164,"column":78},"code":"  it('#close emits closing animation events and adds/removes necessary classes',\n     () => {\n       const {component} = setupTest(fixture);\n       component.open();\n       const closingHandler = jasmine.createSpy('notifyClosingHandler');\n       const closedHandler = jasmine.createSpy('notifyClosedHandler');\n\n       component.listen(events.CLOSING, closingHandler);\n       component.listen(events.CLOSED, closedHandler);\n       component.close(CloseReason.UNSPECIFIED);\n       expect(closingHandler).toHaveBeenCalled();\n       expect(fixture.classList.contains(cssClasses.CLOSING)).toBe(true);\n       expect(fixture.classList.contains(cssClasses.OPEN)).toBe(false);\n       expect(fixture.classList.contains(cssClasses.OPENING)).toBe(false);\n       jasmine.clock().tick(numbers.BANNER_ANIMATION_CLOSE_TIME_MS);\n       expect(closedHandler).toHaveBeenCalled();\n       expect(fixture.classList.contains(cssClasses.CLOSING)).toBe(false);\n       component.unlisten(events.CLOSING, closingHandler);\n       component.unlisten(events.CLOSED, closedHandler);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#open sets the root element height to the content element height","suites":["MDCBanner"],"line":185,"updatePoint":{"line":185,"column":70},"code":"  it('#open sets the root element height to the content element height', () => {\n    const {component, contentEl} = setupTest(fixture);\n\n    component.open();\n    jasmine.clock().tick(1);\n    expect(fixture.offsetHeight)\n        .toEqual((contentEl as HTMLElement).offsetHeight);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close sets the root element height back to 0","suites":["MDCBanner"],"line":194,"updatePoint":{"line":194,"column":51},"code":"  it('#close sets the root element height back to 0', () => {\n    const {component} = setupTest(fixture);\n    component.open();\n\n    component.close(CloseReason.UNSPECIFIED);\n    expect(fixture.offsetHeight).toEqual(0);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#layout sets the root element height to the content element height","suites":["MDCBanner"],"line":202,"updatePoint":{"line":202,"column":72},"code":"  it('#layout sets the root element height to the content element height',\n     () => {\n       const {component, contentEl} = setupTest(fixture);\n\n       (contentEl as HTMLElement).style.height = '50px';\n       component.layout();\n       jasmine.clock().tick(1);\n       expect(fixture.offsetHeight)\n           .toEqual((contentEl as HTMLElement).offsetHeight);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"get isOpen returns true when open","suites":["MDCBanner"],"line":213,"updatePoint":{"line":213,"column":39},"code":"  it('get isOpen returns true when open', () => {\n    const {component} = setupTest(fixture);\n\n    component.open();\n    expect(component.isOpen).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"get isOpen returns false when not open","suites":["MDCBanner"],"line":220,"updatePoint":{"line":220,"column":44},"code":"  it('get isOpen returns false when not open', () => {\n    const {component} = setupTest(fixture);\n\n    expect(component.isOpen).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"getText returns textContent","suites":["MDCBanner"],"line":226,"updatePoint":{"line":226,"column":33},"code":"  it('getText returns textContent', () => {\n    const {component, textEl} = setupTest(fixture);\n\n    expect(component.getText()).toEqual(textEl.textContent!);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"setText sets the text textContent","suites":["MDCBanner"],"line":232,"updatePoint":{"line":232,"column":39},"code":"  it('setText sets the text textContent', () => {\n    const {component} = setupTest(fixture);\n\n    component.setText('foo');\n    expect(component.getText()).toEqual('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"getPrimaryActionText returns the primary button textContent","suites":["MDCBanner"],"line":239,"updatePoint":{"line":239,"column":65},"code":"  it('getPrimaryActionText returns the primary button textContent', () => {\n    const {component, primaryActionEl} = setupTest(fixture);\n\n    expect(component.getPrimaryActionText())\n        .toEqual(primaryActionEl.textContent!);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"setPrimaryActionText sets the primary button textContent","suites":["MDCBanner"],"line":246,"updatePoint":{"line":246,"column":62},"code":"  it('setPrimaryActionText sets the primary button textContent', () => {\n    const {component} = setupTest(fixture);\n\n    component.setPrimaryActionText('foo');\n    expect(component.getPrimaryActionText()).toEqual('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"getSecondaryActionText returns the secondary button textContent","suites":["MDCBanner"],"line":253,"updatePoint":{"line":253,"column":69},"code":"  it('getSecondaryActionText returns the secondary button textContent', () => {\n    const {component, secondaryActionEl} = setupTest(fixture);\n\n    expect(component.getSecondaryActionText())\n        .toEqual(secondaryActionEl.textContent!);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"getSecondaryActionText returns null if no secondary action","suites":["MDCBanner"],"line":260,"updatePoint":{"line":260,"column":64},"code":"  it('getSecondaryActionText returns null if no secondary action', () => {\n    fixture = getFixture(`<div>\n      <div class=\"mdc-banner\" role=\"banner\">\n        <div class=\"mdc-banner__content\">\n          <div class=\"mdc-banner__text\"\n               role=\"alertdialog\"\n               aria-live=\"assertive\">\n            Single line banner.\n          </div>\n          <div class=\"mdc-banner__actions\">\n            <button type=\"button\" class=\"mdc-button mdc-banner__primary-action\">\n              <div class=\"mdc-button__ripple\"></div>\n              <div class=\"mdc-button__label\">Fix it</div>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>`);\n    document.body.appendChild(fixture);\n    const component = MDCBanner.attachTo(fixture);\n\n    expect(component.getSecondaryActionText()).toEqual(null);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"setSecondaryActionText sets the secondary button textContent","suites":["MDCBanner"],"line":284,"updatePoint":{"line":284,"column":66},"code":"  it('setSecondaryActionText sets the secondary button textContent', () => {\n    const {component} = setupTest(fixture);\n\n    component.setSecondaryActionText('foo');\n    expect(component.getSecondaryActionText()).toEqual('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#open sets focus on primary action","suites":["MDCBanner"],"line":291,"updatePoint":{"line":291,"column":40},"code":"  it('#open sets focus on primary action', () => {\n    const {component, primaryActionEl} = setupTest(fixture);\n    component.open();\n\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n    expect(document.activeElement).toEqual(primaryActionEl);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close releases focus to previously focused element","suites":["MDCBanner"],"line":300,"updatePoint":{"line":300,"column":57},"code":"  it('#close releases focus to previously focused element', () => {\n    const {component} = setupTest(fixture);\n\n    const backgroundElement = document.createElement('button');\n    document.body.appendChild(backgroundElement);\n    backgroundElement.focus();\n    expect(document.activeElement).toEqual(backgroundElement);\n\n    component.open();\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n    expect(document.activeElement).not.toEqual(backgroundElement);\n    component.close(CloseReason.UNSPECIFIED);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_CLOSE_TIME_MS);\n    expect(document.activeElement).toEqual(backgroundElement);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"default adapter returns a complete adapter implementation","suites":["MDCBannerFoundation"],"line":32,"updatePoint":{"line":32,"column":63},"code":"  it('default adapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCBannerFoundation, [\n      'addClass',\n      'getContentHeight',\n      'notifyOpening',\n      'notifyOpened',\n      'notifyClosing',\n      'notifyClosed',\n      'notifyActionClicked',\n      'setStyleProperty',\n      'removeClass',\n      'trapFocus',\n      'releaseFocus',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#destroy cancels all timers","suites":["MDCBannerFoundation"],"line":53,"updatePoint":{"line":53,"column":33},"code":"  it('#destroy cancels all timers', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.destroy();\n\n    jasmine.clock().tick(1);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#layout sets the root element height to the content height","suites":["MDCBannerFoundation"],"line":63,"updatePoint":{"line":63,"column":64},"code":"  it('#layout sets the root element height to the content height', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.layout();\n    expect(mockAdapter.getContentHeight).toHaveBeenCalled();\n    // 0px since nothing is being generated.\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('height', '0px');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#open adds CSS classes after rAF","suites":["MDCBannerFoundation"],"line":72,"updatePoint":{"line":72,"column":38},"code":"  it('#open adds CSS classes after rAF', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n\n    jasmine.clock().tick(1);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close removes CSS classes","suites":["MDCBannerFoundation"],"line":82,"updatePoint":{"line":82,"column":32},"code":"  it('#close removes CSS classes', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.close(CloseReason.UNSPECIFIED);\n\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close cancels rAF scheduled by open if still pending","suites":["MDCBannerFoundation"],"line":91,"updatePoint":{"line":91,"column":59},"code":"  it('#close cancels rAF scheduled by open if still pending', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.close(CloseReason.UNSPECIFIED);\n\n    jasmine.clock().tick(1);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#open adds the opening class to start an animation, and removes it after the animation is done","suites":["MDCBannerFoundation"],"line":101,"updatePoint":{"line":101,"column":100},"code":"  it('#open adds the opening class to start an animation, and removes it after the animation is done',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.open();\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.OPENING);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.OPENING);\n\n       jasmine.clock().tick(1);\n       jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPENING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close adds the closing class to start an animation, and removes it after the animation is done","suites":["MDCBannerFoundation"],"line":115,"updatePoint":{"line":115,"column":101},"code":"  it('#close adds the closing class to start an animation, and removes it after the animation is done',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.open();\n       jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n       expect(mockAdapter.removeClass).toHaveBeenCalledTimes(1);\n       foundation.close(CloseReason.UNSPECIFIED);\n\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n       jasmine.clock().tick(numbers.BANNER_ANIMATION_CLOSE_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#open emits \"opening\" and \"opened\" events","suites":["MDCBannerFoundation"],"line":130,"updatePoint":{"line":130,"column":47},"code":"  it('#open emits \"opening\" and \"opened\" events', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    expect(mockAdapter.notifyOpening).toHaveBeenCalledTimes(1);\n\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n    expect(mockAdapter.notifyOpened).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close emits \"closing\" and \"closed\" events","suites":["MDCBannerFoundation"],"line":141,"updatePoint":{"line":141,"column":48},"code":"  it('#close emits \"closing\" and \"closed\" events', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n    foundation.close(CloseReason.UNSPECIFIED);\n\n    expect(mockAdapter.notifyClosing)\n        .toHaveBeenCalledWith(CloseReason.UNSPECIFIED);\n    expect(mockAdapter.notifyClosing).toHaveBeenCalledTimes(1);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_CLOSE_TIME_MS);\n    expect(mockAdapter.notifyClosed)\n        .toHaveBeenCalledWith(CloseReason.UNSPECIFIED);\n    expect(mockAdapter.notifyClosed).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close does nothing if the banner is already closed","suites":["MDCBannerFoundation"],"line":157,"updatePoint":{"line":157,"column":57},"code":"  it('#close does nothing if the banner is already closed', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.close(CloseReason.UNSPECIFIED);\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_CLOSE_TIME_MS);\n    expect(mockAdapter.removeClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.OPENING);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.CLOSING);\n    expect(mockAdapter.notifyClosing).not.toHaveBeenCalledWith('');\n    expect(mockAdapter.notifyClosed).not.toHaveBeenCalledWith('');\n    expect(mockAdapter.releaseFocus).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#open activates focus trapping on the banner","suites":["MDCBannerFoundation"],"line":172,"updatePoint":{"line":172,"column":50},"code":"  it('#open activates focus trapping on the banner', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n    expect(mockAdapter.trapFocus).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#close deactivates focus trapping on the dialog surface","suites":["MDCBannerFoundation"],"line":181,"updatePoint":{"line":181,"column":61},"code":"  it('#close deactivates focus trapping on the dialog surface', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.close(CloseReason.UNSPECIFIED);\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(numbers.BANNER_ANIMATION_OPEN_TIME_MS);\n    expect(mockAdapter.releaseFocus).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#isOpen returns false when the banner has never been opened","suites":["MDCBannerFoundation"],"line":191,"updatePoint":{"line":191,"column":65},"code":"  it('#isOpen returns false when the banner has never been opened', () => {\n    const {foundation} = setupTest();\n    expect(foundation.isOpen()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#isOpen returns true when the banner is open","suites":["MDCBannerFoundation"],"line":196,"updatePoint":{"line":196,"column":50},"code":"  it('#isOpen returns true when the banner is open', () => {\n    const {foundation} = setupTest();\n\n    foundation.open();\n\n    expect(foundation.isOpen()).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#isOpen returns false when the banner is closed after being open","suites":["MDCBannerFoundation"],"line":204,"updatePoint":{"line":204,"column":70},"code":"  it('#isOpen returns false when the banner is closed after being open', () => {\n    const {foundation} = setupTest();\n\n    foundation.open();\n    foundation.close(CloseReason.UNSPECIFIED);\n\n    expect(foundation.isOpen()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#handlePrimaryActionClick closes the banner with reason \"\" if disableAutoClose is false","suites":["MDCBannerFoundation"],"line":213,"updatePoint":{"line":214,"column":59},"code":"  it(`#handlePrimaryActionClick closes the banner with reason \"${\n         CloseReason.PRIMARY}\" if disableAutoClose is false`,\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handlePrimaryActionClick();\n\n       expect(foundation.close).toHaveBeenCalledWith(CloseReason.PRIMARY);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#handlePrimaryActionClick does not close the banner if disableAutoClose is\n     true, instead emits ActionClicked with action \"\"","suites":["MDCBannerFoundation"],"line":225,"updatePoint":{"line":226,"column":70},"code":"  it(`#handlePrimaryActionClick does not close the banner if disableAutoClose is\n     true, instead emits ActionClicked with action \"${Action.PRIMARY}\"`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handlePrimaryActionClick(/** disableAutoClose= */ true);\n\n       expect(foundation.close).not.toHaveBeenCalled();\n       expect(mockAdapter.notifyActionClicked)\n           .toHaveBeenCalledWith(Action.PRIMARY);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#handleSecondaryActionClick closes the banner with reason \"\" if disableAutoClose is false","suites":["MDCBannerFoundation"],"line":239,"updatePoint":{"line":240,"column":61},"code":"  it(`#handleSecondaryActionClick closes the banner with reason \"${\n         CloseReason.SECONDARY}\" if disableAutoClose is false`,\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handleSecondaryActionClick();\n\n       expect(foundation.close).toHaveBeenCalledWith(CloseReason.SECONDARY);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"#handleSecondaryActionClick does not close the banner if disableAutoClose\n     is true, instead emits ActionClicked with action \"\"","suites":["MDCBannerFoundation"],"line":251,"updatePoint":{"line":252,"column":75},"code":"  it(`#handleSecondaryActionClick does not close the banner if disableAutoClose\n     is true, instead emits ActionClicked with action \"${Action.SECONDARY}\"`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handleSecondaryActionClick(/** disableAutoClose= */ true);\n\n       expect(foundation.close).not.toHaveBeenCalled();\n       expect(mockAdapter.notifyActionClicked)\n           .toHaveBeenCalledWith(Action.SECONDARY);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-banner/test"},{"name":"provides a static attachTo() method that returns a basic instance with the specified root","suites":["MDCComponent"],"line":53,"updatePoint":{"line":53,"column":95},"code":"  it('provides a static attachTo() method that returns a basic instance with the specified root',\n     () => {\n       const root = document.createElement('div');\n       const b = MDCComponent.attachTo(root);\n       expect(b instanceof MDCComponent).toBeTruthy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"takes a root node constructor param and assigns it to the \"root\" property","suites":["MDCComponent"],"line":60,"updatePoint":{"line":60,"column":79},"code":"  it('takes a root node constructor param and assigns it to the \"root\" property',\n     () => {\n       const root = document.createElement('div');\n       const f = new FakeComponent(root);\n       expect(f['root']).toEqual(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"takes an optional foundation constructor param and assigns it to the \"foundation\" property","suites":["MDCComponent"],"line":67,"updatePoint":{"line":67,"column":96},"code":"  it('takes an optional foundation constructor param and assigns it to the \"foundation\" property',\n     () => {\n       const root = document.createElement('div');\n       const foundation = {init: () => {}} as any;\n       const f = new FakeComponent(root, foundation);\n       expect(f['foundation']).toEqual(foundation);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"assigns the result of \"getDefaultFoundation()\" to \"foundation\" by default","suites":["MDCComponent"],"line":75,"updatePoint":{"line":75,"column":79},"code":"  it('assigns the result of \"getDefaultFoundation()\" to \"foundation\" by default',\n     () => {\n       const root = document.createElement('div');\n       const f = new FakeComponent(root);\n       expect((f['foundation'] as any).isDefaultFoundation).toBeTruthy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"calls the foundation's init() method within the constructor","suites":["MDCComponent"],"line":82,"updatePoint":{"line":82,"column":66},"code":"  it('calls the foundation\\'s init() method within the constructor', () => {\n    const root = document.createElement('div');\n    const foundation = {init: jasmine.createSpy('init')};\n    // Testing side effects of constructor\n    // eslint-disable-next-line no-new\n    new FakeComponent(root, foundation as any);\n    expect(foundation.init).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"throws an error if getDefaultFoundation() is not overridden","suites":["MDCComponent"],"line":91,"updatePoint":{"line":91,"column":65},"code":"  it('throws an error if getDefaultFoundation() is not overridden', () => {\n    const root = document.createElement('div');\n    expect(() => new MDCComponent(root)).toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"calls initialSyncWithDOM() when initialized","suites":["MDCComponent"],"line":96,"updatePoint":{"line":96,"column":49},"code":"  it('calls initialSyncWithDOM() when initialized', () => {\n    const root = document.createElement('div');\n    const f = new FakeComponent(root);\n    expect(f.synced).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"provides a default initialSyncWithDOM() no-op if none provided by subclass","suites":["MDCComponent"],"line":102,"updatePoint":{"line":102,"column":80},"code":"  it('provides a default initialSyncWithDOM() no-op if none provided by subclass',\n     () => {\n       expect(MDCComponent.prototype.initialSyncWithDOM.bind({})).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"provides a default destroy() method which calls the foundation's destroy() method","suites":["MDCComponent"],"line":107,"updatePoint":{"line":107,"column":88},"code":"  it('provides a default destroy() method which calls the foundation\\'s destroy() method',\n     () => {\n       const root = document.createElement('div');\n       const foundation = {\n         init: jasmine.createSpy('init'),\n         destroy: jasmine.createSpy('destroy')\n       };\n       const f = new FakeComponent(root, foundation as any);\n       f.destroy();\n       expect(foundation.destroy).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#initialize is called within constructor and passed any additional positional component args","suites":["MDCComponent"],"line":119,"updatePoint":{"line":119,"column":98},"code":"  it('#initialize is called within constructor and passed any additional positional component args',\n     () => {\n       const f = new FakeComponent(\n           document.createElement('div'), /* foundation */ undefined, 'foo',\n           42);\n       expect(f.initializeArgs).toEqual(['foo', 42]);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#initialize is called before getDefaultFoundation()","suites":["MDCComponent"],"line":127,"updatePoint":{"line":127,"column":57},"code":"  it('#initialize is called before getDefaultFoundation()', () => {\n    const f = new FakeComponent(document.createElement('div'));\n    expect(f.initializeComesBeforeFoundation).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#listen adds an event listener to the root element","suites":["MDCComponent"],"line":132,"updatePoint":{"line":132,"column":56},"code":"  it('#listen adds an event listener to the root element', () => {\n    const root = document.createElement('div');\n    const f = new FakeComponent(root);\n    const handler = jasmine.createSpy('eventHandler');\n    f.listen('FakeComponent:customEvent', handler);\n    emitEvent(root, 'FakeComponent:customEvent');\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#unlisten removes an event listener from the root element","suites":["MDCComponent"],"line":141,"updatePoint":{"line":141,"column":63},"code":"  it('#unlisten removes an event listener from the root element', () => {\n    const root = document.createElement('div');\n    const f = new FakeComponent(root);\n    const handler = jasmine.createSpy('eventHandler');\n    root.addEventListener('FakeComponent:customEvent', handler);\n    f.unlisten('FakeComponent:customEvent', handler);\n    emitEvent(root, 'FakeComponent:customEvent');\n    expect(handler).not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#emit dispatches a custom event with the supplied data","suites":["MDCComponent"],"line":151,"updatePoint":{"line":151,"column":60},"code":"  it('#emit dispatches a custom event with the supplied data', () => {\n    const root = document.createElement('div');\n    const f = new FakeComponent(root);\n    const handler = jasmine.createSpy('eventHandler');\n    let evt: any = null;\n    handler.withArgs(jasmine.any(Object)).and.callFake((e: any) => {\n      evt = e;\n    });\n    const data = {evtData: true};\n    const type = 'customeventtype';\n\n    root.addEventListener(type, handler);\n    f.emit(type, data);\n\n    expect(evt !== null).toBeTruthy();\n    // assertion above ensures non-null evt, but compiler doesn't know this\n    // tslint:disable:no-unnecessary-type-assertion\n    expect(evt!.type).toEqual(type);\n    expect(evt!.detail).toEqual(data);\n    // tslint:enable:no-unnecessary-type-assertion\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#emit dispatches a custom event with the supplied data where custom events aren't available","suites":["MDCComponent"],"line":173,"updatePoint":{"line":173,"column":98},"code":"  it('#emit dispatches a custom event with the supplied data where custom events aren\\'t available',\n     () => {\n       const root = document.createElement('div');\n       const f = new FakeComponent(root);\n       const handler = jasmine.createSpy('eventHandler');\n       let evt: any = null;\n       handler.withArgs(jasmine.any(Object)).and.callFake((e: any) => {\n         evt = e;\n       });\n       const data = {evtData: true};\n       const type = 'customeventtype';\n\n       root.addEventListener(type, handler);\n\n       const {CustomEvent} = (window as any);\n       (window as any).CustomEvent = undefined;\n       try {\n         f.emit(type, data);\n       } finally {\n         (window as any).CustomEvent = CustomEvent;\n       }\n\n       expect(evt !== null).toBeTruthy();\n       // assertion above ensures non-null evt, but compiler doesn't know this\n       // tslint:disable:no-unnecessary-type-assertion\n       expect(evt!.type).toEqual(type);\n       expect(evt!.detail).toEqual(data);\n       // tslint:enable:no-unnecessary-type-assertion\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"(regression) ensures that this.root is available for use within getDefaultFoundation()","suites":["MDCComponent"],"line":203,"updatePoint":{"line":203,"column":92},"code":"  it('(regression) ensures that this.root is available for use within getDefaultFoundation()',\n     () => {\n       const root = document.createElement('div');\n       const f = new FakeComponent(root);\n       expect((f['foundation'] as any).rootElementAtTimeOfCall).toEqual(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"cssClasses getter returns an empty object","suites":["MDCFoundation"],"line":27,"updatePoint":{"line":27,"column":47},"code":"  it('cssClasses getter returns an empty object', () => {\n    expect(MDCFoundation.cssClasses).toEqual({});\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"strings getter returns an empty object","suites":["MDCFoundation"],"line":31,"updatePoint":{"line":31,"column":44},"code":"  it('strings getter returns an empty object', () => {\n    expect(MDCFoundation.strings).toEqual({});\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"numbers getter returns an empty object","suites":["MDCFoundation"],"line":35,"updatePoint":{"line":35,"column":44},"code":"  it('numbers getter returns an empty object', () => {\n    expect(MDCFoundation.numbers).toEqual({});\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"defaultAdapter getter returns an empty object","suites":["MDCFoundation"],"line":39,"updatePoint":{"line":39,"column":51},"code":"  it('defaultAdapter getter returns an empty object', () => {\n    expect(MDCFoundation.defaultAdapter).toEqual({});\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"takes an adapter object in its constructor, assigns it to \"adapter\"","suites":["MDCFoundation"],"line":43,"updatePoint":{"line":43,"column":73},"code":"  it('takes an adapter object in its constructor, assigns it to \"adapter\"',\n     () => {\n       const adapter = {adapter: true};\n       const f = new MDCFoundation(adapter);\n       expect(f['adapter']).toEqual(adapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"assigns adapter to an empty object when none given","suites":["MDCFoundation"],"line":50,"updatePoint":{"line":50,"column":56},"code":"  it('assigns adapter to an empty object when none given', () => {\n    const f = new MDCFoundation();\n    expect(f['adapter']).toEqual({});\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"provides an init() lifecycle method, which defaults to a no-op","suites":["MDCFoundation"],"line":55,"updatePoint":{"line":55,"column":68},"code":"  it('provides an init() lifecycle method, which defaults to a no-op', () => {\n    const f = new MDCFoundation();\n    expect(() => f.init).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"provides a destroy() lifecycle method, which defaults to a no-op","suites":["MDCFoundation"],"line":60,"updatePoint":{"line":60,"column":70},"code":"  it('provides a destroy() lifecycle method, which defaults to a no-op', () => {\n    const f = new MDCFoundation();\n    expect(() => f.destroy).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#observe() should listen to multiple properties","suites":["MDCObserverFoundation"],"line":60,"updatePoint":{"line":60,"column":53},"code":"  it('#observe() should listen to multiple properties', () => {\n    instance.observe(state, {\n      stringProp: stringObserver,\n      numberProp: numberObserver,\n    });\n\n    state.stringProp = 'newValue';\n    state.numberProp = 1;\n    // TODO(b/183749291): replace when jasmine typings issue resolved\n    // expect(stringObserver)\n    //     .toHaveBeenCalledOnceWith(state.stringProp, initialState.stringProp);\n    expect(stringObserver).toHaveBeenCalledTimes(1);\n    expect(stringObserver)\n        .toHaveBeenCalledWith(state.stringProp, initialState.stringProp);\n    // expect(numberObserver)\n    //     .toHaveBeenCalledOnceWith(state.numberProp, initialState.numberProp);\n    expect(numberObserver).toHaveBeenCalledTimes(1);\n    expect(numberObserver)\n        .toHaveBeenCalledWith(state.numberProp, initialState.numberProp);\n  });","file":"observer-foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#observe() should call Observers with instance as `this`","suites":["MDCObserverFoundation"],"line":81,"updatePoint":{"line":81,"column":62},"code":"  it('#observe() should call Observers with instance as `this`', () => {\n    let observerThis: unknown;\n    stringObserver.and.callFake(function(this: unknown) {\n      observerThis = this;\n    });\n\n    instance.observe(state, {\n      stringProp: stringObserver,\n    });\n\n    state.stringProp = 'newValue';\n    expect(observerThis).toBe(instance, 'observer `this` should be instance');\n  });","file":"observer-foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#observe() cleanup function stops Observers","suites":["MDCObserverFoundation"],"line":95,"updatePoint":{"line":95,"column":49},"code":"  it('#observe() cleanup function stops Observers', () => {\n    const unobserve = instance.observe(\n        state, {stringProp: stringObserver, numberProp: numberObserver});\n\n    state.stringProp = 'newValue';\n    state.numberProp = 1;\n    stringObserver.calls.reset();\n    numberObserver.calls.reset();\n    unobserve();\n    state.stringProp = 'anotherValue';\n    state.numberProp = 2;\n    expect(stringObserver).not.toHaveBeenCalled();\n    expect(numberObserver).not.toHaveBeenCalled();\n  });","file":"observer-foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#observe() cleanup function does not stop Observers from other invocations","suites":["MDCObserverFoundation"],"line":110,"updatePoint":{"line":110,"column":80},"code":"  it('#observe() cleanup function does not stop Observers from other invocations',\n     () => {\n       const otherStringObserver = jasmine.createSpy('otherStringObserver');\n       const unobserve = instance.observe(\n           state, {stringProp: stringObserver, numberProp: numberObserver});\n\n       instance.observe(state, {stringProp: otherStringObserver});\n\n       state.stringProp = 'newValue';\n       state.numberProp = 1;\n       unobserve();\n       state.stringProp = 'anotherValue';\n       state.numberProp = 2;\n       expect(otherStringObserver).toHaveBeenCalledTimes(2);\n     });","file":"observer-foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#unobserve() stops Observers from all invocations","suites":["MDCObserverFoundation"],"line":126,"updatePoint":{"line":126,"column":55},"code":"  it('#unobserve() stops Observers from all invocations', () => {\n    const otherStringObserver = jasmine.createSpy('otherStringObserver');\n    instance.observe(\n        state, {stringProp: stringObserver, numberProp: numberObserver});\n    instance.observe(state, {stringProp: otherStringObserver});\n    state.stringProp = 'newValue';\n    state.numberProp = 1;\n    stringObserver.calls.reset();\n    numberObserver.calls.reset();\n    otherStringObserver.calls.reset();\n    instance.unobserve();\n    state.stringProp = 'anotherValue';\n    state.numberProp = 2;\n    expect(stringObserver).not.toHaveBeenCalled();\n    expect(numberObserver).not.toHaveBeenCalled();\n    expect(otherStringObserver).not.toHaveBeenCalled();\n  });","file":"observer-foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#setObserversEnabled() can disable and enable all Observers","suites":["MDCObserverFoundation"],"line":144,"updatePoint":{"line":144,"column":65},"code":"  it('#setObserversEnabled() can disable and enable all Observers', () => {\n    const otherStringObserver = jasmine.createSpy('otherStringObserver');\n    instance.observe(\n        state, {stringProp: stringObserver, numberProp: numberObserver});\n    instance.observe(state, {stringProp: otherStringObserver});\n    state.stringProp = 'newValue';\n    state.numberProp = 1;\n    stringObserver.calls.reset();\n    numberObserver.calls.reset();\n    otherStringObserver.calls.reset();\n    // Test disabled\n    instance.setObserversEnabled(state, false);\n    state.stringProp = 'anotherValue';\n    state.numberProp = 2;\n    expect(stringObserver).not.toHaveBeenCalled();\n    expect(numberObserver).not.toHaveBeenCalled();\n    expect(otherStringObserver).not.toHaveBeenCalled();\n    // Test enabled\n    instance.setObserversEnabled(state, true);\n    state.stringProp = 'thirdValue';\n    state.numberProp = 3;\n    // TODO(b/183749291): replace when jasmine typings issue resolved\n    // expect(stringObserver)\n    //     .toHaveBeenCalledOnceWith('thirdValue', 'anotherValue');\n    expect(stringObserver).toHaveBeenCalledTimes(1);\n    expect(stringObserver).toHaveBeenCalledWith('thirdValue', 'anotherValue');\n    // expect(otherStringObserver)\n    //     .toHaveBeenCalledOnceWith('thirdValue', 'anotherValue');\n    expect(otherStringObserver).toHaveBeenCalledTimes(1);\n    expect(otherStringObserver)\n        .toHaveBeenCalledWith('thirdValue', 'anotherValue');\n    // expect(numberObserver).toHaveBeenCalledOnceWith(3, 2);\n    expect(numberObserver).toHaveBeenCalledTimes(1);\n    expect(numberObserver).toHaveBeenCalledWith(3, 2);\n  });","file":"observer-foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#destroy() removes state observers","suites":["MDCObserverFoundation"],"line":180,"updatePoint":{"line":180,"column":40},"code":"  it('#destroy() removes state observers', () => {\n    spyOn(instance, 'unobserve').and.callThrough();\n    instance.destroy();\n    expect(instance.unobserve).toHaveBeenCalled();\n  });","file":"observer-foundation.test.ts","skipped":false,"dir":"packages/mdc-base/test"},{"name":"#constructor initializes the root element with a ripple","suites":["MDCCheckbox"],"line":78,"updatePoint":{"line":78,"column":63},"code":"    it('#constructor initializes the root element with a ripple', () => {\n      const {root} = setupTest();\n      jasmine.clock().tick(1);\n      expect(root.classList.contains('mdc-ripple-upgraded')).toBeTruthy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#destroy removes the ripple","suites":["MDCCheckbox"],"line":84,"updatePoint":{"line":84,"column":35},"code":"    it('#destroy removes the ripple', () => {\n      const {root, component} = setupTest();\n      jasmine.clock().tick(1);\n      component.destroy();\n      jasmine.clock().tick(1);\n      expect(root.classList.contains('mdc-ripple-upgraded')).toBeFalsy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"(regression) activates ripple on keydown when the input element surface is active","suites":["MDCCheckbox"],"line":92,"updatePoint":{"line":92,"column":89},"code":"    it('(regression) activates ripple on keydown when the input element surface is active',\n       () => {\n         const {root} = setupTest();\n         const input = root.querySelector('input') as HTMLInputElement;\n         jasmine.clock().tick(1);\n\n         const fakeMatches = jasmine.createSpy('.matches');\n         fakeMatches.and.returnValue(true);\n         input.matches = fakeMatches;\n\n         expect(root.classList.contains('mdc-ripple-upgraded')).toBe(true);\n         emitEvent(input, 'keydown');\n         jasmine.clock().tick(1);\n\n         expect(root.classList.contains(\n                    'mdc-ripple-upgraded--foreground-activation'))\n             .toBe(true);\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"attachTo initializes and returns a MDCCheckbox instance","suites":["MDCCheckbox"],"line":112,"updatePoint":{"line":112,"column":61},"code":"  it('attachTo initializes and returns a MDCCheckbox instance', () => {\n    expect(MDCCheckbox.attachTo(getFixture()) instanceof MDCCheckbox)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"get/set checked updates the checked property on the native checkbox element","suites":["MDCCheckbox"],"line":117,"updatePoint":{"line":117,"column":81},"code":"  it('get/set checked updates the checked property on the native checkbox element',\n     () => {\n       const {cb, component} = setupTest();\n       component.checked = true;\n       expect(cb.checked).toBeTruthy();\n       expect(component.checked).toEqual(cb.checked);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"get/set indeterminate updates the indeterminate property on the native checkbox element","suites":["MDCCheckbox"],"line":125,"updatePoint":{"line":125,"column":93},"code":"  it('get/set indeterminate updates the indeterminate property on the native checkbox element',\n     () => {\n       const {cb, component} = setupTest();\n       component.indeterminate = true;\n       expect(cb.indeterminate).toBeTruthy();\n       expect(component.indeterminate).toEqual(cb.indeterminate);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"get/set disabled updates the indeterminate property on the native checkbox element","suites":["MDCCheckbox"],"line":133,"updatePoint":{"line":133,"column":88},"code":"  it('get/set disabled updates the indeterminate property on the native checkbox element',\n     () => {\n       const {cb, component} = setupTest();\n       component.disabled = true;\n       expect(cb.disabled).toBeTruthy();\n       expect(component.disabled).toEqual(cb.disabled);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"get/set value updates the value of the native checkbox element","suites":["MDCCheckbox"],"line":141,"updatePoint":{"line":141,"column":68},"code":"  it('get/set value updates the value of the native checkbox element', () => {\n    const {cb, component} = setupTest();\n    component.value = 'new value';\n    expect(cb.value).toEqual('new value');\n    expect(component.value).toEqual(cb.value);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"get ripple returns a MDCRipple instance","suites":["MDCCheckbox"],"line":148,"updatePoint":{"line":148,"column":45},"code":"  it('get ripple returns a MDCRipple instance', () => {\n    const {component} = setupTest();\n    expect(component.ripple instanceof MDCRipple).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"checkbox change event calls #foundation.handleChange","suites":["MDCCheckbox"],"line":153,"updatePoint":{"line":153,"column":58},"code":"  it('checkbox change event calls #foundation.handleChange', () => {\n    const {cb, component} = setupTest();\n    (component as any).foundation.handleChange = jasmine.createSpy();\n    emitEvent(cb, 'change');\n    expect((component as any).foundation.handleChange).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"root animationend event calls #foundation.handleAnimationEnd","suites":["MDCCheckbox"],"line":160,"updatePoint":{"line":160,"column":66},"code":"  it('root animationend event calls #foundation.handleAnimationEnd', () => {\n    const {root, component} = setupTest();\n    (component as any).foundation.handleAnimationEnd = jasmine.createSpy();\n    emitEvent(root, 'animationend');\n    expect((component as any).foundation.handleAnimationEnd)\n        .toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"\"checked\" property change hook calls foundation#handleChange","suites":["MDCCheckbox"],"line":168,"updatePoint":{"line":168,"column":66},"code":"  it('\"checked\" property change hook calls foundation#handleChange', () => {\n    const {cb, mockFoundation} = setupMockFoundationTest();\n    cb.checked = true;\n    expect(mockFoundation.handleChange).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"\"indeterminate\" property change hook calls foundation#handleChange","suites":["MDCCheckbox"],"line":174,"updatePoint":{"line":174,"column":72},"code":"  it('\"indeterminate\" property change hook calls foundation#handleChange',\n     () => {\n       const {cb, mockFoundation} = setupMockFoundationTest();\n       cb.indeterminate = true;\n       expect(mockFoundation.handleChange).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"checkbox change event handler is destroyed on #destroy","suites":["MDCCheckbox"],"line":181,"updatePoint":{"line":181,"column":60},"code":"  it('checkbox change event handler is destroyed on #destroy', () => {\n    const {cb, component} = setupTest();\n    (component as any).foundation.handleChange = jasmine.createSpy();\n    component.destroy();\n    emitEvent(cb, 'change');\n    expect((component as any).foundation.handleChange).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"root animationend event handler is destroyed on #destroy","suites":["MDCCheckbox"],"line":189,"updatePoint":{"line":189,"column":62},"code":"  it('root animationend event handler is destroyed on #destroy', () => {\n    const {root, component} = setupTest();\n    (component as any).foundation.handleAnimationEnd = jasmine.createSpy();\n    component.destroy();\n    emitEvent(root, 'animationend');\n    expect((component as any).foundation.handleAnimationEnd)\n        .not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"\"checked\" property change hook is removed on #destroy","suites":["MDCCheckbox"],"line":198,"updatePoint":{"line":198,"column":59},"code":"  it('\"checked\" property change hook is removed on #destroy', () => {\n    const {component, cb, mockFoundation} = setupMockFoundationTest();\n    component.destroy();\n    cb.checked = true;\n    expect(mockFoundation.handleChange).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"\"indeterminate\" property change hook is removed on #destroy","suites":["MDCCheckbox"],"line":205,"updatePoint":{"line":205,"column":65},"code":"  it('\"indeterminate\" property change hook is removed on #destroy', () => {\n    const {component, cb, mockFoundation} = setupMockFoundationTest();\n    component.destroy();\n    cb.indeterminate = true;\n    expect(mockFoundation.handleChange).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCCheckbox"],"line":212,"updatePoint":{"line":212,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"adapter#removeClass removes a class from the root element","suites":["MDCCheckbox"],"line":218,"updatePoint":{"line":218,"column":63},"code":"  it('adapter#removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"adapter#setNativeControlAttr sets an attribute on the input element","suites":["MDCCheckbox"],"line":225,"updatePoint":{"line":225,"column":73},"code":"  it('adapter#setNativeControlAttr sets an attribute on the input element',\n     () => {\n       const {cb, component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setNativeControlAttr('aria-checked', 'mixed');\n       expect(cb.getAttribute('aria-checked')).toEqual('mixed');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"adapter#removeNativeControlAttr removes an attribute from the input element","suites":["MDCCheckbox"],"line":233,"updatePoint":{"line":233,"column":81},"code":"  it('adapter#removeNativeControlAttr removes an attribute from the input element',\n     () => {\n       const {cb, component} = setupTest();\n       cb.setAttribute('aria-checked', 'mixed');\n       (component.getDefaultFoundation() as any)\n           .adapter.removeNativeControlAttr('aria-checked');\n       expect(cb.hasAttribute('aria-checked')).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"adapter#forceLayout touches \"offsetWidth\" on the root in order to force layout","suites":["MDCCheckbox"],"line":242,"updatePoint":{"line":242,"column":84},"code":"  it('adapter#forceLayout touches \"offsetWidth\" on the root in order to force layout',\n     () => {\n       const {root, component} = setupTest();\n       const mockGetter = jasmine.createSpy('.offsetWidth');\n       Object.defineProperty(root, 'offsetWidth', {\n         get: mockGetter,\n         set() {},\n         enumerable: false,\n         configurable: true,\n       });\n\n       (component.getDefaultFoundation() as any).adapter.forceLayout();\n       expect(mockGetter).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"adapter#isAttachedToDOM returns true when root is attached to DOM","suites":["MDCCheckbox"],"line":257,"updatePoint":{"line":257,"column":71},"code":"  it('adapter#isAttachedToDOM returns true when root is attached to DOM',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       expect(\n           (component.getDefaultFoundation() as any).adapter.isAttachedToDOM())\n           .toBeTruthy();\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"adapter#isAttachedToDOM returns false when root is not attached to DOM","suites":["MDCCheckbox"],"line":267,"updatePoint":{"line":267,"column":76},"code":"  it('adapter#isAttachedToDOM returns false when root is not attached to DOM',\n     () => {\n       const {component} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any).adapter.isAttachedToDOM())\n           .toBeFalsy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#adapter.isIndeterminate returns true when checkbox is indeterminate","suites":["MDCCheckbox"],"line":275,"updatePoint":{"line":275,"column":74},"code":"  it('#adapter.isIndeterminate returns true when checkbox is indeterminate',\n     () => {\n       const {cb, component} = setupTest();\n       cb.indeterminate = true;\n       expect(\n           (component.getDefaultFoundation() as any).adapter.isIndeterminate())\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#adapter.isIndeterminate returns false when checkbox is not indeterminate","suites":["MDCCheckbox"],"line":284,"updatePoint":{"line":284,"column":79},"code":"  it('#adapter.isIndeterminate returns false when checkbox is not indeterminate',\n     () => {\n       const {cb, component} = setupTest();\n       cb.indeterminate = false;\n       expect(\n           (component.getDefaultFoundation() as any).adapter.isIndeterminate())\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#adapter.isChecked returns true when checkbox is checked","suites":["MDCCheckbox"],"line":293,"updatePoint":{"line":293,"column":62},"code":"  it('#adapter.isChecked returns true when checkbox is checked', () => {\n    const {cb, component} = setupTest();\n    cb.checked = true;\n    expect((component.getDefaultFoundation() as any).adapter.isChecked())\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#adapter.isChecked returns false when checkbox is not checked","suites":["MDCCheckbox"],"line":300,"updatePoint":{"line":300,"column":67},"code":"  it('#adapter.isChecked returns false when checkbox is not checked', () => {\n    const {cb, component} = setupTest();\n    cb.checked = false;\n    expect((component.getDefaultFoundation() as any).adapter.isChecked())\n        .toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#adapter.hasNativeControl returns true when checkbox exists","suites":["MDCCheckbox"],"line":307,"updatePoint":{"line":307,"column":65},"code":"  it('#adapter.hasNativeControl returns true when checkbox exists', () => {\n    const {component} = setupTest();\n    expect(\n        (component.getDefaultFoundation() as any).adapter.hasNativeControl())\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#adapter.setNativeControlDisabled returns true when checkbox is disabled","suites":["MDCCheckbox"],"line":314,"updatePoint":{"line":314,"column":78},"code":"  it('#adapter.setNativeControlDisabled returns true when checkbox is disabled',\n     () => {\n       const {cb, component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setNativeControlDisabled(true);\n       expect(cb.disabled).toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#adapter.setNativeControlDisabled returns false when checkbox is not disabled","suites":["MDCCheckbox"],"line":322,"updatePoint":{"line":322,"column":83},"code":"  it('#adapter.setNativeControlDisabled returns false when checkbox is not disabled',\n     () => {\n       const {cb, component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setNativeControlDisabled(false);\n       expect(cb.disabled).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"changeHandler: ","suites":[],"line":86,"updatePoint":{"line":86,"column":28},"code":"  it(`changeHandler: ${desc}`, () => {\n    const {mockAdapter, change} = setupChangeHandlerTest();\n\n    (changes as any).forEach(change);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(expectedClass);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"exports constants","suites":["MDCCheckboxFoundation"],"line":97,"updatePoint":{"line":97,"column":23},"code":"  it('exports constants', () => {\n    expect(cssClasses).toEqual(MDCCheckboxFoundation.cssClasses);\n    expect(numbers).toEqual(MDCCheckboxFoundation.numbers);\n    expect(strings).toEqual(MDCCheckboxFoundation.strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCCheckboxFoundation"],"line":103,"updatePoint":{"line":103,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCCheckboxFoundation, [\n      'addClass',\n      'removeClass',\n      'setNativeControlAttr',\n      'removeNativeControlAttr',\n      'forceLayout',\n      'isAttachedToDOM',\n      'isIndeterminate',\n      'isChecked',\n      'hasNativeControl',\n      'setNativeControlDisabled',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#init adds the upgraded class to the root element","suites":["MDCCheckboxFoundation"],"line":118,"updatePoint":{"line":118,"column":55},"code":"  it('#init adds the upgraded class to the root element', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.UPGRADED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#init adds aria-checked=\"mixed\" if checkbox is initially indeterminate","suites":["MDCCheckboxFoundation"],"line":124,"updatePoint":{"line":124,"column":76},"code":"  it('#init adds aria-checked=\"mixed\" if checkbox is initially indeterminate',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.isIndeterminate.and.returnValue(true);\n\n       foundation.init();\n       expect(mockAdapter.setNativeControlAttr)\n           .toHaveBeenCalledWith(\n               'aria-checked', strings.ARIA_CHECKED_INDETERMINATE_VALUE);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#init handles case when WebIDL attrs cannot be overridden (Safari)","suites":["MDCCheckboxFoundation"],"line":165,"updatePoint":{"line":165,"column":72},"code":"  it('#init handles case when WebIDL attrs cannot be overridden (Safari)',\n     () => {\n       const {foundation, nativeControl} = setupTest();\n       withMockCheckboxDescriptorReturning(DESC_UNDEFINED, () => {\n         expect(() => {\n           foundation.init();\n           nativeControl.checked = !nativeControl.checked;\n         }).not.toThrow();\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#init handles case when property descriptors are not returned at all (Android Browser)","suites":["MDCCheckboxFoundation"],"line":176,"updatePoint":{"line":176,"column":92},"code":"  it('#init handles case when property descriptors are not returned at all (Android Browser)',\n     () => {\n       const {foundation} = setupTest();\n       withMockCheckboxDescriptorReturning(undefined, () => {\n         expect(() => foundation.init).not.toThrow();\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#destroy handles case when WebIDL attrs cannot be overridden (Safari)","suites":["MDCCheckboxFoundation"],"line":184,"updatePoint":{"line":184,"column":75},"code":"  it('#destroy handles case when WebIDL attrs cannot be overridden (Safari)',\n     () => {\n       const {foundation} = setupTest();\n       withMockCheckboxDescriptorReturning(DESC_UNDEFINED, () => {\n         expect(() => foundation.init).not.toThrow('init sanity check');\n         expect(() => foundation.destroy).not.toThrow();\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#setDisabled updates the value of nativeControl.disabled","suites":["MDCCheckboxFoundation"],"line":193,"updatePoint":{"line":193,"column":62},"code":"  it('#setDisabled updates the value of nativeControl.disabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setDisabled(true);\n    expect(mockAdapter.setNativeControlDisabled).toHaveBeenCalledWith(true);\n    expect(mockAdapter.setNativeControlDisabled).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#setDisabled adds mdc-checkbox--disabled class to the root element when set to true","suites":["MDCCheckboxFoundation"],"line":200,"updatePoint":{"line":200,"column":89},"code":"  it('#setDisabled adds mdc-checkbox--disabled class to the root element when set to true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setDisabled(true);\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.DISABLED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"#setDisabled removes mdc-checkbox--disabled class from the root element when set to false","suites":["MDCCheckboxFoundation"],"line":207,"updatePoint":{"line":207,"column":95},"code":"  it('#setDisabled removes mdc-checkbox--disabled class from the root element when set to false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setDisabled(false);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.DISABLED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"changing from unchecked to checked adds selected class","suites":["MDCCheckboxFoundation"],"line":299,"updatePoint":{"line":299,"column":60},"code":"  it('changing from unchecked to checked adds selected class', () => {\n    const {mockAdapter, change} = setupChangeHandlerTest();\n    change({\n      checked: false,\n      indeterminate: false,\n    });\n    change({\n      checked: true,\n      indeterminate: false,\n    });\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.SELECTED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"changing from unchecked to indeterminate adds selected class","suites":["MDCCheckboxFoundation"],"line":312,"updatePoint":{"line":312,"column":66},"code":"  it('changing from unchecked to indeterminate adds selected class', () => {\n    const {mockAdapter, change} = setupChangeHandlerTest();\n    change({\n      checked: false,\n      indeterminate: false,\n    });\n    change({\n      checked: false,\n      indeterminate: true,\n    });\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.SELECTED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"changing from checked to unchecked removes selected class","suites":["MDCCheckboxFoundation"],"line":325,"updatePoint":{"line":325,"column":63},"code":"  it('changing from checked to unchecked removes selected class', () => {\n    const {mockAdapter, change} = setupChangeHandlerTest();\n    change({\n      checked: true,\n      indeterminate: false,\n    });\n    change({\n      checked: false,\n      indeterminate: false,\n    });\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.SELECTED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"changing from indeterminate to unchecked removes selected class","suites":["MDCCheckboxFoundation"],"line":338,"updatePoint":{"line":338,"column":69},"code":"  it('changing from indeterminate to unchecked removes selected class', () => {\n    const {mockAdapter, change} = setupChangeHandlerTest();\n    change({\n      checked: false,\n      indeterminate: true,\n    });\n    change({\n      checked: false,\n      indeterminate: false,\n    });\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.SELECTED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"animation end handler removes animation class after short delay","suites":["MDCCheckboxFoundation"],"line":351,"updatePoint":{"line":351,"column":69},"code":"  it('animation end handler removes animation class after short delay', () => {\n    const {ANIM_UNCHECKED_CHECKED} = cssClasses;\n    const {mockAdapter, foundation} = setupTest();\n\n    (foundation as any).enableAnimationEndHandler = true;\n    (foundation as any).currentAnimationClass = ANIM_UNCHECKED_CHECKED;\n    expect(mockAdapter.removeClass).not.toHaveBeenCalled();\n\n    foundation.handleAnimationEnd();\n\n    jasmine.clock().tick(numbers.ANIM_END_LATCH_MS);\n    expect(mockAdapter.removeClass).toHaveBeenCalledTimes(1);\n    expect((foundation as any).enableAnimationEndHandler).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"animation end is debounced if event is called twice","suites":["MDCCheckboxFoundation"],"line":366,"updatePoint":{"line":366,"column":57},"code":"  it('animation end is debounced if event is called twice', () => {\n    const {ANIM_UNCHECKED_CHECKED} = cssClasses;\n    const {mockAdapter, foundation} = setupChangeHandlerTest();\n    (foundation as any).enableAnimationEndHandler = true;\n    (foundation as any).currentAnimationClass = ANIM_UNCHECKED_CHECKED;\n\n    foundation.handleAnimationEnd();\n\n    expect(mockAdapter.removeClass).not.toHaveBeenCalled();\n\n    foundation.handleAnimationEnd();\n\n    jasmine.clock().tick(numbers.ANIM_END_LATCH_MS);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(ANIM_UNCHECKED_CHECKED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"change handler triggers layout for changes within the same frame to correctly restart anims","suites":["MDCCheckboxFoundation"],"line":383,"updatePoint":{"line":383,"column":97},"code":"  it('change handler triggers layout for changes within the same frame to correctly restart anims',\n     () => {\n       const {mockAdapter, change} = setupChangeHandlerTest();\n\n       change({checked: true, indeterminate: false});\n       expect(mockAdapter.forceLayout).not.toHaveBeenCalled();\n\n       change({checked: true, indeterminate: true});\n       expect(mockAdapter.forceLayout).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"change handler updates aria-checked attribute correctly.","suites":["MDCCheckboxFoundation"],"line":394,"updatePoint":{"line":394,"column":62},"code":"  it('change handler updates aria-checked attribute correctly.', () => {\n    const {mockAdapter, change} = setupChangeHandlerTest();\n\n    change({checked: true, indeterminate: true});\n    expect(mockAdapter.setNativeControlAttr)\n        .toHaveBeenCalledWith('aria-checked', 'mixed');\n\n    change({checked: true, indeterminate: false});\n    expect(mockAdapter.removeNativeControlAttr)\n        .toHaveBeenCalledWith('aria-checked');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"change handler does not add animation classes when isAttachedToDOM() is falsy","suites":["MDCCheckboxFoundation"],"line":406,"updatePoint":{"line":406,"column":83},"code":"  it('change handler does not add animation classes when isAttachedToDOM() is falsy',\n     () => {\n       const {mockAdapter, change} = setupChangeHandlerTest();\n       mockAdapter.isAttachedToDOM.and.returnValue(false);\n\n       change({checked: true, indeterminate: false});\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(\n               jasmine.stringMatching('mdc-checkbox--anim'));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"change handler does not add animation classes for bogus changes (init -> unchecked)","suites":["MDCCheckboxFoundation"],"line":417,"updatePoint":{"line":417,"column":89},"code":"  it('change handler does not add animation classes for bogus changes (init -> unchecked)',\n     () => {\n       const {mockAdapter, change} = setupChangeHandlerTest();\n\n       change({checked: false, indeterminate: false});\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(\n               jasmine.stringMatching('mdc-checkbox--anim'));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"change handler does not do anything if checkbox element is not found","suites":["MDCCheckboxFoundation"],"line":427,"updatePoint":{"line":427,"column":74},"code":"  it('change handler does not do anything if checkbox element is not found',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasNativeControl.and.returnValue(false);\n       expect(() => foundation.handleChange).not.toThrow();\n       expect(mockAdapter.setNativeControlAttr).not.toHaveBeenCalled();\n       expect(mockAdapter.removeNativeControlAttr).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-checkbox/test"},{"name":"attachTo initializes and returns a MDCCircularProgress instance","suites":["MDCCircularProgress"],"line":124,"updatePoint":{"line":124,"column":69},"code":"  it('attachTo initializes and returns a MDCCircularProgress instance', () => {\n    expect(\n        MDCCircularProgress.attachTo(getFixture()) instanceof\n        MDCCircularProgress)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"set indeterminate","suites":["MDCCircularProgress"],"line":131,"updatePoint":{"line":131,"column":23},"code":"  it('set indeterminate', () => {\n    const {root, component} = setupTest();\n\n    component.determinate = false;\n    expect(root.classList.contains('mdc-circular-progress--indeterminate'))\n        .toBeTruthy();\n    expect(\n        root.getAttribute(MDCCircularProgressFoundation.strings.ARIA_VALUENOW))\n        .toEqual(null);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"set progress","suites":["MDCCircularProgress"],"line":142,"updatePoint":{"line":142,"column":18},"code":"  it('set progress', () => {\n    const {root, component} = setupTest();\n    const progressTestValue = 0.5;\n    component.progress = progressTestValue;\n    const determinateCircle =\n        root.querySelector(MDCCircularProgressFoundation.strings\n                               .DETERMINATE_CIRCLE_SELECTOR) as HTMLElement;\n\n    expect(\n        root.getAttribute(MDCCircularProgressFoundation.strings.ARIA_VALUENOW))\n        .toEqual(progressTestValue.toString());\n    const strokeDashoffset = Number(determinateCircle.getAttribute(\n        MDCCircularProgressFoundation.strings.STROKE_DASHOFFSET));\n    const expectedVal = progressTestValue * 2 * Math.PI * RADIUS;\n    expect(strokeDashoffset).toBeLessThan(expectedVal + .001);\n    expect(strokeDashoffset).toBeGreaterThan(expectedVal - .001);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"open and close","suites":["MDCCircularProgress"],"line":160,"updatePoint":{"line":160,"column":20},"code":"  it('open and close', () => {\n    const {root, component} = setupTest();\n\n    component.close();\n    expect(root.classList.contains('mdc-circular-progress--closed'))\n        .toBeTruthy();\n    expect(component.isClosed).toBe(true);\n\n    component.open();\n    expect(root.classList.contains('mdc-circular-progress--closed'))\n        .toBeFalsy();\n    expect(component.isClosed).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"exports strings","suites":["MDCCircularProgressFoundation"],"line":32,"updatePoint":{"line":32,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCCircularProgressFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"exports cssClasses","suites":["MDCCircularProgressFoundation"],"line":36,"updatePoint":{"line":36,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCCircularProgressFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCCircularProgressFoundation"],"line":40,"updatePoint":{"line":40,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCCircularProgressFoundation, [\n      'addClass',\n      'getDeterminateCircleAttribute',\n      'hasClass',\n      'removeAttribute',\n      'removeClass',\n      'setAttribute',\n      'setDeterminateCircleAttribute',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#setDeterminate false adds class and removes aria-valuenow","suites":["MDCCircularProgressFoundation"],"line":60,"updatePoint":{"line":60,"column":64},"code":"  it('#setDeterminate false adds class and removes aria-valuenow', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(false);\n    foundation.init();\n    foundation.setDeterminate(false);\n    expect(foundation.isDeterminate()).toBe(false);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.INDETERMINATE_CLASS);\n    expect(mockAdapter.removeAttribute)\n        .toHaveBeenCalledWith(strings.ARIA_VALUENOW);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#setDeterminate true removes class","suites":["MDCCircularProgressFoundation"],"line":73,"updatePoint":{"line":73,"column":40},"code":"  it('#setDeterminate true removes class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(true);\n    foundation.init();\n    foundation.setDeterminate(true);\n    expect(foundation.isDeterminate()).toBe(true);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.INDETERMINATE_CLASS);\n    expect(mockAdapter.setDeterminateCircleAttribute)\n        .toHaveBeenCalledWith(strings.STROKE_DASHOFFSET, jasmine.any(String));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#setDeterminate calls setDeterminateCircleAttribute and sets ARIA_VALUENOW","suites":["MDCCircularProgressFoundation"],"line":86,"updatePoint":{"line":86,"column":80},"code":"  it('#setDeterminate calls setDeterminateCircleAttribute and sets ARIA_VALUENOW',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n           .and.returnValue(true);\n       foundation.init();\n       foundation.setDeterminate(true);\n       expect(mockAdapter.setAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUENOW, '0');\n       expect(mockAdapter.setDeterminateCircleAttribute)\n           .toHaveBeenCalledWith(\n               strings.STROKE_DASHOFFSET, jasmine.any(String));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#setDeterminate restores previous progress value after toggled from false to true","suites":["MDCCircularProgressFoundation"],"line":100,"updatePoint":{"line":100,"column":87},"code":"  it('#setDeterminate restores previous progress value after toggled from false to true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       foundation.setProgress(0.123);\n       foundation.setDeterminate(false);\n       foundation.setDeterminate(true);\n\n       checkNumTimesSpyCalledWithArgs(\n           mockAdapter.setAttribute, [strings.ARIA_VALUENOW, '0.123'], 2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#setDeterminate updates progress value set while determinate is false after determinate is true","suites":["MDCCircularProgressFoundation"],"line":112,"updatePoint":{"line":112,"column":101},"code":"  it('#setDeterminate updates progress value set while determinate is false after determinate is true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       foundation.setDeterminate(false);\n       foundation.setProgress(0.123);\n       foundation.setDeterminate(true);\n\n       expect(mockAdapter.setAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUENOW, '0.123');\n       expect(mockAdapter.setDeterminateCircleAttribute)\n           .toHaveBeenCalledWith(\n               strings.STROKE_DASHOFFSET, jasmine.any(String));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#setProgress sets aria-valuenow","suites":["MDCCircularProgressFoundation"],"line":127,"updatePoint":{"line":127,"column":37},"code":"  it('#setProgress sets aria-valuenow', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(false);\n    foundation.init();\n    foundation.setProgress(0.5);\n    expect(foundation.getProgress()).toEqual(0.5);\n    expect(mockAdapter.setAttribute)\n        .toHaveBeenCalledWith(strings.ARIA_VALUENOW, '0.5');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#setProgress on indeterminate does nothing","suites":["MDCCircularProgressFoundation"],"line":138,"updatePoint":{"line":138,"column":48},"code":"  it('#setProgress on indeterminate does nothing', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(true);\n    foundation.init();\n    foundation.setProgress(0.5);\n    expect(mockAdapter.setDeterminateCircleAttribute).not.toHaveBeenCalled();\n    expect(mockAdapter.setAttribute).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#open removes class and aria-hidden","suites":["MDCCircularProgressFoundation"],"line":148,"updatePoint":{"line":148,"column":41},"code":"  it('#open removes class and aria-hidden', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.open();\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.CLOSED_CLASS);\n    expect(mockAdapter.removeAttribute)\n        .toHaveBeenCalledWith(strings.ARIA_HIDDEN);\n    expect(foundation.isClosed()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#close adds class and aria-hidden","suites":["MDCCircularProgressFoundation"],"line":159,"updatePoint":{"line":159,"column":39},"code":"  it('#close adds class and aria-hidden', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.close();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.CLOSED_CLASS);\n    expect(mockAdapter.setAttribute)\n        .toHaveBeenCalledWith(strings.ARIA_HIDDEN, 'true');\n    expect(foundation.isClosed()).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-circular-progress/test"},{"name":"#attachTo returns a component instance","suites":["MDCDataTable"],"line":303,"updatePoint":{"line":303,"column":44},"code":"  it('#attachTo returns a component instance', () => {\n    const root = renderComponent({data: mdcDataTableData});\n    const component = MDCDataTable.attachTo(root);\n    expect(component).toEqual(jasmine.any(MDCDataTable));\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Checking at least 1 row checkbox sets header row checkbox to indeterminate","suites":["MDCDataTable"],"line":310,"updatePoint":{"line":310,"column":80},"code":"  it('Checking at least 1 row checkbox sets header row checkbox to indeterminate',\n     () => {\n       const {root} = setupTest();\n\n       const rowCheckbox =\n           root.querySelector(strings.ROW_CHECKBOX_SELECTOR)!.querySelector(\n               'input') as HTMLInputElement;\n       rowCheckbox.click();\n\n       const headerRowCheckbox =\n           root.querySelector(strings.HEADER_ROW_CHECKBOX_SELECTOR)!\n               .querySelector('input') as HTMLInputElement;\n       expect(headerRowCheckbox.indeterminate).toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#setSelectedRowIds sets selected row ids","suites":["MDCDataTable"],"line":325,"updatePoint":{"line":325,"column":46},"code":"  it('#setSelectedRowIds sets selected row ids', () => {\n    const {component} = setupTest();\n\n    component.setSelectedRowIds(['u1', 'u2']);\n    expect(component.getSelectedRowIds()).toEqual(['u1', 'u2']);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#getSelectedRowIds returns empty array when no rows selected","suites":["MDCDataTable"],"line":333,"updatePoint":{"line":333,"column":66},"code":"  it('#getSelectedRowIds returns empty array when no rows selected', () => {\n    const {component} = setupTest();\n\n    component.setSelectedRowIds([]);\n    expect(component.getSelectedRowIds()).toEqual([]);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#isHeaderRowCheckboxChecked returns true if header row checkbox is checked","suites":["MDCDataTable"],"line":341,"updatePoint":{"line":341,"column":87},"code":"  it('adapter#isHeaderRowCheckboxChecked returns true if header row checkbox is checked',\n     () => {\n       const {component, root, adapter} = setupTest();\n\n       const nativeCheckbox =\n           root.querySelector(strings.HEADER_ROW_CHECKBOX_SELECTOR)!\n               .querySelector('input') as HTMLInputElement;\n\n       nativeCheckbox.checked = false;\n       expect(adapter.isHeaderRowCheckboxChecked()).toBe(false);\n\n       nativeCheckbox.checked = true;\n       expect(adapter.isHeaderRowCheckboxChecked()).toBe(true);\n\n       component.destroy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#addClassAtRowIndex adds class name at given row index ","suites":["MDCDataTable"],"line":358,"updatePoint":{"line":358,"column":68},"code":"  it('adapter#addClassAtRowIndex adds class name at given row index ', () => {\n    const {component, adapter} = setupTest();\n\n    adapter.addClassAtRowIndex(1, 'test-class-name');\n    expect(component.getRows()[1].classList.contains('test-class-name'))\n        .toBe(true);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#removeClassAtRowIndex removes class name from given row index ","suites":["MDCDataTable"],"line":368,"updatePoint":{"line":368,"column":76},"code":"  it('adapter#removeClassAtRowIndex removes class name from given row index ',\n     () => {\n       const {component, adapter} = setupTest();\n\n       adapter.addClassAtRowIndex(1, 'test-remove-class-name');\n       adapter.removeClassAtRowIndex(1, 'test-remove-class-name');\n       expect(\n           component.getRows()[1].classList.contains('test-remove-class-name'))\n           .toBe(false);\n\n       component.destroy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#setAttributeAtRowIndex","suites":["MDCDataTable"],"line":381,"updatePoint":{"line":381,"column":36},"code":"  it('adapter#setAttributeAtRowIndex', () => {\n    const {component, adapter} = setupTest();\n\n    adapter.setAttributeAtRowIndex(1, 'data-test-set-attr', 'test-val-1');\n    expect(adapter.getRowElements()[1].getAttribute('data-test-set-attr'))\n        .toBe('test-val-1');\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#getRowElements","suites":["MDCDataTable"],"line":391,"updatePoint":{"line":391,"column":28},"code":"  it('adapter#getRowElements', () => {\n    const {component, adapter} = setupTest();\n\n    expect(adapter.getRowElements().length).toEqual(3);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#isRowsSelectable","suites":["MDCDataTable"],"line":398,"updatePoint":{"line":398,"column":30},"code":"  it('adapter#isRowsSelectable', () => {\n    const {component, adapter} = setupTest();\n\n    expect(adapter.isRowsSelectable()).toBe(true);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#getRowIndexByChildElement","suites":["MDCDataTable"],"line":406,"updatePoint":{"line":406,"column":39},"code":"  it('adapter#getRowIndexByChildElement', () => {\n    const {component, root, adapter} = setupTest();\n\n    const rows = [].slice.call(root.querySelectorAll(strings.ROW_SELECTOR)) as\n        HTMLElement[];\n    const inputEl = rows[2].querySelector('input') as HTMLInputElement;\n    expect(adapter.getRowIndexByChildElement(inputEl)).toEqual(2);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#getRowCount calls foundation.getRows() method","suites":["MDCDataTable"],"line":417,"updatePoint":{"line":417,"column":59},"code":"  it('adapter#getRowCount calls foundation.getRows() method', () => {\n    const {component, adapter} = setupTest();\n\n    expect(adapter.getRowCount()).toEqual(3);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#getSelectedRowCount","suites":["MDCDataTable"],"line":425,"updatePoint":{"line":425,"column":33},"code":"  it('adapter#getSelectedRowCount', () => {\n    const {component, adapter} = setupTest();\n\n    expect(adapter.getSelectedRowCount())\n        .toBe(mdcDataTableData.selectedRowIndexes.length);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#notifyRowSelectionChanged","suites":["MDCDataTable"],"line":434,"updatePoint":{"line":434,"column":39},"code":"  it('adapter#notifyRowSelectionChanged', () => {\n    const {component, adapter} = setupTest();\n    const handler = jasmine.createSpy('notifyRowSelectionChangedHandler');\n\n    component.listen(events.ROW_SELECTION_CHANGED, handler);\n    adapter.notifyRowSelectionChanged(\n        {rowIndex: 1, rowId: 'u1', selected: true});\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n\n    component.unlisten(events.ROW_SELECTION_CHANGED, handler);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#setHeaderRowCheckboxIndeterminate","suites":["MDCDataTable"],"line":447,"updatePoint":{"line":447,"column":47},"code":"  it('adapter#setHeaderRowCheckboxIndeterminate', () => {\n    const {component, root, adapter} = setupTest();\n\n    const nativeCheckbox =\n        root.querySelector(strings.HEADER_ROW_CHECKBOX_SELECTOR)!.querySelector(\n            'input') as HTMLInputElement;\n\n    nativeCheckbox.indeterminate = false;\n    adapter.setHeaderRowCheckboxIndeterminate(true);\n    expect(nativeCheckbox.indeterminate).toBe(true);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#setHeaderRowCheckboxChecked","suites":["MDCDataTable"],"line":461,"updatePoint":{"line":461,"column":41},"code":"  it('adapter#setHeaderRowCheckboxChecked', () => {\n    const {component, root, adapter} = setupTest();\n\n    const nativeCheckbox =\n        root.querySelector(strings.HEADER_ROW_CHECKBOX_SELECTOR)!.querySelector(\n            'input') as HTMLInputElement;\n    expect(nativeCheckbox.checked).toBe(false);\n    adapter.setHeaderRowCheckboxChecked(true);\n    expect(nativeCheckbox.checked).toBe(true);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#getRowIdAtIndex","suites":["MDCDataTable"],"line":474,"updatePoint":{"line":474,"column":29},"code":"  it('adapter#getRowIdAtIndex', () => {\n    const {component, adapter} = setupTest();\n\n    expect(adapter.getRowIdAtIndex(1)).toEqual('u1');\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#setRowCheckboxCheckedAtIndex","suites":["MDCDataTable"],"line":481,"updatePoint":{"line":481,"column":42},"code":"  it('adapter#setRowCheckboxCheckedAtIndex', () => {\n    const {component, root, adapter} = setupTest();\n    const nativeCheckbox =\n        ([].slice.call(root.querySelectorAll(\n             strings.ROW_CHECKBOX_SELECTOR))[0] as HTMLInputElement)\n            .querySelector('input');\n\n    expect(nativeCheckbox!.checked).toBe(false);\n    adapter.setRowCheckboxCheckedAtIndex(0, true);\n    expect(nativeCheckbox!.checked).toBe(true);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#notifySelectedAll","suites":["MDCDataTable"],"line":495,"updatePoint":{"line":495,"column":31},"code":"  it('adapter#notifySelectedAll', () => {\n    const {component, adapter} = setupTest();\n    const handler = jasmine.createSpy('notifySelectedAll');\n\n    component.listen(events.SELECTED_ALL, handler);\n    adapter.notifySelectedAll();\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n\n    component.unlisten(events.SELECTED_ALL, handler);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"adapter#notifyUnselectedAll","suites":["MDCDataTable"],"line":507,"updatePoint":{"line":507,"column":33},"code":"  it('adapter#notifyUnselectedAll', () => {\n    const {component, adapter} = setupTest();\n    const handler = jasmine.createSpy('notifyUnselectedAll');\n\n    component.listen(events.UNSELECTED_ALL, handler);\n    adapter.notifyUnselectedAll();\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n\n    component.unlisten(events.UNSELECTED_ALL, handler);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Should trigger row click event when clicked on data row","suites":["MDCDataTable"],"line":519,"updatePoint":{"line":519,"column":61},"code":"  it('Should trigger row click event when clicked on data row', () => {\n    const {component} = setupTest();\n\n    const handler = jasmine.createSpy('mockRowClickListener');\n    component.listen(events.ROW_CLICK, handler);\n    (component.getRows()[1] as HTMLElement).click();\n    expect(handler).toHaveBeenCalledWith(jasmine.objectContaining({\n      detail: {\n        rowId: 'u1',\n        row: component.getRows()[1],\n        altKey: false,\n        ctrlKey: false,\n        metaKey: false,\n        shiftKey: false,\n      }\n    }));\n\n    component.unlisten(events.ROW_CLICK, handler);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Should trigger row click event with modifiers when clicked on data row","suites":["MDCDataTable"],"line":540,"updatePoint":{"line":540,"column":76},"code":"  it('Should trigger row click event with modifiers when clicked on data row',\n     () => {\n       const {component} = setupTest();\n\n       const handler = jasmine.createSpy('mockRowClickListener');\n       component.listen(events.ROW_CLICK, handler);\n       (component.getRows()[1] as HTMLElement)\n           .dispatchEvent(createMouseEvent('click', {\n             bubbles: true,\n             cancelable: true,\n             altKey: true,\n             ctrlKey: true,\n             metaKey: true,\n             shiftKey: true\n           }));\n\n       expect(handler).toHaveBeenCalledWith(jasmine.objectContaining({\n         detail: {\n           rowId: 'u1',\n           row: component.getRows()[1],\n           altKey: true,\n           ctrlKey: true,\n           metaKey: true,\n           shiftKey: true,\n         }\n       }));\n\n       component.unlisten(events.ROW_CLICK, handler);\n       component.destroy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Should not trigger row click event when clicked on header cell","suites":["MDCDataTable"],"line":571,"updatePoint":{"line":571,"column":68},"code":"  it('Should not trigger row click event when clicked on header cell', () => {\n    const {component, root} = setupTest();\n\n    const handler = jasmine.createSpy('mockRowClickListener');\n    component.listen(events.ROW_CLICK, handler);\n    root.querySelector<HTMLElement>('th')!.click();\n    expect(handler).not.toHaveBeenCalled();\n\n    component.unlisten(events.ROW_CLICK, handler);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"removes all rows while the header checkbox is checked.","suites":["MDCDataTable","Removing Rows"],"line":584,"updatePoint":{"line":584,"column":62},"code":"    it('removes all rows while the header checkbox is checked.', () => {\n      const {component, root, adapter} = setupTest();\n      adapter.setHeaderRowCheckboxChecked(true);\n      expect(adapter.isHeaderRowCheckboxChecked()).toBe(true);\n      const tableContent =\n          root.querySelector<HTMLElement>(`.${cssClasses.CONTENT}`);\n      tableContent!.textContent = ``;\n      component.layout();\n      expect(adapter.isHeaderRowCheckboxChecked()).toBe(false);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"emits sort event when clicked on sort button of sortable column header","suites":["MDCDataTable","Column sorting"],"line":597,"updatePoint":{"line":597,"column":78},"code":"    it('emits sort event when clicked on sort button of sortable column header',\n       () => {\n         const {component, root} = setupTest();\n         const handler = jasmine.createSpy('handleSorted');\n\n         component.listen(events.SORTED, handler);\n         const columnId = 'dessert';\n         const headerCell = root.querySelector<HTMLElement>(\n             `[${dataAttributes.COLUMN_ID}=\"${columnId}\"]`);\n         headerCell!\n             .querySelector<HTMLElement>(\n                 `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n         const matchEventDetail = {\n           columnId,\n           columnIndex: 1,\n           headerCell,\n           sortValue: SortValue.ASCENDING,\n         };\n         expect(handler).toHaveBeenCalledWith(\n             jasmine.objectContaining({detail: matchEventDetail}));\n         component.unlisten(events.SORTED, handler);\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"emits sort event when clicked on sortable column header text","suites":["MDCDataTable","Column sorting"],"line":621,"updatePoint":{"line":621,"column":68},"code":"    it('emits sort event when clicked on sortable column header text', () => {\n      const {component, root} = setupTest();\n      const handler = jasmine.createSpy('handleSorted');\n\n      component.listen(events.SORTED, handler);\n      const columnId = 'dessert';\n      const headerCell = root.querySelector<HTMLElement>(\n          `[${dataAttributes.COLUMN_ID}=\"${columnId}\"]`);\n      headerCell!\n          .querySelector<HTMLElement>(\n              `.${cssClasses.HEADER_CELL_LABEL}`)!.click();\n      const matchEventDetail = {\n        columnId,\n        columnIndex: 1,\n        headerCell,\n        sortValue: SortValue.ASCENDING,\n      };\n      expect(handler).toHaveBeenCalledWith(\n          jasmine.objectContaining({detail: matchEventDetail}));\n      component.unlisten(events.SORTED, handler);\n      component.destroy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"does not emit sort event when clicked on non sortable column header","suites":["MDCDataTable","Column sorting"],"line":644,"updatePoint":{"line":644,"column":75},"code":"    it('does not emit sort event when clicked on non sortable column header',\n       () => {\n         const {component, root} = setupTest();\n         const handler = jasmine.createSpy('handleSorted');\n\n         component.listen(events.SORTED, handler);\n\n         const headerCell = root.querySelector<HTMLElement>(\n             `[${dataAttributes.COLUMN_ID}=\"protein\"]`);\n         const testButton = document.createElement('button');\n         headerCell!.appendChild(testButton);\n         testButton.click();\n         expect(handler).not.toHaveBeenCalled();\n         headerCell!.removeChild(testButton);\n         component.unlisten(events.SORTED, handler);\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"does not emit sort event after component is destroyed","suites":["MDCDataTable","Column sorting"],"line":662,"updatePoint":{"line":662,"column":61},"code":"    it('does not emit sort event after component is destroyed', () => {\n      const {component, root} = setupTest();\n      component.destroy();\n      const handler = jasmine.createSpy('handleSorted');\n\n      component.listen(events.SORTED, handler);\n      const columnId = 'dessert';\n      const headerCell = root.querySelector<HTMLElement>(\n          `[${dataAttributes.COLUMN_ID}=\"${columnId}\"]`);\n      headerCell!.querySelector<HTMLElement>(\n                     `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n      expect(handler).not.toHaveBeenCalled();\n      component.unlisten(events.SORTED, handler);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"clicking on header cell when in idle state sorts that column in ascending order by default","suites":["MDCDataTable","Column sorting"],"line":677,"updatePoint":{"line":677,"column":98},"code":"    it('clicking on header cell when in idle state sorts that column in ascending order by default',\n       () => {\n         const {component, root} = setupTest();\n\n         const columnId = 'dessert';\n         const headerCell = root.querySelector<HTMLElement>(\n             `[${dataAttributes.COLUMN_ID}=\"${columnId}\"]`);\n         expect(headerCell!.getAttribute('aria-sort')).toBe(null);\n         headerCell!\n             .querySelector<HTMLElement>(\n                 `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n         expect(headerCell!.getAttribute('aria-sort')).toBe('ascending');\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"clicking on header cell toggles sort status if already sorted","suites":["MDCDataTable","Column sorting"],"line":692,"updatePoint":{"line":692,"column":69},"code":"    it('clicking on header cell toggles sort status if already sorted', () => {\n      const {component, root} = setupTest();\n\n      const columnId = 'dessert';\n      const headerCell = root.querySelector<HTMLElement>(\n          `[${dataAttributes.COLUMN_ID}=\"${columnId}\"]`);\n      const sortButton = headerCell!.querySelector<HTMLElement>(\n          `.${cssClasses.SORT_ICON_BUTTON}`);\n      sortButton!.click();\n      expect(headerCell!.getAttribute('aria-sort')).toBe('ascending');\n\n      sortButton!.click();\n      expect(headerCell!.getAttribute('aria-sort')).toBe('descending');\n      component.destroy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"clicking on header cells deactivates sorting state on other header cells","suites":["MDCDataTable","Column sorting"],"line":708,"updatePoint":{"line":708,"column":80},"code":"    it('clicking on header cells deactivates sorting state on other header cells',\n       () => {\n         const {component, root} = setupTest();\n\n         const dessertHeaderCell = root.querySelector<HTMLElement>(\n             `[${dataAttributes.COLUMN_ID}=\"dessert\"]`);\n         dessertHeaderCell!\n             .querySelector<HTMLElement>(\n                 `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n         expect(dessertHeaderCell!.getAttribute('aria-sort')).toBe('ascending');\n\n         const caloriesHeaderCell = root.querySelector<HTMLElement>(\n             `[${dataAttributes.COLUMN_ID}=\"calories\"]`);\n         caloriesHeaderCell!\n             .querySelector<HTMLElement>(\n                 `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n\n         expect(caloriesHeaderCell!.getAttribute('aria-sort'))\n             .toBe('ascending');\n\n         // Resets previous column sort state.\n         expect(dessertHeaderCell!.getAttribute('aria-sort')).toBe('none');\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"clicking on sortable header cell sets appropriate sort status label that is visually hidden","suites":["MDCDataTable","Column sorting"],"line":733,"updatePoint":{"line":733,"column":99},"code":"    it('clicking on sortable header cell sets appropriate sort status label that is visually hidden',\n       () => {\n         const {component, root} = setupTest();\n\n         const caloriesHeaderCell = root.querySelector<HTMLElement>(\n             `[${dataAttributes.COLUMN_ID}=\"calories\"]`);\n         expect(caloriesHeaderCell!\n                    .querySelector<HTMLElement>(\n                        selectors.SORT_STATUS_LABEL)!.textContent)\n             .toBe('');\n         caloriesHeaderCell!\n             .querySelector<HTMLElement>(\n                 `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n         expect(caloriesHeaderCell!\n                    .querySelector<HTMLElement>(\n                        selectors.SORT_STATUS_LABEL)!.textContent)\n             .toMatch(/ascending/);\n         caloriesHeaderCell!\n             .querySelector<HTMLElement>(\n                 `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n         expect(caloriesHeaderCell!\n                    .querySelector<HTMLElement>(\n                        selectors.SORT_STATUS_LABEL)!.textContent)\n             .toMatch(/descending/);\n\n         // Should reset previous column sort status label.\n         const dessertHeaderCell = root.querySelector<HTMLElement>(\n             `[${dataAttributes.COLUMN_ID}=\"dessert\"]`);\n         dessertHeaderCell!\n             .querySelector<HTMLElement>(\n                 `.${cssClasses.SORT_ICON_BUTTON}`)!.click();\n         expect(caloriesHeaderCell!\n                    .querySelector<HTMLElement>(\n                        selectors.SORT_STATUS_LABEL)!.textContent)\n             .toBe('');\n\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"should not throw error when destroy() is called without row selection","suites":["MDCDataTable","Column sorting"],"line":772,"updatePoint":{"line":772,"column":77},"code":"    it('should not throw error when destroy() is called without row selection',\n       () => {\n         const {component} = setupTest({withoutRowSelection: true});\n         expect(() => {\n           component.destroy();\n         }).not.toThrowError();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Should show progress indicator blocking the content when calling showProgress()","suites":["MDCDataTable","Progress indicator"],"line":782,"updatePoint":{"line":782,"column":87},"code":"    it('Should show progress indicator blocking the content when calling showProgress()',\n       () => {\n         const {component, root} = setupTest();\n\n         const progressIndicator = root.querySelector<HTMLElement>(\n             `.${cssClasses.PROGRESS_INDICATOR}`);\n         expect(progressIndicator!.style.cssText).toBe('');\n\n         component.showProgress();\n         expect(progressIndicator!.style.cssText).toMatch(/(height|top)/);\n         expect(root.classList.contains(cssClasses.IN_PROGRESS)).toBe(true);\n\n         destroyProgress(component, root);\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Should hide progress indicator when hideProgress() called","suites":["MDCDataTable","Progress indicator"],"line":798,"updatePoint":{"line":798,"column":65},"code":"    it('Should hide progress indicator when hideProgress() called', () => {\n      const {component, root} = setupTest();\n\n      component.showProgress();\n      component.hideProgress();\n      expect(root.classList.contains(cssClasses.IN_PROGRESS)).toBe(false);\n\n      destroyProgress(component, root);\n      component.destroy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Should throw error when showProgress() is called without progress indicator element","suites":["MDCDataTable","Progress indicator"],"line":809,"updatePoint":{"line":809,"column":91},"code":"    it('Should throw error when showProgress() is called without progress indicator element',\n       () => {\n         const {component} = setupTest({excludeProgressIndicator: true});\n\n         expect(() => {\n           component.showProgress();\n         }).toThrowError();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"Should throw error when hideProgress() is called without progress indicator element","suites":["MDCDataTable","Progress indicator"],"line":819,"updatePoint":{"line":819,"column":91},"code":"    it('Should throw error when hideProgress() is called without progress indicator element',\n       () => {\n         const {component} = setupTest({excludeProgressIndicator: true});\n\n         expect(() => {\n           component.hideProgress();\n         }).toThrowError();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"default adapter returns a complete adapter implementation","suites":["MDCDataTableFoundation"],"line":30,"updatePoint":{"line":30,"column":63},"code":"  it('default adapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCDataTableFoundation, [\n      'addClass',\n      'addClassAtRowIndex',\n      'getAttributeByHeaderCellIndex',\n      'getHeaderCellCount',\n      'getHeaderCellElements',\n      'getRowCount',\n      'getRowElements',\n      'getRowIdAtIndex',\n      'getRowIndexByChildElement',\n      'getSelectedRowCount',\n      'getTableContainerHeight',\n      'getTableHeaderHeight',\n      'isCheckboxAtRowIndexChecked',\n      'isHeaderRowCheckboxChecked',\n      'isRowsSelectable',\n      'notifyRowClick',\n      'notifyRowSelectionChanged',\n      'notifySelectedAll',\n      'notifySortAction',\n      'notifyUnselectedAll',\n      'registerHeaderRowCheckbox',\n      'registerRowCheckboxes',\n      'removeClass',\n      'removeClassAtRowIndex',\n      'removeClassNameByHeaderCellIndex',\n      'setAttributeAtRowIndex',\n      'setAttributeByHeaderCellIndex',\n      'setClassNameByHeaderCellIndex',\n      'setHeaderRowCheckboxChecked',\n      'setHeaderRowCheckboxIndeterminate',\n      'setProgressIndicatorStyles',\n      'setRowCheckboxCheckedAtIndex',\n      'setSortStatusLabelByHeaderCellIndex',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#layout should register header row checkbox only if table is selectable","suites":["MDCDataTableFoundation"],"line":74,"updatePoint":{"line":74,"column":77},"code":"  it('#layout should register header row checkbox only if table is selectable',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.isRowsSelectable.and.returnValue(true);\n       foundation.layout();\n       expect(mockAdapter.registerHeaderRowCheckbox).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.registerRowCheckboxes).toHaveBeenCalledTimes(1);\n\n       mockAdapter.registerHeaderRowCheckbox.calls.reset();\n       mockAdapter.registerRowCheckboxes.calls.reset();\n\n       mockAdapter.isRowsSelectable.and.returnValue(false);\n       foundation.layout();\n       expect(mockAdapter.registerHeaderRowCheckbox).not.toHaveBeenCalled();\n       expect(mockAdapter.registerRowCheckboxes).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#layout should set header row checkbox checked when all row checkboxes are checked","suites":["MDCDataTableFoundation"],"line":92,"updatePoint":{"line":92,"column":88},"code":"  it('#layout should set header row checkbox checked when all row checkboxes are checked',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.isRowsSelectable.and.returnValue(true);\n       mockAdapter.getSelectedRowCount.and.returnValue(5);\n       mockAdapter.getRowCount.and.returnValue(5);\n\n       foundation.layout();\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledWith(false);\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setHeaderRowCheckboxChecked)\n           .toHaveBeenCalledWith(true);\n       expect(mockAdapter.setHeaderRowCheckboxChecked).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#layout should set header row checkbox unchecked when all row checkboxes are unchecked","suites":["MDCDataTableFoundation"],"line":110,"updatePoint":{"line":110,"column":92},"code":"  it('#layout should set header row checkbox unchecked when all row checkboxes are unchecked',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.isRowsSelectable.and.returnValue(true);\n       mockAdapter.getSelectedRowCount.and.returnValue(0);\n       mockAdapter.getRowCount.and.returnValue(5);\n\n       foundation.layout();\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledWith(false);\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setHeaderRowCheckboxChecked)\n           .toHaveBeenCalledWith(false);\n       expect(mockAdapter.setHeaderRowCheckboxChecked).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#layout should set header row checkbox unchecked when there are no rows","suites":["MDCDataTableFoundation"],"line":128,"updatePoint":{"line":128,"column":77},"code":"  it('#layout should set header row checkbox unchecked when there are no rows',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.isRowsSelectable.and.returnValue(true);\n       mockAdapter.getSelectedRowCount.and.returnValue(0);\n       mockAdapter.getRowCount.and.returnValue(0);\n\n       foundation.layout();\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledWith(false);\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setHeaderRowCheckboxChecked)\n           .toHaveBeenCalledWith(false);\n       expect(mockAdapter.setHeaderRowCheckboxChecked).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#layout should set header row checkbox indeterminate when some of the checkboxes are checked","suites":["MDCDataTableFoundation"],"line":146,"updatePoint":{"line":146,"column":98},"code":"  it('#layout should set header row checkbox indeterminate when some of the checkboxes are checked',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.isRowsSelectable.and.returnValue(true);\n       mockAdapter.getSelectedRowCount.and.returnValue(2);\n       mockAdapter.getRowCount.and.returnValue(5);\n\n       foundation.layout();\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledWith(true);\n       expect(mockAdapter.setHeaderRowCheckboxIndeterminate)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setHeaderRowCheckboxChecked)\n           .toHaveBeenCalledWith(false);\n       expect(mockAdapter.setHeaderRowCheckboxChecked).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#getHeaderCells should return array of header cell elements","suites":["MDCDataTableFoundation"],"line":164,"updatePoint":{"line":164,"column":65},"code":"  it('#getHeaderCells should return array of header cell elements', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.getHeaderCells();\n    expect(mockAdapter.getHeaderCellElements).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#getRows should return array of row elements","suites":["MDCDataTableFoundation"],"line":170,"updatePoint":{"line":170,"column":50},"code":"  it('#getRows should return array of row elements', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.getRows();\n    expect(mockAdapter.getRowElements).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#getRowIds should return array of row ids","suites":["MDCDataTableFoundation"],"line":176,"updatePoint":{"line":176,"column":47},"code":"  it('#getRowIds should return array of row ids', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getRowCount.and.returnValue(5);\n    foundation.getRowIds();\n    expect(mockAdapter.getRowIdAtIndex).toHaveBeenCalledTimes(5);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#setSelectedRowIds Sets the row checkbox checked by id and sets selected class name to row","suites":["MDCDataTableFoundation"],"line":183,"updatePoint":{"line":183,"column":96},"code":"  it('#setSelectedRowIds Sets the row checkbox checked by id and sets selected class name to row',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getRowCount.and.returnValue(5);\n       mockAdapter.getRowIdAtIndex.withArgs(0).and.returnValue('testId-0');\n       mockAdapter.getRowIdAtIndex.withArgs(1).and.returnValue('testId-1');\n       mockAdapter.getRowIdAtIndex.withArgs(2).and.returnValue(null);\n       mockAdapter.getRowIdAtIndex.withArgs(3).and.returnValue('testId-3');\n       mockAdapter.getRowIdAtIndex.withArgs(4).and.returnValue('testId-4');\n\n       foundation.setSelectedRowIds(['testId-1', 'testId-3']);\n\n       const anyIndexMatch = (indexList: number[]) => {\n         return {\n           asymmetricMatch: (compareTo: number) =>\n               indexList.indexOf(compareTo) >= 0,\n           jasmineToString: () =>\n               '<anyIndexMatch: [' + indexList.toString() + ']>',\n         };\n       };\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledWith(anyIndexMatch([1, 3]), true);\n\n       expect(mockAdapter.addClassAtRowIndex)\n           .toHaveBeenCalledWith(\n               anyIndexMatch([1, 3]), cssClasses.ROW_SELECTED);\n\n       expect(mockAdapter.setAttributeAtRowIndex)\n           .toHaveBeenCalledWith(\n               anyIndexMatch([1, 3]), attributes.ARIA_SELECTED, 'true');\n\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledWith(anyIndexMatch([0, 2, 4]), false);\n\n       expect(mockAdapter.removeClassAtRowIndex)\n           .toHaveBeenCalledWith(\n               anyIndexMatch([0, 2, 4]), cssClasses.ROW_SELECTED);\n\n       expect(mockAdapter.setAttributeAtRowIndex)\n           .toHaveBeenCalledWith(\n               anyIndexMatch([0, 2, 4]), attributes.ARIA_SELECTED, 'false');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#setSelectedRowIds when empty unchecks all row checkboxes and unchecks header row checkbox","suites":["MDCDataTableFoundation"],"line":227,"updatePoint":{"line":227,"column":96},"code":"  it('#setSelectedRowIds when empty unchecks all row checkboxes and unchecks header row checkbox',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getRowCount.and.returnValue(5);\n       mockAdapter.getSelectedRowCount.and.returnValue(0);\n\n       foundation.setSelectedRowIds([]);\n\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledWith(jasmine.any(Number), false);\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledTimes(5);\n       expect(mockAdapter.setHeaderRowCheckboxChecked)\n           .toHaveBeenCalledWith(false);\n       expect(mockAdapter.setHeaderRowCheckboxChecked).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#getSelectedRowIds Returns selected row ids","suites":["MDCDataTableFoundation"],"line":245,"updatePoint":{"line":245,"column":49},"code":"  it('#getSelectedRowIds Returns selected row ids', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    mockAdapter.getRowCount.and.returnValue(3);\n    mockAdapter.isCheckboxAtRowIndexChecked.withArgs(jasmine.any(Number))\n        .and.returnValue(true);\n    mockAdapter.getRowIdAtIndex.withArgs(0).and.returnValue('testRowId0');\n    mockAdapter.getRowIdAtIndex.withArgs(1).and.returnValue('testRowId1');\n    mockAdapter.getRowIdAtIndex.withArgs(2).and.returnValue('testRowId2');\n\n    expect(foundation.getSelectedRowIds()).toEqual([\n      'testRowId0', 'testRowId1', 'testRowId2'\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleHeaderRowCheckboxChange checks all row checkboxes when it is checked and notifies","suites":["MDCDataTableFoundation"],"line":260,"updatePoint":{"line":260,"column":94},"code":"  it('#handleHeaderRowCheckboxChange checks all row checkboxes when it is checked and notifies',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.isHeaderRowCheckboxChecked.and.returnValue(true);\n       mockAdapter.getRowCount.and.returnValue(5);\n\n       foundation.handleHeaderRowCheckboxChange();\n\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledWith(jasmine.any(Number), true);\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledTimes(5);\n       expect(mockAdapter.notifySelectedAll).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleHeaderRowCheckboxChange unchecks all row checkboxes when it is unchecked and notifies","suites":["MDCDataTableFoundation"],"line":276,"updatePoint":{"line":276,"column":98},"code":"  it('#handleHeaderRowCheckboxChange unchecks all row checkboxes when it is unchecked and notifies',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.isHeaderRowCheckboxChecked.and.returnValue(false);\n       mockAdapter.getRowCount.and.returnValue(5);\n\n       foundation.handleHeaderRowCheckboxChange();\n\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledWith(jasmine.any(Number), false);\n       expect(mockAdapter.setRowCheckboxCheckedAtIndex)\n           .toHaveBeenCalledTimes(5);\n       expect(mockAdapter.notifyUnselectedAll).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleRowClick should notify","suites":["MDCDataTableFoundation"],"line":292,"updatePoint":{"line":292,"column":35},"code":"  it('#handleRowClick should notify', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    const mockDataRowEl = document.createElement('tr');\n    foundation.handleRowClick({\n      rowId: '1231',\n      row: mockDataRowEl,\n      altKey: true,\n      ctrlKey: false,\n      metaKey: true,\n      shiftKey: false\n    });\n    expect(mockAdapter.notifyRowClick).toHaveBeenCalledWith({\n      rowId: '1231',\n      row: mockDataRowEl,\n      altKey: true,\n      ctrlKey: false,\n      metaKey: true,\n      shiftKey: false\n    });\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleRowCheckboxChange does not do anything when target row is not found","suites":["MDCDataTableFoundation"],"line":314,"updatePoint":{"line":314,"column":80},"code":"  it('#handleRowCheckboxChange does not do anything when target row is not found',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getRowIndexByChildElement.withArgs(jasmine.anything())\n           .and.returnValue(-1);\n       foundation.handleRowCheckboxChange({} as Event);\n\n       expect(mockAdapter.notifyRowSelectionChanged).not.toHaveBeenCalledWith();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleRowCheckboxChange does not do anything when target element (native checkbox) is not found","suites":["MDCDataTableFoundation"],"line":325,"updatePoint":{"line":325,"column":102},"code":"  it('#handleRowCheckboxChange does not do anything when target element (native checkbox) is not found',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getRowIndexByChildElement\n           .withArgs(jasmine.any(HTMLInputElement))\n           .and.returnValue(2);\n\n       foundation.handleRowCheckboxChange({} as Event);\n\n       expect(mockAdapter.notifyRowSelectionChanged).not.toHaveBeenCalledWith();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleRowCheckboxChange selects row when row checkbox is checked and notifies","suites":["MDCDataTableFoundation"],"line":338,"updatePoint":{"line":338,"column":84},"code":"  it('#handleRowCheckboxChange selects row when row checkbox is checked and notifies',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getRowIndexByChildElement.withArgs(jasmine.anything())\n           .and.returnValue(2);\n       mockAdapter.isCheckboxAtRowIndexChecked.withArgs(2).and.returnValue(\n           true);\n       mockAdapter.getRowIdAtIndex.withArgs(2).and.returnValue('testRowId-u2');\n\n       foundation.handleRowCheckboxChange(\n           {target: {checked: true}} as unknown as Event);\n\n       expect(mockAdapter.addClassAtRowIndex)\n           .toHaveBeenCalledWith(2, cssClasses.ROW_SELECTED);\n       expect(mockAdapter.setAttributeAtRowIndex)\n           .toHaveBeenCalledWith(2, strings.ARIA_SELECTED, 'true');\n\n       expect(mockAdapter.notifyRowSelectionChanged).toHaveBeenCalledWith({\n         rowId: 'testRowId-u2',\n         rowIndex: 2,\n         selected: true,\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleRowCheckboxChange unselects row when row checkbox is unchecked and notifies","suites":["MDCDataTableFoundation"],"line":363,"updatePoint":{"line":363,"column":88},"code":"  it('#handleRowCheckboxChange unselects row when row checkbox is unchecked and notifies',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getRowIndexByChildElement.withArgs(jasmine.anything())\n           .and.returnValue(2);\n       mockAdapter.isCheckboxAtRowIndexChecked.withArgs(2).and.returnValue(\n           false);\n       mockAdapter.getRowIdAtIndex.withArgs(2).and.returnValue('testRowId-u2');\n\n       foundation.handleRowCheckboxChange(\n           {target: {checked: false}} as unknown as Event);\n\n       expect(mockAdapter.removeClassAtRowIndex)\n           .toHaveBeenCalledWith(2, cssClasses.ROW_SELECTED);\n       expect(mockAdapter.setAttributeAtRowIndex)\n           .toHaveBeenCalledWith(2, strings.ARIA_SELECTED, 'false');\n\n       expect(mockAdapter.notifyRowSelectionChanged).toHaveBeenCalledWith({\n         rowId: 'testRowId-u2',\n         rowIndex: 2,\n         selected: false,\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleSortAction Sets header cell in ascending sorted state by default on sort action","suites":["MDCDataTableFoundation","Column sorting"],"line":389,"updatePoint":{"line":389,"column":94},"code":"    it('#handleSortAction Sets header cell in ascending sorted state by default on sort action',\n       () => {\n         const {foundation, mockAdapter} = setupTest();\n         mockAdapter.getAttributeByHeaderCellIndex\n             .withArgs(2, attributes.ARIA_SORT)\n             .and.returnValue(null);\n         mockAdapter.getHeaderCellCount.and.returnValue(5);\n\n         const mockHeaderCell = document.createElement('div');\n         foundation.handleSortAction({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n         });\n\n         expect(mockAdapter.setClassNameByHeaderCellIndex)\n             .toHaveBeenCalledWith(2, cssClasses.HEADER_CELL_SORTED);\n         expect(mockAdapter.setAttributeByHeaderCellIndex)\n             .toHaveBeenCalledWith(\n                 2, attributes.ARIA_SORT, SortValue.ASCENDING);\n         expect(mockAdapter.notifySortAction).toHaveBeenCalledWith({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n           sortValue: SortValue.ASCENDING,\n         });\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleSortAction Sets header cell in descending sorted state when currently sorted in ascending order on sort action","suites":["MDCDataTableFoundation","Column sorting"],"line":417,"updatePoint":{"line":417,"column":125},"code":"    it('#handleSortAction Sets header cell in descending sorted state when currently sorted in ascending order on sort action',\n       () => {\n         const {foundation, mockAdapter} = setupTest();\n         mockAdapter.getAttributeByHeaderCellIndex\n             .withArgs(2, attributes.ARIA_SORT)\n             .and.returnValue(SortValue.ASCENDING);\n         mockAdapter.getHeaderCellCount.and.returnValue(5);\n\n         const mockHeaderCell = document.createElement('div');\n         foundation.handleSortAction({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n         });\n\n         expect(mockAdapter.setClassNameByHeaderCellIndex)\n             .toHaveBeenCalledWith(2, cssClasses.HEADER_CELL_SORTED);\n         expect(mockAdapter.setAttributeByHeaderCellIndex)\n             .toHaveBeenCalledWith(\n                 2, attributes.ARIA_SORT, SortValue.DESCENDING);\n         expect(mockAdapter.setClassNameByHeaderCellIndex)\n             .toHaveBeenCalledWith(2, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n         expect(mockAdapter.notifySortAction).toHaveBeenCalledWith({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n           sortValue: SortValue.DESCENDING,\n         });\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleSortAction Sets header cell in ascending sorted state when currently sorted in descending order on sort action","suites":["MDCDataTableFoundation","Column sorting"],"line":447,"updatePoint":{"line":447,"column":125},"code":"    it('#handleSortAction Sets header cell in ascending sorted state when currently sorted in descending order on sort action',\n       () => {\n         const {foundation, mockAdapter} = setupTest();\n         mockAdapter.getAttributeByHeaderCellIndex\n             .withArgs(2, attributes.ARIA_SORT)\n             .and.returnValue(SortValue.DESCENDING);\n         mockAdapter.getHeaderCellCount.and.returnValue(5);\n\n         const mockHeaderCell = document.createElement('div');\n         foundation.handleSortAction({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n         });\n\n         expect(mockAdapter.setClassNameByHeaderCellIndex)\n             .toHaveBeenCalledWith(2, cssClasses.HEADER_CELL_SORTED);\n         expect(mockAdapter.setAttributeByHeaderCellIndex)\n             .toHaveBeenCalledWith(\n                 2, attributes.ARIA_SORT, SortValue.ASCENDING);\n         expect(mockAdapter.removeClassNameByHeaderCellIndex)\n             .toHaveBeenCalledWith(2, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n         expect(mockAdapter.notifySortAction).toHaveBeenCalledWith({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n           sortValue: SortValue.ASCENDING,\n         });\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleSortAction Resets sort states of other header cells when sorted on target header cell","suites":["MDCDataTableFoundation","Column sorting"],"line":477,"updatePoint":{"line":477,"column":100},"code":"    it('#handleSortAction Resets sort states of other header cells when sorted on target header cell',\n       () => {\n         const {foundation, mockAdapter} = setupTest();\n         mockAdapter.getAttributeByHeaderCellIndex\n             .withArgs(2, attributes.ARIA_SORT)\n             .and.returnValue(null);\n         mockAdapter.getHeaderCellCount.and.returnValue(5);\n\n         const mockHeaderCell = document.createElement('div');\n         foundation.handleSortAction({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n         });\n\n         expect(mockAdapter.removeClassNameByHeaderCellIndex)\n             .toHaveBeenCalledWith(\n                 jasmine.any(Number), cssClasses.HEADER_CELL_SORTED);\n         expect(mockAdapter.removeClassNameByHeaderCellIndex)\n             .toHaveBeenCalledWith(\n                 jasmine.any(Number), cssClasses.HEADER_CELL_SORTED_DESCENDING);\n         expect(mockAdapter.setAttributeByHeaderCellIndex)\n             .toHaveBeenCalledWith(\n                 jasmine.any(Number), attributes.ARIA_SORT, SortValue.NONE);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#handleSortAction Activating sort sets appropriate sort status label that is visually hidden","suites":["MDCDataTableFoundation","Column sorting"],"line":503,"updatePoint":{"line":503,"column":100},"code":"    it('#handleSortAction Activating sort sets appropriate sort status label that is visually hidden',\n       () => {\n         const {foundation, mockAdapter} = setupTest();\n         mockAdapter.getAttributeByHeaderCellIndex\n             .withArgs(2, attributes.ARIA_SORT)\n             .and.returnValue(null);\n         mockAdapter.getHeaderCellCount.and.returnValue(5);\n\n         const mockHeaderCell = document.createElement('div');\n         foundation.handleSortAction({\n           columnId: 'testColId-u2',\n           columnIndex: 2,\n           headerCell: mockHeaderCell,\n         });\n\n         expect(mockAdapter.setSortStatusLabelByHeaderCellIndex)\n             .toHaveBeenCalledWith(2, SortValue.ASCENDING);\n\n         // Should reset sort label on other columns.\n         expect(mockAdapter.setSortStatusLabelByHeaderCellIndex)\n             .toHaveBeenCalledWith(jasmine.any(Number), SortValue.NONE);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#showProgress Adds class name that makes the progress indicator visibile","suites":["MDCDataTableFoundation","Column sorting"],"line":527,"updatePoint":{"line":527,"column":78},"code":"  it('#showProgress Adds class name that makes the progress indicator visibile',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getTableHeaderHeight.and.returnValue(20);\n       mockAdapter.getTableContainerHeight.and.returnValue(100);\n\n       foundation.showProgress();\n\n       expect(mockAdapter.setProgressIndicatorStyles)\n           .toHaveBeenCalledWith({height: '80px', top: '20px'});\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(cssClasses.IN_PROGRESS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"#hideProgress Removes class name that makes progress indicator hidden","suites":["MDCDataTableFoundation","Column sorting"],"line":541,"updatePoint":{"line":541,"column":75},"code":"  it('#hideProgress Removes class name that makes progress indicator hidden',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.hideProgress();\n\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.IN_PROGRESS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-data-table/test"},{"name":"attachTo returns a component instance","suites":["MDCDialog"],"line":109,"updatePoint":{"line":109,"column":43},"code":"  it('attachTo returns a component instance', () => {\n    expect(MDCDialog.attachTo(\n               getFixture().querySelector('.mdc-dialog') as HTMLElement))\n        .toEqual(jasmine.any(MDCDialog));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"attachTo throws an error when container element is missing","suites":["MDCDialog"],"line":115,"updatePoint":{"line":115,"column":64},"code":"  it('attachTo throws an error when container element is missing', () => {\n    const fixture = getFixture();\n    const container =\n        fixture.querySelector('.mdc-dialog__container') as HTMLElement;\n    container.parentElement!.removeChild(container);\n    expect(\n        () => MDCDialog.attachTo(\n            fixture.querySelector('.mdc-dialog') as HTMLElement))\n        .toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#initialSyncWithDOM registers click handler on the root element","suites":["MDCDialog"],"line":126,"updatePoint":{"line":126,"column":69},"code":"  it('#initialSyncWithDOM registers click handler on the root element', () => {\n    const {root, component, mockFoundation} = setupTestWithMocks();\n    emitEvent(root, 'click');\n    expect(mockFoundation.handleClick).toHaveBeenCalledWith(jasmine.any(Event));\n    expect(mockFoundation.handleClick).toHaveBeenCalledTimes(1);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#initialSyncWithDOM registers keydown handler on the root element","suites":["MDCDialog"],"line":134,"updatePoint":{"line":134,"column":71},"code":"  it('#initialSyncWithDOM registers keydown handler on the root element',\n     () => {\n       const {root, component, mockFoundation} = setupTestWithMocks();\n       emitEvent(root, 'keydown');\n       expect(mockFoundation.handleKeydown)\n           .toHaveBeenCalledWith(jasmine.any(Event));\n       expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n       component.destroy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#destroy deregisters click handler on the root element","suites":["MDCDialog"],"line":144,"updatePoint":{"line":144,"column":60},"code":"  it('#destroy deregisters click handler on the root element', () => {\n    const {root, component, mockFoundation} = setupTestWithMocks();\n    component.destroy();\n    emitEvent(root, 'click');\n    expect(mockFoundation.handleClick)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#destroy deregisters keydown handler on the root element","suites":["MDCDialog"],"line":152,"updatePoint":{"line":152,"column":62},"code":"  it('#destroy deregisters keydown handler on the root element', () => {\n    const {root, component, mockFoundation} = setupTestWithMocks();\n    component.destroy();\n    emitEvent(root, 'keydown');\n    expect(mockFoundation.handleKeydown)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":" registers document keydown handler and  deregisters it","suites":["MDCDialog"],"line":160,"updatePoint":{"line":161,"column":46},"code":"  it(`${strings.OPENING_EVENT} registers document keydown handler and ${\n         strings.CLOSING_EVENT} deregisters it`,\n     () => {\n       const {root, mockFoundation} = setupTestWithMocks();\n       emitEvent(root, strings.OPENING_EVENT);\n       emitEvent(document, 'keydown');\n       expect(mockFoundation.handleDocumentKeydown)\n           .toHaveBeenCalledWith(jasmine.any(Event));\n       expect(mockFoundation.handleDocumentKeydown).toHaveBeenCalledTimes(1);\n\n       emitEvent(root, strings.CLOSING_EVENT);\n       emitEvent(document, 'keydown');\n       expect(mockFoundation.handleDocumentKeydown)\n           .toHaveBeenCalledWith(jasmine.any(Event));\n       expect(mockFoundation.handleDocumentKeydown).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#initialize attaches ripple elements to all footer buttons","suites":["MDCDialog"],"line":177,"updatePoint":{"line":177,"column":64},"code":"  it('#initialize attaches ripple elements to all footer buttons', function() {\n    if (!supportsCssVariables(window, true)) {\n      return;\n    }\n\n    const {yesButton, noButton, cancelButton} = setupTest();\n    jasmine.clock().tick(1);\n\n    expect(yesButton.classList.contains('mdc-ripple-upgraded')).toBe(true);\n    expect(noButton.classList.contains('mdc-ripple-upgraded')).toBe(true);\n    expect(cancelButton.classList.contains('mdc-ripple-upgraded')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#destroy cleans up all ripples on footer buttons","suites":["MDCDialog"],"line":190,"updatePoint":{"line":190,"column":54},"code":"  it('#destroy cleans up all ripples on footer buttons', function() {\n    if (!supportsCssVariables(window, true)) {\n      return;\n    }\n\n    const {component, yesButton, noButton, cancelButton} = setupTest();\n    jasmine.clock().tick(1);\n\n    component.destroy();\n    jasmine.clock().tick(1);\n\n    expect(yesButton.classList.contains('mdc-ripple-upgraded')).toBe(false);\n    expect(noButton.classList.contains('mdc-ripple-upgraded')).toBe(false);\n    expect(cancelButton.classList.contains('mdc-ripple-upgraded')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open forwards to MDCDialogFoundation#open","suites":["MDCDialog"],"line":206,"updatePoint":{"line":206,"column":48},"code":"  it('#open forwards to MDCDialogFoundation#open', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n\n    component.open();\n    expect(mockFoundation.open).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close forwards to MDCDialogFoundation#close","suites":["MDCDialog"],"line":213,"updatePoint":{"line":213,"column":50},"code":"  it('#close forwards to MDCDialogFoundation#close', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n    const action = 'action';\n\n    component.close(action);\n    expect(mockFoundation.close).toHaveBeenCalledWith(action);\n\n    component.close();\n    expect(mockFoundation.close).toHaveBeenCalledWith('');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"get isOpen forwards to MDCDialogFoundation#isOpen","suites":["MDCDialog"],"line":224,"updatePoint":{"line":224,"column":55},"code":"  it('get isOpen forwards to MDCDialogFoundation#isOpen', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n\n    component.isOpen;\n    expect(mockFoundation.isOpen).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"get escapeKeyAction forwards to MDCDialogFoundation#getEscapeKeyAction","suites":["MDCDialog"],"line":231,"updatePoint":{"line":231,"column":76},"code":"  it('get escapeKeyAction forwards to MDCDialogFoundation#getEscapeKeyAction',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.escapeKeyAction;\n       expect(mockFoundation.getEscapeKeyAction).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"set escapeKeyAction forwards to MDCDialogFoundation#setEscapeKeyAction","suites":["MDCDialog"],"line":239,"updatePoint":{"line":239,"column":76},"code":"  it('set escapeKeyAction forwards to MDCDialogFoundation#setEscapeKeyAction',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.escapeKeyAction = 'action';\n       expect(mockFoundation.setEscapeKeyAction).toHaveBeenCalledWith('action');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"get scrimClickAction forwards to MDCDialogFoundation#getScrimClickAction","suites":["MDCDialog"],"line":247,"updatePoint":{"line":247,"column":78},"code":"  it('get scrimClickAction forwards to MDCDialogFoundation#getScrimClickAction',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.scrimClickAction;\n       expect(mockFoundation.getScrimClickAction).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"set scrimClickAction forwards to MDCDialogFoundation#setScrimClickAction","suites":["MDCDialog"],"line":255,"updatePoint":{"line":255,"column":78},"code":"  it('set scrimClickAction forwards to MDCDialogFoundation#setScrimClickAction',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.scrimClickAction = 'action';\n       expect(mockFoundation.setScrimClickAction)\n           .toHaveBeenCalledWith('action');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"get autoStackButtons forwards to MDCDialogFoundation#getAutoStackButtons","suites":["MDCDialog"],"line":264,"updatePoint":{"line":264,"column":78},"code":"  it('get autoStackButtons forwards to MDCDialogFoundation#getAutoStackButtons',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.autoStackButtons;\n       expect(mockFoundation.getAutoStackButtons).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"set autoStackButtons forwards to MDCDialogFoundation#setAutoStackButtons","suites":["MDCDialog"],"line":272,"updatePoint":{"line":272,"column":78},"code":"  it('set autoStackButtons forwards to MDCDialogFoundation#setAutoStackButtons',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.autoStackButtons = false;\n       expect(mockFoundation.setAutoStackButtons).toHaveBeenCalledWith(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"autoStackButtons adds scrollable class","suites":["MDCDialog"],"line":280,"updatePoint":{"line":280,"column":44},"code":"  it('autoStackButtons adds scrollable class', () => {\n    const fixture = getFixture();\n    const root = fixture.querySelector('.mdc-dialog') as HTMLElement;\n    const content = root.querySelector('.mdc-dialog__content') as HTMLElement;\n\n    // Simulate a scrollable content area\n    content.innerHTML = new Array(100).join(`<p>${content.textContent}</p>`);\n    content.style.height = '50px';\n    content.style.overflow = 'auto';\n\n    document.body.appendChild(fixture);\n\n    try {\n      const component = new MDCDialog(root);\n      component.autoStackButtons = false;\n      component.open();\n      jasmine.clock().tick(1);\n      jasmine.clock().tick(1);\n\n      expect(root.classList.contains('mdc-dialog--scrollable')).toBe(true);\n    } finally {\n      document.body.removeChild(fixture);\n    }\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCDialog"],"line":305,"updatePoint":{"line":305,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#removeClass removes a class from the root element","suites":["MDCDialog"],"line":311,"updatePoint":{"line":311,"column":63},"code":"  it('adapter#removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#hasClass returns whether a class exists on the root element","suites":["MDCDialog"],"line":318,"updatePoint":{"line":318,"column":73},"code":"  it('adapter#hasClass returns whether a class exists on the root element',\n     () => {\n       const {root, component} = setupTest();\n       root.classList.add('foo');\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasClass('foo'))\n           .toBe(true);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.hasClass('does-not-exist'))\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#addBodyClass adds a class to the body","suites":["MDCDialog"],"line":330,"updatePoint":{"line":330,"column":51},"code":"  it('adapter#addBodyClass adds a class to the body', () => {\n    const {component} = setupTest();\n    (component.getDefaultFoundation() as any)\n        .adapter.addBodyClass('mdc-dialog--scroll-lock');\n    expect((document.querySelector('body') as HTMLElement)\n               .classList.contains('mdc-dialog--scroll-lock'))\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#removeBodyClass removes a class from the body","suites":["MDCDialog"],"line":339,"updatePoint":{"line":339,"column":59},"code":"  it('adapter#removeBodyClass removes a class from the body', () => {\n    const {component} = setupTest();\n    const body = document.querySelector('body') as HTMLElement;\n\n    body.classList.add('mdc-dialog--scroll-lock');\n    (component.getDefaultFoundation() as any)\n        .adapter.removeBodyClass('mdc-dialog--scroll-lock');\n    expect(body.classList.contains('mdc-dialog--scroll-lock')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#eventTargetMatches returns whether or not the target matches the selector","suites":["MDCDialog"],"line":349,"updatePoint":{"line":349,"column":87},"code":"  it('adapter#eventTargetMatches returns whether or not the target matches the selector',\n     () => {\n       const {component} = setupTest();\n       const target = document.createElement('div');\n       target.classList.add('existent-class');\n       const {adapter: adapter} = component.getDefaultFoundation() as any;\n\n       expect(adapter.eventTargetMatches(target, '.existent-class')).toBe(true);\n       expect(adapter.eventTargetMatches(target, '.non-existent-class'))\n           .toBe(false);\n       expect(adapter.eventTargetMatches(null, '.existent-class')).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#notifyOpening emits ","suites":["MDCDialog"],"line":362,"updatePoint":{"line":362,"column":58},"code":"  it(`adapter#notifyOpening emits ${strings.OPENING_EVENT}`, () => {\n    const {component} = setupTest();\n\n    const handler = jasmine.createSpy('notifyOpeningHandler');\n\n    component.listen(strings.OPENING_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyOpening();\n    component.unlisten(strings.OPENING_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#notifyOpened emits ","suites":["MDCDialog"],"line":374,"updatePoint":{"line":374,"column":56},"code":"  it(`adapter#notifyOpened emits ${strings.OPENED_EVENT}`, () => {\n    const {component} = setupTest();\n\n    const handler = jasmine.createSpy('notifyOpenedHandler');\n\n    component.listen(strings.OPENED_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyOpened();\n    component.unlisten(strings.OPENED_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#notifyClosing emits  without action if passed action is empty string","suites":["MDCDialog"],"line":386,"updatePoint":{"line":388,"column":76},"code":"  it(`adapter#notifyClosing emits ${\n         strings\n             .CLOSING_EVENT} without action if passed action is empty string`,\n     () => {\n       const {component} = setupTest();\n\n       const handler = jasmine.createSpy('notifyClosingHandler');\n\n       component.listen(strings.CLOSING_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyClosing('');\n       component.unlisten(strings.CLOSING_EVENT, handler);\n\n       expect(handler).toHaveBeenCalledWith(\n           jasmine.objectContaining({detail: {}}));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#notifyClosing emits  with action","suites":["MDCDialog"],"line":402,"updatePoint":{"line":402,"column":70},"code":"  it(`adapter#notifyClosing emits ${strings.CLOSING_EVENT} with action`, () => {\n    const {component} = setupTest();\n    const action = 'action';\n\n    const handler = jasmine.createSpy('notifyClosingHandler');\n\n    component.listen(strings.CLOSING_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyClosing(action);\n    component.unlisten(strings.CLOSING_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(\n        jasmine.objectContaining({detail: {action}}));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#notifyClosed emits  without action if passed action is empty string","suites":["MDCDialog"],"line":416,"updatePoint":{"line":417,"column":78},"code":"  it(`adapter#notifyClosed emits ${\n         strings.CLOSED_EVENT} without action if passed action is empty string`,\n     () => {\n       const {component} = setupTest();\n\n       const handler = jasmine.createSpy('notifyClosedHandler');\n\n       component.listen(strings.CLOSED_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyClosed('');\n       component.unlisten(strings.CLOSED_EVENT, handler);\n\n       expect(handler).toHaveBeenCalledWith(\n           jasmine.objectContaining({detail: {}}));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#notifyClosed emits  with action","suites":["MDCDialog"],"line":431,"updatePoint":{"line":431,"column":68},"code":"  it(`adapter#notifyClosed emits ${strings.CLOSED_EVENT} with action`, () => {\n    const {component} = setupTest();\n    const action = 'action';\n\n    const handler = jasmine.createSpy('notifyClosedHandler');\n\n    component.listen(strings.CLOSED_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyClosed(action);\n    component.unlisten(strings.CLOSED_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(\n        jasmine.objectContaining({detail: {action}}));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#trapFocus calls trapFocus() on a properly configured focus trap instance","suites":["MDCDialog"],"line":445,"updatePoint":{"line":445,"column":86},"code":"  it('adapter#trapFocus calls trapFocus() on a properly configured focus trap instance',\n     () => {\n       const {component, mockFocusTrapInstance} = setupTestWithMocks();\n       component.initialize();\n       (component.getDefaultFoundation() as any).adapter.trapFocus();\n\n       expect(mockFocusTrapInstance.trapFocus).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#releaseFocus calls releaseFocus() on a properly configured focus trap instance","suites":["MDCDialog"],"line":454,"updatePoint":{"line":454,"column":92},"code":"  it('adapter#releaseFocus calls releaseFocus() on a properly configured focus trap instance',\n     () => {\n       const {component, mockFocusTrapInstance} = setupTestWithMocks();\n       component.initialize();\n       (component.getDefaultFoundation() as any).adapter.releaseFocus();\n\n       expect(mockFocusTrapInstance.releaseFocus).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#isContentScrollable returns false when there is no content element","suites":["MDCDialog"],"line":463,"updatePoint":{"line":463,"column":80},"code":"  it('adapter#isContentScrollable returns false when there is no content element',\n     () => {\n       const {component, content} = setupTest();\n       content.parentElement!.removeChild(content);\n       const isContentScrollable = (component.getDefaultFoundation() as any)\n                                       .adapter.isContentScrollable();\n       expect(isContentScrollable).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#isContentScrollable returns result of util.isScrollable","suites":["MDCDialog"],"line":472,"updatePoint":{"line":472,"column":69},"code":"  it('adapter#isContentScrollable returns result of util.isScrollable', () => {\n    const {component, content} = setupTest();\n    expect((component.getDefaultFoundation() as any)\n               .adapter.isContentScrollable())\n        .toBe(util.isScrollable(content));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#areButtonsStacked returns result of util.areTopsMisaligned","suites":["MDCDialog"],"line":479,"updatePoint":{"line":479,"column":72},"code":"  it('adapter#areButtonsStacked returns result of util.areTopsMisaligned',\n     () => {\n       const {component, yesButton, noButton, cancelButton} = setupTest();\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.areButtonsStacked())\n           .toBe(util.areTopsMisaligned([yesButton, noButton, cancelButton]));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#getActionFromEvent returns an empty string when no event target is present","suites":["MDCDialog"],"line":487,"updatePoint":{"line":487,"column":88},"code":"  it('adapter#getActionFromEvent returns an empty string when no event target is present',\n     () => {\n       const {component} = setupTest();\n       const action = (component.getDefaultFoundation() as any)\n                          .adapter.getActionFromEvent({});\n       expect(action).toEqual('');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#getActionFromEvent returns attribute value on event target","suites":["MDCDialog"],"line":495,"updatePoint":{"line":495,"column":72},"code":"  it('adapter#getActionFromEvent returns attribute value on event target',\n     () => {\n       const {component, yesButton} = setupTest();\n       const action = (component.getDefaultFoundation() as any)\n                          .adapter.getActionFromEvent({target: yesButton});\n       expect(action).toEqual('yes');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#getActionFromEvent returns attribute value on parent of event target","suites":["MDCDialog"],"line":503,"updatePoint":{"line":503,"column":82},"code":"  it('adapter#getActionFromEvent returns attribute value on parent of event target',\n     () => {\n       const {component, yesButton} = setupTest();\n       const childEl = document.createElement('span');\n       yesButton.appendChild(childEl);\n       const action = (component.getDefaultFoundation() as any)\n                          .adapter.getActionFromEvent({target: childEl});\n       expect(action).toEqual('yes');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#getActionFromEvent returns null when attribute is not present","suites":["MDCDialog"],"line":513,"updatePoint":{"line":513,"column":75},"code":"  it('adapter#getActionFromEvent returns null when attribute is not present',\n     () => {\n       const {component, title} = setupTest();\n       const action = (component.getDefaultFoundation() as any)\n                          .adapter.getActionFromEvent({target: title});\n       expect(action).toBe(null);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#clickDefaultButton invokes click() on button matching ","suites":["MDCDialog"],"line":521,"updatePoint":{"line":522,"column":42},"code":"  it(`adapter#clickDefaultButton invokes click() on button matching ${\n         strings.BUTTON_DEFAULT_ATTRIBUTE}`,\n     () => {\n       const fixture = getFixture();\n       const yesButton = fixture.querySelector(\n                             '[data-mdc-dialog-action=\"yes\"]') as HTMLElement;\n       yesButton.setAttribute(strings.BUTTON_DEFAULT_ATTRIBUTE, 'true');\n\n       const {component} = setupTest(fixture);\n       yesButton.click = jasmine.createSpy('click');\n\n       (component.getDefaultFoundation() as any).adapter.clickDefaultButton();\n       expect(yesButton.click).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#clickDefaultButton does nothing if nothing matches ","suites":["MDCDialog"],"line":536,"updatePoint":{"line":537,"column":42},"code":"  it(`adapter#clickDefaultButton does nothing if nothing matches ${\n         strings.BUTTON_DEFAULT_ATTRIBUTE}`,\n     () => {\n       const {component, yesButton, noButton} = setupTest();\n       yesButton.click = jasmine.createSpy('click');\n       noButton.click = jasmine.createSpy('click');\n\n       expect(\n           () => (component.getDefaultFoundation() as any)\n                     .adapter.clickDefaultButton)\n           .not.toThrow();\n       expect(yesButton.click).not.toHaveBeenCalled();\n       expect(noButton.click).not.toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"adapter#reverseButtons reverses the order of children under the actions element","suites":["MDCDialog"],"line":551,"updatePoint":{"line":551,"column":85},"code":"  it('adapter#reverseButtons reverses the order of children under the actions element',\n     () => {\n       const {component, actions, yesButton, noButton, cancelButton} =\n           setupTest();\n       (component.getDefaultFoundation() as any).adapter.reverseButtons();\n       expect([\n         yesButton, noButton, cancelButton\n       ]).toEqual([].slice.call(actions.children));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#layout proxies to foundation","suites":["MDCDialog"],"line":561,"updatePoint":{"line":561,"column":35},"code":"  it('#layout proxies to foundation', () => {\n    const {component} = setupTest();\n    (component as any).foundation.layout =\n        jasmine.createSpy('component.foundation.layout');\n    component.layout();\n    expect((component as any).foundation.layout).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"Button with  will be focused when the dialog is opened, with multiple initial focus buttons in DOM","suites":["MDCDialog"],"line":569,"updatePoint":{"line":569,"column":138},"code":"  it(`Button with ${strings.INITIAL_FOCUS_ATTRIBUTE} will be focused when the dialog is opened, with multiple initial focus buttons in DOM`, () => {\n    const {root: root1, component: component1, yesButton: yesButton1} = setupTest();\n    const {root: root2, component: component2, yesButton: yesButton2} = setupTest();\n\n    expect(yesButton1.hasAttribute(strings.INITIAL_FOCUS_ATTRIBUTE)).toBe(true);\n    expect(yesButton2.hasAttribute(strings.INITIAL_FOCUS_ATTRIBUTE)).toBe(true);\n\n    try {\n      document.body.appendChild(root1)\n      document.body.appendChild(root2)\n\n      component1.open()\n      jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS + 10);\n      expect(document.activeElement).toEqual(yesButton1);\n      component1.close()\n      jasmine.clock().tick(numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);\n\n      component2.open()\n      jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS + 10);\n      expect(document.activeElement).toEqual(yesButton2);\n      component2.close()\n      jasmine.clock().tick(numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);\n    } finally {\n      document.body.removeChild(root1)\n      document.body.removeChild(root2)\n    }\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"exports cssClasses","suites":["MDCDialogFoundation"],"line":37,"updatePoint":{"line":37,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCDialogFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"exports strings","suites":["MDCDialogFoundation"],"line":41,"updatePoint":{"line":41,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCDialogFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"exports numbers","suites":["MDCDialogFoundation"],"line":45,"updatePoint":{"line":45,"column":21},"code":"  it('exports numbers', () => {\n    expect(MDCDialogFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"default adapter returns a complete adapter implementation","suites":["MDCDialogFoundation"],"line":49,"updatePoint":{"line":49,"column":63},"code":"  it('default adapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCDialogFoundation, [\n      'addClass',\n      'removeClass',\n      'hasClass',\n      'addBodyClass',\n      'removeBodyClass',\n      'eventTargetMatches',\n      'trapFocus',\n      'releaseFocus',\n      'getInitialFocusEl',\n      'isContentScrollable',\n      'areButtonsStacked',\n      'getActionFromEvent',\n      'clickDefaultButton',\n      'reverseButtons',\n      'notifyOpening',\n      'notifyOpened',\n      'notifyClosing',\n      'notifyClosed',\n      'registerContentEventHandler',\n      'deregisterContentEventHandler',\n      'isScrollableContentAtTop',\n      'isScrollableContentAtBottom',\n      'registerWindowEventHandler',\n      'deregisterWindowEventHandler',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#init turns off auto-stack if  is already present","suites":["MDCDialogFoundation"],"line":88,"updatePoint":{"line":88,"column":76},"code":"  it(`#init turns off auto-stack if ${cssClasses.STACKED} is already present`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.STACKED).and.returnValue(true);\n\n       foundation.init();\n       expect(foundation.getAutoStackButtons()).toBe(false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#destroy removes animating classes if called when the dialog is animating","suites":["MDCDialogFoundation"],"line":97,"updatePoint":{"line":97,"column":79},"code":"  it('#destroy removes animating classes if called when the dialog is animating',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.open();\n       jasmine.clock().tick(1);\n       foundation.destroy();\n\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPENING);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#destroy cancels layout handling if called on same frame as layout","suites":["MDCDialogFoundation"],"line":109,"updatePoint":{"line":109,"column":72},"code":"  it('#destroy cancels layout handling if called on same frame as layout',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.layout();\n       foundation.destroy();\n       jasmine.clock().tick(1);\n\n       expect(mockAdapter.areButtonsStacked).not.toHaveBeenCalled();\n       expect(mockAdapter.isContentScrollable).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#destroy deregisters event handlers on dialog content if they exist","suites":["MDCDialogFoundation"],"line":121,"updatePoint":{"line":121,"column":73},"code":"  it('#destroy deregisters event handlers on dialog content if they exist',\n     () => {\n       const {foundation, mockAdapter} = setupTest({isFullscreen: true});\n       mockAdapter.isContentScrollable.and.returnValue(true);\n\n       foundation.open();\n       foundation.destroy();\n       expect(mockAdapter.deregisterContentEventHandler)\n           .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#destroy deregisters event handlers on the window","suites":["MDCDialogFoundation"],"line":132,"updatePoint":{"line":132,"column":55},"code":"  it('#destroy deregisters event handlers on the window', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.isContentScrollable.and.returnValue(true);\n\n    foundation.open();\n    foundation.destroy();\n    expect(mockAdapter.deregisterWindowEventHandler)\n        .toHaveBeenCalledWith('resize', jasmine.any(Function));\n    expect(mockAdapter.deregisterWindowEventHandler)\n        .toHaveBeenCalledWith('orientationchange', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open adds CSS classes after rAF","suites":["MDCDialogFoundation"],"line":144,"updatePoint":{"line":144,"column":38},"code":"  it('#open adds CSS classes after rAF', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n    expect(mockAdapter.addBodyClass)\n        .not.toHaveBeenCalledWith(cssClasses.SCROLL_LOCK);\n\n    // Note: #open uses a combination of rAF and setTimeout due to Firefox\n    // behavior, so we need to wait 2 ticks\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(1);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.OPEN);\n    expect(mockAdapter.addBodyClass)\n        .toHaveBeenCalledWith(cssClasses.SCROLL_LOCK);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close removes CSS classes","suites":["MDCDialogFoundation"],"line":161,"updatePoint":{"line":161,"column":32},"code":"  it('#close removes CSS classes', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.close();\n\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPEN);\n    expect(mockAdapter.removeBodyClass)\n        .toHaveBeenCalledWith(cssClasses.SCROLL_LOCK);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close cancels rAF scheduled by open if still pending","suites":["MDCDialogFoundation"],"line":172,"updatePoint":{"line":172,"column":59},"code":"  it('#close cancels rAF scheduled by open if still pending', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.close();\n\n    // Note: #open uses a combination of rAF and setTimeout due to Firefox\n    // behavior, so we need to wait 2 ticks\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(1);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open adds the opening class to start an animation, and removes it after the animation is done","suites":["MDCDialogFoundation"],"line":185,"updatePoint":{"line":185,"column":100},"code":"  it('#open adds the opening class to start an animation, and removes it after the animation is done',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.open();\n       jasmine.clock().tick(1);\n       jasmine.clock().tick(100);\n\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.OPENING);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.OPENING);\n       jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPENING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close adds the closing class to start an animation, and removes it after the animation is done","suites":["MDCDialogFoundation"],"line":200,"updatePoint":{"line":200,"column":101},"code":"  it('#close adds the closing class to start an animation, and removes it after the animation is done',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.open();\n       jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n       foundation.close();\n\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.CLOSING);\n       jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open activates focus trapping on the dialog surface","suites":["MDCDialogFoundation"],"line":215,"updatePoint":{"line":215,"column":58},"code":"  it('#open activates focus trapping on the dialog surface', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    const button = document.createElement('button');\n    mockAdapter.getInitialFocusEl.and.returnValue(button);\n    foundation.open();\n\n    // Wait for application of opening class and setting of additional timeout\n    // prior to full open animation timeout\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(100);\n    jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n\n    expect(mockAdapter.trapFocus).toHaveBeenCalledWith(button);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close deactivates focus trapping on the dialog surface","suites":["MDCDialogFoundation"],"line":231,"updatePoint":{"line":231,"column":61},"code":"  it('#close deactivates focus trapping on the dialog surface', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n\n    foundation.close();\n\n    // Wait till setTimeout callback is executed.\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(100);\n    jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n\n    expect(mockAdapter.releaseFocus).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open emits \"opening\" and \"opened\" events","suites":["MDCDialogFoundation"],"line":246,"updatePoint":{"line":246,"column":47},"code":"  it('#open emits \"opening\" and \"opened\" events', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(100);\n\n    expect(mockAdapter.notifyOpening).toHaveBeenCalledTimes(1);\n    jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n    expect(mockAdapter.notifyOpened).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close emits \"closing\" and \"closed\" events","suites":["MDCDialogFoundation"],"line":258,"updatePoint":{"line":258,"column":48},"code":"  it('#close emits \"closing\" and \"closed\" events', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n    foundation.close();\n\n    expect(mockAdapter.notifyClosing).toHaveBeenCalledWith('');\n    jasmine.clock().tick(numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);\n    expect(mockAdapter.notifyClosed).toHaveBeenCalledWith('');\n\n    foundation.open();\n    jasmine.clock().tick(numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n\n    const action = 'action';\n    foundation.close(action);\n    expect(mockAdapter.notifyClosing).toHaveBeenCalledWith(action);\n    jasmine.clock().tick(numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);\n    expect(mockAdapter.notifyClosed).toHaveBeenCalledWith(action);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close does nothing if the dialog is already closed","suites":["MDCDialogFoundation"],"line":279,"updatePoint":{"line":279,"column":57},"code":"  it('#close does nothing if the dialog is already closed', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.close();\n    expect(mockAdapter.removeClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n    expect(mockAdapter.removeBodyClass)\n        .not.toHaveBeenCalledWith(cssClasses.SCROLL_LOCK);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.CLOSING);\n    expect(mockAdapter.releaseFocus).not.toHaveBeenCalled();\n    expect(mockAdapter.notifyClosing).not.toHaveBeenCalledWith('');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#isOpen returns false when the dialog has never been opened","suites":["MDCDialogFoundation"],"line":291,"updatePoint":{"line":291,"column":65},"code":"  it('#isOpen returns false when the dialog has never been opened', () => {\n    const {foundation} = setupTest();\n    expect(foundation.isOpen()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#isOpen returns true when the dialog is open","suites":["MDCDialogFoundation"],"line":296,"updatePoint":{"line":296,"column":50},"code":"  it('#isOpen returns true when the dialog is open', () => {\n    const {foundation} = setupTest();\n\n    foundation.open();\n\n    expect(foundation.isOpen()).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#isOpen returns false when the dialog is closed after being open","suites":["MDCDialogFoundation"],"line":304,"updatePoint":{"line":304,"column":70},"code":"  it('#isOpen returns false when the dialog is closed after being open', () => {\n    const {foundation} = setupTest();\n\n    foundation.open();\n    foundation.close();\n\n    expect(foundation.isOpen()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open recalculates layout","suites":["MDCDialogFoundation"],"line":313,"updatePoint":{"line":313,"column":31},"code":"  it('#open recalculates layout', () => {\n    const {foundation} = setupTest();\n\n    foundation.layout = jasmine.createSpy('layout');\n\n    foundation.open();\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(100);\n\n    expect(foundation.layout).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open registers scroll event handler if dialog is full-screen and scrollable","suites":["MDCDialogFoundation"],"line":325,"updatePoint":{"line":325,"column":82},"code":"  it('#open registers scroll event handler if dialog is full-screen and scrollable',\n     () => {\n       const {foundation, mockAdapter} = setupTest({isFullscreen: true});\n       mockAdapter.isContentScrollable.and.returnValue(true);\n\n       foundation.open();\n\n       expect(mockAdapter.registerContentEventHandler)\n           .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open registers scroll event handler if dialog is full-screen and not scrollable","suites":["MDCDialogFoundation"],"line":336,"updatePoint":{"line":336,"column":86},"code":"  it('#open registers scroll event handler if dialog is full-screen and not scrollable',\n     () => {\n       const {foundation, mockAdapter} = setupTest({isFullscreen: true});\n       mockAdapter.isContentScrollable.and.returnValue(false);\n\n       foundation.open();\n\n       expect(mockAdapter.registerContentEventHandler)\n           .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open doesn't registers scroll event handler if dialog is not full-screen","suites":["MDCDialogFoundation"],"line":347,"updatePoint":{"line":347,"column":80},"code":"  it('#open doesn\\'t registers scroll event handler if dialog is not full-screen',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.isContentScrollable.and.returnValue(true);\n\n       foundation.open();\n\n       expect(mockAdapter.registerContentEventHandler)\n           .not.toHaveBeenCalledWith('scroll', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close deregisters scroll event handler if dialog is full-screen and scrollable","suites":["MDCDialogFoundation"],"line":358,"updatePoint":{"line":358,"column":85},"code":"  it('#close deregisters scroll event handler if dialog is full-screen and scrollable',\n     () => {\n       const {foundation, mockAdapter} = setupTest({isFullscreen: true});\n       mockAdapter.isContentScrollable.and.returnValue(true);\n\n       foundation.open();\n       foundation.close();\n\n       expect(mockAdapter.deregisterContentEventHandler)\n           .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close deregisters scroll event handler if dialog is full-screen and not scrollable","suites":["MDCDialogFoundation"],"line":370,"updatePoint":{"line":370,"column":89},"code":"  it('#close deregisters scroll event handler if dialog is full-screen and not scrollable',\n     () => {\n       const {foundation, mockAdapter} = setupTest({isFullscreen: true});\n       mockAdapter.isContentScrollable.and.returnValue(false);\n\n       foundation.open();\n       foundation.close();\n\n       expect(mockAdapter.deregisterContentEventHandler)\n           .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open hides the scrim if \"isAboveFullscreenDialog\" is true","suites":["MDCDialogFoundation"],"line":382,"updatePoint":{"line":382,"column":64},"code":"  it('#open hides the scrim if \"isAboveFullscreenDialog\" is true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.open({isAboveFullscreenDialog: true});\n\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.SCRIM_HIDDEN);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.OPENING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#open registers resize and orientationchange event listeners on the window","suites":["MDCDialogFoundation"],"line":390,"updatePoint":{"line":390,"column":80},"code":"  it('#open registers resize and orientationchange event listeners on the window',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.open();\n\n       expect(mockAdapter.registerWindowEventHandler)\n           .toHaveBeenCalledWith('resize', jasmine.any(Function));\n       expect(mockAdapter.registerWindowEventHandler)\n           .toHaveBeenCalledWith('orientationchange', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#close deregisters resize and orientationchange event listeners on the window","suites":["MDCDialogFoundation"],"line":401,"updatePoint":{"line":401,"column":83},"code":"  it('#close deregisters resize and orientationchange event listeners on the window',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.open();\n       foundation.close();\n\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('resize', jasmine.any(Function));\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('orientationchange', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#layout removes  class, detects stacked buttons, and adds class","suites":["MDCDialogFoundation"],"line":413,"updatePoint":{"line":414,"column":75},"code":"  it(`#layout removes ${\n         cssClasses.STACKED} class, detects stacked buttons, and adds class`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.areButtonsStacked.and.returnValue(true);\n\n       foundation.layout();\n       jasmine.clock().tick(1);\n\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.STACKED);\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.STACKED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#layout removes  class, detects unstacked buttons, and does not add class","suites":["MDCDialogFoundation"],"line":426,"updatePoint":{"line":428,"column":79},"code":"  it(`#layout removes ${\n         cssClasses\n             .STACKED} class, detects unstacked buttons, and does not add class`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.areButtonsStacked.and.returnValue(true);\n\n       foundation.setAutoStackButtons(false);\n       foundation.layout();\n       jasmine.clock().tick(1);\n\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.STACKED);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.STACKED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#layout adds scrollable class when content is scrollable","suites":["MDCDialogFoundation"],"line":443,"updatePoint":{"line":443,"column":62},"code":"  it('#layout adds scrollable class when content is scrollable', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.isContentScrollable.and.returnValue(true);\n\n    foundation.layout();\n    jasmine.clock().tick(1);\n\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.SCROLLABLE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#layout removes scrollable class when content is not scrollable","suites":["MDCDialogFoundation"],"line":453,"updatePoint":{"line":453,"column":69},"code":"  it('#layout removes scrollable class when content is not scrollable', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.isContentScrollable.and.returnValue(false);\n\n    foundation.layout();\n\n    jasmine.clock().tick(1);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.SCROLLABLE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#layout adds header scroll divider if dialog is fullscreen and content is scrolled","suites":["MDCDialogFoundation"],"line":463,"updatePoint":{"line":463,"column":88},"code":"  it('#layout adds header scroll divider if dialog is fullscreen and content is scrolled',\n     () => {\n       const {foundation, mockAdapter} = setupTest({isFullscreen: true});\n       mockAdapter.isContentScrollable.and.returnValue(true);\n       mockAdapter.isScrollableContentAtTop.and.returnValue(false);\n\n       foundation.layout();\n       jasmine.clock().tick(1);\n\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(cssClasses.SCROLL_DIVIDER_HEADER);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#layout adds footer scroll divider if dialog is fullscreen and content is scrollable","suites":["MDCDialogFoundation"],"line":476,"updatePoint":{"line":476,"column":90},"code":"  it('#layout adds footer scroll divider if dialog is fullscreen and content is scrollable',\n     () => {\n       const {foundation, mockAdapter} = setupTest({isFullscreen: true});\n       mockAdapter.isContentScrollable.and.returnValue(true);\n       mockAdapter.isScrollableContentAtBottom.and.returnValue(false);\n\n       foundation.layout();\n       jasmine.clock().tick(1);\n\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(cssClasses.SCROLL_DIVIDER_FOOTER);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleClick: Click closes dialog when  attribute is present","suites":["MDCDialogFoundation"],"line":489,"updatePoint":{"line":490,"column":55},"code":"  it(`#handleClick: Click closes dialog when ${\n         strings.ACTION_ATTRIBUTE} attribute is present`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const action = 'action';\n       foundation.close = jasmine.createSpy('close');\n\n       const event = {target: {}} as MouseEvent;\n       mockAdapter.getActionFromEvent.withArgs(event).and.returnValue(action);\n       foundation.open();\n       foundation.handleClick(event);\n\n       expect(foundation.close).toHaveBeenCalledWith(action);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleKeydown: Keydown does not close dialog with action for non-activation keys","suites":["MDCDialogFoundation"],"line":504,"updatePoint":{"line":504,"column":87},"code":"  it('#handleKeydown: Keydown does not close dialog with action for non-activation keys',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const action = 'action';\n       const event = {type: 'keydown', key: 'Shift', target: {}} as\n           KeyboardEvent;\n       foundation.close = jasmine.createSpy('close');\n       mockAdapter.getActionFromEvent.withArgs(event).and.returnValue(action);\n\n       foundation.open();\n       foundation.handleKeydown(event);\n\n       expect(foundation.close).not.toHaveBeenCalledWith(action);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleClick: Click does nothing when  attribute is not present","suites":["MDCDialogFoundation"],"line":519,"updatePoint":{"line":520,"column":59},"code":"  it(`#handleClick: Click does nothing when ${\n         strings.ACTION_ATTRIBUTE} attribute is not present`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       const event = {target: {}} as MouseEvent;\n       mockAdapter.getActionFromEvent.withArgs(event).and.returnValue('');\n       foundation.open();\n       foundation.handleClick(event);\n\n       expect(foundation.close).not.toHaveBeenCalledWith(jasmine.any(String));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleKeydown: Keydown does nothing when  attribute is not present","suites":["MDCDialogFoundation"],"line":533,"updatePoint":{"line":534,"column":59},"code":"  it(`#handleKeydown: Keydown does nothing when ${\n         strings.ACTION_ATTRIBUTE} attribute is not present`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       ENTER_EVENTS.forEach((event) => {\n         mockAdapter.getActionFromEvent.withArgs(event).and.returnValue('');\n         foundation.open();\n         foundation.handleKeydown(event);\n\n         expect(foundation.close).not.toHaveBeenCalledWith(jasmine.any(String));\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleKeydown: Enter keydown calls adapter.clickDefaultButton","suites":["MDCDialogFoundation"],"line":548,"updatePoint":{"line":548,"column":68},"code":"  it('#handleKeydown: Enter keydown calls adapter.clickDefaultButton', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    ENTER_EVENTS.forEach((event) => {\n      foundation.handleKeydown(event);\n      expect(mockAdapter.clickDefaultButton).toHaveBeenCalled();\n    });\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleKeydown: Enter keydown does not call adapter.clickDefaultButton when it should be suppressed","suites":["MDCDialogFoundation"],"line":557,"updatePoint":{"line":557,"column":105},"code":"  it('#handleKeydown: Enter keydown does not call adapter.clickDefaultButton when it should be suppressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       ENTER_EVENTS.forEach((event) => {\n         mockAdapter.eventTargetMatches\n             .withArgs(event.target, strings.SUPPRESS_DEFAULT_PRESS_SELECTOR)\n             .and.returnValue(true);\n         foundation.handleKeydown(event);\n         expect(mockAdapter.clickDefaultButton).not.toHaveBeenCalled();\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleClick: Click closes dialog when  selector matches","suites":["MDCDialogFoundation"],"line":570,"updatePoint":{"line":571,"column":49},"code":"  it(`#handleClick: Click closes dialog when ${\n         strings.SCRIM_SELECTOR} selector matches`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const evt = {type: 'click', target: {}} as MouseEvent;\n       foundation.close = jasmine.createSpy('close');\n       mockAdapter.eventTargetMatches\n           .withArgs(evt.target, strings.SCRIM_SELECTOR)\n           .and.returnValue(true);\n\n       foundation.open();\n       foundation.handleClick(evt);\n\n       expect(foundation.close)\n           .toHaveBeenCalledWith(foundation.getScrimClickAction());\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleClick: Click does nothing when  class is present but scrimClickAction is \n    empty string","suites":["MDCDialogFoundation"],"line":587,"updatePoint":{"line":589,"column":16},"code":"  it(`#handleClick: Click does nothing when ${\n         strings.SCRIM_SELECTOR} class is present but scrimClickAction is \n    empty string`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const evt = {type: 'click', target: {}} as MouseEvent;\n       foundation.close = jasmine.createSpy('close');\n       mockAdapter.eventTargetMatches\n           .withArgs(evt.target, strings.SCRIM_SELECTOR)\n           .and.returnValue(true);\n\n       foundation.setScrimClickAction('');\n       foundation.open();\n       foundation.handleClick(evt);\n\n       expect(foundation.close).not.toHaveBeenCalledWith(jasmine.any(String));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"escape keydown closes the dialog (via key property)","suites":["MDCDialogFoundation"],"line":605,"updatePoint":{"line":605,"column":57},"code":"  it('escape keydown closes the dialog (via key property)', () => {\n    const {foundation} = setupTest();\n    foundation.close = jasmine.createSpy('close');\n\n    foundation.open();\n    foundation.handleDocumentKeydown({key: 'Escape'} as KeyboardEvent);\n\n    expect(foundation.close)\n        .toHaveBeenCalledWith(foundation.getEscapeKeyAction());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"escape keydown closes the dialog (via keyCode property)","suites":["MDCDialogFoundation"],"line":616,"updatePoint":{"line":616,"column":61},"code":"  it('escape keydown closes the dialog (via keyCode property)', () => {\n    const {foundation} = setupTest();\n    foundation.close = jasmine.createSpy('close');\n\n    foundation.open();\n    foundation.handleDocumentKeydown({keyCode: 27} as KeyboardEvent);\n\n    expect(foundation.close)\n        .toHaveBeenCalledWith(foundation.getEscapeKeyAction());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"escape keydown does nothing if escapeKeyAction is set to empty string","suites":["MDCDialogFoundation"],"line":627,"updatePoint":{"line":627,"column":75},"code":"  it('escape keydown does nothing if escapeKeyAction is set to empty string',\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.setEscapeKeyAction('');\n       foundation.open();\n       foundation.handleDocumentKeydown({key: 'Escape'} as KeyboardEvent);\n\n       expect(foundation.close)\n           .not.toHaveBeenCalledWith(foundation.getEscapeKeyAction());\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"keydown does nothing when key other than escape is pressed","suites":["MDCDialogFoundation"],"line":640,"updatePoint":{"line":640,"column":64},"code":"  it('keydown does nothing when key other than escape is pressed', () => {\n    const {foundation} = setupTest();\n    foundation.close = jasmine.createSpy('close');\n\n    foundation.open();\n    foundation.handleDocumentKeydown({key: 'Enter'} as KeyboardEvent);\n\n    expect(foundation.close)\n        .not.toHaveBeenCalledWith(foundation.getEscapeKeyAction());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#getAutoStackButtons reflects setting of #setAutoStackButtons","suites":["MDCDialogFoundation"],"line":651,"updatePoint":{"line":651,"column":67},"code":"  it('#getAutoStackButtons reflects setting of #setAutoStackButtons', () => {\n    const {foundation} = setupTest();\n    foundation.setAutoStackButtons(false);\n    expect(foundation.getAutoStackButtons()).toBe(false);\n    foundation.setAutoStackButtons(true);\n    expect(foundation.getAutoStackButtons()).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#getEscapeKeyAction reflects setting of #setEscapeKeyAction","suites":["MDCDialogFoundation"],"line":659,"updatePoint":{"line":659,"column":65},"code":"  it('#getEscapeKeyAction reflects setting of #setEscapeKeyAction', () => {\n    const {foundation} = setupTest();\n    const action = 'foo';\n    foundation.setEscapeKeyAction(action);\n    expect(foundation.getEscapeKeyAction()).toBe(action);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#getScrimClickAction reflects setting of #setScrimClickAction","suites":["MDCDialogFoundation"],"line":666,"updatePoint":{"line":666,"column":67},"code":"  it('#getScrimClickAction reflects setting of #setScrimClickAction', () => {\n    const {foundation} = setupTest();\n    const action = 'foo';\n    foundation.setScrimClickAction(action);\n    expect(foundation.getScrimClickAction()).toBe(action);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"shows header scroll divider on scrollable full-screen dialogs","suites":["MDCDialogFoundation"],"line":673,"updatePoint":{"line":673,"column":67},"code":"  it('shows header scroll divider on scrollable full-screen dialogs', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.FULLSCREEN).and.returnValue(true);\n    mockAdapter.isContentScrollable.and.returnValue(true);\n    mockAdapter.registerContentEventHandler.and.callThrough();\n    mockAdapter.isScrollableContentAtTop.and.returnValue(false);\n\n    foundation.open();\n    foundation['handleScrollEvent']();\n    jasmine.clock().tick(1);\n\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.SCROLL_DIVIDER_HEADER);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"removes header scroll divider on scrollable full-screen dialogs when content is at top","suites":["MDCDialogFoundation"],"line":688,"updatePoint":{"line":688,"column":92},"code":"  it('removes header scroll divider on scrollable full-screen dialogs when content is at top',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.FULLSCREEN)\n           .and.returnValue(true);\n       mockAdapter.isContentScrollable.and.returnValue(true);\n       mockAdapter.registerContentEventHandler.and.callThrough();\n       mockAdapter.isScrollableContentAtTop.and.returnValue(true);\n       mockAdapter.hasClass.withArgs(cssClasses.SCROLL_DIVIDER_HEADER)\n           .and.returnValue(true);\n\n       foundation.open();\n       foundation['handleScrollEvent']();\n       jasmine.clock().tick(1);\n\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.SCROLL_DIVIDER_HEADER);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"shows footer scroll divider on scrollable full-screen dialogs","suites":["MDCDialogFoundation"],"line":707,"updatePoint":{"line":707,"column":67},"code":"  it('shows footer scroll divider on scrollable full-screen dialogs', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.FULLSCREEN).and.returnValue(true);\n    mockAdapter.isContentScrollable.and.returnValue(true);\n    mockAdapter.registerContentEventHandler.and.callThrough();\n    mockAdapter.isScrollableContentAtBottom.and.returnValue(false);\n\n    foundation.open();\n    foundation['handleScrollEvent']();\n    jasmine.clock().tick(1);\n\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.SCROLL_DIVIDER_FOOTER);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"removes footer scroll divider on scrollable full-screen dialogs when content is at bottom","suites":["MDCDialogFoundation"],"line":722,"updatePoint":{"line":722,"column":95},"code":"  it('removes footer scroll divider on scrollable full-screen dialogs when content is at bottom',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.FULLSCREEN)\n           .and.returnValue(true);\n       mockAdapter.isContentScrollable.and.returnValue(true);\n       mockAdapter.registerContentEventHandler.and.callThrough();\n       mockAdapter.isScrollableContentAtBottom.and.returnValue(true);\n       mockAdapter.hasClass.withArgs(cssClasses.SCROLL_DIVIDER_FOOTER)\n           .and.returnValue(true);\n\n       foundation.open();\n       foundation['handleScrollEvent']();\n       jasmine.clock().tick(1);\n\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.SCROLL_DIVIDER_FOOTER);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#showSurfaceScrim adds css classes to show surface scrim","suites":["MDCDialogFoundation"],"line":741,"updatePoint":{"line":741,"column":62},"code":"  it('#showSurfaceScrim adds css classes to show surface scrim', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.showSurfaceScrim();\n\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.SURFACE_SCRIM_SHOWING);\n    // tick to wait for next animation frame\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(100);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.SURFACE_SCRIM_SHOWN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#hideSurfaceScrim adds css classes to hide surface scrim","suites":["MDCDialogFoundation"],"line":754,"updatePoint":{"line":754,"column":62},"code":"  it('#hideSurfaceScrim adds css classes to hide surface scrim', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.hideSurfaceScrim();\n\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.SURFACE_SCRIM_SHOWN);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.SURFACE_SCRIM_HIDING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"#handleSurfaceScrimTransitionEnd removes surface-scrim animation classes","suites":["MDCDialogFoundation"],"line":764,"updatePoint":{"line":764,"column":78},"code":"  it('#handleSurfaceScrimTransitionEnd removes surface-scrim animation classes',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.handleSurfaceScrimTransitionEnd();\n\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.SURFACE_SCRIM_SHOWING);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.SURFACE_SCRIM_HIDING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"createFocusTrapInstance creates a properly configured focus trap instance with all args specified","suites":["MDCDialog - util"],"line":28,"updatePoint":{"line":28,"column":103},"code":"  it('createFocusTrapInstance creates a properly configured focus trap instance with all args specified',\n     () => {\n       const surface = document.createElement('div');\n       const yesBtn = document.createElement('button');\n       const focusTrapFactory = jasmine.createSpy('focusTrapFactory');\n       const properlyConfiguredFocusTrapInstance = {} as FocusTrap;\n       focusTrapFactory\n           .withArgs(surface, {\n             initialFocusEl: yesBtn,\n           })\n           .and.returnValue(properlyConfiguredFocusTrapInstance);\n\n       const instance =\n           util.createFocusTrapInstance(surface, focusTrapFactory, yesBtn);\n       expect(instance).toEqual(properlyConfiguredFocusTrapInstance);\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollable returns false when element is null","suites":["MDCDialog - util"],"line":45,"updatePoint":{"line":45,"column":53},"code":"  it('isScrollable returns false when element is null', () => {\n    expect(util.isScrollable(null)).toBe(false);\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollable returns false when element has no content","suites":["MDCDialog - util"],"line":49,"updatePoint":{"line":49,"column":60},"code":"  it('isScrollable returns false when element has no content', () => {\n    const parent = document.createElement('div');\n\n    // Element.scrollHeight only returns the correct value when the element is\n    // attached to the DOM.\n    document.body.appendChild(parent);\n    try {\n      expect(util.isScrollable(parent)).toBe(false);\n    } finally {\n      document.body.removeChild(parent);\n    }\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollable returns false when element content does not overflow its bounding box","suites":["MDCDialog - util"],"line":62,"updatePoint":{"line":62,"column":88},"code":"  it('isScrollable returns false when element content does not overflow its bounding box',\n     () => {\n       const parent = getElement(`\n         <div style=\"height: 20px; overflow: auto;\">\n           <div style=\"height: 10px;\"></div>\n         </div>`);\n\n       // Element.scrollHeight only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.isScrollable(parent)).toBe(false);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollable returns true when element content overflows its bounding box","suites":["MDCDialog - util"],"line":79,"updatePoint":{"line":79,"column":79},"code":"  it('isScrollable returns true when element content overflows its bounding box',\n     () => {\n       const parent = getElement(`\n         <div style=\"height: 20px; overflow: auto;\">\n           <div style=\"height: 30px;\"></div>\n         </div>`);\n\n       // Element.scrollHeight only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.isScrollable(parent)).toBe(true);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollAtTop returns true when scrollable content has not been scrolled","suites":["MDCDialog - util"],"line":96,"updatePoint":{"line":96,"column":78},"code":"  it('isScrollAtTop returns true when scrollable content has not been scrolled',\n     () => {\n       const parent = getElement(`\n         <div style=\"height: 20px; overflow: auto;\">\n           <div style=\"height: 30px;\"></div>\n         </div>`);\n\n       // Element.scrollHeight only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.isScrollable(parent)).toBe(true);\n         expect(util.isScrollAtTop(parent)).toBe(true);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollAtTop returns false when scrollable content has been scrolled","suites":["MDCDialog - util"],"line":114,"updatePoint":{"line":114,"column":75},"code":"  it('isScrollAtTop returns false when scrollable content has been scrolled',\n     () => {\n       const parent = getElement(`\n         <div style=\"height: 20px; overflow: auto;\">\n           <div style=\"height: 30px;\"></div>\n         </div>`);\n\n       // Element.scrollHeight only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.isScrollable(parent)).toBe(true);\n         parent.scrollTop = 10;\n         expect(util.isScrollAtTop(parent)).toBe(false);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollAtBottom returns false when scrollable content is not scrolled to the bottom","suites":["MDCDialog - util"],"line":133,"updatePoint":{"line":133,"column":90},"code":"  it('isScrollAtBottom returns false when scrollable content is not scrolled to the bottom',\n     () => {\n       const parent = getElement(`\n         <div style=\"height: 20px; overflow: auto;\">\n           <div style=\"height: 30px;\"></div>\n         </div>`);\n\n       // Element.scrollHeight only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.isScrollable(parent)).toBe(true);\n         expect(util.isScrollAtBottom(parent)).toBe(false);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"isScrollAtBottom returns true when scrollable content has been scrolled to the bottom","suites":["MDCDialog - util"],"line":151,"updatePoint":{"line":151,"column":91},"code":"  it('isScrollAtBottom returns true when scrollable content has been scrolled to the bottom',\n     () => {\n       const parent = getElement(`\n         <div style=\"height: 20px; overflow: auto;\">\n           <div style=\"height: 30px;\"></div>\n         </div>`);\n\n       // Element.scrollHeight only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.isScrollable(parent)).toBe(true);\n         parent.scrollTop = 10;\n         expect(util.isScrollAtBottom(parent)).toBe(true);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"areTopsMisaligned returns false when array is empty","suites":["MDCDialog - util"],"line":170,"updatePoint":{"line":170,"column":57},"code":"  it('areTopsMisaligned returns false when array is empty', () => {\n    expect(util.areTopsMisaligned([])).toBe(false);\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"areTopsMisaligned returns false when array only contains one element","suites":["MDCDialog - util"],"line":174,"updatePoint":{"line":174,"column":74},"code":"  it('areTopsMisaligned returns false when array only contains one element',\n     () => {\n       const parent = getElement(`\n         <div style=\"display: flex;\n                     position: relative;\n                     flex-direction: row;\n                     flex-wrap: wrap;\n                     align-items: center;\n                     justify-content: flex-end;\">\n           <button>1</button>\n         </div>`);\n       const buttons =\n           [].slice.call(parent.querySelectorAll('button')) as HTMLElement[];\n\n       // HTMLElement.offsetTop only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.areTopsMisaligned(buttons)).toBe(false);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"areTopsMisaligned returns false when elements have same offsetTop","suites":["MDCDialog - util"],"line":198,"updatePoint":{"line":198,"column":71},"code":"  it('areTopsMisaligned returns false when elements have same offsetTop',\n     () => {\n       const parent = getElement(`\n         <div style=\"display: flex;\n                     position: relative;\n                     flex-direction: row;\n                     flex-wrap: wrap;\n                     align-items: center;\n                     justify-content: flex-end;\">\n           <button>1</button>\n           <button>2</button>\n         </div>`);\n       const buttons =\n           [].slice.call(parent.querySelectorAll('button')) as HTMLElement[];\n\n       // HTMLElement.offsetTop only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.areTopsMisaligned(buttons)).toBe(false);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"areTopsMisaligned returns true when elements have different \"top\" values","suites":["MDCDialog - util"],"line":223,"updatePoint":{"line":223,"column":78},"code":"  it('areTopsMisaligned returns true when elements have different \"top\" values',\n     () => {\n       const parent = getElement(`\n         <div style=\"display: flex;\n                     position: relative;\n                     flex-direction: column;\n                     flex-wrap: wrap;\n                     align-items: center;\n                     justify-content: flex-end;\">\n           <button>1</button>\n           <button>2</button>\n         </div>`);\n       const buttons =\n           [].slice.call(parent.querySelectorAll('button')) as HTMLElement[];\n\n       // HTMLElement.offsetTop only returns the correct value when the element\n       // is attached to the DOM.\n       document.body.appendChild(parent);\n       try {\n         expect(util.areTopsMisaligned(buttons)).toBe(true);\n       } finally {\n         document.body.removeChild(parent);\n       }\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-dialog/test"},{"name":"creates an aria-live=\"polite\" region by default","suites":["announce"],"line":41,"updatePoint":{"line":41,"column":53},"code":"  it('creates an aria-live=\"polite\" region by default', () => {\n    announce('Foo');\n    jasmine.clock().tick(1);\n    const liveRegion = document.querySelector(LIVE_REGION_SELECTOR);\n    expect(liveRegion!.textContent).toEqual('Foo');\n  });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"creates an aria-live=\"assertive\" region if specified","suites":["announce"],"line":48,"updatePoint":{"line":48,"column":58},"code":"  it('creates an aria-live=\"assertive\" region if specified', () => {\n    announce('Bar', {priority: AnnouncerPriority.ASSERTIVE});\n    jasmine.clock().tick(1);\n    const liveRegion = document.querySelector(LIVE_REGION_SELECTOR);\n    expect(liveRegion!.textContent).toEqual('Bar');\n  });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"uses the provided ownerDocument for announcements","suites":["announce"],"line":55,"updatePoint":{"line":55,"column":55},"code":"  it('uses the provided ownerDocument for announcements', () => {\n    const ownerDocument = document.implementation.createHTMLDocument('Title');\n    announce('custom ownerDocument', {ownerDocument});\n    const globalDocumentLiveRegion =\n        document.querySelector(LIVE_REGION_SELECTOR);\n    expect(globalDocumentLiveRegion).toBeNull();\n    const ownerDocumentLiveRegion =\n        ownerDocument.querySelector(LIVE_REGION_SELECTOR);\n    expect(ownerDocumentLiveRegion).toBeDefined();\n  });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"sets live region content after a timeout","suites":["announce"],"line":66,"updatePoint":{"line":66,"column":46},"code":"  it('sets live region content after a timeout', () => {\n    announce('Baz');\n    const liveRegion = document.querySelector(LIVE_REGION_SELECTOR);\n    expect(liveRegion!.textContent).toEqual('');\n    jasmine.clock().tick(1);\n    expect(liveRegion!.textContent).toEqual('Baz');\n  });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"reuses same polite live region on successive calls per document","suites":["announce"],"line":74,"updatePoint":{"line":74,"column":69},"code":"  it('reuses same polite live region on successive calls per document', () => {\n    const secondDocument = document.implementation.createHTMLDocument('Title');\n    announce('aaa');\n    announce('aaa', {ownerDocument: secondDocument});\n    announce('bbb');\n    announce('bbb', {ownerDocument: secondDocument});\n    announce('ccc');\n    announce('ccc', {ownerDocument: secondDocument});\n\n    const globalDocumentLiveRegions =\n        document.querySelectorAll(LIVE_REGION_SELECTOR);\n    expect(globalDocumentLiveRegions.length).toEqual(1);\n    const secondDocumentLiveRegions =\n        secondDocument.querySelectorAll(LIVE_REGION_SELECTOR);\n    expect(secondDocumentLiveRegions.length).toEqual(1);\n  });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"reuses same assertive live region on successive calls per document","suites":["announce"],"line":91,"updatePoint":{"line":91,"column":72},"code":"  it('reuses same assertive live region on successive calls per document',\n     () => {\n       const secondDocument =\n           document.implementation.createHTMLDocument('Title');\n       announce('aaa', {priority: AnnouncerPriority.ASSERTIVE});\n       announce('aaa', {priority: AnnouncerPriority.ASSERTIVE, ownerDocument: secondDocument});\n       announce('bbb', {priority: AnnouncerPriority.ASSERTIVE});\n       announce('bbb', {priority: AnnouncerPriority.ASSERTIVE, ownerDocument: secondDocument});\n       announce('ccc', {priority: AnnouncerPriority.ASSERTIVE});\n       announce('ccc', {priority: AnnouncerPriority.ASSERTIVE, ownerDocument: secondDocument});\n\n       const globalDocumentLiveRegions =\n           document.querySelectorAll(LIVE_REGION_SELECTOR);\n       expect(globalDocumentLiveRegions.length).toEqual(1);\n       const secondDocumentLiveRegions =\n           secondDocument.querySelectorAll(LIVE_REGION_SELECTOR);\n       expect(secondDocumentLiveRegions.length).toEqual(1);\n     });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"sets the latest message during immediate successive","suites":["announce"],"line":110,"updatePoint":{"line":110,"column":57},"code":"  it('sets the latest message during immediate successive', () => {\n    announce('1');\n    announce('2');\n    announce('3');\n    jasmine.clock().tick(1);\n    const liveRegion = document.querySelector(LIVE_REGION_SELECTOR);\n    expect(liveRegion!.textContent).toEqual('3');\n  });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"clears out the message on click","suites":["announce"],"line":119,"updatePoint":{"line":119,"column":37},"code":"  it('clears out the message on click', () => {\n    announce('hello');\n    jasmine.clock().tick(1);\n    const liveRegion = document.querySelector(LIVE_REGION_SELECTOR);\n    expect(liveRegion!.textContent).toEqual('hello');\n    document.documentElement.click();\n    expect(liveRegion!.textContent).toEqual('');\n  });","file":"announce.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"applyPassive returns an options object for browsers that support passive event listeners","suites":["MDCDom - events"],"line":27,"updatePoint":{"line":27,"column":94},"code":"  it('applyPassive returns an options object for browsers that support passive event listeners',\n     () => {\n       const mockWindow = {\n         document: {\n           addEventListener(\n               name: string, method: Function,\n               options: AddEventListenerOptions) {\n             const passive = options.passive;\n             return {passive, name, method};\n           },\n           removeEventListener() {},\n         },\n       } as unknown as Window;\n       expect(applyPassive(mockWindow)).toEqual({\n         passive: true\n       } as EventListenerOptions);\n     });","file":"events.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"applyPassive returns false for browsers that do not support passive event listeners","suites":["MDCDom - events"],"line":45,"updatePoint":{"line":45,"column":89},"code":"  it('applyPassive returns false for browsers that do not support passive event listeners',\n     () => {\n       const mockWindow = {\n         document: {\n           addEventListener() {\n             throw new Error();\n           },\n           removeEventListener() {},\n         },\n       } as unknown as Window;\n       expect(applyPassive(mockWindow)).toBeFalsy();\n     });","file":"events.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"traps focus in the given container element","suites":["FocusTrap"],"line":88,"updatePoint":{"line":88,"column":48},"code":"  it('traps focus in the given container element', () => {\n    const {container1, container2} = setUp();\n    const focusTrap1 = new FocusTrap(container1);\n    focusTrap1.trapFocus();\n    expectFocusTrapped(container1, 'con1a', 'con1b');\n\n    const focusTrap2 = new FocusTrap(container2);\n    focusTrap2.trapFocus();\n    expectFocusTrapped(container2, 'con2a', 'con2b');\n  });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"releases focus from the given container element","suites":["FocusTrap"],"line":99,"updatePoint":{"line":99,"column":53},"code":"  it('releases focus from the given container element', () => {\n    const {container1} = setUp();\n    const focusTrap1 = new FocusTrap(container1);\n    focusTrap1.trapFocus();\n    expectFocusTrapped(container1, 'con1a', 'con1b');\n\n    focusTrap1.releaseFocus();\n    expect(container1.querySelectorAll(`.${FOCUS_SENTINEL_CLASS}`).length)\n        .toBe(0);\n  });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"restores focus to previously focused element","suites":["FocusTrap"],"line":110,"updatePoint":{"line":110,"column":50},"code":"  it('restores focus to previously focused element', () => {\n    const {button, container2} = setUp();\n    const focusTrap = new FocusTrap(container2);\n\n    // First, set focus to button.\n    button.focus();\n    expect(document.activeElement).toBe(button);\n    // Trap focus in `container2`.\n    focusTrap.trapFocus();\n    expect(document.activeElement!.id).toBe('con2a');\n    // Expect focus to be restored to button.\n    focusTrap.releaseFocus();\n    expect(document.activeElement).toBe(button);\n  });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"sets initial focus to first visible focusable element","suites":["FocusTrap"],"line":125,"updatePoint":{"line":125,"column":59},"code":"  it('sets initial focus to first visible focusable element', () => {\n    const {container3} = setUp();\n    const focusTrap = new FocusTrap(container3);\n    focusTrap.trapFocus();\n    expect(document.activeElement!.id).toBe('con3c');\n  });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"sets initial focus to first non-hidden/non-disabled focusable element","suites":["FocusTrap"],"line":132,"updatePoint":{"line":132,"column":75},"code":"  it('sets initial focus to first non-hidden/non-disabled focusable element',\n     () => {\n       const {container4} = setUp();\n       const focusTrap = new FocusTrap(container4);\n       focusTrap.trapFocus();\n       expect(document.activeElement!.id).toBe('con4e');\n     });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"sets initial focus to initialFocusEl","suites":["FocusTrap"],"line":140,"updatePoint":{"line":140,"column":42},"code":"  it('sets initial focus to initialFocusEl', () => {\n    const {container1} = setUp();\n    const initialFocusEl = container1.querySelector('#con1b') as HTMLElement;\n    const focusTrap = new FocusTrap(container1, {initialFocusEl});\n    focusTrap.trapFocus();\n    expect(document.activeElement!.id).toBe('con1b');\n  });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"does not set initial focus when skipInitialFocus=true","suites":["FocusTrap"],"line":148,"updatePoint":{"line":148,"column":59},"code":"  it('does not set initial focus when skipInitialFocus=true', () => {\n    const {button, container1} = setUp();\n    const focusTrap = new FocusTrap(container1, {skipInitialFocus: true});\n\n    // First, set focus to button.\n    button.focus();\n    expect(document.activeElement).toBe(button);\n\n    focusTrap.trapFocus();\n    // Focus should remain on button.\n    expect(document.activeElement).toBe(button);\n  });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"does not restore focus when skipRestoreFocus=true","suites":["FocusTrap"],"line":161,"updatePoint":{"line":161,"column":55},"code":"  it('does not restore focus when skipRestoreFocus=true', () => {\n    const {button, container2} = setUp();\n    const focusTrap = new FocusTrap(container2, {skipRestoreFocus: true});\n\n    // First, set focus to button.\n    button.focus();\n    expect(document.activeElement).toBe(button);\n    // Trap focus in `container2`.\n    focusTrap.trapFocus();\n    expect(document.activeElement!.id).toBe('con2a');\n    // Expect focus not to have changed.\n    focusTrap.releaseFocus();\n    expect(document.activeElement!.id).toBe('con2a');\n  });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"throws an error when trapping focus in an element with 0 focusable elements","suites":["FocusTrap"],"line":176,"updatePoint":{"line":176,"column":81},"code":"  it('throws an error when trapping focus in an element with 0 focusable elements',\n     () => {\n       const {container5} = setUp();\n       const focusTrap = new FocusTrap(container5);\n       expect(() => {\n         focusTrap.trapFocus();\n       })\n           .toThrow(jasmine.stringMatching(\n               /Element must have at least one focusable child/));\n     });","file":"focus-trap.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"returns \"\" for keyCode \"\"","suites":["normalizeKey"],"line":86,"updatePoint":{"line":86,"column":49},"code":"    it(`returns \"${key}\" for keyCode \"${keyCode}\"`, () => {\n      expect(normalizeKey({keyCode} as KeyboardEvent)).toEqual(key);\n    });","file":"keyboard.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"returns \"\" for key \"\"","suites":["normalizeKey"],"line":151,"updatePoint":{"line":151,"column":41},"code":"    it(`returns \"${key}\" for key \"${key}\"`, () => {\n      expect(normalizeKey({key} as KeyboardEvent)).toEqual(key);\n    });","file":"keyboard.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"returns \"\" for unmapped keyCodes\"","suites":["normalizeKey"],"line":156,"updatePoint":{"line":156,"column":53},"code":"  it(`returns \"${KEY.UNKNOWN}\" for unmapped keyCodes\"`, () => {\n    expect(normalizeKey({keyCode: 0} as KeyboardEvent)).toEqual(KEY.UNKNOWN);\n  });","file":"keyboard.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"returns true for keyCode \"\"","suites":["isNavigationEvent"],"line":176,"updatePoint":{"line":176,"column":45},"code":"    it(`returns true for keyCode \"${keyCode}\"`, () => {\n      expect(isNavigationEvent({keyCode} as KeyboardEvent)).toBe(true);\n    });","file":"keyboard.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"returns false for keyCode \"\"","suites":["isNavigationEvent"],"line":190,"updatePoint":{"line":190,"column":46},"code":"    it(`returns false for keyCode \"${keyCode}\"`, () => {\n      expect(isNavigationEvent({keyCode} as KeyboardEvent)).toBe(false);\n    });","file":"keyboard.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#closest returns result from native method if available","suites":["MDCDom - ponyfill"],"line":35,"updatePoint":{"line":35,"column":61},"code":"  it('#closest returns result from native method if available', () => {\n    const mockElement = jasmine.createSpyObj('mockElement', ['closest']);\n    const selector = '.foo';\n    mockElement.closest.withArgs(selector).and.returnValue(mockElement);\n\n    expect(closest(mockElement, selector)).toBe(mockElement);\n  });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#closest returns the element when the selector matches the element","suites":["MDCDom - ponyfill"],"line":43,"updatePoint":{"line":43,"column":72},"code":"  it('#closest returns the element when the selector matches the element',\n     () => {\n       const mockElement = jasmine.createSpyObj('mockElement', ['matches']);\n       const selector = '.foo';\n       mockElement.matches.withArgs(selector).and.returnValue(true);\n\n       expect(closest(mockElement, selector)).toBe(mockElement);\n     });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#closest returns the parent element when the selector matches the parent element","suites":["MDCDom - ponyfill"],"line":52,"updatePoint":{"line":52,"column":86},"code":"  it('#closest returns the parent element when the selector matches the parent element',\n     () => {\n       const mockParentMatches = jasmine.createSpy('mockParentElement.matches');\n       const mockMatches = jasmine.createSpy('mockChildElement.matches');\n       const mockParentElement = {\n         matches: mockParentMatches,\n       } as unknown as HTMLElement;\n       const mockChildElement = {\n         matches: mockMatches,\n         parentElement: mockParentElement,\n       } as unknown as HTMLElement;\n       const selector = '.foo';\n       mockMatches.withArgs(selector).and.returnValue(false);\n       mockParentMatches.withArgs(selector).and.returnValue(true);\n\n       expect(closest(mockChildElement, selector)).toBe(mockParentElement);\n     });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#closest returns null when there is no ancestor matching the selector","suites":["MDCDom - ponyfill"],"line":70,"updatePoint":{"line":70,"column":75},"code":"  it('#closest returns null when there is no ancestor matching the selector',\n     () => {\n       const mockParentMatches = jasmine.createSpy('mockParentElement.matches');\n       const mockMatches = jasmine.createSpy('mockChildElement.matches');\n       const mockChildElement = {\n         matches: mockMatches,\n         parentElement: {\n           matches: mockParentMatches,\n         },\n       } as unknown as HTMLElement;\n       const selector = '.foo';\n       mockMatches.withArgs(selector).and.returnValue(false);\n       mockParentMatches.withArgs(selector).and.returnValue(false);\n\n       expect(closest(mockChildElement, selector)).toBeNull();\n     });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#matches returns true when the selector matches the element","suites":["MDCDom - ponyfill"],"line":87,"updatePoint":{"line":87,"column":65},"code":"  it('#matches returns true when the selector matches the element', () => {\n    const element = getFixture(`<div class=\"foo\"></div>`);\n    expect(matches(element, '.foo')).toBe(true);\n  });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#matches returns false when the selector does not match the element","suites":["MDCDom - ponyfill"],"line":92,"updatePoint":{"line":92,"column":73},"code":"  it('#matches returns false when the selector does not match the element',\n     () => {\n       const element = getFixture(`<div class=\"foo\"></div>`);\n       expect(matches(element, '.bar')).toBe(false);\n     });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#matches supports vendor prefixes","suites":["MDCDom - ponyfill"],"line":98,"updatePoint":{"line":98,"column":39},"code":"  it('#matches supports vendor prefixes', () => {\n    expect(matches({matches: () => true} as unknown as Element, '')).toBe(true);\n    expect(\n        matches({webkitMatchesSelector: () => true} as unknown as Element, ''))\n        .toBe(true);\n    expect(matches({msMatchesSelector: () => true} as unknown as Element, ''))\n        .toBe(true);\n  });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#estimateScrollWidth returns the default width when the element is not hidden","suites":["MDCDom - ponyfill"],"line":107,"updatePoint":{"line":107,"column":83},"code":"  it('#estimateScrollWidth returns the default width when the element is not hidden',\n     () => {\n       const root = getFixture(`<span>\n    <span id=\"i0\" style=\"width:10px;\"></span>\n  </span>`);\n       const el = root.querySelector('#i0') as HTMLElement;\n       expect(estimateScrollWidth(el)).toBe(10);\n     });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"#estimateScrollWidth returns the estimated width when the element is hidden","suites":["MDCDom - ponyfill"],"line":116,"updatePoint":{"line":116,"column":81},"code":"  it('#estimateScrollWidth returns the estimated width when the element is hidden',\n     () => {\n       const root = getFixture(`<span style=\"display:none;\">\n    <span id=\"i0\" style=\"width:10px;\"></span>\n  </span>`);\n       const el = root.querySelector('#i0') as HTMLElement;\n       expect(estimateScrollWidth(el)).toBe(10);\n     });","file":"ponyfill.test.ts","skipped":false,"dir":"packages/mdc-dom/test"},{"name":"attachTo initializes and returns a MDCDrawer instance","suites":["MDCDrawer"],"line":105,"updatePoint":{"line":105,"column":59},"code":"  it('attachTo initializes and returns a MDCDrawer instance', () => {\n    const root = getDrawerFixture({\n                   variantClass: cssClasses.DISMISSIBLE,\n                   hasList: false\n                 }).querySelector('.mdc-drawer') as HTMLElement;\n    expect(MDCDrawer.attachTo(root)).toEqual(jasmine.any(MDCDrawer));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#get open calls foundation.isOpen","suites":["MDCDrawer"],"line":113,"updatePoint":{"line":113,"column":39},"code":"  it('#get open calls foundation.isOpen', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n    component.open;\n    expect(mockFoundation.isOpen).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#set open true calls foundation.open","suites":["MDCDrawer"],"line":119,"updatePoint":{"line":119,"column":42},"code":"  it('#set open true calls foundation.open', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n    component.open = true;\n    expect(mockFoundation.open).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#set open false calls foundation.close","suites":["MDCDrawer"],"line":125,"updatePoint":{"line":125,"column":44},"code":"  it('#set open false calls foundation.close', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n    component.open = false;\n    expect(mockFoundation.close).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#get list returns MDCList instance when DOM includes list","suites":["MDCDrawer"],"line":131,"updatePoint":{"line":131,"column":63},"code":"  it('#get list returns MDCList instance when DOM includes list', () => {\n    const {component} = setupTest();\n    expect(component.list).toEqual(jasmine.any(MDCList));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"click event calls foundation.handleScrimClick method","suites":["MDCDrawer"],"line":136,"updatePoint":{"line":136,"column":58},"code":"  it('click event calls foundation.handleScrimClick method', () => {\n    const {root, mockFoundation} =\n        setupTestWithMocks({variantClass: cssClasses.MODAL});\n    const scrimEl = root.querySelector('.mdc-drawer-scrim') as HTMLElement;\n    emitEvent(scrimEl, 'click');\n    expect((mockFoundation as jasmine.SpyObj<MDCModalDrawerFoundation>)\n               .handleScrimClick)\n        .toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"keydown event calls foundation.handleKeydown method","suites":["MDCDrawer"],"line":146,"updatePoint":{"line":146,"column":57},"code":"  it('keydown event calls foundation.handleKeydown method', () => {\n    const {drawer, mockFoundation} = setupTestWithMocks();\n    // TODO(b/182902089): use list constants once code is migrated to evolution.\n    (drawer.querySelector('.mdc-deprecated-list-item') as HTMLElement).focus();\n    emitEvent(drawer, 'keydown');\n    expect(mockFoundation.handleKeydown)\n        .toHaveBeenCalledWith(jasmine.any(Object));\n    expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"transitionend event calls foundation.handleTransitionEnd method","suites":["MDCDrawer"],"line":156,"updatePoint":{"line":156,"column":69},"code":"  it('transitionend event calls foundation.handleTransitionEnd method', () => {\n    const {drawer, mockFoundation} = setupTestWithMocks();\n    emitEvent(drawer, 'transitionend');\n    expect(mockFoundation.handleTransitionEnd)\n        .toHaveBeenCalledWith(jasmine.any(Object));\n    expect(mockFoundation.handleTransitionEnd).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"component should throw error when invalid variant class name is used or no variant specified","suites":["MDCDrawer"],"line":164,"updatePoint":{"line":164,"column":98},"code":"  it('component should throw error when invalid variant class name is used or no variant specified',\n     () => {\n       expect(\n           () => setupTest({variantClass: 'mdc-drawer--test-invalid-variant'}))\n           .toThrow();\n       expect(() => setupTest({variantClass: ' '})).toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#destroy removes keydown event listener","suites":["MDCDrawer"],"line":172,"updatePoint":{"line":172,"column":45},"code":"  it('#destroy removes keydown event listener', () => {\n    const {component, drawer, mockFoundation} = setupTestWithMocks();\n    component.destroy();\n    // TODO(b/182902089): use list constants once code is migrated to evolution.\n    (drawer.querySelector('.mdc-deprecated-list-item') as HTMLElement).focus();\n    emitEvent(drawer, 'keydown');\n    expect(mockFoundation.handleKeydown)\n        .not.toHaveBeenCalledWith(jasmine.any(Object));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#destroy removes transitionend event listener","suites":["MDCDrawer"],"line":182,"updatePoint":{"line":182,"column":51},"code":"  it('#destroy removes transitionend event listener', () => {\n    const {component, drawer, mockFoundation} = setupTestWithMocks();\n    component.destroy();\n\n    emitEvent(drawer, 'transitionend');\n    expect(mockFoundation.handleTransitionEnd)\n        .not.toHaveBeenCalledWith(jasmine.any(Object));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#destroy calls destroy on list","suites":["MDCDrawer"],"line":191,"updatePoint":{"line":191,"column":36},"code":"  it('#destroy calls destroy on list', () => {\n    const {component, mockList} = setupTestWithMocks();\n    component.destroy();\n\n    expect(mockList.destroy).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#destroy does not throw an error when list is not present","suites":["MDCDrawer"],"line":198,"updatePoint":{"line":198,"column":63},"code":"  it('#destroy does not throw an error when list is not present', () => {\n    const {component, mockList} =\n        setupTestWithMocks({variantClass: cssClasses.MODAL, hasList: false});\n    component.destroy();\n\n    expect(mockList.destroy).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#addClass adds class to drawer","suites":["MDCDrawer"],"line":206,"updatePoint":{"line":206,"column":43},"code":"  it('adapter#addClass adds class to drawer', () => {\n    const {component, drawer} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('test-class');\n    expect(drawer.classList.contains('test-class')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#removeClass removes class from drawer","suites":["MDCDrawer"],"line":212,"updatePoint":{"line":212,"column":51},"code":"  it('adapter#removeClass removes class from drawer', () => {\n    const {component, drawer} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('test-class');\n\n    (component.getDefaultFoundation() as any)\n        .adapter.removeClass('test-class');\n    expect(drawer.classList.contains('test-class')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#hasClass returns true when class is on drawer element","suites":["MDCDrawer"],"line":221,"updatePoint":{"line":221,"column":67},"code":"  it('adapter#hasClass returns true when class is on drawer element', () => {\n    const {component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('test-class');\n    const hasClass = (component.getDefaultFoundation() as any)\n                         .adapter.hasClass('test-class');\n    expect(hasClass).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#hasClass returns false when there is no class on drawer element","suites":["MDCDrawer"],"line":229,"updatePoint":{"line":229,"column":77},"code":"  it('adapter#hasClass returns false when there is no class on drawer element',\n     () => {\n       const {component} = setupTest();\n       const hasClass = (component.getDefaultFoundation() as any)\n                            .adapter.hasClass('test-class');\n       expect(hasClass).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#elementHasClass returns true when class is found on event target","suites":["MDCDrawer"],"line":237,"updatePoint":{"line":237,"column":78},"code":"  it('adapter#elementHasClass returns true when class is found on event target',\n     () => {\n       const {component} = setupTest();\n       const mockEventTarget = getFixture(`<div class=\"foo\">bar</div>`);\n\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.elementHasClass(mockEventTarget, 'foo'))\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#restoreFocus restores focus to previously saved focus","suites":["MDCDrawer"],"line":247,"updatePoint":{"line":247,"column":67},"code":"  it('adapter#restoreFocus restores focus to previously saved focus', () => {\n    const {component, root} = setupTest();\n    const button = getFixture(`<button>Foo</button>`);\n    document.body.appendChild(button);\n    document.body.appendChild(root);\n    button.focus();\n\n    (component.getDefaultFoundation() as any).adapter.saveFocus();\n    (root.querySelector(strings.LIST_ITEM_ACTIVATED_SELECTOR) as HTMLElement)\n        .focus();\n    (component.getDefaultFoundation() as any).adapter.restoreFocus();\n\n    expect(button).toEqual(document.activeElement as HTMLElement);\n    document.body.removeChild(button);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#restoreFocus focus shouldn't restore if focus is not within root element","suites":["MDCDrawer"],"line":264,"updatePoint":{"line":264,"column":87},"code":"  it('adapter#restoreFocus focus shouldn\\'t restore if focus is not within root element',\n     () => {\n       const {component, root} = setupTest();\n       const navButtonEl = getFixture(`<button>Foo</button>`);\n       const otherButtonEl = getFixture(`<button>Bar</button>`);\n       document.body.appendChild(navButtonEl);\n       document.body.appendChild(otherButtonEl);\n       document.body.appendChild(root);\n       navButtonEl.focus();\n\n       (component.getDefaultFoundation() as any).adapter.saveFocus();\n       otherButtonEl.focus();\n       (component.getDefaultFoundation() as any).adapter.restoreFocus();\n\n       expect(navButtonEl).not.toBe(document.activeElement as HTMLElement);\n       document.body.removeChild(navButtonEl);\n       document.body.removeChild(otherButtonEl);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#restoreFocus focus is not restored if saveFocus never called","suites":["MDCDrawer"],"line":284,"updatePoint":{"line":284,"column":74},"code":"  it('adapter#restoreFocus focus is not restored if saveFocus never called',\n     () => {\n       const {component, root} = setupTest();\n       const button = getFixture(`<button>Foo</button>`);\n       document.body.appendChild(button);\n       document.body.appendChild(root);\n       button.focus();\n\n       const navItem = root.querySelector(\n                           strings.LIST_ITEM_ACTIVATED_SELECTOR) as HTMLElement;\n       navItem.focus();\n       (component.getDefaultFoundation() as any).adapter.restoreFocus();\n\n       expect(navItem).toEqual(document.activeElement as HTMLElement);\n       document.body.removeChild(button);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#trapFocus traps focus on root element","suites":["MDCDrawer"],"line":302,"updatePoint":{"line":302,"column":51},"code":"  it('adapter#trapFocus traps focus on root element', () => {\n    const {component, mockFocusTrapInstance} =\n        setupTestWithMocks({variantClass: cssClasses.MODAL});\n    (component.getDefaultFoundation() as any).adapter.trapFocus();\n\n    expect(mockFocusTrapInstance.trapFocus).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#releaseFocus releases focus on root element after trap focus","suites":["MDCDrawer"],"line":310,"updatePoint":{"line":310,"column":74},"code":"  it('adapter#releaseFocus releases focus on root element after trap focus',\n     () => {\n       const {component, mockFocusTrapInstance} =\n           setupTestWithMocks({variantClass: cssClasses.MODAL});\n       (component.getDefaultFoundation() as any).adapter.releaseFocus();\n\n       expect(mockFocusTrapInstance.releaseFocus).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#notifyOpen emits drawer open event","suites":["MDCDrawer"],"line":319,"updatePoint":{"line":319,"column":48},"code":"  it('adapter#notifyOpen emits drawer open event', () => {\n    const {component} = setupTest();\n\n    const handler = jasmine.createSpy('openHandler');\n\n    component.listen(strings.OPEN_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyOpen();\n\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#notifyClose emits drawer close event","suites":["MDCDrawer"],"line":330,"updatePoint":{"line":330,"column":50},"code":"  it('adapter#notifyClose emits drawer close event', () => {\n    const {component} = setupTest();\n\n    const handler = jasmine.createSpy('closeHandler');\n\n    component.listen(strings.CLOSE_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyClose();\n\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#focusActiveNavigationItem focuses on active navigation item","suites":["MDCDrawer"],"line":341,"updatePoint":{"line":341,"column":73},"code":"  it('adapter#focusActiveNavigationItem focuses on active navigation item',\n     () => {\n       const {component, root} = setupTest();\n       document.body.appendChild(root);\n       (component.getDefaultFoundation() as any)\n           .adapter.focusActiveNavigationItem();\n\n       const activatedNavigationItemEl =\n           root.querySelector(strings.LIST_ITEM_ACTIVATED_SELECTOR);\n       expect(document.activeElement).toEqual(activatedNavigationItemEl);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"adapter#focusActiveNavigationItem does nothing if no active navigation item exists","suites":["MDCDrawer"],"line":354,"updatePoint":{"line":354,"column":88},"code":"  it('adapter#focusActiveNavigationItem does nothing if no active navigation item exists',\n     () => {\n       const {component, root} = setupTest();\n       const prevActiveElement = document.activeElement;\n       document.body.appendChild(root);\n       const activatedNavigationItemEl =\n           root.querySelector(strings.LIST_ITEM_ACTIVATED_SELECTOR) as\n           HTMLElement;\n       // TODO(b/182902089): use list constants once code has been migrated.\n       activatedNavigationItemEl.classList.remove(\n           'mdc-deprecated-list-item--activated');\n       (component.getDefaultFoundation() as any)\n           .adapter.focusActiveNavigationItem();\n\n       expect(document.activeElement).toEqual(prevActiveElement);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"#initialSyncWithDOM should not throw any errors when DOM rendered in DocumentFragment i.e., Shadow DOM","suites":["MDCDrawer"],"line":372,"updatePoint":{"line":372,"column":108},"code":"  it('#initialSyncWithDOM should not throw any errors when DOM rendered in DocumentFragment i.e., Shadow DOM',\n     () => {\n       const {component} =\n           setupTest({variantClass: cssClasses.MODAL, shadowRoot: true});\n       expect(() => component.initialSyncWithDOM).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"createFocusTrapInstance creates a properly configured focus trap instance with all args specified","suites":["MDCDrawer - util"],"line":31,"updatePoint":{"line":31,"column":103},"code":"  it('createFocusTrapInstance creates a properly configured focus trap instance with all args specified',\n     () => {\n       const rootEl = getFixture(`<div></div>`);\n       const focusTrapFactory = jasmine.createSpy('focusTrapFactory');\n       const properlyConfiguredFocusTrapInstance = {\n         trapFocus() {},\n         releaseFocus() {}\n       };\n       focusTrapFactory\n           .withArgs(rootEl, {\n             skipInitialFocus: true,\n           })\n           .and.returnValue(properlyConfiguredFocusTrapInstance);\n\n       const instance = util.createFocusTrapInstance(rootEl, focusTrapFactory);\n       expect(instance).toEqual(properlyConfiguredFocusTrapInstance);\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-drawer/test"},{"name":"attachTo returns an MDCFloatingLabel instance","suites":["MDCFloatingLabel"],"line":39,"updatePoint":{"line":39,"column":51},"code":"  it('attachTo returns an MDCFloatingLabel instance', () => {\n    expect(MDCFloatingLabel.attachTo(getFixture()) instanceof MDCFloatingLabel)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#shake calls the foundation shake method","suites":["MDCFloatingLabel"],"line":50,"updatePoint":{"line":50,"column":46},"code":"  it('#shake calls the foundation shake method', () => {\n    const {component} = setupTest();\n    component['foundation'].shake = jasmine.createSpy('');\n    component.shake(true);\n    expect(component['foundation'].shake).toHaveBeenCalledWith(true);\n    expect(component['foundation'].shake).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#getWidth calls the foundation getWidth method","suites":["MDCFloatingLabel"],"line":58,"updatePoint":{"line":58,"column":52},"code":"  it('#getWidth calls the foundation getWidth method', () => {\n    const {component} = setupTest();\n    component['foundation'].getWidth = jasmine.createSpy('');\n    component.getWidth();\n    expect(component['foundation'].getWidth).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#float calls the foundation float method","suites":["MDCFloatingLabel"],"line":65,"updatePoint":{"line":65,"column":46},"code":"  it('#float calls the foundation float method', () => {\n    const {component} = setupTest();\n    component['foundation'].float = jasmine.createSpy('');\n    component.float(true);\n    expect(component['foundation'].float).toHaveBeenCalledWith(true);\n    expect(component['foundation'].float).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#adapter.addClass adds a class to the element","suites":["MDCFloatingLabel"],"line":73,"updatePoint":{"line":73,"column":51},"code":"  it('#adapter.addClass adds a class to the element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#adapter.removeClass removes a class from the element","suites":["MDCFloatingLabel"],"line":79,"updatePoint":{"line":79,"column":59},"code":"  it('#adapter.removeClass removes a class from the element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#adapter.getWidth returns the width of the label element","suites":["MDCFloatingLabel"],"line":86,"updatePoint":{"line":86,"column":62},"code":"  it('#adapter.getWidth returns the width of the label element', () => {\n    const {root, component} = setupTest();\n    expect((component.getDefaultFoundation() as any).adapter.getWidth())\n        .toEqual(root.offsetWidth);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"exports cssClasses","suites":["MDCFloatingLabelFoundation"],"line":38,"updatePoint":{"line":38,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCFloatingLabelFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCFloatingLabelFoundation"],"line":42,"updatePoint":{"line":42,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCFloatingLabelFoundation, [\n      'addClass',\n      'removeClass',\n      'getWidth',\n      'registerInteractionHandler',\n      'deregisterInteractionHandler',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#init should register animationend event listener","suites":["MDCFloatingLabelFoundation"],"line":52,"updatePoint":{"line":52,"column":55},"code":"  it('#init should register animationend event listener', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    expect(mockAdapter.registerInteractionHandler)\n        .toHaveBeenCalledWith('animationend', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#destroy should deregister animationend event listener","suites":["MDCFloatingLabelFoundation"],"line":59,"updatePoint":{"line":59,"column":60},"code":"  it('#destroy should deregister animationend event listener', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.destroy();\n    expect(mockAdapter.deregisterInteractionHandler)\n        .toHaveBeenCalledWith('animationend', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#getWidth returns the width of the label element scaled by 75%","suites":["MDCFloatingLabelFoundation"],"line":66,"updatePoint":{"line":66,"column":68},"code":"  it('#getWidth returns the width of the label element scaled by 75%', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const width = 100;\n    mockAdapter.getWidth.and.returnValue(width);\n    expect(foundation.getWidth()).toEqual(width);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#float called with shouldFloat is true, floats the label","suites":["MDCFloatingLabelFoundation"],"line":73,"updatePoint":{"line":73,"column":62},"code":"  it('#float called with shouldFloat is true, floats the label', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.float(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOAT_ABOVE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#float called with shouldFloat is false, de-floats the label","suites":["MDCFloatingLabelFoundation"],"line":80,"updatePoint":{"line":80,"column":66},"code":"  it('#float called with shouldFloat is false, de-floats the label', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.float(false);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOAT_ABOVE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#shake called with shouldShake is true, should add shake class","suites":["MDCFloatingLabelFoundation"],"line":87,"updatePoint":{"line":87,"column":68},"code":"  it('#shake called with shouldShake is true, should add shake class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.shake(true);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.LABEL_SHAKE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#shake called with shouldShake is false, should remove shake class","suites":["MDCFloatingLabelFoundation"],"line":93,"updatePoint":{"line":93,"column":72},"code":"  it('#shake called with shouldShake is false, should remove shake class',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.shake(false);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.LABEL_SHAKE);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#float called with shouldFloat is false, should remove shake class","suites":["MDCFloatingLabelFoundation"],"line":101,"updatePoint":{"line":101,"column":72},"code":"  it('#float called with shouldFloat is false, should remove shake class',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.float(false);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.LABEL_SHAKE);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#handleShakeAnimationEnd should remove LABEL_SHAKE class","suites":["MDCFloatingLabelFoundation"],"line":109,"updatePoint":{"line":109,"column":62},"code":"  it('#handleShakeAnimationEnd should remove LABEL_SHAKE class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    (foundation as any).handleShakeAnimationEnd();\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_SHAKE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"on animationend removes  class","suites":["MDCFloatingLabelFoundation"],"line":116,"updatePoint":{"line":116,"column":61},"code":"  it(`on animationend removes ${cssClasses.LABEL_SHAKE} class`, () => {\n    const {foundation, mockAdapter} =\n        setUpFoundationTest(MDCFloatingLabelFoundation);\n    const handlers = captureHandlers(mockAdapter, 'registerInteractionHandler');\n    foundation.init();\n    handlers['animationend']();\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_SHAKE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#setRequired called with isRequired is true, should add required class","suites":["MDCFloatingLabelFoundation"],"line":126,"updatePoint":{"line":126,"column":76},"code":"  it('#setRequired called with isRequired is true, should add required class',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setRequired(true);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(cssClasses.LABEL_REQUIRED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"#setRequired called with isRequired is false, should remove required class","suites":["MDCFloatingLabelFoundation"],"line":134,"updatePoint":{"line":134,"column":80},"code":"  it('#setRequired called with isRequired is false, should remove required class',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setRequired(false);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.LABEL_REQUIRED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-floating-label/test"},{"name":"attachTo initializes and returns an MDCFormField instance","suites":["MDCFormField"],"line":47,"updatePoint":{"line":47,"column":63},"code":"  it('attachTo initializes and returns an MDCFormField instance', () => {\n    expect(MDCFormField.attachTo(getFixture()) instanceof MDCFormField)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"get/set input","suites":["MDCFormField"],"line":52,"updatePoint":{"line":52,"column":19},"code":"  it('get/set input', () => {\n    const {component} = setupTest();\n    const input = {\n      ripple: undefined,\n    };\n\n    component.input = input;\n\n    expect(component.input === input).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#registerInteractionHandler adds an event listener to the label element","suites":["MDCFormField"],"line":63,"updatePoint":{"line":63,"column":84},"code":"  it('adapter#registerInteractionHandler adds an event listener to the label element',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('eventHandler');\n       const label = root.querySelector('label') as HTMLElement;\n\n       (component.getDefaultFoundation() as any)\n           .adapter.registerInteractionHandler('click', handler);\n       emitEvent(label, 'click');\n\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#deregisterInteractionHandler removes an event listener from the root element","suites":["MDCFormField"],"line":76,"updatePoint":{"line":76,"column":90},"code":"  it('adapter#deregisterInteractionHandler removes an event listener from the root element',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('eventHandler');\n       const label = root.querySelector('label') as HTMLElement;\n       label.addEventListener('click', handler);\n\n       (component.getDefaultFoundation() as any)\n           .adapter.deregisterInteractionHandler('click', handler);\n       emitEvent(label, 'click');\n\n       expect(handler).not.toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#activateInputRipple calls activate on the input ripple","suites":["MDCFormField"],"line":90,"updatePoint":{"line":90,"column":68},"code":"  it('adapter#activateInputRipple calls activate on the input ripple', () => {\n    const {component} = setupTest();\n    const ripple = {activate: jasmine.createSpy('activate')} as any;\n    const input = {ripple};\n\n    component.input = input;\n    (component.getDefaultFoundation() as any).adapter.activateInputRipple();\n\n    expect(ripple.activate).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#activateInputRipple does not throw if there is no input","suites":["MDCFormField"],"line":101,"updatePoint":{"line":101,"column":69},"code":"  it('adapter#activateInputRipple does not throw if there is no input', () => {\n    const {component} = setupTest();\n\n    expect(\n        () => (component.getDefaultFoundation() as any)\n                  .adapter.activateInputRipple)\n        .not.toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#activateInputRipple does not throw if the input has no ripple getter","suites":["MDCFormField"],"line":110,"updatePoint":{"line":110,"column":82},"code":"  it('adapter#activateInputRipple does not throw if the input has no ripple getter',\n     () => {\n       const {component} = setupTest();\n       const input = {ripple: undefined};\n\n       component.input = input;\n\n       expect(\n           () => (component.getDefaultFoundation() as any)\n                     .adapter.activateInputRipple)\n           .not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#deactivateInputRipple calls deactivate on the input ripple","suites":["MDCFormField"],"line":123,"updatePoint":{"line":123,"column":72},"code":"  it('adapter#deactivateInputRipple calls deactivate on the input ripple',\n     () => {\n       const {component} = setupTest();\n       const ripple = {deactivate: jasmine.createSpy('deactivate')} as any;\n       const input = {ripple};\n\n       component.input = input;\n       (component.getDefaultFoundation() as any)\n           .adapter.deactivateInputRipple();\n\n       expect(ripple.deactivate).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#deactivateInputRipple does not throw if there is no input","suites":["MDCFormField"],"line":136,"updatePoint":{"line":136,"column":71},"code":"  it('adapter#deactivateInputRipple does not throw if there is no input',\n     () => {\n       const {component} = setupTest();\n\n       expect(\n           () => (component.getDefaultFoundation() as any)\n                     .adapter.deactivateInputRipple)\n           .not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"adapter#deactivateInputRipple does not throw if the input has no ripple getter","suites":["MDCFormField"],"line":146,"updatePoint":{"line":146,"column":84},"code":"  it('adapter#deactivateInputRipple does not throw if the input has no ripple getter',\n     () => {\n       const {component} = setupTest();\n       const input = {ripple: undefined};\n\n       component.input = input;\n\n       expect(\n           () => (component.getDefaultFoundation() as any)\n                     .adapter.deactivateInputRipple)\n           .not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"exports cssClasses","suites":["MDCFormFieldFoundation"],"line":31,"updatePoint":{"line":31,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCFormFieldFoundation).toBeTruthy();\n    expect(MDCFormFieldFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"exports strings","suites":["MDCFormFieldFoundation"],"line":36,"updatePoint":{"line":36,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCFormFieldFoundation).toBeTruthy();\n    expect(MDCFormFieldFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCFormFieldFoundation"],"line":41,"updatePoint":{"line":41,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCFormFieldFoundation, [\n      'registerInteractionHandler',\n      'deregisterInteractionHandler',\n      'activateInputRipple',\n      'deactivateInputRipple',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"#init calls event registrations","suites":["MDCFormFieldFoundation"],"line":56,"updatePoint":{"line":56,"column":37},"code":"  it('#init calls event registrations', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.init();\n    expect(mockAdapter.registerInteractionHandler)\n        .toHaveBeenCalledWith('click', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"#destroy calls event deregistrations","suites":["MDCFormFieldFoundation"],"line":64,"updatePoint":{"line":64,"column":42},"code":"  it('#destroy calls event deregistrations', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.init();\n    foundation.destroy();\n    expect(mockAdapter.deregisterInteractionHandler)\n        .toHaveBeenCalledWith('click', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-form-field/test"},{"name":"attachTo initializes and returns a MDCIconButtonToggle instance","suites":["MDCIconButtonToggle"],"line":56,"updatePoint":{"line":56,"column":69},"code":"  it('attachTo initializes and returns a MDCIconButtonToggle instance', () => {\n    expect(\n        MDCIconButtonToggle.attachTo(document.createElement('i')) instanceof\n        MDCIconButtonToggle)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#constructor initializes the ripple on the root element","suites":["MDCIconButtonToggle"],"line":64,"updatePoint":{"line":64,"column":63},"code":"    it('#constructor initializes the ripple on the root element', () => {\n      const {root} = setupTest();\n      jasmine.clock().tick(1);\n      expect(root.classList.contains('mdc-ripple-upgraded')).toBe(true);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#destroy removes the ripple","suites":["MDCIconButtonToggle"],"line":70,"updatePoint":{"line":70,"column":35},"code":"    it('#destroy removes the ripple', () => {\n      const {root, component} = setupTest();\n      jasmine.clock().tick(1);\n      component.destroy();\n      jasmine.clock().tick(1);\n      expect(root.classList.contains('mdc-ripple-upgraded')).toBe(false);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"set/get on","suites":["MDCIconButtonToggle"],"line":79,"updatePoint":{"line":79,"column":16},"code":"  it('set/get on', () => {\n    const {root, component} = setupTest();\n    component.on = true;\n    expect(component.on).toBe(true);\n    expect(root.getAttribute('aria-pressed')).toEqual('true');\n\n    component.on = false;\n    expect(component.on).toBe(false);\n    expect(root.getAttribute('aria-pressed')).toEqual('false');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"get ripple returns a MDCRipple instance","suites":["MDCIconButtonToggle"],"line":90,"updatePoint":{"line":90,"column":45},"code":"  it('get ripple returns a MDCRipple instance', () => {\n    const {component} = setupTest();\n    expect(component.ripple instanceof MDCRipple).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#adapter.addClass adds a class to the root element","suites":["MDCIconButtonToggle"],"line":95,"updatePoint":{"line":95,"column":56},"code":"  it('#adapter.addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#adapter.removeClass removes a class from the root element","suites":["MDCIconButtonToggle"],"line":101,"updatePoint":{"line":101,"column":64},"code":"  it('#adapter.removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#adapter.setAttr sets an attribute on the root element","suites":["MDCIconButtonToggle"],"line":108,"updatePoint":{"line":108,"column":60},"code":"  it('#adapter.setAttr sets an attribute on the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any)\n        .adapter.setAttr('aria-label', 'hello');\n    expect(root.getAttribute('aria-label')).toEqual('hello');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#adapter.notifyChange broadcasts a  custom event","suites":["MDCIconButtonToggle"],"line":115,"updatePoint":{"line":116,"column":73},"code":"  it(`#adapter.notifyChange broadcasts a ${\n         MDCIconButtonToggleFoundation.strings.CHANGE_EVENT} custom event`,\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('custom event handler');\n       root.addEventListener(\n           MDCIconButtonToggleFoundation.strings.CHANGE_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyChange({});\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"assert keydown does not trigger ripple","suites":["MDCIconButtonToggle"],"line":126,"updatePoint":{"line":126,"column":44},"code":"  it('assert keydown does not trigger ripple', () => {\n    const {root} = setupTest();\n    emitEvent(root, 'keydown');\n    expect(root.classList.contains(cssClasses.FG_ACTIVATION)).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"assert keyup does not trigger ripple","suites":["MDCIconButtonToggle"],"line":132,"updatePoint":{"line":132,"column":42},"code":"  it('assert keyup does not trigger ripple', () => {\n    const {root} = setupTest();\n    emitEvent(root, 'keyup');\n    expect(root.classList.contains(cssClasses.FG_ACTIVATION)).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"click handler is added to root element","suites":["MDCIconButtonToggle"],"line":138,"updatePoint":{"line":138,"column":44},"code":"  it('click handler is added to root element', () => {\n    const {root, mockFoundation} = setupTest({createMockFoundation: true});\n    emitEvent(root, 'click');\n    expect(mockFoundation!.handleClick).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"click handler is removed from the root element on destroy","suites":["MDCIconButtonToggle"],"line":144,"updatePoint":{"line":144,"column":63},"code":"  it('click handler is removed from the root element on destroy', () => {\n    const {root, component, mockFoundation} =\n        setupTest({createMockFoundation: true});\n    component.destroy();\n    emitEvent(root, 'click');\n    expect(mockFoundation!.handleClick).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"exports strings","suites":["MDCIconButtonToggleFoundation"],"line":32,"updatePoint":{"line":32,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCIconButtonToggleFoundation).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"exports cssClasses","suites":["MDCIconButtonToggleFoundation"],"line":36,"updatePoint":{"line":36,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCIconButtonToggleFoundation).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCIconButtonToggleFoundation"],"line":40,"updatePoint":{"line":40,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCIconButtonToggleFoundation, [\n      'addClass',\n      'removeClass',\n      'hasClass',\n      'getAttr',\n      'setAttr',\n      'notifyChange',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#isOn is false if hasClass() returns false","suites":["MDCIconButtonToggleFoundation"],"line":57,"updatePoint":{"line":57,"column":76},"code":"  it(`#isOn is false if hasClass(${cssClasses.ICON_BUTTON_ON}) returns false`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.ICON_BUTTON_ON)\n           .and.returnValue(false);\n       expect(foundation.isOn()).toBe(false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#isOn is true if hasClass() returns true","suites":["MDCIconButtonToggleFoundation"],"line":65,"updatePoint":{"line":65,"column":74},"code":"  it(`#isOn is true if hasClass(${cssClasses.ICON_BUTTON_ON}) returns true`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.ICON_BUTTON_ON)\n           .and.returnValue(true);\n       expect(foundation.isOn()).toBe(true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#handleClick calls #toggle","suites":["MDCIconButtonToggleFoundation"],"line":73,"updatePoint":{"line":73,"column":32},"code":"  it('#handleClick calls #toggle', () => {\n    const {foundation} = setupTest();\n    foundation.init();\n    foundation.toggle = jasmine.createSpy('');\n    foundation.handleClick();\n    expect(foundation.toggle).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#handleClick calls notifyChange","suites":["MDCIconButtonToggleFoundation"],"line":81,"updatePoint":{"line":81,"column":37},"code":"  it('#handleClick calls notifyChange', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.ICON_BUTTON_ON)\n        .and.returnValue(true);\n    foundation.init();\n    foundation.handleClick();\n    expect(mockAdapter.notifyChange).toHaveBeenCalledWith({isOn: true});\n    expect(mockAdapter.notifyChange).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#toggle flips on","suites":["MDCIconButtonToggleFoundation"],"line":91,"updatePoint":{"line":91,"column":22},"code":"  it('#toggle flips on', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    mockAdapter.hasClass.withArgs(cssClasses.ICON_BUTTON_ON)\n        .and.returnValues(true, false);\n\n    foundation.toggle();\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.ICON_BUTTON_ON);\n    expect(mockAdapter.removeClass).toHaveBeenCalledTimes(1);\n    foundation.toggle();\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.ICON_BUTTON_ON);\n    expect(mockAdapter.addClass).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#toggle accepts boolean argument denoting toggle state","suites":["MDCIconButtonToggleFoundation"],"line":107,"updatePoint":{"line":107,"column":60},"code":"  it('#toggle accepts boolean argument denoting toggle state', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n\n    foundation.toggle(false);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.ICON_BUTTON_ON);\n    expect(mockAdapter.removeClass).toHaveBeenCalledTimes(1);\n    foundation.toggle(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.ICON_BUTTON_ON);\n    expect(mockAdapter.addClass).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#toggle sets \"aria-pressed\" to true when toggled on","suites":["MDCIconButtonToggleFoundation"],"line":121,"updatePoint":{"line":121,"column":57},"code":"  it('#toggle sets \"aria-pressed\" to true when toggled on', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.toggle(true);\n    expect(mockAdapter.setAttr)\n        .toHaveBeenCalledWith(strings.ARIA_PRESSED, 'true');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#toggle sets \"aria-pressed\" to false when toggled off","suites":["MDCIconButtonToggleFoundation"],"line":129,"updatePoint":{"line":129,"column":59},"code":"  it('#toggle sets \"aria-pressed\" to false when toggled off', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.toggle(false);\n    expect(mockAdapter.setAttr)\n        .toHaveBeenCalledWith(strings.ARIA_PRESSED, 'false');\n    expect(mockAdapter.setAttr).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#toggle sets aria label correctly when toggled on","suites":["MDCIconButtonToggleFoundation","Variant with toggled aria label"],"line":154,"updatePoint":{"line":154,"column":57},"code":"    it('#toggle sets aria label correctly when toggled on', () => {\n      const {foundation, mockAdapter} = initWithToggledAriaLabel({isOn: false});\n\n      mockAdapter.getAttr.withArgs(strings.DATA_ARIA_LABEL_ON)\n          .and.returnValue('on label');\n      mockAdapter.getAttr.withArgs(strings.DATA_ARIA_LABEL_OFF)\n          .and.returnValue('off label');\n      foundation.toggle(true);\n      expect(mockAdapter.setAttr)\n          .toHaveBeenCalledWith(strings.ARIA_LABEL, 'on label');\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"#toggle sets aria label correctly when toggled off","suites":["MDCIconButtonToggleFoundation","Variant with toggled aria label"],"line":166,"updatePoint":{"line":166,"column":58},"code":"    it('#toggle sets aria label correctly when toggled off', () => {\n      const {foundation, mockAdapter} = initWithToggledAriaLabel({isOn: false});\n\n      mockAdapter.getAttr.withArgs(strings.DATA_ARIA_LABEL_ON)\n          .and.returnValue('on label');\n      mockAdapter.getAttr.withArgs(strings.DATA_ARIA_LABEL_OFF)\n          .and.returnValue('off label');\n      foundation.toggle(false);\n      expect(mockAdapter.setAttr)\n          .toHaveBeenCalledWith(strings.ARIA_LABEL, 'off label');\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-icon-button/test"},{"name":"attachTo returns an MDCLineRipple instance","suites":["MDCLineRipple"],"line":39,"updatePoint":{"line":39,"column":48},"code":"  it('attachTo returns an MDCLineRipple instance', () => {\n    expect(MDCLineRipple.attachTo(getFixture()) instanceof MDCLineRipple)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#adapter.addClass adds a class to the element","suites":["MDCLineRipple"],"line":50,"updatePoint":{"line":50,"column":51},"code":"  it('#adapter.addClass adds a class to the element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#adapter.removeClass removes a class from the element","suites":["MDCLineRipple"],"line":56,"updatePoint":{"line":56,"column":59},"code":"  it('#adapter.removeClass removes a class from the element', () => {\n    const {root, component} = setupTest();\n\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#adapter.hasClass returns true if a class is on the element","suites":["MDCLineRipple"],"line":63,"updatePoint":{"line":63,"column":65},"code":"  it('#adapter.hasClass returns true if a class is on the element', () => {\n    const {root, component} = setupTest();\n\n    root.classList.add('foo');\n    const hasClass =\n        (component.getDefaultFoundation() as any).adapter.hasClass('foo');\n    expect(hasClass).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#adapter.setStyle adds a given style property to the element","suites":["MDCLineRipple"],"line":72,"updatePoint":{"line":72,"column":66},"code":"  it('#adapter.setStyle adds a given style property to the element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any)\n        .adapter.setStyle('color', 'blue');\n    expect(root.getAttribute('style')).toEqual('color: blue;');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#adapter.registerEventHandler adds event listener for a given event to the element","suites":["MDCLineRipple"],"line":79,"updatePoint":{"line":79,"column":88},"code":"  it('#adapter.registerEventHandler adds event listener for a given event to the element',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('transitionend handler');\n       (component.getDefaultFoundation() as any)\n           .adapter.registerEventHandler('transitionend', handler);\n       emitEvent(root, 'transitionend');\n\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#adapter.deregisterEventHandler removes event listener for a given event from the element","suites":["MDCLineRipple"],"line":90,"updatePoint":{"line":90,"column":95},"code":"  it('#adapter.deregisterEventHandler removes event listener for a given event from the element',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('transitionend handler');\n\n       root.addEventListener('transitionend', handler);\n       (component.getDefaultFoundation() as any)\n           .adapter.deregisterEventHandler('transitionend', handler);\n       emitEvent(root, 'transitionend');\n\n       expect(handler).not.toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"activate","suites":["MDCLineRipple"],"line":109,"updatePoint":{"line":109,"column":14},"code":"  it('activate', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.activate();\n    expect(mockFoundation.activate).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"deactivate","suites":["MDCLineRipple"],"line":115,"updatePoint":{"line":115,"column":16},"code":"  it('deactivate', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.deactivate();\n    expect(mockFoundation.deactivate).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"setRippleCenter","suites":["MDCLineRipple"],"line":121,"updatePoint":{"line":121,"column":21},"code":"  it('setRippleCenter', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.setRippleCenter(100);\n    expect(mockFoundation.setRippleCenter).toHaveBeenCalledWith(100);\n    expect(mockFoundation.setRippleCenter).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"exports cssClasses","suites":["MDCLineRippleFoundation"],"line":32,"updatePoint":{"line":32,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCLineRippleFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"exports strings","suites":["MDCLineRippleFoundation"],"line":36,"updatePoint":{"line":36,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCLineRippleFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCLineRippleFoundation"],"line":40,"updatePoint":{"line":40,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCLineRippleFoundation, [\n      'addClass',\n      'removeClass',\n      'hasClass',\n      'setStyle',\n      'registerEventHandler',\n      'deregisterEventHandler',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#init adds event listeners","suites":["MDCLineRippleFoundation"],"line":57,"updatePoint":{"line":57,"column":32},"code":"  it('#init adds event listeners', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n\n    expect(mockAdapter.registerEventHandler)\n        .toHaveBeenCalledWith('transitionend', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"#destroy removes event listeners","suites":["MDCLineRippleFoundation"],"line":65,"updatePoint":{"line":65,"column":38},"code":"  it('#destroy removes event listeners', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.destroy();\n\n    expect(mockAdapter.deregisterEventHandler)\n        .toHaveBeenCalledWith('transitionend', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"activate adds  class","suites":["MDCLineRippleFoundation"],"line":73,"updatePoint":{"line":73,"column":58},"code":"  it(`activate adds ${cssClasses.LINE_RIPPLE_ACTIVE} class`, () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.activate();\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_ACTIVE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"deactivate adds  class","suites":["MDCLineRippleFoundation"],"line":81,"updatePoint":{"line":81,"column":66},"code":"  it(`deactivate adds ${cssClasses.LINE_RIPPLE_DEACTIVATING} class`, () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.init();\n    foundation.deactivate();\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_DEACTIVATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"opacity event after adding deactivating class triggers triggers removal of activation classes","suites":["MDCLineRippleFoundation"],"line":90,"updatePoint":{"line":90,"column":99},"code":"  it('opacity event after adding deactivating class triggers triggers removal of activation classes',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.LINE_RIPPLE_DEACTIVATING)\n           .and.returnValue(true);\n       const event = {\n         propertyName: 'opacity',\n       } as TransitionEvent;\n\n       foundation.init();\n       foundation.handleTransitionEnd(event);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_DEACTIVATING);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_ACTIVE);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"non opacity transition event doesn't remove  class","suites":["MDCLineRippleFoundation"],"line":107,"updatePoint":{"line":108,"column":51},"code":"  it(`non opacity transition event doesn't remove ${\n         cssClasses.LINE_RIPPLE_DEACTIVATING} class`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.LINE_RIPPLE_DEACTIVATING)\n           .and.returnValue(true);\n       const event = {\n         propertyName: 'not-opacity',\n       } as TransitionEvent;\n       foundation.init();\n\n       foundation.handleTransitionEnd(event);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_DEACTIVATING);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_ACTIVE);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"opacity transition event doesn't remove  class if not deactivating","suites":["MDCLineRippleFoundation"],"line":125,"updatePoint":{"line":126,"column":71},"code":"  it(`opacity transition event doesn't remove ${\n         cssClasses.LINE_RIPPLE_DEACTIVATING} class if not deactivating`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.LINE_RIPPLE_DEACTIVATING)\n           .and.returnValue(false);\n       const event = {\n         propertyName: 'opacity',\n       } as TransitionEvent;\n       foundation.init();\n       foundation.handleTransitionEnd(event);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_DEACTIVATING);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.LINE_RIPPLE_ACTIVE);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"setRippleCenter sets style attribute","suites":["MDCLineRippleFoundation"],"line":142,"updatePoint":{"line":142,"column":42},"code":"  it('setRippleCenter sets style attribute', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const transformOriginValue = 100;\n\n    foundation.init();\n    foundation.setRippleCenter(transformOriginValue);\n\n    expect(mockAdapter.setStyle)\n        .toHaveBeenCalledWith('transform-origin', jasmine.any(String));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-line-ripple/test"},{"name":"attachTo initializes and returns a MDCLinearProgress instance","suites":["MDCLinearProgress"],"line":78,"updatePoint":{"line":78,"column":67},"code":"  it('attachTo initializes and returns a MDCLinearProgress instance', () => {\n    expect(\n        MDCLinearProgress.attachTo(getFixture()) instanceof MDCLinearProgress)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"transitionend event calls foundation transitionend handler","suites":["MDCLinearProgress"],"line":84,"updatePoint":{"line":84,"column":64},"code":"  it('transitionend event calls foundation transitionend handler', () => {\n    const {root, mockFoundation} = setupTest(true);\n    emitEvent(root, 'transitionend');\n    expect(mockFoundation.handleTransitionEnd).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"set indeterminate","suites":["MDCLinearProgress"],"line":90,"updatePoint":{"line":90,"column":23},"code":"  it('set indeterminate', () => {\n    const {root, component} = setupTest();\n\n    component.determinate = false;\n    expect(root.classList.contains('mdc-linear-progress--indeterminate'))\n        .toBeTruthy();\n    expect(root.getAttribute(MDCLinearProgressFoundation.strings.ARIA_VALUENOW))\n        .toEqual(null);\n    expect(root.getAttribute(MDCLinearProgressFoundation.strings.ARIA_VALUEMAX))\n        .toEqual(null);\n    expect(root.getAttribute(MDCLinearProgressFoundation.strings.ARIA_VALUEMIN))\n        .toEqual(null);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"set progress","suites":["MDCLinearProgress"],"line":104,"updatePoint":{"line":104,"column":18},"code":"  it('set progress', () => {\n    const {root, component} = setupTest();\n\n    component.progress = 0.5;\n    const primaryBar =\n        root.querySelector(\n            MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR) as\n        HTMLElement;\n    // External GitHub TS compiler insists that `buffer.style.transform` could\n    // be null\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    expect('scaleX(0.5)').toEqual(primaryBar.style.transform as string);\n    expect(root.getAttribute(MDCLinearProgressFoundation.strings.ARIA_VALUENOW))\n        .toEqual('0.5');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"set buffer","suites":["MDCLinearProgress"],"line":120,"updatePoint":{"line":120,"column":16},"code":"  it('set buffer', () => {\n    const {root, component} = setupTest();\n\n    component.buffer = 0.5;\n    const buffer =\n        root.querySelector(\n            MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR) as\n        HTMLElement;\n    // External GitHub TS compiler insists that `buffer.style.transform` could\n    // be null\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    expect('50%').toEqual(buffer.style.flexBasis as string);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"open and close","suites":["MDCLinearProgress"],"line":134,"updatePoint":{"line":134,"column":20},"code":"  it('open and close', () => {\n    const {root, component} = setupTest();\n\n    component.close();\n    expect(root.classList.contains('mdc-linear-progress--closed')).toBeTrue();\n    emitEvent(root, 'transitionend');\n    expect(root.classList.contains('mdc-linear-progress--closed-animation-off'))\n        .toBeTrue();\n\n    component.open();\n    expect(root.classList.contains('mdc-linear-progress--closed')).toBeFalse();\n    expect(root.classList.contains('mdc-linear-progress--closed-animation-off'))\n        .toBeFalse();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"will not error if there is no resize observer","suites":["MDCLinearProgress","attach to dom"],"line":166,"updatePoint":{"line":166,"column":53},"code":"    it('will not error if there is no resize observer', () => {\n      ((window as unknown as WithMDCResizeObserver).ResizeObserver as unknown as\n       null) = null;\n      component = setupTest().component;\n\n      const foundation =\n          (component as unknown as WithObserverFoundation).foundation;\n      const observer = foundation.observer;\n\n      expect(observer).toBeNull();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"will update size on resize","suites":["MDCLinearProgress","attach to dom"],"line":178,"updatePoint":{"line":178,"column":34},"code":"    it('will update size on resize', async () => {\n      if (!RO) {\n        // skip tests on IE which wouldn't run these anyway\n        return;\n      }\n\n      let mockObserverInstance: MockObserver|null = null;\n      // we need to mock resize observer to prevent external test infrastructure\n      // flakyness as resize observer is not very consistent in timings and\n      // calls across browsers and dom structures\n      class MockObserver {\n        observedElement: HTMLElement|null = null;\n\n        constructor(public callback: MDCResizeObserverCallback) {\n          this.callback = callback;\n        }\n\n        observe(element: HTMLElement) {\n          this.observedElement = element;\n          this.triggerResize(element.offsetWidth);\n          mockObserverInstance = this;\n        }\n\n        disconnect() {}\n\n        triggerResize(width: number) {\n          const fakeEntry = {contentRect: {width}};\n          this.callback(\n              [fakeEntry as unknown as MDCResizeObserverEntry],\n              this as unknown as MDCResizeObserver);\n        }\n      }\n\n      (window as unknown as WithMDCResizeObserver).ResizeObserver =\n          MockObserver as unknown as typeof RO;\n      ({root, component} = setupTest());\n      document.body.appendChild(root);\n      component.determinate = false;\n\n      expect(root.style.width).toBe('100px');\n\n      let actualRounded = roundPixelsToTwoDecimals(\n          root.style.getPropertyValue('--mdc-linear-progress-primary-half'));\n      let expected =\n          roundPixelsToTwoDecimals(`${percentages.PRIMARY_HALF * 100}px`);\n      expect(actualRounded).toEqual(expected);\n      expect(mockObserverInstance).toBeTruthy();\n\n      root.style.setProperty('width', '200px');\n\n      mockObserverInstance!.triggerResize(200);\n      actualRounded = roundPixelsToTwoDecimals(\n          root.style.getPropertyValue('--mdc-linear-progress-primary-half'));\n      expected =\n          roundPixelsToTwoDecimals(`${percentages.PRIMARY_HALF * 200}px`);\n      expect(actualRounded).toEqual(expected);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"exports strings","suites":["MDCLinearProgressFoundation"],"line":45,"updatePoint":{"line":45,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCLinearProgressFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"exports cssClasses","suites":["MDCLinearProgressFoundation"],"line":49,"updatePoint":{"line":49,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCLinearProgressFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCLinearProgressFoundation"],"line":53,"updatePoint":{"line":53,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCLinearProgressFoundation, [\n      'addClass',\n      'attachResizeObserver',\n      'forceLayout',\n      'getWidth',\n      'hasClass',\n      'removeAttribute',\n      'removeClass',\n      'setAttribute',\n      'setBufferBarStyle',\n      'setPrimaryBarStyle',\n      'setStyle',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setDeterminate false updates state, adds class, resets transforms, and removes aria-valuenow","suites":["MDCLinearProgressFoundation"],"line":75,"updatePoint":{"line":75,"column":99},"code":"  it('#setDeterminate false updates state, adds class, resets transforms, and removes aria-valuenow',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n           .and.returnValue(false);\n       foundation.init();\n       foundation.setDeterminate(false);\n       expect(foundation.isDeterminate()).toBe(false);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(cssClasses.INDETERMINATE_CLASS);\n       expect(mockAdapter.setPrimaryBarStyle)\n           .toHaveBeenCalledWith('transform', 'scaleX(1)');\n       expect(mockAdapter.setBufferBarStyle)\n           .toHaveBeenCalledWith('flex-basis', '100%');\n       expect(mockAdapter.removeAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUENOW);\n       expect(mockAdapter.removeAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUEMAX);\n       expect(mockAdapter.removeAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUEMIN);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setDeterminate false updates custom props","suites":["MDCLinearProgressFoundation"],"line":97,"updatePoint":{"line":97,"column":48},"code":"  it('#setDeterminate false updates custom props', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getWidth.and.returnValue(100);\n    mockAdapter.attachResizeObserver.and.returnValue(RO);\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(false);\n    foundation.init();\n    expect(mockAdapter.attachResizeObserver).toHaveBeenCalled();\n    expect(mockAdapter.setStyle).toHaveBeenCalledTimes(0);\n    foundation.setDeterminate(false);\n    expect(foundation.isDeterminate()).toBe(false);\n\n    if (!RO) {\n      expect(mockAdapter.setStyle).toHaveBeenCalledTimes(0);\n      return;\n    }\n\n    expect(mockAdapter.setStyle).toHaveBeenCalledTimes(10);\n    const testPercentages = multiplyPercentages(100);\n    expect(mockAdapter.setStyle.calls.allArgs()).toEqual([\n      [\n        '--mdc-linear-progress-primary-half',\n        `${testPercentages.PRIMARY_HALF}px`\n      ],\n      [\n        '--mdc-linear-progress-primary-half-neg',\n        `-${testPercentages.PRIMARY_HALF}px`\n      ],\n      [\n        '--mdc-linear-progress-primary-full',\n        `${testPercentages.PRIMARY_FULL}px`\n      ],\n      [\n        '--mdc-linear-progress-primary-full-neg',\n        `-${testPercentages.PRIMARY_FULL}px`\n      ],\n      [\n        '--mdc-linear-progress-secondary-quarter',\n        `${testPercentages.SECONDARY_QUARTER}px`\n      ],\n      [\n        '--mdc-linear-progress-secondary-quarter-neg',\n        `-${testPercentages.SECONDARY_QUARTER}px`\n      ],\n      [\n        '--mdc-linear-progress-secondary-half',\n        `${testPercentages.SECONDARY_HALF}px`\n      ],\n      [\n        '--mdc-linear-progress-secondary-half-neg',\n        `-${testPercentages.SECONDARY_HALF}px`\n      ],\n      [\n        '--mdc-linear-progress-secondary-full',\n        `${testPercentages.SECONDARY_FULL}px`\n      ],\n      [\n        '--mdc-linear-progress-secondary-full-neg',\n        `-${testPercentages.SECONDARY_FULL}px`\n      ]\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setDeterminate updates state and removes class","suites":["MDCLinearProgressFoundation"],"line":160,"updatePoint":{"line":160,"column":53},"code":"  it('#setDeterminate updates state and removes class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(false);\n    foundation.init();\n    foundation.setDeterminate(true);\n    expect(foundation.isDeterminate()).toBe(true);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.INDETERMINATE_CLASS);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setDeterminate restores previous progress value after toggled from false to true","suites":["MDCLinearProgressFoundation"],"line":171,"updatePoint":{"line":171,"column":87},"code":"  it('#setDeterminate restores previous progress value after toggled from false to true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       foundation.setProgress(0.123);\n       foundation.setDeterminate(false);\n       foundation.setDeterminate(true);\n\n       checkNumTimesSpyCalledWithArgs(\n           mockAdapter.setPrimaryBarStyle, ['transform', 'scaleX(0.123)'], 2);\n       checkNumTimesSpyCalledWithArgs(\n           mockAdapter.setAttribute, [strings.ARIA_VALUENOW, '0.123'], 2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setDeterminate restores previous buffer value after toggled from false to true","suites":["MDCLinearProgressFoundation"],"line":185,"updatePoint":{"line":185,"column":85},"code":"  it('#setDeterminate restores previous buffer value after toggled from false to true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       foundation.setBuffer(0.123);\n       foundation.setDeterminate(false);\n       foundation.setDeterminate(true);\n       checkNumTimesSpyCalledWithArgs(\n           mockAdapter.setBufferBarStyle, ['flex-basis', '12.3%'], 2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setDeterminate updates progress value set while determinate is false after determinate is true","suites":["MDCLinearProgressFoundation"],"line":196,"updatePoint":{"line":196,"column":101},"code":"  it('#setDeterminate updates progress value set while determinate is false after determinate is true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       foundation.setDeterminate(false);\n       foundation.setProgress(0.123);\n       foundation.setDeterminate(true);\n       expect(mockAdapter.setPrimaryBarStyle)\n           .toHaveBeenCalledWith('transform', 'scaleX(0.123)');\n       expect(mockAdapter.setAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUENOW, '0.123');\n       expect(mockAdapter.setAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUEMAX, '1');\n       expect(mockAdapter.setAttribute)\n           .toHaveBeenCalledWith(strings.ARIA_VALUEMIN, '0');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#calculateAndSetDimensions called on initialization with indeterminate class","suites":["MDCLinearProgressFoundation"],"line":213,"updatePoint":{"line":213,"column":82},"code":"  it('#calculateAndSetDimensions called on initialization with indeterminate class',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n           .and.returnValue(true);\n       mockAdapter.attachResizeObserver.and.returnValue(RO);\n       foundation.init();\n       expect(mockAdapter.setStyle).toHaveBeenCalledTimes(RO ? 10 : 0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#calculateAndSetDimensions called only on setDeterminate(false)","suites":["MDCLinearProgressFoundation"],"line":223,"updatePoint":{"line":223,"column":69},"code":"  it('#calculateAndSetDimensions called only on setDeterminate(false)', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(true);\n    mockAdapter.attachResizeObserver.and.returnValue(RO);\n    foundation.init();\n    expect(mockAdapter.setStyle).toHaveBeenCalledTimes(RO ? 10 : 0);\n\n    foundation.setDeterminate(true);\n\n    expect(mockAdapter.setStyle).toHaveBeenCalledTimes(RO ? 10 : 0);\n\n    foundation.setDeterminate(false);\n\n    expect(mockAdapter.setStyle).toHaveBeenCalledTimes(RO ? 20 : 0);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#calculateAndSetDimensions restarts animation with a forced reflow","suites":["MDCLinearProgressFoundation"],"line":240,"updatePoint":{"line":240,"column":72},"code":"  it('#calculateAndSetDimensions restarts animation with a forced reflow',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n           .and.returnValue(true);\n       mockAdapter.attachResizeObserver.and.returnValue(RO);\n       foundation.init();\n       if (RO) {\n         expect(mockAdapter.addClass)\n             .toHaveBeenCalledWith(cssClasses.ANIMATION_READY_CLASS);\n         expect(mockAdapter.forceLayout).toHaveBeenCalledTimes(1);\n         expect(mockAdapter.removeClass)\n             .toHaveBeenCalledWith(cssClasses.ANIMATION_READY_CLASS);\n       } else {\n         expect(mockAdapter.setStyle).toHaveBeenCalledTimes(0);\n       }\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setProgress updates state, sets transform and aria-valuenow","suites":["MDCLinearProgressFoundation"],"line":258,"updatePoint":{"line":258,"column":66},"code":"  it('#setProgress updates state, sets transform and aria-valuenow', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(false);\n    foundation.init();\n    foundation.setProgress(0.5);\n    expect(foundation.getProgress()).toEqual(0.5);\n    expect(mockAdapter.setPrimaryBarStyle)\n        .toHaveBeenCalledWith('transform', 'scaleX(0.5)');\n    expect(mockAdapter.setAttribute)\n        .toHaveBeenCalledWith(strings.ARIA_VALUENOW, '0.5');\n    expect(foundation.getProgress()).toEqual(0.5);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setProgress on indeterminate does nothing","suites":["MDCLinearProgressFoundation"],"line":272,"updatePoint":{"line":272,"column":48},"code":"  it('#setProgress on indeterminate does nothing', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(true);\n    foundation.init();\n    foundation.setProgress(0.5);\n    expect(mockAdapter.setPrimaryBarStyle).not.toHaveBeenCalled();\n    expect(mockAdapter.setAttribute).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setBuffer sets flex-basis","suites":["MDCLinearProgressFoundation"],"line":282,"updatePoint":{"line":282,"column":32},"code":"  it('#setBuffer sets flex-basis', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(false);\n    foundation.init();\n    foundation.setBuffer(0.5);\n    expect(mockAdapter.setBufferBarStyle)\n        .toHaveBeenCalledWith('flex-basis', '50%');\n    expect(foundation.getBuffer()).toEqual(0.5);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#setBuffer on indeterminate does nothing","suites":["MDCLinearProgressFoundation"],"line":293,"updatePoint":{"line":293,"column":46},"code":"  it('#setBuffer on indeterminate does nothing', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.INDETERMINATE_CLASS)\n        .and.returnValue(true);\n    foundation.init();\n    foundation.setBuffer(0.5);\n    expect(mockAdapter.setBufferBarStyle).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#open removes class and aria-hidden","suites":["MDCLinearProgressFoundation"],"line":302,"updatePoint":{"line":302,"column":41},"code":"  it('#open removes class and aria-hidden', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.open();\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.CLOSED_CLASS);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.CLOSED_ANIMATION_OFF_CLASS);\n    expect(mockAdapter.removeAttribute)\n        .toHaveBeenCalledWith(strings.ARIA_HIDDEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#close adds class and aria-hidden","suites":["MDCLinearProgressFoundation"],"line":314,"updatePoint":{"line":314,"column":39},"code":"  it('#close adds class and aria-hidden', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.close();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.CLOSED_CLASS);\n    expect(mockAdapter.setAttribute)\n        .toHaveBeenCalledWith(strings.ARIA_HIDDEN, 'true');\n    mockAdapter.hasClass.withArgs(cssClasses.CLOSED_CLASS)\n        .and.returnValue(true);\n    foundation.handleTransitionEnd();\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.CLOSED_ANIMATION_OFF_CLASS);\n    expect(foundation.isClosed()).toBeTrue();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"#destroy disconnects the resize observer","suites":["MDCLinearProgressFoundation"],"line":329,"updatePoint":{"line":329,"column":46},"code":"  it('#destroy disconnects the resize observer', () => {\n    const {foundation, mockAdapter} = setupTest();\n    let disconnected = false;\n    const mockedObserver = {\n      disconnect: () => {\n        disconnected = true;\n      }\n    };\n    mockAdapter.attachResizeObserver.and.returnValue(mockedObserver);\n    foundation.init();\n    const withObserver =\n        foundation as unknown as {observer: typeof mockedObserver};\n\n    expect(withObserver.observer).toEqual(mockedObserver);\n    expect(disconnected).toBeFalse();\n\n    foundation.destroy();\n\n    expect(disconnected).toBeTrue();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-linear-progress/test"},{"name":"attachTo initializes and returns a MDCList instance","suites":["MDCList"],"line":138,"updatePoint":{"line":138,"column":57},"code":"  it('attachTo initializes and returns a MDCList instance', () => {\n    expect(MDCList.attachTo(getFixture()) instanceof MDCList).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"component calls setVerticalOrientation on the foundation if aria-orientation is not set","suites":["MDCList"],"line":142,"updatePoint":{"line":142,"column":93},"code":"  it('component calls setVerticalOrientation on the foundation if aria-orientation is not set',\n     () => {\n       const {mockFoundation} = setupTest();\n       expect(mockFoundation.setVerticalOrientation).toHaveBeenCalledWith(true);\n       expect(mockFoundation.setVerticalOrientation).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"component calls setVerticalOrientation(false) on the foundation if aria-orientation=horizontal","suites":["MDCList"],"line":149,"updatePoint":{"line":149,"column":100},"code":"  it('component calls setVerticalOrientation(false) on the foundation if aria-orientation=horizontal',\n     () => {\n       const root = getFixture();\n       root.setAttribute('aria-orientation', 'horizontal');\n       const {mockFoundation} = setupTest(root);\n       expect(mockFoundation.setVerticalOrientation)\n           .toHaveBeenCalledWith(false);\n       expect(mockFoundation.setVerticalOrientation).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"component calls setVerticalOrientation(true) on the foundation if aria-orientation=vertical","suites":["MDCList"],"line":159,"updatePoint":{"line":159,"column":97},"code":"  it('component calls setVerticalOrientation(true) on the foundation if aria-orientation=vertical',\n     () => {\n       const root = getFixture();\n       root.setAttribute('aria-orientation', 'vertical');\n       const {mockFoundation} = setupTest(root);\n       expect(mockFoundation.setVerticalOrientation).toHaveBeenCalledWith(true);\n       expect(mockFoundation.setVerticalOrientation).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#initializeListType populates selectedIndex based on preselected checkbox items","suites":["MDCList"],"line":168,"updatePoint":{"line":168,"column":85},"code":"  it('#initializeListType populates selectedIndex based on preselected checkbox items',\n     () => {\n       const {root, component, mockFoundation} = setupTest();\n       const listElements =\n           [].slice.call(root.querySelectorAll(\n               `.${deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS]}`)) as\n           Element[];\n       listElements.forEach((itemEl: Element) => {\n         itemEl.setAttribute('role', 'checkbox');\n       });\n\n       listElements[2].setAttribute('aria-checked', 'true');\n       component.initializeListType();\n       expect(mockFoundation.setSelectedIndex).toHaveBeenCalledWith([2]);\n       expect(mockFoundation.setSelectedIndex).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#initializeListType populates selectedIndex based on preselected radio item","suites":["MDCList"],"line":185,"updatePoint":{"line":185,"column":81},"code":"  it('#initializeListType populates selectedIndex based on preselected radio item',\n     () => {\n       const {root, component, mockFoundation} = setupTest();\n       const listElements = root.querySelectorAll(\n           `.${deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS]}`);\n       listElements[3].setAttribute('role', 'radio');\n       listElements[3].setAttribute('aria-checked', 'true');\n\n       component.initializeListType();\n       expect(mockFoundation.setSelectedIndex).toHaveBeenCalledWith(3);\n       expect(mockFoundation.setSelectedIndex).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#initializeListType does not populate selectedIndex when no item is selected","suites":["MDCList"],"line":198,"updatePoint":{"line":198,"column":82},"code":"  it('#initializeListType does not populate selectedIndex when no item is selected',\n     () => {\n       const {component, mockFoundation} = setupTest();\n       component.initializeListType();\n       expect(mockFoundation.setSelectedIndex)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setEnabled calls foundation method setEnabled with given index and enabled state.","suites":["MDCList"],"line":206,"updatePoint":{"line":206,"column":88},"code":"  it('#setEnabled calls foundation method setEnabled with given index and enabled state.',\n     () => {\n       const {component, mockFoundation} = setupTest();\n       component.setEnabled(1, true);\n       expect(mockFoundation.setEnabled).toHaveBeenCalledWith(1, true);\n       expect(mockFoundation.setEnabled).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#getTypeaheadInProgress calls foundation method","suites":["MDCList"],"line":214,"updatePoint":{"line":214,"column":53},"code":"  it('#getTypeaheadInProgress calls foundation method', () => {\n    const {component, mockFoundation} = setupTest();\n    component.typeaheadInProgress;\n    expect(mockFoundation.isTypeaheadInProgress).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#typeaheadMatchItem calls foundation method with given index and starting index.","suites":["MDCList"],"line":220,"updatePoint":{"line":220,"column":86},"code":"  it('#typeaheadMatchItem calls foundation method with given index and starting index.',\n     () => {\n       const {component, mockFoundation} = setupTest();\n       component.typeaheadMatchItem('a', 2);\n       expect(mockFoundation.typeaheadMatchItem)\n           .toHaveBeenCalledWith('a', 2, true);\n       expect(mockFoundation.typeaheadMatchItem).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#getListItemCount returns correct number of list items","suites":["MDCList"],"line":229,"updatePoint":{"line":229,"column":67},"code":"  it('adapter#getListItemCount returns correct number of list items', () => {\n    const {root, component} = setupTest();\n    document.body.appendChild(root);\n    const number = root.querySelectorAll('.mdc-deprecated-list-item').length;\n    expect(number).toEqual(\n        (component.getDefaultFoundation() as any).adapter.getListItemCount());\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#getFocusedElementIndex returns the index of the currently selected element","suites":["MDCList"],"line":238,"updatePoint":{"line":238,"column":88},"code":"  it('adapter#getFocusedElementIndex returns the index of the currently selected element',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       (root.querySelectorAll('.mdc-deprecated-list-item')[0] as\n        HTMLInputElement)\n           .focus();\n       expect(0).toEqual((component.getDefaultFoundation() as any)\n                             .adapter.getFocusedElementIndex());\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#setAttributeForElementIndex does nothing if the element at index does not exist","suites":["MDCList"],"line":250,"updatePoint":{"line":250,"column":93},"code":"  it('adapter#setAttributeForElementIndex does nothing if the element at index does not exist',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const func = () => {\n         (component.getDefaultFoundation() as any)\n             .adapter.setAttributeForElementIndex(5, 'foo', 'bar');\n       };\n       expect(func).not.toThrow();\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#setAttributeForElementIndex sets the attribute for the list element at index specified","suites":["MDCList"],"line":262,"updatePoint":{"line":262,"column":100},"code":"  it('adapter#setAttributeForElementIndex sets the attribute for the list element at index specified',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const selectedNode =\n           root.querySelectorAll('.mdc-deprecated-list-item')[1] as HTMLElement;\n       (component.getDefaultFoundation() as any)\n           .adapter.setAttributeForElementIndex(1, 'foo', 'bar');\n       expect('bar').toEqual(selectedNode.getAttribute('foo') as string);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#addClassForElementIndex does nothing if the element at index does not exist","suites":["MDCList"],"line":274,"updatePoint":{"line":274,"column":89},"code":"  it('adapter#addClassForElementIndex does nothing if the element at index does not exist',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const func = () => {\n         (component.getDefaultFoundation() as any)\n             .adapter.addClassForElementIndex(5, 'foo');\n       };\n       expect(func).not.toThrow();\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#addClassForElementIndex adds the class to the list element at index specified","suites":["MDCList"],"line":286,"updatePoint":{"line":286,"column":91},"code":"  it('adapter#addClassForElementIndex adds the class to the list element at index specified',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const selectedNode =\n           root.querySelectorAll('.mdc-deprecated-list-item')[1];\n       // Note that this uses the unmapped class name since the adapter will\n       // perform its own mapping.\n       (component.getDefaultFoundation() as any)\n           .adapter.addClassForElementIndex(\n               1, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n       expect(selectedNode.classList.contains(\n                  deprecatedClassNameMap[cssClasses.LIST_ITEM_ACTIVATED_CLASS]))\n           .toBe(true);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#removeClassForElementIndex does nothing if the element at index does not exist","suites":["MDCList"],"line":303,"updatePoint":{"line":303,"column":92},"code":"  it('adapter#removeClassForElementIndex does nothing if the element at index does not exist',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const func = () => {\n         (component.getDefaultFoundation() as any)\n             .adapter.removeClassForElementIndex(5, 'foo');\n       };\n       expect(func).not.toThrow();\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#removeClassForElementIndex removes the class from the list element at index specified","suites":["MDCList"],"line":315,"updatePoint":{"line":315,"column":99},"code":"  it('adapter#removeClassForElementIndex removes the class from the list element at index specified',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const selectedNode =\n           root.querySelectorAll('.mdc-deprecated-list-item')[1];\n       selectedNode.classList.add(\n           deprecatedClassNameMap[cssClasses.LIST_ITEM_ACTIVATED_CLASS]);\n       // Note that this uses the unmapped class name since the adapter will\n       // perform its own mapping.\n       (component.getDefaultFoundation() as any)\n           .adapter.removeClassForElementIndex(\n               1, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n       expect(selectedNode.classList.contains(\n                  deprecatedClassNameMap[cssClasses.LIST_ITEM_ACTIVATED_CLASS]))\n           .toBe(false);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#focusItemAtIndex does not throw an error if element at index is undefined/null","suites":["MDCList"],"line":334,"updatePoint":{"line":334,"column":92},"code":"  it('adapter#focusItemAtIndex does not throw an error if element at index is undefined/null',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const func = () => {\n         (component.getDefaultFoundation() as any).adapter.focusItemAtIndex(5);\n       };\n       expect(func).not.toThrow();\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#focusItemAtIndex focuses the list item at the index specified","suites":["MDCList"],"line":345,"updatePoint":{"line":345,"column":75},"code":"  it('adapter#focusItemAtIndex focuses the list item at the index specified',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const items = root.querySelectorAll('.mdc-deprecated-list-item');\n       (items[0] as HTMLElement).focus();\n       (component.getDefaultFoundation() as any).adapter.focusItemAtIndex(1);\n       expect(document.activeElement === items[1]).toBe(true);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#setTabIndexForListItemChildren sets the child button/a elements of index","suites":["MDCList"],"line":356,"updatePoint":{"line":356,"column":86},"code":"  it('adapter#setTabIndexForListItemChildren sets the child button/a elements of index',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const listItems = root.querySelectorAll('.mdc-deprecated-list-item');\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setTabIndexForListItemChildren(0, 0);\n       (component.getDefaultFoundation() as any)\n           .adapter.setTabIndexForListItemChildren(1, 0);\n\n       expect(1).toEqual(\n           listItems[0].querySelectorAll('[tabindex=\"0\"]').length);\n       expect(1).toEqual(\n           listItems[1].querySelectorAll('[tabindex=\"0\"]').length);\n\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"layout adds tabindex=-1 to all list items without a tabindex","suites":["MDCList"],"line":375,"updatePoint":{"line":375,"column":66},"code":"  it('layout adds tabindex=-1 to all list items without a tabindex', () => {\n    const {root} = setupTest();\n    expect(0).toEqual(\n        root.querySelectorAll('.mdc-deprecated-list-item:not([tabindex])')\n            .length);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"layout adds tabindex=-1 to all list item button/a elements","suites":["MDCList"],"line":382,"updatePoint":{"line":382,"column":64},"code":"  it('layout adds tabindex=-1 to all list item button/a elements', () => {\n    const {root} = setupTest();\n    expect(0).toEqual(root.querySelectorAll('button:not([tabindex])').length);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#getPrimaryText returns the appropriate text for one line list","suites":["MDCList"],"line":387,"updatePoint":{"line":387,"column":68},"code":"  it('#getPrimaryText returns the appropriate text for one line list', () => {\n    const {root, component} = setupTest();\n    const item =\n        root.querySelectorAll('.mdc-deprecated-list-item')[2] as HTMLElement;\n    document.body.appendChild(root);\n    expect(component.getPrimaryText(item)).toEqual('Pasta');\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#getPrimaryText returns the appropriate text for two line list","suites":["MDCList"],"line":396,"updatePoint":{"line":396,"column":68},"code":"  it('#getPrimaryText returns the appropriate text for two line list', () => {\n    const {root, component} = setupTest(getTwoLineFixture());\n    const item =\n        root.querySelectorAll('.mdc-deprecated-list-item')[2] as HTMLElement;\n    document.body.appendChild(root);\n    expect(component.getPrimaryText(item)).toEqual('Pasta');\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"vertical calls setVerticalOrientation on foundation","suites":["MDCList"],"line":405,"updatePoint":{"line":405,"column":57},"code":"  it('vertical calls setVerticalOrientation on foundation', () => {\n    const {component, mockFoundation} = setupTest();\n    component.vertical = false;\n    expect(mockFoundation.setVerticalOrientation).toHaveBeenCalledWith(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"wrapFocus calls setWrapFocus on foundation","suites":["MDCList"],"line":411,"updatePoint":{"line":411,"column":48},"code":"  it('wrapFocus calls setWrapFocus on foundation', () => {\n    const {component, mockFoundation} = setupTest();\n    component.wrapFocus = true;\n    expect(mockFoundation.setWrapFocus).toHaveBeenCalledWith(true);\n    expect(mockFoundation.setWrapFocus).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"singleSelection calls foundation setSingleSelection with the provided value","suites":["MDCList"],"line":418,"updatePoint":{"line":418,"column":81},"code":"  it('singleSelection calls foundation setSingleSelection with the provided value',\n     () => {\n       const {component, mockFoundation} = setupTest();\n       component.singleSelection = true;\n       expect(mockFoundation.setSingleSelection).toHaveBeenCalledWith(true);\n       expect(mockFoundation.setSingleSelection).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"selectedIndex calls setSelectedIndex on foundation","suites":["MDCList"],"line":426,"updatePoint":{"line":426,"column":56},"code":"  it('selectedIndex calls setSelectedIndex on foundation', () => {\n    const {component, mockFoundation} = setupTest();\n    component.selectedIndex = 1;\n    expect(mockFoundation.setSelectedIndex).toHaveBeenCalledWith(1);\n    expect(mockFoundation.setSelectedIndex).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#selectedIndex getter proxies foundations getSelectedIndex method","suites":["MDCList"],"line":433,"updatePoint":{"line":433,"column":71},"code":"  it('#selectedIndex getter proxies foundations getSelectedIndex method',\n     () => {\n       const {component, mockFoundation} = setupTest();\n\n       (mockFoundation as any).getSelectedIndex.and.returnValue(3);\n       expect(3).toEqual(component.selectedIndex as number);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"handleClick handler is added to root element","suites":["MDCList"],"line":441,"updatePoint":{"line":441,"column":50},"code":"  it('handleClick handler is added to root element', () => {\n    const {root, mockFoundation} = setupTest();\n    document.body.appendChild(root);\n    const event = document.createEvent('Event');\n    event.initEvent('click', true, true);\n    const listElementItem =\n        root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n    listElementItem.dispatchEvent(event);\n    expect(mockFoundation.handleClick).toHaveBeenCalledWith(0, true, jasmine.any(Event));\n    expect(mockFoundation.handleClick).toHaveBeenCalledTimes(1);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"focusIn handler is added to root element","suites":["MDCList"],"line":454,"updatePoint":{"line":454,"column":46},"code":"  it('focusIn handler is added to root element', () => {\n    const {root, mockFoundation} = setupTest();\n    document.body.appendChild(root);\n    const event = document.createEvent('FocusEvent');\n    event.initEvent('focusin', true, true);\n    const listElementItem =\n        root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n    listElementItem.dispatchEvent(event);\n    expect(mockFoundation.handleFocusIn).toHaveBeenCalledWith(0);\n    expect(mockFoundation.handleFocusIn).toHaveBeenCalledTimes(1);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"focusIn handler is removed from the root element on destroy","suites":["MDCList"],"line":467,"updatePoint":{"line":467,"column":65},"code":"  it('focusIn handler is removed from the root element on destroy', () => {\n    const {root, component, mockFoundation} = setupTest();\n    document.body.appendChild(root);\n    component.destroy();\n    const event = document.createEvent('FocusEvent');\n    event.initEvent('focusin', true, true);\n    const listElementItem =\n        root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n    listElementItem.dispatchEvent(event);\n    expect(mockFoundation.handleFocusIn).not.toHaveBeenCalledWith(0);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"focusOut handler is added to root element","suites":["MDCList"],"line":480,"updatePoint":{"line":480,"column":47},"code":"  it('focusOut handler is added to root element', () => {\n    const {root, mockFoundation} = setupTest();\n    document.body.appendChild(root);\n    const event = document.createEvent('FocusEvent');\n    event.initEvent('focusout', true, true);\n    const listElementItem =\n        root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n    listElementItem.dispatchEvent(event);\n    expect(mockFoundation.handleFocusOut).toHaveBeenCalledWith(0);\n    expect(mockFoundation.handleFocusOut).toHaveBeenCalledTimes(1);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"focusOut handler is removed from the root element on destroy","suites":["MDCList"],"line":493,"updatePoint":{"line":493,"column":66},"code":"  it('focusOut handler is removed from the root element on destroy', () => {\n    const {root, component, mockFoundation} = setupTest();\n    document.body.appendChild(root);\n    component.destroy();\n    const event = document.createEvent('FocusEvent');\n    event.initEvent('focusout', true, true);\n    const listElementItem =\n        root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n    listElementItem.dispatchEvent(event);\n    expect(mockFoundation.handleFocusOut).not.toHaveBeenCalledWith(0);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"keydown handler is added to root element","suites":["MDCList"],"line":506,"updatePoint":{"line":506,"column":46},"code":"  it('keydown handler is added to root element', () => {\n    const {root, mockFoundation} = setupTest();\n    const event = document.createEvent('KeyboardEvent');\n    event.initEvent('keydown', true, true);\n    const listElementItem =\n        root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n    listElementItem.dispatchEvent(event);\n    expect(mockFoundation.handleKeydown).toHaveBeenCalledWith(event, true, 0);\n    expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"keydown handler is triggered when a sub-element of a list is triggered","suites":["MDCList"],"line":517,"updatePoint":{"line":517,"column":76},"code":"  it('keydown handler is triggered when a sub-element of a list is triggered',\n     () => {\n       const {root, mockFoundation} = setupTest();\n       const event = document.createEvent('KeyboardEvent');\n       event.initEvent('keydown', true, true);\n       const button = root.querySelector('.mdc-deprecated-list-item button') as\n           HTMLElement;\n       button.dispatchEvent(event);\n       expect(mockFoundation.handleKeydown)\n           .toHaveBeenCalledWith(event, false, 0);\n       expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"keydown calls foundation.handleKeydown method with negative index when event triggered on list root ","suites":["MDCList"],"line":530,"updatePoint":{"line":530,"column":106},"code":"  it('keydown calls foundation.handleKeydown method with negative index when event triggered on list root ',\n     () => {\n       const {root, mockFoundation} = setupTest();\n       const event = document.createEvent('KeyboardEvent');\n       event.initEvent('keydown', true, true);\n       root.dispatchEvent(event);\n       expect(mockFoundation.handleKeydown)\n           .toHaveBeenCalledWith(event, false, -1);\n       expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"keydown handler is removed from the root element on destroy","suites":["MDCList"],"line":541,"updatePoint":{"line":541,"column":65},"code":"  it('keydown handler is removed from the root element on destroy', () => {\n    const {root, component, mockFoundation} = setupTest();\n    component.destroy();\n    const event = document.createEvent('KeyboardEvent');\n    event.initEvent('keydown', true, true);\n    const listElementItem =\n        root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n    listElementItem.dispatchEvent(event);\n    expect(mockFoundation.handleKeydown)\n        .not.toHaveBeenCalledWith(event, true, 0);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#listElements should return all list items including disabled list items","suites":["MDCList"],"line":553,"updatePoint":{"line":553,"column":78},"code":"  it('#listElements should return all list items including disabled list items',\n     () => {\n       const {component} = setupTest(getFixtureWithDisabledItems());\n       expect(4).toEqual(component.listElements.length);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#hasRadioAtIndex return true or false based on presense of radio button on list item","suites":["MDCList"],"line":559,"updatePoint":{"line":559,"column":97},"code":"  it('adapter#hasRadioAtIndex return true or false based on presense of radio button on list item',\n     () => {\n       const {component} = setupTest();\n\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasRadioAtIndex(3))\n           .toBe(true);\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasRadioAtIndex(0))\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#hasCheckboxAtIndex return true or false based on presense of checkbox button on list item","suites":["MDCList"],"line":571,"updatePoint":{"line":571,"column":103},"code":"  it('adapter#hasCheckboxAtIndex return true or false based on presense of checkbox button on list item',\n     () => {\n       const {component} = setupTest();\n\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.hasCheckboxAtIndex(2))\n           .toBe(true);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.hasCheckboxAtIndex(0))\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#isCheckboxCheckedAtIndex returns true or false based if checkbox is checked on a list item","suites":["MDCList"],"line":583,"updatePoint":{"line":583,"column":104},"code":"  it('adapter#isCheckboxCheckedAtIndex returns true or false based if checkbox is checked on a list item',\n     () => {\n       const {root, component} = setupTest();\n\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isCheckboxCheckedAtIndex(2))\n           .toBe(false);\n       document.body.appendChild(root);\n       const checkbox =\n           root.querySelector('input[type=\"checkbox\"]') as HTMLInputElement;\n       checkbox.checked = true;\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isCheckboxCheckedAtIndex(2))\n           .toBe(true);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#setCheckedCheckboxOrRadioAtIndex toggles the checkbox on list item","suites":["MDCList"],"line":600,"updatePoint":{"line":600,"column":80},"code":"  it('adapter#setCheckedCheckboxOrRadioAtIndex toggles the checkbox on list item',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const checkbox =\n           root.querySelector('input[type=\"checkbox\"]') as HTMLInputElement;\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setCheckedCheckboxOrRadioAtIndex(2, true);\n       expect(checkbox.checked).toBe(true);\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setCheckedCheckboxOrRadioAtIndex(2, false);\n       expect(checkbox.checked).toBe(false);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#setCheckedCheckboxOrRadioAtIndex toggles the radio on list item","suites":["MDCList"],"line":617,"updatePoint":{"line":617,"column":77},"code":"  it('adapter#setCheckedCheckboxOrRadioAtIndex toggles the radio on list item',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       const radio =\n           root.querySelector('input[type=\"radio\"]') as HTMLInputElement;\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setCheckedCheckboxOrRadioAtIndex(3, true);\n       expect(radio.checked).toBe(true);\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setCheckedCheckboxOrRadioAtIndex(3, false);\n       expect(radio.checked).toBe(false);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#notifyAction emits action event","suites":["MDCList"],"line":634,"updatePoint":{"line":634,"column":45},"code":"  it('adapter#notifyAction emits action event', () => {\n    const {component} = setupTest();\n\n    let detail = null;\n    const handler = (evt: any) => detail = evt.detail;\n\n    component.listen(strings.ACTION_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyAction(3);\n    component.unlisten(strings.ACTION_EVENT, handler);\n\n    expect(detail).toEqual({index: 3} as any);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#notifySelectionChange emits selection change event","suites":["MDCList"],"line":647,"updatePoint":{"line":647,"column":64},"code":"  it('adapter#notifySelectionChange emits selection change event', () => {\n    const {component} = setupTest();\n\n    let detail = null;\n    const handler = (evt: any) => detail = evt.detail;\n\n    component.listen(strings.SELECTION_CHANGE_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifySelectionChange([1, 2]);\n    component.unlisten(strings.SELECTION_CHANGE_EVENT, handler);\n\n    expect(detail).toEqual({changedIndices: [1, 2]} as any);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#isFocusInsideList returns true if focus is inside list root","suites":["MDCList"],"line":660,"updatePoint":{"line":660,"column":73},"code":"  it('adapter#isFocusInsideList returns true if focus is inside list root',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isFocusInsideList())\n           .toBe(false);\n       (root.querySelector('.mdc-deprecated-list-item') as HTMLElement).focus();\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isFocusInsideList())\n           .toBe(true);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#isRootFocused returns true if list root is on focus","suites":["MDCList"],"line":674,"updatePoint":{"line":674,"column":65},"code":"  it('adapter#isRootFocused returns true if list root is on focus', () => {\n    const {root, component} = setupTest();\n    document.body.appendChild(root);\n    expect((component.getDefaultFoundation() as any).adapter.isRootFocused())\n        .toBe(false);\n    root.focus();\n    expect((component.getDefaultFoundation() as any).adapter.isRootFocused())\n        .toBe(true);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#listItemAtIndexHasClass returns true if list item has disabled class","suites":["MDCList"],"line":685,"updatePoint":{"line":685,"column":82},"code":"  it('adapter#listItemAtIndexHasClass returns true if list item has disabled class',\n     () => {\n       const {root, component} = setupTest();\n       root.querySelectorAll(\n               `.${deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS]}`)[0]\n           .classList.add(\n               deprecatedClassNameMap[cssClasses.LIST_ITEM_DISABLED_CLASS]);\n       document.body.appendChild(root);\n       // Note that this uses the unmapped class name since the adapter will\n       // perform its own mapping.\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.listItemAtIndexHasClass(\n                      0, cssClasses.LIST_ITEM_DISABLED_CLASS))\n           .toBe(true);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#listItemAtIndexHasClass returns false if list item does not have disabled class","suites":["MDCList"],"line":702,"updatePoint":{"line":702,"column":93},"code":"  it('adapter#listItemAtIndexHasClass returns false if list item does not have disabled class',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       expect(\n           (component.getDefaultFoundation() as any)\n               .adapter.listItemAtIndexHasClass(\n                   0,\n                   deprecatedClassNameMap[cssClasses.LIST_ITEM_DISABLED_CLASS]))\n           .toBe(false);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#getPrimaryTextAtIndex returns the appropriate text for one line list","suites":["MDCList"],"line":715,"updatePoint":{"line":715,"column":82},"code":"  it('adapter#getPrimaryTextAtIndex returns the appropriate text for one line list',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getPrimaryTextAtIndex(2))\n           .toEqual('Pasta');\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"adapter#getPrimaryTextAtIndex returns the appropriate text for two line list","suites":["MDCList"],"line":725,"updatePoint":{"line":725,"column":82},"code":"  it('adapter#getPrimaryTextAtIndex returns the appropriate text for two line list',\n     () => {\n       const {root, component} = setupTest(getTwoLineFixture());\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getPrimaryTextAtIndex(2))\n           .toEqual('Pasta');\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"exports strings","suites":["MDCListFoundation"],"line":69,"updatePoint":{"line":69,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCListFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"exports cssClasses","suites":["MDCListFoundation"],"line":73,"updatePoint":{"line":73,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCListFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"exports numbers","suites":["MDCListFoundation"],"line":77,"updatePoint":{"line":77,"column":21},"code":"  it('exports numbers', () => {\n    expect(MDCListFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCListFoundation"],"line":81,"updatePoint":{"line":81,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCListFoundation, [\n      'getListItemCount',\n      'getFocusedElementIndex',\n      'setAttributeForElementIndex',\n      'addClassForElementIndex',\n      'removeClassForElementIndex',\n      'focusItemAtIndex',\n      'setTabIndexForListItemChildren',\n      'hasRadioAtIndex',\n      'hasCheckboxAtIndex',\n      'isCheckboxCheckedAtIndex',\n      'listItemAtIndexHasClass',\n      'setCheckedCheckboxOrRadioAtIndex',\n      'notifyAction',\n      'notifySelectionChange',\n      'isFocusInsideList',\n      'getAttributeForElementIndex',\n      'isRootFocused',\n      'getPrimaryTextAtIndex',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#layout should bail out early when list is empty","suites":["MDCListFoundation"],"line":117,"updatePoint":{"line":117,"column":54},"code":"  it('#layout should bail out early when list is empty', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    mockAdapter.getListItemCount.and.returnValue(0);\n    foundation.layout();\n\n    expect(mockAdapter.hasCheckboxAtIndex).not.toHaveBeenCalledWith(0);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusIn switches list item button/a elements to tabindex=0","suites":["MDCListFoundation"],"line":126,"updatePoint":{"line":126,"column":71},"code":"  it('#handleFocusIn switches list item button/a elements to tabindex=0',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.handleFocusIn(1);\n\n       expect(mockAdapter.setTabIndexForListItemChildren)\n           .toHaveBeenCalledWith(1, '0');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusOut switches list item button/a elements to tabindex=-1","suites":["MDCListFoundation"],"line":136,"updatePoint":{"line":136,"column":73},"code":"  it('#handleFocusOut switches list item button/a elements to tabindex=-1',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.handleFocusOut(1);\n\n       expect(mockAdapter.setTabIndexForListItemChildren)\n           .toHaveBeenCalledWith(1, '-1');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusIn switches list item button/a elements to tabindex=0 when target is child element","suites":["MDCListFoundation"],"line":146,"updatePoint":{"line":146,"column":100},"code":"  it('#handleFocusIn switches list item button/a elements to tabindex=0 when target is child element',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.handleFocusIn(1);\n\n       expect(mockAdapter.setTabIndexForListItemChildren)\n           .toHaveBeenCalledWith(1, '0');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusOut switches list item button/a elements to tabindex=-1 when target is child element","suites":["MDCListFoundation"],"line":156,"updatePoint":{"line":156,"column":102},"code":"  it('#handleFocusOut switches list item button/a elements to tabindex=-1 when target is child element',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.handleFocusOut(1);\n\n       expect(mockAdapter.setTabIndexForListItemChildren)\n           .toHaveBeenCalledWith(1, '-1');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusIn does nothing if mdc-list-item is not on element or ancestor","suites":["MDCListFoundation"],"line":166,"updatePoint":{"line":166,"column":80},"code":"  it('#handleFocusIn does nothing if mdc-list-item is not on element or ancestor',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.handleFocusIn(-1);\n\n       expect(mockAdapter.setTabIndexForListItemChildren)\n           .not.toHaveBeenCalledWith(jasmine.anything(), jasmine.anything());\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusOut does nothing if mdc-list-item is not on element or ancestor","suites":["MDCListFoundation"],"line":176,"updatePoint":{"line":176,"column":81},"code":"  it('#handleFocusOut does nothing if mdc-list-item is not on element or ancestor',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.handleFocusOut(-1);\n\n       expect(mockAdapter.setTabIndexForListItemChildren)\n           .not.toHaveBeenCalledWith(jasmine.anything(), jasmine.anything());\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusOut sets tabindex=0 to selected item when focus leaves single selection list","suites":["MDCListFoundation"],"line":186,"updatePoint":{"line":186,"column":94},"code":"  it('#handleFocusOut sets tabindex=0 to selected item when focus leaves single selection list',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(false);\n       mockAdapter.hasRadioAtIndex.withArgs(0).and.returnValue(false);\n       foundation.setSingleSelection(true);\n       foundation.layout();\n\n       mockAdapter.isFocusInsideList.and.returnValue(false);\n\n       foundation.setSelectedIndex(\n           2);  // Selected index values may not be in sequence.\n       foundation.handleFocusOut(3);\n       jasmine.clock().tick(1);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(2, 'tabindex', '0');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusOut does not set tabindex=0 to selected list item when focus moves to next list item.","suites":["MDCListFoundation"],"line":222,"updatePoint":{"line":222,"column":103},"code":"  it('#handleFocusOut does not set tabindex=0 to selected list item when focus moves to next list item.',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.setSingleSelection(true);\n       foundation.layout();\n\n       mockAdapter.isFocusInsideList.and.returnValue(true);\n\n       foundation.setSelectedIndex(2);\n       foundation.handleFocusOut(3);\n       jasmine.clock().tick(1);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .not.toHaveBeenCalledWith(2, 'tabindex', 0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleFocusOut sets tabindex=0 to first selected index when focus leaves checkbox based list","suites":["MDCListFoundation"],"line":239,"updatePoint":{"line":239,"column":99},"code":"  it('#handleFocusOut sets tabindex=0 to first selected index when focus leaves checkbox based list',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       mockAdapter.isFocusInsideList.and.returnValue(false);\n\n       foundation.setSelectedIndex(\n           [3, 2]);  // Selected index values may not be in sequence.\n\n       foundation.handleFocusOut(2);\n       jasmine.clock().tick(1);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(2, 'tabindex', '0');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#getFocusedItemIndex returns currently focused item","suites":["MDCListFoundation"],"line":258,"updatePoint":{"line":258,"column":57},"code":"  it('#getFocusedItemIndex returns currently focused item', () => {\n    const {foundation} = setupTest();\n    expect(foundation.getFocusedItemIndex()).toBe(-1);\n    foundation.handleFocusIn(2);\n    expect(foundation.getFocusedItemIndex()).toBe(2);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown does nothing if key received on root element and not used for navigation","suites":["MDCListFoundation"],"line":265,"updatePoint":{"line":265,"column":93},"code":"  it('#handleKeydown does nothing if key received on root element and not used for navigation',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('A');\n\n       mockAdapter.isRootFocused.and.returnValue(true);\n       foundation.handleKeydown(event, false, -1);\n\n       expect(mockAdapter.getFocusedElementIndex).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should focus on last item when UP arrow key received on list root","suites":["MDCListFoundation"],"line":276,"updatePoint":{"line":276,"column":86},"code":"  it('#handleKeydown should focus on last item when UP arrow key received on list root',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('ArrowUp');\n\n       mockAdapter.isRootFocused.and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(5);\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(4);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.getFocusedElementIndex).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should focus on first item when DOWN arrow key received on list root","suites":["MDCListFoundation"],"line":291,"updatePoint":{"line":291,"column":89},"code":"  it('#handleKeydown should focus on first item when DOWN arrow key received on list root',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('ArrowDown');\n\n       mockAdapter.isRootFocused.and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(5);\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.getFocusedElementIndex).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should focus and select the last item when Shift + ArrowUp key received on list root","suites":["MDCListFoundation"],"line":306,"updatePoint":{"line":306,"column":105},"code":"  it('#handleKeydown should focus and select the last item when Shift + ArrowUp key received on list root',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('ArrowUp', ['Shift']);\n\n       mockAdapter.isRootFocused.and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(5);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(4);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.getFocusedElementIndex).not.toHaveBeenCalled();\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([4]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n       expect((foundation.getSelectedIndex() as number[]).sort()).toEqual([4]);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should focus and select the first item when Shift + ArrowDown key received on list root","suites":["MDCListFoundation"],"line":326,"updatePoint":{"line":326,"column":108},"code":"  it('#handleKeydown should focus and select the first item when Shift + ArrowDown key received on list root',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('ArrowDown', ['Shift']);\n\n       mockAdapter.isRootFocused.and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(5);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.getFocusedElementIndex).not.toHaveBeenCalled();\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([0]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n       expect((foundation.getSelectedIndex() as number[]).sort()).toEqual([0]);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown does nothing if the key is not used for navigation","suites":["MDCListFoundation"],"line":346,"updatePoint":{"line":346,"column":71},"code":"  it('#handleKeydown does nothing if the key is not used for navigation',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('A', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(event.preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown moves focus to index+1 if the ArrowDown key is pressed","suites":["MDCListFoundation"],"line":361,"updatePoint":{"line":361,"column":75},"code":"  it('#handleKeydown moves focus to index+1 if the ArrowDown key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowDown', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown focuses disabled item when disabled items are focusable and the ArrowDown key is pressed","suites":["MDCListFoundation"],"line":376,"updatePoint":{"line":376,"column":109},"code":"  it('#handleKeydown focuses disabled item when disabled items are focusable and the ArrowDown key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowDown', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(/*fakeIndex*/ 1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(1);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown skips disabled item when disabled items are not focusable and the ArrowDown key is pressed","suites":["MDCListFoundation"],"line":394,"updatePoint":{"line":394,"column":111},"code":"  it('#handleKeydown skips disabled item when disabled items are not focusable and the ArrowDown key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowDown', [], target);\n\n       foundation.setDisabledItemsFocusable(false);\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(/*fakeIndex*/ 1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown moves focus to index-1 if the ArrowUp key is pressed","suites":["MDCListFoundation"],"line":413,"updatePoint":{"line":413,"column":73},"code":"  it('#handleKeydown moves focus to index-1 if the ArrowUp key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowUp', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown focuses disabled item when disabled items are focusable and the ArrowUp key is pressed","suites":["MDCListFoundation"],"line":428,"updatePoint":{"line":428,"column":107},"code":"  it('#handleKeydown focuses disabled item when disabled items are focusable and the ArrowUp key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowUp', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(2);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(/*fakeIndex*/ 1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       foundation.handleKeydown(event, true, 2);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(1);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown skips disabled item when disabled items are not focusable and the ArrowUp key is pressed","suites":["MDCListFoundation"],"line":446,"updatePoint":{"line":446,"column":109},"code":"  it('#handleKeydown skips disabled item when disabled items are not focusable and the ArrowUp key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowUp', [], target);\n\n       foundation.setDisabledItemsFocusable(false);\n       mockAdapter.getFocusedElementIndex.and.returnValue(2);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(/*fakeIndex*/ 1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       foundation.handleKeydown(event, true, 2);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown moves focus to and selects index+1 if Shift + ArrowDown key is pressed","suites":["MDCListFoundation"],"line":465,"updatePoint":{"line":465,"column":91},"code":"  it('#handleKeydown moves focus to and selects index+1 if Shift + ArrowDown key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowDown', ['Shift'], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.isCheckboxCheckedAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.setSelectedIndex([0]);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n       expect((foundation.getSelectedIndex() as number[]).sort()).toEqual([\n         0, 2\n       ]);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown moves focus to and deselects index+1 if Shift + ArrowDown key is pressed","suites":["MDCListFoundation"],"line":489,"updatePoint":{"line":489,"column":93},"code":"  it('#handleKeydown moves focus to and deselects index+1 if Shift + ArrowDown key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowDown', ['Shift'], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.isCheckboxCheckedAtIndex.withArgs(2).and.returnValue(true);\n       foundation.layout();\n       foundation.setSelectedIndex([2]);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n       expect((foundation.getSelectedIndex() as number[]).sort()).toEqual([]);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown moves focus to and selects index-1 if Shift + ArrowUp key is pressed","suites":["MDCListFoundation"],"line":511,"updatePoint":{"line":511,"column":89},"code":"  it('#handleKeydown moves focus to and selects index-1 if Shift + ArrowUp key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowUp', ['Shift'], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.isCheckboxCheckedAtIndex.withArgs(2).and.returnValue(true);\n       foundation.layout();\n       foundation.setSelectedIndex([2]);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([0]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n       expect((foundation.getSelectedIndex() as number[]).sort()).toEqual([\n         0, 2\n       ]);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown moves focus to and deselects index-1 if Shift + ArrowUp key is pressed","suites":["MDCListFoundation"],"line":535,"updatePoint":{"line":535,"column":91},"code":"  it('#handleKeydown moves focus to and deselects index-1 if Shift + ArrowUp key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowUp', ['Shift'], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.isCheckboxCheckedAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.setSelectedIndex([0]);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([0]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n       expect((foundation.getSelectedIndex() as number[]).sort()).toEqual([]);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowRight key does nothing if isVertical is true","suites":["MDCListFoundation"],"line":557,"updatePoint":{"line":557,"column":70},"code":"  it('#handleKeydown ArrowRight key does nothing if isVertical is true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const target = {tagName: 'li'};\n    const event = createMockKeyboardEvent('ArrowRight', [], target);\n\n    mockAdapter.getFocusedElementIndex.and.returnValue(1);\n    mockAdapter.getListItemCount.and.returnValue(3);\n    foundation.handleKeydown(event, true, 1);\n\n    expect(mockAdapter.focusItemAtIndex)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n    expect(event.preventDefault).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowLeft key does nothing if isVertical is true","suites":["MDCListFoundation"],"line":571,"updatePoint":{"line":571,"column":69},"code":"  it('#handleKeydown ArrowLeft key does nothing if isVertical is true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const target = {tagName: 'li'};\n    const event = createMockKeyboardEvent('ArrowLeft', [], target);\n\n    mockAdapter.getFocusedElementIndex.and.returnValue(1);\n    mockAdapter.getListItemCount.and.returnValue(3);\n    foundation.handleKeydown(event, true, 1);\n\n    expect(mockAdapter.focusItemAtIndex)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n    expect(event.preventDefault).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowRight key causes the next item to gain focus if isVertical is false","suites":["MDCListFoundation"],"line":585,"updatePoint":{"line":585,"column":93},"code":"  it('#handleKeydown ArrowRight key causes the next item to gain focus if isVertical is false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowRight', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setVerticalOrientation(false);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowLeft key causes the previous item to gain focus if isVertical is false","suites":["MDCListFoundation"],"line":601,"updatePoint":{"line":601,"column":96},"code":"  it('#handleKeydown ArrowLeft key causes the previous item to gain focus if isVertical is false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowLeft', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setVerticalOrientation(false);\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowDown key causes first item to focus if last item is focused and wrapFocus is true","suites":["MDCListFoundation"],"line":617,"updatePoint":{"line":617,"column":107},"code":"  it('#handleKeydown ArrowDown key causes first item to focus if last item is focused and wrapFocus is true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowDown', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(2);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setWrapFocus(true);\n       foundation.handleKeydown(event, true, 2);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowDown key if last item is focused and wrapFocus is false does not focus an item","suites":["MDCListFoundation"],"line":633,"updatePoint":{"line":633,"column":104},"code":"  it('#handleKeydown ArrowDown key if last item is focused and wrapFocus is false does not focus an item',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowDown', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(2);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleKeydown(event, true, 2);\n\n       expect(mockAdapter.focusItemAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowUp key causes last item to focus if first item is focused and wrapFocus is true","suites":["MDCListFoundation"],"line":648,"updatePoint":{"line":648,"column":105},"code":"  it('#handleKeydown ArrowUp key causes last item to focus if first item is focused and wrapFocus is true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowUp', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setWrapFocus(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown ArrowUp key if first item is focused and wrapFocus is false does not focus an item","suites":["MDCListFoundation"],"line":664,"updatePoint":{"line":664,"column":103},"code":"  it('#handleKeydown ArrowUp key if first item is focused and wrapFocus is false does not focus an item',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event = createMockKeyboardEvent('ArrowUp', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.focusItemAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown Home key causes the first item to be focused","suites":["MDCListFoundation"],"line":679,"updatePoint":{"line":679,"column":65},"code":"  it('#handleKeydown Home key causes the first item to be focused', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const target = {tagName: 'li'};\n    const event = createMockKeyboardEvent('Home', [], target);\n\n    mockAdapter.getFocusedElementIndex.and.returnValue(1);\n    mockAdapter.getListItemCount.and.returnValue(3);\n    foundation.handleKeydown(event, true, 1);\n\n    expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n    expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n    expect(event.preventDefault).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown End key causes the last item to be focused","suites":["MDCListFoundation"],"line":693,"updatePoint":{"line":693,"column":63},"code":"  it('#handleKeydown End key causes the last item to be focused', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const target = {tagName: 'li'};\n    const event = createMockKeyboardEvent('End', [], target);\n\n    mockAdapter.getFocusedElementIndex.and.returnValue(0);\n    mockAdapter.getListItemCount.and.returnValue(3);\n    foundation.handleKeydown(event, true, 0);\n\n    expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n    expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n    expect(event.preventDefault).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown Control + Shift + Home key selects all items from current to first","suites":["MDCListFoundation"],"line":707,"updatePoint":{"line":707,"column":87},"code":"  it('#handleKeydown Control + Shift + Home key selects all items from current to first',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event =\n           createMockKeyboardEvent('Home', ['Control', 'Shift'], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([0, 1]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown Control + Shift + End key selects all items from current to end","suites":["MDCListFoundation"],"line":727,"updatePoint":{"line":727,"column":84},"code":"  it('#handleKeydown Control + Shift + End key selects all items from current to end',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'li'};\n       const event =\n           createMockKeyboardEvent('End', ['Control', 'Shift'], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.handleKeydown(event, true, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([1, 2]);\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown navigation key in input/button/select/textarea elements do not call preventDefault ","suites":["MDCListFoundation"],"line":748,"updatePoint":{"line":748,"column":104},"code":"  it('#handleKeydown navigation key in input/button/select/textarea elements do not call preventDefault ',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const inputs = ['input', 'button', 'select', 'textarea'];\n       const preventDefault = jasmine.createSpy('preventDefault');\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n\n       inputs.forEach((input) => {\n         const target = {tagName: input};\n         const event = createMockKeyboardEvent('ArrowUp', [], target);\n         event.preventDefault = preventDefault;\n         foundation.handleKeydown(event, false, 0);\n       });\n       expect(preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown focuses on the bound mdc-list-item even if the event happened on a child element","suites":["MDCListFoundation"],"line":766,"updatePoint":{"line":766,"column":101},"code":"  it('#handleKeydown focuses on the bound mdc-list-item even if the event happened on a child element',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const parentElement = {classList: ['mdc-list-item']};\n       const target = {classList: [], parentElement};\n       const event = createMockKeyboardEvent('ArrowUp', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(-1);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleKeydown(event, false, 1);\n\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown space key causes preventDefault to be called on keydown event","suites":["MDCListFoundation"],"line":782,"updatePoint":{"line":782,"column":82},"code":"  it('#handleKeydown space key causes preventDefault to be called on keydown event',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown enter key causes preventDefault to be called on keydown event","suites":["MDCListFoundation"],"line":796,"updatePoint":{"line":796,"column":82},"code":"  it('#handleKeydown enter key causes preventDefault to be called on keydown event',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Enter', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown space/enter key cause event.preventDefault if a checkbox or radio button is present","suites":["MDCListFoundation"],"line":825,"updatePoint":{"line":825,"column":104},"code":"  it('#handleKeydown space/enter key cause event.preventDefault if a checkbox or radio button is present',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.hasRadioAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(false);\n       foundation.setSingleSelection(false);\n       foundation.layout();\n       foundation.handleKeydown(event, true, 0);\n       (event as any).key = 'Enter';\n       foundation.handleKeydown(event, true, 0);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown space key calls notifyAction for anchor element regardless of singleSelection","suites":["MDCListFoundation"],"line":844,"updatePoint":{"line":844,"column":98},"code":"  it('#handleKeydown space key calls notifyAction for anchor element regardless of singleSelection',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'A', classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setSingleSelection(false);\n       foundation.handleKeydown(event, true, 0);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.notifyAction).toHaveBeenCalledWith(0);\n       expect(mockAdapter.notifyAction).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown space key does not call notifyAction for disabled element","suites":["MDCListFoundation"],"line":861,"updatePoint":{"line":861,"column":78},"code":"  it('#handleKeydown space key does not call notifyAction for disabled element',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'A', classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(0, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown enter key does not call notifyAction for anchor element","suites":["MDCListFoundation"],"line":877,"updatePoint":{"line":877,"column":76},"code":"  it('#handleKeydown enter key does not call notifyAction for anchor element',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {tagName: 'A', classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Enter', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setSingleSelection(false);\n       foundation.handleKeydown(event, true, 0);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.notifyAction)\n           .not.toHaveBeenCalledWith(\n               0);  // notifyAction will be called by handleClick event.\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown notifies of action when enter key pressed on list item ","suites":["MDCListFoundation"],"line":895,"updatePoint":{"line":895,"column":76},"code":"  it('#handleKeydown notifies of action when enter key pressed on list item ',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Enter', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(mockAdapter.notifyAction).toHaveBeenCalledWith(0);\n       expect(mockAdapter.notifyAction).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown selects the list item when enter key is triggered, singleSelection=true","suites":["MDCListFoundation"],"line":909,"updatePoint":{"line":909,"column":92},"code":"  it('#handleKeydown selects the list item when enter key is triggered, singleSelection=true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Enter', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.getAttributeForElementIndex.withArgs(0, strings.ARIA_CURRENT)\n           .and.returnValue(null);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(0, strings.ARIA_SELECTED, 'true');\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(0, 'tabindex', '0');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown space key is triggered when singleSelection is true selects the list item","suites":["MDCListFoundation"],"line":950,"updatePoint":{"line":950,"column":94},"code":"  it('#handleKeydown space key is triggered when singleSelection is true selects the list item',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.getAttributeForElementIndex.withArgs(0, strings.ARIA_CURRENT)\n           .and.returnValue(null);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(0, strings.ARIA_SELECTED, 'true');\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(0, 'tabindex', '0');\n       ;\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown space key when singleSelection=true does not select an element is isRootListItem=false","suites":["MDCListFoundation"],"line":971,"updatePoint":{"line":971,"column":107},"code":"  it('#handleKeydown space key when singleSelection=true does not select an element is isRootListItem=false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.getAttributeForElementIndex.withArgs(0, strings.ARIA_CURRENT)\n           .and.returnValue(null);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, false, 0);\n\n       expect(event.preventDefault).not.toHaveBeenCalled();\n       expect(mockAdapter.setAttributeForElementIndex)\n           .not.toHaveBeenCalledWith(0, strings.ARIA_SELECTED, 'true');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown space key is triggered 2x when singleSelection does not un-select the item.","suites":["MDCListFoundation"],"line":1010,"updatePoint":{"line":1010,"column":96},"code":"  it('#handleKeydown space key is triggered 2x when singleSelection does not un-select the item.',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.getAttributeForElementIndex.withArgs(0, strings.ARIA_CURRENT)\n           .and.returnValue(null);\n       foundation.setSingleSelection(true);\n       foundation.handleKeydown(event, true, 0);\n       foundation.handleKeydown(event, true, 0);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(2);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(0, strings.ARIA_SELECTED, 'true');\n       expect(mockAdapter.setAttributeForElementIndex)\n           .not.toHaveBeenCalledWith(0, strings.ARIA_SELECTED, 'false');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown when shift + space/enter and no previous user selection action should toggle item","suites":["MDCListFoundation"],"line":1053,"updatePoint":{"line":1053,"column":102},"code":"  it('#handleKeydown when shift + space/enter and no previous user selection action should toggle item',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const shiftEvent =\n           createMockKeyboardEvent('Spacebar', ['Shift'], target);\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.getFocusedElementIndex.and.returnValue(-1);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       foundation.handleKeydown(shiftEvent, true, 2);\n\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2]);\n       expect(mockAdapter.notifyAction).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown unselected item when shift + enter/space should select range from previous action","suites":["MDCListFoundation"],"line":1074,"updatePoint":{"line":1074,"column":102},"code":"  it('#handleKeydown unselected item when shift + enter/space should select range from previous action',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Enter', [], target);\n       const shiftEvent = createMockKeyboardEvent('Enter', ['Shift'], target);\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.getFocusedElementIndex.and.returnValue(-1);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.handleKeydown(event, true, 1);\n       foundation.handleKeydown(event, true, 0);\n\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       mockAdapter.setAttributeForElementIndex.calls.reset();\n       mockAdapter.notifySelectionChange.calls.reset();\n       mockAdapter.notifyAction.calls.reset();\n\n       foundation.handleKeydown(shiftEvent, true, 3);\n\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(2);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(3, true);\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(2);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2, 3]);\n       expect(mockAdapter.notifyAction).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown selected item when shift + enter/space should deselect range from previous action","suites":["MDCListFoundation"],"line":1106,"updatePoint":{"line":1106,"column":102},"code":"  it('#handleKeydown selected item when shift + enter/space should deselect range from previous action',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {classList: ['mdc-list-item']};\n       const event = createMockKeyboardEvent('Spacebar', [], target);\n       const shiftEvent =\n           createMockKeyboardEvent('Spacebar', ['Shift'], target);\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.getFocusedElementIndex.and.returnValue(-1);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n       foundation.handleKeydown(event, true, 3);\n       foundation.handleKeydown(event, true, 1);\n       foundation.handleKeydown(event, true, 0);\n\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       mockAdapter.setAttributeForElementIndex.calls.reset();\n       mockAdapter.notifySelectionChange.calls.reset();\n       mockAdapter.notifyAction.calls.reset();\n\n       foundation.handleKeydown(shiftEvent, true, 3);\n\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(3);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(0, false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(1, false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(3, false);\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(3);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([\n         0, 1, 3\n       ]);\n       expect(mockAdapter.notifyAction).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown bail out early if event origin doesnt have a mdc-list-item ancestor from the current list","suites":["MDCListFoundation"],"line":1144,"updatePoint":{"line":1144,"column":110},"code":"  it('#handleKeydown bail out early if event origin doesnt have a mdc-list-item ancestor from the current list',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(-1);\n       const event = createMockKeyboardEvent('ArrowDown');\n       (event as any).keyCode = 40;\n\n       foundation.handleKeydown(\n           event, /** isRootListItem */ true, /** listItemIndex */ -1);\n\n       expect(event.preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#focusLastElement focuses the last list item and returns that index","suites":["MDCListFoundation"],"line":1158,"updatePoint":{"line":1158,"column":73},"code":"  it('#focusLastElement focuses the last list item and returns that index',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n\n       expect(3).toEqual(foundation.focusLastElement());\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(3);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#focusInitialElement focuses the first list item and returns that index","suites":["MDCListFoundation"],"line":1169,"updatePoint":{"line":1169,"column":77},"code":"  it('#focusInitialElement focuses the first list item and returns that index',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n\n       expect(0).toEqual(foundation.focusInitialElement());\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#focusInitialElement focuses the first selected list item and returns that index","suites":["MDCListFoundation"],"line":1180,"updatePoint":{"line":1180,"column":86},"code":"  it('#focusInitialElement focuses the first selected list item and returns that index',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.setSingleSelection(true);\n       foundation.setSelectedIndex(2);\n\n       expect(2).toEqual(foundation.focusInitialElement());\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#focusNextElement focuses next list item and returns that index","suites":["MDCListFoundation"],"line":1193,"updatePoint":{"line":1193,"column":69},"code":"  it('#focusNextElement focuses next list item and returns that index', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    mockAdapter.getListItemCount.and.returnValue(4);\n\n    expect(3).toEqual(foundation.focusNextElement(2));\n    expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(3);\n    expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should select all items on ctrl + A, if nothing is selected","suites":["MDCListFoundation"],"line":1216,"updatePoint":{"line":1216,"column":80},"code":"  it('#handleKeydown should select all items on ctrl + A, if nothing is selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('A', ['Control']);\n\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.layout();\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(3);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(0, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(1, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should select all items on ctrl + lowercase A, if nothing is selected","suites":["MDCListFoundation"],"line":1237,"updatePoint":{"line":1237,"column":90},"code":"  it('#handleKeydown should select all items on ctrl + lowercase A, if nothing is selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('a', ['Control']);\n\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.layout();\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(3);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(0, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(1, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should select all items on ctrl + A, if some items are selected","suites":["MDCListFoundation"],"line":1258,"updatePoint":{"line":1258,"column":84},"code":"  it('#handleKeydown should select all items on ctrl + A, if some items are selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('A', ['Control']);\n\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.layout();\n       foundation.setSelectedIndex([1, 2]);\n\n       // Reset the calls since `setSelectedIndex` will throw it off.\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(4);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(0, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(1, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(3, true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should deselect all items on ctrl + A, if all items are selected","suites":["MDCListFoundation"],"line":1285,"updatePoint":{"line":1285,"column":85},"code":"  it('#handleKeydown should deselect all items on ctrl + A, if all items are selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('A', ['Control']);\n\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.layout();\n       foundation.setSelectedIndex([0, 1, 2]);\n\n       // Reset the calls since `setSelectedIndex` will throw it off.\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(3);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(0, false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(1, false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should not select disabled items on ctrl + A","suites":["MDCListFoundation"],"line":1310,"updatePoint":{"line":1310,"column":65},"code":"  it('#handleKeydown should not select disabled items on ctrl + A', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const event = createMockKeyboardEvent('A', ['Control']);\n\n    mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n    mockAdapter.listItemAtIndexHasClass\n        .withArgs(1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n        .and.returnValue(true);\n    mockAdapter.getListItemCount.and.returnValue(3);\n    foundation.layout();\n    foundation.handleKeydown(event, false, -1);\n\n    expect(event.preventDefault).toHaveBeenCalledTimes(1);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n        .toHaveBeenCalledTimes(3);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n        .toHaveBeenCalledWith(0, true);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n        .toHaveBeenCalledWith(1, false);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n        .toHaveBeenCalledWith(2, true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should not handle ctrl + A on a non-checkbox list","suites":["MDCListFoundation"],"line":1333,"updatePoint":{"line":1333,"column":70},"code":"  it('#handleKeydown should not handle ctrl + A on a non-checkbox list', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const event = createMockKeyboardEvent('a', ['Control']);\n\n    mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(false);\n    mockAdapter.getListItemCount.and.returnValue(3);\n    foundation.layout();\n    foundation.handleKeydown(event, false, -1);\n\n    expect(event.preventDefault).not.toHaveBeenCalled();\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleKeydown should not deselect a selected disabled item on ctrl + A","suites":["MDCListFoundation"],"line":1346,"updatePoint":{"line":1346,"column":77},"code":"  it('#handleKeydown should not deselect a selected disabled item on ctrl + A',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = createMockKeyboardEvent('A', ['Control']);\n\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.layout();\n       foundation.setSelectedIndex([1]);\n\n       // Reset the calls since `setSelectedIndex` will throw it off.\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       foundation.handleKeydown(event, false, -1);\n\n       expect(event.preventDefault).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(3);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(0, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(1, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#focusNextElement retains the focus on last item when wrapFocus=false and returns that index","suites":["MDCListFoundation"],"line":1374,"updatePoint":{"line":1374,"column":98},"code":"  it('#focusNextElement retains the focus on last item when wrapFocus=false and returns that index',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.setWrapFocus(false);\n\n       expect(3).toEqual(foundation.focusNextElement(3));\n       expect(mockAdapter.focusItemAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#focusPrevElement focuses previous list item and returns that index","suites":["MDCListFoundation"],"line":1386,"updatePoint":{"line":1386,"column":73},"code":"  it('#focusPrevElement focuses previous list item and returns that index',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n\n       expect(1).toEqual(foundation.focusPrevElement(2));\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(1);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#focusPrevElement retains the focus on first list item when wrapFocus=false and returns that index","suites":["MDCListFoundation"],"line":1410,"updatePoint":{"line":1410,"column":104},"code":"  it('#focusPrevElement retains the focus on first list item when wrapFocus=false and returns that index',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.setWrapFocus(false);\n\n       expect(0).toEqual(foundation.focusPrevElement(0));\n       expect(mockAdapter.focusItemAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick when singleSelection=false on a list item should not cause the list item to be selected","suites":["MDCListFoundation"],"line":1422,"updatePoint":{"line":1422,"column":106},"code":"  it('#handleClick when singleSelection=false on a list item should not cause the list item to be selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.setSingleSelection(false);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleClick(1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n       expect(mockAdapter.addClassForElementIndex)\n           .not.toHaveBeenCalledWith(1, cssClasses.LIST_ITEM_SELECTED_CLASS);\n       expect(mockAdapter.addClassForElementIndex)\n           .not.toHaveBeenCalledWith(1, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick notifies of action when clicked on list item.","suites":["MDCListFoundation"],"line":1436,"updatePoint":{"line":1436,"column":64},"code":"  it('#handleClick notifies of action when clicked on list item.', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    mockAdapter.getListItemCount.and.returnValue(3);\n    foundation.handleClick(1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n    expect(mockAdapter.notifyAction).toHaveBeenCalledWith(1);\n    expect(mockAdapter.notifyAction).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick does not notify of action when clicked on disabled list item.","suites":["MDCListFoundation"],"line":1446,"updatePoint":{"line":1446,"column":80},"code":"  it('#handleClick does not notify of action when clicked on disabled list item.',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(3);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       foundation.handleClick(1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick when singleSelection=true on a list item should cause the list item to be selected","suites":["MDCListFoundation"],"line":1459,"updatePoint":{"line":1459,"column":101},"code":"  it('#handleClick when singleSelection=true on a list item should cause the list item to be selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.setSingleSelection(true);\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.handleClick(1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(1, 'tabindex', '0');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick when singleSelection=true on a button subelement should not cause the list item to be selected","suites":["MDCListFoundation"],"line":1471,"updatePoint":{"line":1471,"column":113},"code":"  it('#handleClick when singleSelection=true on a button subelement should not cause the list item to be selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.setSingleSelection(true);\n       foundation.handleClick(-1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n       expect(mockAdapter.setAttributeForElementIndex)\n           .not.toHaveBeenCalledWith(1, 'tabindex', 0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick when singleSelection=true on an element not in a list item should be ignored","suites":["MDCListFoundation"],"line":1482,"updatePoint":{"line":1482,"column":95},"code":"  it('#handleClick when singleSelection=true on an element not in a list item should be ignored',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(-1);\n       foundation.setSingleSelection(true);\n       foundation.handleClick(-1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n       expect(mockAdapter.setAttributeForElementIndex)\n           .not.toHaveBeenCalledWith(1, 'tabindex', 0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick when singleSelection=true on the first element when already selected","suites":["MDCListFoundation"],"line":1494,"updatePoint":{"line":1494,"column":87},"code":"  it('#handleClick when singleSelection=true on the first element when already selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getFocusedElementIndex.and.returnValue(0);\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.setSingleSelection(true);\n       foundation.handleClick(0, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       foundation.handleClick(0, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(0, 'tabindex', '0');\n       expect(mockAdapter.setAttributeForElementIndex.calls.allArgs()\n                  .filter(\n                      (args: any) => JSON.stringify(args) ==\n                          JSON.stringify([0, 'tabindex', '0']))\n                  .length)\n           .toEqual(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick checks the checkbox at index if it is present on list item","suites":["MDCListFoundation"],"line":1560,"updatePoint":{"line":1560,"column":77},"code":"  it('#handleClick checks the checkbox at index if it is present on list item',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       // Check\n       mockAdapter.isCheckboxCheckedAtIndex.withArgs(2).and.returnValue(false);\n       foundation.handleClick(2, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(1);\n\n       // Uncheck\n       mockAdapter.isCheckboxCheckedAtIndex.withArgs(2).and.returnValue(true);\n       foundation.handleClick(2, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick single-select list when shift key is held should do nothing","suites":["MDCListFoundation"],"line":1596,"updatePoint":{"line":1596,"column":78},"code":"  it('#handleClick single-select list when shift key is held should do nothing',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.setSingleSelection(true);\n       foundation.layout();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 2, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n           /*fakeEvent*/ createMockMouseEvent(['Shift']));\n       expect(mockAdapter.notifyAction).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick when shift key is held and no previous user selection action should toggle item","suites":["MDCListFoundation"],"line":1610,"updatePoint":{"line":1610,"column":98},"code":"  it('#handleClick when shift key is held and no previous user selection action should toggle item',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 2, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n           /*fakeEvent*/ createMockMouseEvent(['Shift']));\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2]);\n       expect(mockAdapter.notifyAction).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick unselected item when shift key is held should select range from previous action","suites":["MDCListFoundation"],"line":1628,"updatePoint":{"line":1628,"column":98},"code":"  it('#handleClick unselected item when shift key is held should select range from previous action',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       foundation.handleClick(\n           /*fakeIndex*/ 0, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       mockAdapter.setAttributeForElementIndex.calls.reset();\n       mockAdapter.notifySelectionChange.calls.reset();\n       mockAdapter.notifyAction.calls.reset();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 3, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n           /*fakeEvent*/ createMockMouseEvent(['Shift']));\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(2);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(2, true);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(3, true);\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(2);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2, 3]);\n       expect(mockAdapter.notifyAction).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick selected item when shift key is held should deselect range from previous action","suites":["MDCListFoundation"],"line":1659,"updatePoint":{"line":1659,"column":98},"code":"  it('#handleClick selected item when shift key is held should deselect range from previous action',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 3, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       foundation.handleClick(\n           /*fakeIndex*/ 1, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       foundation.handleClick(\n           /*fakeIndex*/ 0, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       mockAdapter.setAttributeForElementIndex.calls.reset();\n       mockAdapter.notifySelectionChange.calls.reset();\n       mockAdapter.notifyAction.calls.reset();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 3, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n           /*fakeEvent*/ createMockMouseEvent(['Shift']));\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(3);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(0, false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(1, false);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledWith(3, false);\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(3);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([\n         0, 1, 3\n       ]);\n       expect(mockAdapter.notifyAction).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick when shift key is held should not toggle disabled items","suites":["MDCListFoundation"],"line":1696,"updatePoint":{"line":1696,"column":74},"code":"  it('#handleClick when shift key is held should not toggle disabled items',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.listItemAtIndexHasClass\n           .withArgs(/*fakeIndex*/ 2, cssClasses.LIST_ITEM_DISABLED_CLASS)\n           .and.returnValue(true);\n       foundation.layout();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 0, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n       mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n       mockAdapter.setAttributeForElementIndex.calls.reset();\n       mockAdapter.notifySelectionChange.calls.reset();\n       mockAdapter.notifyAction.calls.reset();\n\n       foundation.handleClick(\n           /*fakeIndex*/ 3, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n           /*fakeEvent*/ createMockMouseEvent(['Shift']));\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(2);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .not.toHaveBeenCalledWith(2, jasmine.anything());\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(2);\n       expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([1, 3]);\n       expect(mockAdapter.notifyAction).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#handleClick multiple clicks while shift is held should work","suites":["MDCListFoundation"],"line":1726,"updatePoint":{"line":1726,"column":66},"code":"  it('#handleClick multiple clicks while shift is held should work', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    mockAdapter.getListItemCount.and.returnValue(4);\n    mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n    foundation.layout();\n\n    foundation.handleClick(\n        /*fakeIndex*/ 0, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n        /*fakeEvent*/ createMockMouseEvent(['Shift']));\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(0, true);\n    mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n\n    foundation.handleClick(\n        /*fakeIndex*/ 3, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n        /*fakeEvent*/ createMockMouseEvent(['Shift']));\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(1, true);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(2, true);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(3, true);\n    mockAdapter.setCheckedCheckboxOrRadioAtIndex.calls.reset();\n\n    foundation.handleClick(\n        /*fakeIndex*/ 0, /*isCheckboxAlreadyUpdatedInAdapter*/ false,\n        /*fakeEvent*/ createMockMouseEvent(['Shift']));\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(0, false);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(1, false);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(2, false);\n    expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalledWith(3, false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setUseActivatedClass causes setSelectedIndex to use the --activated class","suites":["MDCListFoundation"],"line":1796,"updatePoint":{"line":1796,"column":80},"code":"  it('#setUseActivatedClass causes setSelectedIndex to use the --activated class',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getListItemCount.and.returnValue(3);\n       foundation.setUseActivatedClass(true);\n       foundation.setSelectedIndex(1);\n\n       expect(mockAdapter.addClassForElementIndex)\n           .toHaveBeenCalledWith(1, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n       expect(mockAdapter.addClassForElementIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setSelectedIndex should bail out early if not in the range","suites":["MDCListFoundation"],"line":1808,"updatePoint":{"line":1808,"column":65},"code":"  it('#setSelectedIndex should bail out early if not in the range', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    mockAdapter.getListItemCount.and.returnValue(4);\n    foundation.setSelectedIndex(-1);\n    expect(mockAdapter.setAttributeForElementIndex)\n        .not.toHaveBeenCalledWith(-1, 'tabindex', 0);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setSelectedIndex should bail out early if index is string or invalid","suites":["MDCListFoundation"],"line":1817,"updatePoint":{"line":1817,"column":75},"code":"  it('#setSelectedIndex should bail out early if index is string or invalid',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       foundation.setSelectedIndex('some_random_input' as any);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .not.toHaveBeenCalledWith(-1, 'tabindex', 0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setSelectedIndex throws error when array of index is set on radio based list","suites":["MDCListFoundation"],"line":1965,"updatePoint":{"line":1965,"column":83},"code":"  it('#setSelectedIndex throws error when array of index is set on radio based list',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasRadioAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       expect(() => foundation.setSelectedIndex([0, 1, 2])).toThrow();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setSelectedIndex throws error when single index number is set on multi-select checkbox based list","suites":["MDCListFoundation"],"line":1976,"updatePoint":{"line":1976,"column":104},"code":"  it('#setSelectedIndex throws error when single index number is set on multi-select checkbox based list',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       expect(() => foundation.setSelectedIndex(2)).toThrow();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setSelectedIndex deselects all checkboxes when selected index is set to []","suites":["MDCListFoundation"],"line":1987,"updatePoint":{"line":1987,"column":81},"code":"  it('#setSelectedIndex deselects all checkboxes when selected index is set to []',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       foundation.setSelectedIndex([]);\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex).toHaveBeenCalled();\n       expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n           .toHaveBeenCalledTimes(4);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#getSelectedIndex should be in-sync with setter method","suites":["MDCListFoundation"],"line":2001,"updatePoint":{"line":2001,"column":60},"code":"  it('#getSelectedIndex should be in-sync with setter method', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    mockAdapter.getListItemCount.and.returnValue(4);\n    foundation.setSelectedIndex(2);\n    expect(foundation.getSelectedIndex()).toEqual(2);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#getSelectedIndex should be in-sync with setter method for multi-select checkbox based list","suites":["MDCListFoundation"],"line":2009,"updatePoint":{"line":2009,"column":97},"code":"  it('#getSelectedIndex should be in-sync with setter method for multi-select checkbox based list',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getListItemCount.and.returnValue(4);\n       mockAdapter.hasCheckboxAtIndex.withArgs(0).and.returnValue(true);\n       foundation.layout();\n\n       foundation.setSelectedIndex([0, 2, 3]);\n       expect(foundation.getSelectedIndex()).toEqual([0, 2, 3]);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setEnabled should remove disabled class and set aria-disabled to false","suites":["MDCListFoundation"],"line":2021,"updatePoint":{"line":2021,"column":77},"code":"  it('#setEnabled should remove disabled class and set aria-disabled to false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getListItemCount.and.returnValue(5);\n       foundation.layout();\n\n       foundation.setEnabled(3, true);\n       expect(mockAdapter.removeClassForElementIndex)\n           .toHaveBeenCalledWith(3, cssClasses.LIST_ITEM_DISABLED_CLASS);\n       expect(mockAdapter.removeClassForElementIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(3, strings.ARIA_DISABLED, 'false');\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setEnabled should add disabled class and set aria-disabled to true","suites":["MDCListFoundation"],"line":2036,"updatePoint":{"line":2036,"column":73},"code":"  it('#setEnabled should add disabled class and set aria-disabled to true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getListItemCount.and.returnValue(5);\n       foundation.layout();\n\n       foundation.setEnabled(3, false);\n       expect(mockAdapter.addClassForElementIndex)\n           .toHaveBeenCalledWith(3, cssClasses.LIST_ITEM_DISABLED_CLASS);\n       expect(mockAdapter.addClassForElementIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.setAttributeForElementIndex)\n           .toHaveBeenCalledWith(3, strings.ARIA_DISABLED, 'true');\n       expect(mockAdapter.setAttributeForElementIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through space","suites":["MDCListFoundation","notifySelectionChange","checkbox list"],"line":2053,"updatePoint":{"line":2053,"column":71},"code":"      it('should notify when a list item has been toggled through space',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n           const target = {tagName: 'A', classList: ['mdc-list-item']};\n           const event = createMockKeyboardEvent('Spacebar', [], target);\n\n           mockAdapter.getListItemCount.and.returnValue(5);\n           mockAdapter.getFocusedElementIndex.and.returnValue(/*fakeIndex*/ 4);\n           mockAdapter.hasCheckboxAtIndex.and.returnValue(true);\n           mockAdapter.isCheckboxCheckedAtIndex.and.returnValue(false);\n\n           foundation.layout();\n           foundation.handleKeydown(event, true, /*fakeIndex*/ 4);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([4]);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n           expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n               .toHaveBeenCalledTimes(1);\n           expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n               .toHaveBeenCalledWith(4, true);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through enter","suites":["MDCListFoundation","notifySelectionChange","checkbox list"],"line":2097,"updatePoint":{"line":2097,"column":71},"code":"      it('should notify when a list item has been toggled through enter',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n           const target = {classList: ['mdc-list-item']};\n           const event = createMockKeyboardEvent('Enter', [], target);\n\n           mockAdapter.getListItemCount.and.returnValue(5);\n           mockAdapter.getFocusedElementIndex.and.returnValue(/*fakeIndex*/ 4);\n           mockAdapter.hasCheckboxAtIndex.and.returnValue(true);\n           mockAdapter.isCheckboxCheckedAtIndex.and.returnValue(false);\n\n           foundation.layout();\n           foundation.handleKeydown(event, true, /*fakeIndex*/ 4);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([4]);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n           expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n               .toHaveBeenCalledTimes(1);\n           expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n               .toHaveBeenCalledWith(4, true);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through click","suites":["MDCListFoundation","notifySelectionChange","checkbox list"],"line":2141,"updatePoint":{"line":2141,"column":71},"code":"      it('should notify when a list item has been toggled through click',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n\n           mockAdapter.getListItemCount.and.returnValue(3);\n           mockAdapter.hasCheckboxAtIndex.and.returnValue(true);\n           mockAdapter.setCheckedCheckboxOrRadioAtIndex.and.returnValue(false);\n\n           foundation.layout();\n           foundation.handleClick(\n               /*fakeIndex*/ 2, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2]);\n           expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n               .toHaveBeenCalledTimes(1);\n           expect(mockAdapter.setCheckedCheckboxOrRadioAtIndex)\n               .toHaveBeenCalledWith(2, true);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when items have been selected through CTRL + A","suites":["MDCListFoundation","notifySelectionChange","checkbox list"],"line":2202,"updatePoint":{"line":2202,"column":70},"code":"      it('should notify when items have been selected through CTRL + A', () => {\n        const {foundation, mockAdapter} = setupTest();\n        const event = createMockKeyboardEvent('A', ['Control']);\n\n        mockAdapter.getListItemCount.and.returnValue(3);\n        mockAdapter.hasCheckboxAtIndex.and.returnValue(true);\n        mockAdapter.isCheckboxCheckedAtIndex.and.returnValue(false);\n\n        foundation.handleKeydown(event, false, -1);\n\n        foundation.layout();\n        foundation.handleKeydown(event, true, /*fakeIndex*/ 3);\n\n        // nothing was selected before, so this should capture all three items.\n        expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n        expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([\n          0, 1, 2\n        ]);\n\n        mockAdapter.notifySelectionChange.calls.reset();\n        foundation.setSelectedIndex([2]);\n        foundation.handleKeydown(event, true, /*fakeIndex*/ 3);\n\n        // The third item is already selected, so only the first and second\n        // should have been toggled.\n        expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n        expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([0, 1]);\n\n        mockAdapter.notifySelectionChange.calls.reset();\n        foundation.setSelectedIndex([0, 1, 2]);\n        foundation.handleKeydown(event, true, /*fakeIndex*/ 3);\n\n        // all items are selected, so all should be de-selected.\n        expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n        expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([\n          0, 1, 2\n        ]);\n      });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through space","suites":["MDCListFoundation","notifySelectionChange","radio list"],"line":2243,"updatePoint":{"line":2243,"column":71},"code":"      it('should notify when a list item has been toggled through space',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n           const target = {tagName: 'A', classList: ['mdc-list-item']};\n           const event = createMockKeyboardEvent('Spacebar', [], target);\n\n           mockAdapter.getListItemCount.and.returnValue(5);\n           mockAdapter.getFocusedElementIndex.and.returnValue(/*fakeIndex*/ 4);\n           mockAdapter.hasRadioAtIndex.and.returnValue(true);\n\n           foundation.layout();\n           foundation.handleKeydown(event, true, /*fakeIndex*/ 4);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([4]);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through enter","suites":["MDCListFoundation","notifySelectionChange","radio list"],"line":2280,"updatePoint":{"line":2280,"column":71},"code":"      it('should notify when a list item has been toggled through enter',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n           const target = {classList: ['mdc-list-item']};\n           const event = createMockKeyboardEvent('Enter', [], target);\n\n           mockAdapter.getListItemCount.and.returnValue(5);\n           mockAdapter.getFocusedElementIndex.and.returnValue(/*fakeIndex*/ 4);\n           mockAdapter.hasRadioAtIndex.and.returnValue(true);\n\n           foundation.layout();\n           foundation.handleKeydown(event, true, /*fakeIndex*/ 4);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([4]);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through click","suites":["MDCListFoundation","notifySelectionChange","radio list"],"line":2317,"updatePoint":{"line":2317,"column":71},"code":"      it('should notify when a list item has been toggled through click',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n\n           mockAdapter.getListItemCount.and.returnValue(3);\n           mockAdapter.hasRadioAtIndex.and.returnValue(true);\n\n           foundation.layout();\n           foundation.handleClick(\n               /*fakeIndex*/ 2, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2]);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through space","suites":["MDCListFoundation","notifySelectionChange","single selection"],"line":2369,"updatePoint":{"line":2369,"column":71},"code":"      it('should notify when a list item has been toggled through space',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n           const target = {tagName: 'A', classList: ['mdc-list-item']};\n           const event = createMockKeyboardEvent('Spacebar', [], target);\n\n           foundation.setSingleSelection(true);\n           mockAdapter.getListItemCount.and.returnValue(5);\n           mockAdapter.getFocusedElementIndex.and.returnValue(/*fakeIndex*/ 4);\n\n           foundation.layout();\n           foundation.handleKeydown(event, true, /*fakeIndex*/ 4);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([4]);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through enter","suites":["MDCListFoundation","notifySelectionChange","single selection"],"line":2406,"updatePoint":{"line":2406,"column":71},"code":"      it('should notify when a list item has been toggled through enter',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n           const target = {classList: ['mdc-list-item']};\n           const event = createMockKeyboardEvent('Enter', [], target);\n\n           mockAdapter.getListItemCount.and.returnValue(5);\n           mockAdapter.getFocusedElementIndex.and.returnValue(/*fakeIndex*/ 4);\n           foundation.setSingleSelection(true);\n\n           foundation.layout();\n           foundation.handleKeydown(event, true, /*fakeIndex*/ 4);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([4]);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"should notify when a list item has been toggled through click","suites":["MDCListFoundation","notifySelectionChange","single selection"],"line":2443,"updatePoint":{"line":2443,"column":71},"code":"      it('should notify when a list item has been toggled through click',\n         () => {\n           const {foundation, mockAdapter} = setupTest();\n\n           mockAdapter.getListItemCount.and.returnValue(3);\n           foundation.setSingleSelection(true);\n\n           foundation.layout();\n           foundation.handleClick(\n               /*fakeIndex*/ 2, /*isCheckboxAlreadyUpdatedInAdapter*/ false);\n\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledTimes(1);\n           expect(mockAdapter.notifySelectionChange).toHaveBeenCalledWith([2]);\n         });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#setSelectedIndex does not delesect on empty list","suites":["MDCListFoundation","notifySelectionChange","single selection"],"line":2493,"updatePoint":{"line":2493,"column":59},"code":"      it('#setSelectedIndex does not delesect on empty list', () => {\n        const {foundation, mockAdapter} = setupTest();\n\n        mockAdapter.getListItemCount.and.returnValue(0);\n        foundation.setSingleSelection(true);\n\n        foundation.layout();\n        expect(foundation.getSelectedIndex()).toBe(-1);\n\n        foundation.setSelectedIndex(-1, {forceUpdate: true});\n        expect(mockAdapter.setAttributeForElementIndex)\n            .not.toHaveBeenCalledWith();\n        expect(mockAdapter.setAttributeForElementIndex)\n            .not.toHaveBeenCalledWith();\n        expect(mockAdapter.getAttributeForElementIndex).not.toHaveBeenCalled();\n        expect(mockAdapter.getAttributeForElementIndex).not.toHaveBeenCalled();\n      });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"#layout initializes typeahead state when typeahead enabled","suites":["MDCListFoundation","typeahead"],"line":2514,"updatePoint":{"line":2514,"column":66},"code":"    it('#layout initializes typeahead state when typeahead enabled', () => {\n      const {foundation, mockAdapter} = setupTypeaheadTest();\n\n      // State is synchronized when typeahead is first turned on, but in this\n      // test we only care about re-initialization.\n      mockAdapter.getPrimaryTextAtIndex.calls.reset();\n      foundation.layout();\n\n      expect(mockAdapter.getPrimaryTextAtIndex).toHaveBeenCalled();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"slow typing when root focused jumps to first matching item","suites":["MDCListFoundation","typeahead"],"line":2525,"updatePoint":{"line":2525,"column":66},"code":"    it('slow typing when root focused jumps to first matching item', () => {\n      const {foundation, mockAdapter} = setupTypeaheadTest();\n\n      mockAdapter.isRootFocused.and.returnValue(true);\n      const event = createMockKeyboardEvent('B');\n\n      foundation.handleKeydown(event, false, -1);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"does not activate when ctrl/meta key is pressed","suites":["MDCListFoundation","typeahead"],"line":2535,"updatePoint":{"line":2535,"column":55},"code":"    it('does not activate when ctrl/meta key is pressed', () => {\n      const {foundation, mockAdapter} = setupTypeaheadTest();\n\n      mockAdapter.isRootFocused.and.returnValue(true);\n      const ctrlEvent = createMockKeyboardEvent('B', ['Control']);\n      const metaEvent = createMockKeyboardEvent('B', ['Meta']);\n\n      foundation.handleKeydown(ctrlEvent, false, -1);\n      foundation.handleKeydown(metaEvent, false, -1);\n      expect(mockAdapter.focusItemAtIndex).not.toHaveBeenCalledWith(0);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"slow typing when first item focused yields correct focus jump order","suites":["MDCListFoundation","typeahead"],"line":2547,"updatePoint":{"line":2547,"column":75},"code":"    it('slow typing when first item focused yields correct focus jump order',\n       () => {\n         const {foundation, mockAdapter} = setupTypeaheadTest();\n\n         mockAdapter.isRootFocused.and.returnValue(false);\n         const event = createMockKeyboardEvent('B', [], {tagName: 'span'});\n         // start with focus on first item\n         (foundation as any).focusedItemIndex = 0;\n\n         foundation.handleKeydown(event, true, 0);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         foundation.handleKeydown(event, true, 2);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(3);\n\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         foundation.handleKeydown(event, true, 3);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(4);\n\n         // wrap around\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         foundation.handleKeydown(event, true, 4);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"slow typing when middle item focused yields correct focus jump order","suites":["MDCListFoundation","typeahead"],"line":2573,"updatePoint":{"line":2573,"column":76},"code":"    it('slow typing when middle item focused yields correct focus jump order',\n       () => {\n         const {foundation, mockAdapter} = setupTypeaheadTest();\n\n         mockAdapter.isRootFocused.and.returnValue(false);\n         const event = createMockKeyboardEvent('B', [], {tagName: 'span'});\n         (foundation as any).focusedItemIndex = 3;\n\n         foundation.handleKeydown(event, true, 3);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(4);\n\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         foundation.handleKeydown(event, true, 4);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         foundation.handleKeydown(event, true, 0);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"slow typing with different keys yields correct focus jump order","suites":["MDCListFoundation","typeahead"],"line":2612,"updatePoint":{"line":2612,"column":71},"code":"    it('slow typing with different keys yields correct focus jump order',\n       () => {\n         const {foundation, mockAdapter} = setupTypeaheadTest();\n\n         mockAdapter.isRootFocused.and.returnValue(false);\n         const event = createMockKeyboardEvent('B', [], {tagName: 'span'});\n         // start with focus on first item\n         (foundation as any).focusedItemIndex = 0;\n\n         foundation.handleKeydown(event, true, 0);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         (event as any).key = 'A';\n         foundation.handleKeydown(event, true, 2);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(6);\n\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         (event as any).key = 'T';\n         foundation.handleKeydown(event, true, 2);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(6);\n\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         (event as any).key = 'Z';\n         foundation.handleKeydown(event, true, 6);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(1);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"fast typing yields correct focus jump order","suites":["MDCListFoundation","typeahead"],"line":2640,"updatePoint":{"line":2640,"column":51},"code":"    it('fast typing yields correct focus jump order', () => {\n      const {foundation, mockAdapter} = setupTypeaheadTest();\n\n      mockAdapter.isRootFocused.and.returnValue(false);\n      const event = createMockKeyboardEvent('B', [], {tagName: 'span'});\n      (foundation as any).focusedItemIndex = 0;\n\n      foundation.handleKeydown(event, true, 0);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n\n      (event as any).key = 'A';\n      foundation.handleKeydown(event, true, 2);\n      expect(mockAdapter.focusItemAtIndex).not.toHaveBeenCalledWith(3);\n\n      (event as any).key = 'B';\n      foundation.handleKeydown(event, true, 2);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(4);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"fast typing with spaces in text yields correct focus jump order","suites":["MDCListFoundation","typeahead"],"line":2659,"updatePoint":{"line":2659,"column":71},"code":"    it('fast typing with spaces in text yields correct focus jump order',\n       () => {\n         const {foundation, mockAdapter} = setupTypeaheadTest();\n\n         mockAdapter.isRootFocused.and.returnValue(false);\n         const event = createMockKeyboardEvent('Z', [], {tagName: 'span'});\n         (foundation as any).focusedItemIndex = 0;\n\n         foundation.handleKeydown(event, true, 0);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(1);\n\n         (event as any).key = 'Spacebar';\n         foundation.handleKeydown(event, true, 1);\n         expect(mockAdapter.focusItemAtIndex).not.toHaveBeenCalledWith(5);\n\n         (event as any).key = 'A';\n         foundation.handleKeydown(event, true, 1);\n         expect(mockAdapter.focusItemAtIndex).not.toHaveBeenCalledWith(5);\n\n         (event as any).key = 'C';\n         foundation.handleKeydown(event, true, 1);\n         expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(5);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"slow, then fast typing yields correct focus jump order","suites":["MDCListFoundation","typeahead"],"line":2684,"updatePoint":{"line":2684,"column":62},"code":"    it('slow, then fast typing yields correct focus jump order', () => {\n      const {foundation, mockAdapter} = setupTypeaheadTest();\n\n      mockAdapter.isRootFocused.and.returnValue(false);\n      const event = createMockKeyboardEvent('A', [], {tagName: 'span'});\n      // start with focus on first item\n      (foundation as any).focusedItemIndex = 0;\n\n      foundation.handleKeydown(event, true, 0);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(6);\n\n      jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n\n      (event as any).key = 'B';\n      foundation.handleKeydown(event, true, 6);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(0);\n\n      (event as any).key = 'A';\n      foundation.handleKeydown(event, true, 0);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(2);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"no matches cause focus to stay put","suites":["MDCListFoundation","typeahead"],"line":2706,"updatePoint":{"line":2706,"column":42},"code":"    it('no matches cause focus to stay put', () => {\n      const {foundation, mockAdapter} = setupTypeaheadTest();\n\n      mockAdapter.isRootFocused.and.returnValue(false);\n      const event = createMockKeyboardEvent('M', [], {tagName: 'span'});\n      // start with focus on first item\n      (foundation as any).focusedItemIndex = 0;\n\n      foundation.handleKeydown(event, true, 0);\n      jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n\n      (event as any).key = 'I';\n      foundation.handleKeydown(event, true, 0);\n\n      (event as any).key = 'O';\n      foundation.handleKeydown(event, true, 0);\n\n      expect(mockAdapter.focusItemAtIndex).not.toHaveBeenCalled();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"ignores disabled items properly","suites":["MDCListFoundation","typeahead"],"line":2726,"updatePoint":{"line":2726,"column":39},"code":"    it('ignores disabled items properly', () => {\n      const {foundation, mockAdapter} = setupTypeaheadTest();\n\n      mockAdapter.isRootFocused.and.returnValue(false);\n      const event = createMockKeyboardEvent('Z', [], {tagName: 'span'});\n      // start with focus on first item\n      (foundation as any).focusedItemIndex = 0;\n\n      mockAdapter.listItemAtIndexHasClass\n          .withArgs(1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n          .and.returnValue(true);\n\n      foundation.handleKeydown(event, true, 0);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(5);\n      jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n\n      mockAdapter.listItemAtIndexHasClass\n          .withArgs(1, cssClasses.LIST_ITEM_DISABLED_CLASS)\n          .and.returnValue(false);\n      foundation.handleKeydown(event, true, 0);\n      expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(1);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"programmatic typeahead invocation returns correct matching items","suites":["MDCListFoundation","typeahead"],"line":2749,"updatePoint":{"line":2749,"column":72},"code":"    it('programmatic typeahead invocation returns correct matching items',\n       () => {\n         const {foundation, mockAdapter} = setupTypeaheadTest();\n         expect(foundation.typeaheadMatchItem('b', 2, true)).toEqual(3);\n         expect(foundation.typeaheadMatchItem('a', 3, true)).toEqual(3);\n         expect(foundation.typeaheadMatchItem('b', 3, true)).toEqual(4);\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n\n         expect(foundation.typeaheadMatchItem('z', 2, true)).toEqual(5);\n         jasmine.clock().tick(numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n         expect(foundation.typeaheadMatchItem('z', 5, true)).toEqual(1);\n\n         expect(mockAdapter.focusItemAtIndex).not.toHaveBeenCalled();\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-list/test"},{"name":"attachTo initializes and returns a MDCMenuSurface instance","suites":["MDCMenuSurface"],"line":73,"updatePoint":{"line":73,"column":64},"code":"  it('attachTo initializes and returns a MDCMenuSurface instance', () => {\n    expect(MDCMenuSurface.attachTo(getFixture()) instanceof MDCMenuSurface)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"initialSyncWithDOM registers key handler on the menu surface","suites":["MDCMenuSurface"],"line":78,"updatePoint":{"line":78,"column":66},"code":"  it('initialSyncWithDOM registers key handler on the menu surface', () => {\n    const {root, component, mockFoundation} = setupTest();\n    emitEvent(root, 'keydown');\n    expect(mockFoundation.handleKeydown)\n        .toHaveBeenCalledWith(jasmine.any(Event));\n    expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"destroy deregisters key handler on the menu surface","suites":["MDCMenuSurface"],"line":87,"updatePoint":{"line":87,"column":57},"code":"  it('destroy deregisters key handler on the menu surface', () => {\n    const {root, component, mockFoundation} = setupTest();\n    component.destroy();\n    emitEvent(root, 'keydown');\n    expect(mockFoundation.handleKeydown)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#isOpen","suites":["MDCMenuSurface"],"line":95,"updatePoint":{"line":95,"column":13},"code":"  it('#isOpen', () => {\n    const {component, mockFoundation} = setupTest();\n    mockFoundation.isOpen.and.returnValue(true);\n    expect(component.isOpen()).toBe(true);\n\n    mockFoundation.isOpen.and.returnValue(false);\n    expect(component.isOpen()).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#open opens the menu surface","suites":["MDCMenuSurface"],"line":104,"updatePoint":{"line":104,"column":34},"code":"  it('#open opens the menu surface', () => {\n    const {component, mockFoundation} = setupTest();\n    component.open();\n    expect(mockFoundation.open).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#open calling open on button click does not close quick menu","suites":["MDCMenuSurface"],"line":110,"updatePoint":{"line":110,"column":66},"code":"  it('#open calling open on button click does not close quick menu', () => {\n    const {root} = setupTest();\n    // not using mock as this case fails on integration rather than unit\n    const component = new MDCMenuSurface(root);\n    const button = document.createElement('button');\n    const listener = () => {\n      component.open();\n    };\n    let numTimesClosedCalled = 0;\n\n    button.addEventListener('click', listener);\n    root.addEventListener(strings.CLOSED_EVENT, () => {\n      numTimesClosedCalled += 1;\n    });\n    component.quickOpen = true;\n    document.body.appendChild(button);\n\n\n    expect(numTimesClosedCalled).toEqual(0);\n    emitEvent(button, 'click', {bubbles: true});\n    document.body.removeChild(button);\n\n    expect(component.isOpen()).toEqual(true);\n    expect(numTimesClosedCalled).toEqual(0);\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":" causes the body click handler to be registered","suites":["MDCMenuSurface"],"line":138,"updatePoint":{"line":138,"column":76},"code":"  it(`${strings.OPENED_EVENT} causes the body click handler to be registered`,\n     () => {\n       const {root, mockFoundation} = setupTest();\n       emitEvent(root, strings.OPENED_EVENT);\n       emitEvent(document.body, 'click');\n       expect(mockFoundation.handleBodyClick)\n           .toHaveBeenCalledWith(jasmine.any(Event));\n       expect(mockFoundation.handleBodyClick).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#open does not throw error if no focusable elements","suites":["MDCMenuSurface"],"line":148,"updatePoint":{"line":148,"column":57},"code":"  it('#open does not throw error if no focusable elements', () => {\n    const {root, component, mockFoundation} = setupTest();\n\n    while (root.firstChild) {\n      root.removeChild(root.firstChild);\n    }\n\n    expect(() => {\n      component.open();\n    }).not.toThrow();\n    expect(mockFoundation.open).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#close closes the menu surface","suites":["MDCMenuSurface"],"line":161,"updatePoint":{"line":161,"column":36},"code":"  it('#close closes the menu surface', () => {\n    const {component, mockFoundation} = setupTest();\n    component.close();\n    expect(mockFoundation.close)\n        .toHaveBeenCalledWith(/* skipRestoreFocus */ false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":" causes the body click handler to be deregistered","suites":["MDCMenuSurface"],"line":168,"updatePoint":{"line":168,"column":78},"code":"  it(`${strings.CLOSED_EVENT} causes the body click handler to be deregistered`,\n     () => {\n       const {root, mockFoundation} = setupTest();\n       emitEvent(root, strings.OPENED_EVENT);\n       emitEvent(root, strings.CLOSED_EVENT);\n       emitEvent(document.body, 'click');\n       expect(mockFoundation.handleBodyClick)\n           .not.toHaveBeenCalledWith(jasmine.any(Event));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setMenuSurfaceAnchorElement","suites":["MDCMenuSurface"],"line":178,"updatePoint":{"line":178,"column":33},"code":"  it('setMenuSurfaceAnchorElement', () => {\n    const {component} = setupTest();\n    const myElement = {} as unknown as Element;\n    component.setMenuSurfaceAnchorElement(myElement);\n    expect(component.anchorElement).toEqual(myElement);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"anchorElement is properly initialized when the DOM contains an anchor","suites":["MDCMenuSurface"],"line":185,"updatePoint":{"line":185,"column":75},"code":"  it('anchorElement is properly initialized when the DOM contains an anchor',\n     () => {\n       const {component, anchor} = setupTest({withAnchor: true});\n       expect(component.anchorElement).toEqual(anchor as HTMLElement);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setIsHoisted","suites":["MDCMenuSurface"],"line":191,"updatePoint":{"line":191,"column":18},"code":"  it('setIsHoisted', () => {\n    const {component, mockFoundation} = setupTest();\n    component.setIsHoisted(true);\n    expect(mockFoundation.setIsHoisted).toHaveBeenCalledWith(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setFixedPosition is called when CSS class is present","suites":["MDCMenuSurface"],"line":197,"updatePoint":{"line":197,"column":58},"code":"  it('setFixedPosition is called when CSS class is present', () => {\n    const {mockFoundation} = setupTest({fixedPosition: true});\n    expect(mockFoundation.setFixedPosition).toHaveBeenCalledWith(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setFixedPosition is true","suites":["MDCMenuSurface"],"line":202,"updatePoint":{"line":202,"column":30},"code":"  it('setFixedPosition is true', () => {\n    const {root, component, mockFoundation} = setupTest();\n    component.setFixedPosition(true);\n    expect(root.classList.contains(cssClasses.FIXED)).toBe(true);\n    expect(mockFoundation.setFixedPosition).toHaveBeenCalledWith(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setFixedPosition is false","suites":["MDCMenuSurface"],"line":209,"updatePoint":{"line":209,"column":31},"code":"  it('setFixedPosition is false', () => {\n    const {root, component, mockFoundation} = setupTest();\n    component.setFixedPosition(false);\n    expect(root.classList.contains(cssClasses.FIXED)).toBe(false);\n    expect(mockFoundation.setFixedPosition).toHaveBeenCalledWith(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setAbsolutePosition calls the foundation setAbsolutePosition function","suites":["MDCMenuSurface"],"line":216,"updatePoint":{"line":216,"column":75},"code":"  it('setAbsolutePosition calls the foundation setAbsolutePosition function',\n     () => {\n       const {component, mockFoundation} = setupTest();\n       component.setAbsolutePosition(10, 10);\n       expect(mockFoundation.setAbsolutePosition).toHaveBeenCalledWith(10, 10);\n       expect(mockFoundation.setIsHoisted).toHaveBeenCalledWith(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setAnchorCorner","suites":["MDCMenuSurface"],"line":224,"updatePoint":{"line":224,"column":21},"code":"  it('setAnchorCorner', () => {\n    const {component, mockFoundation} = setupTest();\n    component.setAnchorCorner(Corner.TOP_START);\n    expect(mockFoundation.setAnchorCorner)\n        .toHaveBeenCalledWith(Corner.TOP_START);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setAnchorMargin with all object properties defined","suites":["MDCMenuSurface"],"line":231,"updatePoint":{"line":231,"column":56},"code":"  it('setAnchorMargin with all object properties defined', () => {\n    const {component, mockFoundation} = setupTest();\n    component.setAnchorMargin({top: 0, right: 0, bottom: 0, left: 0});\n    expect(mockFoundation.setAnchorMargin)\n        .toHaveBeenCalledWith({top: 0, right: 0, bottom: 0, left: 0});\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setAnchorMargin with empty object","suites":["MDCMenuSurface"],"line":238,"updatePoint":{"line":238,"column":39},"code":"  it('setAnchorMargin with empty object', () => {\n    const {component, mockFoundation} = setupTest();\n    component.setAnchorMargin({});\n    expect(mockFoundation.setAnchorMargin).toHaveBeenCalledWith({});\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"setQuickOpen","suites":["MDCMenuSurface"],"line":244,"updatePoint":{"line":244,"column":18},"code":"  it('setQuickOpen', () => {\n    const {component, mockFoundation} = setupTest();\n    component.quickOpen = false;\n    expect(mockFoundation.setQuickOpen).toHaveBeenCalledWith(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCMenuSurface"],"line":250,"updatePoint":{"line":250,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#removeClass removes a class from the root element","suites":["MDCMenuSurface"],"line":256,"updatePoint":{"line":256,"column":63},"code":"  it('adapter#removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#hasClass returns true if the root element has specified class","suites":["MDCMenuSurface"],"line":263,"updatePoint":{"line":263,"column":75},"code":"  it('adapter#hasClass returns true if the root element has specified class',\n     () => {\n       const {root, component} = setupTest();\n       root.classList.add('foo');\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasClass('foo'))\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#hasClass returns false if the root element does not have specified class","suites":["MDCMenuSurface"],"line":272,"updatePoint":{"line":272,"column":86},"code":"  it('adapter#hasClass returns false if the root element does not have specified class',\n     () => {\n       const {component} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasClass('foo'))\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#getInnerDimensions returns the dimensions of the container","suites":["MDCMenuSurface"],"line":280,"updatePoint":{"line":280,"column":72},"code":"  it('adapter#getInnerDimensions returns the dimensions of the container',\n     () => {\n       const {root, component} = setupTest();\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getInnerDimensions()\n                  .width)\n           .toEqual(root.offsetWidth);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getInnerDimensions()\n                  .height)\n           .toEqual(root.offsetHeight);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#notifyClose fires an  custom event","suites":["MDCMenuSurface"],"line":293,"updatePoint":{"line":293,"column":71},"code":"  it(`adapter#notifyClose fires an ${strings.CLOSED_EVENT} custom event`,\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('notifyClose handler');\n       root.addEventListener(strings.CLOSED_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyClose();\n       expect(handler).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#notifyClosing fires an  custom event","suites":["MDCMenuSurface"],"line":302,"updatePoint":{"line":302,"column":74},"code":"  it(`adapter#notifyClosing fires an ${strings.CLOSING_EVENT} custom event`,\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('notifyClosing handler');\n       root.addEventListener(strings.CLOSING_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyClosing();\n       expect(handler).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#notifyOpen fires an  custom event","suites":["MDCMenuSurface"],"line":311,"updatePoint":{"line":311,"column":70},"code":"  it(`adapter#notifyOpen fires an ${strings.OPENED_EVENT} custom event`, () => {\n    const {root, component} = setupTest();\n    const handler = jasmine.createSpy('notifyOpen handler');\n    root.addEventListener(strings.OPENED_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyOpen();\n    expect(handler).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#notifyOpening fires an  custom event","suites":["MDCMenuSurface"],"line":319,"updatePoint":{"line":319,"column":74},"code":"  it(`adapter#notifyOpening fires an ${strings.OPENING_EVENT} custom event`,\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('notifyOpening handler');\n       root.addEventListener(strings.OPENING_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyOpening();\n       expect(handler).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#restoreFocus restores focus saved by adapter#saveFocus","suites":["MDCMenuSurface"],"line":328,"updatePoint":{"line":328,"column":68},"code":"  it('adapter#restoreFocus restores focus saved by adapter#saveFocus', () => {\n    const {root, component} = setupTest({open: true});\n    const button = document.createElement('button');\n    document.body.appendChild(button);\n    document.body.appendChild(root);\n    button.focus();\n    (component.getDefaultFoundation() as any).adapter.saveFocus();\n    root.focus();\n    (component.getDefaultFoundation() as any).adapter.restoreFocus();\n    expect(document.activeElement).toEqual(button);\n    document.body.removeChild(button);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#restoreFocus does not restore focus if never called adapter#saveFocus","suites":["MDCMenuSurface"],"line":342,"updatePoint":{"line":342,"column":83},"code":"  it('adapter#restoreFocus does not restore focus if never called adapter#saveFocus',\n     () => {\n       const {root, component} = setupTest({open: true});\n       const button = document.createElement('button');\n       document.body.appendChild(button);\n       document.body.appendChild(root);\n       button.focus();\n       root.focus();\n       (component.getDefaultFoundation() as any).adapter.restoreFocus();\n       expect(document.activeElement).toEqual(root);\n       document.body.removeChild(button);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#restoreFocus does nothing if the active focused element is not in the menu-surface","suites":["MDCMenuSurface"],"line":356,"updatePoint":{"line":356,"column":96},"code":"  it('adapter#restoreFocus does nothing if the active focused element is not in the menu-surface',\n     () => {\n       const {root, component} = setupTest({open: true});\n       const button = document.createElement('button');\n       document.body.appendChild(button);\n       document.body.appendChild(root);\n       button.focus();\n       (component.getDefaultFoundation() as any).adapter.restoreFocus();\n       expect(document.activeElement).toEqual(button);\n       document.body.removeChild(button);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#isFocused returns whether the menu surface is focused","suites":["MDCMenuSurface"],"line":369,"updatePoint":{"line":369,"column":67},"code":"  it('adapter#isFocused returns whether the menu surface is focused', () => {\n    const {root, component} = setupTest({open: true});\n    document.body.appendChild(root);\n    root.focus();\n    expect((component.getDefaultFoundation() as any).adapter.isFocused())\n        .toBe(true);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#hasAnchor returns true if the menu surface has an anchor","suites":["MDCMenuSurface"],"line":378,"updatePoint":{"line":378,"column":70},"code":"  it('adapter#hasAnchor returns true if the menu surface has an anchor', () => {\n    const {component} = setupTest({open: true, withAnchor: true});\n    component.initialSyncWithDOM();\n    expect((component.getDefaultFoundation() as any).adapter.hasAnchor())\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#hasAnchor returns false if it does not have an anchor","suites":["MDCMenuSurface"],"line":385,"updatePoint":{"line":385,"column":67},"code":"  it('adapter#hasAnchor returns false if it does not have an anchor', () => {\n    const {root, component} = setupTest({open: true});\n    const notAnAnchor = document.createElement('div');\n    notAnAnchor.appendChild(root);\n    component.initialSyncWithDOM();\n    expect((component.getDefaultFoundation() as any).adapter.hasAnchor())\n        .toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#getAnchorDimensions returns the dimensions of the anchor element","suites":["MDCMenuSurface"],"line":394,"updatePoint":{"line":394,"column":78},"code":"  it('adapter#getAnchorDimensions returns the dimensions of the anchor element',\n     () => {\n       const {component, anchor} = setupTest({open: true, withAnchor: true}) as\n           {component: MDCMenuSurface, anchor: HTMLElement};\n       anchor.style.height = '21px';\n       anchor.style.width = '42px';\n       document.body.appendChild(anchor);\n       component.initialSyncWithDOM();\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getAnchorDimensions()\n                  .height)\n           .toBeCloseTo(21);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getAnchorDimensions()\n                  .width)\n           .toBeCloseTo(42);\n       document.body.removeChild(anchor);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#getAnchorDimensions returns undefined if there is no anchor element","suites":["MDCMenuSurface"],"line":413,"updatePoint":{"line":413,"column":81},"code":"  it('adapter#getAnchorDimensions returns undefined if there is no anchor element',\n     () => {\n       const {root, component} = setupTest({open: true});\n       document.body.appendChild(root);\n       component.initialSyncWithDOM();\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getAnchorDimensions())\n           .toBe(null);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#getWindowDimensions returns the dimensions of the window","suites":["MDCMenuSurface"],"line":424,"updatePoint":{"line":424,"column":70},"code":"  it('adapter#getWindowDimensions returns the dimensions of the window', () => {\n    const {root, component} = setupTest({open: true});\n    document.body.appendChild(root);\n    expect((component.getDefaultFoundation() as any)\n               .adapter.getWindowDimensions()\n               .height)\n        .toEqual(window.innerHeight);\n    expect((component.getDefaultFoundation() as any)\n               .adapter.getWindowDimensions()\n               .width)\n        .toEqual(window.innerWidth);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#getBodyDimensions returns the body dimensions","suites":["MDCMenuSurface"],"line":438,"updatePoint":{"line":438,"column":59},"code":"  it('adapter#getBodyDimensions returns the body dimensions', () => {\n    const {root, component} = setupTest({open: true});\n    document.body.appendChild(root);\n    expect((component.getDefaultFoundation() as any)\n               .adapter.getBodyDimensions()\n               .height)\n        .toEqual(document.body.clientHeight);\n    expect((component.getDefaultFoundation() as any)\n               .adapter.getBodyDimensions()\n               .width)\n        .toEqual(document.body.clientWidth);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#getWindowScroll returns the scroll position of the window when not scrolled","suites":["MDCMenuSurface"],"line":452,"updatePoint":{"line":452,"column":89},"code":"  it('adapter#getWindowScroll returns the scroll position of the window when not scrolled',\n     () => {\n       const {root, component} = setupTest({open: true});\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getWindowScroll()\n                  .x)\n           .toEqual(window.pageXOffset);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getWindowScroll()\n                  .y)\n           .toEqual(window.pageYOffset);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#isRtl returns true for RTL documents","suites":["MDCMenuSurface"],"line":467,"updatePoint":{"line":467,"column":50},"code":"  it('adapter#isRtl returns true for RTL documents', () => {\n    const {component, anchor} = setupTest({open: true, withAnchor: true}) as\n        {component: MDCMenuSurface, anchor: HTMLElement};\n    anchor.setAttribute('dir', 'rtl');\n    document.body.appendChild(anchor);\n    expect((component.getDefaultFoundation() as any).adapter.isRtl())\n        .toBe(true);\n    document.body.removeChild(anchor);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#isRtl returns false for explicit LTR documents","suites":["MDCMenuSurface"],"line":477,"updatePoint":{"line":477,"column":60},"code":"  it('adapter#isRtl returns false for explicit LTR documents', () => {\n    const {component, anchor} = setupTest({open: true, withAnchor: true}) as\n        {component: MDCMenuSurface, anchor: HTMLElement};\n    anchor.setAttribute('dir', 'ltr');\n    document.body.appendChild(anchor);\n    expect((component.getDefaultFoundation() as any).adapter.isRtl())\n        .toBe(false);\n    document.body.removeChild(anchor);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#isRtl returns false for implicit LTR documents","suites":["MDCMenuSurface"],"line":487,"updatePoint":{"line":487,"column":60},"code":"  it('adapter#isRtl returns false for implicit LTR documents', () => {\n    const {component, anchor} = setupTest({open: true, withAnchor: true}) as\n        {component: MDCMenuSurface, anchor: HTMLElement};\n    document.body.appendChild(anchor);\n    expect((component.getDefaultFoundation() as any).adapter.isRtl())\n        .toBe(false);\n    document.body.removeChild(anchor);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#isElementInContainer returns true if element is in the menu surface","suites":["MDCMenuSurface"],"line":496,"updatePoint":{"line":496,"column":81},"code":"  it('adapter#isElementInContainer returns true if element is in the menu surface',\n     () => {\n       const {root, component, anchor} =\n           setupTest({open: true, withAnchor: true}) as\n           {root: HTMLElement, component: MDCMenuSurface, anchor: HTMLElement};\n       const button = document.createElement('button');\n       root.appendChild(button);\n       document.body.appendChild(anchor);\n\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isElementInContainer(button))\n           .toBe(true);\n       document.body.removeChild(anchor);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#isElementInContainer returns true if element is the menu surface","suites":["MDCMenuSurface"],"line":511,"updatePoint":{"line":511,"column":78},"code":"  it('adapter#isElementInContainer returns true if element is the menu surface',\n     () => {\n       const {root, component, anchor} =\n           setupTest({open: true, withAnchor: true}) as\n           {root: HTMLElement, component: MDCMenuSurface, anchor: HTMLElement};\n       document.body.appendChild(anchor);\n\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isElementInContainer(root))\n           .toBe(true);\n       document.body.removeChild(anchor);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#isElementInContainer returns false if element is not in the menu surface","suites":["MDCMenuSurface"],"line":524,"updatePoint":{"line":524,"column":86},"code":"  it('adapter#isElementInContainer returns false if element is not in the menu surface',\n     () => {\n       const {component, anchor} = setupTest({open: true, withAnchor: true}) as\n           {component: MDCMenuSurface, anchor: HTMLElement};\n       document.body.appendChild(anchor);\n       const button = document.createElement('button');\n       document.body.appendChild(button);\n\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isElementInContainer(button))\n           .toBe(false);\n       document.body.removeChild(anchor);\n       document.body.removeChild(button);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#setTransformOrigin sets the correct transform origin on the menu surface element","suites":["MDCMenuSurface"],"line":539,"updatePoint":{"line":539,"column":94},"code":"  it('adapter#setTransformOrigin sets the correct transform origin on the menu surface element',\n     () => {\n       const {root, component} = setupTest();\n       // Write expected value and read canonical value from browser.\n       root.style.transformOrigin = 'left top 10px';\n       const expected = root.style.getPropertyValue(\n           `${getCorrectPropertyName(window, 'transform')}-origin`);\n       // Reset value.\n       root.style.transformOrigin = '';\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setTransformOrigin('left top 10px');\n       expect(root.style.getPropertyValue(\n                  `${getCorrectPropertyName(window, 'transform')}-origin`))\n           .toEqual(expected);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#setPosition sets the correct position on the menu surface element","suites":["MDCMenuSurface"],"line":556,"updatePoint":{"line":556,"column":79},"code":"  it('adapter#setPosition sets the correct position on the menu surface element',\n     () => {\n       const {root, component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setPosition({top: 10, left: 11});\n       expect(root.style.top).toEqual('10px');\n       expect(root.style.left).toEqual('11px');\n       (component.getDefaultFoundation() as any)\n           .adapter.setPosition({bottom: 10, right: 11});\n       expect(root.style.bottom).toEqual('10px');\n       expect(root.style.right).toEqual('11px');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"adapter#setMaxHeight sets the maxHeight style on the menu surface element","suites":["MDCMenuSurface"],"line":569,"updatePoint":{"line":569,"column":79},"code":"  it('adapter#setMaxHeight sets the maxHeight style on the menu surface element',\n     () => {\n       const {root, component} = setupTest();\n       (component.getDefaultFoundation() as any).adapter.setMaxHeight('100px');\n       expect(root.style.maxHeight).toEqual('100px');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"exports strings","suites":["MDCMenuSurfaceFoundation"],"line":174,"updatePoint":{"line":174,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCMenuSurfaceFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"exports cssClasses","suites":["MDCMenuSurfaceFoundation"],"line":178,"updatePoint":{"line":178,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCMenuSurfaceFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"exports numbers","suites":["MDCMenuSurfaceFoundation"],"line":182,"updatePoint":{"line":182,"column":21},"code":"  it('exports numbers', () => {\n    expect(MDCMenuSurfaceFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"exports Corner","suites":["MDCMenuSurfaceFoundation"],"line":186,"updatePoint":{"line":186,"column":20},"code":"  it('exports Corner', () => {\n    expect(MDCMenuSurfaceFoundation.Corner).toEqual(Corner);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCMenuSurfaceFoundation"],"line":190,"updatePoint":{"line":190,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCMenuSurfaceFoundation, [\n      'addClass',\n      'removeClass',\n      'hasClass',\n      'hasAnchor',\n      'notifyClose',\n      'notifyClosing',\n      'notifyOpen',\n      'notifyOpening',\n      'isElementInContainer',\n      'isRtl',\n      'setTransformOrigin',\n      'isFocused',\n      'saveFocus',\n      'restoreFocus',\n      'getInnerDimensions',\n      'getAnchorDimensions',\n      'getWindowDimensions',\n      'getBodyDimensions',\n      'getWindowScroll',\n      'setPosition',\n      'setMaxHeight',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#init throws error when the root class is not present","suites":["MDCMenuSurfaceFoundation"],"line":216,"updatePoint":{"line":216,"column":59},"code":"  it('#init throws error when the root class is not present', () => {\n    const {foundation, mockAdapter} =\n        setUpFoundationTest(MDCMenuSurfaceFoundation);\n    mockAdapter.hasClass.withArgs(cssClasses.ROOT).and.returnValue(false);\n    expect(() => {\n      foundation.init();\n    }).toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#isOpen returns true when the menu surface is open","suites":["MDCMenuSurfaceFoundation"],"line":1112,"updatePoint":{"line":1112,"column":56},"code":"  it('#isOpen returns true when the menu surface is open', () => {\n    const {foundation} = setupTest();\n\n    foundation.open();\n    expect(foundation.isOpen()).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#isOpen returns false when the menu surface is closed","suites":["MDCMenuSurfaceFoundation"],"line":1119,"updatePoint":{"line":1119,"column":59},"code":"  it('#isOpen returns false when the menu surface is closed', () => {\n    const {foundation} = setupTest();\n\n    foundation.close();\n    expect(foundation.isOpen()).toBeFalsy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#isOpen returns true when the menu surface is initiated with the open class present","suites":["MDCMenuSurfaceFoundation"],"line":1126,"updatePoint":{"line":1126,"column":89},"code":"  it('#isOpen returns true when the menu surface is initiated with the open class present',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.OPEN).and.returnValue(true);\n\n       foundation.init();\n       expect(foundation.isOpen()).toBeTruthy();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#isOpen returns false when the menu surface is initiated without the open class present","suites":["MDCMenuSurfaceFoundation"],"line":1135,"updatePoint":{"line":1135,"column":93},"code":"  it('#isOpen returns false when the menu surface is initiated without the open class present',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.OPEN).and.returnValue(false);\n\n       foundation.init();\n       expect(foundation.isOpen()).toBeFalsy();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#handleKeydown with Escape key closes the menu surface and sends close event","suites":["MDCMenuSurfaceFoundation"],"line":1144,"updatePoint":{"line":1144,"column":82},"code":"  it('#handleKeydown with Escape key closes the menu surface and sends close event',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const target = {};\n       const event = {target, key: 'Escape'} as KeyboardEvent;\n\n       (foundation as unknown as WithIsSurfaceOpen).isSurfaceOpen = true;\n       foundation.init();\n       foundation.handleKeydown(event);\n       jasmine.clock().tick(1);  // Run to frame.\n       jasmine.clock().tick(numbers.TRANSITION_CLOSE_DURATION);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPEN);\n       expect(mockAdapter.notifyClose).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#handleKeydown on any other key, do not prevent default on the event","suites":["MDCMenuSurfaceFoundation"],"line":1159,"updatePoint":{"line":1159,"column":74},"code":"  it('#handleKeydown on any other key, do not prevent default on the event',\n     () => {\n       const {foundation} = setupTest();\n       const target = {};\n       const preventDefault =\n           jasmine.createSpy('event.preventDefault') as Function;\n       const event = {target, key: 'Foo', preventDefault} as KeyboardEvent;\n\n       foundation.init();\n       foundation.handleKeydown(event);\n       // jasmine.clock().tick(numbers.SELECTED_TRIGGER_DELAY);\n       jasmine.clock().tick(1);  // Run to frame.\n       expect(preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"#handleBodyClick event closes the menu surface","suites":["MDCMenuSurfaceFoundation"],"line":1174,"updatePoint":{"line":1174,"column":52},"code":"  it('#handleBodyClick event closes the menu surface', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const mockEvt = {\n      target: {},\n    } as MouseEvent;\n\n    mockAdapter.hasClass.withArgs(MDCMenuSurfaceFoundation.cssClasses.OPEN)\n        .and.returnValue(true);\n    mockAdapter.isElementInContainer.withArgs(jasmine.anything())\n        .and.returnValue(false);\n\n    foundation.init();\n    foundation.open();\n    jasmine.clock().tick(numbers.TRANSITION_OPEN_DURATION);\n    jasmine.clock().tick(1);  // Run to frame.\n\n    foundation.handleBodyClick(mockEvt);\n    jasmine.clock().tick(1);  // Run to frame.\n\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"on menu surface click does not emit close","suites":["MDCMenuSurfaceFoundation"],"line":1196,"updatePoint":{"line":1196,"column":47},"code":"  it('on menu surface click does not emit close', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const mockEvt = {\n      target: {},\n    } as MouseEvent;\n    mockAdapter.isElementInContainer.withArgs(jasmine.anything())\n        .and.returnValue(true);\n    foundation.init();\n    foundation.open();\n    jasmine.clock().tick(1);  // Run to frame.\n    foundation.handleBodyClick(mockEvt);\n    jasmine.clock().tick(1);  // Run to frame.\n    expect(mockAdapter.notifyClose).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu-surface/test"},{"name":"destroy causes the menu-surface and list to be destroyed","suites":["MDCMenu"],"line":179,"updatePoint":{"line":179,"column":62},"code":"  it('destroy causes the menu-surface and list to be destroyed', () => {\n    const {component, list, menuSurface} = setupTestWithFakes();\n    component.destroy();\n    expect(list.destroy).toHaveBeenCalled();\n    expect(menuSurface.destroy).toHaveBeenCalled();\n    expect(menuSurface.unlisten).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"destroy does not throw an error if the list is not instantiated","suites":["MDCMenu"],"line":187,"updatePoint":{"line":187,"column":69},"code":"  it('destroy does not throw an error if the list is not instantiated', () => {\n    const fixture = getFixture();\n    const list = fixture.querySelector('.mdc-deprecated-list') as HTMLElement;\n    (list.parentElement as HTMLElement).removeChild(list);\n    const component = new MDCMenu(fixture);\n\n    expect(() => {\n      component.destroy.bind(component);\n    }).not.toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"attachTo initializes and returns a MDCMenu instance","suites":["MDCMenu"],"line":198,"updatePoint":{"line":198,"column":57},"code":"  it('attachTo initializes and returns a MDCMenu instance', () => {\n    expect(MDCMenu.attachTo(getFixture()) instanceof MDCMenu).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"initialize registers event listener for list item action","suites":["MDCMenu"],"line":202,"updatePoint":{"line":202,"column":62},"code":"  it('initialize registers event listener for list item action', () => {\n    const {mockFoundation, root} = setupTestWithFakes();\n    emitEvent(\n        root, MDCListFoundation.strings.ACTION_EVENT, {detail: {index: 0}});\n    expect(mockFoundation.handleItemAction)\n        .toHaveBeenCalledWith(jasmine.any(Element));\n    expect(mockFoundation.handleItemAction).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"initialize registers event listener for keydown","suites":["MDCMenu"],"line":211,"updatePoint":{"line":211,"column":53},"code":"  it('initialize registers event listener for keydown', () => {\n    const {mockFoundation, root} = setupTestWithFakes();\n    emitEvent(root, 'keydown');\n    expect(mockFoundation.handleKeydown)\n        .toHaveBeenCalledWith(jasmine.any(Event));\n    expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"destroy deregisters event listener for click","suites":["MDCMenu"],"line":219,"updatePoint":{"line":219,"column":50},"code":"  it('destroy deregisters event listener for click', () => {\n    const {component, mockFoundation, root} = setupTestWithFakes();\n    component.destroy();\n\n    emitEvent(\n        root, MDCListFoundation.strings.ACTION_EVENT, {detail: {index: 0}});\n    expect(mockFoundation.handleItemAction)\n        .not.toHaveBeenCalledWith(jasmine.any(Element));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"destroy deregisters event listener for keydown","suites":["MDCMenu"],"line":229,"updatePoint":{"line":229,"column":52},"code":"  it('destroy deregisters event listener for keydown', () => {\n    const {component, mockFoundation, root} = setupTestWithFakes();\n    component.destroy();\n\n    emitEvent(root, 'keydown');\n    expect(mockFoundation.handleKeydown)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"get/set open","suites":["MDCMenu"],"line":238,"updatePoint":{"line":238,"column":18},"code":"  it('get/set open', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n\n    (menuSurface as any).isOpen.and.returnValue(false);\n    expect(component.open).toBe(false);\n\n    component.open = true;\n    expect(menuSurface.open).toHaveBeenCalledTimes(1);\n\n    component.open = false;\n    expect(menuSurface.close).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"wrapFocus proxies to MDCList#wrapFocus property","suites":["MDCMenu"],"line":251,"updatePoint":{"line":251,"column":53},"code":"  it('wrapFocus proxies to MDCList#wrapFocus property', () => {\n    const {component, list} = setupTestWithFakes();\n\n    expect(component.wrapFocus).toBe(true);\n\n    component.wrapFocus = false;\n    expect(list.wrapFocus).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"typeaheadInProgress proxies to MDCList#typeaheadInProgress property","suites":["MDCMenu"],"line":260,"updatePoint":{"line":260,"column":73},"code":"  it('typeaheadInProgress proxies to MDCList#typeaheadInProgress property',\n     () => {\n       const {component, list} = setupTestWithFakes();\n\n       expect(component.typeaheadInProgress).toBeFalse();\n       list.typeaheadInProgress = true;\n       expect(component.typeaheadInProgress).toBeTrue();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"typeaheadMatchItem proxies to MDCList#typeaheadMatchItem method","suites":["MDCMenu"],"line":269,"updatePoint":{"line":269,"column":69},"code":"  it('typeaheadMatchItem proxies to MDCList#typeaheadMatchItem method', () => {\n    const {component, list} = setupTestWithFakes();\n\n    component.typeaheadMatchItem('a', 2);\n    expect(list.typeaheadMatchItem).toHaveBeenCalledWith('a', 2);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"layout proxies to MDCList#layout method","suites":["MDCMenu"],"line":276,"updatePoint":{"line":276,"column":45},"code":"  it('layout proxies to MDCList#layout method', () => {\n    const {component, list} = setupTestWithFakes();\n\n    component.layout();\n    expect(list.layout).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setAnchorCorner proxies to the MDCMenuSurface#setAnchorCorner method","suites":["MDCMenu"],"line":283,"updatePoint":{"line":283,"column":74},"code":"  it('setAnchorCorner proxies to the MDCMenuSurface#setAnchorCorner method',\n     () => {\n       const {component, menuSurface} = setupTestWithFakes();\n       component.setAnchorCorner(Corner.TOP_START);\n       expect(menuSurface.setAnchorCorner)\n           .toHaveBeenCalledWith(Corner.TOP_START);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setAnchorMargin","suites":["MDCMenu"],"line":291,"updatePoint":{"line":291,"column":21},"code":"  it('setAnchorMargin', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n    component.setAnchorMargin({top: 0, right: 0, bottom: 0, left: 0});\n    expect(menuSurface.setAnchorMargin)\n        .toHaveBeenCalledWith({top: 0, right: 0, bottom: 0, left: 0});\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setSelectedIndex calls foundation method setSelectedIndex with given index.","suites":["MDCMenu"],"line":298,"updatePoint":{"line":298,"column":81},"code":"  it('setSelectedIndex calls foundation method setSelectedIndex with given index.',\n     () => {\n       const {component, mockFoundation} =\n           setupTestWithMock({fixture: getFixtureWithMultipleSelectionGroups});\n       component.setSelectedIndex(1);\n       expect(mockFoundation.setSelectedIndex).toHaveBeenCalledWith(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setEnabled calls foundation method setEnabled with given index and disabled state.","suites":["MDCMenu"],"line":306,"updatePoint":{"line":306,"column":88},"code":"  it('setEnabled calls foundation method setEnabled with given index and disabled state.',\n     () => {\n       const {component, mockFoundation} =\n           setupTestWithMock({fixture: getFixtureWithMultipleSelectionGroups});\n       component.setEnabled(1, true);\n       expect(mockFoundation.setEnabled).toHaveBeenCalledWith(1, true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setQuickOpen","suites":["MDCMenu"],"line":314,"updatePoint":{"line":314,"column":18},"code":"  it('setQuickOpen', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n    component.quickOpen = true;\n    expect(menuSurface.quickOpen).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"items returns all menu items","suites":["MDCMenu"],"line":320,"updatePoint":{"line":320,"column":34},"code":"  it('items returns all menu items', () => {\n    const {root, component, list} = setupTestWithFakes();\n    const items = [].slice.call(root.querySelectorAll('[role=\"menuitem\"]'));\n    list.listElements = items;\n    expect(component.items).toEqual(items);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"items returns nothing if list is not defined","suites":["MDCMenu"],"line":327,"updatePoint":{"line":327,"column":50},"code":"  it('items returns nothing if list is not defined', () => {\n    const {root, component, list} = setupTestWithFakes();\n    const items = [].slice.call(root.querySelectorAll('[role=\"menuitem\"]'));\n    list.listElements = items;\n    expect(component.items).toEqual(items);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"getOptionByIndex","suites":["MDCMenu"],"line":334,"updatePoint":{"line":334,"column":22},"code":"  it('getOptionByIndex', () => {\n    const {root, component, list} = setupTestWithFakes();\n    const items = [].slice.call(root.querySelectorAll('[role=\"menuitem\"]'));\n    list.listElements = items;\n    expect(component.getOptionByIndex(0)).toEqual(items[0]);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"getOptionByIndex returns null if index is > list length","suites":["MDCMenu"],"line":341,"updatePoint":{"line":341,"column":61},"code":"  it('getOptionByIndex returns null if index is > list length', () => {\n    const {root, component, list} = setupTestWithFakes();\n    const items = [].slice.call(root.querySelectorAll('[role=\"menuitem\"]'));\n    list.listElements = items;\n    expect(component.getOptionByIndex(items.length)).toBe(null);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"getPrimaryTextAtIndex","suites":["MDCMenu"],"line":348,"updatePoint":{"line":348,"column":27},"code":"  it('getPrimaryTextAtIndex', () => {\n    const {component, list} = setupTestWithFakes();\n    list.getPrimaryText.withArgs(jasmine.any(Element))\n        .and.returnValue('Another Item');\n\n    expect(component.getPrimaryTextAtIndex(1)).toEqual('Another Item');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setFixedPosition","suites":["MDCMenu"],"line":356,"updatePoint":{"line":356,"column":22},"code":"  it('setFixedPosition', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n    component.setFixedPosition(true);\n    expect(menuSurface.setFixedPosition).toHaveBeenCalledWith(true);\n\n    component.setFixedPosition(false);\n    expect(menuSurface.setFixedPosition).toHaveBeenCalledWith(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setIsHoisted","suites":["MDCMenu"],"line":365,"updatePoint":{"line":365,"column":18},"code":"  it('setIsHoisted', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n    component.setIsHoisted(true);\n    expect(menuSurface.setIsHoisted).toHaveBeenCalledWith(true);\n\n    component.setIsHoisted(false);\n    expect(menuSurface.setIsHoisted).toHaveBeenCalledWith(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setAnchorElement","suites":["MDCMenu"],"line":374,"updatePoint":{"line":374,"column":22},"code":"  it('setAnchorElement', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n    const button = document.createElement('button');\n    component.setAnchorElement(button);\n    expect(menuSurface.anchorElement).toEqual(button);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setAbsolutePosition","suites":["MDCMenu"],"line":381,"updatePoint":{"line":381,"column":25},"code":"  it('setAbsolutePosition', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n    component.setAbsolutePosition(100, 120);\n    expect(menuSurface.setAbsolutePosition).toHaveBeenCalledWith(100, 120);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"menu surface opened event causes list root element to be focused","suites":["MDCMenu"],"line":387,"updatePoint":{"line":387,"column":70},"code":"  it('menu surface opened event causes list root element to be focused', () => {\n    const {root} = setupTest();\n    document.body.appendChild(root);\n    const event = document.createEvent('Event');\n    event.initEvent(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, false, true);\n    root.dispatchEvent(event);\n\n    // TODO(b/182902089): use list constants once this code has been migrated.\n    expect((document.activeElement as HTMLElement)\n               .classList.contains('mdc-deprecated-list'))\n        .toBe(true);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleMenuSurfaceOpened calls foundation's handleMenuSurfaceOpened method on menu surface opened event","suites":["MDCMenu"],"line":401,"updatePoint":{"line":401,"column":109},"code":"  it('handleMenuSurfaceOpened calls foundation\\'s handleMenuSurfaceOpened method on menu surface opened event',\n     () => {\n       const {root, mockFoundation} = setupTestWithMock();\n       emitEvent(root, MDCMenuSurfaceFoundation.strings.OPENED_EVENT);\n       expect(mockFoundation.handleMenuSurfaceOpened).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"list item enter keydown emits a menu action event","suites":["MDCMenu"],"line":408,"updatePoint":{"line":408,"column":55},"code":"  it('list item enter keydown emits a menu action event', () => {\n    const {root, component} = setupTest();\n    const fakeEnterKeyEvent = {\n      key: 'Enter',\n      target: {tagName: 'div'},\n      getModifierState: () => false,\n      preventDefault: () => undefined\n    };\n\n    let detail: any;\n    component.listen(\n        MDCMenuFoundation.strings.SELECTED_EVENT,\n        (evt: any) => detail = evt.detail);\n\n    document.body.appendChild(root);\n    (component as any)\n        .list.foundation.handleKeydown(\n            fakeEnterKeyEvent, /* isRootListItem */ true,\n            /* listItemIndex */ 0);\n    document.body.removeChild(root);\n\n    expect(detail).toEqual({index: 0, item: component.items[0]});\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"open=true does not throw an error if there are no items in the list to focus","suites":["MDCMenu"],"line":432,"updatePoint":{"line":432,"column":82},"code":"  it('open=true does not throw an error if there are no items in the list to focus',\n     () => {\n       const {component, root, list} = setupTestWithFakes();\n       list.listElements = [];\n       document.body.appendChild(root);\n       root.querySelector('.mdc-deprecated-list-item');\n       expect(() => {\n         component.open = true;\n       }).not.toThrow();\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"#setDefaultFocusState Calls foundation's setDefaultFocusState method","suites":["MDCMenu"],"line":444,"updatePoint":{"line":444,"column":75},"code":"  it('#setDefaultFocusState Calls foundation\\'s setDefaultFocusState method',\n     () => {\n       const {component, mockFoundation} = setupTestWithFakes();\n\n       component.setDefaultFocusState(DefaultFocusState.FIRST_ITEM);\n       expect(mockFoundation.setDefaultFocusState)\n           .toHaveBeenCalledWith(DefaultFocusState.FIRST_ITEM);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#addClassToElementAtIndex adds a class to the element at the index provided","suites":["MDCMenu"],"line":455,"updatePoint":{"line":455,"column":88},"code":"  it('adapter#addClassToElementAtIndex adds a class to the element at the index provided',\n     () => {\n       const {root, component} = setupTest();\n       const firstItem =\n           root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n       (component.getDefaultFoundation() as any)\n           .adapter.addClassToElementAtIndex(0, 'foo');\n       expect(firstItem.classList.contains('foo')).toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#removeClassFromElementAtIndex adds a class to the element at the index provided","suites":["MDCMenu"],"line":465,"updatePoint":{"line":465,"column":93},"code":"  it('adapter#removeClassFromElementAtIndex adds a class to the element at the index provided',\n     () => {\n       const {root, component} = setupTest();\n       const firstItem =\n           root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n       firstItem.classList.add('foo');\n       (component.getDefaultFoundation() as any)\n           .adapter.removeClassFromElementAtIndex(0, 'foo');\n       expect(firstItem.classList.contains('foo')).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#addAttributeToElementAtIndex adds a class to the element at the index provided","suites":["MDCMenu"],"line":476,"updatePoint":{"line":476,"column":92},"code":"  it('adapter#addAttributeToElementAtIndex adds a class to the element at the index provided',\n     () => {\n       const {root, component} = setupTest();\n       const firstItem =\n           root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n       (component.getDefaultFoundation() as any)\n           .adapter.addAttributeToElementAtIndex(0, 'foo', 'true');\n       expect(firstItem.getAttribute('foo') === 'true').toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#removeAttributeFromElementAtIndex adds a class to the element at the index provided","suites":["MDCMenu"],"line":486,"updatePoint":{"line":486,"column":97},"code":"  it('adapter#removeAttributeFromElementAtIndex adds a class to the element at the index provided',\n     () => {\n       const {root, component} = setupTest();\n       const firstItem =\n           root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n       firstItem.setAttribute('foo', 'true');\n       (component.getDefaultFoundation() as any)\n           .adapter.removeAttributeFromElementAtIndex(0, 'foo');\n       expect(firstItem.getAttribute('foo')).toBe(null);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#elementContainsClass returns true if the class exists on the element","suites":["MDCMenu"],"line":497,"updatePoint":{"line":497,"column":82},"code":"  it('adapter#elementContainsClass returns true if the class exists on the element',\n     () => {\n       const {root, component} = setupTest();\n       const firstItem =\n           root.querySelector('.mdc-deprecated-list-item') as HTMLElement;\n       firstItem.classList.add('foo');\n       const containsFoo = (component.getDefaultFoundation() as any)\n                               .adapter.elementContainsClass(firstItem, 'foo');\n       expect(containsFoo).toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#elementContainsClass returns false if the class does not exist on the element","suites":["MDCMenu"],"line":508,"updatePoint":{"line":508,"column":91},"code":"  it('adapter#elementContainsClass returns false if the class does not exist on the element',\n     () => {\n       const {root, component} = setupTest();\n       const firstItem = root.querySelector('.mdc-deprecated-list-item');\n       const containsFoo = (component.getDefaultFoundation() as any)\n                               .adapter.elementContainsClass(firstItem, 'foo');\n       expect(containsFoo).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#closeSurface proxies to menuSurface#close","suites":["MDCMenu"],"line":517,"updatePoint":{"line":517,"column":55},"code":"  it('adapter#closeSurface proxies to menuSurface#close', () => {\n    const {component, menuSurface} = setupTestWithFakes();\n    (component.getDefaultFoundation() as any)\n        .adapter.closeSurface(/** skipRestoreFocus */ false);\n    expect(menuSurface.close)\n        .toHaveBeenCalledWith(/** skipRestoreFocus */ false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#getElementIndex returns the index value of an element in the list","suites":["MDCMenu"],"line":525,"updatePoint":{"line":525,"column":79},"code":"  it('adapter#getElementIndex returns the index value of an element in the list',\n     () => {\n       const {root, component} = setupTest();\n       const firstItem = root.querySelector('.mdc-deprecated-list-item');\n       const indexValue = (component.getDefaultFoundation() as any)\n                              .adapter.getElementIndex(firstItem);\n       expect(indexValue).toEqual(0);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#getElementIndex returns -1 if the element does not exist in the list","suites":["MDCMenu"],"line":534,"updatePoint":{"line":534,"column":82},"code":"  it('adapter#getElementIndex returns -1 if the element does not exist in the list',\n     () => {\n       const {component} = setupTest();\n       const firstItem = document.createElement('li');\n       const indexValue = (component.getDefaultFoundation() as any)\n                              .adapter.getElementIndex(firstItem);\n       expect(indexValue).toEqual(-1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#notifySelected emits an event for a selected element","suites":["MDCMenu"],"line":543,"updatePoint":{"line":543,"column":66},"code":"  it('adapter#notifySelected emits an event for a selected element', () => {\n    const {root, component} = setupTest();\n    const handler = jasmine.createSpy('eventHandler');\n    root.addEventListener(MDCMenuFoundation.strings.SELECTED_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifySelected(0);\n    expect(handler).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#getMenuItemCount returns the menu item count","suites":["MDCMenu"],"line":551,"updatePoint":{"line":551,"column":58},"code":"  it('adapter#getMenuItemCount returns the menu item count', () => {\n    const {component} = setupTest();\n    expect(\n        (component.getDefaultFoundation() as any).adapter.getMenuItemCount())\n        .toEqual(component.items.length);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#focusItemAtIndex focuses the menu item at given index","suites":["MDCMenu"],"line":558,"updatePoint":{"line":558,"column":67},"code":"  it('adapter#focusItemAtIndex focuses the menu item at given index', () => {\n    const {root, component} = setupTest();\n    document.body.appendChild(root);\n\n    (component.getDefaultFoundation() as any).adapter.focusItemAtIndex(2);\n    expect(document.activeElement).toEqual(component.items[2]);\n\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"adapter#focusListRoot focuses the list root element","suites":["MDCMenu"],"line":568,"updatePoint":{"line":568,"column":57},"code":"  it('adapter#focusListRoot focuses the list root element', () => {\n    const {root, component} = setupTest();\n    document.body.appendChild(root);\n\n    (component.getDefaultFoundation() as any).adapter.focusListRoot();\n    // TODO(b/182902089): use list constants once this code has been migrated.\n    expect(document.activeElement)\n        .toEqual(root.querySelector('.mdc-deprecated-list'));\n\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCMenuFoundation"],"line":43,"updatePoint":{"line":43,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCMenuFoundation, [\n      'addClassToElementAtIndex',\n      'removeClassFromElementAtIndex',\n      'addAttributeToElementAtIndex',\n      'removeAttributeFromElementAtIndex',\n      'getAttributeFromElementAtIndex',\n      'elementContainsClass',\n      'closeSurface',\n      'getElementIndex',\n      'getSelectedSiblingOfItemAtIndex',\n      'isSelectableItemAtIndex',\n      'notifySelected',\n      'getMenuItemCount',\n      'focusItemAtIndex',\n      'focusListRoot',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"exports strings","suites":["MDCMenuFoundation"],"line":62,"updatePoint":{"line":62,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCMenuFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"exports cssClasses","suites":["MDCMenuFoundation"],"line":66,"updatePoint":{"line":66,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCMenuFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"exports numbers","suites":["MDCMenuFoundation"],"line":70,"updatePoint":{"line":70,"column":21},"code":"  it('exports numbers', () => {\n    expect(MDCMenuFoundation.numbers).toEqual(menuNumbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"destroy does not throw error","suites":["MDCMenuFoundation"],"line":74,"updatePoint":{"line":74,"column":34},"code":"  it('destroy does not throw error', () => {\n    const {foundation} = setupTest();\n    expect(() => foundation.destroy).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"destroy does not throw error if destroyed immediately after keydown","suites":["MDCMenuFoundation"],"line":79,"updatePoint":{"line":79,"column":73},"code":"  it('destroy does not throw error if destroyed immediately after keydown',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = {\n         key: 'Space',\n         target: 'My Element',\n         preventDefault: jasmine.createSpy('preventDefault')\n       } as unknown as KeyboardEvent;\n       mockAdapter.elementContainsClass\n           .withArgs(event.target, listClasses.LIST_ITEM_CLASS)\n           .and.returnValue(true);\n       mockAdapter.getElementIndex.withArgs(event.target).and.returnValue(0);\n       foundation.handleKeydown(event);\n\n       expect(() => {\n         foundation.destroy();\n       }).not.toThrow();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"destroy closes surface","suites":["MDCMenuFoundation"],"line":98,"updatePoint":{"line":98,"column":28},"code":"  it('destroy closes surface', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    expect(() => {\n      foundation.destroy();\n    }).not.toThrow();\n    expect(mockAdapter.closeSurface).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleKeydown does nothing if key is not space, enter, or tab","suites":["MDCMenuFoundation"],"line":107,"updatePoint":{"line":107,"column":67},"code":"  it('handleKeydown does nothing if key is not space, enter, or tab', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const event = {key: 'N'} as KeyboardEvent;\n\n    foundation.handleKeydown(event);\n    expect(mockAdapter.closeSurface).not.toHaveBeenCalled();\n    expect(mockAdapter.elementContainsClass)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleKeydown tab key causes the menu to close","suites":["MDCMenuFoundation"],"line":117,"updatePoint":{"line":117,"column":52},"code":"  it('handleKeydown tab key causes the menu to close', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const event = {key: 'Tab'} as KeyboardEvent;\n\n    foundation.handleKeydown(event);\n    expect(mockAdapter.closeSurface)\n        .toHaveBeenCalledWith(/** skipRestoreFocus */ true);\n    expect(mockAdapter.closeSurface).toHaveBeenCalledTimes(1);\n    expect(mockAdapter.elementContainsClass)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleItemAction item action closes the menu","suites":["MDCMenuFoundation"],"line":129,"updatePoint":{"line":129,"column":50},"code":"  it('handleItemAction item action closes the menu', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const itemEl = document.createElement('li');\n\n    mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(0);\n\n    foundation.handleItemAction(itemEl);\n    expect(mockAdapter.closeSurface).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleItemAction item action emits selected event","suites":["MDCMenuFoundation"],"line":139,"updatePoint":{"line":139,"column":55},"code":"  it('handleItemAction item action emits selected event', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const itemEl = document.createElement('li');\n\n    mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(0);\n\n    foundation.handleItemAction(itemEl);\n    expect(mockAdapter.notifySelected).toHaveBeenCalledWith({index: 0});\n    expect(mockAdapter.notifySelected).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleKeydown space/enter key inside an input does not prevent default on the event","suites":["MDCMenuFoundation"],"line":150,"updatePoint":{"line":150,"column":89},"code":"  it('handleKeydown space/enter key inside an input does not prevent default on the event',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const event = {\n         key: 'Space',\n         target: {tagName: 'input'},\n         preventDefault: jasmine.createSpy('preventDefault')\n       } as unknown as KeyboardEvent;\n       mockAdapter.elementContainsClass\n           .withArgs(event.target, listClasses.LIST_ITEM_CLASS)\n           .and.returnValue(true);\n       mockAdapter.getElementIndex.withArgs(event.target).and.returnValue(0);\n\n       foundation.handleKeydown(event);\n       (event as any).key = 'Enter';\n       foundation.handleKeydown(event);\n\n       expect(event.preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleItemAction item action event inside of a selection group with another element selected","suites":["MDCMenuFoundation"],"line":194,"updatePoint":{"line":194,"column":98},"code":"  it('handleItemAction item action event inside of a selection group with another element selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const itemEl = document.createElement('li');\n       mockAdapter.elementContainsClass\n           .withArgs(itemEl, listClasses.LIST_ITEM_CLASS)\n           .and.returnValue(true);\n       mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(0);\n       mockAdapter.elementContainsClass\n           .withArgs(itemEl, cssClasses.MENU_SELECTION_GROUP)\n           .and.returnValue(true);\n       mockAdapter.isSelectableItemAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.getSelectedSiblingOfItemAtIndex.withArgs(0).and.returnValue(\n           1);\n       mockAdapter.getMenuItemCount.and.returnValue(5);\n\n       foundation.handleItemAction(itemEl);\n       jasmine.clock().tick(numbers.TRANSITION_CLOSE_DURATION);\n\n       expect(mockAdapter.removeClassFromElementAtIndex)\n           .toHaveBeenCalledWith(1, cssClasses.MENU_SELECTED_LIST_ITEM);\n       expect(mockAdapter.removeClassFromElementAtIndex)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.addClassToElementAtIndex)\n           .toHaveBeenCalledWith(0, cssClasses.MENU_SELECTED_LIST_ITEM);\n       expect(mockAdapter.addClassToElementAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleItemAction item action event inside of a selection group with no element selected","suites":["MDCMenuFoundation"],"line":222,"updatePoint":{"line":222,"column":93},"code":"  it('handleItemAction item action event inside of a selection group with no element selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const itemEl = document.createElement('li');\n       mockAdapter.elementContainsClass\n           .withArgs(itemEl, listClasses.LIST_ITEM_CLASS)\n           .and.returnValue(true);\n       mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(0);\n       mockAdapter.elementContainsClass\n           .withArgs(itemEl, cssClasses.MENU_SELECTION_GROUP)\n           .and.returnValue(true);\n       mockAdapter.isSelectableItemAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.getSelectedSiblingOfItemAtIndex.withArgs(0).and.returnValue(\n           -1);\n       mockAdapter.getMenuItemCount.and.returnValue(5);\n\n       foundation.handleItemAction(itemEl);\n       jasmine.clock().tick(numbers.TRANSITION_CLOSE_DURATION);\n\n       expect(mockAdapter.removeClassFromElementAtIndex)\n           .not.toHaveBeenCalledWith(\n               jasmine.any(Number), cssClasses.MENU_SELECTED_LIST_ITEM);\n       expect(mockAdapter.addClassToElementAtIndex)\n           .toHaveBeenCalledWith(0, cssClasses.MENU_SELECTED_LIST_ITEM);\n       expect(mockAdapter.addClassToElementAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleItemAction adds class to the correct child element of a selection group when menu has mutated","suites":["MDCMenuFoundation"],"line":303,"updatePoint":{"line":303,"column":105},"code":"  it('handleItemAction adds class to the correct child element of a selection group when menu has mutated',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const itemEl = document.createElement('li');\n       mockAdapter.elementContainsClass\n           .withArgs(itemEl, listClasses.LIST_ITEM_CLASS)\n           .and.returnValue(true);\n       mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(1);\n       mockAdapter.elementContainsClass\n           .withArgs(itemEl, cssClasses.MENU_SELECTION_GROUP)\n           .and.returnValue(true);\n\n       mockAdapter.isSelectableItemAtIndex.withArgs(1).and.returnValue(true);\n       mockAdapter.getSelectedSiblingOfItemAtIndex.withArgs(1).and.returnValue(\n           -1);\n       mockAdapter.getMenuItemCount.and.returnValue(2);\n\n       foundation.handleItemAction(itemEl);\n\n       // Element at index 1 is now at index 0\n       mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(0);\n       mockAdapter.isSelectableItemAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.getSelectedSiblingOfItemAtIndex.withArgs(0).and.returnValue(\n           -1);\n       mockAdapter.getMenuItemCount.and.returnValue(1);\n\n       jasmine.clock().tick(numbers.TRANSITION_CLOSE_DURATION);\n\n       expect(mockAdapter.addClassToElementAtIndex)\n           .toHaveBeenCalledWith(0, cssClasses.MENU_SELECTED_LIST_ITEM);\n       expect(mockAdapter.addClassToElementAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleMenuSurfaceOpened menu focuses the list root element by default on menu surface opened","suites":["MDCMenuFoundation"],"line":336,"updatePoint":{"line":336,"column":98},"code":"  it('handleMenuSurfaceOpened menu focuses the list root element by default on menu surface opened',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.handleMenuSurfaceOpened();\n       expect(mockAdapter.focusListRoot).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleMenuSurfaceOpened focuses the list root element when DefaultFocusState is set to LIST_ROOT","suites":["MDCMenuFoundation"],"line":355,"updatePoint":{"line":355,"column":102},"code":"  it('handleMenuSurfaceOpened focuses the list root element when DefaultFocusState is set to LIST_ROOT',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.setDefaultFocusState(DefaultFocusState.LIST_ROOT);\n       foundation.handleMenuSurfaceOpened();\n       expect(mockAdapter.focusListRoot).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleMenuSurfaceOpened focuses the last item when DefaultFocusState is set to LAST_ITEM","suites":["MDCMenuFoundation"],"line":364,"updatePoint":{"line":364,"column":94},"code":"  it('handleMenuSurfaceOpened focuses the last item when DefaultFocusState is set to LAST_ITEM',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       mockAdapter.getMenuItemCount.and.returnValue(5);\n       foundation.setDefaultFocusState(DefaultFocusState.LAST_ITEM);\n       foundation.handleMenuSurfaceOpened();\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledWith(4);\n       expect(mockAdapter.focusItemAtIndex).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"handleMenuSurfaceOpened does not focus anything when DefaultFocusState is set to NONE","suites":["MDCMenuFoundation"],"line":375,"updatePoint":{"line":375,"column":91},"code":"  it('handleMenuSurfaceOpened does not focus anything when DefaultFocusState is set to NONE',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.setDefaultFocusState(DefaultFocusState.NONE);\n       foundation.handleMenuSurfaceOpened();\n       expect(mockAdapter.focusItemAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.focusListRoot).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"#getSelectedIndex returns correct index","suites":["MDCMenuFoundation"],"line":386,"updatePoint":{"line":386,"column":45},"code":"  it('#getSelectedIndex returns correct index', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.isSelectableItemAtIndex.withArgs(1).and.returnValue(true);\n    const listItemEl = document.createElement('div');\n    mockAdapter.elementContainsClass\n        .withArgs(listItemEl, cssClasses.MENU_SELECTION_GROUP)\n        .and.returnValue(true);\n    mockAdapter.getSelectedSiblingOfItemAtIndex.withArgs(1).and.returnValue(-1);\n    mockAdapter.getMenuItemCount.and.returnValue(2);\n\n    expect(foundation.getSelectedIndex()).not.toBe(1);\n    foundation.setSelectedIndex(1);\n    expect(foundation.getSelectedIndex()).toBe(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setSelectedIndex calls addClass and addAttribute only","suites":["MDCMenuFoundation"],"line":401,"updatePoint":{"line":401,"column":59},"code":"  it('setSelectedIndex calls addClass and addAttribute only', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const listItemEl = document.createElement('div');\n    mockAdapter.isSelectableItemAtIndex.withArgs(0).and.returnValue(true);\n    mockAdapter.elementContainsClass\n        .withArgs(listItemEl, cssClasses.MENU_SELECTION_GROUP)\n        .and.returnValue(true);\n    mockAdapter.getSelectedSiblingOfItemAtIndex.withArgs(0).and.returnValue(-1);\n    mockAdapter.getMenuItemCount.and.returnValue(2);\n\n    foundation.setSelectedIndex(0);\n    expect(mockAdapter.removeClassFromElementAtIndex)\n        .not.toHaveBeenCalledWith(\n            jasmine.any(Number), cssClasses.MENU_SELECTED_LIST_ITEM);\n    expect(mockAdapter.removeAttributeFromElementAtIndex)\n        .not.toHaveBeenCalledWith(strings.ARIA_CHECKED_ATTR);\n    expect(mockAdapter.addClassToElementAtIndex)\n        .toHaveBeenCalledWith(0, cssClasses.MENU_SELECTED_LIST_ITEM);\n    expect(mockAdapter.addAttributeToElementAtIndex)\n        .toHaveBeenCalledWith(0, strings.ARIA_CHECKED_ATTR, 'true');\n    expect(mockAdapter.addAttributeToElementAtIndex).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setSelectedIndex remove class and attribute, and adds class and attribute to newly selected item","suites":["MDCMenuFoundation"],"line":424,"updatePoint":{"line":424,"column":102},"code":"  it('setSelectedIndex remove class and attribute, and adds class and attribute to newly selected item',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const listItemEl = document.createElement('div');\n       mockAdapter.isSelectableItemAtIndex.withArgs(0).and.returnValue(true);\n       mockAdapter.elementContainsClass\n           .withArgs(listItemEl, cssClasses.MENU_SELECTION_GROUP)\n           .and.returnValue(true);\n       mockAdapter.getMenuItemCount.and.returnValue(2);\n       mockAdapter.getSelectedSiblingOfItemAtIndex.withArgs(0).and.returnValue(\n           1);\n\n       foundation.setSelectedIndex(0);\n       expect(mockAdapter.removeClassFromElementAtIndex)\n           .toHaveBeenCalledWith(1, cssClasses.MENU_SELECTED_LIST_ITEM);\n       expect(mockAdapter.removeClassFromElementAtIndex)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.removeAttributeFromElementAtIndex)\n           .toHaveBeenCalledWith(1, strings.ARIA_CHECKED_ATTR);\n       expect(mockAdapter.removeAttributeFromElementAtIndex)\n           .toHaveBeenCalledTimes(1);\n       expect(mockAdapter.addClassToElementAtIndex)\n           .toHaveBeenCalledWith(0, cssClasses.MENU_SELECTED_LIST_ITEM);\n       expect(mockAdapter.addClassToElementAtIndex).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.addAttributeToElementAtIndex)\n           .toHaveBeenCalledWith(0, strings.ARIA_CHECKED_ATTR, 'true');\n       expect(mockAdapter.addAttributeToElementAtIndex)\n           .toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setSelectedIndex throws error if index is not in range","suites":["MDCMenuFoundation"],"line":454,"updatePoint":{"line":454,"column":60},"code":"  it('setSelectedIndex throws error if index is not in range', () => {\n    const {foundation} = setupTest();\n    try {\n      foundation.setSelectedIndex(5);\n    } catch (e: any) {\n      expect(e.message).toEqual(\n          'MDCMenuFoundation: No list item at specified index.');\n    }\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setEnabled calls addClass and addAttribute","suites":["MDCMenuFoundation"],"line":464,"updatePoint":{"line":464,"column":48},"code":"  it('setEnabled calls addClass and addAttribute', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getMenuItemCount.and.returnValue(2);\n\n    foundation.setEnabled(0, false);\n    expect(mockAdapter.addClassToElementAtIndex)\n        .toHaveBeenCalledWith(0, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n    expect(mockAdapter.addClassToElementAtIndex).toHaveBeenCalledTimes(1);\n    expect(mockAdapter.addAttributeToElementAtIndex)\n        .toHaveBeenCalledWith(0, strings.ARIA_DISABLED_ATTR, 'true');\n    expect(mockAdapter.addAttributeToElementAtIndex).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"setEnabled calls removeClass and removeAttribute","suites":["MDCMenuFoundation"],"line":477,"updatePoint":{"line":477,"column":54},"code":"  it('setEnabled calls removeClass and removeAttribute', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getMenuItemCount.and.returnValue(2);\n\n    foundation.setEnabled(0, true);\n    expect(mockAdapter.removeClassFromElementAtIndex)\n        .toHaveBeenCalledWith(0, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n    expect(mockAdapter.removeClassFromElementAtIndex).toHaveBeenCalledTimes(1);\n    expect(mockAdapter.addAttributeToElementAtIndex)\n        .toHaveBeenCalledWith(0, strings.ARIA_DISABLED_ATTR, 'false');\n    expect(mockAdapter.addAttributeToElementAtIndex).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"Item action event causes the menu to close","suites":["MDCMenuFoundation"],"line":492,"updatePoint":{"line":492,"column":48},"code":"  it('Item action event causes the menu to close', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const itemEl = document.createElement('li');\n    mockAdapter.elementContainsClass\n        .withArgs(itemEl, listClasses.LIST_ITEM_CLASS)\n        .and.returnValue(true);\n    mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(0);\n\n    foundation.handleItemAction(itemEl);\n\n    expect(mockAdapter.closeSurface).toHaveBeenCalledTimes(1);\n    expect(mockAdapter.closeSurface).toHaveBeenCalledWith(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"closes the menu (with indication to not restore focus) on item action based on DOM attribute","suites":["MDCMenuFoundation"],"line":506,"updatePoint":{"line":506,"column":98},"code":"  it('closes the menu (with indication to not restore focus) on item action based on DOM attribute',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const itemEl = document.createElement('li');\n       mockAdapter.elementContainsClass\n           .withArgs(itemEl, listClasses.LIST_ITEM_CLASS)\n           .and.returnValue(true);\n       mockAdapter.getElementIndex.withArgs(itemEl).and.returnValue(0);\n       mockAdapter.getAttributeFromElementAtIndex\n           .withArgs(0, strings.SKIP_RESTORE_FOCUS)\n           .and.returnValue('true');\n\n       foundation.handleItemAction(itemEl);\n\n       expect(mockAdapter.closeSurface).toHaveBeenCalledTimes(1);\n       expect(mockAdapter.closeSurface).toHaveBeenCalledWith(true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-menu/test"},{"name":"attachTo returns an MDCNotchedOutline instance","suites":["MDCNotchedOutline"],"line":42,"updatePoint":{"line":42,"column":52},"code":"  it('attachTo returns an MDCNotchedOutline instance', () => {\n    expect(\n        MDCNotchedOutline.attachTo(getFixture()) instanceof MDCNotchedOutline)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCNotchedOutline"],"line":54,"updatePoint":{"line":54,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"adapter#removeClass removes a class to the root element","suites":["MDCNotchedOutline"],"line":60,"updatePoint":{"line":60,"column":61},"code":"  it('adapter#removeClass removes a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    (component.getDefaultFoundation() as any)\n        .adapter.setNotchWidthProperty(50);\n    (component.getDefaultFoundation() as any)\n        .adapter.removeNotchWidthProperty();\n    const path =\n        root.querySelector('.mdc-notched-outline__notch') as HTMLElement;\n    expect('').toEqual(path.style.width as string);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"#adapter.setNotchWidthProperty sets the width property on the notched element","suites":["MDCNotchedOutline"],"line":72,"updatePoint":{"line":72,"column":83},"code":"  it('#adapter.setNotchWidthProperty sets the width property on the notched element',\n     () => {\n       const {root, component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setNotchWidthProperty(50);\n       const path =\n           root.querySelector('.mdc-notched-outline__notch') as HTMLElement;\n       expect('50px').toEqual(path.style.width as string);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"exports cssClasses","suites":["MDCNotchedOutlineFoundation"],"line":32,"updatePoint":{"line":32,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCNotchedOutlineFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"exports numbers","suites":["MDCNotchedOutlineFoundation"],"line":36,"updatePoint":{"line":36,"column":21},"code":"  it('exports numbers', () => {\n    expect(MDCNotchedOutlineFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"exports strings","suites":["MDCNotchedOutlineFoundation"],"line":40,"updatePoint":{"line":40,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCNotchedOutlineFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCNotchedOutlineFoundation"],"line":44,"updatePoint":{"line":44,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCNotchedOutlineFoundation, [\n      'addClass',\n      'removeClass',\n      'setNotchWidthProperty',\n      'removeNotchWidthProperty',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"#notch adds the notched class and sets the width of the element","suites":["MDCNotchedOutlineFoundation"],"line":59,"updatePoint":{"line":59,"column":69},"code":"  it('#notch adds the notched class and sets the width of the element', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const notchWidth = 30;\n    foundation.notch(notchWidth);\n    expect(mockAdapter.setNotchWidthProperty)\n        .toHaveBeenCalledWith(\n            notchWidth +\n            MDCNotchedOutlineFoundation.numbers.NOTCH_ELEMENT_PADDING);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(\n            MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"#closeNotch removes the notch selector and removes the width property","suites":["MDCNotchedOutlineFoundation"],"line":72,"updatePoint":{"line":72,"column":75},"code":"  it('#closeNotch removes the notch selector and removes the width property',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.closeNotch();\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(\n               MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED);\n       expect(mockAdapter.removeNotchWidthProperty).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-notched-outline/test"},{"name":"attachTo initializes and returns a MDCRadio instance","suites":["MDCRadio"],"line":57,"updatePoint":{"line":57,"column":58},"code":"  it('attachTo initializes and returns a MDCRadio instance', () => {\n    expect(MDCRadio.attachTo(getFixture()) instanceof MDCRadio).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"#constructor initializes the root element with a ripple","suites":["MDCRadio"],"line":62,"updatePoint":{"line":62,"column":63},"code":"    it('#constructor initializes the root element with a ripple', () => {\n      const {root} = setupTest();\n      jasmine.clock().tick(1);\n      expect(root.classList.contains('mdc-ripple-upgraded')).toBeTruthy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"#destroy removes the ripple","suites":["MDCRadio"],"line":68,"updatePoint":{"line":68,"column":35},"code":"    it('#destroy removes the ripple', () => {\n      const {root, component} = setupTest();\n      jasmine.clock().tick(1);\n      component.destroy();\n      jasmine.clock().tick(1);\n      expect(root.classList.contains('mdc-ripple-upgraded')).toBeFalsy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"get/set checked updates the checked value of the native radio element","suites":["MDCRadio"],"line":77,"updatePoint":{"line":77,"column":75},"code":"  it('get/set checked updates the checked value of the native radio element',\n     () => {\n       const {root, component} = setupTest();\n       const radio =\n           root.querySelector(NATIVE_CONTROL_SELECTOR) as HTMLInputElement;\n       component.checked = true;\n       expect(radio.checked).toBeTruthy();\n       expect(component.checked).toEqual(radio.checked);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"get/set disabled updates the disabled value of the native radio element","suites":["MDCRadio"],"line":87,"updatePoint":{"line":87,"column":77},"code":"  it('get/set disabled updates the disabled value of the native radio element',\n     () => {\n       const {root, component} = setupTest();\n       const radio =\n           root.querySelector(NATIVE_CONTROL_SELECTOR) as HTMLInputElement;\n       component.disabled = true;\n       expect(radio.disabled).toBeTruthy();\n       expect(component.disabled).toEqual(radio.disabled);\n       component.disabled = false;\n       expect(radio.disabled).toBeFalsy();\n       expect(component.disabled).toEqual(radio.disabled);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"get/set value updates the value of the native radio element","suites":["MDCRadio"],"line":100,"updatePoint":{"line":100,"column":65},"code":"  it('get/set value updates the value of the native radio element', () => {\n    const {root, component} = setupTest();\n    const radio =\n        root.querySelector(NATIVE_CONTROL_SELECTOR) as HTMLInputElement;\n    component.value = 'new value';\n    expect(radio.value).toEqual('new value');\n    expect(component.value).toEqual(radio.value);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"get ripple returns a MDCRipple instance","suites":["MDCRadio"],"line":109,"updatePoint":{"line":109,"column":45},"code":"  it('get ripple returns a MDCRipple instance', () => {\n    const {component} = setupTest();\n    expect(component.ripple instanceof MDCRipple).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCRadio"],"line":114,"updatePoint":{"line":114,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"adapter#removeClass removes a class from the root element","suites":["MDCRadio"],"line":120,"updatePoint":{"line":120,"column":63},"code":"  it('adapter#removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"#adapter.setNativeControlDisabled sets the native control element's disabled property to true","suites":["MDCRadio"],"line":127,"updatePoint":{"line":127,"column":100},"code":"  it('#adapter.setNativeControlDisabled sets the native control element\\'s disabled property to true',\n     () => {\n       const {root, component} = setupTest();\n       const radio =\n           root.querySelector(NATIVE_CONTROL_SELECTOR) as HTMLInputElement;\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setNativeControlDisabled(true);\n       expect(radio.disabled).toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"#adapter.setNativeControlDisabled sets the native control element's disabled property to false","suites":["MDCRadio"],"line":138,"updatePoint":{"line":138,"column":101},"code":"  it('#adapter.setNativeControlDisabled sets the native control element\\'s disabled property to false',\n     () => {\n       const {root, component} = setupTest();\n       const radio =\n           root.querySelector(NATIVE_CONTROL_SELECTOR) as HTMLInputElement;\n       radio.disabled = true;\n\n       (component.getDefaultFoundation() as any)\n           .adapter.setNativeControlDisabled(false);\n       expect(radio.disabled).toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"exports cssClasses","suites":["MDCRadioFoundation"],"line":33,"updatePoint":{"line":33,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCRadioFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"exports strings","suites":["MDCRadioFoundation"],"line":37,"updatePoint":{"line":37,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCRadioFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCRadioFoundation"],"line":41,"updatePoint":{"line":41,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    const {defaultAdapter} = MDCRadioFoundation;\n    const methods = Object.keys(defaultAdapter)\n                        .filter((k) => typeof (defaultAdapter as any)[k] === 'function');\n\n    expect(methods.length).toEqual(Object.keys(defaultAdapter).length);\n    expect(methods).toEqual(\n        ['addClass', 'removeClass', 'setNativeControlDisabled']);\n    methods.forEach((m) => {\n      expect(() => (defaultAdapter as any)[m]).not.toThrow();\n    });\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"#setDisabled calls adapter.setNativeControlDisabled","suites":["MDCRadioFoundation"],"line":54,"updatePoint":{"line":54,"column":57},"code":"  it('#setDisabled calls adapter.setNativeControlDisabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setDisabled(true);\n    expect(mockAdapter.setNativeControlDisabled).toHaveBeenCalledWith(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"#setDisabled adds mdc-radio--disabled to the radio element when set to true","suites":["MDCRadioFoundation"],"line":60,"updatePoint":{"line":60,"column":81},"code":"  it('#setDisabled adds mdc-radio--disabled to the radio element when set to true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setDisabled(true);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(MDCRadioFoundation.cssClasses.DISABLED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"#setDisabled removes mdc-radio--disabled from the radio element when set to false","suites":["MDCRadioFoundation"],"line":68,"updatePoint":{"line":68,"column":87},"code":"  it('#setDisabled removes mdc-radio--disabled from the radio element when set to false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setDisabled(false);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(MDCRadioFoundation.cssClasses.DISABLED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-radio/test"},{"name":"attachTo initializes and returns a ripple","suites":["MDCRipple"],"line":41,"updatePoint":{"line":41,"column":47},"code":"  it('attachTo initializes and returns a ripple', () => {\n    const root = getFixture();\n    const component = MDCRipple.attachTo(root);\n    expect(component instanceof MDCRipple).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"attachTo makes ripple unbounded when given as an option","suites":["MDCRipple"],"line":47,"updatePoint":{"line":47,"column":61},"code":"  it('attachTo makes ripple unbounded when given as an option', () => {\n    const root = getFixture();\n    const component = MDCRipple.attachTo(root, {isUnbounded: true});\n    expect(component.unbounded).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"attachTo does not override unbounded data attr when omitted","suites":["MDCRipple"],"line":53,"updatePoint":{"line":53,"column":65},"code":"  it('attachTo does not override unbounded data attr when omitted', () => {\n    const root = getFixture(true);\n    const component = MDCRipple.attachTo(root);\n    expect(component.unbounded).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"attachTo overrides unbounded data attr when explicitly specified","suites":["MDCRipple"],"line":59,"updatePoint":{"line":59,"column":70},"code":"  it('attachTo overrides unbounded data attr when explicitly specified', () => {\n    const root = getFixture(true);\n    const component = MDCRipple.attachTo(root, {isUnbounded: false});\n    expect(component.unbounded).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"createAdapter() returns the same adapter used by default for the ripple","suites":["MDCRipple"],"line":65,"updatePoint":{"line":65,"column":77},"code":"  it('createAdapter() returns the same adapter used by default for the ripple',\n     () => {\n       const root = getFixture();\n       const component = MDCRipple.attachTo(root);\n       expect(Object.keys(MDCRipple.createAdapter({root})))\n           .toEqual(Object.keys(component['foundation']['adapter']));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"set unbounded() adds  when truthy","suites":["MDCRipple"],"line":79,"updatePoint":{"line":79,"column":62},"code":"  it(`set unbounded() adds ${cssClasses.UNBOUNDED} when truthy`, () => {\n    const {root, component} = setupTest();\n    component.unbounded = true;\n    expect(root.classList.contains(cssClasses.UNBOUNDED)).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"set unbounded() removes  when falsy","suites":["MDCRipple"],"line":85,"updatePoint":{"line":85,"column":64},"code":"  it(`set unbounded() removes ${cssClasses.UNBOUNDED} when falsy`, () => {\n    const {root, component} = setupTest();\n    root.classList.add(cssClasses.UNBOUNDED);\n    component.unbounded = false;\n    expect(root.classList.contains(cssClasses.UNBOUNDED)).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"activate() delegates to the foundation","suites":["MDCRipple"],"line":92,"updatePoint":{"line":92,"column":44},"code":"  it('activate() delegates to the foundation', () => {\n    const {component} = setupTest();\n    component['foundation'].activate = jasmine.createSpy('');\n    component.activate();\n    expect(component['foundation'].activate).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"deactivate() delegates to the foundation","suites":["MDCRipple"],"line":99,"updatePoint":{"line":99,"column":46},"code":"  it('deactivate() delegates to the foundation', () => {\n    const {component} = setupTest();\n    component['foundation'].deactivate = jasmine.createSpy('');\n    component.deactivate();\n    expect(component['foundation'].deactivate).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"layout() delegates to the foundation","suites":["MDCRipple"],"line":106,"updatePoint":{"line":106,"column":42},"code":"  it('layout() delegates to the foundation', () => {\n    const {component} = setupTest();\n    component['foundation'].layout = jasmine.createSpy('');\n    component.layout();\n    expect(component['foundation'].layout).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#browserSupportsCssVars delegates to util","suites":["MDCRipple"],"line":113,"updatePoint":{"line":113,"column":54},"code":"  it('adapter#browserSupportsCssVars delegates to util', () => {\n    const {component} = setupTest();\n    expect((component.getDefaultFoundation() as any)\n               .adapter.browserSupportsCssVars(window))\n        .toEqual(util.supportsCssVariables(window));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#isUnbounded delegates to unbounded getter","suites":["MDCRipple"],"line":120,"updatePoint":{"line":120,"column":55},"code":"  it('adapter#isUnbounded delegates to unbounded getter', () => {\n    const {component} = setupTest();\n    component.unbounded = true;\n    expect((component.getDefaultFoundation() as any).adapter.isUnbounded())\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#isSurfaceDisabled delegates to component's disabled getter","suites":["MDCRipple"],"line":127,"updatePoint":{"line":127,"column":73},"code":"  it('adapter#isSurfaceDisabled delegates to component\\'s disabled getter',\n     () => {\n       const {component} = setupTest();\n       component.disabled = true;\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.isSurfaceDisabled())\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#addClass adds a class to the root","suites":["MDCRipple"],"line":136,"updatePoint":{"line":136,"column":47},"code":"  it('adapter#addClass adds a class to the root', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#removeClass removes a class from the root","suites":["MDCRipple"],"line":142,"updatePoint":{"line":142,"column":55},"code":"  it('adapter#removeClass removes a class from the root', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#containsEventTarget returns true if the passed element is a descendant of the root element","suites":["MDCRipple"],"line":149,"updatePoint":{"line":149,"column":104},"code":"  it('adapter#containsEventTarget returns true if the passed element is a descendant of the root element',\n     () => {\n       const {root, component} = setupTest();\n       const child = getFixture();\n       const notChild = getFixture();\n       root.appendChild(child);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.containsEventTarget(child))\n           .toBe(true);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.containsEventTarget(notChild))\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#registerInteractionHandler proxies to addEventListener on the root element","suites":["MDCRipple"],"line":163,"updatePoint":{"line":163,"column":88},"code":"  it('adapter#registerInteractionHandler proxies to addEventListener on the root element',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('interactionHandler');\n       (component.getDefaultFoundation() as any)\n           .adapter.registerInteractionHandler('foo', handler);\n       emitEvent(root, 'foo');\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#deregisterInteractionHandler proxies to removeEventListener on the root element","suites":["MDCRipple"],"line":173,"updatePoint":{"line":173,"column":93},"code":"  it('adapter#deregisterInteractionHandler proxies to removeEventListener on the root element',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('interactionHandler');\n       root.addEventListener('foo', handler);\n       (component.getDefaultFoundation() as any)\n           .adapter.deregisterInteractionHandler('foo', handler);\n       emitEvent(root, 'foo');\n       expect(handler).not.toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#registerDocumentInteractionHandler proxies to addEventListener on the documentElement","suites":["MDCRipple"],"line":184,"updatePoint":{"line":184,"column":99},"code":"  it('adapter#registerDocumentInteractionHandler proxies to addEventListener on the documentElement',\n     () => {\n       const {component} = setupTest();\n       const handler = jasmine.createSpy('interactionHandler');\n       (component.getDefaultFoundation() as any)\n           .adapter.registerDocumentInteractionHandler('foo', handler);\n       emitEvent(document.documentElement, 'foo');\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#deregisterDocumentInteractionHandler proxies to removeEventListener on the documentElement","suites":["MDCRipple"],"line":194,"updatePoint":{"line":194,"column":104},"code":"  it('adapter#deregisterDocumentInteractionHandler proxies to removeEventListener on the documentElement',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('interactionHandler');\n       root.addEventListener('foo', handler);\n       (component.getDefaultFoundation() as any)\n           .adapter.deregisterDocumentInteractionHandler('foo', handler);\n       emitEvent(document.documentElement, 'foo');\n       expect(handler).not.toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#registerResizeHandler uses the handler as a window resize listener","suites":["MDCRipple"],"line":205,"updatePoint":{"line":205,"column":80},"code":"  it('adapter#registerResizeHandler uses the handler as a window resize listener',\n     () => {\n       const {component} = setupTest();\n       const handler = jasmine.createSpy('resizeHandler');\n       (component.getDefaultFoundation() as any)\n           .adapter.registerResizeHandler(handler);\n       emitEvent(window, 'resize');\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n       window.removeEventListener('resize', handler);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#deregisterResizeHandler unlistens the handler for window resize","suites":["MDCRipple"],"line":216,"updatePoint":{"line":216,"column":77},"code":"  it('adapter#deregisterResizeHandler unlistens the handler for window resize',\n     () => {\n       const {component} = setupTest();\n       const handler = jasmine.createSpy('resizeHandler');\n       window.addEventListener('resize', handler);\n       (component.getDefaultFoundation() as any)\n           .adapter.deregisterResizeHandler(handler);\n       emitEvent(window, 'resize');\n       expect(handler).not.toHaveBeenCalledWith(jasmine.anything());\n       // Just to be safe\n       window.removeEventListener('resize', handler);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#updateCssVariable calls setProperty on root style with varName and value","suites":["MDCRipple"],"line":230,"updatePoint":{"line":230,"column":88},"code":"    it('adapter#updateCssVariable calls setProperty on root style with varName and value',\n       () => {\n         const {root, component} = setupTest();\n         (component.getDefaultFoundation() as any)\n             .adapter.updateCssVariable('--foo', 'red');\n         expect(root.style.getPropertyValue('--foo')).toEqual('red');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#computeBoundingRect calls getBoundingClientRect() on root","suites":["MDCRipple"],"line":239,"updatePoint":{"line":239,"column":71},"code":"  it('adapter#computeBoundingRect calls getBoundingClientRect() on root',\n     () => {\n       const {root, component} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.computeBoundingRect())\n           .toEqual(root.getBoundingClientRect());\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"adapter#getWindowPageOffset returns page{X,Y}Offset as {x,y} respectively","suites":["MDCRipple"],"line":249,"updatePoint":{"line":249,"column":79},"code":"  it('adapter#getWindowPageOffset returns page{X,Y}Offset as {x,y} respectively',\n     () => {\n       const {component} = setupTest();\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getWindowPageOffset())\n           .toEqual({\n             x: window.pageXOffset,\n             y: window.pageYOffset,\n           });\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"handleFocus() adds class ","suites":["MDCRipple"],"line":260,"updatePoint":{"line":260,"column":55},"code":"  it(`handleFocus() adds class ${cssClasses.BG_FOCUSED}`, () => {\n    const {root, component} = setupTest();\n    component['foundation'].handleFocus();\n    jasmine.clock().tick(1);\n    expect(root.classList.contains(cssClasses.BG_FOCUSED)).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"handleBlur() removes class ","suites":["MDCRipple"],"line":267,"updatePoint":{"line":267,"column":57},"code":"  it(`handleBlur() removes class ${cssClasses.BG_FOCUSED}`, () => {\n    const {root, component} = setupTest();\n    root.classList.add(cssClasses.BG_FOCUSED);\n    component['foundation'].handleBlur();\n    jasmine.clock().tick(1);\n    expect(root.classList.contains(cssClasses.BG_FOCUSED)).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"cssClasses returns constants.cssClasses","suites":["MDCRippleFoundation"],"line":35,"updatePoint":{"line":35,"column":45},"code":"  it('cssClasses returns constants.cssClasses', () => {\n    expect(MDCRippleFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"strings returns constants.strings","suites":["MDCRippleFoundation"],"line":39,"updatePoint":{"line":39,"column":39},"code":"  it('strings returns constants.strings', () => {\n    expect(MDCRippleFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"numbers returns constants.numbers","suites":["MDCRippleFoundation"],"line":43,"updatePoint":{"line":43,"column":39},"code":"  it('numbers returns constants.numbers', () => {\n    expect(MDCRippleFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCRippleFoundation"],"line":47,"updatePoint":{"line":47,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCRippleFoundation, [\n      'browserSupportsCssVars',\n      'isUnbounded',\n      'isSurfaceActive',\n      'isSurfaceDisabled',\n      'addClass',\n      'removeClass',\n      'containsEventTarget',\n      'registerInteractionHandler',\n      'deregisterInteractionHandler',\n      'registerDocumentInteractionHandler',\n      'deregisterDocumentInteractionHandler',\n      'registerResizeHandler',\n      'deregisterResizeHandler',\n      'updateCssVariable',\n      'computeBoundingRect',\n      'getWindowPageOffset',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#supportsCssVariables returns true when CSS.supports() returns true for css vars","suites":["MDCRipple - util"],"line":29,"updatePoint":{"line":29,"column":86},"code":"  it('#supportsCssVariables returns true when CSS.supports() returns true for css vars',\n     () => {\n       const windowObj = createMockWindowForCssVariables();\n       windowObj.CSS.supports.withArgs('--css-vars', jasmine.anything())\n           .and.returnValue(true);\n       windowObj.CSS.supports.withArgs(jasmine.stringMatching(/\\(--css-vars:/))\n           .and.returnValue(false);\n       expect(util.supportsCssVariables(windowObj as any, true)).toBeTruthy();\n       expect(windowObj.appendedNodes).toEqual(0);\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#supportsCssVariables returns true when feature-detecting its way around Safari < 10","suites":["MDCRipple - util"],"line":40,"updatePoint":{"line":40,"column":90},"code":"  it('#supportsCssVariables returns true when feature-detecting its way around Safari < 10',\n     () => {\n       const windowObj = createMockWindowForCssVariables();\n       windowObj.CSS.supports.withArgs('--css-vars', jasmine.anything())\n           .and.returnValue(false);\n       windowObj.CSS.supports.withArgs(jasmine.stringMatching(/\\(--css-vars:/))\n           .and.returnValue(true);\n       windowObj.CSS.supports.withArgs('color', '#00000000')\n           .and.returnValue(true);\n       expect(util.supportsCssVariables(windowObj as any, true)).toBeTruthy();\n\n       windowObj.CSS.supports.withArgs(jasmine.stringMatching(/\\(--css-vars:/))\n           .and.returnValue(false);\n       expect(util.supportsCssVariables(windowObj as any, true)).toBeFalsy();\n       windowObj.CSS.supports.withArgs(jasmine.stringMatching(/\\(--css-vars:/))\n           .and.returnValue(true);\n\n       windowObj.CSS.supports.withArgs('color', '#00000000')\n           .and.returnValue(false);\n       expect(util.supportsCssVariables(windowObj as any, true)).toBeFalsy();\n       expect(windowObj.appendedNodes).toEqual(0);\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#supportsCssVariables returns true when getComputedStyle returns null (e.g. Firefox hidden iframes)","suites":["MDCRipple - util"],"line":63,"updatePoint":{"line":63,"column":105},"code":"  it('#supportsCssVariables returns true when getComputedStyle returns null (e.g. Firefox hidden iframes)',\n     () => {\n       const windowObj = createMockWindowForCssVariables();\n       windowObj.CSS.supports.withArgs('--css-vars', jasmine.anything())\n           .and.returnValue(true);\n       windowObj.CSS.supports.withArgs(jasmine.stringMatching(/\\(--css-vars:/))\n           .and.returnValue(false);\n       windowObj.getComputedStyle.withArgs(jasmine.anything())\n           .and.returnValue(null);\n       expect(util.supportsCssVariables(windowObj as any, true)).toBeTruthy();\n       expect(windowObj.appendedNodes).toEqual(0);\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#supportsCssVariables returns false when CSS.supports() returns false for css vars","suites":["MDCRipple - util"],"line":76,"updatePoint":{"line":76,"column":88},"code":"  it('#supportsCssVariables returns false when CSS.supports() returns false for css vars',\n     () => {\n       const windowObj = {\n         CSS: {\n           supports: jasmine.createSpy('.supports'),\n         },\n       };\n       windowObj.CSS.supports.withArgs('--css-vars', jasmine.anything())\n           .and.returnValue(false);\n       windowObj.CSS.supports.withArgs(jasmine.stringMatching(/\\(--css-vars:/))\n           .and.returnValue(false);\n       expect(util.supportsCssVariables(windowObj as any, true)).toBeFalsy();\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#supportsCssVariables returns false when CSS.supports is not a function","suites":["MDCRipple - util"],"line":90,"updatePoint":{"line":90,"column":77},"code":"  it('#supportsCssVariables returns false when CSS.supports is not a function',\n     () => {\n       const windowObj = {\n         CSS: {\n           supports: 'nope',\n         },\n       };\n       expect(util.supportsCssVariables(windowObj as any, true)).toBeFalsy();\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#supportsCssVariables returns false when CSS is not an object","suites":["MDCRipple - util"],"line":100,"updatePoint":{"line":100,"column":67},"code":"  it('#supportsCssVariables returns false when CSS is not an object', () => {\n    const windowObj = {\n      CSS: null,\n    };\n    expect(util.supportsCssVariables(windowObj as any, true)).toBeFalsy();\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#getNormalizedEventCoords maps event coords into the relative coordinates of the given rect","suites":["MDCRipple - util"],"line":107,"updatePoint":{"line":107,"column":97},"code":"  it('#getNormalizedEventCoords maps event coords into the relative coordinates of the given rect',\n     () => {\n       const ev = {type: 'mousedown', pageX: 70, pageY: 70};\n       const pageOffset = {x: 10, y: 10};\n       const clientRect = {left: 50, top: 50};\n\n       expect(util.getNormalizedEventCoords(\n                  ev as any, pageOffset, clientRect as any))\n           .toEqual({\n             x: 10,\n             y: 10,\n           });\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"#getNormalizedEventCoords works with touchstart events","suites":["MDCRipple - util"],"line":121,"updatePoint":{"line":121,"column":60},"code":"  it('#getNormalizedEventCoords works with touchstart events', () => {\n    const ev = {type: 'touchstart', changedTouches: [{pageX: 70, pageY: 70}]};\n    const pageOffset = {x: 10, y: 10};\n    const clientRect = {left: 50, top: 50};\n\n    expect(\n        util.getNormalizedEventCoords(ev as any, pageOffset, clientRect as any))\n        .toEqual({\n          x: 10,\n          y: 10,\n        });\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-ripple/test"},{"name":"emits no [dir=rtl] selectors when `include` is disabled (false)","suites":["disable-include-rtl.test.scss"],"line":28,"updatePoint":{"line":28,"column":69},"code":"  it('emits no [dir=rtl] selectors when `include` is disabled (false)', () => {\n    const filePath = path.join(__dirname, 'disable-include-rtl.test.css');\n    const css = fs.readFileSync(filePath, 'utf8').trim();\n    expect(css).not.toContain('[dir=rtl]');\n  });","file":"disable-include-rtl.scss.test.ts","skipped":false,"dir":"packages/mdc-rtl/test"},{"name":"should not add [dir=rtl] after pseudo element","suites":["rtl.test.scss"],"line":35,"updatePoint":{"line":35,"column":51},"code":"  it('should not add [dir=rtl] after pseudo element', () => {\n    expect(css).not.toContain('.test-pseudo-element::before[dir=rtl]');\n    expect(css).toContain('.test-pseudo-element[dir=rtl]::before');\n  });","file":"rtl.scss.test.ts","skipped":false,"dir":"packages/mdc-rtl/test"},{"name":"emits custom properties using theme.property()","suites":["theme.test.scss"],"line":28,"updatePoint":{"line":28,"column":52},"code":"  it('emits custom properties using theme.property()', () => {\n    const filePath = path.join(__dirname, 'theme.test.css');\n    const css = fs.readFileSync(filePath, 'utf8').trim();\n    expect(css).toEqual(`.test {\n  /* @noflip */\n  /*rtl:ignore*/\n  margin-left: 0;\n  /* @noflip */\n  /*rtl:ignore*/\n  margin-right: 8px;\n  /* @alternate */\n  /* @noflip */\n  /*rtl:ignore*/\n  margin-right: var(--margin-prop, 8px);\n}\n[dir=rtl] .test, .test[dir=rtl] {\n  /*rtl:begin:ignore*/\n  /* @noflip */\n  /*rtl:ignore*/\n  margin-left: 8px;\n  /* @alternate */\n  /* @noflip */\n  /*rtl:ignore*/\n  margin-left: var(--margin-prop, 8px);\n  /* @noflip */\n  /*rtl:ignore*/\n  margin-right: 0;\n  /*rtl:end:ignore*/\n}`);\n  });","file":"theme.scss.test.ts","skipped":false,"dir":"packages/mdc-rtl/test"},{"name":"attachTo returns a component instance","suites":["MDCSelect"],"line":263,"updatePoint":{"line":263,"column":43},"code":"  it('attachTo returns a component instance', () => {\n    expect(MDCSelect.attachTo(getFixture()) instanceof MDCSelect).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get/setSelectedIndex","suites":["MDCSelect"],"line":267,"updatePoint":{"line":267,"column":27},"code":"  it('#get/setSelectedIndex', () => {\n    const hasMockFoundation = false;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, menuSurface} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    expect(component.selectedIndex).toEqual(0);\n    component.selectedIndex = 1;\n    expect(component.selectedIndex).toEqual(1);\n    menuSurface.parentElement!.removeChild(menuSurface);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get/setSelectedIndex 2x removes previously selected element","suites":["MDCSelect"],"line":280,"updatePoint":{"line":280,"column":66},"code":"  it('#get/setSelectedIndex 2x removes previously selected element', () => {\n    const hasMockFoundation = false;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, menuSurface} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    expect(component.selectedIndex).toEqual(0);\n    component.selectedIndex = 1;\n    component.selectedIndex = 2;\n    expect(component.selectedIndex).toEqual(2);\n    expect(menuSurface.querySelectorAll('.mdc-deprecated-list-item--selected')\n               .length)\n        .toEqual(1);\n    menuSurface.parentElement!.removeChild(menuSurface);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get/set disabled","suites":["MDCSelect"],"line":297,"updatePoint":{"line":297,"column":23},"code":"  it('#get/set disabled', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.disabled = true;\n    checkNumTimesSpyCalledWithArgs(mockFoundation.setDisabled, [true], 1);\n    expect((component as any).hiddenInput.disabled).toBeTrue();\n    component.disabled = false;\n    checkNumTimesSpyCalledWithArgs(mockFoundation.setDisabled, [false], 1);\n    expect((component as any).hiddenInput.disabled).toBeFalse();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get/set required true","suites":["MDCSelect"],"line":312,"updatePoint":{"line":312,"column":28},"code":"  it('#get/set required true', () => {\n    const {fixture, component, anchor} = setupTest();\n    expect(component.required).toBe(false);\n\n    component.required = true;\n    expect(component.required).toBe(true);\n    expect(fixture.classList.contains(cssClasses.REQUIRED)).toBe(true);\n    expect(anchor.getAttribute('aria-required')).toBe('true');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get/set required false","suites":["MDCSelect"],"line":322,"updatePoint":{"line":322,"column":29},"code":"  it('#get/set required false', () => {\n    const {fixture, component, anchor} = setupTest();\n    expect(component.required).toBe(false);\n\n    component.required = false;\n    expect(component.required).toBe(false);\n    expect(fixture.classList.contains(cssClasses.REQUIRED)).toBe(false);\n    expect(anchor.getAttribute('aria-required')).toBe('false');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get value","suites":["MDCSelect"],"line":332,"updatePoint":{"line":332,"column":16},"code":"  it('#get value', () => {\n    const hasMockFoundation = false;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, menuSurface} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    expect(component.value).toEqual('');\n    component.selectedIndex = 2;\n    expect(component.value).toEqual('apple');\n    component.selectedIndex = 1;\n    expect(component.value).toEqual('orange');\n    menuSurface.parentElement!.removeChild(menuSurface);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set value calls foundation.setValue","suites":["MDCSelect"],"line":347,"updatePoint":{"line":347,"column":42},"code":"  it('#set value calls foundation.setValue', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.value = 'orange';\n    expect(mockFoundation.setValue).toHaveBeenCalledWith('orange');\n    expect(mockFoundation.setValue).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setValue calls foundation.setValue with params","suites":["MDCSelect"],"line":359,"updatePoint":{"line":359,"column":53},"code":"  it('#setValue calls foundation.setValue with params', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.setValue('orange', /** skipNotify */ true);\n    expect(mockFoundation.setValue).toHaveBeenCalledWith('orange', true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layout calls foundation.layout","suites":["MDCSelect"],"line":370,"updatePoint":{"line":370,"column":37},"code":"  it('#layout calls foundation.layout', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.layout();\n    expect(mockFoundation.layout).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layoutOptions calls foundation.layoutOptions and menu.layout","suites":["MDCSelect"],"line":381,"updatePoint":{"line":381,"column":67},"code":"  it('#layoutOptions calls foundation.layoutOptions and menu.layout', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation, mockMenu} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.layoutOptions();\n    expect(mockFoundation.layoutOptions).toHaveBeenCalled();\n    expect(mockMenu.layout).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layoutOptions refreshes menu options cache","suites":["MDCSelect"],"line":393,"updatePoint":{"line":393,"column":49},"code":"  it('#layoutOptions refreshes menu options cache', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component['menuItemValues'] = [];\n    component.layoutOptions();\n    expect(component['menuItemValues']).toEqual(['', 'orange', 'apple']);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set useDefaultValidation forwards to foundation","suites":["MDCSelect"],"line":405,"updatePoint":{"line":405,"column":54},"code":"  it('#set useDefaultValidation forwards to foundation', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n\n    component.useDefaultValidation = false;\n    expect(mockFoundation.setUseDefaultValidation).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get valid forwards to foundation","suites":["MDCSelect"],"line":417,"updatePoint":{"line":417,"column":39},"code":"  it('#get valid forwards to foundation', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n\n    component.valid;\n    expect(mockFoundation.isValid).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set valid forwards to foundation","suites":["MDCSelect"],"line":429,"updatePoint":{"line":429,"column":39},"code":"  it('#set valid forwards to foundation', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n\n    component.valid = false;\n    expect(mockFoundation.setValid).toHaveBeenCalledWith(false);\n    component.valid = true;\n    expect(mockFoundation.setValid).toHaveBeenCalledWith(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#get selectedIndex calls foundation.getSelectedIndex","suites":["MDCSelect"],"line":443,"updatePoint":{"line":443,"column":58},"code":"  it('#get selectedIndex calls foundation.getSelectedIndex', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.selectedIndex;\n    expect(mockFoundation.getSelectedIndex).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set selectedIndex calls foundation.setSelectedIndex","suites":["MDCSelect"],"line":454,"updatePoint":{"line":454,"column":58},"code":"  it('#set selectedIndex calls foundation.setSelectedIndex', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.selectedIndex = 1;\n    expect(mockFoundation.setSelectedIndex)\n        .toHaveBeenCalledWith(1, /** closeMenu */ true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setSelectedIndex calls foundation.setSelectedIndex with params","suites":["MDCSelect"],"line":466,"updatePoint":{"line":466,"column":69},"code":"  it('#setSelectedIndex calls foundation.setSelectedIndex with params', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.setSelectedIndex(1, true);\n    expect(mockFoundation.setSelectedIndex)\n        .toHaveBeenCalledWith(1, /** closeMenu */ true, /** skipNotify */ true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set disabled calls foundation.setDisabled","suites":["MDCSelect"],"line":478,"updatePoint":{"line":478,"column":48},"code":"  it('#set disabled calls foundation.setDisabled', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.disabled = true;\n    expect(mockFoundation.setDisabled).toHaveBeenCalledWith(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set leadingIconAriaLabel calls foundation.setLeadingIconAriaLabel","suites":["MDCSelect"],"line":489,"updatePoint":{"line":489,"column":72},"code":"  it('#set leadingIconAriaLabel calls foundation.setLeadingIconAriaLabel',\n     () => {\n       const hasMockFoundation = true;\n       const hasMockMenu = true;\n       const hasOutline = false;\n       const hasLabel = true;\n       const {component, mockFoundation} =\n           setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n       component.leadingIconAriaLabel = 'true';\n       expect(mockFoundation.setLeadingIconAriaLabel)\n           .toHaveBeenCalledWith('true');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set leadingIconContent calls foundation.setLeadingIconAriaLabel","suites":["MDCSelect"],"line":502,"updatePoint":{"line":502,"column":70},"code":"  it('#set leadingIconContent calls foundation.setLeadingIconAriaLabel', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    component.leadingIconContent = 'hello_world';\n    expect(mockFoundation.setLeadingIconContent)\n        .toHaveBeenCalledWith('hello_world');\n    expect(mockFoundation.setLeadingIconContent).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#set helperTextContent calls foundation.setHelperTextContent","suites":["MDCSelect"],"line":515,"updatePoint":{"line":515,"column":66},"code":"  it('#set helperTextContent calls foundation.setHelperTextContent', () => {\n    const {component} = setupTest();\n    (component as any).foundation.setHelperTextContent = jasmine.createSpy('');\n    component.helperTextContent = 'hello_world';\n    expect((component as any).foundation.setHelperTextContent)\n        .toHaveBeenCalledWith('hello_world');\n    expect((component as any).foundation.setHelperTextContent)\n        .toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#initialSyncWithDOM sets value if hidden input has value","suites":["MDCSelect"],"line":576,"updatePoint":{"line":576,"column":62},"code":"  it('#initialSyncWithDOM sets value if hidden input has value', () => {\n    const fixture = createFixture(`\n      <div class=\"mdc-select mdc-select--with-leading-icon\">\n        <input type=\"hidden\" name=\"test-input\" value=\"orange\">\n        <div class=\"mdc-select__anchor\">\n          <span class=\"mdc-select__ripple\"></span>\n          <i class=\"mdc-select__icon material-icons\">code</i>\n          <span class=\"mdc-select__selected-text\"></span>\n          <span class=\"mdc-select__dropdown-icon\">\n            <svg\n                width=\"10px\"\n                height=\"5px\"\n                viewBox=\"7 10 10 5\" focusable=\"false\">\n              <polygon\n                  class=\"mdc-select__dropdown-icon-inactive\"\n                  stroke=\"none\"\n                  fill-rule=\"evenodd\"\n                  points=\"7 10 12 15 17 10\">\n              </polygon>\n              <polygon\n                  class=\"mdc-select__dropdown-icon-active\"\n                  stroke=\"none\"\n                  fill-rule=\"evenodd\"\n                  points=\"7 15 12 10 17 15\">\n              </polygon>\n            </svg>\n          </span>\n          <span class=\"mdc-floating-label\">Pick a Food Group</span>\n          <span class=\"mdc-line-ripple\"></span>\n        </div>\n\n        <div class=\"mdc-select__menu mdc-menu mdc-menu-surface\">\n          <ul class=\"mdc-deprecated-list\">\n            <li class=\"mdc-deprecated-list-item\" data-value=\"\"></li>\n            <li class=\"mdc-deprecated-list-item\" data-value=\"orange\">\n              <span class=\"mdc-deprecated-list-item__text\">Orange</span>\n            </li>\n            <li class=\"mdc-deprecated-list-item\" data-value=\"apple\">\n              <span class=\"mdc-deprecated-list-item__text\">Apple</span>\n            </li>\n          </ul>\n        </div>\n      </div>`);\n\n    const component = new MDCSelect(fixture, /* foundation */ undefined);\n    expect(component.selectedIndex).toEqual(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#initialSyncWithDOM sets the selected index if empty option has the selected class","suites":["MDCSelect"],"line":624,"updatePoint":{"line":624,"column":88},"code":"  it('#initialSyncWithDOM sets the selected index if empty option has the selected class',\n     () => {\n       const fixture = createFixture(`\n        <div class=\"mdc-select\">\n          <div class=\"mdc-select__anchor\">\n            <span class=\"mdc-select__ripple\"></span>\n            <i class=\"mdc-select__icon material-icons\">code</i>\n            <span class=\"mdc-select__selected-text\"></span>\n            <span class=\"mdc-select__dropdown-icon\">\n              <svg\n                  width=\"10px\"\n                  height=\"5px\"\n                  viewBox=\"7 10 10 5\" focusable=\"false\">\n                <polygon\n                    class=\"mdc-select__dropdown-icon-inactive\"\n                    stroke=\"none\"\n                    fill-rule=\"evenodd\"\n                    points=\"7 10 12 15 17 10\">\n                </polygon>\n                <polygon\n                    class=\"mdc-select__dropdown-icon-active\"\n                    stroke=\"none\"\n                    fill-rule=\"evenodd\"\n                    points=\"7 15 12 10 17 15\">\n                </polygon>\n              </svg>\n            </span>\n            <span class=\"mdc-floating-label\">Pick a Food Group</span>\n            <span class=\"mdc-line-ripple\"></span>\n          </div>\n\n          <div class=\"mdc-select__menu mdc-menu mdc-menu-surface\">\n            <ul class=\"mdc-deprecated-list\">\n              <li class=\"mdc-deprecated-list-item mdc-deprecated-list-item--selected\" data-value=\"\"></li>\n              <li class=\"mdc-deprecated-list-item\" data-value=\"orange\">\n                Orange\n              </li>\n              <li class=\"mdc-deprecated-list-item\" data-value=\"apple\">\n                Apple\n              </li>\n            </ul>\n          </div>\n        </div>\n      `);\n       const component = new MDCSelect(fixture, /* foundation */ undefined);\n       expect(component.selectedIndex).toEqual(0);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#initialSyncWithDOM disables the select if the disabled class is found","suites":["MDCSelect"],"line":672,"updatePoint":{"line":672,"column":76},"code":"  it('#initialSyncWithDOM disables the select if the disabled class is found',\n     () => {\n       const fixture = createFixture(`\n    <div class=\"mdc-select mdc-select--disabled\">\n      <div class=\"mdc-select__anchor\">\n        <span class=\"mdc-select__ripple\"></span>\n        <i class=\"mdc-select__icon material-icons\">code</i>\n        <span class=\"mdc-select__selected-text\"></span>\n        <span class=\"mdc-select__dropdown-icon\">\n          <svg\n              width=\"10px\"\n              height=\"5px\"\n              viewBox=\"7 10 10 5\" focusable=\"false\">\n            <polygon\n                class=\"mdc-select__dropdown-icon-inactive\"\n                stroke=\"none\"\n                fill-rule=\"evenodd\"\n                points=\"7 10 12 15 17 10\">\n            </polygon>\n            <polygon\n                class=\"mdc-select__dropdown-icon-active\"\n                stroke=\"none\"\n                fill-rule=\"evenodd\"\n                points=\"7 15 12 10 17 15\">\n            </polygon>\n          </svg>\n        </span>\n        <span class=\"mdc-floating-label\">Pick a Food Group</span>\n        <span class=\"mdc-line-ripple\"></span>\n      </div>\n\n      <div class=\"mdc-select__menu mdc-menu mdc-menu-surface\">\n        <ul class=\"mdc-deprecated-list\">\n          <li class=\"mdc-deprecated-list-item mdc-deprecated-list-item--selected\" data-value=\"\"></li>\n          <li class=\"mdc-deprecated-list-item\" data-value=\"orange\">\n            <span class=\"mdc-deprecated-list-item__text\">Orange</span>\n          </li>\n          <li class=\"mdc-deprecated-list-item\" data-value=\"apple\">\n            <span class=\"mdc-deprecated-list-item__text\">Apple</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `);\n       const component = new MDCSelect(fixture);\n       expect(component.disabled).toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"instantiates ripple","suites":["MDCSelect"],"line":720,"updatePoint":{"line":720,"column":25},"code":"  it('instantiates ripple', () => {\n    if (!supportsCssVariables(window, true)) {\n      return;\n    }\n\n    const fixture = getFixture();\n\n    const component = MDCSelect.attachTo(fixture);\n    jasmine.clock().tick(1);\n\n    expect((component as any).ripple).toEqual(jasmine.any(MDCRipple));\n    const anchor =\n        fixture.querySelector(strings.SELECT_ANCHOR_SELECTOR) as HTMLElement;\n    expect(anchor.classList.contains(MDCRippleFoundation.cssClasses.ROOT))\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#constructor instantiates an outline on the  element if present","suites":["MDCSelect"],"line":737,"updatePoint":{"line":738,"column":53},"code":"  it(`#constructor instantiates an outline on the ${\n         strings.OUTLINE_SELECTOR} element if present`,\n     () => {\n       const root = getOutlineFixture();\n       const component = new MDCSelect(root);\n       expect((component as any).outline)\n           .toEqual(jasmine.any(MDCNotchedOutline));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"handles ripple focus properly","suites":["MDCSelect"],"line":746,"updatePoint":{"line":746,"column":35},"code":"  it('handles ripple focus properly', () => {\n    if (!supportsCssVariables(window, true)) {\n      return;\n    }\n\n    const fixture = getFixture();\n\n    MDCSelect.attachTo(fixture);\n    jasmine.clock().tick(1);\n\n    const anchor =\n        fixture.querySelector(strings.SELECT_ANCHOR_SELECTOR) as HTMLElement;\n\n    emitEvent(anchor, 'focus');\n    jasmine.clock().tick(1);\n\n    expect(anchor.classList.contains(MDCRippleFoundation.cssClasses.BG_FOCUSED))\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy removes the ripple","suites":["MDCSelect"],"line":766,"updatePoint":{"line":766,"column":33},"code":"  it('#destroy removes the ripple', () => {\n    if (!supportsCssVariables(window, true)) {\n      return;\n    }\n\n    const fixture = getFixture();\n\n    const component = new MDCSelect(fixture);\n    jasmine.clock().tick(1);\n\n    const anchor =\n        fixture.querySelector(strings.SELECT_ANCHOR_SELECTOR) as HTMLElement;\n\n    expect(anchor.classList.contains(MDCRippleFoundation.cssClasses.ROOT))\n        .toBe(true);\n    component.destroy();\n    jasmine.clock().tick(1);\n    expect(anchor.classList.contains(MDCRippleFoundation.cssClasses.ROOT))\n        .toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy cleans up the outline if present","suites":["MDCSelect"],"line":787,"updatePoint":{"line":787,"column":47},"code":"  it('#destroy cleans up the outline if present', () => {\n    const {component, outline} = setupTest();\n    (component as any).outline = outline;\n    component.destroy();\n    expect(outline.destroy).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"does not instantiate ripple when  class is present","suites":["MDCSelect"],"line":794,"updatePoint":{"line":794,"column":78},"code":"  it(`does not instantiate ripple when ${cssClasses.OUTLINED} class is present`,\n     () => {\n       const hasOutline = true;\n       const {component} = setupTest(hasOutline);\n       expect((component as any).ripple).toBe(undefined);\n       expect(() => {\n         component.destroy();\n       }).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCSelect"],"line":804,"updatePoint":{"line":804,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {component, fixture} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(fixture.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#removeClass removes a class from the root element","suites":["MDCSelect"],"line":810,"updatePoint":{"line":810,"column":63},"code":"  it('adapter#removeClass removes a class from the root element', () => {\n    const {component, fixture} = setupTest();\n    fixture.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(fixture.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#hasClass returns true if a class exists on the root element","suites":["MDCSelect"],"line":817,"updatePoint":{"line":817,"column":73},"code":"  it('adapter#hasClass returns true if a class exists on the root element',\n     () => {\n       const {component, fixture} = setupTest();\n       fixture.classList.add('foo');\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasClass('foo'))\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#floatLabel does not throw error if label does not exist","suites":["MDCSelect"],"line":826,"updatePoint":{"line":826,"column":69},"code":"  it('adapter#floatLabel does not throw error if label does not exist', () => {\n    const fixture = createFixture(`\n    <div class=\"mdc-select\">\n      <div class=\"mdc-select__anchor\">\n        <span class=\"mdc-select__ripple\"></span>\n        <i class=\"mdc-select__icon material-icons\">code</i>\n        <span class=\"mdc-select__selected-text\"></span>\n        <span class=\"mdc-select__dropdown-icon\">\n          <svg\n              width=\"10px\"\n              height=\"5px\"\n              viewBox=\"7 10 10 5\" focusable=\"false\">\n            <polygon\n                class=\"mdc-select__dropdown-icon-inactive\"\n                stroke=\"none\"\n                fill-rule=\"evenodd\"\n                points=\"7 10 12 15 17 10\">\n            </polygon>\n            <polygon\n                class=\"mdc-select__dropdown-icon-active\"\n                stroke=\"none\"\n                fill-rule=\"evenodd\"\n                points=\"7 15 12 10 17 15\">\n            </polygon>\n          </svg>\n        </span>\n        <span class=\"mdc-line-ripple\"></span>\n      </div>\n\n      <div class=\"mdc-select__menu mdc-menu mdc-menu-surface\">\n        <ul class=\"mdc-deprecated-list\">\n          <li class=\"mdc-deprecated-list-item mdc-deprecated-list-item--selected\" data-value=\"\"></li>\n          <li class=\"mdc-deprecated-list-item\" data-value=\"orange\">\n            <span class=\"mdc-deprecated-list-item__text\">Orange</span>\n          </li>\n          <li class=\"mdc-deprecated-list-item\" data-value=\"apple\">\n            <span class=\"mdc-deprecated-list-item__text\">Apple</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `);\n    const component = new MDCSelect(fixture);\n    expect(\n        () => (component.getDefaultFoundation() as any)\n                  .adapter.floatLabel('foo'))\n        .not.toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#floatLabel adds a class to the label","suites":["MDCSelect"],"line":930,"updatePoint":{"line":930,"column":50},"code":"  it('adapter#floatLabel adds a class to the label', () => {\n    const {component, label} = setupTest();\n\n    (component.getDefaultFoundation() as any).adapter.floatLabel('foo');\n    expect(label.float).toHaveBeenCalledWith('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#activateBottomLine adds active class to the bottom line","suites":["MDCSelect"],"line":937,"updatePoint":{"line":937,"column":69},"code":"  it('adapter#activateBottomLine adds active class to the bottom line', () => {\n    const {component, bottomLine} = setupTest();\n\n    (component.getDefaultFoundation() as any).adapter.activateBottomLine();\n    expect(bottomLine.activate).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#deactivateBottomLine removes active class from the bottom line","suites":["MDCSelect"],"line":944,"updatePoint":{"line":944,"column":76},"code":"  it('adapter#deactivateBottomLine removes active class from the bottom line',\n     () => {\n       const {component, bottomLine} = setupTest();\n\n       (component.getDefaultFoundation() as any)\n           .adapter.deactivateBottomLine();\n       expect(bottomLine.deactivate).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#notchOutline proxies labelWidth to the outline","suites":["MDCSelect"],"line":953,"updatePoint":{"line":953,"column":60},"code":"  it('adapter#notchOutline proxies labelWidth to the outline', () => {\n    const hasOutline = true;\n    const {component, outline} = setupTest(hasOutline);\n\n    (component.getDefaultFoundation() as any)\n        .adapter.notchOutline(LABEL_WIDTH);\n    expect(outline.notch).toHaveBeenCalledWith(LABEL_WIDTH);\n    expect(outline.notch).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#notchOutline does not proxy values to the outline if it does not exist","suites":["MDCSelect"],"line":963,"updatePoint":{"line":963,"column":84},"code":"  it('adapter#notchOutline does not proxy values to the outline if it does not exist',\n     () => {\n       const hasOutline = false;\n       const {component, outline} = setupTest(hasOutline);\n\n       (component.getDefaultFoundation() as any)\n           .adapter.notchOutline(LABEL_WIDTH);\n       expect(outline.notch).not.toHaveBeenCalledWith(LABEL_WIDTH);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#notifyChange updates hidden input","suites":["MDCSelect"],"line":973,"updatePoint":{"line":973,"column":47},"code":"  it('adapter#notifyChange updates hidden input', () => {\n    const {component} = setupTest();\n    component['getDefaultFoundation']()['adapter'].notifyChange('foo');\n    expect((component as any).hiddenInput.value).toEqual('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#closeOutline closes the outline if there is an outline","suites":["MDCSelect"],"line":979,"updatePoint":{"line":979,"column":68},"code":"  it('adapter#closeOutline closes the outline if there is an outline', () => {\n    const hasOutline = true;\n    const {component, outline} = setupTest(hasOutline);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n    adapter.closeOutline();\n    expect(outline.closeNotch).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#closeOutline does nothing if there is no outline","suites":["MDCSelect"],"line":987,"updatePoint":{"line":987,"column":62},"code":"  it('adapter#closeOutline does nothing if there is no outline', () => {\n    const hasOutline = false;\n    const {component, outline} = setupTest(hasOutline);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    adapter.closeOutline();\n    expect(outline.closeNotch).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#getLabelWidth returns the width of the label","suites":["MDCSelect"],"line":996,"updatePoint":{"line":996,"column":58},"code":"  it('adapter#getLabelWidth returns the width of the label', () => {\n    const {component} = setupTest();\n    expect((component.getDefaultFoundation() as any).adapter.getLabelWidth())\n        .toEqual(LABEL_WIDTH);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#getLabelWidth returns 0 if the label does not exist","suites":["MDCSelect"],"line":1002,"updatePoint":{"line":1002,"column":65},"code":"  it('adapter#getLabelWidth returns 0 if the label does not exist', () => {\n    const hasOutline = true;\n    const hasLabel = false;\n    const {component} = setupTest(hasOutline, hasLabel);\n\n    expect((component.getDefaultFoundation() as any).adapter.getLabelWidth())\n        .toEqual(0);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#focusMenuItemAtIndex","suites":["MDCSelect"],"line":1011,"updatePoint":{"line":1011,"column":34},"code":"  it('adapter#focusMenuItemAtIndex', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, menuSurface, fixture} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const index = 1;\n    const menuItem =\n        menuSurface.querySelectorAll('.mdc-deprecated-list-item')[index];\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    adapter.focusMenuItemAtIndex(index);\n    expect(document.activeElement).toEqual(menuItem);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#setSelectedText sets the select text content correctly","suites":["MDCSelect"],"line":1029,"updatePoint":{"line":1029,"column":68},"code":"  it('adapter#setSelectedText sets the select text content correctly', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, selectedText} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    const textToSet = 'foo';\n    expect(selectedText.textContent).not.toEqual(textToSet);\n    adapter.setSelectedText(textToSet);\n    expect(selectedText.textContent).toEqual(textToSet);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#isSelectAnchorFocused","suites":["MDCSelect"],"line":1046,"updatePoint":{"line":1046,"column":35},"code":"  it('adapter#isSelectAnchorFocused', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, anchor} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    anchor.tabIndex = 0;\n    anchor.focus();\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    expect(adapter.isSelectAnchorFocused()).toBe(true);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#getSelectAnchorAttr gets the attribute content correctly","suites":["MDCSelect"],"line":1062,"updatePoint":{"line":1062,"column":70},"code":"  it('adapter#getSelectAnchorAttr gets the attribute content correctly', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, anchor} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    expect(anchor.hasAttribute('foo')).toBe(false);\n    anchor.setAttribute('foo', '1');\n    expect(adapter.getSelectAnchorAttr('foo')).toEqual('1');\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#setSelectAnchorAttr sets the attribute content correctly","suites":["MDCSelect"],"line":1078,"updatePoint":{"line":1078,"column":70},"code":"  it('adapter#setSelectAnchorAttr sets the attribute content correctly', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, anchor} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    expect(anchor.hasAttribute('foo')).toBe(false);\n    adapter.setSelectAnchorAttr('foo', '1');\n    expect(anchor.getAttribute('foo')).toEqual('1');\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#openMenu causes the menu to open","suites":["MDCSelect"],"line":1094,"updatePoint":{"line":1094,"column":46},"code":"  it('adapter#openMenu causes the menu to open', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, mockMenu} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n    adapter.openMenu();\n    expect(mockMenu.open).toBe(true);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#closeMenu causes the menu to close","suites":["MDCSelect"],"line":1108,"updatePoint":{"line":1108,"column":48},"code":"  it('adapter#closeMenu causes the menu to close', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, mockMenu} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n    adapter.openMenu();\n    adapter.closeMenu();\n    expect(mockMenu.open).toBe(false);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#getAnchorElement","suites":["MDCSelect"],"line":1123,"updatePoint":{"line":1123,"column":30},"code":"  it('adapter#getAnchorElement', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, anchor} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    expect(adapter.getAnchorElement()).toEqual(anchor);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#setMenuAnchorElement","suites":["MDCSelect"],"line":1137,"updatePoint":{"line":1137,"column":34},"code":"  it('adapter#setMenuAnchorElement', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, mockMenu, anchor} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    adapter.setMenuAnchorElement(anchor);\n    expect(mockMenu.setAnchorElement).toHaveBeenCalledWith(anchor);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#setMenuAnchorCorner","suites":["MDCSelect"],"line":1152,"updatePoint":{"line":1152,"column":33},"code":"  it('adapter#setMenuAnchorCorner', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, mockMenu} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    adapter.setMenuAnchorCorner(Corner.BOTTOM_START);\n    expect(mockMenu.setAnchorCorner).toHaveBeenCalledWith(Corner.BOTTOM_START);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#setMenuWrapFocus","suites":["MDCSelect"],"line":1167,"updatePoint":{"line":1167,"column":30},"code":"  it('adapter#setMenuWrapFocus', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, mockMenu} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    adapter.setMenuWrapFocus(false);\n    expect(mockMenu.wrapFocus).toBe(false);\n    adapter.setMenuWrapFocus(true);\n    expect(mockMenu.wrapFocus).toBe(true);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#getMenuItemCount returns the correct number of menu items","suites":["MDCSelect"],"line":1184,"updatePoint":{"line":1184,"column":71},"code":"  it('adapter#getMenuItemCount returns the correct number of menu items',\n     () => {\n       const hasMockFoundation = true;\n       const hasMockMenu = false;\n       const hasOutline = false;\n       const hasLabel = true;\n       const {fixture, component} =\n           setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n       document.body.appendChild(fixture);\n\n       const adapter = (component.getDefaultFoundation() as any).adapter;\n       expect(adapter.getMenuItemCount()).toEqual(3);\n\n       document.body.removeChild(fixture);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#getMenuItemValues returns the correct menu item values","suites":["MDCSelect"],"line":1200,"updatePoint":{"line":1200,"column":68},"code":"  it('adapter#getMenuItemValues returns the correct menu item values', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n    expect(adapter.getMenuItemValues()).toEqual(['', 'orange', 'apple']);\n\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#getMenuItemAttr returns the menu item attribute","suites":["MDCSelect"],"line":1215,"updatePoint":{"line":1215,"column":61},"code":"  it('adapter#getMenuItemAttr returns the menu item attribute', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {component, menuSurface} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n\n    const index = 1;\n    const menuItem =\n        menuSurface.querySelectorAll('.mdc-deprecated-list-item')[index];\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    expect(adapter.getMenuItemAttr(menuItem, strings.VALUE_ATTR))\n        .toEqual('orange');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#isTypeaheadInProgress queries menu state","suites":["MDCSelect"],"line":1232,"updatePoint":{"line":1232,"column":54},"code":"  it('adapter#isTypeaheadInProgress queries menu state', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, mockMenu} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n\n    mockMenu.typeaheadInProgress = false;\n    expect(adapter.isTypeaheadInProgress()).toBe(false);\n    mockMenu.typeaheadInProgress = true;\n    expect(adapter.isTypeaheadInProgress()).toBe(true);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"adapter#typeaheadMatchItem calls menu method","suites":["MDCSelect"],"line":1249,"updatePoint":{"line":1249,"column":50},"code":"  it('adapter#typeaheadMatchItem calls menu method', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, mockMenu} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n    mockMenu.typeaheadMatchItem.and.returnValue(2);\n\n    expect(adapter.typeaheadMatchItem('a', 4)).toEqual(2);\n    expect(mockMenu.typeaheadMatchItem).toHaveBeenCalledWith('a', 4);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"focus event triggers foundation.handleFocus()","suites":["MDCSelect"],"line":1265,"updatePoint":{"line":1265,"column":51},"code":"  it('focus event triggers foundation.handleFocus()', () => {\n    const {anchor, mockFoundation} = setupWithMockFoundation();\n    emitEvent(anchor, 'focus');\n    expect(mockFoundation.handleFocus).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"blur event triggers foundation.handleBlur()","suites":["MDCSelect"],"line":1271,"updatePoint":{"line":1271,"column":49},"code":"  it('blur event triggers foundation.handleBlur()', () => {\n    const {anchor, mockFoundation} = setupWithMockFoundation();\n    emitEvent(anchor, 'blur');\n    expect(mockFoundation.handleBlur).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy removes the focus handler","suites":["MDCSelect"],"line":1277,"updatePoint":{"line":1277,"column":40},"code":"  it('#destroy removes the focus handler', () => {\n    const {component, anchor, mockFoundation} = setupWithMockFoundation();\n    component.destroy();\n    emitEvent(anchor, 'focus');\n    expect(mockFoundation.handleFocus).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy removes the blur handler","suites":["MDCSelect"],"line":1284,"updatePoint":{"line":1284,"column":39},"code":"  it('#destroy removes the blur handler', () => {\n    const {component, anchor, mockFoundation} = setupWithMockFoundation();\n    component.destroy();\n    emitEvent(anchor, 'blur');\n    expect(mockFoundation.handleBlur).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy removes the click handler","suites":["MDCSelect"],"line":1291,"updatePoint":{"line":1291,"column":40},"code":"  it('#destroy removes the click handler', () => {\n    const {component, anchor, mockFoundation} = setupWithMockFoundation();\n    component.destroy();\n    emitEvent(anchor, 'click');\n    expect(mockFoundation.handleClick).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy calls menu#destroy","suites":["MDCSelect"],"line":1298,"updatePoint":{"line":1298,"column":33},"code":"  it('#destroy calls menu#destroy', () => {\n    const {component, mockMenu} = setupTest();\n    component.destroy();\n    expect(mockMenu.destroy).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy removes the listener for  event","suites":["MDCSelect"],"line":1304,"updatePoint":{"line":1305,"column":56},"code":"  it(`#destroy removes the listener for ${\n         MDCMenuFoundation.strings.SELECTED_EVENT} event`,\n     () => {\n       const hasMockFoundation = false;\n       const hasMockMenu = false;\n       const hasOutline = false;\n       const hasLabel = true;\n       const {fixture, component, mockFoundation, menuSurface} =\n           setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n       document.body.appendChild(fixture);\n       component.destroy();\n\n       const evtType = MDCMenuFoundation.strings.SELECTED_EVENT;\n       const detail = {index: 1};\n       let evt;\n       if (typeof CustomEvent === 'function') {\n         evt = new CustomEvent(evtType, {\n           detail,\n           bubbles: false,\n         });\n       } else {\n         evt = document.createEvent('CustomEvent');\n         evt.initCustomEvent(evtType, false, false, detail);\n       }\n       menuSurface.dispatchEvent(evt);\n       expect(mockFoundation.setSelectedIndex).not.toHaveBeenCalledWith(1);\n\n       document.body.removeChild(fixture);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy removes the click listener","suites":["MDCSelect"],"line":1334,"updatePoint":{"line":1334,"column":41},"code":"  it('#destroy removes the click listener', () => {\n    const {component, anchor} = setupTest();\n    (component as any).foundation.handleClick =\n        jasmine.createSpy('handleClick');\n    component.destroy();\n    emitEvent(anchor, 'click');\n    expect((component as any).foundation.handleClick).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"click on the anchor calls foundation.handleClick()","suites":["MDCSelect"],"line":1343,"updatePoint":{"line":1343,"column":56},"code":"  it('click on the anchor calls foundation.handleClick()', () => {\n    const {component, anchor} = setupTest();\n    (component as any).foundation.handleClick = jasmine.createSpy('');\n    emitEvent(anchor, 'click');\n    expect((component as any).foundation.handleClick).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"click on the anchor focuses on the anchor element","suites":["MDCSelect"],"line":1350,"updatePoint":{"line":1350,"column":55},"code":"  it('click on the anchor focuses on the anchor element', () => {\n    const {anchor} = setupTest();\n    anchor.focus = jasmine.createSpy('focus');\n    emitEvent(anchor, 'click');\n    expect(anchor.focus).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"menu surface opened event causes the first element (if no element is selected) to be focused","suites":["MDCSelect"],"line":1357,"updatePoint":{"line":1357,"column":98},"code":"  it('menu surface opened event causes the first element (if no element is selected) to be focused',\n     () => {\n       const hasMockFoundation = false;\n       const hasMockMenu = false;\n       const hasOutline = false;\n       const hasLabel = true;\n       const {fixture, component, menuSurface} =\n           setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n       document.body.appendChild(fixture);\n       component.selectedIndex = -1;\n\n       emitEvent(\n           menuSurface, MDCMenuSurfaceFoundation.strings.OPENED_EVENT,\n           {bubbles: false, cancelable: true});\n\n       expect(document.activeElement)\n           .toEqual(menuSurface.querySelector('.mdc-deprecated-list-item'));\n       document.body.removeChild(fixture);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"menu surface opened event handler calls Foundation#handleMenuOpened","suites":["MDCSelect"],"line":1377,"updatePoint":{"line":1377,"column":73},"code":"  it('menu surface opened event handler calls Foundation#handleMenuOpened',\n     () => {\n       const hasMockFoundation = true;\n       const hasMockMenu = false;\n       const hasOutline = false;\n       const hasLabel = true;\n       const {fixture, mockFoundation, menuSurface} =\n           setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n       document.body.appendChild(fixture);\n\n       const event = document.createEvent('Event');\n       event.initEvent(\n           MDCMenuSurfaceFoundation.strings.OPENED_EVENT, false, true);\n       emitEvent(\n           menuSurface, MDCMenuSurfaceFoundation.strings.OPENED_EVENT,\n           {bubbles: false, cancelable: true});\n       expect(mockFoundation.handleMenuOpened).toHaveBeenCalledTimes(1);\n\n       document.body.removeChild(fixture);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"menu surface opened event causes selected element to be focused","suites":["MDCSelect"],"line":1398,"updatePoint":{"line":1398,"column":69},"code":"  it('menu surface opened event causes selected element to be focused', () => {\n    const hasMockFoundation = false;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, component, menuSurface} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    component.selectedIndex = 1;\n    emitEvent(\n        menuSurface, MDCMenuSurfaceFoundation.strings.OPENED_EVENT,\n        {bubbles: false, cancelable: true});\n\n    expect(document.activeElement)\n        .toEqual(\n            menuSurface.querySelector('.mdc-deprecated-list-item--selected'));\n    expect(component.selectedIndex).toEqual(1);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"keydown event is added to select anchor when initialized","suites":["MDCSelect"],"line":1418,"updatePoint":{"line":1418,"column":62},"code":"  it('keydown event is added to select anchor when initialized', () => {\n    const {fixture, mockFoundation} = setupWithMockFoundation();\n    document.body.appendChild(fixture);\n    emitEvent(\n        fixture.querySelector(strings.SELECT_ANCHOR_SELECTOR) as HTMLElement,\n        'keydown');\n    expect(mockFoundation.handleKeydown)\n        .toHaveBeenCalledWith(jasmine.anything());\n    expect(mockFoundation.handleKeydown).toHaveBeenCalledTimes(1);\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"keydown event is removed from select anchor when destroyed","suites":["MDCSelect"],"line":1430,"updatePoint":{"line":1430,"column":64},"code":"  it('keydown event is removed from select anchor when destroyed', () => {\n    const {fixture, mockFoundation, component} = setupWithMockFoundation();\n    document.body.appendChild(fixture);\n    component.destroy();\n    emitEvent(\n        fixture.querySelector(strings.SELECT_ANCHOR_SELECTOR) as HTMLElement,\n        'keydown');\n    expect(mockFoundation.handleKeydown)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"menu surface selected event causes the select to update","suites":["MDCSelect"],"line":1442,"updatePoint":{"line":1442,"column":61},"code":"  it('menu surface selected event causes the select to update', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, menuSurface, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const evtType = MDCMenuFoundation.strings.SELECTED_EVENT;\n    const detail = {index: 1};\n    let evt;\n    if (typeof CustomEvent === 'function') {\n      evt = new CustomEvent(evtType, {\n        detail,\n        bubbles: false,\n      });\n    } else {\n      evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(evtType, false, false, detail);\n    }\n    menuSurface.dispatchEvent(evt);\n    expect(mockFoundation.handleMenuItemAction).toHaveBeenCalledWith(1);\n    expect(mockFoundation.handleMenuItemAction).toHaveBeenCalledTimes(1);\n\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"menu surface closed event sets aria-expanded to false","suites":["MDCSelect"],"line":1469,"updatePoint":{"line":1469,"column":59},"code":"  it('menu surface closed event sets aria-expanded to false', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = false;\n    const hasOutline = false;\n    const hasLabel = true;\n    const {fixture, menuSurface, mockFoundation} =\n        setupTest(hasOutline, hasLabel, hasMockFoundation, hasMockMenu);\n    document.body.appendChild(fixture);\n    const evtType = MDCMenuSurfaceFoundation.strings.CLOSING_EVENT;\n    let evt;\n    if (typeof CustomEvent === 'function') {\n      evt = new CustomEvent(evtType, {\n        bubbles: false,\n      });\n    } else {\n      evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(evtType, false, false, null);\n    }\n    menuSurface.dispatchEvent(evt);\n    expect(mockFoundation.handleMenuClosing).toHaveBeenCalledTimes(1);\n\n    document.body.removeChild(fixture);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#constructor instantiates a leading icon if an icon element is present","suites":["MDCSelect"],"line":1493,"updatePoint":{"line":1493,"column":76},"code":"  it('#constructor instantiates a leading icon if an icon element is present',\n     () => {\n       const root = getFixture();\n       const component = new MDCSelect(root);\n       expect((component as any).leadingIcon)\n           .toEqual(jasmine.any(MDCSelectIcon));\n       expect(root.classList.contains(cssClasses.WITH_LEADING_ICON)).toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#constructor instantiates the helper text if present","suites":["MDCSelect"],"line":1502,"updatePoint":{"line":1502,"column":58},"code":"  it('#constructor instantiates the helper text if present', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasLabel = true;\n    const hasOutline = false;\n    const hasHelperText = true;\n    const {container, component} = setupTest(\n        hasLabel, hasOutline, hasMockFoundation, hasMockMenu, hasHelperText);\n\n    expect((component as any).helperText).toEqual(jasmine.any(FakeHelperText));\n    document.body.removeChild(container as HTMLElement);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#constructor does not instantiate the helper text if the aria-controls id does not match an element","suites":["MDCSelect"],"line":1515,"updatePoint":{"line":1515,"column":105},"code":"  it('#constructor does not instantiate the helper text if the aria-controls id does not match an element',\n     () => {\n       const containerDiv = getHelperTextFixture();\n       containerDiv.querySelector('.mdc-select-helper-text')!.id =\n           'hello-world';\n       document.body.appendChild(containerDiv);\n\n       const component = new MDCSelect(\n           containerDiv.querySelector('.mdc-select') as HTMLElement);\n       expect((component as any).helperText).toBe(undefined);\n       document.body.removeChild(containerDiv as HTMLElement);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#destroy destroys the helper text if it exists","suites":["MDCSelect"],"line":1528,"updatePoint":{"line":1528,"column":52},"code":"  it('#destroy destroys the helper text if it exists', () => {\n    const hasMockFoundation = true;\n    const hasMockMenu = true;\n    const hasLabel = true;\n    const hasOutline = false;\n    const hasHelperText = true;\n    const {container, helperText, component} = setupTest(\n        hasLabel, hasOutline, hasMockFoundation, hasMockMenu, hasHelperText);\n\n    component.destroy();\n    expect(helperText.destroy).toHaveBeenCalledTimes(1);\n    document.body.removeChild(container as HTMLElement);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"exports cssClasses","suites":["MDCSelectFoundation"],"line":34,"updatePoint":{"line":34,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCSelectFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"exports numbers","suites":["MDCSelectFoundation"],"line":38,"updatePoint":{"line":38,"column":21},"code":"  it('exports numbers', () => {\n    expect(MDCSelectFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"exports strings","suites":["MDCSelectFoundation"],"line":42,"updatePoint":{"line":42,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCSelectFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"default adapter returns a complete adapter implementation","suites":["MDCSelectFoundation"],"line":46,"updatePoint":{"line":46,"column":63},"code":"  it('default adapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCSelectFoundation, [\n      'addClass',\n      'removeClass',\n      'hasClass',\n      'activateBottomLine',\n      'deactivateBottomLine',\n      'hasLabel',\n      'floatLabel',\n      'setLabelRequired',\n      'getLabelWidth',\n      'hasOutline',\n      'notchOutline',\n      'closeOutline',\n      'setRippleCenter',\n      'notifyChange',\n      'setSelectedText',\n      'isSelectAnchorFocused',\n      'getSelectAnchorAttr',\n      'setSelectAnchorAttr',\n      'removeSelectAnchorAttr',\n      'addMenuClass',\n      'removeMenuClass',\n      'openMenu',\n      'closeMenu',\n      'getAnchorElement',\n      'setMenuAnchorElement',\n      'setMenuAnchorCorner',\n      'setMenuWrapFocus',\n      'focusMenuItemAtIndex',\n      'getMenuItemCount',\n      'getMenuItemValues',\n      'getMenuItemTextAtIndex',\n      'isTypeaheadInProgress',\n      'typeaheadMatchItem',\n      'getSelectedIndex',\n      'setSelectedIndex',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#getDisabled() returns true if disabled","suites":["MDCSelectFoundation"],"line":115,"updatePoint":{"line":115,"column":45},"code":"  it('#getDisabled() returns true if disabled', () => {\n    const {foundation} = setupTest();\n    foundation.setDisabled(true);\n    expect(foundation.getDisabled()).toEqual(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#getDisabled() returns false if not disabled","suites":["MDCSelectFoundation"],"line":121,"updatePoint":{"line":121,"column":50},"code":"  it('#getDisabled() returns false if not disabled', () => {\n    const {foundation} = setupTest();\n    foundation.setDisabled(false);\n    expect(foundation.getDisabled()).toEqual(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setDisabled(true) calls adapter.addClass","suites":["MDCSelectFoundation"],"line":127,"updatePoint":{"line":127,"column":47},"code":"  it('#setDisabled(true) calls adapter.addClass', () => {\n    const {mockAdapter, foundation} = setupTest();\n    foundation.setDisabled(true);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.DISABLED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setDisabled(false) calls adapter.removeClass","suites":["MDCSelectFoundation"],"line":133,"updatePoint":{"line":133,"column":51},"code":"  it('#setDisabled(false) calls adapter.removeClass', () => {\n    const {mockAdapter, foundation} = setupTest();\n    foundation.setDisabled(false);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.DISABLED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setDisabled sets disabled on leading icon","suites":["MDCSelectFoundation"],"line":139,"updatePoint":{"line":139,"column":48},"code":"  it('#setDisabled sets disabled on leading icon', () => {\n    const {foundation, leadingIcon} = setupTest();\n    foundation.setDisabled(true);\n    expect(leadingIcon.setDisabled).toHaveBeenCalledWith(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setDisabled false adds tabindex 0","suites":["MDCSelectFoundation"],"line":145,"updatePoint":{"line":145,"column":40},"code":"  it('#setDisabled false adds tabindex 0', () => {\n    const {mockAdapter, foundation} = setupTest();\n    foundation.setDisabled(false);\n    expect(mockAdapter.setSelectAnchorAttr)\n        .toHaveBeenCalledWith('tabindex', '0');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setDisabled true removes tabindex attr","suites":["MDCSelectFoundation"],"line":152,"updatePoint":{"line":152,"column":45},"code":"  it('#setDisabled true removes tabindex attr', () => {\n    const {mockAdapter, foundation} = setupTest();\n    foundation.setDisabled(true);\n    expect(mockAdapter.removeSelectAnchorAttr).toHaveBeenCalledWith('tabindex');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#notchOutline updates the width of the outline element","suites":["MDCSelectFoundation"],"line":158,"updatePoint":{"line":158,"column":60},"code":"  it('#notchOutline updates the width of the outline element', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasOutline.and.returnValue(true);\n    mockAdapter.getLabelWidth.and.returnValue(LABEL_WIDTH);\n\n    foundation.notchOutline(true);\n    expect(mockAdapter.notchOutline)\n        .toHaveBeenCalledWith(LABEL_WIDTH * numbers.LABEL_SCALE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#notchOutline does nothing if no outline is present","suites":["MDCSelectFoundation"],"line":168,"updatePoint":{"line":168,"column":57},"code":"  it('#notchOutline does nothing if no outline is present', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasOutline.and.returnValue(false);\n    mockAdapter.getLabelWidth.and.returnValue(LABEL_WIDTH);\n\n    foundation.notchOutline(true);\n    expect(mockAdapter.notchOutline)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#notchOutline width is set to 0 if no label is present","suites":["MDCSelectFoundation"],"line":178,"updatePoint":{"line":178,"column":60},"code":"  it('#notchOutline width is set to 0 if no label is present', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasOutline.and.returnValue(true);\n    mockAdapter.getLabelWidth.and.returnValue(0);\n\n    foundation.notchOutline(true);\n    expect(mockAdapter.notchOutline).toHaveBeenCalledWith(0);\n    expect(mockAdapter.notchOutline).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#notchOutline(false) closes the outline","suites":["MDCSelectFoundation"],"line":188,"updatePoint":{"line":188,"column":45},"code":"  it('#notchOutline(false) closes the outline', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasOutline.and.returnValue(true);\n    mockAdapter.getLabelWidth.and.returnValue(LABEL_WIDTH);\n\n    foundation.notchOutline(false);\n    expect(mockAdapter.closeOutline).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#notchOutline does not close the notch if the select is still focused","suites":["MDCSelectFoundation"],"line":197,"updatePoint":{"line":197,"column":75},"code":"  it('#notchOutline does not close the notch if the select is still focused',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasOutline.and.returnValue(true);\n       mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n       mockAdapter.getLabelWidth.and.returnValue(LABEL_WIDTH);\n\n       foundation.notchOutline(false);\n       expect(mockAdapter.closeOutline).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleMenuOpened focuses last selected element","suites":["MDCSelectFoundation"],"line":208,"updatePoint":{"line":208,"column":53},"code":"  it('#handleMenuOpened focuses last selected element', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    mockAdapter.getSelectedIndex.and.returnValue(2);\n    foundation.handleMenuOpened();\n    expect(mockAdapter.focusMenuItemAtIndex).toHaveBeenCalledWith(2);\n    expect(mockAdapter.focusMenuItemAtIndex).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleMenuClosed removes  class name","suites":["MDCSelectFoundation"],"line":217,"updatePoint":{"line":217,"column":66},"code":"  it(`#handleMenuClosed removes ${cssClasses.ACTIVATED} class name`, () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.handleMenuClosed();\n    checkNumTimesSpyCalledWithArgs(\n        mockAdapter.removeClass, [cssClasses.ACTIVATED], 1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleMenuClosed sets isMenuOpen to false","suites":["MDCSelectFoundation"],"line":224,"updatePoint":{"line":224,"column":48},"code":"  it('#handleMenuClosed sets isMenuOpen to false', () => {\n    const {foundation} = setupTest();\n    foundation.handleMenuClosed();\n    expect((foundation as any).isMenuOpen).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleMenuClosing set aria-expanded attribute to false","suites":["MDCSelectFoundation"],"line":230,"updatePoint":{"line":230,"column":61},"code":"  it('#handleMenuClosing set aria-expanded attribute to false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.handleMenuClosing();\n    expect(mockAdapter.setSelectAnchorAttr)\n        .toHaveBeenCalledWith('aria-expanded', 'false');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange calls adapter.floatLabel(true) when there is a value","suites":["MDCSelectFoundation"],"line":237,"updatePoint":{"line":237,"column":72},"code":"  it('#handleChange calls adapter.floatLabel(true) when there is a value',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       mockAdapter.floatLabel.calls.reset();\n       mockAdapter.getSelectedIndex.and.returnValue(1);\n\n       foundation.handleChange();\n       expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n       expect(mockAdapter.floatLabel).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange calls adapter.floatLabel(false) when there is no value and the select is not focused","suites":["MDCSelectFoundation"],"line":249,"updatePoint":{"line":249,"column":104},"code":"  it('#handleChange calls adapter.floatLabel(false) when there is no value and the select is not focused',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getSelectedIndex.and.returnValue(numbers.UNSET_INDEX);\n\n       foundation.handleChange();\n       expect(mockAdapter.floatLabel).toHaveBeenCalledWith(false);\n       expect(mockAdapter.floatLabel).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange does not call adapter.floatLabel(false) when there is no value if the select is focused","suites":["MDCSelectFoundation"],"line":259,"updatePoint":{"line":259,"column":107},"code":"  it('#handleChange does not call adapter.floatLabel(false) when there is no value if the select is focused',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getSelectedIndex.and.returnValue(numbers.UNSET_INDEX);\n       mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n\n       foundation.handleChange();\n       expect(mockAdapter.floatLabel).not.toHaveBeenCalledWith(false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange does not call adapter.floatLabel() when no label is present","suites":["MDCSelectFoundation"],"line":269,"updatePoint":{"line":269,"column":79},"code":"  it('#handleChange does not call adapter.floatLabel() when no label is present',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasLabel.and.returnValue(false);\n\n       foundation.handleChange();\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange calls foundation.notchOutline(true) when there is a value","suites":["MDCSelectFoundation"],"line":279,"updatePoint":{"line":279,"column":77},"code":"  it('#handleChange calls foundation.notchOutline(true) when there is a value',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getSelectedIndex.and.returnValue(1);\n       foundation.init();\n       foundation.notchOutline = jasmine.createSpy('');\n\n       foundation.handleChange();\n       expect(foundation.notchOutline).toHaveBeenCalledWith(true);\n       expect(foundation.notchOutline).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange calls foundation.notchOutline(false) when there is no value","suites":["MDCSelectFoundation"],"line":291,"updatePoint":{"line":291,"column":79},"code":"  it('#handleChange calls foundation.notchOutline(false) when there is no value',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.notchOutline = jasmine.createSpy('');\n       mockAdapter.getSelectedIndex.and.returnValue(numbers.UNSET_INDEX);\n\n       foundation.handleChange();\n       expect(foundation.notchOutline).toHaveBeenCalledWith(false);\n       expect(foundation.notchOutline).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange does not call foundation.notchOutline() when there is no label","suites":["MDCSelectFoundation"],"line":302,"updatePoint":{"line":302,"column":82},"code":"  it('#handleChange does not call foundation.notchOutline() when there is no label',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.notchOutline = jasmine.createSpy('');\n       mockAdapter.hasLabel.and.returnValue(false);\n\n       foundation.handleChange();\n       expect(foundation.notchOutline)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleChange calls adapter.notifyChange()","suites":["MDCSelectFoundation"],"line":313,"updatePoint":{"line":313,"column":48},"code":"  it('#handleChange calls adapter.notifyChange()', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.handleChange();\n    expect(mockAdapter.notifyChange).toHaveBeenCalledWith(jasmine.anything());\n    expect(mockAdapter.notifyChange).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleFocus calls foundation.layout()","suites":["MDCSelectFoundation"],"line":321,"updatePoint":{"line":321,"column":44},"code":"  it('#handleFocus calls foundation.layout()', () => {\n    const {foundation} = setupTest();\n    foundation.layout = jasmine.createSpy('layout');\n    foundation.handleFocus();\n    expect(foundation.layout).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleFocus calls adapter.activateBottomLine()","suites":["MDCSelectFoundation"],"line":328,"updatePoint":{"line":328,"column":53},"code":"  it('#handleFocus calls adapter.activateBottomLine()', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.handleFocus();\n    expect(mockAdapter.activateBottomLine).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleFocus calls adapter.activateBottomLine() if isMenuOpen=true","suites":["MDCSelectFoundation"],"line":334,"updatePoint":{"line":334,"column":72},"code":"  it('#handleFocus calls adapter.activateBottomLine() if isMenuOpen=true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       (foundation as any).isMenuOpen = true;\n       foundation.handleFocus();\n       expect(mockAdapter.activateBottomLine).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleBlur calls foundation.layout()","suites":["MDCSelectFoundation"],"line":342,"updatePoint":{"line":342,"column":43},"code":"  it('#handleBlur calls foundation.layout()', () => {\n    const {foundation} = setupTest();\n    (foundation as any).layout = jasmine.createSpy('');\n    foundation.handleBlur();\n    expect((foundation as any).layout).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleBlur calls adapter.deactivateBottomLine()","suites":["MDCSelectFoundation"],"line":349,"updatePoint":{"line":349,"column":54},"code":"  it('#handleBlur calls adapter.deactivateBottomLine()', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.handleBlur();\n    expect(mockAdapter.deactivateBottomLine).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleBlur does not call deactivateBottomLine if isMenuOpen=true","suites":["MDCSelectFoundation"],"line":355,"updatePoint":{"line":355,"column":71},"code":"  it('#handleBlur does not call deactivateBottomLine if isMenuOpen=true',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       (foundation as any).isMenuOpen = true;\n       foundation.handleBlur();\n       expect(mockAdapter.deactivateBottomLine).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleBlur calls helperText.setValidity(true) if menu is not open","suites":["MDCSelectFoundation"],"line":363,"updatePoint":{"line":363,"column":72},"code":"  it('#handleBlur calls helperText.setValidity(true) if menu is not open',\n     () => {\n       const hasIcon = true;\n       const hasHelperText = true;\n       const {foundation, mockAdapter, helperText} =\n           setupTest(hasIcon, hasHelperText);\n       mockAdapter.hasClass.withArgs(cssClasses.REQUIRED).and.returnValue(true);\n       mockAdapter.getSelectedIndex.and.returnValue(0);\n       foundation.init();\n       foundation.handleBlur();\n       expect(helperText.setValidity).toHaveBeenCalledWith(true);\n       // once during init, once during blur\n       expect(helperText.setValidity).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#openMenu opens the menu","suites":["MDCSelectFoundation"],"line":378,"updatePoint":{"line":378,"column":30},"code":"  it('#openMenu opens the menu', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.openMenu();\n    expect(mockAdapter.openMenu).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#openMenu sets aria-expanded","suites":["MDCSelectFoundation"],"line":384,"updatePoint":{"line":384,"column":34},"code":"  it('#openMenu sets aria-expanded', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.openMenu();\n    expect(mockAdapter.setSelectAnchorAttr)\n        .toHaveBeenCalledWith('aria-expanded', 'true');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#openMenu adds activated class","suites":["MDCSelectFoundation"],"line":391,"updatePoint":{"line":391,"column":36},"code":"  it('#openMenu adds activated class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.openMenu();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.ACTIVATED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleClick closes menu if isMenuOpen=true","suites":["MDCSelectFoundation"],"line":397,"updatePoint":{"line":397,"column":49},"code":"  it('#handleClick closes menu if isMenuOpen=true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    (foundation as any).isMenuOpen = true;\n    foundation.handleClick(0);\n    expect(mockAdapter.closeMenu).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleClick does nothing if disabled","suites":["MDCSelectFoundation"],"line":404,"updatePoint":{"line":404,"column":43},"code":"  it('#handleClick does nothing if disabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation['disabled'] = true;\n    foundation.handleClick(0);\n    expect(mockAdapter.setRippleCenter).not.toHaveBeenCalled();\n    expect(mockAdapter.addClass).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleClick debounces clicks","suites":["MDCSelectFoundation"],"line":412,"updatePoint":{"line":412,"column":35},"code":"  it('#handleClick debounces clicks', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.handleClick(0);\n    foundation['isMenuOpen'] = false;\n    foundation.handleClick(0);\n    expect(mockAdapter.openMenu).toHaveBeenCalledTimes(1);\n\n    foundation['isMenuOpen'] = false;\n    jasmine.clock().tick(numbers.CLICK_DEBOUNCE_TIMEOUT_MS);\n    foundation.handleClick(0);\n    expect(mockAdapter.openMenu).toHaveBeenCalledTimes(2);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleClick sets the ripple center if isMenuOpen=false","suites":["MDCSelectFoundation"],"line":425,"updatePoint":{"line":425,"column":61},"code":"  it('#handleClick sets the ripple center if isMenuOpen=false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    (foundation as any).isMenuOpen = false;\n    foundation.handleClick(0);\n    expect(mockAdapter.setRippleCenter).toHaveBeenCalledWith(0);\n    expect(mockAdapter.setRippleCenter).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleClick opens the menu if the select is focused and isMenuOpen=false","suites":["MDCSelectFoundation"],"line":433,"updatePoint":{"line":433,"column":79},"code":"  it('#handleClick opens the menu if the select is focused and isMenuOpen=false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n       (foundation as any).isMenuOpen = false;\n       foundation.handleClick(0);\n       expect(mockAdapter.openMenu).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleClick sets the aria-expanded","suites":["MDCSelectFoundation"],"line":442,"updatePoint":{"line":442,"column":41},"code":"  it('#handleClick sets the aria-expanded', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.handleClick(0);\n    expect(mockAdapter.setSelectAnchorAttr)\n        .toHaveBeenCalledWith('aria-expanded', 'true');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleClick adds activated class if isMenuOpen=false","suites":["MDCSelectFoundation"],"line":449,"updatePoint":{"line":449,"column":59},"code":"  it('#handleClick adds activated class if isMenuOpen=false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    (foundation as any).isMenuOpen = false;\n    foundation.handleClick(0);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.ACTIVATED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleKeydown calls adapter.openMenu if valid keys are pressed, menu is not open and select is focused","suites":["MDCSelectFoundation"],"line":456,"updatePoint":{"line":456,"column":109},"code":"  it('#handleKeydown calls adapter.openMenu if valid keys are pressed, menu is not open and select is focused',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const preventDefault = jasmine.createSpy('');\n       const event = {key: 'Enter', preventDefault} as any;\n       mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n       foundation.handleKeydown(event);\n       event.key = 'Spacebar';\n       (foundation as any).isMenuOpen = false;\n       foundation.handleKeydown(event);\n       event.key = 'ArrowUp';\n       (foundation as any).isMenuOpen = false;\n       foundation.handleKeydown(event);\n       event.key = 'ArrowDown';\n       (foundation as any).isMenuOpen = false;\n       foundation.handleKeydown(event);\n       event.key = '';\n       event.keyCode = 13;  // Enter\n       (foundation as any).isMenuOpen = false;\n       foundation.handleKeydown(event);\n       event.keyCode = 32;  // Space\n       (foundation as any).isMenuOpen = false;\n       foundation.handleKeydown(event);\n       event.keyCode = 38;  // Up\n       (foundation as any).isMenuOpen = false;\n       foundation.handleKeydown(event);\n       event.keyCode = 40;  // Down\n       (foundation as any).isMenuOpen = false;\n       foundation.handleKeydown(event);\n       expect(mockAdapter.openMenu).toHaveBeenCalledTimes(8);\n\n       checkNumTimesSpyCalledWithArgs(\n           mockAdapter.addClass, [cssClasses.ACTIVATED], 8);\n       checkNumTimesSpyCalledWithArgs(\n           mockAdapter.setSelectAnchorAttr, ['aria-expanded', 'true'], 8);\n       expect(preventDefault).toHaveBeenCalledTimes(8);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleKeydown does not call adapter.openMenu if Enter/Space key is pressed, and select is not focused","suites":["MDCSelectFoundation"],"line":494,"updatePoint":{"line":494,"column":108},"code":"  it('#handleKeydown does not call adapter.openMenu if Enter/Space key is pressed, and select is not focused',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const preventDefault = jasmine.createSpy('');\n       const event = {key: 'Enter', preventDefault} as any;\n       mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(false);\n       foundation.handleKeydown(event);\n       event.key = 'Spacebar';\n       foundation.handleKeydown(event);\n       event.key = 'ArrowUp';\n       foundation.handleKeydown(event);\n       event.key = 'ArrowDown';\n       foundation.handleKeydown(event);\n       event.key = '';\n       event.keyCode = 13;  // Enter\n       foundation.handleKeydown(event);\n       event.keyCode = 32;  // Space\n       foundation.handleKeydown(event);\n       event.keyCode = 38;  // Up\n       foundation.handleKeydown(event);\n       event.keyCode = 40;  // Down\n       foundation.handleKeydown(event);\n       expect(mockAdapter.openMenu).not.toHaveBeenCalled();\n       expect(preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleKeydown does not call adapter.openMenu if menu is opened","suites":["MDCSelectFoundation"],"line":520,"updatePoint":{"line":520,"column":69},"code":"  it('#handleKeydown does not call adapter.openMenu if menu is opened', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const preventDefault = jasmine.createSpy('');\n    const event = {key: 'Enter', preventDefault} as any;\n    (foundation as any).isMenuOpen = true;\n    foundation.handleKeydown(event);\n    event.key = 'Spacebar';\n    foundation.handleKeydown(event);\n    event.key = 'ArrowUp';\n    foundation.handleKeydown(event);\n    event.key = 'ArrowDown';\n    foundation.handleKeydown(event);\n    event.key = '';\n    event.keyCode = 13;  // Enter\n    foundation.handleKeydown(event);\n    event.keyCode = 32;  // Space\n    foundation.handleKeydown(event);\n    event.keyCode = 38;  // Up\n    foundation.handleKeydown(event);\n    event.keyCode = 40;  // Down\n    foundation.handleKeydown(event);\n    expect(mockAdapter.openMenu).not.toHaveBeenCalled();\n    expect(preventDefault).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleKeydown with alphanumeric characters calls adapter.getTypeaheadNextIndex","suites":["MDCSelectFoundation"],"line":545,"updatePoint":{"line":545,"column":85},"code":"  it('#handleKeydown with alphanumeric characters calls adapter.getTypeaheadNextIndex',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const preventDefault = jasmine.createSpy('');\n       const event = {key: 'a', preventDefault} as any;\n       mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n\n       foundation.handleKeydown(event);\n       event.key = 'Z';\n       foundation.handleKeydown(event);\n       event.key = '1';\n       foundation.handleKeydown(event);\n\n       expect(mockAdapter.typeaheadMatchItem).toHaveBeenCalledTimes(3);\n       expect(preventDefault).toHaveBeenCalledTimes(3);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleKeydown with modifier key + alpha character does not call adapter.getTypeaheadNextIndex","suites":["MDCSelectFoundation"],"line":562,"updatePoint":{"line":562,"column":100},"code":"  it('#handleKeydown with modifier key + alpha character does not call adapter.getTypeaheadNextIndex',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const preventDefault = jasmine.createSpy('');\n       const event =\n           {key: 'a', preventDefault, ctrlKey: true, metaKey: false} as any;\n       mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n\n       foundation.handleKeydown(event);\n       event.key = 'Z';\n       event.metaKey = true;\n       event.ctrlKey = false;\n       foundation.handleKeydown(event);\n\n       expect(mockAdapter.typeaheadMatchItem).not.toHaveBeenCalled()\n       expect(preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#handleKeydown sets selected index based on typeahead results","suites":["MDCSelectFoundation"],"line":594,"updatePoint":{"line":594,"column":67},"code":"  it('#handleKeydown sets selected index based on typeahead results', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const preventDefault = jasmine.createSpy('');\n    const event = {key: 'a', preventDefault} as any;\n    spyOn(foundation, 'setSelectedIndex');\n\n    mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n    mockAdapter.typeaheadMatchItem.and.returnValue(2);\n\n    foundation.handleKeydown(event);\n\n    expect(foundation.setSelectedIndex).toHaveBeenCalledWith(2);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layout notches outline and floats label if unfocused and value is nonempty","suites":["MDCSelectFoundation"],"line":608,"updatePoint":{"line":608,"column":81},"code":"  it('#layout notches outline and floats label if unfocused and value is nonempty',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       foundation.notchOutline = jasmine.createSpy('');\n       mockAdapter.getSelectedIndex.and.returnValue(1);\n\n       foundation.layout();\n       expect(foundation.notchOutline).toHaveBeenCalledWith(true);\n       expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layout un-notches outline and un-floats label if unfocused and value is empty","suites":["MDCSelectFoundation"],"line":620,"updatePoint":{"line":620,"column":84},"code":"  it('#layout un-notches outline and un-floats label if unfocused and value is empty',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.notchOutline = jasmine.createSpy('');\n       foundation.layout();\n       expect(foundation.notchOutline).toHaveBeenCalledWith(false);\n       expect(mockAdapter.floatLabel).toHaveBeenCalledWith(false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layout notches outline and floats label if select is focused","suites":["MDCSelectFoundation"],"line":629,"updatePoint":{"line":629,"column":67},"code":"  it('#layout notches outline and floats label if select is focused', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.notchOutline = jasmine.createSpy('');\n    mockAdapter.hasClass.withArgs(cssClasses.FOCUSED).and.returnValue(true);\n    foundation.layout();\n    expect(foundation.notchOutline).toHaveBeenCalledWith(true);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layout does not notch outline nor floats label if label does not exist","suites":["MDCSelectFoundation"],"line":638,"updatePoint":{"line":638,"column":77},"code":"  it('#layout does not notch outline nor floats label if label does not exist',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.notchOutline = jasmine.createSpy('');\n       mockAdapter.hasLabel.and.returnValue(false);\n       foundation.layout();\n       expect(foundation.notchOutline).not.toHaveBeenCalled();\n       expect(mockAdapter.floatLabel).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layout sets label as required if select is required","suites":["MDCSelectFoundation"],"line":648,"updatePoint":{"line":648,"column":58},"code":"  it('#layout sets label as required if select is required', () => {\n     const {foundation, mockAdapter} = setupTest();\n     mockAdapter.hasLabel.and.returnValue(true);\n     mockAdapter.hasClass.withArgs(cssClasses.REQUIRED).and.returnValue(true);\n     foundation.layout();\n     expect(mockAdapter.setLabelRequired).toHaveBeenCalledWith(true);\n   });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layoutOptions refetches menu item values to cache","suites":["MDCSelectFoundation"],"line":656,"updatePoint":{"line":656,"column":56},"code":"  it('#layoutOptions refetches menu item values to cache', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.layoutOptions();\n    expect(mockAdapter.getMenuItemValues).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layoutOptions reinitializes selected nonempty value","suites":["MDCSelectFoundation"],"line":662,"updatePoint":{"line":662,"column":58},"code":"  it('#layoutOptions reinitializes selected nonempty value', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    mockAdapter.getMenuItemCount.and.returnValue(3);\n    mockAdapter.getMenuItemValues.and.returnValue(['zero', 'one', 'two']);\n    mockAdapter.getSelectedIndex.and.returnValue(2);\n\n    foundation.layoutOptions();\n    expect(mockAdapter.setSelectedIndex).toHaveBeenCalledWith(2);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#layoutOptions reinitializes selected empty value","suites":["MDCSelectFoundation"],"line":673,"updatePoint":{"line":673,"column":55},"code":"  it('#layoutOptions reinitializes selected empty value', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    mockAdapter.getMenuItemCount.and.returnValue(3);\n    mockAdapter.getMenuItemValues.and.returnValue(['', 'one', 'two']);\n    mockAdapter.getSelectedIndex.and.returnValue(0);\n\n    foundation.layoutOptions();\n    expect(mockAdapter.setSelectedIndex).toHaveBeenCalledWith(0);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setLeadingIconAriaLabel sets the aria-label of the leading icon element","suites":["MDCSelectFoundation"],"line":684,"updatePoint":{"line":684,"column":78},"code":"  it('#setLeadingIconAriaLabel sets the aria-label of the leading icon element',\n     () => {\n       const {foundation, leadingIcon} = setupTest();\n       foundation.setLeadingIconAriaLabel('foo');\n       expect(leadingIcon.setAriaLabel).toHaveBeenCalledWith('foo');\n       expect(leadingIcon.setAriaLabel).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setLeadingIconContent sets the content of the leading icon element","suites":["MDCSelectFoundation"],"line":692,"updatePoint":{"line":692,"column":73},"code":"  it('#setLeadingIconContent sets the content of the leading icon element',\n     () => {\n       const {foundation, leadingIcon} = setupTest();\n       foundation.setLeadingIconContent('foo');\n       expect(leadingIcon.setContent).toHaveBeenCalledWith('foo');\n       expect(leadingIcon.setContent).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setLeadingIconAriaLabel does nothing if the leading icon element is undefined","suites":["MDCSelectFoundation"],"line":700,"updatePoint":{"line":700,"column":84},"code":"  it('#setLeadingIconAriaLabel does nothing if the leading icon element is undefined',\n     () => {\n       const hasLeadingIcon = false;\n       const {foundation, leadingIcon} = setupTest(hasLeadingIcon);\n       expect(() => foundation.setLeadingIconAriaLabel).not.toThrow();\n       expect(leadingIcon.setAriaLabel).not.toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setLeadingIconContent does nothing if the leading icon element is undefined","suites":["MDCSelectFoundation"],"line":708,"updatePoint":{"line":708,"column":82},"code":"  it('#setLeadingIconContent does nothing if the leading icon element is undefined',\n     () => {\n       const hasLeadingIcon = false;\n       const {foundation, leadingIcon} = setupTest(hasLeadingIcon);\n       expect(() => foundation.setLeadingIconContent).not.toThrow();\n       expect(leadingIcon.setContent).not.toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setHelperTextContent sets the content of the helper text element","suites":["MDCSelectFoundation"],"line":716,"updatePoint":{"line":716,"column":71},"code":"  it('#setHelperTextContent sets the content of the helper text element',\n     () => {\n       const hasIcon = false;\n       const hasHelperText = true;\n       const {foundation, helperText} = setupTest(hasIcon, hasHelperText);\n       foundation.setHelperTextContent('foo');\n       expect(helperText.setContent).toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setHelperTextContent does not throw an error if there is no helperText element","suites":["MDCSelectFoundation"],"line":725,"updatePoint":{"line":725,"column":85},"code":"  it('#setHelperTextContent does not throw an error if there is no helperText element',\n     () => {\n       const hasIcon = false;\n       const hasHelperText = false;\n       const {foundation} = setupTest(hasIcon, hasHelperText);\n       expect(() => foundation.setHelperTextContent).not.toThrow();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setSelectedIndex","suites":["MDCSelectFoundation"],"line":733,"updatePoint":{"line":733,"column":23},"code":"  it('#setSelectedIndex', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.setSelectedIndex(1);\n    expect(mockAdapter.setSelectedIndex).toHaveBeenCalledWith(1);\n\n    foundation.setSelectedIndex(0);\n    // We intentionally call this twice, expecting notifyChange to be called\n    // only once for these two calls.\n    foundation.setSelectedIndex(0);\n    expect(mockAdapter.setSelectedIndex).toHaveBeenCalledWith(0);\n\n    foundation.setSelectedIndex(-1);\n    expect(mockAdapter.setSelectedIndex).toHaveBeenCalledWith(-1);\n\n    expect(mockAdapter.notifyChange).toHaveBeenCalledTimes(3);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setValue","suites":["MDCSelectFoundation"],"line":751,"updatePoint":{"line":751,"column":15},"code":"  it('#setValue', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.setValue('bar');\n    expect(mockAdapter.setSelectedIndex).toHaveBeenCalledWith(1);\n    expect(mockAdapter.notifyChange).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setValue with skipNotify true does not call notifyChange","suites":["MDCSelectFoundation"],"line":759,"updatePoint":{"line":759,"column":63},"code":"  it('#setValue with skipNotify true does not call notifyChange', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.setValue('bar', /** skipNotify */ true);\n    expect(mockAdapter.setSelectedIndex).toHaveBeenCalledWith(1);\n    expect(mockAdapter.notifyChange).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setValid true sets aria-describedby if validation helper text is shown","suites":["MDCSelectFoundation"],"line":767,"updatePoint":{"line":767,"column":77},"code":"  it('#setValid true sets aria-describedby if validation helper text is shown',\n     () => {\n       const hasIcon = false;\n       const hasHelperText = true;\n       const {foundation, mockAdapter, helperText} =\n           setupTest(hasIcon, hasHelperText);\n\n       const mockId = 'foobarbazcool';\n       helperText.getId.and.returnValue(mockId);\n       helperText.isVisible.and.returnValue(true);\n\n       foundation.setValid(false);\n       expect(mockAdapter.setSelectAnchorAttr)\n           .toHaveBeenCalledWith(strings.ARIA_DESCRIBEDBY, mockId);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setValid true sets aria-invalid to false and removes invalid classes","suites":["MDCSelectFoundation"],"line":783,"updatePoint":{"line":783,"column":75},"code":"  it('#setValid true sets aria-invalid to false and removes invalid classes',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setValid(true);\n       expect(mockAdapter.setSelectAnchorAttr)\n           .toHaveBeenCalledWith('aria-invalid', 'false');\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n       expect(mockAdapter.removeMenuClass)\n           .toHaveBeenCalledWith(cssClasses.MENU_INVALID);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setValid false sets aria-invalid to true and adds invalid class","suites":["MDCSelectFoundation"],"line":794,"updatePoint":{"line":794,"column":70},"code":"  it('#setValid false sets aria-invalid to true and adds invalid class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setValid(false);\n    expect(mockAdapter.setSelectAnchorAttr)\n        .toHaveBeenCalledWith('aria-invalid', 'true');\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(mockAdapter.addMenuClass)\n        .toHaveBeenCalledWith(cssClasses.MENU_INVALID);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setValid false removes aria-describedby if validation helper text is hidden","suites":["MDCSelectFoundation"],"line":804,"updatePoint":{"line":804,"column":82},"code":"  it('#setValid false removes aria-describedby if validation helper text is hidden',\n     () => {\n       const hasIcon = false;\n       const hasHelperText = true;\n       const {foundation, mockAdapter, helperText} =\n           setupTest(hasIcon, hasHelperText);\n\n       helperText.isVisible.and.returnValue(false);\n\n       foundation.setValid(true);\n       expect(mockAdapter.removeSelectAnchorAttr)\n           .toHaveBeenCalledWith(strings.ARIA_DESCRIBEDBY);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#isValid returns false if using default validity check and no index is selected","suites":["MDCSelectFoundation"],"line":818,"updatePoint":{"line":818,"column":85},"code":"  it('#isValid returns false if using default validity check and no index is selected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.REQUIRED).and.returnValue(true);\n       mockAdapter.hasClass.withArgs(cssClasses.DISABLED)\n           .and.returnValue(false);\n       mockAdapter.getSelectedIndex.and.returnValue(-1);\n       foundation.init();\n\n       expect(foundation.isValid()).toBe(false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#isValid returns true if using default validity check and an index is selected that has value","suites":["MDCSelectFoundation"],"line":844,"updatePoint":{"line":844,"column":99},"code":"  it('#isValid returns true if using default validity check and an index is selected that has value',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       mockAdapter.hasClass.withArgs(cssClasses.REQUIRED).and.returnValue(true);\n       mockAdapter.hasClass.withArgs(cssClasses.DISABLED)\n           .and.returnValue(false);\n       mockAdapter.getSelectedIndex.and.returnValue(0);\n       foundation.init();\n\n       expect(foundation.isValid()).toBe(true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#getUseDefaultValidation returns correct value","suites":["MDCSelectFoundation"],"line":857,"updatePoint":{"line":857,"column":52},"code":"  it('#getUseDefaultValidation returns correct value', () => {\n    const {foundation} = setupTest();\n    foundation.setUseDefaultValidation(true);\n    expect(foundation.getUseDefaultValidation()).toBeTrue();\n    foundation.setUseDefaultValidation(false);\n    expect(foundation.getUseDefaultValidation()).toBeFalse();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#isValid returns false if using custom false validity","suites":["MDCSelectFoundation"],"line":865,"updatePoint":{"line":865,"column":59},"code":"  it('#isValid returns false if using custom false validity', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.withArgs(cssClasses.REQUIRED).and.returnValue(false);\n    mockAdapter.hasClass.withArgs(cssClasses.DISABLED).and.returnValue(false);\n\n    foundation.setUseDefaultValidation(false);\n    foundation.setValid(false);\n    mockAdapter.getSelectedIndex.and.returnValue(2);\n\n    expect(foundation.isValid()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#isValid returns true if using custom true validity with unset index","suites":["MDCSelectFoundation"],"line":877,"updatePoint":{"line":877,"column":74},"code":"  it('#isValid returns true if using custom true validity with unset index',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.withArgs(cssClasses.REQUIRED).and.returnValue(true);\n       mockAdapter.hasClass.withArgs(cssClasses.DISABLED)\n           .and.returnValue(false);\n\n       foundation.setUseDefaultValidation(false);\n       foundation.setValid(true);\n       mockAdapter.getSelectedIndex.and.returnValue(-1);\n\n       expect(foundation.isValid()).toBe(true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setRequired adds/removes ${cssClasses.REQUIRED} class name","suites":["MDCSelectFoundation"],"line":906,"updatePoint":{"line":906,"column":65},"code":"  it('#setRequired adds/removes ${cssClasses.REQUIRED} class name', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setRequired(true);\n    checkNumTimesSpyCalledWithArgs(\n        mockAdapter.addClass, [cssClasses.REQUIRED], 1);\n    foundation.setRequired(false);\n    checkNumTimesSpyCalledWithArgs(\n        mockAdapter.removeClass, [cssClasses.REQUIRED], 1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setRequired sets aria-required through adapter","suites":["MDCSelectFoundation"],"line":916,"updatePoint":{"line":916,"column":53},"code":"  it('#setRequired sets aria-required through adapter', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setRequired(true);\n    expect(mockAdapter.setSelectAnchorAttr)\n        .toHaveBeenCalledWith('aria-required', 'true');\n    foundation.setRequired(false);\n    expect(mockAdapter.setSelectAnchorAttr)\n        .toHaveBeenCalledWith('aria-required', 'false');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#setRequired sets label as required","suites":["MDCSelectFoundation"],"line":926,"updatePoint":{"line":926,"column":41},"code":"  it('#setRequired sets label as required', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setRequired(true);\n    expect(mockAdapter.setLabelRequired).toHaveBeenCalledWith(true);\n    mockAdapter.setLabelRequired.calls.reset();\n    foundation.setRequired(false);\n    expect(mockAdapter.setLabelRequired).toHaveBeenCalledWith(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#getRequired returns true if aria-required is true","suites":["MDCSelectFoundation"],"line":935,"updatePoint":{"line":935,"column":56},"code":"  it('#getRequired returns true if aria-required is true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getSelectAnchorAttr.withArgs('aria-required')\n        .and.returnValue('true');\n    expect(foundation.getRequired()).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#getRequired returns false if aria-required is false","suites":["MDCSelectFoundation"],"line":942,"updatePoint":{"line":942,"column":58},"code":"  it('#getRequired returns false if aria-required is false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getSelectAnchorAttr.withArgs('aria-required')\n        .and.returnValue('false');\n    expect(foundation.getRequired()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#init calls adapter methods","suites":["MDCSelectFoundation"],"line":949,"updatePoint":{"line":949,"column":33},"code":"  it('#init calls adapter methods', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getAnchorElement.and.returnValue(true);\n    foundation.init();\n    expect(mockAdapter.setMenuWrapFocus).toHaveBeenCalledWith(false);\n    expect(mockAdapter.setMenuAnchorElement)\n        .toHaveBeenCalledWith(jasmine.anything());\n    expect(mockAdapter.setMenuAnchorCorner)\n        .toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#init emits no change events when value is preselected","suites":["MDCSelectFoundation"],"line":960,"updatePoint":{"line":960,"column":60},"code":"  it('#init emits no change events when value is preselected', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getSelectedIndex.and.returnValue(1);\n    foundation.init();\n    expect(mockAdapter.notifyChange).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"#init computes whether to notch outline exactly once when value is preselected","suites":["MDCSelectFoundation"],"line":967,"updatePoint":{"line":967,"column":84},"code":"  it('#init computes whether to notch outline exactly once when value is preselected',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.notchOutline = jasmine.createSpy('notchOutline');\n       mockAdapter.getSelectedIndex.and.returnValue(1);\n       foundation.init();\n       expect(foundation.notchOutline).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-select/test"},{"name":"down event sets the slider value based on x coordinate","suites":["MDCSlider","slider events for  event types"],"line":87,"updatePoint":{"line":87,"column":64},"code":"      it('down event sets the slider value based on x coordinate', () => {\n        const event = createEventFrom(eventType, 'down', {clientX: 50});\n        root.dispatchEvent(event);\n        jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n        expect(thumb.style.transform).toBe('translateX(50px)');\n        expect(trackActive!.style.transform).toBe('scaleX(0.5)');\n      });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"move event after down event sets the slider value based on x coordinate","suites":["MDCSlider","slider events for  event types"],"line":95,"updatePoint":{"line":95,"column":81},"code":"      it('move event after down event sets the slider value based on x coordinate',\n         () => {\n           const downEvent = createEventFrom(eventType, 'down', {clientX: 0});\n           root.dispatchEvent(downEvent);\n           jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n           expect(thumb.style.transform).toBe('translateX(0px)');\n           expect(trackActive!.style.transform).toBe('scaleX(0)');\n\n           const moveEvent = createEventFrom(eventType, 'move', {clientX: 50});\n           const el = eventType === 'pointer' ? root : document.body;\n           el.dispatchEvent(moveEvent);\n           jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n           expect(thumb.style.transform).toBe('translateX(50px)');\n           expect(trackActive!.style.transform).toBe('scaleX(0.5)');\n         });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"move event after up event doesn't update slider value","suites":["MDCSlider","slider events for  event types"],"line":111,"updatePoint":{"line":111,"column":64},"code":"      it('move event after up event doesn\\'t update slider value', () => {\n        const downEvent = createEventFrom(eventType, 'down', {clientX: 0});\n        root.dispatchEvent(downEvent);\n        jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n        expect(thumb.style.transform).toBe('translateX(0px)');\n        expect(trackActive!.style.transform).toBe('scaleX(0)');\n\n        const upEvent = createEventFrom(eventType, 'up', {clientX: 0});\n        const upEl = eventType === 'pointer' ? root : document.body;\n        upEl.dispatchEvent(upEvent);\n\n        const moveEvent = createEventFrom(eventType, 'move', {clientX: 0});\n        const moveEl = eventType === 'pointer' ? root : document.body;\n        moveEl.dispatchEvent(moveEvent);\n        jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n        expect(thumb.style.transform).toBe('translateX(0px)');\n        expect(trackActive!.style.transform).toBe('scaleX(0)');\n      });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"Event listeners are destroyed when component is destroyed.","suites":["MDCSlider","slider events for  event types"],"line":130,"updatePoint":{"line":130,"column":68},"code":"      it('Event listeners are destroyed when component is destroyed.', () => {\n        spyOn(root, 'removeEventListener').and.callThrough();\n        spyOn(thumb, 'removeEventListener').and.callThrough();\n\n        component.destroy();\n\n        if (eventType === 'pointer') {\n          expect(root.removeEventListener)\n              .toHaveBeenCalledWith(\n                  'pointerdown', jasmine.any(Function), undefined);\n          expect(root.removeEventListener)\n              .toHaveBeenCalledWith(\n                  'pointerup', jasmine.any(Function), undefined);\n        } else {\n          expect(root.removeEventListener)\n              .toHaveBeenCalledWith(\n                  'mousedown', jasmine.any(Function), undefined);\n          expect(root.removeEventListener)\n              .toHaveBeenCalledWith(\n                  'touchstart', jasmine.any(Function), undefined);\n        }\n\n        const thumbEvents = ['mouseenter', 'mouseleave'];\n        for (const event of thumbEvents) {\n          expect(thumb.removeEventListener)\n              .toHaveBeenCalledWith(event, jasmine.any(Function));\n        }\n      });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"press + move on start thumb updates start thumb value","suites":["MDCSlider","range slider"],"line":190,"updatePoint":{"line":190,"column":61},"code":"    it('press + move on start thumb updates start thumb value', () => {\n      const downEvent =\n          createEventFrom('pointer', 'down', {clientX: initialValueStart});\n      root.dispatchEvent(downEvent);\n      jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n      expect(startThumb.style.transform)\n          .toBe(`translateX(${initialValueStart}px)`);\n\n      const moveEvent = createEventFrom('pointer', 'move', {clientX: 50});\n      root.dispatchEvent(moveEvent);\n      jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n      expect(startThumb.style.transform).toBe('translateX(50px)');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"press + move on end thumb updates end thumb value","suites":["MDCSlider","range slider"],"line":204,"updatePoint":{"line":204,"column":57},"code":"    it('press + move on end thumb updates end thumb value', () => {\n      const downEvent =\n          createEventFrom('pointer', 'down', {clientX: initialValueEnd});\n      root.dispatchEvent(downEvent);\n      jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n      expect(endThumb.style.transform).toBe(`translateX(${initialValueEnd}px)`);\n\n      const moveEvent = createEventFrom('pointer', 'move', {clientX: 40});\n      root.dispatchEvent(moveEvent);\n      jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n      expect(endThumb.style.transform).toBe('translateX(40px)');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"down event between min and start thumb updates start thumb value","suites":["MDCSlider","range slider"],"line":217,"updatePoint":{"line":217,"column":72},"code":"    it('down event between min and start thumb updates start thumb value',\n       () => {\n         const downEvent = createEventFrom(\n             'pointer', 'down', {clientX: initialValueStart - 10});\n         root.dispatchEvent(downEvent);\n         jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n         expect(startThumb.style.transform)\n             .toBe(`translateX(${initialValueStart - 10}px)`);\n         expect(endThumb.style.transform)\n             .toBe(`translateX(${initialValueEnd}px)`);\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"down event between end thumb and max updates end thumb value","suites":["MDCSlider","range slider"],"line":229,"updatePoint":{"line":229,"column":68},"code":"    it('down event between end thumb and max updates end thumb value', () => {\n      const downEvent =\n          createEventFrom('pointer', 'down', {clientX: initialValueEnd + 10});\n      root.dispatchEvent(downEvent);\n      jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n      expect(endThumb.style.transform)\n          .toBe(`translateX(${initialValueEnd + 10}px)`);\n      expect(startThumb.style.transform)\n          .toBe(`translateX(${initialValueStart}px)`);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"single point slider: updates value indicator after value update","suites":["MDCSlider","value indicator"],"line":242,"updatePoint":{"line":242,"column":71},"code":"    it('single point slider: updates value indicator after value update',\n       () => {\n         let thumb;\n         ({root, endThumb: thumb} =\n              setUpTest({isDiscrete: true, hasTickMarks: true, step: 10}));\n         expect(thumb.textContent!.trim()).not.toBe('70');\n\n         const downEvent = createEventFrom('pointer', 'down', {clientX: 65.3});\n         root.dispatchEvent(downEvent);\n         expect(thumb.textContent!.trim()).toBe('70');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: updates value indicator after value update","suites":["MDCSlider","value indicator"],"line":254,"updatePoint":{"line":254,"column":64},"code":"    it('range slider: updates value indicator after value update', () => {\n      let startThumb, endThumb;\n      const valueStart = 10;\n      const value = 40;\n      ({root, startThumb, endThumb} = setUpTest(\n           {isDiscrete: true, isRange: true, valueStart, value, step: 10}));\n\n      spyOn(startThumb as HTMLElement, 'getBoundingClientRect')\n          .and.returnValue({\n            left: valueStart - 3,\n            right: valueStart + 3,\n          } as DOMRect);\n      spyOn(endThumb, 'getBoundingClientRect').and.returnValue({\n        left: value - 3,\n        right: value + 3,\n      } as DOMRect);\n\n      expect(startThumb!.textContent!.trim()).not.toBe('0');\n      expect(endThumb.textContent!.trim()).not.toBe('90');\n\n      // Update start thumb value.\n      const downEventStart = createEventFrom('pointer', 'down', {clientX: 3});\n      root.dispatchEvent(downEventStart);\n      expect(startThumb!.textContent!.trim()).toBe('0');\n\n      // Update end thumb value.\n      const downEventEnd = createEventFrom('pointer', 'down', {clientX: 92});\n      root.dispatchEvent(downEventEnd);\n      expect(endThumb.textContent!.trim()).toBe('90');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"adds tick mark elements on component initialization","suites":["MDCSlider","tick marks"],"line":291,"updatePoint":{"line":291,"column":59},"code":"    it('adds tick mark elements on component initialization', () => {\n      const tickMarks =\n          root.querySelector(`.${cssClasses.TICK_MARKS_CONTAINER}`)!.children;\n      expect(tickMarks.length).toBe(11);\n      for (let i = 0; i < tickMarks.length; i++) {\n        const tickMarkClass = i === 0 ? cssClasses.TICK_MARK_ACTIVE :\n                                        cssClasses.TICK_MARK_INACTIVE;\n        expect(tickMarks[i].classList.contains(tickMarkClass)).toBe(true);\n      }\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates tick mark classes after slider update","suites":["MDCSlider","tick marks"],"line":302,"updatePoint":{"line":302,"column":53},"code":"    it('updates tick mark classes after slider update', () => {\n      // Sanity check that tick mark classes are as we expect on component init.\n      let tickMarks =\n          root.querySelector(`.${cssClasses.TICK_MARKS_CONTAINER}`)!.children;\n      expect(tickMarks.length).toBe(11);\n      for (let i = 0; i < tickMarks.length; i++) {\n        const tickMarkClass = i === 0 ? cssClasses.TICK_MARK_ACTIVE :\n                                        cssClasses.TICK_MARK_INACTIVE;\n        expect(tickMarks[i].classList.contains(tickMarkClass)).toBe(true);\n      }\n\n      const downEvent = createEventFrom('pointer', 'down', {clientX: 55.3});\n      root.dispatchEvent(downEvent);\n      jasmine.clock().tick(1);  // Tick for RAF from slider UI updates.\n\n      tickMarks =\n          root.querySelector(`.${cssClasses.TICK_MARKS_CONTAINER}`)!.children;\n      expect(tickMarks.length).toBe(11);\n      for (let i = 0; i < tickMarks.length; i++) {\n        // 55.3 rounds up to 60, since step value is 10.\n        const tickMarkClass = i <= 6 ? cssClasses.TICK_MARK_ACTIVE :\n                                       cssClasses.TICK_MARK_INACTIVE;\n        expect(tickMarks[i].classList.contains(tickMarkClass)).toBe(true);\n      }\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates input value attribute and property on value update","suites":["MDCSlider","input synchronization: "],"line":352,"updatePoint":{"line":352,"column":66},"code":"    it('updates input value attribute and property on value update', () => {\n      ({component, startInput, endInput} = setUpTest({\n         isDiscrete: true,\n         valueStart: 10,\n         value: 50,\n         isRange: true,\n       }));\n\n      component.setValueStart(5);\n      expect(startInput!.value).toBe('5');\n      expect(startInput!.getAttribute(attributes.INPUT_VALUE)).toBe('5');\n      expect(endInput.getAttribute(attributes.INPUT_MIN)).toBe('5');\n\n      component.setValue(20);\n      expect(endInput.value).toBe('20');\n      expect(endInput.getAttribute(attributes.INPUT_VALUE)).toBe('20');\n      expect(startInput!.getAttribute(attributes.INPUT_MAX)).toBe('20');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"focuses input on thumb down event","suites":["MDCSlider","input synchronization: "],"line":371,"updatePoint":{"line":371,"column":41},"code":"    it('focuses input on thumb down event', () => {\n      ({root, endInput} = setUpTest({value: 30}));\n      const downEvent = createEventFrom('pointer', 'down', {clientX: 90});\n      root.dispatchEvent(downEvent);\n\n      expect(document.activeElement).toBe(endInput);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates disabled class when setting disabled state","suites":["MDCSlider","disabled state"],"line":383,"updatePoint":{"line":383,"column":58},"code":"    it('updates disabled class when setting disabled state', () => {\n      ({root, component} = setUpTest());\n      expect(root.classList.contains(cssClasses.DISABLED)).toBe(false);\n\n      component.setDisabled(true);\n      expect(component.getDisabled()).toBe(true);\n      expect(root.classList.contains(cssClasses.DISABLED)).toBe(true);\n\n      component.setDisabled(false);\n      expect(component.getDisabled()).toBe(false);\n      expect(root.classList.contains(cssClasses.DISABLED)).toBe(false);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates input attrs when setting disabled state","suites":["MDCSlider","disabled state"],"line":396,"updatePoint":{"line":396,"column":55},"code":"    it('updates input attrs when setting disabled state', () => {\n      ({root, component, endInput} = setUpTest());\n\n      component.setDisabled(true);\n      expect(endInput.getAttribute(attributes.INPUT_DISABLED)).toBe('');\n\n      component.setDisabled(false);\n      expect(endInput.getAttribute(attributes.INPUT_DISABLED)).toBe(null);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: updates inputs' attrs when setting disabled state","suites":["MDCSlider","disabled state"],"line":406,"updatePoint":{"line":406,"column":72},"code":"    it('range slider: updates inputs\\' attrs when setting disabled state',\n       () => {\n         ({root, component, startInput, endInput} = setUpTest({isRange: true}));\n\n         component.setDisabled(true);\n         expect(startInput!.getAttribute(attributes.INPUT_DISABLED)).toBe('');\n         expect(endInput.getAttribute(attributes.INPUT_DISABLED)).toBe('');\n\n         component.setDisabled(false);\n         expect(startInput!.getAttribute(attributes.INPUT_DISABLED)).toBe(null);\n         expect(endInput.getAttribute(attributes.INPUT_DISABLED)).toBe(null);\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"emits `change`/`input` events across an interaction","suites":["MDCSlider","change/input events"],"line":421,"updatePoint":{"line":421,"column":59},"code":"    it('emits `change`/`input` events across an interaction', () => {\n      ({root, component} = setUpTest({value: 25, isDiscrete: true}));\n      spyOn(component, 'emit');\n\n      const downEvent = createEventFrom('pointer', 'down', {clientX: 28});\n      root.dispatchEvent(downEvent);\n      expect(component.emit)\n          .toHaveBeenCalledWith(events.INPUT, {value: 28, thumb: Thumb.END});\n      expect(component.emit)\n          .not.toHaveBeenCalledWith(events.CHANGE, jasmine.any(Object));\n\n      const moveEvent = createEventFrom('pointer', 'move', {clientX: 48});\n      root.dispatchEvent(moveEvent);\n      expect(component.emit)\n          .toHaveBeenCalledWith(events.INPUT, {value: 48, thumb: Thumb.END});\n      expect(component.emit)\n          .not.toHaveBeenCalledWith(events.CHANGE, jasmine.any(Object));\n\n      root.dispatchEvent(createEventFrom('pointer', 'up', {clientX: 48}));\n      expect(component.emit)\n          .toHaveBeenCalledWith(events.CHANGE, {value: 48, thumb: Thumb.END});\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"single pointer slider: #getValue returns correct value","suites":["MDCSlider","#get/setValue, #get/setValueStart"],"line":446,"updatePoint":{"line":446,"column":62},"code":"    it('single pointer slider: #getValue returns correct value', () => {\n      ({component} = setUpTest({value: 25}));\n      expect(component.getValue()).toBe(25);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: #getValue/#getValueStart returns correct values","suites":["MDCSlider","#get/setValue, #get/setValueStart"],"line":451,"updatePoint":{"line":451,"column":69},"code":"    it('range slider: #getValue/#getValueStart returns correct values', () => {\n      ({component} = setUpTest({valueStart: 3, value: 25, isRange: true}));\n      expect(component.getValueStart()).toBe(3);\n      expect(component.getValue()).toBe(25);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"single pointer slider: #setValue moves thumb to correct position","suites":["MDCSlider","#get/setValue, #get/setValueStart"],"line":457,"updatePoint":{"line":457,"column":72},"code":"    it('single pointer slider: #setValue moves thumb to correct position',\n       () => {\n         let endThumb;\n         ({root, component, endThumb} =\n              setUpTest({value: 25, isDiscrete: true}));\n         component.setValue(75);\n\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(endThumb.style.transform).toBe(`translateX(75px)`);\n         expect(document.activeElement).not.toBe(endThumb);\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: #setValueStart/#setValue move thumbs to correct positions","suites":["MDCSlider","#get/setValue, #get/setValueStart"],"line":469,"updatePoint":{"line":469,"column":79},"code":"    it('range slider: #setValueStart/#setValue move thumbs to correct positions',\n       () => {\n         let startThumb, endThumb;\n         ({root, component, startThumb, endThumb} = setUpTest(\n              {valueStart: 20, value: 53, isDiscrete: true, isRange: true}));\n\n         component.setValueStart(5);\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(startThumb!.style.transform).toBe(`translateX(5px)`);\n         expect(document.activeElement).not.toBe(startThumb);\n\n         component.setValue(75);\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(endThumb.style.transform).toBe(`translateX(75px)`);\n         expect(document.activeElement).not.toBe(endThumb);\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"adjusts layout calculations on window resize","suites":["MDCSlider","resize handling:"],"line":488,"updatePoint":{"line":488,"column":52},"code":"    it('adjusts layout calculations on window resize', () => {\n      jasmine.getEnv().allowRespy(true);\n\n      let endThumb;\n      ({root, component, endThumb} = setUpTest({value: 24, isDiscrete: true}));\n\n      expect(component.getValue()).toBe(24);\n      expect(endThumb.style.transform).toBe('translateX(24px)');\n\n      // Mock out client rect to half the size of the original.\n      spyOn(root, 'getBoundingClientRect').and.returnValue({\n        left: 0,\n        right: 50,\n        width: 50,\n      } as DOMRect);\n      emitEvent(window, 'resize');\n\n      jasmine.clock().tick(1);  // Tick for RAF.\n      // Value should be the same...\n      expect(component.getValue()).toBe(24);\n      // Thumb position should be different.\n      expect(endThumb.style.transform).toBe('translateX(12px)');\n\n      component.setValue(12);\n      jasmine.clock().tick(1);  // Tick for RAF.\n      // Subsequent updates should take into account new client rect.\n      expect(endThumb.style.transform).toBe('translateX(6px)');\n\n      jasmine.getEnv().allowRespy(false);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not update thumb styles in initial layout","suites":["MDCSlider","setting slider position before component initialization"],"line":560,"updatePoint":{"line":560,"column":54},"code":"    it('does not update thumb styles in initial layout', () => {\n      MDCSlider.attachTo(root, {skipInitialUIUpdate: true});\n      jasmine.clock().tick(1);  // Tick for RAF.\n\n      expect(thumb.style.left).toBe('calc(70% - 24px)');\n      expect(thumb.style.transform).toBe('');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"removes thumb `left` styles on initial down event that changes value","suites":["MDCSlider","setting slider position before component initialization"],"line":568,"updatePoint":{"line":568,"column":76},"code":"    it('removes thumb `left` styles on initial down event that changes value',\n       () => {\n         MDCSlider.attachTo(root, {skipInitialUIUpdate: true});\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(thumb.style.left).not.toBe('');\n         expect(thumb.style.transform).not.toBe('translateX(30px)');\n\n         root.dispatchEvent(createEventFrom('pointer', 'down', {clientX: 30}));\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(thumb.style.left).toBe('');\n         expect(thumb.style.transform).toBe('translateX(30px)');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"removes thumb/track animation on initial down event that changes value","suites":["MDCSlider","setting slider position before component initialization"],"line":581,"updatePoint":{"line":581,"column":78},"code":"    it('removes thumb/track animation on initial down event that changes value',\n       () => {\n         MDCSlider.attachTo(root, {skipInitialUIUpdate: true});\n         jasmine.clock().tick(1);  // Tick for RAF.\n\n         root.dispatchEvent(createEventFrom('pointer', 'down', {clientX: 30}));\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(thumb.style.transition).toMatch(/none/);\n         expect(trackActive.style.transition).toMatch(/none/);\n\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(thumb.style.transition).toBe('');\n         expect(trackActive.style.transition).toBe('');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"sets min, max, value based on aria attributes","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":34,"updatePoint":{"line":34,"column":53},"code":"    it('sets min, max, value based on aria attributes', () => {\n      const {foundation} =\n          setUpAndInit({min: 0, max: 100, value: 50.5, step: 0.5});\n      expect(foundation.getMin()).toBe(0);\n      expect(foundation.getMax()).toBe(100);\n      expect(foundation.getValue()).toBe(50.5);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: sets min, max, value, valueStart based on aria attributes","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":42,"updatePoint":{"line":42,"column":79},"code":"    it('range slider: sets min, max, value, valueStart based on aria attributes',\n       () => {\n         const {foundation} = setUpAndInit(\n             {min: -20, max: 20, valueStart: -10, value: -5, isRange: true});\n         expect(foundation.getMin()).toBe(-20);\n         expect(foundation.getMax()).toBe(20);\n         expect(foundation.getValue()).toBe(-5);\n         expect(foundation.getValueStart()).toBe(-10);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"sets step based on step attribute","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":52,"updatePoint":{"line":52,"column":41},"code":"    it('sets step based on step attribute', () => {\n      const {foundation} = setUpAndInit({value: 50, step: 5, isDiscrete: true});\n      foundation.init();\n\n      expect(foundation.getStep()).toBe(5);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: sets min range based on data-min-range attribute","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":59,"updatePoint":{"line":59,"column":70},"code":"    it('range slider: sets min range based on data-min-range attribute', () => {\n      const {foundation} = setUpAndInit({minRange: 10, isRange: true});\n      foundation.init();\n\n      expect(foundation.getMinRange()).toBe(10);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"min can be updated after initialization","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":66,"updatePoint":{"line":66,"column":47},"code":"    it('min can be updated after initialization', () => {\n      const {foundation} = setUpAndInit({min: -20, max: 20, value: 0});\n      expect(foundation.getMin()).toBe(-20);\n      expect(foundation.getMax()).toBe(20);\n\n      foundation.setMin(10);\n      expect(foundation.getMin()).toBe(10);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"max can be updated after initialization","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":75,"updatePoint":{"line":75,"column":47},"code":"    it('max can be updated after initialization', () => {\n      const {foundation} = setUpAndInit({min: -20, max: 20, value: 0});\n      expect(foundation.getMin()).toBe(-20);\n      expect(foundation.getMax()).toBe(20);\n\n      foundation.setMax(30);\n      expect(foundation.getMax()).toBe(30);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"min range can be updated after initialization","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":84,"updatePoint":{"line":84,"column":53},"code":"    it('min range can be updated after initialization', () => {\n      const {foundation} = setUpAndInit({isRange: true});\n      expect(foundation.getMinRange()).toBe(0);\n\n      foundation.setMinRange(10);\n      expect(foundation.getMinRange()).toBe(10);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"hasTickMarks can be updated after initialization","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":92,"updatePoint":{"line":92,"column":56},"code":"    it('hasTickMarks can be updated after initialization', () => {\n      const {foundation} =\n          setUpAndInit({min: 0, max: 100, value: 50, hasTickMarks: false}) as\n          unknown as {foundation: WithHasTickMarksAndDiscrete};\n      expect(foundation.hasTickMarks).toBe(false);\n\n      foundation.setHasTickMarks(true);\n      expect(foundation.hasTickMarks).toBe(true);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"step can be updated after initialization","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":102,"updatePoint":{"line":102,"column":48},"code":"    it('step can be updated after initialization', () => {\n      const {foundation} = setUpAndInit(\n          {min: 0, max: 100, value: 50, step: 10, isDiscrete: true});\n      expect(foundation.getStep()).toBe(10);\n\n      foundation.setStep(20);\n      expect(foundation.getStep()).toBe(20);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"isDiscrete can be updated after initialization","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":111,"updatePoint":{"line":111,"column":54},"code":"    it('isDiscrete can be updated after initialization', () => {\n      const {foundation} =\n          setUpAndInit({min: 0, max: 100, value: 50, isDiscrete: false}) as\n          unknown as {foundation: WithHasTickMarksAndDiscrete};\n      expect(foundation.isDiscrete).toBe(false);\n\n      foundation.setIsDiscrete(true);\n      expect(foundation.isDiscrete).toBe(true);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if attribute value is null","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":121,"updatePoint":{"line":121,"column":47},"code":"    it('throws error if attribute value is null', () => {\n      const {foundation, mockAdapter} = setUpTest();\n      mockAdapter.getInputAttribute.withArgs(attributes.INPUT_MIN, Thumb.END)\n          .and.returnValue(null);\n      mockAdapter.getInputAttribute.withArgs(attributes.INPUT_MAX, Thumb.END)\n          .and.returnValue('100');\n      mockAdapter.getInputAttribute.withArgs(attributes.INPUT_VALUE, Thumb.END)\n          .and.returnValue('50.5');\n\n      expect(() => foundation.init()).toThrowError(/must be non-null/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if attribute value is NaN","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":133,"updatePoint":{"line":133,"column":46},"code":"    it('throws error if attribute value is NaN', () => {\n      const {foundation, mockAdapter} = setUpTest();\n      mockAdapter.getInputAttribute.withArgs(attributes.INPUT_MIN, Thumb.END)\n          .and.returnValue('0');\n      mockAdapter.getInputAttribute.withArgs(attributes.INPUT_MAX, Thumb.END)\n          .and.returnValue('foo');\n      mockAdapter.getInputAttribute.withArgs(attributes.INPUT_VALUE, Thumb.END)\n          .and.returnValue('50.5');\n\n      expect(() => foundation.init()).toThrowError(/must be a number/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if min > max","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":145,"updatePoint":{"line":145,"column":33},"code":"    it('throws error if min > max', () => {\n      expect(() => setUpAndInit({value: 0.5, min: 1, max: 0}))\n          .toThrowError(/min must be strictly less than max/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if min == max","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":150,"updatePoint":{"line":150,"column":34},"code":"    it('throws error if min == max', () => {\n      expect(() => setUpAndInit({value: 0, min: 0, max: 0}))\n          .toThrowError(/min must be strictly less than max/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if value < min","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":155,"updatePoint":{"line":155,"column":35},"code":"    it('throws error if value < min', () => {\n      expect(() => setUpAndInit({value: 5, min: 10, max: 50}))\n          .toThrowError(/value must be in \\[min, max\\] range/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if value > max","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":160,"updatePoint":{"line":160,"column":35},"code":"    it('throws error if value > max', () => {\n      expect(() => setUpAndInit({value: 55, min: 10, max: 50}))\n          .toThrowError(/value must be in \\[min, max\\] range/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if step <= 0","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":165,"updatePoint":{"line":165,"column":33},"code":"    it('throws error if step <= 0', () => {\n      expect(() => setUpAndInit({value: 20, isDiscrete: true, step: -5}))\n          .toThrowError(/step must be a positive number/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if valueStart < min","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":170,"updatePoint":{"line":170,"column":40},"code":"    it('throws error if valueStart < min', () => {\n      expect(\n          () => setUpAndInit(\n              {value: 20, valueStart: 25, min: 22, max: 30, isRange: true}))\n          .toThrowError(/values must be in \\[min, max\\] range/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if valueStart > max","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":177,"updatePoint":{"line":177,"column":40},"code":"    it('throws error if valueStart > max', () => {\n      expect(\n          () => setUpAndInit(\n              {value: 10, valueStart: 25, min: 0, max: 23, isRange: true}))\n          .toThrowError(/values must be in \\[min, max\\] range/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if start value > end value","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":184,"updatePoint":{"line":184,"column":47},"code":"    it('throws error if start value > end value', () => {\n      expect(() => setUpAndInit({value: 10, valueStart: 25, isRange: true}))\n          .toThrowError(/start value must be <= end value/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: throws error if start value is not divisible by step","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":189,"updatePoint":{"line":189,"column":74},"code":"    it('range slider: throws error if start value is not divisible by step',\n       () => {\n         expect(() => setUpAndInit({valueStart: 2, step: 5, isRange: true}))\n             .toThrowError(/values must be valid based on the step value/);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if value is not divisible by step","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":195,"updatePoint":{"line":195,"column":54},"code":"    it('throws error if value is not divisible by step', () => {\n      expect(() => setUpAndInit({value: 12, step: 5}))\n          .toThrowError(/value must be valid based on the step value/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if minRange < 0","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":200,"updatePoint":{"line":200,"column":36},"code":"    it('throws error if minRange < 0', () => {\n      expect(() => setUpAndInit({minRange: -1, isRange: true}))\n          .toThrowError(/minimum range must be non-negative/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if valueStart + minRange > value","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":205,"updatePoint":{"line":205,"column":53},"code":"    it('throws error if valueStart + minRange > value', () => {\n      expect(\n          () => setUpAndInit(\n              {valueStart: 20, value: 30, minRange: 20, isRange: true}))\n          .toThrowError(/start value and end value must differ by at least 20/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not throw error with valid value and step < 1","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":212,"updatePoint":{"line":212,"column":58},"code":"    it('does not throw error with valid value and step < 1', () => {\n      expect(() => setUpAndInit({value: 12, step: 0.2})).not.toThrow();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not throw error due to floating point rounding - related to issue #7404","suites":["MDCSliderFoundation","#init sets values based on DOM"],"line":216,"updatePoint":{"line":216,"column":84},"code":"    it('does not throw error due to floating point rounding - related to issue #7404', () => {\n      expect(() => setUpAndInit({value: 33.3, min: 0, max: 100, step: 0.1})).not.toThrow();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"initial layout does not reset thumb/track animations for continuous sliders","suites":["MDCSliderFoundation","#layout"],"line":277,"updatePoint":{"line":277,"column":83},"code":"    it('initial layout does not reset thumb/track animations for continuous sliders',\n       () => {\n         const {mockAdapter} = setUpAndInit({isRange: true, isDiscrete: false});\n         expect(mockAdapter.setThumbStyleProperty)\n             .not.toHaveBeenCalledWith(\n                 'transition', 'none 0s ease 0s', Thumb.END);\n         expect(mockAdapter.setThumbStyleProperty)\n             .not.toHaveBeenCalledWith(\n                 'transition', 'none 0s ease 0s', Thumb.START);\n         expect(mockAdapter.setTrackActiveStyleProperty)\n             .not.toHaveBeenCalledWith('transition', 'none 0s ease 0s');\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"RTL: initial layout removes thumb styles","suites":["MDCSliderFoundation","#layout"],"line":290,"updatePoint":{"line":290,"column":48},"code":"    it('RTL: initial layout removes thumb styles', () => {\n      const {mockAdapter} = setUpAndInit({isRange: true, isRTL: true});\n      expect(mockAdapter.removeThumbStyleProperty)\n          .toHaveBeenCalledWith('right', Thumb.END);\n      expect(mockAdapter.removeThumbStyleProperty)\n          .toHaveBeenCalledWith('right', Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"`skipUpdateUI` skips updating the UI","suites":["MDCSliderFoundation","#layout"],"line":298,"updatePoint":{"line":298,"column":44},"code":"    it('`skipUpdateUI` skips updating the UI', () => {\n      const {foundation, mockAdapter} = setUpAndInit({isRange: true});\n      mockAdapter.setThumbStyleProperty.calls.reset();\n      mockAdapter.setTrackActiveStyleProperty.calls.reset();\n\n      foundation.layout({skipUpdateUI: true});\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty).not.toHaveBeenCalled();\n      expect(mockAdapter.setTrackActiveStyleProperty).not.toHaveBeenCalled();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"#layout with no thumbs updates both thumbs' value indicators","suites":["MDCSliderFoundation","#layout"],"line":309,"updatePoint":{"line":309,"column":69},"code":"    it('#layout with no thumbs updates both thumbs\\' value indicators', () => {\n      const {foundation, mockAdapter} = setUpAndInit(\n          {isRange: true, isDiscrete: true, valueStart: 5, value: 10});\n\n      foundation.layout();\n      expect(mockAdapter.setValueIndicatorText)\n          .toHaveBeenCalledWith(10, Thumb.END);\n      expect(mockAdapter.setValueIndicatorText)\n          .toHaveBeenCalledWith(5, Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"#layout with no thumbs updates both thumbs' input attributes","suites":["MDCSliderFoundation","#layout"],"line":320,"updatePoint":{"line":320,"column":69},"code":"    it('#layout with no thumbs updates both thumbs\\' input attributes', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        isRange: true,\n        isDiscrete: true,\n        valueStart: 5,\n        value: 10,\n        minRange: 1\n      });\n      mockAdapter.getValueToAriaValueTextFn.and.returnValue(\n          (value: string) => `${value} value`);\n\n      foundation.layout();\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_VALUE, '5', Thumb.START);\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_VALUE, '10', Thumb.END);\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_MAX, '9', Thumb.START);\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_MIN, '6', Thumb.END);\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(\n              attributes.ARIA_VALUETEXT, '5 value', Thumb.START);\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(\n              attributes.ARIA_VALUETEXT, '10 value', Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"Resize listener is deregistered when foundation is destroyed","suites":["MDCSliderFoundation","#destroy"],"line":394,"updatePoint":{"line":394,"column":68},"code":"    it('Resize listener is deregistered when foundation is destroyed', () => {\n       const {foundation, mockAdapter} = setUpAndInit();\n\n       foundation.destroy();\n\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('resize', jasmine.any(Function));\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"adds/removes focused style from thumb on input focus/blur","suites":["MDCSliderFoundation","Focused thumb style"],"line":405,"updatePoint":{"line":405,"column":65},"code":"    it('adds/removes focused style from thumb on input focus/blur', () => {\n      const {foundation, mockAdapter} = setUpAndInit();\n      foundation.handleInputFocus(Thumb.START);\n      expect(mockAdapter.addThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_FOCUSED, Thumb.START);\n\n      foundation.handleInputBlur(Thumb.START);\n      expect(mockAdapter.removeThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_FOCUSED, Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if move event occurs with no preceding down event","suites":["MDCSliderFoundation","Value updates via user events"],"line":418,"updatePoint":{"line":418,"column":70},"code":"    it('throws error if move event occurs with no preceding down event', () => {\n      const {foundation} = setUpAndInit();\n\n      expect(() => {\n        foundation.handleMove(createMouseEvent('mousemove', {\n          clientX: 80,\n        }));\n      }).toThrowError();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"sets slider value to updated value","suites":["MDCSliderFoundation","Value updates via user events"],"line":428,"updatePoint":{"line":428,"column":42},"code":"    it('sets slider value to updated value', () => {\n      const left = 10;\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 50,\n        rect: {\n          left,\n          right: 110,\n          width: 100,\n        }\n      });\n\n      const value = 60;\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: left + value,\n      }));\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: left + value,\n      }));\n      expect(foundation.getValue()).toBe(value);\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              'transform', `translateX(${value}px)`, Thumb.END);\n      expect(mockAdapter.setTrackActiveStyleProperty)\n          .toHaveBeenCalledWith('transform', `scaleX(${value / 100})`);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"clips value to min value","suites":["MDCSliderFoundation","Value updates via user events"],"line":455,"updatePoint":{"line":455,"column":32},"code":"    it('clips value to min value', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        min: 10,\n        max: 100,\n        value: 50,\n        rect: {\n          left: 10,\n          right: 110,\n          width: 100,\n        }\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 9,\n      }));\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 9,\n      }));\n      expect(foundation.getValue()).toBe(10);\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', `translateX(${0}px)`, Thumb.END);\n      expect(mockAdapter.setTrackActiveStyleProperty)\n          .toHaveBeenCalledWith('transform', `scaleX(${0})`);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"clips value to max value","suites":["MDCSliderFoundation","Value updates via user events"],"line":481,"updatePoint":{"line":481,"column":32},"code":"    it('clips value to max value', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 50,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 101,\n      }));\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 101,\n      }));\n      expect(foundation.getValue()).toBe(100);\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', `translateX(${100}px)`, Thumb.END);\n      expect(mockAdapter.setTrackActiveStyleProperty)\n          .toHaveBeenCalledWith('transform', `scaleX(${1})`);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"quantizes value based on step","suites":["MDCSliderFoundation","Value updates via user events"],"line":500,"updatePoint":{"line":500,"column":37},"code":"    it('quantizes value based on step', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 50,\n        isDiscrete: true,\n        step: 5,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 58,\n      }));\n      expect(foundation.getValue()).toBe(60);\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', `translateX(${60}px)`, Thumb.END);\n      expect(mockAdapter.setTrackActiveStyleProperty)\n          .toHaveBeenCalledWith('transform', `scaleX(${0.6})`);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"quantizes value based on step and min","suites":["MDCSliderFoundation","Value updates via user events"],"line":518,"updatePoint":{"line":518,"column":45},"code":"    it('quantizes value based on step and min', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        min: -25,\n        max: 75,\n        value: 5,\n        isDiscrete: true,\n        step: 10,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 10,\n      }));\n      expect(foundation.getValue()).toBe(-15);  // -25 + 10\n      jasmine.clock().tick(1);                  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', `translateX(${10}px)`, Thumb.END);\n      expect(mockAdapter.setTrackActiveStyleProperty)\n          .toHaveBeenCalledWith('transform', `scaleX(${0.1})`);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"rounds values based on step decimal places","suites":["MDCSliderFoundation","Value updates via user events"],"line":538,"updatePoint":{"line":538,"column":50},"code":"    it('rounds values based on step decimal places', () => {\n      const {foundation} = setUpAndInit({\n        min: 0,\n        max: 1,\n        value: 0,\n        isDiscrete: true,\n        step: 0.1,\n      });\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 30,\n      }));\n      expect(foundation.getValue()).toBe(0.3);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"rounds values (using scientific notation) based on step decimal places","suites":["MDCSliderFoundation","Value updates via user events"],"line":552,"updatePoint":{"line":552,"column":78},"code":"    it('rounds values (using scientific notation) based on step decimal places',\n       () => {\n         const {foundation} = setUpAndInit({\n           min: 0,\n           max: 1e-8,\n           value: 0,\n           isDiscrete: true,\n           step: 1e-9,\n         });\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 30,\n         }));\n         expect(foundation.getValue()).toBe(3e-9);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"moves the start thumb if value < start value","suites":["MDCSliderFoundation","Value updates via user events"],"line":634,"updatePoint":{"line":634,"column":52},"code":"    it('moves the start thumb if value < start value', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 10,\n        value: 50,\n        isRange: true,\n      });\n\n      // Down event on start thumb.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 5,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n\n      expect(foundation.getValueStart()).toBe(5);\n      expect(foundation.getValue()).toBe(50);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', `translateX(5px)`, Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"moves the end thumb if value > end value","suites":["MDCSliderFoundation","Value updates via user events"],"line":653,"updatePoint":{"line":653,"column":48},"code":"    it('moves the end thumb if value > end value', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 10,\n        value: 50,\n        isRange: true,\n      });\n\n      // Down event on end thumb.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 70,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n\n      expect(foundation.getValueStart()).toBe(10);\n      expect(foundation.getValue()).toBe(70);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', `translateX(70px)`, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not move the start thumb to be greater than the end thumb","suites":["MDCSliderFoundation","Value updates via user events"],"line":672,"updatePoint":{"line":672,"column":70},"code":"    it('does not move the start thumb to be greater than the end thumb', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 45,\n        value: 53,\n        isRange: true,\n      });\n\n      // Down event on start thumb.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 45,\n      }));\n      // Move event to a clientX greater than end thumb.\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 60,\n      }));\n\n      jasmine.clock().tick(1);  // Tick for RAF.\n\n      expect(foundation.getValueStart()).toBe(53);\n      expect(foundation.getValue()).toBe(53);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', `translateX(53px)`, Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not move the end thumb to be less than than the start thumb","suites":["MDCSliderFoundation","Value updates via user events"],"line":696,"updatePoint":{"line":696,"column":72},"code":"    it('does not move the end thumb to be less than than the start thumb',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           valueStart: 45,\n           value: 80,\n           isRange: true,\n         });\n\n         // Down event on end thumb.\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 80,\n         }));\n         // Move event to a clientX less than start thumb.\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 40,\n         }));\n\n         jasmine.clock().tick(1);  // Tick for RAF.\n\n         expect(foundation.getValueStart()).toBe(45);\n         expect(foundation.getValue()).toBe(45);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith('transform', `translateX(45px)`, Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not move the start thumb to be closer to the end thumb than minRange","suites":["MDCSliderFoundation","Value updates via user events"],"line":721,"updatePoint":{"line":721,"column":81},"code":"    it('does not move the start thumb to be closer to the end thumb than minRange',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           valueStart: 45,\n           value: 53,\n           minRange: 5,\n           isRange: true,\n         });\n\n         // Down event on start thumb.\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 45,\n         }));\n         // Move event to a clientX less than minRange from the end thumb.\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 50,\n         }));\n\n         jasmine.clock().tick(1);  // Tick for RAF.\n\n         expect(foundation.getValueStart()).toBe(48);\n         expect(foundation.getValue()).toBe(53);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 'transform', `translateX(48px)`, Thumb.START);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not move the end thumb to be closer to the start thumb than minRange","suites":["MDCSliderFoundation","Value updates via user events"],"line":748,"updatePoint":{"line":748,"column":81},"code":"    it('does not move the end thumb to be closer to the start thumb than minRange',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           valueStart: 45,\n           value: 80,\n           minRange: 10,\n           isRange: true,\n         });\n\n         // Down event on end thumb.\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 80,\n         }));\n         // Move event to a clientX less than minRange from the start thumb.\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 50,\n         }));\n\n         jasmine.clock().tick(1);  // Tick for RAF.\n\n         expect(foundation.getValueStart()).toBe(45);\n         expect(foundation.getValue()).toBe(55);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith('transform', `translateX(55px)`, Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not update UI if start value is updated to the same value","suites":["MDCSliderFoundation","Value updates via user events"],"line":774,"updatePoint":{"line":774,"column":70},"code":"    it('does not update UI if start value is updated to the same value', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 40,\n        value: 80,\n        isRange: true,\n        isDiscrete: true,\n        step: 10,\n      });\n\n      // Reset UI update calls from initialization, so we can test\n      // that the next #handleDown invokes no calls.\n      mockAdapter.setThumbStyleProperty.calls.reset();\n\n      // Down event near start value.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 37,\n      }));\n\n      jasmine.clock().tick(1);  // Tick for RAF.\n\n      expect(foundation.getValueStart()).toBe(40);\n      expect(mockAdapter.setThumbStyleProperty).not.toHaveBeenCalled();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not update UI if end value is updated to the same value","suites":["MDCSliderFoundation","Value updates via user events"],"line":798,"updatePoint":{"line":798,"column":68},"code":"    it('does not update UI if end value is updated to the same value', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 40,\n        value: 80,\n        isRange: true,\n        isDiscrete: true,\n        step: 10,\n      });\n\n      // Reset UI update calls from initialization, so we can test\n      // that the next #handleDown invokes no calls.\n      mockAdapter.setThumbStyleProperty.calls.reset();\n\n      // Down event near end value.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 84.5,\n      }));\n\n      jasmine.clock().tick(1);  // Tick for RAF.\n\n      expect(foundation.getValue()).toBe(80);\n      expect(mockAdapter.setThumbStyleProperty).not.toHaveBeenCalled();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"RTL, range slider: updates track/thumb position with reversed values","suites":["MDCSliderFoundation","Value updates via user events"],"line":841,"updatePoint":{"line":841,"column":76},"code":"    it('RTL, range slider: updates track/thumb position with reversed values',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           valueStart: 10,\n           value: 50,\n           isRange: true,\n           isRTL: true,\n         });\n\n         // Down event on end thumb.\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 25,  // In RTL, maps to value update of 75.\n         }));\n         jasmine.clock().tick(1);  // Tick for RAF.\n\n         expect(foundation.getValue()).toBe(75);\n         expect(mockAdapter.setTrackActiveStyleProperty)\n             .toHaveBeenCalledWith('transform-origin', 'right');\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith('transform', `translateX(25px)`, Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if #get/setValueStart is invoked on single point slider","suites":["MDCSliderFoundation","#get/setValue"],"line":865,"updatePoint":{"line":865,"column":76},"code":"    it('throws error if #get/setValueStart is invoked on single point slider',\n       () => {\n         const {foundation} = setUpAndInit();\n\n         expect(() => {\n           foundation.getValueStart();\n         }).toThrowError(/only applicable for range sliders/);\n         expect(() => {\n           foundation.setValueStart(10);\n         }).toThrowError(/only applicable for range sliders/);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if #setValue/setValueStart is set to invalid number","suites":["MDCSliderFoundation","#get/setValue"],"line":877,"updatePoint":{"line":877,"column":72},"code":"    it('throws error if #setValue/setValueStart is set to invalid number',\n       () => {\n         const {foundation} = setUpAndInit(\n             {isRange: true, valueStart: 10, value: 50, minRange: 10});\n\n         expect(() => {\n           foundation.setValueStart(51);\n         }).toThrowError(/must be <= end thumb value/);\n         expect(() => {\n           foundation.setValueStart(45);\n         })\n             .toThrowError(\n                 /must be <= end thumb value \\(50\\) - min range \\(10\\)/);\n         expect(() => {\n           foundation.setValue(9);\n         }).toThrowError(/must be >= start thumb value/);\n         expect(() => {\n           foundation.setValue(15);\n         })\n             .toThrowError(\n                 /must be >= start thumb value \\(10\\) \\+ min range \\(10\\)/);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"single point slider: #setValue updates value and UI","suites":["MDCSliderFoundation","#get/setValue"],"line":900,"updatePoint":{"line":900,"column":59},"code":"    it('single point slider: #setValue updates value and UI', () => {\n      const {foundation, mockAdapter} =\n          setUpAndInit({isDiscrete: true, value: 33});\n\n      foundation.setValue(64);\n      expect(foundation.getValue()).toBe(64);\n\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', 'translateX(64px)', Thumb.END);\n      expect(mockAdapter.setTrackActiveStyleProperty)\n          .toHaveBeenCalledWith('transform', 'scaleX(0.64)');\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range: #setValue updates end thumb value and UI","suites":["MDCSliderFoundation","#get/setValue"],"line":914,"updatePoint":{"line":914,"column":55},"code":"    it('range: #setValue updates end thumb value and UI', () => {\n      const {foundation, mockAdapter} = setUpAndInit(\n          {isDiscrete: true, valueStart: 10, value: 40, isRange: true});\n\n      foundation.setValue(64);\n      expect(foundation.getValue()).toBe(64);\n\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', 'translateX(64px)', Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range: #setValueStart updates end thumb value and UI","suites":["MDCSliderFoundation","#get/setValue"],"line":926,"updatePoint":{"line":926,"column":60},"code":"    it('range: #setValueStart updates end thumb value and UI', () => {\n      const {foundation, mockAdapter} = setUpAndInit(\n          {isDiscrete: true, valueStart: 10, value: 40, isRange: true});\n\n      foundation.setValueStart(3);\n      expect(foundation.getValueStart()).toBe(3);\n\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith('transform', 'translateX(3px)', Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if #get/setMinRange is invoked on single point slider","suites":["MDCSliderFoundation","#get/setMinRange"],"line":940,"updatePoint":{"line":940,"column":74},"code":"    it('throws error if #get/setMinRange is invoked on single point slider',\n       () => {\n         const {foundation} = setUpAndInit();\n\n         expect(() => {\n           foundation.getMinRange();\n         }).toThrowError(/only applicable for range sliders/);\n         expect(() => {\n           foundation.setMinRange(10);\n         }).toThrowError(/only applicable for range sliders/);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"throws error if #setMinRange is set to invalid number","suites":["MDCSliderFoundation","#get/setMinRange"],"line":952,"updatePoint":{"line":952,"column":61},"code":"    it('throws error if #setMinRange is set to invalid number', () => {\n      const {foundation} = setUpAndInit(\n          {isRange: true, valueStart: 10, value: 50, minRange: 10});\n\n      expect(() => {\n        foundation.setMinRange(-10);\n      }).toThrowError(/must be non-negative/);\n      expect(() => {\n        foundation.setMinRange(45);\n      }).toThrowError(/must differ by at least 45/);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates input value attribute and property on value update","suites":["MDCSliderFoundation","input synchronization: "],"line":966,"updatePoint":{"line":966,"column":66},"code":"    it('updates input value attribute and property on value update', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        isDiscrete: true,\n        valueStart: 10,\n        value: 40,\n        minRange: 10,\n        isRange: true\n      });\n\n      mockAdapter.getInputValue.withArgs(Thumb.START).and.returnValue(10);\n      foundation.setValueStart(3);\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_VALUE, '3', Thumb.START);\n      expect(mockAdapter.setInputValue).toHaveBeenCalledWith('3', Thumb.START);\n      // The min attribute for end input should also be updated.\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_MIN, '13', Thumb.END);\n\n      mockAdapter.getInputValue.withArgs(Thumb.END).and.returnValue(40);\n      foundation.setValue(30);\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_VALUE, '30', Thumb.END);\n      expect(mockAdapter.setInputValue).toHaveBeenCalledWith('30', Thumb.END);\n      // The max attribute for start input should also be updated.\n      expect(mockAdapter.setInputAttribute)\n          .toHaveBeenCalledWith(attributes.INPUT_MAX, '20', Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates values on input change","suites":["MDCSliderFoundation","input synchronization: "],"line":994,"updatePoint":{"line":994,"column":38},"code":"    it('updates values on input change', () => {\n      const {foundation, mockAdapter} =\n          setUpAndInit({valueStart: 10, value: 40, isRange: true});\n\n      mockAdapter.getInputValue.withArgs(Thumb.START).and.returnValue(5);\n      foundation.handleInputChange(Thumb.START);\n      expect(foundation.getValueStart()).toBe(5);\n\n      mockAdapter.getInputValue.withArgs(Thumb.END).and.returnValue(45);\n      foundation.handleInputChange(Thumb.END);\n      expect(foundation.getValue()).toBe(45);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"focuses input on thumb down event","suites":["MDCSliderFoundation","input synchronization: "],"line":1007,"updatePoint":{"line":1007,"column":41},"code":"    it('focuses input on thumb down event', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 50,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 20,\n      }));\n      expect(mockAdapter.focusInput).toHaveBeenCalledWith(Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not update value indicator for continuous slider","suites":["MDCSliderFoundation","value indicator"],"line":1020,"updatePoint":{"line":1020,"column":61},"code":"    it('does not update value indicator for continuous slider', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 50,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 20,\n      }));\n      expect(mockAdapter.setValueIndicatorText).not.toHaveBeenCalled();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates value indicator for single point slider","suites":["MDCSliderFoundation","value indicator"],"line":1031,"updatePoint":{"line":1031,"column":55},"code":"    it('updates value indicator for single point slider', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 50,\n        isDiscrete: true,\n        step: 5,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 20,\n      }));\n      expect(mockAdapter.setValueIndicatorText)\n          .toHaveBeenCalledWith(20, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates value indicator for range slider","suites":["MDCSliderFoundation","value indicator"],"line":1045,"updatePoint":{"line":1045,"column":48},"code":"    it('updates value indicator for range slider', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 30,\n        value: 50,\n        isDiscrete: true,\n        step: 5,\n        isRange: true,\n      });\n\n      // Update start thumb value.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 20,\n      }));\n      expect(mockAdapter.setValueIndicatorText)\n          .toHaveBeenCalledWith(20, Thumb.START);\n\n      // Update end thumb value.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 75,\n      }));\n      expect(mockAdapter.setValueIndicatorText)\n          .toHaveBeenCalledWith(75, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not align value indicator for continuous slider","suites":["MDCSliderFoundation","value indicator alignment"],"line":1126,"updatePoint":{"line":1126,"column":60},"code":"    it('does not align value indicator for continuous slider', () => {\n      const {mockAdapter} = setUpAndInit({\n        value: 50,\n      });\n\n      expect(mockAdapter.getValueIndicatorContainerWidth)\n          .not.toHaveBeenCalled();\n      expect(mockAdapter.setThumbStyleProperty)\n          .not.toHaveBeenCalledWith(\n              jasmine.stringMatching(/--slider-value-indicator.*/),\n              jasmine.any(String), jasmine.any(Number));\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"left aligns value indicator when close to the left edge","suites":["MDCSliderFoundation","value indicator alignment"],"line":1139,"updatePoint":{"line":1139,"column":63},"code":"    it('left aligns value indicator when close to the left edge', () => {\n      const {mockAdapter} = setUpAndInit({\n        value: 0,\n        isDiscrete: true,\n      });\n\n      expect(mockAdapter.getValueIndicatorContainerWidth)\n          .toHaveBeenCalledWith(Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-caret-left', '5px', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-caret-right', 'auto', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-caret-transform', 'translateX(-50%)',\n              Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-container-left', '0', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-container-right', 'auto', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-container-transform', 'none',\n              Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"right aligns value indicator when close to the right edge","suites":["MDCSliderFoundation","value indicator alignment"],"line":1169,"updatePoint":{"line":1169,"column":65},"code":"    it('right aligns value indicator when close to the right edge', () => {\n      const {mockAdapter} = setUpAndInit({\n        value: 100,\n        isDiscrete: true,\n      });\n\n      expect(mockAdapter.getValueIndicatorContainerWidth)\n          .toHaveBeenCalledWith(Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-caret-left', 'auto', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-caret-right', '5px', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-caret-transform', 'translateX(50%)',\n              Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-container-left', 'auto', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-container-right', '0', Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              '--slider-value-indicator-container-transform', 'none',\n              Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"centers value indicator over the knob when far enough from both edges","suites":["MDCSliderFoundation","value indicator alignment"],"line":1199,"updatePoint":{"line":1199,"column":77},"code":"    it('centers value indicator over the knob when far enough from both edges',\n       () => {\n         const {mockAdapter} = setUpAndInit({\n           value: 50,\n           isDiscrete: true,\n         });\n\n         expect(mockAdapter.getValueIndicatorContainerWidth)\n             .toHaveBeenCalledWith(Thumb.END);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 '--slider-value-indicator-caret-left', '50%', Thumb.END);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 '--slider-value-indicator-caret-right', 'auto', Thumb.END);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 '--slider-value-indicator-caret-transform', 'translateX(-50%)',\n                 Thumb.END);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 '--slider-value-indicator-container-left', '50%', Thumb.END);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 '--slider-value-indicator-container-right', 'auto', Thumb.END);\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 '--slider-value-indicator-container-transform',\n                 'translateX(-50%)', Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: aligns both value indicators","suites":["MDCSliderFoundation","value indicator alignment"],"line":1230,"updatePoint":{"line":1230,"column":50},"code":"    it('range slider: aligns both value indicators', () => {\n      const {mockAdapter} = setUpAndInit({\n        isRange: true,\n        isDiscrete: true,\n      });\n\n      expect(mockAdapter.getValueIndicatorContainerWidth)\n          .toHaveBeenCalledWith(Thumb.START);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              jasmine.stringMatching(/--slider-value-indicator.*/),\n              jasmine.any(String), Thumb.START);\n      expect(mockAdapter.getValueIndicatorContainerWidth)\n          .toHaveBeenCalledWith(Thumb.END);\n      expect(mockAdapter.setThumbStyleProperty)\n          .toHaveBeenCalledWith(\n              jasmine.stringMatching(/--slider-value-indicator.*/),\n              jasmine.any(String), Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"single point slider: sets correct number of tick marks for value update","suites":["MDCSliderFoundation","tick marks"],"line":1252,"updatePoint":{"line":1252,"column":79},"code":"    it('single point slider: sets correct number of tick marks for value update',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           value: 50,\n           isDiscrete: true,\n           step: 10,\n           hasTickMarks: true,\n         });\n\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 0,\n         }));\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 0,\n         }));\n         expect(mockAdapter.updateTickMarks).toHaveBeenCalledWith([\n           TickMark.ACTIVE\n         ].concat(Array.from<TickMark>({length: 10}).fill(TickMark.INACTIVE)));\n\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 100,\n         }));\n         expect(mockAdapter.updateTickMarks)\n             .toHaveBeenCalledWith(\n                 Array.from<TickMark>({length: 11}).fill(TickMark.ACTIVE));\n\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 33.5,\n         }));\n         expect(mockAdapter.updateTickMarks)\n             .toHaveBeenCalledWith(Array.from<TickMark>({length: 4})\n                                       .fill(TickMark.ACTIVE)\n                                       .concat(Array.from<TickMark>({length: 7})\n                                                   .fill(TickMark.INACTIVE)));\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: sets correct number of tick marks for value update","suites":["MDCSliderFoundation","tick marks"],"line":1288,"updatePoint":{"line":1288,"column":72},"code":"    it('range slider: sets correct number of tick marks for value update',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           valueStart: 20,\n           value: 40,\n           isDiscrete: true,\n           step: 10,\n           hasTickMarks: true,\n           isRange: true,\n         });\n         expect(mockAdapter.updateTickMarks).toHaveBeenCalledWith([\n           TickMark.INACTIVE,\n           TickMark.INACTIVE,\n           TickMark.ACTIVE,\n           TickMark.ACTIVE,\n           TickMark.ACTIVE,\n         ].concat(Array.from<TickMark>({length: 6}).fill(TickMark.INACTIVE)));\n\n         // Update start thumb value to 0.\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 0,\n         }));\n         expect(mockAdapter.updateTickMarks)\n             .toHaveBeenCalledWith(Array.from<TickMark>({length: 5})\n                                       .fill(TickMark.ACTIVE)\n                                       .concat(Array.from<TickMark>({length: 6})\n                                                   .fill(TickMark.INACTIVE)));\n\n         // Update end thumb value to 100.\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 100,\n         }));\n         expect(mockAdapter.updateTickMarks)\n             .toHaveBeenCalledWith(\n                 Array.from<TickMark>({length: 11}).fill(TickMark.ACTIVE));\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"when thumbs overlap, adds THUMB_TOP class to active thumb","suites":["MDCSliderFoundation","range slider: overlapping thumbs"],"line":1327,"updatePoint":{"line":1327,"column":65},"code":"    it('when thumbs overlap, adds THUMB_TOP class to active thumb', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 12,\n        value: 58,\n        isRange: true,\n      });\n\n      // Down event on start thumb.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 10,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.addThumbClass)\n          .not.toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.START);\n\n      // Move start thumb to overlap with end thumb.\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 56,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.addThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.START);\n      expect(mockAdapter.removeThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"when thumbs do not overlap, removes THUMB_TOP class","suites":["MDCSliderFoundation","range slider: overlapping thumbs"],"line":1353,"updatePoint":{"line":1353,"column":59},"code":"    it('when thumbs do not overlap, removes THUMB_TOP class', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 12,\n        value: 15,\n        isRange: true,\n      });\n\n      // Down event on end thumb.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 15,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n\n      // Move end thumb to not overlap with start thumb.\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 80,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.removeThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.START);\n      expect(mockAdapter.removeThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"RTL: when thumbs overlap, adds THUMB_TOP class to active thumb","suites":["MDCSliderFoundation","range slider: overlapping thumbs"],"line":1377,"updatePoint":{"line":1377,"column":70},"code":"    it('RTL: when thumbs overlap, adds THUMB_TOP class to active thumb', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 10,  // Start thumb is at clientX == 90.\n        value: 60,       // End thumb is at clientX == 40.\n        isRange: true,\n        isRTL: true,\n      });\n\n      // Down event on start thumb.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 90,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.addThumbClass)\n          .not.toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.START);\n\n      // Move start thumb to overlap with end thumb.\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 40,\n      }));\n      jasmine.clock().tick(1);  // Tick for RAF.\n      expect(mockAdapter.addThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.START);\n      expect(mockAdapter.removeThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_TOP, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"when thumbs overlap, thumb to be moved is based on drag direction","suites":["MDCSliderFoundation","range slider: overlapping thumbs"],"line":1404,"updatePoint":{"line":1404,"column":73},"code":"    it('when thumbs overlap, thumb to be moved is based on drag direction',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           valueStart: 10,\n           value: 12,\n           isRange: true,\n         });\n         // Reset calls from initial layout.\n         mockAdapter.setThumbStyleProperty.calls.reset();\n\n         // Down event on overlapping thumbs.\n         const downEventClientX = 10;\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: downEventClientX,\n         }));\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(mockAdapter.setThumbStyleProperty).not.toHaveBeenCalled();\n\n         // Move to left by less than THUMB_UPDATE_MIN_PX.\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: downEventClientX - 3,\n         }));\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(mockAdapter.setThumbStyleProperty).not.toHaveBeenCalled();\n\n         // Move to left by more than THUMB_UPDATE_MIN_PX.\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: downEventClientX - 7,\n         }));\n         jasmine.clock().tick(1);  // Tick for RAF.\n         expect(mockAdapter.setThumbStyleProperty)\n             .toHaveBeenCalledWith(\n                 'transform', `translateX(${downEventClientX - 7}px)`,\n                 Thumb.START);\n         expect(foundation.getValueStart()).toBe(3);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"updates class and input attributes according to disabled state","suites":["MDCSliderFoundation","disabled state"],"line":1501,"updatePoint":{"line":1501,"column":70},"code":"    it('updates class and input attributes according to disabled state',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit();\n         expect(foundation.getDisabled()).toBe(false);\n\n         foundation.setDisabled(true);\n         expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.DISABLED);\n         expect(mockAdapter.setInputAttribute)\n             .toHaveBeenCalledWith(attributes.INPUT_DISABLED, '', Thumb.END);\n         expect(foundation.getDisabled()).toBe(true);\n\n         foundation.setDisabled(false);\n         expect(mockAdapter.removeClass)\n             .toHaveBeenCalledWith(cssClasses.DISABLED);\n         expect(mockAdapter.removeInputAttribute)\n             .toHaveBeenCalledWith(attributes.INPUT_DISABLED, Thumb.END);\n         expect(foundation.getDisabled()).toBe(false);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: updates inputs' attrs according to disabled state","suites":["MDCSliderFoundation","disabled state"],"line":1520,"updatePoint":{"line":1520,"column":72},"code":"    it('range slider: updates inputs\\' attrs according to disabled state',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({isRange: true});\n\n         foundation.setDisabled(true);\n         expect(mockAdapter.setInputAttribute)\n             .toHaveBeenCalledWith(attributes.INPUT_DISABLED, '', Thumb.END);\n         expect(mockAdapter.setInputAttribute)\n             .toHaveBeenCalledWith(attributes.INPUT_DISABLED, '', Thumb.START);\n\n         foundation.setDisabled(false);\n         expect(mockAdapter.removeInputAttribute)\n             .toHaveBeenCalledWith(attributes.INPUT_DISABLED, Thumb.START);\n         expect(mockAdapter.removeInputAttribute)\n             .toHaveBeenCalledWith(attributes.INPUT_DISABLED, Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"events do not update slider value when disabled","suites":["MDCSliderFoundation","disabled state"],"line":1537,"updatePoint":{"line":1537,"column":55},"code":"    it('events do not update slider value when disabled', () => {\n      const {foundation} =\n          setUpAndInit({value: 40, isDiscrete: true, isDisabled: true});\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 35,\n      }));\n      expect(foundation.getValue()).toBe(40);\n\n      foundation.handleMove(createMouseEvent('mousedown', {\n        clientX: 30,\n      }));\n      expect(foundation.getValue()).toBe(40);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"hides focus and value indicators after mouse interaction","suites":["MDCSliderFoundation","hide focus setting"],"line":1553,"updatePoint":{"line":1553,"column":64},"code":"    it('hides focus and value indicators after mouse interaction', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 0,\n        isDiscrete: true,\n        hideFocusStylesForPointerEvents: true,\n      });\n\n      // Mousedown on slider should focus the thumb and show the value\n      // indicator.\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 20,\n      }));\n\n      expect(mockAdapter.addThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_FOCUSED, Thumb.END);\n      expect(mockAdapter.addThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n\n      // Mouseup should remove focus from the thumb and hide the value indicator\n      // that were added on mousedown.\n      foundation.handleUp();\n\n      expect(mockAdapter.removeThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_FOCUSED, Thumb.END);\n      expect(mockAdapter.removeThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"keeps focus and value indicators on keyboard interaction","suites":["MDCSliderFoundation","hide focus setting"],"line":1581,"updatePoint":{"line":1581,"column":64},"code":"    it('keeps focus and value indicators on keyboard interaction', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 0,\n        isDiscrete: true,\n        hideFocusStylesForPointerEvents: true,\n      });\n\n      foundation.handleInputFocus(Thumb.END);\n\n      // Thumb should get visible focus and the value indicator should show up.\n      expect(mockAdapter.addThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_FOCUSED, Thumb.END);\n      expect(mockAdapter.addThumbClass)\n          .toHaveBeenCalledWith(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: hides value indicators on mouse leave even when focused","suites":["MDCSliderFoundation","hide focus setting"],"line":1597,"updatePoint":{"line":1597,"column":77},"code":"    it('range slider: hides value indicators on mouse leave even when focused',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           value: 100,\n           valueStart: 0,\n           isDiscrete: true,\n           isRange: true,\n           hideFocusStylesForPointerEvents: true,\n         });\n\n         mockAdapter.isInputFocused.withArgs(Thumb.START).and.returnValue(true);\n\n         foundation.handleThumbMouseenter();\n\n         // Mouseenter should still show the value indicators.\n         expect(mockAdapter.addThumbClass)\n             .toHaveBeenCalledWith(\n                 cssClasses.THUMB_WITH_INDICATOR, Thumb.START);\n         expect(mockAdapter.addThumbClass)\n             .toHaveBeenCalledWith(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n\n         foundation.handleThumbMouseleave();\n\n         // Mouseleave should hide value indicators even though one of the\n         // thumbs is focused.\n         expect(mockAdapter.removeThumbClass)\n             .toHaveBeenCalledWith(\n                 cssClasses.THUMB_WITH_INDICATOR, Thumb.START);\n         expect(mockAdapter.removeThumbClass)\n             .toHaveBeenCalledWith(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: keeps value indicators on mouse leave while dragging","suites":["MDCSliderFoundation","hide focus setting"],"line":1629,"updatePoint":{"line":1629,"column":74},"code":"    it('range slider: keeps value indicators on mouse leave while dragging',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           value: 100,\n           valueStart: 0,\n           isDiscrete: true,\n           isRange: true,\n           hideFocusStylesForPointerEvents: true,\n         });\n\n         foundation.handleThumbMouseenter();\n\n         // Mouseenter should still show the value indicators.\n         expect(mockAdapter.addThumbClass)\n             .toHaveBeenCalledWith(\n                 cssClasses.THUMB_WITH_INDICATOR, Thumb.START);\n         expect(mockAdapter.addThumbClass)\n             .toHaveBeenCalledWith(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n\n         // Mouseleave should keep them while the thumb is being dragged.\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 20,\n         }));\n         foundation.handleThumbMouseleave();\n\n         expect(mockAdapter.removeThumbClass)\n             .not.toHaveBeenCalledWith(\n                 cssClasses.THUMB_WITH_INDICATOR, Thumb.START);\n         expect(mockAdapter.removeThumbClass)\n             .not.toHaveBeenCalledWith(\n                 cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"does not handle secondary pointer events","suites":["MDCSliderFoundation","events: "],"line":1664,"updatePoint":{"line":1664,"column":48},"code":"    it('does not handle secondary pointer events', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        value: 50,\n      });\n      foundation.handlePointerdown(createMouseEvent('mouseEvent', {\n                                     button: 1,  // Non-primary\n                                     clientX: 20,\n                                   }) as PointerEvent);\n\n      expect(mockAdapter.emitInputEvent).not.toHaveBeenCalled();\n      expect(mockAdapter.emitChangeEvent).not.toHaveBeenCalled();\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"single point slider: fires `input` and `change` events for value changes","suites":["MDCSliderFoundation","events: "],"line":1677,"updatePoint":{"line":1677,"column":80},"code":"    it('single point slider: fires `input` and `change` events for value changes',\n       () => {\n         const {foundation, mockAdapter} = setUpAndInit({\n           value: 20,\n           isDiscrete: true,\n         });\n\n         foundation.handleDown(createMouseEvent('mousedown', {\n           clientX: 20,\n         }));\n         expect(mockAdapter.emitInputEvent).not.toHaveBeenCalled();\n         expect(mockAdapter.emitChangeEvent).not.toHaveBeenCalled();\n\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 40,\n         }));\n         expect(mockAdapter.emitInputEvent).toHaveBeenCalledWith(40, Thumb.END);\n         expect(mockAdapter.emitChangeEvent).not.toHaveBeenCalled();\n\n         foundation.handleMove(createMouseEvent('mousemove', {\n           clientX: 55,\n         }));\n         expect(mockAdapter.emitInputEvent).toHaveBeenCalledWith(55, Thumb.END);\n         expect(mockAdapter.emitChangeEvent).not.toHaveBeenCalled();\n\n         mockAdapter.emitInputEvent.calls.reset();\n         foundation.handleUp();\n         expect(mockAdapter.emitInputEvent).not.toHaveBeenCalled();\n         // `change` event should only be fired when value has been committed\n         // (on pointer up).\n         expect(mockAdapter.emitChangeEvent)\n             .toHaveBeenCalledWith(55, Thumb.END);\n       });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: fires `input`/`change` events on start thumb","suites":["MDCSliderFoundation","events: "],"line":1711,"updatePoint":{"line":1711,"column":66},"code":"    it('range slider: fires `input`/`change` events on start thumb', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 20,\n        value: 50,\n        isRange: true,\n        isDiscrete: true,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 20,\n      }));\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 14,\n      }));\n      expect(mockAdapter.emitInputEvent).toHaveBeenCalledWith(14, Thumb.START);\n      expect(mockAdapter.emitChangeEvent).not.toHaveBeenCalled();\n\n      foundation.handleUp();\n      expect(mockAdapter.emitChangeEvent).toHaveBeenCalledWith(14, Thumb.START);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"range slider: fires `input`/`change` events on end thumb","suites":["MDCSliderFoundation","events: "],"line":1732,"updatePoint":{"line":1732,"column":64},"code":"    it('range slider: fires `input`/`change` events on end thumb', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 20,\n        value: 50,\n        isRange: true,\n        isDiscrete: true,\n      });\n\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 50,\n      }));\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 77,\n      }));\n      expect(mockAdapter.emitInputEvent).toHaveBeenCalledWith(77, Thumb.END);\n      expect(mockAdapter.emitChangeEvent).not.toHaveBeenCalled();\n\n      foundation.handleUp();\n      expect(mockAdapter.emitChangeEvent).toHaveBeenCalledWith(77, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"fires `change` and `input` events on input change","suites":["MDCSliderFoundation","events: "],"line":1753,"updatePoint":{"line":1753,"column":57},"code":"    it('fires `change` and `input` events on input change', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 20,\n        value: 50,\n        isRange: true,\n        isDiscrete: true,\n      });\n\n      mockAdapter.getInputValue.withArgs(Thumb.START).and.returnValue(5);\n      foundation.handleInputChange(Thumb.START);\n      expect(mockAdapter.emitChangeEvent).toHaveBeenCalledWith(5, Thumb.START);\n      expect(mockAdapter.emitInputEvent).toHaveBeenCalledWith(5, Thumb.START);\n\n      mockAdapter.getInputValue.withArgs(Thumb.END).and.returnValue(60);\n      foundation.handleInputChange(Thumb.END);\n      expect(mockAdapter.emitChangeEvent).toHaveBeenCalledWith(60, Thumb.END);\n      expect(mockAdapter.emitInputEvent).toHaveBeenCalledWith(60, Thumb.END);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"fires `dragStart`/`dragEnd` events across drag interaction","suites":["MDCSliderFoundation","events: "],"line":1772,"updatePoint":{"line":1772,"column":66},"code":"    it('fires `dragStart`/`dragEnd` events across drag interaction', () => {\n      const {foundation, mockAdapter} = setUpAndInit({\n        valueStart: 20,\n        value: 50,\n        isRange: true,\n        isDiscrete: true,\n      });\n      foundation.handleDown(createMouseEvent('mousedown', {\n        clientX: 20,\n      }));\n      // Move thumb to value 5...\n      foundation.handleMove(createMouseEvent('mousemove', {\n        clientX: 5,\n      }));\n      foundation.handleUp();\n\n      expect(mockAdapter.emitDragStartEvent)\n          .toHaveBeenCalledWith(20, Thumb.START);\n      expect(mockAdapter.emitDragStartEvent).toHaveBeenCalledTimes(1);\n      expect(mockAdapter.emitDragEndEvent).toHaveBeenCalledWith(5, Thumb.START);\n      expect(mockAdapter.emitDragEndEvent).toHaveBeenCalledTimes(1);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-slider/test"},{"name":"attachTo returns a component instance","suites":["MDCSnackbar"],"line":96,"updatePoint":{"line":96,"column":43},"code":"  it('attachTo returns a component instance', () => {\n    expect(MDCSnackbar.attachTo(getFixture()))\n        .toEqual(jasmine.any(MDCSnackbar));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#initialSyncWithDOM registers click handlers for action button and action icon","suites":["MDCSnackbar"],"line":101,"updatePoint":{"line":101,"column":84},"code":"  it('#initialSyncWithDOM registers click handlers for action button and action icon',\n     () => {\n       const {component, mockFoundation, actionButton, actionIcon} =\n           setupTestWithMocks();\n       component.open();\n       emitEvent(actionButton, 'click', {bubbles: true});\n       expect(mockFoundation.handleActionButtonClick)\n           .toHaveBeenCalledWith(jasmine.any(Event));\n       expect(mockFoundation.handleActionButtonClick).toHaveBeenCalledTimes(1);\n       emitEvent(actionIcon, 'click', {bubbles: true});\n       expect(mockFoundation.handleActionIconClick)\n           .toHaveBeenCalledWith(jasmine.any(Event));\n       expect(mockFoundation.handleActionIconClick).toHaveBeenCalledTimes(1);\n       component.destroy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#initialSyncWithDOM registers keydown handler on the root element","suites":["MDCSnackbar"],"line":117,"updatePoint":{"line":117,"column":71},"code":"  it('#initialSyncWithDOM registers keydown handler on the root element',\n     () => {\n       const {component, mockFoundation, root} = setupTestWithMocks();\n       component.open();\n       emitEvent(root, 'keydown');\n       expect(mockFoundation.handleKeyDown)\n           .toHaveBeenCalledWith(jasmine.any(Event));\n       expect(mockFoundation.handleKeyDown).toHaveBeenCalledTimes(1);\n       component.destroy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#destroy deregisters click handler on the root element","suites":["MDCSnackbar"],"line":128,"updatePoint":{"line":128,"column":60},"code":"  it('#destroy deregisters click handler on the root element', () => {\n    const {component, mockFoundation, actionButton, actionIcon} =\n        setupTestWithMocks();\n    component.open();\n    component.destroy();\n    emitEvent(actionButton, 'click', {bubbles: true});\n    expect(mockFoundation.handleActionButtonClick)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n    emitEvent(actionIcon, 'click', {bubbles: true});\n    expect(mockFoundation.handleActionIconClick)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#destroy deregisters keydown handler on the root element","suites":["MDCSnackbar"],"line":141,"updatePoint":{"line":141,"column":62},"code":"  it('#destroy deregisters keydown handler on the root element', () => {\n    const {component, mockFoundation, root} = setupTestWithMocks();\n    component.open();\n    component.destroy();\n    emitEvent(root, 'keydown');\n    expect(mockFoundation.handleKeyDown)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"clicking on surface does nothing","suites":["MDCSnackbar"],"line":150,"updatePoint":{"line":150,"column":38},"code":"  it('clicking on surface does nothing', () => {\n    const {component, mockFoundation, surface} = setupTestWithMocks();\n    component.open();\n    emitEvent(surface, 'click', {bubbles: true});\n    expect(mockFoundation.handleActionButtonClick)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n    expect(mockFoundation.handleActionIconClick)\n        .not.toHaveBeenCalledWith(jasmine.any(Event));\n    expect(mockFoundation.close).not.toHaveBeenCalledWith(jasmine.anything());\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#open announces to screen readers","suites":["MDCSnackbar"],"line":162,"updatePoint":{"line":162,"column":39},"code":"  it('#open announces to screen readers', () => {\n    const {component, announce, label} = setupTest();\n\n    component.open();\n    expect(announce).toHaveBeenCalledWith(label);\n    expect(announce).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#open forwards to MDCSnackbarFoundation#open","suites":["MDCSnackbar"],"line":170,"updatePoint":{"line":170,"column":50},"code":"  it('#open forwards to MDCSnackbarFoundation#open', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n\n    component.open();\n    expect(mockFoundation.open).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#close forwards to MDCSnackbarFoundation#close","suites":["MDCSnackbar"],"line":177,"updatePoint":{"line":177,"column":52},"code":"  it('#close forwards to MDCSnackbarFoundation#close', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n    const reason = 'reason';\n\n    component.open();\n    component.close(reason);\n    expect(mockFoundation.close).toHaveBeenCalledWith(reason);\n\n    component.close();\n    expect(mockFoundation.close).toHaveBeenCalledWith('');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"get isOpen forwards to MDCSnackbarFoundation#isOpen","suites":["MDCSnackbar"],"line":189,"updatePoint":{"line":189,"column":57},"code":"  it('get isOpen forwards to MDCSnackbarFoundation#isOpen', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n\n    component.isOpen;\n    expect(mockFoundation.isOpen).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"get closeOnEscape forwards to MDCSnackbarFoundation#getCloseOnEscape","suites":["MDCSnackbar"],"line":196,"updatePoint":{"line":196,"column":74},"code":"  it('get closeOnEscape forwards to MDCSnackbarFoundation#getCloseOnEscape',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.closeOnEscape;\n       expect(mockFoundation.getCloseOnEscape).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"set closeOnEscape forwards to MDCSnackbarFoundation#setCloseOnEscape","suites":["MDCSnackbar"],"line":204,"updatePoint":{"line":204,"column":74},"code":"  it('set closeOnEscape forwards to MDCSnackbarFoundation#setCloseOnEscape',\n     () => {\n       const {component, mockFoundation} = setupTestWithMocks();\n\n       component.closeOnEscape = false;\n       expect(mockFoundation.setCloseOnEscape).toHaveBeenCalledWith(false);\n       component.closeOnEscape = true;\n       expect(mockFoundation.setCloseOnEscape).toHaveBeenCalledWith(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"get timeoutMs forwards to MDCSnackbarFoundation#getTimeoutMs","suites":["MDCSnackbar"],"line":214,"updatePoint":{"line":214,"column":66},"code":"  it('get timeoutMs forwards to MDCSnackbarFoundation#getTimeoutMs', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n\n    component.timeoutMs;\n    expect(mockFoundation.getTimeoutMs).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"set timeoutMs forwards to MDCSnackbarFoundation#setTimeoutMs","suites":["MDCSnackbar"],"line":221,"updatePoint":{"line":221,"column":66},"code":"  it('set timeoutMs forwards to MDCSnackbarFoundation#setTimeoutMs', () => {\n    const {component, mockFoundation} = setupTestWithMocks();\n\n    component.timeoutMs = numbers.MAX_AUTO_DISMISS_TIMEOUT_MS;\n    expect(mockFoundation.setTimeoutMs)\n        .toHaveBeenCalledWith(numbers.MAX_AUTO_DISMISS_TIMEOUT_MS);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"get labelText returns label textContent","suites":["MDCSnackbar"],"line":229,"updatePoint":{"line":229,"column":45},"code":"  it('get labelText returns label textContent', () => {\n    const {component, label} = setupTestWithMocks();\n\n    expect(component.labelText).toEqual(label.textContent!);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"set labelText forwards to MDCSnackbarFoundation#setActionButtonText","suites":["MDCSnackbar"],"line":235,"updatePoint":{"line":235,"column":73},"code":"  it('set labelText forwards to MDCSnackbarFoundation#setActionButtonText',\n     () => {\n       const {component} = setupTestWithMocks();\n\n       component.labelText = 'foo';\n       expect(component.labelText).toEqual('foo');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"get actionButtonText returns button textContent","suites":["MDCSnackbar"],"line":243,"updatePoint":{"line":243,"column":53},"code":"  it('get actionButtonText returns button textContent', () => {\n    const {component, actionButton} = setupTestWithMocks();\n\n    expect(component.actionButtonText).toEqual(actionButton.textContent!);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"set actionButtonText forwards to MDCSnackbarFoundation#setActionButtonText","suites":["MDCSnackbar"],"line":249,"updatePoint":{"line":249,"column":80},"code":"  it('set actionButtonText forwards to MDCSnackbarFoundation#setActionButtonText',\n     () => {\n       const {component} = setupTestWithMocks();\n\n       component.actionButtonText = 'foo';\n       expect(component.actionButtonText).toEqual('foo');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCSnackbar"],"line":257,"updatePoint":{"line":257,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#removeClass removes a class from the root element","suites":["MDCSnackbar"],"line":263,"updatePoint":{"line":263,"column":63},"code":"  it('adapter#removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#notifyOpening emits ","suites":["MDCSnackbar"],"line":270,"updatePoint":{"line":270,"column":58},"code":"  it(`adapter#notifyOpening emits ${strings.OPENING_EVENT}`, () => {\n    const {component} = setupTest();\n\n    const handler = jasmine.createSpy('notifyOpeningHandler');\n\n    component.listen(strings.OPENING_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyOpening();\n    component.unlisten(strings.OPENING_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#notifyOpened emits ","suites":["MDCSnackbar"],"line":282,"updatePoint":{"line":282,"column":56},"code":"  it(`adapter#notifyOpened emits ${strings.OPENED_EVENT}`, () => {\n    const {component} = setupTest();\n\n    const handler = jasmine.createSpy('notifyOpenedHandler');\n\n    component.listen(strings.OPENED_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyOpened();\n    component.unlisten(strings.OPENED_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(jasmine.anything());\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#notifyClosing emits  without action if passed action is empty string","suites":["MDCSnackbar"],"line":294,"updatePoint":{"line":296,"column":76},"code":"  it(`adapter#notifyClosing emits ${\n         strings\n             .CLOSING_EVENT} without action if passed action is empty string`,\n     () => {\n       const {component} = setupTest();\n\n       const handler = jasmine.createSpy('notifyClosingHandler');\n\n       component.listen(strings.CLOSING_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyClosing('');\n       component.unlisten(strings.CLOSING_EVENT, handler);\n\n       expect(handler).toHaveBeenCalledWith(\n           jasmine.objectContaining({detail: {}}));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#notifyClosing emits  with reason","suites":["MDCSnackbar"],"line":310,"updatePoint":{"line":310,"column":70},"code":"  it(`adapter#notifyClosing emits ${strings.CLOSING_EVENT} with reason`, () => {\n    const {component} = setupTest();\n    const reason = 'reason';\n\n    const handler = jasmine.createSpy('notifyClosingHandler');\n\n    component.listen(strings.CLOSING_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyClosing(reason);\n    component.unlisten(strings.CLOSING_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(\n        jasmine.objectContaining({detail: {reason}}));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#notifyClosed emits  without reason if passed reason is empty string","suites":["MDCSnackbar"],"line":324,"updatePoint":{"line":325,"column":78},"code":"  it(`adapter#notifyClosed emits ${\n         strings.CLOSED_EVENT} without reason if passed reason is empty string`,\n     () => {\n       const {component} = setupTest();\n\n       const handler = jasmine.createSpy('notifyClosedHandler');\n\n       component.listen(strings.CLOSED_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyClosed('');\n       component.unlisten(strings.CLOSED_EVENT, handler);\n\n       expect(handler).toHaveBeenCalledWith(\n           jasmine.objectContaining({detail: {}}));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"adapter#notifyClosed emits  with reason","suites":["MDCSnackbar"],"line":339,"updatePoint":{"line":339,"column":68},"code":"  it(`adapter#notifyClosed emits ${strings.CLOSED_EVENT} with reason`, () => {\n    const {component} = setupTest();\n    const reason = 'reason';\n\n    const handler = jasmine.createSpy('notifyClosedHandler');\n\n    component.listen(strings.CLOSED_EVENT, handler);\n    (component.getDefaultFoundation() as any).adapter.notifyClosed(reason);\n    component.unlisten(strings.CLOSED_EVENT, handler);\n\n    expect(handler).toHaveBeenCalledWith(\n        jasmine.objectContaining({detail: {reason}}));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"exports cssClasses","suites":["MDCSnackbarFoundation"],"line":32,"updatePoint":{"line":32,"column":24},"code":"  it('exports cssClasses', () => {\n    expect(MDCSnackbarFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"exports strings","suites":["MDCSnackbarFoundation"],"line":36,"updatePoint":{"line":36,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCSnackbarFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"exports numbers","suites":["MDCSnackbarFoundation"],"line":40,"updatePoint":{"line":40,"column":21},"code":"  it('exports numbers', () => {\n    expect(MDCSnackbarFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"default adapter returns a complete adapter implementation","suites":["MDCSnackbarFoundation"],"line":44,"updatePoint":{"line":44,"column":63},"code":"  it('default adapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCSnackbarFoundation, [\n      'addClass',\n      'removeClass',\n      'announce',\n      'notifyOpening',\n      'notifyOpened',\n      'notifyClosing',\n      'notifyClosed',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#destroy removes all animating and open classes","suites":["MDCSnackbarFoundation"],"line":62,"updatePoint":{"line":62,"column":53},"code":"  it('#destroy removes all animating and open classes', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.destroy();\n\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPENING);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPEN);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#destroy cancels all timers","suites":["MDCSnackbarFoundation"],"line":73,"updatePoint":{"line":73,"column":33},"code":"  it('#destroy cancels all timers', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.close = jasmine.createSpy('close');\n\n    foundation.open();\n    foundation.destroy();\n\n    // Note: #open uses a combination of rAF and setTimeout due to Firefox\n    // behavior, so we need to wait 2 ticks\n    jasmine.clock().tick(2);\n\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n\n    jasmine.clock().tick(1);\n    expect(foundation.close).not.toHaveBeenCalledWith(strings.REASON_DISMISS);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#open announces text to screen readers","suites":["MDCSnackbarFoundation"],"line":90,"updatePoint":{"line":90,"column":44},"code":"  it('#open announces text to screen readers', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    expect(mockAdapter.announce).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#open adds CSS classes after rAF","suites":["MDCSnackbarFoundation"],"line":97,"updatePoint":{"line":97,"column":38},"code":"  it('#open adds CSS classes after rAF', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n\n    // Note: #open uses a combination of rAF and setTimeout due to Firefox\n    // behavior, so we need to wait 2 ticks\n    jasmine.clock().tick(2);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#close removes CSS classes","suites":["MDCSnackbarFoundation"],"line":109,"updatePoint":{"line":109,"column":32},"code":"  it('#close removes CSS classes', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.close();\n\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#close cancels rAF scheduled by open if still pending","suites":["MDCSnackbarFoundation"],"line":118,"updatePoint":{"line":118,"column":59},"code":"  it('#close cancels rAF scheduled by open if still pending', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    foundation.close();\n\n    // Note: #open uses a combination of rAF and setTimeout due to Firefox\n    // behavior, so we need to wait 2 ticks\n    jasmine.clock().tick(2);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#open adds the opening class to start an animation, and removes it after the animation is done","suites":["MDCSnackbarFoundation"],"line":130,"updatePoint":{"line":130,"column":100},"code":"  it('#open adds the opening class to start an animation, and removes it after the animation is done',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.open();\n       jasmine.clock().tick(101);\n\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.OPENING);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.OPENING);\n       jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.OPENING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#close adds the closing class to start an animation, and removes it after the animation is done","suites":["MDCSnackbarFoundation"],"line":144,"updatePoint":{"line":144,"column":101},"code":"  it('#close adds the closing class to start an animation, and removes it after the animation is done',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n\n       foundation.open();\n       jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n       expect(mockAdapter.removeClass).toHaveBeenCalledTimes(1);\n       foundation.close();\n\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n       jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.CLOSING);\n       // Once in #open, twice in #close and twice in #handleAnimationTimerEnd_\n       expect(mockAdapter.removeClass).toHaveBeenCalledTimes(5);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#open emits \"opening\" and \"opened\" events","suites":["MDCSnackbarFoundation"],"line":161,"updatePoint":{"line":161,"column":47},"code":"  it('#open emits \"opening\" and \"opened\" events', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    jasmine.clock().tick(101);\n\n    expect(mockAdapter.notifyOpening).toHaveBeenCalledTimes(1);\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n    expect(mockAdapter.notifyOpened).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#close emits \"closing\" and \"closed\" events","suites":["MDCSnackbarFoundation"],"line":172,"updatePoint":{"line":172,"column":48},"code":"  it('#close emits \"closing\" and \"closed\" events', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.open();\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n    foundation.close();\n\n    expect(mockAdapter.notifyClosing).toHaveBeenCalledWith('');\n    expect(mockAdapter.notifyClosing).toHaveBeenCalledTimes(1);\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);\n    expect(mockAdapter.notifyClosed).toHaveBeenCalledWith('');\n    expect(mockAdapter.notifyClosed).toHaveBeenCalledTimes(1);\n\n    foundation.open();\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n\n    const reason = 'reason';\n    foundation.close(reason);\n    expect(mockAdapter.notifyClosing).toHaveBeenCalledWith(reason);\n    expect(mockAdapter.notifyClosing).toHaveBeenCalledTimes(2);\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);\n    expect(mockAdapter.notifyClosed).toHaveBeenCalledWith(reason);\n    expect(mockAdapter.notifyClosed).toHaveBeenCalledTimes(2);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#close does nothing if the snackbar is already closed","suites":["MDCSnackbarFoundation"],"line":197,"updatePoint":{"line":197,"column":59},"code":"  it('#close does nothing if the snackbar is already closed', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.close();\n    jasmine.clock().tick(1);\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);\n    expect(mockAdapter.removeClass).not.toHaveBeenCalledWith(cssClasses.OPEN);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.OPENING);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.CLOSING);\n    expect(mockAdapter.notifyClosing).not.toHaveBeenCalledWith('');\n    expect(mockAdapter.notifyClosed).not.toHaveBeenCalledWith('');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#open automatically dismisses snackbar after timeout","suites":["MDCSnackbarFoundation"],"line":211,"updatePoint":{"line":211,"column":58},"code":"  it('#open automatically dismisses snackbar after timeout', () => {\n    const {foundation} = setupTest();\n    foundation.close = jasmine.createSpy('close');\n\n    foundation.open();\n\n    // Note: #open uses a combination of rAF and setTimeout due to Firefox\n    // behavior, so we need to wait 2 ticks\n    jasmine.clock().tick(2);\n\n    // Auto-dismiss timeout\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n    jasmine.clock().tick(foundation.getTimeoutMs());\n\n    expect(foundation.close).toHaveBeenCalledWith(strings.REASON_DISMISS);\n    expect(foundation.close).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#snackbar remains open for indefinite timeout","suites":["MDCSnackbarFoundation"],"line":229,"updatePoint":{"line":229,"column":51},"code":"  it('#snackbar remains open for indefinite timeout', () => {\n    const {foundation} = setupTest();\n    foundation.close = jasmine.createSpy('close');\n    foundation.setTimeoutMs(-1);\n\n    foundation.open();\n\n    // Note: #open uses a combination of rAF and setTimeout due to Firefox\n    // behavior, so we need to wait 2 ticks\n    jasmine.clock().tick(2);\n\n    // Wait for max timeout and ensure that close has not been called\n    jasmine.clock().tick(numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n    jasmine.clock().tick(numbers.MAX_AUTO_DISMISS_TIMEOUT_MS);\n\n    expect(foundation.close).not.toHaveBeenCalledWith(strings.REASON_DISMISS);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#isOpen returns false when the snackbar has never been opened","suites":["MDCSnackbarFoundation"],"line":247,"updatePoint":{"line":247,"column":67},"code":"  it('#isOpen returns false when the snackbar has never been opened', () => {\n    const {foundation} = setupTest();\n    expect(foundation.isOpen()).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#isOpen returns true when the snackbar is open","suites":["MDCSnackbarFoundation"],"line":252,"updatePoint":{"line":252,"column":52},"code":"  it('#isOpen returns true when the snackbar is open', () => {\n    const {foundation} = setupTest();\n\n    foundation.open();\n\n    expect(foundation.isOpen()).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#isOpen returns false when the snackbar is closed after being open","suites":["MDCSnackbarFoundation"],"line":260,"updatePoint":{"line":260,"column":72},"code":"  it('#isOpen returns false when the snackbar is closed after being open',\n     () => {\n       const {foundation} = setupTest();\n\n       foundation.open();\n       foundation.close();\n\n       expect(foundation.isOpen()).toBe(false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"escape keydown closes snackbar when closeOnEscape is true (via key property)","suites":["MDCSnackbarFoundation"],"line":270,"updatePoint":{"line":270,"column":82},"code":"  it('escape keydown closes snackbar when closeOnEscape is true (via key property)',\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handleKeyDown({key: 'Escape'} as KeyboardEvent);\n\n       expect(foundation.close).toHaveBeenCalledWith(strings.REASON_DISMISS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"escape keydown closes snackbar when closeOnEscape is true (via keyCode property)","suites":["MDCSnackbarFoundation"],"line":281,"updatePoint":{"line":281,"column":86},"code":"  it('escape keydown closes snackbar when closeOnEscape is true (via keyCode property)',\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handleKeyDown({keyCode: 27} as KeyboardEvent);\n\n       expect(foundation.close).toHaveBeenCalledWith(strings.REASON_DISMISS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"escape keydown does not close snackbar when closeOnEscape is false (via key property)","suites":["MDCSnackbarFoundation"],"line":292,"updatePoint":{"line":292,"column":91},"code":"  it('escape keydown does not close snackbar when closeOnEscape is false (via key property)',\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n       foundation.setCloseOnEscape(false);\n\n       foundation.open();\n       foundation.handleKeyDown({key: 'Escape'} as KeyboardEvent);\n\n       expect(foundation.close)\n           .not.toHaveBeenCalledWith(strings.REASON_DISMISS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"escape keydown does not close snackbar when closeOnEscape is false (via keyCode property)","suites":["MDCSnackbarFoundation"],"line":305,"updatePoint":{"line":305,"column":95},"code":"  it('escape keydown does not close snackbar when closeOnEscape is false (via keyCode property)',\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n       foundation.setCloseOnEscape(false);\n\n       foundation.open();\n       foundation.handleKeyDown({keyCode: 27} as KeyboardEvent);\n\n       expect(foundation.close)\n           .not.toHaveBeenCalledWith(strings.REASON_DISMISS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"keydown does nothing when key other than escape is pressed","suites":["MDCSnackbarFoundation"],"line":318,"updatePoint":{"line":318,"column":64},"code":"  it('keydown does nothing when key other than escape is pressed', () => {\n    const {foundation} = setupTest();\n    foundation.close = jasmine.createSpy('close');\n\n    foundation.open();\n    foundation.handleKeyDown({key: 'Enter'} as KeyboardEvent);\n\n    expect(foundation.close).not.toHaveBeenCalledWith(strings.REASON_DISMISS);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#handleActionButtonClick closes the snackbar with reason \"\"","suites":["MDCSnackbarFoundation"],"line":328,"updatePoint":{"line":329,"column":32},"code":"  it(`#handleActionButtonClick closes the snackbar with reason \"${\n         strings.REASON_ACTION}\"`,\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handleActionButtonClick({} as MouseEvent);\n\n       expect(foundation.close).toHaveBeenCalledWith(strings.REASON_ACTION);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#handleActionIconClick closes the snackbar with reason \"\"","suites":["MDCSnackbarFoundation"],"line":340,"updatePoint":{"line":341,"column":33},"code":"  it(`#handleActionIconClick closes the snackbar with reason \"${\n         strings.REASON_DISMISS}\"`,\n     () => {\n       const {foundation} = setupTest();\n       foundation.close = jasmine.createSpy('close');\n\n       foundation.open();\n       foundation.handleActionIconClick({} as MouseEvent);\n\n       expect(foundation.close).toHaveBeenCalledWith(strings.REASON_DISMISS);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#setTimeoutMs throws an error for values outside the min/max range","suites":["MDCSnackbarFoundation"],"line":352,"updatePoint":{"line":352,"column":72},"code":"  it('#setTimeoutMs throws an error for values outside the min/max range',\n     () => {\n       const {foundation} = setupTest();\n       expect(\n           () =>\n               foundation.setTimeoutMs(numbers.MIN_AUTO_DISMISS_TIMEOUT_MS - 1))\n           .toThrow();\n       expect(\n           () =>\n               foundation.setTimeoutMs(numbers.MAX_AUTO_DISMISS_TIMEOUT_MS + 1))\n           .toThrow();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#getTimeoutMs returns the default value","suites":["MDCSnackbarFoundation"],"line":365,"updatePoint":{"line":365,"column":45},"code":"  it('#getTimeoutMs returns the default value', () => {\n    const {foundation} = setupTest();\n    expect(foundation.getTimeoutMs())\n        .toEqual(numbers.DEFAULT_AUTO_DISMISS_TIMEOUT_MS);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#getTimeoutMs returns the value set by setTimeoutMs","suites":["MDCSnackbarFoundation"],"line":371,"updatePoint":{"line":371,"column":57},"code":"  it('#getTimeoutMs returns the value set by setTimeoutMs', () => {\n    const {foundation} = setupTest();\n    const timeoutMs = numbers.MAX_AUTO_DISMISS_TIMEOUT_MS - 1;\n    foundation.setTimeoutMs(timeoutMs);\n    expect(foundation.getTimeoutMs()).toEqual(timeoutMs);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#getCloseOnEscape returns the value set by setCloseOnEscape","suites":["MDCSnackbarFoundation"],"line":378,"updatePoint":{"line":378,"column":65},"code":"  it('#getCloseOnEscape returns the value set by setCloseOnEscape', () => {\n    const {foundation} = setupTest();\n    foundation.setCloseOnEscape(false);\n    expect(foundation.getCloseOnEscape()).toEqual(false);\n    foundation.setCloseOnEscape(true);\n    expect(foundation.getCloseOnEscape()).toEqual(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#announce temporarily disables ARIA attributes and then restores them","suites":["MDCSnackbar - util"],"line":34,"updatePoint":{"line":34,"column":75},"code":"  it('#announce temporarily disables ARIA attributes and then restores them',\n     () => {\n       const wrapper = document.createElement('div');\n       wrapper.innerHTML = `\n        <div>\n          <div class=\"aria\" role=\"status\" aria-live=\"polite\">\n            <div class=\"label\"></div>\n          </div>\n        </div>`;\n       const el = wrapper.firstElementChild as HTMLElement;\n       wrapper.removeChild(el);\n       const fixture = el;\n\n       const ariaEl = fixture.querySelector('.aria')!;\n       const labelEl = fixture.querySelector('.label')!;\n\n       const labelText = 'Foo';\n       labelEl.textContent = labelText;\n\n       util.announce(ariaEl, labelEl);\n\n       // Trim to remove `&nbsp;` (see comment in util.ts)\n       expect(labelEl.textContent.trim()).toEqual('');\n       expect(ariaEl.getAttribute('aria-live')).toEqual('off');\n\n       jasmine.clock().tick(ARIA_LIVE_DELAY_MS);\n\n       expect(labelEl.textContent).toEqual(labelText);\n       expect(ariaEl.getAttribute('aria-live')).toEqual('polite');\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#announce prevents flicker by displaying label text on ::before pseudo-element and then removing it","suites":["MDCSnackbar - util"],"line":65,"updatePoint":{"line":65,"column":105},"code":"  it('#announce prevents flicker by displaying label text on ::before pseudo-element and then removing it',\n     () => {\n       const wrapper = document.createElement('div');\n       wrapper.innerHTML = `\n        <div>\n          <div class=\"aria\" role=\"status\" aria-live=\"polite\">\n            <div class=\"label\"></div>\n          </div>\n        </div>`;\n       const el = wrapper.firstElementChild as HTMLElement;\n       wrapper.removeChild(el);\n       const fixture = el;\n\n       const ariaEl = fixture.querySelector('.aria')!;\n       const labelEl = fixture.querySelector('.label')!;\n\n       const labelText = 'Foo';\n       labelEl.textContent = labelText;\n\n       util.announce(ariaEl, labelEl);\n\n       expect(labelEl.getAttribute(ARIA_LIVE_LABEL_TEXT_ATTR))\n           .toEqual(labelText);\n\n       jasmine.clock().tick(ARIA_LIVE_DELAY_MS);\n\n       expect(labelEl.getAttribute(ARIA_LIVE_LABEL_TEXT_ATTR)).toEqual(null);\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#announce second argument is optional","suites":["MDCSnackbar - util"],"line":94,"updatePoint":{"line":94,"column":43},"code":"  it('#announce second argument is optional', () => {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = `\n      <div>\n        <div class=\"aria label\" role=\"status\" aria-live=\"polite\"></div>\n      </div>`;\n    const el = wrapper.firstElementChild as HTMLElement;\n    wrapper.removeChild(el);\n    const fixture = el;\n\n    const ariaEl = fixture.querySelector('.aria')!;\n\n    const labelText = 'Foo';\n    ariaEl.textContent = labelText;\n\n    util.announce(ariaEl);\n\n    // Trim to remove `&nbsp;` (see comment in util.ts)\n    expect(ariaEl.textContent.trim()).toEqual('');\n    expect(ariaEl.getAttribute(ARIA_LIVE_LABEL_TEXT_ATTR)).toEqual(labelText);\n    expect(ariaEl.getAttribute('aria-live')).toEqual('off');\n\n    jasmine.clock().tick(ARIA_LIVE_DELAY_MS);\n\n    expect(ariaEl.textContent).toEqual(labelText);\n    expect(ariaEl.getAttribute(ARIA_LIVE_LABEL_TEXT_ATTR)).toBeNull();\n    expect(ariaEl.getAttribute('aria-live')).toEqual('polite');\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#announce does nothing if textContent is empty","suites":["MDCSnackbar - util"],"line":123,"updatePoint":{"line":123,"column":52},"code":"  it('#announce does nothing if textContent is empty', () => {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = `\n      <div>\n        <div class=\"aria\" role=\"status\" aria-live=\"polite\">\n          <div class=\"label\"></div>\n        </div>\n      </div>`;\n    const el = wrapper.firstElementChild as HTMLElement;\n    wrapper.removeChild(el);\n    const fixture = el;\n\n    const ariaEl = fixture.querySelector('.aria')!;\n    const labelEl = fixture.querySelector('.label')!;\n\n    util.announce(ariaEl, labelEl);\n\n    expect(labelEl.textContent!.trim()).toEqual('');\n    expect(labelEl.getAttribute(ARIA_LIVE_LABEL_TEXT_ATTR)).toBeNull();\n    expect(ariaEl.getAttribute('aria-live')).toEqual('polite');\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"#announce does nothing if aria-live was not present","suites":["MDCSnackbar - util"],"line":145,"updatePoint":{"line":145,"column":57},"code":"  it('#announce does nothing if aria-live was not present', () => {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = `\n      <div>\n        <div class=\"aria label\" role=\"status\">Foo</div>\n      </div>`;\n    const el = wrapper.firstElementChild as HTMLElement;\n    wrapper.removeChild(el);\n    const fixture = el;\n    const ariaEl = fixture.querySelector('.aria')!;\n\n    util.announce(ariaEl);\n\n    expect(ariaEl.getAttribute('aria-live')).toBeNull();\n    expect(ariaEl.getAttribute(ARIA_LIVE_LABEL_TEXT_ATTR)).toBeNull();\n\n    jasmine.clock().tick(ARIA_LIVE_DELAY_MS);\n\n    expect(ariaEl.getAttribute('aria-live')).toBeNull();\n    expect(ariaEl.getAttribute(ARIA_LIVE_LABEL_TEXT_ATTR)).toBeNull();\n  });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-snackbar/test"},{"name":"attachTo initializes and returns a MDCSwitch instance","suites":["MDCSwitch"],"line":97,"updatePoint":{"line":97,"column":59},"code":"  it('attachTo initializes and returns a MDCSwitch instance', () => {\n    const {component} = setupTest();\n    expect(component instanceof MDCSwitch).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#initialSyncWithDOM() calls foundation initFromDOM()","suites":["MDCSwitch"],"line":102,"updatePoint":{"line":102,"column":58},"code":"  it('#initialSyncWithDOM() calls foundation initFromDOM()', () => {\n    const {foundation} = setupTest();\n    expect(foundation.initFromDOM).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#initialSyncWithDOM() adds foundation.handleClick listener to root","suites":["MDCSwitch"],"line":107,"updatePoint":{"line":107,"column":72},"code":"  it('#initialSyncWithDOM() adds foundation.handleClick listener to root',\n     () => {\n       const {root, foundation} = setupTest();\n       root.click();\n       expect(foundation.handleClick).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#destroy() removes foundation.handleClick listener from root","suites":["MDCSwitch"],"line":114,"updatePoint":{"line":114,"column":66},"code":"  it('#destroy() removes foundation.handleClick listener from root', () => {\n    const {component, root, foundation} = setupTest();\n    component.destroy();\n    root.click();\n    expect(foundation.handleClick).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"adapter.addClass() adds classes to root","suites":["MDCSwitch"],"line":121,"updatePoint":{"line":121,"column":45},"code":"  it('adapter.addClass() adds classes to root', () => {\n    const {root, adapter} = setupTest();\n    expect(Array.from(root.classList)).not.toContain(CssClasses.PROCESSING);\n    adapter.addClass(CssClasses.PROCESSING);\n    expect(Array.from(root.classList)).toContain(CssClasses.PROCESSING);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"adapter.hasClass() checks classes on root","suites":["MDCSwitch"],"line":128,"updatePoint":{"line":128,"column":47},"code":"  it('adapter.hasClass() checks classes on root', () => {\n    const {root, adapter} = setupTest();\n    expect(adapter.hasClass(CssClasses.PROCESSING))\n        .toBe(false, 'returns false when class does not exist');\n    root.classList.add(CssClasses.PROCESSING);\n    expect(adapter.hasClass(CssClasses.PROCESSING))\n        .toBe(true, 'returns true when class exists');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"adapter.isDisabled() returns root disabled property","suites":["MDCSwitch"],"line":137,"updatePoint":{"line":137,"column":57},"code":"  it('adapter.isDisabled() returns root disabled property', () => {\n    const {root, adapter} = setupTest();\n    root.disabled = true;\n    expect(adapter.isDisabled()).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"adapter.removeClass() removes classes from root","suites":["MDCSwitch"],"line":143,"updatePoint":{"line":143,"column":53},"code":"  it('adapter.removeClass() removes classes from root', () => {\n    const {root, adapter} = setupTest();\n    root.classList.add(CssClasses.PROCESSING);\n    adapter.removeClass(CssClasses.PROCESSING);\n    expect(Array.from(root.classList)).not.toContain(CssClasses.PROCESSING);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"adapter.setAriaChecked() sets aria-checked attribute on root","suites":["MDCSwitch"],"line":150,"updatePoint":{"line":150,"column":66},"code":"  it('adapter.setAriaChecked() sets aria-checked attribute on root', () => {\n    const {root, adapter} = setupTest();\n    adapter.setAriaChecked('true');\n    expect(root.getAttribute('aria-checked')).toBe('true');\n    adapter.setAriaChecked('false');\n    expect(root.getAttribute('aria-checked')).toBe('false');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"adapter.state should be the component instance","suites":["MDCSwitch"],"line":158,"updatePoint":{"line":158,"column":52},"code":"  it('adapter.state should be the component instance', () => {\n    const {adapter, component} = setupTest();\n    expect(adapter.state).toBe(component);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#handleClick() toggles selected","suites":["MDCSwitchFoundation"],"line":37,"updatePoint":{"line":37,"column":37},"code":"  it('#handleClick() toggles selected', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    foundation.handleClick();\n    expect(mockAdapter.state.selected)\n        .toBe(true, 'toggled from initial false to true');\n    foundation.handleClick();\n    expect(mockAdapter.state.selected).toBe(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#handleClick() does nothing when disabled","suites":["MDCSwitchFoundation"],"line":47,"updatePoint":{"line":47,"column":47},"code":"  it('#handleClick() does nothing when disabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    mockAdapter.state.disabled = true;\n    foundation.handleClick();\n    expect(mockAdapter.state.selected).toBe(false, 'should not toggle to true');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#stopProcessingIfDisabled() sets processing to false when disabling","suites":["MDCSwitchFoundation"],"line":55,"updatePoint":{"line":55,"column":73},"code":"  it('#stopProcessingIfDisabled() sets processing to false when disabling',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       mockAdapter.state.processing = true;\n       mockAdapter.state.disabled = true;\n       expect(mockAdapter.state.processing)\n           .toBe(false, 'processing set to false when disabled = true');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#stopProcessingIfDisabled() disallows processing if already disabled","suites":["MDCSwitchFoundation"],"line":65,"updatePoint":{"line":65,"column":74},"code":"  it('#stopProcessingIfDisabled() disallows processing if already disabled',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       mockAdapter.state.disabled = true;\n       mockAdapter.state.processing = true;\n       expect(mockAdapter.state.processing)\n           .toBe(\n               false,\n               'processing should be set back to false when already disabled');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#stopProcessingIfDisabled() allows processing if enabled","suites":["MDCSwitchFoundation"],"line":77,"updatePoint":{"line":77,"column":62},"code":"  it('#stopProcessingIfDisabled() allows processing if enabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n    mockAdapter.state.processing = true;\n    expect(mockAdapter.state.processing)\n        .toBe(true, 'should be true when not disabled');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#initFromDOM() sets selected if adapter has class","suites":["MDCSwitchRenderFoundation"],"line":101,"updatePoint":{"line":101,"column":55},"code":"  it('#initFromDOM() sets selected if adapter has class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    // TODO(b/183749291): remove explicit arg type when Jasmine is updated\n    mockAdapter.hasClass.and.callFake(\n        (name: CssClasses) => name === CssClasses.SELECTED);\n    foundation.init();\n    foundation.initFromDOM();\n    expect(mockAdapter.state.selected).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#initFromDOM() ensures aria-checked is set in case it does not exist","suites":["MDCSwitchRenderFoundation"],"line":111,"updatePoint":{"line":111,"column":74},"code":"  it('#initFromDOM() ensures aria-checked is set in case it does not exist',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       foundation.initFromDOM();\n       // Default selected is false, aria-checked should be false\n       expect(mockAdapter.setAriaChecked).toHaveBeenCalledWith('false');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#initFromDOM() sets disabled from adapter.isDisabled","suites":["MDCSwitchRenderFoundation"],"line":120,"updatePoint":{"line":120,"column":58},"code":"  it('#initFromDOM() sets disabled from adapter.isDisabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.isDisabled.and.returnValue(true);\n    foundation.init();\n    foundation.initFromDOM();\n    expect(mockAdapter.state.disabled).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#initFromDOM() sets processing if adapter has class","suites":["MDCSwitchRenderFoundation"],"line":128,"updatePoint":{"line":128,"column":57},"code":"  it('#initFromDOM() sets processing if adapter has class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    // TODO(b/183749291): remove explicit arg type when Jasmine is updated\n    mockAdapter.hasClass.and.callFake(\n        (name: CssClasses) => name === CssClasses.PROCESSING);\n    foundation.init();\n    foundation.initFromDOM();\n    expect(mockAdapter.state.processing).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#initFromDOM() stops processing if adapter is disabled and has processing class","suites":["MDCSwitchRenderFoundation"],"line":138,"updatePoint":{"line":138,"column":85},"code":"  it('#initFromDOM() stops processing if adapter is disabled and has processing class',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       // TODO(b/183749291): remove explicit arg type when Jasmine is updated\n       mockAdapter.hasClass.and.callFake(\n           (name: CssClasses) => name === CssClasses.PROCESSING);\n       mockAdapter.isDisabled.and.returnValue(true);\n       foundation.init();\n       foundation.initFromDOM();\n       expect(mockAdapter.state.processing)\n           .toBe(\n               false,\n               'should not be processing if adapter.isDisabled() returns false');\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.PROCESSING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#onDisabledChange() calls adapter.setDisabled when disabled changes","suites":["MDCSwitchRenderFoundation"],"line":155,"updatePoint":{"line":155,"column":73},"code":"  it('#onDisabledChange() calls adapter.setDisabled when disabled changes',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       mockAdapter.state.disabled = true;\n       expect(mockAdapter.setDisabled).toHaveBeenCalledWith(true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#onProcessingChange() updates  when processing changes","suites":["MDCSwitchRenderFoundation"],"line":163,"updatePoint":{"line":164,"column":55},"code":"  it(`#onProcessingChange() updates ${\n         CssClasses.PROCESSING} when processing changes`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       mockAdapter.state.processing = true;\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.PROCESSING);\n       mockAdapter.state.processing = false;\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.PROCESSING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"#onSelectedChange() calls adapter.setAriaChecked when selected changes","suites":["MDCSwitchRenderFoundation"],"line":175,"updatePoint":{"line":175,"column":76},"code":"  it('#onSelectedChange() calls adapter.setAriaChecked when selected changes',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.init();\n       mockAdapter.state.selected = true;\n       expect(mockAdapter.setAriaChecked).toHaveBeenCalledWith('true');\n       mockAdapter.state.selected = false;\n       expect(mockAdapter.setAriaChecked).toHaveBeenCalledWith('false');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-switch/test"},{"name":"attachTo returns an MDCTabBar instance","suites":["MDCTabBar"],"line":59,"updatePoint":{"line":59,"column":44},"code":"  it('attachTo returns an MDCTabBar instance', () => {\n    expect(MDCTabBar.attachTo(getFixture()) instanceof MDCTabBar).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#constructor instantiates child tab components","suites":["MDCTabBar"],"line":85,"updatePoint":{"line":85,"column":52},"code":"  it('#constructor instantiates child tab components', () => {\n    const root = getFixture();\n    const component = new MDCTabBar(\n        root, undefined, () => new FakeTab(), () => new FakeTabScroller());\n    expect((component as any).tabList.length).toEqual(3);\n    expect((component as any).tabList[0]).toEqual(jasmine.any(FakeTab));\n    expect((component as any).tabList[1]).toEqual(jasmine.any(FakeTab));\n    expect((component as any).tabList[2]).toEqual(jasmine.any(FakeTab));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#constructor instantiates child tab scroller component","suites":["MDCTabBar"],"line":95,"updatePoint":{"line":95,"column":60},"code":"  it('#constructor instantiates child tab scroller component', () => {\n    const root = getFixture();\n    const component = new MDCTabBar(\n        root, undefined, () => new FakeTab(), () => new FakeTabScroller());\n    expect((component as any).tabScroller)\n        .toEqual(jasmine.any(FakeTabScroller));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#destroy cleans up child tab components","suites":["MDCTabBar"],"line":103,"updatePoint":{"line":103,"column":45},"code":"  it('#destroy cleans up child tab components', () => {\n    const root = getFixture();\n    const component = new MDCTabBar(\n        root, undefined, () => new FakeTab(), () => new FakeTabScroller());\n    component.destroy();\n    expect((component as any).tabList[0].destroy).toHaveBeenCalled();\n    expect((component as any).tabList[1].destroy).toHaveBeenCalled();\n    expect((component as any).tabList[2].destroy).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"focusOnActivate setter updates setting on all tabs","suites":["MDCTabBar"],"line":128,"updatePoint":{"line":128,"column":56},"code":"  it('focusOnActivate setter updates setting on all tabs', () => {\n    const {component} = setupTest();\n\n    component.focusOnActivate = false;\n    (component as any)\n        .tabList.forEach(\n            (tab: MDCTab) => expect(tab.focusOnActivate).toBe(false));\n\n    component.focusOnActivate = true;\n    (component as any)\n        .tabList.forEach(\n            (tab: MDCTab) => expect(tab.focusOnActivate).toBe(true));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"useAutomaticActivation setter calls foundation#setUseAutomaticActivation","suites":["MDCTabBar"],"line":142,"updatePoint":{"line":142,"column":78},"code":"  it('useAutomaticActivation setter calls foundation#setUseAutomaticActivation',\n     () => {\n       const {component, mockFoundation} = setupMockFoundationTest();\n\n       component.useAutomaticActivation = false;\n       expect(mockFoundation.setUseAutomaticActivation)\n           .toHaveBeenCalledWith(false);\n\n       component.useAutomaticActivation = true;\n       expect(mockFoundation.setUseAutomaticActivation)\n           .toHaveBeenCalledWith(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.scrollTo calls scrollTo of the child tab scroller","suites":["MDCTabBar"],"line":155,"updatePoint":{"line":155,"column":64},"code":"  it('#adapter.scrollTo calls scrollTo of the child tab scroller', () => {\n    const {component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.scrollTo(123);\n    expect((component as any).tabScroller.scrollTo).toHaveBeenCalledWith(123);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.incrementScroll calls incrementScroll of the child tab scroller","suites":["MDCTabBar"],"line":161,"updatePoint":{"line":161,"column":78},"code":"  it('#adapter.incrementScroll calls incrementScroll of the child tab scroller',\n     () => {\n       const {component} = setupTest();\n       (component.getDefaultFoundation() as any).adapter.incrementScroll(123);\n       expect((component as any).tabScroller.incrementScroll)\n           .toHaveBeenCalledWith(123);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getScrollPosition calls getScrollPosition of the child tab scroller","suites":["MDCTabBar"],"line":169,"updatePoint":{"line":169,"column":82},"code":"  it('#adapter.getScrollPosition calls getScrollPosition of the child tab scroller',\n     () => {\n       const {component} = setupTest();\n       (component.getDefaultFoundation() as any).adapter.getScrollPosition();\n       expect((component as any).tabScroller.getScrollPosition)\n           .toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getScrollContentWidth calls getScrollContentWidth of the child tab scroller","suites":["MDCTabBar"],"line":177,"updatePoint":{"line":177,"column":90},"code":"  it('#adapter.getScrollContentWidth calls getScrollContentWidth of the child tab scroller',\n     () => {\n       const {component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.getScrollContentWidth();\n       expect((component as any).tabScroller.getScrollContentWidth)\n           .toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getOffsetWidth returns getOffsetWidth of the root element","suites":["MDCTabBar"],"line":186,"updatePoint":{"line":186,"column":72},"code":"  it('#adapter.getOffsetWidth returns getOffsetWidth of the root element',\n     () => {\n       const {component, root} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any)\n               .adapter.getOffsetWidth() === (root as HTMLElement).offsetWidth)\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.isRTL returns the RTL state of the root element","suites":["MDCTabBar"],"line":195,"updatePoint":{"line":195,"column":62},"code":"  it('#adapter.isRTL returns the RTL state of the root element', () => {\n    const {component, root} = setupTest();\n    document.body.appendChild(root);\n    document.body.setAttribute('dir', 'rtl');\n    expect((component.getDefaultFoundation() as any).adapter.isRTL() === true)\n        .toBe(true);\n    document.body.removeChild(root);\n    document.body.removeAttribute('dir');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.activateTabAtIndex calls activate on the tab at the index","suites":["MDCTabBar"],"line":205,"updatePoint":{"line":205,"column":72},"code":"  it('#adapter.activateTabAtIndex calls activate on the tab at the index',\n     () => {\n       const {component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.activateTabAtIndex(2, {});\n       expect((component as any).tabList[2].activate).toHaveBeenCalledWith({});\n       expect((component as any).tabList[2].activate).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.deactivateTabAtIndex calls deactivate on the tab at the index","suites":["MDCTabBar"],"line":214,"updatePoint":{"line":214,"column":76},"code":"  it('#adapter.deactivateTabAtIndex calls deactivate on the tab at the index',\n     () => {\n       const {component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.deactivateTabAtIndex(1);\n       expect((component as any).tabList[1].deactivate)\n           .toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getTabIndicatorClientRectAtIndex calls computeIndicatorClientRect on the tab at the index","suites":["MDCTabBar"],"line":223,"updatePoint":{"line":223,"column":104},"code":"  it('#adapter.getTabIndicatorClientRectAtIndex calls computeIndicatorClientRect on the tab at the index',\n     () => {\n       const {component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.getTabIndicatorClientRectAtIndex(0);\n       expect((component as any).tabList[0].computeIndicatorClientRect)\n           .toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getTabDimensionsAtIndex calls computeDimensions on the tab at the index","suites":["MDCTabBar"],"line":232,"updatePoint":{"line":232,"column":86},"code":"  it('#adapter.getTabDimensionsAtIndex calls computeDimensions on the tab at the index',\n     () => {\n       const {component} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.getTabDimensionsAtIndex(0);\n       expect((component as any).tabList[0].computeDimensions)\n           .toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getPreviousActiveTabIndex returns the index of the active tab","suites":["MDCTabBar"],"line":241,"updatePoint":{"line":241,"column":76},"code":"  it('#adapter.getPreviousActiveTabIndex returns the index of the active tab',\n     () => {\n       const {component} = setupTest();\n       (component as any).tabList[1].active = true;\n       expect(\n           (component.getDefaultFoundation() as any)\n               .adapter.getPreviousActiveTabIndex() === 1)\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getIndexOfTabById returns the index of the given tab","suites":["MDCTabBar"],"line":251,"updatePoint":{"line":251,"column":67},"code":"  it('#adapter.getIndexOfTabById returns the index of the given tab', () => {\n    const {component} = setupTest();\n    const tab = (component as any).tabList[2];\n    expect(\n        (component.getDefaultFoundation() as any)\n            .adapter.getIndexOfTabById(tab.id) === 2)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.getTabListLength returns the length of the tab list","suites":["MDCTabBar"],"line":260,"updatePoint":{"line":260,"column":66},"code":"  it('#adapter.getTabListLength returns the length of the tab list', () => {\n    const {component} = setupTest();\n    expect(\n        (component.getDefaultFoundation() as any)\n            .adapter.getTabListLength() === 3)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#adapter.notifyTabActivated emits the  event","suites":["MDCTabBar"],"line":268,"updatePoint":{"line":269,"column":63},"code":"  it(`#adapter.notifyTabActivated emits the ${\n         MDCTabBarFoundation.strings.TAB_ACTIVATED_EVENT} event`,\n     () => {\n       const {component, root} = setupTest();\n       const handler = jasmine.createSpy('');\n       root.addEventListener(\n           MDCTabBarFoundation.strings.TAB_ACTIVATED_EVENT, handler);\n       (component.getDefaultFoundation() as any)\n           .adapter.notifyTabActivated(66);\n       expect(handler).toHaveBeenCalledWith(\n           jasmine.objectContaining({detail: {index: 66}}));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab calls activateTab","suites":["MDCTabBar"],"line":281,"updatePoint":{"line":281,"column":36},"code":"  it('#activateTab calls activateTab', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.activateTab(1);\n    expect(mockFoundation.activateTab).toHaveBeenCalledWith(1);\n    expect(mockFoundation.activateTab).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView calls scrollIntoView","suites":["MDCTabBar"],"line":288,"updatePoint":{"line":288,"column":42},"code":"  it('#scrollIntoView calls scrollIntoView', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.scrollIntoView(1);\n    expect(mockFoundation.scrollIntoView).toHaveBeenCalledWith(1);\n    expect(mockFoundation.scrollIntoView).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"on , call handleTabInteraction","suites":["MDCTabBar"],"line":295,"updatePoint":{"line":296,"column":78},"code":"  it(`on ${\n         MDCTabFoundation.strings.INTERACTED_EVENT}, call handleTabInteraction`,\n     () => {\n       const {root, mockFoundation} = setupMockFoundationTest();\n       const tab = root.querySelector(\n                       MDCTabBarFoundation.strings.TAB_SELECTOR) as HTMLElement;\n       emitEvent(tab, MDCTabFoundation.strings.INTERACTED_EVENT, {\n         bubbles: true,\n       });\n       expect(mockFoundation.handleTabInteraction)\n           .toHaveBeenCalledWith(jasmine.anything());\n       expect(mockFoundation.handleTabInteraction).toHaveBeenCalledTimes(1);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"on keydown, call handleKeyDown","suites":["MDCTabBar"],"line":309,"updatePoint":{"line":309,"column":36},"code":"  it('on keydown, call handleKeyDown', () => {\n    const {root, mockFoundation} = setupMockFoundationTest();\n    emitEvent(root, 'keydown');\n    expect(mockFoundation.handleKeyDown)\n        .toHaveBeenCalledWith(jasmine.anything());\n    expect(mockFoundation.handleKeyDown).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"exports cssClasses","suites":["MDCTabBarFoundation"],"line":35,"updatePoint":{"line":35,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCTabBarFoundation).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"exports strings","suites":["MDCTabBarFoundation"],"line":39,"updatePoint":{"line":39,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCTabBarFoundation).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"exports numbers","suites":["MDCTabBarFoundation"],"line":43,"updatePoint":{"line":43,"column":21},"code":"  it('exports numbers', () => {\n    expect('numbers' in MDCTabBarFoundation).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCTabBarFoundation"],"line":47,"updatePoint":{"line":47,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCTabBarFoundation, [\n      'scrollTo',\n      'incrementScroll',\n      'getScrollPosition',\n      'getScrollContentWidth',\n      'getOffsetWidth',\n      'isRTL',\n      'setActiveTab',\n      'activateTabAtIndex',\n      'deactivateTabAtIndex',\n      'focusTabAtIndex',\n      'getTabIndicatorClientRectAtIndex',\n      'getTabDimensionsAtIndex',\n      'getPreviousActiveTabIndex',\n      'getFocusedTabIndex',\n      'getIndexOfTabById',\n      'getTabListLength',\n      'notifyTabActivated',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleTabInteraction() activates the tab","suites":["MDCTabBarFoundation"],"line":90,"updatePoint":{"line":90,"column":47},"code":"  it('#handleTabInteraction() activates the tab', () => {\n    const {foundation, mockAdapter} = setupKeyDownTest();\n    foundation.handleTabInteraction({detail: {}} as MDCTabInteractionEvent);\n    expect(mockAdapter.setActiveTab).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() focuses the tab at the 0th index on home key press","suites":["MDCTabBarFoundation"],"line":96,"updatePoint":{"line":96,"column":73},"code":"  it('#handleKeyDown() focuses the tab at the 0th index on home key press',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} =\n           mockKeyDownEvent({key: MDCTabBarFoundation.strings.HOME_KEY});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 36});\n       mockAdapter.getFocusedTabIndex.and.returnValue(2);\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledWith(0);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() focuses the tab at the N - 1 index on end key press","suites":["MDCTabBarFoundation"],"line":109,"updatePoint":{"line":109,"column":74},"code":"  it('#handleKeyDown() focuses the tab at the N - 1 index on end key press',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} =\n           mockKeyDownEvent({key: MDCTabBarFoundation.strings.END_KEY});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 35});\n       mockAdapter.getFocusedTabIndex.and.returnValue(2);\n       mockAdapter.getTabListLength.and.returnValue(13);\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledWith(12);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() focuses the tab at the previous index on left arrow press","suites":["MDCTabBarFoundation"],"line":123,"updatePoint":{"line":123,"column":80},"code":"  it('#handleKeyDown() focuses the tab at the previous index on left arrow press',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} =\n           mockKeyDownEvent({key: MDCTabBarFoundation.strings.ARROW_LEFT_KEY});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 37});\n       mockAdapter.getFocusedTabIndex.and.returnValue(2);\n       mockAdapter.getTabListLength.and.returnValue(13);\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledWith(1);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() focuses the tab at the next index when the right arrow key is pressed","suites":["MDCTabBarFoundation"],"line":183,"updatePoint":{"line":183,"column":92},"code":"  it('#handleKeyDown() focuses the tab at the next index when the right arrow key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} =\n           mockKeyDownEvent({key: MDCTabBarFoundation.strings.ARROW_RIGHT_KEY});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 39});\n       mockAdapter.getFocusedTabIndex.and.returnValue(2);\n       mockAdapter.getTabListLength.and.returnValue(13);\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledWith(3);\n       expect(mockAdapter.focusTabAtIndex).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() activates the current focused tab on space/enter press w/o useAutomaticActivation","suites":["MDCTabBarFoundation"],"line":244,"updatePoint":{"line":244,"column":104},"code":"  it('#handleKeyDown() activates the current focused tab on space/enter press w/o useAutomaticActivation',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const index = 2;\n       mockAdapter.getFocusedTabIndex.and.returnValue(index);\n       foundation.handleKeyDown(mockKeyDownEvent({\n                                  key: MDCTabBarFoundation.strings.SPACE_KEY\n                                }).fakeEvent);\n       foundation.handleKeyDown(mockKeyDownEvent({keyCode: 32}).fakeEvent);\n       foundation.handleKeyDown(mockKeyDownEvent({\n                                  key: MDCTabBarFoundation.strings.ENTER_KEY\n                                }).fakeEvent);\n       foundation.handleKeyDown(mockKeyDownEvent({keyCode: 13}).fakeEvent);\n\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledWith(index);\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledTimes(4);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() does nothing on space/enter press w/ useAutomaticActivation","suites":["MDCTabBarFoundation"],"line":262,"updatePoint":{"line":262,"column":82},"code":"  it('#handleKeyDown() does nothing on space/enter press w/ useAutomaticActivation',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       foundation.setUseAutomaticActivation(true);\n       foundation.handleKeyDown(mockKeyDownEvent({\n                                  key: MDCTabBarFoundation.strings.SPACE_KEY\n                                }).fakeEvent);\n       foundation.handleKeyDown(mockKeyDownEvent({keyCode: 32}).fakeEvent);\n       foundation.handleKeyDown(mockKeyDownEvent({\n                                  key: MDCTabBarFoundation.strings.ENTER_KEY\n                                }).fakeEvent);\n       foundation.handleKeyDown(mockKeyDownEvent({keyCode: 13}).fakeEvent);\n\n       expect(mockAdapter.setActiveTab)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() activates the tab at the 0th index on home key press w/ useAutomaticActivation","suites":["MDCTabBarFoundation"],"line":279,"updatePoint":{"line":279,"column":101},"code":"  it('#handleKeyDown() activates the tab at the 0th index on home key press w/ useAutomaticActivation',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} =\n           mockKeyDownEvent({key: MDCTabBarFoundation.strings.HOME_KEY});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 36});\n       foundation.setUseAutomaticActivation(true);\n\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledWith(0);\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() activates the tab at the N - 1 index on end key press w/ useAutomaticActivation","suites":["MDCTabBarFoundation"],"line":293,"updatePoint":{"line":293,"column":102},"code":"  it('#handleKeyDown() activates the tab at the N - 1 index on end key press w/ useAutomaticActivation',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} =\n           mockKeyDownEvent({key: MDCTabBarFoundation.strings.END_KEY});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 35});\n       foundation.setUseAutomaticActivation(true);\n       mockAdapter.getTabListLength.and.returnValue(13);\n\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledWith(12);\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() activates the tab at the previous index on left arrow press w/ useAutomaticActivation","suites":["MDCTabBarFoundation"],"line":308,"updatePoint":{"line":308,"column":108},"code":"  it('#handleKeyDown() activates the tab at the previous index on left arrow press w/ useAutomaticActivation',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} =\n           mockKeyDownEvent({key: MDCTabBarFoundation.strings.ARROW_LEFT_KEY});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 37});\n       foundation.setUseAutomaticActivation(true);\n       mockAdapter.getPreviousActiveTabIndex.and.returnValue(2);\n       mockAdapter.getTabListLength.and.returnValue(13);\n\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledWith(1);\n       expect(mockAdapter.setActiveTab).toHaveBeenCalledTimes(2);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() prevents the default behavior for handled non-activation keys","suites":["MDCTabBarFoundation"],"line":324,"updatePoint":{"line":324,"column":84},"code":"  it('#handleKeyDown() prevents the default behavior for handled non-activation keys',\n     () => {\n       [MDCTabBarFoundation.strings.ARROW_LEFT_KEY,\n        MDCTabBarFoundation.strings.ARROW_RIGHT_KEY,\n        MDCTabBarFoundation.strings.HOME_KEY,\n        MDCTabBarFoundation.strings.END_KEY,\n       ].forEach((evtName) => {\n         const {foundation} = setupKeyDownTest();\n         const {fakeEvent, preventDefault} = mockKeyDownEvent({key: evtName});\n         foundation.handleKeyDown(fakeEvent);\n         expect(preventDefault).toHaveBeenCalled();\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() does not prevent the default behavior for handled activation keys","suites":["MDCTabBarFoundation"],"line":338,"updatePoint":{"line":338,"column":88},"code":"  it('#handleKeyDown() does not prevent the default behavior for handled activation keys',\n     () => {\n       [MDCTabBarFoundation.strings.SPACE_KEY,\n        MDCTabBarFoundation.strings.ENTER_KEY]\n           .forEach((evtName) => {\n             const {foundation} = setupKeyDownTest();\n             const {fakeEvent, preventDefault} =\n                 mockKeyDownEvent({key: evtName});\n             foundation.handleKeyDown(fakeEvent);\n             expect(preventDefault).not.toHaveBeenCalled();\n           });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() prevents the default behavior for handled non-activation keyCodes","suites":["MDCTabBarFoundation"],"line":351,"updatePoint":{"line":351,"column":88},"code":"  it('#handleKeyDown() prevents the default behavior for handled non-activation keyCodes',\n     () => {\n       [MDCTabBarFoundation.numbers.ARROW_LEFT_KEYCODE,\n        MDCTabBarFoundation.numbers.ARROW_RIGHT_KEYCODE,\n        MDCTabBarFoundation.numbers.HOME_KEYCODE,\n        MDCTabBarFoundation.numbers.END_KEYCODE,\n       ].forEach((keyCode) => {\n         const {foundation} = setupKeyDownTest();\n         const {fakeEvent, preventDefault} = mockKeyDownEvent({keyCode});\n         foundation.handleKeyDown(fakeEvent);\n         expect(preventDefault).toHaveBeenCalled();\n       });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() prevents the default behavior for handled activation keyCodes","suites":["MDCTabBarFoundation"],"line":365,"updatePoint":{"line":365,"column":84},"code":"  it('#handleKeyDown() prevents the default behavior for handled activation keyCodes',\n     () => {\n       [MDCTabBarFoundation.numbers.SPACE_KEYCODE,\n        MDCTabBarFoundation.numbers.ENTER_KEYCODE]\n           .forEach((keyCode) => {\n             const {foundation} = setupKeyDownTest();\n             const {fakeEvent, preventDefault} = mockKeyDownEvent({keyCode});\n             foundation.handleKeyDown(fakeEvent);\n             expect(preventDefault).not.toHaveBeenCalled();\n           });\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() does not prevent the default behavior for unhandled keys","suites":["MDCTabBarFoundation"],"line":377,"updatePoint":{"line":377,"column":79},"code":"  it('#handleKeyDown() does not prevent the default behavior for unhandled keys',\n     () => {\n       const {foundation} = setupKeyDownTest();\n       const {fakeEvent, preventDefault} = mockKeyDownEvent({key: 'Shift'});\n       foundation.handleKeyDown(fakeEvent);\n       expect(preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() does not prevent the default behavior for unhandled keyCodes","suites":["MDCTabBarFoundation"],"line":385,"updatePoint":{"line":385,"column":83},"code":"  it('#handleKeyDown() does not prevent the default behavior for unhandled keyCodes',\n     () => {\n       const {foundation} = setupKeyDownTest();\n       const {fakeEvent, preventDefault} = mockKeyDownEvent({keyCode: 16});\n       foundation.handleKeyDown(fakeEvent);\n       expect(preventDefault).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#handleKeyDown() does not activate a tab when an unhandled key is pressed","suites":["MDCTabBarFoundation"],"line":393,"updatePoint":{"line":393,"column":79},"code":"  it('#handleKeyDown() does not activate a tab when an unhandled key is pressed',\n     () => {\n       const {foundation, mockAdapter} = setupKeyDownTest();\n       const {fakeEvent: fakeKeyEvent} = mockKeyDownEvent({key: 'Shift'});\n       const {fakeEvent: fakeKeyCodeEvent} = mockKeyDownEvent({keyCode: 16});\n       foundation.handleKeyDown(fakeKeyEvent);\n       foundation.handleKeyDown(fakeKeyCodeEvent);\n       expect(mockAdapter.setActiveTab).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() does nothing if the index overflows the tab list","suites":["MDCTabBarFoundation"],"line":410,"updatePoint":{"line":410,"column":69},"code":"  it('#activateTab() does nothing if the index overflows the tab list', () => {\n    const {foundation, mockAdapter} = setupActivateTabTest();\n    mockAdapter.getTabListLength.and.returnValue(13);\n    foundation.activateTab(13);\n    expect(mockAdapter.deactivateTabAtIndex)\n        .not.toHaveBeenCalledWith(jasmine.any(Number));\n    expect(mockAdapter.activateTabAtIndex)\n        .not.toHaveBeenCalledWith(jasmine.any(Number));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() does nothing if the index underflows the tab list","suites":["MDCTabBarFoundation"],"line":420,"updatePoint":{"line":420,"column":70},"code":"  it('#activateTab() does nothing if the index underflows the tab list', () => {\n    const {foundation, mockAdapter} = setupActivateTabTest();\n    mockAdapter.getTabListLength.and.returnValue(13);\n    foundation.activateTab(-1);\n    expect(mockAdapter.deactivateTabAtIndex)\n        .not.toHaveBeenCalledWith(jasmine.any(Number));\n    expect(mockAdapter.activateTabAtIndex)\n        .not.toHaveBeenCalledWith(jasmine.any(Number));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() does nothing if the index is the same as the previous active index","suites":["MDCTabBarFoundation"],"line":430,"updatePoint":{"line":430,"column":87},"code":"  it('#activateTab() does nothing if the index is the same as the previous active index',\n     () => {\n       const {foundation, mockAdapter} = setupActivateTabTest();\n       mockAdapter.getPreviousActiveTabIndex.and.returnValue(0);\n       mockAdapter.getTabListLength.and.returnValue(13);\n       foundation.activateTab(0);\n       expect(mockAdapter.deactivateTabAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n       expect(mockAdapter.activateTabAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() deactivates the previously active tab","suites":["MDCTabBarFoundation"],"line":454,"updatePoint":{"line":454,"column":58},"code":"  it('#activateTab() deactivates the previously active tab', () => {\n    const {foundation, mockAdapter} = setupActivateTabTest();\n    mockAdapter.getTabListLength.and.returnValue(13);\n    mockAdapter.getPreviousActiveTabIndex.and.returnValue(6);\n    foundation.activateTab(1);\n    expect(mockAdapter.deactivateTabAtIndex).toHaveBeenCalledWith(6);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() does not deactivate the previously active tab if there is none","suites":["MDCTabBarFoundation"],"line":462,"updatePoint":{"line":462,"column":83},"code":"  it('#activateTab() does not deactivate the previously active tab if there is none',\n     () => {\n       const {foundation, mockAdapter} = setupActivateTabTest();\n       mockAdapter.getTabListLength.and.returnValue(13);\n       mockAdapter.getPreviousActiveTabIndex.and.returnValue(-1);\n       foundation.activateTab(1);\n       expect(mockAdapter.deactivateTabAtIndex)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() activates the newly active tab with the previously active tab's indicatorClientRect","suites":["MDCTabBarFoundation"],"line":472,"updatePoint":{"line":472,"column":105},"code":"  it('#activateTab() activates the newly active tab with the previously active tab\\'s indicatorClientRect',\n     () => {\n       const {foundation, mockAdapter} = setupActivateTabTest();\n       mockAdapter.getTabListLength.and.returnValue(13);\n       mockAdapter.getPreviousActiveTabIndex.and.returnValue(6);\n       mockAdapter.getTabIndicatorClientRectAtIndex.and.returnValue({\n         left: 22,\n         right: 33,\n       });\n       foundation.activateTab(1);\n       expect(mockAdapter.activateTabAtIndex)\n           .toHaveBeenCalledWith(1, {left: 22, right: 33});\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() scrolls the new tab index into view","suites":["MDCTabBarFoundation"],"line":486,"updatePoint":{"line":486,"column":56},"code":"  it('#activateTab() scrolls the new tab index into view', () => {\n    const {foundation, mockAdapter, scrollIntoView} = setupActivateTabTest();\n    mockAdapter.getTabListLength.and.returnValue(13);\n    mockAdapter.getPreviousActiveTabIndex.and.returnValue(6);\n    mockAdapter.getTabIndicatorClientRectAtIndex.and.returnValue({\n      left: 22,\n      right: 33,\n    });\n    foundation.activateTab(1);\n    expect(scrollIntoView).toHaveBeenCalledWith(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#activateTab() emits the  with the index of the tab","suites":["MDCTabBarFoundation"],"line":498,"updatePoint":{"line":500,"column":60},"code":"  it(`#activateTab() emits the ${\n         MDCTabBarFoundation.strings\n             .TAB_ACTIVATED_EVENT} with the index of the tab`,\n     () => {\n       const {foundation, mockAdapter} = setupActivateTabTest();\n       mockAdapter.getTabListLength.and.returnValue(13);\n       mockAdapter.getPreviousActiveTabIndex.and.returnValue(6);\n       mockAdapter.getTabIndicatorClientRectAtIndex.and.returnValue({\n         left: 22,\n         right: 33,\n       });\n       foundation.activateTab(1);\n       expect(mockAdapter.notifyTabActivated).toHaveBeenCalledWith(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() does nothing if the index overflows the tab list","suites":["MDCTabBarFoundation"],"line":538,"updatePoint":{"line":538,"column":72},"code":"  it('#scrollIntoView() does nothing if the index overflows the tab list',\n     () => {\n       const {foundation, mockAdapter} = setupScrollIntoViewTest({\n         tabListLength: 13,\n       });\n       foundation.scrollIntoView(13);\n       expect(mockAdapter.scrollTo)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n       expect(mockAdapter.incrementScroll)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() does nothing if the index underflows the tab list","suites":["MDCTabBarFoundation"],"line":550,"updatePoint":{"line":550,"column":73},"code":"  it('#scrollIntoView() does nothing if the index underflows the tab list',\n     () => {\n       const {foundation, mockAdapter} = setupScrollIntoViewTest({\n         tabListLength: 9,\n       });\n       foundation.scrollIntoView(-1);\n       expect(mockAdapter.scrollTo)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n       expect(mockAdapter.incrementScroll)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() scrolls to 0 if the index is 0","suites":["MDCTabBarFoundation"],"line":562,"updatePoint":{"line":562,"column":54},"code":"  it('#scrollIntoView() scrolls to 0 if the index is 0', () => {\n    const {foundation, mockAdapter} = setupScrollIntoViewTest({\n      tabListLength: 9,\n    });\n    foundation.scrollIntoView(0);\n    expect(mockAdapter.scrollTo).toHaveBeenCalledWith(0);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() scrolls to the scroll content width if the index is the max possible","suites":["MDCTabBarFoundation"],"line":570,"updatePoint":{"line":570,"column":92},"code":"  it('#scrollIntoView() scrolls to the scroll content width if the index is the max possible',\n     () => {\n       const {foundation, mockAdapter} = setupScrollIntoViewTest({\n         tabListLength: 9,\n         scrollContentWidth: 987,\n       });\n       foundation.scrollIntoView(8);\n       expect(mockAdapter.scrollTo).toHaveBeenCalledWith(987);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() does nothing when the tab is perfectly in the center","suites":["MDCTabBarFoundation"],"line":697,"updatePoint":{"line":697,"column":76},"code":"  it('#scrollIntoView() does nothing when the tab is perfectly in the center',\n     () => {\n       const {foundation, mockAdapter} = setupScrollIntoViewTest({\n         activeIndex: 3,\n         tabListLength: 9,\n         scrollContentWidth: 1000,\n         scrollPosition: 200,\n         offsetWidth: 300,\n         tabDimensionsMap: {\n           1: {\n             rootLeft: 200,\n             contentLeft: 230,\n             contentRight: 270,\n             rootRight: 300,\n           },\n           2: {\n             rootLeft: 300,\n             contentLeft: 330,\n             contentRight: 370,\n             rootRight: 400,\n           },\n         },\n       });\n\n       foundation.scrollIntoView(2);\n       expect(mockAdapter.scrollTo)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n       expect(mockAdapter.incrementScroll)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() does nothing when the tab is perfectly in the center and the text direction is RTL","suites":["MDCTabBarFoundation"],"line":728,"updatePoint":{"line":728,"column":106},"code":"  it('#scrollIntoView() does nothing when the tab is perfectly in the center and the text direction is RTL',\n     () => {\n       const {foundation, mockAdapter} = setupScrollIntoViewTest({\n         activeIndex: 3,\n         tabListLength: 10,\n         scrollContentWidth: 1000,\n         scrollPosition: 500,\n         offsetWidth: 300,\n         tabDimensionsMap: {\n           8: {\n             rootLeft: 200,\n             contentLeft: 230,\n             contentRight: 270,\n             rootRight: 300,\n           },\n           7: {\n             rootLeft: 300,\n             contentLeft: 330,\n             contentRight: 370,\n             rootRight: 400,\n           },\n         },\n       });\n       mockAdapter.isRTL.and.returnValue(true);\n       foundation.scrollIntoView(7);\n       expect(mockAdapter.scrollTo)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n       expect(mockAdapter.incrementScroll)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() increments the scroll by 0 when the tab and its left neighbor's content are visible","suites":["MDCTabBarFoundation"],"line":759,"updatePoint":{"line":759,"column":108},"code":"  it('#scrollIntoView() increments the scroll by 0 when the tab and its left neighbor\\'s content are visible',\n     () => {\n       const {foundation, mockAdapter} = setupScrollIntoViewTest({\n         activeIndex: 3,\n         tabListLength: 9,\n         scrollContentWidth: 1000,\n         scrollPosition: 200,\n         offsetWidth: 500,\n         tabDimensionsMap: {\n           1: {\n             rootLeft: 200,\n             contentLeft: 230,\n             contentRight: 270,\n             rootRight: 300,\n           },\n           2: {\n             rootLeft: 300,\n             contentLeft: 330,\n             contentRight: 370,\n             rootRight: 400,\n           },\n         },\n       });\n\n       foundation.scrollIntoView(2);\n       expect(mockAdapter.incrementScroll).toHaveBeenCalledWith(0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"#scrollIntoView() increments the scroll by 0 when the tab and its right neighbor's content are visible","suites":["MDCTabBarFoundation"],"line":787,"updatePoint":{"line":787,"column":109},"code":"  it('#scrollIntoView() increments the scroll by 0 when the tab and its right neighbor\\'s content are visible',\n     () => {\n       const {foundation, mockAdapter} = setupScrollIntoViewTest({\n         activeIndex: 3,\n         tabListLength: 9,\n         scrollContentWidth: 1000,\n         scrollPosition: 22,\n         offsetWidth: 400,\n         tabDimensionsMap: {\n           1: {\n             rootLeft: 200,\n             contentLeft: 230,\n             contentRight: 270,\n             rootRight: 300,\n           },\n           2: {\n             rootLeft: 300,\n             contentLeft: 330,\n             contentRight: 370,\n             rootRight: 400,\n           },\n         },\n       });\n\n       foundation.scrollIntoView(1);\n       expect(mockAdapter.incrementScroll).toHaveBeenCalledWith(0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-bar/test"},{"name":"attachTo returns an MDCTabIndicator instance","suites":["MDCTabIndicator"],"line":52,"updatePoint":{"line":52,"column":50},"code":"  it('attachTo returns an MDCTabIndicator instance', () => {\n    expect(MDCTabIndicator.attachTo(getFixture()) instanceof MDCTabIndicator)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"attachTo an icon returns an MDCTabIndicator instance","suites":["MDCTabIndicator"],"line":57,"updatePoint":{"line":57,"column":58},"code":"  it('attachTo an icon returns an MDCTabIndicator instance', () => {\n    expect(\n        MDCTabIndicator.attachTo(getFadingFixture()) instanceof MDCTabIndicator)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#adapter.addClass adds a class to the root element","suites":["MDCTabIndicator"],"line":72,"updatePoint":{"line":72,"column":56},"code":"  it('#adapter.addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#adapter.removeClass removes a class to the root element","suites":["MDCTabIndicator"],"line":78,"updatePoint":{"line":78,"column":62},"code":"  it('#adapter.removeClass removes a class to the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#adapter.computeContentClientRect returns the root element client rect","suites":["MDCTabIndicator"],"line":85,"updatePoint":{"line":85,"column":76},"code":"  it('#adapter.computeContentClientRect returns the root element client rect',\n     () => {\n       const {component, root, content} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.computeContentClientRect())\n           .toEqual(content.getBoundingClientRect());\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#adapter.setContentStyleProperty sets a style property on the root element","suites":["MDCTabIndicator"],"line":95,"updatePoint":{"line":95,"column":80},"code":"  it('#adapter.setContentStyleProperty sets a style property on the root element',\n     () => {\n       const {component, content} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setContentStyleProperty('background-color', 'red');\n       expect(content.style.backgroundColor).toBe('red');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#activate sliding indicator calls activate with passed args","suites":["MDCTabIndicator"],"line":117,"updatePoint":{"line":117,"column":65},"code":"  it('#activate sliding indicator calls activate with passed args', () => {\n    const {component, mockFoundation} = setupMockSlidingFoundationTest();\n    component.activate({width: 100, left: 0} as DOMRect);\n    expect(mockFoundation.activate).toHaveBeenCalledWith({width: 100, left: 0});\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#activate icon indicator calls activate with passed args","suites":["MDCTabIndicator"],"line":123,"updatePoint":{"line":123,"column":62},"code":"  it('#activate icon indicator calls activate with passed args', () => {\n    const {component, mockFoundation} = setupMockFadingFoundationTest();\n    component.activate({width: 1, left: 2} as DOMRect);\n    expect(mockFoundation.activate).toHaveBeenCalledWith({width: 1, left: 2});\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#deactivate sliding indicator calls deactivate","suites":["MDCTabIndicator"],"line":129,"updatePoint":{"line":129,"column":52},"code":"  it('#deactivate sliding indicator calls deactivate', () => {\n    const {component, mockFoundation} = setupMockSlidingFoundationTest();\n    component.deactivate();\n    expect(mockFoundation.deactivate).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#deactivate icon indicator calls deactivate","suites":["MDCTabIndicator"],"line":135,"updatePoint":{"line":135,"column":49},"code":"  it('#deactivate icon indicator calls deactivate', () => {\n    const {component, mockFoundation} = setupMockFadingFoundationTest();\n    component.deactivate();\n    expect(mockFoundation.deactivate).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#computeContentClientRect calls computeClientRect","suites":["MDCTabIndicator"],"line":141,"updatePoint":{"line":141,"column":55},"code":"  it('#computeContentClientRect calls computeClientRect', () => {\n    const {component, mockFoundation} = setupMockSlidingFoundationTest();\n    component.computeContentClientRect();\n    expect(mockFoundation.computeContentClientRect).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#activate adds the  class","suites":["MDCFadingTabIndicatorFoundation"],"line":35,"updatePoint":{"line":35,"column":51},"code":"  it(`#activate adds the ${cssClasses.ACTIVE} class`, () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.activate();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.ACTIVE);\n  });","file":"fading-foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#deactivate removes the  class","suites":["MDCFadingTabIndicatorFoundation"],"line":41,"updatePoint":{"line":41,"column":56},"code":"  it(`#deactivate removes the ${cssClasses.ACTIVE} class`, () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.deactivate();\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.ACTIVE);\n  });","file":"fading-foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#activate adds the  class","suites":["MDCSlidingTabIndicatorFoundation"],"line":35,"updatePoint":{"line":35,"column":51},"code":"  it(`#activate adds the ${cssClasses.ACTIVE} class`, () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.computeContentClientRect.and.returnValue(\n        {width: 100, left: 10});\n\n    foundation.activate({width: 90, left: 25} as DOMRect);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.ACTIVE);\n  });","file":"sliding-foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#activate sets the transform property with no transition, then transitions it back","suites":["MDCSlidingTabIndicatorFoundation"],"line":44,"updatePoint":{"line":44,"column":88},"code":"  it('#activate sets the transform property with no transition, then transitions it back',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.computeContentClientRect.and.returnValue(\n           {width: 100, left: 10});\n\n       foundation.activate({width: 90, left: 25} as DOMRect);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(cssClasses.NO_TRANSITION);\n       expect(mockAdapter.setContentStyleProperty)\n           .toHaveBeenCalledWith('transform', 'translateX(15px) scaleX(0.9)');\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.NO_TRANSITION);\n       expect(mockAdapter.setContentStyleProperty)\n           .toHaveBeenCalledWith('transform', '');\n     });","file":"sliding-foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#activate does not modify transform and does not transition if no client rect is passed","suites":["MDCSlidingTabIndicatorFoundation"],"line":61,"updatePoint":{"line":61,"column":93},"code":"  it('#activate does not modify transform and does not transition if no client rect is passed',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.activate();\n       expect(mockAdapter.setContentStyleProperty)\n           .not.toHaveBeenCalledWith('transform', jasmine.any(String));\n     });","file":"sliding-foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"#deactivate removes the  class","suites":["MDCSlidingTabIndicatorFoundation"],"line":69,"updatePoint":{"line":69,"column":56},"code":"  it(`#deactivate removes the ${cssClasses.ACTIVE} class`, () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.deactivate();\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.ACTIVE);\n  });","file":"sliding-foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-indicator/test"},{"name":"attachTo returns an MDCTabScroller instance","suites":["MDCTabScroller"],"line":56,"updatePoint":{"line":56,"column":49},"code":"  it('attachTo returns an MDCTabScroller instance', () => {\n    expect(MDCTabScroller.attachTo(getFixture()) instanceof MDCTabScroller)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#destroy() calls super.destroy()","suites":["MDCTabScroller"],"line":61,"updatePoint":{"line":61,"column":38},"code":"  it('#destroy() calls super.destroy()', () => {\n    const {component} = setupTest();\n    const mockFoundation = jasmine.createSpyObj('foundation', ['destroy']);\n    (component as any).foundation = mockFoundation;\n    component.destroy();\n    expect(mockFoundation.destroy).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.eventTargetMatchesSelector returns true if the event target matches the selector","suites":["MDCTabScroller"],"line":69,"updatePoint":{"line":69,"column":95},"code":"  it('#adapter.eventTargetMatchesSelector returns true if the event target matches the selector',\n     () => {\n       const {area, component} = setupTest();\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.eventTargetMatchesSelector(\n                      area, MDCTabScrollerFoundation.strings.AREA_SELECTOR))\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.addClass adds a class to the root element","suites":["MDCTabScroller"],"line":78,"updatePoint":{"line":78,"column":56},"code":"  it('#adapter.addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.removeClass removes a class from the root element","suites":["MDCTabScroller"],"line":84,"updatePoint":{"line":84,"column":64},"code":"  it('#adapter.removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.addScrollAreaClass adds a class to the area element","suites":["MDCTabScroller"],"line":91,"updatePoint":{"line":91,"column":66},"code":"  it('#adapter.addScrollAreaClass adds a class to the area element', () => {\n    const {component, area} = setupTest();\n    (component.getDefaultFoundation() as any)\n        .adapter.addScrollAreaClass('foo');\n    expect(area.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.setScrollAreaStyleProperty sets a style property on the area element","suites":["MDCTabScroller"],"line":98,"updatePoint":{"line":98,"column":83},"code":"  it('#adapter.setScrollAreaStyleProperty sets a style property on the area element',\n     () => {\n       const {component, area} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setScrollAreaStyleProperty('background-color', 'red');\n       expect(area.style.backgroundColor === 'red').toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.setScrollContentStyleProperty sets a style property on the content element","suites":["MDCTabScroller"],"line":106,"updatePoint":{"line":106,"column":89},"code":"  it('#adapter.setScrollContentStyleProperty sets a style property on the content element',\n     () => {\n       const {component, content} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setScrollContentStyleProperty('background-color', 'red');\n       expect(content.style.backgroundColor === 'red').toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.getScrollContentStyleValue returns the style property value on the content element","suites":["MDCTabScroller"],"line":114,"updatePoint":{"line":114,"column":97},"code":"  it('#adapter.getScrollContentStyleValue returns the style property value on the content element',\n     () => {\n       const {component, content} = setupTest();\n       content.style.setProperty('color', 'chartreuse');\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getScrollContentStyleValue('color'))\n           .toBe(window.getComputedStyle(content).getPropertyValue('color'));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.setScrollAreaScrollLeft sets the scrollLeft value of the area element","suites":["MDCTabScroller"],"line":133,"updatePoint":{"line":133,"column":84},"code":"  it('#adapter.setScrollAreaScrollLeft sets the scrollLeft value of the area element',\n     () => {\n       const {component, root, area} = setupScrollLeftTests();\n       document.body.appendChild(root);\n       (component.getDefaultFoundation() as any)\n           .adapter.setScrollAreaScrollLeft(101);\n       expect(area.scrollLeft).toBeGreaterThanOrEqual(0);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.getScrollAreaScrollLeft returns the scrollLeft value of the root element","suites":["MDCTabScroller"],"line":143,"updatePoint":{"line":143,"column":87},"code":"  it('#adapter.getScrollAreaScrollLeft returns the scrollLeft value of the root element',\n     () => {\n       const {component, root, area} = setupScrollLeftTests();\n       document.body.appendChild(root);\n       area.scrollLeft = 416;\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getScrollAreaScrollLeft())\n           .toBeGreaterThanOrEqual(0);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.getScrollContentOffsetWidth returns the content element offsetWidth","suites":["MDCTabScroller"],"line":154,"updatePoint":{"line":154,"column":82},"code":"  it('#adapter.getScrollContentOffsetWidth returns the content element offsetWidth',\n     () => {\n       const {component, root, content} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getScrollContentOffsetWidth())\n           .toEqual(content.offsetWidth);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.getScrollAreaOffsetWidth returns the root element offsetWidth","suites":["MDCTabScroller"],"line":164,"updatePoint":{"line":164,"column":76},"code":"  it('#adapter.getScrollAreaOffsetWidth returns the root element offsetWidth',\n     () => {\n       const {component, root} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getScrollAreaOffsetWidth())\n           .toEqual(root.offsetWidth);\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.computeScrollAreaClientRect returns the root element bounding client rect","suites":["MDCTabScroller"],"line":174,"updatePoint":{"line":174,"column":88},"code":"  it('#adapter.computeScrollAreaClientRect returns the root element bounding client rect',\n     () => {\n       const {component, root} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.computeScrollAreaClientRect())\n           .toEqual(root.getBoundingClientRect());\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.computeScrollContentClientRect returns the content element bounding client rect","suites":["MDCTabScroller"],"line":184,"updatePoint":{"line":184,"column":94},"code":"  it('#adapter.computeScrollContentClientRect returns the content element bounding client rect',\n     () => {\n       const {component, root, content} = setupTest();\n       document.body.appendChild(root);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.computeScrollContentClientRect())\n           .toEqual(content.getBoundingClientRect());\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#adapter.computeHorizontalScrollbarHeight uses util function to return scrollbar height","suites":["MDCTabScroller"],"line":194,"updatePoint":{"line":194,"column":93},"code":"  it('#adapter.computeHorizontalScrollbarHeight uses util function to return scrollbar height',\n     () => {\n       const {component, root} = setupTest();\n       document.body.appendChild(root);\n\n       // Unfortunately we can't stub the util API due to it transpiling to a\n       // read-only property, so we need to settle for comparing the return\n       // values in each browser.\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.computeHorizontalScrollbarHeight())\n           .toBe(util.computeHorizontalScrollbarHeight(document));\n       document.body.removeChild(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo calls scrollTo","suites":["MDCTabScroller"],"line":214,"updatePoint":{"line":214,"column":30},"code":"  it('#scrollTo calls scrollTo', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.scrollTo(703);\n    expect(mockFoundation.scrollTo).toHaveBeenCalledWith(703);\n    expect(mockFoundation.scrollTo).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll calls incrementScroll","suites":["MDCTabScroller"],"line":221,"updatePoint":{"line":221,"column":44},"code":"  it('#incrementScroll calls incrementScroll', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.incrementScroll(10);\n    expect(mockFoundation.incrementScroll).toHaveBeenCalledWith(10);\n    expect(mockFoundation.incrementScroll).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPosition() calls getScrollPosition","suites":["MDCTabScroller"],"line":228,"updatePoint":{"line":228,"column":50},"code":"  it('#getScrollPosition() calls getScrollPosition', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.getScrollPosition();\n    expect(mockFoundation.getScrollPosition).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollContentWidth() returns the offsetWidth of the content element","suites":["MDCTabScroller"],"line":234,"updatePoint":{"line":234,"column":77},"code":"  it('#getScrollContentWidth() returns the offsetWidth of the content element',\n     () => {\n       const {component, root} = setupMockFoundationTest();\n       const contentElement =\n           root.querySelector(\n               MDCTabScrollerFoundation.strings.CONTENT_SELECTOR) as\n           HTMLElement;\n       expect(component.getScrollContentWidth())\n           .toEqual(contentElement.offsetWidth);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getRTLScroller() returns an instance of MDCTabScrollerRTL","suites":["MDCTabScroller"],"line":257,"updatePoint":{"line":257,"column":64},"code":"  it('#getRTLScroller() returns an instance of MDCTabScrollerRTL', () => {\n    const {root, component} = setupTestRTL();\n    document.body.appendChild(root);\n    expect(component.getDefaultFoundation().getRTLScroller())\n        .toEqual(jasmine.any(MDCTabScrollerRTL));\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"on interaction in the area element, call #handleInteraction()","suites":["MDCTabScroller"],"line":265,"updatePoint":{"line":265,"column":67},"code":"  it('on interaction in the area element, call #handleInteraction()', () => {\n    const {root, mockFoundation} = setupMockFoundationTest();\n    const area =\n        root.querySelector(MDCTabScrollerFoundation.strings.AREA_SELECTOR) as\n        HTMLElement;\n    emitEvent(area, 'touchstart', {bubbles: true});\n    expect(mockFoundation.handleInteraction).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"on transitionend of the content element, call #handleTransitionEnd()","suites":["MDCTabScroller"],"line":274,"updatePoint":{"line":274,"column":74},"code":"  it('on transitionend of the content element, call #handleTransitionEnd()',\n     () => {\n       const {root, mockFoundation} = setupMockFoundationTest();\n       const content = root.querySelector(\n                           MDCTabScrollerFoundation.strings.CONTENT_SELECTOR) as\n           HTMLElement;\n       emitEvent(content, 'transitionend', {bubbles: true});\n       expect(mockFoundation.handleTransitionEnd)\n           .toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"exports cssClasses","suites":["MDCTabScrollerFoundation"],"line":64,"updatePoint":{"line":64,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCTabScrollerFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"exports strings","suites":["MDCTabScrollerFoundation"],"line":68,"updatePoint":{"line":68,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCTabScrollerFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCTabScrollerFoundation"],"line":72,"updatePoint":{"line":72,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCTabScrollerFoundation, [\n      'eventTargetMatchesSelector',\n      'addClass',\n      'removeClass',\n      'addScrollAreaClass',\n      'setScrollAreaStyleProperty',\n      'setScrollContentStyleProperty',\n      'getScrollContentStyleValue',\n      'setScrollAreaScrollLeft',\n      'getScrollAreaScrollLeft',\n      'getScrollContentOffsetWidth',\n      'getScrollAreaOffsetWidth',\n      'computeScrollAreaClientRect',\n      'computeScrollContentClientRect',\n      'computeHorizontalScrollbarHeight',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPosition() returns scroll value when transform is none","suites":["MDCTabScrollerFoundation"],"line":91,"updatePoint":{"line":91,"column":70},"code":"  it('#getScrollPosition() returns scroll value when transform is none', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getScrollContentStyleValue.withArgs('transform')\n        .and.returnValue('none');\n    mockAdapter.getScrollAreaScrollLeft.and.returnValue(0);\n    expect(foundation.getScrollPosition() === 0).toBe(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPosition() returns difference between scrollLeft and translateX","suites":["MDCTabScrollerFoundation"],"line":99,"updatePoint":{"line":99,"column":79},"code":"  it('#getScrollPosition() returns difference between scrollLeft and translateX',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getScrollContentStyleValue.withArgs('transform')\n           .and.returnValue('matrix(1, 0, 0, 0, 101, 0)');\n       mockAdapter.getScrollAreaScrollLeft.and.returnValue(212);\n       expect(foundation.getScrollPosition() === 111).toBe(true);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#handleInteraction() does nothing if should not handle interaction","suites":["MDCTabScrollerFoundation"],"line":108,"updatePoint":{"line":108,"column":72},"code":"  it('#handleInteraction() does nothing if should not handle interaction',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.handleInteraction();\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(jasmine.any(String));\n       expect(mockAdapter.setScrollContentStyleProperty)\n           .not.toHaveBeenCalledWith(jasmine.any(String), jasmine.any(String));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#handleInteraction() removes the  class","suites":["MDCTabScrollerFoundation"],"line":127,"updatePoint":{"line":128,"column":61},"code":"  it(`#handleInteraction() removes the ${\n         MDCTabScrollerFoundation.cssClasses.ANIMATING} class`,\n     () => {\n       const {foundation, mockAdapter} = setupHandleInteractionTest();\n       foundation.handleInteraction();\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n       expect(mockAdapter.removeClass).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#handleInteraction() sets the transform property to translateX(0px)","suites":["MDCTabScrollerFoundation"],"line":137,"updatePoint":{"line":137,"column":73},"code":"  it('#handleInteraction() sets the transform property to translateX(0px)',\n     () => {\n       const {foundation, mockAdapter} = setupHandleInteractionTest();\n       foundation.handleInteraction();\n       expect(mockAdapter.setScrollContentStyleProperty)\n           .toHaveBeenCalledWith('transform', 'translateX(0px)');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#handleInteraction() sets scrollLeft to the difference between scrollLeft and translateX","suites":["MDCTabScrollerFoundation"],"line":145,"updatePoint":{"line":145,"column":94},"code":"  it('#handleInteraction() sets scrollLeft to the difference between scrollLeft and translateX',\n     () => {\n       const {foundation, mockAdapter} =\n           setupHandleInteractionTest({scrollLeft: 123, translateX: 101});\n       foundation.handleInteraction();\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(22);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#handleTransitionEnd() does nothing if should not handle transition","suites":["MDCTabScrollerFoundation"],"line":153,"updatePoint":{"line":153,"column":73},"code":"  it('#handleTransitionEnd() does nothing if should not handle transition',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.handleTransitionEnd({\n         target: {},\n       } as TransitionEvent);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(jasmine.any(String));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#handleTransitionEnd() removes the  class","suites":["MDCTabScrollerFoundation"],"line":163,"updatePoint":{"line":164,"column":61},"code":"  it(`#handleTransitionEnd() removes the ${\n         MDCTabScrollerFoundation.cssClasses.ANIMATING} class`,\n     () => {\n       const {foundation, mockAdapter} =\n           setupHandleInteractionTest({scrollLeft: 123, translateX: 101});\n       mockAdapter.eventTargetMatchesSelector\n           .withArgs(jasmine.any(Object), jasmine.any(String))\n           .and.returnValue(true);\n       foundation.handleTransitionEnd({\n         target: {},\n       } as TransitionEvent);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() exits early if difference between scrollX and scrollLeft is 0","suites":["MDCTabScrollerFoundation"],"line":178,"updatePoint":{"line":178,"column":79},"code":"  it('#scrollTo() exits early if difference between scrollX and scrollLeft is 0',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 66});\n       foundation.scrollTo(66);\n       expect(mockAdapter.setScrollContentStyleProperty)\n           .not.toHaveBeenCalledWith(jasmine.any(String), jasmine.any(String));\n       expect(mockAdapter.setScrollAreaScrollLeft)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() scrolls to 0 if scrollX is less than 0","suites":["MDCTabScrollerFoundation"],"line":188,"updatePoint":{"line":188,"column":56},"code":"  it('#scrollTo() scrolls to 0 if scrollX is less than 0', () => {\n    const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 1});\n    foundation.scrollTo(-999);\n    expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(0);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() scrolls to the max scrollable size if scrollX is greater than the max scrollable value","suites":["MDCTabScrollerFoundation"],"line":194,"updatePoint":{"line":194,"column":104},"code":"  it('#scrollTo() scrolls to the max scrollable size if scrollX is greater than the max scrollable value',\n     () => {\n       const {foundation, mockAdapter} =\n           setupScrollToTest({rootWidth: 212, contentWidth: 1000});\n       foundation.scrollTo(900);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(788);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() sets the content transform style property to the difference between scrollX and scrollLeft","suites":["MDCTabScrollerFoundation"],"line":202,"updatePoint":{"line":202,"column":108},"code":"  it('#scrollTo() sets the content transform style property to the difference between scrollX and scrollLeft',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest(\n           {rootWidth: 300, contentWidth: 1000, scrollLeft: 123});\n       foundation.scrollTo(456);\n       expect(mockAdapter.setScrollContentStyleProperty)\n           .toHaveBeenCalledWith('transform', 'translateX(333px)');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() sets the scroll property to the computed scrollX","suites":["MDCTabScrollerFoundation"],"line":211,"updatePoint":{"line":211,"column":66},"code":"  it('#scrollTo() sets the scroll property to the computed scrollX', () => {\n    const {foundation, mockAdapter} =\n        setupScrollToTest({rootWidth: 300, contentWidth: 1000, scrollLeft: 5});\n    foundation.scrollTo(111);\n    expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(111);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() adds the  class in a rAF","suites":["MDCTabScrollerFoundation"],"line":218,"updatePoint":{"line":219,"column":70},"code":"  it(`#scrollTo() adds the ${\n         MDCTabScrollerFoundation.cssClasses.ANIMATING} class in a rAF`,\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest();\n       foundation.scrollTo(100);\n       jasmine.clock().tick(1);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n       expect(mockAdapter.addClass).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() sets scrollLeft to the visual scroll position if called during an animation","suites":["MDCTabScrollerFoundation"],"line":229,"updatePoint":{"line":229,"column":93},"code":"  it('#scrollTo() sets scrollLeft to the visual scroll position if called during an animation',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({\n         scrollLeft: 50,\n         rootWidth: 100,\n         contentWidth: 200,\n         translateX: 19,\n         isAnimating: true,\n       });\n       foundation.scrollTo(33);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(31);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() removes the  if called during an animation","suites":["MDCTabScrollerFoundation"],"line":242,"updatePoint":{"line":244,"column":54},"code":"  it(`#scrollTo() removes the ${\n         MDCTabScrollerFoundation.cssClasses\n             .ANIMATING} if called during an animation`,\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({\n         scrollLeft: 50,\n         rootWidth: 100,\n         contentWidth: 200,\n         translateX: 19,\n         isAnimating: true,\n       });\n       foundation.scrollTo(60);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() unsets the transform property in a rAF","suites":["MDCTabScrollerFoundation"],"line":258,"updatePoint":{"line":258,"column":56},"code":"  it('#scrollTo() unsets the transform property in a rAF', () => {\n    const {foundation, mockAdapter} = setupScrollToTest();\n    foundation.scrollTo(212);\n    jasmine.clock().tick(1);\n    expect(mockAdapter.setScrollContentStyleProperty)\n        .toHaveBeenCalledWith('transform', 'none');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() exits early if increment is 0","suites":["MDCTabScrollerFoundation"],"line":266,"updatePoint":{"line":266,"column":54},"code":"  it('#incrementScroll() exits early if increment is 0', () => {\n    const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 700});\n    foundation.incrementScroll(0);\n    expect(mockAdapter.setScrollContentStyleProperty)\n        .not.toHaveBeenCalledWith(jasmine.any(String));\n    expect(mockAdapter.setScrollAreaScrollLeft)\n        .not.toHaveBeenCalledWith(jasmine.any(Number));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() exits early if increment puts the scrollLeft over the max value","suites":["MDCTabScrollerFoundation"],"line":275,"updatePoint":{"line":275,"column":88},"code":"  it('#incrementScroll() exits early if increment puts the scrollLeft over the max value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 700});\n       foundation.incrementScroll(10);\n       expect(mockAdapter.setScrollContentStyleProperty)\n           .not.toHaveBeenCalledWith(jasmine.any(String));\n       expect(mockAdapter.setScrollAreaScrollLeft)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() exits early if increment puts the scrollLeft below the min value","suites":["MDCTabScrollerFoundation"],"line":285,"updatePoint":{"line":285,"column":89},"code":"  it('#incrementScroll() exits early if increment puts the scrollLeft below the min value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 0});\n       foundation.incrementScroll(-10);\n       expect(mockAdapter.setScrollContentStyleProperty)\n           .not.toHaveBeenCalledWith(jasmine.any(String));\n       expect(mockAdapter.setScrollAreaScrollLeft)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() increases the scrollLeft value by the given value","suites":["MDCTabScrollerFoundation"],"line":295,"updatePoint":{"line":295,"column":74},"code":"  it('#incrementScroll() increases the scrollLeft value by the given value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 123});\n       foundation.incrementScroll(11);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(134);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() increases the scrollLeft value by the given value up to the max scroll value","suites":["MDCTabScrollerFoundation"],"line":302,"updatePoint":{"line":302,"column":101},"code":"  it('#incrementScroll() increases the scrollLeft value by the given value up to the max scroll value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest(\n           {scrollLeft: 99, rootWidth: 100, contentWidth: 200});\n       foundation.incrementScroll(2);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(100);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() decreases the scrollLeft value by the given value","suites":["MDCTabScrollerFoundation"],"line":310,"updatePoint":{"line":310,"column":74},"code":"  it('#incrementScroll() decreases the scrollLeft value by the given value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 123});\n       foundation.incrementScroll(-11);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(112);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() decreases the scrollLeft value by the given value down to the min scroll value","suites":["MDCTabScrollerFoundation"],"line":317,"updatePoint":{"line":317,"column":103},"code":"  it('#incrementScroll() decreases the scrollLeft value by the given value down to the min scroll value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest(\n           {scrollLeft: 1, rootWidth: 100, contentWidth: 200});\n       foundation.incrementScroll(-2);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() sets scrollLeft to the visual scroll position if called during an animation","suites":["MDCTabScrollerFoundation"],"line":325,"updatePoint":{"line":325,"column":100},"code":"  it('#incrementScroll() sets scrollLeft to the visual scroll position if called during an animation',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({\n         scrollLeft: 50,\n         rootWidth: 100,\n         contentWidth: 200,\n         translateX: 22,\n         isAnimating: true,\n       });\n       foundation.incrementScroll(10);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(28);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() removes the  if called during an animation","suites":["MDCTabScrollerFoundation"],"line":338,"updatePoint":{"line":340,"column":54},"code":"  it(`#incrementScroll() removes the ${\n         MDCTabScrollerFoundation.cssClasses\n             .ANIMATING} if called during an animation`,\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({\n         scrollLeft: 50,\n         rootWidth: 100,\n         contentWidth: 200,\n         translateX: 19,\n         isAnimating: true,\n       });\n       foundation.incrementScroll(5);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollImmediate() exits early if increment is 0","suites":["MDCTabScrollerFoundation"],"line":354,"updatePoint":{"line":354,"column":63},"code":"  it('#incrementScrollImmediate() exits early if increment is 0', () => {\n    const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 700});\n    foundation.incrementScrollImmediate(0);\n    expect(mockAdapter.setScrollAreaScrollLeft)\n        .not.toHaveBeenCalledWith(jasmine.any(Number));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollImmediate() exits early if increment puts the scrollLeft over the max value","suites":["MDCTabScrollerFoundation"],"line":361,"updatePoint":{"line":361,"column":97},"code":"  it('#incrementScrollImmediate() exits early if increment puts the scrollLeft over the max value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 700});\n       foundation.incrementScrollImmediate(10);\n       expect(mockAdapter.setScrollAreaScrollLeft)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollImmediate() exits early if increment puts the scrollLeft below the min value","suites":["MDCTabScrollerFoundation"],"line":369,"updatePoint":{"line":369,"column":98},"code":"  it('#incrementScrollImmediate() exits early if increment puts the scrollLeft below the min value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 0});\n       foundation.incrementScrollImmediate(-10);\n       expect(mockAdapter.setScrollAreaScrollLeft)\n           .not.toHaveBeenCalledWith(jasmine.any(Number));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollImmediate() increases the scrollLeft value by the given value","suites":["MDCTabScrollerFoundation"],"line":377,"updatePoint":{"line":377,"column":83},"code":"  it('#incrementScrollImmediate() increases the scrollLeft value by the given value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 123});\n       foundation.incrementScrollImmediate(11);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(134);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollImmediate() increases the scrollLeft value by the given value up to the max scroll value","suites":["MDCTabScrollerFoundation"],"line":384,"updatePoint":{"line":384,"column":110},"code":"  it('#incrementScrollImmediate() increases the scrollLeft value by the given value up to the max scroll value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest(\n           {scrollLeft: 99, rootWidth: 100, contentWidth: 200});\n       foundation.incrementScrollImmediate(2);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(100);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollImmediate() decreases the scrollLeft value by the given value","suites":["MDCTabScrollerFoundation"],"line":392,"updatePoint":{"line":392,"column":83},"code":"  it('#incrementScrollImmediate() decreases the scrollLeft value by the given value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest({scrollLeft: 123});\n       foundation.incrementScrollImmediate(-11);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(112);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollImmediate() decreases the scrollLeft value by the given value down to the min scroll value","suites":["MDCTabScrollerFoundation"],"line":399,"updatePoint":{"line":399,"column":112},"code":"  it('#incrementScrollImmediate() decreases the scrollLeft value by the given value down to the min scroll value',\n     () => {\n       const {foundation, mockAdapter} = setupScrollToTest(\n           {scrollLeft: 1, rootWidth: 100, contentWidth: 200});\n       foundation.incrementScrollImmediate(-2);\n       expect(mockAdapter.setScrollAreaScrollLeft).toHaveBeenCalledWith(0);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() sets the scrollLeft property in RTL","suites":["MDCTabScrollerFoundation"],"line":419,"updatePoint":{"line":419,"column":53},"code":"  it('#scrollTo() sets the scrollLeft property in RTL', () => {\n    const {foundation, mockAdapter} = setupScrollToRTLTest();\n    foundation.scrollTo(10);\n    expect(mockAdapter.setScrollAreaScrollLeft)\n        .toHaveBeenCalledWith(jasmine.any(Number));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollTo() sets the transform style property in RTL","suites":["MDCTabScrollerFoundation"],"line":426,"updatePoint":{"line":426,"column":58},"code":"  it('#scrollTo() sets the transform style property in RTL', () => {\n    const {foundation, mockAdapter} = setupScrollToRTLTest();\n    foundation.scrollTo(10);\n    expect(mockAdapter.setScrollContentStyleProperty)\n        .toHaveBeenCalledWith('transform', 'translateX(690px)');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() sets the scrollLeft property in RTL","suites":["MDCTabScrollerFoundation"],"line":433,"updatePoint":{"line":433,"column":60},"code":"  it('#incrementScroll() sets the scrollLeft property in RTL', () => {\n    const {foundation, mockAdapter} = setupScrollToRTLTest();\n    foundation.incrementScroll(-10);\n    expect(mockAdapter.setScrollAreaScrollLeft)\n        .toHaveBeenCalledWith(jasmine.any(Number));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScroll() sets the transform style property in RTL","suites":["MDCTabScrollerFoundation"],"line":440,"updatePoint":{"line":440,"column":65},"code":"  it('#incrementScroll() sets the transform style property in RTL', () => {\n    const {foundation, mockAdapter} = setupScrollToRTLTest();\n    foundation.incrementScroll(-10);\n    expect(mockAdapter.setScrollContentStyleProperty)\n        .toHaveBeenCalledWith('transform', 'translateX(10px)');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPosition() returns a numeric scroll position in RTL","suites":["MDCTabScrollerFoundation"],"line":447,"updatePoint":{"line":447,"column":67},"code":"  it('#getScrollPosition() returns a numeric scroll position in RTL', () => {\n    const {foundation} = setupScrollToRTLTest();\n    expect(foundation.getScrollPosition()).toEqual(jasmine.any(Number));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getRTLScroller() returns an instance of MDCTabScrollerRTLNegative","suites":["MDCTabScrollerFoundation"],"line":474,"updatePoint":{"line":474,"column":72},"code":"  it('#getRTLScroller() returns an instance of MDCTabScrollerRTLNegative',\n     () => {\n       const {foundation} = setupNegativeScroller();\n       expect(foundation.getRTLScroller())\n           .toEqual(jasmine.any(MDCTabScrollerRTLNegative));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getRTLScroller() returns an instance of MDCTabScrollerRTLReverse","suites":["MDCTabScrollerFoundation"],"line":502,"updatePoint":{"line":502,"column":71},"code":"  it('#getRTLScroller() returns an instance of MDCTabScrollerRTLReverse',\n     () => {\n       const {foundation} = setupReverseScroller();\n       expect(foundation.getRTLScroller())\n           .toEqual(jasmine.any(MDCTabScrollerRTLReverse));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getRTLScroller() returns an instance of MDCTabScrollerRTLDefault","suites":["MDCTabScrollerFoundation"],"line":530,"updatePoint":{"line":530,"column":71},"code":"  it('#getRTLScroller() returns an instance of MDCTabScrollerRTLDefault',\n     () => {\n       const {foundation} = setupDefaultScroller();\n       expect(foundation.getRTLScroller())\n           .toEqual(jasmine.any(MDCTabScrollerRTLDefault));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPositionRTL() returns the distance from the right edge","suites":["MDCTabScrollerRTLDefault"],"line":40,"updatePoint":{"line":40,"column":70},"code":"  it('#getScrollPositionRTL() returns the distance from the right edge', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.getScrollPositionRTL()).toBe(123);\n  });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns a normalized scrollX property","suites":["MDCTabScrollerRTLDefault"],"line":46,"updatePoint":{"line":46,"column":58},"code":"  it('#scrollToRTL() returns a normalized scrollX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.scrollToRTL(111).finalScrollPosition).toBe(689);\n  });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns a normalized translateX property","suites":["MDCTabScrollerRTLDefault"],"line":52,"updatePoint":{"line":52,"column":61},"code":"  it('#scrollToRTL() returns a normalized translateX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.scrollToRTL(111).scrollDelta).toBe(12);\n  });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns 0 for scrollX property when scrollLeft would be too far left","suites":["MDCTabScrollerRTLDefault"],"line":58,"updatePoint":{"line":58,"column":89},"code":"  it('#scrollToRTL() returns 0 for scrollX property when scrollLeft would be too far left',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.scrollToRTL(801).finalScrollPosition).toBe(0);\n     });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns 0 for translateX property when scrollLeft would be the same","suites":["MDCTabScrollerRTLDefault"],"line":65,"updatePoint":{"line":65,"column":88},"code":"  it('#scrollToRTL() returns 0 for translateX property when scrollLeft would be the same',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.scrollToRTL(123).scrollDelta).toBe(0);\n     });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns max scroll value for scrollX property when scrollLeft would be too far right","suites":["MDCTabScrollerRTLDefault"],"line":72,"updatePoint":{"line":72,"column":105},"code":"  it('#scrollToRTL() returns max scroll value for scrollX property when scrollLeft would be too far right',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.scrollToRTL(-10).finalScrollPosition).toBe(800);\n     });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns a normalized scrollX property","suites":["MDCTabScrollerRTLDefault"],"line":79,"updatePoint":{"line":79,"column":65},"code":"  it('#incrementScrollRTL() returns a normalized scrollX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.incrementScrollRTL(50).finalScrollPosition).toBe(627);\n  });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns a normalized translateX property","suites":["MDCTabScrollerRTLDefault"],"line":85,"updatePoint":{"line":85,"column":68},"code":"  it('#incrementScrollRTL() returns a normalized translateX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.incrementScrollRTL(50).scrollDelta).toBe(-50);\n  });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns 0 for scrollX property when scrollLeft would be too far left","suites":["MDCTabScrollerRTLDefault"],"line":91,"updatePoint":{"line":91,"column":96},"code":"  it('#incrementScrollRTL() returns 0 for scrollX property when scrollLeft would be too far left',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.incrementScrollRTL(678).finalScrollPosition).toBe(0);\n     });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns 0 for translateX property when scrollLeft would be the same","suites":["MDCTabScrollerRTLDefault"],"line":98,"updatePoint":{"line":98,"column":95},"code":"  it('#incrementScrollRTL() returns 0 for translateX property when scrollLeft would be the same',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.incrementScrollRTL(0).scrollDelta).toBe(0);\n     });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns max scroll value for scrollX property when scrollLeft would be too far right","suites":["MDCTabScrollerRTLDefault"],"line":105,"updatePoint":{"line":105,"column":112},"code":"  it('#incrementScrollRTL() returns max scroll value for scrollX property when scrollLeft would be too far right',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.incrementScrollRTL(-124).finalScrollPosition).toBe(800);\n     });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getAnimatingScrollPosition() returns just the scrollX value","suites":["MDCTabScrollerRTLDefault"],"line":112,"updatePoint":{"line":112,"column":66},"code":"  it('#getAnimatingScrollPosition() returns just the scrollX value', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.getAnimatingScrollPosition(123)).toBe(123);\n  });","file":"rtl-default-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPositionRTL() returns the current scroll distance when translateX is 0","suites":["MDCTabScrollerRTLNegative"],"line":40,"updatePoint":{"line":40,"column":86},"code":"  it('#getScrollPositionRTL() returns the current scroll distance when translateX is 0',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -123});\n       expect(scroller.getScrollPositionRTL(0)).toBe(123);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPositionRTL() returns the current scroll distance minus translateX","suites":["MDCTabScrollerRTLNegative"],"line":47,"updatePoint":{"line":47,"column":82},"code":"  it('#getScrollPositionRTL() returns the current scroll distance minus translateX',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -123});\n       expect(scroller.getScrollPositionRTL(11)).toBe(134);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns a normalized scrollX property","suites":["MDCTabScrollerRTLNegative"],"line":54,"updatePoint":{"line":54,"column":58},"code":"  it('#scrollToRTL() returns a normalized scrollX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -111});\n    expect(scroller.scrollToRTL(123).finalScrollPosition).toBe(-123);\n  });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns a normalized translateX property","suites":["MDCTabScrollerRTLNegative"],"line":60,"updatePoint":{"line":60,"column":61},"code":"  it('#scrollToRTL() returns a normalized translateX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -111});\n    expect(scroller.scrollToRTL(123).scrollDelta).toBe(-12);\n  });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns 0 for scrollX property when scrollLeft would be too far right","suites":["MDCTabScrollerRTLNegative"],"line":66,"updatePoint":{"line":66,"column":90},"code":"  it('#scrollToRTL() returns 0 for scrollX property when scrollLeft would be too far right',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -500});\n       expect(scroller.scrollToRTL(-1).finalScrollPosition).toBe(0);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns 0 for translateX property when scrollLeft would be the same","suites":["MDCTabScrollerRTLNegative"],"line":73,"updatePoint":{"line":73,"column":88},"code":"  it('#scrollToRTL() returns 0 for translateX property when scrollLeft would be the same',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -123});\n       expect(scroller.scrollToRTL(123).scrollDelta).toBe(0);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns min scroll value for scrollX property when scrollLeft would be too far left","suites":["MDCTabScrollerRTLNegative"],"line":80,"updatePoint":{"line":80,"column":104},"code":"  it('#scrollToRTL() returns min scroll value for scrollX property when scrollLeft would be too far left',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -677});\n       expect(scroller.scrollToRTL(801).finalScrollPosition).toBe(-800);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns a normalized scrollX property","suites":["MDCTabScrollerRTLNegative"],"line":87,"updatePoint":{"line":87,"column":65},"code":"  it('#incrementScrollRTL() returns a normalized scrollX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -111});\n    expect(scroller.incrementScrollRTL(17).finalScrollPosition).toBe(-128);\n  });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns a normalized translateX property","suites":["MDCTabScrollerRTLNegative"],"line":93,"updatePoint":{"line":93,"column":68},"code":"  it('#incrementScrollRTL() returns a normalized translateX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -111});\n    expect(scroller.incrementScrollRTL(50).scrollDelta).toBe(-50);\n  });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns 0 for scrollX property when scrollLeft would be too far right","suites":["MDCTabScrollerRTLNegative"],"line":99,"updatePoint":{"line":99,"column":97},"code":"  it('#incrementScrollRTL() returns 0 for scrollX property when scrollLeft would be too far right',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -45});\n       expect(scroller.incrementScrollRTL(-46).finalScrollPosition).toBe(0);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns 0 for translateX property when scrollLeft would be the same","suites":["MDCTabScrollerRTLNegative"],"line":106,"updatePoint":{"line":106,"column":95},"code":"  it('#incrementScrollRTL() returns 0 for translateX property when scrollLeft would be the same',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -123});\n       expect(scroller.incrementScrollRTL(0).scrollDelta).toBe(0);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns min scroll value for scrollX property when scrollLeft would be too far left","suites":["MDCTabScrollerRTLNegative"],"line":113,"updatePoint":{"line":113,"column":111},"code":"  it('#incrementScrollRTL() returns min scroll value for scrollX property when scrollLeft would be too far left',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: -677});\n       expect(scroller.incrementScrollRTL(124).finalScrollPosition).toBe(-800);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getAnimatingScrollPosition() returns the difference between the scrollX value and the translateX value","suites":["MDCTabScrollerRTLNegative"],"line":120,"updatePoint":{"line":120,"column":109},"code":"  it('#getAnimatingScrollPosition() returns the difference between the scrollX value and the translateX value',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.getAnimatingScrollPosition(123, 11)).toBe(112);\n     });","file":"rtl-negative-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPositionRTL() returns the negated scrollLeft value","suites":["MDCTabScrollerRTLReverse"],"line":41,"updatePoint":{"line":41,"column":66},"code":"  it('#getScrollPositionRTL() returns the negated scrollLeft value', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.getScrollPositionRTL(0)).toBe(677);\n  });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getScrollPositionRTL() returns the negated current scroll distance minus translateX","suites":["MDCTabScrollerRTLReverse"],"line":47,"updatePoint":{"line":47,"column":90},"code":"  it('#getScrollPositionRTL() returns the negated current scroll distance minus translateX',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.getScrollPositionRTL(11)).toBe(666);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns a normalized scrollX property","suites":["MDCTabScrollerRTLReverse"],"line":54,"updatePoint":{"line":54,"column":58},"code":"  it('#scrollToRTL() returns a normalized scrollX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n    expect(scroller.scrollToRTL(111).finalScrollPosition).toBe(111);\n  });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns a normalized translateX property","suites":["MDCTabScrollerRTLReverse"],"line":60,"updatePoint":{"line":60,"column":61},"code":"  it('#scrollToRTL() returns a normalized translateX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 145});\n    expect(scroller.scrollToRTL(111).scrollDelta).toBe(34);\n  });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns 0 for scrollX property when scrollLeft would be too far right","suites":["MDCTabScrollerRTLReverse"],"line":66,"updatePoint":{"line":66,"column":90},"code":"  it('#scrollToRTL() returns 0 for scrollX property when scrollLeft would be too far right',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.scrollToRTL(-10).finalScrollPosition).toBe(0);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns 0 for translateX property when scrollLeft would be the same","suites":["MDCTabScrollerRTLReverse"],"line":73,"updatePoint":{"line":73,"column":88},"code":"  it('#scrollToRTL() returns 0 for translateX property when scrollLeft would be the same',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.scrollToRTL(677).scrollDelta).toBe(0);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#scrollToRTL() returns max scroll value for scrollX property when scrollLeft would be too far left","suites":["MDCTabScrollerRTLReverse"],"line":80,"updatePoint":{"line":80,"column":104},"code":"  it('#scrollToRTL() returns max scroll value for scrollX property when scrollLeft would be too far left',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.scrollToRTL(801).finalScrollPosition).toBe(800);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns a normalized scrollX property","suites":["MDCTabScrollerRTLReverse"],"line":87,"updatePoint":{"line":87,"column":65},"code":"  it('#incrementScrollRTL() returns a normalized scrollX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 202});\n    expect(scroller.incrementScrollRTL(50).finalScrollPosition).toBe(252);\n  });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns a normalized translateX property","suites":["MDCTabScrollerRTLReverse"],"line":93,"updatePoint":{"line":93,"column":68},"code":"  it('#incrementScrollRTL() returns a normalized translateX property', () => {\n    const {scroller} =\n        setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 212});\n    expect(scroller.incrementScrollRTL(50).scrollDelta).toBe(-50);\n  });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns 0 for scrollX property when scrollLeft would be too far right","suites":["MDCTabScrollerRTLReverse"],"line":99,"updatePoint":{"line":99,"column":97},"code":"  it('#incrementScrollRTL() returns 0 for scrollX property when scrollLeft would be too far right',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 45});\n       expect(scroller.incrementScrollRTL(-50).finalScrollPosition).toBe(0);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns 0 for translateX property when scrollLeft would be the same","suites":["MDCTabScrollerRTLReverse"],"line":106,"updatePoint":{"line":106,"column":95},"code":"  it('#incrementScrollRTL() returns 0 for translateX property when scrollLeft would be the same',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 0});\n       expect(scroller.incrementScrollRTL(-50).scrollDelta).toBe(0);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#incrementScrollRTL() returns max scroll value for scrollX property when scrollLeft would be too far left","suites":["MDCTabScrollerRTLReverse"],"line":113,"updatePoint":{"line":113,"column":111},"code":"  it('#incrementScrollRTL() returns max scroll value for scrollX property when scrollLeft would be too far left',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.incrementScrollRTL(124).finalScrollPosition).toBe(800);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#getAnimatingScrollPosition() returns the sum of the scrollX value and the translateX value","suites":["MDCTabScrollerRTLReverse"],"line":120,"updatePoint":{"line":120,"column":97},"code":"  it('#getAnimatingScrollPosition() returns the sum of the scrollX value and the translateX value',\n     () => {\n       const {scroller} =\n           setupTest({rootWidth: 200, contentWidth: 1000, scrollLeft: 677});\n       expect(scroller.getAnimatingScrollPosition(123, 11)).toBe(134);\n     });","file":"rtl-reverse-scroller.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"#computeHorizontalScrollbarHeight returns value based on difference between offset and client height","suites":["MDCTabScroller - util"],"line":51,"updatePoint":{"line":51,"column":106},"code":"  it('#computeHorizontalScrollbarHeight returns value based on difference between offset and client height',\n     () => {\n       const expectedHeight = 17;\n       const {mockDocument, classListAddFunc} =\n           createMockDocumentForHorizontalScrollbarHeight(expectedHeight);\n\n       expect(util.computeHorizontalScrollbarHeight(\n                  mockDocument as any, false /* shouldCacheResult */))\n           .toBe(expectedHeight);\n       expect(classListAddFunc).toHaveBeenCalledWith(cssClasses.SCROLL_TEST);\n     });","file":"util.test.ts","skipped":false,"dir":"packages/mdc-tab-scroller/test"},{"name":"attachTo returns an MDCTab instance","suites":["MDCTab"],"line":61,"updatePoint":{"line":61,"column":41},"code":"  it('attachTo returns an MDCTab instance', () => {\n    expect(MDCTab.attachTo(getFixture()) instanceof MDCTab).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"click handler is added during initialSyncWithDOM","suites":["MDCTab"],"line":65,"updatePoint":{"line":65,"column":54},"code":"  it('click handler is added during initialSyncWithDOM', () => {\n    const {component, root, mockFoundation} =\n        setupTest({useMockFoundation: true});\n\n    emitEvent(root, 'click');\n    expect(mockFoundation.handleClick).toHaveBeenCalled();\n\n    component.destroy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"click handler is removed during destroy","suites":["MDCTab"],"line":75,"updatePoint":{"line":75,"column":45},"code":"  it('click handler is removed during destroy', () => {\n    const {component, root, mockFoundation} =\n        setupTest({useMockFoundation: true});\n\n    component.destroy();\n    emitEvent(root, 'click');\n    expect(mockFoundation.handleClick).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#destroy removes the ripple","suites":["MDCTab"],"line":84,"updatePoint":{"line":84,"column":33},"code":"  it('#destroy removes the ripple', () => {\n    const {component, root} = setupTest();\n    jasmine.clock().tick(1);\n    component.destroy();\n    jasmine.clock().tick(1);\n    expect(root.classList.contains('mdc-ripple-upgraded')).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.addClass adds a class to the root element","suites":["MDCTab"],"line":92,"updatePoint":{"line":92,"column":56},"code":"  it('#adapter.addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.removeClass removes a class to the root element","suites":["MDCTab"],"line":98,"updatePoint":{"line":98,"column":62},"code":"  it('#adapter.removeClass removes a class to the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.hasClass returns true if a class exists on the root element","suites":["MDCTab"],"line":105,"updatePoint":{"line":105,"column":74},"code":"  it('#adapter.hasClass returns true if a class exists on the root element',\n     () => {\n       const {root, component} = setupTest();\n       root.classList.add('foo');\n       (component.getDefaultFoundation() as any).adapter.hasClass('foo');\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasClass('foo'))\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.setAttr adds a given attribute to the root element","suites":["MDCTab"],"line":115,"updatePoint":{"line":115,"column":65},"code":"  it('#adapter.setAttr adds a given attribute to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.setAttr('foo', 'bar');\n    expect(root.getAttribute('foo')).toEqual('bar');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.activateIndicator activates the indicator subcomponent","suites":["MDCTab"],"line":121,"updatePoint":{"line":121,"column":69},"code":"  it('#adapter.activateIndicator activates the indicator subcomponent', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.activateIndicator();\n    expect((root.querySelector('.mdc-tab-indicator') as Element)\n               .classList.contains('mdc-tab-indicator--active'))\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.deactivateIndicator deactivates the indicator subcomponent","suites":["MDCTab"],"line":129,"updatePoint":{"line":129,"column":73},"code":"  it('#adapter.deactivateIndicator deactivates the indicator subcomponent',\n     () => {\n       const {root, component} = setupTest();\n       (component.getDefaultFoundation() as any).adapter.deactivateIndicator();\n       expect((root.querySelector('.mdc-tab-indicator') as Element)\n                  .classList.contains('mdc-tab-indicator--active'))\n           .toBeFalsy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.getOffsetWidth() returns the offsetWidth of the root element","suites":["MDCTab"],"line":138,"updatePoint":{"line":138,"column":75},"code":"  it('#adapter.getOffsetWidth() returns the offsetWidth of the root element',\n     () => {\n       const {root, component} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any)\n               .adapter.getOffsetWidth() === root.offsetWidth)\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.getOffsetLeft() returns the offsetLeft of the root element","suites":["MDCTab"],"line":147,"updatePoint":{"line":147,"column":73},"code":"  it('#adapter.getOffsetLeft() returns the offsetLeft of the root element',\n     () => {\n       const {root, component} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any)\n               .adapter.getOffsetLeft() === root.offsetLeft)\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.getContentOffsetWidth() returns the offsetLeft of the content element","suites":["MDCTab"],"line":156,"updatePoint":{"line":156,"column":84},"code":"  it('#adapter.getContentOffsetWidth() returns the offsetLeft of the content element',\n     () => {\n       const {content, component} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any)\n               .adapter.getContentOffsetWidth() === content.offsetWidth)\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.getContentOffsetLeft() returns the offsetLeft of the content element","suites":["MDCTab"],"line":165,"updatePoint":{"line":165,"column":83},"code":"  it('#adapter.getContentOffsetLeft() returns the offsetLeft of the content element',\n     () => {\n       const {content, component} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any)\n               .adapter.getContentOffsetLeft() === content.offsetLeft)\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.focus() gives focus to the root element","suites":["MDCTab"],"line":174,"updatePoint":{"line":174,"column":54},"code":"  it('#adapter.focus() gives focus to the root element', () => {\n    const {root, component} = setupTest();\n    document.body.appendChild(root);\n    (component.getDefaultFoundation() as any).adapter.focus();\n    expect(document.activeElement === root).toBe(true);\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#adapter.notifyInteracted() emits the  event","suites":["MDCTab"],"line":182,"updatePoint":{"line":183,"column":57},"code":"  it(`#adapter.notifyInteracted() emits the ${\n         MDCTabFoundation.strings.INTERACTED_EVENT} event`,\n     () => {\n       const {component} = setupTest();\n       const handler = jasmine.createSpy('interaction handler');\n\n       component.listen(MDCTabFoundation.strings.INTERACTED_EVENT, handler);\n       (component.getDefaultFoundation() as any).adapter.notifyInteracted();\n       expect(handler).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#active getter calls foundation.isActive","suites":["MDCTab"],"line":193,"updatePoint":{"line":193,"column":46},"code":"  it('#active getter calls foundation.isActive', () => {\n    const {component, mockFoundation} = setupTest({useMockFoundation: true});\n    component.active;\n    expect(mockFoundation.isActive).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#focusOnActivate setter calls foundation.setFocusOnActivate","suites":["MDCTab"],"line":199,"updatePoint":{"line":199,"column":65},"code":"  it('#focusOnActivate setter calls foundation.setFocusOnActivate', () => {\n    const {component, mockFoundation} = setupTest({useMockFoundation: true});\n    component.focusOnActivate = false;\n    expect(mockFoundation.setFocusOnActivate).toHaveBeenCalledWith(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate() calls activate","suites":["MDCTab"],"line":205,"updatePoint":{"line":205,"column":32},"code":"  it('#activate() calls activate', () => {\n    const {component, mockFoundation} = setupTest({useMockFoundation: true});\n    component.activate();\n    expect(mockFoundation.activate).toHaveBeenCalledWith(undefined);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate({ClientRect}) calls activate","suites":["MDCTab"],"line":211,"updatePoint":{"line":211,"column":44},"code":"  it('#activate({ClientRect}) calls activate', () => {\n    const {component, mockFoundation} = setupTest({useMockFoundation: true});\n    component.activate({width: 100, left: 200} as DOMRect);\n    expect(mockFoundation.activate)\n        .toHaveBeenCalledWith({width: 100, left: 200} as DOMRect);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#deactivate() calls deactivate","suites":["MDCTab"],"line":218,"updatePoint":{"line":218,"column":36},"code":"  it('#deactivate() calls deactivate', () => {\n    const {component, mockFoundation} = setupTest({useMockFoundation: true});\n    component.deactivate();\n    expect(mockFoundation.deactivate).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#computeIndicatorClientRect() returns the indicator element's bounding client rect","suites":["MDCTab"],"line":224,"updatePoint":{"line":224,"column":89},"code":"  it('#computeIndicatorClientRect() returns the indicator element\\'s bounding client rect',\n     () => {\n       const {root, component} = setupTest();\n       (component.getDefaultFoundation() as any).adapter.deactivateIndicator();\n       expect(component.computeIndicatorClientRect())\n           .toEqual((root.querySelector('.mdc-tab-indicator') as HTMLElement)\n                        .getBoundingClientRect());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#computeDimensions() calls computeDimensions","suites":["MDCTab"],"line":233,"updatePoint":{"line":233,"column":50},"code":"  it('#computeDimensions() calls computeDimensions', () => {\n    const {component, mockFoundation} = setupTest({useMockFoundation: true});\n    component.computeDimensions();\n    expect(mockFoundation.computeDimensions).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"exports cssClasses","suites":["MDCTabFoundation"],"line":34,"updatePoint":{"line":34,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCTabFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"exports strings","suites":["MDCTabFoundation"],"line":38,"updatePoint":{"line":38,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCTabFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCTabFoundation"],"line":42,"updatePoint":{"line":42,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCTabFoundation, [\n      'addClass',\n      'removeClass',\n      'hasClass',\n      'setAttr',\n      'activateIndicator',\n      'deactivateIndicator',\n      'getOffsetLeft',\n      'getOffsetWidth',\n      'getContentOffsetLeft',\n      'getContentOffsetWidth',\n      'notifyInteracted',\n      'focus',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate adds mdc-tab--active class to the root element","suites":["MDCTabFoundation"],"line":59,"updatePoint":{"line":59,"column":62},"code":"  it('#activate adds mdc-tab--active class to the root element', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.activate();\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(MDCTabFoundation.cssClasses.ACTIVE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate sets the root element aria-selected attribute to true","suites":["MDCTabFoundation"],"line":66,"updatePoint":{"line":66,"column":69},"code":"  it('#activate sets the root element aria-selected attribute to true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.activate();\n    expect(mockAdapter.setAttr)\n        .toHaveBeenCalledWith(MDCTabFoundation.strings.ARIA_SELECTED, 'true');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate sets the root element tabindex to 0","suites":["MDCTabFoundation"],"line":73,"updatePoint":{"line":73,"column":51},"code":"  it('#activate sets the root element tabindex to 0', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.activate();\n    expect(mockAdapter.setAttr)\n        .toHaveBeenCalledWith(MDCTabFoundation.strings.TABINDEX, '0');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate activates the indicator","suites":["MDCTabFoundation"],"line":80,"updatePoint":{"line":80,"column":39},"code":"  it('#activate activates the indicator', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.activate({width: 100, left: 200} as DOMRect);\n    expect(mockAdapter.activateIndicator)\n        .toHaveBeenCalledWith({width: 100, left: 200});\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate focuses the root node by default","suites":["MDCTabFoundation"],"line":87,"updatePoint":{"line":87,"column":48},"code":"  it('#activate focuses the root node by default', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.activate({width: 100, left: 200} as DOMRect);\n    expect(mockAdapter.focus).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate focuses the root node if focusOnActivate is true","suites":["MDCTabFoundation"],"line":93,"updatePoint":{"line":93,"column":64},"code":"  it('#activate focuses the root node if focusOnActivate is true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setFocusOnActivate(true);\n    foundation.activate({width: 100, left: 200} as DOMRect);\n    expect(mockAdapter.focus).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#activate does not focus the root node if focusOnActivate is false","suites":["MDCTabFoundation"],"line":100,"updatePoint":{"line":100,"column":72},"code":"  it('#activate does not focus the root node if focusOnActivate is false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.setFocusOnActivate(false);\n       foundation.activate({width: 100, left: 200} as DOMRect);\n       expect(mockAdapter.focus).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#deactivate does nothing if not active","suites":["MDCTabFoundation"],"line":108,"updatePoint":{"line":108,"column":44},"code":"  it('#deactivate does nothing if not active', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.deactivate();\n    expect(mockAdapter.addClass).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#deactivate removes mdc-tab--active class to the root element","suites":["MDCTabFoundation"],"line":114,"updatePoint":{"line":114,"column":67},"code":"  it('#deactivate removes mdc-tab--active class to the root element', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.and.returnValue(true);\n    foundation.deactivate();\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(MDCTabFoundation.cssClasses.ACTIVE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#deactivate sets the root element aria-selected attribute to false","suites":["MDCTabFoundation"],"line":122,"updatePoint":{"line":122,"column":72},"code":"  it('#deactivate sets the root element aria-selected attribute to false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasClass.and.returnValue(true);\n       foundation.deactivate();\n       expect(mockAdapter.setAttr)\n           .toHaveBeenCalledWith(\n               MDCTabFoundation.strings.ARIA_SELECTED, 'false');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#deactivate deactivates the indicator","suites":["MDCTabFoundation"],"line":132,"updatePoint":{"line":132,"column":43},"code":"  it('#deactivate deactivates the indicator', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.and.returnValue(true);\n    foundation.deactivate();\n    expect(mockAdapter.deactivateIndicator).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#deactivate sets the root element tabindex to -1","suites":["MDCTabFoundation"],"line":139,"updatePoint":{"line":139,"column":54},"code":"  it('#deactivate sets the root element tabindex to -1', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasClass.and.returnValue(true);\n    foundation.deactivate();\n    expect(mockAdapter.setAttr)\n        .toHaveBeenCalledWith(MDCTabFoundation.strings.TABINDEX, '-1');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#handleClick emits the  event","suites":["MDCTabFoundation"],"line":147,"updatePoint":{"line":148,"column":57},"code":"  it(`#handleClick emits the ${\n         MDCTabFoundation.strings.INTERACTED_EVENT} event`,\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       foundation.handleClick();\n       expect(mockAdapter.notifyInteracted).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"#computeDimensions() returns the dimensions of the tab","suites":["MDCTabFoundation"],"line":155,"updatePoint":{"line":155,"column":60},"code":"  it('#computeDimensions() returns the dimensions of the tab', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getOffsetLeft.and.returnValue(10);\n    mockAdapter.getOffsetWidth.and.returnValue(100);\n    mockAdapter.getContentOffsetLeft.and.returnValue(11);\n    mockAdapter.getContentOffsetWidth.and.returnValue(30);\n    expect(foundation.computeDimensions()).toEqual({\n      rootLeft: 10,\n      rootRight: 110,\n      contentLeft: 21,\n      contentRight: 51,\n    });\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tab/test"},{"name":"attachTo returns an MDCTextField instance","suites":["MDCTextField"],"line":106,"updatePoint":{"line":106,"column":47},"code":"  it('attachTo returns an MDCTextField instance', () => {\n    expect(MDCTextField.attachTo(getFixture()) instanceof MDCTextField)\n        .toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates a ripple on the root element by default","suites":["MDCTextField"],"line":176,"updatePoint":{"line":176,"column":71},"code":"  it('#constructor instantiates a ripple on the root element by default',\n     () => {\n       const root = getFixture();\n       const component = new MDCTextField(\n           root, undefined, (el: HTMLElement) => new FakeRipple(el));\n       expect(component.root).toEqual(root);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor does not instantiate a ripple when ${cssClasses.OUTLINED} class is present","suites":["MDCTextField"],"line":184,"updatePoint":{"line":184,"column":93},"code":"  it('#constructor does not instantiate a ripple when ${cssClasses.OUTLINED} class is present',\n     () => {\n       const root = getFixture();\n       root.classList.add(cssClasses.OUTLINED);\n       const component = new MDCTextField(root);\n       expect(component.ripple).toEqual(null);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor does not instantiate a ripple when ${cssClasses.TEXTAREA} class is present","suites":["MDCTextField"],"line":192,"updatePoint":{"line":192,"column":93},"code":"  it('#constructor does not instantiate a ripple when ${cssClasses.TEXTAREA} class is present',\n     () => {\n       const root = getFixture();\n       root.classList.add(cssClasses.TEXTAREA);\n       const component = new MDCTextField(root);\n       expect(component.ripple).toEqual(null);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates a line ripple on the `.mdc-line-ripple` element if present","suites":["MDCTextField"],"line":208,"updatePoint":{"line":208,"column":90},"code":"  it('#constructor instantiates a line ripple on the `.mdc-line-ripple` element if present',\n     () => {\n       const root = getFixture();\n       const component = new MDCTextField(root);\n       expect(component['lineRipple']).toEqual(jasmine.any(MDCLineRipple));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates a helper text if present","suites":["MDCTextField"],"line":215,"updatePoint":{"line":215,"column":56},"code":"  it('#constructor instantiates a helper text if present', () => {\n    const root = getFixture();\n    const helperText = getHelperLineWithHelperText();\n    document.body.appendChild(root);\n    document.body.appendChild(helperText);\n    const component = new MDCTextField(root);\n    expect(component['helperText'])\n        .toEqual(jasmine.any(MDCTextFieldHelperText));\n    document.body.removeChild(root);\n    document.body.removeChild(helperText);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates a character counter if present","suites":["MDCTextField"],"line":227,"updatePoint":{"line":227,"column":62},"code":"  it('#constructor instantiates a character counter if present', () => {\n    const root = getFixture();\n    const characterCounter = getHelperLineWithCharacterCounter();\n    document.body.appendChild(root);\n    root.querySelector('input')!.maxLength = 12;\n    document.body.appendChild(characterCounter);\n    const component = new MDCTextField(root);\n    expect(component['characterCounter'])\n        .toEqual(jasmine.any(MDCTextFieldCharacterCounter));\n    document.body.removeChild(root);\n    document.body.removeChild(characterCounter);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates a leading icon if an icon element is present","suites":["MDCTextField"],"line":240,"updatePoint":{"line":240,"column":76},"code":"  it('#constructor instantiates a leading icon if an icon element is present',\n     () => {\n       const root = getFixture();\n       const component = new MDCTextField(root);\n       expect(component['leadingIcon']).toEqual(jasmine.any(MDCTextFieldIcon));\n       expect(component['trailingIcon']).toEqual(null);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates an icon for both icon elements if present","suites":["MDCTextField"],"line":248,"updatePoint":{"line":248,"column":73},"code":"  it('#constructor instantiates an icon for both icon elements if present',\n     () => {\n       const root = getFixture();\n       root.classList.add('mdc-text-field--with-trailing-icon');\n\n       const wrapper = document.createElement('div');\n       wrapper.innerHTML =\n           `<i class=\"mdc-text-field__icon mdc-text-field__icon--trailing material-icons\">3d_rotations</i>`;\n       const el = wrapper.firstElementChild as HTMLElement;\n       wrapper.removeChild(el);\n       root.appendChild(el);\n       const component = new MDCTextField(root);\n       expect(component['leadingIcon']).toEqual(jasmine.any(MDCTextFieldIcon));\n       expect(component['trailingIcon']).toEqual(jasmine.any(MDCTextFieldIcon));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates a trailing icon if the icon is present","suites":["MDCTextField"],"line":264,"updatePoint":{"line":264,"column":70},"code":"  it('#constructor instantiates a trailing icon if the icon is present', () => {\n    const root = getFixture();\n    const leadingIcon = root.querySelector('.mdc-text-field__icon');\n    root.removeChild(leadingIcon as HTMLElement);\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML =\n        `<i class=\"mdc-text-field__icon mdc-text-field__icon--trailing material-icons\">3d_rotations</i>`;\n    const trailingIcon = wrapper.firstElementChild as HTMLElement;\n    root.appendChild(trailingIcon);\n    root.classList.add('mdc-text-field--with-trailing-icon');\n    root.classList.remove('mdc-text-field--with-leading-icon');\n    const component = new MDCTextField(root);\n    expect(component['leadingIcon']).toEqual(null);\n    expect(component['trailingIcon']).toEqual(jasmine.any(MDCTextFieldIcon));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates a label on the `.mdc-floating-label` element if present","suites":["MDCTextField"],"line":280,"updatePoint":{"line":280,"column":87},"code":"  it('#constructor instantiates a label on the `.mdc-floating-label` element if present',\n     () => {\n       const root = getFixture();\n       const component = new MDCTextField(root);\n       expect(component['label']).toEqual(jasmine.any(MDCFloatingLabel));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor instantiates an outline on the `.mdc-notched-outline` element if present","suites":["MDCTextField"],"line":287,"updatePoint":{"line":287,"column":91},"code":"  it('#constructor instantiates an outline on the `.mdc-notched-outline` element if present',\n     () => {\n       const wrapper = document.createElement('div');\n       wrapper.innerHTML = `<span class=\"mdc-notched-outline\"></span>`;\n       const child = wrapper.firstElementChild as HTMLElement;\n       wrapper.removeChild(child);\n\n       const root = getFixture();\n       root.appendChild(child);\n       const component = new MDCTextField(root);\n       expect(component['outline']).toEqual(jasmine.any(MDCNotchedOutline));\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor handles undefined optional sub-elements gracefully","suites":["MDCTextField"],"line":300,"updatePoint":{"line":300,"column":69},"code":"  it('#constructor handles undefined optional sub-elements gracefully', () => {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = `\n      <label class=\"mdc-text-field mdc-text-field--filled\">\n        <input type=\"text\" class=\"mdc-text-field__input\" id=\"my-text-field\">\n      </label>\n    `;\n    const root = wrapper.firstElementChild as HTMLElement;\n    wrapper.removeChild(root);\n\n    expect(() => new MDCTextField(root)).not.toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"default adapter methods handle sub-elements when present","suites":["MDCTextField"],"line":313,"updatePoint":{"line":313,"column":62},"code":"  it('default adapter methods handle sub-elements when present', () => {\n    const root = getFixture();\n    const component = new MDCTextField(root);\n    const adapter = (component.getDefaultFoundation() as any).adapter;\n    expect(adapter.hasClass('foo')).toBe(false);\n    expect(adapter.getLabelWidth()).toBeGreaterThan(0);\n    expect(() => adapter.floatLabel).not.toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"default adapter methods handle undefined optional sub-elements gracefully","suites":["MDCTextField"],"line":322,"updatePoint":{"line":322,"column":79},"code":"  it('default adapter methods handle undefined optional sub-elements gracefully',\n     () => {\n       const wrapper = document.createElement('div');\n       wrapper.innerHTML = `\n         <label class=\"mdc-text-field mdc-text-field--filled\">\n           <input type=\"text\" class=\"mdc-text-field__input\" id=\"my-text-field\">\n         </label>\n       `;\n       const root = wrapper.firstElementChild as HTMLElement;\n       wrapper.removeChild(root);\n\n       const component = new MDCTextField(root);\n       const adapter = (component.getDefaultFoundation() as any).adapter;\n       expect(adapter.getLabelWidth()).toEqual(0);\n       expect(adapter.hasLabel()).toBe(false);\n       expect(adapter.hasOutline()).toBe(false);\n       expect(() => adapter.floatLabel).not.toThrow();\n       expect(() => adapter.shakeLabel).not.toThrow();\n       expect(() => adapter.activateLineRipple).not.toThrow();\n       expect(() => adapter.deactivateLineRipple).not.toThrow();\n       expect(() => adapter.setLineRippleTransformOrigin).not.toThrow();\n       expect(() => adapter.closeOutline).not.toThrow();\n       expect(() => adapter.notchOutline).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy cleans up the ripple if present","suites":["MDCTextField"],"line":392,"updatePoint":{"line":392,"column":46},"code":"  it('#destroy cleans up the ripple if present', () => {\n    const root = getFixture();\n    const component = new MDCTextField(\n        root, undefined, (el: HTMLElement) => new FakeRipple(el));\n    component.destroy();\n    expect(component.ripple!.destroy).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy cleans up the line ripple if present","suites":["MDCTextField"],"line":400,"updatePoint":{"line":400,"column":51},"code":"  it('#destroy cleans up the line ripple if present', () => {\n    const {component, lineRipple} = setupTest();\n    component.destroy();\n    expect(lineRipple.destroy).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy cleans up the helper text if present","suites":["MDCTextField"],"line":406,"updatePoint":{"line":406,"column":51},"code":"  it('#destroy cleans up the helper text if present', () => {\n    const root = getFixture();\n    const helperTextElement = getHelperLineWithHelperText();\n    document.body.appendChild(root);\n    document.body.appendChild(helperTextElement);\n    const {component, helperText} = setupTest(root);\n    component.destroy();\n    expect(helperText.destroy).toHaveBeenCalled();\n    document.body.removeChild(root);\n    document.body.removeChild(helperTextElement);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy cleans up the character counter if present","suites":["MDCTextField"],"line":418,"updatePoint":{"line":418,"column":57},"code":"  it('#destroy cleans up the character counter if present', () => {\n    const root = getFixture();\n    const characterCounterElement = getHelperLineWithCharacterCounter();\n    document.body.appendChild(root);\n    document.body.appendChild(characterCounterElement);\n    const {component, characterCounter} = setupTest(root);\n    component.destroy();\n    expect(characterCounter.destroy).toHaveBeenCalled();\n    document.body.removeChild(root);\n    document.body.removeChild(characterCounterElement);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy cleans up the icon if present","suites":["MDCTextField"],"line":430,"updatePoint":{"line":430,"column":44},"code":"  it('#destroy cleans up the icon if present', () => {\n    const {component, icon} = setupTest();\n    component.destroy();\n    expect(icon.destroy).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy cleans up the label if present","suites":["MDCTextField"],"line":436,"updatePoint":{"line":436,"column":45},"code":"  it('#destroy cleans up the label if present', () => {\n    const {component, label} = setupTest();\n    component.destroy();\n    expect(label.destroy).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy cleans up the outline if present","suites":["MDCTextField"],"line":442,"updatePoint":{"line":442,"column":47},"code":"  it('#destroy cleans up the outline if present', () => {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = `<span class=\"mdc-notched-outline\"></span>`;\n    const child = wrapper.firstElementChild as HTMLElement;\n    wrapper.removeChild(child);\n\n    const root = getFixture();\n    root.appendChild(child);\n    const {component, outline} = setupTest(root);\n    component.destroy();\n    expect(outline.destroy).toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy handles undefined optional sub-elements gracefully","suites":["MDCTextField"],"line":455,"updatePoint":{"line":455,"column":65},"code":"  it('#destroy handles undefined optional sub-elements gracefully', () => {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = `\n      <label class=\"mdc-text-field mdc-text-field--filled\">\n        <input type=\"text\" class=\"mdc-text-field__input\" id=\"my-text-field\">\n      </label>\n    `;\n    const root = wrapper.firstElementChild as HTMLElement;\n    wrapper.removeChild(root);\n\n    const component = new MDCTextField(root);\n    expect(() => component.destroy).not.toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy handles undefined optional ripple gracefully","suites":["MDCTextField"],"line":469,"updatePoint":{"line":469,"column":59},"code":"  it('#destroy handles undefined optional ripple gracefully', () => {\n    const root = getFixture();\n    const component = new MDCTextField(root);\n    component.ripple = null;\n    expect(() => component.destroy).not.toThrow();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy calls destroy for both icon elements if present","suites":["MDCTextField"],"line":476,"updatePoint":{"line":476,"column":62},"code":"  it('#destroy calls destroy for both icon elements if present', () => {\n    const root = getFixture();\n    root.classList.add('mdc-text-field--with-trailing-icon');\n\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML =\n        `<i class=\"mdc-text-field__icon mdc-text-field__icon--trailing material-icons\">3d_rotations</i>`;\n    const child = wrapper.firstElementChild as HTMLElement;\n    wrapper.removeChild(child);\n    root.appendChild(child);\n\n    const component = new MDCTextField(root);\n    // The non-null assertion is deemed unnecessary, but without it tests on\n    // GitHub side fail to compile with error `Object is possibly 'null'`\n    // tslint:disable:no-unnecessary-type-assertion\n    component['leadingIcon']!.destroy =\n        jasmine.createSpy('leadingIcon_.destroy');\n    component['trailingIcon']!.destroy =\n        jasmine.createSpy('trailingIcon_.destroy');\n    component.destroy();\n    expect(component['leadingIcon']!.destroy).toHaveBeenCalled();\n    expect(component['trailingIcon']!.destroy).toHaveBeenCalled();\n    // tslint:enable:no-unnecessary-type-assertion\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#initialSyncWithDOM sets disabled if input element is not disabled","suites":["MDCTextField"],"line":501,"updatePoint":{"line":501,"column":72},"code":"  it('#initialSyncWithDOM sets disabled if input element is not disabled',\n     () => {\n       const {component} = setupTest();\n       component.initialSyncWithDOM();\n       expect(component.disabled).toBeFalsy();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#focus calls focus on the input element","suites":["MDCTextField"],"line":508,"updatePoint":{"line":508,"column":45},"code":"  it('#focus calls focus on the input element', () => {\n    const {root, component} = setupTest();\n    const input =\n        root.querySelector('.mdc-text-field__input') as HTMLInputElement;\n    input.focus = jasmine.createSpy('focus');\n    component.focus();\n\n    expect(input.focus).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set disabled updates the input element","suites":["MDCTextField"],"line":518,"updatePoint":{"line":518,"column":48},"code":"  it('get/set disabled updates the input element', () => {\n    const {root, component} = setupTest();\n    const input =\n        root.querySelector('.mdc-text-field__input') as HTMLInputElement;\n    component.disabled = true;\n    expect(input.disabled).toBeTruthy();\n    component.disabled = false;\n    expect(input.disabled).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set disabled updates the component styles","suites":["MDCTextField"],"line":528,"updatePoint":{"line":528,"column":51},"code":"  it('get/set disabled updates the component styles', () => {\n    const {root, component} = setupTest();\n    component.disabled = true;\n    expect(root.classList.contains(cssClasses.DISABLED)).toBeTruthy();\n    component.disabled = false;\n    expect(root.classList.contains(cssClasses.DISABLED)).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set valid updates the component styles","suites":["MDCTextField"],"line":536,"updatePoint":{"line":536,"column":44},"code":"  it('set valid updates the component styles', () => {\n    const {root, component} = setupTest();\n    component.valid = false;\n    expect(root.classList.contains(cssClasses.INVALID)).toBeTruthy();\n    component.valid = true;\n    expect(root.classList.contains(cssClasses.INVALID)).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set helperTextContent has no effect when no helper text element is present","suites":["MDCTextField"],"line":544,"updatePoint":{"line":544,"column":80},"code":"  it('set helperTextContent has no effect when no helper text element is present',\n     () => {\n       const {component} = setupTest();\n       expect(() => {\n         component.helperTextContent = 'foo';\n       }).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set leadingIconAriaLabel has no effect when no icon element is present","suites":["MDCTextField"],"line":552,"updatePoint":{"line":552,"column":76},"code":"  it('set leadingIconAriaLabel has no effect when no icon element is present',\n     () => {\n       const {component} = setupTest();\n       expect(() => {\n         component.leadingIconAriaLabel = 'foo';\n       }).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set trailingIconAriaLabel has no effect when no icon element is present","suites":["MDCTextField"],"line":560,"updatePoint":{"line":560,"column":77},"code":"  it('set trailingIconAriaLabel has no effect when no icon element is present',\n     () => {\n       const {component} = setupTest();\n       expect(() => {\n         component.trailingIconAriaLabel = 'foo';\n       }).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set leadingIconContent has no effect when no icon element is present","suites":["MDCTextField"],"line":568,"updatePoint":{"line":568,"column":74},"code":"  it('set leadingIconContent has no effect when no icon element is present',\n     () => {\n       const {component} = setupTest();\n       expect(() => {\n         component.leadingIconContent = 'foo';\n       }).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set trailingIconContent has no effect when no icon element is present","suites":["MDCTextField"],"line":576,"updatePoint":{"line":576,"column":75},"code":"  it('set trailingIconContent has no effect when no icon element is present',\n     () => {\n       const {component} = setupTest();\n       expect(() => {\n         component.trailingIconContent = 'foo';\n       }).not.toThrow();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.addClass adds a class to the root element","suites":["MDCTextField"],"line":584,"updatePoint":{"line":584,"column":56},"code":"  it('#adapter.addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBeTruthy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"layout calls foundation notchOutline","suites":["MDCTextField"],"line":590,"updatePoint":{"line":590,"column":42},"code":"  it('layout calls foundation notchOutline', () => {\n    const {component, foundation} = setupTest();\n    foundation.notchOutline = jasmine.createSpy('notchOutline');\n    component.layout();\n    expect(foundation.notchOutline).toHaveBeenCalledWith(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.removeClass removes a class from the root element","suites":["MDCTextField"],"line":597,"updatePoint":{"line":597,"column":64},"code":"  it('#adapter.removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBeFalsy();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.setInputAttr sets attribute on input element","suites":["MDCTextField"],"line":604,"updatePoint":{"line":604,"column":59},"code":"  it('#adapter.setInputAttr sets attribute on input element', () => {\n    const {root, component} = setupTest();\n    const input =\n        root.querySelector('.mdc-text-field__input') as HTMLInputElement;\n\n    (component.getDefaultFoundation() as any)\n        .adapter.setInputAttr('foo', 'bar');\n    expect(input.getAttribute('foo')).toEqual('bar');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.removeInputAttr removes attribute on input element","suites":["MDCTextField"],"line":614,"updatePoint":{"line":614,"column":65},"code":"  it('#adapter.removeInputAttr removes attribute on input element', () => {\n    const {root, component} = setupTest();\n    const input =\n        root.querySelector('.mdc-text-field__input') as HTMLInputElement;\n\n    input.setAttribute('foo', 'bar!');\n    (component.getDefaultFoundation() as any).adapter.removeInputAttr('foo');\n    expect(input.getAttribute('foo')).toBe(null);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.registerInputInteractionHandler adds a handler to the input element for a given event","suites":["MDCTextField"],"line":624,"updatePoint":{"line":624,"column":100},"code":"  it('#adapter.registerInputInteractionHandler adds a handler to the input element for a given event',\n     () => {\n       const {root, component} = setupTest();\n       const input =\n           root.querySelector('.mdc-text-field__input') as HTMLInputElement;\n       const handler = jasmine.createSpy('eventHandler');\n       (component.getDefaultFoundation() as any)\n           .adapter.registerInputInteractionHandler('click', handler);\n       emitEvent(input, 'click');\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.deregisterInputInteractionHandler removes a handler from the input element for a given event","suites":["MDCTextField"],"line":636,"updatePoint":{"line":636,"column":107},"code":"  it('#adapter.deregisterInputInteractionHandler removes a handler from the input element for a given event',\n     () => {\n       const {root, component} = setupTest();\n       const input =\n           root.querySelector('.mdc-text-field__input') as HTMLInputElement;\n       const handler = jasmine.createSpy('eventHandler');\n\n       input.addEventListener('click', handler);\n       (component.getDefaultFoundation() as any)\n           .adapter.deregisterInputInteractionHandler('click', handler);\n       emitEvent(input, 'click');\n       expect(handler).not.toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.registerTextFieldInteractionHandler adds an event handler for a given event on the root","suites":["MDCTextField"],"line":650,"updatePoint":{"line":650,"column":102},"code":"  it('#adapter.registerTextFieldInteractionHandler adds an event handler for a given event on the root',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('TextFieldInteractionHandler');\n       (component.getDefaultFoundation() as any)\n           .adapter.registerTextFieldInteractionHandler('click', handler);\n       emitEvent(root, 'click');\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.deregisterTextFieldInteractionHandler removes an event handler for a given event from the root","suites":["MDCTextField"],"line":660,"updatePoint":{"line":660,"column":109},"code":"  it('#adapter.deregisterTextFieldInteractionHandler removes an event handler for a given event from the root',\n     () => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('TextFieldInteractionHandler');\n       root.addEventListener('click', handler);\n       (component.getDefaultFoundation() as any)\n           .adapter.registerTextFieldInteractionHandler('click', handler);\n       emitEvent(root, 'click');\n       expect(handler).toHaveBeenCalledWith(jasmine.anything());\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.registerValidationAttributeChangeHandler creates a working mutation observer","suites":["MDCTextField"],"line":671,"updatePoint":{"line":671,"column":91},"code":"  it('#adapter.registerValidationAttributeChangeHandler creates a working mutation observer',\n     (done) => {\n       const {root, component} = setupTest();\n       const handler = jasmine.createSpy('ValidationAttributeChangeHandler');\n       handler.withArgs(jasmine.any(Array)).and.callFake((arr: string[]) => {\n         if (arr.indexOf('required') !== -1) {\n           done();\n         }\n       });\n\n       component['foundation']['adapter']\n           .registerValidationAttributeChangeHandler(handler);\n       (root.querySelector('.mdc-text-field__input') as HTMLInputElement)\n           .required = true;\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.deregisterValidationAttributeChangeHandler disconnects the passed observer","suites":["MDCTextField"],"line":687,"updatePoint":{"line":687,"column":89},"code":"  it('#adapter.deregisterValidationAttributeChangeHandler disconnects the passed observer',\n     () => {\n       const {component} = setupTest();\n       const disconnect = jasmine.createSpy('ValidationDisconnect');\n       const observer = new MutationObserver(() => undefined);\n       observer.disconnect = disconnect;\n\n       component['foundation']['adapter']\n           .deregisterValidationAttributeChangeHandler(observer);\n       expect(disconnect).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.getNativeInput returns the component input element","suites":["MDCTextField"],"line":699,"updatePoint":{"line":699,"column":65},"code":"  it('#adapter.getNativeInput returns the component input element', () => {\n    const {root, component} = setupTest();\n    expect((component.getDefaultFoundation() as any).adapter.getNativeInput())\n        .toEqual(root.querySelector('.mdc-text-field__input'));\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.activateLineRipple calls the activate method on the line ripple","suites":["MDCTextField"],"line":705,"updatePoint":{"line":705,"column":78},"code":"  it('#adapter.activateLineRipple calls the activate method on the line ripple',\n     () => {\n       const {component, lineRipple} = setupTest();\n       (component.getDefaultFoundation() as any).adapter.activateLineRipple();\n       expect(lineRipple.activate).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.deactivateLineRipple calls the deactivate method on the line ripple","suites":["MDCTextField"],"line":712,"updatePoint":{"line":712,"column":82},"code":"  it('#adapter.deactivateLineRipple calls the deactivate method on the line ripple',\n     () => {\n       const {component, lineRipple} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.deactivateLineRipple();\n       expect(lineRipple.deactivate).toHaveBeenCalled();\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#adapter.setLineRippleTransformOrigin calls the setRippleCenter method on the line ripple","suites":["MDCTextField"],"line":720,"updatePoint":{"line":720,"column":95},"code":"  it('#adapter.setLineRippleTransformOrigin calls the setRippleCenter method on the line ripple',\n     () => {\n       const {component, lineRipple} = setupTest();\n       (component.getDefaultFoundation() as any)\n           .adapter.setLineRippleTransformOrigin(100);\n       expect(lineRipple.setRippleCenter).toHaveBeenCalledWith(100);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"should not focus input when clicking icon","suites":["MDCTextField"],"line":728,"updatePoint":{"line":728,"column":47},"code":"  it('should not focus input when clicking icon', () => {\n    const root = getFixture();\n    const icon = root.querySelector('.mdc-text-field__icon') as HTMLElement;\n    const component = new MDCTextField(root);\n    document.body.appendChild(root);\n    root.click();\n    const input = (component as any).input as HTMLInputElement;\n    expect(document.activeElement).toBe(input, 'input should be focused');\n    input.blur();\n    expect(document.activeElement).not.toBe(input, 'ensure input was blurred');\n    icon.click();\n    expect(document.activeElement)\n        .not.toBe(input, 'input should not be focused');\n    document.body.removeChild(root);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set value","suites":["MDCTextField"],"line":750,"updatePoint":{"line":750,"column":19},"code":"  it('get/set value', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.value;\n    expect(mockFoundation.getValue).toHaveBeenCalled();\n    component.value = 'foo';\n    expect(mockFoundation.setValue).toHaveBeenCalledWith('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set leadingIconAriaLabel","suites":["MDCTextField"],"line":758,"updatePoint":{"line":758,"column":30},"code":"  it('set leadingIconAriaLabel', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.leadingIconAriaLabel = 'label';\n    expect(mockFoundation.setLeadingIconAriaLabel)\n        .toHaveBeenCalledWith('label');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set leadingIconContent","suites":["MDCTextField"],"line":765,"updatePoint":{"line":765,"column":28},"code":"  it('set leadingIconContent', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.leadingIconContent = 'label';\n    expect(mockFoundation.setLeadingIconContent).toHaveBeenCalledWith('label');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set trailingIconAriaLabel","suites":["MDCTextField"],"line":771,"updatePoint":{"line":771,"column":31},"code":"  it('set trailingIconAriaLabel', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.trailingIconAriaLabel = 'label';\n    expect(mockFoundation.setTrailingIconAriaLabel)\n        .toHaveBeenCalledWith('label');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set trailingIconContent","suites":["MDCTextField"],"line":778,"updatePoint":{"line":778,"column":29},"code":"  it('set trailingIconContent', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.trailingIconContent = 'label';\n    expect(mockFoundation.setTrailingIconContent).toHaveBeenCalledWith('label');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set valid","suites":["MDCTextField"],"line":784,"updatePoint":{"line":784,"column":19},"code":"  it('get/set valid', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.valid;\n    expect(mockFoundation.isValid).toHaveBeenCalled();\n    component.valid = true;\n    expect(mockFoundation.setValid).toHaveBeenCalledWith(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set required","suites":["MDCTextField"],"line":792,"updatePoint":{"line":792,"column":22},"code":"  it('get/set required', () => {\n    const {component} = setupMockFoundationTest();\n    component.required = true;\n    expect(component.required).toBe(true);\n    component.required = false;\n    expect(component.required).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set useNativeValidation","suites":["MDCTextField"],"line":800,"updatePoint":{"line":800,"column":29},"code":"  it('set useNativeValidation', () => {\n    const {component, mockFoundation} = setupMockFoundationTest();\n    component.useNativeValidation = true;\n    expect(mockFoundation.setUseNativeValidation).toHaveBeenCalledWith(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set pattern","suites":["MDCTextField"],"line":806,"updatePoint":{"line":806,"column":21},"code":"  it('get/set pattern', () => {\n    const {component} = setupMockFoundationTest();\n    component.pattern = '.{8,}';\n    expect(component.pattern).toEqual('.{8,}');\n    component.pattern = '.*';\n    expect(component.pattern).toEqual('.*');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set minLength","suites":["MDCTextField"],"line":814,"updatePoint":{"line":814,"column":23},"code":"  it('get/set minLength', () => {\n    const {component} = setupMockFoundationTest();\n    component.minLength = 8;\n    expect(component.minLength).toEqual(8);\n    component.minLength = 0;\n    expect(component.minLength).toEqual(0);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set maxLength","suites":["MDCTextField"],"line":822,"updatePoint":{"line":822,"column":23},"code":"  it('get/set maxLength', () => {\n    const {component} = setupMockFoundationTest();\n    component.maxLength = 10;\n    expect(component.maxLength).toEqual(10);\n    component.maxLength = -1;\n    // IE11 has a different value for no maxLength property\n    expect(component.maxLength).not.toEqual(10);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set min","suites":["MDCTextField"],"line":831,"updatePoint":{"line":831,"column":17},"code":"  it('get/set min', () => {\n    const {component} = setupMockFoundationTest();\n    component.min = '8';\n    expect(component.min).toEqual('8');\n    component.min = '0';\n    expect(component.min).toEqual('0');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set max","suites":["MDCTextField"],"line":839,"updatePoint":{"line":839,"column":17},"code":"  it('get/set max', () => {\n    const {component} = setupMockFoundationTest();\n    expect(component.max).toEqual('');\n    component.max = '10';\n    expect(component.max).toEqual('10');\n    component.max = '';\n    expect(component.max).toEqual('');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get/set step","suites":["MDCTextField"],"line":848,"updatePoint":{"line":848,"column":18},"code":"  it('get/set step', () => {\n    const {component} = setupMockFoundationTest();\n    component.step = '8';\n    expect(component.step).toEqual('8');\n    component.step = '10';\n    expect(component.step).toEqual('10');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get prefixText returns prefix textContent, or null without a prefix","suites":["MDCTextField"],"line":856,"updatePoint":{"line":856,"column":73},"code":"  it('get prefixText returns prefix textContent, or null without a prefix',\n     () => {\n       const root = getFixture();\n       const component = new MDCTextField(root);\n       expect(component.prefixText).toEqual(null);\n       const prefixRoot = getFixtureWithPrefix();\n       const prefixComponent = new MDCTextField(prefixRoot);\n       expect(prefixComponent.prefixText).toEqual('$');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set prefixText changes prefix textContent, if it exists","suites":["MDCTextField"],"line":866,"updatePoint":{"line":866,"column":61},"code":"  it('set prefixText changes prefix textContent, if it exists', () => {\n    const root = getFixture();\n    const component = new MDCTextField(root);\n    component.prefixText = 'foo' as string | null;\n    expect(component.prefixText).toEqual(null);\n    const prefixRoot = getFixtureWithPrefix();\n    const prefixComponent = new MDCTextField(prefixRoot);\n    prefixComponent.prefixText = 'foo';\n    expect(prefixComponent.prefixText).toEqual('foo');\n    const prefixEl = prefixRoot.querySelector(strings.PREFIX_SELECTOR)!;\n    expect(prefixEl.textContent).toEqual('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"get suffixText returns suffix textContent, or null without a suffix","suites":["MDCTextField"],"line":879,"updatePoint":{"line":879,"column":73},"code":"  it('get suffixText returns suffix textContent, or null without a suffix',\n     () => {\n       const root = getFixture();\n       const component = new MDCTextField(root);\n       expect(component.suffixText).toEqual(null);\n       const suffixRoot = getFixtureWithSuffix();\n       const suffixComponent = new MDCTextField(suffixRoot);\n       expect(suffixComponent.suffixText).toEqual('/100');\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"set suffixText changes suffix textContent, if it exists","suites":["MDCTextField"],"line":889,"updatePoint":{"line":889,"column":61},"code":"  it('set suffixText changes suffix textContent, if it exists', () => {\n    const root = getFixture();\n    const component = new MDCTextField(root);\n    component.suffixText = 'foo' as string | null;\n    expect(component.suffixText).toEqual(null);\n    const suffixRoot = getFixtureWithSuffix();\n    const suffixComponent = new MDCTextField(suffixRoot);\n    suffixComponent.suffixText = 'foo';\n    expect(suffixComponent.suffixText).toEqual('foo');\n    const suffixEl = suffixRoot.querySelector(strings.SUFFIX_SELECTOR)!;\n    expect(suffixEl.textContent).toEqual('foo');\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"exports strings","suites":["MDCTextFieldFoundation"],"line":34,"updatePoint":{"line":34,"column":21},"code":"  it('exports strings', () => {\n    expect(MDCTextFieldFoundation.strings).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"exports cssClasses","suites":["MDCTextFieldFoundation"],"line":38,"updatePoint":{"line":38,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCTextFieldFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"exports numbers","suites":["MDCTextFieldFoundation"],"line":42,"updatePoint":{"line":42,"column":21},"code":"  it('exports numbers', () => {\n    expect('numbers' in MDCTextFieldFoundation).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCTextFieldFoundation"],"line":46,"updatePoint":{"line":46,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCTextFieldFoundation, [\n      'addClass',\n      'removeClass',\n      'hasClass',\n      'setInputAttr',\n      'removeInputAttr',\n      'registerTextFieldInteractionHandler',\n      'deregisterTextFieldInteractionHandler',\n      'registerInputInteractionHandler',\n      'deregisterInputInteractionHandler',\n      'getNativeInput',\n      'isFocused',\n      'activateLineRipple',\n      'deactivateLineRipple',\n      'setLineRippleTransformOrigin',\n      'shakeLabel',\n      'floatLabel',\n      'setLabelRequired',\n      'hasLabel',\n      'getLabelWidth',\n      'registerValidationAttributeChangeHandler',\n      'deregisterValidationAttributeChangeHandler',\n      'hasOutline',\n      'notchOutline',\n      'closeOutline',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#constructor sets disabled to false","suites":["MDCTextFieldFoundation"],"line":134,"updatePoint":{"line":134,"column":41},"code":"  it('#constructor sets disabled to false', () => {\n    const {foundation} = setupTest();\n    expect(foundation.isDisabled()).toBeFalsy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#getValue returns the field's value","suites":["MDCTextFieldFoundation"],"line":173,"updatePoint":{"line":173,"column":42},"code":"  it('#getValue returns the field\\'s value', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getNativeInput.and.returnValue({\n      value: 'initValue',\n    } as MDCTextFieldNativeInputElement);\n    expect('initValue')\n        .toEqual(foundation.getValue(), 'getValue does not match input value.');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue with non-empty value styles the label","suites":["MDCTextFieldFoundation"],"line":182,"updatePoint":{"line":182,"column":53},"code":"  it('#setValue with non-empty value styles the label', () => {\n    const value = 'new value';\n    const {foundation, nativeInput, mockAdapter} =\n        setupValueTest({value: '', hasLabel: true});\n    // Initial empty value should not float label.\n    expect(mockAdapter.floatLabel).not.toHaveBeenCalledWith(false);\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n    nativeInput.value = value;\n    foundation.setValue(value);\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue with empty value styles the label","suites":["MDCTextFieldFoundation"],"line":198,"updatePoint":{"line":198,"column":49},"code":"  it('#setValue with empty value styles the label', () => {\n    const {foundation, nativeInput, mockAdapter} =\n        setupValueTest({value: 'old value', hasLabel: true});\n    // Initial value should float the label.\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n    nativeInput.value = '';\n    foundation.setValue('');\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(false);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue valid and invalid input","suites":["MDCTextFieldFoundation"],"line":213,"updatePoint":{"line":213,"column":39},"code":"  it('#setValue valid and invalid input', () => {\n    const {foundation, mockAdapter, nativeInput, helperText} = setupValueTest(\n        {value: '', optIsValid: false, hasLabel: true, useHelperText: true});\n\n    foundation.setValue('invalid');\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(helperText.setValidity).toHaveBeenCalledWith(false);\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n\n    nativeInput.validity.valid = true;\n    foundation.setValue('valid');\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(helperText.setValidity).toHaveBeenCalledWith(true);\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue valid and invalid input without autovalidation","suites":["MDCTextFieldFoundation"],"line":235,"updatePoint":{"line":235,"column":62},"code":"  it('#setValue valid and invalid input without autovalidation', () => {\n    const {foundation, mockAdapter, nativeInput, helperText} = setupValueTest(\n        {value: '', optIsValid: false, hasLabel: true, useHelperText: true});\n\n    expect(foundation.getValidateOnValueChange()).toBeTrue();\n    foundation.setValidateOnValueChange(false);\n    expect(foundation.getValidateOnValueChange()).toBeFalse();\n\n    foundation.setValue('invalid');\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(helperText.setValidity).not.toHaveBeenCalledWith(false);\n    expect(mockAdapter.shakeLabel).not.toHaveBeenCalledWith(true);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n\n    nativeInput.validity.valid = true;\n    foundation.setValue('valid');\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(helperText.setValidity).not.toHaveBeenCalledWith(true);\n    expect(mockAdapter.shakeLabel).not.toHaveBeenCalledWith(false);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue with invalid status and empty value does not shake the label","suites":["MDCTextFieldFoundation"],"line":262,"updatePoint":{"line":262,"column":76},"code":"  it('#setValue with invalid status and empty value does not shake the label',\n     () => {\n       const {foundation, mockAdapter, helperText} = setupValueTest(\n           {value: '', optIsValid: false, hasLabel: true, useHelperText: true});\n\n       foundation.setValue('');\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.INVALID);\n       expect(helperText.setValidity).toHaveBeenCalledWith(false);\n       expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n       expect(mockAdapter.floatLabel).toHaveBeenCalledWith(false);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue does not affect focused state","suites":["MDCTextFieldFoundation"],"line":276,"updatePoint":{"line":276,"column":45},"code":"  it('#setValue does not affect focused state', () => {\n    const {foundation, mockAdapter} = setupValueTest({value: ''});\n    foundation.setValue('');\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue does not affect disabled state","suites":["MDCTextFieldFoundation"],"line":284,"updatePoint":{"line":284,"column":46},"code":"  it('#setValue does not affect disabled state', () => {\n    const {foundation, mockAdapter} = setupValueTest({value: ''});\n    foundation.setValue('');\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.DISABLED);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.DISABLED);\n    // Called once initially because the field is valid, should not be called\n    // twice.\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(mockAdapter.removeClass).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue updates character counter when present","suites":["MDCTextFieldFoundation"],"line":296,"updatePoint":{"line":296,"column":54},"code":"  it('#setValue updates character counter when present', () => {\n    const {foundation, mockAdapter, characterCounter} =\n        setupTest({useCharacterCounter: true});\n    const nativeInput = {\n      type: 'text',\n      value: '',\n      maxLength: 4,\n      validity: {\n        valid: true,\n      },\n    };\n    mockAdapter.getNativeInput.and.returnValue(nativeInput);\n\n    foundation.setValue('ok');\n    expect(characterCounter.setCounterValue).toHaveBeenCalledWith(2, 4);\n    expect(characterCounter.setCounterValue).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValue forces the character counter to update if value was updated independently","suites":["MDCTextFieldFoundation"],"line":314,"updatePoint":{"line":314,"column":89},"code":"  it('#setValue forces the character counter to update if value was updated independently',\n     () => {\n       const {foundation, mockAdapter, characterCounter} =\n           setupTest({useCharacterCounter: true});\n       const nativeInput = {\n         type: 'text',\n         value: '',\n         maxLength: 4,\n         validity: {\n           valid: true,\n         },\n       };\n       mockAdapter.getNativeInput.and.returnValue(nativeInput);\n       nativeInput.value = 'ok';\n       foundation.setValue('ok');\n       expect(characterCounter.setCounterValue).toHaveBeenCalledWith(2, 4);\n       expect(characterCounter.setCounterValue).toHaveBeenCalledTimes(1);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#isValid for native validation","suites":["MDCTextFieldFoundation"],"line":333,"updatePoint":{"line":333,"column":36},"code":"  it('#isValid for native validation', () => {\n    const {foundation, nativeInput} =\n        setupValueTest({value: '', optIsValid: true});\n    expect(foundation.isValid()).toBeTruthy();\n\n    nativeInput.validity.valid = false;\n    expect(foundation.isValid()).toBeFalsy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid overrides native validation when useNativeValidation set to false","suites":["MDCTextFieldFoundation"],"line":342,"updatePoint":{"line":342,"column":81},"code":"  it('#setValid overrides native validation when useNativeValidation set to false',\n     () => {\n       const {foundation, nativeInput} =\n           setupValueTest({value: '', optIsValid: false});\n       foundation.setUseNativeValidation(false);\n       foundation.setValid(true);\n       expect(foundation.isValid()).toBeTruthy();\n\n       nativeInput.validity.valid = true;\n       foundation.setValid(false);\n       expect(foundation.isValid()).toBeFalsy();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid updates classes","suites":["MDCTextFieldFoundation"],"line":355,"updatePoint":{"line":355,"column":31},"code":"  it('#setValid updates classes', () => {\n    const {foundation, mockAdapter, helperText} =\n        setupTest({useHelperText: true});\n    mockAdapter.hasLabel.and.returnValue(true);\n    mockAdapter.getNativeInput.and.returnValue({\n      value: 'test',\n    } as MDCTextFieldNativeInputElement);\n\n    foundation.setValid(false);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(helperText.setValidity).toHaveBeenCalledWith(false);\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(true);\n\n    foundation.setValid(true);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(helperText.setValidity).toHaveBeenCalledWith(true);\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n\n    // None of these is affected by setValid.\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.DISABLED);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.DISABLED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid sets aria-describedby if validation helper text is visible","suites":["MDCTextFieldFoundation"],"line":382,"updatePoint":{"line":382,"column":74},"code":"  it('#setValid sets aria-describedby if validation helper text is visible',\n     () => {\n       const {foundation, mockAdapter, helperText} =\n           setupTest({useHelperText: true});\n       helperText.isValidation.and.returnValue(true);\n       helperText.isVisible.and.returnValue(true);\n       helperText.getId.and.returnValue('foooo');\n\n       foundation.setValid(true);\n       expect(mockAdapter.setInputAttr)\n           .toHaveBeenCalledWith(strings.ARIA_DESCRIBEDBY, 'foooo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid removes aria-describedby if validation helper text is hidden","suites":["MDCTextFieldFoundation"],"line":395,"updatePoint":{"line":395,"column":76},"code":"  it('#setValid removes aria-describedby if validation helper text is hidden',\n     () => {\n       const {foundation, mockAdapter, helperText} =\n           setupTest({useHelperText: true});\n       helperText.isValidation.and.returnValue(true);\n       helperText.isVisible.and.returnValue(false);\n       helperText.getId.and.returnValue('foooo');\n\n       foundation.setValid(true);\n       expect(mockAdapter.removeInputAttr)\n           .toHaveBeenCalledWith(strings.ARIA_DESCRIBEDBY);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid updates classes, but not label methods when hasLabel is false","suites":["MDCTextFieldFoundation"],"line":408,"updatePoint":{"line":408,"column":77},"code":"  it('#setValid updates classes, but not label methods when hasLabel is false',\n     () => {\n       const {foundation, mockAdapter, helperText} =\n           setupTest({useHelperText: true});\n\n       foundation.setValid(false);\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.INVALID);\n       expect(helperText.setValidity).toHaveBeenCalledWith(false);\n       expect(mockAdapter.shakeLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n\n       foundation.setValid(true);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n       expect(helperText.setValidity).toHaveBeenCalledWith(true);\n       expect(mockAdapter.shakeLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.DISABLED);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.DISABLED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled flips disabled when a native input is given","suites":["MDCTextFieldFoundation"],"line":435,"updatePoint":{"line":435,"column":62},"code":"  it('#setDisabled flips disabled when a native input is given', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const nativeInput = {disabled: false} as MDCTextFieldNativeInputElement;\n    mockAdapter.getNativeInput.and.returnValue(nativeInput);\n    foundation.setDisabled(true);\n    expect(foundation.isDisabled()).toBeTruthy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled has no effect when no native input is provided","suites":["MDCTextFieldFoundation"],"line":443,"updatePoint":{"line":443,"column":65},"code":"  it('#setDisabled has no effect when no native input is provided', () => {\n    const {foundation} = setupTest();\n    foundation.setDisabled(true);\n    expect(foundation.isDisabled()).toBeFalsy();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled set the disabled property on the native input when there is one","suites":["MDCTextFieldFoundation"],"line":449,"updatePoint":{"line":449,"column":82},"code":"  it('#setDisabled set the disabled property on the native input when there is one',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       const nativeInput = {disabled: false} as MDCTextFieldNativeInputElement;\n       mockAdapter.getNativeInput.and.returnValue(nativeInput);\n       foundation.setDisabled(true);\n       expect(nativeInput.disabled).toBeTruthy();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled handles no native input being returned gracefully","suites":["MDCTextFieldFoundation"],"line":458,"updatePoint":{"line":458,"column":68},"code":"  it('#setDisabled handles no native input being returned gracefully', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getNativeInput.and.returnValue(null);\n    expect(() => foundation.setDisabled).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled adds mdc-text-field--disabled when set to true","suites":["MDCTextFieldFoundation"],"line":464,"updatePoint":{"line":464,"column":65},"code":"  it('#setDisabled adds mdc-text-field--disabled when set to true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setDisabled(true);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.DISABLED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled removes mdc-text-field--invalid when set to true","suites":["MDCTextFieldFoundation"],"line":470,"updatePoint":{"line":470,"column":67},"code":"  it('#setDisabled removes mdc-text-field--invalid when set to true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setDisabled(true);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled removes mdc-text-field--disabled when set to false","suites":["MDCTextFieldFoundation"],"line":476,"updatePoint":{"line":476,"column":69},"code":"  it('#setDisabled removes mdc-text-field--disabled when set to false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setDisabled(false);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.DISABLED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled sets disabled on leading icon","suites":["MDCTextFieldFoundation"],"line":482,"updatePoint":{"line":482,"column":48},"code":"  it('#setDisabled sets disabled on leading icon', () => {\n    const {foundation, leadingIcon} = setupTest({useLeadingIcon: true});\n    foundation.setDisabled(true);\n    expect(leadingIcon.setDisabled).toHaveBeenCalledWith(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setDisabled sets disabled on trailing icon","suites":["MDCTextFieldFoundation"],"line":488,"updatePoint":{"line":488,"column":49},"code":"  it('#setDisabled sets disabled on trailing icon', () => {\n    const {foundation, trailingIcon} = setupTest({useTrailingIcon: true});\n    foundation.setDisabled(true);\n    expect(trailingIcon.setDisabled).toHaveBeenCalledWith(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid adds mdc-textfied--invalid when set to false","suites":["MDCTextFieldFoundation"],"line":494,"updatePoint":{"line":494,"column":60},"code":"  it('#setValid adds mdc-textfied--invalid when set to false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setValid(false);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.INVALID);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid removes mdc-textfied--invalid when set to true","suites":["MDCTextFieldFoundation"],"line":500,"updatePoint":{"line":500,"column":62},"code":"  it('#setValid removes mdc-textfied--invalid when set to true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.setValid(true);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setValid should not trigger shake animation when text field is empty","suites":["MDCTextFieldFoundation"],"line":506,"updatePoint":{"line":506,"column":75},"code":"  it('#setValid should not trigger shake animation when text field is empty',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.hasLabel.and.returnValue(true);\n       mockAdapter.getNativeInput.and.returnValue({\n         value: '',\n       } as MDCTextFieldNativeInputElement);\n       foundation.setValid(false);\n       expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#init focuses on input if adapter.isFocused is true","suites":["MDCTextFieldFoundation"],"line":517,"updatePoint":{"line":517,"column":57},"code":"  it('#init focuses on input if adapter.isFocused is true', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.isFocused.and.returnValue(true);\n    foundation.activateFocus = jasmine.createSpy('activateFocus');\n    foundation.init();\n    expect(foundation.activateFocus).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#init does not focus if adapter.isFocused is false","suites":["MDCTextFieldFoundation"],"line":525,"updatePoint":{"line":525,"column":56},"code":"  it('#init does not focus if adapter.isFocused is false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.isFocused.and.returnValue(false);\n    foundation.init();\n    foundation.activateFocus = jasmine.createSpy('activateFocus');\n    expect(foundation.activateFocus).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#init adds event listeners","suites":["MDCTextFieldFoundation"],"line":533,"updatePoint":{"line":533,"column":32},"code":"  it('#init adds event listeners', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.init();\n\n    expect(mockAdapter.registerInputInteractionHandler)\n        .toHaveBeenCalledWith('focus', jasmine.any(Function));\n    expect(mockAdapter.registerInputInteractionHandler)\n        .toHaveBeenCalledWith('blur', jasmine.any(Function));\n    expect(mockAdapter.registerInputInteractionHandler)\n        .toHaveBeenCalledWith('input', jasmine.any(Function));\n    expect(mockAdapter.registerInputInteractionHandler)\n        .toHaveBeenCalledWith('mousedown', jasmine.any(Function));\n    expect(mockAdapter.registerInputInteractionHandler)\n        .toHaveBeenCalledWith('touchstart', jasmine.any(Function));\n    expect(mockAdapter.registerTextFieldInteractionHandler)\n        .toHaveBeenCalledWith('click', jasmine.any(Function));\n    expect(mockAdapter.registerTextFieldInteractionHandler)\n        .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n    expect(mockAdapter.registerValidationAttributeChangeHandler)\n        .toHaveBeenCalledWith(jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#destroy removes event listeners","suites":["MDCTextFieldFoundation"],"line":555,"updatePoint":{"line":555,"column":38},"code":"  it('#destroy removes event listeners', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation['validationObserver'] = new MutationObserver(() => {});\n    foundation.destroy();\n\n    expect(mockAdapter.deregisterInputInteractionHandler)\n        .toHaveBeenCalledWith('focus', jasmine.any(Function));\n    expect(mockAdapter.deregisterInputInteractionHandler)\n        .toHaveBeenCalledWith('blur', jasmine.any(Function));\n    expect(mockAdapter.deregisterInputInteractionHandler)\n        .toHaveBeenCalledWith('input', jasmine.any(Function));\n    expect(mockAdapter.deregisterInputInteractionHandler)\n        .toHaveBeenCalledWith('mousedown', jasmine.any(Function));\n    expect(mockAdapter.deregisterInputInteractionHandler)\n        .toHaveBeenCalledWith('touchstart', jasmine.any(Function));\n    expect(mockAdapter.deregisterTextFieldInteractionHandler)\n        .toHaveBeenCalledWith('click', jasmine.any(Function));\n    expect(mockAdapter.deregisterTextFieldInteractionHandler)\n        .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n    expect(mockAdapter.deregisterValidationAttributeChangeHandler)\n        .toHaveBeenCalledWith(foundation['validationObserver']);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#init floats label if the input contains a value","suites":["MDCTextFieldFoundation"],"line":578,"updatePoint":{"line":578,"column":54},"code":"  it('#init floats label if the input contains a value', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasLabel.and.returnValue(true);\n    mockAdapter.getNativeInput.and.returnValue({\n      value: 'Pre-filled value',\n      disabled: false,\n      validity: {\n        badInput: false,\n      },\n    });\n    foundation.init();\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#init does not call floatLabel if there is no label and the input contains a value","suites":["MDCTextFieldFoundation"],"line":594,"updatePoint":{"line":594,"column":88},"code":"  it('#init does not call floatLabel if there is no label and the input contains a value',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       mockAdapter.getNativeInput.and.returnValue({\n         value: 'Pre-filled value',\n         disabled: false,\n         validity: {\n           badInput: false,\n         },\n       });\n       foundation.init();\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#init does not float label if the input does not contain a value","suites":["MDCTextFieldFoundation"],"line":611,"updatePoint":{"line":611,"column":70},"code":"  it('#init does not float label if the input does not contain a value', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getNativeInput.and.returnValue({\n      value: '',\n      disabled: false,\n      validity: {\n        badInput: false,\n      },\n    });\n    foundation.init();\n    expect(mockAdapter.floatLabel)\n        .not.toHaveBeenCalledWith(\n            /* value */ '', /* isFocused */ false, /* isBadInput */ false);\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setHelperTextContent sets the content of the helper text element","suites":["MDCTextFieldFoundation"],"line":628,"updatePoint":{"line":628,"column":71},"code":"  it('#setHelperTextContent sets the content of the helper text element',\n     () => {\n       const {foundation, helperText} = setupTest({useHelperText: true});\n       foundation.setHelperTextContent('foo');\n       expect(helperText.setContent).toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setLeadingIconAriaLabel sets the aria-label of the leading icon element","suites":["MDCTextFieldFoundation"],"line":635,"updatePoint":{"line":635,"column":78},"code":"  it('#setLeadingIconAriaLabel sets the aria-label of the leading icon element',\n     () => {\n       const {foundation, leadingIcon} = setupTest({useLeadingIcon: true});\n       foundation.setLeadingIconAriaLabel('foo');\n       expect(leadingIcon.setAriaLabel).toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setLeadingIconAriaLabel does nothing if element is not present","suites":["MDCTextFieldFoundation"],"line":642,"updatePoint":{"line":642,"column":69},"code":"  it('#setLeadingIconAriaLabel does nothing if element is not present', () => {\n    const {foundation} = setupTest({useLeadingIcon: false});\n    expect(() => foundation.setLeadingIconAriaLabel).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setLeadingIconContent sets the content of the leading icon element","suites":["MDCTextFieldFoundation"],"line":647,"updatePoint":{"line":647,"column":73},"code":"  it('#setLeadingIconContent sets the content of the leading icon element',\n     () => {\n       const {foundation, leadingIcon} = setupTest({useLeadingIcon: true});\n       foundation.setLeadingIconContent('foo');\n       expect(leadingIcon.setContent).toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setLeadingIconContent does nothing if element is not present","suites":["MDCTextFieldFoundation"],"line":654,"updatePoint":{"line":654,"column":67},"code":"  it('#setLeadingIconContent does nothing if element is not present', () => {\n    const {foundation} = setupTest({useLeadingIcon: false});\n    expect(() => foundation.setLeadingIconContent).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setTrailingIconAriaLabel sets the aria-label of the trailing icon element","suites":["MDCTextFieldFoundation"],"line":659,"updatePoint":{"line":659,"column":80},"code":"  it('#setTrailingIconAriaLabel sets the aria-label of the trailing icon element',\n     () => {\n       const {foundation, trailingIcon} = setupTest({useTrailingIcon: true});\n       foundation.setTrailingIconAriaLabel('foo');\n       expect(trailingIcon.setAriaLabel).toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setTrailingIconAriaLabel does nothing if element is not present","suites":["MDCTextFieldFoundation"],"line":666,"updatePoint":{"line":666,"column":70},"code":"  it('#setTrailingIconAriaLabel does nothing if element is not present', () => {\n    const {foundation} = setupTest({useTrailingIcon: false});\n    expect(() => foundation.setTrailingIconAriaLabel).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setTrailingIconContent sets the content of the trailing icon element","suites":["MDCTextFieldFoundation"],"line":671,"updatePoint":{"line":671,"column":75},"code":"  it('#setTrailingIconContent sets the content of the trailing icon element',\n     () => {\n       const {foundation, trailingIcon} = setupTest({useTrailingIcon: true});\n       foundation.setTrailingIconContent('foo');\n       expect(trailingIcon.setContent).toHaveBeenCalledWith('foo');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#setTrailingIconContent does nothing if element is not present","suites":["MDCTextFieldFoundation"],"line":678,"updatePoint":{"line":678,"column":68},"code":"  it('#setTrailingIconContent does nothing if element is not present', () => {\n    const {foundation} = setupTest({useTrailingIcon: false});\n    expect(() => foundation.setTrailingIconContent).not.toThrow();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#notchOutline updates the width of the outline element","suites":["MDCTextFieldFoundation"],"line":683,"updatePoint":{"line":683,"column":60},"code":"  it('#notchOutline updates the width of the outline element', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.getLabelWidth.and.returnValue(LABEL_WIDTH);\n    mockAdapter.hasLabel.and.returnValue(true);\n    mockAdapter.hasOutline.and.returnValue(true);\n\n    foundation.notchOutline(true);\n    expect(mockAdapter.notchOutline)\n        .toHaveBeenCalledWith(LABEL_WIDTH * numbers.LABEL_SCALE);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#notchOutline does nothing if no outline is present","suites":["MDCTextFieldFoundation"],"line":701,"updatePoint":{"line":701,"column":57},"code":"  it('#notchOutline does nothing if no outline is present', () => {\n    const {foundation, mockAdapter} = setupBareBonesTest();\n    mockAdapter.hasOutline.and.returnValue(false);\n    mockAdapter.hasLabel.and.returnValue(true);\n\n    foundation.notchOutline(true);\n    expect(mockAdapter.notchOutline)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#notchOutline does nothing if no label is present","suites":["MDCTextFieldFoundation"],"line":711,"updatePoint":{"line":711,"column":55},"code":"  it('#notchOutline does nothing if no label is present', () => {\n    const {foundation, mockAdapter} = setupBareBonesTest();\n    mockAdapter.hasOutline.and.returnValue(true);\n    mockAdapter.hasLabel.and.returnValue(false);\n\n    foundation.notchOutline(true);\n    expect(mockAdapter.notchOutline)\n        .not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#notchOutline width is set to 0 if no label text is present","suites":["MDCTextFieldFoundation"],"line":721,"updatePoint":{"line":721,"column":65},"code":"  it('#notchOutline width is set to 0 if no label text is present', () => {\n    const {foundation, mockAdapter} = setupBareBonesTest();\n    mockAdapter.hasOutline.and.returnValue(true);\n    mockAdapter.hasLabel.and.returnValue(true);\n    mockAdapter.getLabelWidth.and.returnValue(0);\n\n    foundation.notchOutline(true);\n    expect(mockAdapter.notchOutline).toHaveBeenCalledWith(0);\n    expect(mockAdapter.notchOutline).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#notchOutline(false) closes the outline","suites":["MDCTextFieldFoundation"],"line":732,"updatePoint":{"line":732,"column":45},"code":"  it('#notchOutline(false) closes the outline', () => {\n    const {foundation, mockAdapter} = setupBareBonesTest();\n    mockAdapter.hasLabel.and.returnValue(true);\n    mockAdapter.hasOutline.and.returnValue(true);\n\n    foundation.notchOutline(false);\n    expect(mockAdapter.closeOutline).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on input styles label if input event occurs without any other events","suites":["MDCTextFieldFoundation"],"line":741,"updatePoint":{"line":741,"column":74},"code":"  it('on input styles label if input event occurs without any other events',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       let input: Function|undefined;\n       mockAdapter.hasLabel.and.returnValue(true);\n       mockAdapter.registerInputInteractionHandler\n           .withArgs(jasmine.any(String), jasmine.any(Function))\n           .and.callFake((evtType: string, handler: Function) => {\n             if (evtType === 'input') {\n               input = handler;\n             }\n           });\n       foundation.init();\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n       if (input !== undefined) {\n         input();\n       }\n       expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n       expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on input doesnot styles label if input event occurs without any other events but hasLabel is false","suites":["MDCTextFieldFoundation"],"line":767,"updatePoint":{"line":767,"column":104},"code":"  it('on input doesnot styles label if input event occurs without any other events but hasLabel is false',\n     () => {\n       const {foundation, mockAdapter} = setupTest();\n       let input: Function|undefined;\n       mockAdapter.registerInputInteractionHandler\n           .withArgs(jasmine.any(String), jasmine.any(Function))\n           .and.callFake((evtType: string, handler: Function) => {\n             if (evtType === 'input') {\n               input = handler;\n             }\n           });\n       foundation.init();\n       if (input !== undefined) {\n         input();\n       }\n       expect(mockAdapter.shakeLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on input does nothing if input event preceded by keydown event","suites":["MDCTextFieldFoundation"],"line":790,"updatePoint":{"line":790,"column":68},"code":"  it('on input does nothing if input event preceded by keydown event', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const mockEvt = {\n      type: 'keydown',\n      key: 'Enter',\n    };\n    const mockInput = {\n      disabled: false,\n      value: '',\n    } as MDCTextFieldNativeInputElement;\n    let keydown: Function|undefined;\n    let input: Function|undefined;\n\n    mockAdapter.getNativeInput.and.returnValue(mockInput);\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'input') {\n            input = handler;\n          } else if (evtType === 'keydown') {\n            keydown = handler;\n          }\n        });\n    foundation.init();\n    if (keydown !== undefined) {\n      keydown(mockEvt);\n    }\n    if (input !== undefined) {\n      input();\n    }\n    expect(mockAdapter.shakeLabel).not.toHaveBeenCalled();\n    expect(mockAdapter.floatLabel).not.toHaveBeenCalled();\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on focus adds mdc-text-field--focused class","suites":["MDCTextFieldFoundation"],"line":826,"updatePoint":{"line":826,"column":49},"code":"  it('on focus adds mdc-text-field--focused class', () => {\n    const {foundation, mockAdapter} = setupTest();\n    let focus: Function|undefined;\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'focus') {\n            focus = handler;\n          }\n        });\n    foundation.init();\n    if (focus !== undefined) {\n      focus();\n    }\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.FOCUSED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on focus activates line ripple","suites":["MDCTextFieldFoundation"],"line":843,"updatePoint":{"line":843,"column":36},"code":"  it('on focus activates line ripple', () => {\n    const {foundation, mockAdapter} = setupTest();\n    let focus: Function|undefined;\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'focus') {\n            focus = handler;\n          }\n        });\n    foundation.init();\n    if (focus !== undefined) {\n      focus();\n    }\n    expect(mockAdapter.activateLineRipple).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on focus styles label","suites":["MDCTextFieldFoundation"],"line":860,"updatePoint":{"line":860,"column":27},"code":"  it('on focus styles label', () => {\n    const {foundation, mockAdapter} = setupTest();\n    let focus: Function|undefined;\n    mockAdapter.hasLabel.and.returnValue(true);\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'focus') {\n            focus = handler;\n          }\n        });\n    foundation.init();\n    expect(mockAdapter.floatLabel).not.toHaveBeenCalledWith(jasmine.anything());\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n    if (focus !== undefined) {\n      focus();\n    }\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on focus do not styles label if hasLabel is false","suites":["MDCTextFieldFoundation"],"line":881,"updatePoint":{"line":881,"column":55},"code":"  it('on focus do not styles label if hasLabel is false', () => {\n    const {foundation, mockAdapter} = setupTest();\n    let focus: Function|undefined;\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'focus') {\n            focus = handler;\n          }\n        });\n    foundation.init();\n    if (focus !== undefined) {\n      focus();\n    }\n    expect(mockAdapter.floatLabel).not.toHaveBeenCalledWith(jasmine.anything());\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n    expect(mockAdapter.shakeLabel).not.toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on focus makes helper text visible to the screen reader","suites":["MDCTextFieldFoundation"],"line":901,"updatePoint":{"line":901,"column":61},"code":"  it('on focus makes helper text visible to the screen reader', () => {\n    const {foundation, mockAdapter, helperText} =\n        setupTest({useHelperText: true});\n    let focus: Function|undefined;\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'focus') {\n            focus = handler;\n          }\n        });\n    foundation.init();\n    if (focus !== undefined) {\n      focus();\n    }\n    expect(helperText.showToScreenReader).toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on blur removes mdc-text-field--focused class","suites":["MDCTextFieldFoundation"],"line":944,"updatePoint":{"line":944,"column":51},"code":"  it('on blur removes mdc-text-field--focused class', () => {\n    const {mockAdapter, blur} = setupBlurTest();\n    if (blur !== undefined) {\n      blur();\n    }\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.FOCUSED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on blur styles label when no input value present and validity checks pass","suites":["MDCTextFieldFoundation"],"line":952,"updatePoint":{"line":952,"column":79},"code":"  it('on blur styles label when no input value present and validity checks pass',\n     () => {\n       const {blur, mockAdapter} = setupBlurTest();\n       mockAdapter.hasLabel.and.returnValue(true);\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n       if (blur !== undefined) {\n         blur();\n       }\n       expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n       expect(mockAdapter.floatLabel).toHaveBeenCalledWith(false);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"does not style label on blur when no input value present and validity checks pass and hasLabel is false","suites":["MDCTextFieldFoundation"],"line":969,"updatePoint":{"line":969,"column":109},"code":"  it('does not style label on blur when no input value present and validity checks pass and hasLabel is false',\n     () => {\n       const {blur, mockAdapter} = setupBlurTest();\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(/* value */ '', /* isFocused */ false);\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n       if (blur !== undefined) {\n         blur();\n       }\n       expect(mockAdapter.shakeLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on blur styles label if input has a value","suites":["MDCTextFieldFoundation"],"line":987,"updatePoint":{"line":987,"column":47},"code":"  it('on blur styles label if input has a value', () => {\n    const {blur, nativeInput, mockAdapter} = setupBlurTest();\n    mockAdapter.hasLabel.and.returnValue(true);\n    expect(mockAdapter.floatLabel).not.toHaveBeenCalledWith(jasmine.anything());\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n    nativeInput.value = 'non-empty value';\n    if (blur !== undefined) {\n      blur();\n    }\n    expect(mockAdapter.shakeLabel).toHaveBeenCalledWith(false);\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"does not style label on blur if input has a value and hasLabel is false","suites":["MDCTextFieldFoundation"],"line":1003,"updatePoint":{"line":1003,"column":77},"code":"  it('does not style label on blur if input has a value and hasLabel is false',\n     () => {\n       const {blur, nativeInput, mockAdapter} = setupBlurTest();\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(/* value */ '', /* isFocused */ false);\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n       nativeInput.value = 'non-empty value';\n       if (blur !== undefined) {\n         blur();\n       }\n       expect(mockAdapter.shakeLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.floatLabel)\n           .not.toHaveBeenCalledWith(jasmine.anything());\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on blur set validity of helper text","suites":["MDCTextFieldFoundation"],"line":1069,"updatePoint":{"line":1069,"column":41},"code":"  it('on blur set validity of helper text', () => {\n    const {blur, nativeInput, helperText} = setupBlurTest();\n    nativeInput.validity.valid = false;\n    if (blur !== undefined) {\n      blur();\n    }\n    expect(helperText.setValidity).toHaveBeenCalledWith(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on blur handles getNativeInput() not returning anything gracefully","suites":["MDCTextFieldFoundation"],"line":1078,"updatePoint":{"line":1078,"column":72},"code":"  it('on blur handles getNativeInput() not returning anything gracefully',\n     () => {\n       const {mockAdapter, blur} = setupBlurTest();\n       mockAdapter.getNativeInput.and.returnValue(null);\n       expect(blur).not.toThrow();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on keydown sets receivedUserInput to true when input is enabled","suites":["MDCTextFieldFoundation"],"line":1085,"updatePoint":{"line":1085,"column":69},"code":"  it('on keydown sets receivedUserInput to true when input is enabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    let keydown: Function|undefined;\n    mockAdapter.registerTextFieldInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'keydown') {\n            keydown = handler;\n          }\n        });\n    mockAdapter.getNativeInput.and.returnValue({\n      disabled: false,\n      value: '',\n    } as MDCTextFieldNativeInputElement);\n    foundation.init();\n    expect(foundation['receivedUserInput']).toEqual(false);\n    if (keydown !== undefined) {\n      keydown();\n    }\n    expect(foundation['receivedUserInput']).toEqual(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on click does not set receivedUserInput if input is disabled","suites":["MDCTextFieldFoundation"],"line":1107,"updatePoint":{"line":1107,"column":66},"code":"  it('on click does not set receivedUserInput if input is disabled', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const mockEvt = {\n      type: 'click',\n    };\n    const mockInput = {\n      disabled: true,\n      value: '',\n    } as MDCTextFieldNativeInputElement;\n    let click: Function|undefined;\n\n    mockAdapter.getNativeInput.and.returnValue(mockInput);\n    mockAdapter.registerTextFieldInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'click') {\n            click = handler;\n          }\n        });\n    foundation.init();\n    expect(foundation['receivedUserInput']).toEqual(false);\n    if (click !== undefined) {\n      click(mockEvt);\n    }\n    expect(foundation['receivedUserInput']).toEqual(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"mousedown on the input sets the line ripple origin","suites":["MDCTextFieldFoundation"],"line":1134,"updatePoint":{"line":1134,"column":56},"code":"  it('mousedown on the input sets the line ripple origin', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const mockEvt = {\n      target: {\n        getBoundingClientRect: () => {\n          return {};\n        },\n      },\n      clientX: 200,\n      clientY: 200,\n    };\n\n    let clickHandler: Function|undefined;\n\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'mousedown') {\n            clickHandler = handler;\n          }\n        });\n\n    foundation.init();\n    if (clickHandler !== undefined) {\n      clickHandler(mockEvt);\n    }\n\n    expect(mockAdapter.setLineRippleTransformOrigin)\n        .toHaveBeenCalledWith(jasmine.anything());\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"touchstart on the input sets the line ripple origin","suites":["MDCTextFieldFoundation"],"line":1165,"updatePoint":{"line":1165,"column":57},"code":"  it('touchstart on the input sets the line ripple origin', () => {\n    const {foundation, mockAdapter} = setupTest();\n    const clientRectLeft = 50;\n    const clientX = 200;\n    const mockTouchStartEvent = {\n      touches: [{\n        target: {\n          getBoundingClientRect: () => {\n            return {left: clientRectLeft};\n          },\n        },\n        clientX: clientX,\n        clientY: 200,\n      }],\n    };\n\n    let clickHandler: Function|undefined;\n\n    mockAdapter.registerInputInteractionHandler\n        .withArgs(jasmine.any(String), jasmine.any(Function))\n        .and.callFake((evtType: string, handler: Function) => {\n          if (evtType === 'touchstart') {\n            clickHandler = handler;\n          }\n        });\n\n    foundation.init();\n    if (clickHandler !== undefined) {\n      clickHandler(mockTouchStartEvent);\n    }\n\n    expect(mockAdapter.setLineRippleTransformOrigin)\n        .toHaveBeenCalledWith(clientX - clientRectLeft);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on validation attribute change calls styleValidity","suites":["MDCTextFieldFoundation"],"line":1200,"updatePoint":{"line":1200,"column":56},"code":"  it('on validation attribute change calls styleValidity', () => {\n    const {foundation, mockAdapter, helperText} =\n        setupTest({useHelperText: true});\n    let attributeChange: Function|undefined;\n    mockAdapter.registerValidationAttributeChangeHandler\n        .withArgs(jasmine.any(Function))\n        .and.callFake((handler: Function) => attributeChange = handler);\n    foundation.init();\n\n    if (attributeChange !== undefined) {\n      attributeChange(['required']);\n    }\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(cssClasses.INVALID);\n    expect(helperText.setValidity).toHaveBeenCalledWith(true);\n\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(cssClasses.DISABLED);\n    expect(mockAdapter.removeClass)\n        .not.toHaveBeenCalledWith(cssClasses.DISABLED);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"should not call styleValidity on non-whitelisted attribute change","suites":["MDCTextFieldFoundation"],"line":1223,"updatePoint":{"line":1223,"column":71},"code":"  it('should not call styleValidity on non-whitelisted attribute change',\n     () => {\n       const {foundation, mockAdapter, helperText} =\n           setupTest({useHelperText: true});\n       let attributeChange: Function|undefined;\n       mockAdapter.registerValidationAttributeChangeHandler\n           .withArgs(jasmine.any(Function))\n           .and.callFake((handler: Function) => attributeChange = handler);\n       foundation.init();\n       if (attributeChange !== undefined) {\n         attributeChange([{attributeName: 'form'}]);\n       }\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.INVALID);\n       expect(helperText.setValidity)\n           .not.toHaveBeenCalledWith(jasmine.any(Boolean));\n\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.FOCUSED);\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(cssClasses.DISABLED);\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(cssClasses.DISABLED);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"label floats on invalid input even if value is empty","suites":["MDCTextFieldFoundation"],"line":1250,"updatePoint":{"line":1250,"column":58},"code":"  it('label floats on invalid input even if value is empty', () => {\n    const {mockAdapter} = setupValueTest(\n        {value: '', optIsValid: false, optIsBadInput: true, hasLabel: true});\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"label floats when type is date even if value is empty","suites":["MDCTextFieldFoundation"],"line":1258,"updatePoint":{"line":1258,"column":59},"code":"  it('label floats when type is date even if value is empty', () => {\n    const {foundation, mockAdapter} = setupTest();\n    mockAdapter.hasLabel.and.returnValue(true);\n    const nativeInput = {\n      type: 'date',\n      value: '',\n      validity: {\n        valid: true,\n        badInput: false,\n      },\n    };\n    mockAdapter.getNativeInput.and.returnValue(nativeInput);\n    foundation.init();\n    expect(mockAdapter.floatLabel).toHaveBeenCalledWith(true);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(cssClasses.LABEL_FLOATING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#handleInput activates focus state","suites":["MDCTextFieldFoundation"],"line":1276,"updatePoint":{"line":1276,"column":40},"code":"  it('#handleInput activates focus state', () => {\n    const {foundation, mockAdapter} = setupTest();\n\n    foundation.handleInput();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(cssClasses.FOCUSED);\n    expect(mockAdapter.addClass).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#handleInput updates character counter on text input","suites":["MDCTextFieldFoundation"],"line":1284,"updatePoint":{"line":1284,"column":58},"code":"  it('#handleInput updates character counter on text input', () => {\n    const {foundation, mockAdapter, characterCounter} =\n        setupTest({useCharacterCounter: true});\n\n    const nativeInput = {\n      type: 'text',\n      value: '12345678',\n      maxLength: 10,\n      validity: {\n        valid: true,\n      },\n    };\n    mockAdapter.getNativeInput.and.returnValue(nativeInput);\n\n    foundation.handleInput();\n    expect(characterCounter.setCounterValue).toHaveBeenCalledWith(8, 10);\n    expect(characterCounter.setCounterValue).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#handleInput throws error when maxLength HTML attribute is not found in input element","suites":["MDCTextFieldFoundation"],"line":1304,"updatePoint":{"line":1304,"column":91},"code":"  it('#handleInput throws error when maxLength HTML attribute is not found in input element',\n     () => {\n       const {foundation, mockAdapter} = setupTest({useCharacterCounter: true});\n\n       const nativeInput = {\n         type: 'text',\n         value: '12345678',\n         validity: {\n           valid: true,\n         },\n         maxLength: -1,\n       };\n       mockAdapter.getNativeInput.and.returnValue(nativeInput);\n\n       expect(() => {foundation.handleInput()}).toThrow();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"on required attribute change calls setLabelRequired","suites":["MDCTextFieldFoundation"],"line":1342,"updatePoint":{"line":1342,"column":57},"code":"  it('on required attribute change calls setLabelRequired', () => {\n    const {foundation, mockAdapter} = setupTest();\n    let attributeChange: Function|undefined;\n    mockAdapter.registerValidationAttributeChangeHandler\n        .withArgs(jasmine.any(Function))\n        .and.callFake((handler: Function) => attributeChange = handler);\n    foundation.init();\n\n    mockAdapter.getNativeInput.and.returnValue(\n        {required: true} as MDCTextFieldNativeInputElement);\n\n    if (attributeChange !== undefined) {\n      attributeChange(['required']);\n    }\n    expect(mockAdapter.setLabelRequired).toHaveBeenCalledWith(true);\n\n    mockAdapter.getNativeInput.and.returnValue(\n        {required: false} as MDCTextFieldNativeInputElement);\n\n    if (attributeChange !== undefined) {\n      attributeChange(['required']);\n    }\n    expect(mockAdapter.setLabelRequired).toHaveBeenCalledWith(false);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"#init sets label required if native input is required","suites":["MDCTextFieldFoundation"],"line":1367,"updatePoint":{"line":1367,"column":59},"code":"  it('#init sets label required if native input is required', () => {\n    const {foundation, mockAdapter} =\n        setupValueTest({value: '', hasLabel: true, optIsRequired: true});\n    foundation.init();\n    expect(mockAdapter.setLabelRequired).toHaveBeenCalledWith(true);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-textfield/test"},{"name":"should transform theme keys to custom property for theme.property()","suites":["theme.test.scss"],"line":28,"updatePoint":{"line":28,"column":73},"code":"  it('should transform theme keys to custom property for theme.property()',\n     () => {\n       const filePath = path.join(__dirname, 'theme.test.css');\n       const css = fs.readFileSync(filePath, 'utf8').trim();\n       expect(css).toEqual(`.test {\n  color: #6200ee;\n  /* @alternate */\n  color: var(--mdc-theme-primary, #6200ee);\n}`);\n     });","file":"theme.scss.test.ts","skipped":false,"dir":"packages/mdc-theme/test"},{"name":"host-aware test produces expected output","suites":["theme.test.scss"],"line":39,"updatePoint":{"line":39,"column":46},"code":"  it('host-aware test produces expected output',\n     () => {\n       const filePath = path.join(__dirname, 'shadow-dom.test.css');\n       const css = fs.readFileSync(filePath, 'utf8').trim();\n       expect(css).toEqual(\n           `:host([lowered]), :host(:not(.hidden)[outlined][lowered]), :host .my-class[lowered], gm-fab[lowered] {\n  color: blue;\n}\n:host([lowered]:hover), :host(:not(.hidden)[outlined][lowered]:hover), :host .my-class[lowered]:hover, gm-fab[lowered]:hover {\n  background-color: red;\n}\n\n:host(:focus), :host(:not(.hidden)[outlined]:focus), :host .my-class:focus, gm-fab:focus, :host, :host(:not(.hidden)[outlined]), :host .my-class, gm-fab {\n  border-color: green;\n}\n\n/* Test replacement for deprecated shadow-dom.host-aware() */\n:host([lowered]), :host(:not(.hidden)[outlined][lowered]), :host .my-class[lowered], gm-fab[lowered] {\n  color: blue;\n}\n:host([lowered]:hover), :host(:not(.hidden)[outlined][lowered]:hover), :host .my-class[lowered]:hover, gm-fab[lowered]:hover {\n  background-color: red;\n}\n\n:host(:focus), :host(:not(.hidden)[outlined]:focus), :host .my-class:focus, gm-fab:focus, :host,\n:host(:not(.hidden)[outlined]),\n:host .my-class,\ngm-fab {\n  border-color: green;\n}`);\n       // Sass' organization of selectors with newlines can be iffy when using\n       // the `selector` module and expanded mode, but all selectors are\n       // correct.\n     });","file":"theme.scss.test.ts","skipped":false,"dir":"packages/mdc-theme/test"},{"name":"should replace values provided to $replace for theme.property()","suites":["theme.test.scss"],"line":74,"updatePoint":{"line":74,"column":69},"code":"  it('should replace values provided to $replace for theme.property()', () => {\n    const filePath = path.join(__dirname, 'replace.test.css');\n    const css = fs.readFileSync(filePath, 'utf8').trim();\n    expect(css).toEqual(`.simple {\n  width: calc(100% - 20px);\n}\n\n.var {\n  width: calc(16px + 8px);\n  /* @alternate */\n  width: calc(var(--m-foo, 16px) + var(--m-bar, 8px));\n  height: calc(16px + 8px + 16px + 8px);\n  /* @alternate */\n  height: calc(var(--m-foo, 16px) + var(--m-bar, 8px) + var(--m-foo, 16px) + var(--m-bar, 8px));\n}\n\n.multiple {\n  width: calc(8px + 8px + 8px);\n}\n\n.list {\n  padding: 0 16px;\n}`);\n  });","file":"theme.scss.test.ts","skipped":false,"dir":"packages/mdc-theme/test"},{"name":"should allow overriding theme color values using @use/with","suites":["theme.test.scss"],"line":99,"updatePoint":{"line":99,"column":64},"code":"  it('should allow overriding theme color values using @use/with', () => {\n    const filePath = path.join(__dirname, 'override.test.css');\n    const css = fs.readFileSync(filePath, 'utf8').trim();\n    expect(css).toContain('--mdc-theme-primary: teal');\n    expect(css).toContain('--mdc-theme-secondary: crimson');\n  });","file":"theme.scss.test.ts","skipped":false,"dir":"packages/mdc-theme/test"},{"name":"validate-keys Should throw error when unsupported key is provided","suites":["theme.test.scss"],"line":106,"updatePoint":{"line":106,"column":71},"code":"  it('validate-keys Should throw error when unsupported key is provided',\n     () => {\n       const filePath = path.join(__dirname, 'theme-validate-keys.test.css');\n       const css = fs.readFileSync(filePath, 'utf8').trim();\n       expect(css).toContain('Unsupported keys found: foobar.');\n     });","file":"theme.scss.test.ts","skipped":false,"dir":"packages/mdc-theme/test"},{"name":"validate-keys Should throw error when custom properties are provided","suites":["theme.test.scss"],"line":113,"updatePoint":{"line":113,"column":74},"code":"  it('validate-keys Should throw error when custom properties are provided', () => {\n    const filePath = path.join(__dirname, 'theme-validate-keys.test.css');\n    const css = fs.readFileSync(filePath, 'utf8').trim();\n    expect(css).toContain(\n        'Custom properties are not supported for theme map keys: three');\n  });","file":"theme.scss.test.ts","skipped":false,"dir":"packages/mdc-theme/test"},{"name":"attachTo returns a component instance","suites":["MDCTooltip","plain tooltip tests"],"line":68,"updatePoint":{"line":68,"column":45},"code":"    it('attachTo returns a component instance', () => {\n      expect(MDCTooltip.attachTo(\n                 fixture.querySelector('.mdc-tooltip') as HTMLElement))\n          .toEqual(jasmine.any(MDCTooltip));\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"attachTo throws an error when anchor element is missing","suites":["MDCTooltip","plain tooltip tests"],"line":74,"updatePoint":{"line":74,"column":63},"code":"    it('attachTo throws an error when anchor element is missing', () => {\n      const container =\n          fixture.querySelector('[aria-describedby]') as HTMLElement;\n      container.parentElement!.removeChild(container);\n      expect(\n          () => MDCTooltip.attachTo(\n              container.querySelector('.mdc-tooltip') as HTMLElement))\n          .toThrow();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#initialSyncWithDOM registers mouseenter event handler on the anchor element","suites":["MDCTooltip","plain tooltip tests"],"line":84,"updatePoint":{"line":84,"column":84},"code":"    it('#initialSyncWithDOM registers mouseenter event handler on the anchor element',\n       () => {\n         const {anchorElem, mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         emitEvent(anchorElem, 'mouseenter');\n         expect(mockFoundation.handleAnchorMouseEnter).toHaveBeenCalled();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy deregisters mouseenter event handler on the anchor element","suites":["MDCTooltip","plain tooltip tests"],"line":93,"updatePoint":{"line":93,"column":75},"code":"    it('#destroy deregisters mouseenter event handler on the anchor element',\n       () => {\n         const {anchorElem, mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         component.destroy();\n         emitEvent(anchorElem, 'mouseenter');\n         expect(mockFoundation.handleAnchorMouseEnter).not.toHaveBeenCalled();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#initialSyncWithDOM registers focus event handler on the anchor element","suites":["MDCTooltip","plain tooltip tests"],"line":102,"updatePoint":{"line":102,"column":79},"code":"    it('#initialSyncWithDOM registers focus event handler on the anchor element',\n       () => {\n         const {anchorElem, mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         emitEvent(anchorElem, 'focus');\n         expect(mockFoundation.handleAnchorFocus).toHaveBeenCalled();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy deregisters focus event handler on the anchor element","suites":["MDCTooltip","plain tooltip tests"],"line":111,"updatePoint":{"line":111,"column":70},"code":"    it('#destroy deregisters focus event handler on the anchor element', () => {\n      const {anchorElem, mockFoundation, component} =\n          setupTestWithMockFoundation(fixture);\n      component.destroy();\n      emitEvent(anchorElem, 'focus');\n      expect(mockFoundation.handleAnchorFocus).not.toHaveBeenCalled();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#initialSyncWithDOM registers mouseleave event handler on the anchor element","suites":["MDCTooltip","plain tooltip tests"],"line":119,"updatePoint":{"line":119,"column":84},"code":"    it('#initialSyncWithDOM registers mouseleave event handler on the anchor element',\n       () => {\n         const {anchorElem, mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         emitEvent(anchorElem, 'mouseleave');\n         expect(mockFoundation.handleAnchorMouseLeave).toHaveBeenCalled();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy deregisters mouseleave event handler on the anchor element","suites":["MDCTooltip","plain tooltip tests"],"line":128,"updatePoint":{"line":128,"column":75},"code":"    it('#destroy deregisters mouseleave event handler on the anchor element',\n       () => {\n         const {anchorElem, mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         component.destroy();\n         emitEvent(anchorElem, 'mouseleave');\n         expect(mockFoundation.handleAnchorMouseLeave).not.toHaveBeenCalled();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#initialSyncWithDOM registers transitionend event handler on the tooltip","suites":["MDCTooltip","plain tooltip tests"],"line":137,"updatePoint":{"line":137,"column":80},"code":"    it('#initialSyncWithDOM registers transitionend event handler on the tooltip',\n       () => {\n         const {mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         emitEvent(component.root, 'transitionend');\n         expect(mockFoundation.handleTransitionEnd).toHaveBeenCalled();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy deregisters transitionend event handler on the tooltip","suites":["MDCTooltip","plain tooltip tests"],"line":146,"updatePoint":{"line":146,"column":71},"code":"    it('#destroy deregisters transitionend event handler on the tooltip',\n       () => {\n         const {mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         component.destroy();\n         emitEvent(component.root, 'transitionend');\n         expect(mockFoundation.handleTransitionEnd).not.toHaveBeenCalled();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#initialSyncWithDOM registers touchstart event handler on the tooltip","suites":["MDCTooltip","plain tooltip tests"],"line":155,"updatePoint":{"line":155,"column":77},"code":"    it('#initialSyncWithDOM registers touchstart event handler on the tooltip',\n       () => {\n         const {anchorElem, mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         emitEvent(anchorElem, 'touchstart');\n         expect(mockFoundation.handleAnchorTouchstart).toHaveBeenCalled();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy deregisters touchstart event handler on the tooltip","suites":["MDCTooltip","plain tooltip tests"],"line":164,"updatePoint":{"line":164,"column":68},"code":"    it('#destroy deregisters touchstart event handler on the tooltip', () => {\n      const {anchorElem, mockFoundation, component} =\n          setupTestWithMockFoundation(fixture);\n      component.destroy();\n      emitEvent(anchorElem, 'touchstart');\n      expect(mockFoundation.handleAnchorTouchstart).not.toHaveBeenCalled();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#initialSyncWithDOM registers touchend event handler on the tooltip","suites":["MDCTooltip","plain tooltip tests"],"line":172,"updatePoint":{"line":172,"column":75},"code":"    it('#initialSyncWithDOM registers touchend event handler on the tooltip',\n       () => {\n         const {anchorElem, mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         emitEvent(anchorElem, 'touchend');\n         expect(mockFoundation.handleAnchorTouchend).toHaveBeenCalled();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy deregisters touchend event handler on the tooltip","suites":["MDCTooltip","plain tooltip tests"],"line":181,"updatePoint":{"line":181,"column":66},"code":"    it('#destroy deregisters touchend event handler on the tooltip', () => {\n      const {anchorElem, mockFoundation, component} =\n          setupTestWithMockFoundation(fixture);\n      component.destroy();\n      emitEvent(anchorElem, 'touchend');\n      expect(mockFoundation.handleAnchorTouchend).not.toHaveBeenCalled();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#setTooltipPosition forwards to MDCFoundation#setTooltipPosition","suites":["MDCTooltip","plain tooltip tests"],"line":189,"updatePoint":{"line":189,"column":72},"code":"    it('#setTooltipPosition forwards to MDCFoundation#setTooltipPosition',\n       () => {\n         const {mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         component.setTooltipPosition(\n             {xPos: XPosition.CENTER, yPos: YPosition.ABOVE});\n         expect(mockFoundation.setTooltipPosition).toHaveBeenCalledWith({\n           xPos: XPosition.CENTER,\n           yPos: YPosition.ABOVE\n         });\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#setAnchorBoundaryType forwards to MDCFoundation#setAnchorBoundaryType","suites":["MDCTooltip","plain tooltip tests"],"line":202,"updatePoint":{"line":202,"column":78},"code":"    it('#setAnchorBoundaryType forwards to MDCFoundation#setAnchorBoundaryType',\n       () => {\n         const {mockFoundation, component} =\n             setupTestWithMockFoundation(fixture);\n         component.setAnchorBoundaryType(AnchorBoundaryType.UNBOUNDED);\n         expect(mockFoundation.setAnchorBoundaryType)\n             .toHaveBeenCalledWith(AnchorBoundaryType.UNBOUNDED);\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide forwards to MDCFoundation#hide","suites":["MDCTooltip","plain tooltip tests"],"line":212,"updatePoint":{"line":212,"column":44},"code":"    it('#hide forwards to MDCFoundation#hide', () => {\n      const {mockFoundation, component} = setupTestWithMockFoundation(fixture);\n      component.hide();\n      expect(mockFoundation.hide).toHaveBeenCalled();\n      component.destroy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isShown forwards to MDCFoundation#isShown","suites":["MDCTooltip","plain tooltip tests"],"line":219,"updatePoint":{"line":219,"column":50},"code":"    it('#isShown forwards to MDCFoundation#isShown', () => {\n      const {mockFoundation, component} = setupTestWithMockFoundation(fixture);\n      component.isShown();\n      expect(mockFoundation.isShown).toHaveBeenCalled();\n      component.destroy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isShown returns false if the tooltip is not shown","suites":["MDCTooltip","plain tooltip tests"],"line":226,"updatePoint":{"line":226,"column":58},"code":"    it('#isShown returns false if the tooltip is not shown', () => {\n      const {mockFoundation, component} = setupTestWithMockFoundation(fixture);\n      mockFoundation.isShown.and.returnValue(false);\n      expect(component.isShown()).toBeFalse();\n      component.destroy();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"detects tooltip labels that span multiple lines","suites":["MDCTooltip","plain tooltip tests"],"line":233,"updatePoint":{"line":233,"column":55},"code":"    it('detects tooltip labels that span multiple lines', () => {\n      document.body.removeChild(fixture);\n      fixture = getFixture(`<div>\n        <button data-tooltip-id=\"tt0\">\n          anchor\n        </button>\n        <div id=\"tt0\"\n             class=\"mdc-tooltip\"\n             aria-role=\"tooltip\">\n          <div class=\"mdc-tooltip__surface\">\n            this is as long tooltip label that will overflow the maximum width\n            and will create a multi-line tooltip label\n          </div>\n        </div>\n      </div>`);\n      document.body.appendChild(fixture);\n      const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n      // Add a max-width and min-height since styles are not loaded in\n      // this test.\n      tooltipElem.style.maxWidth = `${numbers.MAX_WIDTH}px`;\n      tooltipElem.style.minHeight = `${numbers.MIN_HEIGHT}px`;\n      const anchorElem =\n          fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n      MDCTooltip.attachTo(tooltipElem);\n\n      emitEvent(anchorElem, 'mouseenter');\n      jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n      expect(tooltipElem.classList).toContain(CssClasses.MULTILINE_TOOLTIP);\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"attachTo returns a component instance","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":290,"updatePoint":{"line":290,"column":45},"code":"    it('attachTo returns a component instance', () => {\n      expect(MDCTooltip.attachTo(\n                 fixture.querySelector('.mdc-tooltip--rich') as HTMLElement))\n          .toEqual(jasmine.any(MDCTooltip));\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"sets aria-expanded on anchor to true when showing rich tooltip","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":296,"updatePoint":{"line":296,"column":70},"code":"    it('sets aria-expanded on anchor to true when showing rich tooltip', () => {\n      const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n      const anchorElem =\n          fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n      MDCTooltip.attachTo(tooltipElem);\n\n      emitEvent(anchorElem, 'mouseenter');\n      jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n      expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded remains true on anchor when mouseleave anchor and mouseenter rich tooltip","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":308,"updatePoint":{"line":308,"column":95},"code":"    it('aria-expanded remains true on anchor when mouseleave anchor and mouseenter rich tooltip',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'mouseenter');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         emitEvent(anchorElem, 'mouseleave');\n         emitEvent(tooltipElem, 'mouseenter');\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded remains true on anchor when mouseleave rich tooltip and mouseenter anchor","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":323,"updatePoint":{"line":323,"column":95},"code":"    it('aria-expanded remains true on anchor when mouseleave rich tooltip and mouseenter anchor',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'mouseenter');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         emitEvent(tooltipElem, 'mouseleave');\n         emitEvent(anchorElem, 'mouseenter');\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded becomes true on anchor when anchor is focused","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":338,"updatePoint":{"line":338,"column":67},"code":"    it('aria-expanded becomes true on anchor when anchor is focused', () => {\n      const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n      const anchorElem =\n          fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n      MDCTooltip.attachTo(tooltipElem);\n\n      emitEvent(anchorElem, 'focus');\n      jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n      expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded becomes false on anchor when ESC is pressed from the tooltip","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":350,"updatePoint":{"line":350,"column":82},"code":"    it('aria-expanded becomes false on anchor when ESC is pressed from the tooltip',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'focus');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n         tooltipElem.dispatchEvent(\n             createKeyboardEvent('keydown', {key: KEY.ESCAPE, bubbles: true}));\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('false');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"anchor becomes focused when ESC is pressed from the tooltip while focus is in tooltip","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":366,"updatePoint":{"line":366,"column":93},"code":"    it('anchor becomes focused when ESC is pressed from the tooltip while focus is in tooltip',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         const tooltipActionButton =\n             fixture.querySelector<HTMLElement>('.mdc-tooltip__action')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'focus');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         tooltipActionButton.focus();\n         tooltipElem.dispatchEvent(\n             createKeyboardEvent('keydown', {key: KEY.ESCAPE, bubbles: true}));\n\n         expect(document.activeElement).toBe(anchorElem);\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded becomes false on anchor when anchor blurs and non-tooltip element is focused","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":384,"updatePoint":{"line":384,"column":98},"code":"    it('aria-expanded becomes false on anchor when anchor blurs and non-tooltip element is focused',\n       () => {\n         // FocusEvent is not supported on IE11 so this test will not be run on\n         // it.\n         if (isIE()) {\n           return;\n         }\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'focus');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n         anchorElem.dispatchEvent(\n             new FocusEvent('blur', {relatedTarget: document.body}));\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('false');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded remains true on anchor when anchor blurs and rich tooltip focuses","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":405,"updatePoint":{"line":405,"column":87},"code":"    it('aria-expanded remains true on anchor when anchor blurs and rich tooltip focuses',\n       () => {\n         // FocusEvent is not supported on IE11 so this test will not be run on\n         // it.\n         if (isIE()) {\n           return;\n         }\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'focus');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n         anchorElem.dispatchEvent(\n             new FocusEvent('blur', {relatedTarget: tooltipElem}));\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded becomes false on anchor when rich tooltip focuses out and anchor does not receive focus","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":426,"updatePoint":{"line":426,"column":109},"code":"    it('aria-expanded becomes false on anchor when rich tooltip focuses out and anchor does not receive focus',\n       () => {\n         // FocusEvent is not supported on IE11 so this test will not be run on\n         // it.\n         if (isIE()) {\n           return;\n         }\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'focus');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n         tooltipElem.dispatchEvent(\n             new FocusEvent('focusout', {relatedTarget: document.body}));\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('false');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded remains true on anchor when rich tooltip focuses out and anchor receives focus","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":447,"updatePoint":{"line":447,"column":100},"code":"    it('aria-expanded remains true on anchor when rich tooltip focuses out and anchor receives focus',\n       () => {\n         // FocusEvent is not supported on IE11 so this test will not be run on\n         // it.\n         if (isIE()) {\n           return;\n         }\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'focus');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n         tooltipElem.dispatchEvent(\n             new FocusEvent('focusout', {relatedTarget: anchorElem}));\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-expanded remains true on anchor when rich tooltip focuses out and element within tooltip receives focus","suites":["MDCTooltip","default interactive rich tooltip tests"],"line":468,"updatePoint":{"line":468,"column":116},"code":"    it('aria-expanded remains true on anchor when rich tooltip focuses out and element within tooltip receives focus',\n       () => {\n         // FocusEvent is not supported on IE11 so this test will not be run on\n         // it.\n         if (isIE()) {\n           return;\n         }\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const tooltipContent =\n             fixture.querySelector<HTMLElement>('.mdc-tooltip__content')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[data-tooltip-id]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'focus');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n         tooltipElem.dispatchEvent(\n             new FocusEvent('focusout', {relatedTarget: tooltipContent}));\n\n         expect(anchorElem.getAttribute('aria-expanded')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#initialSyncWithDOM registers click event handler on the anchor element","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":513,"updatePoint":{"line":513,"column":79},"code":"    it('#initialSyncWithDOM registers click event handler on the anchor element',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         const component = MDCTooltip.attachTo(tooltipElem);\n         const foundation = component['foundation'];\n         spyOn(foundation, 'handleAnchorClick');\n\n         emitEvent(anchorElem, 'click');\n\n         expect(foundation.handleAnchorClick).toHaveBeenCalled();\n         component.destroy();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy deregisters click event handler on the anchor element","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":528,"updatePoint":{"line":528,"column":70},"code":"    it('#destroy deregisters click event handler on the anchor element', () => {\n      const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n      const anchorElem =\n          fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n      const component = MDCTooltip.attachTo(tooltipElem);\n      const foundation = component['foundation'];\n      spyOn(foundation, 'handleAnchorClick');\n\n      component.destroy();\n      emitEvent(anchorElem, 'click');\n\n      expect(foundation.handleAnchorClick).not.toHaveBeenCalled();\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-hidden remains true on tooltip when mouseenter anchor","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":542,"updatePoint":{"line":542,"column":66},"code":"    it('aria-hidden remains true on tooltip when mouseenter anchor', () => {\n      const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n      const anchorElem =\n          fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n      MDCTooltip.attachTo(tooltipElem);\n\n      emitEvent(anchorElem, 'mouseenter');\n      jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n      expect(tooltipElem.getAttribute('aria-hidden')).toEqual('true');\n    });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"set aria-hidden to false on tooltip when anchor clicked while tooltip is hidden","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":554,"updatePoint":{"line":554,"column":87},"code":"    it('set aria-hidden to false on tooltip when anchor clicked while tooltip is hidden',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n         expect(tooltipElem.getAttribute('aria-hidden')).toEqual('true');\n\n         emitEvent(anchorElem, 'click');\n\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"set aria-hidden to true on tooltip when anchor clicked while tooltip is shown","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":567,"updatePoint":{"line":567,"column":85},"code":"    it('set aria-hidden to true on tooltip when anchor clicked while tooltip is shown',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'click');\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n         emitEvent(anchorElem, 'click');\n\n         expect(tooltipElem.getAttribute('aria-hidden')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"set aria-hidden to true on tooltip when element other than anchor or the tooltip is clicked while tooltip is shown","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":581,"updatePoint":{"line":581,"column":122},"code":"    it('set aria-hidden to true on tooltip when element other than anchor or the tooltip is clicked while tooltip is shown',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'click');\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n         emitEvent(document.body, 'click');\n\n         expect(tooltipElem.getAttribute('aria-hidden')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-hidden remains false on tooltip when tooltip is clicked while tooltip is shown","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":595,"updatePoint":{"line":595,"column":91},"code":"    it('aria-hidden remains false on tooltip when tooltip is clicked while tooltip is shown',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'click');\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n         emitEvent(tooltipElem, 'click');\n\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-hidden remains false on tooltip when mouseleave anchor while tooltip is shown","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":609,"updatePoint":{"line":609,"column":90},"code":"    it('aria-hidden remains false on tooltip when mouseleave anchor while tooltip is shown',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'click');\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n         emitEvent(anchorElem, 'mouseleave');\n\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-hidden remains false on tooltip when mouseleave tooltip while tooltip is shown","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":623,"updatePoint":{"line":623,"column":91},"code":"    it('aria-hidden remains false on tooltip when mouseleave tooltip while tooltip is shown',\n       () => {\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'click');\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n         emitEvent(tooltipElem, 'mouseleave');\n\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-hidden becomes true on tooltip when anchor blurs and non-tooltip element is focused","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":637,"updatePoint":{"line":637,"column":96},"code":"    it('aria-hidden becomes true on tooltip when anchor blurs and non-tooltip element is focused',\n       () => {\n         // FocusEvent is not supported on IE11 so this test will not be run on\n         // it.\n         if (isIE()) {\n           return;\n         }\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'click');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n         anchorElem.dispatchEvent(\n             new FocusEvent('blur', {relatedTarget: document.body}));\n\n         expect(tooltipElem.getAttribute('aria-hidden')).toEqual('true');\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"aria-hidden remains false on tooltip when anchor blurs and rich tooltip focuses","suites":["MDCTooltip","persistent non-interactive rich tooltip tests"],"line":658,"updatePoint":{"line":658,"column":87},"code":"    it('aria-hidden remains false on tooltip when anchor blurs and rich tooltip focuses',\n       () => {\n         // FocusEvent is not supported on IE11 so this test will not be run on\n         // it.\n         if (isIE()) {\n           return;\n         }\n         const tooltipElem = fixture.querySelector<HTMLElement>('#tt0')!;\n         const anchorElem =\n             fixture.querySelector<HTMLElement>('[aria-describedby]')!;\n         MDCTooltip.attachTo(tooltipElem);\n\n         emitEvent(anchorElem, 'click');\n         jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n         anchorElem.dispatchEvent(\n             new FocusEvent('blur', {relatedTarget: tooltipElem}));\n\n         expect(tooltipElem.hasAttribute('aria-hidden')).toBeFalse();\n       });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"default adapter returns a complete adapter implementation","suites":["MDCTooltipFoundation"],"line":315,"updatePoint":{"line":315,"column":63},"code":"  it('default adapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCTooltipFoundation, [\n      'getAttribute',\n      'setAttribute',\n      'removeAttribute',\n      'addClass',\n      'hasClass',\n      'removeClass',\n      'getComputedStyleProperty',\n      'setStyleProperty',\n      'setSurfaceAnimationStyleProperty',\n      'getViewportWidth',\n      'getViewportHeight',\n      'getTooltipSize',\n      'getAnchorBoundingRect',\n      'getParentBoundingRect',\n      'getAnchorAttribute',\n      'setAnchorAttribute',\n      'isRTL',\n      'anchorContainsElement',\n      'tooltipContainsElement',\n      'focusAnchorElement',\n      'registerEventHandler',\n      'deregisterEventHandler',\n      'registerAnchorEventHandler',\n      'deregisterAnchorEventHandler',\n      'registerDocumentEventHandler',\n      'deregisterDocumentEventHandler',\n      'registerWindowEventHandler',\n      'deregisterWindowEventHandler',\n      'notifyHidden',\n      'getTooltipCaretBoundingRect',\n      'setTooltipCaretStyle',\n      'clearTooltipCaretStyles',\n      'getActiveElement',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isRich returns false for plain tooltip","suites":["MDCTooltipFoundation"],"line":353,"updatePoint":{"line":353,"column":45},"code":"  it('#isRich returns false for plain tooltip', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.hasClass.withArgs(CssClasses.RICH).and.returnValue(false);\n    foundation.init();\n\n    expect(foundation.isRich()).toBeFalse();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isRich returns true for rich tooltip","suites":["MDCTooltipFoundation"],"line":361,"updatePoint":{"line":361,"column":43},"code":"  it('#isRich returns true for rich tooltip', () => {\n    const {foundation} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n    expect(foundation.isRich()).toBeTrue();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isPersistent returns false for default rich tooltip","suites":["MDCTooltipFoundation"],"line":368,"updatePoint":{"line":368,"column":58},"code":"  it('#isPersistent returns false for default rich tooltip', () => {\n    const {foundation} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n    expect(foundation.isPersistent()).toBeFalse();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isPersistent returns true for persistent rich tooltip","suites":["MDCTooltipFoundation"],"line":375,"updatePoint":{"line":375,"column":60},"code":"  it('#isPersistent returns true for persistent rich tooltip', () => {\n    const {foundation} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {isPersistent: true});\n\n    expect(foundation.isPersistent()).toBeTrue();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isShown returns true if the tooltip is currently shown","suites":["MDCTooltipFoundation"],"line":382,"updatePoint":{"line":382,"column":61},"code":"  it('#isShown returns true if the tooltip is currently shown', () => {\n    const {foundation} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n\n    expect(foundation.isShown()).toBeTrue();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#isShown returns false if the tooltip is currently hidden","suites":["MDCTooltipFoundation"],"line":389,"updatePoint":{"line":389,"column":63},"code":"  it('#isShown returns false if the tooltip is currently hidden', () => {\n    const {foundation} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    foundation.hide();\n\n    expect(foundation.isShown()).toBeFalse();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show modifies tooltip element so it is shown","suites":["MDCTooltipFoundation"],"line":397,"updatePoint":{"line":397,"column":51},"code":"  it('#show modifies tooltip element so it is shown', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show does not set aria-expanded=\"true\" on anchor element for non-interactive rich tooltip","suites":["MDCTooltipFoundation"],"line":403,"updatePoint":{"line":403,"column":96},"code":"  it('#show does not set aria-expanded=\"true\" on anchor element for non-interactive rich tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n\n       expect(mockAdapter.setAnchorAttribute)\n           .not.toHaveBeenCalledWith('aria-expanded', 'true');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show sets aria-expanded=\"true\" on anchor element for interactive rich tooltip","suites":["MDCTooltipFoundation"],"line":414,"updatePoint":{"line":414,"column":84},"code":"  it('#show sets aria-expanded=\"true\" on anchor element for interactive rich tooltip',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isInteractive: true});\n\n       foundation.show();\n\n       expect(mockAdapter.setAnchorAttribute)\n           .toHaveBeenCalledWith('aria-expanded', 'true');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show adds SHOWN and SHOWN_TRANSITION class after rAF","suites":["MDCTooltipFoundation"],"line":425,"updatePoint":{"line":425,"column":59},"code":"  it('#show adds SHOWN and SHOWN_TRANSITION class after rAF', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(CssClasses.SHOWN);\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n\n    jasmine.clock().tick(1);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWN);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide cancels a pending rAF","suites":["MDCTooltipFoundation"],"line":438,"updatePoint":{"line":438,"column":33},"code":"  it('#hide cancels a pending rAF', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    foundation.hide();\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.HIDE);\n    expect(mockAdapter.addClass)\n        .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n\n    jasmine.clock().tick(1);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(CssClasses.SHOWN);\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show registers mouseenter event listener on the tooltip for rich tooltip","suites":["MDCTooltipFoundation"],"line":453,"updatePoint":{"line":453,"column":79},"code":"  it('#show registers mouseenter event listener on the tooltip for rich tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n\n       expect(mockAdapter.registerEventHandler)\n           .toHaveBeenCalledWith('mouseenter', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show registers mouseleave event listener on the tooltip for rich tooltip","suites":["MDCTooltipFoundation"],"line":464,"updatePoint":{"line":464,"column":79},"code":"  it('#show registers mouseleave event listener on the tooltip for rich tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n\n       expect(mockAdapter.registerEventHandler)\n           .toHaveBeenCalledWith('mouseleave', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide deregisters mouseenter event listeners on the tooltip for rich tooltip","suites":["MDCTooltipFoundation"],"line":475,"updatePoint":{"line":475,"column":82},"code":"  it('#hide deregisters mouseenter event listeners on the tooltip for rich tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       foundation.hide();\n\n       expect(mockAdapter.deregisterEventHandler)\n           .toHaveBeenCalledWith('mouseenter', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide deregisters mouseleave event listeners on the tooltip for rich tooltip","suites":["MDCTooltipFoundation"],"line":487,"updatePoint":{"line":487,"column":82},"code":"  it('#hide deregisters mouseleave event listeners on the tooltip for rich tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       foundation.hide();\n\n       expect(mockAdapter.deregisterEventHandler)\n           .toHaveBeenCalledWith('mouseleave', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show registers blur event listener on the anchor element","suites":["MDCTooltipFoundation"],"line":500,"updatePoint":{"line":500,"column":63},"code":"  it('#show registers blur event listener on the anchor element', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n\n    foundation.show();\n\n    expect(mockAdapter.registerAnchorEventHandler)\n        .toHaveBeenCalledWith('blur', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show registers click and keydown event listeners on the document","suites":["MDCTooltipFoundation"],"line":509,"updatePoint":{"line":509,"column":71},"code":"  it('#show registers click and keydown event listeners on the document',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.show();\n       expect(mockAdapter.registerDocumentEventHandler)\n           .toHaveBeenCalledWith('click', jasmine.any(Function));\n       expect(mockAdapter.registerDocumentEventHandler)\n           .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide deregisters blur event listeners on the anchor","suites":["MDCTooltipFoundation"],"line":520,"updatePoint":{"line":520,"column":58},"code":"  it('#hide deregisters blur event listeners on the anchor', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n\n    foundation.show();\n    foundation.hide();\n\n    expect(mockAdapter.deregisterAnchorEventHandler)\n        .toHaveBeenCalledWith('blur', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide deregisters click and keydown event listeners on the document","suites":["MDCTooltipFoundation"],"line":530,"updatePoint":{"line":530,"column":73},"code":"  it('#hide deregisters click and keydown event listeners on the document',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.show();\n       foundation.hide();\n\n       expect(mockAdapter.deregisterDocumentEventHandler)\n           .toHaveBeenCalledWith('click', jasmine.any(Function));\n       expect(mockAdapter.deregisterDocumentEventHandler)\n           .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show registers scroll and resize event listeners on the window","suites":["MDCTooltipFoundation"],"line":543,"updatePoint":{"line":543,"column":69},"code":"  it('#show registers scroll and resize event listeners on the window', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    expect(mockAdapter.registerWindowEventHandler)\n        .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n    expect(mockAdapter.registerWindowEventHandler)\n        .toHaveBeenCalledWith('resize', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide deregisters scroll and resize event listeners on the window","suites":["MDCTooltipFoundation"],"line":552,"updatePoint":{"line":552,"column":71},"code":"  it('#hide deregisters scroll and resize event listeners on the window',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.show();\n       foundation.hide();\n\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('resize', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide modifies tooltip element so it is hidden","suites":["MDCTooltipFoundation"],"line":565,"updatePoint":{"line":565,"column":52},"code":"  it('#hide modifies tooltip element so it is hidden', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    foundation.hide();\n\n    expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.HIDE);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWN);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show only performs an action if tooltip is hidden","suites":["MDCTooltipFoundation"],"line":574,"updatePoint":{"line":574,"column":56},"code":"  it('#show only performs an action if tooltip is hidden', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    foundation.show();\n    expect(mockAdapter.addClass).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show cancels a pending hideTimeout","suites":["MDCTooltipFoundation"],"line":581,"updatePoint":{"line":581,"column":41},"code":"  it('#show cancels a pending hideTimeout', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.show();\n    foundation.handleAnchorMouseLeave();\n    expect((foundation as any).hideTimeout).not.toEqual(null);\n    foundation.show();\n    expect((foundation as any).hideTimeout).toEqual(null);\n\n    jasmine.clock().tick(numbers.HIDE_DELAY_MS);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(CssClasses.HIDE);\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide only performs an action if tooltip is shown","suites":["MDCTooltipFoundation"],"line":595,"updatePoint":{"line":595,"column":55},"code":"  it('#hide only performs an action if tooltip is shown', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.hide();\n\n    expect(mockAdapter.setAttribute).not.toHaveBeenCalled();\n    expect(mockAdapter.removeClass).not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTransitionEnd removes the SHOWING, SHOWING_TRANSITION, HIDE, and HIDE_TRANSITION classes","suites":["MDCTooltipFoundation"],"line":603,"updatePoint":{"line":603,"column":101},"code":"  it('#handleTransitionEnd removes the SHOWING, SHOWING_TRANSITION, HIDE, and HIDE_TRANSITION classes',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.handleTransitionEnd();\n\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTransitionEnd after #hide sends notification that tooltip has been hidden","suites":["MDCTooltipFoundation"],"line":617,"updatePoint":{"line":617,"column":86},"code":"  it('#handleTransitionEnd after #hide sends notification that tooltip has been hidden',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.hasClass.and.returnValue(true);\n\n       foundation.show();\n       foundation.hide();\n       foundation.handleTransitionEnd();\n\n       expect(mockAdapter.hasClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n       expect(mockAdapter.notifyHidden).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTransitionEnd after #show does not send notification that tooltip has been hidden","suites":["MDCTooltipFoundation"],"line":637,"updatePoint":{"line":637,"column":94},"code":"  it('#handleTransitionEnd after #show does not send notification that tooltip has been hidden',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.show();\n       foundation.handleTransitionEnd();\n\n       expect(mockAdapter.hasClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n       expect(mockAdapter.notifyHidden).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"clears any in-progress animations befores starting a show animation","suites":["MDCTooltipFoundation"],"line":653,"updatePoint":{"line":653,"column":73},"code":"  it('clears any in-progress animations befores starting a show animation',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.show();\n\n       jasmine.clock().tick(1);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWN);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"clears any in-progress animations befores starting a hide animation","suites":["MDCTooltipFoundation"],"line":671,"updatePoint":{"line":671,"column":73},"code":"  it('clears any in-progress animations befores starting a hide animation',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.show();\n       foundation.hide();\n\n       jasmine.clock().tick(1);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleKeydown() hides tooltip","suites":["MDCTooltipFoundation"],"line":691,"updatePoint":{"line":691,"column":44},"code":"    it(`#handleKeydown(${evt}) hides tooltip`, () => {\n      const {foundation, mockAdapter} =\n          setUpFoundationTest(MDCTooltipFoundation);\n\n      foundation.show();\n      foundation.handleKeydown(evt);\n\n      expect((foundation as any).hideTimeout).toEqual(null);\n      expect(mockAdapter.setAttribute)\n          .toHaveBeenCalledWith('aria-hidden', 'true');\n      expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.HIDE);\n      expect(mockAdapter.addClass)\n          .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n      expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWN);\n      expect(mockAdapter.removeClass)\n          .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n      expect(mockAdapter.deregisterDocumentEventHandler)\n          .toHaveBeenCalledWith('click', jasmine.any(Function));\n      expect(mockAdapter.deregisterDocumentEventHandler)\n          .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleKeydown does not hide the tooltip if the ESCAPE key was not pressed","suites":["MDCTooltipFoundation"],"line":714,"updatePoint":{"line":714,"column":80},"code":"  it('#handleKeydown does not hide the tooltip if the ESCAPE key was not pressed',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.hide = jasmine.createSpy('hide');\n\n       foundation.show();\n       foundation.handleKeydown(\n           {type: 'keydown', key: 'Space'} as KeyboardEvent);\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleKeydown does not restore focus to the anchorElement if the activeElement is not a HTMLElement","suites":["MDCTooltipFoundation"],"line":727,"updatePoint":{"line":727,"column":106},"code":"  it('#handleKeydown does not restore focus to the anchorElement if the activeElement is not a HTMLElement',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getActiveElement.and.returnValue(null);\n\n       foundation.handleKeydown(\n           {type: 'keydown', key: 'Escape'} as KeyboardEvent);\n\n       expect(mockAdapter.focusAnchorElement).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleKeydown does not restore focus to the anchorElement if the activeElement is not within tooltip","suites":["MDCTooltipFoundation"],"line":739,"updatePoint":{"line":739,"column":107},"code":"  it('#handleKeydown does not restore focus to the anchorElement if the activeElement is not within tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n\n       document.body.focus();\n       foundation.handleKeydown(\n           {type: 'keydown', key: 'Escape'} as KeyboardEvent);\n\n       expect(mockAdapter.focusAnchorElement).not.toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleKeydown restores focus to the anchorElement if the activeElement was within tooltip","suites":["MDCTooltipFoundation"],"line":752,"updatePoint":{"line":752,"column":96},"code":"  it('#handleKeydown restores focus to the anchorElement if the activeElement was within tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       const activeElement = document.createElement('div');\n       mockAdapter.getActiveElement.and.returnValue(activeElement);\n       mockAdapter.tooltipContainsElement.and.returnValue(true);\n\n       document.body.focus();\n       foundation.handleKeydown(\n           {type: 'keydown', key: 'Escape'} as KeyboardEvent);\n\n       expect(mockAdapter.tooltipContainsElement)\n           .toHaveBeenCalledWith(activeElement);\n       expect(mockAdapter.focusAnchorElement).toHaveBeenCalled();\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick hides the tooltip immediately for plain tooltips","suites":["MDCTooltipFoundation"],"line":769,"updatePoint":{"line":769,"column":75},"code":"  it('#handleDocumentClick hides the tooltip immediately for plain tooltips',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       const mockClickEvent = createMouseEvent('click');\n\n       foundation.show();\n       foundation.handleDocumentClick(mockClickEvent);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick hides the tooltip immediately for default rich tooltips","suites":["MDCTooltipFoundation"],"line":781,"updatePoint":{"line":781,"column":82},"code":"  it('#handleDocumentClick hides the tooltip immediately for default rich tooltips',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n       const mockClickEvent = createMouseEvent('click');\n\n       foundation.show();\n       foundation.handleDocumentClick(mockClickEvent);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick hides the tooltip immediately for persistent rich tooltips if there is no event target","suites":["MDCTooltipFoundation"],"line":793,"updatePoint":{"line":793,"column":113},"code":"  it('#handleDocumentClick hides the tooltip immediately for persistent rich tooltips if there is no event target',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       const mockClickEvent = createMouseEvent('click');\n\n       foundation.show();\n       foundation.handleDocumentClick(mockClickEvent);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick hides the tooltip immediately for persistent rich tooltips if event target is not HTMLElement","suites":["MDCTooltipFoundation"],"line":805,"updatePoint":{"line":805,"column":120},"code":"  it('#handleDocumentClick hides the tooltip immediately for persistent rich tooltips if event target is not HTMLElement',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       const mockClickEvent = {\n         ...createMouseEvent('click'),\n         target: 'not an HTMLElement'\n       } as unknown as MouseEvent;\n\n       foundation.show();\n       foundation.handleDocumentClick(mockClickEvent);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick hides the tooltip immediately for persistent rich tooltips if event target is not within anchorElement or tooltipElement","suites":["MDCTooltipFoundation"],"line":820,"updatePoint":{"line":820,"column":147},"code":"  it('#handleDocumentClick hides the tooltip immediately for persistent rich tooltips if event target is not within anchorElement or tooltipElement',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       mockAdapter.anchorContainsElement.and.returnValue(false);\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n       const mockClickEvent = {\n         ...createMouseEvent('click'),\n         target: document.createElement('div')\n       };\n\n       foundation.show();\n       foundation.handleDocumentClick(mockClickEvent);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick does not hide the tooltip for persistent rich tooltips if event target is within anchorElement","suites":["MDCTooltipFoundation"],"line":837,"updatePoint":{"line":837,"column":121},"code":"  it('#handleDocumentClick does not hide the tooltip for persistent rich tooltips if event target is within anchorElement',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       mockAdapter.anchorContainsElement.and.returnValue(true);\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n       const mockClickEvent = {\n         ...createMouseEvent('click'),\n         target: document.createElement('div')\n       };\n\n       foundation.show();\n       foundation.handleDocumentClick(mockClickEvent);\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick does not hide the tooltip for persistent rich tooltips if event target is within tooltipElement","suites":["MDCTooltipFoundation"],"line":854,"updatePoint":{"line":854,"column":122},"code":"  it('#handleDocumentClick does not hide the tooltip for persistent rich tooltips if event target is within tooltipElement',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       mockAdapter.anchorContainsElement.and.returnValue(false);\n       mockAdapter.tooltipContainsElement.and.returnValue(true);\n       const mockClickEvent = {\n         ...createMouseEvent('click'),\n         target: document.createElement('div')\n       };\n\n       foundation.show();\n       foundation.handleDocumentClick(mockClickEvent);\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorMouseLeave hides the tooltip after a ms delay","suites":["MDCTooltipFoundation"],"line":872,"updatePoint":{"line":873,"column":39},"code":"  it(`#handleAnchorMouseLeave hides the tooltip after a ${\n         numbers.HIDE_DELAY_MS}ms delay`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.show();\n       foundation.handleAnchorMouseLeave();\n       expect((foundation as any).hideTimeout).not.toEqual(null);\n\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS);\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorMouseLeave does not clear showTimeout after #handleAnchorMouseEnter is called","suites":["MDCTooltipFoundation"],"line":885,"updatePoint":{"line":885,"column":96},"code":"  it('#handleAnchorMouseLeave does not clear showTimeout after #handleAnchorMouseEnter is called',\n     () => {\n       const {foundation} = setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.handleAnchorMouseLeave();\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS / 2);\n       foundation.handleAnchorMouseEnter();\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS / 2);\n\n       expect((foundation as any).showTimeout).not.toEqual(null);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorBlur hides the tooltip immediately for plain tooltips","suites":["MDCTooltipFoundation"],"line":897,"updatePoint":{"line":897,"column":72},"code":"  it(`#handleAnchorBlur hides the tooltip immediately for plain tooltips`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.show();\n       (foundation as any).handleAnchorBlur();\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorBlur hides the tooltip immediately when focus changes to non-HTMLElement related target for default rich tooltips","suites":["MDCTooltipFoundation"],"line":908,"updatePoint":{"line":908,"column":132},"code":"  it(`#handleAnchorBlur hides the tooltip immediately when focus changes to non-HTMLElement related target for default rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       (foundation as any).handleAnchorBlur({});\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorBlur hides the tooltip immediately when focus changes to related target not within tooltip for default rich tooltips","suites":["MDCTooltipFoundation"],"line":919,"updatePoint":{"line":919,"column":135},"code":"  it(`#handleAnchorBlur hides the tooltip immediately when focus changes to related target not within tooltip for default rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n\n       const mockFocusEvent = {relatedTarget: document.createElement('div')};\n       foundation.show();\n       (foundation as any).handleAnchorBlur(mockFocusEvent);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorBlur doesn't hide the tooltip when focus changes to related target not within tooltip for default rich tooltips","suites":["MDCTooltipFoundation"],"line":932,"updatePoint":{"line":932,"column":130},"code":"  it(`#handleAnchorBlur doesn't hide the tooltip when focus changes to related target not within tooltip for default rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n       mockAdapter.tooltipContainsElement.and.returnValue(true);\n\n       const mockFocusEvent = {relatedTarget: document.createElement('div')};\n       foundation.show();\n       (foundation as any).handleAnchorBlur(mockFocusEvent);\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorBlur hides the tooltip immediately when focus changes to non-HTMLElement related target for persistent rich tooltips","suites":["MDCTooltipFoundation"],"line":945,"updatePoint":{"line":945,"column":135},"code":"  it(`#handleAnchorBlur hides the tooltip immediately when focus changes to non-HTMLElement related target for persistent rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n\n       foundation.show();\n       (foundation as any).handleAnchorBlur({});\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorBlur hides the tooltip immediately when focus changes to related target not within tooltip for persistent rich tooltips","suites":["MDCTooltipFoundation"],"line":956,"updatePoint":{"line":956,"column":138},"code":"  it(`#handleAnchorBlur hides the tooltip immediately when focus changes to related target not within tooltip for persistent rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n\n       const mockFocusEvent = {relatedTarget: document.createElement('div')};\n       foundation.show();\n       (foundation as any).handleAnchorBlur(mockFocusEvent);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorBlur doesn't hide the tooltip when focus changes to related target within tooltip for persistent rich tooltips","suites":["MDCTooltipFoundation"],"line":969,"updatePoint":{"line":969,"column":129},"code":"  it(`#handleAnchorBlur doesn't hide the tooltip when focus changes to related target within tooltip for persistent rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       mockAdapter.tooltipContainsElement.and.returnValue(true);\n\n       const mockFocusEvent = {relatedTarget: document.createElement('div')};\n       foundation.show();\n       (foundation as any).handleAnchorBlur(mockFocusEvent);\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleDocumentClick hides the tooltip immediately","suites":["MDCTooltipFoundation"],"line":982,"updatePoint":{"line":982,"column":56},"code":"  it(`#handleDocumentClick hides the tooltip immediately`, () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    const mockClickEvent = createMouseEvent('click');\n\n    foundation.show();\n    foundation.handleDocumentClick(mockClickEvent);\n\n    expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorMouseEnter shows the tooltip after a ms delay","suites":["MDCTooltipFoundation"],"line":992,"updatePoint":{"line":993,"column":39},"code":"  it(`#handleAnchorMouseEnter shows the tooltip after a ${\n         numbers.SHOW_DELAY_MS}ms delay`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.handleAnchorMouseEnter();\n       expect((foundation as any).showTimeout).not.toEqual(null);\n\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n       expectTooltipToHaveBeenShown(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorMouseEnter clears any pending hideTimeout","suites":["MDCTooltipFoundation"],"line":1004,"updatePoint":{"line":1004,"column":60},"code":"  it('#handleAnchorMouseEnter clears any pending hideTimeout', () => {\n    const {foundation} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.handleAnchorMouseLeave();\n    expect((foundation as any).hideTimeout).not.toEqual(null);\n\n    foundation.handleAnchorMouseEnter();\n\n    expect((foundation as any).hideTimeout).toEqual(null);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorFocus shows the tooltip after a ms delay if relatedTarget is not a HTMLElement","suites":["MDCTooltipFoundation"],"line":1014,"updatePoint":{"line":1015,"column":77},"code":"  it(`#handleAnchorFocus shows the tooltip after a ${\n         numbers.SHOW_DELAY_MS}ms delay if relatedTarget is not a HTMLElement`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.handleAnchorFocus({relatedTarget: null} as FocusEvent);\n       expect((foundation as any).showTimeout).not.toEqual(null);\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n       expectTooltipToHaveBeenShown(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorFocus shows the tooltip if the relatedTarget is not within tooltip","suites":["MDCTooltipFoundation"],"line":1027,"updatePoint":{"line":1027,"column":85},"code":"  it(`#handleAnchorFocus shows the tooltip if the relatedTarget is not within tooltip`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n\n       foundation.handleAnchorFocus(\n           {relatedTarget: document.createElement('div')} as unknown as\n           FocusEvent);\n       expect((foundation as any).showTimeout).not.toEqual(null);\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n       expectTooltipToHaveBeenShown(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorFocus doesn't show the tooltip if the relatedTarget is within tooltip","suites":["MDCTooltipFoundation"],"line":1042,"updatePoint":{"line":1042,"column":88},"code":"  it(`#handleAnchorFocus doesn't show the tooltip if the relatedTarget is within tooltip`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.tooltipContainsElement.and.returnValue(true);\n\n       foundation.handleAnchorFocus(\n           {relatedTarget: document.createElement('div')} as unknown as\n           FocusEvent);\n       expect((foundation as any).showTimeout).toEqual(null);\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n       expect(mockAdapter.removeAttribute)\n           .not.toHaveBeenCalledWith('aria-hidden');\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(CssClasses.SHOWING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorClick shows the tooltip immediately when tooltip is hidden for persistent rich tooltips","suites":["MDCTooltipFoundation"],"line":1062,"updatePoint":{"line":1062,"column":106},"code":"  it(`#handleAnchorClick shows the tooltip immediately when tooltip is hidden for persistent rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n\n       expect(foundation.isShown()).toBeFalse();\n       foundation.handleAnchorClick();\n\n       expectTooltipToHaveBeenShown(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorClick hides the tooltip immediately when tooltip is shown for persistent rich tooltips","suites":["MDCTooltipFoundation"],"line":1073,"updatePoint":{"line":1073,"column":105},"code":"  it(`#handleAnchorClick hides the tooltip immediately when tooltip is shown for persistent rich tooltips`,\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n\n       foundation.show();\n       foundation.handleAnchorClick();\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTooltipMouseEnter shows plain tooltips immediately","suites":["MDCTooltipFoundation"],"line":1084,"updatePoint":{"line":1084,"column":63},"code":"  it(`#handleTooltipMouseEnter shows plain tooltips immediately`, () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n\n    (foundation as any).handleTooltipMouseEnter();\n    expectTooltipToHaveBeenShown(foundation, mockAdapter);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTooltipMouseLeave hides plain tooltips after a ms delay","suites":["MDCTooltipFoundation"],"line":1091,"updatePoint":{"line":1092,"column":39},"code":"  it(`#handleTooltipMouseLeave hides plain tooltips after a ${\n         numbers.HIDE_DELAY_MS}ms delay`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.show();\n       (foundation as any).handleTooltipMouseLeave();\n       expect((foundation as any).hideTimeout).not.toEqual(null);\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTooltipMouseLeave clears any pending showTimeout for plain tooltips","suites":["MDCTooltipFoundation"],"line":1105,"updatePoint":{"line":1105,"column":80},"code":"  it('#handleTooltipMouseLeave clears any pending showTimeout for plain tooltips',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n\n       foundation.handleAnchorMouseEnter();\n       expect((foundation as any).showTimeout).not.toEqual(null);\n       (foundation as any).handleTooltipMouseLeave();\n\n       expect((foundation as any).showTimeout).toEqual(null);\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n       expect(mockAdapter.removeAttribute)\n           .not.toHaveBeenCalledWith('aria-hidden');\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(CssClasses.SHOWING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTooltipMouseEnter shows rich tooltips immediately","suites":["MDCTooltipFoundation"],"line":1124,"updatePoint":{"line":1124,"column":62},"code":"  it(`#handleTooltipMouseEnter shows rich tooltips immediately`, () => {\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n    (foundation as any).handleTooltipMouseEnter();\n\n    expectTooltipToHaveBeenShown(foundation, mockAdapter);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTooltipMouseLeave hides rich tooltips after a ms delay","suites":["MDCTooltipFoundation"],"line":1133,"updatePoint":{"line":1134,"column":39},"code":"  it(`#handleTooltipMouseLeave hides rich tooltips after a ${\n         numbers.HIDE_DELAY_MS}ms delay`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       (foundation as any).handleTooltipMouseLeave();\n       expect((foundation as any).hideTimeout).not.toEqual(null);\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS);\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTooltipMouseLeave clears any pending showTimeout for rich tooltips","suites":["MDCTooltipFoundation"],"line":1147,"updatePoint":{"line":1147,"column":79},"code":"  it('#handleTooltipMouseLeave clears any pending showTimeout for rich tooltips',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.handleAnchorMouseEnter();\n       expect((foundation as any).showTimeout).not.toEqual(null);\n       (foundation as any).handleTooltipMouseLeave();\n\n       expect((foundation as any).showTimeout).toEqual(null);\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n       expect(mockAdapter.removeAttribute)\n           .not.toHaveBeenCalledWith('aria-hidden');\n       expect(mockAdapter.removeClass)\n           .not.toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.addClass)\n           .not.toHaveBeenCalledWith(CssClasses.SHOWING);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleRichTooltipFocusOut hides the tooltip immediately if there is no related target","suites":["MDCTooltipFoundation"],"line":1166,"updatePoint":{"line":1166,"column":92},"code":"  it('#handleRichTooltipFocusOut hides the tooltip immediately if there is no related target',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       (foundation as any).handleRichTooltipFocusOut({});\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleRichTooltipFocusOut leaves tooltip open if related target is null and tooltip is interactive","suites":["MDCTooltipFoundation"],"line":1177,"updatePoint":{"line":1177,"column":105},"code":"  it('#handleRichTooltipFocusOut leaves tooltip open if related target is null and tooltip is interactive',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isInteractive: true});\n\n       foundation.show();\n       (foundation as any).handleRichTooltipFocusOut({relatedTarget: null});\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleRichTooltipFocusOut  hides the tooltip immediately if related target is null and tooltip is not interactive","suites":["MDCTooltipFoundation"],"line":1188,"updatePoint":{"line":1188,"column":120},"code":"  it('#handleRichTooltipFocusOut  hides the tooltip immediately if related target is null and tooltip is not interactive',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       (foundation as any).handleRichTooltipFocusOut({relatedTarget: null});\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleRichTooltipFocusOut hides the tooltip immediately if related target is not within the anchor or the tooltip","suites":["MDCTooltipFoundation"],"line":1199,"updatePoint":{"line":1199,"column":120},"code":"  it('#handleRichTooltipFocusOut hides the tooltip immediately if related target is not within the anchor or the tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       mockAdapter.anchorContainsElement.and.returnValue(false);\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n       (foundation as any).handleRichTooltipFocusOut({\n         relatedTarget: document.createElement('div')\n       });\n\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleRichTooltipFocusOut does not hide the tooltip if related target is within the anchor","suites":["MDCTooltipFoundation"],"line":1214,"updatePoint":{"line":1214,"column":97},"code":"  it('#handleRichTooltipFocusOut does not hide the tooltip if related target is within the anchor',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       mockAdapter.anchorContainsElement.and.returnValue(true);\n       mockAdapter.tooltipContainsElement.and.returnValue(false);\n       (foundation as any).handleRichTooltipFocusOut({\n         relatedTarget: document.createElement('div')\n       });\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleRichTooltipFocusOut does not hide the tooltip if related target is within the tooltip","suites":["MDCTooltipFoundation"],"line":1229,"updatePoint":{"line":1229,"column":98},"code":"  it('#handleRichTooltipFocusOut does not hide the tooltip if related target is within the tooltip',\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n       foundation.show();\n       mockAdapter.anchorContainsElement.and.returnValue(false);\n       mockAdapter.tooltipContainsElement.and.returnValue(true);\n       (foundation as any).handleRichTooltipFocusOut({\n         relatedTarget: document.createElement('div')\n       });\n\n       expectTooltipNotToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"does not re-animate a tooltip already shown in the dom (from focus)","suites":["MDCTooltipFoundation"],"line":1244,"updatePoint":{"line":1244,"column":73},"code":"  it(`does not re-animate a tooltip already shown in the dom (from focus)`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.handleAnchorFocus({relatedTarget: null} as FocusEvent);\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n       foundation.handleAnchorMouseLeave();\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS / 2);\n       foundation.handleAnchorFocus({relatedTarget: null} as FocusEvent);\n\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n       expect(mockAdapter.removeClass).toHaveBeenCalledTimes(3);\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWN);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n       expect(mockAdapter.addClass).toHaveBeenCalledTimes(3);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"does not re-animate a tooltip already shown in the dom (from mouseenter)","suites":["MDCTooltipFoundation"],"line":1268,"updatePoint":{"line":1268,"column":78},"code":"  it(`does not re-animate a tooltip already shown in the dom (from mouseenter)`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.handleAnchorMouseEnter();\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n\n       foundation.handleAnchorMouseLeave();\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS / 2);\n       foundation.handleAnchorMouseEnter();\n\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n       expect(mockAdapter.removeClass).toHaveBeenCalledTimes(3);\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n       expect(mockAdapter.addClass).toHaveBeenCalledWith(CssClasses.SHOWN);\n       expect(mockAdapter.addClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n       expect(mockAdapter.addClass).toHaveBeenCalledTimes(3);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorMouseLeave clears any pending showTimeout","suites":["MDCTooltipFoundation"],"line":1292,"updatePoint":{"line":1292,"column":60},"code":"  it('#handleAnchorMouseLeave clears any pending showTimeout', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.handleAnchorMouseEnter();\n    expect((foundation as any).showTimeout).not.toEqual(null);\n    foundation.handleAnchorMouseLeave();\n    expect((foundation as any).showTimeout).toEqual(null);\n\n    jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n    expect(mockAdapter.removeAttribute).not.toHaveBeenCalledWith('aria-hidden');\n    expect(mockAdapter.removeClass).not.toHaveBeenCalledWith(CssClasses.HIDE);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(CssClasses.SHOWING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTooltipMouseEnter keeps tooltip visible","suites":["MDCTooltipFoundation"],"line":1305,"updatePoint":{"line":1305,"column":52},"code":"  it('#handleTooltipMouseEnter keeps tooltip visible', () => {\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n    foundation.handleAnchorMouseLeave();\n    expect((foundation as any).hideTimeout).not.toEqual(null);\n    (foundation as any).handleTooltipMouseEnter();\n\n    expect((foundation as any).hideTimeout).toEqual(null);\n    expect(mockAdapter.setAttribute)\n        .not.toHaveBeenCalledWith('aria-hidden', 'true');\n    expect(foundation.isShown()).toBeTrue();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide clears any pending showTimeout","suites":["MDCTooltipFoundation"],"line":1319,"updatePoint":{"line":1319,"column":42},"code":"  it('#hide clears any pending showTimeout', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.handleAnchorMouseEnter();\n    expect((foundation as any).showTimeout).not.toEqual(null);\n    foundation.hide();\n    expect((foundation as any).showTimeout).toEqual(null);\n\n    jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n    expect(mockAdapter.removeAttribute).not.toHaveBeenCalledWith('aria-hidden');\n    expect(mockAdapter.removeClass).not.toHaveBeenCalledWith(CssClasses.HIDE);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(CssClasses.SHOWING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorTouchstart shows a tooltip if the user long-presses for ms","suites":["MDCTooltipFoundation"],"line":1332,"updatePoint":{"line":1333,"column":33},"code":"  it(`#handleAnchorTouchstart shows a tooltip if the user long-presses for ${\n         numbers.SHOW_DELAY_MS}ms`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.handleAnchorTouchstart();\n\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n       expectTooltipToHaveBeenShown(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorTouchstart adds event handler for \"contextmenu\" event","suites":["MDCTooltipFoundation"],"line":1343,"updatePoint":{"line":1343,"column":72},"code":"  it(`#handleAnchorTouchstart adds event handler for \"contextmenu\" event`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.handleAnchorTouchstart();\n\n       expect(mockAdapter.registerWindowEventHandler)\n           .toHaveBeenCalledWith('contextmenu', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorTouchend clears any pending showTimeout","suites":["MDCTooltipFoundation"],"line":1353,"updatePoint":{"line":1353,"column":58},"code":"  it(`#handleAnchorTouchend clears any pending showTimeout`, () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.handleAnchorTouchstart();\n\n    expect((foundation as any).showTimeout).not.toEqual(null);\n    foundation.handleAnchorTouchend();\n    expect((foundation as any).showTimeout).toEqual(null);\n\n    jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n    expect(mockAdapter.removeAttribute).not.toHaveBeenCalledWith('aria-hidden');\n    expect(mockAdapter.removeClass).not.toHaveBeenCalledWith(CssClasses.HIDE);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(CssClasses.SHOWING);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleAnchorTouchend removes event handler for \"contextmenu\" event if tooltip is not shown","suites":["MDCTooltipFoundation"],"line":1367,"updatePoint":{"line":1367,"column":97},"code":"  it(`#handleAnchorTouchend removes event handler for \"contextmenu\" event if tooltip is not shown`,\n     () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.handleAnchorTouchstart();\n       foundation.handleAnchorTouchend();\n\n       expect(mockAdapter.registerWindowEventHandler)\n           .toHaveBeenCalledWith('contextmenu', jasmine.any(Function));\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('contextmenu', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide deregisters \"contextmenu\" event listeners on the window","suites":["MDCTooltipFoundation"],"line":1380,"updatePoint":{"line":1380,"column":67},"code":"  it('#hide deregisters \"contextmenu\" event listeners on the window', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    foundation.handleAnchorTouchstart();\n    jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n    foundation.hide();\n\n    expect(mockAdapter.deregisterWindowEventHandler)\n        .toHaveBeenCalledWith('contextmenu', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position (START alignment)","suites":["MDCTooltipFoundation"],"line":1390,"updatePoint":{"line":1390,"column":60},"code":"  it('properly calculates tooltip position (START alignment)', () => {\n    const anchorHeight = 35;\n    const expectedTooltipHeight = anchorHeight + numbers.BOUNDED_ANCHOR_GAP;\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue({\n      top: 0,\n      bottom: anchorHeight,\n      left: 32,\n      right: 82,\n      width: 50,\n      height: anchorHeight\n    });\n    mockAdapter.getTooltipSize.and.returnValue({width: 100, height: 30});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipHeight}px`);\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', `32px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly sets tooltip transform origin (left top)","suites":["MDCTooltipFoundation"],"line":1411,"updatePoint":{"line":1411,"column":55},"code":"  it('properly sets tooltip transform origin (left top)', () => {\n    const anchorHeight = 35;\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue({\n      top: 0,\n      bottom: anchorHeight,\n      left: 32,\n      right: 82,\n      width: 50,\n      height: anchorHeight\n    });\n    mockAdapter.getTooltipSize.and.returnValue({width: 100, height: 30});\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'left top');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position (END alignment)","suites":["MDCTooltipFoundation"],"line":1430,"updatePoint":{"line":1430,"column":58},"code":"  it('properly calculates tooltip position (END alignment)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 400, right: 450, width: 50, height: 35};\n    const expectedTooltipTop =\n        anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n    const tooltipSize = {width: 100, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(480);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', `350px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly sets tooltip transform origin (right top)","suites":["MDCTooltipFoundation"],"line":1448,"updatePoint":{"line":1448,"column":56},"code":"  it('properly sets tooltip transform origin (right top)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 400, right: 450, width: 50, height: 35};\n    const tooltipSize = {width: 100, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(480);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'right top');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position (CENTER alignment)","suites":["MDCTooltipFoundation"],"line":1463,"updatePoint":{"line":1463,"column":61},"code":"  it('properly calculates tooltip position (CENTER alignment)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, right: 200, width: 200, height: 35};\n    const expectedTooltipTop =\n        anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n    const tooltipSize = {width: 40, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', `80px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly sets tooltip transform origin (center top)","suites":["MDCTooltipFoundation"],"line":1481,"updatePoint":{"line":1481,"column":57},"code":"  it('properly sets tooltip transform origin (center top)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, right: 200, width: 200, height: 35};\n    const tooltipSize = {width: 40, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'center top');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position with an UNBOUNDED anchor","suites":["MDCTooltipFoundation"],"line":1496,"updatePoint":{"line":1496,"column":67},"code":"  it('properly calculates tooltip position with an UNBOUNDED anchor', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, width: 200, height: 35} as DOMRect;\n    const expectedTooltipTop =\n        anchorBoundingRect.height + numbers.UNBOUNDED_ANCHOR_GAP;\n    const tooltipSize = {width: 40, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.setAnchorBoundaryType(AnchorBoundaryType.UNBOUNDED);\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', `80px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"sets width of rich tooltip after positioning","suites":["MDCTooltipFoundation"],"line":1515,"updatePoint":{"line":1515,"column":50},"code":"  it('sets width of rich tooltip after positioning', () => {\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n    const testWidth = '50px';\n    mockAdapter.getComputedStyleProperty.and.returnValue(testWidth);\n\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('width', testWidth);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates rich tooltip position (START alignment)","suites":["MDCTooltipFoundation"],"line":1527,"updatePoint":{"line":1527,"column":65},"code":"  it('properly calculates rich tooltip position (START alignment)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 100, right: 150, width: 50, height: 35};\n    const parentBoundingRect =\n        {top: 5, bottom: 35, left: 0, right: 50, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipTop = anchorBoundingRect.height +\n        numbers.BOUNDED_ANCHOR_GAP - parentBoundingRect.top;\n    const expectedTooltipLeft =\n        anchorBoundingRect.left - tooltipSize.width - parentBoundingRect.left;\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(150);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly sets rich tooltip transform origin (right top)","suites":["MDCTooltipFoundation"],"line":1552,"updatePoint":{"line":1552,"column":61},"code":"  it('properly sets rich tooltip transform origin (right top)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 100, right: 150, width: 50, height: 35};\n    const parentBoundingRect =\n        {top: 5, bottom: 35, left: 0, right: 50, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(150);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'right top');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates rich tooltip position (END alignment)","suites":["MDCTooltipFoundation"],"line":1570,"updatePoint":{"line":1570,"column":63},"code":"  it('properly calculates rich tooltip position (END alignment)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, right: 50, width: 50, height: 35};\n    const parentBoundingRect =\n        {top: 5, bottom: 35, left: 0, right: 50, width: 50, height: 30};\n    const expectedTooltipTop = anchorBoundingRect.height +\n        numbers.BOUNDED_ANCHOR_GAP - parentBoundingRect.top;\n    const expectedTooltipLeft =\n        anchorBoundingRect.right - parentBoundingRect.left;\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(150);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates rich tooltip transform origin (left top)","suites":["MDCTooltipFoundation"],"line":1593,"updatePoint":{"line":1593,"column":66},"code":"  it('properly calculates rich tooltip transform origin (left top)', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, right: 50, width: 50, height: 35};\n    const parentBoundingRect =\n        {top: 5, bottom: 35, left: 0, right: 50, width: 50, height: 30};\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(150);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'left top');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"allows users to specify the tooltip position for plain tooltips (START alignment instead of CENTER)","suites":["MDCTooltipFoundation"],"line":1609,"updatePoint":{"line":1609,"column":105},"code":"  it('allows users to specify the tooltip position for plain tooltips (START alignment instead of CENTER)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 35, left: 32, right: 232, width: 200, height: 35};\n       const expectedTooltipTop =\n           anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n       const tooltipSize = {width: 40, height: 30};\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.setTooltipPosition({xPos: XPosition.START});\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `32px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"ignores user specification if positioning violates threshold for plain tooltips (CENTER alignment instead of START)","suites":["MDCTooltipFoundation"],"line":1631,"updatePoint":{"line":1631,"column":121},"code":"  it('ignores user specification if positioning violates threshold for plain tooltips (CENTER alignment instead of START)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 35, left: 0, right: 200, width: 200, height: 35};\n       const expectedTooltipTop =\n           anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n       const tooltipSize = {width: 40, height: 30};\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.setTooltipPosition({xPos: XPosition.START});\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `80px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"allows users to specify the tooltip position for plain tooltips (END alignment instead of START)","suites":["MDCTooltipFoundation"],"line":1653,"updatePoint":{"line":1653,"column":102},"code":"  it('allows users to specify the tooltip position for plain tooltips (END alignment instead of START)',\n     () => {\n       const anchorHeight = 35;\n       const expectedTooltipHeight = anchorHeight + numbers.BOUNDED_ANCHOR_GAP;\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue({\n         top: 0,\n         bottom: anchorHeight,\n         left: 0,\n         right: 100,\n         width: 100,\n         height: anchorHeight\n       });\n       mockAdapter.getTooltipSize.and.returnValue({width: 50, height: 30});\n\n       foundation.setTooltipPosition({xPos: XPosition.END});\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipHeight}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `50px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"allows users to specify the tooltip position for rich tooltips (END alignment instead of START)","suites":["MDCTooltipFoundation"],"line":1679,"updatePoint":{"line":1679,"column":101},"code":"  it('allows users to specify the tooltip position for rich tooltips (END alignment instead of START)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 35, left: 132, right: 232, width: 100, height: 35};\n       const parentBoundingRect =\n           {top: 5, bottom: 35, left: 0, right: 50, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 30};\n       const expectedTooltipTop = anchorBoundingRect.height +\n           numbers.BOUNDED_ANCHOR_GAP - parentBoundingRect.top;\n       const expectedTooltipLeft = anchorBoundingRect.left - tooltipSize.width -\n           parentBoundingRect.left;\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.setTooltipPosition({xPos: XPosition.START});\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"ignores user specification if positioning violates threshold for rich tooltips (END alignment instead of START)","suites":["MDCTooltipFoundation"],"line":1706,"updatePoint":{"line":1706,"column":117},"code":"  it('ignores user specification if positioning violates threshold for rich tooltips (END alignment instead of START)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 35, left: 0, right: 200, width: 200, height: 35};\n       const parentBoundingRect =\n           {top: 5, bottom: 35, left: 0, right: 50, width: 50, height: 30};\n       const expectedTooltipTop = anchorBoundingRect.height +\n           numbers.BOUNDED_ANCHOR_GAP - parentBoundingRect.top;\n       const expectedTooltipLeft =\n           anchorBoundingRect.right - parentBoundingRect.left;\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n\n       foundation.setTooltipPosition({xPos: XPosition.START});\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"ignores user specification if positioning is not supported for rich tooltips (END alignment instead of CENTER)","suites":["MDCTooltipFoundation"],"line":1731,"updatePoint":{"line":1731,"column":116},"code":"  it('ignores user specification if positioning is not supported for rich tooltips (END alignment instead of CENTER)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 35, left: 0, right: 100, width: 100, height: 35};\n       const parentBoundingRect =\n           {top: 5, bottom: 35, left: 0, right: 50, width: 50, height: 30};\n       const expectedTooltipTop = anchorBoundingRect.height +\n           numbers.BOUNDED_ANCHOR_GAP - parentBoundingRect.top;\n       const expectedTooltipLeft =\n           anchorBoundingRect.right - parentBoundingRect.left;\n       const {foundation, mockAdapter} =\n           setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n\n       foundation.setTooltipPosition({xPos: XPosition.CENTER});\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates START tooltip position in RTL","suites":["MDCTooltipFoundation"],"line":1756,"updatePoint":{"line":1756,"column":55},"code":"  it('properly calculates START tooltip position in RTL', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, right: 100, width: 100, height: 35};\n    const expectedTooltipTop =\n        anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.isRTL.and.returnValue(true);\n\n    foundation.setTooltipPosition({xPos: XPosition.START});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', `50px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates \"right top\" transform origin in RTL","suites":["MDCTooltipFoundation"],"line":1776,"updatePoint":{"line":1776,"column":61},"code":"  it('properly calculates \"right top\" transform origin in RTL', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, right: 100, width: 100, height: 35};\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.isRTL.and.returnValue(true);\n\n    foundation.setTooltipPosition({xPos: XPosition.START});\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'right top');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates END tooltip position in RTL","suites":["MDCTooltipFoundation"],"line":1793,"updatePoint":{"line":1793,"column":53},"code":"  it('properly calculates END tooltip position in RTL', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 32, right: 132, width: 100, height: 35};\n    const expectedTooltipTop =\n        anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.isRTL.and.returnValue(true);\n\n    foundation.setTooltipPosition({xPos: XPosition.END});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', `32px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates \"left top\" transform origin in RTL","suites":["MDCTooltipFoundation"],"line":1813,"updatePoint":{"line":1813,"column":60},"code":"  it('properly calculates \"left top\" transform origin in RTL', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 32, right: 132, width: 100, height: 35};\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.isRTL.and.returnValue(true);\n\n    foundation.setTooltipPosition({xPos: XPosition.END});\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'left top');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"positions tooltip within viewport if threshold cannot be maintained (x-axis)","suites":["MDCTooltipFoundation"],"line":1830,"updatePoint":{"line":1830,"column":82},"code":"  it('positions tooltip within viewport if threshold cannot be maintained (x-axis)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 35, left: 450, right: 500, width: 50, height: 35};\n       const expectedTooltipTop =\n           anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n       const tooltipSize = {width: 100, height: 30};\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `400px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"allows users to specify a position within viewport if threshold cannot be maintained (START alignment instead of CENTER)","suites":["MDCTooltipFoundation"],"line":1851,"updatePoint":{"line":1851,"column":126},"code":"  it('allows users to specify a position within viewport if threshold cannot be maintained (START alignment instead of CENTER)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 35, left: 10, right: 60, width: 50, height: 35};\n       const expectedTooltipTop =\n           anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n       const tooltipSize = {width: 60, height: 30};\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportWidth.and.returnValue(500);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.setTooltipPosition({xPos: XPosition.START});\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `10px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip y-position (ABOVE alignment)","suites":["MDCTooltipFoundation"],"line":1873,"updatePoint":{"line":1873,"column":62},"code":"  it('properly calculates tooltip y-position (ABOVE alignment)', () => {\n    const anchorBoundingRect =\n        {top: 100, bottom: 125, left: 10, right: 60, width: 50, height: 25};\n    const tooltipSize = {width: 60, height: 20};\n    const expectedTooltipTop = anchorBoundingRect.top -\n        (numbers.BOUNDED_ANCHOR_GAP + tooltipSize.height);\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getViewportHeight.and.returnValue(300);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.setTooltipPosition({yPos: YPosition.ABOVE});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip transform origin (left bottom)","suites":["MDCTooltipFoundation"],"line":1892,"updatePoint":{"line":1892,"column":64},"code":"  it('properly calculates tooltip transform origin (left bottom)', () => {\n    const anchorBoundingRect =\n        {top: 100, bottom: 125, left: 10, right: 60, width: 50, height: 25};\n    const tooltipSize = {width: 60, height: 20};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getViewportHeight.and.returnValue(300);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.setTooltipPosition({yPos: YPosition.ABOVE});\n    foundation.show();\n    expect(mockAdapter.setSurfaceAnimationStyleProperty)\n        .toHaveBeenCalledWith('transform-origin', 'left bottom');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip y-position (BELOW alignment)","suites":["MDCTooltipFoundation"],"line":1909,"updatePoint":{"line":1909,"column":62},"code":"  it('properly calculates tooltip y-position (BELOW alignment)', () => {\n    const anchorBoundingRect =\n        {top: 100, bottom: 125, left: 10, right: 60, width: 50, height: 25};\n    const tooltipSize = {width: 60, height: 20};\n    const expectedTooltipTop =\n        anchorBoundingRect.bottom + numbers.BOUNDED_ANCHOR_GAP;\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getViewportHeight.and.returnValue(300);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.setTooltipPosition({yPos: YPosition.BELOW});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"positions tooltip within viewport if threshold cannot be maintained (y-axis)","suites":["MDCTooltipFoundation"],"line":1928,"updatePoint":{"line":1928,"column":82},"code":"  it('positions tooltip within viewport if threshold cannot be maintained (y-axis)',\n     () => {\n       const anchorBoundingRect =\n           {top: 0, bottom: 30, left: 450, right: 500, width: 50} as DOMRect;\n       const expectedTooltipTop =\n           anchorBoundingRect.bottom + numbers.BOUNDED_ANCHOR_GAP;\n       const tooltipSize = {width: 100, height: 30};\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportHeight.and.returnValue(70);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"ignores user specification if positioning violates threshold (BELOW alignment instead of ABOVE)","suites":["MDCTooltipFoundation"],"line":1947,"updatePoint":{"line":1947,"column":101},"code":"  it('ignores user specification if positioning violates threshold (BELOW alignment instead of ABOVE)',\n     () => {\n       const anchorBoundingRect =\n           {top: 40, bottom: 70, left: 450, right: 500, width: 50} as DOMRect;\n       const tooltipSize = {width: 100, height: 30};\n       const expectedTooltipTop =\n           anchorBoundingRect.bottom + numbers.BOUNDED_ANCHOR_GAP;\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportHeight.and.returnValue(140);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.setTooltipPosition({yPos: YPosition.ABOVE});\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"allows users to specify a position within viewport if threshold cannot be maintained (ABOVE alignment instead of BELOW)","suites":["MDCTooltipFoundation"],"line":1967,"updatePoint":{"line":1967,"column":125},"code":"  it('allows users to specify a position within viewport if threshold cannot be maintained (ABOVE alignment instead of BELOW)',\n     () => {\n       const anchorBoundingRect =\n           {top: 40, bottom: 70, left: 450, right: 500, width: 50} as DOMRect;\n       const tooltipSize = {width: 100, height: 30};\n       const expectedTooltipTop = anchorBoundingRect.top -\n           (numbers.BOUNDED_ANCHOR_GAP + tooltipSize.height);\n\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.getViewportHeight.and.returnValue(110);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.setTooltipPosition({yPos: YPosition.ABOVE});\n       foundation.show();\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position SIDE_END","suites":["MDCTooltipFoundation"],"line":1987,"updatePoint":{"line":1987,"column":51},"code":"  it('properly calculates tooltip position SIDE_END', () => {\n    const anchorBoundingRect =\n        {top: 100, bottom: 140, left: 0, right: 100, width: 100, height: 40};\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportHeight.and.returnValue(500);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.setTooltipPosition(\n        {xPos: XPosition.SIDE_END, yPos: YPosition.SIDE});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('top', '105px');\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', '104px');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position SIDE_START in RTL","suites":["MDCTooltipFoundation"],"line":2005,"updatePoint":{"line":2005,"column":60},"code":"  it('properly calculates tooltip position SIDE_START in RTL', () => {\n    const anchorBoundingRect =\n        {top: 100, bottom: 140, left: 0, right: 100, width: 100, height: 40};\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportHeight.and.returnValue(500);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.isRTL.and.returnValue(true);\n\n    foundation.setTooltipPosition(\n        {xPos: XPosition.SIDE_START, yPos: YPosition.SIDE});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('top', '105px');\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', '104px');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position SIDE_START","suites":["MDCTooltipFoundation"],"line":2024,"updatePoint":{"line":2024,"column":53},"code":"  it('properly calculates tooltip position SIDE_START', () => {\n    const anchorBoundingRect =\n        {top: 100, bottom: 140, left: 100, right: 200, width: 100, height: 40};\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportHeight.and.returnValue(500);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n    foundation.setTooltipPosition(\n        {xPos: XPosition.SIDE_START, yPos: YPosition.SIDE});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('top', '105px');\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', '46px');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip position SIDE_END in RTL","suites":["MDCTooltipFoundation"],"line":2042,"updatePoint":{"line":2042,"column":58},"code":"  it('properly calculates tooltip position SIDE_END in RTL', () => {\n    const anchorBoundingRect =\n        {top: 100, bottom: 140, left: 100, right: 200, width: 100, height: 40};\n    const tooltipSize = {width: 50, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportHeight.and.returnValue(500);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.isRTL.and.returnValue(true);\n\n    foundation.setTooltipPosition(\n        {xPos: XPosition.SIDE_END, yPos: YPosition.SIDE});\n    foundation.show();\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('top', '105px');\n    expect(mockAdapter.setStyleProperty).toHaveBeenCalledWith('left', '46px');\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy clears showTimeout","suites":["MDCTooltipFoundation"],"line":2061,"updatePoint":{"line":2061,"column":33},"code":"  it('#destroy clears showTimeout', () => {\n    const {foundation} = setUpFoundationTest(MDCTooltipFoundation);\n\n    foundation.handleAnchorMouseEnter();\n    foundation.destroy();\n\n    expect((foundation as any).showTimeout).toEqual(null);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy clears requestAnimationFrame from show","suites":["MDCTooltipFoundation"],"line":2070,"updatePoint":{"line":2070,"column":53},"code":"  it('#destroy clears requestAnimationFrame from show', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n\n    foundation.show();\n    expect(foundation['frameId']).not.toEqual(null);\n    foundation.destroy();\n    jasmine.clock().tick(ANIMATION_FRAME);\n\n    expect(foundation['frameId']).toEqual(null);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n    // 1 call from show and 5 calls from destroy\n    expect(mockAdapter.removeClass).toHaveBeenCalledTimes(6);\n    expect(mockAdapter.addClass).not.toHaveBeenCalledWith(CssClasses.SHOWN);\n    expect(mockAdapter.addClass)\n        .not.toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy clears hideTimeout","suites":["MDCTooltipFoundation"],"line":2090,"updatePoint":{"line":2090,"column":33},"code":"  it('#destroy clears hideTimeout', () => {\n    const {foundation} = setUpFoundationTest(MDCTooltipFoundation);\n\n    foundation.handleAnchorMouseLeave();\n    foundation.destroy();\n\n    expect((foundation as any).hideTimeout).toEqual(null);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy removes tooltip classes","suites":["MDCTooltipFoundation"],"line":2099,"updatePoint":{"line":2099,"column":38},"code":"  it('#destroy removes tooltip classes', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n\n    foundation.destroy();\n\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWN);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n    expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.HIDE);\n    expect(mockAdapter.removeClass)\n        .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy cancels all animation frame requests","suites":["MDCTooltipFoundation"],"line":2113,"updatePoint":{"line":2113,"column":51},"code":"  it('#destroy cancels all animation frame requests', () => {\n    const {foundation} = setUpFoundationTest(MDCTooltipFoundation);\n\n    (foundation as any).handleWindowChangeEvent();\n    foundation.destroy();\n\n    expect(foundation['animFrame']['rafIDs'].size).toEqual(0);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy removes the event listeners for plain tooltips","suites":["MDCTooltipFoundation"],"line":2122,"updatePoint":{"line":2122,"column":61},"code":"  it('#destroy removes the event listeners for plain tooltips', () => {\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n\n    foundation.destroy();\n\n    expect(mockAdapter.deregisterEventHandler)\n        .toHaveBeenCalledWith('mouseenter', jasmine.any(Function));\n    expect(mockAdapter.deregisterEventHandler)\n        .toHaveBeenCalledWith('mouseleave', jasmine.any(Function));\n    expect(mockAdapter.deregisterEventHandler)\n        .not.toHaveBeenCalledWith('focusout', jasmine.any(Function));\n    expect(mockAdapter.deregisterDocumentEventHandler)\n        .toHaveBeenCalledWith('click', jasmine.any(Function));\n    expect(mockAdapter.deregisterDocumentEventHandler)\n        .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n    expect(mockAdapter.deregisterWindowEventHandler)\n        .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n    expect(mockAdapter.deregisterWindowEventHandler)\n        .toHaveBeenCalledWith('resize', jasmine.any(Function));\n    expect(mockAdapter.deregisterAnchorEventHandler)\n        .toHaveBeenCalledWith('blur', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy removes the event listeners for default rich tooltips","suites":["MDCTooltipFoundation"],"line":2145,"updatePoint":{"line":2145,"column":68},"code":"  it('#destroy removes the event listeners for default rich tooltips', () => {\n    const {foundation, mockAdapter} =\n        setUpFoundationTestForRichTooltip(MDCTooltipFoundation);\n\n    foundation.destroy();\n\n    expect(mockAdapter.deregisterEventHandler)\n        .toHaveBeenCalledWith('focusout', jasmine.any(Function));\n    expect(mockAdapter.deregisterEventHandler)\n        .toHaveBeenCalledWith('mouseenter', jasmine.any(Function));\n    expect(mockAdapter.deregisterEventHandler)\n        .toHaveBeenCalledWith('mouseleave', jasmine.any(Function));\n    expect(mockAdapter.deregisterDocumentEventHandler)\n        .toHaveBeenCalledWith('click', jasmine.any(Function));\n    expect(mockAdapter.deregisterDocumentEventHandler)\n        .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n    expect(mockAdapter.deregisterWindowEventHandler)\n        .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n    expect(mockAdapter.deregisterWindowEventHandler)\n        .toHaveBeenCalledWith('resize', jasmine.any(Function));\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#destroy removes the event listeners for persistent rich tooltips","suites":["MDCTooltipFoundation"],"line":2167,"updatePoint":{"line":2167,"column":71},"code":"  it('#destroy removes the event listeners for persistent rich tooltips',\n     () => {\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n\n       foundation.destroy();\n\n       expect(mockAdapter.deregisterEventHandler)\n           .toHaveBeenCalledWith('focusout', jasmine.any(Function));\n       expect(mockAdapter.deregisterEventHandler)\n           .not.toHaveBeenCalledWith('mouseenter', jasmine.any(Function));\n       expect(mockAdapter.deregisterEventHandler)\n           .not.toHaveBeenCalledWith('mouseleave', jasmine.any(Function));\n       expect(mockAdapter.deregisterDocumentEventHandler)\n           .toHaveBeenCalledWith('click', jasmine.any(Function));\n       expect(mockAdapter.deregisterDocumentEventHandler)\n           .toHaveBeenCalledWith('keydown', jasmine.any(Function));\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('scroll', jasmine.any(Function));\n       expect(mockAdapter.deregisterWindowEventHandler)\n           .toHaveBeenCalledWith('resize', jasmine.any(Function));\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"recalculates position of tooltip if anchor position changes","suites":["MDCTooltipFoundation"],"line":2190,"updatePoint":{"line":2190,"column":65},"code":"  it('recalculates position of tooltip if anchor position changes', () => {\n    const anchorBoundingRect =\n        {top: 0, bottom: 35, left: 0, right: 200, width: 200, height: 35};\n    const expectedTooltipTop =\n        anchorBoundingRect.height + numbers.BOUNDED_ANCHOR_GAP;\n    const expectedTooltipLeft = 80;\n    const tooltipSize = {width: 40, height: 30};\n\n    const {foundation, mockAdapter} = setUpFoundationTest(MDCTooltipFoundation);\n    mockAdapter.getViewportWidth.and.returnValue(500);\n    mockAdapter.getViewportHeight.and.returnValue(500);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.registerWindowEventHandler.and.callFake(\n        (ev: string, handler: EventListener) => {\n          window.addEventListener(ev, handler);\n        });\n\n    foundation.show();\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n\n    const yPositionDiff = 50;\n    const xPositionDiff = 20;\n    const newAnchorBoundingRect = {\n      top: anchorBoundingRect.top + yPositionDiff,\n      bottom: anchorBoundingRect.bottom + yPositionDiff,\n      left: anchorBoundingRect.left + xPositionDiff,\n      right: anchorBoundingRect.right + xPositionDiff,\n      width: anchorBoundingRect.width,\n      height: anchorBoundingRect.height,\n    };\n\n    mockAdapter.getAnchorBoundingRect.and.returnValue(newAnchorBoundingRect);\n    emitEvent(window, 'resize');\n    jasmine.clock().tick(1);\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop + yPositionDiff}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith(\n            'left', `${expectedTooltipLeft + xPositionDiff}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#show registers additional user-specified scroll handlers","suites":["MDCTooltipFoundation"],"line":2236,"updatePoint":{"line":2236,"column":63},"code":"  it('#show registers additional user-specified scroll handlers', () => {\n    const scrollableAncestor = document.createElement('div');\n    scrollableAncestor.setAttribute('id', 'scrollable');\n    document.body.appendChild(scrollableAncestor);\n    const {foundation} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {isPersistent: true});\n\n    (foundation as any).repositionTooltipOnAnchorMove =\n        jasmine.createSpy('repositionTooltipOnAnchorMove');\n\n\n    foundation.attachScrollHandler((evt, handler) => {\n      scrollableAncestor.addEventListener(evt, handler);\n    });\n    foundation.show();\n\n    emitEvent(scrollableAncestor, 'scroll');\n    jasmine.clock().tick(1);\n\n    expect((foundation as any).repositionTooltipOnAnchorMove)\n        .toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#hide deregisters additional user-specified scroll handlers","suites":["MDCTooltipFoundation"],"line":2259,"updatePoint":{"line":2259,"column":65},"code":"  it('#hide deregisters additional user-specified scroll handlers', () => {\n    const scrollableAncestor = document.createElement('div');\n    scrollableAncestor.setAttribute('id', 'scrollable');\n    document.body.appendChild(scrollableAncestor);\n    const {foundation} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {isPersistent: true});\n\n    (foundation as any).repositionTooltipOnAnchorMove =\n        jasmine.createSpy('repositionTooltipOnAnchorMove');\n\n\n    foundation.attachScrollHandler((evt, handler) => {\n      scrollableAncestor.addEventListener(evt, handler);\n    });\n    foundation.removeScrollHandler((evt, handler) => {\n      scrollableAncestor.removeEventListener(evt, handler);\n    });\n    foundation.show();\n    foundation.hide();\n\n    emitEvent(scrollableAncestor, 'scroll');\n    jasmine.clock().tick(1);\n\n    expect((foundation as any).repositionTooltipOnAnchorMove)\n        .not.toHaveBeenCalled();\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"recalculates position of tooltip if user specified ancestor is scrolled","suites":["MDCTooltipFoundation"],"line":2286,"updatePoint":{"line":2286,"column":77},"code":"  it('recalculates position of tooltip if user specified ancestor is scrolled',\n     () => {\n       const anchorBoundingRect = {top: 0, bottom: 35, left: 200, right: 250};\n       const parentBoundingRect = {top: 5, bottom: 35, left: 100, right: 150};\n       const tooltipSize = {width: 40, height: 30};\n\n       const scrollableAncestor = document.createElement('div');\n       scrollableAncestor.setAttribute('id', 'scrollable');\n       document.body.appendChild(scrollableAncestor);\n\n       const expectedTooltipTop = anchorBoundingRect.bottom +\n           numbers.BOUNDED_ANCHOR_GAP - parentBoundingRect.top;\n       const expectedTooltipLeft =\n           anchorBoundingRect.right - parentBoundingRect.left;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {isPersistent: true});\n       mockAdapter.getViewportWidth.and.returnValue(300);\n       mockAdapter.getViewportHeight.and.returnValue(150);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n\n       foundation.attachScrollHandler((evt, handler) => {\n         scrollableAncestor.addEventListener(evt, handler);\n       });\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n\n       // \"Scroll\" tooltip to the bottom of the page -- tooltip position flips\n       // from BELOW to ABOVE\n       const yPositionDiff = 150;\n       const xPositionDiff = 20;\n       const newAnchorBoundingRect = {\n         top: anchorBoundingRect.top + yPositionDiff,\n         bottom: anchorBoundingRect.bottom + yPositionDiff,\n         left: anchorBoundingRect.left + xPositionDiff,\n         right: anchorBoundingRect.right + xPositionDiff,\n       };\n\n       const newParentBoundingRect = {\n         top: parentBoundingRect.top + yPositionDiff,\n         bottom: parentBoundingRect.bottom + yPositionDiff,\n         left: parentBoundingRect.left + xPositionDiff,\n         right: parentBoundingRect.right + xPositionDiff,\n       };\n\n       mockAdapter.getAnchorBoundingRect.and.returnValue(newAnchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(newParentBoundingRect);\n       emitEvent(scrollableAncestor, 'scroll');\n       jasmine.clock().tick(1);\n\n       const newExpectedTooltipTop =\n           (newAnchorBoundingRect.top -\n            (numbers.BOUNDED_ANCHOR_GAP + tooltipSize.height)) -\n           newParentBoundingRect.top;\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${newExpectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"correctly positions a  aligned caret","suites":["MDCTooltipFoundation"],"line":2353,"updatePoint":{"line":2353,"column":50},"code":"    it(`correctly positions a ${pos} aligned caret`, () => {\n      const anchorBoundingRect =\n          {top: 200, bottom: 235, left: 350, right: 400, width: 50, height: 35};\n      const tooltipSize = {width: 300, height: 150};\n\n      const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n          MDCTooltipFoundation, {hasCaret: true});\n\n      mockAdapter.getViewportWidth.and.returnValue(850);\n      mockAdapter.getViewportHeight.and.returnValue(800);\n      mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n      mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n      mockAdapter.isRTL.and.returnValue(false);\n      mockAdapter.getComputedStyleProperty.withArgs('width').and.returnValue(\n          RICH_TOOLTIP_WIDTH);\n      mockAdapter.getComputedStyleProperty.withArgs('height').and.returnValue(\n          RICH_TOOLTIP_HEIGHT);\n      mockAdapter.getTooltipCaretBoundingRect.and.returnValue(\n          {width: CARET_WIDTH, height: CARET_HEIGHT});\n\n      foundation.setTooltipPosition({withCaretPos: pos});\n      foundation.show();\n\n      const styleValues = CARET_POSITION_STYLES.get(pos)!;\n      expect(mockAdapter.setTooltipCaretStyle)\n          .toHaveBeenCalledWith(styleValues.yAlignment, styleValues.yAxisPx);\n      expect(mockAdapter.setTooltipCaretStyle)\n          .toHaveBeenCalledWith(styleValues.xAlignment, styleValues.xAxisPx);\n      expect(mockAdapter.setTooltipCaretStyle)\n          .toHaveBeenCalledWith(\n              'transform',\n              `rotate(${styleValues.rotation}deg) skewY(${\n                  styleValues.skew}deg) scaleX(${styleValues.scaleX})`);\n      expect(mockAdapter.setTooltipCaretStyle)\n          .toHaveBeenCalledWith(\n              'transform-origin',\n              `${styleValues.xAlignment} ${styleValues.yAlignment}`);\n      expect(mockAdapter.setSurfaceAnimationStyleProperty)\n          .toHaveBeenCalledWith(\n              'transform-origin',\n              `${styleValues.xTransformOrigin} ${\n                  styleValues.yTransformOrigin}`);\n    });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (ABOVE_START)","suites":["MDCTooltipFoundation"],"line":2398,"updatePoint":{"line":2398,"column":67},"code":"  it('properly calculates tooltip with caret position (ABOVE_START)', () => {\n    const anchorBoundingRect =\n        {top: 200, bottom: 235, left: 350, right: 400, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipTop =\n        (anchorBoundingRect.top -\n         (numbers.BOUNDED_ANCHOR_GAP + tooltipSize.height + CARET_HEIGHT / 2)) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (numbers.CARET_INDENTATION + CARET_WIDTH / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (ABOVE_CENTER)","suites":["MDCTooltipFoundation"],"line":2430,"updatePoint":{"line":2430,"column":68},"code":"  it('properly calculates tooltip with caret position (ABOVE_CENTER)', () => {\n    const anchorBoundingRect = {top: 200, left: 10, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipTop =\n        (anchorBoundingRect.top -\n         (numbers.BOUNDED_ANCHOR_GAP + tooltipSize.height + CARET_HEIGHT / 2)) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (tooltipSize.width / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (ABOVE_END)","suites":["MDCTooltipFoundation"],"line":2461,"updatePoint":{"line":2461,"column":65},"code":"  it('properly calculates tooltip with caret position (ABOVE_END)', () => {\n    const anchorBoundingRect = {top: 200, left: 0, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipTop =\n        (anchorBoundingRect.top -\n         (numbers.BOUNDED_ANCHOR_GAP + tooltipSize.height + CARET_HEIGHT / 2)) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (tooltipSize.width - numbers.CARET_INDENTATION - CARET_WIDTH / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (BELOW_START)","suites":["MDCTooltipFoundation"],"line":2492,"updatePoint":{"line":2492,"column":67},"code":"  it('properly calculates tooltip with caret position (BELOW_START)', () => {\n    const anchorBoundingRect = {bottom: 35, left: 40, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipTop = (anchorBoundingRect.bottom +\n                                numbers.BOUNDED_ANCHOR_GAP + CARET_HEIGHT / 2) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (numbers.CARET_INDENTATION + CARET_WIDTH / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(90);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (BELOW_CENTER)","suites":["MDCTooltipFoundation"],"line":2522,"updatePoint":{"line":2522,"column":68},"code":"  it('properly calculates tooltip with caret position (BELOW_CENTER)', () => {\n    const anchorBoundingRect = {bottom: 35, left: 10, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipTop = (anchorBoundingRect.bottom +\n                                numbers.BOUNDED_ANCHOR_GAP + CARET_HEIGHT / 2) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (tooltipSize.width / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(90);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (BELOW_END)","suites":["MDCTooltipFoundation"],"line":2552,"updatePoint":{"line":2552,"column":65},"code":"  it('properly calculates tooltip with caret position (BELOW_END)', () => {\n    const anchorBoundingRect = {bottom: 35, left: 0, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipTop = (anchorBoundingRect.bottom +\n                                numbers.BOUNDED_ANCHOR_GAP + CARET_HEIGHT / 2) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (tooltipSize.width - numbers.CARET_INDENTATION - CARET_WIDTH / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(90);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (TOP_SIDE_START)","suites":["MDCTooltipFoundation"],"line":2583,"updatePoint":{"line":2583,"column":70},"code":"  it('properly calculates tooltip with caret position (TOP_SIDE_START)', () => {\n    const anchorBoundingRect =\n        {top: 50, bottom: 85, left: 350, right: 400, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 50};\n\n    const expectedTooltipTop =\n        (anchorBoundingRect.top + anchorBoundingRect.height / 2 -\n         (numbers.CARET_INDENTATION + CARET_WIDTH / 2)) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left -\n         (tooltipSize.width + numbers.BOUNDED_ANCHOR_GAP + CARET_HEIGHT / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (CENTER_SIDE_START)","suites":["MDCTooltipFoundation"],"line":2616,"updatePoint":{"line":2616,"column":73},"code":"  it('properly calculates tooltip with caret position (CENTER_SIDE_START)',\n     () => {\n       const anchorBoundingRect = {top: 25, left: 350, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 50};\n\n       const expectedTooltipTop =\n           (anchorBoundingRect.top + anchorBoundingRect.height / 2 -\n            tooltipSize.height / 2) -\n           parentBoundingRect.top;\n       const expectedTooltipLeft =\n           (anchorBoundingRect.left -\n            (tooltipSize.width + numbers.BOUNDED_ANCHOR_GAP +\n             CARET_HEIGHT / 2)) -\n           parentBoundingRect.left;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(850);\n       mockAdapter.getViewportHeight.and.returnValue(800);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (BOTTOM_SIDE_START)","suites":["MDCTooltipFoundation"],"line":2650,"updatePoint":{"line":2650,"column":73},"code":"  it('properly calculates tooltip with caret position (BOTTOM_SIDE_START)',\n     () => {\n       const anchorBoundingRect = {top: 20, left: 350, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 60};\n\n       const expectedTooltipTop =\n           (anchorBoundingRect.top + anchorBoundingRect.height / 2 -\n            (tooltipSize.height - numbers.CARET_INDENTATION -\n             CARET_WIDTH / 2)) -\n           parentBoundingRect.top;\n       const expectedTooltipLeft =\n           (anchorBoundingRect.left -\n            (tooltipSize.width + numbers.BOUNDED_ANCHOR_GAP +\n             CARET_HEIGHT / 2)) -\n           parentBoundingRect.left;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(850);\n       mockAdapter.getViewportHeight.and.returnValue(105);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (TOP_SIDE_END)","suites":["MDCTooltipFoundation"],"line":2685,"updatePoint":{"line":2685,"column":68},"code":"  it('properly calculates tooltip with caret position (TOP_SIDE_END)', () => {\n    const anchorBoundingRect = {top: 50, right: 35, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 60};\n\n    const expectedTooltipTop =\n        (anchorBoundingRect.top + anchorBoundingRect.height / 2 -\n         (numbers.CARET_INDENTATION + CARET_WIDTH / 2)) -\n        parentBoundingRect.top;\n    const expectedTooltipLeft =\n        (anchorBoundingRect.right + numbers.BOUNDED_ANCHOR_GAP +\n         CARET_HEIGHT / 2) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(95);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (CENTER_SIDE_END)","suites":["MDCTooltipFoundation"],"line":2717,"updatePoint":{"line":2717,"column":71},"code":"  it('properly calculates tooltip with caret position (CENTER_SIDE_END)',\n     () => {\n       const anchorBoundingRect = {top: 22, right: 35, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 60};\n\n       const expectedTooltipTop =\n           (anchorBoundingRect.top + anchorBoundingRect.height / 2 -\n            tooltipSize.height / 2) -\n           parentBoundingRect.top;\n       const expectedTooltipLeft =\n           (anchorBoundingRect.right + numbers.BOUNDED_ANCHOR_GAP +\n            CARET_HEIGHT / 2) -\n           parentBoundingRect.left;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(850);\n       mockAdapter.getViewportHeight.and.returnValue(95);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.isRTL.and.returnValue(false);\n       mockAdapter.getComputedStyleProperty.withArgs('width').and.returnValue(\n           RICH_TOOLTIP_WIDTH);\n       mockAdapter.getComputedStyleProperty.withArgs('height').and.returnValue(\n           RICH_TOOLTIP_HEIGHT);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret position (BOTTOM_SIDE_END)","suites":["MDCTooltipFoundation"],"line":2756,"updatePoint":{"line":2756,"column":71},"code":"  it('properly calculates tooltip with caret position (BOTTOM_SIDE_END)',\n     () => {\n       const anchorBoundingRect = {top: 20, right: 35, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 60};\n\n       const expectedTooltipTop =\n           (anchorBoundingRect.top + anchorBoundingRect.height / 2 -\n            (tooltipSize.height - numbers.CARET_INDENTATION -\n             CARET_WIDTH / 2)) -\n           parentBoundingRect.top;\n       const expectedTooltipLeft =\n           (anchorBoundingRect.right + numbers.BOUNDED_ANCHOR_GAP +\n            CARET_HEIGHT / 2) -\n           parentBoundingRect.left;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(850);\n       mockAdapter.getViewportHeight.and.returnValue(95);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret SIDE_END position in RTL","suites":["MDCTooltipFoundation"],"line":2791,"updatePoint":{"line":2791,"column":69},"code":"  it('properly calculates tooltip with caret SIDE_END position in RTL', () => {\n    const anchorBoundingRect = {top: 200, left: 350, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left -\n         (tooltipSize.width + numbers.BOUNDED_ANCHOR_GAP + CARET_HEIGHT / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.isRTL.and.returnValue(true);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n\n    foundation.setTooltipPosition(\n        {withCaretPos: PositionWithCaret.BOTTOM_SIDE_END});\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret SIDE_START position in RTL","suites":["MDCTooltipFoundation"],"line":2821,"updatePoint":{"line":2821,"column":71},"code":"  it('properly calculates tooltip with caret SIDE_START position in RTL',\n     () => {\n       const anchorBoundingRect = {top: 200, right: 400, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 30};\n\n       const expectedTooltipLeft =\n           (anchorBoundingRect.right + numbers.BOUNDED_ANCHOR_GAP +\n            CARET_HEIGHT / 2) -\n           parentBoundingRect.left;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(850);\n       mockAdapter.getViewportHeight.and.returnValue(800);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.isRTL.and.returnValue(true);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n\n       foundation.setTooltipPosition(\n           {withCaretPos: PositionWithCaret.BOTTOM_SIDE_START});\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret START position in RTL","suites":["MDCTooltipFoundation"],"line":2852,"updatePoint":{"line":2852,"column":66},"code":"  it('properly calculates tooltip with caret START position in RTL', () => {\n    const anchorBoundingRect = {top: 200, left: 350, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (tooltipSize.width - numbers.CARET_INDENTATION - CARET_WIDTH / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.isRTL.and.returnValue(true);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n\n    foundation.setTooltipPosition(\n        {withCaretPos: PositionWithCaret.ABOVE_START});\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"properly calculates tooltip with caret END position in RTL","suites":["MDCTooltipFoundation"],"line":2882,"updatePoint":{"line":2882,"column":64},"code":"  it('properly calculates tooltip with caret END position in RTL', () => {\n    const anchorBoundingRect = {top: 200, left: 350, width: 50, height: 35};\n    const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n    const tooltipSize = {width: 40, height: 30};\n    const expectedTooltipLeft =\n        (anchorBoundingRect.left + anchorBoundingRect.width / 2 -\n         (numbers.CARET_INDENTATION + CARET_WIDTH / 2)) -\n        parentBoundingRect.left;\n    const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n        MDCTooltipFoundation, {hasCaret: true});\n    mockAdapter.getViewportWidth.and.returnValue(850);\n    mockAdapter.getViewportHeight.and.returnValue(800);\n    mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n    mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n    mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n    mockAdapter.isRTL.and.returnValue(true);\n    mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n      width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n      height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n    });\n\n    foundation.setTooltipPosition({withCaretPos: PositionWithCaret.ABOVE_END});\n    foundation.show();\n\n    expect(mockAdapter.setStyleProperty)\n        .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"allows users to specify the position for tooltips with carets (TOP_SIDE_START instead of ABOVE_START)","suites":["MDCTooltipFoundation"],"line":2910,"updatePoint":{"line":2910,"column":107},"code":"  it('allows users to specify the position for tooltips with carets (TOP_SIDE_START instead of ABOVE_START)',\n     () => {\n       const anchorBoundingRect = {top: 200, left: 350, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 30};\n\n       const expectedTooltipTop =\n           (anchorBoundingRect.top + anchorBoundingRect.height / 2 -\n            (numbers.CARET_INDENTATION + CARET_WIDTH / 2)) -\n           parentBoundingRect.top;\n       const expectedTooltipLeft =\n           (anchorBoundingRect.left -\n            (tooltipSize.width + numbers.BOUNDED_ANCHOR_GAP +\n             CARET_HEIGHT / 2)) -\n           parentBoundingRect.left;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(850);\n       mockAdapter.getViewportHeight.and.returnValue(800);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n\n       foundation.setTooltipPosition(\n           {withCaretPos: PositionWithCaret.TOP_SIDE_START});\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"ignores user specification if positioning violates threshold for tooltips with caret (BELOW alignment instead of ABOVE)","suites":["MDCTooltipFoundation"],"line":2947,"updatePoint":{"line":2947,"column":125},"code":"  it('ignores user specification if positioning violates threshold for tooltips with caret (BELOW alignment instead of ABOVE)',\n     () => {\n       const anchorBoundingRect = {bottom: 35, left: 40, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 30};\n       const expectedTooltipTop =\n           (anchorBoundingRect.bottom + numbers.BOUNDED_ANCHOR_GAP +\n            CARET_HEIGHT / 2) -\n           parentBoundingRect.top;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(90);\n       mockAdapter.getViewportHeight.and.returnValue(800);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n\n       foundation.setTooltipPosition(\n           {withCaretPos: PositionWithCaret.ABOVE_START});\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"handles positioning for tooltip with caret when all possible positions are invalid (BELOW_END)","suites":["MDCTooltipFoundation"],"line":2976,"updatePoint":{"line":2976,"column":100},"code":"  it('handles positioning for tooltip with caret when all possible positions are invalid (BELOW_END)',\n     () => {\n       const anchorBoundingRect = {top: -135, left: -40, width: 50, height: 35};\n       const parentBoundingRect = {top: 0, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 30};\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(50);\n       mockAdapter.getViewportHeight.and.returnValue(50);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.isRTL.and.returnValue(false);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n       mockAdapter.getComputedStyleProperty.withArgs('width').and.returnValue(\n           RICH_TOOLTIP_WIDTH);\n       mockAdapter.getComputedStyleProperty.withArgs('height').and.returnValue(\n           RICH_TOOLTIP_HEIGHT);\n\n       foundation.setTooltipPosition(\n           {withCaretPos: PositionWithCaret.ABOVE_START});\n       foundation.show();\n\n       const expectedTooltipTop =\n           numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD + CARET_HEIGHT / 2;\n       const expectedTooltipLeft =\n           numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD + CARET_HEIGHT / 2;\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n\n       // Verify caret is styled for BELOW_END tooltip position\n       const styleValues =\n           CARET_POSITION_STYLES.get(PositionWithCaret.BELOW_END)!;\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(styleValues.yAlignment, styleValues.yAxisPx);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(styleValues.xAlignment, styleValues.xAxisPx);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(\n               'transform',\n               `rotate(${styleValues.rotation}deg) skewY(${\n                   styleValues.skew}deg) scaleX(${styleValues.scaleX})`);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(\n               'transform-origin',\n               `${styleValues.xAlignment} ${styleValues.yAlignment}`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"handles positioning for tooltip with caret when all possible positions are invalid (ABOVE_START)","suites":["MDCTooltipFoundation"],"line":3029,"updatePoint":{"line":3029,"column":102},"code":"  it('handles positioning for tooltip with caret when all possible positions are invalid (ABOVE_START)',\n     () => {\n       const anchorBoundingRect = {top: 135, left: 100, width: 50, height: 35};\n       const parentBoundingRect = {top: 0, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 30};\n       const viewportWidth = 50;\n       const viewportHeight = 50;\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(viewportWidth);\n       mockAdapter.getViewportHeight.and.returnValue(viewportHeight);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.isRTL.and.returnValue(false);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n       mockAdapter.getComputedStyleProperty.withArgs('width').and.returnValue(\n           RICH_TOOLTIP_WIDTH);\n       mockAdapter.getComputedStyleProperty.withArgs('height').and.returnValue(\n           RICH_TOOLTIP_HEIGHT);\n\n       foundation.show();\n\n       const expectedTooltipTop = viewportHeight -\n           (tooltipSize.height + numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD +\n            CARET_HEIGHT / 2);\n       const expectedTooltipLeft = viewportWidth -\n           (tooltipSize.width + numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD +\n            CARET_HEIGHT / 2);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n\n       // Verify caret is styled for ABOVE_START tooltip position\n       const styleValues =\n           CARET_POSITION_STYLES.get(PositionWithCaret.ABOVE_START)!;\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(styleValues.yAlignment, styleValues.yAxisPx);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(styleValues.xAlignment, styleValues.xAxisPx);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(\n               'transform',\n               `rotate(${styleValues.rotation}deg) skewY(${\n                   styleValues.skew}deg) scaleX(${styleValues.scaleX})`);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(\n               'transform-origin',\n               `${styleValues.xAlignment} ${styleValues.yAlignment}`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"handles positioning for tooltip with caret when all possible positions are invalid (in RTL)","suites":["MDCTooltipFoundation"],"line":3084,"updatePoint":{"line":3084,"column":97},"code":"  it('handles positioning for tooltip with caret when all possible positions are invalid (in RTL)',\n     () => {\n       const anchorBoundingRect = {top: -135, left: -40, width: 50, height: 35};\n       const parentBoundingRect = {top: 0, left: 0, width: 50, height: 30};\n       const tooltipSize = {width: 40, height: 30};\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.isRTL.and.returnValue(true);\n       mockAdapter.getViewportWidth.and.returnValue(50);\n       mockAdapter.getViewportHeight.and.returnValue(50);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n       mockAdapter.getComputedStyleProperty.withArgs('width').and.returnValue(\n           RICH_TOOLTIP_WIDTH);\n       mockAdapter.getComputedStyleProperty.withArgs('height').and.returnValue(\n           RICH_TOOLTIP_HEIGHT);\n\n       foundation.setTooltipPosition(\n           {withCaretPos: PositionWithCaret.ABOVE_START});\n       foundation.show();\n       const expectedTooltipTop =\n           numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD + CARET_HEIGHT / 2;\n       const expectedTooltipLeft =\n           numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD + CARET_HEIGHT / 2;\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', `${expectedTooltipTop}px`);\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', `${expectedTooltipLeft}px`);\n\n       // Verify caret is styled for BELOW_START tooltip position\n       const styleValues =\n           CARET_POSITION_STYLES_RTL.get(PositionWithCaret.BELOW_START)!;\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(styleValues.yAlignment, styleValues.yAxisPx);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(styleValues.xAlignment, styleValues.xAxisPx);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(\n               'transform',\n               `rotate(${styleValues.rotation}deg) skewY(${\n                   styleValues.skew}deg) scaleX(${styleValues.scaleX})`);\n       expect(mockAdapter.setTooltipCaretStyle)\n           .toHaveBeenCalledWith(\n               'transform-origin',\n               `${styleValues.xAlignment} ${styleValues.yAlignment}`);\n       expect(mockAdapter.setSurfaceAnimationStyleProperty)\n           .toHaveBeenCalledWith(\n               'transform-origin',\n               `${styleValues.xTransformOrigin} ${\n                   styleValues.yTransformOrigin}`);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"handles positioning for tooltip with caret when only one dimension is within the viewport threshold (ABOVE_CENTER)","suites":["MDCTooltipFoundation"],"line":3141,"updatePoint":{"line":3141,"column":120},"code":"  it('handles positioning for tooltip with caret when only one dimension is within the viewport threshold (ABOVE_CENTER)',\n     () => {\n       const anchorBoundingRect = {top: 200, left: 10, width: 50, height: 35};\n       const parentBoundingRect = {top: 5, left: 0};\n       const tooltipSize = {width: 40, height: 30};\n       const {foundation, mockAdapter} = setUpFoundationTestForRichTooltip(\n           MDCTooltipFoundation, {hasCaret: true});\n       mockAdapter.getViewportWidth.and.returnValue(60);\n       mockAdapter.getViewportHeight.and.returnValue(800);\n       mockAdapter.getTooltipSize.and.returnValue(tooltipSize);\n       mockAdapter.getAnchorBoundingRect.and.returnValue(anchorBoundingRect);\n       mockAdapter.getParentBoundingRect.and.returnValue(parentBoundingRect);\n       mockAdapter.getTooltipCaretBoundingRect.and.returnValue({\n         width: CARET_WIDTH * numbers.ANIMATION_SCALE,\n         height: CARET_HEIGHT * numbers.ANIMATION_SCALE\n       });\n       foundation.show();\n\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('top', '145px');\n       expect(mockAdapter.setStyleProperty)\n           .toHaveBeenCalledWith('left', '15px');\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#setShowDelay allows users to configure the delay prior to showing a tooltip","suites":["MDCTooltipFoundation"],"line":3165,"updatePoint":{"line":3165,"column":82},"code":"  it(`#setShowDelay allows users to configure the delay prior to showing a tooltip`,\n     () => {\n       const extraDelayMs = 20;\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.setShowDelay(numbers.SHOW_DELAY_MS + extraDelayMs);\n       foundation.handleAnchorMouseEnter();\n       expect((foundation as any).showTimeout).not.toEqual(null);\n\n       jasmine.clock().tick(numbers.SHOW_DELAY_MS);\n       expect((foundation as any).showTimeout).not.toEqual(null);\n       jasmine.clock().tick(extraDelayMs);\n       expectTooltipToHaveBeenShown(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#setHideDelay allows users to configure the delay prior to hiding a tooltip","suites":["MDCTooltipFoundation"],"line":3180,"updatePoint":{"line":3180,"column":81},"code":"  it(`#setHideDelay allows users to configure the delay prior to hiding a tooltip`,\n     () => {\n       const extraDelayMs = 20;\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       foundation.setHideDelay(numbers.HIDE_DELAY_MS + extraDelayMs);\n       foundation.show();\n       foundation.handleAnchorMouseLeave();\n       expect((foundation as any).hideTimeout).not.toEqual(null);\n\n       jasmine.clock().tick(numbers.HIDE_DELAY_MS);\n       expect((foundation as any).hideTimeout).not.toEqual(null);\n       jasmine.clock().tick(extraDelayMs);\n       expectTooltipToHaveBeenHidden(foundation, mockAdapter);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"#handleTransitionEnd after #hide does NOT sends notification that tooltip has been hidden if showTimeout is set","suites":["MDCTooltipFoundation"],"line":3196,"updatePoint":{"line":3196,"column":117},"code":"  it('#handleTransitionEnd after #hide does NOT sends notification that tooltip has been hidden if showTimeout is set',\n     async () => {\n       const {foundation, mockAdapter} =\n           setUpFoundationTest(MDCTooltipFoundation);\n       mockAdapter.hasClass.and.returnValue(true);\n\n       foundation.show();\n       foundation.hide();\n       foundation.show();\n       foundation.handleTransitionEnd();\n\n       expect(mockAdapter.hasClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.SHOWING);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.SHOWING_TRANSITION);\n       expect(mockAdapter.removeClass).toHaveBeenCalledWith(CssClasses.HIDE);\n       expect(mockAdapter.removeClass)\n           .toHaveBeenCalledWith(CssClasses.HIDE_TRANSITION);\n     });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-tooltip/test"},{"name":"attachTo initializes and returns an MDCTopAppBar instance","suites":["MDCTopAppBar"],"line":99,"updatePoint":{"line":99,"column":63},"code":"  it('attachTo initializes and returns an MDCTopAppBar instance', () => {\n    expect(MDCTopAppBar.attachTo(getFixture()) instanceof MDCTopAppBar)\n        .toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"constructor instantiates icon ripples for all icons","suites":["MDCTopAppBar"],"line":104,"updatePoint":{"line":104,"column":57},"code":"  it('constructor instantiates icon ripples for all icons', () => {\n    const rippleFactory = jasmine.createSpy('');\n    rippleFactory.withArgs(jasmine.anything())\n        .and.callFake(() => new FakeRipple());\n    setupTest(/** removeIcon */ false, rippleFactory);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"constructor does not instantiate ripple for nav icon when not present","suites":["MDCTopAppBar"],"line":111,"updatePoint":{"line":111,"column":75},"code":"  it('constructor does not instantiate ripple for nav icon when not present',\n     () => {\n       const rippleFactory = jasmine.createSpy('');\n       rippleFactory.withArgs(jasmine.anything())\n           .and.callFake(() => new FakeRipple());\n       setupTest(/** removeIcon */ true, rippleFactory);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"navIcon click event calls #foundation.handleNavigationClick","suites":["MDCTopAppBar"],"line":119,"updatePoint":{"line":119,"column":65},"code":"  it('navIcon click event calls #foundation.handleNavigationClick', () => {\n    const {root, mockFoundation} = setupTest();\n    const navIcon =\n        root.querySelector('.mdc-top-app-bar__navigation-icon') as HTMLElement;\n    emitEvent(navIcon, 'click');\n    expect(mockFoundation.handleNavigationClick).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"scroll event triggers #foundation.handleTargetScroll","suites":["MDCTopAppBar"],"line":127,"updatePoint":{"line":127,"column":58},"code":"  it('scroll event triggers #foundation.handleTargetScroll', () => {\n    const {mockFoundation} = setupTest();\n    emitEvent(window, 'scroll');\n    expect(mockFoundation.handleTargetScroll).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"resize event triggers #foundation.handleWindowResize","suites":["MDCTopAppBar"],"line":133,"updatePoint":{"line":133,"column":58},"code":"  it('resize event triggers #foundation.handleWindowResize', () => {\n    const {mockFoundation} = setupTest();\n    emitEvent(window, 'resize');\n    expect(mockFoundation.handleWindowResize).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"destroy destroys icon ripples","suites":["MDCTopAppBar"],"line":139,"updatePoint":{"line":139,"column":35},"code":"  it('destroy destroys icon ripples', () => {\n    const {component} = setupTest();\n    component.destroy();\n    for (const icon of (component as any).iconRipples) {\n      expect(icon.destroy).toHaveBeenCalled();\n    }\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"destroy destroys scroll event handler","suites":["MDCTopAppBar"],"line":147,"updatePoint":{"line":147,"column":43},"code":"  it('destroy destroys scroll event handler', () => {\n    const {mockFoundation, component} = setupTest();\n    component.destroy();\n    emitEvent(window, 'scroll');\n    expect(mockFoundation.handleTargetScroll).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"destroy destroys resize event handler","suites":["MDCTopAppBar"],"line":154,"updatePoint":{"line":154,"column":43},"code":"  it('destroy destroys resize event handler', () => {\n    const {mockFoundation, component} = setupTest();\n    component.destroy();\n    emitEvent(window, 'resize');\n    expect(mockFoundation.handleWindowResize).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"destroy destroys handleNavigationClick handler","suites":["MDCTopAppBar"],"line":161,"updatePoint":{"line":161,"column":52},"code":"  it('destroy destroys handleNavigationClick handler', () => {\n    const {mockFoundation, component, root} = setupTest();\n    const navIcon =\n        root.querySelector('.mdc-top-app-bar__navigation-icon') as HTMLElement;\n    component.destroy();\n    emitEvent(navIcon, 'resize');\n    expect(mockFoundation.handleNavigationClick).not.toHaveBeenCalled();\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"#setScrollTarget deregisters and registers scroll handler on provided target","suites":["MDCTopAppBar"],"line":170,"updatePoint":{"line":170,"column":82},"code":"  it('#setScrollTarget deregisters and registers scroll handler on provided target',\n     () => {\n       const {component} = setupTest();\n       const fakeTarget1 = document.createElement('div');\n       const fakeTarget2 = document.createElement('div');\n\n       component.setScrollTarget(fakeTarget1);\n       expect((component as any).scrollTarget).toEqual(fakeTarget1);\n\n       component.setScrollTarget(fakeTarget2);\n\n       expect((component as any).scrollTarget).toEqual(fakeTarget2);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"getDefaultFoundation returns the appropriate foundation for default","suites":["MDCTopAppBar"],"line":184,"updatePoint":{"line":184,"column":73},"code":"  it('getDefaultFoundation returns the appropriate foundation for default',\n     () => {\n       const fixture = getFixture();\n       const root = fixture.querySelector(strings.ROOT_SELECTOR) as HTMLElement;\n       const component = new MDCTopAppBar(\n           root, undefined, () => new FakeRipple());\n       expect((component as any).foundation instanceof MDCTopAppBarFoundation)\n           .toBe(true);\n       expect(\n           (component as any).foundation instanceof\n           MDCShortTopAppBarFoundation)\n           .toBe(false);\n       expect(\n           (component as any).foundation instanceof\n           MDCFixedTopAppBarFoundation)\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"getDefaultFoundation returns the appropriate foundation for fixed","suites":["MDCTopAppBar"],"line":202,"updatePoint":{"line":202,"column":71},"code":"  it('getDefaultFoundation returns the appropriate foundation for fixed',\n     () => {\n       const fixture = getFixture();\n       const root = fixture.querySelector(strings.ROOT_SELECTOR) as HTMLElement;\n       root.classList.add(MDCTopAppBarFoundation.cssClasses.FIXED_CLASS);\n       const component = new MDCTopAppBar(\n           root, undefined, () => new FakeRipple());\n       expect(\n           (component as any).foundation instanceof\n           MDCShortTopAppBarFoundation)\n           .toBe(false);\n       expect(\n           (component as any).foundation instanceof\n           MDCFixedTopAppBarFoundation)\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"getDefaultFoundation returns the appropriate foundation for short","suites":["MDCTopAppBar"],"line":219,"updatePoint":{"line":219,"column":71},"code":"  it('getDefaultFoundation returns the appropriate foundation for short',\n     () => {\n       const fixture = getFixture();\n       const root = fixture.querySelector(strings.ROOT_SELECTOR) as HTMLElement;\n       root.classList.add(MDCTopAppBarFoundation.cssClasses.SHORT_CLASS);\n       const component = new MDCTopAppBar(\n           root, undefined, () => new FakeRipple());\n       expect(\n           (component as any).foundation instanceof\n           MDCShortTopAppBarFoundation)\n           .toBe(true);\n       expect(\n           (component as any).foundation instanceof\n           MDCFixedTopAppBarFoundation)\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#hasClass returns true if the root element has specified class","suites":["MDCTopAppBar"],"line":236,"updatePoint":{"line":236,"column":75},"code":"  it('adapter#hasClass returns true if the root element has specified class',\n     () => {\n       const {root, component} = setupTest();\n       root.classList.add('foo');\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasClass('foo'))\n           .toBe(true);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#hasClass returns false if the root element does not have specified class","suites":["MDCTopAppBar"],"line":245,"updatePoint":{"line":245,"column":86},"code":"  it('adapter#hasClass returns false if the root element does not have specified class',\n     () => {\n       const {component} = setupTest();\n       expect(\n           (component.getDefaultFoundation() as any).adapter.hasClass('foo'))\n           .toBe(false);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#addClass adds a class to the root element","suites":["MDCTopAppBar"],"line":253,"updatePoint":{"line":253,"column":55},"code":"  it('adapter#addClass adds a class to the root element', () => {\n    const {root, component} = setupTest();\n    (component.getDefaultFoundation() as any).adapter.addClass('foo');\n    expect(root.classList.contains('foo')).toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#removeClass removes a class from the root element","suites":["MDCTopAppBar"],"line":259,"updatePoint":{"line":259,"column":63},"code":"  it('adapter#removeClass removes a class from the root element', () => {\n    const {root, component} = setupTest();\n    root.classList.add('foo');\n    (component.getDefaultFoundation() as any).adapter.removeClass('foo');\n    expect(root.classList.contains('foo')).toBe(false);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#setStyle sets a style attribute on the root element","suites":["MDCTopAppBar"],"line":266,"updatePoint":{"line":266,"column":65},"code":"  it('adapter#setStyle sets a style attribute on the root element', () => {\n    const {root, component} = setupTest();\n    expect(root.style.getPropertyValue('top') === '1px').toBe(false);\n    (component.getDefaultFoundation() as any).adapter.setStyle('top', '1px');\n    expect(root.style.getPropertyValue('top') === '1px').toBe(true);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#getViewportScrollY returns scroll distance","suites":["MDCTopAppBar"],"line":273,"updatePoint":{"line":273,"column":56},"code":"  it('adapter#getViewportScrollY returns scroll distance', () => {\n    const {component} = setupTest();\n    expect(\n        (component.getDefaultFoundation() as any).adapter.getViewportScrollY())\n        .toEqual(window.pageYOffset);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#getViewportScrollY returns scroll distance when scrollTarget is not window","suites":["MDCTopAppBar"],"line":280,"updatePoint":{"line":280,"column":88},"code":"  it('adapter#getViewportScrollY returns scroll distance when scrollTarget is not window',\n     () => {\n       const {component} = setupTest();\n       const mockContent = {addEventListener: () => {}, scrollTop: 20} as any;\n       component.setScrollTarget(mockContent);\n       expect((component.getDefaultFoundation() as any)\n                  .adapter.getViewportScrollY())\n           .toEqual(mockContent.scrollTop);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#getTotalActionItems returns the number of action items on the opposite side of the menu","suites":["MDCTopAppBar"],"line":290,"updatePoint":{"line":290,"column":101},"code":"  it('adapter#getTotalActionItems returns the number of action items on the opposite side of the menu',\n     () => {\n       const {root, component} = setupTest();\n       const adapterReturn = (component.getDefaultFoundation() as any)\n                                 .adapter.getTotalActionItems();\n       const actual =\n           root.querySelectorAll(strings.ACTION_ITEM_SELECTOR).length;\n       expect(adapterReturn).toEqual(actual);\n     });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"adapter#notifyNavigationIconClicked emits the NAVIGATION_EVENT","suites":["MDCTopAppBar"],"line":300,"updatePoint":{"line":300,"column":68},"code":"  it('adapter#notifyNavigationIconClicked emits the NAVIGATION_EVENT', () => {\n    const {component} = setupTest();\n    const callback = jasmine.createSpy('');\n    component.listen(strings.NAVIGATION_EVENT, callback);\n    (component.getDefaultFoundation() as any)\n        .adapter.notifyNavigationIconClicked();\n    expect(callback).toHaveBeenCalledWith(jasmine.any(Object));\n    expect(callback).toHaveBeenCalledTimes(1);\n  });","file":"component.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"exports strings","suites":["MDCTopAppBarBaseFoundation"],"line":30,"updatePoint":{"line":30,"column":21},"code":"  it('exports strings', () => {\n    expect('strings' in MDCTopAppBarBaseFoundation).toBe(true);\n    expect(MDCTopAppBarBaseFoundation.strings).toEqual(strings);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"exports cssClasses","suites":["MDCTopAppBarBaseFoundation"],"line":35,"updatePoint":{"line":35,"column":24},"code":"  it('exports cssClasses', () => {\n    expect('cssClasses' in MDCTopAppBarBaseFoundation).toBe(true);\n    expect(MDCTopAppBarBaseFoundation.cssClasses).toEqual(cssClasses);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"exports numbers","suites":["MDCTopAppBarBaseFoundation"],"line":40,"updatePoint":{"line":40,"column":21},"code":"  it('exports numbers', () => {\n    expect('numbers' in MDCTopAppBarBaseFoundation).toBe(true);\n    expect(MDCTopAppBarBaseFoundation.numbers).toEqual(numbers);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"defaultAdapter returns a complete adapter implementation","suites":["MDCTopAppBarBaseFoundation"],"line":45,"updatePoint":{"line":45,"column":62},"code":"  it('defaultAdapter returns a complete adapter implementation', () => {\n    verifyDefaultAdapter(MDCTopAppBarBaseFoundation, [\n      'hasClass',\n      'addClass',\n      'removeClass',\n      'setStyle',\n      'getTopAppBarHeight',\n      'notifyNavigationIconClicked',\n      'getViewportScrollY',\n      'getTotalActionItems',\n    ]);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"#handleNavigationClick emits a navigation event","suites":["MDCTopAppBarBaseFoundation"],"line":64,"updatePoint":{"line":64,"column":53},"code":"  it('#handleNavigationClick emits a navigation event', () => {\n    const {foundation, mockAdapter} = setupTest();\n    foundation.handleNavigationClick();\n    expect(mockAdapter.notifyNavigationIconClicked).toHaveBeenCalledTimes(1);\n  });","file":"foundation.test.ts","skipped":false,"dir":"packages/mdc-top-app-bar/test"},{"name":"should allow global variable overrides with @import","suites":["mdc-typography.scss"],"line":34,"updatePoint":{"line":34,"column":57},"code":"  it('should allow global variable overrides with @import', () => {\n    const css = fs.readFileSync(\n                      path.join(__dirname, 'global-variables.test.css'), 'utf8')\n                    .trim();\n    const headline1Start = css.indexOf('.mdc-typography--headline1 {');\n    const headline1End = css.indexOf('}', headline1Start);\n    const headline1Css = css.substring(headline1Start, headline1End);\n    expect(headline1Css.includes('font-family: Arial'))\n        .toBe(true, '$mdc-typography-font-family should override');\n    expect(headline1Css.includes('font-size: 1rem'))\n        .toBe(\n            true, '$mdc-typography-styles-headline1-font-size should override');\n  });","file":"mdc-typography.scss.test.ts","skipped":false,"dir":"packages/mdc-typography/test"}]}