{"repo":"acdlite/recompose","url":"https://github.com/acdlite/recompose","branch":"master","configs":[{"lang":"js","dir":"src/packages/recompose/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"branch tests props and applies one of two HoCs, for true and false","suites":[],"updatePoint":{"line":5,"column":72},"line":5,"code":"test('branch tests props and applies one of two HoCs, for true and false', () => {\n  const SayMyName = compose(withState('isBad', 'updateIsBad', false), branch(props => props.isBad, withProps({\n    name: 'Heisenberg'\n  }), withProps({\n    name: 'Walter'\n  })))(({\n    isBad,\n    name,\n    updateIsBad\n  }) => /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isBad\"\n  }, isBad ? 'true' : 'false'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name\"\n  }, name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => updateIsBad(b => !b)\n  }, \"Toggle\")));\n  expect(SayMyName.displayName).toBe('withState(branch(Component))');\n  const wrapper = mount( /*#__PURE__*/React.createElement(SayMyName, null));\n\n  const getIsBad = () => wrapper.find('.isBad').text();\n\n  const getName = () => wrapper.find('.name').text();\n\n  const toggle = wrapper.find('button');\n  expect(getIsBad()).toBe('false');\n  expect(getName()).toBe('Walter');\n  toggle.simulate('click');\n  expect(getIsBad()).toBe('true');\n  expect(getName()).toBe('Heisenberg');\n});","file":"branch-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"branch defaults third argument to identity function","suites":[],"updatePoint":{"line":35,"column":57},"line":35,"code":"test('branch defaults third argument to identity function', () => {\n  const Left = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left\"\n  }, \"Left\");\n\n  const Right = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right\"\n  }, \"Right\");\n\n  const BranchedComponent = branch(() => false, () => props => /*#__PURE__*/React.createElement(Left, props))(Right);\n  const wrapper = mount( /*#__PURE__*/React.createElement(BranchedComponent, null));\n  const right = wrapper.find('.right').text();\n  expect(right).toBe('Right');\n});","file":"branch-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"branch third argument should not cause console error","suites":[],"updatePoint":{"line":49,"column":58},"line":49,"code":"test('branch third argument should not cause console error', () => {\n  const error = sinon.stub(console, 'error');\n\n  const Component = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right\"\n  }, \"Component\");\n\n  const BranchedComponent = branch(() => false, v => v, v => v)(Component);\n  mount( /*#__PURE__*/React.createElement(BranchedComponent, null));\n  expect(error.called).toBe(false);\n  /* eslint-disable */\n\n  error.restore();\n  /* eslint-enable */\n});","file":"branch-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"componentFromProp creates a component that takes a component as a prop and renders it with the rest of the props","suites":[],"updatePoint":{"line":4,"column":118},"line":4,"code":"test('componentFromProp creates a component that takes a component as a prop and renders it with the rest of the props', () => {\n  const Container = componentFromProp('component');\n  expect(Container.displayName).toBe('componentFromProp(component)');\n\n  const Component = ({\n    pass\n  }) => /*#__PURE__*/React.createElement(\"div\", null, \"Pass: \", pass);\n\n  const wrapper = mount( /*#__PURE__*/React.createElement(Container, {\n    component: Component,\n    pass: \"through\"\n  }));\n  const div = wrapper.find('div');\n  expect(div.text()).toBe('Pass: through');\n});","file":"componentFromProp-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"componentFromStream creates a component from a prop stream transformation","suites":[],"updatePoint":{"line":8,"column":79},"line":8,"code":"test('componentFromStream creates a component from a prop stream transformation', () => {\n  const Double = componentFromStream(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n  const wrapper = mount( /*#__PURE__*/React.createElement(Double, {\n    n: 112\n  }));\n  const div = wrapper.find('div');\n  expect(div.text()).toBe('224');\n  wrapper.setProps({\n    n: 358\n  });\n  expect(div.text()).toBe('716');\n});","file":"componentFromStream-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"componentFromStream unsubscribes from stream before unmounting","suites":[],"updatePoint":{"line":22,"column":68},"line":22,"code":"test('componentFromStream unsubscribes from stream before unmounting', () => {\n  let subscriptions = 0;\n  const vdom$ = new Observable(observer => {\n    subscriptions += 1;\n    observer.next( /*#__PURE__*/React.createElement(\"div\", null));\n    return {\n      unsubscribe() {\n        subscriptions -= 1;\n      }\n\n    };\n  });\n  const Div = componentFromStream(() => vdom$);\n  const wrapper = mount( /*#__PURE__*/React.createElement(Div, null));\n  expect(subscriptions).toBe(1);\n  wrapper.unmount();\n  expect(subscriptions).toBe(0);\n});","file":"componentFromStream-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"componentFromStream renders nothing until the stream emits a value","suites":[],"updatePoint":{"line":40,"column":72},"line":40,"code":"test('componentFromStream renders nothing until the stream emits a value', () => {\n  const vdom$ = new Subject();\n  const Div = componentFromStream(() => vdom$.mapTo( /*#__PURE__*/React.createElement(\"div\", null)));\n  const wrapper = mount( /*#__PURE__*/React.createElement(Div, null));\n  expect(wrapper.find('div').length).toBe(0);\n  vdom$.next();\n  wrapper.update();\n  expect(wrapper.find('div').length).toBe(1);\n});","file":"componentFromStream-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"handler multiple observers of props stream","suites":[],"updatePoint":{"line":49,"column":48},"line":49,"code":"test('handler multiple observers of props stream', () => {\n  const Other = () => /*#__PURE__*/React.createElement(\"div\", null);\n\n  const Div = componentFromStream(props$ => // Adds three observers to props stream\n  props$.combineLatest(props$, props$, props1 => /*#__PURE__*/React.createElement(Other, props1)));\n  const wrapper = mount( /*#__PURE__*/React.createElement(Div, {\n    \"data-value\": 1\n  }));\n  const div = wrapper.find(Other);\n  expect(div.prop('data-value')).toBe(1);\n  wrapper.setProps({\n    'data-value': 2\n  });\n  wrapper.update();\n  const div2 = wrapper.find(Other);\n  expect(div2.prop('data-value')).toBe(2);\n});","file":"componentFromStream-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"complete props stream before unmounting","suites":[],"updatePoint":{"line":66,"column":45},"line":66,"code":"test('complete props stream before unmounting', () => {\n  let counter = 0;\n  const Div = componentFromStream(props$ => {\n    const first$ = props$.first().do(() => {\n      counter += 1;\n    });\n    const last$ = props$.last().do(() => {\n      counter -= 1;\n    }).startWith(null);\n    return props$.combineLatest(first$, last$, props1 => /*#__PURE__*/React.createElement(\"div\", props1));\n  });\n  const wrapper = mount( /*#__PURE__*/React.createElement(Div, null));\n  expect(counter).toBe(1);\n  expect(wrapper.find('div').length).toBe(1);\n  wrapper.unmount();\n  expect(counter).toBe(0);\n});","file":"componentFromStream-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"completed props stream should throw an exception","suites":[],"updatePoint":{"line":83,"column":54},"line":83,"code":"test('completed props stream should throw an exception', () => {\n  const Div = componentFromStream(props$ => {\n    const first$ = props$.filter(() => false).first().startWith(null);\n    return props$.combineLatest(first$, props1 => /*#__PURE__*/React.createElement(\"div\", props1));\n  });\n  const wrapper = mount( /*#__PURE__*/React.createElement(Div, null));\n  expect(wrapper.find('div').length).toBe(1);\n  const error = sinon.stub(console, 'error');\n  expect(() => wrapper.unmount()).toThrowError(/no elements in sequence/);\n  expect(error.called).toBe(true);\n});","file":"componentFromStream-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"componentFromStreamWithConfig creates a stream with the correct stream type.","suites":[],"updatePoint":{"line":8,"column":82},"line":8,"code":"test('componentFromStreamWithConfig creates a stream with the correct stream type.', () => {\n  const MostComponent = componentFromStreamWithConfig(mostConfig)(props$ => {\n    expect(props$ instanceof MostStream).toBe(true);\n    return props$.map(v => /*#__PURE__*/React.createElement(\"div\", null, String(v)));\n  });\n  mount( /*#__PURE__*/React.createElement(MostComponent, null));\n  const RXJSComponent = componentFromStreamWithConfig(rxjsConfig)(props$ => {\n    expect(props$ instanceof Observable).toBe(true);\n    return props$.map(v => /*#__PURE__*/React.createElement(\"div\", null, String(v)));\n  });\n  mount( /*#__PURE__*/React.createElement(RXJSComponent, null));\n});","file":"componentFromStreamWithConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"compose composes from right to left","suites":[],"updatePoint":{"line":2,"column":41},"line":2,"code":"test('compose composes from right to left', () => {\n  const double = x => x * 2;\n\n  const square = x => x * x;\n\n  expect(compose(square)(5)).toBe(25);\n  expect(compose(square, double)(5)).toBe(100);\n  expect(compose(double, square, double)(5)).toBe(200);\n});","file":"compose-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"compose can be seeded with multiple arguments","suites":[],"updatePoint":{"line":11,"column":51},"line":11,"code":"test('compose can be seeded with multiple arguments', () => {\n  const square = x => x * x;\n\n  const add = (x, y) => x + y;\n\n  expect(compose(square, add)(1, 2)).toBe(9);\n});","file":"compose-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"compose returns the identity function if given no arguments","suites":[],"updatePoint":{"line":18,"column":65},"line":18,"code":"test('compose returns the identity function if given no arguments', () => {\n  expect(compose()(1, 2)).toBe(1);\n  expect(compose()(3)).toBe(3);\n  expect(compose()()).toBe(undefined);\n});","file":"compose-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"compose returns the first function if given only one","suites":[],"updatePoint":{"line":23,"column":58},"line":23,"code":"test('compose returns the first function if given only one', () => {\n  const fn = x => x * x;\n\n  expect(compose(fn)(3)).toBe(fn(3));\n});","file":"compose-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"createEventHandler creates an event handler and a corresponding stream","suites":[],"updatePoint":{"line":2,"column":76},"line":2,"code":"test('createEventHandler creates an event handler and a corresponding stream', () => {\n  const result = [];\n  const {\n    stream,\n    handler\n  } = createEventHandler();\n  const subscription = stream.subscribe({\n    next: v => result.push(v)\n  });\n  handler(1);\n  handler(2);\n  handler(3);\n  subscription.unsubscribe();\n  expect(result).toEqual([1, 2, 3]);\n});","file":"createEventHandler-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"handles multiple subscribers","suites":[],"updatePoint":{"line":17,"column":34},"line":17,"code":"test('handles multiple subscribers', () => {\n  const result1 = [];\n  const result2 = [];\n  const {\n    handler,\n    stream\n  } = createEventHandler();\n  const subscription1 = stream.subscribe({\n    next: v => result1.push(v)\n  });\n  const subscription2 = stream.subscribe({\n    next: v => result2.push(v)\n  });\n  handler(1);\n  handler(2);\n  handler(3);\n  subscription1.unsubscribe();\n  subscription2.unsubscribe();\n  expect(result1).toEqual([1, 2, 3]);\n  expect(result2).toEqual([1, 2, 3]);\n});","file":"createEventHandler-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"createSink creates a React component that fires a callback when receiving new props","suites":[],"updatePoint":{"line":5,"column":89},"line":5,"code":"test('createSink creates a React component that fires a callback when receiving new props', () => {\n  const spy = sinon.spy();\n  const Sink = createSink(spy);\n  const Counter = compose(withState('counter', 'updateCounter', 0), mapProps(({\n    updateCounter,\n    ...rest\n  }) => ({\n    increment: () => updateCounter(n => n + 1),\n    ...rest\n  })))(Sink);\n  mount( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Counter, null)));\n  const {\n    increment\n  } = spy.lastCall.args[0];\n\n  const getCounter = () => spy.lastCall.args[0].counter;\n\n  expect(getCounter()).toBe(0);\n  increment();\n  expect(getCounter()).toBe(1);\n  increment();\n  expect(getCounter()).toBe(2);\n});","file":"createSink-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"defaultProps passes additional props to base component","suites":[],"updatePoint":{"line":4,"column":60},"line":4,"code":"test('defaultProps passes additional props to base component', () => {\n  const DoReMi = defaultProps({\n    'data-so': 'do',\n    'data-la': 'fa'\n  })('div');\n  expect(DoReMi.displayName).toBe('defaultProps(div)');\n  const div = shallow( /*#__PURE__*/React.createElement(DoReMi, null)).find('div');\n  expect(div.equals( /*#__PURE__*/React.createElement(\"div\", {\n    \"data-so\": \"do\",\n    \"data-la\": \"fa\"\n  }))).toBe(true);\n});","file":"defaultProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"defaultProps has lower precendence than props from owner","suites":[],"updatePoint":{"line":16,"column":62},"line":16,"code":"test('defaultProps has lower precendence than props from owner', () => {\n  const DoReMi = defaultProps({\n    'data-so': 'do',\n    'data-la': 'fa'\n  })('div');\n  expect(DoReMi.displayName).toBe('defaultProps(div)');\n  const div = shallow( /*#__PURE__*/React.createElement(DoReMi, {\n    \"data-la\": \"ti\"\n  })).find('div');\n  expect(div.equals( /*#__PURE__*/React.createElement(\"div\", {\n    \"data-so\": \"do\",\n    \"data-la\": \"ti\"\n  }))).toBe(true);\n});","file":"defaultProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"defaultProps overrides undefined owner props","suites":[],"updatePoint":{"line":30,"column":50},"line":30,"code":"test('defaultProps overrides undefined owner props', () => {\n  const DoReMi = defaultProps({\n    'data-so': 'do',\n    'data-la': 'fa'\n  })('div');\n  expect(DoReMi.displayName).toBe('defaultProps(div)');\n  const div = shallow( /*#__PURE__*/React.createElement(DoReMi, {\n    \"data-la\": undefined\n  })).find('div');\n  expect(div.equals( /*#__PURE__*/React.createElement(\"div\", {\n    \"data-so\": \"do\",\n    \"data-la\": \"fa\"\n  }))).toBe(true);\n});","file":"defaultProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"flattenProps flattens an object prop and spreads it into the top-level props object","suites":[],"updatePoint":{"line":4,"column":89},"line":4,"code":"test('flattenProps flattens an object prop and spreads it into the top-level props object', () => {\n  const Counter = flattenProp('data-state')('div');\n  expect(Counter.displayName).toBe('flattenProp(div)');\n  const wrapper = shallow( /*#__PURE__*/React.createElement(Counter, {\n    \"data-pass\": \"through\",\n    \"data-state\": {\n      'data-counter': 1\n    }\n  }));\n  expect(wrapper.equals( /*#__PURE__*/React.createElement(\"div\", {\n    \"data-pass\": \"through\",\n    \"data-state\": {\n      'data-counter': 1\n    },\n    \"data-counter\": 1\n  }))).toBe(true);\n  wrapper.setProps({\n    'data-pass': 'through',\n    'data-state': {\n      'data-state': 1\n    }\n  });\n  expect(wrapper.equals( /*#__PURE__*/React.createElement(\"div\", {\n    \"data-pass\": \"through\",\n    \"data-state\": 1\n  }))).toBe(true);\n});","file":"flattenProp-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"fromRenderProps passes additional props to base component","suites":[],"updatePoint":{"line":4,"column":63},"line":4,"code":"test('fromRenderProps passes additional props to base component', () => {\n  const RenderPropsComponent = ({\n    children\n  }) => children({\n    i18n: 'zh-TW'\n  });\n\n  const EnhancedComponent = fromRenderProps(RenderPropsComponent, ({\n    i18n\n  }) => ({\n    i18n\n  }))('div');\n  expect(EnhancedComponent.displayName).toBe('fromRenderProps(div)');\n  const div = mount( /*#__PURE__*/React.createElement(EnhancedComponent, null));\n  expect(div.html()).toBe(`<div i18n=\"zh-TW\"></div>`);\n});","file":"fromRenderProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"fromRenderProps passes additional props to base component with custom renderPropName","suites":[],"updatePoint":{"line":20,"column":90},"line":20,"code":"test('fromRenderProps passes additional props to base component with custom renderPropName', () => {\n  const RenderPropsComponent = ({\n    render\n  }) => render({\n    i18n: 'zh-TW'\n  });\n\n  const EnhancedComponent = fromRenderProps(RenderPropsComponent, ({\n    i18n\n  }) => ({\n    i18n\n  }), 'render')('div');\n  expect(EnhancedComponent.displayName).toBe('fromRenderProps(div)');\n  const div = mount( /*#__PURE__*/React.createElement(EnhancedComponent, null));\n  expect(div.html()).toBe(`<div i18n=\"zh-TW\"></div>`);\n});","file":"fromRenderProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"fromRenderProps passes additional props to base component with 2 RenderPropsComponents","suites":[],"updatePoint":{"line":36,"column":92},"line":36,"code":"test('fromRenderProps passes additional props to base component with 2 RenderPropsComponents', () => {\n  const RenderPropsComponent1 = ({\n    children\n  }) => children({\n    theme: 'dark'\n  });\n\n  const RenderPropsComponent2 = ({\n    render\n  }) => render({\n    i18n: 'zh-TW'\n  });\n\n  const EnhancedComponent = compose(fromRenderProps(RenderPropsComponent1, ({\n    theme\n  }) => ({\n    theme\n  }), 'children'), fromRenderProps(RenderPropsComponent2, ({\n    i18n\n  }) => ({\n    locale: i18n\n  }), 'render'))('div');\n  expect(EnhancedComponent.displayName).toBe('fromRenderProps(fromRenderProps(div))');\n  const div = mount( /*#__PURE__*/React.createElement(EnhancedComponent, null));\n  expect(div.html()).toBe(`<div theme=\"dark\" locale=\"zh-TW\"></div>`);\n});","file":"fromRenderProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"fromRenderProps meet toRenderProps","suites":[],"updatePoint":{"line":62,"column":40},"line":62,"code":"test('fromRenderProps meet toRenderProps', () => {\n  const RenderPropsComponent = toRenderProps(defaultProps({\n    foo1: 'bar1',\n    foo2: 'bar2'\n  }));\n  const EnhancedComponent = fromRenderProps(RenderPropsComponent, ({\n    foo1\n  }) => ({\n    foo: foo1\n  }))('div');\n  expect(EnhancedComponent.displayName).toBe('fromRenderProps(div)');\n  const div = mount( /*#__PURE__*/React.createElement(EnhancedComponent, null));\n  expect(div.html()).toBe(`<div foo=\"bar1\"></div>`);\n});","file":"fromRenderProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"fromRenderProps with multiple arguments #693","suites":[],"updatePoint":{"line":76,"column":50},"line":76,"code":"test('fromRenderProps with multiple arguments #693', () => {\n  const RenderPropsComponent = ({\n    children\n  }) => children({\n    theme: 'dark'\n  }, {\n    data: 'data'\n  });\n\n  const EnhancedComponent = compose(fromRenderProps(RenderPropsComponent, ({\n    theme\n  }, {\n    data\n  }) => ({\n    theme,\n    data\n  }), 'children'))('div');\n  expect(EnhancedComponent.displayName).toBe('fromRenderProps(div)');\n  const div = mount( /*#__PURE__*/React.createElement(EnhancedComponent, null));\n  expect(div.html()).toBe(`<div theme=\"dark\" data=\"data\"></div>`);\n});","file":"fromRenderProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"getContext works","suites":[],"updatePoint":{"line":3,"column":22},"line":3,"code":"test('getContext works', () => expect(true).toBe(true));","file":"getContext-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"getDisplayName gets the display name of a React component","suites":[],"updatePoint":{"line":3,"column":63},"line":3,"code":"test('getDisplayName gets the display name of a React component', () => {\n  class SomeComponent extends React.Component {\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n\n  }\n\n  class SomeOtherComponent extends React.Component {\n    static displayName = 'CustomDisplayName';\n\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n\n  }\n\n  function YetAnotherComponent() {\n    return /*#__PURE__*/React.createElement(\"div\", null);\n  }\n\n  expect(getDisplayName(SomeComponent)).toBe('SomeComponent');\n  expect(getDisplayName(SomeOtherComponent)).toBe('CustomDisplayName');\n  expect(getDisplayName(YetAnotherComponent)).toBe('YetAnotherComponent');\n  expect(getDisplayName(() => /*#__PURE__*/React.createElement(\"div\", null))).toBe('Component');\n  expect(getDisplayName('div')).toBe('div');\n});","file":"getDisplayName-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"copies non-React static properties from base component to new component","suites":[],"updatePoint":{"line":5,"column":77},"line":5,"code":"test('copies non-React static properties from base component to new component', () => {\n  const BaseComponent = sinon.spy(() => null);\n\n  BaseComponent.foo = () => {};\n\n  const EnhancedComponent = hoistStatics(mapProps(props => ({\n    n: props.n * 5\n  })))(BaseComponent);\n  expect(EnhancedComponent.foo).toBe(BaseComponent.foo);\n  mount( /*#__PURE__*/React.createElement(EnhancedComponent, {\n    n: 3\n  }));\n  expect(BaseComponent.firstCall.args[0].n).toBe(15);\n});","file":"hoistStatics-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"does not copy blacklisted static properties to new component ","suites":[],"updatePoint":{"line":19,"column":67},"line":19,"code":"test('does not copy blacklisted static properties to new component ', () => {\n  const BaseComponent = sinon.spy(() => null);\n\n  BaseComponent.foo = () => {};\n\n  BaseComponent.bar = () => {};\n\n  const EnhancedComponent = hoistStatics(comp => /*#__PURE__*/createFactory(comp), {\n    bar: true\n  } // Blacklist\n  )(BaseComponent);\n  expect(EnhancedComponent.foo).toBe(BaseComponent.foo);\n  expect(EnhancedComponent.bar).toBe(undefined);\n});","file":"hoistStatics-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"isClassComponent returns false for functions","suites":[],"updatePoint":{"line":4,"column":50},"line":4,"code":"test('isClassComponent returns false for functions', () => {\n  const Foo = () => /*#__PURE__*/React.createElement(\"div\", null);\n\n  expect(isClassComponent(Foo)).toBe(false);\n});","file":"isClassComponent-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"isClassComponent returns true for React component classes","suites":[],"updatePoint":{"line":9,"column":63},"line":9,"code":"test('isClassComponent returns true for React component classes', () => {\n  class Foo extends Component {\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n\n  }\n  /* eslint-disable react/prefer-es6-class */\n\n\n  const Bar = createReactClass({\n    displayName: \"Bar\",\n\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n\n  });\n  /* eslint-enable react/prefer-es6-class */\n\n  expect(isClassComponent(Foo)).toBe(true);\n  expect(isClassComponent(Bar)).toBe(true);\n});","file":"isClassComponent-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"lifecycle is a higher-order component version of React.Component","suites":[],"updatePoint":{"line":4,"column":70},"line":4,"code":"test('lifecycle is a higher-order component version of React.Component', () => {\n  const enhance = lifecycle({\n    componentWillMount() {\n      this.setState({\n        'data-bar': 'baz'\n      });\n    }\n\n  });\n  const Div = enhance('div');\n  expect(Div.displayName).toBe('lifecycle(div)');\n  const div = mount( /*#__PURE__*/React.createElement(Div, {\n    \"data-foo\": \"bar\"\n  })).find('div');\n  expect(div.prop('data-foo')).toBe('bar');\n  expect(div.prop('data-bar')).toBe('baz');\n});","file":"lifecycle-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"mapProps maps owner props to child props","suites":[],"updatePoint":{"line":5,"column":46},"line":5,"code":"test('mapProps maps owner props to child props', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const StringConcat = compose(withState('strings', 'updateStrings', ['do', 're', 'mi']), mapProps(({\n    strings,\n    ...rest\n  }) => ({ ...rest,\n    string: strings.join('')\n  })))(component);\n  expect(StringConcat.displayName).toBe('withState(mapProps(component))');\n  mount( /*#__PURE__*/React.createElement(StringConcat, null));\n  const {\n    updateStrings\n  } = component.firstCall.args[0];\n  updateStrings(strings => [...strings, 'fa']);\n  expect(component.firstCall.args[0].string).toBe('doremi');\n  expect(component.secondCall.args[0].string).toBe('doremifa');\n});","file":"mapProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"mapPropsStream creates a higher-order component from a stream","suites":[],"updatePoint":{"line":8,"column":67},"line":8,"code":"test('mapPropsStream creates a higher-order component from a stream', () => {\n  const Double = mapPropsStream(props$ => props$.map(({\n    n\n  }) => ({\n    children: n * 2\n  })))('div');\n  const wrapper = mount( /*#__PURE__*/React.createElement(Double, {\n    n: 112\n  }));\n  const div = wrapper.find('div');\n  expect(div.text()).toBe('224');\n  wrapper.setProps({\n    n: 358\n  });\n  expect(div.text()).toBe('716');\n});","file":"mapPropsStream-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"mapPropsStreamWithConfig creates a higher-order component from a stream and a observable config","suites":[],"updatePoint":{"line":9,"column":101},"line":9,"code":"test('mapPropsStreamWithConfig creates a higher-order component from a stream and a observable config', () => {\n  const Double = mapPropsStreamWithConfig(rxConfig)(props$ => props$.map(({\n    n\n  }) => ({\n    children: n * 2\n  })))('div');\n  const wrapper = mount( /*#__PURE__*/React.createElement(Double, {\n    n: 112\n  }));\n  const div = wrapper.find('div');\n  expect(div.text()).toBe('224');\n  wrapper.setProps({\n    n: 358\n  });\n  expect(div.text()).toBe('716');\n});","file":"mapPropsStreamWithConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"mapPropsStreamWithConfig creates a stream with the correct config","suites":[],"updatePoint":{"line":25,"column":71},"line":25,"code":"test('mapPropsStreamWithConfig creates a stream with the correct config', () => {\n  const MostComponent = mapPropsStreamWithConfig(mostConfig)(props$ => {\n    expect(props$ instanceof MostStream).toBe(true);\n    return props$.map(v => v);\n  })('div');\n  mount( /*#__PURE__*/React.createElement(MostComponent, null));\n  const RXJSComponent = mapPropsStreamWithConfig(rxConfig)(props$ => {\n    expect(props$ instanceof Observable).toBe(true);\n    return props$.map(v => v);\n  })('div');\n  mount( /*#__PURE__*/React.createElement(RXJSComponent, null));\n});","file":"mapPropsStreamWithConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"nest nests components from outer to inner","suites":[],"updatePoint":{"line":4,"column":47},"line":4,"code":"test('nest nests components from outer to inner', () => {\n  const A = setDisplayName('A')(toClass('div'));\n  const B = setDisplayName('B')(toClass('div'));\n  const C = setDisplayName('C')(toClass('div'));\n  const Nest = nest(A, B, C);\n  expect(Nest.displayName).toBe('nest(A, B, C)');\n  const wrapper = shallow( /*#__PURE__*/React.createElement(Nest, {\n    pass: \"through\"\n  }, \"Child\"));\n  expect(wrapper.equals( /*#__PURE__*/React.createElement(A, {\n    pass: \"through\"\n  }, /*#__PURE__*/React.createElement(B, {\n    pass: \"through\"\n  }, /*#__PURE__*/React.createElement(C, {\n    pass: \"through\"\n  }, \"Child\"))))).toBe(true);\n});","file":"nest-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"onlyUpdateForKeys implements shouldComponentUpdate()","suites":[],"updatePoint":{"line":5,"column":58},"line":5,"code":"test('onlyUpdateForKeys implements shouldComponentUpdate()', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = compose(withState('counter', 'updateCounter', 0), withState('foobar', 'updateFoobar', 'foobar'), onlyUpdateForKeys(['counter']))(component);\n  expect(Counter.displayName).toBe('withState(withState(onlyUpdateForKeys(component)))');\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  const {\n    updateCounter,\n    updateFoobar\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].counter).toBe(0);\n  expect(component.lastCall.args[0].foobar).toBe('foobar'); // Does not update\n\n  updateFoobar('barbaz');\n  expect(component.calledOnce).toBe(true);\n  updateCounter(42);\n  expect(component.calledTwice).toBe(true);\n  expect(component.lastCall.args[0].counter).toBe(42);\n  expect(component.lastCall.args[0].foobar).toBe('barbaz');\n});","file":"onlyUpdateForKeys-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"onlyUpdateForPropTypes only updates for props specified in propTypes","suites":[],"updatePoint":{"line":6,"column":74},"line":6,"code":"test('onlyUpdateForPropTypes only updates for props specified in propTypes', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = compose(withState('counter', 'updateCounter', 0), withState('foobar', 'updateFoobar', 'foobar'), onlyUpdateForPropTypes, setPropTypes({\n    counter: PropTypes.number\n  }))(component);\n  expect(Counter.displayName).toBe('withState(withState(onlyUpdateForPropTypes(component)))');\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  const {\n    updateCounter,\n    updateFoobar\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].counter).toBe(0);\n  expect(component.lastCall.args[0].foobar).toBe('foobar'); // Does not update\n\n  updateFoobar('barbaz');\n  expect(component.calledOnce).toBe(true);\n  updateCounter(42);\n  expect(component.calledTwice).toBe(true);\n  expect(component.lastCall.args[0].counter).toBe(42);\n  expect(component.lastCall.args[0].foobar).toBe('barbaz');\n});","file":"onlyUpdateForPropTypes-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"onlyUpdateForPropTypes warns if BaseComponent does not have any propTypes","suites":[],"updatePoint":{"line":28,"column":79},"line":28,"code":"test('onlyUpdateForPropTypes warns if BaseComponent does not have any propTypes', () => {\n  const error = sinon.stub(console, 'error');\n  const ShouldWarn = onlyUpdateForPropTypes('div');\n  shallow( /*#__PURE__*/React.createElement(ShouldWarn, null));\n  expect(error.firstCall.args[0]).toBe('A component without any `propTypes` was passed to ' + '`onlyUpdateForPropTypes()`. Check the implementation of the component ' + 'with display name \"div\".');\n  /* eslint-disable */\n\n  console.error.restore();\n  /* eslint-enable */\n});","file":"onlyUpdateForPropTypes-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"pure implements shouldComponentUpdate() using shallowEqual()","suites":[],"updatePoint":{"line":6,"column":66},"line":6,"code":"test('pure implements shouldComponentUpdate() using shallowEqual()', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const initialTodos = ['eat', 'drink', 'sleep'];\n  const Todos = compose(withState('todos', 'updateTodos', initialTodos), pure, countRenders)(component);\n  expect(Todos.displayName).toBe('withState(pure(countRenders(component)))');\n  mount( /*#__PURE__*/React.createElement(Todos, null));\n  const {\n    updateTodos\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].todos).toBe(initialTodos);\n  expect(component.lastCall.args[0].renderCount).toBe(1); // Does not re-render\n\n  updateTodos(initialTodos);\n  expect(component.calledOnce).toBe(true);\n  updateTodos(todos => todos.slice(0, -1));\n  expect(component.calledTwice).toBe(true);\n  expect(component.lastCall.args[0].todos).toEqual(['eat', 'drink']);\n  expect(component.lastCall.args[0].renderCount).toBe(2);\n});","file":"pure-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"renameProp renames a single prop","suites":[],"updatePoint":{"line":4,"column":38},"line":4,"code":"test('renameProp renames a single prop', () => {\n  const StringConcat = compose(withProps({\n    'data-so': 123,\n    'data-la': 456\n  }), renameProp('data-so', 'data-do'))('div');\n  expect(StringConcat.displayName).toBe('withProps(renameProp(div))');\n  const div = mount( /*#__PURE__*/React.createElement(StringConcat, null)).find('div');\n  expect(div.props()).toEqual({\n    'data-do': 123,\n    'data-la': 456\n  });\n});","file":"renameProp-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"renameProps renames props","suites":[],"updatePoint":{"line":4,"column":31},"line":4,"code":"test('renameProps renames props', () => {\n  const StringConcat = compose(withProps({\n    'data-so': 123,\n    'data-la': 456\n  }), renameProps({\n    'data-so': 'data-do',\n    'data-la': 'data-fa'\n  }))('div');\n  expect(StringConcat.displayName).toBe('withProps(renameProps(div))');\n  const div = mount( /*#__PURE__*/React.createElement(StringConcat, null)).find('div');\n  expect(div.prop('data-do')).toBe(123);\n  expect(div.prop('data-fa')).toBe(456);\n});","file":"renameProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"renderComponent always renders the given component","suites":[],"updatePoint":{"line":5,"column":56},"line":5,"code":"test('renderComponent always renders the given component', () => {\n  const componentA = sinon.spy(() => null);\n  const componentB = sinon.spy(() => null);\n  const Foobar = compose(withState('flip', 'updateFlip', false), branch(props => props.flip, renderComponent(componentA), renderComponent(componentB)))(null);\n  mount( /*#__PURE__*/React.createElement(Foobar, null));\n  const {\n    updateFlip\n  } = componentB.firstCall.args[0];\n  expect(componentB.calledOnce).toBe(true);\n  expect(componentA.notCalled).toBe(true);\n  updateFlip(true);\n  expect(componentB.calledOnce).toBe(true);\n  expect(componentA.calledOnce).toBe(true);\n});","file":"renderComponent-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"renderNothing returns a component that renders null","suites":[],"updatePoint":{"line":4,"column":57},"line":4,"code":"test('renderNothing returns a component that renders null', () => {\n  const Nothing = renderNothing('div');\n  const wrapper = shallow( /*#__PURE__*/React.createElement(Nothing, null));\n\n  const Parent = () => /*#__PURE__*/React.createElement(Nothing, null);\n\n  const parentWrapper = shallow( /*#__PURE__*/React.createElement(Parent, null));\n  expect(wrapper.type()).toBe(null);\n  expect(parentWrapper.text()).toBe('<Nothing />');\n});","file":"renderNothing-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"setDisplayName sets a static property on the base component","suites":[],"updatePoint":{"line":3,"column":65},"line":3,"code":"test('setDisplayName sets a static property on the base component', () => {\n  const BaseComponent = () => /*#__PURE__*/React.createElement(\"div\", null);\n\n  const NewComponent = setDisplayName('Foo')(BaseComponent);\n  expect(NewComponent.displayName).toBe('Foo');\n});","file":"setDisplayName-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"works with RxJS 5","suites":[],"updatePoint":{"line":26,"column":23},"line":26,"code":"test('works with RxJS 5', () => {\n  setObservableConfig(rxjs5Config);\n  testTransform(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n});","file":"setObservableConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"works with RxJS 4","suites":[],"updatePoint":{"line":32,"column":23},"line":32,"code":"test('works with RxJS 4', () => {\n  setObservableConfig(rxjs4Config);\n  testTransform(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n});","file":"setObservableConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"works with most","suites":[],"updatePoint":{"line":38,"column":21},"line":38,"code":"test('works with most', () => {\n  setObservableConfig(mostConfig);\n  testTransform(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n});","file":"setObservableConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"works with xstream","suites":[],"updatePoint":{"line":44,"column":24},"line":44,"code":"test('works with xstream', () => {\n  setObservableConfig(xstreamConfig);\n  testTransform(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n});","file":"setObservableConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"works with bacon","suites":[],"updatePoint":{"line":50,"column":22},"line":50,"code":"test('works with bacon', () => {\n  setObservableConfig(baconConfig);\n  testTransform(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n});","file":"setObservableConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"works with kefir","suites":[],"updatePoint":{"line":56,"column":22},"line":56,"code":"test('works with kefir', () => {\n  setObservableConfig(kefirConfig);\n  testTransform(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n});","file":"setObservableConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"works with flyd","suites":[],"updatePoint":{"line":62,"column":21},"line":62,"code":"test('works with flyd', () => {\n  setObservableConfig(flydConfig);\n  testTransform(props$ => props$.map(({\n    n\n  }) => /*#__PURE__*/React.createElement(\"div\", null, n * 2)));\n});","file":"setObservableConfig-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"setPropTypes sets a static property on the base component","suites":[],"updatePoint":{"line":4,"column":63},"line":4,"code":"test('setPropTypes sets a static property on the base component', () => {\n  const BaseComponent = () => /*#__PURE__*/React.createElement(\"div\", null);\n\n  const NewComponent = setPropTypes({\n    foo: PropTypes.object\n  })(BaseComponent);\n  expect(NewComponent.propTypes).toEqual({\n    foo: PropTypes.object\n  });\n});","file":"setPropTypes-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"setStatic sets a static property on the base component","suites":[],"updatePoint":{"line":4,"column":60},"line":4,"code":"test('setStatic sets a static property on the base component', () => {\n  const BaseComponent = () => /*#__PURE__*/React.createElement(\"div\", null);\n\n  const NewComponent = setStatic('propTypes', {\n    foo: PropTypes.object\n  })(BaseComponent);\n  expect(NewComponent.propTypes).toEqual({\n    foo: PropTypes.object\n  });\n});","file":"setStatic-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"shallowEqual returns true if arguments are equal, without comparing properties","suites":[],"updatePoint":{"line":3,"column":84},"line":3,"code":"test('shallowEqual returns true if arguments are equal, without comparing properties', () => {\n  const throwOnAccess = {\n    get foo() {\n      throw new Error('Property was accessed');\n    }\n\n  };\n  expect(shallowEqual(throwOnAccess, throwOnAccess)).toBe(true);\n});","file":"shallowEqual-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"shallowEqual returns true if arguments fields are equal","suites":[],"updatePoint":{"line":12,"column":61},"line":12,"code":"test('shallowEqual returns true if arguments fields are equal', () => {\n  expect(shallowEqual({\n    a: 1,\n    b: 2,\n    c: undefined\n  }, {\n    a: 1,\n    b: 2,\n    c: undefined\n  })).toBe(true);\n  expect(shallowEqual({\n    a: 1,\n    b: 2,\n    c: 3\n  }, {\n    a: 1,\n    b: 2,\n    c: 3\n  })).toBe(true);\n  const o = {};\n  expect(shallowEqual({\n    a: 1,\n    b: 2,\n    c: o\n  }, {\n    a: 1,\n    b: 2,\n    c: o\n  })).toBe(true);\n});","file":"shallowEqual-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"shallowEqual returns false if either argument is null or undefined","suites":[],"updatePoint":{"line":42,"column":72},"line":42,"code":"test('shallowEqual returns false if either argument is null or undefined', () => {\n  expect(shallowEqual(null, {\n    a: 1,\n    b: 2\n  })).toBe(false);\n  expect(shallowEqual({\n    a: 1,\n    b: 2\n  }, null)).toBe(false);\n});","file":"shallowEqual-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"shallowEqual returns false if first argument has too many keys","suites":[],"updatePoint":{"line":52,"column":68},"line":52,"code":"test('shallowEqual returns false if first argument has too many keys', () => {\n  expect(shallowEqual({\n    a: 1,\n    b: 2,\n    c: 3\n  }, {\n    a: 1,\n    b: 2\n  })).toBe(false);\n});","file":"shallowEqual-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"shallowEqual returns false if second argument has too many keys","suites":[],"updatePoint":{"line":62,"column":69},"line":62,"code":"test('shallowEqual returns false if second argument has too many keys', () => {\n  expect(shallowEqual({\n    a: 1,\n    b: 2\n  }, {\n    a: 1,\n    b: 2,\n    c: 3\n  })).toBe(false);\n});","file":"shallowEqual-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"shallowEqual returns false if arguments have different keys","suites":[],"updatePoint":{"line":72,"column":65},"line":72,"code":"test('shallowEqual returns false if arguments have different keys', () => {\n  expect(shallowEqual({\n    a: 1,\n    b: 2,\n    c: undefined\n  }, {\n    a: 1,\n    bb: 2,\n    c: undefined\n  })).toBe(false);\n});","file":"shallowEqual-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"shouldUpdate implements shouldComponentUpdate","suites":[],"updatePoint":{"line":6,"column":51},"line":6,"code":"test('shouldUpdate implements shouldComponentUpdate', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const initialTodos = ['eat', 'drink', 'sleep'];\n  const Todos = compose(withState('todos', 'updateTodos', initialTodos), shouldUpdate((props, nextProps) => props.todos !== nextProps.todos), countRenders)(component);\n  expect(Todos.displayName).toBe('withState(shouldUpdate(countRenders(component)))');\n  mount( /*#__PURE__*/React.createElement(Todos, null));\n  const {\n    updateTodos\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].todos).toBe(initialTodos);\n  expect(component.lastCall.args[0].renderCount).toBe(1); // Does not re-render\n\n  updateTodos(initialTodos);\n  expect(component.calledOnce).toBe(true);\n  updateTodos(todos => todos.slice(0, -1));\n  expect(component.calledTwice).toBe(true);\n  expect(component.lastCall.args[0].todos).toEqual(['eat', 'drink']);\n  expect(component.lastCall.args[0].renderCount).toBe(2);\n});","file":"shouldUpdate-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"toClass returns the base component if it is already a class","suites":[],"updatePoint":{"line":6,"column":65},"line":6,"code":"test('toClass returns the base component if it is already a class', () => {\n  class BaseComponent extends React.Component {\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n\n  }\n\n  const TestComponent = toClass(BaseComponent);\n  expect(TestComponent).toBe(BaseComponent);\n});","file":"toClass-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"toClass copies propTypes, displayName, contextTypes and defaultProps from base component","suites":[],"updatePoint":{"line":17,"column":94},"line":17,"code":"test('toClass copies propTypes, displayName, contextTypes and defaultProps from base component', () => {\n  const StatelessComponent = () => /*#__PURE__*/React.createElement(\"div\", null);\n\n  StatelessComponent.displayName = 'Stateless';\n  StatelessComponent.propTypes = {\n    foo: PropTypes.string\n  };\n  StatelessComponent.contextTypes = {\n    bar: PropTypes.object\n  };\n  StatelessComponent.defaultProps = {\n    foo: 'bar',\n    fizz: 'buzz'\n  };\n  const TestComponent = toClass(StatelessComponent);\n  expect(TestComponent.displayName).toBe('Stateless');\n  expect(TestComponent.propTypes).toEqual({\n    foo: PropTypes.string\n  });\n  expect(TestComponent.contextTypes).toEqual({\n    bar: PropTypes.object\n  });\n  expect(TestComponent.defaultProps).toEqual({\n    foo: 'bar',\n    fizz: 'buzz'\n  });\n});","file":"toClass-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"toClass passes defaultProps correctly","suites":[],"updatePoint":{"line":44,"column":43},"line":44,"code":"test('toClass passes defaultProps correctly', () => {\n  const StatelessComponent = sinon.spy(() => null);\n  StatelessComponent.displayName = 'Stateless';\n  StatelessComponent.propTypes = {\n    foo: PropTypes.string\n  };\n  StatelessComponent.contextTypes = {\n    bar: PropTypes.object\n  };\n  StatelessComponent.defaultProps = {\n    foo: 'bar',\n    fizz: 'buzz'\n  };\n  const TestComponent = toClass(StatelessComponent);\n  mount( /*#__PURE__*/React.createElement(TestComponent, null));\n  expect(StatelessComponent.lastCall.args[0].foo).toBe('bar');\n  expect(StatelessComponent.lastCall.args[0].fizz).toBe('buzz');\n});","file":"toClass-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"toClass passes context and props correctly","suites":[],"updatePoint":{"line":62,"column":48},"line":62,"code":"test('toClass passes context and props correctly', () => {\n  const store = {};\n\n  class Provider extends React.Component {\n    static propTypes = {\n      children: PropTypes.node\n    };\n\n    render() {\n      return this.props.children;\n    }\n\n  }\n\n  Provider = compose(withContext({\n    store: PropTypes.object\n  }, props => ({\n    store: props.store\n  })))(Provider);\n\n  const StatelessComponent = (props, context) => /*#__PURE__*/React.createElement(\"div\", {\n    \"data-props\": props,\n    \"data-context\": context\n  });\n\n  StatelessComponent.contextTypes = {\n    store: PropTypes.object\n  };\n  const TestComponent = toClass(StatelessComponent);\n  const div = mount( /*#__PURE__*/React.createElement(Provider, {\n    store: store\n  }, /*#__PURE__*/React.createElement(TestComponent, {\n    fizz: \"fizzbuzz\"\n  }))).find('div');\n  expect(div.prop('data-props').fizz).toBe('fizzbuzz');\n  expect(div.prop('data-context').store).toBe(store);\n});","file":"toClass-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"toClass works with strings (DOM components)","suites":[],"updatePoint":{"line":99,"column":49},"line":99,"code":"test('toClass works with strings (DOM components)', () => {\n  const Div = toClass('div');\n  const div = mount( /*#__PURE__*/React.createElement(Div, null, \"Hello\"));\n  expect(div.html()).toBe('<div>Hello</div>');\n});","file":"toClass-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"toRenderProps creates a component from defaultProps HOC","suites":[],"updatePoint":{"line":4,"column":61},"line":4,"code":"test('toRenderProps creates a component from defaultProps HOC', () => {\n  const enhance = defaultProps({\n    foo: 'bar'\n  });\n  const Enhanced = toRenderProps(enhance);\n  expect(Enhanced.displayName).toBe('defaultProps(RenderPropsComponent)');\n  const h1 = mount( /*#__PURE__*/React.createElement(Enhanced, null, ({\n    foo\n  }) => /*#__PURE__*/React.createElement(\"h1\", null, foo))).find('h1');\n  expect(h1.html()).toBe(`<h1>bar</h1>`);\n});","file":"toRenderProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withContext + getContext adds to and grabs from context","suites":[],"updatePoint":{"line":7,"column":61},"line":7,"code":"test('withContext + getContext adds to and grabs from context', () => {\n  // Mini React Redux clone\n  const store = {\n    getState: () => ({\n      todos: ['eat', 'drink', 'sleep'],\n      counter: 12\n    })\n  };\n\n  class BaseProvider extends Component {\n    static propTypes = {\n      children: PropTypes.node\n    };\n\n    render() {\n      return this.props.children;\n    }\n\n  }\n\n  const Provider = compose(withContext({\n    store: PropTypes.object\n  }, props => ({\n    store: props.store\n  })))(BaseProvider);\n  expect(Provider.displayName).toBe('withContext(BaseProvider)');\n\n  const connect = selector => compose(getContext({\n    store: PropTypes.object\n  }), mapProps(props => selector(props.store.getState())));\n\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const TodoList = connect(({\n    todos\n  }) => ({\n    todos\n  }))(component);\n  expect(TodoList.displayName).toBe('getContext(mapProps(component))');\n  mount( /*#__PURE__*/React.createElement(Provider, {\n    store: store\n  }, /*#__PURE__*/React.createElement(TodoList, null)));\n  expect(component.lastCall.args[0].todos).toEqual(['eat', 'drink', 'sleep']);\n});","file":"withContext-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withHandlers passes handlers to base component","suites":[],"updatePoint":{"line":5,"column":52},"line":5,"code":"test('withHandlers passes handlers to base component', () => {\n  let submittedFormValue;\n  const enhanceForm = compose(withState('value', 'updateValue', ''), withHandlers({\n    onChange: props => event => {\n      props.updateValue(event.target.value);\n    },\n    onSubmit: props => () => {\n      submittedFormValue = props.value;\n    }\n  }));\n  const Form = enhanceForm(({\n    value,\n    onChange,\n    onSubmit\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"Value\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: onChange\n  })), /*#__PURE__*/React.createElement(\"p\", null, value)));\n  const wrapper = mount( /*#__PURE__*/React.createElement(Form, null));\n  const input = wrapper.find('input');\n  const output = wrapper.find('p');\n  const form = wrapper.find('form');\n  input.simulate('change', {\n    target: {\n      value: 'Yay'\n    }\n  });\n  expect(output.text()).toBe('Yay');\n  input.simulate('change', {\n    target: {\n      value: 'Yay!!'\n    }\n  });\n  expect(output.text()).toBe('Yay!!');\n  form.simulate('submit');\n  expect(submittedFormValue).toBe('Yay!!');\n});","file":"withHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withHandlers passes immutable handlers","suites":[],"updatePoint":{"line":45,"column":44},"line":45,"code":"test('withHandlers passes immutable handlers', () => {\n  const enhance = withHandlers({\n    handler: () => () => null\n  });\n  const component = sinon.spy(() => null);\n  const Div = enhance(component);\n  const wrapper = mount( /*#__PURE__*/React.createElement(Div, null));\n  wrapper.setProps({\n    foo: 'bar'\n  });\n  expect(component.calledTwice).toBe(true);\n  expect(component.firstCall.args[0].handler).toBe(component.secondCall.args[0].handler);\n});","file":"withHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withHandlers warns if handler is not a higher-order function","suites":[],"updatePoint":{"line":58,"column":66},"line":58,"code":"test('withHandlers warns if handler is not a higher-order function', () => {\n  const error = sinon.stub(console, 'error');\n  const Button = withHandlers({\n    onClick: () => {}\n  })('button');\n  const wrapper = mount( /*#__PURE__*/React.createElement(Button, null));\n  const button = wrapper.find('button');\n  expect(() => button.simulate('click')).toThrowError(/undefined/);\n  expect(error.firstCall.args[0]).toBe('withHandlers(): Expected a map of higher-order functions. Refer to ' + 'the docs for more info.');\n  /* eslint-disable */\n\n  console.error.restore();\n  /* eslint-enable */\n});","file":"withHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withHandlers allow handers to be a factory","suites":[],"updatePoint":{"line":72,"column":48},"line":72,"code":"test('withHandlers allow handers to be a factory', () => {\n  const enhance = withHandlers(initialProps => {\n    let cache_;\n    return {\n      handler: () => () => {\n        if (cache_) {\n          return cache_;\n        }\n\n        cache_ = { ...initialProps\n        };\n        return cache_;\n      }\n    };\n  });\n  const componentHandlers = [];\n  const componentHandlers2 = [];\n  const Component = enhance(({\n    handler\n  }) => {\n    componentHandlers.push(handler());\n    return null;\n  });\n  const Component2 = enhance(({\n    handler\n  }) => {\n    componentHandlers2.push(handler());\n    return null;\n  });\n  const wrapper = mount( /*#__PURE__*/React.createElement(Component, {\n    hello: 'foo'\n  }));\n  wrapper.setProps({\n    hello: 'bar'\n  });\n  expect(componentHandlers[0]).toBe(componentHandlers[1]); // check that cache is not shared\n\n  mount( /*#__PURE__*/React.createElement(Component2, {\n    hello: 'foo'\n  }));\n  expect(componentHandlers[0]).toEqual(componentHandlers2[0]);\n  expect(componentHandlers[0]).not.toBe(componentHandlers2[0]);\n});","file":"withHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withProps passes additional props to base component","suites":[],"updatePoint":{"line":4,"column":57},"line":4,"code":"test('withProps passes additional props to base component', () => {\n  const DoReMi = withProps({\n    'data-so': 'do',\n    'data-la': 'fa'\n  })('div');\n  expect(DoReMi.displayName).toBe('withProps(div)');\n  const div = shallow( /*#__PURE__*/React.createElement(DoReMi, null)).find('div');\n  expect(div.prop('data-so')).toBe('do');\n  expect(div.prop('data-la')).toBe('fa');\n});","file":"withProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withProps takes precedent over owner props","suites":[],"updatePoint":{"line":14,"column":48},"line":14,"code":"test('withProps takes precedent over owner props', () => {\n  const DoReMi = withProps({\n    'data-so': 'do',\n    'data-la': 'fa'\n  })('div');\n  const div = shallow( /*#__PURE__*/React.createElement(DoReMi, {\n    \"data-la\": \"ti\"\n  })).find('div');\n  expect(div.prop('data-so')).toBe('do');\n  expect(div.prop('data-la')).toBe('fa');\n});","file":"withProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withProps should accept function","suites":[],"updatePoint":{"line":25,"column":38},"line":25,"code":"test('withProps should accept function', () => {\n  const DoReMi = withProps(props => ({\n    'data-so': props['data-la']\n  }))('div');\n  const div = shallow( /*#__PURE__*/React.createElement(DoReMi, {\n    \"data-la\": \"la\"\n  })).find('div');\n  expect(div.prop('data-so')).toBe('la');\n});","file":"withProps-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withPropsOnChange maps subset of owner props to child props","suites":[],"updatePoint":{"line":5,"column":65},"line":5,"code":"test('withPropsOnChange maps subset of owner props to child props', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const mapSpy = sinon.spy();\n  const StringConcat = compose(withState('strings', 'updateStrings', {\n    a: 'a',\n    b: 'b',\n    c: 'c'\n  }), flattenProp('strings'), withPropsOnChange(['a', 'b'], ({\n    a,\n    b,\n    ...props\n  }) => {\n    mapSpy();\n    return { ...props,\n      foobar: a + b\n    };\n  }))(component);\n  expect(StringConcat.displayName).toBe('withState(flattenProp(withPropsOnChange(component)))');\n  mount( /*#__PURE__*/React.createElement(StringConcat, null));\n  const {\n    updateStrings\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].foobar).toBe('ab');\n  expect(component.calledOnce).toBe(true);\n  expect(mapSpy.callCount).toBe(1); // Does not re-map for non-dependent prop updates\n\n  updateStrings(strings => ({ ...strings,\n    c: 'baz'\n  }));\n  expect(component.lastCall.args[0].foobar).toBe('ab');\n  expect(component.lastCall.args[0].c).toBe('c');\n  expect(component.calledTwice).toBe(true);\n  expect(mapSpy.callCount).toBe(1);\n  updateStrings(strings => ({ ...strings,\n    a: 'foo',\n    b: 'bar'\n  }));\n  expect(component.lastCall.args[0].foobar).toBe('foobar');\n  expect(component.lastCall.args[0].c).toBe('baz');\n  expect(component.calledThrice).toBe(true);\n  expect(mapSpy.callCount).toBe(2);\n});","file":"withPropsOnChange-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withPropsOnChange maps subset of owner props to child props with custom predicate","suites":[],"updatePoint":{"line":48,"column":87},"line":48,"code":"test('withPropsOnChange maps subset of owner props to child props with custom predicate', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const mapSpy = sinon.spy();\n  const shouldMapSpy = sinon.spy();\n  const PageContainer = compose(withStateHandlers({\n    result: {\n      hasError: false,\n      loading: true,\n      error: null\n    }\n  }, {\n    updateResult: ({\n      result\n    }) => payload => ({\n      result: { ...result,\n        ...payload\n      }\n    })\n  }), withPropsOnChange(({\n    result\n  }, {\n    result: nextResult\n  }) => {\n    shouldMapSpy(result, nextResult);\n    return !result.hasError && nextResult.hasError;\n  }, ({\n    result: {\n      hasError,\n      error\n    }\n  }) => {\n    mapSpy();\n\n    if (hasError) {\n      return {\n        errorEverHappened: true,\n        lastError: error\n      };\n    }\n\n    return {\n      errorEverHappened: false\n    };\n  }))(component);\n  expect(PageContainer.displayName).toBe('withStateHandlers(withPropsOnChange(component))');\n  mount( /*#__PURE__*/React.createElement(PageContainer, null));\n  const {\n    updateResult\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].errorEverHappened).toBe(false);\n  expect(component.lastCall.args[0].lastError).toBeUndefined();\n  expect(component.calledOnce).toBe(true);\n  expect(mapSpy.callCount).toBe(1);\n  expect(shouldMapSpy.callCount).toBe(1);\n  updateResult({\n    loading: false,\n    hasError: true,\n    error: '1'\n  });\n  expect(component.lastCall.args[0].errorEverHappened).toBe(true);\n  expect(component.lastCall.args[0].lastError).toBe('1');\n  expect(component.calledTwice).toBe(true);\n  expect(mapSpy.callCount).toBe(2); // Does not re-map for false map result\n\n  updateResult({\n    loading: true,\n    hasError: false,\n    error: null\n  });\n  expect(component.lastCall.args[0].errorEverHappened).toBe(true);\n  expect(component.lastCall.args[0].lastError).toBe('1');\n  expect(component.calledThrice).toBe(true);\n  expect(mapSpy.callCount).toBe(2);\n  updateResult({\n    loading: false,\n    hasError: true,\n    error: '2'\n  });\n  expect(component.lastCall.args[0].errorEverHappened).toBe(true);\n  expect(component.lastCall.args[0].lastError).toBe('2');\n  expect(component.callCount).toBe(4);\n  expect(mapSpy.callCount).toBe(3);\n});","file":"withPropsOnChange-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"adds a stateful value and a function for updating it","suites":[],"updatePoint":{"line":6,"column":58},"line":6,"code":"test('adds a stateful value and a function for updating it', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const initialState = {\n    counter: 0\n  };\n\n  const reducer = (state, action) => action.type === SET_COUNTER ? {\n    counter: action.payload\n  } : state;\n\n  const Counter = compose(withReducer('state', 'dispatch', reducer, initialState), flattenProp('state'))(component);\n  expect(Counter.displayName).toBe('withReducer(flattenProp(component))');\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  const {\n    dispatch\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].counter).toBe(0);\n  dispatch({\n    type: SET_COUNTER,\n    payload: 18\n  });\n  expect(component.lastCall.args[0].counter).toBe(18);\n});","file":"withReducer-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"calls initialState when it is a function","suites":[],"updatePoint":{"line":30,"column":46},"line":30,"code":"test('calls initialState when it is a function', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n\n  const initialState = ({\n    initialCount\n  }) => ({\n    counter: initialCount\n  });\n\n  const reducer = (state, action) => action.type === SET_COUNTER ? {\n    counter: action.payload\n  } : state;\n\n  const Counter = compose(withReducer('state', 'dispatch', reducer, initialState), flattenProp('state'))(component);\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    initialCount: 10\n  }));\n  expect(component.lastCall.args[0].counter).toBe(10);\n});","file":"withReducer-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"receives state from reducer when initialState is not provided","suites":[],"updatePoint":{"line":50,"column":67},"line":50,"code":"test('receives state from reducer when initialState is not provided', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const initialState = {\n    counter: 0\n  };\n\n  const reducer = (state = initialState, action) => action.type === SET_COUNTER ? {\n    counter: action.payload\n  } : state;\n\n  const Counter = compose(withReducer('state', 'dispatch', reducer), flattenProp('state'))(component);\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  expect(component.lastCall.args[0].counter).toBe(0);\n});","file":"withReducer-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"calls the given callback with new state after a dispatch call","suites":[],"updatePoint":{"line":65,"column":67},"line":65,"code":"test('calls the given callback with new state after a dispatch call', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const initialState = {\n    counter: 0\n  };\n\n  const reducer = (state, action) => action.type === SET_COUNTER ? {\n    counter: action.payload\n  } : state;\n\n  const Counter = compose(withReducer('state', 'dispatch', reducer, initialState), flattenProp('state'))(component);\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  const dispatch = sinon.spy(component.firstCall.args[0].dispatch);\n  const callback = sinon.spy();\n  dispatch({\n    type: SET_COUNTER,\n    payload: 11\n  }, callback);\n  expect(dispatch.calledBefore(callback)).toBe(true);\n  expect(dispatch.calledOnce).toBe(true);\n  expect(callback.calledAfter(dispatch)).toBe(true);\n  expect(callback.calledOnce).toBe(true);\n  expect(callback.getCall(0).args.length).toBe(1);\n  expect(callback.getCall(0).args[0]).toEqual({\n    counter: 11\n  });\n});","file":"withReducer-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withState adds a stateful value and a function for updating it","suites":[],"updatePoint":{"line":5,"column":68},"line":5,"code":"test('withState adds a stateful value and a function for updating it', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withState('counter', 'updateCounter', 0)(component);\n  expect(Counter.displayName).toBe('withState(component)');\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    pass: \"through\"\n  }));\n  const {\n    updateCounter\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].counter).toBe(0);\n  expect(component.lastCall.args[0].pass).toBe('through');\n  updateCounter(n => n + 9);\n  updateCounter(n => n * 2);\n  expect(component.lastCall.args[0].counter).toBe(18);\n  expect(component.lastCall.args[0].pass).toBe('through');\n});","file":"withState-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withState also accepts a non-function, which is passed directly to setState()","suites":[],"updatePoint":{"line":23,"column":83},"line":23,"code":"test('withState also accepts a non-function, which is passed directly to setState()', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withState('counter', 'updateCounter', 0)(component);\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  const {\n    updateCounter\n  } = component.firstCall.args[0];\n  updateCounter(18);\n  expect(component.lastCall.args[0].counter).toBe(18);\n});","file":"withState-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withState accepts setState() callback","suites":[],"updatePoint":{"line":34,"column":43},"line":34,"code":"test('withState accepts setState() callback', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withState('counter', 'updateCounter', 0)(component);\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  const {\n    updateCounter\n  } = component.firstCall.args[0];\n  const renderSpy = sinon.spy(() => {\n    expect(component.lastCall.args[0].counter).toBe(18);\n  });\n  expect(component.lastCall.args[0].counter).toBe(0);\n  updateCounter(18, renderSpy);\n});","file":"withState-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withState also accepts initialState as function of props","suites":[],"updatePoint":{"line":48,"column":62},"line":48,"code":"test('withState also accepts initialState as function of props', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withState('counter', 'updateCounter', props => props.initialCounter)(component);\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    initialCounter: 1\n  }));\n  const {\n    updateCounter\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].counter).toBe(1);\n  updateCounter(n => n * 3);\n  expect(component.lastCall.args[0].counter).toBe(3);\n});","file":"withState-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers should persist events passed as argument","suites":[],"updatePoint":{"line":5,"column":64},"line":5,"code":"test('withStateHandlers should persist events passed as argument', () => {\n  const component = ({\n    value,\n    onChange\n  }) => /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: onChange\n  }), /*#__PURE__*/React.createElement(\"p\", null, value));\n\n  const InputComponent = withStateHandlers({\n    value: ''\n  }, {\n    onChange: () => e => ({\n      value: e.target.value\n    })\n  })(component);\n  const wrapper = mount( /*#__PURE__*/React.createElement(InputComponent, null));\n  const input = wrapper.find('input');\n  const output = wrapper.find('p'); // having that enzyme simulate does not simulate real situation\n  // emulate persist\n\n  input.simulate('change', {\n    persist() {\n      this.target = {\n        value: 'Yay'\n      };\n    }\n\n  });\n  expect(output.text()).toBe('Yay');\n  input.simulate('change', {\n    target: {\n      value: 'empty'\n    }\n  });\n  expect(output.text()).toBe('empty');\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers adds a stateful value and a function for updating it","suites":[],"updatePoint":{"line":43,"column":76},"line":43,"code":"test('withStateHandlers adds a stateful value and a function for updating it', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withStateHandlers({\n    counter: 0\n  }, {\n    updateCounter: ({\n      counter\n    }) => increment => ({\n      counter: counter + increment\n    })\n  })(component);\n  expect(Counter.displayName).toBe('withStateHandlers(component)');\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    pass: \"through\"\n  }));\n  const {\n    updateCounter\n  } = component.firstCall.args[0];\n  expect(component.lastCall.args[0].counter).toBe(0);\n  expect(component.lastCall.args[0].pass).toBe('through');\n  updateCounter(9);\n  expect(component.lastCall.args[0].counter).toBe(9);\n  updateCounter(1);\n  updateCounter(10);\n  expect(component.lastCall.args[0].counter).toBe(20);\n  expect(component.lastCall.args[0].pass).toBe('through');\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers accepts initialState as function of props","suites":[],"updatePoint":{"line":71,"column":65},"line":71,"code":"test('withStateHandlers accepts initialState as function of props', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withStateHandlers(({\n    initialCounter\n  }) => ({\n    counter: initialCounter\n  }), {\n    updateCounter: ({\n      counter\n    }) => increment => ({\n      counter: counter + increment\n    })\n  })(component);\n  const initialCounter = 101;\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    initialCounter: initialCounter\n  }));\n  expect(component.lastCall.args[0].counter).toBe(initialCounter);\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers initial state must be function or object or null or undefined","suites":[],"updatePoint":{"line":91,"column":85},"line":91,"code":"test('withStateHandlers initial state must be function or object or null or undefined', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withStateHandlers(1, {})(component); // React throws an error\n  // expect(() => mount(<Counter />)).toThrow()\n\n  const error = sinon.stub(console, 'error');\n  mount( /*#__PURE__*/React.createElement(Counter, null));\n  expect(error.called).toBe(true);\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers have access to props","suites":[],"updatePoint":{"line":101,"column":44},"line":101,"code":"test('withStateHandlers have access to props', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withStateHandlers(({\n    initialCounter\n  }) => ({\n    counter: initialCounter\n  }), {\n    increment: ({\n      counter\n    }, {\n      incrementValue\n    }) => () => ({\n      counter: counter + incrementValue\n    })\n  })(component);\n  const initialCounter = 101;\n  const incrementValue = 37;\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    initialCounter: initialCounter,\n    incrementValue: incrementValue\n  }));\n  const {\n    increment\n  } = component.firstCall.args[0];\n  increment();\n  expect(component.lastCall.args[0].counter).toBe(initialCounter + incrementValue);\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers passes immutable state updaters","suites":[],"updatePoint":{"line":129,"column":55},"line":129,"code":"test('withStateHandlers passes immutable state updaters', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withStateHandlers(({\n    initialCounter\n  }) => ({\n    counter: initialCounter\n  }), {\n    increment: ({\n      counter\n    }, {\n      incrementValue\n    }) => () => ({\n      counter: counter + incrementValue\n    })\n  })(component);\n  const initialCounter = 101;\n  const incrementValue = 37;\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    initialCounter: initialCounter,\n    incrementValue: incrementValue\n  }));\n  const {\n    increment\n  } = component.firstCall.args[0];\n  increment();\n  expect(component.lastCall.args[0].counter).toBe(initialCounter + incrementValue);\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers does not rerender if state updater returns undefined","suites":[],"updatePoint":{"line":157,"column":76},"line":157,"code":"test('withStateHandlers does not rerender if state updater returns undefined', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = withStateHandlers(({\n    initialCounter\n  }) => ({\n    counter: initialCounter\n  }), {\n    updateCounter: ({\n      counter\n    }) => increment => increment === 0 ? undefined : {\n      counter: counter + increment\n    }\n  })(component);\n  const initialCounter = 101;\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    initialCounter: initialCounter\n  }));\n  expect(component.callCount).toBe(1);\n  const {\n    updateCounter\n  } = component.firstCall.args[0];\n  updateCounter(1);\n  expect(component.callCount).toBe(2);\n  updateCounter(0);\n  expect(component.callCount).toBe(2);\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"withStateHandlers rerenders if parent props changed","suites":[],"updatePoint":{"line":184,"column":57},"line":184,"code":"test('withStateHandlers rerenders if parent props changed', () => {\n  const component = sinon.spy(() => null);\n  component.displayName = 'component';\n  const Counter = compose(withStateHandlers(({\n    initialCounter\n  }) => ({\n    counter: initialCounter\n  }), {\n    increment: ({\n      counter\n    }) => incrementValue => ({\n      counter: counter + incrementValue\n    })\n  }), withStateHandlers({\n    incrementValue: 1\n  }, {\n    // updates parent state and return undefined\n    updateParentIncrement: ({\n      incrementValue\n    }, {\n      increment\n    }) => () => {\n      increment(incrementValue);\n      return undefined;\n    }\n  }))(component);\n  const initialCounter = 101;\n  mount( /*#__PURE__*/React.createElement(Counter, {\n    initialCounter: initialCounter\n  }));\n  const {\n    updateParentIncrement\n  } = component.firstCall.args[0];\n  updateParentIncrement();\n  expect(component.lastCall.args[0].counter).toBe(initialCounter + 1);\n});","file":"withStateHandlers-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"},{"name":"wrapDisplayName wraps the display name of a React component with the name of an HoC, Relay-style","suites":[],"updatePoint":{"line":3,"column":102},"line":3,"code":"test('wrapDisplayName wraps the display name of a React component with the name of an HoC, Relay-style', () => {\n  class SomeComponent extends React.Component {\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n\n  }\n\n  expect(wrapDisplayName(SomeComponent, 'someHoC')).toBe('someHoC(SomeComponent)');\n});","file":"wrapDisplayName-test.js","skipped":false,"dir":"src/packages/recompose/__tests__"}]}