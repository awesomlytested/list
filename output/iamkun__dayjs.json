{"repo":"iamkun/dayjs","url":"https://github.com/iamkun/dayjs","branch":"dev","configs":[{"package":"dayjs","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"window.dayjs ","suites":["Install"],"updatePoint":{"line":5,"column":19,"index":202},"line":5,"code":"  it('window.dayjs ', function () {\n    if (!window.dayjs) throw new Error('No window.dayjs');\n  });","file":"browser.spec.js","skipped":false,"dir":"test"},{"name":"Chain Methods","suites":["Core APIs"],"updatePoint":{"line":10,"column":19,"index":343},"line":10,"code":"  it('Chain Methods', function () {\n    expect(dayjs('2011-02-05T14:48:00.000Z').clone().set('month', 3).set('second', 30).endOf('month').startOf('week').add(1, 'day').subtract(1, 'year').format('{YYYY} MM-DDTHH:mm:ss')).toBe('{2010} 04-25T00:00:00');\n  });","file":"browser.spec.js","skipped":false,"dir":"test"},{"name":"Date parse - nonstandard date string","suites":["Core APIs"],"updatePoint":{"line":13,"column":42,"index":624},"line":13,"code":"  it('Date parse - nonstandard date string', function () {\n    expect(dayjs('2018-4-1 1:1:1:22').format('YYYY-MM-DD hh:mm:ss')).toBe('2018-04-01 01:01:01');\n    expect(dayjs('2018-4-1').format('YYYY-MM-DD hh:mm:ss')).toBe('2018-04-01 12:00:00');\n    expect(dayjs('2018-4-1 11:49').format('YYYY-MM-DD hh:mm:ss')) // fix ios bug\n    .toBe('2018-04-01 11:49:00');\n  });","file":"browser.spec.js","skipped":false,"dir":"test"},{"name":"is same without units","suites":[],"updatePoint":{"line":9,"column":27,"index":182},"line":9,"code":"test('is same without units', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2012, 3, 2, 3, 5, 5, 10)))).toBe(false, 'year is later');\n  expect(m.isSame(dayjs(new Date(2010, 3, 2, 3, 3, 5, 10)))).toBe(false, 'year is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(false, 'month is later');\n  expect(m.isSame(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(false, 'month is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(false, 'day is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(false, 'day is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(false, 'hour is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(false, 'hour is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(false, 'minute is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(false, 'minute is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(false, 'second is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(false, 'second is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(true, 'millisecond match');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(false, 'millisecond is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(false, 'millisecond is earlier');\n  expect(m.isSame(m)).toBe(true, 'moments are the same as themselves');\n  expect(+m).toEqual(+mCopy, 'isSame second should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same year","suites":[],"updatePoint":{"line":30,"column":18,"index":1842},"line":30,"code":"test('is same year', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year match');\n  expect(m.isSame(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'years')).toBe(true, 'plural should work');\n  expect(m.isSame(dayjs(new Date(2012, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(true, 'exact start of year');\n  expect(m.isSame(dayjs(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true, 'exact end of year');\n  expect(m.isSame(dayjs(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false, 'start of next year');\n  expect(m.isSame(dayjs(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false, 'end of previous year');\n  expect(m.isSame(m, 'year')).toBe(true, 'same moments are in the same year');\n  expect(+m).toEqual(+mCopy, 'isSame year should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same month","suites":[],"updatePoint":{"line":43,"column":19,"index":2828},"line":43,"code":"test('is same month', () => {\n  const m = dayjs(new Date(2011, 2, 3, 4, 5, 6, 7));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'month match');\n  expect(m.isSame(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'months')).toBe(true, 'plural should work');\n  expect(m.isSame(dayjs(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'year mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(true, 'exact start of month');\n  expect(m.isSame(dayjs(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(true, 'exact end of month');\n  expect(m.isSame(dayjs(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(false, 'start of next month');\n  expect(m.isSame(dayjs(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(false, 'end of previous month');\n  expect(m.isSame(m, 'month')).toBe(true, 'same moments are in the same month');\n  expect(+m).toEqual(+mCopy, 'isSame month should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same day","suites":[],"updatePoint":{"line":57,"column":17,"index":3926},"line":57,"code":"test('is same day', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'day match');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'days')).toBe(true, 'plural should work');\n  expect(m.isSame(dayjs(new Date(2012, 1, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'year mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'month mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 3, 7, 8, 9, 10)), 'day')).toBe(false, 'day mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 0, 0, 0, 0)), 'day')).toBe(true, 'exact start of day');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 23, 59, 59, 999)), 'day')).toBe(true, 'exact end of day');\n  expect(m.isSame(dayjs(new Date(2011, 1, 3, 0, 0, 0, 0)), 'day')).toBe(false, 'start of next day');\n  expect(m.isSame(dayjs(new Date(2011, 1, 1, 23, 59, 59, 999)), 'day')).toBe(false, 'end of previous day');\n  expect(m.isSame(m, 'day')).toBe(true, 'same moments are in the same day');\n  expect(+m).toEqual(+mCopy, 'isSame day should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same hour","suites":[],"updatePoint":{"line":72,"column":18,"index":5088},"line":72,"code":"test('is same hour', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'hour match');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hours')).toBe(true, 'plural should work');\n  expect(m.isSame(dayjs(new Date(2012, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'year mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 2, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'month mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 3, 3, 8, 9, 10)), 'hour')).toBe(false, 'day mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 4, 8, 9, 10)), 'hour')).toBe(false, 'hour mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 0, 0, 0)), 'hour')).toBe(true, 'exact start of hour');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 59, 59, 999)), 'hour')).toBe(true, 'exact end of hour');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 4, 0, 0, 0)), 'hour')).toBe(false, 'start of next hour');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 2, 59, 59, 999)), 'hour')).toBe(false, 'end of previous hour');\n  expect(m.isSame(m, 'hour')).toBe(true, 'same moments are in the same hour');\n  expect(+m).toEqual(+mCopy, 'isSame hour should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same minute","suites":[],"updatePoint":{"line":88,"column":20,"index":6366},"line":88,"code":"test('is same minute', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'minute match');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minutes')).toBe(true, 'plural should work');\n  expect(m.isSame(dayjs(new Date(2012, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'year mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'month mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 3, 3, 4, 9, 10)), 'minute')).toBe(false, 'day mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 4, 4, 9, 10)), 'minute')).toBe(false, 'hour mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 5, 9, 10)), 'minute')).toBe(false, 'minute mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 0, 0)), 'minute')).toBe(true, 'exact start of minute');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 59, 999)), 'minute')).toBe(true, 'exact end of minute');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 5, 0, 0)), 'minute')).toBe(false, 'start of next minute');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 3, 59, 999)), 'minute')).toBe(false, 'end of previous minute');\n  expect(m.isSame(m, 'minute')).toBe(true, 'same moments are in the same minute');\n  expect(+m).toEqual(+mCopy, 'isSame minute should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same second","suites":[],"updatePoint":{"line":105,"column":20,"index":7781},"line":105,"code":"test('is same second', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'second match');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'seconds')).toBe(true, 'plural should work');\n  expect(m.isSame(dayjs(new Date(2012, 1, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'year mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'month mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 3, 3, 4, 5, 10)), 'second')).toBe(false, 'day mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 4, 4, 5, 10)), 'second')).toBe(false, 'hour mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 5, 5, 10)), 'second')).toBe(false, 'minute mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 6, 10)), 'second')).toBe(false, 'second mismatch');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 5, 0)), 'second')).toBe(true, 'exact start of second');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 5, 999)), 'second')).toBe(true, 'exact end of second');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 6, 0)), 'second')).toBe(false, 'start of next second');\n  expect(m.isSame(dayjs(new Date(2011, 1, 2, 3, 4, 4, 999)), 'second')).toBe(false, 'end of previous second');\n  expect(m.isSame(m, 'second')).toBe(true, 'same moments are in the same second');\n  expect(+m).toEqual(+mCopy, 'isSame second should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same millisecond","suites":[],"updatePoint":{"line":123,"column":25,"index":9302},"line":123,"code":"test('is same millisecond', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'millisecond match');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds')).toBe(true, 'plural should work');\n  expect(m.isSame(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'year is later');\n  expect(m.isSame(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'year is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'month is later');\n  expect(m.isSame(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'month is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'day is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(false, 'day is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(false, 'hour is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(false, 'hour is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(false, 'minute is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(false, 'minute is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(false, 'second is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(false, 'second is earlier');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(false, 'millisecond is later');\n  expect(m.isSame(dayjs(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(false, 'millisecond is earlier');\n  expect(m.isSame(m, 'millisecond')).toBe(true, 'same moments are in the same millisecond');\n  expect(+m).toEqual(+mCopy, 'isSame millisecond should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is same with invalid moments","suites":[],"updatePoint":{"line":145,"column":34,"index":11339},"line":145,"code":"test('is same with invalid moments', () => {\n  expect(dayjs(null).isSame(dayjs('2018-01-01'))).toBe(false, 'invalid moments are not considered equal');\n  expect(dayjs('2018-01-01').isSame(dayjs(null))).toBe(false, 'invalid moments are not considered equal');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after year","suites":[],"updatePoint":{"line":152,"column":19,"index":11602},"line":152,"code":"test('is after year', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year match');\n  expect(m.isAfter(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), 'years')).toBe(true, 'plural should work');\n  expect(m.isAfter(dayjs(new Date(2013, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false, 'exact start of year');\n  expect(m.isAfter(dayjs(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false, 'exact end of year');\n  expect(m.isAfter(dayjs(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false, 'start of next year');\n  expect(m.isAfter(dayjs(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true, 'end of previous year');\n  expect(m.isAfter(dayjs(new Date(1980, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true, 'end of year far before');\n  expect(m.isAfter(m, 'year')).toBe(false, 'same moments are not after the same year');\n  expect(+m).toEqual(+mCopy, 'isAfter year should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after month","suites":[],"updatePoint":{"line":167,"column":20,"index":12823},"line":167,"code":"test('is after month', () => {\n  const m = dayjs(new Date(2011, 2, 3, 4, 5, 6, 7));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month match');\n  expect(m.isAfter(dayjs(new Date(2010, 2, 6, 7, 8, 9, 10)), 'months')).toBe(true, 'plural should work');\n  expect(m.isAfter(dayjs(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month is later');\n  expect(m.isAfter(dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'month is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(false, 'exact start of month');\n  expect(m.isAfter(dayjs(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(false, 'exact end of month');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(false, 'start of next month');\n  expect(m.isAfter(dayjs(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(true, 'end of previous month');\n  expect(m.isAfter(dayjs(new Date(2010, 12, 31, 23, 59, 59, 999)), 'month')).toBe(true, 'later month but earlier year');\n  expect(m.isAfter(m, 'month')).toBe(false, 'same moments are not after the same month');\n  expect(+m).toEqual(+mCopy, 'isAfter month should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after day","suites":[],"updatePoint":{"line":184,"column":18,"index":14268},"line":184,"code":"test('is after day', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'day match');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 7, 8, 9, 10)), 'days')).toBe(true, 'plural should work');\n  expect(m.isAfter(dayjs(new Date(2012, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 4, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'month is later');\n  expect(m.isAfter(dayjs(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'month is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 3, 7, 8, 9, 10)), 'day')).toBe(false, 'day is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 7, 8, 9, 10)), 'day')).toBe(true, 'day is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 0, 0, 0, 0)), 'day')).toBe(false, 'exact start of day');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 23, 59, 59, 999)), 'day')).toBe(false, 'exact end of day');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 3, 0, 0, 0, 0)), 'day')).toBe(false, 'start of next day');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 23, 59, 59, 999)), 'day')).toBe(true, 'end of previous day');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 10, 0, 0, 0, 0)), 'day')).toBe(true, 'later day but earlier year');\n  expect(m.isAfter(m, 'day')).toBe(false, 'same moments are not after the same day');\n  expect(+m).toEqual(+mCopy, 'isAfter day should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after hour","suites":[],"updatePoint":{"line":203,"column":19,"index":15863},"line":203,"code":"test('is after hour', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'hour match');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 8, 9, 10)), 'hours')).toBe(true, 'plural should work');\n  expect(m.isAfter(dayjs(new Date(2012, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 4, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'month is later');\n  expect(m.isAfter(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'month is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 3, 3, 8, 9, 10)), 'hour')).toBe(false, 'day is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 3, 8, 9, 10)), 'hour')).toBe(true, 'day is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 4, 8, 9, 10)), 'hour')).toBe(false, 'hour is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'hour is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 0, 0, 0)), 'hour')).toBe(false, 'exact start of hour');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 59, 59, 999)), 'hour')).toBe(false, 'exact end of hour');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 4, 0, 0, 0)), 'hour')).toBe(false, 'start of next hour');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 2, 59, 59, 999)), 'hour')).toBe(true, 'end of previous hour');\n  expect(m.isAfter(m, 'hour')).toBe(false, 'same moments are not after the same hour');\n  expect(+m).toEqual(+mCopy, 'isAfter hour should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after minute","suites":[],"updatePoint":{"line":223,"column":21,"index":17569},"line":223,"code":"test('is after minute', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'minute match');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 4, 9, 10)), 'minutes')).toBe(true, 'plural should work');\n  expect(m.isAfter(dayjs(new Date(2012, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 4, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'month is later');\n  expect(m.isAfter(dayjs(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'month is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 3, 3, 4, 9, 10)), 'minute')).toBe(false, 'day is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 3, 4, 9, 10)), 'minute')).toBe(true, 'day is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 4, 4, 9, 10)), 'minute')).toBe(false, 'hour is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 2, 4, 9, 10)), 'minute')).toBe(true, 'hour is earler');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 5, 9, 10)), 'minute')).toBe(false, 'minute is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 3, 9, 10)), 'minute')).toBe(true, 'minute is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 0, 0)), 'minute')).toBe(false, 'exact start of minute');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 59, 999)), 'minute')).toBe(false, 'exact end of minute');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 5, 0, 0)), 'minute')).toBe(false, 'start of next minute');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 3, 59, 999)), 'minute')).toBe(true, 'end of previous minute');\n  expect(m.isAfter(m, 'minute')).toBe(false, 'same moments are not after the same minute');\n  expect(+m).toEqual(+mCopy, 'isAfter minute should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after second","suites":[],"updatePoint":{"line":245,"column":21,"index":19524},"line":245,"code":"test('is after second', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'second match');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'seconds')).toBe(true, 'plural should work');\n  expect(m.isAfter(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'month is later');\n  expect(m.isAfter(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'month is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)), 'second')).toBe(false, 'day is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 1, 4, 5, 10)), 'second')).toBe(true, 'day is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)), 'second')).toBe(false, 'hour is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 4, 1, 5, 10)), 'second')).toBe(true, 'hour is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)), 'second')).toBe(false, 'minute is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), 'second')).toBe(true, 'minute is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)), 'second')).toBe(false, 'second is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 5)), 'second')).toBe(true, 'second is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 0)), 'second')).toBe(false, 'exact start of second');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 999)), 'second')).toBe(false, 'exact end of second');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 0)), 'second')).toBe(false, 'start of next second');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 999)), 'second')).toBe(true, 'end of previous second');\n  expect(m.isAfter(m, 'second')).toBe(false, 'same moments are not after the same second');\n  expect(+m).toEqual(+mCopy, 'isAfter second should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after millisecond","suites":[],"updatePoint":{"line":269,"column":26,"index":21692},"line":269,"code":"test('is after millisecond', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'millisecond match');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'milliseconds')).toBe(true, 'plural should work');\n  expect(m.isAfter(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'month is later');\n  expect(m.isAfter(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'month is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'day is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(true, 'day is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(false, 'hour is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(true, 'hour is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(false, 'minute is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(true, 'minute is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(false, 'second is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(true, 'second is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(false, 'millisecond is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(true, 'millisecond is earlier');\n  expect(m.isAfter(m, 'millisecond')).toBe(false, 'same moments are not after the same millisecond');\n  expect(+m).toEqual(+mCopy, 'isAfter millisecond should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after without units","suites":[],"updatePoint":{"line":291,"column":28,"index":23743},"line":291,"code":"test('is after without units', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isAfter(dayjs(new Date(2012, 3, 2, 3, 5, 5, 10)))).toBe(false, 'year is later');\n  expect(m.isAfter(dayjs(new Date(2010, 3, 2, 3, 3, 5, 10)))).toBe(true, 'year is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(false, 'month is later');\n  expect(m.isAfter(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(true, 'month is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(false, 'day is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(true, 'day is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(false, 'hour is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(true, 'hour is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(false, 'minute is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(true, 'minute is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(false, 'second is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(true, 'second is earlier');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'millisecond match');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(false, 'millisecond is later');\n  expect(m.isAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(true, 'millisecond is earlier');\n  expect(m.isAfter(m)).toBe(false, 'moments are not after themselves');\n  expect(+m).toEqual(+mCopy, 'isAfter second should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after invalid","suites":[],"updatePoint":{"line":312,"column":22,"index":25417},"line":312,"code":"test('is after invalid', () => {\n  const m = dayjs();\n  const invalid = dayjs(null);\n  expect(m.isAfter(invalid)).toBe(false, 'valid moment is not after invalid moment');\n  expect(invalid.isAfter(m)).toBe(false, 'invalid moment is not after valid moment');\n  expect(m.isAfter(invalid, 'year')).toBe(false, 'invalid moment year');\n  expect(m.isAfter(invalid, 'month')).toBe(false, 'invalid moment month');\n  expect(m.isAfter(invalid, 'day')).toBe(false, 'invalid moment day');\n  expect(m.isAfter(invalid, 'hour')).toBe(false, 'invalid moment hour');\n  expect(m.isAfter(invalid, 'minute')).toBe(false, 'invalid moment minute');\n  expect(m.isAfter(invalid, 'second')).toBe(false, 'invalid moment second');\n  expect(m.isAfter(invalid, 'milliseconds')).toBe(false, 'invalid moment milliseconds');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is after without units","suites":[],"updatePoint":{"line":328,"column":28,"index":26235},"line":328,"code":"test('is after without units', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 5, 5, 10)))).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 2, 3, 3, 5, 10)))).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(true, 'month is later');\n  expect(m.isBefore(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(false, 'month is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(true, 'day is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(false, 'day is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(true, 'hour is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(false, 'hour is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(true, 'minute is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(false, 'minute is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(true, 'second is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(false, 'second is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'millisecond match');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(true, 'millisecond is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(false, 'millisecond is earlier');\n  expect(m.isBefore(m)).toBe(false, 'moments are not before themselves');\n  expect(+m).toEqual(+mCopy, 'isBefore second should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before year","suites":[],"updatePoint":{"line":349,"column":20,"index":27925},"line":349,"code":"test('is before year', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year match');\n  expect(m.isBefore(dayjs(new Date(2012, 5, 6, 7, 8, 9, 10)), 'years')).toBe(true, 'plural should work');\n  expect(m.isBefore(dayjs(new Date(2013, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false, 'exact start of year');\n  expect(m.isBefore(dayjs(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false, 'exact end of year');\n  expect(m.isBefore(dayjs(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(true, 'start of next year');\n  expect(m.isBefore(dayjs(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false, 'end of previous year');\n  expect(m.isBefore(dayjs(new Date(1980, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false, 'end of year far before');\n  expect(m.isBefore(m, 'year')).toBe(false, 'same moments are not before the same year');\n  expect(+m).toEqual(+mCopy, 'isBefore year should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before month","suites":[],"updatePoint":{"line":364,"column":21,"index":29160},"line":364,"code":"test('is before month', () => {\n  const m = dayjs(new Date(2011, 2, 3, 4, 5, 6, 7));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month match');\n  expect(m.isBefore(dayjs(new Date(2012, 2, 6, 7, 8, 9, 10)), 'months')).toBe(true, 'plural should work');\n  expect(m.isBefore(dayjs(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'month is later');\n  expect(m.isBefore(dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(false, 'exact start of month');\n  expect(m.isBefore(dayjs(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(false, 'exact end of month');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(true, 'start of next month');\n  expect(m.isBefore(dayjs(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(false, 'end of previous month');\n  expect(m.isBefore(dayjs(new Date(2010, 12, 31, 23, 59, 59, 999)), 'month')).toBe(false, 'later month but earlier year');\n  expect(m.isBefore(m, 'month')).toBe(false, 'same moments are not before the same month');\n  expect(+m).toEqual(+mCopy, 'isBefore month should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before day","suites":[],"updatePoint":{"line":381,"column":19,"index":30621},"line":381,"code":"test('is before day', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'day match');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 7, 8, 9, 10)), 'days')).toBe(true, 'plural should work');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 4, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'month is later');\n  expect(m.isBefore(dayjs(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'month is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 3, 7, 8, 9, 10)), 'day')).toBe(true, 'day is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 7, 8, 9, 10)), 'day')).toBe(false, 'day is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 0, 0, 0, 0)), 'day')).toBe(false, 'exact start of day');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 23, 59, 59, 999)), 'day')).toBe(false, 'exact end of day');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 3, 0, 0, 0, 0)), 'day')).toBe(true, 'start of next day');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 23, 59, 59, 999)), 'day')).toBe(false, 'end of previous day');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 10, 0, 0, 0, 0)), 'day')).toBe(false, 'later day but earlier year');\n  expect(m.isBefore(m, 'day')).toBe(false, 'same moments are not before the same day');\n  expect(+m).toEqual(+mCopy, 'isBefore day should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before hour","suites":[],"updatePoint":{"line":400,"column":20,"index":32234},"line":400,"code":"test('is before hour', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'hour match');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 8, 9, 10)), 'hours')).toBe(true, 'plural should work');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 4, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'month is later');\n  expect(m.isBefore(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'month is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 3, 3, 8, 9, 10)), 'hour')).toBe(true, 'day is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 3, 8, 9, 10)), 'hour')).toBe(false, 'day is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 4, 8, 9, 10)), 'hour')).toBe(true, 'hour is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'hour is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 0, 0, 0)), 'hour')).toBe(false, 'exact start of hour');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 59, 59, 999)), 'hour')).toBe(false, 'exact end of hour');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 4, 0, 0, 0)), 'hour')).toBe(true, 'start of next hour');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 2, 59, 59, 999)), 'hour')).toBe(false, 'end of previous hour');\n  expect(m.isBefore(m, 'hour')).toBe(false, 'same moments are not before the same hour');\n  expect(+m).toEqual(+mCopy, 'isBefore hour should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before minute","suites":[],"updatePoint":{"line":420,"column":22,"index":33957},"line":420,"code":"test('is before minute', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'minute match');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 4, 9, 10)), 'minutes')).toBe(true, 'plural should work');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 4, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'month is later');\n  expect(m.isBefore(dayjs(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'month is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 3, 3, 4, 9, 10)), 'minute')).toBe(true, 'day is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 3, 4, 9, 10)), 'minute')).toBe(false, 'day is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 4, 4, 9, 10)), 'minute')).toBe(true, 'hour is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 2, 4, 9, 10)), 'minute')).toBe(false, 'hour is earler');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 5, 9, 10)), 'minute')).toBe(true, 'minute is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 3, 9, 10)), 'minute')).toBe(false, 'minute is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 0, 0)), 'minute')).toBe(false, 'exact start of minute');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 59, 999)), 'minute')).toBe(false, 'exact end of minute');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 5, 0, 0)), 'minute')).toBe(true, 'start of next minute');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 3, 59, 999)), 'minute')).toBe(false, 'end of previous minute');\n  expect(m.isBefore(m, 'minute')).toBe(false, 'same moments are not before the same minute');\n  expect(+m).toEqual(+mCopy, 'isBefore minute should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before second","suites":[],"updatePoint":{"line":442,"column":22,"index":35932},"line":442,"code":"test('is before second', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'second match');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'seconds')).toBe(true, 'plural should work');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'month is later');\n  expect(m.isBefore(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'month is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)), 'second')).toBe(true, 'day is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 1, 4, 5, 10)), 'second')).toBe(false, 'day is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)), 'second')).toBe(true, 'hour is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 4, 1, 5, 10)), 'second')).toBe(false, 'hour is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)), 'second')).toBe(true, 'minute is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), 'second')).toBe(false, 'minute is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)), 'second')).toBe(true, 'second is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 5)), 'second')).toBe(false, 'second is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 0)), 'second')).toBe(false, 'exact start of second');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 999)), 'second')).toBe(false, 'exact end of second');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 0)), 'second')).toBe(true, 'start of next second');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 999)), 'second')).toBe(false, 'end of previous second');\n  expect(m.isBefore(m, 'second')).toBe(false, 'same moments are not before the same second');\n  expect(+m).toEqual(+mCopy, 'isBefore second should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before millisecond","suites":[],"updatePoint":{"line":466,"column":27,"index":38122},"line":466,"code":"test('is before millisecond', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'millisecond match');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'milliseconds')).toBe(false, 'plural should work');\n  expect(m.isBefore(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'year is later');\n  expect(m.isBefore(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'year is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'month is later');\n  expect(m.isBefore(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'month is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'day is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(false, 'day is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(true, 'hour is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(false, 'hour is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(true, 'minute is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(false, 'minute is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(true, 'second is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(false, 'second is earlier');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(true, 'millisecond is later');\n  expect(m.isBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(false, 'millisecond is earlier');\n  expect(m.isBefore(m, 'millisecond')).toBe(false, 'same moments are not before the same millisecond');\n  expect(+m).toEqual(+mCopy, 'isBefore millisecond should not change moment');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"is before invalid","suites":[],"updatePoint":{"line":488,"column":23,"index":40188},"line":488,"code":"test('is before invalid', () => {\n  const m = dayjs();\n  const invalid = dayjs(null);\n  expect(m.isBefore(invalid)).toBe(false, 'valid moment is not before invalid moment');\n  expect(invalid.isBefore(m)).toBe(false, 'invalid moment is not before valid moment');\n  expect(m.isBefore(invalid, 'year')).toBe(false, 'invalid moment year');\n  expect(m.isBefore(invalid, 'month')).toBe(false, 'invalid moment month');\n  expect(m.isBefore(invalid, 'day')).toBe(false, 'invalid moment day');\n  expect(m.isBefore(invalid, 'hour')).toBe(false, 'invalid moment hour');\n  expect(m.isBefore(invalid, 'minute')).toBe(false, 'invalid moment minute');\n  expect(m.isBefore(invalid, 'second')).toBe(false, 'invalid moment second');\n  expect(m.isBefore(invalid, 'milliseconds')).toBe(false, 'invalid moment milliseconds');\n});","file":"comparison.test.js","skipped":false,"dir":"test"},{"name":"supports instanceof dayjs","suites":[],"updatePoint":{"line":9,"column":29,"index":184},"line":9,"code":"it('supports instanceof dayjs', () => {\n  expect(dayjs() instanceof dayjs).toBeTruthy();\n});","file":"constructor.test.js","skipped":false,"dir":"test"},{"name":"does not break isDayjs","suites":[],"updatePoint":{"line":12,"column":26,"index":274},"line":12,"code":"it('does not break isDayjs', () => {\n  expect(dayjs.isDayjs(dayjs())).toBeTruthy();\n});","file":"constructor.test.js","skipped":false,"dir":"test"},{"name":"Format no formatStr","suites":[],"updatePoint":{"line":12,"column":23,"index":269},"line":12,"code":"it('Format no formatStr', () => {\n  expect(dayjs().format()).toBe(moment().format());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format invalid date","suites":[],"updatePoint":{"line":15,"column":23,"index":359},"line":15,"code":"it('Format invalid date', () => {\n  expect(dayjs('').format()).toBe(new Date('').toString());\n  expect(dayjs('otherString').format()).toBe(new Date('otherString').toString());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Year YY YYYY","suites":[],"updatePoint":{"line":19,"column":23,"index":539},"line":19,"code":"it('Format Year YY YYYY', () => {\n  expect(dayjs().format('YY')).toBe(moment().format('YY'));\n  expect(dayjs().format('YYYY')).toBe(moment().format('YYYY'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Month M MM MMM MMMM","suites":[],"updatePoint":{"line":23,"column":30,"index":708},"line":23,"code":"it('Format Month M MM MMM MMMM', () => {\n  expect(dayjs().format('M')).toBe(moment().format('M'));\n  expect(dayjs().format('MM')).toBe(moment().format('MM'));\n  expect(dayjs().format('MMM')).toBe(moment().format('MMM'));\n  expect(dayjs().format('MMMM')).toBe(moment().format('MMMM'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Day of Month D DD 1 - 31","suites":[],"updatePoint":{"line":29,"column":35,"index":1002},"line":29,"code":"it('Format Day of Month D DD 1 - 31', () => {\n  expect(dayjs().format('D')).toBe(moment().format('D'));\n  expect(dayjs().format('DD')).toBe(moment().format('DD'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Day of Week d Sun - Sat","suites":[],"updatePoint":{"line":33,"column":34,"index":1169},"line":33,"code":"it('Format Day of Week d Sun - Sat', () => {\n  expect(dayjs().format('d')).toBe(moment().format('d'));\n  expect(dayjs().format('dd')).toBe(moment().format('dd'));\n  expect(dayjs().format('ddd')).toBe(moment().format('ddd'));\n  expect(dayjs().format('dddd')).toBe(moment().format('dddd'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Hour H HH 24-hour","suites":[],"updatePoint":{"line":39,"column":28,"index":1456},"line":39,"code":"it('Format Hour H HH 24-hour', () => {\n  expect(dayjs().format('H')).toBe(moment().format('H'));\n  expect(dayjs().format('HH')).toBe(moment().format('HH'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Hour h hh 12-hour","suites":[],"updatePoint":{"line":43,"column":28,"index":1617},"line":43,"code":"it('Format Hour h hh 12-hour', () => {\n  const time = '2018-05-02T00:00:00.000';\n  const expected = '12';\n  expect(dayjs(time).format('h')).toBe(expected);\n  expect(dayjs(time).format('h')).toBe(moment(time).format('h'));\n  expect(dayjs(time).format('hh')).toBe(expected);\n  expect(dayjs(time).format('hh')).toBe(moment(time).format('hh'));\n  const time2 = '2018-05-02T01:00:00.000';\n  expect(dayjs(time2).format('h')).toBe(moment(time2).format('h'));\n  expect(dayjs(time2).format('h')).toBe('1');\n  expect(dayjs(time2).format('hh')).toBe(moment(time2).format('hh'));\n  expect(dayjs(time2).format('hh')).toBe('01');\n  const time3 = '2018-05-02T23:00:00.000';\n  const expected3 = '11';\n  expect(dayjs(time3).format('h')).toBe(moment(time3).format('h'));\n  expect(dayjs(time3).format('h')).toBe(expected3);\n  expect(dayjs(time3).format('hh')).toBe(moment(time3).format('hh'));\n  expect(dayjs(time3).format('hh')).toBe(expected3);\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format meridiens a A am / pm","suites":[],"updatePoint":{"line":62,"column":32,"index":2553},"line":62,"code":"it('Format meridiens a A am / pm', () => {\n  const time = '2018-05-02T01:00:00.000';\n  expect(dayjs(time).format('a')).toBe('am');\n  expect(dayjs(time).format('a')).toBe(moment(time).format('a'));\n  expect(dayjs(time).format('A')).toBe('AM');\n  expect(dayjs(time).format('A')).toBe(moment(time).format('A'));\n  expect(dayjs(time).locale('ja').format('a')).toBe('午前');\n  expect(dayjs(time).locale('ja').format('a')).toBe(moment(time).locale('ja').format('a'));\n  const time2 = '2018-05-02T23:00:00.000';\n  expect(dayjs(time2).format('a')).toBe('pm');\n  expect(dayjs(time2).format('a')).toBe(moment(time2).format('a'));\n  expect(dayjs(time2).format('A')).toBe('PM');\n  expect(dayjs(time2).format('A')).toBe(moment(time2).format('A'));\n  expect(dayjs(time2).locale('ja').format('a')).toBe('午後');\n  expect(dayjs(time2).locale('ja').format('a')).toBe(moment(time2).locale('ja').format('a'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Minute m mm","suites":[],"updatePoint":{"line":78,"column":22,"index":3434},"line":78,"code":"it('Format Minute m mm', () => {\n  expect(dayjs().format('m')).toBe(moment().format('m'));\n  expect(dayjs().format('mm')).toBe(moment().format('mm'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Second s ss SSS","suites":[],"updatePoint":{"line":82,"column":26,"index":3593},"line":82,"code":"it('Format Second s ss SSS', () => {\n  expect(dayjs().format('s')).toBe(moment().format('s'));\n  expect(dayjs().format('ss')).toBe(moment().format('ss'));\n  expect(dayjs().format('SSS')).toBe(moment().format('SSS'));\n  const date = '2011-11-05T14:48:01.002Z';\n  expect(dayjs(date).format('s-ss-SSS')).toBe(moment(date).format('s-ss-SSS'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Time Zone ZZ","suites":[],"updatePoint":{"line":89,"column":23,"index":3934},"line":89,"code":"it('Format Time Zone ZZ', () => {\n  MockDate.set(new Date('2018-05-02T23:00:00.000'), 60 * 8);\n  expect(dayjs().format('Z')).toBe(moment().format('Z'));\n  expect(dayjs().format('ZZ')).toBe(moment().format('ZZ'));\n  MockDate.set(new Date('2018-05-02T23:00:00.000'), 60 * 8 * -1);\n  expect(dayjs().format('ZZ')).toBe(moment().format('ZZ'));\n  MockDate.set(new Date('2018-05-02T23:00:00.000'), 0);\n  expect(dayjs().format('ZZ')).toBe(moment().format('ZZ'));\n  MockDate.set(new Date('2018-05-02T23:00:00.000'), 60 * 10);\n  expect(dayjs().format('ZZ')).toBe(moment().format('ZZ'));\n  MockDate.set(new Date('2018-05-02T23:00:00.000'), 60 * 11 * -1);\n  expect(dayjs().format('ZZ')).toBe(moment().format('ZZ'));\n  MockDate.set(new Date('2018-05-02T23:00:00.000'), 60 * 5.5 * -1);\n  expect(dayjs().format('ZZ')).toBe(moment().format('ZZ'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format ddd dd MMM with short locale","suites":[],"updatePoint":{"line":104,"column":39,"index":4786},"line":104,"code":"it('Format ddd dd MMM with short locale', () => {\n  expect(dayjs().locale(th).format('dd')).toBe(moment().locale('th').format('dd'));\n  expect(dayjs().locale(th).format('ddd')).toBe(moment().locale('th').format('ddd'));\n  expect(dayjs().locale(th).format('MMM')).toBe(moment().locale('th').format('MMM'));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format token value is 0","suites":[],"updatePoint":{"line":109,"column":27,"index":5084},"line":109,"code":"it('Format token value is 0', () => {\n  const sundayDate = '2000-01-02';\n  const sundayStr = 'd H m s';\n  expect(dayjs(sundayDate).format(sundayStr)).toBe(moment(sundayDate).format(sundayStr));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Complex with other string - : / ","suites":[],"updatePoint":{"line":114,"column":43,"index":5298},"line":114,"code":"it('Format Complex with other string - : / ', () => {\n  const string = 'YY-M-D / HH:mm:ss';\n  expect(dayjs().format(string)).toBe(moment().format(string));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Format Escaping characters","suites":[],"updatePoint":{"line":118,"column":30,"index":5445},"line":118,"code":"it('Format Escaping characters', () => {\n  let string = '[Z] Z';\n  expect(dayjs().format(string)).toBe(moment().format(string));\n  string = '[Z] Z [Z]';\n  expect(dayjs().format(string)).toBe(moment().format(string));\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"empty -> default milliseconds","suites":["Difference"],"updatePoint":{"line":125,"column":35,"index":5702},"line":125,"code":"  it('empty -> default milliseconds', () => {\n    const dateString = '20110101';\n    const dayjsA = dayjs();\n    const dayjsB = dayjs(dateString);\n    const momentA = moment();\n    const momentB = moment(dateString);\n    expect(dayjsA.diff(dayjsB)).toBe(momentA.diff(momentB));\n  });","file":"display.test.js","skipped":false,"dir":"test"},{"name":"diff -> none dayjs object","suites":["Difference"],"updatePoint":{"line":133,"column":31,"index":5982},"line":133,"code":"  it('diff -> none dayjs object', () => {\n    const dateString = '2013-02-08';\n    const dayjsA = dayjs();\n    const dayjsB = new Date(dateString);\n    const momentA = moment();\n    const momentB = new Date(dateString);\n    expect(dayjsA.diff(dayjsB)).toBe(momentA.diff(momentB));\n  });","file":"display.test.js","skipped":false,"dir":"test"},{"name":"diff -> in seconds, minutes, hours, days, weeks, months, quarters, years ","suites":["Difference"],"updatePoint":{"line":141,"column":79,"index":6317},"line":141,"code":"  it('diff -> in seconds, minutes, hours, days, weeks, months, quarters, years ', () => {\n    const dayjsA = dayjs();\n    const dayjsB = dayjs().add(1000, 'days');\n    const dayjsC = dayjs().subtract(1000, 'days');\n    const momentA = moment();\n    const momentB = moment().add(1000, 'days');\n    const momentC = moment().subtract(1000, 'days');\n    const units = ['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'quarters', 'years'];\n    units.forEach(unit => {\n      expect(dayjsA.diff(dayjsB, unit)).toBe(momentA.diff(momentB, unit));\n      expect(dayjsA.diff(dayjsB, unit, true)).toBe(momentA.diff(momentB, unit, true));\n      expect(dayjsA.diff(dayjsC, unit)).toBe(momentA.diff(momentC, unit));\n      expect(dayjsA.diff(dayjsC, unit, true)).toBe(momentA.diff(momentC, unit, true));\n    });\n  });","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Special diff in month according to moment.js","suites":["Difference"],"updatePoint":{"line":156,"column":50,"index":7099},"line":156,"code":"  it('Special diff in month according to moment.js', () => {\n    const dayjsA = dayjs('20160115');\n    const dayjsB = dayjs('20160215');\n    const dayjsC = dayjs('20170115');\n    const momentA = moment('20160115');\n    const momentB = moment('20160215');\n    const momentC = moment('20170115');\n    const units = ['months', 'quarters', 'years'];\n    units.forEach(unit => {\n      expect(dayjsA.diff(dayjsB, unit)).toBe(momentA.diff(momentB, unit));\n      expect(dayjsA.diff(dayjsB, unit, true)).toBe(momentA.diff(momentB, unit, true));\n      expect(dayjsA.diff(dayjsC, unit)).toBe(momentA.diff(momentC, unit));\n      expect(dayjsA.diff(dayjsC, unit, true)).toBe(momentA.diff(momentC, unit, true));\n    });\n  });","file":"display.test.js","skipped":false,"dir":"test"},{"name":"MonthDiff","suites":["Difference"],"updatePoint":{"line":171,"column":15,"index":7776},"line":171,"code":"  it('MonthDiff', () => {\n    expect(dayjs('2018-08-08').diff(dayjs('2018-08-08'), 'month')).toEqual(0);\n    expect(dayjs('2018-09-08').diff(dayjs('2018-08-08'), 'month')).toEqual(1);\n    expect(dayjs('2018-08-08').diff(dayjs('2018-09-08'), 'month')).toEqual(-1);\n    expect(dayjs('2018-01-01').diff(dayjs('2018-01-01'), 'month')).toEqual(0);\n  });","file":"display.test.js","skipped":false,"dir":"test"},{"name":"undefined edge case","suites":["Difference"],"updatePoint":{"line":177,"column":25,"index":8135},"line":177,"code":"  it('undefined edge case', () => {\n    expect(dayjs().diff(undefined, 'seconds')).toBeDefined();\n  });","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Unix Timestamp (milliseconds)","suites":["Difference"],"updatePoint":{"line":181,"column":33,"index":8251},"line":181,"code":"it('Unix Timestamp (milliseconds)', () => {\n  expect(dayjs().valueOf()).toBe(moment().valueOf());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Unix Timestamp (seconds)","suites":["Difference"],"updatePoint":{"line":184,"column":28,"index":8348},"line":184,"code":"it('Unix Timestamp (seconds)', () => {\n  expect(dayjs().unix()).toBe(moment().unix());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Days in Month","suites":["Difference"],"updatePoint":{"line":187,"column":17,"index":8428},"line":187,"code":"it('Days in Month', () => {\n  expect(dayjs().daysInMonth()).toBe(moment().daysInMonth());\n  expect(dayjs('20140201').daysInMonth()).toBe(moment('20140201').daysInMonth());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Utc Offset","suites":["Difference"],"updatePoint":{"line":191,"column":14,"index":8601},"line":191,"code":"it('Utc Offset', () => {\n  expect(dayjs('2013-01-01T00:00:00.000').utcOffset()).toBe(moment('2013-01-01T00:00:00.000').utcOffset());\n  expect(dayjs('2013-01-01T05:00:00.000').utcOffset()).toBe(moment('2013-01-01T05:00:00.000').utcOffset());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"As Javascript Date -> toDate","suites":["Difference"],"updatePoint":{"line":195,"column":32,"index":8864},"line":195,"code":"it('As Javascript Date -> toDate', () => {\n  const base = dayjs();\n  const momentBase = moment();\n  const jsDate = base.toDate();\n  expect(jsDate).toEqual(momentBase.toDate());\n  expect(jsDate).toEqual(new Date());\n  jsDate.setFullYear(1970);\n  expect(jsDate.toUTCString()).not.toBe(base.toString());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"As JSON -> toJSON","suites":["Difference"],"updatePoint":{"line":204,"column":21,"index":9158},"line":204,"code":"it('As JSON -> toJSON', () => {\n  expect(dayjs().toJSON()).toBe(moment().toJSON());\n  global.console.warn = jest.genMockFunction(); // moment.js otherString will throw warn\n  expect(dayjs('otherString').toJSON()).toBe(moment('otherString').toJSON());\n  expect(dayjs('otherString').toJSON()).toBe(null);\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"As ISO 8601 String -> toISOString e.g. 2013-02-04T22:44:30.652Z","suites":["Difference"],"updatePoint":{"line":210,"column":67,"index":9511},"line":210,"code":"it('As ISO 8601 String -> toISOString e.g. 2013-02-04T22:44:30.652Z', () => {\n  expect(dayjs().toISOString()).toBe(moment().toISOString());\n});","file":"display.test.js","skipped":false,"dir":"test"},{"name":"Year","suites":[],"updatePoint":{"line":10,"column":8,"index":192},"line":10,"code":"it('Year', () => {\n  expect(dayjs().get('year')).toBe(moment().get('year'));\n  expect(dayjs().year()).toBe(moment().year());\n  expect(dayjs().year(0).valueOf()).toBe(moment().year(0).valueOf());\n  expect(dayjs().year(2000).valueOf()).toBe(moment().year(2000).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Month","suites":[],"updatePoint":{"line":16,"column":9,"index":468},"line":16,"code":"it('Month', () => {\n  expect(dayjs().get('month')).toBe(moment().get('month'));\n  expect(dayjs().month()).toBe(moment().month());\n  expect(dayjs().month(0).valueOf()).toBe(moment().month(0).valueOf());\n  expect(dayjs().month(1).valueOf()).toBe(moment().month(1).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Day of Week","suites":[],"updatePoint":{"line":22,"column":15,"index":752},"line":22,"code":"it('Day of Week', () => {\n  expect(dayjs().get('day')).toBe(moment().get('day'));\n  expect(dayjs().day()).toBe(moment().day());\n  expect(dayjs().day(0).format()).toBe(moment().day(0).format());\n  expect(dayjs().day(1).format()).toBe(moment().day(1).format());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Date","suites":[],"updatePoint":{"line":28,"column":8,"index":1009},"line":28,"code":"it('Date', () => {\n  expect(dayjs().get('date')).toBe(moment().get('date'));\n  expect(dayjs().date()).toBe(moment().date());\n  expect(dayjs().date(0).valueOf()).toBe(moment().date(0).valueOf());\n  expect(dayjs().date(1).valueOf()).toBe(moment().date(1).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Hour","suites":[],"updatePoint":{"line":34,"column":8,"index":1278},"line":34,"code":"it('Hour', () => {\n  expect(dayjs().get('hour')).toBe(moment().get('hour'));\n  expect(dayjs().hour()).toBe(moment().hour());\n  expect(dayjs().hour(0).valueOf()).toBe(moment().hour(0).valueOf());\n  expect(dayjs().hour(1).valueOf()).toBe(moment().hour(1).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Minute","suites":[],"updatePoint":{"line":40,"column":10,"index":1549},"line":40,"code":"it('Minute', () => {\n  expect(dayjs().get('minute')).toBe(moment().get('minute'));\n  expect(dayjs().minute()).toBe(moment().minute());\n  expect(dayjs().minute(0).valueOf()).toBe(moment().minute(0).valueOf());\n  expect(dayjs().minute(1).valueOf()).toBe(moment().minute(1).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Second","suites":[],"updatePoint":{"line":46,"column":10,"index":1836},"line":46,"code":"it('Second', () => {\n  expect(dayjs().get('second')).toBe(moment().get('second'));\n  expect(dayjs().second()).toBe(moment().second());\n  expect(dayjs().second(0).valueOf()).toBe(moment().second(0).valueOf());\n  expect(dayjs().second(1).valueOf()).toBe(moment().second(1).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Millisecond","suites":[],"updatePoint":{"line":52,"column":15,"index":2128},"line":52,"code":"it('Millisecond', () => {\n  expect(dayjs().get('millisecond')).toBe(moment().get('millisecond'));\n  expect(dayjs().millisecond()).toBe(moment().millisecond());\n  expect(dayjs().millisecond(0).valueOf()).toBe(moment().millisecond(0).valueOf());\n  expect(dayjs().millisecond(1).valueOf()).toBe(moment().millisecond(1).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Day","suites":[],"updatePoint":{"line":58,"column":11,"index":2456},"line":58,"code":"it('Set Day', () => {\n  expect(dayjs().set('date', 30).valueOf()).toBe(moment().set('date', 30).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Day of Week","suites":[],"updatePoint":{"line":61,"column":19,"index":2576},"line":61,"code":"it('Set Day of Week', () => {\n  expect(dayjs().set('day', 0).valueOf()).toBe(moment().set('day', 0).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Month","suites":[],"updatePoint":{"line":64,"column":13,"index":2686},"line":64,"code":"it('Set Month', () => {\n  expect(dayjs().set('month', 11).valueOf()).toBe(moment().set('month', 11).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Year","suites":[],"updatePoint":{"line":67,"column":12,"index":2801},"line":67,"code":"it('Set Year', () => {\n  expect(dayjs().set('year', 2008).valueOf()).toBe(moment().set('year', 2008).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Hour","suites":[],"updatePoint":{"line":70,"column":12,"index":2918},"line":70,"code":"it('Set Hour', () => {\n  expect(dayjs().set('hour', 6).valueOf()).toBe(moment().set('hour', 6).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Minute","suites":[],"updatePoint":{"line":73,"column":14,"index":3031},"line":73,"code":"it('Set Minute', () => {\n  expect(dayjs().set('minute', 59).valueOf()).toBe(moment().set('minute', 59).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Second","suites":[],"updatePoint":{"line":76,"column":14,"index":3150},"line":76,"code":"it('Set Second', () => {\n  expect(dayjs().set('second', 59).valueOf()).toBe(moment().set('second', 59).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Millisecond","suites":[],"updatePoint":{"line":79,"column":19,"index":3274},"line":79,"code":"it('Set Millisecond', () => {\n  expect(dayjs().set('millisecond', 999).valueOf()).toBe(moment().set('millisecond', 999).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Month and Year in last day of month","suites":[],"updatePoint":{"line":82,"column":43,"index":3434},"line":82,"code":"it('Set Month and Year in last day of month', () => {\n  // 2011-07-31 -> 2011-02-28\n  const origin = dayjs('2011-07-31T14:48:00.000Z');\n  const setMonth = origin.set('month', 1);\n  expect(setMonth.month()).toBe(1);\n  expect(origin.date()).toBe(31);\n  expect(setMonth.date()).toBe(28);\n  // 2000-02-29 -> 2001-02-28\n  const origin2 = dayjs('2000-02-29T14:48:00.000Z');\n  const setYear = origin2.set('year', 2001);\n  expect(setYear.month()).toBe(1);\n  expect(origin2.date()).toBe(29);\n  expect(setYear.date()).toBe(28);\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Set Unknown String","suites":[],"updatePoint":{"line":96,"column":22,"index":3935},"line":96,"code":"it('Set Unknown String', () => {\n  const newDate = dayjs().set('Unknown String', 1);\n  expect(newDate.valueOf()).toBe(moment().set('Unknown String', 1).valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"Immutable Set","suites":[],"updatePoint":{"line":100,"column":17,"index":4098},"line":100,"code":"it('Immutable Set', () => {\n  const dayjsA = dayjs();\n  const dayjsB = dayjsA.set('year', 2011);\n  const momentA = moment();\n  const momentB = momentA.set('year', 2011);\n  expect(dayjsA.valueOf()).not.toBe(dayjsB.valueOf());\n  expect(momentA.valueOf()).toBe(momentB.valueOf());\n});","file":"get-set.test.js","skipped":false,"dir":"test"},{"name":"add Duration object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":16,"column":46,"index":446},"line":16,"code":"  it('add Duration object returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const durationToAdd = dayjs.duration(6, 'hours');\n    const testDate = baseDate.add(durationToAdd);\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 20:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"subtract Duration object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":22,"column":51,"index":761},"line":22,"code":"  it('subtract Duration object returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const durationToAdd = dayjs.duration(6, 'hours');\n    const testDate = baseDate.subtract(durationToAdd);\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 08:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"add number with unit returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":28,"column":47,"index":1077},"line":28,"code":"  it('add number with unit returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.add(6, 'hours');\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 20:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"subtract number with unit returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":33,"column":52,"index":1336},"line":33,"code":"  it('subtract number with unit returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.subtract(6, 'hours');\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 08:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"parse string returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":38,"column":39,"index":1587},"line":38,"code":"  it('parse string returns correct date', () => {\n    const testDate = dayjs('2022-06-26T14:01:02.003');\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 14:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"parse object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":42,"column":39,"index":1786},"line":42,"code":"  it('parse object returns correct date', () => {\n    const testDate = dayjs({\n      year: '2022',\n      month: '05',\n      day: '26',\n      hour: '14',\n      minute: '01',\n      second: '02',\n      millisecond: '003'\n    });\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 14:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"set hour with number returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":54,"column":47,"index":2114},"line":54,"code":"  it('set hour with number returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.hour(10);\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 10:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"set hour with object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":59,"column":47,"index":2361},"line":59,"code":"  it('set hour with object returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.set({\n      hour: '10'\n    });\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 10:01:02.003');\n  });","file":"issues/issue2027.correct-order.test.js","skipped":false,"dir":"test"},{"name":"add Duration object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":16,"column":46,"index":446},"line":16,"code":"  it('add Duration object returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const durationToAdd = dayjs.duration(6, 'hours');\n    const testDate = baseDate.add(durationToAdd);\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 20:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"subtract Duration object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":22,"column":51,"index":761},"line":22,"code":"  it('subtract Duration object returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const durationToAdd = dayjs.duration(6, 'hours');\n    const testDate = baseDate.subtract(durationToAdd);\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 08:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"add number with unit returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":28,"column":47,"index":1077},"line":28,"code":"  it('add number with unit returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.add(6, 'hours');\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 20:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"subtract number with unit returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":33,"column":52,"index":1336},"line":33,"code":"  it('subtract number with unit returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.subtract(6, 'hours');\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 08:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"parse string returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":38,"column":39,"index":1587},"line":38,"code":"  it('parse string returns correct date', () => {\n    const testDate = dayjs('2022-06-26T14:01:02.003');\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 14:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"parse object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":42,"column":39,"index":1786},"line":42,"code":"  it('parse object returns correct date', () => {\n    const testDate = dayjs({\n      year: '2022',\n      month: '05',\n      day: '26',\n      hour: '14',\n      minute: '01',\n      second: '02',\n      millisecond: '003'\n    });\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 14:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"set hour with number returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":54,"column":47,"index":2114},"line":54,"code":"  it('set hour with number returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.hour(10);\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 10:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"set hour with object returns correct date","suites":["issue 2027 - order objectSupport > Duration"],"updatePoint":{"line":59,"column":47,"index":2361},"line":59,"code":"  it('set hour with object returns correct date', () => {\n    const baseDate = dayjs('2022-06-26T14:01:02.003');\n    const testDate = baseDate.set({\n      hour: '10'\n    });\n    expect(testDate.format('YYYY-MM-DD HH:mm:ss.SSS')).toBe('2022-06-26 10:01:02.003');\n  });","file":"issues/issue2027.swapped-order.test.js","skipped":false,"dir":"test"},{"name":"Uses spanish locale through constructor","suites":[],"updatePoint":{"line":13,"column":43,"index":360},"line":13,"code":"it('Uses spanish locale through constructor', () => {\n  // not recommend\n  expect(dayjs('2018-4-28', {\n    locale: es\n  }).format(format)).toBe('sábado 28, abril');\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"set locale for one instance only","suites":[],"updatePoint":{"line":19,"column":36,"index":522},"line":19,"code":"it('set locale for one instance only', () => {\n  expect(dayjs('2018-4-28').format(format)).toBe('Saturday 28, April');\n  expect(dayjs('2018-4-28').locale(es).format(format)).toBe('sábado 28, abril');\n  expect(dayjs('2018-4-28').format(format)).toBe('Saturday 28, April');\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"set global locale","suites":[],"updatePoint":{"line":24,"column":21,"index":783},"line":24,"code":"it('set global locale', () => {\n  dayjs.locale('en');\n  expect(dayjs('2018-4-28').format(format)).toBe('Saturday 28, April');\n  dayjs.locale(es);\n  expect(dayjs('2018-4-28').format(format)).toBe('sábado 28, abril');\n  dayjs.locale('en');\n  expect(dayjs('2018-4-28').format(format)).toBe('Saturday 28, April');\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"get instance locale name","suites":[],"updatePoint":{"line":32,"column":28,"index":1104},"line":32,"code":"it('get instance locale name', () => {\n  expect(dayjs().locale()).toBe('en');\n  expect(dayjs().locale()).toBe(moment().locale());\n  expect(dayjs().locale('es').locale()).toBe('es');\n  expect(dayjs().locale('es').locale()).toBe(moment().locale('es').locale());\n  dayjs.locale(es);\n  moment.locale('es');\n  expect(dayjs().locale()).toBe('es');\n  expect(dayjs().locale()).toBe(moment().locale());\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"immutable instance locale","suites":[],"updatePoint":{"line":42,"column":29,"index":1503},"line":42,"code":"it('immutable instance locale', () => {\n  dayjs.locale('en');\n  const origin = dayjs('2018-4-28');\n  expect(origin.format(format)).toBe('Saturday 28, April');\n  expect(origin.locale('es').format(format)).toBe('sábado 28, abril');\n  const changed = origin.locale('es');\n  expect(changed.format(format)).toBe('sábado 28, abril');\n  expect(origin.format(format)).toBe('Saturday 28, April');\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"User custom locale","suites":[],"updatePoint":{"line":51,"column":22,"index":1888},"line":51,"code":"it('User custom locale', () => {\n  expect(dayjs('2018-4-28').locale('xx', {\n    weekdays: Array(7).fill('week'),\n    months: Array(12).fill('month')\n  }).format(format)).toBe('week 28, month');\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"Clone","suites":["Instance locale inheritance"],"updatePoint":{"line":59,"column":11,"index":2172},"line":59,"code":"  it('Clone', () => {\n    expect(esDayjs.clone().format(format)).toBe('sábado 28, abril');\n    expect(dayjs(esDayjs).format(format)).toBe('sábado 28, abril');\n  });","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"StartOf EndOf","suites":["Instance locale inheritance"],"updatePoint":{"line":63,"column":19,"index":2345},"line":63,"code":"  it('StartOf EndOf', () => {\n    expect(esDayjs.startOf('year').format(format)).toBe('lunes 1, enero');\n    expect(esDayjs.endOf('day').format(format)).toBe('sábado 28, abril');\n  });","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"Set","suites":["Instance locale inheritance"],"updatePoint":{"line":67,"column":9,"index":2520},"line":67,"code":"  it('Set', () => {\n    expect(esDayjs.set('year', 2017).format(format)).toBe('viernes 28, abril');\n  });","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"Add","suites":["Instance locale inheritance"],"updatePoint":{"line":70,"column":9,"index":2626},"line":70,"code":"  it('Add', () => {\n    expect(esDayjs.add(1, 'year').format(format)).toBe('domingo 28, abril');\n    expect(esDayjs.add(1, 'month').format(format)).toBe('lunes 28, mayo');\n    expect(esDayjs.add(1, 'minute').format(format)).toBe('sábado 28, abril');\n  });","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"dayjs.locale() returns locale name","suites":["Instance locale inheritance"],"updatePoint":{"line":75,"column":40,"index":2913},"line":75,"code":"  it('dayjs.locale() returns locale name', () => {\n    dayjs.locale(es);\n    moment.locale('es');\n    expect(dayjs.locale()).toBe(moment.locale());\n    dayjs.locale('en');\n    moment.locale('en');\n    expect(dayjs.locale()).toBe(moment.locale());\n  });","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"Not supported locale string fallback to previous one (instance)","suites":["Instance locale inheritance"],"updatePoint":{"line":84,"column":67,"index":3197},"line":84,"code":"it('Not supported locale string fallback to previous one (instance)', () => {\n  const D = dayjs();\n  expect(D.locale()).toBe('en');\n  const D2 = D.locale(NOT_SUPPORTED_LOCALE_STRING);\n  expect(D2.locale()).toBe('en');\n  expect(D2.format()).toBe(D.format());\n  const D3 = D2.locale('es');\n  expect(D3.locale()).toBe('es');\n  const D4 = D3.locale(NOT_SUPPORTED_LOCALE_STRING);\n  expect(D4.locale()).toBe('es');\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"Not supported locale string fallback to previous one (global)","suites":["Instance locale inheritance"],"updatePoint":{"line":95,"column":65,"index":3608},"line":95,"code":"it('Not supported locale string fallback to previous one (global)', () => {\n  expect(dayjs().locale()).toBe('en');\n  dayjs.locale(NOT_SUPPORTED_LOCALE_STRING);\n  expect(dayjs().locale()).toBe('en');\n  dayjs.locale('es');\n  expect(dayjs().locale()).toBe('es');\n  dayjs.locale(NOT_SUPPORTED_LOCALE_STRING);\n  expect(dayjs().locale()).toBe('es');\n});","file":"locale.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":12,"index":331},"line":13,"code":"it('Meridiem', () => {\n  dayjs.locale(locale);\n  expect(dayjs('2020-01-01 03:00:00').locale('ar-dz').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 11:00:00').locale('ar-dz').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 16:00:00').locale('ar-dz').format('A')).toEqual('م');\n  expect(dayjs('2020-01-01 20:00:00').locale('ar-dz').format('A')).toEqual('م');\n});","file":"locale/ar-dz.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":12,"index":331},"line":13,"code":"it('Meridiem', () => {\n  dayjs.locale(locale);\n  expect(dayjs('2020-01-01 03:00:00').locale('ar-iq').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 11:00:00').locale('ar-iq').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 16:00:00').locale('ar-iq').format('A')).toEqual('م');\n  expect(dayjs('2020-01-01 20:00:00').locale('ar-iq').format('A')).toEqual('م');\n});","file":"locale/ar-iq.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":12,"index":331},"line":13,"code":"it('Meridiem', () => {\n  dayjs.locale(locale);\n  expect(dayjs('2020-01-01 03:00:00').locale('ar-kw').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 11:00:00').locale('ar-kw').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 16:00:00').locale('ar-kw').format('A')).toEqual('م');\n  expect(dayjs('2020-01-01 20:00:00').locale('ar-kw').format('A')).toEqual('م');\n});","file":"locale/ar-kw.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":12,"index":331},"line":13,"code":"it('Meridiem', () => {\n  dayjs.locale(locale);\n  expect(dayjs('2020-01-01 03:00:00').locale('ar-ly').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 11:00:00').locale('ar-ly').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 16:00:00').locale('ar-ly').format('A')).toEqual('م');\n  expect(dayjs('2020-01-01 20:00:00').locale('ar-ly').format('A')).toEqual('م');\n});","file":"locale/ar-ly.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":12,"index":331},"line":13,"code":"it('Meridiem', () => {\n  dayjs.locale(locale);\n  expect(dayjs('2020-01-01 03:00:00').locale('ar-ma').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 11:00:00').locale('ar-ma').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 16:00:00').locale('ar-ma').format('A')).toEqual('م');\n  expect(dayjs('2020-01-01 20:00:00').locale('ar-ma').format('A')).toEqual('م');\n});","file":"locale/ar-ma.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":12,"index":331},"line":13,"code":"it('Meridiem', () => {\n  dayjs.locale(locale);\n  expect(dayjs('2020-01-01 03:00:00').locale('ar-sa').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 11:00:00').locale('ar-sa').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 16:00:00').locale('ar-sa').format('A')).toEqual('م');\n  expect(dayjs('2020-01-01 20:00:00').locale('ar-sa').format('A')).toEqual('م');\n});","file":"locale/ar-sa.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":12,"index":331},"line":13,"code":"it('Meridiem', () => {\n  dayjs.locale(locale);\n  expect(dayjs('2020-01-01 03:00:00').locale('ar-tn').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 11:00:00').locale('ar-tn').format('A')).toEqual('ص');\n  expect(dayjs('2020-01-01 16:00:00').locale('ar-tn').format('A')).toEqual('م');\n  expect(dayjs('2020-01-01 20:00:00').locale('ar-tn').format('A')).toEqual('م');\n});","file":"locale/ar-tn.test.js","skipped":false,"dir":"test"},{"name":"Format Month with locale function","suites":[],"updatePoint":{"line":17,"column":37,"index":524},"line":17,"code":"it('Format Month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsAR = dayjs().locale('ar').add(i, 'day');\n    const momentAR = moment().locale('ar').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'MMMM';\n    const testFormat3 = 'MMM';\n    expect(dayjsAR.format(testFormat1)).toEqual(momentAR.format(testFormat1));\n    expect(dayjsAR.format(testFormat2)).toEqual(momentAR.format(testFormat2));\n    expect(dayjsAR.format(testFormat3)).toEqual(momentAR.format(testFormat3));\n  }\n});","file":"locale/ar.test.js","skipped":false,"dir":"test"},{"name":"Preparse with locale function","suites":[],"updatePoint":{"line":29,"column":33,"index":1070},"line":29,"code":"it('Preparse with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    dayjs.locale('ar');\n    const momentAR = moment().locale('ar').add(i, 'day');\n    expect(dayjs(momentAR.format()).format()).toEqual(momentAR.format());\n  }\n});","file":"locale/ar.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X gets formatted","suites":[],"updatePoint":{"line":36,"column":44,"index":1325},"line":36,"code":"it('RelativeTime: Time from X gets formatted', () => {\n  const T = [[44.4, 'second', 'منذ ثانية واحدة']];\n  T.forEach(t => {\n    dayjs.locale('ar');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(t[2]);\n  });\n});","file":"locale/ar.test.js","skipped":false,"dir":"test"},{"name":"Format Month with locale function","suites":[],"updatePoint":{"line":15,"column":37,"index":432},"line":15,"code":"it('Format Month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsBG = dayjs().locale('bg').add(i, 'day');\n    const momentBG = moment().locale('bg').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'MMMM';\n    const testFormat3 = 'MMM';\n    expect(dayjsBG.format(testFormat1)).toEqual(momentBG.format(testFormat1));\n    expect(dayjsBG.format(testFormat2)).toEqual(momentBG.format(testFormat2));\n    expect(dayjsBG.format(testFormat3)).toEqual(momentBG.format(testFormat3));\n  }\n});","file":"locale/bg.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":27,"column":29,"index":974},"line":27,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [130, 'second'],\n  // two minutes\n  [43, 'minute'],\n  // 44 minutes\n  [1, 'hour'],\n  // 1 hour\n  [21, 'hour'],\n  // 21 hours\n  [2, 'day'],\n  // 2 days\n  [25, 'day'],\n  // 25 days\n  [2, 'month'],\n  // 2 months\n  [10, 'month'],\n  // 10 months\n  [18, 'month'],\n  // 2 years\n  [15, 'year'] // 15 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('bg');\n    moment.locale('bg');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/bg.test.js","skipped":false,"dir":"test"},{"name":"Ordinal","suites":[],"updatePoint":{"line":60,"column":11,"index":1670},"line":60,"code":"it('Ordinal', () => {\n  dayjs.locale('bg');\n  moment.locale('bg');\n  for (let d = 1; d <= 31; d += 1) {\n    const day = d < 10 ? `0${d}` : d;\n    const date = `2021-01-${day}`;\n    expect(dayjs(date).format('Do')).toBe(moment(date).format('Do'));\n  }\n});","file":"locale/bg.test.js","skipped":false,"dir":"test"},{"name":"Format Month with locale function","suites":[],"updatePoint":{"line":17,"column":37,"index":527},"line":17,"code":"it('Format Month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsBN = dayjs().locale('bn-bd').add(i, 'day');\n    const momentBN = moment().locale('bn-bd').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'MMMM';\n    const testFormat3 = 'MMM';\n    expect(dayjsBN.format(testFormat1)).toEqual(momentBN.format(testFormat1));\n    expect(dayjsBN.format(testFormat2)).toEqual(momentBN.format(testFormat2));\n    expect(dayjsBN.format(testFormat3)).toEqual(momentBN.format(testFormat3));\n  }\n});","file":"locale/bn-bd.test.js","skipped":false,"dir":"test"},{"name":"Month short","suites":[],"updatePoint":{"line":29,"column":15,"index":1061},"line":29,"code":"it('Month short', () => {\n  const date = '2021-02-01T05:54:32.005Z';\n  const dayjsBN = dayjs(date).locale('bn-bd');\n  const momentBN = moment(date).locale('bn-bd');\n  const testFormat1 = 'DD MMMM YYYY MMM';\n  expect(dayjsBN.format(testFormat1)).toEqual(momentBN.format(testFormat1));\n});","file":"locale/bn-bd.test.js","skipped":false,"dir":"test"},{"name":"Preparse with locale function","suites":[],"updatePoint":{"line":36,"column":33,"index":1367},"line":36,"code":"it('Preparse with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    dayjs.locale('bn-bd');\n    const momentBN = moment().locale('bn-bd').add(i, 'day');\n    expect(dayjs(momentBN.format()).format()).toEqual(momentBN.format());\n  }\n});","file":"locale/bn-bd.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":43,"column":29,"index":1613},"line":43,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [130, 'second'],\n  // two minutes\n  [43, 'minute'],\n  // 44 minutes\n  [1, 'hour'],\n  // 1 hour\n  [21, 'hour'],\n  // 21 hours\n  [2, 'day'],\n  // 2 days\n  [25, 'day'],\n  // 25 days\n  [2, 'month'],\n  // 2 months\n  [10, 'month'],\n  // 10 months\n  [18, 'month'],\n  // 2 years\n  [15, 'year'] // 15 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('bn-bd');\n    moment.locale('bn-bd');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/bn-bd.test.js","skipped":false,"dir":"test"},{"name":"Format Month with locale function","suites":[],"updatePoint":{"line":17,"column":37,"index":524},"line":17,"code":"it('Format Month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsBN = dayjs().locale('bn').add(i, 'day');\n    const momentBN = moment().locale('bn').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'MMMM';\n    const testFormat3 = 'MMM';\n    expect(dayjsBN.format(testFormat1)).toEqual(momentBN.format(testFormat1));\n    expect(dayjsBN.format(testFormat2)).toEqual(momentBN.format(testFormat2));\n    expect(dayjsBN.format(testFormat3)).toEqual(momentBN.format(testFormat3));\n  }\n});","file":"locale/bn.test.js","skipped":false,"dir":"test"},{"name":"Month short","suites":[],"updatePoint":{"line":29,"column":15,"index":1052},"line":29,"code":"it('Month short', () => {\n  const date = '2021-02-01T05:54:32.005Z';\n  const dayjsBN = dayjs(date).locale('bn');\n  const momentBN = moment(date).locale('bn');\n  const testFormat1 = 'DD MMMM YYYY MMM';\n  expect(dayjsBN.format(testFormat1)).toEqual(momentBN.format(testFormat1));\n});","file":"locale/bn.test.js","skipped":false,"dir":"test"},{"name":"Preparse with locale function","suites":[],"updatePoint":{"line":36,"column":33,"index":1352},"line":36,"code":"it('Preparse with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    dayjs.locale('bn');\n    const momentBN = moment().locale('bn').add(i, 'day');\n    expect(dayjs(momentBN.format()).format()).toEqual(momentBN.format());\n  }\n});","file":"locale/bn.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":43,"column":29,"index":1592},"line":43,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [130, 'second'],\n  // two minutes\n  [43, 'minute'],\n  // 44 minutes\n  [1, 'hour'],\n  // 1 hour\n  [21, 'hour'],\n  // 21 hours\n  [2, 'day'],\n  // 2 days\n  [25, 'day'],\n  // 25 days\n  [2, 'month'],\n  // 2 months\n  [10, 'month'],\n  // 10 months\n  [18, 'month'],\n  // 2 years\n  [15, 'year'] // 15 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('bn');\n    moment.locale('bn');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/bn.test.js","skipped":false,"dir":"test"},{"name":"Format Month with locale function","suites":[],"updatePoint":{"line":13,"column":37,"index":340},"line":13,"code":"it('Format Month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsBR = dayjs().locale('br').add(i, 'day');\n    const momentBR = moment().locale('br').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'MMMM';\n    const testFormat3 = 'MMM';\n    expect(dayjsBR.format(testFormat1)).toEqual(momentBR.format(testFormat1));\n    expect(dayjsBR.format(testFormat2)).toEqual(momentBR.format(testFormat2));\n    expect(dayjsBR.format(testFormat3)).toEqual(momentBR.format(testFormat3));\n  }\n});","file":"locale/br.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":25,"column":29,"index":882},"line":25,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [130, 'second'],\n  // two minutes\n  [43, 'minute'],\n  // 44 minutes\n  [1, 'hour'],\n  // 1 hour\n  [21, 'hour'],\n  // 21 hours\n  [2, 'day'],\n  // 2 days\n  [25, 'day'],\n  // 25 days\n  [2, 'month'],\n  // 2 months\n  [10, 'month'],\n  // 10 months\n  [18, 'month'],\n  // 2 years\n  [15, 'year'] // 15 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('br');\n    moment.locale('br');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/br.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":13,"column":29,"index":332},"line":13,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [2, 'minute'],\n  // 2 minutes\n  [43, 'minute'],\n  // 43 minutes\n  [45, 'minute'],\n  // an hour\n  [3, 'hour'],\n  // 3 hours\n  [21, 'hour'],\n  // 21 hours\n  [1, 'day'],\n  // a day\n  [3, 'day'],\n  // 3 day\n  [25, 'day'],\n  // 25 days\n  [1, 'month'],\n  // a month\n  [2, 'month'],\n  // 2 month\n  [10, 'month'],\n  // 10 month\n  [1, 'year'],\n  // a year\n  [2, 'year'],\n  // 2 year\n  [5, 'year'],\n  // 5 year\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('cs');\n    moment.locale('cs');\n    const dayjsDay = dayjs();\n    const momentDay = moment();\n    const dayjsCompare = dayjs().add(t[0], t[1]);\n    const momentCompare = moment().add(t[0], t[1]);\n    expect(dayjsDay.from(dayjsCompare)).toBe(momentDay.from(momentCompare));\n    expect(dayjsDay.to(dayjsCompare)).toBe(momentDay.to(momentCompare));\n    expect(dayjsDay.from(dayjsCompare, true)).toBe(momentDay.from(momentCompare, true));\n  });\n});","file":"locale/cs.test.js","skipped":false,"dir":"test"},{"name":"German locale relative time in past and future with suffix","suites":[],"updatePoint":{"line":15,"column":62,"index":431},"line":15,"code":"it('German locale relative time in past and future with suffix', () => {\n  const cases = [[1, 's', 'in ein paar Sekunden'], [-1, 's', 'vor ein paar Sekunden'], [1, 'm', 'in einer Minute'], [-1, 'm', 'vor einer Minute'], [1, 'h', 'in einer Stunde'], [-1, 'h', 'vor einer Stunde'], [1, 'd', 'in einem Tag'], [-1, 'd', 'vor einem Tag'], [1, 'M', 'in einem Monat'], [-1, 'M', 'vor einem Monat'], [2, 'd', 'in 2 Tagen'], [-2, 'd', 'vor 2 Tagen'], [10, 'd', 'in 10 Tagen'], [-10, 'd', 'vor 10 Tagen'], [6, 'm', 'in 6 Minuten'], [-6, 'm', 'vor 6 Minuten'], [5, 'h', 'in 5 Stunden'], [-5, 'h', 'vor 5 Stunden'], [3, 'M', 'in 3 Monaten'], [-3, 'M', 'vor 3 Monaten'], [4, 'y', 'in 4 Jahren'], [-4, 'y', 'vor 4 Jahren']];\n  const locales = ['de', 'de-at', 'de-ch'];\n  locales.forEach(locale => {\n    cases.forEach(c => {\n      expect(dayjs().add(c[0], c[1]).locale(locale).fromNow()).toBe(c[2]);\n      expect(dayjs().add(c[0], c[1]).locale(locale).fromNow()).toBe(moment().add(c[0], c[1]).locale(locale).fromNow());\n    });\n  });\n});","file":"locale/de.test.js","skipped":false,"dir":"test"},{"name":"German locale relative time in past and future without suffix","suites":[],"updatePoint":{"line":25,"column":65,"index":1457},"line":25,"code":"it('German locale relative time in past and future without suffix', () => {\n  const cases = [[1, 's', 'ein paar Sekunden'], [-1, 's', 'ein paar Sekunden'], [1, 'm', 'eine Minute'], [-1, 'm', 'eine Minute'], [1, 'h', 'eine Stunde'], [-1, 'h', 'eine Stunde'], [1, 'd', 'ein Tag'], [-1, 'd', 'ein Tag'], [2, 'd', '2 Tage'], [-2, 'd', '2 Tage'], [10, 'd', '10 Tage'], [-10, 'd', '10 Tage'], [6, 'm', '6 Minuten'], [-6, 'm', '6 Minuten'], [5, 'h', '5 Stunden'], [-5, 'h', '5 Stunden'], [3, 'M', '3 Monate'], [-3, 'M', '3 Monate'], [4, 'y', '4 Jahre'], [-4, 'y', '4 Jahre']];\n  const locales = ['de', 'de-at', 'de-ch'];\n  locales.forEach(locale => {\n    cases.forEach(c => {\n      expect(dayjs().add(c[0], c[1]).locale(locale).fromNow(true)).toBe(c[2]);\n      expect(dayjs().add(c[0], c[1]).locale(locale).fromNow(true)).toBe(moment().add(c[0], c[1]).locale(locale).fromNow(true));\n    });\n  });\n});","file":"locale/de.test.js","skipped":false,"dir":"test"},{"name":"German locales use region specific names","suites":[],"updatePoint":{"line":35,"column":44,"index":2330},"line":35,"code":"it('German locales use region specific names', () => {\n  const locales = [{\n    locale: 'de',\n    expectedFormattedDate: 'Mi., 19. Januar 2022'\n  }, {\n    locale: 'de-at',\n    expectedFormattedDate: 'Mi., 19. Jänner 2022'\n  }, {\n    locale: 'de-ch',\n    expectedFormattedDate: 'Mi, 19. Januar 2022'\n  }];\n  locales.forEach(locale => {\n    const dayjsWithLocale = dayjs('2022-01-19').locale(locale.locale);\n    expect(dayjsWithLocale.format('ddd, D. MMMM YYYY')).toEqual(locale.expectedFormattedDate);\n  });\n});","file":"locale/de.test.js","skipped":false,"dir":"test"},{"name":"should correctly format date with locale - ","suites":["English date formats"],"updatePoint":{"line":23,"column":67,"index":621},"line":23,"code":"    it(`should correctly format date with locale - ${locale.locale}`, () => {\n      const dayjsWithLocale = dayjs('2019-12-25').locale(locale.locale);\n      expect(dayjsWithLocale.format('L')).toEqual(locale.expectedDate);\n    });","file":"locale/en.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":13,"column":29,"index":332},"line":13,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [43, 'minute'],\n  // 44 minutes\n  [21, 'hour'],\n  // 21 hours\n  [25, 'day'],\n  // 25 days\n  [10, 'month'],\n  // 2 month\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('et');\n    moment.locale('et');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().subtract(t[0], t[1]))).toBe(moment().from(moment().subtract(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/et.test.js","skipped":false,"dir":"test"},{"name":"Finnish locale relative time in past and future","suites":[],"updatePoint":{"line":13,"column":51,"index":354},"line":13,"code":"it('Finnish locale relative time in past and future', () => {\n  const cases = [[1, 'd', 'päivän päästä'], [-1, 'd', 'päivä sitten'], [2, 'd', 'kahden päivän päästä'], [-2, 'd', 'kaksi päivää sitten'], [10, 'd', '10 päivän päästä'], [-10, 'd', '10 päivää sitten'], [6, 'm', 'kuuden minuutin päästä'], [-6, 'm', 'kuusi minuuttia sitten'], [5, 'h', 'viiden tunnin päästä'], [-5, 'h', 'viisi tuntia sitten'], [3, 'M', 'kolmen kuukauden päästä'], [-3, 'M', 'kolme kuukautta sitten'], [4, 'y', 'neljän vuoden päästä'], [-4, 'y', 'neljä vuotta sitten']];\n  cases.forEach(c => {\n    expect(dayjs().add(c[0], c[1]).locale('fi').fromNow()).toBe(c[2]);\n    expect(dayjs().add(c[0], c[1]).locale('fi').fromNow()).toBe(moment().add(c[0], c[1]).locale('fi').fromNow());\n  });\n  expect(dayjs().add(-10, 'd').locale('fi').fromNow(true)).toBe('10 päivää');\n  expect(dayjs().add(-10, 'd').locale('fi').fromNow(true)).toBe(moment().add(-10, 'd').locale('fi').fromNow(true));\n});","file":"locale/fi.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":6,"column":29,"index":206},"line":6,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [2, 'minute'],\n  // 2 minutes\n  [43, 'minute'],\n  // 43 minutes\n  [45, 'minute'],\n  // an hour\n  [3, 'hour'],\n  // 3 hours\n  [21, 'hour'],\n  // 21 hours\n  [1, 'day'],\n  // a day\n  [3, 'day'],\n  // 3 day\n  [25, 'day'],\n  // 25 days\n  [1, 'month'],\n  // a month\n  [2, 'month'],\n  // 2 month\n  [10, 'month'],\n  // 10 month\n  [1, 'year'],\n  // a year\n  [2, 'year'],\n  // 2 year\n  [5, 'year'],\n  // 5 year\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('he');\n    moment.locale('he');\n    const dayjsDay = dayjs();\n    const momentDay = moment();\n    const dayjsCompare = dayjs().add(t[0], t[1]);\n    const momentCompare = moment().add(t[0], t[1]);\n    expect(dayjsDay.from(dayjsCompare)).toBe(momentDay.from(momentCompare));\n    expect(dayjsDay.to(dayjsCompare)).toBe(momentDay.to(momentCompare));\n    expect(dayjsDay.from(dayjsCompare, true)).toBe(momentDay.from(momentCompare, true));\n  });\n});","file":"locale/he.test.js","skipped":false,"dir":"test"},{"name":"Format month with locale function","suites":[],"updatePoint":{"line":4,"column":37,"index":128},"line":4,"code":"it('Format month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsUK = dayjs().locale('hr').add(i, 'day');\n    const momentUK = moment().locale('hr').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'dddd, MMMM D YYYY';\n    const testFormat3 = 'MMMM';\n    const testFormat4 = 'MMM';\n    expect(dayjsUK.format(testFormat1)).toEqual(momentUK.format(testFormat1));\n    expect(dayjsUK.format(testFormat2)).toEqual(momentUK.format(testFormat2));\n    expect(dayjsUK.format(testFormat3)).toEqual(momentUK.format(testFormat3));\n    expect(dayjsUK.format(testFormat4)).toEqual(momentUK.format(testFormat4));\n  }\n});","file":"locale/hr.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":6,"column":29,"index":206},"line":6,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [2, 'minute'],\n  // 2 minutes\n  [43, 'minute'],\n  // 43 minutes\n  [45, 'minute'],\n  // an hour\n  [3, 'hour'],\n  // 3 hours\n  [21, 'hour'],\n  // 21 hours\n  [1, 'day'],\n  // a day\n  [3, 'day'],\n  // 3 day\n  [25, 'day'],\n  // 25 days\n  [1, 'month'],\n  // a month\n  [2, 'month'],\n  // 2 month\n  [10, 'month'],\n  // 10 month\n  [1, 'year'],\n  // a year\n  [2, 'year'],\n  // 2 year\n  [5, 'year'],\n  // 5 year\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('hu');\n    moment.locale('hu');\n    const dayjsDay = dayjs();\n    const momentDay = moment();\n    const dayjsCompare = dayjs().add(t[0], t[1]);\n    const momentCompare = moment().add(t[0], t[1]);\n    expect(dayjsDay.from(dayjsCompare)).toBe(momentDay.from(momentCompare));\n    expect(dayjsDay.to(dayjsCompare)).toBe(momentDay.to(momentCompare));\n    expect(dayjsDay.from(dayjsCompare, true)).toBe(momentDay.from(momentCompare, true));\n  });\n});","file":"locale/hu.test.js","skipped":false,"dir":"test"},{"name":"without suffix","suites":["moment compatibility"],"updatePoint":{"line":15,"column":20,"index":1365},"line":15,"code":"  it('without suffix', () => {\n    expectations.forEach(expectation => {\n      const [offset, unit, expectationWithoutSuffix] = expectation;\n      const momentResult = moment().add(offset, unit).locale('is').fromNow(true);\n      expect(expectationWithoutSuffix).toBe(momentResult);\n    });\n  });","file":"locale/is.test.js","skipped":false,"dir":"test"},{"name":"past","suites":["moment compatibility"],"updatePoint":{"line":22,"column":10,"index":1651},"line":22,"code":"  it('past', () => {\n    expectations.forEach(expectation => {\n      const [offset, unit,, pastExpectation] = expectation;\n      const momentResult = moment().add(-offset, unit).locale('is').fromNow();\n      expect(pastExpectation).toBe(momentResult);\n    });\n  });","file":"locale/is.test.js","skipped":false,"dir":"test"},{"name":"future","suites":["moment compatibility"],"updatePoint":{"line":29,"column":12,"index":1919},"line":29,"code":"  it('future', () => {\n    expectations.forEach(expectation => {\n      const [offset, unit,,, futureExpectation] = expectation;\n      const momentResult = moment().add(offset, unit).locale('is').fromNow();\n      expect(futureExpectation).toBe(momentResult);\n    });\n  });","file":"locale/is.test.js","skipped":false,"dir":"test"},{"name":"without suffix","suites":["Icelandic output matches moment output"],"updatePoint":{"line":38,"column":20,"index":2262},"line":38,"code":"  it('without suffix', () => {\n    expectations.forEach(expectation => {\n      const [offset, unit, expectationWithoutSuffix] = expectation;\n      const result = dayjs().add(offset, unit).locale('is').fromNow(true);\n      expect(result).toBe(expectationWithoutSuffix);\n    });\n  });","file":"locale/is.test.js","skipped":false,"dir":"test"},{"name":"past","suites":["Icelandic output matches moment output"],"updatePoint":{"line":45,"column":10,"index":2535},"line":45,"code":"  it('past', () => {\n    expectations.forEach(expectation => {\n      const [offset, unit,, pastExpectation] = expectation;\n      const result = dayjs().add(-offset, unit).locale('is').fromNow();\n      expect(result).toBe(pastExpectation);\n    });\n  });","file":"locale/is.test.js","skipped":false,"dir":"test"},{"name":"future","suites":["Icelandic output matches moment output"],"updatePoint":{"line":52,"column":12,"index":2790},"line":52,"code":"  it('future', () => {\n    expectations.forEach(expectation => {\n      const [offset, unit,,, futureExpectation] = expectation;\n      const result = dayjs().add(offset, unit).locale('is').fromNow();\n      expect(result).toBe(futureExpectation);\n    });\n  });","file":"locale/is.test.js","skipped":false,"dir":"test"},{"name":"Format month with locale function","suites":["Italian formats in Switzerland"],"updatePoint":{"line":18,"column":39,"index":558},"line":18,"code":"  it('Format month with locale function', () => {\n    for (let i = 0; i <= 7; i += 1) {\n      const dayjsWithLocale = dayjs().add(i, 'day');\n      const momentWithLocale = moment().add(i, 'day');\n      const testFormat1 = 'DD MMMM YYYY MMM';\n      const testFormat2 = 'dddd, MMMM D YYYY';\n      const testFormat3 = 'MMMM';\n      const testFormat4 = 'MMM';\n      const testFormat5 = 'L';\n      expect(dayjsWithLocale.format(testFormat1)).toEqual(momentWithLocale.format(testFormat1));\n      expect(dayjsWithLocale.format(testFormat2)).toEqual(momentWithLocale.format(testFormat2));\n      expect(dayjsWithLocale.format(testFormat3)).toEqual(momentWithLocale.format(testFormat3));\n      expect(dayjsWithLocale.format(testFormat4)).toEqual(momentWithLocale.format(testFormat4));\n      expect(dayjsWithLocale.format(testFormat5)).toEqual(momentWithLocale.format(testFormat5));\n    }\n  });","file":"locale/it-ch.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":["Italian formats in Switzerland"],"updatePoint":{"line":34,"column":31,"index":1434},"line":34,"code":"  it('RelativeTime: Time from X', () => {\n    const T = [[44.4, 'second'],\n    // a few seconds\n    [89.5, 'second'],\n    // a minute\n    [2, 'minute'],\n    // 2 minutes\n    [5, 'minute'],\n    // 5 minutes\n    [43, 'minute'],\n    // 44 minutes\n    [45, 'minute'],\n    // an hour\n    [3, 'hour'],\n    // 3 hours\n    [21, 'hour'],\n    // 21 hours\n    [1, 'day'],\n    // a day\n    [3, 'day'],\n    // 3 day\n    [25, 'day'],\n    // 25 days\n    [1, 'month'],\n    // a month\n    [2, 'month'],\n    // 2 month\n    [10, 'month'],\n    // 10 month\n    [1, 'year'],\n    // a year\n    [2, 'year'],\n    // 2 year\n    [5, 'year'],\n    // 5 year\n    [18, 'month'] // 2 years\n    ];\n\n    T.forEach(t => {\n      expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n      expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n    });\n  });","file":"locale/it-ch.test.js","skipped":false,"dir":"test"},{"name":"Finnish locale relative time in past and future","suites":[],"updatePoint":{"line":13,"column":51,"index":354},"line":13,"code":"it('Finnish locale relative time in past and future', () => {\n  const cases = [[1, 'd', '1日後'], [-1, 'd', '1日前'], [2, 'd', '2日後'], [-2, 'd', '2日前'], [10, 'd', '10日後'], [-10, 'd', '10日前'], [6, 'm', '6分後'], [-6, 'm', '6分前'], [5, 'h', '5時間後'], [-5, 'h', '5時間前'], [3, 'M', '3ヶ月後'], [-3, 'M', '3ヶ月前'], [4, 'y', '4年後'], [-4, 'y', '4年前']];\n  cases.forEach(c => {\n    expect(dayjs().add(c[0], c[1]).locale('ja').fromNow()).toBe(c[2]);\n    expect(dayjs().add(c[0], c[1]).locale('ja').fromNow()).toBe(moment().add(c[0], c[1]).locale('ja').fromNow());\n  });\n  expect(dayjs().add(-10, 'd').locale('ja').fromNow(true)).toBe('10日');\n  expect(dayjs().add(-10, 'd').locale('ja').fromNow(true)).toBe(moment().add(-10, 'd').locale('ja').fromNow(true));\n});","file":"locale/ja.test.js","skipped":false,"dir":"test"},{"name":"Locale keys for ","suites":[],"updatePoint":{"line":19,"column":44,"index":599},"line":19,"code":"  it(`Locale keys for ${locale.content.name}`, () => {\n    const {\n      name,\n      ordinal,\n      weekdays,\n      months,\n      formats,\n      relativeTime,\n      weekdaysShort,\n      monthsShort,\n      weekdaysMin,\n      weekStart,\n      yearStart,\n      meridiem\n    } = locale.content;\n    // comments required\n    const commentsMatchResult = locale.file.match(localeNameRegex);\n    expect(commentsMatchResult[1]).not.toBeUndefined();\n    expect(name).toEqual(locale.name.replace('.js', ''));\n    expect(name).toBe(name.toLowerCase());\n    expect(weekdays).toEqual(expect.any(Array));\n    if (weekdaysShort) expect(weekdaysShort).toEqual(expect.any(Array));\n    if (weekdaysMin) expect(weekdaysMin).toEqual(expect.any(Array));\n    if (weekStart) expect(weekStart).toEqual(expect.any(Number));\n    if (yearStart) expect(yearStart).toEqual(expect.any(Number));\n\n    // months could be a function or array\n    if (Array.isArray(months)) {\n      expect(months).toEqual(expect.any(Array));\n    } else {\n      expect(months(dayjs(), 'str')).toEqual(expect.any(String));\n      expect(months.f).toEqual(expect.any(Array));\n      expect(months.s).toEqual(expect.any(Array));\n    }\n    // monthsShort could be a function or array\n    if (monthsShort) {\n      if (Array.isArray(monthsShort)) {\n        expect(monthsShort).toEqual(expect.any(Array));\n      } else {\n        expect(monthsShort(dayjs(), 'str')).toEqual(expect.any(String));\n        expect(monthsShort.f).toEqual(expect.any(Array));\n        expect(monthsShort.s).toEqual(expect.any(Array));\n      }\n    }\n    // function pass date return string or number or null\n    if (name !== 'en') {\n      // en ordinal set in advancedFormat\n      for (let i = 1; i <= 31; i += 1) {\n        expect(ordinal(i)).toEqual(expect.anything());\n      }\n    }\n    expect(dayjs().locale(name).$locale().name).toBe(name);\n    if (formats) {\n      const {\n        LT,\n        LTS,\n        L,\n        LL,\n        LLL,\n        LLLL,\n        l,\n        ll,\n        lll,\n        llll,\n        ...remainingFormats\n      } = formats;\n      expect(formats).toEqual(expect.objectContaining({\n        L: expect.any(String),\n        LL: expect.any(String),\n        LLL: expect.any(String),\n        LLLL: expect.any(String),\n        LT: expect.any(String),\n        LTS: expect.any(String)\n      }));\n      expect(Object.keys(remainingFormats).length).toEqual(0);\n      if (l) expect(l).toEqual(expect.any(String));\n      if (ll) expect(ll).toEqual(expect.any(String));\n      if (lll) expect(lll).toEqual(expect.any(String));\n      if (llll) expect(llll).toEqual(expect.any(String));\n    }\n    if (relativeTime) {\n      expect(Object.keys(relativeTime).sort()).toEqual(['d', 'dd', 'future', 'h', 'hh', 'm', 'mm', 'M', 'MM', 'past', 's', 'y', 'yy'].sort());\n    }\n    if (meridiem) {\n      for (let i = 1; i <= 23; i += 1) {\n        expect(meridiem(i)).toEqual(expect.anything());\n      }\n    }\n  });","file":"locale/keys.test.js","skipped":false,"dir":"test"},{"name":"Format meridiem correctly","suites":[],"updatePoint":{"line":13,"column":29,"index":393},"line":13,"code":"it('Format meridiem correctly', () => {\n  for (let i = 0; i <= 23; i += 1) {\n    const dayjsKu = dayjs().startOf('day').add(i, 'hour');\n    const hour = (i % 12 || 12).toString().replace(/\\d/g, match => englishToArabicNumbersMap[match]);\n    const m = i < 12 ? 'پ.ن' : 'د.ن';\n    expect(dayjsKu.locale('ku').format('h A')).toBe(`${hour} ${m}`);\n  }\n});","file":"locale/ku.test.js","skipped":false,"dir":"test"},{"name":"Preparse with locale function","suites":[],"updatePoint":{"line":21,"column":33,"index":750},"line":21,"code":"it('Preparse with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    dayjs.locale(locale);\n    const momentKu = moment().locale('ku').add(i, 'day');\n    expect(dayjs(momentKu.format()).format()).toEqual(momentKu.format());\n  }\n});","file":"locale/ku.test.js","skipped":false,"dir":"test"},{"name":"Format month with locale function","suites":[],"updatePoint":{"line":4,"column":37,"index":128},"line":4,"code":"it('Format month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsUK = dayjs().locale('lt').add(i, 'day');\n    const momentUK = moment().locale('lt').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'dddd, MMMM D YYYY';\n    const testFormat3 = 'MMMM';\n    const testFormat4 = 'MMM';\n    expect(dayjsUK.format(testFormat1)).toEqual(momentUK.format(testFormat1));\n    expect(dayjsUK.format(testFormat2)).toEqual(momentUK.format(testFormat2));\n    expect(dayjsUK.format(testFormat3)).toEqual(momentUK.format(testFormat3));\n    expect(dayjsUK.format(testFormat4)).toEqual(momentUK.format(testFormat4));\n  }\n});","file":"locale/lt.test.js","skipped":false,"dir":"test"},{"name":"Format month with locale function","suites":[],"updatePoint":{"line":13,"column":37,"index":340},"line":13,"code":"it('Format month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsUK = dayjs().locale('pl').add(i, 'day');\n    const momentUK = moment().locale('pl').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'dddd, MMMM D YYYY';\n    const testFormat3 = 'MMMM';\n    const testFormat4 = 'MMM';\n    expect(dayjsUK.format(testFormat1)).toEqual(momentUK.format(testFormat1));\n    expect(dayjsUK.format(testFormat2)).toEqual(momentUK.format(testFormat2));\n    expect(dayjsUK.format(testFormat3)).toEqual(momentUK.format(testFormat3));\n    expect(dayjsUK.format(testFormat4)).toEqual(momentUK.format(testFormat4));\n  }\n});","file":"locale/pl.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":27,"column":29,"index":1006},"line":27,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [2, 'minute'],\n  // 2 minutes\n  [5, 'minute'],\n  // 5 minutes\n  [43, 'minute'],\n  // 44 minutes\n  [45, 'minute'],\n  // an hour\n  [3, 'hour'],\n  // 3 hours\n  [21, 'hour'],\n  // 21 hours\n  [1, 'day'],\n  // a day\n  [3, 'day'],\n  // 3 day\n  [25, 'day'],\n  // 25 days\n  [1, 'month'],\n  // a month\n  [2, 'month'],\n  // 2 month\n  [10, 'month'],\n  // 10 month\n  [1, 'year'],\n  // a year\n  [2, 'year'],\n  // 2 year\n  [5, 'year'],\n  // 5 year\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('pl');\n    moment.locale('pl');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/pl.test.js","skipped":false,"dir":"test"},{"name":"Format Month with locale function","suites":[],"updatePoint":{"line":13,"column":37,"index":340},"line":13,"code":"it('Format Month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsRU = dayjs().locale('ru').add(i, 'day');\n    const momentRU = moment().locale('ru').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'MMMM';\n    const testFormat3 = 'MMM';\n    expect(dayjsRU.format(testFormat1)).toEqual(momentRU.format(testFormat1));\n    expect(dayjsRU.format(testFormat2)).toEqual(momentRU.format(testFormat2));\n    expect(dayjsRU.format(testFormat3)).toEqual(momentRU.format(testFormat3));\n  }\n});","file":"locale/ru.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":25,"column":29,"index":882},"line":25,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [43, 'minute'],\n  // 44 minutes\n  [21, 'hour'],\n  // 21 hours\n  [25, 'day'],\n  // 25 days\n  [10, 'month'],\n  // 2 month\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('ru');\n    moment.locale('ru');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/ru.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":48,"column":12,"index":1428},"line":48,"code":"it('Meridiem', () => {\n  expect(dayjs('2020-01-01 03:00:00').locale('ru').format('A')).toEqual('ночи');\n  expect(dayjs('2020-01-01 11:00:00').locale('ru').format('A')).toEqual('утра');\n  expect(dayjs('2020-01-01 16:00:00').locale('ru').format('A')).toEqual('дня');\n  expect(dayjs('2020-01-01 20:00:00').locale('ru').format('A')).toEqual('вечера');\n});","file":"locale/ru.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":13,"column":29,"index":332},"line":13,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [2, 'minute'],\n  // 2 minutes\n  [43, 'minute'],\n  // 43 minutes\n  [45, 'minute'],\n  // an hour\n  [3, 'hour'],\n  // 3 hours\n  [21, 'hour'],\n  // 21 hours\n  [1, 'day'],\n  // a day\n  [3, 'day'],\n  // 3 day\n  [25, 'day'],\n  // 25 days\n  [1, 'month'],\n  // a month\n  [2, 'month'],\n  // 2 month\n  [10, 'month'],\n  // 10 month\n  [1, 'year'],\n  // a year\n  [2, 'year'],\n  // 2 year\n  [5, 'year'],\n  // 5 year\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('sk');\n    moment.locale('sk');\n    const dayjsDay = dayjs();\n    const momentDay = moment();\n    const dayjsCompare = dayjs().add(t[0], t[1]);\n    const momentCompare = moment().add(t[0], t[1]);\n    expect(dayjsDay.from(dayjsCompare)).toBe(momentDay.from(momentCompare));\n    expect(dayjsDay.to(dayjsCompare)).toBe(momentDay.to(momentCompare));\n    expect(dayjsDay.from(dayjsCompare, true)).toBe(momentDay.from(momentCompare, true));\n  });\n});","file":"locale/sk.test.js","skipped":false,"dir":"test"},{"name":"Serbian cyrillic locale relative time in past and future","suites":[],"updatePoint":{"line":12,"column":60,"index":339},"line":12,"code":"it('Serbian cyrillic locale relative time in past and future', () => {\n  const cases = [[1, 's', 'за неколико секунди', 'неколико секунди'], [-1, 's', 'пре неколико секунди', 'неколико секунди'], [4, 's', 'за неколико секунди', 'неколико секунди'], [1, 'm', 'за један минут', 'један минут'], [-1, 'm', 'пре једног минута', 'један минут'], [4, 'm', 'за 4 минута', '4 минута'], [5, 'm', 'за 5 минута', '5 минута'], [21, 'm', 'за 21 минут', '21 минут'], [1, 'h', 'за један сат', 'један сат'], [-1, 'h', 'пре једног сата', 'један сат'], [4, 'h', 'за 4 сата', '4 сата'], [5, 'h', 'за 5 сати', '5 сати'], [21, 'h', 'за 21 сат', '21 сат'], [1, 'd', 'за један дан', 'један дан'], [-1, 'd', 'пре једног дана', 'један дан'], [4, 'd', 'за 4 дана', '4 дана'], [5, 'd', 'за 5 дана', '5 дана'], [21, 'd', 'за 21 дан', '21 дан'], [1, 'M', 'за један месец', 'један месец'], [-1, 'M', 'пре једног месеца', 'један месец'], [4, 'M', 'за 4 месеца', '4 месеца'], [5, 'M', 'за 5 месеци', '5 месеци'], [10, 'M', 'за 10 месеци', '10 месеци'], [1, 'y', 'за једну годину', 'једна година'], [-1, 'y', 'пре једне године', 'једна година'], [4, 'y', 'за 4 године', '4 године'], [5, 'y', 'за 5 година', '5 година'], [21, 'y', 'за 21 годину', '21 година']];\n  cases.forEach(c => {\n    expect(dayjs().add(c[0], c[1]).locale('sr-cyrl').fromNow()).toBe(c[2]);\n    expect(dayjs().add(c[0], c[1]).locale('sr-cyrl').fromNow(true)).toBe(c[3]);\n    // TODO: compare to momentjs once logic and grammar are fixed there\n  });\n});","file":"locale/sr-cyrl.test.js","skipped":false,"dir":"test"},{"name":"Serbian locale relative time in past and future","suites":[],"updatePoint":{"line":12,"column":51,"index":325},"line":12,"code":"it('Serbian locale relative time in past and future', () => {\n  const cases = [[1, 's', 'za nekoliko sekundi', 'nekoliko sekundi'], [-1, 's', 'pre nekoliko sekundi', 'nekoliko sekundi'], [4, 's', 'za nekoliko sekundi', 'nekoliko sekundi'], [1, 'm', 'za jedan minut', 'jedan minut'], [-1, 'm', 'pre jednog minuta', 'jedan minut'], [4, 'm', 'za 4 minuta', '4 minuta'], [5, 'm', 'za 5 minuta', '5 minuta'], [21, 'm', 'za 21 minut', '21 minut'], [1, 'h', 'za jedan sat', 'jedan sat'], [-1, 'h', 'pre jednog sata', 'jedan sat'], [4, 'h', 'za 4 sata', '4 sata'], [5, 'h', 'za 5 sati', '5 sati'], [21, 'h', 'za 21 sat', '21 sat'], [1, 'd', 'za jedan dan', 'jedan dan'], [-1, 'd', 'pre jednog dana', 'jedan dan'], [4, 'd', 'za 4 dana', '4 dana'], [5, 'd', 'za 5 dana', '5 dana'], [21, 'd', 'za 21 dan', '21 dan'], [1, 'M', 'za jedan mesec', 'jedan mesec'], [-1, 'M', 'pre jednog meseca', 'jedan mesec'], [4, 'M', 'za 4 meseca', '4 meseca'], [5, 'M', 'za 5 meseci', '5 meseci'], [10, 'M', 'za 10 meseci', '10 meseci'], [1, 'y', 'za jednu godinu', 'jedna godina'], [-1, 'y', 'pre jedne godine', 'jedna godina'], [4, 'y', 'za 4 godine', '4 godine'], [5, 'y', 'za 5 godina', '5 godina'], [21, 'y', 'za 21 godinu', '21 godina']];\n  cases.forEach(c => {\n    // With suffix\n    expect(dayjs().add(c[0], c[1]).locale('sr').fromNow()).toBe(c[2]);\n    // Without suffix\n    expect(dayjs().add(c[0], c[1]).locale('sr').fromNow(true)).toBe(c[3]);\n    // TODO: compare to momentjs once logic and grammar are fixed there\n  });\n});","file":"locale/sr.test.js","skipped":false,"dir":"test"},{"name":"Finland Swedish locale","suites":[],"updatePoint":{"line":5,"column":26,"index":186},"line":5,"code":"it('Finland Swedish locale', () => {\n  // time\n  expect(dayjs('2019-02-01 12:34:56').locale('sv-fi').format('LT')).toBe('12.34');\n  expect(dayjs('2019-02-01 23:45:56').locale('sv-fi').format('LTS')).toBe('23.45.56');\n\n  // date\n  expect(dayjs('2019-02-01').locale('sv-fi').format('L')).toBe('01.02.2019');\n  expect(dayjs('2019-12-15').locale('sv-fi').format('LL')).toBe('15. december 2019');\n  // short\n  expect(dayjs('2019-02-01').locale('sv-fi').format('l')).toBe('1.2.2019');\n  expect(dayjs('2019-12-15').locale('sv-fi').format('ll')).toBe('15. dec 2019');\n\n  // date and time\n  expect(dayjs('2019-03-01 12:30').locale('sv-fi').format('LLL')).toBe('1. mars 2019, kl. 12.30');\n  expect(dayjs('2021-06-12 17:30').locale('sv-fi').format('LLLL')).toBe('lördag, 12. juni 2021, kl. 17.30');\n  // short\n  expect(dayjs('2019-03-01 12:30').locale('sv-fi').format('lll')).toBe('1. mar 2019, kl. 12.30');\n  expect(dayjs('2021-06-01 17:30').locale('sv-fi').format('llll')).toBe('tis, 1. jun 2021, kl. 17.30');\n});","file":"locale/sv-fi.test.js","skipped":false,"dir":"test"},{"name":"Swedish locale Do 1a not format to 1am","suites":[],"updatePoint":{"line":12,"column":42,"index":322},"line":12,"code":"it('Swedish locale Do 1a not format to 1am', () => {\n  expect(dayjs('2019-01-01').locale('sv').format('dddd Do MMMM')).toBe('tisdag 1a januari');\n  expect(dayjs('2019-01-02').locale('sv').format('dddd Do MMMM')).toBe('onsdag 2a januari');\n});","file":"locale/sv.test.js","skipped":false,"dir":"test"},{"name":"Format Month with locale function","suites":[],"updatePoint":{"line":13,"column":37,"index":340},"line":13,"code":"it('Format Month with locale function', () => {\n  for (let i = 0; i <= 7; i += 1) {\n    const dayjsUK = dayjs().locale('uk').add(i, 'day');\n    const momentUK = moment().locale('uk').add(i, 'day');\n    const testFormat1 = 'DD MMMM YYYY MMM';\n    const testFormat2 = 'MMMM';\n    const testFormat3 = 'MMM';\n    expect(dayjsUK.format(testFormat1)).toEqual(momentUK.format(testFormat1));\n    expect(dayjsUK.format(testFormat2)).toEqual(momentUK.format(testFormat2));\n    expect(dayjsUK.format(testFormat3)).toEqual(momentUK.format(testFormat3));\n  }\n});","file":"locale/uk.test.js","skipped":false,"dir":"test"},{"name":"RelativeTime: Time from X","suites":[],"updatePoint":{"line":25,"column":29,"index":882},"line":25,"code":"it('RelativeTime: Time from X', () => {\n  const T = [[44.4, 'second'],\n  // a few seconds\n  [89.5, 'second'],\n  // a minute\n  [43, 'minute'],\n  // 44 minutes\n  [21, 'hour'],\n  // 21 hours\n  [25, 'day'],\n  // 25 days\n  [10, 'month'],\n  // 2 month\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    dayjs.locale('uk');\n    moment.locale('uk');\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n    expect(dayjs().from(dayjs().add(t[0], t[1]), true)).toBe(moment().from(moment().add(t[0], t[1]), true));\n  });\n});","file":"locale/uk.test.js","skipped":false,"dir":"test"},{"name":"hour","suites":[],"updatePoint":{"line":48,"column":8,"index":1424},"line":48,"code":"it('hour', () => {\n  const str0 = '2020-03-18 19:15:00';\n  const str = '2020-03-18 20:15:00';\n  const result = dayjs(str0).locale('uk').to(str);\n  expect(result).toEqual(moment(str0).locale('uk').to(str));\n  const result2 = dayjs(str).locale('uk').to(str0, true);\n  expect(result2).toEqual('година'); // different from moment.js\n});","file":"locale/uk.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":11,"column":12,"index":234},"line":11,"code":"it('Meridiem', () => {\n  // the '中午' is different to moment.js 11-13\n  expect(dayjs('2020-01-01 10:59:59').locale('zh-cn').format('A')).toEqual('上午');\n  expect(dayjs('2020-01-01 11:00:00').locale('zh-cn').format('A')).toEqual('中午');\n  expect(dayjs('2020-01-01 12:59:59').locale('zh-cn').format('A')).toEqual('中午');\n  expect(dayjs('2020-01-01 13:00:00').locale('zh-cn').format('A')).toEqual('下午');\n});","file":"locale/zh-cn.test.js","skipped":false,"dir":"test"},{"name":"ordinal","suites":[],"updatePoint":{"line":13,"column":13,"index":486},"line":13,"code":"test('ordinal', () => {\n  expect(zh.format('wo')).toEqual(`${zh.format('w')}周`);\n  expect(zhCN.format('wo')).toEqual(`${zhCN.format('w')}周`);\n  expect(zhHK.format('wo')).toEqual(`${zhHK.format('w')}週`);\n  expect(zhTW.format('wo')).toEqual(`${zhTW.format('w')}週`);\n});","file":"locale/zh-hk.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":19,"column":14,"index":755},"line":19,"code":"test('Meridiem', () => {\n  for (let i = 0; i <= 24; i += 1) {\n    expect(zh.add(i, 'hour').format('A')).toBe(zhCN.add(i, 'hour').format('A'));\n  }\n});","file":"locale/zh-hk.test.js","skipped":false,"dir":"test"},{"name":"ordinal","suites":[],"updatePoint":{"line":9,"column":13,"index":344},"line":9,"code":"test('ordinal', () => {\n  expect(zh.format('wo')).toEqual(`${zh.format('w')}周`);\n  expect(zhTW.format('wo')).toEqual(`${zhTW.format('w')}週`);\n});","file":"locale/zh-tw.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":13,"column":14,"index":491},"line":13,"code":"test('Meridiem', () => {\n  for (let i = 0; i <= 24; i += 1) {\n    expect(zh.add(i, 'hour').format('A')).toBe(zhTW.add(i, 'hour').format('A'));\n  }\n});","file":"locale/zh-tw.test.js","skipped":false,"dir":"test"},{"name":"ordinal","suites":[],"updatePoint":{"line":9,"column":13,"index":344},"line":9,"code":"test('ordinal', () => {\n  expect(zh.format('wo')).toEqual(`${zh.format('w')}周`);\n});","file":"locale/zh.test.js","skipped":false,"dir":"test"},{"name":"Meridiem","suites":[],"updatePoint":{"line":12,"column":14,"index":430},"line":12,"code":"test('Meridiem', () => {\n  for (let i = 0; i <= 24; i += 1) {\n    expect(zh.add(i, 'hour').format('A')).toBe(zhCN.add(i, 'hour').format('A'));\n  }\n});","file":"locale/zh.test.js","skipped":false,"dir":"test"},{"name":"StartOf EndOf Year ... with s and upper case","suites":["StartOf EndOf"],"updatePoint":{"line":13,"column":50,"index":325},"line":13,"code":"  it('StartOf EndOf Year ... with s and upper case', () => {\n    const testArr = ['Year', 'year', 'YearS', 'month', 'day', 'date', 'week', 'hour', 'minute', 'second'];\n    testArr.forEach(d => {\n      expect(dayjs().startOf(d).valueOf()).toBe(moment().startOf(d).valueOf());\n      expect(dayjs().endOf(d).valueOf()).toBe(moment().endOf(d).valueOf());\n    });\n  });","file":"manipulate.test.js","skipped":false,"dir":"test"},{"name":"StartOf EndOf Other -> no change","suites":["StartOf EndOf"],"updatePoint":{"line":20,"column":38,"index":678},"line":20,"code":"  it('StartOf EndOf Other -> no change', () => {\n    expect(dayjs().startOf('otherString').valueOf()).toBe(moment().startOf('otherString').valueOf());\n    expect(dayjs().endOf('otherString').valueOf()).toBe(moment().endOf('otherString').valueOf());\n  });","file":"manipulate.test.js","skipped":false,"dir":"test"},{"name":"StartOf week with locale","suites":["StartOf EndOf"],"updatePoint":{"line":24,"column":30,"index":925},"line":24,"code":"  it('StartOf week with locale', () => {\n    const testDate = [undefined, '2019-02-10', '2019-02-11', '2019-02-12', '2019-02-13', '2019-02-14', '2019-02-15', '2019-02-16'];\n    const testLocale = ['zh-cn', 'ar', 'en'];\n    testDate.forEach(d => {\n      testLocale.forEach(l => {\n        expect(dayjs(d).locale(l).startOf('week').date()).toBe(moment(d).locale(l).startOf('week').date());\n        expect(dayjs(d).locale(l).endOf('week').date()).toBe(moment(d).locale(l).endOf('week').date());\n      });\n    });\n  });","file":"manipulate.test.js","skipped":false,"dir":"test"},{"name":"Add Time days","suites":["StartOf EndOf"],"updatePoint":{"line":35,"column":17,"index":1431},"line":35,"code":"it('Add Time days', () => {\n  expect(dayjs().add(1, 'ms').valueOf()).toBe(moment().add(1, 'ms').valueOf());\n  expect(dayjs().add(1, 'milliseconds').valueOf()).toBe(moment().add(1, 'milliseconds').valueOf());\n  expect(dayjs().add(1, 's').valueOf()).toBe(moment().add(1, 's').valueOf());\n  expect(dayjs().add(1, 'seconds').valueOf()).toBe(moment().add(1, 'seconds').valueOf());\n  expect(dayjs().add(1, 'm').valueOf()).toBe(moment().add(1, 'm').valueOf());\n  expect(dayjs().add(1, 'minutes').valueOf()).toBe(moment().add(1, 'minutes').valueOf());\n  expect(dayjs().add(1, 'h').valueOf()).toBe(moment().add(1, 'h').valueOf());\n  expect(dayjs().add(1, 'hours').valueOf()).toBe(moment().add(1, 'hours').valueOf());\n  expect(dayjs().add(1, 'w').valueOf()).toBe(moment().add(1, 'w').valueOf());\n  expect(dayjs().add(1, 'weeks').valueOf()).toBe(moment().add(1, 'weeks').valueOf());\n  expect(dayjs().add(1, 'd').valueOf()).toBe(moment().add(1, 'd').valueOf());\n  expect(dayjs().add(1, 'days').valueOf()).toBe(moment().add(1, 'days').valueOf());\n  expect(dayjs().add(1, 'M').valueOf()).toBe(moment().add(1, 'M').valueOf());\n  expect(dayjs().add(1, 'y').valueOf()).toBe(moment().add(1, 'y').valueOf());\n  expect(dayjs('20111031').add(1, 'months').valueOf()).toBe(moment('20111031').add(1, 'months').valueOf());\n  expect(dayjs('20160131').add(1, 'months').valueOf()).toBe(moment('20160131').add(1, 'months').valueOf());\n  expect(dayjs('20160229').add(1, 'year').valueOf()).toBe(moment('20160229').add(1, 'year').valueOf());\n  expect(dayjs().add('2', 'years').valueOf()).toBe(moment().add('2', 'years').valueOf());\n});","file":"manipulate.test.js","skipped":false,"dir":"test"},{"name":"Add Time with decimal","suites":["StartOf EndOf"],"updatePoint":{"line":55,"column":25,"index":3043},"line":55,"code":"it('Add Time with decimal', () => {\n  expect(dayjs().add(0.4, 'day').valueOf()).toBe(moment().add(0.4, 'day').valueOf());\n  expect(dayjs().add(0.5, 'day').valueOf()).toBe(moment().add(0.5, 'day').valueOf());\n  expect(dayjs().add(0.4, 'week').valueOf()).toBe(moment().add(0.4, 'week').valueOf());\n  expect(dayjs().add(0.5, 'week').valueOf()).toBe(moment().add(0.5, 'week').valueOf());\n});","file":"manipulate.test.js","skipped":false,"dir":"test"},{"name":"Subtract Time days","suites":["StartOf EndOf"],"updatePoint":{"line":61,"column":22,"index":3428},"line":61,"code":"it('Subtract Time days', () => {\n  expect(dayjs().subtract(1, 'days').valueOf()).toBe(moment().subtract(1, 'days').valueOf());\n});","file":"manipulate.test.js","skipped":false,"dir":"test"},{"name":"Now","suites":["Parse"],"updatePoint":{"line":12,"column":9,"index":266},"line":12,"code":"  it('Now', () => {\n    expect(dayjs().valueOf()).toBe(moment().valueOf());\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"moment-js like formatted dates","suites":["Parse"],"updatePoint":{"line":15,"column":36,"index":375},"line":15,"code":"  it('moment-js like formatted dates', () => {\n    global.console.warn = jest.genMockFunction(); // moment.js '2018-4-1 1:1:1:22' will throw warn\n    let d = '20130108';\n    expect(dayjs(d).valueOf()).toBe(moment(d).valueOf());\n    d = '2018-04-24';\n    expect(dayjs(d).valueOf()).toBe(moment(d).valueOf());\n    d = '2018-04-24 11:12';\n    expect(dayjs(d).format()).toBe(moment(d).format()); // not recommend\n    d = '2018-05-02 11:12:13';\n    expect(dayjs(d).valueOf()).toBe(moment(d).valueOf());\n    d = '2018-05-02 11:12:13.998';\n    expect(dayjs(d).valueOf()).toBe(moment(d).valueOf());\n    d = '2018-4-1';\n    expect(dayjs(d).valueOf()).toBe(moment(d).valueOf()); // not recommend\n    d = '2018-4-1 11:12';\n    expect(dayjs(d).format()).toBe(moment(d).format()); // not recommend\n    d = '2018-4-1 1:1:1:223';\n    expect(dayjs(d).valueOf()).toBe(moment(d).valueOf()); // not recommend\n    d = '2018-01';\n    expect(dayjs(d).valueOf()).toBe(moment(d).valueOf()); // not recommend\n    d = '2018';\n    expect(dayjs(d).format()).toBe(moment(d).format()); // not recommend\n    d = '2018-05-02T11:12:13Z'; // should go direct to new Date() rather our regex\n    expect(dayjs(d).format()).toBe(moment(d).format()); // not recommend\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"String ISO 8601 date, time and zone","suites":["Parse"],"updatePoint":{"line":41,"column":41,"index":1616},"line":41,"code":"  it('String ISO 8601 date, time and zone', () => {\n    const time = '2018-04-04T16:00:00.000Z';\n    expect(dayjs(time).valueOf()).toBe(moment(time).valueOf());\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"String RFC 2822, time and zone","suites":["Parse"],"updatePoint":{"line":45,"column":36,"index":1778},"line":45,"code":"  it('String RFC 2822, time and zone', () => {\n    const time = 'Mon, 11 Feb 2019 09:46:50 GMT+1';\n    const expected = '2019-02-11T08:46:50.000Z';\n    const d = dayjs(time);\n    expect(d.toISOString()).toEqual(expected);\n    expect(d.valueOf()).toBe(moment(time).valueOf());\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"String ECMAScript, time and zone","suites":["Parse"],"updatePoint":{"line":52,"column":38,"index":2062},"line":52,"code":"  it('String ECMAScript, time and zone', () => {\n    // should parse dates formatted in ECMA script format\n    // see https://www.ecma-international.org/ecma-262/9.0/index.html#sec-date.prototype.tostring\n    const time = 'Mon Feb 11 2019 11:01:37 GMT+0100 (Mitteleuropäische Normalzeit)';\n    const expected = '2019-02-11T10:01:37.000Z';\n    const d = dayjs(time);\n    expect(d.toISOString()).toEqual(expected);\n    expect(d.valueOf()).toBe(moment(time).valueOf());\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"rejects invalid values","suites":["Parse"],"updatePoint":{"line":61,"column":28,"index":2525},"line":61,"code":"  it('rejects invalid values', () => {\n    expect(dayjs({}).isValid()).toBe(false);\n    expect(dayjs(() => '2018-01-01').isValid()).toBe(false);\n    expect(dayjs(Infinity).isValid()).toBe(false);\n    expect(dayjs(NaN).isValid()).toBe(false);\n    expect(dayjs([2018, 5, 1, 13, 52, 44]).isValid()).toBe(false); // Arrays with time part\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"parses Arrays with date part","suites":["Parse"],"updatePoint":{"line":69,"column":34,"index":2872},"line":69,"code":"  it('parses Arrays with date part', () => {\n    const dateParts = [2018, 5, 1];\n    const expected = '2018-05-01T00:00:00.000Z';\n    const d = dayjs(dateParts);\n    const normalized = d.add(d.utcOffset(), 'minutes'); // make test run in every timezone\n    expect(normalized.toISOString()).toEqual(expected);\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"parses unlimited millisecond","suites":["Parse"],"updatePoint":{"line":76,"column":34,"index":3187},"line":76,"code":"  it('parses unlimited millisecond', () => {\n    const date = '2019-03-25T06:41:00.999999999';\n    const ds = dayjs(date);\n    const ms = moment(date);\n    expect(ds.valueOf()).toEqual(ms.valueOf());\n    expect(ds.millisecond()).toEqual(ms.millisecond());\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"String Other, Undefined and Null and isValid","suites":["Parse"],"updatePoint":{"line":83,"column":50,"index":3465},"line":83,"code":"  it('String Other, Undefined and Null and isValid', () => {\n    global.console.warn = jest.genMockFunction(); // moment.js otherString will throw warn\n    expect(dayjs('otherString').toString().toLowerCase()).toBe(moment('otherString').toString().toLowerCase());\n    expect(dayjs(undefined).toDate()).toEqual(moment(undefined).toDate());\n    expect(dayjs().isValid()).toBe(true);\n    expect(dayjs(undefined).isValid()).toBe(true);\n    expect(dayjs('').isValid()).toBe(false);\n    expect(dayjs(null).isValid()).toBe(false);\n    expect(dayjs('otherString').isValid()).toBe(false);\n    expect(dayjs(null).toString().toLowerCase()).toBe(moment(null).toString().toLowerCase());\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"Unix Timestamp Number (milliseconds) 1523520536000","suites":["Parse"],"updatePoint":{"line":95,"column":54,"index":4153},"line":95,"code":"it('Unix Timestamp Number (milliseconds) 1523520536000', () => {\n  const timestamp = 1523520536000;\n  expect(dayjs(timestamp).valueOf()).toBe(moment(timestamp).valueOf());\n});","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"Unix Timestamp Number (seconds) 1318781876","suites":["Parse"],"updatePoint":{"line":99,"column":46,"index":4321},"line":99,"code":"it('Unix Timestamp Number (seconds) 1318781876', () => {\n  const timestamp1 = 1318781876;\n  const timestamp2 = 1318781876.721;\n  expect(dayjs.unix(timestamp1).valueOf()).toBe(moment.unix(timestamp1).valueOf());\n  expect(dayjs.unix(timestamp2).valueOf()).toBe(moment.unix(timestamp2).valueOf());\n});","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"String and Number 20180101","suites":["Parse"],"updatePoint":{"line":105,"column":30,"index":4604},"line":105,"code":"it('String and Number 20180101', () => {\n  expect(dayjs(20180101).valueOf()).toBe(moment(20180101).valueOf());\n  expect(dayjs('20180101').valueOf()).toBe(moment('20180101').valueOf());\n});","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"Number 0","suites":["Parse"],"updatePoint":{"line":109,"column":12,"index":4775},"line":109,"code":"it('Number 0', () => {\n  expect(dayjs(0).valueOf()).toBe(moment(0).valueOf());\n});","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"Clone not affect each other","suites":["Parse"],"updatePoint":{"line":112,"column":31,"index":4877},"line":112,"code":"it('Clone not affect each other', () => {\n  const base = dayjs(20170101);\n  const year = base.year();\n  const another = base.set('year', year + 1);\n  expect(another.unix() - base.unix()).toBe(31536000);\n});","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"Clone with same value","suites":["Parse"],"updatePoint":{"line":118,"column":25,"index":5078},"line":118,"code":"it('Clone with same value', () => {\n  const base = dayjs();\n  const year = base.year();\n  const newBase = base.set('year', year + 1);\n  const another = newBase.clone();\n  expect(newBase.toString()).toBe(another.toString());\n});","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2020/9/30","suites":["REGEX_PARSE"],"updatePoint":{"line":126,"column":15,"index":5328},"line":126,"code":"  it('2020/9/30', () => {\n    const date = '2020/9/30';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d.join('-')).toBe('2020/9/30-2020-9-30----');\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2019-03-25T06:41:00.999999999","suites":["REGEX_PARSE"],"updatePoint":{"line":132,"column":35,"index":5570},"line":132,"code":"  it('2019-03-25T06:41:00.999999999', () => {\n    const date = '2019-03-25T06:41:00.999999999';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d.join('-')).toBe('2019-03-25T06:41:00.999999999-2019-03-25-06-41-00-999999999');\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"20210102T012345","suites":["REGEX_PARSE"],"updatePoint":{"line":138,"column":21,"index":5854},"line":138,"code":"  it('20210102T012345', () => {\n    const date = '20210102T012345';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d.join('-')).toBe('20210102T012345-2021-01-02-01-23-45-');\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2021-01-02T01:23","suites":["REGEX_PARSE"],"updatePoint":{"line":144,"column":22,"index":6102},"line":144,"code":"  it('2021-01-02T01:23', () => {\n    const date = '2021-01-02T01:23';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d.join('-')).toBe('2021-01-02T01:23-2021-01-02-01-23--');\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2021-01-02T01:23:45","suites":["REGEX_PARSE"],"updatePoint":{"line":150,"column":25,"index":6353},"line":150,"code":"  it('2021-01-02T01:23:45', () => {\n    const date = '2021-01-02T01:23:45';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d.join('-')).toBe('2021-01-02T01:23:45-2021-01-02-01-23-45-');\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2020-12-31T18:00:00.000-0500 (no regex match)","suites":["REGEX_PARSE"],"updatePoint":{"line":156,"column":51,"index":6638},"line":156,"code":"  it('2020-12-31T18:00:00.000-0500 (no regex match)', () => {\n    const date = '2020-12-31T18:00:00.000-0500';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d).toBe(null);\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2021-1-4 0:42:53:000","suites":["REGEX_PARSE"],"updatePoint":{"line":164,"column":26,"index":6906},"line":164,"code":"  it('2021-1-4 0:42:53:000', () => {\n    const date = '2021-1-4 0:42:53:000';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d.join('-')).toBe('2021-1-4 0:42:53:000-2021-1-4-0-42-53-000');\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2020-12-31T18:00:00-05:00 (no regex match)","suites":["REGEX_PARSE"],"updatePoint":{"line":170,"column":48,"index":7190},"line":170,"code":"  it('2020-12-31T18:00:00-05:00 (no regex match)', () => {\n    const date = '2020-12-31T18:00:00-05:00';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d).toBe(null);\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2021-01-02T01:23:45-0500 (no regex match)","suites":["REGEX_PARSE"],"updatePoint":{"line":176,"column":47,"index":7429},"line":176,"code":"  it('2021-01-02T01:23:45-0500 (no regex match)', () => {\n    const date = '2021-01-02T01:23:45-0500';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d).toBe(null);\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2021-01-02T01:23:45Z (no regex match)","suites":["REGEX_PARSE"],"updatePoint":{"line":182,"column":43,"index":7663},"line":182,"code":"  it('2021-01-02T01:23:45Z (no regex match)', () => {\n    const date = '2021-01-02T01:23:45Z';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d).toBe(null);\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"2021.01.03","suites":["REGEX_PARSE"],"updatePoint":{"line":190,"column":16,"index":7921},"line":190,"code":"  it('2021.01.03', () => {\n    const date = '2021.01.03';\n    const d = date.match(REGEX_PARSE);\n    expect(dayjs(date).valueOf()).toBe(moment(date).valueOf());\n    expect(d).toBe(null);\n  });","file":"parse.test.js","skipped":false,"dir":"test"},{"name":"Plugin extend method and option","suites":[],"updatePoint":{"line":18,"column":35,"index":482},"line":18,"code":"it('Plugin extend method and option', () => {\n  expect(dayjs().newApi()).toBe('hello world');\n  expect(dayjs().newApiWithConfig()).toBe('hello world good');\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"Plugin extend dayjs","suites":[],"updatePoint":{"line":22,"column":23,"index":631},"line":22,"code":"it('Plugin extend dayjs', () => {\n  expect(dayjs.newFunc()).toBe('hi world');\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"Plugin use core utils","suites":[],"updatePoint":{"line":25,"column":25,"index":715},"line":25,"code":"it('Plugin use core utils', () => {\n  // u => isUndefined\n  expect(dayjs().$utils().u).toBeInstanceOf(Function);\n});","file":"plugin.test.js","skipped":false,"dir":"test"},{"name":"Format of invalid date","suites":[],"updatePoint":{"line":24,"column":26,"index":726},"line":24,"code":"it('Format of invalid date', () => {\n  expect(dayjs(null).format('z').toLowerCase()).toEqual(moment(null).format('z').toLowerCase());\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format empty string","suites":[],"updatePoint":{"line":27,"column":23,"index":861},"line":27,"code":"it('Format empty string', () => {\n  expect(dayjs().format()).toBe(moment().format());\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Quarter Q","suites":[],"updatePoint":{"line":30,"column":20,"index":948},"line":30,"code":"it('Format Quarter Q', () => {\n  expect(dayjs().format('Q')).toBe(moment().format('Q'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Timestamp X x","suites":[],"updatePoint":{"line":33,"column":24,"index":1045},"line":33,"code":"it('Format Timestamp X x', () => {\n  expect(dayjs().format('X')).toBe(moment().format('X'));\n  expect(dayjs().format('x')).toBe(moment().format('x'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Day of Month Do 1 - 31","suites":[],"updatePoint":{"line":37,"column":33,"index":1209},"line":37,"code":"it('Format Day of Month Do 1 - 31', () => {\n  expect(dayjs().format('Do')).toBe(moment().format('Do'));\n  let d = '2018-05-02 00:00:00.000';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n  d = '2018-05-01 00:00:00.000';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n  d = '2018-05-03 00:00:00.000';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n  d = '2018-05-04 00:00:00.000';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n  d = '2018-05-08 00:00:00.000';\n  expect(dayjs(d).locale('nl').format('Do')).toBe(moment(d).locale('nl').format('Do'));\n  d = '2018-05-11';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n  d = '2018-05-12';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n  d = '2018-05-13';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n  d = '2018-05-19 00:00:00.000';\n  expect(dayjs(d).locale('nl').format('Do')).toBe(moment(d).locale('nl').format('Do'));\n  d = '2018-05-22';\n  expect(dayjs(d).format('Do')).toBe(moment(d).format('Do'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Hour k kk 24-hour 1 - 24","suites":[],"updatePoint":{"line":60,"column":35,"index":2273},"line":60,"code":"it('Format Hour k kk 24-hour 1 - 24', () => {\n  expect(dayjs().format('k')).toBe(moment().format('k'));\n  expect(dayjs().format('kk')).toBe(moment().format('kk'));\n  let d = '2018-05-02 00:00:00.000';\n  expect(dayjs(d).format('k')).toBe('24');\n  expect(dayjs(d).format('k')).toBe(moment(d).format('k'));\n  expect(dayjs(d).format('kk')).toBe('24');\n  expect(dayjs(d).format('kk')).toBe(moment(d).format('kk'));\n  d = '2018-05-02 01:00:00.000';\n  expect(dayjs(d).format('k')).toBe('1');\n  expect(dayjs(d).format('k')).toBe(moment(d).format('k'));\n  expect(dayjs(d).format('kk')).toBe('01');\n  expect(dayjs(d).format('kk')).toBe(moment(d).format('kk'));\n  d = '2018-05-02 23:59:59.999';\n  expect(dayjs(d).format('k')).toBe('23');\n  expect(dayjs(d).format('k')).toBe(moment(d).format('k'));\n  expect(dayjs(d).format('kk')).toBe('23');\n  expect(dayjs(d).format('kk')).toBe(moment(d).format('kk'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Week of Year wo","suites":[],"updatePoint":{"line":79,"column":26,"index":3161},"line":79,"code":"it('Format Week of Year wo', () => {\n  const d = '2018-12-01';\n  expect(dayjs(d).format('wo')).toBe(moment(d).format('wo'));\n  expect(dayjs(d).locale('zh-cn').format('wo')).toBe(moment(d).locale('zh-cn').format('wo'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Week of Year wo","suites":[],"updatePoint":{"line":84,"column":26,"index":3384},"line":84,"code":"it('Format Week of Year wo', () => {\n  const d = '2018-12-01';\n  expect(dayjs(d).format('wo')).toBe(moment(d).format('wo'));\n  expect(dayjs(d).locale('zh-cn').format('wo')).toBe(moment(d).locale('zh-cn').format('wo'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Week Year gggg","suites":[],"updatePoint":{"line":89,"column":25,"index":3606},"line":89,"code":"it('Format Week Year gggg', () => {\n  const d = '2018-12-31';\n  expect(dayjs(d).format('gggg')).toBe(moment(d).format('gggg'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Iso Week Year GGGG","suites":[],"updatePoint":{"line":93,"column":29,"index":3742},"line":93,"code":"it('Format Iso Week Year GGGG', () => {\n  const d = '2021-01-01';\n  expect(dayjs(d).format('GGGG')).toBe(moment(d).format('GGGG'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format Iso Week of Year","suites":[],"updatePoint":{"line":97,"column":27,"index":3876},"line":97,"code":"it('Format Iso Week of Year', () => {\n  const d = '2021-01-01';\n  expect(dayjs(d).format('W')).toBe(moment(d).format('W'));\n  expect(dayjs(d).format('WW')).toBe(moment(d).format('WW'));\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Format offsetName z zzz","suites":[],"updatePoint":{"line":102,"column":27,"index":4066},"line":102,"code":"it('Format offsetName z zzz', () => {\n  const dtz = dayjs.tz('2012-03-11 01:59:59', 'America/New_York');\n  expect(dtz.format('z')).toBe('EST');\n  expect(dtz.format('zzz')).toBe('Eastern Standard Time');\n  expect(dayjs().format('z')).toBeDefined();\n  expect(dayjs().format('zzz')).toBeDefined();\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"Skips format strings inside brackets","suites":[],"updatePoint":{"line":109,"column":40,"index":4378},"line":109,"code":"it('Skips format strings inside brackets', () => {\n  expect(dayjs().format('[Q]')).toBe('Q');\n  expect(dayjs().format('[Do]')).toBe('Do');\n  expect(dayjs().format('[gggg]')).toBe('gggg');\n  expect(dayjs().format('[GGGG]')).toBe('GGGG');\n  expect(dayjs().format('[w]')).toBe('w');\n  expect(dayjs().format('[ww]')).toBe('ww');\n  expect(dayjs().format('[W]')).toBe('W');\n  expect(dayjs().format('[WW]')).toBe('WW');\n  expect(dayjs().format('[wo]')).toBe('wo');\n  expect(dayjs().format('[k]')).toBe('k');\n  expect(dayjs().format('[kk]')).toBe('kk');\n  expect(dayjs().format('[X]')).toBe('X');\n  expect(dayjs().format('[x]')).toBe('x');\n});","file":"plugin/advancedFormat.test.js","skipped":false,"dir":"test"},{"name":"local","suites":["parse empty array"],"updatePoint":{"line":15,"column":11,"index":381},"line":15,"code":"  it('local', () => {\n    expect(dayjs([]).format()).toBe(moment([]).format());\n  });","file":"plugin/arraySupport.test.js","skipped":false,"dir":"test"},{"name":"utc","suites":["parse empty array"],"updatePoint":{"line":18,"column":9,"index":465},"line":18,"code":"  it('utc', () => {\n    expect(dayjs.utc([]).format()).toBe(moment.utc([]).format());\n  });","file":"plugin/arraySupport.test.js","skipped":false,"dir":"test"},{"name":"Setters","suites":["Set"],"updatePoint":{"line":18,"column":13,"index":494},"line":18,"code":"  it('Setters', () => {\n    const d = dayjs();\n    const m = moment();\n    expect(d.year()).toBe(m.year());\n    d.year(2000);\n    m.year(2000);\n    expect(d.format()).toBe(m.format());\n    d.month(1);\n    m.month(1);\n    expect(d.format()).toBe(m.format());\n    d.day(1);\n    m.day(1);\n    expect(d.format()).toBe(m.format());\n    d.date(1);\n    m.date(1);\n    expect(d.format()).toBe(m.format());\n    d.hour(1);\n    m.hour(1);\n    expect(d.format()).toBe(m.format());\n    d.minute(1);\n    m.minute(1);\n    expect(d.format()).toBe(m.format());\n    d.second(1);\n    m.second(1);\n    expect(d.format()).toBe(m.format());\n    d.millisecond(1);\n    m.millisecond(1);\n    expect(d.format()).toBe(m.format());\n  });","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"Set","suites":["Set"],"updatePoint":{"line":47,"column":9,"index":1200},"line":47,"code":"  it('Set', () => {\n    const d = dayjs();\n    const m = moment();\n    d.set('year', 2000);\n    m.set('year', 2000);\n    expect(d.format()).toBe(m.format());\n    d.set('month', 12);\n    m.set('month', 12);\n    expect(d.format()).toBe(m.format());\n    d.set('day', 1);\n    m.set('day', 1);\n    expect(d.format()).toBe(m.format());\n    d.set('date', 1);\n    m.set('date', 1);\n    expect(d.format()).toBe(m.format());\n    d.set('hour', 1);\n    m.set('hour', 1);\n    expect(d.format()).toBe(m.format());\n    d.set('minute', 1);\n    m.set('minute', 1);\n    expect(d.format()).toBe(m.format());\n    d.set('second', 1);\n    m.set('second', 1);\n    expect(d.format()).toBe(m.format());\n    d.set('millisecond', 1);\n    m.set('millisecond', 1);\n    expect(d.format()).toBe(m.format());\n  });","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"StartOf","suites":["StartOf"],"updatePoint":{"line":77,"column":13,"index":2019},"line":77,"code":"  it('StartOf', () => {\n    const d = dayjs();\n    const m = moment();\n    d.startOf('year');\n    m.startOf('year');\n    expect(d.format()).toBe(m.format());\n    d.startOf('month');\n    m.startOf('month');\n    expect(d.format()).toBe(m.format());\n    d.startOf('day');\n    m.startOf('day');\n    expect(d.format()).toBe(m.format());\n    d.startOf('date');\n    m.startOf('date');\n    expect(d.format()).toBe(m.format());\n    d.startOf('hour');\n    m.startOf('hour');\n    expect(d.format()).toBe(m.format());\n    d.startOf('minute');\n    m.startOf('minute');\n    expect(d.format()).toBe(m.format());\n    d.startOf('second');\n    m.startOf('second');\n    expect(d.format()).toBe(m.format());\n    d.startOf('millisecond');\n    m.startOf('millisecond');\n    expect(d.format()).toBe(m.format());\n    d.startOf('week');\n    m.startOf('week');\n    expect(d.format()).toBe(m.format());\n  });","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"Add","suites":["Add"],"updatePoint":{"line":110,"column":9,"index":2925},"line":110,"code":"  it('Add', () => {\n    const d = dayjs();\n    const m = moment();\n    d.add(1, 'year');\n    m.add(1, 'year');\n    expect(d.format()).toBe(m.format());\n    d.add(12, 'month');\n    m.add(12, 'month');\n    expect(d.format()).toBe(m.format());\n    d.add(1, 'day');\n    m.add(1, 'day');\n    expect(d.format()).toBe(m.format());\n    d.add(1, 'date');\n    m.add(1, 'date');\n    expect(d.format()).toBe(m.format());\n    d.add(1, 'hour');\n    m.add(1, 'hour');\n    expect(d.format()).toBe(m.format());\n    d.add(1, 'minute');\n    m.add(1, 'minute');\n    expect(d.format()).toBe(m.format());\n    d.add(1, 'second');\n    m.add(1, 'second');\n    expect(d.format()).toBe(m.format());\n    d.add(1, 'millisecond');\n    m.add(1, 'millisecond');\n    expect(d.format()).toBe(m.format());\n    d.add(1, 'week');\n    m.add(1, 'week');\n    expect(d.format()).toBe(m.format());\n  });","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"daysInMonth","suites":["Add"],"updatePoint":{"line":142,"column":15,"index":3797},"line":142,"code":"it('daysInMonth', () => {\n  const d = dayjs();\n  const m = moment();\n  expect(d.daysInMonth()).toBe(m.daysInMonth());\n  expect(d.format()).toBe(m.format());\n});","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"Locale","suites":["Add"],"updatePoint":{"line":148,"column":10,"index":3953},"line":148,"code":"it('Locale', () => {\n  const d = dayjs();\n  const m = moment();\n  const format = 'MMMM';\n  expect(d.locale()).toBe(m.locale());\n  expect(d.format(format)).toBe(m.format(format));\n  d.locale('zh-cn');\n  m.locale('zh-cn');\n  expect(d.locale()).toBe(m.locale());\n  expect(d.format(format)).toBe(m.format(format));\n});","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"Diff","suites":["Add"],"updatePoint":{"line":159,"column":8,"index":4266},"line":159,"code":"it('Diff', () => {\n  const d = dayjs();\n  const m = moment();\n  const unit = 'year';\n  const d2 = d.clone().add(1, unit);\n  const m2 = m.clone().add(1, unit);\n  expect(d.diff(d2, unit)).toBe(-1);\n  expect(m.diff(m2, unit)).toBe(-1);\n});","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"isAfter isBefore isSame","suites":["Add"],"updatePoint":{"line":168,"column":27,"index":4522},"line":168,"code":"it('isAfter isBefore isSame', () => {\n  const d = dayjs();\n  const format = dayjs().format();\n  d.isSame(dayjs, 'year');\n  expect(d.format()).toBe(format);\n  expect(d.isSame()).toBe(true);\n  d.isBefore(dayjs, 'hour');\n  expect(d.format()).toBe(format);\n  expect(d.isBefore()).toBe(false);\n  d.isAfter(dayjs, 'month');\n  expect(d.format()).toBe(format);\n  expect(d.isAfter()).toBe(false);\n});","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"DayOfYear get day won't change instance","suites":["Add"],"updatePoint":{"line":181,"column":44,"index":4931},"line":181,"code":"it('DayOfYear get day won\\'t change instance', () => {\n  const d = dayjs();\n  const format = d.format();\n  d.dayOfYear();\n  expect(d.format()).toBe(format);\n});","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"WeekOfYear get week won't change instance","suites":["Add"],"updatePoint":{"line":187,"column":46,"index":5094},"line":187,"code":"it('WeekOfYear get week won\\'t change instance', () => {\n  const d = dayjs();\n  const format = d.format();\n  d.week();\n  expect(d.format()).toBe(format);\n});","file":"plugin/badMutable.test.js","skipped":false,"dir":"test"},{"name":"Parse BigInt ts and tsms","suites":[],"updatePoint":{"line":15,"column":28,"index":326},"line":15,"code":"it('Parse BigInt ts and tsms', () => {\n  const tsms = 1666310421101;\n  const tsmsBig = BigInt(tsms);\n  const ts = 1666311003;\n  const tsBig = BigInt(ts);\n  const momentTsms = moment(tsms);\n  const momentTs = moment.unix(ts);\n  expect(dayjs(tsms).valueOf()).toBe(momentTsms.valueOf());\n  expect(dayjs(tsms).valueOf()).toBe(dayjs(tsmsBig).valueOf());\n  expect(dayjs.unix(ts).valueOf()).toBe(momentTs.valueOf());\n  expect(dayjs.unix(tsBig).valueOf()).toBe(dayjs.unix(tsBig).valueOf());\n});","file":"plugin/bigIntSupport.test.js","skipped":false,"dir":"test"},{"name":"Format empty string","suites":[],"updatePoint":{"line":12,"column":23,"index":293},"line":12,"code":"it('Format empty string', () => {\n  expect(dayjs().format()).toBe(moment().format());\n});","file":"plugin/buddhistEra.test.js","skipped":false,"dir":"test"},{"name":"Format Buddhist Era 2 digit","suites":[],"updatePoint":{"line":15,"column":31,"index":391},"line":15,"code":"it('Format Buddhist Era 2 digit', () => {\n  expect(dayjs().format('BB')).toBe(`${(moment().year() + 543) % 100}`);\n});","file":"plugin/buddhistEra.test.js","skipped":false,"dir":"test"},{"name":"Format Buddhist Era 4 digit","suites":[],"updatePoint":{"line":18,"column":31,"index":510},"line":18,"code":"it('Format Buddhist Era 4 digit', () => {\n  expect(dayjs().format('BBBB')).toBe(`${moment().year() + 543}`);\n});","file":"plugin/buddhistEra.test.js","skipped":false,"dir":"test"},{"name":"Format Buddhist Era 4 digit with other format","suites":[],"updatePoint":{"line":21,"column":49,"index":641},"line":21,"code":"it('Format Buddhist Era 4 digit with other format', () => {\n  const format = 'D MMM BBBB';\n  const today = moment();\n  const momentDate = today.format(format).replace('BBBB', today.year() + 543);\n  expect(dayjs().format(format)).toBe(momentDate);\n});","file":"plugin/buddhistEra.test.js","skipped":false,"dir":"test"},{"name":"Skips format strings inside brackets","suites":[],"updatePoint":{"line":27,"column":40,"index":883},"line":27,"code":"it('Skips format strings inside brackets', () => {\n  expect(dayjs().format('[BBBB]')).toBe('BBBB');\n  expect(dayjs().format('[BB]')).toBe('BB');\n});","file":"plugin/buddhistEra.test.js","skipped":false,"dir":"test"},{"name":"No argument && null && undefined","suites":[],"updatePoint":{"line":13,"column":36,"index":340},"line":13,"code":"it('No argument && null && undefined', () => {\n  expect(dayjs().calendar()).toEqual(moment().calendar());\n  // moment@2.27.0 does not support calendar(null) calendar(undefined)\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"ReferenceTime","suites":[],"updatePoint":{"line":18,"column":17,"index":503},"line":18,"code":"it('ReferenceTime', () => {\n  const now = '2015-01-15T14:21:22.000Z';\n  const dates = [{\n    name: 'nextDay',\n    date: '2015-01-14T11:23:55.000Z',\n    result: 'Tomorrow'\n  }, {\n    name: 'sameDay',\n    date: '2015-01-15T11:23:55.000Z',\n    result: 'Today'\n  }, {\n    name: 'nextWeek',\n    date: '2015-01-09T11:23:55.000Z',\n    result: 'Thursday'\n  }, {\n    name: 'lastDay',\n    date: '2015-01-16T11:23:55.000Z',\n    result: 'Yesterday'\n  }, {\n    name: 'lastWeek',\n    date: '2015-01-21T11:23:55.000Z',\n    result: 'Last'\n  }, {\n    name: 'sameElse',\n    date: '2015-01-01T11:23:55.000Z',\n    result: '01/15/2015'\n  }, {\n    name: 'sameElse',\n    date: '2015-02-21T11:23:55.000Z',\n    result: '01/15/2015'\n  }];\n  dates.forEach(d => {\n    const dayjsResult = dayjs(now).calendar(d.date);\n    const momentjsResult = moment(now).calendar(d.date);\n    expect(dayjsResult).toEqual(momentjsResult);\n    expect(dayjsResult.indexOf(d.result) > -1).toBe(true);\n  });\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"Custom format","suites":[],"updatePoint":{"line":56,"column":17,"index":1467},"line":56,"code":"it('Custom format', () => {\n  const format = {\n    sameDay: '[sameDay]',\n    sameElse: '[sameElse]'\n  };\n  expect(dayjs().calendar(null, format)).toEqual(moment().calendar(null, format));\n  const now = '2015-01-15T14:21:22.000Z';\n  const nextDayWithoutFormat = '2015-01-14T11:23:55.000Z';\n  expect(dayjs(now).calendar(nextDayWithoutFormat, format)).toEqual(moment(now).calendar(nextDayWithoutFormat, format));\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"Custom callback","suites":[],"updatePoint":{"line":66,"column":19,"index":1883},"line":66,"code":"it('Custom callback', () => {\n  const callbacks = {\n    sameDay: jest.fn(),\n    sameElse: jest.fn()\n  };\n  const now = '2015-01-15T14:21:22.000Z';\n  const nextDayWithoutFormat = '2015-01-14T11:23:55.000Z';\n  expect(dayjs(now).calendar(nextDayWithoutFormat, callbacks)).toEqual(moment(now).calendar(nextDayWithoutFormat, callbacks));\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"Calls callback","suites":[],"updatePoint":{"line":75,"column":18,"index":2219},"line":75,"code":"it('Calls callback', () => {\n  const callbacks = {\n    sameDay: jest.fn(),\n    sameElse: jest.fn()\n  };\n  dayjs().calendar(null, callbacks);\n  expect(callbacks.sameElse).not.toBeCalled();\n  expect(callbacks.sameDay).toBeCalled();\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"callback is a function with the scope of the current moment","suites":[],"updatePoint":{"line":84,"column":63,"index":2498},"line":84,"code":"it('callback is a function with the scope of the current moment', () => {\n  const callbacks = {\n    sameDay: jest.fn()\n  };\n  expect(dayjs().calendar(null, callbacks)).toEqual(callbacks.sameDay());\n  const callbacks2 = {\n    sameDay: function cb() {\n      return this;\n    }\n  };\n  const result = dayjs().calendar(null, callbacks2);\n  expect(result.format).not.toBeUndefined();\n  expect(dayjs.isDayjs(result)).toBeTruthy();\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"callback is a function and first argument a moment that depicts now","suites":[],"updatePoint":{"line":98,"column":71,"index":2934},"line":98,"code":"it('callback is a function and first argument a moment that depicts now', () => {\n  const callbacks = {\n    sameDay: jest.fn()\n  };\n  const now = dayjs();\n  dayjs(now).calendar(now, callbacks);\n  expect(callbacks.sameDay).toBeCalledWith(now);\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"set global calendar in locale file","suites":[],"updatePoint":{"line":106,"column":38,"index":3148},"line":106,"code":"it('set global calendar in locale file', () => {\n  const now = '2019-04-03T14:21:22.000Z';\n  zhCn.calendar = {\n    sameDay: '[今天]HH:mm',\n    nextDay: '[明天]HH:mm',\n    nextWeek: '[下]ddddHH:mm',\n    lastDay: '[昨天]HH:mm',\n    lastWeek: '[上]ddddHH:mm',\n    sameElse: 'YYYY/MM/DD'\n  };\n  dayjs.locale(zhCn);\n  expect(dayjs(now).calendar()).toEqual(moment(now).locale('zh-cn').calendar());\n});","file":"plugin/calendar.test.js","skipped":false,"dir":"test"},{"name":"does not break the built-in parsing","suites":[],"updatePoint":{"line":18,"column":39,"index":587},"line":18,"code":"it('does not break the built-in parsing', () => {\n  const input = '2018-05-02 01:02:03.004';\n  expect(dayjs(input).valueOf()).toBe(moment(input).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse padded string","suites":[],"updatePoint":{"line":22,"column":23,"index":732},"line":22,"code":"it('parse padded string', () => {\n  const input = '2018-05-02 01:02:03.004 AM +01:00';\n  const format = 'YYYY-MM-DD HH:mm:ss.SSS A Z';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse string for MMM month format","suites":[],"updatePoint":{"line":27,"column":37,"index":965},"line":27,"code":"it('parse string for MMM month format', () => {\n  const input = '4/Mar/2019:11:16:26 +0800';\n  const format = 'D/MMM/YYYY:H:m:s zz';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n  const input2 = '21-Dec-18';\n  const format2 = 'D-MMM-YY';\n  expect(dayjs(input2, format2).valueOf()).toBe(moment(input2, format2).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse string January (getMonth() = 0)","suites":[],"updatePoint":{"line":35,"column":41,"index":1330},"line":35,"code":"it('parse string January (getMonth() = 0)', () => {\n  const input = '01/01/2019';\n  const format = 'DD/MM/YYYY';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse unpadded string","suites":[],"updatePoint":{"line":40,"column":25,"index":1511},"line":40,"code":"it('parse unpadded string', () => {\n  const input = '2.5.18 1:2:3.4 PM -0100';\n  const format = 'D.M.YY H:m:s.S A ZZ';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse time zone abbreviation","suites":[],"updatePoint":{"line":45,"column":32,"index":1721},"line":45,"code":"it('parse time zone abbreviation', () => {\n  const input = '05/02/69 1:02:03.004 AM +01:00 (CET)';\n  const format = 'MM/DD/YY h:mm:ss.SSS A Z (z)';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse time zone abbreviation2","suites":[],"updatePoint":{"line":50,"column":33,"index":1954},"line":50,"code":"it('parse time zone abbreviation2', () => {\n  const input = '05/02/69 1:02:03.04 AM +01:00 (CET)';\n  const format = 'MM/DD/YY h:mm:ss.SS A Z (z)';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"recognizes midnight in small letters","suites":[],"updatePoint":{"line":55,"column":40,"index":2192},"line":55,"code":"it('recognizes midnight in small letters', () => {\n  const input = '2018-05-02 12:00 am';\n  const format = 'YYYY-MM-DD hh:mm a';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"recognizes noon in small letters","suites":[],"updatePoint":{"line":60,"column":36,"index":2401},"line":60,"code":"it('recognizes noon in small letters', () => {\n  const input = '2018-05-02 12:00 pm';\n  const format = 'YYYY-MM-DD hh:mm a';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"Locale: ","suites":["parse localizedFormats"],"updatePoint":{"line":67,"column":21,"index":2684},"line":67,"code":"    it(`Locale: ${lo}`, () => {\n      const input = '2018-05-02 01:02:03.004';\n      dayjs.locale(lo);\n      moment.locale(lo);\n      const longDateFormats = ['LT', 'LTS', 'L', 'LL', 'l', 'll', 'lll', 'l LT', 'LL [l] LTS']; // TODO: fix LLL, LLLL and llll\n      longDateFormats.forEach(f => {\n        const localizedInput = moment(input).format(f);\n        expect(dayjs(localizedInput, f).valueOf()).toBe(moment(localizedInput, f).valueOf());\n      });\n    });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"leaves non-token parts of the format intact","suites":["parse localizedFormats"],"updatePoint":{"line":79,"column":47,"index":3181},"line":79,"code":"it('leaves non-token parts of the format intact', () => {\n  const input = '2018-05-02 12:00 +0000 S:/-.() SS h ';\n  const format = 'YYYY-MM-DD HH:mm ZZ [S]:/-.()[ SS h ]';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"timezone with no hour","suites":["parse localizedFormats"],"updatePoint":{"line":84,"column":25,"index":3415},"line":84,"code":"it('timezone with no hour', () => {\n  const input = '2018-05-02 +0000';\n  const format = 'YYYY-MM-DD ZZ';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"timezone with 2-digit offset","suites":["Timezone Offset"],"updatePoint":{"line":90,"column":34,"index":3650},"line":90,"code":"  it('timezone with 2-digit offset', () => {\n    const input = '2020-12-01T20:00:00+09';\n    const format = 'YYYY-MM-DD[T]HH:mm:ssZZ';\n    const result = dayjs(input, format);\n    expect(result.valueOf()).toBe(moment(input, format).valueOf());\n    expect(result.valueOf()).toBe(1606820400000);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"zulu","suites":["Timezone Offset"],"updatePoint":{"line":97,"column":10,"index":3926},"line":97,"code":"  it('zulu', () => {\n    const input = '2021-01-26T15:38:43.000Z';\n    const format = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n    const result = dayjs(input, format);\n    expect(result.valueOf()).toBe(moment(input, format).valueOf());\n    expect(result.valueOf()).toBe(1611675523000);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"no timezone format token should parse in local time","suites":["Timezone Offset"],"updatePoint":{"line":104,"column":57,"index":4252},"line":104,"code":"  it('no timezone format token should parse in local time', () => {\n    const input = '2020-12-01T20:00:00+01:00';\n    const format = 'YYYY-MM-DD[T]HH:mm:ss';\n    const result = dayjs(input, format);\n    expect(result.valueOf()).toBe(moment(input, format).valueOf());\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse hh:mm","suites":["Timezone Offset"],"updatePoint":{"line":111,"column":15,"index":4488},"line":111,"code":"it('parse hh:mm', () => {\n  const input = '12:00';\n  const format = 'hh:mm';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse HH:mm:ss","suites":["Timezone Offset"],"updatePoint":{"line":116,"column":18,"index":4652},"line":116,"code":"it('parse HH:mm:ss', () => {\n  const input = '00:27:21';\n  const format = 'HH:mm:ss';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse HH:mm:ss but only one digit","suites":["Timezone Offset"],"updatePoint":{"line":121,"column":37,"index":4841},"line":121,"code":"it('parse HH:mm:ss but only one digit', () => {\n  const input = '0:0:1';\n  const format = 'HH:mm:ss';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"YYYY","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":127,"column":10,"index":5046},"line":127,"code":"  it('YYYY', () => {\n    const input = '2001 +08:00';\n    const format = 'YYYY Z';\n    expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n    const input2 = '2001';\n    const format2 = 'YYYY';\n    expect(dayjs(input2, format2).valueOf()).toBe(moment(input2, format2).valueOf());\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"YYYY-MM","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":135,"column":13,"index":5361},"line":135,"code":"  it('YYYY-MM', () => {\n    const input = '2001-01 +08:00';\n    const format = 'YYYY-MM Z';\n    expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n    const input2 = '2001-01';\n    const format2 = 'YYYY-MM';\n    expect(dayjs(input2, format2).valueOf()).toBe(moment(input2, format2).valueOf());\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse hh:mm:ss but only one digit","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":144,"column":37,"index":5716},"line":144,"code":"it('parse hh:mm:ss but only one digit', () => {\n  const input = '0:0:1';\n  const format = 'hh:mm:ss';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"fails with an invalid format","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":149,"column":32,"index":5897},"line":149,"code":"it('fails with an invalid format', () => {\n  const input = '2018-05-02 12:00 PM';\n  const format = 'C';\n  expect(dayjs(input, format).format().toLowerCase()).toBe(moment(input, format).format().toLowerCase());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse month from string","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":154,"column":27,"index":6106},"line":154,"code":"it('parse month from string', () => {\n  const input = '2018 February 03';\n  const format = 'YYYY MMMM DD';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n  const input2 = '21-December-18';\n  const format2 = 'D-MMMM-YY';\n  expect(dayjs(input2, format2).valueOf()).toBe(moment(input2, format2).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse month from short string","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":162,"column":33,"index":6453},"line":162,"code":"it('parse month from short string', () => {\n  const input = '2018 Feb 03';\n  const format = 'YYYY MMM DD';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse month from string with locale in config","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":167,"column":49,"index":6660},"line":167,"code":"it('parse month from string with locale in config', () => {\n  const input = '2018 лютий 03';\n  const format = 'YYYY MMMM DD';\n  expect(dayjs(input, format, 'uk').valueOf()).toBe(moment(input, format, 'uk').valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse month from short string with locale in config","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":172,"column":55,"index":6888},"line":172,"code":"it('parse month from short string with locale in config', () => {\n  const input = '2018 трав 03';\n  const format = 'YYYY MMM DD';\n  expect(dayjs(input, format, 'uk').valueOf()).toBe(moment(input, format, 'uk').valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse month from short string with locale in argument","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":177,"column":57,"index":7116},"line":177,"code":"it('parse month from short string with locale in argument', () => {\n  const input = '2018 трав 03';\n  const format = 'YYYY MMM DD';\n  expect(dayjs(input, format, 'uk').valueOf()).toBe(moment(input, format, 'uk').valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse month from string with locale in argument","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":182,"column":51,"index":7338},"line":182,"code":"it('parse month from string with locale in argument', () => {\n  const input = '2018 лютий 03';\n  const format = 'YYYY MMMM DD';\n  expect(dayjs(input, format, 'uk').valueOf()).toBe(moment(input, format, 'uk').valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"return Invalid Date when parse corrupt string","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":187,"column":49,"index":7560},"line":187,"code":"it('return Invalid Date when parse corrupt string', () => {\n  const input = '2018 Turnip 03';\n  const format = 'YYYY MMMM DD';\n  expect(dayjs(input, format).format()).toBe('Invalid Date');\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"return Invalid Date when parse corrupt short string","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":192,"column":55,"index":7759},"line":192,"code":"it('return Invalid Date when parse corrupt short string', () => {\n  const input = '2018 Dog 03';\n  const format = 'YYYY MMM DD';\n  expect(dayjs(input, format).format()).toBe('Invalid Date');\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"YYYY-MM set 1st day of the month","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":197,"column":36,"index":7935},"line":197,"code":"it('YYYY-MM set 1st day of the month', () => {\n  expect(dayjs('2019-02', 'YYYY-MM').format('YYYY-MM-DD')).toBe('2019-02-01');\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"Invalid Dates","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":200,"column":17,"index":8046},"line":200,"code":"it('Invalid Dates', () => {\n  expect(dayjs('10/12/2014', 'YYYY-MM-DD').format('MM-DD-YYYY')).toBe('Invalid Date');\n  expect(dayjs('10-12-2014', 'YYYY-MM-DD').format('MM-DD-YYYY')).toBe('Invalid Date');\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"Valid Date","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":204,"column":14,"index":8249},"line":204,"code":"it('Valid Date', () => {\n  expect(dayjs('2014/10/12', 'YYYY-MM-DD').format('MM-DD-YYYY')).toBe('10-12-2014');\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"correctly parse month from string after changing locale globally","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":207,"column":68,"index":8417},"line":207,"code":"it('correctly parse month from string after changing locale globally', () => {\n  const input = '2018 лютий 03';\n  const format = 'YYYY MMMM DD';\n  const dayjsLocale = dayjs().$locale();\n  const momentLocale = moment.locale();\n  try {\n    dayjs.locale(uk);\n    moment.locale('uk');\n    expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n  } finally {\n    dayjs.locale(dayjsLocale);\n    moment.locale(momentLocale);\n  }\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"correctly parse ordinal","suites":["parse YYYY / YYYY-MM only"],"updatePoint":{"line":221,"column":27,"index":8825},"line":221,"code":"it('correctly parse ordinal', () => {\n  const input = '7th March 2019';\n  const input2 = '17th March 2019';\n  const inputFalse = '7st March 2019';\n  const inputZHCN = '7日 三月 2019';\n  const format = 'Do MMMM YYYY';\n  const displayFormatWithLocale = 'MMMM dddd';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n  expect(dayjs(input2, format).valueOf()).toBe(moment(input2, format).valueOf());\n  expect(dayjs(inputFalse, format).valueOf()).toBe(moment(inputFalse, format).valueOf());\n  const dayjsCN = dayjs(inputZHCN, format, 'zh-cn');\n  const momentCN = moment(inputZHCN, format, 'zh-cn');\n  expect(dayjsCN.valueOf()).toBe(momentCN.valueOf());\n  expect(dayjsCN.format(displayFormatWithLocale)).toBe(momentCN.format(displayFormatWithLocale));\n  expect(dayjsCN.locale()).toBe(momentCN.locale());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"MMMM","suites":["month function locale"],"updatePoint":{"line":238,"column":10,"index":9679},"line":238,"code":"  it('MMMM', () => {\n    const input = '08 мая 2020';\n    const input2 = '08 май 2020';\n    const format = 'DD MMMM YYYY';\n    expect(dayjs(input, format, 'ru').valueOf()).toBe(moment(input, format, 'ru').valueOf());\n    expect(dayjs(input2, format, 'ru').valueOf()).toBe(moment(input2, format, 'ru').valueOf());\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"MMM","suites":["month function locale"],"updatePoint":{"line":245,"column":9,"index":9997},"line":245,"code":"  it('MMM', () => {\n    const input = '08 февр. 2020';\n    const format = 'DD MMM YYYY';\n    expect(dayjs(input, format, 'ru').valueOf()).toBe(moment(input, format, 'ru').valueOf());\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"without locale","suites":["Strict mode"],"updatePoint":{"line":252,"column":20,"index":10233},"line":252,"code":"  it('without locale', () => {\n    const input = '1970-00-00';\n    const format = 'YYYY-MM-DD';\n    expect(dayjs(input, format).isValid()).toBe(true);\n    expect(dayjs(input, format, true).isValid()).toBe(false);\n    expect(dayjs('2020-Jan-01', 'YYYY-MMM-DD', true).isValid()).toBe(true);\n    expect(dayjs('30/1/2020 10:59 PM', 'D/M/YYYY h:mm A', true).isValid()).toBe(true);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"with locale","suites":["Strict mode"],"updatePoint":{"line":260,"column":17,"index":10612},"line":260,"code":"  it('with locale', () => {\n    const input = '2018 三月 99';\n    const format = 'YYYY MMMM DD';\n    expect(dayjs(input, format, 'zh-cn').isValid()).toBe(true);\n    expect(dayjs(input, format, 'zh-cn', true).isValid()).toBe(false);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"second ok","suites":["Array format support"],"updatePoint":{"line":268,"column":15,"index":10891},"line":268,"code":"  it('second ok', () => {\n    const input = '2012-05-28';\n    const format = ['YYYY', 'YYYY-MM-DD'];\n    expect(dayjs(input, format).isValid()).toBe(true);\n    expect(dayjs(input, format, true).format('YYYY-MM-DD')).toBe('2012-05-28');\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"all invalid","suites":["Array format support"],"updatePoint":{"line":274,"column":17,"index":11135},"line":274,"code":"  it('all invalid', () => {\n    const input = '2012-05-28';\n    const format = ['DD', 'MM-DD'];\n    expect(dayjs(input, format, true).isValid()).toBe(false);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"with locale","suites":["Array format support"],"updatePoint":{"line":279,"column":17,"index":11299},"line":279,"code":"  it('with locale', () => {\n    const input = '2018 三月 12';\n    const format = ['YYYY', 'MM', 'YYYY MMMM DD'];\n    expect(dayjs(input, format, 'zh-cn', true).format('YYYY MMMM DD')).toBe(input);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"AM","suites":["meridiem locale"],"updatePoint":{"line":288,"column":8,"index":11611},"line":288,"code":"  it('AM', () => {\n    const input = '2018-05-02 01:02:03';\n    const date = dayjs(input).locale('zh-cn').format(format);\n    expect(dayjs(date, format, 'zh-cn').format(format2)).toBe(input);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"PM","suites":["meridiem locale"],"updatePoint":{"line":293,"column":8,"index":11809},"line":293,"code":"  it('PM', () => {\n    const input = '2018-05-02 20:02:03';\n    const date = dayjs(input).locale('zh-cn').format(format);\n    expect(dayjs(date, format, 'zh-cn').format(format2)).toBe(input);\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse a string for MMM month format with underscore delimiter","suites":["meridiem locale"],"updatePoint":{"line":299,"column":65,"index":12068},"line":299,"code":"it('parse a string for MMM month format with underscore delimiter', () => {\n  const input = 'Jan_2021';\n  const format = 'MMM_YYYY';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n  const input2 = '21_Jan_2021_123523';\n  const format2 = 'DD_MMM_YYYY_hhmmss';\n  expect(dayjs(input2, format2).valueOf()).toBe(moment(input2, format2).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"custom two-digit year parse function","suites":["meridiem locale"],"updatePoint":{"line":307,"column":40,"index":12423},"line":307,"code":"it('custom two-digit year parse function', () => {\n  delete customParseFormat.$i; // this allow plugin to be installed again\n  dayjs.extend(customParseFormat, {\n    parseTwoDigitYear: yearString => +yearString + 1800\n  });\n  const format = 'YY-MM-DD';\n  const input = '00-05-02';\n  expect(dayjs(input, format).year()).toBe(1800);\n  const input2 = '50-05-02';\n  expect(dayjs(input2, format).year()).toBe(1850);\n  const input3 = '99-05-02';\n  expect(dayjs(input3, format).year()).toBe(1899);\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"Output is NaN for a specific date format","suites":["parse with special separator characters"],"updatePoint":{"line":323,"column":46,"index":12998},"line":323,"code":"  it('Output is NaN for a specific date format', () => {\n    const input = '20 Nov, 2022';\n    const format = 'DD MMM, YYYY';\n    const locale = 'en';\n    const resultDayjs = dayjs(input, format, locale);\n    const resultMoment = moment(input, format, locale);\n    expect(resultMoment.isValid()).toBe(true);\n    expect(resultDayjs.isValid()).toBe(true);\n    expect(resultDayjs.format('DD-MM-YYYY')).toBe('20-11-2022');\n    expect(resultMoment.format('DD-MM-YYYY')).toBe('20-11-2022');\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse comma separated date","suites":["parse with special separator characters"],"updatePoint":{"line":334,"column":32,"index":13475},"line":334,"code":"  it('parse comma separated date', () => {\n    const input = '20,11,2022';\n    const format = 'DD,MM,YYYY';\n    const resultDayjs = dayjs(input, format);\n    const resultMoment = moment(input, format);\n    expect(resultMoment.isValid()).toBe(true);\n    expect(resultDayjs.isValid()).toBe(true);\n    expect(resultDayjs.format('DD-MM-YYYY')).toBe('20-11-2022');\n    expect(resultMoment.format('DD-MM-YYYY')).toBe('20-11-2022');\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse comma separated date in strict mode","suites":["parse with special separator characters"],"updatePoint":{"line":344,"column":47,"index":13922},"line":344,"code":"  it('parse comma separated date in strict mode', () => {\n    const input = '20,11,2022';\n    const format = 'DD,MM,YYYY';\n    const resultDayjs = dayjs(input, format, true);\n    const resultMoment = moment(input, format, true);\n    expect(resultMoment.isValid()).toBe(true);\n    expect(resultDayjs.isValid()).toBe(true);\n    expect(resultDayjs.format('DD-MM-YYYY')).toBe('20-11-2022');\n    expect(resultMoment.format('DD-MM-YYYY')).toBe('20-11-2022');\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse date with multi character separator","suites":["parse with special separator characters"],"updatePoint":{"line":354,"column":47,"index":14381},"line":354,"code":"  it('parse date with multi character separator', () => {\n    const input = '20---11---2022';\n    const format = 'DD-/-MM-#-YYYY';\n    const resultDayjs = dayjs(input, format);\n    const resultMoment = moment(input, format);\n    expect(resultMoment.isValid()).toBe(true);\n    expect(resultDayjs.isValid()).toBe(true);\n    expect(resultDayjs.format('DD-MM-YYYY')).toBe('20-11-2022');\n    expect(resultMoment.format('DD-MM-YYYY')).toBe('20-11-2022');\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse date with multi character separator in strict mode","suites":["parse with special separator characters"],"updatePoint":{"line":364,"column":62,"index":14851},"line":364,"code":"  it('parse date with multi character separator in strict mode', () => {\n    const input = '20-/-11-#-2022';\n    const format = 'DD-/-MM-#-YYYY';\n    const resultDayjs = dayjs(input, format, true);\n    const resultMoment = moment(input, format, true);\n    expect(resultMoment.isValid()).toBe(true);\n    expect(resultDayjs.isValid()).toBe(true);\n    expect(resultDayjs.format('DD-MM-YYYY')).toBe('20-11-2022');\n    expect(resultMoment.format('DD-MM-YYYY')).toBe('20-11-2022');\n  });","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"parse X x","suites":["parse with special separator characters"],"updatePoint":{"line":375,"column":13,"index":15288},"line":375,"code":"it('parse X x', () => {\n  const input = '1410715640.579';\n  const format = 'X';\n  expect(dayjs(input, format).valueOf()).toBe(moment(input, format).valueOf());\n  const input2 = '1410715640579';\n  const format2 = 'x';\n  expect(dayjs(input2, format2).valueOf()).toBe(moment(input2, format2).valueOf());\n\n  // x X starct parse requires advancedFormat plugin\n  dayjs.extend(advancedFormat);\n  expect(dayjs(input2, format2, true).valueOf()).toBe(moment(input2, format2, true).valueOf());\n});","file":"plugin/customParseFormat.test.js","skipped":false,"dir":"test"},{"name":"DayOfYear get","suites":[],"updatePoint":{"line":12,"column":17,"index":281},"line":12,"code":"it('DayOfYear get', () => {\n  expect(dayjs().dayOfYear()).toBe(moment().dayOfYear());\n  expect(dayjs('2015-01-01T00:00:00.000').dayOfYear()).toBe(1);\n  expect(dayjs('2015-01-31T00:00:00.000').dayOfYear()).toBe(31);\n  expect(dayjs('2015-02-01T00:00:00.000').dayOfYear()).toBe(32);\n  expect(dayjs('2015-02-28T00:00:00.000').dayOfYear()).toBe(59);\n  expect(dayjs('2015-12-31T00:00:00.000').dayOfYear()).toBe(365);\n});","file":"plugin/dayOfYear.test.js","skipped":false,"dir":"test"},{"name":"DayOfYear set","suites":[],"updatePoint":{"line":20,"column":17,"index":696},"line":20,"code":"it('DayOfYear set', () => {\n  expect(dayjs().dayOfYear(4).dayOfYear()).toBe(moment().dayOfYear(4).dayOfYear());\n  expect(dayjs('2015-01-01T00:00:00.000Z').dayOfYear(4).dayOfYear()).toBe(4);\n  expect(dayjs('2015-01-01T00:00:00.000Z').dayOfYear(4).toISOString()).toBe('2015-01-04T00:00:00.000Z');\n  expect(dayjs('2015-01-01T00:00:00.000Z').dayOfYear(32).dayOfYear()).toBe(32);\n  expect(dayjs('2015-01-01T00:00:00.000Z').dayOfYear(32).toISOString()).toBe('2015-02-01T00:00:00.000Z');\n  expect(dayjs('2015-01-01T00:00:00.000Z').dayOfYear(365).dayOfYear()).toBe(365);\n  expect(dayjs('2015-01-01T00:00:00.000Z').dayOfYear(365).toISOString()).toBe('2015-12-31T00:00:00.000Z');\n});","file":"plugin/dayOfYear.test.js","skipped":false,"dir":"test"},{"name":"Plugin declarations","suites":[],"updatePoint":{"line":5,"column":23,"index":152},"line":5,"code":"it('Plugin declarations', () => {\n  fs.readdirSync(path.join(__dirname, pluginDir)).forEach(l => {\n    expect(fs.existsSync(path.join(__dirname, pluginTypeDir, `${l}.d.ts`))).toBe(true);\n  });\n});","file":"plugin/declarations.test.js","skipped":false,"dir":"test"},{"name":"Warning: passing Year as a Number will be parsed as a Unix timestamp","suites":[],"updatePoint":{"line":12,"column":72,"index":353},"line":12,"code":"it('Warning: passing Year as a Number will be parsed as a Unix timestamp', () => {\n  const consoleSpy = jest.spyOn(console, 'warn');\n  dayjs(2020);\n  expect(consoleSpy).toHaveBeenCalledWith('Guessing you may want to parse the Year 2020, you should pass it as a String 2020, not a Number. Otherwise, 2020 will be treated as a Unix timestamp');\n});","file":"plugin/devHelper.test.js","skipped":false,"dir":"test"},{"name":"Warning Passing Unix timestamp as a String not Number","suites":[],"updatePoint":{"line":17,"column":57,"index":685},"line":17,"code":"it('Warning Passing Unix timestamp as a String not Number', () => {\n  const consoleSpy = jest.spyOn(console, 'warn');\n  dayjs('1231231231231');\n  expect(consoleSpy).toHaveBeenCalledWith('To parse a Unix timestamp like 1231231231231, you should pass it as a Number. https://day.js.org/docs/en/parse/unix-timestamp-milliseconds');\n});","file":"plugin/devHelper.test.js","skipped":false,"dir":"test"},{"name":"Warning Enable customParseFormat plugin while passing the second format parameter","suites":[],"updatePoint":{"line":22,"column":85,"index":1046},"line":22,"code":"it('Warning Enable customParseFormat plugin while passing the second format parameter', () => {\n  const consoleSpy = jest.spyOn(console, 'warn');\n  dayjs('2020', 'YYYY');\n  expect(consoleSpy).toHaveBeenCalledWith('To parse a date-time string like 2020 using the given format, you should enable customParseFormat plugin first. https://day.js.org/docs/en/parse/string-format');\n});","file":"plugin/devHelper.test.js","skipped":false,"dir":"test"},{"name":"Warning: Setting locale before loading locale","suites":[],"updatePoint":{"line":27,"column":49,"index":1390},"line":27,"code":"it('Warning: Setting locale before loading locale', () => {\n  const consoleSpy = jest.spyOn(console, 'warn');\n  dayjs.locale('zh-cn');\n  expect(consoleSpy).toHaveBeenCalledWith('Guessing you may want to use locale zh-cn, you have to load it before using it. https://day.js.org/docs/en/i18n/loading-into-nodejs');\n});","file":"plugin/devHelper.test.js","skipped":false,"dir":"test"},{"name":"no argument","suites":["Creating"],"updatePoint":{"line":16,"column":17,"index":424},"line":16,"code":"  it('no argument', () => {\n    expect(dayjs.duration().toISOString()).toBe('P0D');\n    expect(dayjs.duration().asMilliseconds()).toBe(0);\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"milliseconds","suites":["Creating"],"updatePoint":{"line":20,"column":18,"index":570},"line":20,"code":"  it('milliseconds', () => {\n    expect(dayjs.duration(1, 'ms').toISOString()).toBe('PT0.001S');\n    expect(dayjs.duration(100).toISOString()).toBe('PT0.1S');\n    expect(dayjs.duration(1000).toISOString()).toBe('PT1S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"two argument will bubble up to the next","suites":["Creating"],"updatePoint":{"line":25,"column":45,"index":823},"line":25,"code":"  it('two argument will bubble up to the next', () => {\n    expect(dayjs.duration(59, 'seconds').toISOString()).toBe('PT59S');\n    expect(dayjs.duration(60, 'seconds').toISOString()).toBe('PT1M');\n    expect(dayjs.duration(13213, 'seconds').toISOString()).toBe('PT3H40M13S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"two argument will bubble up to the next (negative number)","suites":["Creating"],"updatePoint":{"line":30,"column":63,"index":1123},"line":30,"code":"  it('two argument will bubble up to the next (negative number)', () => {\n    expect(dayjs.duration(-59, 'seconds').toISOString()).toBe('-PT59S');\n    expect(dayjs.duration(-60, 'seconds').toISOString()).toBe('-PT1M');\n    expect(dayjs.duration(-13213, 'seconds').toISOString()).toBe('-PT3H40M13S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"object with float","suites":["Creating"],"updatePoint":{"line":35,"column":23,"index":1389},"line":35,"code":"  it('object with float', () => {\n    expect(dayjs.duration({\n      seconds: 1,\n      minutes: 2,\n      hours: 3,\n      days: 4,\n      months: 6,\n      years: 7\n    }).toISOString()).toBe('P7Y6M4DT3H2M1S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"object with weeks and float","suites":["Creating"],"updatePoint":{"line":45,"column":33,"index":1612},"line":45,"code":"  it('object with weeks and float', () => {\n    expect(dayjs.duration({\n      seconds: 1.1,\n      minutes: 2,\n      hours: 3,\n      days: 4,\n      weeks: 5,\n      months: 6,\n      years: 7\n    }).toISOString()).toBe('P7Y6M39DT3H2M1.1S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"object with millisecond","suites":["Creating"],"updatePoint":{"line":56,"column":29,"index":1852},"line":56,"code":"  it('object with millisecond', () => {\n    expect(dayjs.duration({\n      ms: 1\n    }).toISOString()).toBe('PT0.001S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"object with negative millisecond","suites":["Creating"],"updatePoint":{"line":61,"column":38,"index":1987},"line":61,"code":"  it('object with negative millisecond', () => {\n    expect(dayjs.duration({\n      ms: -1\n    }).toISOString()).toBe('-PT0.001S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"convert to milliseconds","suites":["Creating"],"updatePoint":{"line":66,"column":29,"index":2115},"line":66,"code":"  it('convert to milliseconds', () => {\n    expect(+dayjs.duration(100)).toBe(100);\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Full ISO string","suites":["Parse ISO string"],"updatePoint":{"line":71,"column":21,"index":2238},"line":71,"code":"  it('Full ISO string', () => {\n    expect(dayjs.duration('P7Y6M4DT3H2M1S').toISOString()).toBe('P7Y6M4DT3H2M1S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Part ISO string","suites":["Parse ISO string"],"updatePoint":{"line":74,"column":21,"index":2359},"line":74,"code":"  it('Part ISO string', () => {\n    expect(dayjs.duration('PT2777H46M40S').toISOString()).toBe('PT2777H46M40S');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Formatting missing components","suites":["Parse ISO string"],"updatePoint":{"line":77,"column":35,"index":2492},"line":77,"code":"  it('Formatting missing components', () => {\n    expect(dayjs.duration('PT1H').format('YYYY-MM-DDTHH:mm:ss')).toBe('0000-00-00T01:00:00');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"ISO string with week","suites":["Parse ISO string"],"updatePoint":{"line":80,"column":26,"index":2629},"line":80,"code":"  it('ISO string with week', () => {\n    const d = dayjs.duration('P2M3W4D');\n    expect(d.toISOString()).toBe('P2M25D');\n    expect(d.asDays()).toBe(85); // moment 85, count 2M as 61 days\n    expect(d.asWeeks()).toBe(12.142857142857142); // moment 12.285714285714286\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Invalid ISO string","suites":["Parse ISO string"],"updatePoint":{"line":87,"column":24,"index":2902},"line":87,"code":"  it('Invalid ISO string', () => {\n    expect(dayjs.duration('Invalid').toISOString()).toBe('P0D');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Is duration","suites":["Parse ISO string"],"updatePoint":{"line":91,"column":15,"index":3003},"line":91,"code":"it('Is duration', () => {\n  expect(dayjs.isDuration(dayjs.duration())).toBe(true);\n  expect(dayjs.isDuration(dayjs.duration(1))).toBe(true);\n  expect(dayjs.isDuration(dayjs())).toBe(false);\n  expect(dayjs.isDuration({})).toBe(false);\n  expect(dayjs.isDuration()).toBe(false);\n});","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"toJSON","suites":["Parse ISO string"],"updatePoint":{"line":98,"column":10,"index":3278},"line":98,"code":"it('toJSON', () => {\n  expect(JSON.stringify({\n    postDuration: dayjs.duration(5, 'minutes')\n  })).toBe('{\"postDuration\":\"PT5M\"}');\n});","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Humaniz","suites":["Humanize"],"updatePoint":{"line":104,"column":13,"index":3447},"line":104,"code":"  it('Humaniz', () => {\n    expect(dayjs.duration(1, 'minutes').humanize()).toBe('a minute');\n    expect(dayjs.duration(2, 'minutes').humanize()).toBe('2 minutes');\n    expect(dayjs.duration(24, 'hours').humanize()).toBe('a day');\n    expect(dayjs.duration(1, 'minutes').humanize(true)).toBe('in a minute');\n    expect(dayjs.duration(-1, 'minutes').humanize(true)).toBe('a minute ago');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Locale","suites":["Humanize"],"updatePoint":{"line":111,"column":12,"index":3839},"line":111,"code":"  it('Locale', () => {\n    expect(dayjs.duration(1, 'minutes').humanize(true)).toBe('in a minute');\n    expect(dayjs.duration(1, 'minutes').locale('fr').humanize(true)).toBe('dans une minute');\n    expect(dayjs.duration(1, 'minutes').locale('es').humanize(true)).toBe('en un minuto');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Global Locale","suites":["Humanize"],"updatePoint":{"line":116,"column":19,"index":4137},"line":116,"code":"  it('Global Locale', () => {\n    dayjs.locale('en');\n    expect(dayjs.duration(1, 'minutes').humanize(true)).toBe('in a minute');\n    dayjs.locale('fr');\n    expect(dayjs.duration(1, 'minutes').humanize(true)).toBe('dans une minute');\n    dayjs.locale('es');\n    expect(dayjs.duration(1, 'minutes').humanize(true)).toBe('en un minuto');\n    dayjs.locale('en');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Locale clone","suites":["Clone"],"updatePoint":{"line":127,"column":18,"index":4534},"line":127,"code":"  it('Locale clone', () => {\n    const d = dayjs.duration(1, 'minutes').locale('fr');\n    const r = 'dans une minute';\n    expect(d.humanize(true)).toBe(r);\n    expect(d.clone().humanize(true)).toBe(r);\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Add duration","suites":["Add"],"updatePoint":{"line":169,"column":18,"index":6226},"line":169,"code":"test('Add duration', () => {\n  const a = dayjs('2020-10-01');\n  const days = dayjs.duration(2, 'days');\n  expect(a.add(days).format('YYYY-MM-DD')).toBe('2020-10-03');\n});","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"Subtract duration","suites":["Subtract"],"updatePoint":{"line":179,"column":23,"index":6553},"line":179,"code":"test('Subtract duration', () => {\n  const a = dayjs('2020-10-20');\n  const days = dayjs.duration(2, 'days');\n  expect(a.subtract(days).format('YYYY-MM-DD')).toBe('2020-10-18');\n});","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"positive number","suites":["Days"],"updatePoint":{"line":203,"column":21,"index":7551},"line":203,"code":"  it('positive number', () => {\n    expect(dayjs.duration(100000000).days()).toBe(1);\n    expect(dayjs.duration(100000000).asDays().toFixed(2)).toBe('1.16');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"negative number","suites":["Days"],"updatePoint":{"line":207,"column":21,"index":7715},"line":207,"code":"  it('negative number', () => {\n    expect(dayjs.duration(-1).days()).toBe(0);\n    expect(dayjs.duration(-86399999).asDays()).toBeCloseTo(-0.999999, 4);\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"no formatStr","suites":["Format"],"updatePoint":{"line":237,"column":20,"index":8633},"line":237,"code":"  test('no formatStr', () => {\n    const d = dayjs.duration(15, 'seconds').add(13, 'hours').add(35, 'minutes').add(16, 'days').add(10, 'months').add(22, 'years');\n    expect(d.format()).toBe('0022-10-16T13:35:15');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"with formatStr for all tokens","suites":["Format"],"updatePoint":{"line":241,"column":37,"index":8871},"line":241,"code":"  test('with formatStr for all tokens', () => {\n    const d = dayjs.duration(1, 'seconds').add(8, 'hours').add(5, 'minutes').add(6, 'days').add(9, 'months').add(2, 'years').add(10, 'milliseconds');\n    expect(d.format('Y/YY.YYYYTESTM:MM:D:DD:H:HH:m:mm:s:ss:SSS')).toBe('2/02.0002TEST9:09:6:06:8:08:5:05:1:01:010');\n  });","file":"plugin/duration.test.js","skipped":false,"dir":"test"},{"name":"bounds can be swapped","suites":[],"updatePoint":{"line":11,"column":27,"index":274},"line":11,"code":"test('bounds can be swapped', () => {\n  expect(dayjs('2018-01-01').isBetween(dayjs('2017-12-31'), dayjs('2018-01-02'))).toBeTruthy();\n  expect(dayjs('2018-01-01').isBetween(dayjs('2018-01-02'), dayjs('2017-12-31'))).toBeTruthy();\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"bounds can be swapped with inclusivity","suites":[],"updatePoint":{"line":15,"column":44,"index":525},"line":15,"code":"test('bounds can be swapped with inclusivity', () => {\n  expect(dayjs('2018-01-01').isBetween(dayjs('2017-12-31'), dayjs('2018-01-01'), null, '[]')).toBeTruthy();\n  expect(dayjs('2018-01-01').isBetween(dayjs('2018-01-01'), dayjs('2017-12-31'), null, '[]')).toBeTruthy();\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between without units","suites":[],"updatePoint":{"line":19,"column":30,"index":786},"line":19,"code":"test('is between without units', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'year is later');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2013, 3, 2, 3, 4, 5, 10)))).toBe(false, 'year is earlier');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)))).toBe(true, 'year is between');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'month is later');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 5, 2, 3, 4, 5, 10)))).toBe(false, 'month is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(true, 'month is between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 1, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'day is later');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 4, 3, 4, 5, 10)))).toBe(false, 'day is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 1, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(true, 'day is between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 1, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'hour is later');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 5, 4, 5, 10)))).toBe(false, 'hour is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 2, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(true, 'hour is between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 6, 5, 10)))).toBe(false, 'minute is later');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 2, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'minute is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(true, 'minute is between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 7, 10)))).toBe(false, 'second is later');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 3, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'second is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 4, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(true, 'second is between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 12)))).toBe(false, 'millisecond is later');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 8)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false, 'millisecond is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 9)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(true, 'millisecond is between');\n  expect(m.isBetween(m, m)).toBe(false, 'moments are not between themselves');\n  expect(+m).toEqual(+mCopy, 'isBetween second should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between year","suites":[],"updatePoint":{"line":46,"column":21,"index":3964},"line":46,"code":"test('is between year', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year match');\n  expect(m.isBetween(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), dayjs(new Date(2012, 5, 6, 7, 8, 9, 10)), 'years')).toBe(true, 'plural should work');\n  expect(m.isBetween(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), dayjs(new Date(2012, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year is between');\n  expect(m.isBetween(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), dayjs(new Date(2013, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year is earlier');\n  expect(m.isBetween(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year is later');\n  expect(m.isBetween(m, 'year')).toBe(false, 'same moments are not between the same year');\n  expect(+m).toEqual(+mCopy, 'isBetween year should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between month","suites":[],"updatePoint":{"line":57,"column":22,"index":4970},"line":57,"code":"test('is between month', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month match');\n  expect(m.isBetween(dayjs(new Date(2011, 0, 6, 7, 8, 9, 10)), dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'months')).toBe(true, 'plural should work');\n  expect(m.isBetween(dayjs(new Date(2011, 0, 31, 23, 59, 59, 999)), dayjs(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(true, 'month is between');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 11, 6, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month is later');\n  expect(m.isBetween(m, 'month')).toBe(false, 'same moments are not between the same month');\n  expect(+m).toEqual(+mCopy, 'isBetween month should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between day","suites":[],"updatePoint":{"line":68,"column":20,"index":5991},"line":68,"code":"test('is between day', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'day match');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 1, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 3, 7, 8, 9, 10)), 'days')).toBe(true, 'plural should work');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 1, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 3, 7, 8, 9, 10)), 'day')).toBe(true, 'day is between');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 4, 7, 8, 9, 10)), 'day')).toBe(false, 'day is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 1, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'day is later');\n  expect(m.isBetween(m, 'day')).toBe(false, 'same moments are not between the same day');\n  expect(+m).toEqual(+mCopy, 'isBetween day should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between hour","suites":[],"updatePoint":{"line":79,"column":21,"index":6984},"line":79,"code":"test('is between hour', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 5, 9, 10)), dayjs(new Date(2011, 1, 2, 3, 9, 9, 10)), 'hour')).toBe(false, 'hour match');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 1, 59, 59, 999)), dayjs(new Date(2011, 1, 2, 4, 0, 0, 0)), 'hours')).toBe(true, 'plural should work');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 2, 59, 59, 999)), dayjs(new Date(2011, 1, 2, 4, 0, 0, 0)), 'hour')).toBe(true, 'hour is between');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'hour')).toBe(false, 'hour is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'hour')).toBe(false, 'hour is later');\n  expect(m.isBetween(m, 'hour')).toBe(false, 'same moments are not between the same hour');\n  expect(+m).toEqual(+mCopy, 'isBetween hour should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between minute","suites":[],"updatePoint":{"line":90,"column":23,"index":7995},"line":90,"code":"test('is between minute', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'minute match');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 3, 9, 10)), dayjs(new Date(2011, 1, 2, 3, 5, 9, 10)), 'minutes')).toBe(true, 'plural should work');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 3, 59, 999)), dayjs(new Date(2011, 1, 2, 3, 5, 0, 0)), 'minute')).toBe(true, 'minute is between');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 5, 0, 0)), dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'minute')).toBe(false, 'minute is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 2, 9, 10)), dayjs(new Date(2011, 1, 2, 3, 3, 59, 999)), 'minute')).toBe(false, 'minute is later');\n  expect(m.isBetween(m, 'minute')).toBe(false, 'same moments are not between the same minute');\n  expect(+m).toEqual(+mCopy, 'isBetween minute should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between second","suites":[],"updatePoint":{"line":101,"column":23,"index":9028},"line":101,"code":"test('is between second', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'second match');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 4, 10)), dayjs(new Date(2011, 1, 2, 3, 4, 6, 10)), 'seconds')).toBe(true, 'plural should work');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 4, 999)), dayjs(new Date(2011, 1, 2, 3, 4, 6, 0)), 'second')).toBe(true, 'second is between');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 6, 0)), dayjs(new Date(2011, 1, 2, 3, 4, 7, 10)), 'second')).toBe(false, 'second is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 3, 10)), dayjs(new Date(2011, 1, 2, 3, 4, 4, 999)), 'second')).toBe(false, 'second is later');\n  expect(m.isBetween(m, 'second')).toBe(false, 'same moments are not between the same second');\n  expect(+m).toEqual(+mCopy, 'isBetween second should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between millisecond","suites":[],"updatePoint":{"line":112,"column":28,"index":10064},"line":112,"code":"test('is between millisecond', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 5, 6)), dayjs(new Date(2011, 1, 2, 3, 4, 5, 6)), 'millisecond')).toBe(false, 'millisecond match');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 5, 5)), dayjs(new Date(2011, 1, 2, 3, 4, 5, 7)), 'milliseconds')).toBe(true, 'plural should work');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 5, 5)), dayjs(new Date(2011, 1, 2, 3, 4, 5, 7)), 'millisecond')).toBe(true, 'millisecond is between');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 5, 7)), dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'millisecond is earlier');\n  expect(m.isBetween(dayjs(new Date(2011, 1, 2, 3, 4, 5, 4)), dayjs(new Date(2011, 1, 2, 3, 4, 5, 6)), 'millisecond')).toBe(false, 'millisecond is later');\n  expect(m.isBetween(m, 'millisecond')).toBe(false, 'same moments are not between the same millisecond');\n  expect(+m).toEqual(+mCopy, 'isBetween millisecond should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between without units inclusivity","suites":[],"updatePoint":{"line":123,"column":42,"index":11165},"line":123,"code":"test('is between without units inclusivity', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '()')).toBe(false, 'start and end are excluded, start is equal to dayjs');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '()')).toBe(false, 'start and end are excluded, end is equal to dayjs');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '()')).toBe(true, 'start and end are excluded, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), null, '()')).toBe(false, 'start and end are excluded, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '()')).toBe(false, 'start and end are excluded, should fail on same start/end date.');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '(]')).toBe(false, 'start is excluded and end is included should fail on same start date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '(]')).toBe(true, 'start is excluded and end is included should succeed on end date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '(]')).toBe(true, 'start is excluded and end is included, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), null, '(]')).toBe(false, 'start is excluded and end is included, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '(]')).toBe(false, 'start is excluded and end is included, should fail on same start/end date.');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '[)')).toBe(true, 'start is included and end is excluded should succeed on same start date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '[)')).toBe(false, 'start is included and end is excluded should fail on same end date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '[)')).toBe(true, 'start is included and end is excluded, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), null, '[)')).toBe(false, 'start is included and end is excluded, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '[)')).toBe(false, 'start is included and end is excluded, should fail on same end and start date');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '[]')).toBe(true, 'start and end inclusive should succeed on same start date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '[]')).toBe(true, 'start and end inclusive should succeed on same end date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), null, '[]')).toBe(true, 'start and end inclusive, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), null, '[]')).toBe(false, 'start and end inclusive, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), null, '[]')).toBe(true, 'start and end inclusive, should handle same end and start date');\n  expect(+m).toEqual(+mCopy, 'isBetween millisecond should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"is between milliseconds inclusivity","suites":[],"updatePoint":{"line":148,"column":41,"index":15187},"line":148,"code":"test('is between milliseconds inclusivity', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds')).toBe(true, 'options, no inclusive');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '()')).toBe(false, 'start and end are excluded, start is equal to dayjs');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '()')).toBe(false, 'start and end are excluded, end is equal to dayjs');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '()')).toBe(true, 'start and end are excluded, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'milliseconds', '()')).toBe(false, 'start and end are excluded, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '()')).toBe(false, 'start and end are excluded, should fail on same start/end date.');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '(]')).toBe(false, 'start is excluded and end is included should fail on same start date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '(]')).toBe(true, 'start is excluded and end is included should succeed on end date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '(]')).toBe(true, 'start is excluded and end is included, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'milliseconds', '(]')).toBe(false, 'start is excluded and end is included, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '(]')).toBe(false, 'start is excluded and end is included, should fail on same start/end date.');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[)')).toBe(true, 'start is included and end is excluded should succeed on same start date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[)')).toBe(false, 'start is included and end is excluded should fail on same end date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[)')).toBe(true, 'start is included and end is excluded, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[)')).toBe(false, 'start is included and end is excluded, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[)')).toBe(false, 'start is included and end is excluded, should fail on same end and start date');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[]')).toBe(true, 'start and end inclusive should succeed on same start date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[]')).toBe(true, 'start and end inclusive should succeed on same end date');\n  expect(m.isBetween(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[]')).toBe(true, 'start and end inclusive, is between');\n  expect(m.isBetween(dayjs(new Date(2009, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[]')).toBe(false, 'start and end inclusive, is not between');\n  expect(m.isBetween(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds', '[]')).toBe(true, 'start and end inclusive, should handle same end and start date');\n  expect(+m).toEqual(+mCopy, 'isBetween second should not change moment');\n});","file":"plugin/isBetween.test.js","skipped":false,"dir":"test"},{"name":"IsLeapYear","suites":[],"updatePoint":{"line":11,"column":14,"index":252},"line":11,"code":"it('IsLeapYear', () => {\n  expect(dayjs('20000101').isLeapYear()).toBe(true);\n  expect(dayjs('2100-01-01').isLeapYear()).toBe(false);\n});","file":"plugin/isLeapYear.test.js","skipped":false,"dir":"test"},{"name":"IsLeapYear","suites":[],"updatePoint":{"line":11,"column":14,"index":246},"line":11,"code":"it('IsLeapYear', () => {\n  expect(dayjs.isMoment(dayjs())).toBe(true);\n  expect(dayjs.isMoment(new Date())).toBe(false);\n});","file":"plugin/isMoment.test.js","skipped":false,"dir":"test"},{"name":"get isoWeek","suites":[],"updatePoint":{"line":14,"column":15,"index":332},"line":14,"code":"it('get isoWeek', () => {\n  expect(dayjs().isoWeek()).toBe(moment().isoWeek());\n});","file":"plugin/isoWeek.test.js","skipped":false,"dir":"test"},{"name":"set isoWeek","suites":[],"updatePoint":{"line":17,"column":15,"index":416},"line":17,"code":"it('set isoWeek', () => {\n  expect(dayjs().isoWeek(1).valueOf()).toBe(moment().isoWeek(1).valueOf());\n  expect(dayjs().isoWeek(52).valueOf()).toBe(moment().isoWeek(52).valueOf());\n});","file":"plugin/isoWeek.test.js","skipped":false,"dir":"test"},{"name":"get isoWeekYear","suites":[],"updatePoint":{"line":21,"column":19,"index":604},"line":21,"code":"it('get isoWeekYear', () => {\n  expect(dayjs().isoWeekYear()).toBe(moment().isoWeekYear());\n});","file":"plugin/isoWeek.test.js","skipped":false,"dir":"test"},{"name":"startOf/endOf isoWeek","suites":[],"updatePoint":{"line":24,"column":25,"index":706},"line":24,"code":"it('startOf/endOf isoWeek', () => {\n  const ISOWEEK = 'isoWeek';\n  expect(dayjs().startOf(ISOWEEK).valueOf()).toBe(moment().startOf(ISOWEEK).valueOf());\n  expect(dayjs().endOf(ISOWEEK).valueOf()).toBe(moment().endOf(ISOWEEK).valueOf());\n});","file":"plugin/isoWeek.test.js","skipped":false,"dir":"test"},{"name":"isoWeekday","suites":[],"updatePoint":{"line":29,"column":14,"index":936},"line":29,"code":"it('isoWeekday', () => {\n  expect(dayjs().isoWeekday()).toBe(moment().isoWeekday());\n  expect(dayjs('20200301').isoWeekday(1).valueOf()).toBe(moment('20200301').isoWeekday(1).valueOf()); // Sunday this.day() -> 0\n  for (let i = 0; i < 7; i += 1) {\n    expect(dayjs().add(i, 'day').isoWeekday()).toBe(moment().add(i, 'day').isoWeekday());\n    expect(dayjs().isoWeekday(i).valueOf()).toBe(moment().isoWeekday(i).valueOf());\n    expect(dayjs().add(1, 'day').isoWeekday(i).valueOf()).toBe(moment().add(1, 'day').isoWeekday(i).valueOf());\n  }\n});","file":"plugin/isoWeek.test.js","skipped":false,"dir":"test"},{"name":"isoWeek of year","suites":[],"updatePoint":{"line":38,"column":19,"index":1483},"line":38,"code":"it('isoWeek of year', () => {\n  expect(dayjs().isoWeek(1).isoWeek()).toBe(1);\n  expect(dayjs().isoWeek(27).isoWeek()).toBe(27);\n  expect(dayjs('20191223').isoWeekYear()).toBe(2019);\n  expect(dayjs('20191223').isoWeek()).toBe(52);\n  expect(dayjs('20191224').isoWeekYear()).toBe(2019);\n  expect(dayjs('20191224').isoWeek()).toBe(52);\n  expect(dayjs('20191225').isoWeekYear()).toBe(2019);\n  expect(dayjs('20191225').isoWeek()).toBe(52);\n  expect(dayjs('20191226').isoWeekYear()).toBe(2019);\n  expect(dayjs('20191226').isoWeek()).toBe(52);\n  expect(dayjs('20191227').isoWeekYear()).toBe(2019);\n  expect(dayjs('20191227').isoWeek()).toBe(52);\n  expect(dayjs('20191228').isoWeekYear()).toBe(2019);\n  expect(dayjs('20191228').isoWeek()).toBe(52);\n  expect(dayjs('20191229').isoWeekYear()).toBe(2019);\n  expect(dayjs('20191229').isoWeek()).toBe(52);\n  expect(dayjs('20191230').isoWeekYear()).toBe(2020);\n  expect(dayjs('20191230').isoWeek()).toBe(1);\n  expect(dayjs('20191231').isoWeekYear()).toBe(2020);\n  expect(dayjs('20191231').isoWeek()).toBe(1);\n  expect(dayjs('20200101').isoWeekYear()).toBe(2020);\n  expect(dayjs('20200101').isoWeek()).toBe(1);\n  expect(dayjs('20200102').isoWeekYear()).toBe(2020);\n  expect(dayjs('20200102').isoWeek()).toBe(1);\n  expect(dayjs('20200103').isoWeekYear()).toBe(2020);\n  expect(dayjs('20200103').isoWeek()).toBe(1);\n  expect(dayjs('20200104').isoWeekYear()).toBe(2020);\n  expect(dayjs('20200104').isoWeek()).toBe(1);\n  expect(dayjs('20200105').isoWeekYear()).toBe(2020);\n  expect(dayjs('20200105').isoWeek()).toBe(1);\n  expect(dayjs('20200106').isoWeekYear()).toBe(2020);\n  expect(dayjs('20200106').isoWeek()).toBe(2);\n  expect(dayjs('20200107').isoWeekYear()).toBe(2020);\n  expect(dayjs('20200107').isoWeek()).toBe(2);\n  expect(dayjs('20201223').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201223').isoWeek()).toBe(52);\n  expect(dayjs('20201224').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201224').isoWeek()).toBe(52);\n  expect(dayjs('20201225').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201225').isoWeek()).toBe(52);\n  expect(dayjs('20201226').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201226').isoWeek()).toBe(52);\n  expect(dayjs('20201227').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201227').isoWeek()).toBe(52);\n  expect(dayjs('20201228').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201228').isoWeek()).toBe(53);\n  expect(dayjs('20201229').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201229').isoWeek()).toBe(53);\n  expect(dayjs('20201230').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201230').isoWeek()).toBe(53);\n  expect(dayjs('20201231').isoWeekYear()).toBe(2020);\n  expect(dayjs('20201231').isoWeek()).toBe(53);\n  expect(dayjs('20210101').isoWeekYear()).toBe(2020);\n  expect(dayjs('20210101').isoWeek()).toBe(53);\n  expect(dayjs('20210102').isoWeekYear()).toBe(2020);\n  expect(dayjs('20210102').isoWeek()).toBe(53);\n  expect(dayjs('20210103').isoWeekYear()).toBe(2020);\n  expect(dayjs('20210103').isoWeek()).toBe(53);\n  expect(dayjs('20210104').isoWeekYear()).toBe(2021);\n  expect(dayjs('20210104').isoWeek()).toBe(1);\n  expect(dayjs('20210105').isoWeekYear()).toBe(2021);\n  expect(dayjs('20210105').isoWeek()).toBe(1);\n  expect(dayjs('20210106').isoWeekYear()).toBe(2021);\n  expect(dayjs('20210106').isoWeek()).toBe(1);\n  expect(dayjs('20210107').isoWeekYear()).toBe(2021);\n  expect(dayjs('20210107').isoWeek()).toBe(1);\n  expect(dayjs('20210108').isoWeekYear()).toBe(2021);\n  expect(dayjs('20210108').isoWeek()).toBe(1);\n  expect(dayjs('20210109').isoWeekYear()).toBe(2021);\n  expect(dayjs('20210109').isoWeek()).toBe(1);\n  expect(dayjs('20210110').isoWeekYear()).toBe(2021);\n  expect(dayjs('20210110').isoWeek()).toBe(1);\n});","file":"plugin/isoWeek.test.js","skipped":false,"dir":"test"},{"name":"utc mode","suites":[],"updatePoint":{"line":112,"column":12,"index":5162},"line":112,"code":"it('utc mode', () => {\n  // Wednesday, 1 January 2020 00:00:00 UTC\n  const d = dayjs.utc(1577836800000).isoWeek();\n  expect(d).toBe(1);\n  expect(moment.utc(1577836800000).isoWeek()).toBe(d);\n});","file":"plugin/isoWeek.test.js","skipped":false,"dir":"test"},{"name":"isoWeeksInYear","suites":[],"updatePoint":{"line":13,"column":18,"index":348},"line":13,"code":"it('isoWeeksInYear', () => {\n  expect(dayjs('2004').isoWeeksInYear()).toBe(53);\n  expect(dayjs('2005').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2006').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2007').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2008').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2009').isoWeeksInYear()).toBe(53);\n  expect(dayjs('2010').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2011').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2012').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2013').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2014').isoWeeksInYear()).toBe(52);\n  expect(dayjs('2015').isoWeeksInYear()).toBe(53);\n});","file":"plugin/isoWeeksInYear.test.js","skipped":false,"dir":"test"},{"name":"is same or after year","suites":[],"updatePoint":{"line":11,"column":27,"index":274},"line":11,"code":"test('is same or after year', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'years')).toBe(true, 'plural should work');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(true, 'exact start of year');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true, 'exact end of year');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false, 'start of next year');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true, 'end of previous year');\n  expect(m.isSameOrAfter(m, 'year')).toBe(true, 'same moments are in the same year');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter year should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after without units","suites":[],"updatePoint":{"line":25,"column":36,"index":1446},"line":25,"code":"test('is same or after without units', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 3, 2, 3, 5, 5, 10)))).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 3, 2, 3, 3, 5, 10)))).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(false, 'month is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(true, 'month is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(false, 'day is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(true, 'day is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(false, 'hour is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(true, 'hour is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(false, 'minute is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(true, 'minute is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(false, 'second is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(true, 'second is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(true, 'millisecond match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(false, 'millisecond is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(true, 'millisecond is earlier');\n  expect(m.isSameOrAfter(m)).toBe(true, 'moments are the same as themselves');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter second should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after month","suites":[],"updatePoint":{"line":46,"column":28,"index":3228},"line":46,"code":"test('is same or after month', () => {\n  const m = dayjs(new Date(2011, 2, 3, 4, 5, 6, 7));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'month match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'months')).toBe(true, 'plural should work');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'month is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(true, 'exact start of month');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(true, 'exact end of month');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(false, 'start of next month');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(true, 'end of previous month');\n  expect(m.isSameOrAfter(m, 'month')).toBe(true, 'same moments are in the same month');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter month should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after day","suites":[],"updatePoint":{"line":62,"column":26,"index":4621},"line":62,"code":"test('is same or after day', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'day match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'days')).toBe(true, 'plural should work');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 1, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 1, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'month is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 12, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'month is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 3, 7, 8, 9, 10)), 'day')).toBe(false, 'day is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 1, 7, 8, 9, 10)), 'day')).toBe(true, 'day is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 0, 0, 0, 0)), 'day')).toBe(true, 'exact start of day');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 23, 59, 59, 999)), 'day')).toBe(true, 'exact end of day');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 3, 0, 0, 0, 0)), 'day')).toBe(false, 'start of next day');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 1, 23, 59, 59, 999)), 'day')).toBe(true, 'end of previous day');\n  expect(m.isSameOrAfter(m, 'day')).toBe(true, 'same moments are in the same day');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter day should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after hour","suites":[],"updatePoint":{"line":80,"column":27,"index":6187},"line":80,"code":"test('is same or after hour', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'hour match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hours')).toBe(true, 'plural should work');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'month is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 12, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'month is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 3, 3, 8, 9, 10)), 'hour')).toBe(false, 'day is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 1, 3, 8, 9, 10)), 'hour')).toBe(true, 'day is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 4, 8, 9, 10)), 'hour')).toBe(false, 'hour is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 2, 8, 9, 10)), 'hour')).toBe(true, 'hour is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 0, 0, 0)), 'hour')).toBe(true, 'exact start of hour');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 59, 59, 999)), 'hour')).toBe(true, 'exact end of hour');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 4, 0, 0, 0)), 'hour')).toBe(false, 'start of next hour');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 2, 59, 59, 999)), 'hour')).toBe(true, 'end of previous hour');\n  expect(m.isSameOrAfter(m, 'hour')).toBe(true, 'same moments are in the same hour');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter hour should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after minute","suites":[],"updatePoint":{"line":100,"column":29,"index":7986},"line":100,"code":"test('is same or after minute', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'minute match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minutes')).toBe(true, 'plural should work');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'month is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 12, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'month is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 3, 3, 4, 9, 10)), 'minute')).toBe(false, 'day is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 1, 3, 4, 9, 10)), 'minute')).toBe(true, 'day is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 4, 4, 9, 10)), 'minute')).toBe(false, 'hour is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 2, 4, 9, 10)), 'minute')).toBe(true, 'hour is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 5, 9, 10)), 'minute')).toBe(false, 'minute is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 3, 9, 10)), 'minute')).toBe(true, 'minute is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 0, 0)), 'minute')).toBe(true, 'exact start of minute');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 59, 999)), 'minute')).toBe(true, 'exact end of minute');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 5, 0, 0)), 'minute')).toBe(false, 'start of next minute');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 3, 59, 999)), 'minute')).toBe(true, 'end of previous minute');\n  expect(m.isSameOrAfter(m, 'minute')).toBe(true, 'same moments are in the same minute');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter minute should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after second","suites":[],"updatePoint":{"line":122,"column":29,"index":10048},"line":122,"code":"test('is same or after second', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'second match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'seconds')).toBe(true, 'plural should work');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 1, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 1, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'month is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 12, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'month is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 3, 3, 4, 5, 10)), 'second')).toBe(false, 'day is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 1, 3, 4, 5, 10)), 'second')).toBe(true, 'day is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 4, 4, 5, 10)), 'second')).toBe(false, 'hour is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 2, 4, 5, 10)), 'second')).toBe(true, 'hour is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 5, 5, 10)), 'second')).toBe(false, 'minute is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 3, 5, 10)), 'second')).toBe(true, 'minute is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 6, 10)), 'second')).toBe(false, 'second is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 4, 10)), 'second')).toBe(true, 'second is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 5, 0)), 'second')).toBe(true, 'exact start of second');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 5, 999)), 'second')).toBe(true, 'exact end of second');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 6, 0)), 'second')).toBe(false, 'start of next second');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 1, 2, 3, 4, 4, 999)), 'second')).toBe(true, 'end of previous second');\n  expect(m.isSameOrAfter(m, 'second')).toBe(true, 'same moments are in the same second');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter second should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after millisecond","suites":[],"updatePoint":{"line":146,"column":34,"index":12334},"line":146,"code":"test('is same or after millisecond', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'millisecond match');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds')).toBe(true, 'plural should work');\n  expect(m.isSameOrAfter(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'year is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'year is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'month is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'month is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'day is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(true, 'day is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(false, 'hour is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(true, 'hour is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(false, 'minute is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(true, 'minute is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(false, 'second is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(true, 'second is earlier');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(false, 'millisecond is later');\n  expect(m.isSameOrAfter(dayjs(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(true, 'millisecond is earlier');\n  expect(m.isSameOrAfter(m, 'millisecond')).toBe(true, 'same moments are in the same millisecond');\n  expect(+m).toEqual(+mCopy, 'isSameOrAfter millisecond should not change moment');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or after with invalid moments","suites":[],"updatePoint":{"line":168,"column":43,"index":14499},"line":168,"code":"test('is same or after with invalid moments', () => {\n  const m = dayjs();\n  const invalid = dayjs(null);\n  expect(invalid.isSameOrAfter(invalid)).toBe(false, 'invalid moments are not considered equal');\n  expect(m.isSameOrAfter(invalid)).toBe(false, 'valid moment is not after invalid moment');\n  expect(invalid.isSameOrAfter(m)).toBe(false, 'invalid moment is not after valid moment');\n  expect(m.isSameOrAfter(invalid, 'year')).toBe(false, 'invalid moment year');\n  expect(m.isSameOrAfter(invalid, 'month')).toBe(false, 'invalid moment month');\n  expect(m.isSameOrAfter(invalid, 'day')).toBe(false, 'invalid moment day');\n  expect(m.isSameOrAfter(invalid, 'hour')).toBe(false, 'invalid moment hour');\n  expect(m.isSameOrAfter(invalid, 'minute')).toBe(false, 'invalid moment minute');\n  expect(m.isSameOrAfter(invalid, 'second')).toBe(false, 'invalid moment second');\n  expect(m.isSameOrAfter(invalid, 'milliseconds')).toBe(false, 'invalid moment milliseconds');\n});","file":"plugin/isSameOrAfter.test.js","skipped":false,"dir":"test"},{"name":"is same or before without units","suites":[],"updatePoint":{"line":11,"column":37,"index":287},"line":11,"code":"test('is same or before without units', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 3, 2, 3, 5, 5, 10)))).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 3, 2, 3, 3, 5, 10)))).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(true, 'month is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(false, 'month is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(true, 'day is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(false, 'day is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(true, 'hour is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(false, 'hour is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(true, 'minute is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(false, 'minute is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(true, 'second is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(false, 'second is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(true, 'millisecond match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(true, 'millisecond is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(false, 'millisecond is earlier');\n  expect(m.isSameOrBefore(m)).toBe(true, 'moments are the same as themselves');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore second should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same or before year","suites":[],"updatePoint":{"line":32,"column":28,"index":2086},"line":32,"code":"test('is same or before year', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'years')).toBe(true, 'plural should work');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(true, 'exact start of year');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true, 'exact end of year');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(true, 'start of next year');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false, 'end of previous year');\n  expect(m.isSameOrBefore(m, 'year')).toBe(true, 'same moments are in the same year');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore year should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same or before month","suites":[],"updatePoint":{"line":46,"column":29,"index":3261},"line":46,"code":"test('is same or before month', () => {\n  const m = dayjs(new Date(2011, 2, 3, 4, 5, 6, 7));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'month match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 6, 7, 8, 9, 10)), 'months')).toBe(true, 'plural should work');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(true, 'month is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(false, 'month is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(true, 'exact start of month');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(true, 'exact end of month');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(true, 'start of next month');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(false, 'end of previous month');\n  expect(m.isSameOrBefore(m, 'month')).toBe(true, 'same moments are in the same month');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore month should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same or before day","suites":[],"updatePoint":{"line":62,"column":27,"index":4667},"line":62,"code":"test('is same or before day', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'day match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 7, 8, 9, 10)), 'days')).toBe(true, 'plural should work');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 1, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 1, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(true, 'month is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 12, 2, 7, 8, 9, 10)), 'day')).toBe(false, 'month is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 3, 7, 8, 9, 10)), 'day')).toBe(true, 'day is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 1, 7, 8, 9, 10)), 'day')).toBe(false, 'day is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 0, 0, 0, 0)), 'day')).toBe(true, 'exact start of day');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 23, 59, 59, 999)), 'day')).toBe(true, 'exact end of day');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 3, 0, 0, 0, 0)), 'day')).toBe(true, 'start of next day');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 1, 23, 59, 59, 999)), 'day')).toBe(false, 'end of previous day');\n  expect(m.isSameOrBefore(m, 'day')).toBe(true, 'same moments are in the same day');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore day should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same or before hour","suites":[],"updatePoint":{"line":80,"column":28,"index":6248},"line":80,"code":"test('is same or before hour', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'hour match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hours')).toBe(true, 'plural should work');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 2, 3, 8, 9, 10)), 'hour')).toBe(true, 'month is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 12, 2, 3, 8, 9, 10)), 'hour')).toBe(false, 'month is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 3, 3, 8, 9, 10)), 'hour')).toBe(true, 'day is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 1, 3, 8, 9, 10)), 'hour')).toBe(false, 'day is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 4, 8, 9, 10)), 'hour')).toBe(true, 'hour is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 2, 8, 9, 10)), 'hour')).toBe(false, 'hour is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 0, 0, 0)), 'hour')).toBe(true, 'exact start of hour');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 59, 59, 999)), 'hour')).toBe(true, 'exact end of hour');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 4, 0, 0, 0)), 'hour')).toBe(true, 'start of next hour');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 2, 59, 59, 999)), 'hour')).toBe(false, 'end of previous hour');\n  expect(m.isSameOrBefore(m, 'hour')).toBe(true, 'same moments are in the same hour');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore hour should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same or before minute","suites":[],"updatePoint":{"line":100,"column":30,"index":8064},"line":100,"code":"test('is same or before minute', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'minute match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minutes')).toBe(true, 'plural should work');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(true, 'month is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 12, 2, 3, 4, 9, 10)), 'minute')).toBe(false, 'month is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 3, 3, 4, 9, 10)), 'minute')).toBe(true, 'day is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 1, 3, 4, 9, 10)), 'minute')).toBe(false, 'day is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 4, 4, 9, 10)), 'minute')).toBe(true, 'hour is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 2, 4, 9, 10)), 'minute')).toBe(false, 'hour is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 5, 9, 10)), 'minute')).toBe(true, 'minute is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 3, 9, 10)), 'minute')).toBe(false, 'minute is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 0, 0)), 'minute')).toBe(true, 'exact start of minute');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 59, 999)), 'minute')).toBe(true, 'exact end of minute');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 5, 0, 0)), 'minute')).toBe(true, 'start of next minute');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 3, 59, 999)), 'minute')).toBe(false, 'end of previous minute');\n  expect(m.isSameOrBefore(m, 'minute')).toBe(true, 'same moments are in the same minute');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore minute should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same or before second","suites":[],"updatePoint":{"line":122,"column":30,"index":10145},"line":122,"code":"test('is same or before second', () => {\n  const m = dayjs(new Date(2011, 1, 2, 3, 4, 5, 6));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'second match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 5, 10)), 'seconds')).toBe(true, 'plural should work');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 1, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 1, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(true, 'month is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 12, 2, 3, 4, 5, 10)), 'second')).toBe(false, 'month is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 3, 3, 4, 5, 10)), 'second')).toBe(true, 'day is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 1, 3, 4, 5, 10)), 'second')).toBe(false, 'day is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 4, 4, 5, 10)), 'second')).toBe(true, 'hour is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 2, 4, 5, 10)), 'second')).toBe(false, 'hour is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 5, 5, 10)), 'second')).toBe(true, 'minute is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 3, 5, 10)), 'second')).toBe(false, 'minute is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 6, 10)), 'second')).toBe(true, 'second is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 4, 10)), 'second')).toBe(false, 'second is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 5, 0)), 'second')).toBe(true, 'exact start of second');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 5, 999)), 'second')).toBe(true, 'exact end of second');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 6, 0)), 'second')).toBe(true, 'start of next second');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 1, 2, 3, 4, 4, 999)), 'second')).toBe(false, 'end of previous second');\n  expect(m.isSameOrBefore(m, 'second')).toBe(true, 'same moments are in the same second');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore second should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same or before millisecond","suites":[],"updatePoint":{"line":146,"column":35,"index":12452},"line":146,"code":"test('is same or before millisecond', () => {\n  const m = dayjs(new Date(2011, 3, 2, 3, 4, 5, 10));\n  const mCopy = dayjs(m);\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'millisecond match');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 5, 10)), 'milliseconds')).toBe(true, 'plural should work');\n  expect(m.isSameOrBefore(dayjs(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'year is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'year is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'month is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false, 'month is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(true, 'day is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(false, 'day is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(true, 'hour is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(false, 'hour is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(true, 'minute is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(false, 'minute is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(true, 'second is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(false, 'second is earlier');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(true, 'millisecond is later');\n  expect(m.isSameOrBefore(dayjs(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(false, 'millisecond is earlier');\n  expect(m.isSameOrBefore(m, 'millisecond')).toBe(true, 'same moments are in the same millisecond');\n  expect(+m).toEqual(+mCopy, 'isSameOrBefore millisecond should not change moment');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is same with invalid moments","suites":[],"updatePoint":{"line":168,"column":34,"index":14626},"line":168,"code":"test('is same with invalid moments', () => {\n  const m = dayjs();\n  const invalid = dayjs(null);\n  expect(invalid.isSameOrBefore(invalid)).toBe(false, 'invalid moments are not considered equal');\n  expect(m.isSameOrBefore(invalid)).toBe(false, 'valid moment is not before invalid moment');\n  expect(invalid.isSameOrBefore(m)).toBe(false, 'invalid moment is not before valid moment');\n  expect(m.isSameOrBefore(invalid, 'year')).toBe(false, 'invalid moment year');\n  expect(m.isSameOrBefore(invalid, 'month')).toBe(false, 'invalid moment month');\n  expect(m.isSameOrBefore(invalid, 'day')).toBe(false, 'invalid moment day');\n  expect(m.isSameOrBefore(invalid, 'hour')).toBe(false, 'invalid moment hour');\n  expect(m.isSameOrBefore(invalid, 'minute')).toBe(false, 'invalid moment minute');\n  expect(m.isSameOrBefore(invalid, 'second')).toBe(false, 'invalid moment second');\n  expect(m.isSameOrBefore(invalid, 'milliseconds')).toBe(false, 'invalid moment milliseconds');\n});","file":"plugin/isSameOrBefore.test.js","skipped":false,"dir":"test"},{"name":"is today","suites":[],"updatePoint":{"line":11,"column":12,"index":241},"line":11,"code":"it('is today', () => {\n  expect(dayjs(new Date()).isToday()).toBeTruthy();\n  expect(dayjs('2017-01-01').isToday()).toBeFalsy();\n});","file":"plugin/isToday.test.js","skipped":false,"dir":"test"},{"name":"is tomorrow","suites":[],"updatePoint":{"line":11,"column":15,"index":253},"line":11,"code":"it('is tomorrow', () => {\n  expect(dayjs().add(1, 'day').isTomorrow()).toBeTruthy();\n  expect(dayjs('2017-01-01').isTomorrow('2019-01-01', '2017-01-01')).toBeFalsy();\n});","file":"plugin/isTomorrow.test.js","skipped":false,"dir":"test"},{"name":"is yesterday","suites":[],"updatePoint":{"line":11,"column":16,"index":257},"line":11,"code":"it('is yesterday', () => {\n  expect(dayjs().subtract(1, 'day').isYesterday()).toBeTruthy();\n  expect(dayjs('2017-01-01').isYesterday()).toBeFalsy();\n});","file":"plugin/isYesterday.test.js","skipped":false,"dir":"test"},{"name":"Locale: ","suites":["Instance localeData"],"updatePoint":{"line":19,"column":21,"index":556},"line":19,"code":"    it(`Locale: ${lo}`, () => {\n      dayjs.locale(lo);\n      moment.locale(lo);\n      const d = dayjs();\n      const m = moment();\n      const dayjsLocaleData = dayjs().localeData();\n      const momentLocaleData = moment().localeData();\n      expect(dayjsLocaleData.firstDayOfWeek()).toBe(momentLocaleData.firstDayOfWeek());\n      expect(dayjsLocaleData.months(d)).toBe(momentLocaleData.months(m));\n      expect(dayjsLocaleData.months()).toEqual(momentLocaleData.months());\n      expect(dayjsLocaleData.monthsShort(d)).toBe(momentLocaleData.monthsShort(m));\n      expect(dayjsLocaleData.monthsShort()).toEqual(momentLocaleData.monthsShort());\n      expect(dayjsLocaleData.weekdays(d)).toBe(momentLocaleData.weekdays(m));\n      expect(dayjsLocaleData.weekdays()).toEqual(momentLocaleData.weekdays());\n      expect(dayjsLocaleData.weekdaysMin(d)).toBe(momentLocaleData.weekdaysMin(m));\n      expect(dayjsLocaleData.weekdaysMin()).toEqual(momentLocaleData.weekdaysMin());\n      expect(dayjsLocaleData.weekdaysShort(d)).toBe(momentLocaleData.weekdaysShort(m));\n      expect(dayjsLocaleData.weekdaysShort()).toEqual(momentLocaleData.weekdaysShort());\n      const longDateFormats = ['LT', 'LTS', 'L', 'LL', 'LLL', 'LLLL', 'l', 'll', 'lll', 'llll'];\n      longDateFormats.forEach(f => {\n        expect(dayjsLocaleData.longDateFormat(f)).toEqual(momentLocaleData.longDateFormat(f));\n      });\n    });","file":"plugin/localeData.test.js","skipped":false,"dir":"test"},{"name":"Global localeData","suites":["Instance localeData"],"updatePoint":{"line":46,"column":21,"index":2005},"line":46,"code":"it('Global localeData', () => {\n  ['zh-cn', 'en', 'fr'].forEach(lo => {\n    dayjs.locale(lo);\n    moment.locale(lo);\n    const dayjsLocaleData = dayjs.localeData();\n    const momentLocaleData = moment.localeData();\n    expect(dayjsLocaleData.firstDayOfWeek()).toBe(momentLocaleData.firstDayOfWeek());\n    expect(dayjsLocaleData.months()).toEqual(momentLocaleData.months());\n    expect(dayjsLocaleData.monthsShort()).toEqual(momentLocaleData.monthsShort());\n    expect(dayjsLocaleData.weekdays()).toEqual(momentLocaleData.weekdays());\n    expect(dayjsLocaleData.weekdaysShort()).toEqual(momentLocaleData.weekdaysShort());\n    expect(dayjsLocaleData.weekdaysMin()).toEqual(momentLocaleData.weekdaysMin());\n    const longDateFormats = ['LT', 'LTS', 'L', 'LL', 'LLL', 'LLLL', 'l', 'll', 'lll', 'llll'];\n    longDateFormats.forEach(f => {\n      expect(dayjsLocaleData.longDateFormat(f)).toEqual(momentLocaleData.longDateFormat(f));\n    });\n  });\n});","file":"plugin/localeData.test.js","skipped":false,"dir":"test"},{"name":"Listing the months and weekdays","suites":["Instance localeData"],"updatePoint":{"line":64,"column":35,"index":2964},"line":64,"code":"it('Listing the months and weekdays', () => {\n  ['zh-cn', 'en', 'fr'].forEach(lo => {\n    dayjs.locale(lo);\n    moment.locale(lo);\n    expect(dayjs.months()).toEqual(moment.months());\n    expect(dayjs.monthsShort()).toEqual(moment.monthsShort());\n    expect(dayjs.weekdays()).toEqual(moment.weekdays());\n    expect(dayjs.weekdaysShort()).toEqual(moment.weekdaysShort());\n    expect(dayjs.weekdaysMin()).toEqual(moment.weekdaysMin());\n  });\n});","file":"plugin/localeData.test.js","skipped":false,"dir":"test"},{"name":"Month function","suites":["Instance localeData"],"updatePoint":{"line":75,"column":18,"index":3391},"line":75,"code":"it('Month function', () => {\n  const dayjsLocaleData = dayjs().locale('ru').localeData();\n  const momentLocaleData = moment().locale('ru').localeData();\n  expect(dayjsLocaleData.months()).toEqual(momentLocaleData.months());\n  expect(dayjsLocaleData.monthsShort()).toEqual(momentLocaleData.monthsShort());\n  dayjs.locale('ru');\n  moment.locale('ru');\n  expect(dayjs.months()).toEqual(moment.months());\n  expect(dayjs.monthsShort()).toEqual(moment.monthsShort());\n});","file":"plugin/localeData.test.js","skipped":false,"dir":"test"},{"name":"Locale order","suites":["Instance localeData"],"updatePoint":{"line":85,"column":16,"index":3855},"line":85,"code":"it('Locale order', () => {\n  dayjs.locale('fr');\n  moment.locale('fr');\n  expect(dayjs.weekdays(true)).toEqual(moment.weekdays(true));\n  expect(dayjs.weekdaysShort(true)).toEqual(moment.weekdaysShort(true));\n  expect(dayjs.weekdaysMin(true)).toEqual(moment.weekdaysMin(true));\n  expect(dayjs.weekdays()).not.toEqual(dayjs.weekdays(true));\n  dayjs.locale('en');\n  moment.locale('en');\n  expect(dayjs.weekdays(true)).toEqual(moment.weekdays(true));\n});","file":"plugin/localeData.test.js","skipped":false,"dir":"test"},{"name":"meridiem","suites":["Instance localeData"],"updatePoint":{"line":96,"column":12,"index":4302},"line":96,"code":"it('meridiem', () => {\n  dayjs.locale('zh-cn');\n  expect(typeof dayjs.localeData().meridiem).toEqual('function');\n  expect(typeof dayjs().localeData().meridiem).toEqual('function');\n  dayjs.locale('en');\n});","file":"plugin/localeData.test.js","skipped":false,"dir":"test"},{"name":"ordinal","suites":["Instance localeData"],"updatePoint":{"line":102,"column":11,"index":4509},"line":102,"code":"it('ordinal', () => {\n  dayjs.locale('zh-cn');\n  expect(typeof dayjs.localeData().ordinal).toEqual('function');\n  expect(typeof dayjs().localeData().ordinal).toEqual('function');\n  dayjs.locale('en');\n});","file":"plugin/localeData.test.js","skipped":false,"dir":"test"},{"name":"Declares English localized formats","suites":[],"updatePoint":{"line":14,"column":38,"index":401},"line":14,"code":"it('Declares English localized formats', () => {\n  expect(dayjs.en).toBeDefined();\n  expect(dayjs.en.formats).toBeDefined();\n  ['LT', 'LTS', 'L', 'LL', 'LLL', 'LLLL'].forEach(option => expect(dayjs.en.formats[option]).toBeDefined());\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Should not interpolate characters inside square brackets","suites":[],"updatePoint":{"line":19,"column":60,"index":661},"line":19,"code":"it('Should not interpolate characters inside square brackets', () => {\n  const date = new Date(0);\n  const actualDate = dayjs(date);\n  const expectedDate = moment(date);\n  expect(actualDate.format('[l]')).toBe('l');\n  expect(actualDate.format('YYYY [l] YYYY')).toBe('1970 l 1970');\n  expect(actualDate.format('l [l] l')).toBe('1/1/1970 l 1/1/1970');\n  expect(actualDate.format('[L LL LLL LLLL]')).toBe(expectedDate.format('[L LL LLL LLLL]'));\n  const localeFormats = {\n    L: '[MMMM MM DD dddd]'\n  };\n  const mockedDayJsLocale = {\n    ...es,\n    name: 'fake-locale',\n    formats: {\n      ...localeFormats\n    }\n  };\n  const fakeDate = dayjs(date, {\n    locale: mockedDayJsLocale\n  });\n  expect(fakeDate.locale('fake-locale').format('l')).toEqual('MMMM MM DD dddd');\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Recognizes localized format options","suites":[],"updatePoint":{"line":42,"column":39,"index":1410},"line":42,"code":"it('Recognizes localized format options', () => {\n  const {\n    formats\n  } = dayjs.en;\n  const date = dayjs();\n  ['LT', 'LTS', 'L', 'LL', 'LLL', 'LLLL'].forEach(option => expect(date.format(option)).toBe(date.format(formats[option])));\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Uses correct English formats","suites":[],"updatePoint":{"line":49,"column":32,"index":1644},"line":49,"code":"it('Uses correct English formats', () => {\n  const date = new Date();\n  const actualDate = dayjs(date);\n  const expectedDate = moment(date);\n  ['LT', 'LTS', 'L', 'LL', 'LLL', 'LLLL'].forEach(option => expect(actualDate.format(option)).toBe(expectedDate.format(option)));\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Uses English formats in other locales as default","suites":[],"updatePoint":{"line":55,"column":52,"index":1939},"line":55,"code":"it('Uses English formats in other locales as default', () => {\n  const date = new Date();\n  const actualDate = dayjs(date);\n  const expectedDate = moment(date);\n  const mockLocale = {\n    name: 'mock',\n    weekdays: Array(7).fill(' '),\n    months: Array(12).fill(' ')\n  };\n  expect(actualDate.locale(mockLocale).format('L')).toBe(expectedDate.format('L'));\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Leaves the default format intact","suites":[],"updatePoint":{"line":66,"column":36,"index":2284},"line":66,"code":"it('Leaves the default format intact', () => {\n  const date = new Date();\n  const actualDate = dayjs(date);\n  const expectedDate = moment(date);\n  expect(actualDate.format()).toBe(expectedDate.format());\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Uses the locale of the dayjs instance","suites":[],"updatePoint":{"line":72,"column":41,"index":2497},"line":72,"code":"it('Uses the locale of the dayjs instance', () => {\n  const date = new Date();\n  const englishDate = dayjs(date);\n  const spanishDate = dayjs(date, {\n    locale: es\n  });\n  expect(englishDate.format('L LTS')).not.toBe(spanishDate.format('L LTS'));\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Uses the localized lowercase formats if defined","suites":[],"updatePoint":{"line":80,"column":51,"index":2759},"line":80,"code":"it('Uses the localized lowercase formats if defined', () => {\n  const date = new Date();\n  const znDate = dayjs(date, {\n    locale: znCn\n  });\n  ['l', 'll', 'lll', 'llll'].forEach(option => expect(znDate.format(option)).toBe(znDate.format(znCn.formats[option])));\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Uses fallback to xx if xx-yy not available","suites":[],"updatePoint":{"line":87,"column":46,"index":3022},"line":87,"code":"it('Uses fallback to xx if xx-yy not available', () => {\n  expect(dayjs('2019-02-01').locale('en-yy').format('MMMM')).toBe('February');\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Uses xx-yy if xx-YY is provided","suites":[],"updatePoint":{"line":90,"column":35,"index":3151},"line":90,"code":"it('Uses xx-yy if xx-YY is provided', () => {\n  expect(dayjs('2019-02-01').locale('es-US').format('MMMM')).toBe('febrero');\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Uses the localized uppercase formats as a base for lowercase formats, if not defined","suites":[],"updatePoint":{"line":93,"column":88,"index":3332},"line":93,"code":"it('Uses the localized uppercase formats as a base for lowercase formats, if not defined', () => {\n  const date = new Date();\n  const spanishDate = dayjs(date, {\n    locale: es\n  });\n  ['l', 'll', 'lll', 'llll'].forEach(option => {\n    const upperCaseFormat = es.formats[option.toUpperCase()];\n    const adaptedFormat = upperCaseFormat.replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g, (_, a, b) => a || b.slice(1));\n    expect(spanishDate.format(option)).toBe(spanishDate.format(adaptedFormat));\n  });\n});","file":"plugin/localizedFormat.test.js","skipped":false,"dir":"test"},{"name":"Return current time if no argument","suites":[],"updatePoint":{"line":15,"column":38,"index":402},"line":15,"code":"it('Return current time if no argument', () => {\n  expect(dayjs.max()).toBe(null);\n  expect(dayjs.min()).toBe(null);\n  expect(dayjs.max(null)).toBe(null);\n  expect(dayjs.min(null)).toBe(null);\n});","file":"plugin/minMax.test.js","skipped":false,"dir":"test"},{"name":"Return current time if passing empty array","suites":[],"updatePoint":{"line":21,"column":46,"index":607},"line":21,"code":"it('Return current time if passing empty array', () => {\n  expect(dayjs.max([])).toBe(null);\n  expect(dayjs.min([])).toBe(null);\n});","file":"plugin/minMax.test.js","skipped":false,"dir":"test"},{"name":"Compare between arguments","suites":[],"updatePoint":{"line":25,"column":29,"index":723},"line":25,"code":"it('Compare between arguments', () => {\n  expect(dayjs.max(arg1, arg2, arg3).format()).toBe(arg1.format());\n  expect(dayjs.min(arg1, arg2, arg3).format()).toBe(arg3.format());\n});","file":"plugin/minMax.test.js","skipped":false,"dir":"test"},{"name":"Compare in array","suites":[],"updatePoint":{"line":29,"column":20,"index":894},"line":29,"code":"it('Compare in array', () => {\n  expect(dayjs.max([arg1, arg2, arg3]).format()).toBe(arg1.format());\n  expect(dayjs.min([arg1, arg2, arg3]).format()).toBe(arg3.format());\n});","file":"plugin/minMax.test.js","skipped":false,"dir":"test"},{"name":"If Invalid Date return Invalid Date","suites":[],"updatePoint":{"line":33,"column":39,"index":1088},"line":33,"code":"it('If Invalid Date return Invalid Date', () => {\n  expect(dayjs.max(arg1, arg2, arg3, arg4).format()).toBe(arg4.format());\n  expect(dayjs.min([arg1, arg2, arg3, arg4]).format()).toBe(arg4.format());\n});","file":"plugin/minMax.test.js","skipped":false,"dir":"test"},{"name":"local","suites":["parse empty object"],"updatePoint":{"line":106,"column":11,"index":2315},"line":106,"code":"  it('local', () => {\n    expect(dayjs({}).format()).toBe(moment({}).format());\n  });","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"utc","suites":["parse empty object"],"updatePoint":{"line":109,"column":9,"index":2399},"line":109,"code":"  it('utc', () => {\n    expect(dayjs.utc({}).format()).toBe(moment.utc({}).format());\n  });","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"Constructor from Object","suites":["parse empty object"],"updatePoint":{"line":113,"column":27,"index":2513},"line":113,"code":"it('Constructor from Object', () => {\n  for (let i = 0; i < tests.length; i += 1) {\n    expect(dayjs(tests[i][0]).format(fmt)).toBe(tests[i][1]);\n    expect(moment(tests[i][0]).format(fmt)).toBe(tests[i][1]);\n  }\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"Constructor from Object UTC","suites":["parse empty object"],"updatePoint":{"line":119,"column":31,"index":2734},"line":119,"code":"it('Constructor from Object UTC', () => {\n  for (let i = 0; i < tests.length; i += 1) {\n    const result = tests[i][2] || tests[i][1];\n    expect(dayjs.utc(tests[i][0]).format(fmt)).toBe(result);\n    expect(moment.utc(tests[i][0]).format(fmt)).toBe(result);\n  }\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"Set from Object","suites":["parse empty object"],"updatePoint":{"line":126,"column":19,"index":2988},"line":126,"code":"it('Set from Object', () => {\n  for (let i = 0; i < tests.length; i += 1) {\n    expect(dayjs(now).set(tests[i][0]).format(fmt)).toBe(moment(now).set(tests[i][0]).format(fmt));\n  }\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add short reverse args","suites":["parse empty object"],"updatePoint":{"line":131,"column":26,"index":3179},"line":131,"code":"it('add short reverse args', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add({\n    ms: 50\n  }).millisecond()).toBe(550);\n  expect(a.add({\n    s: 1\n  }).second()).toBe(9);\n  expect(a.add({\n    m: 1\n  }).minute()).toBe(8);\n  expect(a.add({\n    h: 1\n  }).hour()).toBe(7);\n  expect(a.add({\n    d: 1\n  }).date()).toBe(13);\n  expect(a.add({\n    w: 1\n  }).date()).toBe(19);\n  expect(a.add({\n    M: 1\n  }).month()).toBe(10);\n  expect(a.add({\n    y: 1\n  }).year()).toBe(2012);\n  expect(a.add({\n    Q: 1\n  }).month()).toBe(0);\n  const aM = moment({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(aM.clone().add({\n    ms: 50\n  }).millisecond()).toBe(550);\n  expect(aM.clone().add({\n    s: 1\n  }).second()).toBe(9);\n  expect(aM.clone().add({\n    m: 1\n  }).minute()).toBe(8);\n  expect(aM.clone().add({\n    h: 1\n  }).hour()).toBe(7);\n  expect(aM.clone().add({\n    d: 1\n  }).date()).toBe(13);\n  expect(aM.clone().add({\n    w: 1\n  }).date()).toBe(19);\n  expect(aM.clone().add({\n    M: 1\n  }).month()).toBe(10);\n  expect(aM.clone().add({\n    y: 1\n  }).year()).toBe(2012);\n  expect(aM.clone().add({\n    Q: 1\n  }).month()).toBe(0);\n  const b = dayjs([2010, 1, 31]).add({\n    M: 1\n  });\n  const c = dayjs([2010, 2, 28]).subtract({\n    M: 1\n  });\n  const d = dayjs([2010, 2, 28]).subtract({\n    Q: 1\n  });\n  expect(b.month()).toBe(1);\n  expect(b.date()).toBe(28);\n  expect(c.month()).toBe(0);\n  expect(c.date()).toBe(28);\n  expect(d.month()).toBe(10);\n  expect(d.date()).toBe(28);\n  expect(d.year()).toBe(2009);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add long reverse args","suites":["parse empty object"],"updatePoint":{"line":221,"column":25,"index":4858},"line":221,"code":"it('add long reverse args', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add({\n    milliseconds: 50\n  }).millisecond()).toBe(550);\n  expect(a.add({\n    seconds: 1\n  }).second()).toBe(9);\n  expect(a.add({\n    minutes: 1\n  }).minute()).toBe(8);\n  expect(a.add({\n    hours: 1\n  }).hour()).toBe(7);\n  expect(a.add({\n    days: 1\n  }).date()).toBe(13);\n  expect(a.add({\n    weeks: 1\n  }).date()).toBe(19);\n  expect(a.add({\n    months: 1\n  }).month()).toBe(10);\n  expect(a.add({\n    years: 1\n  }).year()).toBe(2012);\n  expect(a.add({\n    quarters: 1\n  }).month()).toBe(0);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add long singular reverse args","suites":["parse empty object"],"updatePoint":{"line":259,"column":34,"index":5545},"line":259,"code":"it('add long singular reverse args', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add({\n    millisecond: 50\n  }).millisecond()).toBe(550);\n  expect(a.add({\n    second: 1\n  }).second()).toBe(9);\n  expect(a.add({\n    minute: 1\n  }).minute()).toBe(8);\n  expect(a.add({\n    hour: 1\n  }).hour()).toBe(7);\n  expect(a.add({\n    day: 1\n  }).date()).toBe(13);\n  expect(a.add({\n    week: 1\n  }).date()).toBe(19);\n  expect(a.add({\n    month: 1\n  }).month()).toBe(10);\n  expect(a.add({\n    year: 1\n  }).year()).toBe(2012);\n  expect(a.add({\n    quarter: 1\n  }).month()).toBe(0);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add string long","suites":["parse empty object"],"updatePoint":{"line":297,"column":19,"index":6208},"line":297,"code":"it('add string long', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add(50, 'millisecond').millisecond()).toBe(550);\n  expect(a.add(1, 'second').second()).toBe(9);\n  expect(a.add(1, 'minute').minute()).toBe(8);\n  expect(a.add(1, 'hour').hour()).toBe(7);\n  expect(a.add(1, 'day').date()).toBe(13);\n  expect(a.add(1, 'week').date()).toBe(19);\n  expect(a.add(1, 'month').month()).toBe(10);\n  expect(a.add(1, 'year').year()).toBe(2012);\n  expect(a.add(1, 'quarter').month()).toBe(0);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add string long singular","suites":["parse empty object"],"updatePoint":{"line":317,"column":28,"index":6808},"line":317,"code":"it('add string long singular', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add(50, 'milliseconds').millisecond()).toBe(550);\n  expect(a.add(1, 'seconds').second()).toBe(9);\n  expect(a.add(1, 'minutes').minute()).toBe(8);\n  expect(a.add(1, 'hours').hour()).toBe(7);\n  expect(a.add(1, 'days').date()).toBe(13);\n  expect(a.add(1, 'weeks').date()).toBe(19);\n  expect(a.add(1, 'months').month()).toBe(10);\n  expect(a.add(1, 'years').year()).toBe(2012);\n  expect(a.add(1, 'quarters').month()).toBe(0);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add string short","suites":["parse empty object"],"updatePoint":{"line":337,"column":20,"index":7409},"line":337,"code":"it('add string short', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add(50, 'ms').millisecond()).toBe(550);\n  expect(a.add(1, 's').second()).toBe(9);\n  expect(a.add(1, 'm').minute()).toBe(8);\n  expect(a.add(1, 'h').hour()).toBe(7);\n  expect(a.add(1, 'd').date()).toBe(13);\n  expect(a.add(1, 'w').date()).toBe(19);\n  expect(a.add(1, 'M').month()).toBe(10);\n  expect(a.add(1, 'y').year()).toBe(2012);\n  expect(a.add(1, 'Q').month()).toBe(0);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add strings string short","suites":["parse empty object"],"updatePoint":{"line":357,"column":28,"index":7969},"line":357,"code":"it('add strings string short', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add('50', 'ms').millisecond()).toBe(550);\n  expect(a.add('1', 's').second()).toBe(9);\n  expect(a.add('1', 'm').minute()).toBe(8);\n  expect(a.add('1', 'h').hour()).toBe(7);\n  expect(a.add('1', 'd').date()).toBe(13);\n  expect(a.add('1', 'w').date()).toBe(19);\n  expect(a.add('1', 'M').month()).toBe(10);\n  expect(a.add('1', 'y').year()).toBe(2012);\n  expect(a.add('1', 'Q').month()).toBe(0);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add no string with milliseconds default","suites":["parse empty object"],"updatePoint":{"line":377,"column":43,"index":8562},"line":377,"code":"it('add no string with milliseconds default', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.add(50).millisecond()).toBe(550);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"subtract strings string short","suites":["parse empty object"],"updatePoint":{"line":389,"column":33,"index":8789},"line":389,"code":"it('subtract strings string short', () => {\n  const a = dayjs({\n    year: 2011,\n    month: 9,\n    date: 12,\n    hour: 6,\n    minute: 7,\n    second: 8,\n    millisecond: 500\n  });\n  expect(a.subtract('50', 'ms').millisecond()).toBe(450);\n  expect(a.subtract('1', 's').second()).toBe(7);\n  expect(a.subtract('1', 'm').minute()).toBe(6);\n  expect(a.subtract('1', 'h').hour()).toBe(5);\n  expect(a.subtract('1', 'd').date()).toBe(11);\n  expect(a.subtract('1', 'w').date()).toBe(5);\n  expect(a.subtract('1', 'M').month()).toBe(8);\n  expect(a.subtract('1', 'y').year()).toBe(2010);\n  expect(a.subtract('1', 'Q').month()).toBe(6);\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"add decimal values of days and months","suites":["parse empty object"],"updatePoint":{"line":409,"column":41,"index":9423},"line":409,"code":"it('add decimal values of days and months', () => {\n  expect(dayjs([2016, 4, 3]).add(1.6, 'days').date()).toBe(5);\n  expect(dayjs([2016, 4, 3]).add(-1.6, 'days').date()).toBe(1);\n  expect(dayjs([2016, 4, 1]).add(-1.6, 'days').date()).toBe(30);\n  expect(dayjs([2016, 4, 3]).add(1.6, 'months').month()).toBe(4);\n  expect(dayjs([2016, 4, 3]).add(-1.6, 'months').month()).toBe(1);\n  expect(dayjs([2016, 1, 3]).add(-1.6, 'months').month()).toBe(11);\n  expect(dayjs([2016, 4, 3]).subtract(1.6, 'days').date()).toBe(1);\n  expect(dayjs([2016, 4, 2]).subtract(1.6, 'days').date()).toBe(31);\n  expect(dayjs([2016, 2, 1]).subtract(1.1, 'days').date()).toBe(31);\n  expect(dayjs([2016, 4, 3]).subtract(-1.6, 'days').date()).toBe(5);\n  expect(dayjs([2016, 4, 30]).subtract(-1.6, 'days').date()).toBe(2);\n  expect(dayjs([2016, 4, 3]).subtract(1.6, 'months').month()).toBe(1);\n  expect(dayjs([2016, 4, 3]).subtract(-1.6, 'months').month()).toBe(4);\n  expect(dayjs([2016, 12, 31]).subtract(-1.6, 'months').month()).toBe(0);\n  expect(dayjs([2016, 1, 1]).add(1.6, 'years').format('YYYY-MM-DD')).toBe('2017-01-01');\n  expect(dayjs([2016, 7, 1]).add(1.6, 'years').format('YYYY-MM-DD')).toBe('2017-07-01');\n  expect(dayjs([2016, 1, 1]).add(1.1, 'quarters').format('YYYY-MM-DD')).toBe('2016-04-01');\n});","file":"plugin/objectSupport.test.js","skipped":false,"dir":"test"},{"name":"Years","suites":[],"updatePoint":{"line":17,"column":9,"index":462},"line":17,"code":"it('Years', () => {\n  expect(dayjs().get('years')).toBe(moment().get('years'));\n  expect(dayjs().years()).toBe(moment().years());\n  expect(dayjs().years(0).valueOf()).toBe(moment().years(0).valueOf());\n  expect(dayjs().years(2000).valueOf()).toBe(moment().years(2000).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Months","suites":[],"updatePoint":{"line":23,"column":10,"index":747},"line":23,"code":"it('Months', () => {\n  expect(dayjs().get('months')).toBe(moment().get('months'));\n  expect(dayjs().months()).toBe(moment().months());\n  expect(dayjs().months(0).valueOf()).toBe(moment().months(0).valueOf());\n  expect(dayjs().months(1).valueOf()).toBe(moment().months(1).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Days of Week","suites":[],"updatePoint":{"line":29,"column":16,"index":1040},"line":29,"code":"it('Days of Week', () => {\n  expect(dayjs().get('days')).toBe(moment().get('days'));\n  expect(dayjs().days()).toBe(moment().days());\n  expect(dayjs().days(0).format()).toBe(moment().days(0).format());\n  expect(dayjs().days(1).format()).toBe(moment().days(1).format());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Dates","suites":[],"updatePoint":{"line":35,"column":9,"index":1306},"line":35,"code":"it('Dates', () => {\n  expect(dayjs().get('dates')).toBe(moment().get('dates'));\n  expect(dayjs().dates()).toBe(moment().dates());\n  expect(dayjs().dates(0).valueOf()).toBe(moment().dates(0).valueOf());\n  expect(dayjs().dates(1).valueOf()).toBe(moment().dates(1).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Hours","suites":[],"updatePoint":{"line":41,"column":9,"index":1584},"line":41,"code":"it('Hours', () => {\n  expect(dayjs().get('hours')).toBe(moment().get('hours'));\n  expect(dayjs().hours()).toBe(moment().hours());\n  expect(dayjs().hours(0).valueOf()).toBe(moment().hours(0).valueOf());\n  expect(dayjs().hours(1).valueOf()).toBe(moment().hours(1).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Minutes","suites":[],"updatePoint":{"line":47,"column":11,"index":1864},"line":47,"code":"it('Minutes', () => {\n  expect(dayjs().get('minutes')).toBe(moment().get('minutes'));\n  expect(dayjs().minutes()).toBe(moment().minutes());\n  expect(dayjs().minutes(0).valueOf()).toBe(moment().minutes(0).valueOf());\n  expect(dayjs().minutes(1).valueOf()).toBe(moment().minutes(1).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Seconds","suites":[],"updatePoint":{"line":53,"column":11,"index":2160},"line":53,"code":"it('Seconds', () => {\n  expect(dayjs().get('seconds')).toBe(moment().get('seconds'));\n  expect(dayjs().seconds()).toBe(moment().seconds());\n  expect(dayjs().seconds(0).valueOf()).toBe(moment().seconds(0).valueOf());\n  expect(dayjs().seconds(1).valueOf()).toBe(moment().seconds(1).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Milliseconds","suites":[],"updatePoint":{"line":59,"column":16,"index":2461},"line":59,"code":"it('Milliseconds', () => {\n  expect(dayjs().get('milliseconds')).toBe(moment().get('milliseconds'));\n  expect(dayjs().milliseconds()).toBe(moment().milliseconds());\n  expect(dayjs().milliseconds(0).valueOf()).toBe(moment().milliseconds(0).valueOf());\n  expect(dayjs().milliseconds(1).valueOf()).toBe(moment().milliseconds(1).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Dates","suites":[],"updatePoint":{"line":65,"column":13,"index":2799},"line":65,"code":"it('Set Dates', () => {\n  expect(dayjs().date(30).valueOf()).toBe(moment().dates(30).valueOf());\n  expect(dayjs().set('dates', 30).valueOf()).toBe(moment().set('dates', 30).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Days of Week","suites":[],"updatePoint":{"line":69,"column":20,"index":2995},"line":69,"code":"it('Set Days of Week', () => {\n  expect(dayjs().days(0).valueOf()).toBe(moment().days(0).valueOf());\n  expect(dayjs().set('days', 0).valueOf()).toBe(moment().set('days', 0).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Months","suites":[],"updatePoint":{"line":73,"column":14,"index":3178},"line":73,"code":"it('Set Months', () => {\n  expect(dayjs().months(11).valueOf()).toBe(moment().months(11).valueOf());\n  expect(dayjs().set('months', 11).valueOf()).toBe(moment().set('months', 11).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Years","suites":[],"updatePoint":{"line":77,"column":13,"index":3372},"line":77,"code":"it('Set Years', () => {\n  expect(dayjs().years(2008).valueOf()).toBe(moment().year(2008).valueOf());\n  expect(dayjs().set('years', 2008).valueOf()).toBe(moment().set('years', 2008).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Hours","suites":[],"updatePoint":{"line":81,"column":13,"index":3569},"line":81,"code":"it('Set Hours', () => {\n  expect(dayjs().set('hours', 6).valueOf()).toBe(moment().set('hours', 6).valueOf());\n  expect(dayjs().hours(6).valueOf()).toBe(moment().hours(6).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Minutes","suites":[],"updatePoint":{"line":85,"column":15,"index":3757},"line":85,"code":"it('Set Minutes', () => {\n  expect(dayjs().minutes(59).valueOf()).toBe(moment().minutes(59).valueOf());\n  expect(dayjs().set('minutes', 59).valueOf()).toBe(moment().set('minutes', 59).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Seconds","suites":[],"updatePoint":{"line":89,"column":15,"index":3957},"line":89,"code":"it('Set Seconds', () => {\n  expect(dayjs().seconds(59).valueOf()).toBe(moment().seconds(59).valueOf());\n  expect(dayjs().set('second', 59).valueOf()).toBe(moment().set('second', 59).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Milliseconds","suites":[],"updatePoint":{"line":93,"column":20,"index":4160},"line":93,"code":"it('Set Milliseconds', () => {\n  expect(dayjs().milliseconds(999).valueOf()).toBe(moment().milliseconds(999).valueOf());\n  expect(dayjs().set('millisecond', 999).valueOf()).toBe(moment().set('millisecond', 999).valueOf());\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"Set Month and Year in last day of month","suites":[],"updatePoint":{"line":97,"column":43,"index":4410},"line":97,"code":"it('Set Month and Year in last day of month', () => {\n  // 2011-07-31 -> 2011-02-28\n  const origin = dayjs('2011-07-31T14:48:00.000Z');\n  const setMonth = origin.set('month', 1);\n  expect(setMonth.months()).toBe(1);\n  expect(origin.dates()).toBe(31);\n  expect(setMonth.dates()).toBe(28);\n  // 2000-02-29 -> 2001-02-28\n  const origin2 = dayjs('2000-02-29T14:48:00.000Z');\n  const setYear = origin2.set('years', 2001);\n  expect(setYear.months()).toBe(1);\n  expect(origin2.dates()).toBe(29);\n  expect(setYear.dates()).toBe(28);\n});","file":"plugin/pluralGetSet.test.js","skipped":false,"dir":"test"},{"name":"preparse string + format","suites":["preparse and postformat","transform"],"updatePoint":{"line":81,"column":32,"index":2188},"line":81,"code":"    it('preparse string + format', () => expect(dayjs.utc(TEST_DATE, 'YYYY-MM-DD').unix()).toBe(TEST_NUM));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"preparse ISO8601 string","suites":["preparse and postformat","transform"],"updatePoint":{"line":82,"column":31,"index":2295},"line":82,"code":"    it('preparse ISO8601 string', () => expect(dayjs.utc(TEST_DATE).unix()).toBe(TEST_NUM));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"postformat","suites":["preparse and postformat","transform"],"updatePoint":{"line":83,"column":18,"index":2375},"line":83,"code":"    it('postformat', () => expect(dayjs.unix(TEST_NUM).utc().format('YYYY-MM-DD')).toBe(TEST_DATE));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"postformat should work on dayjs.fn.from","suites":["preparse and postformat","transform from"],"updatePoint":{"line":91,"column":47,"index":2700},"line":91,"code":"    it('postformat should work on dayjs.fn.from', () => expect(start.from(t1, true)).toBe('@ minutes'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"postformat should work on dayjs.fn.fromNow","suites":["preparse and postformat","transform from"],"updatePoint":{"line":93,"column":50,"index":2844},"line":93,"code":"    it('postformat should work on dayjs.fn.fromNow', () => expect(t2.fromNow(true)).toBe('^ days'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"postformat should work on dayjs.duration.fn.humanize","suites":["preparse and postformat","transform from"],"updatePoint":{"line":94,"column":60,"index":2955},"line":94,"code":"    it('postformat should work on dayjs.duration.fn.humanize', () => expect(dayjs.duration(10, 'h').humanize()).toBe('!) hours'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"today at the same time","suites":["calendar day"],"updatePoint":{"line":99,"column":28,"index":3147},"line":99,"code":"  it('today at the same time', () => expect(dayjs(a).calendar()).toBe('Today at !@:)) PM'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"Now plus 25 min","suites":["calendar day"],"updatePoint":{"line":100,"column":21,"index":3233},"line":100,"code":"  it('Now plus 25 min', () => expect(dayjs(a).add({\n    m: 25\n  }).calendar()).toBe('Today at !@:@% PM'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"Now plus 1 hour","suites":["calendar day"],"updatePoint":{"line":103,"column":21,"index":3340},"line":103,"code":"  it('Now plus 1 hour', () => expect(dayjs(a).add({\n    h: 1\n  }).calendar()).toBe('Today at !:)) PM'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"tomorrow at the same time","suites":["calendar day"],"updatePoint":{"line":106,"column":31,"index":3455},"line":106,"code":"  it('tomorrow at the same time', () => expect(dayjs(a).add({\n    d: 1\n  }).calendar()).toBe('Tomorrow at !@:)) PM'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"Now minus 1 hour","suites":["calendar day"],"updatePoint":{"line":109,"column":22,"index":3565},"line":109,"code":"  it('Now minus 1 hour', () => expect(dayjs(a).subtract({\n    h: 1\n  }).calendar()).toBe('Today at !!:)) AM'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"yesterday at the same time","suites":["calendar day"],"updatePoint":{"line":112,"column":32,"index":3687},"line":112,"code":"  it('yesterday at the same time', () => expect(dayjs(a).subtract({\n    d: 1\n  }).calendar()).toBe('Yesterday at !@:)) PM'));","file":"plugin/preParsePostFormat.test.js","skipped":false,"dir":"test"},{"name":"get QuarterOfYear","suites":[],"updatePoint":{"line":12,"column":21,"index":297},"line":12,"code":"it('get QuarterOfYear', () => {\n  expect(dayjs('2013-01-01T00:00:00.000').quarter()).toBe(1);\n  expect(dayjs('2013-04-01T00:00:00.000').subtract(1, 'ms').quarter()).toBe(1);\n  expect(dayjs('2013-04-01T00:00:00.000').quarter()).toBe(2);\n  expect(dayjs('2013-07-01T00:00:00.000').subtract(1, 'ms').quarter()).toBe(2);\n  expect(dayjs('2013-07-01T00:00:00.000').quarter()).toBe(3);\n  expect(dayjs('2013-10-01T00:00:00.000').subtract(1, 'ms').quarter()).toBe(3);\n  expect(dayjs('2013-10-01T00:00:00.000').quarter()).toBe(4);\n  expect(dayjs('2014-01-01T00:00:00.000').subtract(1, 'ms').quarter()).toBe(4);\n});","file":"plugin/quarterOfYear.test.js","skipped":false,"dir":"test"},{"name":"set QuarterOfYear","suites":[],"updatePoint":{"line":22,"column":21,"index":901},"line":22,"code":"it('set QuarterOfYear', () => {\n  const d1 = '2013-01-01T00:00:00.000';\n  expect(dayjs(d1).quarter(2).format()).toBe(moment(d1).quarter(2).format());\n  const d2 = '2013-02-05T05:06:07.000';\n  expect(dayjs(d2).quarter(2).format()).toBe(moment(d2).quarter(2).format());\n  const d3 = '2018-11-25T05:06:07.000';\n  expect(dayjs(d3).quarter(3).format()).toBe(moment(d3).quarter(3).format());\n});","file":"plugin/quarterOfYear.test.js","skipped":false,"dir":"test"},{"name":"add subtract quarter","suites":[],"updatePoint":{"line":30,"column":24,"index":1294},"line":30,"code":"it('add subtract quarter', () => {\n  expect(dayjs().add(2, 'quarter').format()).toBe(moment().add(2, 'quarter').format());\n  expect(dayjs().subtract(2, 'quarter').format()).toBe(moment().subtract(2, 'quarter').format());\n});","file":"plugin/quarterOfYear.test.js","skipped":false,"dir":"test"},{"name":"startOf endOf quarter","suites":[],"updatePoint":{"line":34,"column":25,"index":1520},"line":34,"code":"it('startOf endOf quarter', () => {\n  expect(dayjs().startOf('quarter').format()).toBe(moment().startOf('quarter').format());\n  expect(dayjs().endOf('quarter').format()).toBe(moment().endOf('quarter').format());\n});","file":"plugin/quarterOfYear.test.js","skipped":false,"dir":"test"},{"name":"Time from X","suites":[],"updatePoint":{"line":16,"column":15,"index":483},"line":16,"code":"it('Time from X', () => {\n  const T = [[0, 'second'],\n  // a few seconds\n  [1, 'second'],\n  // a few seconds\n  [44, 'second'],\n  // a few seconds\n  [44.4, 'second'],\n  // a few seconds\n  [44.5, 'second'],\n  // a minute\n  [45, 'second'],\n  // a minute\n  [1, 'minute'],\n  // a minute\n  [89, 'second'],\n  // a minute\n  [89.4, 'second'],\n  // a minute\n  [89.5, 'second'],\n  // a minute\n  [90, 'second'],\n  // 2 minutes\n  [44, 'minute'],\n  // 44 minutes\n  [44.4, 'minute'], [44.5, 'minute'], [45, 'minute'],\n  // an hour\n  [1, 'hour'],\n  // an hour\n  [89, 'minute'],\n  // an hour\n  [89.4, 'minute'], [89.5, 'minute'], [90, 'minute'],\n  // 2 hours\n  [21, 'hour'],\n  // 21 hours\n  [21.4, 'hour'], [21.5, 'hour'], [22, 'hour'],\n  // a day\n  [1, 'day'],\n  // a day\n  [35, 'hour'],\n  // a day\n  [35.4, 'hour'], [35.5, 'hour'], [36, 'hour'],\n  // 2 days\n  [25, 'day'],\n  // 25 days\n  [26, 'day'],\n  // a month\n  [1, 'month'],\n  // a month\n  [45, 'day'],\n  // a month\n  [47, 'day'],\n  // 2 month\n  [10, 'month'],\n  // 10 month\n  [11, 'month'],\n  // a year\n  [1, 'year'],\n  // a year\n  [17, 'month'],\n  // a year\n  [18, 'month'] // 2 years\n  ];\n\n  T.forEach(t => {\n    expect(dayjs().from(dayjs().add(t[0], t[1]))).toBe(moment().from(moment().add(t[0], t[1])));\n  });\n  // withoutSuffix\n  expect(dayjs().from(dayjs().add(3, 'year'), true)).toBe(moment().from(moment().add(3, 'year'), true));\n  // past date\n  expect(dayjs().from(dayjs().subtract(3, 'year'))).toBe(moment().from(moment().subtract(3, 'year')));\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Time from now","suites":[],"updatePoint":{"line":88,"column":17,"index":1986},"line":88,"code":"it('Time from now', () => {\n  expect(dayjs().fromNow()).toBe(moment().fromNow());\n  expect(dayjs().fromNow(true)).toBe(moment().fromNow(true));\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Time to now","suites":[],"updatePoint":{"line":92,"column":15,"index":2132},"line":92,"code":"it('Time to now', () => {\n  expect(dayjs().toNow()).toBe(moment().toNow());\n  expect(dayjs().toNow(true)).toBe(moment().toNow(true));\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Time to X","suites":[],"updatePoint":{"line":96,"column":13,"index":2268},"line":96,"code":"it('Time to X', () => {\n  // withoutSuffix\n  expect(dayjs().to(dayjs().add(3, 'year'), true)).toBe(moment().to(moment().add(3, 'year'), true));\n  // past date\n  expect(dayjs().to(dayjs().subtract(3, 'year'))).toBe(moment().to(moment().subtract(3, 'year')));\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Locale Function","suites":[],"updatePoint":{"line":102,"column":19,"index":2536},"line":102,"code":"it('Locale Function', () => {\n  // e.g. in ru locale, m: x minute require additional processing\n  // and provides as a function instead of a string\n  const str0 = '2020-01-06 15:53:00';\n  const str = '2020-01-06 15:52:15';\n  const result = dayjs(str0).locale('ru').to(str);\n  expect(result).toEqual(expect.any(String));\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Time from now with UTC","suites":[],"updatePoint":{"line":112,"column":26,"index":2914},"line":112,"code":"it('Time from now with UTC', () => {\n  dayjs.extend(utc);\n  expect(dayjs.utc().fromNow()).toBe(moment.utc().fromNow());\n  const currentTime = new Date();\n  const currentTimestamp = currentTime.getTime();\n  const currentTimestampAfter37hrs = currentTimestamp + 37 * 60 * 60 * 1000;\n  let dutc = dayjs.utc(currentTimestampAfter37hrs);\n  let mutc = moment.utc(currentTimestampAfter37hrs);\n  expect(dutc.fromNow()).toBe(mutc.fromNow());\n\n  // More precise\n  const currentTimestampAfter36hrs = currentTimestamp + 36.0001 * 60 * 60 * 1000;\n  dutc = dayjs.utc(currentTimestampAfter36hrs);\n  mutc = moment.utc(currentTimestampAfter36hrs);\n  expect(dutc.fromNow()).toBe(mutc.fromNow());\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Custom thresholds and rounding support","suites":[],"updatePoint":{"line":128,"column":42,"index":3612},"line":128,"code":"it('Custom thresholds and rounding support', () => {\n  expect(dayjs().subtract(45, 'm').fromNow()).toBe('an hour ago');\n  delete relativeTime.$i; // this allow plugin to be installed again\n  dayjs.extend(relativeTime, {\n    rounding: Math.floor,\n    thresholds: [{\n      l: 's',\n      r: 1\n    }, {\n      l: 'm',\n      r: 1\n    }, {\n      l: 'mm',\n      r: 59,\n      d: C.MIN\n    }, {\n      l: 'h',\n      r: 1\n    }, {\n      l: 'hh',\n      r: 23,\n      d: C.H\n    }, {\n      l: 'd',\n      r: 1\n    }, {\n      l: 'dd',\n      r: 29,\n      d: C.D\n    }, {\n      l: 'M',\n      r: 1\n    }, {\n      l: 'MM',\n      r: 11,\n      d: C.M\n    }, {\n      l: 'y'\n    }, {\n      l: 'yy',\n      d: C.Y\n    }]\n  });\n  expect(dayjs().subtract(45, 'm').fromNow()).toBe('45 minutes ago');\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Locale without relativeTime config fallback","suites":[],"updatePoint":{"line":173,"column":47,"index":4391},"line":173,"code":"it('Locale without relativeTime config fallback', () => {\n  expect(dayjs().locale({\n    name: 'test-locale'\n  }).fromNow()).toEqual(expect.any(String));\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"Past and Future keys should support function for additional processing","suites":[],"updatePoint":{"line":178,"column":74,"index":4575},"line":178,"code":"it('Past and Future keys should support function for additional processing', () => {\n  dayjs.extend(updateLocale);\n  dayjs.updateLocale('en', {\n    relativeTime: {\n      future: input => `${input} modified`,\n      past: input => `${input} modified`,\n      s: 'just now',\n      m: ' 1 min',\n      mm: '%d min',\n      h: '1 hr',\n      hh: '%d hrs',\n      d: 'a day',\n      dd: '%d days',\n      M: 'a month',\n      MM: '%d months',\n      y: 'a year',\n      yy: '%d years'\n    }\n  });\n  const past = Date.now() - 1000;\n  expect(dayjs(past).fromNow()).toEqual(' 1 min modified');\n  const future = Date.now() + 1000;\n  expect(dayjs(future).fromNow()).toEqual(' 1 min modified');\n});","file":"plugin/relativeTime.test.js","skipped":false,"dir":"test"},{"name":"return string","suites":["Guess"],"updatePoint":{"line":22,"column":19,"index":627},"line":22,"code":"  it('return string', () => {\n    expect(typeof dayjs.tz.guess()).toBe('string');\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"parse target time string","suites":["Parse"],"updatePoint":{"line":27,"column":30,"index":756},"line":27,"code":"  it('parse target time string', () => {\n    const newYork = dayjs.tz('2014-06-01 12:00', NY);\n    const MnewYork = moment.tz('2014-06-01 12:00', NY);\n    expect(newYork.format()).toBe('2014-06-01T12:00:00-04:00');\n    expect(newYork.format()).toBe(MnewYork.format());\n    expect(newYork.utcOffset()).toBe(-240);\n    expect(newYork.utcOffset()).toBe(MnewYork.utcOffset());\n    expect(newYork.valueOf()).toBe(1401638400000);\n    expect(newYork.valueOf()).toBe(MnewYork.valueOf());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"parse timestamp, js Date, Day.js object","suites":["Parse"],"updatePoint":{"line":37,"column":45,"index":1257},"line":37,"code":"  it('parse timestamp, js Date, Day.js object', () => {\n    const d = new Date('2020-08-07T12:00-07:00');\n    const result = '2020-08-07T12:00:00-07:00';\n    const TjsDate = dayjs.tz(d, VAN);\n    const Tdayjs = dayjs.tz(dayjs(d), VAN);\n    const Timestamp = dayjs.tz(d.getTime(), VAN);\n    const Tmoment = moment.tz(d, VAN);\n    expect(TjsDate.format()).toBe(result);\n    expect(Tdayjs.format()).toBe(result);\n    expect(Timestamp.format()).toBe(result);\n    expect(Tmoment.format()).toBe(result);\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"parse and convert between timezones","suites":["Parse"],"updatePoint":{"line":49,"column":41,"index":1757},"line":49,"code":"  it('parse and convert between timezones', () => {\n    const newYork = dayjs.tz('2014-06-01 12:00', NY);\n    expect(newYork.tz('America/Los_Angeles').format()).toBe('2014-06-01T09:00:00-07:00');\n    expect(newYork.tz('Europe/London').format()).toBe('2014-06-01T17:00:00+01:00');\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"preserve milliseconds","suites":["Parse"],"updatePoint":{"line":54,"column":27,"index":2029},"line":54,"code":"  it('preserve milliseconds', () => {\n    const d = dayjs(1596735327399);\n    const oldMs = d.millisecond();\n    const dTz = d.tz('America/New_York');\n    const newMs = dTz.millisecond();\n    expect(oldMs).toEqual(newMs);\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"convert to target time","suites":["Convert"],"updatePoint":{"line":63,"column":28,"index":2290},"line":63,"code":"  it('convert to target time', () => {\n    const losAngeles = dayjs('2014-06-01T12:00:00Z').tz('America/Los_Angeles');\n    const MlosAngeles = moment('2014-06-01T12:00:00Z').tz('America/Los_Angeles');\n    expect(losAngeles.format()).toBe('2014-06-01T05:00:00-07:00');\n    expect(losAngeles.format()).toBe(MlosAngeles.format());\n    expect(losAngeles.valueOf()).toBe(1401624000000);\n    expect(losAngeles.valueOf()).toBe(MlosAngeles.valueOf());\n    expect(losAngeles.utcOffset()).toBe(-420);\n    expect(losAngeles.utcOffset()).toBe(MlosAngeles.utcOffset());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"convert to target time","suites":["Convert"],"updatePoint":{"line":73,"column":28,"index":2853},"line":73,"code":"  it('convert to target time', () => {\n    [dayjs, moment].forEach(_ => {\n      const losAngeles = _('2014-06-01T12:00:00Z').tz('America/Los_Angeles');\n      expect(losAngeles.format()).toBe('2014-06-01T05:00:00-07:00');\n      expect(losAngeles.valueOf()).toBe(1401624000000);\n    });\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"convert from time with timezone to target time","suites":["Convert"],"updatePoint":{"line":80,"column":52,"index":3168},"line":80,"code":"  it('convert from time with timezone to target time', () => {\n    const losAngelesInUTC = dayjs('2014-06-01T05:00:00-07:00').tz('UTC');\n    const MlosAngelesInUTC = moment('2014-06-01T05:00:00-07:00').tz('UTC');\n    expect(losAngelesInUTC.format()).toBe('2014-06-01T12:00:00Z');\n    expect(losAngelesInUTC.format()).toBe(MlosAngelesInUTC.format());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"DST","suites":["Convert"],"updatePoint":{"line":86,"column":9,"index":3481},"line":86,"code":"  it('DST', () => {\n    [dayjs, moment].forEach(_ => {\n      const jun = _('2014-06-01T12:00:00Z');\n      const dec = _('2014-12-01T12:00:00Z');\n      expect(jun.tz('America/Los_Angeles').format('ha')).toBe('5am');\n      expect(jun.tz('America/Los_Angeles').utcOffset()).toBe(-7 * 60);\n      expect(dec.tz('America/Los_Angeles').format('ha')).toBe('4am');\n      expect(dec.tz('America/Los_Angeles').utcOffset()).toBe(-8 * 60);\n      expect(jun.tz(NY).format('ha')).toBe('8am');\n      expect(dec.tz(NY).format('ha')).toBe('7am');\n      expect(jun.tz(TOKYO).format('ha')).toBe('9pm');\n      expect(dec.tz(TOKYO).format('ha')).toBe('9pm');\n      expect(jun.tz('Australia/Sydney').format('ha')).toBe('10pm');\n      expect(dec.tz('Australia/Sydney').format('ha')).toBe('11pm');\n    });\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"format Z","suites":["Convert"],"updatePoint":{"line":102,"column":14,"index":4273},"line":102,"code":"  it('format Z', () => {\n    [dayjs, moment].forEach(_ => {\n      const t = _('2020-08-06T03:48:10.258Z').tz(TOKYO);\n      expect(t.format('Z')).toBe('+09:00');\n    });\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"2012-03-11 01:59:59","suites":["DST, a time that never existed Spring Forward"],"updatePoint":{"line":116,"column":25,"index":4699},"line":116,"code":"  it('2012-03-11 01:59:59', () => {\n    const s = '2012-03-11 01:59:59';\n    const d = dayjs.tz(s, NY);\n    const m = moment.tz(s, NY);\n    expect(d.format()).toBe('2012-03-11T01:59:59-05:00');\n    expect(d.format()).toBe(m.format());\n    expect(d.utcOffset()).toBe(-300);\n    expect(d.utcOffset()).toBe(m.utcOffset());\n    expect(d.valueOf()).toBe(1331449199000);\n    expect(d.valueOf()).toBe(m.valueOf());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"2012-03-11 02:00:00","suites":["DST, a time that never existed Spring Forward"],"updatePoint":{"line":127,"column":25,"index":5113},"line":127,"code":"  it('2012-03-11 02:00:00', () => {\n    const s = '2012-03-11 02:00:00';\n    const d = dayjs.tz(s, NY);\n    const m = moment.tz(s, NY);\n    expect(d.format()).toBe('2012-03-11T03:00:00-04:00');\n    expect(d.format()).toBe(m.format());\n    expect(d.valueOf()).toBe(m.valueOf());\n    expect(d.valueOf()).toBe(1331449200000);\n    expect(d.utcOffset()).toBe(-240);\n    expect(d.utcOffset()).toBe(m.utcOffset());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"2012-03-11 02:59:59","suites":["DST, a time that never existed Spring Forward"],"updatePoint":{"line":138,"column":25,"index":5527},"line":138,"code":"  it('2012-03-11 02:59:59', () => {\n    const s = '2012-03-11 02:59:59';\n    const d = dayjs.tz(s, NY);\n    const m = moment.tz(s, NY);\n    expect(d.format()).toBe('2012-03-11T03:59:59-04:00');\n    expect(d.format()).toBe(m.format());\n    expect(d.valueOf()).toBe(m.valueOf());\n    expect(d.valueOf()).toBe(1331452799000);\n    expect(d.utcOffset()).toBe(-240);\n    expect(d.utcOffset()).toBe(m.utcOffset());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"2012-03-11 03:00:00","suites":["DST, a time that never existed Spring Forward"],"updatePoint":{"line":149,"column":25,"index":5941},"line":149,"code":"  it('2012-03-11 03:00:00', () => {\n    const s = '2012-03-11 03:00:00';\n    const d = dayjs.tz(s, NY);\n    const m = moment.tz(s, NY);\n    expect(d.format()).toBe('2012-03-11T03:00:00-04:00');\n    expect(d.format()).toBe(m.format());\n    expect(d.valueOf()).toBe(m.valueOf());\n    expect(d.valueOf()).toBe(1331449200000);\n    expect(d.utcOffset()).toBe(-240);\n    expect(d.utcOffset()).toBe(m.utcOffset());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"2012-11-04 00:59:59","suites":["DST, a time that never existed Fall Back"],"updatePoint":{"line":164,"column":25,"index":6457},"line":164,"code":"  it('2012-11-04 00:59:59', () => {\n    const s = '2012-11-04 00:59:59';\n    [dayjs, moment].forEach(_ => {\n      const d = _.tz(s, NY);\n      expect(d.format()).toBe('2012-11-04T00:59:59-04:00');\n      expect(d.utcOffset()).toBe(-240);\n      expect(d.valueOf()).toBe(1352005199000);\n    });\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"2012-11-04 00:59:59","suites":["DST, a time that never existed Fall Back"],"updatePoint":{"line":173,"column":25,"index":6755},"line":173,"code":"  it('2012-11-04 00:59:59', () => {\n    const s = '2012-11-04 00:59:59';\n    [dayjs, moment].forEach(_ => {\n      const d = _.tz(s, NY);\n      expect(d.format()).toBe('2012-11-04T00:59:59-04:00');\n      expect(d.utcOffset()).toBe(-240);\n      expect(d.valueOf()).toBe(1352005199000);\n    });\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"2012-11-04 02:00:00","suites":["DST, a time that never existed Fall Back"],"updatePoint":{"line":187,"column":25,"index":7228},"line":187,"code":"  it('2012-11-04 02:00:00', () => {\n    const s = '2012-11-04 02:00:00';\n    [dayjs, moment].forEach(_ => {\n      const d = _.tz(s, NY);\n      expect(d.format()).toBe('2012-11-04T02:00:00-05:00');\n      expect(d.utcOffset()).toBe(-300);\n      expect(d.valueOf()).toBe(1352012400000);\n    });\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"DST valueOf","suites":["DST, a time that never existed Fall Back"],"updatePoint":{"line":197,"column":15,"index":7520},"line":197,"code":"it('DST valueOf', () => {\n  const day1 = '2021-11-17T09:45:00.000Z';\n  const d1 = dayjs.utc(day1).tz(PARIS);\n  const m1 = moment.tz(day1, PARIS);\n  expect(d1.valueOf()).toBe(m1.valueOf());\n  const day2 = '2021-05-17T09:45:00.000Z';\n  const d2 = dayjs.utc(day2).tz(PARIS);\n  const m2 = moment.tz(day2, PARIS);\n  expect(d2.valueOf()).toBe(m2.valueOf());\n});","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"default timezone","suites":["set Default"],"updatePoint":{"line":208,"column":22,"index":7915},"line":208,"code":"  it('default timezone', () => {\n    const dateStr = '2014-06-01 12:00';\n    dayjs.tz.setDefault(NY);\n    const newYork = dayjs.tz(dateStr);\n    expect(newYork.format()).toBe('2014-06-01T12:00:00-04:00');\n    expect(newYork.utcOffset()).toBe(-240);\n    expect(newYork.valueOf()).toBe(1401638400000);\n    expect(dayjs(dateStr).tz().format()).toBe(dayjs(dateStr).tz(NY).format());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"empty timezone means local timezone","suites":["set Default"],"updatePoint":{"line":217,"column":41,"index":8319},"line":217,"code":"  it('empty timezone means local timezone', () => {\n    const LOCAL_TZ = dayjs.tz.guess();\n    const dateStr = '2014-06-01 12:00';\n    dayjs.tz.setDefault();\n    expect(dayjs(dateStr).tz().valueOf()).toBe(dayjs(dateStr).tz(LOCAL_TZ).valueOf());\n    expect(dayjs.tz(dateStr).valueOf()).toBe(dayjs.tz(dateStr, LOCAL_TZ).valueOf());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"change default timezone","suites":["set Default"],"updatePoint":{"line":224,"column":29,"index":8643},"line":224,"code":"  it('change default timezone', () => {\n    dayjs.tz.setDefault(NY);\n    const newYork = dayjs.tz('2014-06-01 12:00');\n    expect(newYork.utcOffset()).toBe(-240);\n    dayjs.tz.setDefault(TOKYO);\n    const tokyo = dayjs.tz('2014-06-01 12:00');\n    expect(tokyo.format()).toBe('2014-06-01T12:00:00+09:00');\n    expect(tokyo.format('Z')).toBe('+09:00');\n    expect(tokyo.valueOf()).toBe(1401591600000);\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"override default timezone in proto.tz","suites":["set Default"],"updatePoint":{"line":234,"column":43,"index":9063},"line":234,"code":"  it('override default timezone in proto.tz', () => {\n    dayjs.tz.setDefault(NY);\n    const tokyo = dayjs.tz('2014-06-01 12:00', TOKYO);\n    expect(tokyo.format()).toBe('2014-06-01T12:00:00+09:00');\n    expect(tokyo.format('Z')).toBe('+09:00');\n    expect(tokyo.valueOf()).toBe(1401591600000);\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"override default timezone in d.tz","suites":["set Default"],"updatePoint":{"line":241,"column":39,"index":9360},"line":241,"code":"  it('override default timezone in d.tz', () => {\n    dayjs.tz.setDefault(NY);\n    const tokyo = dayjs.tz('2014-06-01 12:00', TOKYO);\n    expect(tokyo.format()).toBe('2014-06-01T12:00:00+09:00');\n    expect(tokyo.format('Z')).toBe('+09:00');\n    expect(tokyo.valueOf()).toBe(1401591600000);\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"keepLocalTime","suites":["keepLocalTime"],"updatePoint":{"line":251,"column":19,"index":9739},"line":251,"code":"  it('keepLocalTime', () => {\n    expect(base.tz('Europe/Berlin').format()).toBe('2013-11-18T17:55:00+01:00');\n    expect(base.tz('Europe/Berlin', true).format()).toBe('2013-11-18T11:55:00+01:00');\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"short","suites":["Get offsetName"],"updatePoint":{"line":258,"column":11,"index":10025},"line":258,"code":"  it('short', () => {\n    const d = dtz.offsetName('short');\n    const m = moment.tz('2012-03-11 01:59:59', NY).format('z');\n    expect(d).toBe(m);\n    expect(d).toBe('EST');\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"long","suites":["Get offsetName"],"updatePoint":{"line":264,"column":10,"index":10205},"line":264,"code":"  it('long', () => {\n    const d = dtz.offsetName('long');\n    expect(d).toBe('Eastern Standard Time');\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"normal","suites":["CustomPraseFormat"],"updatePoint":{"line":271,"column":12,"index":10388},"line":271,"code":"  it('normal', () => {\n    expect(dayjs.tz('2020/10/15 12:30', DEN).unix()).toBe(result);\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"custom","suites":["CustomPraseFormat"],"updatePoint":{"line":274,"column":12,"index":10484},"line":274,"code":"  it('custom', () => {\n    expect(dayjs.tz('10/15/2020 12:30', 'MM/DD/YYYY HH:mm', DEN).unix()).toBe(result);\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"corrects for timezone offset in startOf","suites":["startOf and endOf"],"updatePoint":{"line":279,"column":45,"index":10675},"line":279,"code":"  it('corrects for timezone offset in startOf', () => {\n    const originalDay = dayjs.tz('2010-01-01 00:00:00', NY);\n    const startOfDay = originalDay.startOf('day');\n    expect(startOfDay.valueOf()).toEqual(originalDay.valueOf());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"corrects for timezone offset in endOf","suites":["startOf and endOf"],"updatePoint":{"line":284,"column":43,"index":10912},"line":284,"code":"  it('corrects for timezone offset in endOf', () => {\n    const originalDay = dayjs.tz('2009-12-31 23:59:59.999', NY);\n    const endOfDay = originalDay.endOf('day');\n    expect(endOfDay.valueOf()).toEqual(originalDay.valueOf());\n  });","file":"plugin/timezone.test.js","skipped":false,"dir":"test"},{"name":"As Array -> toArray","suites":[],"updatePoint":{"line":12,"column":23,"index":281},"line":12,"code":"it('As Array -> toArray', () => {\n  expect(dayjs().toArray()).toEqual(moment().toArray());\n});","file":"plugin/toArray.test.js","skipped":false,"dir":"test"},{"name":"As Object -> toObject","suites":[],"updatePoint":{"line":12,"column":25,"index":286},"line":12,"code":"it('As Object -> toObject', () => {\n  expect(dayjs().toObject()).toEqual(moment().toObject());\n});","file":"plugin/toObject.test.js","skipped":false,"dir":"test"},{"name":"Invalid argument","suites":["Update locale"],"updatePoint":{"line":27,"column":22,"index":700},"line":27,"code":"  it('Invalid argument', () => {\n    const result = dayjs.updateLocale('InvalidLocaleName', {});\n    expect(result).toEqual(undefined);\n    expect(dayjs().format(formatString)).toEqual(moment().format(formatString));\n  });","file":"plugin/updateLocale.test.js","skipped":false,"dir":"test"},{"name":"Return value","suites":["Update locale"],"updatePoint":{"line":32,"column":18,"index":919},"line":32,"code":"  it('Return value', () => {\n    const result1 = dayjs.updateLocale('en');\n    expect(typeof result1).toEqual('object');\n    const result2 = dayjs.updateLocale('en', {});\n    expect(typeof result2).toEqual('object');\n    const result3 = dayjs.updateLocale('en', newLocale);\n    expect(typeof result3).toEqual('object');\n  });","file":"plugin/updateLocale.test.js","skipped":false,"dir":"test"},{"name":"Update build-in en locale","suites":["Update locale"],"updatePoint":{"line":40,"column":31,"index":1258},"line":40,"code":"  it('Update build-in en locale', () => {\n    moment.updateLocale('en', newLocale);\n    dayjs.updateLocale('en', newLocale);\n    expect(dayjs().format(formatString)).toEqual('testMonth testFormat');\n    expect(dayjs().format(formatString)).toEqual(moment().format(formatString));\n  });","file":"plugin/updateLocale.test.js","skipped":false,"dir":"test"},{"name":"Update imported zh-cn locale","suites":["Update locale"],"updatePoint":{"line":46,"column":34,"index":1547},"line":46,"code":"  it('Update imported zh-cn locale', () => {\n    moment.updateLocale('zh-cn', newLocale);\n    dayjs.updateLocale('zh-cn', newLocale);\n    dayjs.locale('zh-cn');\n    moment.locale('zh-cn');\n    expect(dayjs().format(formatString)).toEqual('testMonth testFormat');\n    expect(dayjs().format(formatString)).toEqual(moment().format(formatString));\n  });","file":"plugin/updateLocale.test.js","skipped":false,"dir":"test"},{"name":"Update invalid date string","suites":["Update locale"],"updatePoint":{"line":54,"column":32,"index":1895},"line":54,"code":"  it('Update invalid date string', () => {\n    const locale = 'en';\n    const localeSetting = {\n      invalidDate: 'bad date'\n    };\n    dayjs.updateLocale(locale, localeSetting);\n    moment.updateLocale(locale, localeSetting);\n    dayjs.locale(locale);\n    moment.locale(locale);\n    expect(dayjs('').format()).toBe(moment('').format());\n    expect(dayjs('otherString').format()).toBe(moment('otherString').format());\n  });","file":"plugin/updateLocale.test.js","skipped":false,"dir":"test"},{"name":"Set utcOffset -> Get utcOffset","suites":[],"updatePoint":{"line":12,"column":34,"index":280},"line":12,"code":"it('Set utcOffset -> Get utcOffset', () => {\n  expect(dayjs().utcOffset(540).utcOffset()).toBe(moment().utcOffset(540).utcOffset());\n  expect(dayjs().utcOffset(540).format()).toBe(moment().utcOffset(540).format());\n  expect(dayjs().utcOffset(60).format()).toBe(moment().utcOffset(60).format());\n  expect(dayjs().utcOffset(8).format()).toBe(moment().utcOffset(8).format());\n  expect(dayjs().utcOffset(-540).utcOffset()).toBe(moment().utcOffset(-540).utcOffset());\n  expect(dayjs().utcOffset(-540).format()).toBe(moment().utcOffset(-540).format());\n  expect(dayjs().utcOffset(-60).format()).toBe(moment().utcOffset(-60).format());\n  expect(dayjs().utcOffset(-8).format()).toBe(moment().utcOffset(-8).format());\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"valueOf, toDate, toString, toISOString should be the same as original","suites":[],"updatePoint":{"line":22,"column":73,"index":1032},"line":22,"code":"it('valueOf, toDate, toString, toISOString should be the same as original', () => {\n  const d = dayjs();\n  const du = dayjs().utcOffset(9);\n  const mu = moment().utcOffset(9);\n  expect(d.valueOf()).toBe(du.valueOf());\n  expect(du.valueOf()).toBe(mu.valueOf());\n  expect(d.toDate()).toEqual(du.toDate());\n  expect(du.toDate()).toEqual(mu.toDate());\n  expect(du.toISOString()).toEqual(mu.toISOString());\n  expect(d.toString()).toEqual(d.toString());\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"clone","suites":[],"updatePoint":{"line":33,"column":9,"index":1420},"line":33,"code":"it('clone', () => {\n  const du = dayjs().utcOffset(9);\n  const duClone = du.clone();\n  expect(du.valueOf()).toBe(duClone.valueOf());\n  expect(du.format()).toBe(duClone.format());\n  expect(du.utcOffset()).toBe(duClone.utcOffset());\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"immutable","suites":[],"updatePoint":{"line":40,"column":13,"index":1659},"line":40,"code":"it('immutable', () => {\n  const d = dayjs();\n  const du = d.utcOffset(d.utcOffset() + 1);\n  expect(d.utcOffset()).not.toBe(du.utcOffset());\n  expect(d.format()).not.toBe(du.format());\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"utcOffset(0) enable utc mode","suites":[],"updatePoint":{"line":46,"column":32,"index":1866},"line":46,"code":"it('utcOffset(0) enable utc mode', () => {\n  expect(dayjs().utcOffset(0).format()).toBe(moment().utcOffset(0).format());\n  expect(dayjs().utcOffset(0).isUTC()).toBeTruthy();\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"utcOffset keepLocalTime","suites":[],"updatePoint":{"line":50,"column":27,"index":2039},"line":50,"code":"it('utcOffset keepLocalTime', () => {\n  const d = '2000-01-01T06:00:00Z';\n  expect(dayjs.utc(d).utcOffset(5, true).format()).toBe(moment.utc(d).utcOffset(5, true).format());\n  expect(dayjs.utc(d).utcOffset(0, true).format()).toBe(moment.utc(d).utcOffset(0, true).format());\n  expect(dayjs.utc(d).utcOffset(-5, true).format()).toBe(moment.utc(d).utcOffset(-5, true).format());\n  const d2 = '2016-01-01 00:00:00';\n  expect(dayjs(d2).utcOffset(0, true).format()).toBe(moment(d2).utcOffset(0, true).format());\n  expect(dayjs(d2).utcOffset(-5, true).format()).toBe(moment(d2).utcOffset(-5, true).format());\n  expect(dayjs(d2).utcOffset(5, true).format()).toBe(moment(d2).utcOffset(5, true).format());\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"UTC mode","suites":[],"updatePoint":{"line":60,"column":14,"index":2726},"line":60,"code":"test('UTC mode', () => {\n  const d = dayjs.utc('2000-01-01T06:00:00Z');\n  expect(d.isUTC()).toBeTruthy();\n  expect(d.utcOffset(0).isUTC()).toBeTruthy();\n  expect(d.utcOffset(1).isUTC()).toBeFalsy();\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"change hours when changing the utc offset in UTC mode","suites":[],"updatePoint":{"line":66,"column":59,"index":2974},"line":66,"code":"test('change hours when changing the utc offset in UTC mode', () => {\n  const d = dayjs.utc('2000-01-01T06:31:00Z');\n  expect(d.hour()).toBe(6);\n  expect(d.utcOffset(0).hour()).toBe(6);\n  expect(d.utcOffset(-60).hour()).toBe(5);\n  expect(d.utcOffset(60).hour()).toBe(7);\n  expect(d.utcOffset(-30).format('HH:mm')).toBe('06:01');\n  expect(d.utcOffset(30).format('HH:mm')).toBe('07:01');\n  expect(d.utcOffset(-1380).format('HH:mm')).toBe('07:31');\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"correctly set and add hours in offset mode","suites":[],"updatePoint":{"line":76,"column":48,"index":3413},"line":76,"code":"test('correctly set and add hours in offset mode', () => {\n  const d10 = dayjs('2000-01-30T06:31:00+10:00').utcOffset(10);\n  const dm8 = dayjs('2000-01-30T06:31:00-08:00').utcOffset(-8);\n  expect(d10.hour(5).hour()).toBe(5);\n  expect(d10.hour(5).add(1, 'hour').hour()).toBe(6);\n  expect(d10.hour(5).add(-10, 'hour').hour()).toBe(19);\n  expect(dm8.hour(5).hour()).toBe(5);\n  expect(dm8.hour(5).add(1, 'hour').hour()).toBe(6);\n  expect(dm8.hour(5).add(-10, 'hour').hour()).toBe(19);\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"keep hours when adding month in offset mode","suites":[],"updatePoint":{"line":86,"column":49,"index":3899},"line":86,"code":"test('keep hours when adding month in offset mode', () => {\n  const d10 = dayjs('2000-01-30T06:31:00+10:00').utcOffset(10);\n  const dm8 = dayjs('2000-01-30T06:31:00-08:00').utcOffset(-8);\n  expect(d10.add(1, 'month').hour()).toBe(6);\n  expect(dm8.add(1, 'month').hour()).toBe(6);\n  expect(d10.add(-2, 'month').hour()).toBe(6);\n  expect(dm8.add(-2, 'month').hour()).toBe(6);\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"utc costrustor","suites":[],"updatePoint":{"line":94,"column":20,"index":4248},"line":94,"code":"test('utc costrustor', () => {\n  const d = new Date(2019, 8, 11, 0, 0, 0).getTime();\n  expect(moment(d).utc().utcOffset(480).valueOf()).toBe(dayjs(d).utc().utcOffset(480).valueOf());\n  expect(moment(d).utc().local().utcOffset(480).valueOf()).toBe(dayjs(d).utc().local().utcOffset(480).valueOf());\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"utc startOf","suites":[],"updatePoint":{"line":99,"column":17,"index":4546},"line":99,"code":"test('utc startOf', () => {\n  const d = new Date(2019, 8, 11, 0, 0, 0, 0).getTime();\n  expect(moment(d).utc().utcOffset(480).endOf('day').valueOf()).toBe(dayjs(d).utc().utcOffset(480).endOf('day').valueOf());\n  expect(moment(d).utc().utcOffset(480).endOf('day').valueOf()).toBe(dayjs(d).utc().utcOffset(480).endOf('day').valueOf());\n  const d2 = '2017-07-20T11:00:00+00:00';\n  const d2d = dayjs(d2).utcOffset(-12).startOf('day').valueOf();\n  const d2m = moment(d2).utcOffset(-12).startOf('day').valueOf();\n  expect(d2d).toBe(d2m);\n  expect(d2d).toBe(1500465600000);\n});","file":"plugin/utc-utcOffset.test.js","skipped":false,"dir":"test"},{"name":"UTC Year","suites":["UTC Get"],"updatePoint":{"line":14,"column":14,"index":356},"line":14,"code":"  it('UTC Year', () => {\n    expect(dayjs().utc().year()).toBe(moment().utc().year());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC Month","suites":["UTC Get"],"updatePoint":{"line":17,"column":15,"index":450},"line":17,"code":"  it('UTC Month', () => {\n    expect(dayjs().utc().month()).toBe(moment().utc().month());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC Day of Week","suites":["UTC Get"],"updatePoint":{"line":20,"column":21,"index":552},"line":20,"code":"  it('UTC Day of Week', () => {\n    expect(dayjs().utc().day()).toBe(moment().utc().day());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC Date","suites":["UTC Get"],"updatePoint":{"line":23,"column":14,"index":643},"line":23,"code":"  it('UTC Date', () => {\n    expect(dayjs().utc().date()).toBe(moment().utc().date());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC Hour","suites":["UTC Get"],"updatePoint":{"line":26,"column":14,"index":736},"line":26,"code":"  it('UTC Hour', () => {\n    expect(dayjs().utc().hour()).toBe(moment().utc().hour());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC Minute","suites":["UTC Get"],"updatePoint":{"line":29,"column":16,"index":831},"line":29,"code":"  it('UTC Minute', () => {\n    expect(dayjs().utc().minute()).toBe(moment().utc().minute());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC Second","suites":["UTC Get"],"updatePoint":{"line":32,"column":16,"index":930},"line":32,"code":"  it('UTC Second', () => {\n    expect(dayjs().utc().second()).toBe(moment().utc().second());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC Millisecond","suites":["UTC Get"],"updatePoint":{"line":35,"column":21,"index":1034},"line":35,"code":"  it('UTC Millisecond', () => {\n    expect(dayjs().utc().millisecond()).toBe(moment().utc().millisecond());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Parse Now","suites":["Parse UTC "],"updatePoint":{"line":40,"column":15,"index":1177},"line":40,"code":"  it('Parse Now', () => {\n    expect(dayjs.utc().format()).toBe(moment.utc().format());\n    expect(dayjs().utc().format()).toBe(moment().utc().format());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Parse date string without timezone","suites":["Parse UTC "],"updatePoint":{"line":44,"column":40,"index":1362},"line":44,"code":"  it('Parse date string without timezone', () => {\n    const d = '2018-09-06';\n    expect(dayjs.utc(d).format()).toEqual(moment.utc(d).format());\n    expect(dayjs.utc(d).format()).toEqual('2018-09-06T00:00:00Z');\n    expect(dayjs(d).utc().format()).toEqual(moment(d).utc().format());\n    const d2 = '2018-09';\n    expect(dayjs.utc(d2).format()).toEqual(moment.utc(d2).format());\n    expect(dayjs.utc(d2).format()).toEqual('2018-09-01T00:00:00Z');\n    expect(dayjs(d2).utc().format()).toEqual(moment(d2).utc().format());\n    const d3 = '2018';\n    expect(dayjs.utc(d3).format()).toEqual(moment.utc(d3).format());\n    expect(dayjs.utc(d3).format()).toEqual('2018-01-01T00:00:00Z');\n    expect(dayjs(d3).utc().format()).toEqual(moment(d3).utc().format());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"creating with utc with timezone","suites":["Parse UTC "],"updatePoint":{"line":58,"column":37,"index":2118},"line":58,"code":"  it('creating with utc with timezone', () => {\n    const d = '2011-02-02T03:04:05+00:00';\n    expect(dayjs.utc(d).format()).toEqual(moment.utc(d).format());\n    const d2 = '2012-01-02T08:20:00+09:00';\n    expect(dayjs.utc(d2).format()).toEqual(moment.utc(d2).format());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Parse date string without timezone","suites":["Parse UTC "],"updatePoint":{"line":64,"column":40,"index":2398},"line":64,"code":"  it('Parse date string without timezone', () => {\n    const d = '2017-04-22 19:50:16';\n    expect(dayjs.utc(d).format()).toEqual('2017-04-22T19:50:16Z');\n    expect(dayjs.utc(d).format()).toEqual(moment.utc(d).format());\n    expect(dayjs(d).utc().format()).toBe(moment(d).utc().format());\n    const d2 = '2012-01-02T08:20:00';\n    expect(dayjs.utc(d2).format()).toEqual(moment.utc(d2).format());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Parse date string set utc in config","suites":["Parse UTC "],"updatePoint":{"line":72,"column":41,"index":2802},"line":72,"code":"  it('Parse date string set utc in config', () => {\n    const d = '2018-09-06T19:34:28Z';\n    expect(dayjs(d, {\n      utc: true\n    }).format()).toEqual('2018-09-06T19:34:28Z');\n    expect(dayjs(d, {\n      utc: true\n    }).format()).toEqual(moment(d).utc().format());\n    expect(dayjs(d).utc().format()).toEqual('2018-09-06T19:34:28Z');\n    expect(dayjs(d).utc().format()).toEqual(moment(d).utc().format());\n    expect(dayjs.utc(d).format()).toEqual('2018-09-06T19:34:28Z');\n    expect(dayjs.utc(d).format()).toEqual(moment.utc(d).format());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"parses unlimited millisecond in utc","suites":["Parse UTC "],"updatePoint":{"line":85,"column":41,"index":3350},"line":85,"code":"  it('parses unlimited millisecond in utc', () => {\n    const date = '2019-03-25T06:41:00.999999999';\n    const ds = dayjs.utc(date);\n    const ms = moment.utc(date);\n    expect(ds.valueOf()).toEqual(ms.valueOf());\n    expect(ds.millisecond()).toEqual(ms.millisecond());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Clone retains the UTC mode","suites":["Parse UTC "],"updatePoint":{"line":93,"column":30,"index":3620},"line":93,"code":"it('Clone retains the UTC mode', () => {\n  const instance = dayjs('2018-09-06').utc();\n  const another = instance.clone();\n  expect(another.$u).toBeTruthy();\n});","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC mode format tokens","suites":["Parse UTC "],"updatePoint":{"line":98,"column":26,"index":3778},"line":98,"code":"it('UTC mode format tokens', () => {\n  const d = '2018-09-06T19:34:28.657Z';\n  const instance = dayjs(d).utc();\n  const format = 'HH-hh-mm-ss-SSS-Z-ZZ';\n  expect(instance.format(format)).toBe('19-07-34-28-657-+00:00-+0000');\n  expect(instance.format(format)).toBe(moment.utc(d).format(format));\n});","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Returns a new instance","suites":["local"],"updatePoint":{"line":106,"column":28,"index":4105},"line":106,"code":"  it('Returns a new instance', () => {\n    const instance = dayjs.utc('2018-09-06T19:34:28.657Z');\n    const local = instance.local();\n    expect(local).not.toBe(instance);\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"UTC to local","suites":["local"],"updatePoint":{"line":111,"column":18,"index":4274},"line":111,"code":"  it('UTC to local', () => {\n    const d = '2018-09-06';\n    expect(dayjs.utc(d).local().format()).toEqual(moment.utc(d).local().format());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"StartOf EndOf Year ... in UTC mode","suites":["local"],"updatePoint":{"line":116,"column":38,"index":4444},"line":116,"code":"it('StartOf EndOf Year ... in UTC mode', () => {\n  const testArr = ['year', 'month', 'day', 'date', 'week', 'hour', 'minute', 'second'];\n  testArr.forEach(d => {\n    expect(dayjs().utc().startOf(d).format()).toBe(moment().utc().startOf(d).format());\n    expect(dayjs().utc().endOf(d).format()).toBe(moment().utc().endOf(d).format());\n  });\n});","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Day","suites":["UTC Set"],"updatePoint":{"line":124,"column":17,"index":4795},"line":124,"code":"  it('Set UTC Day', () => {\n    expect(dayjs().utc().set('date', 30).valueOf()).toBe(moment().utc().set('date', 30).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Day of Week","suites":["UTC Set"],"updatePoint":{"line":127,"column":25,"index":4937},"line":127,"code":"  it('Set UTC Day of Week', () => {\n    expect(dayjs().utc().set('day', 0).valueOf()).toBe(moment().utc().set('day', 0).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Month","suites":["UTC Set"],"updatePoint":{"line":130,"column":19,"index":5069},"line":130,"code":"  it('Set UTC Month', () => {\n    expect(dayjs().utc().set('month', 11).valueOf()).toBe(moment().utc().set('month', 11).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Year","suites":["UTC Set"],"updatePoint":{"line":133,"column":18,"index":5206},"line":133,"code":"  it('Set UTC Year', () => {\n    expect(dayjs().utc().set('year', 2008).valueOf()).toBe(moment().utc().set('year', 2008).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Hour","suites":["UTC Set"],"updatePoint":{"line":136,"column":18,"index":5345},"line":136,"code":"  it('Set UTC Hour', () => {\n    expect(dayjs().utc().set('hour', 6).valueOf()).toBe(moment().utc().set('hour', 6).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Minute","suites":["UTC Set"],"updatePoint":{"line":139,"column":20,"index":5480},"line":139,"code":"  it('Set UTC Minute', () => {\n    expect(dayjs().utc().set('minute', 59).valueOf()).toBe(moment().utc().set('minute', 59).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Second","suites":["UTC Set"],"updatePoint":{"line":142,"column":20,"index":5621},"line":142,"code":"  it('Set UTC Second', () => {\n    expect(dayjs().utc().set('second', 59).valueOf()).toBe(moment().utc().set('second', 59).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Set UTC Millisecond","suites":["UTC Set"],"updatePoint":{"line":145,"column":25,"index":5767},"line":145,"code":"  it('Set UTC Millisecond', () => {\n    expect(dayjs().utc().set('millisecond', 999).valueOf()).toBe(moment().utc().set('millisecond', 999).valueOf());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"isUTC","suites":["UTC Set"],"updatePoint":{"line":149,"column":9,"index":5913},"line":149,"code":"it('isUTC', () => {\n  expect(dayjs().isUTC()).toBe(false);\n  expect(dayjs().utc().isUTC()).toBe(true);\n  expect(dayjs.utc().isUTC()).toBe(true);\n});","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"utc","suites":["UTC and local"],"updatePoint":{"line":157,"column":9,"index":6189},"line":157,"code":"  it('utc', () => {\n    expect(utcDay.date()).toBe(2);\n    expect(utcDay.day()).toBe(3);\n    expect(utcDay.hour()).toBe(3);\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"local","suites":["UTC and local"],"updatePoint":{"line":163,"column":11,"index":6361},"line":163,"code":"  it('local', () => {\n    if (localAnainDay.utcOffset() < -180) {\n      expect(localAnainDay.date()).toBe(1);\n      expect(localAnainDay.day()).toBe(2);\n    } else {\n      expect(localAnainDay.date()).toBe(2);\n      expect(localAnainDay.day()).toBe(3);\n    }\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"utcOffset","suites":["UTC and local"],"updatePoint":{"line":174,"column":15,"index":6734},"line":174,"code":"  it('utcOffset', () => {\n    expect(localAnainDay.hour()).toBe(expected);\n    expect(dayjs().utc().utcOffset()).toBe(0);\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Custom Parse Format","suites":["UTC with customParseFormat"],"updatePoint":{"line":180,"column":25,"index":6923},"line":180,"code":"  it('Custom Parse Format', () => {\n    dayjs.extend(customParseFormat);\n    const instant = dayjs.utc('2011-02-02 03:04:05', 'YYYY-MM-DD HH:mm:ss');\n    const momentInstant = moment.utc('2011-02-02 03:04:05', 'YYYY-MM-DD HH:mm:ss');\n    expect(instant.date()).toBe(2);\n    expect(instant.hour()).toBe(3);\n    expect(instant.format()).toBe('2011-02-02T03:04:05Z');\n    expect(instant.format()).toBe(momentInstant.format());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utcOffset","suites":["UTC Offset"],"updatePoint":{"line":191,"column":19,"index":7382},"line":191,"code":"  it('get utcOffset', () => {\n    expect(dayjs().utcOffset()).toBe(moment().utcOffset());\n    expect(dayjs().utc().utcOffset()).toBe(moment().utc().utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utc offset with a number value","suites":["UTC Offset"],"updatePoint":{"line":195,"column":40,"index":7571},"line":195,"code":"  it('get utc offset with a number value', () => {\n    const time = '2021-02-28 19:40:10';\n    const hoursOffset = -8;\n    const daysJS = dayjs(time).utc().utcOffset(hoursOffset * 60, true);\n    const momentJS = moment(time).utc(true).utcOffset(hoursOffset, true);\n    expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n    expect(daysJS.utcOffset()).toEqual(hoursOffset * 60);\n    expect(daysJS.utcOffset()).toEqual(momentJS.utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utc offset with a negative valid string value, format: HH:mm","suites":["UTC Offset"],"updatePoint":{"line":204,"column":70,"index":8058},"line":204,"code":"  it('get utc offset with a negative valid string value, format: HH:mm', () => {\n    const time = '2021-02-28 19:40:10';\n    const hoursOffset = -8;\n    const daysJS = dayjs(time).utc().utcOffset(`-0${Math.abs(hoursOffset)}:00`, true);\n    const momentJS = moment(time).utc(true).utcOffset(`-0${Math.abs(hoursOffset)}:00`, true);\n    expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n    expect(daysJS.utcOffset()).toEqual(hoursOffset * 60);\n    expect(daysJS.utcOffset()).toEqual(momentJS.utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utc offset with a positive valid string value, format: HH:mm","suites":["UTC Offset"],"updatePoint":{"line":213,"column":70,"index":8580},"line":213,"code":"  it('get utc offset with a positive valid string value, format: HH:mm', () => {\n    const time = '2021-02-28 19:40:10';\n    const hoursOffset = 8;\n    const daysJS = dayjs(time).utc().utcOffset(`+0${hoursOffset}:00`, true);\n    const momentJS = moment(time).utc(true).utcOffset(`+0${hoursOffset}:00`, true);\n    expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n    expect(daysJS.utcOffset()).toEqual(hoursOffset * 60);\n    expect(daysJS.utcOffset()).toEqual(momentJS.utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utc offset with a negative valid string value, format: HHmm","suites":["UTC Offset"],"updatePoint":{"line":222,"column":69,"index":9080},"line":222,"code":"  it('get utc offset with a negative valid string value, format: HHmm', () => {\n    const time = '2021-02-28 19:40:10';\n    const hoursOffset = -8;\n    const daysJS = dayjs(time).utc().utcOffset(`-0${Math.abs(hoursOffset)}00`, true);\n    const momentJS = moment(time).utc(true).utcOffset(`-0${Math.abs(hoursOffset)}00`, true);\n    expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n    expect(daysJS.utcOffset()).toEqual(hoursOffset * 60);\n    expect(daysJS.utcOffset()).toEqual(momentJS.utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utc offset with a positive valid string value, format: HHmm","suites":["UTC Offset"],"updatePoint":{"line":231,"column":69,"index":9599},"line":231,"code":"  it('get utc offset with a positive valid string value, format: HHmm', () => {\n    const time = '2021-02-28 19:40:10';\n    const hoursOffset = 8;\n    const daysJS = dayjs(time).utc().utcOffset(`+0${hoursOffset}00`, true);\n    const momentJS = moment(time).utc(true).utcOffset(`+0${hoursOffset}00`, true);\n    expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n    expect(daysJS.utcOffset()).toEqual(hoursOffset * 60);\n    expect(daysJS.utcOffset()).toEqual(momentJS.utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utc offset with an invalid string value, value: random","suites":["UTC Offset"],"updatePoint":{"line":240,"column":64,"index":10092},"line":240,"code":"  it('get utc offset with an invalid string value, value: random', () => {\n    const time = '2021-02-28 19:40:10';\n    const daysJS = dayjs(time, {\n      utc: true\n    }).utc(true).utcOffset('random');\n    const momentJS = moment(time).utc(true).utcOffset('random');\n    expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n    expect(daysJS.utcOffset()).toEqual(0);\n    expect(daysJS.utcOffset()).toEqual(momentJS.utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"get utc offset with an invalid string value, value: 0","suites":["UTC Offset"],"updatePoint":{"line":250,"column":59,"index":10531},"line":250,"code":"  it('get utc offset with an invalid string value, value: 0', () => {\n    const time = '2021-02-28 19:40:10';\n    const daysJS = dayjs(time, {\n      utc: true\n    }).utc(true).utcOffset('+0000');\n    const momentJS = moment(time).utc(true).utcOffset('+0000');\n    expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n    expect(daysJS.utcOffset()).toEqual(0);\n    expect(daysJS.utcOffset()).toEqual(momentJS.utcOffset());\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"utc.diff(utc)","suites":["Diff"],"updatePoint":{"line":264,"column":19,"index":11011},"line":264,"code":"  it('utc.diff(utc)', () => {\n    [dayjs, moment].forEach(_ => {\n      expect(_.utc(d1).diff(_.utc(d2), 'days')).toBe(1);\n      expect(_.utc(d1).diff(_.utc(d2), 'm')).toBe(1440);\n    });\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"default diff","suites":["Diff"],"updatePoint":{"line":270,"column":18,"index":11203},"line":270,"code":"  it('default diff', () => {\n    expect(dayjs().diff()).toBeDefined();\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"local.diff(utc)","suites":["Diff"],"updatePoint":{"line":273,"column":21,"index":11283},"line":273,"code":"  it('local.diff(utc)', () => {\n    expect(dayjs(d1).diff(dayjs.utc(d2), 'days')).toBe(moment(d1).diff(moment.utc(d2), 'days'));\n    expect(dayjs(d1).diff(dayjs.utc(d2), 'm')).toBe(moment(d1).diff(moment.utc(d2), 'm'));\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"utc.diff(local)","suites":["Diff"],"updatePoint":{"line":277,"column":21,"index":11509},"line":277,"code":"  it('utc.diff(local)', () => {\n    expect(dayjs.utc(d1).diff(d2, 'days')).toBe(moment.utc(d1).diff(d2, 'days'));\n    expect(dayjs.utc(d1).diff(d2, 'm')).toBe(moment.utc(d1).diff(d2, 'm'));\n  });","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"utc keepLocalTime","suites":["Diff"],"updatePoint":{"line":282,"column":21,"index":11709},"line":282,"code":"it('utc keepLocalTime', () => {\n  const t = '2016-05-03 22:15:01';\n  const d = dayjs(t).utc(true);\n  const m = moment(t).utc(true);\n  const fd = d.format();\n  const dd = d.toDate();\n  const vd = d.valueOf();\n  const fm = m.format();\n  const dm = m.toDate();\n  const vm = m.valueOf();\n  expect(fd).toEqual(fm);\n  expect(fd).toEqual('2016-05-03T22:15:01Z');\n  expect(dd).toEqual(dm);\n  expect(vd).toEqual(vm);\n});","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"utc diff undefined edge case","suites":["Diff"],"updatePoint":{"line":297,"column":32,"index":12132},"line":297,"code":"it('utc diff undefined edge case', () => {\n  expect(dayjs().diff(undefined, 'seconds')).toBeDefined();\n});","file":"plugin/utc.test.js","skipped":false,"dir":"test"},{"name":"Sunday is the first day of the week","suites":[],"updatePoint":{"line":16,"column":39,"index":405},"line":16,"code":"it('Sunday is the first day of the week', () => {\n  expect(dayjs().weekday()).toBe(moment().weekday());\n  expect(dayjs().weekday(0).date()).toBe(moment().weekday(0).date());\n  expect(dayjs().weekday(-7).format()).toBe(moment().weekday(-7).format());\n  expect(dayjs().weekday(7).format()).toBe(moment().weekday(7).format());\n});","file":"plugin/weekday.test.js","skipped":false,"dir":"test"},{"name":"Monday is the first day of the week","suites":[],"updatePoint":{"line":22,"column":39,"index":733},"line":22,"code":"it('Monday is the first day of the week', () => {\n  moment.locale('zh-cn');\n  dayjs.locale('zh-cn');\n  expect(dayjs().weekday()).toBe(moment().weekday());\n  expect(dayjs().weekday(0).date()).toBe(moment().weekday(0).date());\n  expect(dayjs().weekday(-7).format()).toBe(moment().weekday(-7).format());\n  expect(dayjs().weekday(7).format()).toBe(moment().weekday(7).format());\n  const d1 = '2020-01-05';\n  expect(dayjs(d1).weekday()).toBe(moment(d1).weekday());\n  const d2 = '2020-01-07';\n  expect(dayjs(d2).weekday()).toBe(moment(d2).weekday());\n});","file":"plugin/weekday.test.js","skipped":false,"dir":"test"},{"name":"Saturday is the first day of the week","suites":[],"updatePoint":{"line":34,"column":41,"index":1284},"line":34,"code":"it('Saturday is the first day of the week', () => {\n  moment.locale('ar');\n  dayjs.locale('ar');\n  expect(dayjs().weekday()).toBe(moment().weekday());\n  expect(dayjs().weekday(0).date()).toBe(moment().weekday(0).date());\n  expect(dayjs().weekday(-7).valueOf()).toBe(moment().weekday(-7).valueOf());\n  expect(dayjs().weekday(7).valueOf()).toBe(moment().weekday(7).valueOf());\n});","file":"plugin/weekday.test.js","skipped":false,"dir":"test"},{"name":"Week of year","suites":[],"updatePoint":{"line":15,"column":16,"index":408},"line":15,"code":"it('Week of year', () => {\n  dayjs.locale('en');\n  const day = '2018-12-31T10:59:09+08:00';\n  const week = 27;\n  expect(dayjs(day).week()).toBe(moment(day).week());\n  expect(dayjs().week()).toBe(moment().week());\n  expect(dayjs().week(week).week()).toBe(moment().week(week).week());\n  expect(dayjs().weeks(week).week()).toBe(moment().weeks(week).week());\n  expect(dayjs().weeks(-week).week()).toBe(moment().weeks(-week).week());\n  expect(dayjs().weeks(55).week()).toBe(moment().weeks(55).week());\n  expect(dayjs().weeks()).toBe(moment().weeks());\n});","file":"plugin/weekOfYear.test.js","skipped":false,"dir":"test"},{"name":"Week of year with locale","suites":[],"updatePoint":{"line":27,"column":28,"index":971},"line":27,"code":"it('Week of year with locale', () => {\n  dayjs.locale('en-gb');\n  moment.locale('en-gb');\n  const day = '2019-07-28';\n  expect(dayjs(day).week()).toBe(moment(day).week());\n});","file":"plugin/weekOfYear.test.js","skipped":false,"dir":"test"},{"name":"Edges ","suites":["Week of year with locale edges"],"updatePoint":{"line":36,"column":18,"index":1321},"line":36,"code":"    it(`Edges ${t}`, () => {\n      expect(dayjs(t).week()).toBe(moment(t).week());\n    });","file":"plugin/weekOfYear.test.js","skipped":false,"dir":"test"},{"name":"Format w ww wo","suites":["Week of year with locale edges"],"updatePoint":{"line":41,"column":18,"index":1422},"line":41,"code":"it('Format w ww wo', () => {\n  const day = '2019-07-28';\n  const D = dayjs(day);\n  const M = moment(day);\n  expect(D.format('w ww wo')).toBe(M.format('w ww wo'));\n});","file":"plugin/weekOfYear.test.js","skipped":false,"dir":"test"},{"name":"Week Year","suites":[],"updatePoint":{"line":15,"column":13,"index":387},"line":15,"code":"it('Week Year', () => {\n  const daySet = [['2018-12-01', 2018], ['2018-12-30', 2019], ['2018-12-31', 2019], ['2019-01-01', 2019]];\n  daySet.forEach(d => {\n    const [day, result] = d;\n    const dResult = dayjs(day).weekYear();\n    expect(dResult).toBe(result);\n    expect(dResult).toBe(moment(day).weekYear());\n  });\n});","file":"plugin/weekYear.test.js","skipped":false,"dir":"test"},{"name":"yearStart: 4","suites":[],"updatePoint":{"line":24,"column":16,"index":711},"line":24,"code":"it('yearStart: 4', () => {\n  const daySet = [['2020-12-31', 2020], ['2021-01-01', 2020], ['2021-01-02', 2020], ['2021-01-03', 2020], ['2021-01-04', 2021], ['2021-01-05', 2021]];\n  daySet.forEach(d => {\n    const [day, result] = d;\n    const dResult = dayjs(day).locale('en-gb').weekYear();\n    expect(dResult).toBe(result);\n    expect(dResult).toBe(moment(day).locale('en-gb').weekYear());\n  });\n});","file":"plugin/weekYear.test.js","skipped":false,"dir":"test"},{"name":"Compare to dayjs object","suites":["Is Before Is After Is Same"],"updatePoint":{"line":10,"column":29,"index":231},"line":10,"code":"  it('Compare to dayjs object', () => {\n    const dayA = dayjs();\n    const dayB = dayA.clone().add(1, 'day');\n    const dayC = dayA.clone().subtract(1, 'day');\n    expect(dayC.isBefore(dayA)).toBe(true);\n    expect(dayA.isSame(dayjs())).toBe(true);\n    expect(dayB.isAfter(dayA)).toBe(true);\n    expect(dayA.isSame()).toBe(true);\n    expect(dayB.isAfter()).toBe(true);\n    expect(dayC.isBefore()).toBe(true);\n  });","file":"query.test.js","skipped":false,"dir":"test"},{"name":"No value","suites":["Is Before Is After Is Same"],"updatePoint":{"line":21,"column":14,"index":632},"line":21,"code":"  it('No value', () => {\n    const dayA = dayjs();\n    const dayB = dayA.clone().add(1, 'day');\n    const dayC = dayA.clone().subtract(1, 'day');\n    expect(dayA.isSame()).toBe(true);\n    expect(dayB.isAfter()).toBe(true);\n    expect(dayC.isBefore()).toBe(true);\n  });","file":"query.test.js","skipped":false,"dir":"test"},{"name":"With string","suites":["Is Before Is After Is Same"],"updatePoint":{"line":29,"column":17,"index":904},"line":29,"code":"  it('With string', () => {\n    const dayD = dayjs();\n    expect(dayD.isSame('20180101')).toBe(false);\n    expect(dayD.isAfter('20180101')).toBe(true);\n    expect(dayD.isBefore('20180101')).toBe(false);\n  });","file":"query.test.js","skipped":false,"dir":"test"},{"name":"Add Time days (DST)","suites":[],"updatePoint":{"line":14,"column":23,"index":334},"line":14,"code":"it('Add Time days (DST)', () => {\n  // change timezone before running test\n  // New Zealand (-720)\n  expect(dayjs('2018-04-01').add(1, 'd').format()).toBe(moment('2018-04-01').add(1, 'd').format());\n  expect(dayjs('2018-03-28').add(1, 'w').format()).toBe(moment('2018-03-28').add(1, 'w').format());\n  // London (-60)\n  expect(dayjs('2018-10-28').add(1, 'd').format()).toBe(moment('2018-10-28').add(1, 'd').format());\n  expect(dayjs('2018-10-26').add(1, 'w').format()).toBe(moment('2018-10-26').add(1, 'w').format());\n});","file":"timezone.test.js","skipped":false,"dir":"test"},{"name":"Utc Offset","suites":[],"updatePoint":{"line":23,"column":14,"index":846},"line":23,"code":"it('Utc Offset', () => {\n  expect(dayjs().utcOffset()).toBe(moment().utcOffset());\n});","file":"timezone.test.js","skipped":false,"dir":"test"},{"name":"Diff (DST)","suites":[],"updatePoint":{"line":26,"column":14,"index":933},"line":26,"code":"it('Diff (DST)', () => {\n  const day = '2018-10-28';\n  const dayjsA = dayjs(day);\n  const dayjsB = dayjs(day).add(-1000, 'days');\n  const momentA = moment(day);\n  const momentB = moment(day).add(-1000, 'days');\n  const units = ['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'quarters', 'years'];\n  units.forEach(unit => {\n    expect(dayjsA.diff(dayjsB, unit)).toBe(momentA.diff(momentB, unit));\n    expect(dayjsA.diff(dayjsB, unit, true)).toBe(momentA.diff(momentB, unit, true));\n  });\n});","file":"timezone.test.js","skipped":false,"dir":"test"},{"name":"UTC add day in DST","suites":[],"updatePoint":{"line":38,"column":22,"index":1443},"line":38,"code":"it('UTC add day in DST', () => {\n  const testDate = '2019-03-10';\n  const dayTest = dayjs(testDate).utc().startOf('day');\n  const momentTest = moment(testDate).utc().startOf('day');\n  expect(dayTest.add(1, 'day').format()).toBe(momentTest.clone().add(1, 'day').format());\n  expect(dayTest.add(2, 'day').format()).toBe(momentTest.clone().add(2, 'day').format());\n});","file":"timezone.test.js","skipped":false,"dir":"test"},{"name":"UTC and utcOffset","suites":[],"updatePoint":{"line":45,"column":21,"index":1808},"line":45,"code":"it('UTC and utcOffset', () => {\n  const test1 = 1331449199000; // 2012/3/11 06:59:59 GMT+0000\n  expect(dayjs(test1).utcOffset(-300).format()).toBe(moment(test1).utcOffset(-300).format());\n  const test2 = '2000-01-01T06:31:00Z';\n  expect(dayjs.utc(test2).utcOffset(-60).format()).toBe(moment.utc(test2).utcOffset(-60).format());\n\n  // across DST, copied from utc.test.js#get utc offset with a number value\n  const time = '2021-02-28 19:40:10';\n  const hoursOffset = -8;\n  const daysJS = dayjs(time).utc().utcOffset(hoursOffset * 60, true);\n  const momentJS = moment(time).utc(true).utcOffset(hoursOffset, true);\n  expect(daysJS.toISOString()).toEqual(momentJS.toISOString());\n});","file":"timezone.test.js","skipped":false,"dir":"test"},{"name":"UTC diff in DST","suites":[],"updatePoint":{"line":58,"column":19,"index":2485},"line":58,"code":"it('UTC diff in DST', () => {\n  // DST till 2020-10-25\n  const day1 = dayjs.utc('20201023'); // in DST\n  const day2 = dayjs.utc('20201026');\n  expect(day1.diff(day2, 'd')).toBe(-3);\n});","file":"timezone.test.js","skipped":false,"dir":"test"},{"name":"PrettyUnit","suites":[],"updatePoint":{"line":5,"column":14,"index":131},"line":5,"code":"it('PrettyUnit', () => {\n  expect(prettyUnit('Days')).toBe('day');\n  expect(prettyUnit('days')).toBe('day');\n  expect(prettyUnit('day')).toBe('day');\n  expect(prettyUnit('quarter')).toBe('quarter');\n  expect(prettyUnit('quarters')).toBe('quarter');\n  expect(prettyUnit('D')).toBe('date');\n  expect(prettyUnit('d')).toBe('day');\n  expect(prettyUnit('M')).toBe('month');\n  expect(prettyUnit('y')).toBe('year');\n  expect(prettyUnit('h')).toBe('hour');\n  expect(prettyUnit('m')).toBe('minute');\n  expect(prettyUnit('s')).toBe('second');\n  expect(prettyUnit('ms')).toBe('millisecond');\n  expect(prettyUnit('Q')).toBe('quarter');\n  expect(prettyUnit()).toBe('');\n});","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"PadZoneStr","suites":[],"updatePoint":{"line":22,"column":14,"index":792},"line":22,"code":"it('PadZoneStr', () => {\n  const instance = {};\n  instance.utcOffset = () => 0 * -1;\n  expect(padZoneStr(instance)).toBe('+00:00');\n  instance.utcOffset = () => 1 * 60 * -1;\n  expect(padZoneStr(instance)).toBe('-01:00');\n  instance.utcOffset = () => -1 * 60 * -1;\n  expect(padZoneStr(instance)).toBe('+01:00');\n  instance.utcOffset = () => -10 * 60 * -1;\n  expect(padZoneStr(instance)).toBe('+10:00');\n  instance.utcOffset = () => 10 * 60 * -1;\n  expect(padZoneStr(instance)).toBe('-10:00');\n  instance.utcOffset = () => (-5 * 60 - 30) * -1;\n  expect(padZoneStr(instance)).toBe('+05:30');\n});","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"PadStart","suites":[],"updatePoint":{"line":37,"column":12,"index":1383},"line":37,"code":"it('PadStart', () => {\n  expect(padStart(1, 2, '0')).toBe('01');\n  expect(padStart(0, 2, '0')).toBe('00');\n});","file":"utils.test.js","skipped":false,"dir":"test"}]}