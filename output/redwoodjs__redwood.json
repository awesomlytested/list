{"repo":"redwoodjs/redwood","url":"https://github.com/redwoodjs/redwood","branch":"main","configs":[{"package":"@redwoodjs/api-server","lang":"ts","dir":"packages/api-server/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/auth","lang":"js","dir":"packages/auth/src/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"create-redwood-app","lang":"js","dir":"packages/create-redwood-app/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/forms","lang":"js","dir":"packages/forms/src/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@redwoodjs/graphql-server","lang":"ts","dir":"packages/graphql-server/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/internal","lang":"ts","dir":"packages/internal/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/prerender","lang":"ts","dir":"packages/prerender/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@redwoodjs/router","lang":"ts","dir":"packages/router/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Attach handlers for prerendered files","suites":[],"updatePoint":{"line":31,"column":43},"line":31,"code":"test('Attach handlers for prerendered files', () => {\n  const mockedApp = {\n    register: jest.fn(),\n    get: jest.fn(),\n    setNotFoundHandler: jest.fn(),\n  } as unknown as FastifyInstance\n\n  withWebServer(mockedApp)\n\n  expect(mockedApp.get).toHaveBeenCalledWith('/about', expect.anything())\n  expect(mockedApp.get).toHaveBeenCalledWith('/mocked', expect.anything())\n  expect(mockedApp.get).toHaveBeenCalledWith('/posts/new', expect.anything())\n\n  // Ignore index.html\n  expect(mockedApp.get).not.toHaveBeenCalledWith('/index', expect.anything())\n})","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Adds SPA fallback","suites":[],"updatePoint":{"line":48,"column":23},"line":48,"code":"test('Adds SPA fallback', () => {\n  const mockedApp = {\n    register: jest.fn(),\n    get: jest.fn(),\n    setNotFoundHandler: jest.fn(),\n  } as unknown as FastifyInstance\n\n  withWebServer(mockedApp)\n\n  expect(mockedApp.setNotFoundHandler).toHaveBeenCalled()\n})","file":"withWebServer.test.ts","skipped":false,"dir":"packages/api-server/src/__tests__"},{"name":"Web/src/App should contain App","suites":[],"updatePoint":{"line":3,"column":36,"index":83},"line":3,"code":"test('Web/src/App should contain App', () => {\n  // This test is here to ensure we don't accidentally break auth setup commands\n  // They rely on the presence of certain strings, so if we change them\n  // packages/cli/src/commands/setup/auth/auth.js should also be changed\n  const indexContent = fs.readFileSync(path.join(__dirname, '../../template/web/src/App.tsx')).toString();\n  expect(indexContent).toContain('const App = () => (');\n});","file":"web-template.test.js","skipped":false,"dir":"packages/create-redwood-app/src/__tests__"},{"name":"Should map globs to defined structure correctly","suites":[],"updatePoint":{"line":21,"column":53},"line":21,"code":"test('Should map globs to defined structure correctly', async () => {\n  // Mocking what our import-dir plugin would do\n  const directiveFiles = {\n    foo_directive: {\n      schema: fooSchema,\n      foo: createTransformerDirective(fooSchema, () => 'I am foo'),\n    },\n    nested_bazinga_directive: {\n      bazinga: createValidatorDirective(bazingaSchema, async () => {\n        throw new Error('Only soft kittens allowed')\n      }),\n      schema: bazingaSchema,\n    },\n    heavily_nested_bar_directive: {\n      bar: createTransformerDirective(barSchema, () => 'I am bar'),\n      schema: barSchema,\n    },\n  }\n\n  const [fooDirective, bazingaDirective, barDirective] =\n    makeDirectivesForPlugin(directiveFiles)\n\n  expect(fooDirective.name).toBe('foo')\n  expect(fooDirective.onResolverCalled({} as DirectiveParams)).toBe('I am foo')\n  expect(fooDirective.schema.kind).toBe('Document')\n\n  expect(bazingaDirective.name).toBe('bazinga')\n  expect(bazingaDirective.onResolverCalled).rejects.toThrowError(\n    'Only soft kittens allowed'\n  )\n  expect(bazingaDirective.schema.kind).toBe('Document')\n\n  expect(barDirective.name).toBe('bar')\n  expect(await barDirective.onResolverCalled({} as DirectiveParams)).toBe(\n    'I am bar'\n  )\n  expect(barDirective.schema.kind).toBe('Document')\n})","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Tells you if you forgot to wrap the implementation function","suites":["Errors out with a helpful message, if the directive is not constructed correctly"],"updatePoint":{"line":61,"column":65},"line":61,"code":"  it('Tells you if you forgot to wrap the implementation function', () => {\n    const incorrectDirectiveFiles = {\n      foo_directive: {\n        schema: fooSchema,\n        foo: () => 'Oopy I forgot to wrap',\n      },\n    }\n\n    expect(() => makeDirectivesForPlugin(incorrectDirectiveFiles)).toThrowError(\n      'Please use `createValidatorDirective` or `createTransformerDirective` functions to define your directive'\n    )\n  })","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Tells you if you forgot the implementation function","suites":["Errors out with a helpful message, if the directive is not constructed correctly"],"updatePoint":{"line":74,"column":57},"line":74,"code":"  it('Tells you if you forgot the implementation function', () => {\n    expect(() => createValidatorDirective(fooSchema, undefined)).toThrowError(\n      'Directive validation function not implemented for @foo'\n    )\n\n    expect(() => createTransformerDirective(fooSchema, undefined)).toThrowError(\n      'Directive transformer function not implemented for @foo'\n    )\n  })","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"Tells you if you messed up the schema","suites":["Errors out with a helpful message, if the directive is not constructed correctly"],"updatePoint":{"line":84,"column":43},"line":84,"code":"  it('Tells you if you messed up the schema', () => {\n    // The messages come from the graphql libs, so no need to check the messages\n    expect(() =>\n      createValidatorDirective(gql`directive @misdirective`, undefined)\n    ).toThrow()\n\n    expect(() =>\n      createTransformerDirective(gql`misdirective`, undefined)\n    ).toThrow()\n  })","file":"makeDirectives.test.ts","skipped":false,"dir":"packages/graphql-server/src/__tests__"},{"name":"extracts named exports","suites":[],"updatePoint":{"line":33,"column":28},"line":33,"code":"test('extracts named exports', () => {\n  // Fixture is in web folder, because it has a JSX export\n  const fakeCode = fileToAst(getFixturePath('/web/src/exports.ts'))\n  const n = getNamedExports(fakeCode)\n  expect(n).toMatchInlineSnapshot(`\nArray [\n  Object {\n    \"name\": \"exportA\",\n    \"type\": \"re-export\",\n  },\n  Object {\n    \"name\": \"exportB\",\n    \"type\": \"re-export\",\n  },\n  Object {\n    \"name\": \"myVariableExport\",\n    \"type\": \"variable\",\n  },\n  Object {\n    \"name\": \"myArrowFunctionExport\",\n    \"type\": \"variable\",\n  },\n  Object {\n    \"name\": \"myFunctionExport\",\n    \"type\": \"function\",\n  },\n  Object {\n    \"name\": \"MyClassExport\",\n    \"type\": \"class\",\n  },\n]\n`)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"tests default exports","suites":[],"updatePoint":{"line":67,"column":27},"line":67,"code":"test('tests default exports', () => {\n  expect(\n    hasDefaultExport(fileToAst(getFixturePath('/defaultExports/multiLine.js')))\n  ).toEqual(true)\n\n  expect(\n    hasDefaultExport(fileToAst(getFixturePath('defaultExports/singleLine.js')))\n  ).toEqual(true)\n\n  expect(\n    hasDefaultExport(fileToAst(getFixturePath('defaultExports/none.js')))\n  ).toEqual(false)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Returns the exported query from a cell (ignoring others)","suites":[],"updatePoint":{"line":81,"column":62},"line":81,"code":"test('Returns the exported query from a cell (ignoring others)', () => {\n  const cellFileAst = fileToAst(getFixturePath('web/src/cell.ts'))\n\n  const cellQuery = getCellGqlQuery(cellFileAst)\n  expect(cellQuery).toMatchInlineSnapshot(`\n    \"\n      query BazingaQuery($id: String!) {\n        member: member(id: $id) {\n          id\n        }\n      }\n    \"\n  `)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Returns the all quries from a file using getGqlQueries","suites":[],"updatePoint":{"line":96,"column":60},"line":96,"code":"test('Returns the all quries from a file using getGqlQueries', () => {\n  const cellFileAst = fileToAst(getFixturePath('web/src/cell.ts'))\n\n  const cellQuery = getGqlQueries(cellFileAst)\n  expect(cellQuery).toMatchInlineSnapshot(`\n    Array [\n      \"\n      query BazingaQuery($id: String!) {\n        member: member(id: $id) {\n          id\n        }\n      }\n    \",\n      \"\n    query FindSoftKitten($id: String!) {\n        softKitten: softKitten(id: $id) {\n          id\n        }\n      }\n    \",\n      \"query JustForFun {\n      itsFriday {}\n    }\",\n    ]\n  `)\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Handles typecast syntax without erroring","suites":[],"updatePoint":{"line":123,"column":46},"line":123,"code":"test('Handles typecast syntax without erroring', () => {\n  expect(() => fileToAst(getFixturePath('api/typecast.ts'))).not.toThrow()\n})","file":"ast.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api files are prebuilt","suites":[],"updatePoint":{"line":51,"column":28},"line":51,"code":"test('api files are prebuilt', () => {\n  // Builds non-nested functions\n  expect(relativePaths).toContain(\n    '.redwood/prebuild/api/src/functions/graphql.js'\n  )\n\n  // Builds graphql folder\n  expect(relativePaths).toContain(\n    '.redwood/prebuild/api/src/graphql/todos.sdl.js'\n  )\n\n  // Builds nested function\n  expect(relativePaths).toContain(\n    '.redwood/prebuild/api/src/functions/nested/nested.js'\n  )\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Handles functions nested with the same name","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":69,"column":49},"line":69,"code":"  it('Handles functions nested with the same name', () => {\n    const [buildPath, reExportPath] = generateProxyFilesForNestedFunction(\n      fullPath('.redwood/prebuild/api/src/functions/nested/nested.js')\n    )\n\n    // Hidden path in the _nestedFunctions folder\n    expect(cleanPaths(buildPath)).toBe(\n      '.redwood/prebuild/api/src/_nestedFunctions/nested/nested.js'\n    )\n\n    // Proxy/reExport function placed in the function directory\n    expect(cleanPaths(reExportPath)).toBe(\n      '.redwood/prebuild/api/src/functions/nested.js'\n    )\n\n    const reExportContent = fs.readFileSync(reExportPath, 'utf-8')\n    expect(reExportContent).toMatchInlineSnapshot(\n      `\"export * from '../_nestedFunctions/nested/nested';\"`\n    )\n  })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Handles folders with an index file","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":90,"column":40},"line":90,"code":"  it('Handles folders with an index file', () => {\n    const [buildPath, reExportPath] = generateProxyFilesForNestedFunction(\n      fullPath('.redwood/prebuild/api/src/functions/x/index.js')\n    )\n\n    // Hidden path in the _build folder\n    expect(cleanPaths(buildPath)).toBe(\n      '.redwood/prebuild/api/src/_nestedFunctions/x/index.js'\n    )\n\n    // Proxy/reExport function placed in the function directory\n    expect(cleanPaths(reExportPath)).toBe(\n      '.redwood/prebuild/api/src/functions/x.js'\n    )\n\n    const reExportContent = fs.readFileSync(reExportPath, 'utf-8')\n\n    expect(reExportContent).toMatchInlineSnapshot(\n      `\"export * from '../_nestedFunctions/x';\"`\n    )\n  })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Should not put files that dont match the folder name in dist/functions","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":112,"column":76},"line":112,"code":"  it('Should not put files that dont match the folder name in dist/functions', () => {\n    const [buildPath, reExportPath] = generateProxyFilesForNestedFunction(\n      fullPath('.redwood/prebuild/api/src/functions/invalid/x.js')\n    )\n\n    // File is transpiled to the _nestedFunctions folder\n    expect(cleanPaths(buildPath)).toEqual(\n      '.redwood/prebuild/api/src/_nestedFunctions/invalid/x.js'\n    )\n\n    // But not exposed as a serverless function\n    expect(reExportPath).toBe(undefined)\n  })","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api prebuild finds babel.config.js","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":127,"column":40},"line":127,"code":"test('api prebuild finds babel.config.js', () => {\n  let p = getApiSideBabelConfigPath()\n  p = cleanPaths(p)\n  expect(p).toEqual('api/babel.config.js')\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api prebuild uses babel config only from the api side root","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":133,"column":64},"line":133,"code":"test('api prebuild uses babel config only from the api side root', () => {\n  const p = prebuiltFiles.filter((p) => p.endsWith('dog.js')).pop()\n  const code = fs.readFileSync(p, 'utf-8')\n  expect(code).toContain(`import dog from \"dog-bless\";`)\n\n  // Should ignore root babel config\n  expect(code).not.toContain(`import kitty from \"kitty-purr\"`)\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"api prebuild transforms gql with `babel-plugin-graphql-tag`","suites":["Should create a 'proxy' function for nested functions"],"line":143,"code":"test.skip('api prebuild transforms gql with `babel-plugin-graphql-tag`', () => {","file":"build_api.test.ts","skipped":true,"dir":"packages/internal/src/__tests__"},{"name":"Pretranspile polyfills unsupported functionality","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":161,"column":54},"line":161,"code":"test('Pretranspile polyfills unsupported functionality', () => {\n  const p = prebuiltFiles.filter((p) => p.endsWith('polyfill.js')).pop()\n  const code = fs.readFileSync(p, 'utf-8')\n  expect(code).toContain(\n    'import _replaceAllInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/replace-all\"'\n  )\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Pretranspile uses corejs3 aliasing","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":169,"column":40},"line":169,"code":"test('Pretranspile uses corejs3 aliasing', () => {\n  // See https://babeljs.io/docs/en/babel-plugin-transform-runtime#core-js-aliasing\n  // This is because we configure the transform runtime plugin corejs\n\n  const p = prebuiltFiles.filter((p) => p.endsWith('transform.js')).pop()\n  const code = fs.readFileSync(p, 'utf-8')\n\n  // Polyfill for Symbol\n  expect(code).toContain(\n    `import _Symbol from \"@babel/runtime-corejs3/core-js/symbol\"`\n  )\n\n  // Polyfill for Promise\n  expect(code).toContain(\n    `import _Promise from \"@babel/runtime-corejs3/core-js/promise\"`\n  )\n\n  // Polyfill for .includes\n  expect(code).toContain(\n    'import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/includes\"'\n  )\n\n  // Polyfill for .iterator\n  expect(code).toContain(\n    `import _getIterator from \"@babel/runtime-corejs3/core-js/get-iterator\"`\n  )\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"jest mock statements also handle","suites":["Should create a 'proxy' function for nested functions"],"updatePoint":{"line":197,"column":38},"line":197,"code":"test('jest mock statements also handle', () => {\n  const pathToTest = path.join(getPaths().api.services, 'todos/todos.test.js')\n\n  const code = fs.readFileSync(pathToTest, 'utf-8')\n\n  const defaultOptions = getApiSideDefaultBabelConfig()\n\n  // Step 1: prebuild service/todos.test.js\n  const outputForJest = babel.transform(code, {\n    ...defaultOptions,\n    filename: pathToTest,\n    cwd: getPaths().api.base,\n    // We override the plugins, to match packages/testing/config/jest/api/index.js\n    plugins: getApiSideBabelPlugins({ forJest: true }),\n  }).code\n\n  // Step 2: check that output has correct import statement path\n  expect(outputForJest).toContain('import dog from \"../../lib/dog\"')\n  // Step 3: check that output has correct jest.mock path\n  expect(outputForJest).toContain('jest.mock(\"../../lib/dog\"')\n})","file":"build_api.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"web files are prebuilt (no prerender)","suites":[],"updatePoint":{"line":25,"column":43},"line":25,"code":"test('web files are prebuilt (no prerender)', async () => {\n  const webFiles = findWebFiles()\n  const prebuiltFiles = prebuildWebFiles(webFiles)\n\n  const relativePaths = prebuiltFiles\n    .filter((x) => typeof x !== 'undefined')\n    .map(cleanPaths)\n  // Builds non-nested functions\n  expect(relativePaths).toMatchInlineSnapshot(`\n    Array [\n      \".redwood/prebuild/web/src/App.js\",\n      \".redwood/prebuild/web/src/Routes.js\",\n      \".redwood/prebuild/web/src/components/AddTodo/AddTodo.js\",\n      \".redwood/prebuild/web/src/components/AddTodoControl/AddTodoControl.js\",\n      \".redwood/prebuild/web/src/components/Check/Check.js\",\n      \".redwood/prebuild/web/src/components/NumTodosCell/NumTodosCell.js\",\n      \".redwood/prebuild/web/src/components/NumTodosTwoCell/NumTodosTwoCell.js\",\n      \".redwood/prebuild/web/src/components/TableCell/TableCell.js\",\n      \".redwood/prebuild/web/src/components/TodoItem/TodoItem.js\",\n      \".redwood/prebuild/web/src/components/TodoListCell/TodoListCell.tsx\",\n      \".redwood/prebuild/web/src/layouts/SetLayout/SetLayout.js\",\n      \".redwood/prebuild/web/src/pages/BarPage/BarPage.tsx\",\n      \".redwood/prebuild/web/src/pages/FatalErrorPage/FatalErrorPage.js\",\n      \".redwood/prebuild/web/src/pages/FooPage/FooPage.tsx\",\n      \".redwood/prebuild/web/src/pages/HomePage/HomePage.tsx\",\n      \".redwood/prebuild/web/src/pages/NotFoundPage/NotFoundPage.js\",\n      \".redwood/prebuild/web/src/pages/PrivatePage/PrivatePage.tsx\",\n      \".redwood/prebuild/web/src/pages/TypeScriptPage/TypeScriptPage.tsx\",\n      \".redwood/prebuild/web/src/pages/admin/EditUserPage/EditUserPage.jsx\",\n    ]\n  `)\n})","file":"build_web.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Check routes are imported with require when staticImports flag is enabled","suites":[],"updatePoint":{"line":58,"column":79},"line":58,"code":"test('Check routes are imported with require when staticImports flag is enabled', () => {\n  const routesFile = getPaths().web.routes\n\n  const withStaticImports = prebuildWebFile(routesFile, {\n    staticImports: true,\n  }).code\n\n  /* Check that imports have the form\n   `const HomePage = {\n     name: \"HomePage\",\n     loader: () => require(\"` 👈 Uses a require statement\n     */\n  expect(withStaticImports).toContain(`const HomePage = {`)\n  expect(withStaticImports).toContain(`const BarPage = {`)\n\n  /*\n    👇 Foo page is an explicitly imported page in the source\n    const FooPage = {\n      name: \"FooPage\",\n      loader: () => require(\n    */\n  expect(withStaticImports).toContain(`const FooPage = {`)\n  expect(withStaticImports).not.toContain(\n    `var _FooPage = _interopRequireDefault(require(`\n  )\n})","file":"build_web.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Check routes are imported with \"import\" when staticImports flag is NOT passed","suites":[],"updatePoint":{"line":85,"column":83},"line":85,"code":"test('Check routes are imported with \"import\" when staticImports flag is NOT passed', () => {\n  const routesFile = getPaths().web.routes\n\n  const withoutStaticImports = prebuildWebFile(routesFile).code\n\n  /* Check that imports have the form\n   `const HomePage = {\n     name: \"HomePage\",\n     loader: () => import(\"` 👈 Uses an (async) import statement\n     */\n\n  expect(withoutStaticImports).toContain(`const HomePage = {`)\n  expect(withoutStaticImports).toContain(`const BarPage = {`)\n\n  /*\n    👇 Foo page is an explicitly imported page, so it should\n    var _FooPage = _interopRequireDefault(require(\\\\\"./pages/FooPage/FooPage\\\\\"))\n    (inverse of the static imports one)\n    .\n    .\n    .\n    page: _FooPage[\\\\\"default\\\\\"],\n  */\n  expect(withoutStaticImports).not.toContain(`const FooPage = {`)\n  expect(withoutStaticImports).toContain(\n    `var _FooPage = _interopRequireDefault(require(`\n  )\n})","file":"build_web.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"returns a default config","suites":["getConfig"],"updatePoint":{"line":6,"column":30},"line":6,"code":"  it('returns a default config', () => {\n    const config = getConfig(\n      path.join(__dirname, './fixtures/redwood.empty.toml')\n    )\n    expect(config).toMatchInlineSnapshot(`\n      Object {\n        \"api\": Object {\n          \"host\": \"localhost\",\n          \"path\": \"./api\",\n          \"port\": 8911,\n          \"schemaPath\": \"./api/db/schema.prisma\",\n          \"serverConfig\": \"./api/server.config.js\",\n          \"target\": \"node\",\n          \"title\": \"Redwood App\",\n        },\n        \"browser\": Object {\n          \"open\": false,\n        },\n        \"generate\": Object {\n          \"nestScaffoldByModel\": true,\n          \"stories\": true,\n          \"tests\": true,\n        },\n        \"web\": Object {\n          \"a11y\": true,\n          \"apiUrl\": \"/.redwood/functions\",\n          \"fastRefresh\": true,\n          \"host\": \"localhost\",\n          \"path\": \"./web\",\n          \"port\": 8910,\n          \"sourceMap\": false,\n          \"target\": \"browser\",\n          \"title\": \"Redwood App\",\n        },\n      }\n    `)\n  })","file":"config.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"merges configs","suites":["getConfig"],"updatePoint":{"line":44,"column":20},"line":44,"code":"  it('merges configs', () => {\n    const config = getConfig(path.join(__dirname, './fixtures/redwood.toml'))\n    expect(config.web.port).toEqual(8888)\n  })","file":"config.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"interpolates environment variables correctly","suites":["getConfig"],"updatePoint":{"line":49,"column":50},"line":49,"code":"  it('interpolates environment variables correctly', () => {\n    process.env.API_URL = '/bazinga'\n    process.env.APP_ENV = 'staging'\n\n    const config = getConfig(\n      path.join(__dirname, './fixtures/redwood.withEnv.toml')\n    )\n\n    // Fallsback to the defualt if env var not supplied\n    expect(config.web.port).toBe('8910') // remember env vars have to be strings\n\n    // Uses the env var if supplied\n    expect(config.web.apiUrl).toBe('/bazinga')\n    expect(config.web.title).toBe('App running on staging')\n\n    delete process.env['API_URL']\n    delete process.env['APP_ENV']\n  })","file":"config.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds all the cells","suites":[],"updatePoint":{"line":30,"column":25},"line":30,"code":"test('finds all the cells', () => {\n  const paths = findCells()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    Array [\n      \"web/src/components/NumTodosCell/NumTodosCell.js\",\n      \"web/src/components/NumTodosTwoCell/NumTodosTwoCell.js\",\n      \"web/src/components/TodoListCell/TodoListCell.tsx\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds directory named modules","suites":[],"updatePoint":{"line":43,"column":35},"line":43,"code":"test('finds directory named modules', () => {\n  const paths = findDirectoryNamedModules()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    Array [\n      \"api/src/directives/requireAuth/requireAuth.js\",\n      \"api/src/directives/skipAuth/skipAuth.js\",\n      \"api/src/functions/healthz/healthz.js\",\n      \"api/src/functions/nested/nested.ts\",\n      \"api/src/services/todos/todos.js\",\n      \"web/src/components/AddTodo/AddTodo.js\",\n      \"web/src/components/AddTodoControl/AddTodoControl.js\",\n      \"web/src/components/Check/Check.js\",\n      \"web/src/components/TableCell/TableCell.js\",\n      \"web/src/components/TodoItem/TodoItem.js\",\n      \"web/src/layouts/SetLayout/SetLayout.js\",\n      \"web/src/pages/BarPage/BarPage.tsx\",\n      \"web/src/pages/FatalErrorPage/FatalErrorPage.js\",\n      \"web/src/pages/FooPage/FooPage.tsx\",\n      \"web/src/pages/HomePage/HomePage.tsx\",\n      \"web/src/pages/NotFoundPage/NotFoundPage.js\",\n      \"web/src/pages/PrivatePage/PrivatePage.tsx\",\n      \"web/src/pages/TypeScriptPage/TypeScriptPage.tsx\",\n      \"web/src/pages/admin/EditUserPage/EditUserPage.jsx\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"finds all the page files","suites":[],"updatePoint":{"line":72,"column":30},"line":72,"code":"test('finds all the page files', () => {\n  const paths = findPages()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    Array [\n      \"web/src/pages/BarPage/BarPage.tsx\",\n      \"web/src/pages/FatalErrorPage/FatalErrorPage.js\",\n      \"web/src/pages/FooPage/FooPage.tsx\",\n      \"web/src/pages/HomePage/HomePage.tsx\",\n      \"web/src/pages/NotFoundPage/NotFoundPage.js\",\n      \"web/src/pages/PrivatePage/PrivatePage.tsx\",\n      \"web/src/pages/TypeScriptPage/TypeScriptPage.tsx\",\n      \"web/src/pages/admin/EditUserPage/EditUserPage.jsx\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"find the graphql schema files","suites":[],"updatePoint":{"line":90,"column":35},"line":90,"code":"test('find the graphql schema files', () => {\n  const paths = findGraphQLSchemas()\n  const p = paths.map(cleanPaths)\n\n  expect(p[0]).toMatchInlineSnapshot(`\"api/src/graphql/currentUser.sdl.ts\"`)\n  expect(p[1]).toMatchInlineSnapshot(`\"api/src/graphql/todos.sdl.js\"`)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"find api functions","suites":[],"updatePoint":{"line":98,"column":24},"line":98,"code":"test('find api functions', () => {\n  const paths = findApiServerFunctions()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    Array [\n      \"api/src/functions/graphql.js\",\n      \"api/src/functions/healthz/healthz.js\",\n      \"api/src/functions/nested/nested.ts\",\n      \"api/src/functions/x/index.js\",\n    ]\n  `)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"isFileInsideFolder works correctly (esp on windows)","suites":[],"updatePoint":{"line":112,"column":57},"line":112,"code":"test('isFileInsideFolder works correctly (esp on windows)', () => {\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'web/src/components/TableCell/TableCell.js'),\n      getPaths().web.base\n    )\n  ).toBe(true)\n\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'web/src/pages/NotFoundPage/NotFoundPage.js'),\n      getPaths().web.pages\n    )\n  ).toBe(true)\n\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'web/src/pages/NotFoundPage/NotFoundPage.js'),\n      getPaths().api.base\n    )\n  ).toBe(false)\n\n  expect(\n    isFileInsideFolder(\n      path.join(FIXTURE_PATH, 'api/src/functions/healthz/healthz.js'),\n      getPaths().api.functions\n    )\n  ).toBe(true)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"isCellFile detects cells correctly","suites":[],"updatePoint":{"line":142,"column":40},"line":142,"code":"test('isCellFile detects cells correctly', () => {\n  const invalidCell = isCellFile(\n    path.join(FIXTURE_PATH, 'web/src/components/TableCell/TableCell.js')\n  )\n\n  const validCell = isCellFile(\n    path.join(FIXTURE_PATH, 'web/src/components/TodoListCell/TodoListCell.tsx')\n  )\n\n  const notACell = isCellFile(\n    path.join(FIXTURE_PATH, 'api/src/services/todos/DoesNotExist.js')\n  )\n\n  expect(invalidCell).toBe(false)\n  expect(validCell).toBe(true)\n  expect(notACell).toBe(false)\n})","file":"files.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"parses a document AST","suites":[],"updatePoint":{"line":5,"column":27},"line":5,"code":"test('parses a document AST', () => {\n  const QUERY = gql`\n    query POSTS {\n      posts {\n        id\n        title\n        body\n        createdAt\n      }\n      numberOfPosts\n    }\n  `\n\n  expect(parseDocumentAST(QUERY)).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"fields\": Array [\n          Object {\n            \"posts\": Array [\n              \"id\",\n              \"title\",\n              \"body\",\n              \"createdAt\",\n            ],\n          },\n          \"numberOfPosts\",\n        ],\n        \"name\": \"POSTS\",\n        \"operation\": \"query\",\n      },\n    ]\n  `)\n})","file":"gql.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"handles inline fragments","suites":[],"updatePoint":{"line":39,"column":30},"line":39,"code":"test('handles inline fragments', () => {\n  const QUERY = gql`\n    query MyCellQuery {\n      something {\n        ... on SomeType {\n          __typename\n        }\n        ... on SomeOtherType {\n          __typename\n        }\n      }\n    }\n  `\n\n  expect(parseDocumentAST(QUERY)).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"fields\": Array [\n          Object {\n            \"something\": Array [\n              \"__typename\",\n              \"__typename\",\n            ],\n          },\n        ],\n        \"name\": \"MyCellQuery\",\n        \"operation\": \"query\",\n      },\n    ]\n  `)\n})","file":"gql.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"handles fragments","suites":[],"updatePoint":{"line":71,"column":23},"line":71,"code":"test('handles fragments', () => {\n  const QUERY = gql`\n    fragment ABC on B {\n      a\n    }\n    query MyCellQuery {\n      something {\n        ...ABC\n      }\n    }\n  `\n\n  expect(parseDocumentAST(QUERY)).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"fields\": Array [\n          Object {\n            \"something\": Array [],\n          },\n        ],\n        \"name\": \"MyCellQuery\",\n        \"operation\": \"query\",\n      },\n    ]\n  `)\n})","file":"gql.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"simple jsx tree","suites":[],"updatePoint":{"line":10,"column":21},"line":10,"code":"test('simple jsx tree', () => {\n  const simpleAst = fileToAst(getFixturePath('web/src/router/simple.tsx'))\n  const elements = getJsxElements(simpleAst, 'Router')\n  expect(elements).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"children\": Array [\n          Object {\n            \"children\": Array [\n              Object {\n                \"children\": Array [],\n                \"name\": \"Route\",\n                \"props\": Object {\n                  \"name\": \"home\",\n                  \"page\": \"HomePage\",\n                  \"path\": \"/home\",\n                },\n              },\n              Object {\n                \"children\": Array [],\n                \"name\": \"Route\",\n                \"props\": Object {\n                  \"name\": \"login\",\n                  \"page\": \"LoginPage\",\n                  \"path\": \"/login\",\n                },\n              },\n              Object {\n                \"children\": Array [],\n                \"name\": \"Route\",\n                \"props\": Object {\n                  \"name\": \"404\",\n                  \"page\": \"ArrowFunctionExpression is not supported\",\n                  \"path\": \"/404\",\n                },\n              },\n            ],\n            \"name\": \"Set\",\n            \"props\": Object {\n              \"private\": true,\n            },\n          },\n        ],\n        \"name\": \"Router\",\n        \"props\": Object {},\n      },\n    ]\n  `)\n})","file":"jsx.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"it accurately finds and names the pages","suites":["paths","processPagesDir"],"updatePoint":{"line":12,"column":47},"line":12,"code":"    it('it accurately finds and names the pages', () => {\n      const pagesDir = path.resolve(\n        __dirname,\n        '../../../../__fixtures__/example-todo-main/web/src/pages'\n      )\n\n      const pages = processPagesDir(pagesDir)\n\n      expect(pages.length).toEqual(8)\n\n      const adminEditUserPage = pages.find(\n        (page) => page.importName === 'adminEditUserPage'\n      )\n      expect(adminEditUserPage).not.toBeUndefined()\n      expect(adminEditUserPage.importPath).toEqual(\n        importStatementPath(\n          path.join(pagesDir, 'admin/EditUserPage/EditUserPage')\n        )\n      )\n\n      const barPage = pages.find((page) => page.importName === 'BarPage')\n      expect(barPage).not.toBeUndefined()\n      expect(barPage.importPath).toEqual(\n        importStatementPath(path.join(pagesDir, 'BarPage/BarPage'))\n      )\n\n      const fatalErrorPage = pages.find(\n        (page) => page.importName === 'FatalErrorPage'\n      )\n      expect(fatalErrorPage).not.toBeUndefined()\n      expect(fatalErrorPage.importPath).toEqual(\n        importStatementPath(\n          path.join(pagesDir, 'FatalErrorPage/FatalErrorPage')\n        )\n      )\n\n      const fooPage = pages.find((page) => page.importName === 'FooPage')\n      expect(fooPage).not.toBeUndefined()\n      expect(fooPage.importPath).toEqual(\n        importStatementPath(path.join(pagesDir, 'FooPage/FooPage'))\n      )\n\n      const homePage = pages.find((page) => page.importName === 'HomePage')\n      expect(homePage).not.toBeUndefined()\n      expect(homePage.importPath).toEqual(\n        importStatementPath(path.join(pagesDir, 'HomePage/HomePage'))\n      )\n\n      const notFoundPage = pages.find(\n        (page) => page.importName === 'NotFoundPage'\n      )\n      expect(notFoundPage).not.toBeUndefined()\n      expect(notFoundPage.importPath).toEqual(\n        importStatementPath(path.join(pagesDir, 'NotFoundPage/NotFoundPage'))\n      )\n\n      const typeScriptPage = pages.find(\n        (page) => page.importName === 'TypeScriptPage'\n      )\n      expect(typeScriptPage).not.toBeUndefined()\n      expect(typeScriptPage.importPath).toEqual(\n        importStatementPath(\n          path.join(pagesDir, 'TypeScriptPage/TypeScriptPage')\n        )\n      )\n\n      const privatePage = pages.find(\n        (page) => page.importName === 'PrivatePage'\n      )\n      expect(privatePage).not.toBeUndefined()\n      expect(privatePage.importPath).toEqual(\n        importStatementPath(path.join(pagesDir, 'PrivatePage/PrivatePage'))\n      )\n    })","file":"paths.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Returns unmodified input if not on Windows","suites":["paths","ensurePosixPath"],"updatePoint":{"line":94,"column":50},"line":94,"code":"    it('Returns unmodified input if not on Windows', () => {\n      const originalPlatform = process.platform\n      Object.defineProperty(process, 'platform', {\n        value: 'NotWindows',\n      })\n\n      const testPath = 'X:\\\\some\\\\weird\\\\path'\n      const posixPath = ensurePosixPath(testPath)\n\n      Object.defineProperty(process, 'platform', {\n        value: originalPlatform,\n      })\n\n      expect(posixPath).toEqual(testPath)\n    })","file":"paths.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Transforms paths on Windows","suites":["paths","ensurePosixPath"],"updatePoint":{"line":110,"column":35},"line":110,"code":"    it('Transforms paths on Windows', () => {\n      const originalPlatform = process.platform\n      Object.defineProperty(process, 'platform', {\n        value: 'win32',\n      })\n\n      const testPath = '..\\\\some\\\\relative\\\\path'\n      const posixPath = ensurePosixPath(testPath)\n\n      Object.defineProperty(process, 'platform', {\n        value: originalPlatform,\n      })\n\n      expect(posixPath).toEqual('../some/relative/path')\n    })","file":"paths.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Handles drive letters","suites":["paths","ensurePosixPath"],"updatePoint":{"line":126,"column":29},"line":126,"code":"    it('Handles drive letters', () => {\n      const originalPlatform = process.platform\n      Object.defineProperty(process, 'platform', {\n        value: 'win32',\n      })\n\n      const testPath = 'C:\\\\some\\\\full\\\\path\\\\to\\\\file.ext'\n      const posixPath = ensurePosixPath(testPath)\n\n      Object.defineProperty(process, 'platform', {\n        value: originalPlatform,\n      })\n\n      expect(posixPath).toEqual('/c/some/full/path/to/file.ext')\n    })","file":"paths.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate the correct mirror types for cells","suites":[],"updatePoint":{"line":38,"column":49},"line":38,"code":"test('generate the correct mirror types for cells', () => {\n  const paths = generateMirrorCells()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    Array [\n      \".redwood/types/mirror/web/src/components/NumTodosCell/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/NumTodosTwoCell/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/TodoListCell/index.d.ts\",\n    ]\n  `)\n\n  expect(fs.readFileSync(paths[0], 'utf-8')).toMatchInlineSnapshot(`\n    \"// This file was generated by RedwoodJS\n    import { Success } from './NumTodosCell'\n    import type { CellProps } from '@redwoodjs/web'\n    import type { NumTodosCell_GetCount, NumTodosCell_GetCountVariables } from 'types/graphql'\n\n    type SuccessType = typeof Success\n\n    export * from './NumTodosCell'\n\n    type CellInputs = CellProps<SuccessType, NumTodosCell_GetCount, NumTodosCell_GetCountVariables>\n\n    export default function (props: CellInputs): ReturnType<SuccessType>\n    \"\n  `)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate the correct mirror types for directory named modules","suites":[],"updatePoint":{"line":67,"column":67},"line":67,"code":"test('generate the correct mirror types for directory named modules', () => {\n  const paths = generateMirrorDirectoryNamedModules()\n  const p = paths.map(cleanPaths)\n\n  expect(p).toMatchInlineSnapshot(`\n    Array [\n      \".redwood/types/mirror/api/src/directives/requireAuth/index.d.ts\",\n      \".redwood/types/mirror/api/src/directives/skipAuth/index.d.ts\",\n      \".redwood/types/mirror/api/src/functions/healthz/index.d.ts\",\n      \".redwood/types/mirror/api/src/functions/nested/index.d.ts\",\n      \".redwood/types/mirror/api/src/services/todos/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/AddTodo/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/AddTodoControl/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/Check/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/TableCell/index.d.ts\",\n      \".redwood/types/mirror/web/src/components/TodoItem/index.d.ts\",\n      \".redwood/types/mirror/web/src/layouts/SetLayout/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/BarPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/FatalErrorPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/FooPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/HomePage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/NotFoundPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/PrivatePage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/TypeScriptPage/index.d.ts\",\n      \".redwood/types/mirror/web/src/pages/admin/EditUserPage/index.d.ts\",\n    ]\n  `)\n\n  expect(fs.readFileSync(paths[0], 'utf-8')).toMatchInlineSnapshot(`\n    \"// This file was generated by RedwoodJS\n    import { default as DEFAULT } from './requireAuth'\n    export default DEFAULT\n    export * from './requireAuth'\n    \"\n  `)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generates global page imports","suites":[],"updatePoint":{"line":104,"column":35},"line":104,"code":"test('generates global page imports', () => {\n  const paths = generateTypeDefRouterPages()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/web-routesPages.d.ts')\n\n  const c = fs.readFileSync(paths[0], 'utf-8')\n\n  expect(c).toContain(`\ndeclare global {\n  const BarPage: typeof BarPageType\n  const FatalErrorPage: typeof FatalErrorPageType\n  const FooPage: typeof FooPageType\n  const HomePage: typeof HomePageType\n  const NotFoundPage: typeof NotFoundPageType\n  const PrivatePage: typeof PrivatePageType\n  const TypeScriptPage: typeof TypeScriptPageType\n  const adminEditUserPage: typeof adminEditUserPageType\n}`)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate current user ","suites":[],"updatePoint":{"line":124,"column":28},"line":124,"code":"test('generate current user ', () => {\n  const paths = generateTypeDefCurrentUser()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/all-currentUser.d.ts')\n  // The type definition output is static, so there's nothing to test.\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generates the router routes","suites":[],"updatePoint":{"line":131,"column":33},"line":131,"code":"test('generates the router routes', () => {\n  const paths = generateTypeDefRouterRoutes()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/web-routerRoutes.d.ts')\n\n  const c = fs.readFileSync(paths[0], 'utf-8')\n  expect(c).toContain(`\n    home: (params?: RouteParams<\"/\"> & QueryParams) => \"/\"\n    typescriptPage: (params?: RouteParams<\"/typescript\"> & QueryParams) => \"/typescript\"\n    someOtherPage: (params?: RouteParams<\"/somewhereElse\"> & QueryParams) => \"/somewhereElse\"\n    fooPage: (params?: RouteParams<\"/foo\"> & QueryParams) => \"/foo\"\n    barPage: (params?: RouteParams<\"/bar\"> & QueryParams) => \"/bar\"\n    privatePage: (params?: RouteParams<\"/private-page\"> & QueryParams) => \"/private-page\"\n`)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate glob imports","suites":[],"updatePoint":{"line":147,"column":27},"line":147,"code":"test('generate glob imports', () => {\n  const paths = generateTypeDefGlobImports()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/api-globImports.d.ts')\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate api global context","suites":[],"updatePoint":{"line":153,"column":33},"line":153,"code":"test('generate api global context', () => {\n  const paths = generateTypeDefGlobalContext()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/api-globalContext.d.ts')\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"generate scenario type defs","suites":[],"updatePoint":{"line":159,"column":33},"line":159,"code":"test('generate scenario type defs', () => {\n  const paths = generateTypeDefScenarios()\n  const p = paths.map(cleanPaths)\n  expect(p[0]).toEqual('.redwood/types/includes/api-scenarios.d.ts')\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Generate gql typedefs to correct paths","suites":[],"updatePoint":{"line":165,"column":44},"line":165,"code":"test('Generate gql typedefs to correct paths', async () => {\n  // Generate schema first\n\n  await generateGraphQLSchema()\n  const p1 = await generateTypeDefGraphQLWeb()\n  const p2 = await generateTypeDefGraphQLApi()\n  const paths = [...p1, ...p2]\n  const p = paths.map(cleanPaths)\n\n  expect(p).toEqual(\n    expect.arrayContaining([\n      expect.stringMatching('web/types/graphql.d.ts'),\n      expect.stringMatching('api/types/graphql.d.ts'),\n    ])\n  )\n}, 10_000) // Set timeout to 10s. Windows test runners are slow.","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"mirror path for directory named modules","suites":[],"updatePoint":{"line":182,"column":45},"line":182,"code":"test('mirror path for directory named modules', () => {\n  const d = findDirectoryNamedModules()\n  const p = mirrorPathForDirectoryNamedModules(d[0])\n\n  expect(cleanPaths(p[0])).toMatchInlineSnapshot(\n    `\".redwood/types/mirror/api/src/directives/requireAuth\"`\n  )\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"mirror path for dir cells","suites":[],"updatePoint":{"line":191,"column":31},"line":191,"code":"test('mirror path for dir cells', () => {\n  const c = findCells()\n  const p = mirrorPathForCell(c[0])\n\n  expect(cleanPaths(p[0])).toMatchInlineSnapshot(\n    `\".redwood/types/mirror/web/src/components/NumTodosCell\"`\n  )\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"respects user provided codegen config","suites":[],"updatePoint":{"line":200,"column":43},"line":200,"code":"test('respects user provided codegen config', async () => {\n  const customCodegenConfigPath = path.join(FIXTURE_PATH, 'codegen.yml')\n  // Add codegen.yml to fixture folder\n  fs.writeFileSync(\n    customCodegenConfigPath,\n    `config:\n  omitOperationSuffix: false\n  namingConvention:\n    typeNames: change-case-all#upperCase`\n  )\n\n  await generateGraphQLSchema()\n  const [outputPath] = await generateTypeDefGraphQLWeb()\n\n  const gqlTypesOutput = fs.readFileSync(outputPath, 'utf-8')\n\n  // Should be upper cased type\n  expect(gqlTypesOutput).toContain('ADDTODO_CREATETODOMUTATION')\n\n  // because we override omitOPerationSuffix to false, it should append QUERY\n  // for __fixtures__/example-todo-main/../NumTodosCell.js\n  expect(gqlTypesOutput).toContain('NUMTODOSCELL_GETCOUNTQUERY')\n\n  // Delete added codegen.yml\n  fs.rmSync(customCodegenConfigPath)\n})","file":"typeDefinitions.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Validates correctly on all platforms","suites":[],"updatePoint":{"line":17,"column":42},"line":17,"code":"test('Validates correctly on all platforms', async () => {\n  let isSdlValid\n\n  try {\n    await loadAndValidateSdls()\n    isSdlValid = true\n  } catch (e) {\n    isSdlValid = false\n  }\n\n  expect(isSdlValid).toBe(true)\n})","file":"validateSchema.test.ts","skipped":false,"dir":"packages/internal/src/__tests__"},{"name":"Should correctly detect routes with prerender prop","suites":["Detecting routes"],"updatePoint":{"line":37,"column":56},"line":37,"code":"  it('Should correctly detect routes with prerender prop', () => {\n    mockedRoutes = [\n      { name: 'home', path: '/', prerender: true },\n      { name: 'private', path: '/private', prerender: false },\n      { name: 'about', path: '/about', prerender: true },\n    ]\n    const output = detectPrerenderRoutes()\n    expect(output.length).toBe(2)\n    expectPresence(output, { name: 'home', path: '/' })\n    expectPresence(output, { name: 'about', path: '/about' })\n\n    expect(output).not.toContainEqual(\n      expect.objectContaining({ name: 'private', path: '/private' })\n    )\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"Should render notFoundPage as 404.html","suites":["Detecting routes"],"updatePoint":{"line":53,"column":44},"line":53,"code":"  it('Should render notFoundPage as 404.html', () => {\n    mockedRoutes = [\n      {\n        name: undefined,\n        path: undefined,\n        prerender: true,\n        isNotFound: true,\n      },\n    ]\n\n    const output = detectPrerenderRoutes()\n    expect(output.length).toBe(1)\n    expect(output[0].name).toBe('404')\n    expect(output[0].path).toBe('/404')\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"Should ignore routes with params","suites":["Detecting routes"],"updatePoint":{"line":69,"column":38},"line":69,"code":"  it('Should ignore routes with params', () => {\n    mockedRoutes = [\n      {\n        name: 'taskDetail',\n        path: '/task/${id}',\n        hasParameters: true,\n        prerender: true,\n      },\n    ]\n\n    const output = detectPrerenderRoutes()\n    expect(output.length).toBe(0)\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"Should return required keys","suites":["Detecting routes"],"updatePoint":{"line":83,"column":33},"line":83,"code":"  it('Should return required keys', () => {\n    mockedRoutes = [\n      {\n        name: 'tasks',\n        path: '/tasks',\n        hasParameters: false,\n        prerender: true,\n        page: {\n          filePath: '/mocked_path/tasks',\n        },\n      },\n      {\n        name: 'kittens',\n        path: '/kittens',\n        hasParameters: false,\n        prerender: true,\n        page: {\n          filePath: '/mocked_path/Kittens.tsx',\n        },\n      },\n    ]\n\n    const output = detectPrerenderRoutes()\n\n    expectPresence(output, {\n      name: 'tasks',\n      path: '/tasks',\n      filePath: '/mocked_path/tasks',\n    })\n\n    expectPresence(output, {\n      name: 'kittens',\n      path: '/kittens',\n      filePath: '/mocked_path/Kittens.tsx',\n    })\n  })","file":"detectRoutes.test.ts","skipped":false,"dir":"packages/prerender/src/__tests__"},{"name":"extracts name and type info","suites":["paramsForRoute"],"line":11,"code":"  it.each([\n    ['/post/{slug}', [['slug', 'String', '{slug}']]],\n    ['/post/{slug...}', [['slug', 'Glob', '{slug...}']]],\n    ['/id/{id:Int}', [['id', 'Int', '{id:Int}']]],\n  ])('extracts name and type info', (route, info) => {\n    expect(paramsForRoute(route)).toEqual(info)\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"does not match route \"%s\" with path \"%s\"","suites":["matchPath"],"line":21,"code":"  it.each([\n    ['/post/{id:Int}', '/post/notAnInt'],\n    ['/post/{id:Int}', '/post/2.0'],\n    ['/post/{id:Int}', '/post/.1'],\n    ['/post/{id:Int}', '/post/0.1'],\n    ['/post/{id:Int}', '/post/123abcd'],\n    ['/post/{id:Int}', '/post/abcd123'],\n    ['/blog/{year}/{month:Int}/{day}', '/blog/2019/december/07'],\n    ['/blog/{year}/{month}/{day}', '/blog/2019/07'],\n    ['/posts/{id}/edit', '/posts//edit'],\n    ['/about', '/'],\n  ])('does not match route \"%s\" with path \"%s\"', (route, pathname) => {\n    expect(matchPath(route, pathname)).toEqual({ match: false })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"matches valid paths and extracts params correctly","suites":["matchPath"],"updatePoint":{"line":36,"column":55},"line":36,"code":"  it('matches valid paths and extracts params correctly', () => {\n    expect(matchPath('/blog/{year}/{month}/{day}', '/blog/2019/12/07')).toEqual(\n      { match: true, params: { day: '07', month: '12', year: '2019' } }\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Int","suites":["matchPath"],"updatePoint":{"line":42,"column":32},"line":42,"code":"  it('transforms a param for Int', () => {\n    expect(matchPath('/post/{id}', '/post/1337')).toEqual({\n      match: true,\n      params: { id: '1337' },\n    })\n\n    expect(matchPath('/post/{id:Int}', '/post/1337')).toEqual({\n      match: true,\n      params: { id: 1337 },\n    })\n\n    expect(matchPath('/post/id-{id:Int}', '/post/id-37')).toEqual({\n      match: true,\n      params: { id: 37 },\n    })\n\n    expect(matchPath('/post/{id:Int}-id', '/post/78-id')).toEqual({\n      match: true,\n      params: { id: 78 },\n    })\n\n    expect(matchPath('/post/id-{id:Int}-id', '/post/id-789-id')).toEqual({\n      match: true,\n      params: { id: 789 },\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Boolean","suites":["matchPath"],"updatePoint":{"line":69,"column":36},"line":69,"code":"  it('transforms a param for Boolean', () => {\n    expect(matchPath('/signedUp/{status:Boolean}', '/signedUp/true')).toEqual({\n      match: true,\n      params: {\n        status: true,\n      },\n    })\n\n    expect(matchPath('/signedUp/{status:Boolean}', '/signedUp/false')).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/x-{status:Boolean}', '/signedUp/x-false')\n    ).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/{status:Boolean}y', '/signedUp/falsey')\n    ).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/e{status:Boolean}y', '/signedUp/efalsey')\n    ).toEqual({\n      match: true,\n      params: {\n        status: false,\n      },\n    })\n\n    expect(\n      matchPath('/signedUp/{status:Boolean}', '/signedUp/somethingElse')\n    ).toEqual({\n      match: false,\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Floats","suites":["matchPath"],"updatePoint":{"line":118,"column":35},"line":118,"code":"  it('transforms a param for Floats', () => {\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/1.58')\n    ).toEqual({\n      match: true,\n      params: {\n        floatyMcFloat: 1.58,\n      },\n    })\n\n    expect(matchPath('/version/{floatyMcFloat:Float}', '/version/626')).toEqual(\n      {\n        match: true,\n        params: {\n          floatyMcFloat: 626,\n        },\n      }\n    )\n\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/+0.92')\n    ).toEqual({\n      match: true,\n      params: {\n        floatyMcFloat: 0.92,\n      },\n    })\n\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/-5.5')\n    ).toEqual({\n      match: true,\n      params: {\n        floatyMcFloat: -5.5,\n      },\n    })\n\n    expect(matchPath('/version/{floatyMcFloat:Float}', '/version/4e8')).toEqual(\n      {\n        match: true,\n        params: {\n          floatyMcFloat: 4e8,\n        },\n      }\n    )\n\n    expect(\n      matchPath('/version/{floatyMcFloat:Float}', '/version/noMatchMe')\n    ).toEqual({\n      match: false,\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"transforms a param for Globs","suites":["matchPath"],"updatePoint":{"line":171,"column":34},"line":171,"code":"  it('transforms a param for Globs', () => {\n    //single\n    expect(matchPath('/version/{path...}', '/version/path/to/file')).toEqual({\n      match: true,\n      params: {\n        path: 'path/to/file',\n      },\n    })\n\n    //  multiple\n    expect(matchPath('/a/{a...}/b/{b...}/c', '/a/1/2/b/3/4/c')).toEqual({\n      match: true,\n      params: {\n        a: '1/2',\n        b: '3/4',\n      },\n    })\n\n    // adjacent\n    expect(matchPath('/a/{a...}{b...}/c', '/a/1/2/3/4/c')).toEqual({\n      match: true,\n      params: {\n        a: '1/2/3/4',\n        b: '',\n      },\n    })\n\n    // adjacent with a slash\n    expect(matchPath('/a/{a...}/{b...}/c', '/a/1/2/3/4/c')).toEqual({\n      match: true,\n      params: {\n        a: '1/2/3',\n        b: '4',\n      },\n    })\n\n    // prefixed\n    expect(matchPath('/a-{a...}', '/a-1/2')).toEqual({\n      match: true,\n      params: {\n        a: '1/2',\n      },\n    })\n\n    // suffixed\n    expect(matchPath('/{a...}-a', '/1/2-a')).toEqual({\n      match: true,\n      params: {\n        a: '1/2',\n      },\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles multiple typed params","suites":["matchPath"],"updatePoint":{"line":224,"column":35},"line":224,"code":"  it('handles multiple typed params', () => {\n    expect(\n      matchPath(\n        '/dashboard/document/{id:Int}/{version:Float}/edit/{edit:Boolean}/{path...}/terminate',\n        '/dashboard/document/44/1.8/edit/false/path/to/file/terminate'\n      )\n    ).toEqual({\n      match: true,\n      params: { id: 44, version: 1.8, edit: false, path: 'path/to/file' },\n    })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"rejects \"%s\" path that does not begin with a slash","suites":["validatePath"],"line":238,"code":"  it.each(['invalid/route', '{id}/invalid/route', ' /invalid/route'])(\n    'rejects \"%s\" path that does not begin with a slash',\n    (path) => {\n      expect(validatePath.bind(null, path)).toThrowError(\n        `Route path does not begin with a slash: \"${path}\"`\n      )\n    }\n  )","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"rejects paths with spaces: \"%s\"","suites":["validatePath"],"line":247,"code":"  it.each([\n    '/path/to/user profile',\n    '/path/ to/userprofile',\n    '/path/to /userprofile',\n    '/path/to/users/{id: Int}',\n    '/path/to/users/{id :Int}',\n    '/path/to/users/{id : Int}',\n    '/path/to/users/{ id:Int}',\n    '/path/to/users/{id:Int }',\n    '/path/to/users/{ id:Int }',\n    '/path/to/users/{ id : Int }',\n  ])('rejects paths with spaces: \"%s\"', (path) => {\n    expect(validatePath.bind(null, path)).toThrowError(\n      `Route path contains spaces: \"${path}\"`\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"rejects path \"%s\" with duplicate params","suites":["validatePath"],"line":264,"code":"  it.each([\n    '/users/{id}/photos/{id}',\n    '/users/{id}/photos/{id:Int}',\n    '/users/{id:Int}/photos/{id}',\n    '/users/{id:Int}/photos/{id:Int}',\n  ])('rejects path \"%s\" with duplicate params', (path) => {\n    expect(validatePath.bind(null, path)).toThrowError(\n      `Route path contains duplicate parameter: \"${path}\"`\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"validates correct path \"%s\"","suites":["validatePath"],"line":275,"code":"  it.each([\n    '/users/{id:Int}/photos/{photo_id:Int}',\n    '/users/{id}/photos/{photo_id}',\n    '/users/{id}/photos/{photo_id}?format=jpg&w=400&h=400',\n    '/',\n    '/404',\n    '/about',\n    '/about/redwood',\n  ])('validates correct path \"%s\"', (path) => {\n    expect(validatePath.bind(null, path)).not.toThrow()\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"deals silently with an empty search string","suites":["parseSearch"],"updatePoint":{"line":289,"column":48},"line":289,"code":"  it('deals silently with an empty search string', () => {\n    expect(parseSearch('')).toEqual({})\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"correctly parses a search string","suites":["parseSearch"],"updatePoint":{"line":293,"column":38},"line":293,"code":"  it('correctly parses a search string', () => {\n    expect(\n      parseSearch('?search=all+dogs+go+to+heaven&category=movies')\n    ).toEqual({ category: 'movies', search: 'all dogs go to heaven' })\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"returns a flat array from query string","suites":["flattenSearchParams"],"updatePoint":{"line":301,"column":44},"line":301,"code":"  it('returns a flat array from query string', () => {\n    expect(\n      flattenSearchParams('?search=all+dogs+go+to+heaven&category=movies')\n    ).toEqual([{ search: 'all dogs go to heaven' }, { category: 'movies' }])\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"returns an empty array","suites":["flattenSearchParams"],"updatePoint":{"line":307,"column":28},"line":307,"code":"  it('returns an empty array', () => {\n    expect(flattenSearchParams('')).toEqual([])\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"throws an error on missing params","suites":["replaceParams"],"updatePoint":{"line":313,"column":39},"line":313,"code":"  it('throws an error on missing params', () => {\n    expect(() => replaceParams('/tags/{tag}', {})).toThrowError(\n      \"Missing parameter 'tag' for route '/tags/{tag}'.\"\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"replaces named parameter with value from the args object","suites":["replaceParams"],"updatePoint":{"line":319,"column":62},"line":319,"code":"  it('replaces named parameter with value from the args object', () => {\n    expect(replaceParams('/tags/{tag}', { tag: 'code' })).toEqual('/tags/code')\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"replaces multiple named parameters with values from the args object","suites":["replaceParams"],"updatePoint":{"line":323,"column":73},"line":323,"code":"  it('replaces multiple named parameters with values from the args object', () => {\n    expect(\n      replaceParams('/posts/{year}/{month}/{day}', {\n        year: '2021',\n        month: '09',\n        day: '19',\n      })\n    ).toEqual('/posts/2021/09/19')\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"appends extra parameters as search parameters","suites":["replaceParams"],"updatePoint":{"line":333,"column":51},"line":333,"code":"  it('appends extra parameters as search parameters', () => {\n    expect(replaceParams('/extra', { foo: 'foo' })).toEqual('/extra?foo=foo')\n    expect(replaceParams('/tags/{tag}', { tag: 'code', foo: 'foo' })).toEqual(\n      '/tags/code?foo=foo'\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles falsy parameter values","suites":["replaceParams"],"updatePoint":{"line":340,"column":36},"line":340,"code":"  it('handles falsy parameter values', () => {\n    expect(replaceParams('/category/{categoryId}', { categoryId: 0 })).toEqual(\n      '/category/0'\n    )\n\n    expect(replaceParams('/boolean/{bool}', { bool: false })).toEqual(\n      '/boolean/false'\n    )\n\n    expect(() =>\n      replaceParams('/undef/{undef}', { undef: undefined })\n    ).toThrowError(\"Missing parameter 'undef' for route '/undef/{undef}'.\")\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles typed params","suites":["replaceParams"],"updatePoint":{"line":354,"column":26},"line":354,"code":"  it('handles typed params', () => {\n    expect(replaceParams('/post/{id:Int}', { id: 7 })).toEqual('/post/7')\n    expect(replaceParams('/post/{id:Float}', { id: 7 })).toEqual('/post/7')\n    expect(replaceParams('/post/{id:Bool}', { id: true })).toEqual('/post/true')\n    expect(replaceParams('/post/{id:Bool}', { id: false })).toEqual(\n      '/post/false'\n    )\n    expect(replaceParams('/post/{id:String}', { id: 7 })).toEqual('/post/7')\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"},{"name":"handles globs","suites":["replaceParams"],"updatePoint":{"line":364,"column":19},"line":364,"code":"  it('handles globs', () => {\n    expect(replaceParams('/path/{path...}', { path: 'foo/bar' })).toEqual(\n      '/path/foo/bar'\n    )\n\n    expect(replaceParams('/a/{b...}/c/{d...}/e', { b: 1, d: 2 })).toEqual(\n      '/a/1/c/2/e'\n    )\n  })","file":"util.test.ts","skipped":false,"dir":"packages/router/src/__tests__"}]}