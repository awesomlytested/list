{"repo":"mui-org/material-ui","url":"https://github.com/mui-org/material-ui","branch":"master","configs":[{"lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@mui/base","lang":"js","dir":"packages/mui-base/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@mui/icons-material","lang":"js","dir":"packages/mui-icons-material/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@mui/joy","lang":"js","dir":"packages/mui-joy/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"@mui/lab","lang":"js","dir":"packages/mui-lab/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@mui/material","lang":"js","dir":"packages/mui-material/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@mui/styles","lang":"js","dir":"packages/mui-styles/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"typescript-to-proptypes","lang":"ts","dir":"packages/typescript-to-proptypes/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should loop the tab key","suites":["e2e","<TrapFocus />"],"updatePoint":{"line":77,"column":31},"line":77,"code":"    it('should loop the tab key', async () => {\n      await renderFixture('Unstable_TrapFocus/OpenTrapFocus');\n      await expect(screen.getByTestId('root')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('x')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('cancel')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('ok')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('x')).toHaveFocus();\n      await screen.getByTestId('initial-focus').then($element => $element.focus());\n      await expect(screen.getByTestId('root')).toHaveFocus();\n      await screen.getByText('x').then($element => $element.focus());\n      await page.keyboard.press('Shift+Tab');\n      await expect(screen.getByText('ok')).toHaveFocus();\n    });","file":"e2e/index.test.ts","skipped":false,"dir":"test"},{"name":"should loop the tab key after activation","suites":["e2e","<TrapFocus />"],"updatePoint":{"line":94,"column":48},"line":94,"code":"    it('should loop the tab key after activation', async () => {\n      await renderFixture('Unstable_TrapFocus/DefaultOpenLazyTrapFocus');\n      await expect(screen.getByTestId('initial-focus')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('close')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('noop')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('close')).toHaveFocus();\n      await page.keyboard.press('Enter');\n      await expect(screen.getByTestId('initial-focus')).toHaveFocus();\n    });","file":"e2e/index.test.ts","skipped":false,"dir":"test"},{"name":"should focus on first focus element after last has received a tab click","suites":["e2e","<TrapFocus />"],"updatePoint":{"line":106,"column":79},"line":106,"code":"    it('should focus on first focus element after last has received a tab click', async () => {\n      await renderFixture('Unstable_TrapFocus/OpenTrapFocus');\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('x')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('cancel')).toHaveFocus();\n      await page.keyboard.press('Tab');\n      await expect(screen.getByText('ok')).toHaveFocus();\n    });","file":"e2e/index.test.ts","skipped":false,"dir":"test"},{"name":"should loop the arrow key","suites":["e2e","<Rating />"],"updatePoint":{"line":117,"column":33},"line":117,"code":"    it('should loop the arrow key', async () => {\n      await renderFixture('Rating/BasicRating');\n      await page.focus('input[name=\"rating-test\"]:checked');\n      await expect(page.evaluateHandle(() => document.activeElement)).toHaveAttribute('value', '1');\n      await page.keyboard.press('ArrowLeft');\n      await expect(page.evaluateHandle(() => document.activeElement)).to.toHaveAttribute('value', '');\n      await page.keyboard.press('ArrowLeft');\n      await expect(page.evaluateHandle(() => document.activeElement)).to.toHaveAttribute('value', '5');\n    });","file":"e2e/index.test.ts","skipped":false,"dir":"test"},{"name":"creates screenshots of ","suites":["visual regressions"],"updatePoint":{"line":91,"column":41},"line":91,"code":"      it(`creates screenshots of ${route}`, async function test() {\n        // With the playwright inspector we might want to call `page.pause` which would lead to a timeout.\n        if (process.env.PWDEBUG) {\n          this.timeout(0);\n        }\n\n        const testcase = await renderFixture(index);\n        await takeScreenshot({\n          testcase,\n          route\n        });\n      });","file":"regressions/index.test.js","skipped":false,"dir":"test"},{"name":"should handle focus-visible correctly","suites":["visual regressions","Rating"],"updatePoint":{"line":105,"column":47},"line":105,"code":"      it('should handle focus-visible correctly', async () => {\n        const index = routes.findIndex(route => route === '/regression-Rating/FocusVisibleRating');\n        const testcase = await renderFixture(index);\n        await page.keyboard.press('Tab');\n        await takeScreenshot({\n          testcase,\n          route: '/regression-Rating/FocusVisibleRating2'\n        });\n        await page.keyboard.press('ArrowLeft');\n        await takeScreenshot({\n          testcase,\n          route: '/regression-Rating/FocusVisibleRating3'\n        });\n      });","file":"regressions/index.test.js","skipped":false,"dir":"test"},{"name":"should handle focus-visible with precise ratings correctly","suites":["visual regressions","Rating"],"updatePoint":{"line":119,"column":68},"line":119,"code":"      it('should handle focus-visible with precise ratings correctly', async () => {\n        const index = routes.findIndex(route => route === '/regression-Rating/PreciseFocusVisibleRating');\n        const testcase = await renderFixture(index);\n        await page.keyboard.press('Tab');\n        await takeScreenshot({\n          testcase,\n          route: '/regression-Rating/PreciseFocusVisibleRating2'\n        });\n        await page.keyboard.press('ArrowRight');\n        await takeScreenshot({\n          testcase,\n          route: '/regression-Rating/PreciseFocusVisibleRating3'\n        });\n      });","file":"regressions/index.test.js","skipped":false,"dir":"test"},{"name":"should handle change in pointer correctly","suites":["visual regressions","DateTimePicker"],"updatePoint":{"line":135,"column":51},"line":135,"code":"      it('should handle change in pointer correctly', async () => {\n        const index = routes.findIndex(route => route === '/regression-pickers/UncontrolledDateTimePicker');\n        const testcase = await renderFixture(index);\n        await page.click('[aria-label=\"Choose date\"]');\n        await page.click('[aria-label*=\"switch to year view\"]');\n        await takeScreenshot({\n          testcase: await page.waitForSelector('[role=\"dialog\"]'),\n          route: '/regression-pickers/UncontrolledDateTimePicker-desktop'\n        });\n        await page.evaluate(() => {\n          window.muiTogglePickerMode();\n        });\n        await takeScreenshot({\n          testcase,\n          route: '/regression-pickers/UncontrolledDateTimePicker-mobile'\n        });\n      });","file":"regressions/index.test.js","skipped":false,"dir":"test"},{"name":"returns immediate DOM nodes","suites":["findOutermostIntrinsic"],"updatePoint":{"line":26,"column":33},"line":26,"code":"  it('returns immediate DOM nodes', () => {\n    expectIntrinsic( /*#__PURE__*/React.createElement(\"div\", null, \"Hello, World!\"), 'div');\n  });","file":"utils/findOutermostIntrinsic.test.js","skipped":false,"dir":"test"},{"name":"only returns the outermost","suites":["findOutermostIntrinsic"],"updatePoint":{"line":29,"column":32},"line":29,"code":"  it('only returns the outermost', () => {\n    expectIntrinsic( /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(\"div\", null, \"Hello, World!\")), 'span');\n  });","file":"utils/findOutermostIntrinsic.test.js","skipped":false,"dir":"test"},{"name":"ignores components","suites":["findOutermostIntrinsic"],"updatePoint":{"line":32,"column":24},"line":32,"code":"  it('ignores components', () => {\n    expectIntrinsic( /*#__PURE__*/React.createElement(Headless, null, /*#__PURE__*/React.createElement(\"div\", null, \"Hello, World!\")), 'div');\n    expectIntrinsic( /*#__PURE__*/React.createElement(Headless, null, /*#__PURE__*/React.createElement(Headless, null, /*#__PURE__*/React.createElement(\"div\", null, \"Hello, World!\"))), 'div');\n    expectIntrinsic( /*#__PURE__*/React.createElement(Headless, null, /*#__PURE__*/React.createElement(Headless, null, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Headless, null, /*#__PURE__*/React.createElement(\"span\", null, \"Hello, World!\"))))), 'div');\n  });","file":"utils/findOutermostIntrinsic.test.js","skipped":false,"dir":"test"},{"name":"can handle that no DOM node is rendered","suites":["findOutermostIntrinsic"],"updatePoint":{"line":37,"column":45},"line":37,"code":"  it('can handle that no DOM node is rendered', () => {\n    expectIntrinsic( /*#__PURE__*/React.createElement(Headless, null, false && /*#__PURE__*/React.createElement(Headless, null)), null);\n  });","file":"utils/findOutermostIntrinsic.test.js","skipped":false,"dir":"test"},{"name":"passes if the message is exactly the same","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":14,"column":49},"line":14,"code":"    it('passes if the message is exactly the same', () => {\n      expect(() => console.error('expected message')).toErrorDev('expected message');\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"passes if the message is a subset","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":17,"column":41},"line":17,"code":"    it('passes if the message is a subset', () => {\n      expect(() => console.error('expected message')).toErrorDev('pected messa');\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"passes if multiple messages are expected","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":20,"column":48},"line":20,"code":"    it('passes if multiple messages are expected', () => {\n      expect(() => {\n        console.error('expected message');\n        console.error('another message');\n      }).toErrorDev(['expected message', 'another message']);\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"fails if an expected console.error call wasnt recorded with a useful stacktrace","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":26,"column":87},"line":26,"code":"    it('fails if an expected console.error call wasnt recorded with a useful stacktrace', () => {\n      let caughtError;\n\n      try {\n        console.error('expected message');\n        expect(() => {}).toErrorDev('expected message');\n      } catch (error) {\n        caughtError = error;\n      }\n\n      expect(caughtError).to.have.property('stack');\n      expect(caughtError.stack).to.include('Could not match the following console.error calls. ' + \"Make sure previous actions didn't call console.error by wrapping them in expect(() => {}).not.toErrorDev(): \\n\\n\" + '  - \"expected message\"\\n' + '    at Context.' // `Context.it` in node 12.x, `Context.<anonymous>` in later node version\n      ); // check that the top stackframe points to this test\n      // if this test is moved to another file the next assertion fails\n\n      expect(caughtError.stack).to.match(/- \"expected message\"\\s+at Context\\.(<anonymous>|it) \\(.+\\/initMatchers\\.test\\.js:\\d+:\\d+\\)/);\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"is case sensitive","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":43,"column":25},"line":43,"code":"    it('is case sensitive', () => {\n      let caughtError;\n\n      try {\n        expect(() => console.error('expected Message')).toErrorDev('expected message');\n      } catch (error) {\n        caughtError = error;\n      }\n\n      expect(caughtError).to.have.property('stack');\n      expect(caughtError.stack).to.include('Recorded unexpected console.error calls: \\n\\n' + '  - Expected #1 \"expected message\" to be included in \\n' + '\"expected Message\"\\n' + '    at callback'); // check that the top stackframe points to this test\n      // if this test is moved to another file the next assertion fails\n\n      expect(caughtError.stack).to.match(/\"expected Message\"\\s+at callback \\(.+\\/initMatchers\\.test\\.js:\\d+:\\d+\\)/);\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"fails if the order of calls does not match","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":58,"column":50},"line":58,"code":"    it('fails if the order of calls does not match', () => {\n      expect(() => {\n        expect(() => {\n          console.error('another message');\n          console.error('expected message');\n        }).toErrorDev(['expected message', 'another message']);\n      }).to.throw('Recorded unexpected console.error calls');\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"fails if there are fewer messages than expected","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":66,"column":55},"line":66,"code":"    it('fails if there are fewer messages than expected', () => {\n      expect(() => {\n        expect(() => {\n          console.error('expected message');\n        }).toErrorDev(['expected message', 'another message']);\n      }).to.throw('Could not match the following console.error calls');\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"passes if no messages were recored if expected","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":73,"column":54},"line":73,"code":"    it('passes if no messages were recored if expected', () => {\n      expect(() => {}).not.toErrorDev();\n      expect(() => {}).not.toErrorDev([]);\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"fails if no arguments are used as a way of negating","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":77,"column":59},"line":77,"code":"    it('fails if no arguments are used as a way of negating', () => {\n      expect(() => {\n        expect(() => {}).toErrorDev();\n      }).to.throw(\"Expected to call console.error but didn't provide messages. \" + \"If you don't expect any messages prefer `expect().not.toErrorDev();\");\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"fails if arguments are passed when negated","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":82,"column":50},"line":82,"code":"    it('fails if arguments are passed when negated', () => {\n      expect(() => {\n        expect(() => {}).not.toErrorDev('not unexpected?');\n      }).to.throw('Expected no call to console.error but provided messages. ' + \"If you want to make sure a certain message isn't logged prefer the positive. \" + 'By expecting certain messages you automatically expect that no other messages are logged');\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"ignores `false` messages","suites":["custom matchers","toErrorDev()"],"updatePoint":{"line":87,"column":32},"line":87,"code":"    it('ignores `false` messages', () => {\n      const isReact16 = false;\n      expect(() => {\n        expect(() => {}).toErrorDev([isReact16 && 'some legacy error message']);\n      }).not.to.throw();\n    });","file":"utils/initMatchers.test.js","skipped":false,"dir":"test"},{"name":"","suites":["mochaHooks","afterEach","throws on unexpected console.(warn|error) in afterEach"],"updatePoint":{"line":20,"column":10},"line":20,"code":"      it('', () => {\n        console.warn('unexpected warning');\n        console.error('unexpected error');\n      });","file":"utils/mochaHooks.test.js","skipped":false,"dir":"test"},{"name":"","suites":["mochaHooks","afterEach","dedupes missing act() warnings by component"],"updatePoint":{"line":54,"column":10},"line":54,"code":"      it('', () => {\n        const Child = /*#__PURE__*/React.forwardRef(function Child() {\n          React.useEffect(() => {});\n          React.useEffect(() => {});\n          return null;\n        });\n        let unsafeSetState;\n\n        function Parent() {\n          const [state, setState] = React.useState(0);\n          unsafeSetState = setState;\n          React.useEffect(() => {});\n          React.useEffect(() => {});\n          return /*#__PURE__*/React.createElement(Child, {\n            rerender: state\n          });\n        }\n\n        render( /*#__PURE__*/React.createElement(Parent, null)); // not wrapped in act()\n\n        unsafeSetState(1); // make sure effects are flushed\n\n        act(() => {});\n      });","file":"utils/mochaHooks.test.js","skipped":false,"dir":"test"},{"name":"shallow renders the current wrapper one level deep","suites":["until"],"updatePoint":{"line":12,"column":56},"line":12,"code":"  it('shallow renders the current wrapper one level deep', () => {\n    const EnhancedDiv = hoc(Div);\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(EnhancedDiv, null)), 'Div');\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(\"div\", null))).to.equal(true);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"shallow renders the current wrapper several levels deep","suites":["until"],"updatePoint":{"line":17,"column":61},"line":17,"code":"  it('shallow renders the current wrapper several levels deep', () => {\n    const EnhancedDiv = hoc(hoc(hoc(Div)));\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(EnhancedDiv, null)), 'Div');\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(\"div\", null))).to.equal(true);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"stops shallow rendering when the wrapper is empty","suites":["until"],"updatePoint":{"line":22,"column":55},"line":22,"code":"  it('stops shallow rendering when the wrapper is empty', () => {\n    const nullHoc = () => () => null;\n\n    const EnhancedDiv = nullHoc();\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(EnhancedDiv, null)), 'Div');\n    expect(wrapper.html()).to.equal(null);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"shallow renders as much as possible when no selector is provided","suites":["until"],"updatePoint":{"line":29,"column":70},"line":29,"code":"  it('shallow renders as much as possible when no selector is provided', () => {\n    const EnhancedDiv = hoc(hoc(Div));\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(EnhancedDiv, null)));\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(\"div\", null))).to.equal(true);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"shallow renders the current wrapper even if the selector never matches","suites":["until"],"updatePoint":{"line":34,"column":76},"line":34,"code":"  it('shallow renders the current wrapper even if the selector never matches', () => {\n    const EnhancedDiv = hoc(Div);\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(EnhancedDiv, null)), 'NotDiv');\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(\"div\", null))).to.equal(true);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"stops shallow rendering when it encounters a HTML element","suites":["until"],"updatePoint":{"line":39,"column":63},"line":39,"code":"  it('stops shallow rendering when it encounters a HTML element', () => {\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Div, null))), 'Div');\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Div, null)))).to.equal(true);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"throws when until called on an empty wrapper","suites":["until"],"updatePoint":{"line":43,"column":50},"line":43,"code":"  it('throws when until called on an empty wrapper', () => {\n    expect(() => {\n      until.call(shallow( /*#__PURE__*/React.createElement(Div, null)).find('Foo'), 'div');\n    }).to.throw(Error);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"shallow renders non-root wrappers","suites":["until"],"updatePoint":{"line":48,"column":39},"line":48,"code":"  it('shallow renders non-root wrappers', () => {\n    const Container = () => /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Div, null));\n\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(Container, null)).find(Div));\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(\"div\", null))).to.equal(true);\n  }); // eslint-disable-next-line react/prefer-stateless-function","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"context propagation passes down context from the root component","suites":["until"],"updatePoint":{"line":65,"column":69},"line":65,"code":"  it('context propagation passes down context from the root component', () => {\n    const EnhancedFoo = hoc(Foo);\n    const options = {\n      context: {\n        quux: true\n      }\n    };\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(EnhancedFoo, null), options), 'Foo', options);\n    expect(wrapper.context('quux')).to.equal(true);\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(Div, null))).to.equal(true);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"context propagation passes down context from an intermediary component","suites":["until"],"updatePoint":{"line":91,"column":76},"line":91,"code":"  it('context propagation passes down context from an intermediary component', () => {\n    const EnhancedBar = hoc(Bar);\n    const wrapper = until.call(shallow( /*#__PURE__*/React.createElement(EnhancedBar, null)), 'Foo');\n    expect(wrapper.context('quux')).to.equal(true);\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(Div, null))).to.equal(true);\n  });","file":"utils/until.test.js","skipped":false,"dir":"test"},{"name":"wires up aria attributes","suites":["<TabContext /> integration"],"updatePoint":{"line":12,"column":30},"line":12,"code":"  it('wires up aria attributes', () => {\n    const {\n      getAllByRole,\n      setProps\n    } = render( /*#__PURE__*/React.createElement(TabContext, {\n      value: \"0\"\n    }, /*#__PURE__*/React.createElement(TabList, null, /*#__PURE__*/React.createElement(Tab, {\n      label: \"label one\",\n      value: \"0\"\n    }), /*#__PURE__*/React.createElement(Tab, {\n      label: \"label two\",\n      value: \"1\"\n    })), /*#__PURE__*/React.createElement(TabPanel, {\n      value: \"0\"\n    }), /*#__PURE__*/React.createElement(TabPanel, {\n      value: \"1\"\n    })));\n    const [tabOne, tabTwo] = getAllByRole('tab');\n    expect(tabOne).to.have.attribute('aria-selected', 'true');\n    expect(tabTwo).to.have.attribute('aria-selected', 'false');\n    let activePanel = document.getElementById(tabOne.getAttribute('aria-controls'));\n    expect(activePanel).not.toBeInaccessible();\n    expect(activePanel).toHaveAccessibleName('label one');\n    setProps({\n      value: '1'\n    });\n    expect(tabOne).to.have.attribute('aria-selected', 'false');\n    expect(tabTwo).to.have.attribute('aria-selected', 'true');\n    activePanel = document.getElementById(tabTwo.getAttribute('aria-controls'));\n    expect(activePanel).not.toBeInaccessible();\n    expect(activePanel).toHaveAccessibleName('label two');\n  });","file":"integration/Tabs.test.js","skipped":false,"dir":"packages/mui-lab/test"},{"name":"is automatically labelled by its DialogTitle","suites":["<Dialog /> integration"],"updatePoint":{"line":10,"column":50},"line":10,"code":"  it('is automatically labelled by its DialogTitle', () => {\n    render( /*#__PURE__*/React.createElement(Dialog, {\n      open: true\n    }, /*#__PURE__*/React.createElement(DialogTitle, null, \"Set backup account\")));\n    expect(screen.getByRole('dialog')).toHaveAccessibleName('Set backup account');\n  });","file":"integration/DialogIntegration.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"can be manually labelled","suites":["<Dialog /> integration"],"updatePoint":{"line":16,"column":30},"line":16,"code":"  it('can be manually labelled', () => {\n    render( /*#__PURE__*/React.createElement(Dialog, {\n      open: true,\n      \"aria-labelledby\": \"dialog-title\"\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"dialog-title\"\n    }, \"Set backup account\")));\n    const dialog = screen.getByRole('dialog');\n    expect(dialog).toHaveAccessibleName('Set backup account');\n    expect(dialog).to.have.attr('aria-labelledby', 'dialog-title');\n  });","file":"integration/DialogIntegration.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"is part of the DOM by default but hidden","suites":["<Menu /> integration"],"updatePoint":{"line":66,"column":46},"line":66,"code":"  it('is part of the DOM by default but hidden', () => {\n    const {\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(ButtonMenu, null));\n    expect(getByRole('menu', {\n      hidden: true\n    })).toBeInaccessible();\n  });","file":"integration/Menu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"does not gain any focus when mounted ","suites":["<Menu /> integration"],"updatePoint":{"line":74,"column":43},"line":74,"code":"  it('does not gain any focus when mounted ', () => {\n    const {\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(ButtonMenu, null));\n    expect(getByRole('menu', {\n      hidden: true\n    })).not.to.contain(document.activeElement);\n  });","file":"integration/Menu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should focus the first item on open","suites":["<Menu /> integration"],"updatePoint":{"line":82,"column":41},"line":82,"code":"  it('should focus the first item on open', () => {\n    const {\n      getByRole,\n      getAllByRole\n    } = render( /*#__PURE__*/React.createElement(ButtonMenu, null));\n    const button = getByRole('button', {\n      name: 'open menu'\n    });\n    act(() => {\n      button.focus();\n      button.click();\n    });\n    expect(getAllByRole('menuitem')[0]).toHaveFocus();\n  });","file":"integration/Menu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"changes focus according to keyboard navigation","suites":["<Menu /> integration"],"updatePoint":{"line":96,"column":52},"line":96,"code":"  it('changes focus according to keyboard navigation', () => {\n    const {\n      getAllByRole,\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(ButtonMenu, null));\n    const button = getByRole('button', {\n      name: 'open menu'\n    });\n    act(() => {\n      button.focus();\n      button.click();\n    });\n    const menuitems = getAllByRole('menuitem');\n    fireEvent.keyDown(menuitems[0], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[0]).toHaveFocus();\n    fireEvent.keyDown(menuitems[0], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[2]).toHaveFocus();\n    fireEvent.keyDown(menuitems[2], {\n      key: 'Home'\n    });\n    expect(menuitems[0]).toHaveFocus();\n    fireEvent.keyDown(menuitems[0], {\n      key: 'End'\n    });\n    expect(menuitems[2]).toHaveFocus();\n    fireEvent.keyDown(menuitems[2], {\n      key: 'ArrowRight'\n    });\n    expect(menuitems[2], 'no change on unassociated keys').toHaveFocus();\n  });","file":"integration/Menu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"focuses the selected item when opening","suites":["<Menu /> integration"],"updatePoint":{"line":134,"column":44},"line":134,"code":"  it('focuses the selected item when opening', () => {\n    const {\n      getAllByRole,\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(ButtonMenu, {\n      selectedIndex: 2\n    }));\n    const button = getByRole('button', {\n      name: 'open menu'\n    });\n    act(() => {\n      button.focus();\n      button.click();\n    });\n    expect(getAllByRole('menuitem')[2]).toHaveFocus();\n  });","file":"integration/Menu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"closes the menu when Tabbing while the list is active","suites":["<Menu /> integration","Menu variant differences"],"updatePoint":{"line":313,"column":59},"line":313,"code":"  it('closes the menu when Tabbing while the list is active', () => {\n    render( /*#__PURE__*/React.createElement(ButtonMenu, null));\n    const trigger = screen.getByRole('button');\n    act(() => {\n      trigger.focus();\n      trigger.click();\n    }); // react-transition-group uses one commit per state transition so we need to wait a bit\n\n    fireEvent.keyDown(screen.getAllByRole('menuitem')[0], {\n      key: 'Tab'\n    });\n    clock.tick(0);\n    expect(screen.getByRole('menu', {\n      hidden: true\n    })).toBeInaccessible();\n  });","file":"integration/Menu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"closes the menu when the backdrop is clicked","suites":["<Menu /> integration","Menu variant differences"],"updatePoint":{"line":329,"column":50},"line":329,"code":"  it('closes the menu when the backdrop is clicked', () => {\n    const {\n      getByRole,\n      getByTestId\n    } = render( /*#__PURE__*/React.createElement(ButtonMenu, null));\n    const button = getByRole('button');\n    act(() => {\n      button.focus();\n      button.click();\n    });\n    act(() => {\n      getByTestId('Backdrop').click();\n    });\n    clock.tick(0);\n    expect(getByRole('menu', {\n      hidden: true\n    })).toBeInaccessible();\n  });","file":"integration/Menu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"focuses the specified item on mount","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation"],"updatePoint":{"line":31,"column":43},"line":31,"code":"    it('focuses the specified item on mount', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true\n      }, /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      expect(getAllByRole('menuitem')[0]).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should select the last item when pressing up if the first item is focused","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation"],"updatePoint":{"line":39,"column":81},"line":39,"code":"    it('should select the last item when pressing up if the first item is focused', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = getAllByRole('menuitem');\n      fireEvent.keyDown(menuitems[0], {\n        key: 'ArrowUp'\n      });\n      expect(menuitems[2]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should select the second item when pressing down if the first item is selected","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation"],"updatePoint":{"line":56,"column":86},"line":56,"code":"    it('should select the second item when pressing down if the first item is selected', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = getAllByRole('menuitem');\n      fireEvent.keyDown(menuitems[0], {\n        key: 'ArrowDown'\n      });\n      expect(menuitems[1]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should still be focused and focusable when going back and forth","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation"],"updatePoint":{"line":73,"column":71},"line":73,"code":"    it('should still be focused and focusable when going back and forth', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = getAllByRole('menuitem');\n      fireEvent.keyDown(menuitems[0], {\n        key: 'ArrowDown'\n      });\n      fireEvent.keyDown(menuitems[1], {\n        key: 'ArrowUp'\n      });\n      expect(menuitems[0]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should leave tabIndex on the first item after blur","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation"],"updatePoint":{"line":93,"column":58},"line":93,"code":"    it('should leave tabIndex on the first item after blur', () => {\n      const handleBlur = spy();\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true,\n        onBlur: handleBlur\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      expect(document.activeElement).not.to.equal(null);\n      act(() => {\n        document.activeElement.blur();\n      });\n      const menuitems = getAllByRole('menuitem');\n      expect(handleBlur.callCount).to.equal(1);\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n      expect(menuitems[0]).not.toHaveFocus();\n      expect(menuitems[1]).not.toHaveFocus();\n      expect(menuitems[2]).not.toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"can imperatively focus the first item","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation"],"updatePoint":{"line":116,"column":45},"line":116,"code":"    it('can imperatively focus the first item', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = getAllByRole('menuitem');\n      act(() => {\n        menuitems[0].focus();\n      });\n      expect(menuitems[0]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"down arrow can go to all items while not changing tabIndex","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation"],"updatePoint":{"line":133,"column":66},"line":133,"code":"    it('down arrow can go to all items while not changing tabIndex', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = getAllByRole('menuitem');\n      fireEvent.keyDown(menuitems[0], {\n        key: 'ArrowDown'\n      });\n      expect(menuitems[1]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n      fireEvent.keyDown(menuitems[1], {\n        key: 'ArrowDown'\n      });\n      expect(menuitems[2]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should auto focus the second item","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation - preselected item"],"updatePoint":{"line":159,"column":41},"line":159,"code":"    it('should auto focus the second item', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, {\n        autoFocus: true,\n        selected: true,\n        tabIndex: 0\n      }, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = getAllByRole('menuitem');\n      expect(menuitems[1]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', -1);\n      expect(menuitems[1]).to.have.property('tabIndex', 0);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should focus next item on ArrowDown","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation - preselected item"],"updatePoint":{"line":173,"column":43},"line":173,"code":"    it('should focus next item on ArrowDown', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, {\n        autoFocus: true,\n        selected: true,\n        tabIndex: 0\n      }, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = getAllByRole('menuitem');\n      fireEvent.keyDown(menuitems[1], {\n        key: 'ArrowDown'\n      });\n      expect(menuitems[2]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', -1);\n      expect(menuitems[1]).to.have.property('tabIndex', 0);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should focus the first item if no item is focused when pressing ArrowDown","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation - preselected item, no item autoFocus"],"updatePoint":{"line":192,"column":81},"line":192,"code":"    it('should focus the first item if no item is focused when pressing ArrowDown', () => {\n      render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocus: true\n      }, /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = screen.getAllByRole('menuitem');\n      fireEvent.keyDown(screen.getByRole('menu'), {\n        key: 'ArrowDown'\n      });\n      expect(menuitems[0]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', -1);\n      expect(menuitems[1]).to.have.property('tabIndex', 0);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should focus the third item if no item is focused when pressing ArrowUp","suites":["<MenuList> integration","keyboard controls and tabIndex manipulation - preselected item, no item autoFocus"],"updatePoint":{"line":207,"column":79},"line":207,"code":"    it('should focus the third item if no item is focused when pressing ArrowUp', () => {\n      render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocus: true\n      }, /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true,\n        tabIndex: 0\n      }, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 3\")));\n      const menuitems = screen.getAllByRole('menuitem');\n      fireEvent.keyDown(screen.getByRole('menu'), {\n        key: 'ArrowUp'\n      });\n      expect(menuitems[2]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', -1);\n      expect(menuitems[1]).to.have.property('tabIndex', 0);\n      expect(menuitems[2]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should not wrap focus with ArrowUp from first","suites":["<MenuList> integration","MenuList with disableListWrap"],"updatePoint":{"line":240,"column":53},"line":240,"code":"    it('should not wrap focus with ArrowUp from first', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true,\n        disableListWrap: true\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\")));\n      const menuitems = getAllByRole('menuitem');\n      fireEvent.keyDown(menuitems[0], {\n        key: 'ArrowUp'\n      });\n      expect(menuitems[0]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', 0);\n      expect(menuitems[1]).to.have.property('tabIndex', -1);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should not wrap focus with ArrowDown from last","suites":["<MenuList> integration","MenuList with disableListWrap"],"updatePoint":{"line":257,"column":54},"line":257,"code":"    it('should not wrap focus with ArrowDown from last', () => {\n      const {\n        getAllByRole\n      } = render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocusItem: true,\n        disableListWrap: true\n      }, /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, {\n        selected: true\n      }, \"Menu Item 2\")));\n      const menuitems = getAllByRole('menuitem');\n      fireEvent.keyDown(menuitems[1], {\n        key: 'ArrowDown'\n      });\n      expect(menuitems[1]).toHaveFocus();\n      expect(menuitems[0]).to.have.property('tabIndex', -1);\n      expect(menuitems[1]).to.have.property('tabIndex', 0);\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should skip divider and disabled menu item","suites":["<MenuList> integration","MenuList with disableListWrap"],"updatePoint":{"line":275,"column":48},"line":275,"code":"  it('should skip divider and disabled menu item', () => {\n    render( /*#__PURE__*/React.createElement(MenuList, {\n      autoFocus: true\n    }, /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 1\"), /*#__PURE__*/React.createElement(Divider, {\n      component: \"li\"\n    }), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 3\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 4\")));\n    const menuitems = screen.getAllByRole('menuitem');\n    fireEvent.keyDown(screen.getByRole('menu'), {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[0]).toHaveFocus();\n    fireEvent.keyDown(menuitems[0], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[3]).toHaveFocus();\n    fireEvent.keyDown(menuitems[3], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[0]).toHaveFocus(); // and ArrowUp again\n\n    fireEvent.keyDown(menuitems[0], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[3]).toHaveFocus();\n    fireEvent.keyDown(menuitems[3], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[0]).toHaveFocus();\n    fireEvent.keyDown(menuitems[0], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[3]).toHaveFocus();\n  });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should stay on a single item if it is the only focusable one","suites":["<MenuList> integration","MenuList with disableListWrap"],"updatePoint":{"line":318,"column":66},"line":318,"code":"  it('should stay on a single item if it is the only focusable one', () => {\n    render( /*#__PURE__*/React.createElement(MenuList, {\n      autoFocus: true\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 3\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 4\")));\n    const menuitems = screen.getAllByRole('menuitem');\n    fireEvent.keyDown(screen.getByRole('menu'), {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[1]).toHaveFocus();\n  });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should keep focus on the menu if all items are disabled","suites":["<MenuList> integration","MenuList with disableListWrap"],"updatePoint":{"line":350,"column":61},"line":350,"code":"  it('should keep focus on the menu if all items are disabled', () => {\n    const {\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(MenuList, {\n      autoFocus: true\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 3\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 4\")));\n    const menu = getByRole('menu');\n    fireEvent.keyDown(menu, {\n      key: 'Home'\n    });\n    expect(menu).toHaveFocus();\n    fireEvent.keyDown(menu, {\n      key: 'ArrowDown'\n    });\n    expect(menu).toHaveFocus();\n    fireEvent.keyDown(menu, {\n      key: 'ArrowDown'\n    });\n    expect(menu).toHaveFocus();\n    fireEvent.keyDown(menu, {\n      key: 'End'\n    });\n    expect(menu).toHaveFocus();\n    fireEvent.keyDown(menu, {\n      key: 'ArrowUp'\n    });\n    expect(menu).toHaveFocus();\n  });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should allow focus on disabled items when disabledItemsFocusable=true","suites":["<MenuList> integration","MenuList with disableListWrap"],"updatePoint":{"line":386,"column":75},"line":386,"code":"  it('should allow focus on disabled items when disabledItemsFocusable=true', () => {\n    render( /*#__PURE__*/React.createElement(MenuList, {\n      autoFocus: true,\n      disabledItemsFocusable: true\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 1\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 2\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 3\"), /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"Menu Item 4\")));\n    const menuitems = screen.getAllByRole('menuitem');\n    fireEvent.keyDown(screen.getByRole('menu'), {\n      key: 'Home'\n    });\n    expect(menuitems[0]).toHaveFocus();\n    fireEvent.keyDown(menuitems[0], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[1]).toHaveFocus();\n    fireEvent.keyDown(menuitems[1], {\n      key: 'ArrowDown'\n    });\n    expect(menuitems[2]).toHaveFocus();\n    fireEvent.keyDown(menuitems[2], {\n      key: 'End'\n    });\n    expect(menuitems[3]).toHaveFocus();\n    fireEvent.keyDown(menuitems[3], {\n      key: 'ArrowUp'\n    });\n    expect(menuitems[2]).toHaveFocus();\n  });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"selects the first item starting with the character","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":428,"column":58},"line":428,"code":"    it('selects the first item starting with the character', () => {\n      const {\n        getByRole,\n        getByText\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, null, \"Arizona\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Berizona\")));\n      const menu = getByRole('menu');\n      act(() => {\n        menu.focus();\n      });\n      fireEvent.keyDown(menu, {\n        key: 'a'\n      });\n      expect(getByText('Arizona')).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should cycle through items when repeating initial character","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":442,"column":67},"line":442,"code":"    it('should cycle through items when repeating initial character', () => {\n      const {\n        getAllByRole,\n        getByText\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, null, \"Arizona\"), /*#__PURE__*/React.createElement(MenuItem, null, \"aardvark\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Colorado\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Argentina\")));\n      const menuitems = getAllByRole('menuitem');\n      act(() => {\n        menuitems[0].focus();\n      });\n      fireEvent.keyDown(getByText('Arizona'), {\n        key: 'a'\n      });\n      expect(getByText('aardvark')).toHaveFocus();\n      fireEvent.keyDown(getByText('aardvark'), {\n        key: 'a'\n      });\n      expect(getByText('Argentina')).toHaveFocus();\n      fireEvent.keyDown(getByText('Argentina'), {\n        key: 'r'\n      });\n      expect(getByText('aardvark')).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"selects the next item starting with the typed character","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":464,"column":63},"line":464,"code":"    it('selects the next item starting with the typed character', () => {\n      const {\n        getByText\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, null, \"Arizona\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Arcansas\")));\n      act(() => {\n        getByText('Arizona').focus();\n      });\n      fireEvent.keyDown(getByText('Arizona'), {\n        key: 'a'\n      });\n      expect(getByText('Arcansas')).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should not get focusVisible class on click","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":476,"column":50},"line":476,"code":"    it('should not get focusVisible class on click', () => {\n      const {\n        getByText\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, {\n        focusVisibleClassName: \"focus-visible\"\n      }, \"Arizona\")));\n      const menuitem = getByText('Arizona'); // user click\n\n      act(() => {\n        fireEvent.mouseDown(menuitem);\n        menuitem.focus();\n      });\n      fireEvent.click(menuitem);\n      expect(menuitem).toHaveFocus();\n\n      if (programmaticFocusTriggersFocusVisible()) {\n        expect(menuitem).to.have.class('focus-visible');\n      } else {\n        expect(menuitem).not.to.have.class('focus-visible');\n      }\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should not move focus when no match","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":497,"column":43},"line":497,"code":"    it('should not move focus when no match', () => {\n      const {\n        getByText\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, {\n        autoFocus: true\n      }, \"Arizona\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Berizona\")));\n      fireEvent.keyDown(getByText('Arizona'), {\n        key: 'c'\n      });\n      expect(getByText('Arizona')).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should not move focus when keys match current focus","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":508,"column":59},"line":508,"code":"    it('should not move focus when keys match current focus', () => {\n      const {\n        getByText\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, {\n        autoFocus: true\n      }, \"Arizona\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Berizona\")));\n      fireEvent.keyDown(getByText('Arizona'), {\n        key: 'A'\n      });\n      expect(getByText('Arizona')).toHaveFocus();\n      fireEvent.keyDown(getByText('Arizona'), {\n        key: 'r'\n      });\n      expect(getByText('Arizona')).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should not move focus if focus starts on descendant and the key doesnt match","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":523,"column":84},"line":523,"code":"    it('should not move focus if focus starts on descendant and the key doesnt match', () => {\n      const {\n        getByText\n      } = render( /*#__PURE__*/React.createElement(MenuList, null, /*#__PURE__*/React.createElement(MenuItem, null, \"Arizona\"), /*#__PURE__*/React.createElement(MenuItem, null, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\"\n      }, \"Focusable Descendant\"))));\n      const button = getByText('Focusable Descendant');\n      act(() => {\n        button.focus();\n      });\n      fireEvent.keyDown(button, {\n        key: 'z'\n      });\n      expect(button).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"matches rapidly typed text","suites":["<MenuList> integration","MenuList text-based keyboard controls"],"updatePoint":{"line":538,"column":34},"line":538,"code":"    it('matches rapidly typed text', () => {\n      render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocus: true\n      }, /*#__PURE__*/React.createElement(MenuItem, null, \"War\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Worm\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Ordinary\")));\n      fireEvent.keyDown(screen.getByRole('menu'), {\n        key: 'W'\n      });\n      fireEvent.keyDown(screen.getByText('War'), {\n        key: 'o'\n      });\n      expect(screen.getByText('Worm')).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should reset the character buffer after 500ms","suites":["<MenuList> integration","MenuList text-based keyboard controls","time"],"updatePoint":{"line":552,"column":55},"line":552,"code":"      it('should reset the character buffer after 500ms', () => {\n        render( /*#__PURE__*/React.createElement(MenuList, {\n          autoFocus: true\n        }, /*#__PURE__*/React.createElement(MenuItem, null, \"Worm\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Ordinary\")));\n        fireEvent.keyDown(screen.getByRole('menu'), {\n          key: 'W'\n        });\n        clock.tick(501);\n        fireEvent.keyDown(screen.getByText('Worm'), {\n          key: 'o'\n        });\n        expect(screen.getByText('Ordinary')).toHaveFocus();\n      });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should match ignoring hidden text","suites":["<MenuList> integration","MenuList text-based keyboard controls","time"],"updatePoint":{"line":566,"column":41},"line":566,"code":"    it('should match ignoring hidden text', function testHiddenText() {\n      if (!innerTextSupported) {\n        // Will only be executed in Karma tests, since jsdom doesn't support innerText\n        this.skip();\n      }\n\n      render( /*#__PURE__*/React.createElement(MenuList, {\n        autoFocus: true\n      }, /*#__PURE__*/React.createElement(MenuItem, null, \"W\", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: 'none'\n        }\n      }, \"Should not block type focus\"), \"orm\"), /*#__PURE__*/React.createElement(MenuItem, null, \"Ordinary\")));\n      fireEvent.keyDown(screen.getByRole('menu'), {\n        key: 'W'\n      });\n      fireEvent.keyDown(screen.getByText('Worm'), {\n        key: 'o'\n      });\n      expect(screen.getByText('Worm')).toHaveFocus();\n    });","file":"integration/MenuList.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should not be open","suites":["<NestedMenu> integration"],"updatePoint":{"line":54,"column":24},"line":54,"code":"  it('should not be open', () => {\n    const {\n      queryAllByRole\n    } = render( /*#__PURE__*/React.createElement(NestedMenu, null));\n    expect(queryAllByRole('menu')).to.have.length(0);\n  });","file":"integration/NestedMenu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should focus the first item of the first menu when nothing has been selected","suites":["<NestedMenu> integration"],"updatePoint":{"line":60,"column":82},"line":60,"code":"  it('should focus the first item of the first menu when nothing has been selected', () => {\n    const {\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(NestedMenu, {\n      firstMenuOpen: true\n    }));\n    expect(getByRole('menu')).to.have.id('first-menu');\n    expect(within(getByRole('menu')).getAllByRole('menuitem')[0]).toHaveFocus();\n  });","file":"integration/NestedMenu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should focus the first item of the second menu when nothing has been selected","suites":["<NestedMenu> integration"],"updatePoint":{"line":69,"column":83},"line":69,"code":"  it('should focus the first item of the second menu when nothing has been selected', () => {\n    const {\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(NestedMenu, {\n      secondMenuOpen: true\n    }));\n    expect(getByRole('menu')).to.have.id('second-menu');\n    expect(within(getByRole('menu')).getAllByRole('menuitem')[0]).toHaveFocus();\n  });","file":"integration/NestedMenu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should open the first menu after it was closed","suites":["<NestedMenu> integration"],"updatePoint":{"line":78,"column":52},"line":78,"code":"  it('should open the first menu after it was closed', () => {\n    const {\n      getByRole,\n      setProps\n    } = render( /*#__PURE__*/React.createElement(NestedMenu, {\n      firstMenuOpen: true\n    }));\n    setProps({\n      firstMenuOpen: false\n    });\n    setProps({\n      firstMenuOpen: true\n    });\n    expect(getByRole('menu')).to.have.id('first-menu');\n    expect(within(getByRole('menu')).getAllByRole('menuitem')[0]).toHaveFocus();\n  });","file":"integration/NestedMenu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should be able to open second menu again","suites":["<NestedMenu> integration"],"updatePoint":{"line":94,"column":46},"line":94,"code":"  it('should be able to open second menu again', () => {\n    const {\n      getByRole,\n      setProps\n    } = render( /*#__PURE__*/React.createElement(NestedMenu, {\n      secondMenuOpen: true\n    }));\n    setProps({\n      secondMenuOpen: false\n    });\n    setProps({\n      secondMenuOpen: true\n    });\n    expect(getByRole('menu')).to.have.id('second-menu');\n    expect(within(getByRole('menu')).getAllByRole('menuitem')[0]).toHaveFocus();\n  });","file":"integration/NestedMenu.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"autoFocus does not scroll","suites":["<Popper />","children layout integration"],"updatePoint":{"line":54,"column":33},"line":54,"code":"    it('autoFocus does not scroll', () => {\n      const handleFocus = spy();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(BottomAnchoredPopper, {\n        open: false\n      }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n        autoFocus: true,\n        onFocus: handleFocus\n      }, \"will be focused\"))));\n      expect(handleFocus.callCount).to.equal(0);\n      const scrollYBeforeOpen = window.scrollY;\n      setProps({\n        open: true\n      });\n      expect(handleFocus.callCount).to.equal(1);\n      expect(window.scrollY, 'focus caused scroll').to.equal(scrollYBeforeOpen);\n    });","file":"integration/PopperChildrenLayout.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"focus during layout effect does not scroll","suites":["<Popper />","children layout integration"],"updatePoint":{"line":72,"column":50},"line":72,"code":"    it('focus during layout effect does not scroll', () => {\n      const handleFocus = spy();\n\n      function LayoutEffectFocusButton(props) {\n        const buttonRef = React.useRef(null);\n        React.useLayoutEffect(() => {\n          buttonRef.current.focus();\n        }, []);\n        return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n          ref: buttonRef\n        }));\n      }\n\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(BottomAnchoredPopper, {\n        open: false\n      }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(LayoutEffectFocusButton, {\n        onFocus: handleFocus\n      }, \"will be focused\"))));\n      expect(handleFocus.callCount).to.equal(0);\n      const scrollYBeforeOpen = window.scrollY;\n      setProps({\n        open: true\n      });\n      expect(handleFocus.callCount).to.equal(1);\n      expect(window.scrollY, 'focus caused scroll').to.equal(scrollYBeforeOpen);\n    });","file":"integration/PopperChildrenLayout.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"focus during passive effects do not scroll","suites":["<Popper />","children layout integration"],"updatePoint":{"line":100,"column":50},"line":100,"code":"    it('focus during passive effects do not scroll', () => {\n      const handleFocus = spy();\n\n      function EffectFocusButton(props) {\n        const buttonRef = React.useRef(null);\n        React.useEffect(() => {\n          buttonRef.current.focus();\n        }, []);\n        return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n          ref: buttonRef\n        }));\n      }\n\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(BottomAnchoredPopper, {\n        open: false\n      }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(EffectFocusButton, {\n        onFocus: handleFocus\n      }, \"will be focused\"))));\n      expect(handleFocus.callCount).to.equal(0);\n      const scrollYBeforeOpen = window.scrollY;\n      setProps({\n        open: true\n      });\n      expect(handleFocus.callCount).to.equal(1);\n\n      if (isSafari) {\n        expect(window.scrollY, 'focus caused scroll').to.equal(scrollYBeforeOpen);\n      } else {\n        // FIXME: should equal\n        expect(window.scrollY, 'focus caused scroll').not.to.equal(scrollYBeforeOpen);\n      }\n    });","file":"integration/PopperChildrenLayout.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"autoFocus does not scroll","suites":["<Popper />","children layout integration","in TransitionComponent "],"updatePoint":{"line":136,"column":37},"line":136,"code":"        it('autoFocus does not scroll', () => {\n          const handleFocus = spy();\n          const {\n            setProps\n          } = render( /*#__PURE__*/React.createElement(BottomAnchoredPopper, {\n            open: false,\n            transition: true\n          }, ({\n            TransitionProps\n          }) => {\n            return /*#__PURE__*/React.createElement(TransitionComponent, TransitionProps, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n              autoFocus: true,\n              onFocus: handleFocus\n            }, \"will be focused\")));\n          }));\n          expect(handleFocus.callCount).to.equal(0);\n          const scrollYBeforeOpen = window.scrollY;\n          setProps({\n            open: true\n          });\n          expect(handleFocus.callCount).to.equal(1);\n          expect(window.scrollY, 'focus caused scroll').to.equal(scrollYBeforeOpen);\n        });","file":"integration/PopperChildrenLayout.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"focus during layout effect does not scroll","suites":["<Popper />","children layout integration","in TransitionComponent "],"updatePoint":{"line":159,"column":54},"line":159,"code":"        it('focus during layout effect does not scroll', () => {\n          const handleFocus = spy();\n\n          function LayoutEffectFocusButton(props) {\n            const buttonRef = React.useRef(null);\n            React.useLayoutEffect(() => {\n              buttonRef.current.focus();\n            }, []);\n            return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n              ref: buttonRef\n            }));\n          }\n\n          const {\n            setProps\n          } = render( /*#__PURE__*/React.createElement(BottomAnchoredPopper, {\n            open: false,\n            transition: true\n          }, ({\n            TransitionProps\n          }) => {\n            return /*#__PURE__*/React.createElement(TransitionComponent, TransitionProps, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(LayoutEffectFocusButton, {\n              onFocus: handleFocus\n            }, \"will be focused\")));\n          }));\n          expect(handleFocus.callCount).to.equal(0);\n          const scrollYBeforeOpen = window.scrollY;\n          setProps({\n            open: true\n          });\n          expect(handleFocus.callCount).to.equal(1);\n          expect(window.scrollY, 'focus caused scroll').to.equal(scrollYBeforeOpen);\n        });","file":"integration/PopperChildrenLayout.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"focus during passive effects do not scroll","suites":["<Popper />","children layout integration","in TransitionComponent "],"updatePoint":{"line":192,"column":54},"line":192,"code":"        it('focus during passive effects do not scroll', () => {\n          const handleFocus = spy();\n\n          function EffectFocusButton(props) {\n            const buttonRef = React.useRef(null);\n            React.useEffect(() => {\n              buttonRef.current.focus();\n            }, []);\n            return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n              ref: buttonRef\n            }));\n          }\n\n          const {\n            setProps\n          } = render( /*#__PURE__*/React.createElement(BottomAnchoredPopper, {\n            open: false,\n            transition: true\n          }, ({\n            TransitionProps\n          }) => {\n            return /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n              timeout: 0\n            }, TransitionProps), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(EffectFocusButton, {\n              onFocus: handleFocus\n            }, \"will be focused\")));\n          }));\n          expect(handleFocus.callCount).to.equal(0);\n          const scrollYBeforeOpen = window.scrollY;\n          setProps({\n            open: true\n          });\n          expect(handleFocus.callCount).to.equal(1);\n          expect(window.scrollY, 'focus caused scroll').to.equal(scrollYBeforeOpen);\n        });","file":"integration/PopperChildrenLayout.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should focus the selected item","suites":["<Select> integration","with Dialog"],"updatePoint":{"line":46,"column":38},"line":46,"code":"    it('should focus the selected item', () => {\n      const {\n        getByTestId,\n        getAllByRole,\n        getByRole,\n        queryByRole\n      } = render( /*#__PURE__*/React.createElement(SelectAndDialog, null));\n      const trigger = getByRole('button'); // Let's open the select component\n      // in the browser user click also focuses\n\n      fireEvent.mouseDown(trigger);\n      const options = getAllByRole('option');\n      expect(options[1]).toHaveFocus(); // Now, let's close the select component\n\n      act(() => {\n        getByTestId('select-backdrop').click();\n      });\n      clock.tick(0);\n      expect(queryByRole('listbox')).to.equal(null);\n      expect(trigger).toHaveFocus();\n    });","file":"integration/Select.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should be able to change the selected item","suites":["<Select> integration","with Dialog"],"updatePoint":{"line":67,"column":50},"line":67,"code":"    it('should be able to change the selected item', () => {\n      const {\n        getAllByRole,\n        getByRole,\n        queryByRole\n      } = render( /*#__PURE__*/React.createElement(SelectAndDialog, null));\n      const trigger = getByRole('button');\n      expect(trigger).toHaveAccessibleName('Ten'); // Let's open the select component\n      // in the browser user click also focuses\n\n      fireEvent.mouseDown(trigger);\n      const options = getAllByRole('option');\n      expect(options[1]).toHaveFocus(); // Now, let's close the select component\n\n      act(() => {\n        options[2].click();\n      });\n      clock.tick(0);\n      expect(queryByRole('listbox')).to.equal(null);\n      expect(trigger).toHaveFocus();\n      expect(trigger).to.have.text('Twenty');\n    });","file":"integration/Select.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"requires `id` and `labelId` for a proper accessible name","suites":["<Select> integration","with label"],"updatePoint":{"line":91,"column":64},"line":91,"code":"    it('requires `id` and `labelId` for a proper accessible name', () => {\n      const {\n        getByRole\n      } = render( /*#__PURE__*/React.createElement(FormControl, null, /*#__PURE__*/React.createElement(InputLabel, {\n        id: \"label\"\n      }, \"Age\"), /*#__PURE__*/React.createElement(Select, {\n        id: \"input\",\n        labelId: \"label\",\n        value: \"10\"\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"\"\n      }, \"none\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"10\"\n      }, \"Ten\"))));\n      expect(getByRole('button')).toHaveAccessibleName('Age Ten');\n    }); // we're somewhat abusing \"focus\" here. What we're actually interested in is","file":"integration/Select.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"is displayed as focused while open","suites":["<Select> integration","with label"],"updatePoint":{"line":111,"column":42},"line":111,"code":"    it('is displayed as focused while open', () => {\n      const {\n        getByTestId,\n        getByRole\n      } = render( /*#__PURE__*/React.createElement(FormControl, null, /*#__PURE__*/React.createElement(InputLabel, {\n        classes: {\n          focused: 'focused-label'\n        },\n        \"data-testid\": \"label\"\n      }, \"Age\"), /*#__PURE__*/React.createElement(Select, {\n        MenuProps: {\n          transitionDuration: 0\n        },\n        value: \"\"\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"\"\n      }, \"none\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 10\n      }, \"Ten\"))));\n      const trigger = getByRole('button');\n      act(() => {\n        trigger.focus();\n      });\n      fireEvent.keyDown(trigger, {\n        key: 'Enter'\n      });\n      clock.tick(0);\n      expect(getByTestId('label')).to.have.class('focused-label');\n    });","file":"integration/Select.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"does not stays in an active state if an open action did not actually open","suites":["<Select> integration","with label"],"updatePoint":{"line":140,"column":81},"line":140,"code":"    it('does not stays in an active state if an open action did not actually open', () => {\n      // test for https://github.com/mui-org/material-ui/issues/17294\n      // we used to set a flag to stop blur propagation when we wanted to open the\n      // select but never considered what happened if the select never opened\n      const {\n        container,\n        getByRole\n      } = render( /*#__PURE__*/React.createElement(FormControl, null, /*#__PURE__*/React.createElement(InputLabel, {\n        classes: {\n          focused: 'focused-label'\n        },\n        htmlFor: \"age-simple\"\n      }, \"Age\"), /*#__PURE__*/React.createElement(Select, {\n        inputProps: {\n          id: 'age'\n        },\n        open: false,\n        value: \"\"\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"\"\n      }, \"none\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 10\n      }, \"Ten\"))));\n      const trigger = getByRole('button');\n      act(() => {\n        trigger.focus();\n      });\n      expect(container.querySelector('[for=\"age-simple\"]')).to.have.class('focused-label');\n      fireEvent.keyDown(trigger, {\n        key: 'Enter'\n      });\n      expect(container.querySelector('[for=\"age-simple\"]')).to.have.class('focused-label');\n      act(() => {\n        trigger.blur();\n      });\n      expect(container.querySelector('[for=\"age-simple\"]')).not.to.have.class('focused-label');\n    });","file":"integration/Select.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render a th with the head class when in the context of a table head","suites":["<TableRow> integration"],"updatePoint":{"line":19,"column":80},"line":19,"code":"  it('should render a th with the head class when in the context of a table head', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      \"data-testid\": \"cell\"\n    }), TableHead);\n    expect(getByTestId('cell')).to.have.tagName('th');\n    expect(getByTestId('cell')).to.have.class(classes.root);\n    expect(getByTestId('cell')).to.have.class(classes.head);\n    expect(getByTestId('cell')).to.have.attribute('scope', 'col');\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render specified scope attribute even when in the context of a table head","suites":["<TableRow> integration"],"updatePoint":{"line":30,"column":86},"line":30,"code":"  it('should render specified scope attribute even when in the context of a table head', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      scope: \"row\",\n      \"data-testid\": \"cell\"\n    }), TableHead);\n    expect(getByTestId('cell')).to.have.attribute('scope', 'row');\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render a th with the footer class when in the context of a table footer","suites":["<TableRow> integration"],"updatePoint":{"line":39,"column":84},"line":39,"code":"  it('should render a th with the footer class when in the context of a table footer', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      \"data-testid\": \"cell\"\n    }), TableFooter);\n    expect(getByTestId('cell')).to.have.tagName('td');\n    expect(getByTestId('cell')).to.have.class(classes.root);\n    expect(getByTestId('cell')).to.have.class(classes.footer);\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render with the footer class when in the context of a table footer","suites":["<TableRow> integration"],"updatePoint":{"line":49,"column":79},"line":49,"code":"  it('should render with the footer class when in the context of a table footer', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      \"data-testid\": \"cell\"\n    }), TableFooter);\n    expect(getByTestId('cell')).to.have.class(classes.root);\n    expect(getByTestId('cell')).to.have.class(classes.footer);\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render with the head class when variant is head, overriding context","suites":["<TableRow> integration"],"updatePoint":{"line":58,"column":80},"line":58,"code":"  it('should render with the head class when variant is head, overriding context', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"head\",\n      \"data-testid\": \"cell\"\n    }), TableFooter);\n    expect(getByTestId('cell')).to.have.class(classes.head);\n    expect(getByTestId('cell')).not.to.have.attribute('scope');\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render without head class when variant is body, overriding context","suites":["<TableRow> integration"],"updatePoint":{"line":68,"column":79},"line":68,"code":"  it('should render without head class when variant is body, overriding context', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"body\",\n      \"data-testid\": \"cell\"\n    }), TableFooter);\n    expect(getByTestId('cell')).not.to.have.class(classes.head);\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render without footer class when variant is body, overriding context","suites":["<TableRow> integration"],"updatePoint":{"line":77,"column":81},"line":77,"code":"  it('should render without footer class when variant is body, overriding context', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"body\",\n      \"data-testid\": \"cell\"\n    }), TableFooter);\n    expect(getByTestId('cell')).not.to.have.class(classes.footer);\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render with the footer class when variant is footer, overriding context","suites":["<TableRow> integration"],"updatePoint":{"line":86,"column":84},"line":86,"code":"  it('should render with the footer class when variant is footer, overriding context', () => {\n    const {\n      getByTestId\n    } = renderInTable( /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"footer\",\n      \"data-testid\": \"cell\"\n    }), TableHead);\n    expect(getByTestId('cell')).to.have.class(classes.footer);\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"does not set `role` when `component` prop is set and used in the context of table head","suites":["<TableRow> integration"],"updatePoint":{"line":95,"column":92},"line":95,"code":"  it('does not set `role` when `component` prop is set and used in the context of table head', () => {\n    const {\n      getByTestId\n    } = render( /*#__PURE__*/React.createElement(TableHead, {\n      component: \"div\"\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"div\",\n      \"data-testid\": \"cell\"\n    }), \",\"));\n    expect(getByTestId('cell')).not.to.have.attribute('role');\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"does not set `role` when `component` prop is set and used in the context of table body ","suites":["<TableRow> integration"],"updatePoint":{"line":106,"column":93},"line":106,"code":"  it('does not set `role` when `component` prop is set and used in the context of table body ', () => {\n    const {\n      getByTestId\n    } = render( /*#__PURE__*/React.createElement(TableBody, {\n      component: \"div\"\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"div\",\n      \"data-testid\": \"cell\"\n    }), \",\"));\n    expect(getByTestId('cell')).not.to.have.attribute('role');\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"does not set `role` when `component` prop is set and used in the context of table footer ","suites":["<TableRow> integration"],"updatePoint":{"line":117,"column":95},"line":117,"code":"  it('does not set `role` when `component` prop is set and used in the context of table footer ', () => {\n    const {\n      getByTestId\n    } = render( /*#__PURE__*/React.createElement(TableFooter, {\n      component: \"div\"\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"div\",\n      \"data-testid\": \"cell\"\n    }), \",\"));\n    expect(getByTestId('cell')).not.to.have.attribute('role');\n  });","file":"integration/TableCell.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render with the head class when in the context of a table head","suites":["<TableRow> integration"],"updatePoint":{"line":11,"column":75},"line":11,"code":"  it('should render with the head class when in the context of a table head', () => {\n    const {\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(\"table\", null, /*#__PURE__*/React.createElement(TableHead, null, /*#__PURE__*/React.createElement(TableRow, null))));\n    expect(getByRole('row')).to.have.class(classes.root);\n    expect(getByRole('row')).to.have.class(classes.head);\n  });","file":"integration/TableRow.test.js","skipped":false,"dir":"packages/mui-material/test"},{"name":"should render with the footer class when in the context of a table footer","suites":["<TableRow> integration"],"updatePoint":{"line":18,"column":79},"line":18,"code":"  it('should render with the footer class when in the context of a table footer', () => {\n    const {\n      getByRole\n    } = render( /*#__PURE__*/React.createElement(\"table\", null, /*#__PURE__*/React.createElement(TableFooter, null, /*#__PURE__*/React.createElement(TableRow, null))));\n    expect(getByRole('row')).to.have.class(classes.root);\n    expect(getByRole('row')).to.have.class(classes.footer);\n  });","file":"integration/TableRow.test.js","skipped":false,"dir":"packages/mui-material/test"}]}