{
    "repo": "marktext/marktext",
    "url": "https://github.com/marktext/marktext",
    "branch": "develop",
    "configs": [
        {
            "package": "marktext",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "Basic - Invalid text",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 25,
                "column": 26
            },
            "line": 25,
            "code": "  it('Basic - Invalid text', () => {\n    test(null, 0, null);\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Basic - Empty text",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 28,
                "column": 24
            },
            "line": 28,
            "code": "  it('Basic - Empty text', () => {\n    test('', 0, null);\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Basic - Invalid offset 1",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 31,
                "column": 30
            },
            "line": 31,
            "code": "  it('Basic - Invalid offset 1', () => {\n    test(basicCheck, -182, buildResult(0, 5, 'Lorem'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Basic - Invalid offset 2",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 34,
                "column": 30
            },
            "line": 34,
            "code": "  it('Basic - Invalid offset 2', () => {\n    test(basicCheck, undefined, null);\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Basic - Invalid offset 3",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 37,
                "column": 30
            },
            "line": 37,
            "code": "  it('Basic - Invalid offset 3', () => {\n    test(basicCheck, 478343, buildResult(12, 17, 'dolor'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Get first word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 40,
                "column": 20
            },
            "line": 40,
            "code": "  it('Get first word', () => {\n    test(basicText, 0, buildResult(0, 5, 'Lorem'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Get second word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 43,
                "column": 21
            },
            "line": 43,
            "code": "  it('Get second word', () => {\n    test(basicText, 8, buildResult(6, 11, 'ipsum'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Get last word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 46,
                "column": 19
            },
            "line": 46,
            "code": "  it('Get last word', () => {\n    test(basicText, 268, buildResult(266, 270, 'orci'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Last character is not a valid word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 49,
                "column": 40
            },
            "line": 49,
            "code": "  it('Last character is not a valid word', () => {\n    test(basicText, 271, null);\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Get custom index (1)",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 52,
                "column": 26
            },
            "line": 52,
            "code": "  it('Get custom index (1)', () => {\n    test(basicText, 79, buildResult(79, 81, 'in'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Get custom index (2)",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 55,
                "column": 26
            },
            "line": 55,
            "code": "  it('Get custom index (2)', () => {\n    console.log(basicText[104], basicText[105], basicText[106]);\n    test(basicText, 106, buildResult(105, 112, 'euismod'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Markdown - Get first word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 59,
                "column": 31
            },
            "line": 59,
            "code": "  it('Markdown - Get first word', () => {\n    test(basicMdText, 2, buildResult(2, 7, 'Lorem'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Markdown - Get second word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 62,
                "column": 32
            },
            "line": 62,
            "code": "  it('Markdown - Get second word', () => {\n    test(basicMdText, 14, buildResult(10, 15, 'ipsum'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Markdown - Get custom index (1)",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 65,
                "column": 37
            },
            "line": 65,
            "code": "  it('Markdown - Get custom index (1)', () => {\n    test(basicMdText, 20, buildResult(18, 23, 'dolor'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Markdown - Get custom index (2)",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 68,
                "column": 37
            },
            "line": 68,
            "code": "  it('Markdown - Get custom index (2)', () => {\n    test(basicMdText, 37, buildResult(35, 39, 'amet'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Markdown - Not valid word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 71,
                "column": 31
            },
            "line": 71,
            "code": "  it('Markdown - Not valid word', () => {\n    test(basicMdText, 50, null);\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Markdown - Not valid word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 74,
                "column": 31
            },
            "line": 74,
            "code": "  it('Markdown - Not valid word', () => {\n    test(basicMdText, 55, null);\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Markdown - Valid non-ASCII word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 77,
                "column": 37
            },
            "line": 77,
            "code": "  it('Markdown - Valid non-ASCII word', () => {\n    test(basicMdText, 61, buildResult(60, 63, '虥諰諨'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Non-ASCII - Get first word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 80,
                "column": 32
            },
            "line": 80,
            "code": "  it('Non-ASCII - Get first word', () => {\n    test(nonAscii, 0, buildResult(0, 2, '虥諰'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Non-ASCII - Get second word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 83,
                "column": 33
            },
            "line": 83,
            "code": "  it('Non-ASCII - Get second word', () => {\n    test(nonAscii, 4, buildResult(3, 6, '鯦鯢鯡'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Non-ASCII - Get last word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 86,
                "column": 31
            },
            "line": 86,
            "code": "  it('Non-ASCII - Get last word', () => {\n    test(nonAscii, 56, buildResult(55, 57, '騩鰒'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Non-ASCII - Last character is not a valid word",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 89,
                "column": 52
            },
            "line": 89,
            "code": "  it('Non-ASCII - Last character is not a valid word', () => {\n    test(nonAscii, 58, null);\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Non-ASCII - Get custom index",
            "suites": [
                "Test extractWord"
            ],
            "updatePoint": {
                "line": 92,
                "column": 34
            },
            "line": 92,
            "code": "  it('Non-ASCII - Get custom index', () => {\n    test(nonAscii, 19, buildResult(18, 21, '鱐鱍鱕'));\n  });",
            "file": "unit/specs/extract-word.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Basic Text Formatting",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 35,
                "column": 27
            },
            "line": 35,
            "code": "  it('Basic Text Formatting', () => {\n    verifyMarkdown(templates.BasicTextFormattingTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Blockquotes",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 38,
                "column": 17
            },
            "line": 38,
            "code": "  it('Blockquotes', () => {\n    verifyMarkdown(templates.BlockquotesTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Code Blocks",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 41,
                "column": 17
            },
            "line": 41,
            "code": "  it('Code Blocks', () => {\n    verifyMarkdown(templates.CodeBlocksTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Escapes",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 44,
                "column": 13
            },
            "line": 44,
            "code": "  it('Escapes', () => {\n    verifyMarkdown(templates.EscapesTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Headings",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 47,
                "column": 14
            },
            "line": 47,
            "code": "  it('Headings', () => {\n    verifyMarkdown(templates.HeadingsTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Images",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 50,
                "column": 12
            },
            "line": 50,
            "code": "  it('Images', () => {\n    verifyMarkdown(templates.ImagesTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Links",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 53,
                "column": 11
            },
            "line": 53,
            "code": "  it('Links', () => {\n    verifyMarkdown(templates.LinksTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Lists",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 56,
                "column": 11
            },
            "line": 56,
            "code": "  it('Lists', () => {\n    verifyMarkdown(templates.ListsTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "GFM - Basic Text Formatting",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 59,
                "column": 33
            },
            "line": 59,
            "code": "  it('GFM - Basic Text Formatting', () => {\n    verifyMarkdown(templates.GfmBasicTextFormattingTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "GFM - Lists",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 62,
                "column": 17
            },
            "line": 62,
            "code": "  it('GFM - Lists', () => {\n    verifyMarkdown(templates.GfmListsTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "GFM - Tables",
            "suites": [
                "Muya parser"
            ],
            "updatePoint": {
                "line": 65,
                "column": 18
            },
            "line": 65,
            "code": "  it('GFM - Tables', () => {\n    verifyMarkdown(templates.GfmTablesTemplate(), defaultOptions);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Basic Text Formatting",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 70,
                "column": 27
            },
            "line": 70,
            "code": "  it('Basic Text Formatting', () => {\n    verifyMarkdown(templates.BasicTextFormattingTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Blockquotes",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 73,
                "column": 17
            },
            "line": 73,
            "code": "  it('Blockquotes', () => {\n    verifyMarkdown(templates.BlockquotesTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Code Blocks",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 76,
                "column": 17
            },
            "line": 76,
            "code": "  it('Code Blocks', () => {\n    verifyMarkdown(templates.CodeBlocksTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Escapes",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 79,
                "column": 13
            },
            "line": 79,
            "code": "  it('Escapes', () => {\n    verifyMarkdown(templates.EscapesTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Headings",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 82,
                "column": 14
            },
            "line": 82,
            "code": "  it('Headings', () => {\n    verifyMarkdown(templates.HeadingsTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Images",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 85,
                "column": 12
            },
            "line": 85,
            "code": "  it('Images', () => {\n    verifyMarkdown(templates.ImagesTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Links",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 88,
                "column": 11
            },
            "line": 88,
            "code": "  it('Links', () => {\n    verifyMarkdown(templates.LinksTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Lists",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 91,
                "column": 11
            },
            "line": 91,
            "code": "  it('Lists', () => {\n    verifyMarkdown(templates.ListsTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "GFM - Basic Text Formatting",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 94,
                "column": 33
            },
            "line": 94,
            "code": "  it('GFM - Basic Text Formatting', () => {\n    verifyMarkdown(templates.GfmBasicTextFormattingTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "GFM - Lists",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 97,
                "column": 17
            },
            "line": 97,
            "code": "  it('GFM - Lists', () => {\n    verifyMarkdown(templates.GfmListsTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "GFM - Tables",
            "suites": [
                "Muya parser (CRLF)"
            ],
            "updatePoint": {
                "line": 100,
                "column": 18
            },
            "line": 100,
            "code": "  it('GFM - Tables', () => {\n    verifyMarkdown(templates.GfmTablesTemplate(), defaultOptionsCrlf);\n  });",
            "file": "unit/specs/markdown-basic.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Indent by 1 space",
            "suites": [
                "Muya list identation"
            ],
            "updatePoint": {
                "line": 56,
                "column": 23
            },
            "line": 56,
            "code": "  it('Indent by 1 space', () => {\n    const md = `start\n\n- foo\n- foo\n  - foo\n  - foo\n    - foo\n    - foo\n      - foo\n  - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n   1. foo\n   2. foo\n      1. foo\n   3. foo\n3. foo\n   20. foo\n       141. foo\n            1. foo\n`;\n    verifyMarkdown(md, 1);\n  });",
            "file": "unit/specs/markdown-list-indentation.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Indent by 2 spaces",
            "suites": [
                "Muya list identation"
            ],
            "updatePoint": {
                "line": 84,
                "column": 24
            },
            "line": 84,
            "code": "  it('Indent by 2 spaces', () => {\n    const md = `start\n\n- foo\n- foo\n   - foo\n   - foo\n      - foo\n      - foo\n         - foo\n   - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n    1. foo\n    2. foo\n        1. foo\n    3. foo\n3. foo\n    20. foo\n         141. foo\n               1. foo\n`;\n    verifyMarkdown(md, 2);\n  });",
            "file": "unit/specs/markdown-list-indentation.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Indent by 3 spaces",
            "suites": [
                "Muya list identation"
            ],
            "updatePoint": {
                "line": 112,
                "column": 24
            },
            "line": 112,
            "code": "  it('Indent by 3 spaces', () => {\n    const md = `start\n\n- foo\n- foo\n    - foo\n    - foo\n        - foo\n        - foo\n            - foo\n    - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n     1. foo\n     2. foo\n          1. foo\n     3. foo\n3. foo\n     20. foo\n           141. foo\n                  1. foo\n`;\n    verifyMarkdown(md, 3);\n  });",
            "file": "unit/specs/markdown-list-indentation.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Indent by 4 spaces",
            "suites": [
                "Muya list identation"
            ],
            "updatePoint": {
                "line": 140,
                "column": 24
            },
            "line": 140,
            "code": "  it('Indent by 4 spaces', () => {\n    const md = `start\n\n- foo\n- foo\n     - foo\n     - foo\n          - foo\n          - foo\n               - foo\n     - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n      1. foo\n      2. foo\n            1. foo\n      3. foo\n3. foo\n      20. foo\n             141. foo\n                     1. foo\n`;\n    verifyMarkdown(md, 4);\n  });",
            "file": "unit/specs/markdown-list-indentation.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Indent using Daring Fireball Markdown Spec",
            "suites": [
                "Muya list identation"
            ],
            "updatePoint": {
                "line": 194,
                "column": 48
            },
            "line": 194,
            "code": "  it('Indent using Daring Fireball Markdown Spec', () => {\n    const md = `start\n\n- foo\n- foo\n    - foo\n    - foo\n        - foo\n        - foo\n            - foo\n    - foo\n- foo\n\nsep\n\n1. foo\n2. foo\n    1. foo\n    2. foo\n        1. foo\n    3. foo\n3. foo\n    20. foo\n        99. foo\n            1. foo\n`;\n    verifyMarkdown(md, 'dfm', md);\n  });",
            "file": "unit/specs/markdown-list-indentation.spec.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "marktext__marktext.svg"
}