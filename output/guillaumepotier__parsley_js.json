{
    "repo": "guillaumepotier/Parsley.js",
    "url": "https://github.com/guillaumepotier/Parsley.js",
    "branch": "master",
    "configs": [
        {
            "package": "expect.js",
            "lang": "js",
            "dir": "bower_components/expect.js/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "parsleyjs",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should have .version",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 28,
                "column": 26
            },
            "line": 28,
            "code": "  it('should have .version', function () {\n    expect(expect.version).to.match(/^\\d+\\.\\d+\\.\\d+$/);\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should work in its basic form",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 31,
                "column": 35
            },
            "line": 31,
            "code": "  it('should work in its basic form', function () {\n    expect('test').to.be.a('string');\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test true",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 34,
                "column": 22
            },
            "line": 34,
            "code": "  it('should test true', function () {\n    expect(true).to.be(true);\n    expect(false).to.not.be(true);\n    expect(1).to.not.be(true);\n    err(function () {\n      expect('test').to.be(true);\n    }, \"expected 'test' to equal true\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should allow not.to",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 42,
                "column": 25
            },
            "line": 42,
            "code": "  it('should allow not.to', function () {\n    expect(true).not.to.be(false);\n    err(function () {\n      expect(false).not.to.be(false);\n    }, \"expected false to not equal false\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test ok",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 48,
                "column": 20
            },
            "line": 48,
            "code": "  it('should test ok', function () {\n    expect(true).to.be.ok();\n    expect(false).to.not.be.ok();\n    expect(1).to.be.ok();\n    expect(0).to.not.be.ok();\n    err(function () {\n      expect('').to.be.ok();\n    }, \"expected '' to be truthy\");\n    err(function () {\n      expect('test').to.not.be.ok();\n    }, \"expected 'test' to be falsy\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test false",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 60,
                "column": 23
            },
            "line": 60,
            "code": "  it('should test false', function () {\n    expect(false).to.be(false);\n    expect(true).to.not.be(false);\n    expect(0).to.not.be(false);\n    err(function () {\n      expect('').to.be(false);\n    }, \"expected '' to equal false\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test functions with arguments",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 68,
                "column": 42
            },
            "line": 68,
            "code": "  it('should test functions with arguments', function () {\n    function itThrowsSometimes(first, second) {\n      if (first ^ second) {\n        throw new Error('tell');\n      }\n    }\n\n    expect(itThrowsSometimes).withArgs(false, false).to.not.throwException();\n    expect(itThrowsSometimes).withArgs(false, true).to.throwException(/tell/);\n    expect(itThrowsSometimes).withArgs(true, false).to.throwException(/tell/);\n    expect(itThrowsSometimes).withArgs(true, true).to.not.throwException();\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test for exceptions",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 80,
                "column": 32
            },
            "line": 80,
            "code": "  it('should test for exceptions', function () {\n    function itThrows() {\n      a.b.c;\n    }\n\n    function itThrowsString() {\n      throw 'aaa';\n    }\n\n    function itThrowsMessage() {\n      throw new Error('tobi');\n    }\n\n    var anonItThrows = function () {\n      a.b.c;\n    };\n\n    function itWorks() {\n      return;\n    }\n\n    var anonItWorks = function () {};\n\n    expect(itThrows).to.throwException();\n    expect(itWorks).to.not.throwException();\n    var subject;\n    expect(itThrows).to.throwException(function (e) {\n      subject = e;\n    });\n    expect(subject).to.be.an(Error);\n    expect(itThrowsMessage).to.throwException(/tobi/);\n    expect(itThrowsMessage).to.not.throwException(/test/);\n    err(function () {\n      expect(itThrowsMessage).to.throwException(/no match/);\n    }, 'expected \\'tobi\\' to match /no match/');\n    var subject2;\n    expect(itThrowsString).to.throwException(function (str) {\n      subject2 = str;\n    });\n    expect(subject2).to.be('aaa');\n    expect(itThrowsString).to.throwException(/aaa/);\n    expect(itThrowsString).to.not.throwException(/bbb/);\n    err(function () {\n      expect(itThrowsString).to.throwException(/no match/i);\n    }, 'expected \\'aaa\\' to match /no match/i');\n    var called = false;\n    expect(itWorks).to.not.throwError(function () {\n      called = true;\n    });\n    expect(called).to.be(false);\n    err(function () {\n      expect(5).to.throwException();\n    }, 'expected 5 to be a function');\n    err(function () {\n      expect(anonItThrows).not.to.throwException();\n    }, 'expected fn not to throw an exception');\n    err(function () {\n      expect(anonItWorks).to.throwException();\n    }, 'expected fn to throw an exception');\n\n    if (nameSupported) {\n      err(function () {\n        expect(itWorks).to.throwException();\n      }, 'expected itWorks to throw an exception');\n    } else {\n      err(function () {\n        expect(itWorks).to.throwException();\n      }, 'expected fn to throw an exception');\n    }\n\n    if (nameSupported) {\n      err(function () {\n        expect(itThrows).not.to.throwException();\n      }, 'expected itThrows not to throw an exception');\n    } else {\n      err(function () {\n        expect(anonItThrows).not.to.throwException();\n      }, 'expected fn not to throw an exception');\n    }\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test arrays",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 160,
                "column": 24
            },
            "line": 160,
            "code": "  it('should test arrays', function () {\n    expect([]).to.be.a('array');\n    expect([]).to.be.an('array');\n    err(function () {\n      expect({}).to.be.an('array');\n    }, 'expected {} to be an array');\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test regex",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 167,
                "column": 23
            },
            "line": 167,
            "code": "  it('should test regex', function () {\n    expect(/a/).to.be.an('regexp');\n    expect(/a/).to.be.a('regexp');\n    err(function () {\n      expect(null).to.be.a('regexp');\n    }, 'expected null to be a regexp');\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test objects",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 174,
                "column": 25
            },
            "line": 174,
            "code": "  it('should test objects', function () {\n    expect({}).to.be.an('object');\n    err(function () {\n      expect(null).to.be.an('object');\n    }, 'expected null to be an object');\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test .equal()",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 180,
                "column": 26
            },
            "line": 180,
            "code": "  it('should test .equal()', function () {\n    var foo;\n    expect(foo).to.be(undefined);\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test typeof",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 184,
                "column": 24
            },
            "line": 184,
            "code": "  it('should test typeof', function () {\n    expect('test').to.be.a('string');\n    err(function () {\n      expect('test').to.not.be.a('string');\n    }, \"expected 'test' not to be a string\");\n    expect(5).to.be.a('number');\n    err(function () {\n      expect(5).to.not.be.a('number');\n    }, \"expected 5 not to be a number\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test instanceof",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 194,
                "column": 28
            },
            "line": 194,
            "code": "  it('should test instanceof', function () {\n    function Foo() {}\n\n    expect(new Foo()).to.be.a(Foo);\n\n    if (nameSupported) {\n      err(function () {\n        expect(3).to.be.a(Foo);\n      }, \"expected 3 to be an instance of Foo\");\n    } else {\n      err(function () {\n        expect(3).to.be.a(Foo);\n      }, \"expected 3 to be an instance of supplied constructor\");\n    }\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test within(start, finish)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 209,
                "column": 39
            },
            "line": 209,
            "code": "  it('should test within(start, finish)', function () {\n    expect(5).to.be.within(3, 6);\n    expect(5).to.be.within(3, 5);\n    expect(5).to.not.be.within(1, 3);\n    err(function () {\n      expect(5).to.not.be.within(4, 6);\n    }, \"expected 5 to not be within 4..6\");\n    err(function () {\n      expect(10).to.be.within(50, 100);\n    }, \"expected 10 to be within 50..100\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test above(n)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 220,
                "column": 26
            },
            "line": 220,
            "code": "  it('should test above(n)', function () {\n    expect(5).to.be.above(2);\n    expect(5).to.be.greaterThan(2);\n    expect(5).to.not.be.above(5);\n    expect(5).to.not.be.above(6);\n    err(function () {\n      expect(5).to.be.above(6);\n    }, \"expected 5 to be above 6\");\n    err(function () {\n      expect(10).to.not.be.above(6);\n    }, \"expected 10 to be below 6\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test match(regexp)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 232,
                "column": 31
            },
            "line": 232,
            "code": "  it('should test match(regexp)', function () {\n    expect('foobar').to.match(/^foo/);\n    expect('foobar').to.not.match(/^bar/);\n    err(function () {\n      expect('foobar').to.match(/^bar/i);\n    }, \"expected 'foobar' to match /^bar/i\");\n    err(function () {\n      expect('foobar').to.not.match(/^foo/i);\n    }, \"expected 'foobar' not to match /^foo/i\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test length(n)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 242,
                "column": 27
            },
            "line": 242,
            "code": "  it('should test length(n)', function () {\n    expect('test').to.have.length(4);\n    expect('test').to.not.have.length(3);\n    expect([1, 2, 3]).to.have.length(3);\n    err(function () {\n      expect(4).to.have.length(3);\n    }, 'expected 4 to have a property \\'length\\'');\n    err(function () {\n      expect('asd').to.not.have.length(3);\n    }, \"expected 'asd' to not have a length of 3\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test eql(val)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 253,
                "column": 26
            },
            "line": 253,
            "code": "  it('should test eql(val)', function () {\n    expect('test').to.eql('test');\n    expect({\n      foo: 'bar'\n    }).to.eql({\n      foo: 'bar'\n    });\n    expect(1).to.eql(1);\n    expect('4').to.eql(4);\n    expect(/a/gmi).to.eql(/a/mig);\n    err(function () {\n      expect(4).to.eql(3);\n    }, 'expected 4 to sort of equal 3');\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test equal(val)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 267,
                "column": 28
            },
            "line": 267,
            "code": "  it('should test equal(val)', function () {\n    expect('test').to.equal('test');\n    expect(1).to.equal(1);\n    err(function () {\n      expect(4).to.equal(3);\n    }, 'expected 4 to equal 3');\n    err(function () {\n      expect('4').to.equal(4);\n    }, \"expected '4' to equal 4\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test be(val)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 277,
                "column": 25
            },
            "line": 277,
            "code": "  it('should test be(val)', function () {\n    expect('test').to.be('test');\n    expect(1).to.be(1);\n    err(function () {\n      expect(4).to.be(3);\n    }, 'expected 4 to equal 3');\n    err(function () {\n      expect('4').to.be(4);\n    }, \"expected '4' to equal 4\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test empty",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 287,
                "column": 23
            },
            "line": 287,
            "code": "  it('should test empty', function () {\n    expect('').to.be.empty();\n    expect({}).to.be.empty();\n    expect([]).to.be.empty();\n    expect({\n      length: 0\n    }).to.be.empty();\n    err(function () {\n      expect(null).to.be.empty();\n    }, 'expected null to be an object');\n    err(function () {\n      expect({\n        a: 'b'\n      }).to.be.empty();\n    }, 'expected { a: \\'b\\' } to be empty');\n    err(function () {\n      expect({\n        length: '0'\n      }).to.be.empty();\n    }, 'expected { length: \\'0\\' } to be empty');\n    err(function () {\n      expect('asd').to.be.empty();\n    }, \"expected 'asd' to be empty\");\n    err(function () {\n      expect('').to.not.be.empty();\n    }, \"expected '' to not be empty\");\n    err(function () {\n      expect({}).to.not.be.empty();\n    }, \"expected {} to not be empty\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test property(name)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 317,
                "column": 32
            },
            "line": 317,
            "code": "  it('should test property(name)', function () {\n    expect('test').to.have.property('length');\n    expect(4).to.not.have.property('length');\n    expect({\n      length: undefined\n    }).to.have.property('length');\n    err(function () {\n      expect('asd').to.have.property('foo');\n    }, \"expected 'asd' to have a property 'foo'\");\n    err(function () {\n      expect({\n        length: undefined\n      }).to.not.have.property('length');\n    }, \"expected { length: undefined } to not have a property 'length'\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test property(name, val)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 332,
                "column": 37
            },
            "line": 332,
            "code": "  it('should test property(name, val)', function () {\n    expect('test').to.have.property('length', 4);\n    expect({\n      length: undefined\n    }).to.have.property('length', undefined);\n    err(function () {\n      expect('asd').to.have.property('length', 4);\n    }, \"expected 'asd' to have a property 'length' of 4, but got 3\");\n    err(function () {\n      expect('asd').to.not.have.property('length', 3);\n    }, \"expected 'asd' to not have a property 'length' of 3\");\n    err(function () {\n      expect('asd').to.not.have.property('foo', 3);\n    }, \"'asd' has no property 'foo'\");\n    err(function () {\n      expect({\n        length: undefined\n      }).to.not.have.property('length', undefined);\n    }, \"expected { length: undefined } to not have a property 'length'\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test own.property(name)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 352,
                "column": 36
            },
            "line": 352,
            "code": "  it('should test own.property(name)', function () {\n    expect('test').to.have.own.property('length');\n    expect({\n      length: 12\n    }).to.have.own.property('length');\n    err(function () {\n      expect({\n        length: 12\n      }).to.not.have.own.property('length');\n    }, \"expected { length: 12 } to not have own property 'length'\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test string()",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 363,
                "column": 26
            },
            "line": 363,
            "code": "  it('should test string()', function () {\n    expect('foobar').to.contain('bar');\n    expect('foobar').to.contain('foo');\n    expect('foobar').to.include.string('foo');\n    expect('foobar').to.not.contain('baz');\n    expect('foobar').to.not.include.string('baz');\n    err(function () {\n      expect(3).to.contain('baz');\n    }, \"expected 3 to contain 'baz'\");\n    err(function () {\n      expect('foobar').to.contain('baz');\n    }, \"expected 'foobar' to contain 'baz'\");\n    err(function () {\n      expect('foobar').to.not.contain('bar');\n    }, \"expected 'foobar' to not contain 'bar'\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test contain()",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 379,
                "column": 27
            },
            "line": 379,
            "code": "  it('should test contain()', function () {\n    expect(['foo', 'bar']).to.contain('foo');\n    expect(['foo', 'bar']).to.contain('foo');\n    expect(['foo', 'bar']).to.contain('bar');\n    expect([1, 2]).to.contain(1);\n    expect(['foo', 'bar']).to.not.contain('baz');\n    expect(['foo', 'bar']).to.not.contain(1);\n    err(function () {\n      expect(['foo']).to.contain('bar');\n    }, \"expected [ 'foo' ] to contain 'bar'\");\n    err(function () {\n      expect(['bar', 'foo']).to.not.contain('foo');\n    }, \"expected [ 'bar', 'foo' ] to not contain 'foo'\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should test keys(array)",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 393,
                "column": 29
            },
            "line": 393,
            "code": "  it('should test keys(array)', function () {\n    expect({\n      foo: 1\n    }).to.have.keys(['foo']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.have.keys(['foo', 'bar']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.have.keys('foo', 'bar');\n    expect({\n      foo: 1,\n      bar: 2,\n      baz: 3\n    }).to.include.keys('foo', 'bar');\n    expect({\n      foo: 1,\n      bar: 2,\n      baz: 3\n    }).to.include.keys('bar', 'foo');\n    expect({\n      foo: 1,\n      bar: 2,\n      baz: 3\n    }).to.include.keys('baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys('foo');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys('bar', 'foo');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys(['foo']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys(['bar']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys(['bar', 'foo']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.have.keys('baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.have.keys('foo', 'baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.include.keys('baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.include.keys('foo', 'baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.include.keys('baz', 'foo');\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys();\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys([]);\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.have.keys([]);\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.include.keys([]);\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys(['bar']);\n    }, \"expected { foo: 1 } to include key 'bar'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys(['bar', 'baz']);\n    }, \"expected { foo: 1 } to include keys 'bar', and 'baz'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys(['foo', 'bar', 'baz']);\n    }, \"expected { foo: 1 } to include keys 'foo', 'bar', and 'baz'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.have.keys(['foo']);\n    }, \"expected { foo: 1 } to not include key 'foo'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.have.keys(['foo']);\n    }, \"expected { foo: 1 } to not include key 'foo'\");\n    err(function () {\n      expect({\n        foo: 1,\n        bar: 2\n      }).to.not.have.keys(['foo', 'bar']);\n    }, \"expected { foo: 1, bar: 2 } to not include keys 'foo', and 'bar'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.include.keys(['foo']);\n    }, \"expected { foo: 1 } to not include key 'foo'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.include.keys('foo', 'bar');\n    }, \"expected { foo: 1 } to include keys 'foo', and 'bar'\"); // only\n\n    expect({\n      foo: 1,\n      bar: 1\n    }).to.only.have.keys('foo', 'bar');\n    expect({\n      foo: 1,\n      bar: 1\n    }).to.only.have.keys(['foo', 'bar']);\n    err(function () {\n      expect({\n        a: 'b',\n        c: 'd'\n      }).to.only.have.keys('a', 'b', 'c');\n    }, \"expected { a: 'b', c: 'd' } to only have keys 'a', 'b', and 'c'\");\n    err(function () {\n      expect({\n        a: 'b',\n        c: 'd'\n      }).to.only.have.keys('a');\n    }, \"expected { a: 'b', c: 'd' } to only have key 'a'\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should allow chaining with `and`",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 543,
                "column": 38
            },
            "line": 543,
            "code": "  it('should allow chaining with `and`', function () {\n    expect(5).to.be.a('number').and.be(5);\n    expect(5).to.be.a('number').and.not.be(6);\n    expect(5).to.be.a('number').and.not.be(6).and.not.be('5');\n    err(function () {\n      expect(5).to.be.a('number').and.not.be(5);\n    }, \"expected 5 to not equal 5\");\n    err(function () {\n      expect(5).to.be.a('number').and.not.be(6).and.not.be.above(4);\n    }, \"expected 5 to be below 4\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should fail with `fail`",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 554,
                "column": 29
            },
            "line": 554,
            "code": "  it('should fail with `fail`', function () {\n    err(function () {\n      expect().fail();\n    }, \"explicit failure\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should fail with `fail` and custom message",
            "suites": [
                "expect"
            ],
            "updatePoint": {
                "line": 559,
                "column": 48
            },
            "line": 559,
            "code": "  it('should fail with `fail` and custom message', function () {\n    err(function () {\n      expect().fail(\"explicit failure with message\");\n    }, \"explicit failure with message\");\n  });",
            "file": "expect.js",
            "skipped": false,
            "dir": "bower_components/expect.js/test"
        },
        {
            "name": "should provide a actualizeOptions() method",
            "suites": [
                "Base"
            ],
            "updatePoint": {
                "line": 5,
                "column": 48
            },
            "line": 5,
            "code": "  it('should provide a actualizeOptions() method', () => {\n    $('body').append('<input type=\"email\" data-parsley-pattern=\"[A-F][0-9]{5}\" data-parsley-required id=\"element\" />');\n    var parsleyField = $('#element').parsley({\n      foo: 'bar'\n    });\n    expect(parsleyField.options.pattern).to.eql('[A-F][0-9]{5}');\n    expect(parsleyField.options.required).to.eql('');\n    $('#element').removeAttr('data-parsley-pattern');\n    parsleyField.actualizeOptions();\n    expect(parsleyField.options.pattern).to.be(undefined);\n    expect(parsleyField.options.required).to.eql('');\n  });",
            "file": "unit/base.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use reset() on field",
            "suites": [
                "Base"
            ],
            "updatePoint": {
                "line": 17,
                "column": 33
            },
            "line": 17,
            "code": "  it('should use reset() on field', () => {\n    $('body').append('<input type=\"email\" data-parsley-pattern=\"[A-F][0-9]{5}\" data-parsley-required id=\"element\" />');\n    var parsleyField = $('#element').parsley();\n    parsleyField.validate();\n    expect($('#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    parsleyField.reset();\n    expect($('#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n  });",
            "file": "unit/base.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use reset() on form",
            "suites": [
                "Base"
            ],
            "updatePoint": {
                "line": 25,
                "column": 32
            },
            "line": 25,
            "code": "  it('should use reset() on form', done => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\" required />' + '<div id=\"field2\"></div>' + '<textarea id=\"field2\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    parsleyForm.validate();\n    expect($('#parsley-id-' + $('#field1').psly().__id__ + ' li').length).to.be(1);\n    $('#element').parsley().on('form:reset', () => {\n      done();\n    });\n    parsleyForm.reset();\n    expect($('#parsley-id-' + $('#field1').psly().__id__ + ' li').length).to.be(0);\n  });",
            "file": "unit/base.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use destroy() on field",
            "suites": [
                "Base"
            ],
            "updatePoint": {
                "line": 36,
                "column": 35
            },
            "line": 36,
            "code": "  it('should use destroy() on field', done => {\n    $('body').append('<input type=\"email\" data-parsley-pattern=\"[A-F][0-9]{5}\" data-parsley-required id=\"element\" />');\n    var parsleyField = $('#element').parsley();\n    $('#element').parsley().on('field:destroy', () => {\n      done();\n    });\n    expect(Utils.getData($('#element')[0], 'Parsley')).to.have.key('__class__');\n    expect(Utils.getData($('#element')[0], 'Parsley').__class__).to.be('Field');\n    parsleyField.destroy();\n    expect(Utils.getData($('#element')[0], 'Parsley')).to.be(undefined);\n  });",
            "file": "unit/base.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use destroy() on form",
            "suites": [
                "Base"
            ],
            "updatePoint": {
                "line": 47,
                "column": 34
            },
            "line": 47,
            "code": "  it('should use destroy() on form', done => {\n    var triggered = 0;\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\"/>' + '<div id=\"field2\"></div>' + '<textarea id=\"field2\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    var fieldEventsCount = 0;\n    var formEventsCount = 0; // Test that a subscribed field event on parent form would be triggered by fields too\n    // Here we only have field1 and field2 as valid parsley fields\n\n    $('#element').parsley().on('field:destroy', () => {\n      fieldEventsCount++;\n    });\n    $('#element').parsley().on('form:destroy', () => {\n      formEventsCount++;\n    });\n    expect(Utils.getData($('#element')[0], 'Parsley')).to.have.key('__class__');\n    expect(Utils.getData($('#element')[0], 'Parsley').__class__).to.be('Form');\n    expect(Utils.getData($('#field1')[0], 'Parsley')).to.have.key('__class__');\n    expect(Utils.getData($('#field1')[0], 'Parsley').__class__).to.be('Field');\n    parsleyForm.destroy();\n    expect(fieldEventsCount).to.be(2);\n    expect(formEventsCount).to.be(1); // we should never enter here since parsley form instance is destroyed\n\n    Parsley.on('form:validate', () => {\n      expect(true).to.be(false);\n    }); // test that a submit event does not trigger parsley validation anymore\n\n    $('#element').on('submit', e => {\n      e.preventDefault();\n      expect(Utils.getData($('#element')[0], 'Parsley')).to.be(undefined);\n      expect(Utils.getData($('#field1')[0], 'Parsley')).to.be(undefined);\n      Parsley.off('form:validate');\n      done();\n    });\n    $('#element').submit();\n  });",
            "file": "unit/base.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a bind.js plugin allowing to give pure json validation config to parsley constructor",
            "suites": [
                "extra/plugin/bind"
            ],
            "updatePoint": {
                "line": 11,
                "column": 102
            },
            "line": 11,
            "code": "  it('should have a bind.js plugin allowing to give pure json validation config to parsley constructor', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"text\" name=\"name\" />' + '<input type=\"text\" name=\"email\" id=\"email\" />' + '<input type=\"checkbox\" name=\"sexe\" id=\"sexe\" value=\"male\" />' + '<input type=\"checkbox\" name=\"sexe\" value=\"female\" />' + '</form>');\n    var parsleyInstance;\n    expectWarning(() => {\n      parsleyInstance = $('#element').parsley({\n        fields: {\n          '[name=\"name\"]': {\n            required: true,\n            length: [4, 20]\n          },\n          '#email': {\n            type: 'email'\n          },\n          '#sexe': {\n            required: true\n          }\n        }\n      });\n    });\n    expect($('[name=\"name\"]').parsley().constraints.length).to.be(2);\n    expect($('#email').parsley().constraints.length).to.be(1);\n    expect($('#sexe').parsley().constraints.length).to.be(1);\n    expect($('#sexe').parsley().constraints[0].name).to.be('required');\n  });",
            "file": "unit/extra/bind.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have gt validator",
            "suites": [
                "extra/validator/comparison"
            ],
            "updatePoint": {
                "line": 5,
                "column": 30
            },
            "line": 5,
            "code": "  it('should have gt validator', () => {\n    var number = 5; // Check with a selector\n\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-gt=\"#gt\" required /><input type=\"text\" id=\"gt\" value=\"' + number + '\" />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(false); // Check with a (different) number\n\n    number = 42;\n    $('#element').attr('data-parsley-gt', number);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#gt').remove();\n  });",
            "file": "unit/extra/comparison.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have gte validator",
            "suites": [
                "extra/validator/comparison"
            ],
            "updatePoint": {
                "line": 27,
                "column": 31
            },
            "line": 27,
            "code": "  it('should have gte validator', () => {\n    var number = 5; // Check with a selector\n\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-gte=\"#gte\" required /><input type=\"text\" id=\"gte\" value=\"' + number + '\" />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(false); // Check with a (different) number\n\n    number = 42;\n    $('#element').attr('data-parsley-gte', number);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#gte').remove();\n  });",
            "file": "unit/extra/comparison.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have lt validator",
            "suites": [
                "extra/validator/comparison"
            ],
            "updatePoint": {
                "line": 49,
                "column": 30
            },
            "line": 49,
            "code": "  it('should have lt validator', () => {\n    var number = 5; // Check with a selector\n\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-lt=\"#lt\" required /><input type=\"text\" id=\"lt\" value=\"' + number + '\" />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(true); // Check with a (different) number\n\n    number = 42;\n    $('#element').attr('data-parsley-lt', number);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#lt').remove();\n  });",
            "file": "unit/extra/comparison.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have lte validator",
            "suites": [
                "extra/validator/comparison"
            ],
            "updatePoint": {
                "line": 71,
                "column": 31
            },
            "line": 71,
            "code": "  it('should have lte validator', () => {\n    var number = 5; // Check with a selector\n\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-lte=\"#lte\" required /><input type=\"text\" id=\"lte\" value=\"' + number + '\" />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(true); // Check with a (different) number\n\n    number = 42;\n    $('#element').attr('data-parsley-lte', number);\n    $('#element').val(number + 1);\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val(number);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val(number - 1);\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#lte').remove();\n  });",
            "file": "unit/extra/comparison.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have dateiso validator",
            "suites": [
                "extra/validator/dateiso"
            ],
            "updatePoint": {
                "line": 5,
                "column": 35
            },
            "line": 5,
            "code": "  it('should have dateiso validator', () => {\n    var expectValidation = function (value, name, requirements) {\n      var field = $('<input>').parsley();\n      field.options[name] = requirements;\n      return expect(field.isValid({\n        force: true,\n        value: value\n      }));\n    };\n\n    expectValidation('', 'dateiso').not.to.be(true);\n    expectValidation('foo', 'dateiso').not.to.be(true);\n    expectValidation('1986-30-01', 'dateiso').not.to.be(true);\n    expectValidation('1986-12-45', 'dateiso').not.to.be(true);\n    expectValidation('1986-12-01', 'dateiso').to.be(true);\n  });",
            "file": "unit/extra/dateiso.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a minwords validator",
            "suites": [
                "extra/validator/words"
            ],
            "updatePoint": {
                "line": 5,
                "column": 38
            },
            "line": 5,
            "code": "  it('should have a minwords validator', () => {\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-minwords=\"2\" required />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val('foo');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val('foo bar');\n    expect($('#element').psly().isValid()).to.be(true);\n  });",
            "file": "unit/extra/words.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a maxwords validator",
            "suites": [
                "extra/validator/words"
            ],
            "updatePoint": {
                "line": 13,
                "column": 38
            },
            "line": 13,
            "code": "  it('should have a maxwords validator', () => {\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-maxwords=\"2\" required />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val('foo bar');\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val('foo bar baz');\n    expect($('#element').psly().isValid()).to.be(false);\n  });",
            "file": "unit/extra/words.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a words validator",
            "suites": [
                "extra/validator/words"
            ],
            "updatePoint": {
                "line": 21,
                "column": 35
            },
            "line": 21,
            "code": "  it('should have a words validator', () => {\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-words=\"[2, 4]\" required />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val('foo');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val('foo bar baz');\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#element').val('foo bar baz qux bux');\n    expect($('#element').psly().isValid()).to.be(false);\n  });",
            "file": "unit/extra/words.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 5,
                "column": 26
            },
            "line": 5,
            "code": "  it('should be a function', () => {\n    expect(Field).to.be.a('function');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should throw an error if no parsleyInstance given",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 8,
                "column": 55
            },
            "line": 8,
            "code": "  it('should throw an error if no parsleyInstance given', () => {\n    expect(Field).to.throwException();\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly bind DOM constraints",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 11,
                "column": 42
            },
            "line": 11,
            "code": "  it('should properly bind DOM constraints', () => {\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-required />');\n    var parsleyField = $('#element').parsley();\n    expect(parsleyField.constraints.length).to.be(1);\n    expect(parsleyField.constraints[0].name).to.be('required');\n    expect(parsleyField.constraints[0].isDomConstraint).to.be(true);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly bind HTML DOM supported constraints",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 18,
                "column": 57
            },
            "line": 18,
            "code": "  it('should properly bind HTML DOM supported constraints', () => {\n    $('body').append('<input type=\"email\" id=\"element\" />');\n    var parsleyField = $('#element').parsley();\n    expect(parsleyField.constraints.length).to.be(1);\n    expect(parsleyField.constraints[0].name).to.be('type');\n    expect(parsleyField.constraints[0].isDomConstraint).to.be(true);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ignore unknown types",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 25,
                "column": 33
            },
            "line": 25,
            "code": "  it('should ignore unknown types', () => {\n    $('body').append('<input type=\"\" id=\"element\" />');\n    var parsleyField = $('#element').parsley();\n    expect(parsleyField.constraints.length).to.be(0);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ignore mistyped types",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 30,
                "column": 34
            },
            "line": 30,
            "code": "  it('should ignore mistyped types', () => {\n    $('body').append('<input type=\"    email\" id=\"element\" />');\n    var parsleyField = $('#element').parsley();\n    expect(parsleyField.constraints.length).to.be(0);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper addConstraint() javascript method",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 35,
                "column": 60
            },
            "line": 35,
            "code": "  it('should have a proper addConstraint() javascript method', () => {\n    $('body').append('<input type=\"text\" id=\"element\" />');\n    var parsleyField = $('#element').parsley().addConstraint('required', true);\n    expect(parsleyField.constraints.length).to.be(1);\n    expect(parsleyField.constraints[0].name).to.be('required');\n    expect(parsleyField.constraints[0].requirements).to.be(true);\n    expect(parsleyField.constraints[0].priority).to.be(512);\n    expect(parsleyField.constraints[0].isDomConstraint).to.be(false); // trying to add an existing constraint result in an update\n\n    parsleyField.addConstraint('required', false, 64);\n    expect(parsleyField.constraints.length).to.be(1);\n    expect(parsleyField.constraints[0].name).to.be('required');\n    expect(parsleyField.constraints[0].requirements).to.be(false);\n    expect(parsleyField.constraints[0].priority).to.be(64);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper updateConstraint() javascript method",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 50,
                "column": 63
            },
            "line": 50,
            "code": "  it('should have a proper updateConstraint() javascript method', () => {\n    $('body').append('<input type=\"text\" id=\"element\" />');\n    var parsleyField = $('#element').parsley().addConstraint('required', true); // same as above test where addConstraint resulted in an updateConstraint\n\n    parsleyField.updateConstraint('required', false, 64);\n    expect(parsleyField.constraints.length).to.be(1);\n    expect(parsleyField.constraints[0].name).to.be('required');\n    expect(parsleyField.constraints[0].requirements).to.be(false);\n    expect(parsleyField.constraints[0].priority).to.be(64);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper removeConstraint() javascript method",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 60,
                "column": 63
            },
            "line": 60,
            "code": "  it('should have a proper removeConstraint() javascript method', () => {\n    $('body').append('<input type=\"text\" id=\"element\" />');\n    var parsleyField = $('#element').parsley().addConstraint('required', true).addConstraint('notblank', true).removeConstraint('required');\n    expect(parsleyField.constraints.length).to.be(1);\n    expect(parsleyField.constraints[0].name).to.be('notblank');\n    expect(parsleyField._isRequired()).to.be(false);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return true for fields without constraints",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 67,
                "column": 55
            },
            "line": 67,
            "code": "  it('should return true for fields without constraints', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\"hola\" data-parsley-minlength=\"5\" />');\n    var parsleyField = $('#element').parsley(); // Start with some validation errors:\n\n    expect(parsleyField.isValid()).to.eql(false); // The remove constraint and check result:\n\n    $('#element').removeAttr('data-parsley-minlength');\n    expect(parsleyField.isValid()).to.be(true);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly bind HTML5 supported constraints",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 76,
                "column": 54
            },
            "line": 76,
            "code": "  it('should properly bind HTML5 supported constraints', () => {\n    $('body').append('<input type=\"email\" pattern=\"\\\\w+\" id=\"element\" required min=\"5\" max=\"100\" minlength=\"1\" maxlength=\"3\" />');\n    var parsleyField = $('#element').parsley(); // 5 validators: type=email, pattern, required, (min+max => range) and (minlength+maxlength => length)\n\n    expect(parsleyField.constraints.length).to.be(5);\n    $('#element').removeAttr('min'); // still 5 validators, with max instead of range now\n\n    expect(parsleyField.actualizeOptions().constraints.length).to.be(5);\n    $('#element').removeAttr('minlength'); // still 5 validators, with maxlength instead of length now\n\n    expect(parsleyField.actualizeOptions().constraints.length).to.be(5);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly bind HTML5 date inputs",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 88,
                "column": 44
            },
            "line": 88,
            "code": "  it('should properly bind HTML5 date inputs', () => {\n    // Uses RFC 3339/ISO 8601 format YYYY-MM-DD\n    $('body').append('<input type=\"date\" id=\"element\" max=\"2000-01-02\" min=\"1999-01-02\" value=\"1998-12-30\" />');\n    var parsleyField = $('#element').parsley();\n    expect(parsleyField.constraints.length).to.be(2); // Type=Date, Range\n\n    expect(parsleyField.isValid()).to.be(false);\n    expect(parsleyField.isValid({\n      value: '1999-02-03'\n    })).to.be(true);\n    $('#element').removeAttr('min');\n    expect(parsleyField.isValid()).to.be(true);\n    expect(parsleyField.constraints.length).to.be(2); // Type=Date, Max\n\n    $('#element').val('2001-03-03');\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element').val('2001/01/01').removeAttr('max');\n    expect(parsleyField.isValid()).to.be(false); // Still invalid because of format\n\n    expect(parsleyField.constraints.length).to.be(1); // Type=Date\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a default step of \"any\" for data-parsley-type=\"number\"",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 162,
                "column": 72
            },
            "line": 162,
            "code": "  it('should have a default step of \"any\" for data-parsley-type=\"number\"', () => {\n    var $input = $(`<input data-parsley-type=\"number\" value=\"4.444\">`);\n    expect($input.parsley().isValid()).to.be(true);\n    $input.attr('data-parsley-type-step', '1');\n    expect($input.parsley().isValid()).to.be(false);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should valid simple validator",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 168,
                "column": 35
            },
            "line": 168,
            "code": "  it('should valid simple validator', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\"\" />');\n    var parsleyField = $('#element').parsley().addConstraint('required', true);\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element').val('foo');\n    expect(parsleyField.isValid()).to.be(true);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should valid more complex `type` validator",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 175,
                "column": 48
            },
            "line": 175,
            "code": "  it('should valid more complex `type` validator', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\"foo\" />');\n    var parsleyField = $('#element').parsley().addConstraint('type', 'email');\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element').val('foo');\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element').val('foo@bar.baz');\n    expect(parsleyField.isValid()).to.be(true);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should valid most complex Callback() validator",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 184,
                "column": 52
            },
            "line": 184,
            "code": "  it('should valid most complex Callback() validator', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\"\" />');\n    window.Parsley.addValidator('ismultiple', (value, multiple) => {\n      if (!isNaN(parseFloat(value)) && isFinite(value)) return !(Number(value) % multiple);\n      return false;\n    }, 512);\n    var parsleyField = $('#element').parsley().addConstraint('ismultiple', 2);\n    expect(parsleyField.isValid()).to.eql(true);\n    $('#element').val('1');\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element').val('2');\n    expect(parsleyField.isValid()).to.be(true);\n    parsleyField.updateConstraint('ismultiple', 3);\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element').val('9');\n    expect(parsleyField.isValid()).to.be(true);\n    window.Parsley.removeValidator('ismultiple');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly compute constraints on each validation",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 202,
                "column": 60
            },
            "line": 202,
            "code": "  it('should properly compute constraints on each validation', () => {\n    $('body').append('<input type=\"email\" data-parsley-required id=\"element\" />');\n    window.Parsley.addValidator('foobazer', value => {\n      return 'foobar' === value;\n    }, 2);\n    window.Parsley.addValidator('ismultiple', (value, multiple) => {\n      if (!isNaN(parseFloat(value)) && isFinite(value)) return !(Number(value) % multiple);\n      return false;\n    }, 512);\n    var parsleyField = $('#element').parsley().addConstraint('ismultiple', 4).addConstraint('foobazer', true);\n    parsleyField.refresh();\n    expect(parsleyField.constraints.length).to.be(4);\n    $('#element').removeAttr('data-parsley-required');\n    parsleyField.refresh();\n    expect(parsleyField.constraints.length).to.be(3);\n    parsleyField.removeConstraint('ismultiple').refresh();\n    expect(parsleyField.constraints.length).to.be(2);\n    window.Parsley.removeValidator('foobazer');\n    window.Parsley.removeValidator('ismultiple');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle constraints priorities on validation",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 222,
                "column": 56
            },
            "line": 222,
            "code": "  it('should handle constraints priorities on validation', () => {\n    $('body').append('<input type=\"email\" pattern=\"[A-F][0-9]{5}\" required id=\"element\" />');\n    var parsleyField = $('#element').parsley();\n    expect(parsleyField.isValid()).to.be(false);\n    expect(parsleyField.validationResult.length).to.be(1);\n    expect(parsleyField.validationResult[0].assert.name).to.be('required');\n    $('#element').val('foo');\n    expect(parsleyField.isValid()).to.be(false);\n    expect(parsleyField.validationResult.length).to.be(1);\n    expect(parsleyField.validationResult[0].assert.name).to.be('type');\n    $('#element').val('foo@bar.baz');\n    expect(parsleyField.isValid()).to.be(false);\n    expect(parsleyField.validationResult.length).to.be(1);\n    expect(parsleyField.validationResult[0].assert.name).to.be('pattern');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle all violations if `priorityEnabled` is set to false",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 237,
                "column": 71
            },
            "line": 237,
            "code": "  it('should handle all violations if `priorityEnabled` is set to false', () => {\n    $('body').append('<input type=\"email\" pattern=\"[A-F][0-9]{5}\" value=\"x\" id=\"element\" />');\n    var parsleyField = $('#element').parsley({\n      priorityEnabled: false\n    });\n    expect(parsleyField.isValid()).to.be(false);\n    expect(parsleyField.validationResult.length).to.be(2);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should trigger field:validate event",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 245,
                "column": 41
            },
            "line": 245,
            "code": "  it('should trigger field:validate event', done => {\n    $('body').append('<input type=\"email\" pattern=\"[A-F][0-9]{5}\" required id=\"element\" />');\n    $('#element').psly().on('field:validate', function () {\n      // we are before validation!\n      expect(this.validationResult).to.be(true);\n      done();\n    }).validate();\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should trigger field:validated event",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 253,
                "column": 42
            },
            "line": 253,
            "code": "  it('should trigger field:validated event', done => {\n    $('body').append('<input type=\"email\" pattern=\"[A-F][0-9]{5}\" required id=\"element\" />');\n    $('#element').psly().on('field:validated', function () {\n      // we are after validation!\n      expect(this.validationResult.length).to.be(1);\n      done();\n    }).validate();\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should trigger field:error event",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 261,
                "column": 38
            },
            "line": 261,
            "code": "  it('should trigger field:error event', done => {\n    $('body').append('<input type=\"email\" pattern=\"[A-F][0-9]{5}\" required id=\"element\" />');\n    $('#element').psly().on('field:error', function () {\n      expect(this.validationResult.length).to.be(1);\n      done();\n    }).validate();\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should trigger parsley:field:success event",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 268,
                "column": 48
            },
            "line": 268,
            "code": "  it('should trigger parsley:field:success event', done => {\n    $('body').append('<input type=\"email\" required id=\"element\" value=\"foo@bar.baz\" />');\n    $('#element').psly().on('field:success', function () {\n      expect(this.validationResult).to.be(true);\n      done();\n    }).validate();\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have the validationResult be changeable",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 275,
                "column": 52
            },
            "line": 275,
            "code": "  it('should have the validationResult be changeable', () => {\n    var submitted = false;\n    $('<form id=\"element\"><input/></form>').appendTo('body').parsley().on('field:success', field => {\n      field.validationResult = false;\n    }).on('field:error', field => {\n      field.validationResult = true;\n    }).on('form:submit', form => {\n      submitted = true;\n      return false;\n    });\n    $('#element').submit();\n    expect(submitted).to.be(false);\n    $('#element input').attr('required', true);\n    $('#element').submit();\n    expect(submitted).to.be(true);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow `this.value` alteration with field:validate.parsley event",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 291,
                "column": 76
            },
            "line": 291,
            "code": "  it('should allow `this.value` alteration with field:validate.parsley event', () => {\n    $('body').append('<input type=\"email\" required id=\"element\" value=\"foo@bar.baz\" />');\n    expect($('#element').parsley().validate()).to.be(true);\n    $('#element').parsley().on('field:validate', function () {\n      this.value = '';\n    });\n    expect($('#element').parsley().validate()).not.to.be(true);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have validateIfEmpty / force:true to validate empty fields",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 299,
                "column": 71
            },
            "line": 299,
            "code": "  it('should have validateIfEmpty / force:true to validate empty fields', () => {\n    var calls = [];\n    window.Parsley.addValidator('checkevenwhenempty', value => {\n      calls.push(value);\n      return 'foo@bar.com' === value;\n    }, 2);\n    $('body').append('<input type=\"email\" data-parsley-checkevenwhenempty id=\"element\" />');\n    expect($('#element').psly().isValid()).to.be.eql(true);\n    expect(calls).to.be.eql([]);\n    expect($('#element').psly().isValid({\n      force: true\n    })).to.be.eql(false);\n    expect(calls).to.be.eql(['']);\n    $('#element').attr('data-parsley-validate-if-empty', '');\n    expect($('#element').psly().isValid()).to.be.eql(false);\n    expect(calls).to.be.eql(['', '']);\n    $('#element').val('foo@bar.com');\n    expect($('#element').psly().isValid()).to.be.eql(true);\n    expect(calls).to.be.eql(['', '', 'foo@bar.com']);\n    window.Parsley.removeValidator('checkevenwhenempty');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow passing a specific value to `isValid` method",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 320,
                "column": 63
            },
            "line": 320,
            "code": "  it('should allow passing a specific value to `isValid` method', () => {\n    expect($('<input type=\"email\" value=\"foo\">').parsley().isValid()).to.be(false);\n    expect($('<input type=\"email\" value=\"foo\">').parsley().isValid({\n      value: ''\n    })).to.be(true);\n    expectWarning(() => {\n      expect($('<input type=\"email\" value=\"foo\">').parsley().isValid(true, '')).to.be(true);\n    });\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a whitespace=\"squish\" option",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 329,
                "column": 46
            },
            "line": 329,
            "code": "  it('should have a whitespace=\"squish\" option', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\" foo    bar \" />');\n    expect($('#element').parsley().getValue()).to.be(' foo    bar ');\n    $('#element').attr('data-parsley-whitespace', 'squish').parsley().actualizeOptions();\n    expect($('#element').parsley().getValue()).to.be('foo bar');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a whitespace=\"trim\" option",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 335,
                "column": 44
            },
            "line": 335,
            "code": "  it('should have a whitespace=\"trim\" option', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\" foo \" />');\n    expect($('#element').parsley().getValue()).to.be(' foo ');\n    $('#element').attr('data-parsley-whitespace', 'trim').parsley().actualizeOptions();\n    expect($('#element').parsley().getValue()).to.be('foo');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a trim-value option",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 341,
                "column": 37
            },
            "line": 341,
            "code": "  it('should have a trim-value option', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\" foo \" />');\n    expect($('#element').parsley().getValue()).to.be(' foo ');\n    $('#element').attr('data-parsley-trim-value', true).parsley().actualizeOptions();\n    expectWarning(() => {\n      expect($('#element').parsley().getValue()).to.be('foo');\n    });\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should delay validation if debounce option specified",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 349,
                "column": 58
            },
            "line": 349,
            "code": "  it('should delay validation if debounce option specified', done => {\n    // Use a an initially valid input. Any success event will be a sign that validation completed\n    // and treated as a failure. We will make the field invalid before delayed validation occurs,\n    // so only error event will be a test success.\n    $('body').append('<input data-parsley-debounce=\"100\" value=\"x\" required data-parsley-trigger=\"validatenow\" id=\"element\"/>');\n    $('#element').parsley().on('field:error', () => done()).on('field:success', () => expect().fail('validation should not happen yet')); // Trigger validation immediately\n\n    $('#element').trigger('validatenow'); // and a bit later, which should reset the counter\n\n    setTimeout(() => $('#element').trigger('validatenow'), 50); // Set final condition after a delay longer than our debounce, less than 50+debounce\n\n    setTimeout(() => $('#element').val(''), 140);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should inherit options from the form, even if the form is bound after",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 362,
                "column": 75
            },
            "line": 362,
            "code": "  it('should inherit options from the form, even if the form is bound after', () => {\n    $('body').append('<form id=\"element\" data-parsley-required>' + '<input type=\"text\"/></form>');\n    var psly = $('#element input').parsley();\n    expect(psly.isValid()).not.to.be(false);\n    $('#element').parsley();\n    expect(psly.isValid()).to.be(false);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have options that can be set easily",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 369,
                "column": 48
            },
            "line": 369,
            "code": "  it('should have options that can be set easily', () => {\n    var psly = $('<input type=\"text\"/>').parsley();\n    psly.options.required = true;\n    expect(psly.isValid()).to.be(false);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a value option",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 374,
                "column": 32
            },
            "line": 374,
            "code": "  it('should have a value option', () => {\n    $('body').append('<input type=\"text\" id=\"element\"/>');\n    expect($('#element').parsley({\n      value: 'foo'\n    }).getValue()).to.be('foo');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept a function as value option",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 380,
                "column": 46
            },
            "line": 380,
            "code": "  it('should accept a function as value option', () => {\n    $('body').append('<input type=\"text\" id=\"element\"/>');\n    var str = 'fo';\n    var parsley = $('#element').parsley({\n      value: () => {\n        return str = str + 'o';\n      }\n    });\n    expect(parsley.getValue()).to.be('foo');\n    expect(parsley.getValue()).to.be('fooo');\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly handle null or undefined values",
            "suites": [
                "Field"
            ],
            "updatePoint": {
                "line": 391,
                "column": 53
            },
            "line": 391,
            "code": "  it('should properly handle null or undefined values', () => {\n    $('body').append('<input type=\"text\" id=\"element\" required value/>');\n    expect($('#element').parsley().isValid()).to.be(false);\n  });",
            "file": "unit/field.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 5,
                "column": 26
            },
            "line": 5,
            "code": "  it('should be a function', () => {\n    expect(Form).to.be.a('function');\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should bind parsleyFields children",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 8,
                "column": 40
            },
            "line": 8,
            "code": "  it('should bind parsleyFields children', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\"/>' + '<div id=\"field2\"></div>' + '<textarea id=\"field2\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    expect(parsleyForm.fields.length).to.be(2);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should bind parsleyFields children, and not excluded ones",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 13,
                "column": 63
            },
            "line": 13,
            "code": "  it('should bind parsleyFields children, and not excluded ones', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\"/>' + '<div id=\"field2\"></div>' + '<textarea id=\"field2\"></textarea>' + '<div data-parsley-validate></div>' + // Form, not a valid child\n    '<input id=\"field3\" disabled />' + // Disabled, excluded by custom options below\n    '<input id=\"field-excluded\" data-parsley-excluded=\"true\" />' + // Excluded with 'excluded' option\n    '<input type=\"submit\"/>' + // Excluded field, not valid\n    '</form>');\n    var parsleyForm = $('#element').parsley({\n      excluded: '[disabled], input[type=button], input[type=submit], input[type=reset]'\n    });\n    expect(parsleyForm.fields.length).to.be(2);\n    expect($('#field-excluded').data('Parsley')).to.be(undefined);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly reset excluded",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 25,
                "column": 36
            },
            "line": 25,
            "code": "  it('should properly reset excluded', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field\" required class=\"foo\"/>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    parsleyForm.validate();\n    expect($('.parsley-error').length).to.be(1);\n    parsleyForm.options.excluded = \".foo\";\n    parsleyForm.validate();\n    expect($('.parsley-error').length).to.be(0);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly bind options for form and children fields",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 34,
                "column": 63
            },
            "line": 34,
            "code": "  it('should properly bind options for form and children fields', () => {\n    $('body').append('<form id=\"element\" data-parsley-trigger=\"change\">' + '<input id=\"field1\" type=\"text\" data-parsley-required=\"true\" />' + '<div id=\"field2\"></div>' + '<textarea id=\"field3\" data-parsley-notblank=\"true\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    expect(parsleyForm.fields.length).to.be(2);\n    expect($('#field1').parsley().options.trigger).to.be('change');\n    expect($('#field1').parsley().options.required).to.eql(true);\n    expect($('#field1').parsley().options.notblank).to.be(undefined);\n    expect($('#field3').parsley().options.notblank).to.eql(true);\n    expect($('#field3').parsley().options.required).to.be(undefined);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly store validation state after `validate()`",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 44,
                "column": 63
            },
            "line": 44,
            "code": "  it('should properly store validation state after `validate()`', () => {\n    $('body').append('<form id=\"element\" data-parsley-trigger=\"change\">' + '<input id=\"field1\" type=\"text\" data-parsley-required=\"true\" />' + '<div id=\"field2\"></div>' + '<textarea id=\"field3\" data-parsley-notblank=\"true\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    parsleyForm.validate();\n    expect(parsleyForm.validationResult).to.be(false);\n    $('#field1').val('foo');\n    $('#field3').val('foo');\n    expect(parsleyForm.validate()).to.be(true);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle group validation",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 53,
                "column": 36
            },
            "line": 53,
            "code": "  it('should handle group validation', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\" data-parsley-group=\"foo\" data-parsley-required=\"true\" />' + '<div id=\"field2\"></div>' + '<textarea id=\"field3\" data-parsley-required=\"true\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    expect(parsleyForm.isValid()).to.be(false);\n    $('#field1').val('value');\n    expect(parsleyForm.isValid()).to.be(false);\n    expect(parsleyForm.isValid({\n      group: 'foo'\n    })).to.be(true);\n    $('#field3').attr('data-parsley-group', 'bar');\n    expectWarning(() => {\n      expect(parsleyForm.isValid('bar')).to.be(false);\n    });\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle group validation with controls with multiple group names",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 67,
                "column": 76
            },
            "line": 67,
            "code": "  it('should handle group validation with controls with multiple group names', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\" data-parsley-group=\\'[\"foo\", \"bar\"]\\' data-parsley-required=\"true\" />' + '<input id=\"field2\" type=\"text\" data-parsley-group=\\'[\"bar\", \"baz\"]\\' data-parsley-required=\"true\" />' + '<textarea id=\"field3\" data-parsley-group=\\'[\"baz\", \"qux\"]\\' data-parsley-required=\"true\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    expect(parsleyForm.isValid()).to.be(false);\n    $('#field1').val('value');\n    $('#field2').val('value');\n    expect(parsleyForm.isValid()).to.be(false); // group name only on one required field, with value\n\n    expect(parsleyForm.isValid('foo')).to.be(true); // group name on multiple required fields, all with values\n\n    expect(parsleyForm.isValid('bar')).to.be(true); // group name on multiple required fields, one missing a value\n\n    expect(parsleyForm.isValid('baz')).to.be(false); // group name on single required field, without value\n\n    expect(parsleyForm.isValid('qux')).to.be(false);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send submit button values, even for async validations",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 83,
                "column": 66
            },
            "line": 83,
            "code": "  it('should send submit button values, even for async validations', () => {\n    var deferred = null;\n    window.Parsley.addValidator('custom', () => {\n      deferred = $.Deferred();\n      return deferred.promise();\n    });\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\" name=\"nick\" data-parsley-custom data-parsley-required />' + '<div id=\"field2\" name=\"comment\"></div>' + '<input type=\"submit\" name=\"foo\" value=\"bar\" />' + '<input type=\"submit\" name=\"foo\" value=\"other\" />' + '<button name=\"foo\" value=\"but\">ok</button>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    $('#element input:last').click(); // Form should not be submitted at this point, coz field is required\n\n    expect(deferred).to.be(null);\n    $('#field1').val('something');\n    var values = [];\n    $('#element').on('submit', evt => {\n      expect(evt.parsley).to.be(true);\n      values.push($('form input[type!=submit][name=\"foo\"]').val());\n      evt.preventDefault();\n    });\n    $('#element button').click();\n    expect(values).to.eql([]);\n    deferred.resolve();\n    expect(values).to.eql(['but']);\n    $('#element input[value=\"other\"]').click();\n    deferred.resolve();\n    expect(values).to.eql(['but', 'other']);\n    $('#element').submit(); // Similar to pressing 'enter'\n\n    deferred.resolve();\n    expect(values).to.eql(['but', 'other', 'bar']);\n    window.Parsley.removeValidator('custom');\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not validate when triggered by a button with formnovalidate",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 114,
                "column": 72
            },
            "line": 114,
            "code": "  it('should not validate when triggered by a button with formnovalidate', () => {\n    var $form = $('<form id=\"element\"><input type=\"string\" required /><input type=\"submit\" formnovalidate /><form>').appendTo($('body'));\n    $form.on('submit', e => {\n      e.preventDefault();\n    });\n    var callbacks = [];\n    $.each(['validate', 'error', 'success', 'validated', 'submit'], (i, cb) => {\n      $form.parsley().on('form:' + cb, () => {\n        callbacks.push(cb);\n      });\n    });\n    $form.parsley();\n    $form.find('input[type=submit]').click();\n    expect(callbacks.join()).to.be('');\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a force option for validate and isValid methods",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 129,
                "column": 65
            },
            "line": 129,
            "code": "  it('should have a force option for validate and isValid methods', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"email\" />' + '<input id=\"field3\" data-parsley-notblank=\"true\" />' + '</form>');\n    expect($('#element').parsley().isValid()).to.be(true);\n    expect($('#element').parsley().isValid({\n      force: true\n    })).to.be(false);\n    expect($('#element').parsley().validate()).to.be(true);\n    expectWarning(() => {\n      expect($('#element').parsley().validate(undefined, true)).to.be(false);\n    });\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly bind dynamically added fields",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 140,
                "column": 51
            },
            "line": 140,
            "code": "  it('should properly bind dynamically added fields', () => {\n    $('body').append('<form id=\"element\" data-parsley-trigger=\"change\"></form>');\n    $('#element').append('<input type=\"email\" id=\"email\" required />');\n    var fieldInstance = $('#email').psly();\n    expect(fieldInstance.__class__).to.be('Field');\n    var formInstance = $('#element').psly(); // form corectly have its field, and field have finaly its parent form\n\n    expect(formInstance.fields[0].$element.attr('id')).to.be('email');\n    expect(fieldInstance.parent.__class__).to.be('Form');\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire the right callbacks in the right order",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 150,
                "column": 56
            },
            "line": 150,
            "code": "  it('should fire the right callbacks in the right order', () => {\n    var $form = $('<form id=\"element\"><input type=\"string\" required /><form>').appendTo($('body'));\n    $form.on('submit', e => {\n      e.preventDefault();\n    });\n    var callbacks = [];\n    $.each(['validate', 'error', 'success', 'validated', 'submit'], (i, cb) => {\n      $form.parsley().on('form:' + cb, () => {\n        callbacks.push(cb);\n      });\n    });\n    $form.parsley();\n    $form.submit();\n    $form.find('input').val('Hello');\n    $form.submit();\n    expect(callbacks.join()).to.be('validate,error,validated,validate,success,validated,submit');\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire \"form:validate.parsley\" to give the opportunity for changes before validation occurs",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 167,
                "column": 102
            },
            "line": 167,
            "code": "  it('should fire \"form:validate.parsley\" to give the opportunity for changes before validation occurs', () => {\n    var $form = $('<form id=\"element\"><input type=\"string\" required /><form>').appendTo($('body'));\n    $form.parsley().on('form:validate', function () {\n      this.$element.find('input').remove();\n    });\n    expect($form.parsley().validate()).to.be(true);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should stop event propagation on form submit",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 174,
                "column": 50
            },
            "line": 174,
            "code": "  it('should stop event propagation on form submit', done => {\n    $('body').append('<form id=\"element\"><input type=\"text\" required/></form>');\n    var parsleyInstance = $('#element').parsley().on('form:validated', () => {\n      done();\n    });\n    $('#element').on('submit', () => {\n      // It sould never pass here!\n      expect(true).to.be(false);\n    }).submit();\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have the validationResult be changeable",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 184,
                "column": 52
            },
            "line": 184,
            "code": "  it('should have the validationResult be changeable', () => {\n    var submitted = false;\n    $('<form id=\"element\"></form>').appendTo('body').parsley().on('form:success', form => {\n      form.validationResult = false;\n    }).on('form:error', form => {\n      form.validationResult = true;\n    }).on('form:submit', form => {\n      submitted = true;\n      return false;\n    });\n    $('#element').submit();\n    expect(submitted).to.be(false);\n    $('#element').append('<input required>').submit();\n    expect(submitted).to.be(true);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire form:submit.event and be interruptable when validated",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 199,
                "column": 71
            },
            "line": 199,
            "code": "  it('should fire form:submit.event and be interruptable when validated', done => {\n    $('<form id=\"element\"></form>').appendTo('body').parsley().on('form:submit', () => {\n      done();\n      return false;\n    });\n    $('#element').submit();\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should deprecate interruptions with submitEvent.preventDefault()",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 206,
                "column": 70
            },
            "line": 206,
            "code": "  it('should deprecate interruptions with submitEvent.preventDefault()', () => {\n    expectWarning(() => {\n      $('<form id=\"element\"></form>').appendTo('body').parsley().on('form:validate', form => {\n        form.submitEvent.preventDefault();\n      }).on('form:submit', form => {\n        throw new Error('Form should not have been submitted');\n      });\n      $('#element').submit();\n    });\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire field:reset event if fields are removed or excluded",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 216,
                "column": 69
            },
            "line": 216,
            "code": "  it('should fire field:reset event if fields are removed or excluded', () => {\n    var parsleyInstance;\n    var steps = [];\n    var step = 'init';\n    var parsleyForm = $('<form id=\"element\"><input type=\"text\" required></form>').appendTo('body').parsley().on('field:reset', function () {\n      steps.push('form: ' + step);\n      expect(this).to.be(parsleyInstance);\n    });\n    parsleyInstance = $('#element input').parsley().on('field:reset', function () {\n      steps.push('field: ' + step);\n      expect(this).to.be(parsleyInstance);\n    });\n    parsleyForm.validate();\n    parsleyForm.validate();\n    parsleyForm.options.excluded = '[required]';\n    step = 'excluded';\n    parsleyForm.validate();\n    parsleyForm.validate();\n    parsleyForm.options.excluded = '';\n    step = 'not excluded';\n    parsleyForm.validate();\n    parsleyForm.validate();\n    var $i = $('#element input').detach();\n    step = 'detached';\n    parsleyForm.validate();\n    parsleyForm.validate();\n    $i.appendTo('form');\n    step = 'reattached';\n    parsleyForm.validate();\n    parsleyForm.validate();\n    $i.remove();\n    step = 'removed';\n    parsleyForm.validate();\n    parsleyForm.validate();\n    expect(steps).to.eql(['field: excluded', 'form: excluded', 'field: detached', 'form: detached', 'field: removed', 'form: removed']);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle validators returning promises",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 252,
                "column": 49
            },
            "line": 252,
            "code": "  it('should handle validators returning promises', done => {\n    var called = 0;\n    var shouldSubmit = false;\n    var form = $('<form id=\"element\"><input data-parsley-custom value=\"x\"/></form>').appendTo('body').parsley();\n    var deferred;\n    window.Parsley.addValidator('custom', () => {\n      called++;\n      deferred = $.Deferred();\n      return deferred.promise();\n    });\n    $('#element').on('submit', evt => {\n      evt.preventDefault();\n      expect(evt.parsley).to.be(true); // Sanity check\n\n      expect(shouldSubmit).to.be(true);\n      window.Parsley.removeValidator('custom');\n      done();\n    });\n    $('#element').submit();\n    expect(called).to.eql(1);\n    deferred.reject();\n    var promise = form.whenValidate();\n    expect(called).to.eql(2);\n    expect(promise.state()).to.eql('pending');\n    deferred.reject();\n    expect(promise.state()).to.eql('rejected');\n    $('#element').submit();\n    expect(called).to.eql(3);\n    shouldSubmit = true;\n    deferred.resolve();\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle priority correctly",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 283,
                "column": 38
            },
            "line": 283,
            "code": "  it('should handle priority correctly', () => {\n    var calls = [];\n    var form = $('<form id=\"element\"><input value=\"0\" data-parsley-custom1 data-parsley-custom2 data-parsley-custom3 data-parsley-custom4/></form>').appendTo('body').parsley().on('form:submit', evt => {\n      return false;\n    });\n\n    for (const i of [1, 2, 3, 4]) window.Parsley.addValidator(`custom${i}`, {\n      priority: i <= 2 ? 100 : 10 - i,\n      validateNumber: function (value, requirement) {\n        calls.push(i);\n        return value > i;\n      }\n    });\n\n    $('#element').submit();\n    $('#element input').val('3');\n    $('#element').submit();\n    $('#element input').val('5');\n    $('#element').submit();\n    expect(calls).to.eql([2, 1, 2, 1, 3, 2, 1, 3, 4]);\n\n    for (const i of [1, 2, 3, 4]) window.Parsley.removeValidator(`custom${i}`);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should refresh",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 306,
                "column": 20
            },
            "line": 306,
            "code": "  it('should refresh', () => {\n    $('body').append('<form id=\"element\">' + '<input required />' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    parsleyForm.validate();\n    expect($('.parsley-error').length).to.be(1);\n    parsleyForm.options.excluded = \"input\";\n    parsleyForm.refresh();\n    expect($('.parsley-error').length).to.be(0);\n  });",
            "file": "unit/form.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw errors with multiple items with weird automated generated names",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 4,
                "column": 86
            },
            "line": 4,
            "code": "  it('should not throw errors with multiple items with weird automated generated names', () => {\n    $('body').append('<form id=\"element\">' + '<input type=\"checkbox\" name=\"hello[]\" id=\"check1\" value=\"1\" />' + '<input type=\"checkbox\" name=\"{{ hello }}\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"$hello$\" id=\"check3\" value=\"3\" />' + '<input type=\"checkbox\" name=\"hello world[ x ]\" id=\"check4\" value=\"4\" />' + '<input type=\"checkbox\" value=\"foo\" />' + '</form>');\n    expectWarning(() => {\n      $('#element').parsley();\n    });\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return same Multiple instance for each field in same multiple group, and it should count as one field in form",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 10,
                "column": 122
            },
            "line": 10,
            "code": "  it('should return same Multiple instance for each field in same multiple group, and it should count as one field in form', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check\" id=\"check1\" value=\"1\" />' + '<input type=\"checkbox\" name=\"check\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"check\" id=\"check3\" value=\"3\" />' + '</form>');\n    var parsleyMultipleInstance = $('#check1').parsley();\n    expect($('#check2').parsley().__id__).to.be(parsleyMultipleInstance.__id__);\n    expect($('#check3').parsley().__id__).to.be(parsleyMultipleInstance.__id__);\n    expect(parsleyMultipleInstance.$elements.length).to.be(3);\n    expect($('#element').parsley().fields.length).to.be(1);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should auto add a data-parsley-multiple attribute to each correctly binded multiple input",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 18,
                "column": 95
            },
            "line": 18,
            "code": "  it('should auto add a data-parsley-multiple attribute to each correctly binded multiple input', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check\" id=\"check1\" value=\"1\" />' + '<input type=\"checkbox\" name=\"check\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"check\" id=\"check3\" value=\"3\" />' + '<input type=\"checkbox\" value=\"foo\" />' + '</form>');\n    expectWarning(() => {\n      $('#element').parsley();\n    });\n    expect($('#check1').attr('data-parsley-multiple')).to.be('check');\n    expect($('#check2').attr('data-parsley-multiple')).to.be('check');\n    expect($('#check3').attr('data-parsley-multiple')).to.be('check');\n    expect($('#check4').eq(3).attr('data-parsley-multiple')).to.be(undefined);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a specific `getValue` method (checkbox)",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 28,
                "column": 57
            },
            "line": 28,
            "code": "  it('should have a specific `getValue` method (checkbox)', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check[]\" id=\"check1\" value=\"1\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check2\" value=\"2\" />' + '</form>');\n    expect($('#check1').parsley().getValue()).to.be.eql([]);\n    expect($('#check2').attr('checked', 'checked').parsley().getValue()).to.be.eql(['2']);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a specific `getValue` method (radio)",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 33,
                "column": 54
            },
            "line": 33,
            "code": "  it('should have a specific `getValue` method (radio)', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"radio\" name=\"radio\" id=\"radio1\" value=\"3\" />' + '<input type=\"radio\" name=\"radio\" id=\"radio2\" value=\"4\" />' + '</form>');\n    expect($('#radio1').parsley().getValue()).to.be.eql('');\n    expect($('#radio2').attr('checked', 'checked').parsley().getValue()).to.be.eql('4');\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle required constraint (checkbox)",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 38,
                "column": 50
            },
            "line": 38,
            "code": "  it('should handle required constraint (checkbox)', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check[]\" id=\"check1\" value=\"1\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check2\" value=\"2\" required />' + '</form>');\n    expect($('#element').parsley().isValid()).to.be(false);\n    $('#check2').attr('checked', 'checked');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle required constraint (radio)",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 44,
                "column": 47
            },
            "line": 44,
            "code": "  it('should handle required constraint (radio)', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"radio\" name=\"radio\" id=\"radio1\" value=\"3\" required />' + '<input type=\"radio\" name=\"radio\" id=\"radio2\" value=\"4\" />' + '</form>');\n    expect($('#element').parsley().isValid()).to.be(false);\n    $('#radio1').attr('checked', 'checked');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle check constraint",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 50,
                "column": 36
            },
            "line": 50,
            "code": "  it('should handle check constraint', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check[]\" id=\"check1\" value=\"1\" data-parsley-check=\"[1, 2]\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check3\" value=\"3\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check4\" value=\"4\" />' + '</form>'); // if not required, field is optional and do not fail\n\n    expect($('#check1').parsley().isValid()).to.be.eql(true);\n    expect($('#element').parsley().isValid()).to.be(true); // once required, it fails if not rightly checked\n\n    $('#check1').attr('required', 'true');\n    expect($('#element').parsley().isValid()).to.be(false);\n    $('#check2').attr('checked', 'checked');\n    expect($('#element').parsley().isValid()).to.be(true);\n    $('#check1').attr('checked', 'checked');\n    $('#check3').attr('checked', 'checked');\n    expect($('#element').parsley().isValid()).to.be(false);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support select multiple",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 64,
                "column": 36
            },
            "line": 64,
            "code": "  it('should support select multiple', () => {\n    $('body').append('<select multiple name=\"foo\" id=\"element\" required data-parsley-mincheck=\"2\">' + '<option value=\"1\">1</option>' + '<option value=\"2\">2</option>' + '<option value=\"3\">3</option>' + '</select>');\n    var parsleyField = $('#element').parsley();\n    expect(parsleyField.__class__).to.be('FieldMultiple');\n    expect(parsleyField.options.multiple).to.be('foo');\n    expect(parsleyField.getValue()).to.be.eql([]);\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element option[value=\"1\"]').attr('selected', 'selected');\n    expect(parsleyField.getValue()).to.be.eql(['1']);\n    expect(parsleyField.isValid()).to.be(false);\n    $('#element option[value=\"2\"]').attr('selected', 'selected');\n    expect(parsleyField.getValue()).to.be.eql(['1', '2']);\n    expect(parsleyField.isValid()).to.be(true);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support select with default without a value",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 78,
                "column": 56
            },
            "line": 78,
            "code": "  it('should support select with default without a value', () => {\n    $('body').append('<select id=\"element\" required>' + '<option selected=\"selected\" value>default</option>' + '<option value=\"2\">2</option>' + '</select>');\n    expect($('#element').parsley().isValid()).to.be(false);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not bind radio or checkboxes without a name or and id or a multiple option",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 82,
                "column": 87
            },
            "line": 82,
            "code": "  it('should not bind radio or checkboxes without a name or and id or a multiple option', () => {\n    $('body').append('<input type=\"radio\" value=\"foo\" />');\n    var parsleyInstance = expectWarning(() => {\n      return $('input[type=radio]').psly();\n    });\n    expect(parsleyInstance.__class__).to.be('Parsley');\n    $('input[type=radio]').attr('id', 'element');\n    parsleyInstance = $('#element').parsley();\n    expect(parsleyInstance.__class__).to.be('FieldMultiple');\n    expect(parsleyInstance.options.multiple).to.be('element');\n    $('#element').attr('name', 'element');\n    parsleyInstance = $('input[name=element]').parsley();\n    expect(parsleyInstance.__class__).to.be('FieldMultiple');\n    expect(parsleyInstance.options.multiple).to.be('element');\n    parsleyInstance.destroy();\n    $('#element').attr('data-parsley-multiple', 'elementfoo');\n    parsleyInstance = $('input[name=element]').parsley();\n    expect(parsleyInstance.__class__).to.be('FieldMultiple');\n    expect(parsleyInstance.options.multiple).to.be('elementfoo');\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should bind select multiple input without a name or a multiple option",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 102,
                "column": 75
            },
            "line": 102,
            "code": "  it('should bind select multiple input without a name or a multiple option', () => {\n    $('body').append('<select multiple id=\"element\"></select>');\n    expect($('#element').parsley().__class__).to.be('FieldMultiple');\n    expect($('#element').attr('data-parsley-multiple')).to.be('element');\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should remove errors on change, whatever field is changed",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 107,
                "column": 63
            },
            "line": 107,
            "code": "  it('should remove errors on change, whatever field is changed', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check[]\" id=\"check1\" value=\"1\" required />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check3\" value=\"3\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check4\" value=\"4\" />' + '</form>');\n    $('#element').parsley().validate();\n    expect($('.parsley-errors-list.filled').length).to.be(1);\n    $('#check2').attr('checked', 'checked').trigger('input');\n    expect($('.parsley-errors-list.filled').length).to.be(0);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add errors on change if trigger enabled, whatever field is changed",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 114,
                "column": 79
            },
            "line": 114,
            "code": "  it('should add errors on change if trigger enabled, whatever field is changed', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check[]\" id=\"check1\" value=\"1\" required data-parsley-mincheck=\"2\" data-parsley-trigger=\"change\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check3\" value=\"3\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check4\" value=\"4\" />' + '</form>');\n    var parsleyInstance = $('#check1').parsley();\n    expect(parsleyInstance.validationResult).to.be(true);\n    $('#check3').trigger($.Event('change'));\n    expect(parsleyInstance.validationResult.length).to.be(1);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should bind only valid multiple siblings sharing the same name",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 121,
                "column": 68
            },
            "line": 121,
            "code": "  it('should bind only valid multiple siblings sharing the same name', () => {\n    $('body').append('<form id=\"element\">' + '<input name=\"foo\" type=\"hidden\" value=\"0\"/>' + '<input name=\"foo\" id=\"check\" type=\"checkbox\" value=\"1\"/>' + '<input name=\"foo\" id=\"check-2\" type=\"checkbox\" value=\"2\"/>' + '</form>' + '<form id=\"element-2\">' + '<input name=\"foo\" id=\"other-check\" type=\"checkbox\" value=\"3\"/>' + '</form>');\n    $('#element, #element-2').parsley();\n    expect($('#check').parsley().$elements.length).to.be(2);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle form namespace configuration inheritance and click events while multiple binding through Form",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 126,
                "column": 113
            },
            "line": 126,
            "code": "  it('should handle form namespace configuration inheritance and click events while multiple binding through Form', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"radio\" name=\"radio\" id=\"radio1\" value=\"3\" foo-bar-required />' + '<input type=\"radio\" name=\"radio\" id=\"radio2\" value=\"4\" />' + '</form>'); // set specific namespace here for form\n\n    var parsleyInstance = $('#element').parsley({\n      namespace: 'foo-bar-'\n    });\n    parsleyInstance.validate();\n    expect($('ul.parsley-errors-list li').length).to.be(1);\n    $('#radio2').trigger('click').trigger('input');\n    expect($('ul.parsley-errors-list li').length).to.be(0);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle dynamic multiple items removal",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 137,
                "column": 50
            },
            "line": 137,
            "code": "  it('should handle dynamic multiple items removal', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check[]\" id=\"check1\" value=\"1\" data-parsley-check=\"[1, 2]\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check3\" value=\"3\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check4\" value=\"4\" />' + '</form>'); // bind all multiple checkbox inputs. TODO refacto multiple binding\n\n    $('#element').parsley();\n    var parsleyInstance = $('[type=checkbox]:first').parsley();\n    expect(parsleyInstance.$elements.length).to.be(4);\n    $('[type=checkbox]:last').remove(); // validate form to go through all multiple inputs. TODO refacto multiple binding\n\n    $('#element').parsley().validate();\n    expect(parsleyInstance.$elements.length).to.be(3);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "value option can be a function",
            "suites": [
                "Multiple"
            ],
            "updatePoint": {
                "line": 148,
                "column": 36
            },
            "line": 148,
            "code": "  it('value option can be a function', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"checkbox\" name=\"check[]\" id=\"check1\" value=\"1\" required />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check2\" value=\"2\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check3\" value=\"3\" />' + '<input type=\"checkbox\" name=\"check[]\" id=\"check4\" value=\"4\" />' + '</form>');\n    var called = false;\n    var valid = $('#element').parsley({\n      value: function () {\n        called = true;\n        return ['x'];\n      }\n    }).isValid();\n    expect(valid).to.be(true);\n    expect(called).to.be(true);\n  });",
            "file": "unit/multiple.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 5,
                "column": 26
            },
            "line": 5,
            "code": "  it('should be a function', () => {\n    expect(Factory).to.be.a('function');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should register some window globals",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 8,
                "column": 41
            },
            "line": 8,
            "code": "  it('should register some window globals', () => {\n    expect(window.ParsleyUtils).not.to.be(undefined);\n    expect(window.ParsleyValidator).not.to.be(undefined);\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should throw an error if no element given",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 12,
                "column": 47
            },
            "line": 12,
            "code": "  it('should throw an error if no element given', () => {\n    expect(Factory).to.throwException();\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return Form instance if instantiated on a form",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 15,
                "column": 59
            },
            "line": 15,
            "code": "  it('should return Form instance if instantiated on a form', () => {\n    $('body').append('<form id=\"element\"></form>');\n    var parsleyInstance = new Factory($('#element')[0]);\n    expect(parsleyInstance).to.be.an('object');\n    expect(parsleyInstance.__class__).to.be('Form');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return Field instance if instantiated on a field",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 21,
                "column": 61
            },
            "line": 21,
            "code": "  it('should return Field instance if instantiated on a field', () => {\n    $('body').append('<input id=\"element\" />');\n    var parsleyInstance = new Factory($('#element')[0]);\n    expect(parsleyInstance).to.be.an('object');\n    expect(parsleyInstance.__class__).to.be('Field');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return Field even if instantiated on an unsupported element",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 27,
                "column": 72
            },
            "line": 27,
            "code": "  it('should return Field even if instantiated on an unsupported element', () => {\n    $('body').append('<div id=\"element\"></div>');\n    var parsleyInstance = new Factory($('#element')[0]);\n    expect(parsleyInstance).to.be.an('object');\n    expect(parsleyInstance.__class__).to.be('Field');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return Field instance even if instantiated on an excluded field type, and do not have an errors container",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 33,
                "column": 118
            },
            "line": 33,
            "code": "  it('should return Field instance even if instantiated on an excluded field type, and do not have an errors container', () => {\n    $('body').append('<input type=\"submit\" id=\"element\" />');\n    var parsleyInstance = new Factory($('#element')[0]);\n    expect(parsleyInstance).to.be.an('object');\n    expect(parsleyInstance.__class__).to.be('Field');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have excluded fields by default",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 39,
                "column": 44
            },
            "line": 39,
            "code": "  it('should have excluded fields by default', () => {\n    $('body').append('<form id=\"element\" >' + '<input type=\"submit\" />' + '<input type=\"reset\" />' + '<input type=\"hidden\" />' + '<input type=\"button\" />' + '</form>');\n    var parsleyInstance = $('#element').parsley();\n    expect(parsleyInstance.fields.length).to.be(0);\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return Form if instantiated on an unsupported element with data-parsley-validate attribute",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 44,
                "column": 103
            },
            "line": 44,
            "code": "  it('should return Form if instantiated on an unsupported element with data-parsley-validate attribute', () => {\n    $('body').append('<div id=\"element\" data-parsley-validate></div>');\n    var parsleyInstance = new Factory($('#element')[0]);\n    expect(parsleyInstance).to.be.an('object');\n    expect(parsleyInstance.__class__).to.be('Form');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle namespace configuration",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 50,
                "column": 43
            },
            "line": 50,
            "code": "  it('should handle namespace configuration', () => {\n    $('body').append('<div id=\"element\"></div>'); // default ParsleyOptions.namespace\n\n    expect(new Factory($('#element')[0]).options.namespace).to.be('data-parsley-'); // global JS config\n\n    $('#element').parsley().destroy();\n    window.ParsleyConfig.namespace = 'data-foo-';\n    expect(new Factory($('#element')[0]).options.namespace).to.be('data-foo-'); // option on the go\n\n    $('#element').parsley().destroy();\n    expect(new Factory($('#element')[0], {\n      namespace: 'data-bar-'\n    }).options.namespace).to.be('data-bar-'); // data- DOM-API\n\n    $('#element').parsley().destroy();\n    $('#element').attr('data-parsley-namespace', 'data-baz-');\n    expect(new Factory($('#element')[0], {\n      namespace: 'data-bar-'\n    }).options.namespace).to.be('data-bar-');\n    delete window.ParsleyConfig.namespace;\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle proper options management",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 71,
                "column": 45
            },
            "line": 71,
            "code": "  it('should handle proper options management', () => {\n    $('body').append('<form id=\"element\" data-parsley-foo=\"bar\" data-parsley-baz=\"baz\"></form>');\n    window.ParsleyConfig = Object.assign(window.ParsleyConfig, {\n      bar: 'baz',\n      baz: 'qux'\n    });\n    var parsleyInstance = new Factory($('#element')[0], {\n      qux: 'bux'\n    });\n    expect(parsleyInstance.options.foo).to.be('bar');\n    expect(parsleyInstance.options.baz).to.be('baz');\n    expect(parsleyInstance.options.bar).to.be('baz');\n    expect(parsleyInstance.options.qux).to.be('bux');\n    delete window.ParsleyConfig.bar;\n    delete window.ParsleyConfig.baz;\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a jquery plugin API",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 87,
                "column": 37
            },
            "line": 87,
            "code": "  it('should have a jquery plugin API', () => {\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-namespace=\"baz-\"></div>');\n    var parsleyInstance = $('#element').parsley({\n      foo: 'bar'\n    });\n    expect(parsleyInstance.__class__).to.be('Field');\n    expect(parsleyInstance.options.namespace).to.be('baz-');\n    expect(parsleyInstance.options.foo).to.be('bar');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a jquery API returning undefined if done on a empty set",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 96,
                "column": 73
            },
            "line": 96,
            "code": "  it('should have a jquery API returning undefined if done on a empty set', () => {\n    expect($('#foo').parsley()).to.be(undefined);\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a jquery API that binds multiple selectors",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 99,
                "column": 60
            },
            "line": 99,
            "code": "  it('should have a jquery API that binds multiple selectors', () => {\n    $('body').append('<div id=\"element\">' + '<input type=\"text\" id=\"foo\" required />' + '<input type=\"text\" id=\"bar\" required />' + '</div>');\n    expect($('input').parsley().length).to.be(2);\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set options with $.fn.parsley",
            "suites": [
                "Factory"
            ],
            "updatePoint": {
                "line": 103,
                "column": 42
            },
            "line": 103,
            "code": "  it('should set options with $.fn.parsley', () => {\n    $('body').append('<form id=\"element\" data-parsley-foo=\"bar\"></form>');\n    var parsleyInstance = $('#element').parsley({\n      foo: 42\n    });\n    expect(parsleyInstance.options.foo).to.be(42);\n    $('#element').parsley({\n      foo: 'updated'\n    });\n    expect(parsleyInstance.options.foo).to.be('updated');\n    delete parsleyInstance.options.foo;\n    expect(parsleyInstance.options.foo).to.be('bar');\n  });",
            "file": "unit/parsley.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listen() without context",
            "suites": [
                "PubSub"
            ],
            "updatePoint": {
                "line": 4,
                "column": 30
            },
            "line": 4,
            "code": "  it('listen() without context', done => {\n    expectWarning(() => {\n      $.listen('foo', (instance, arg) => {\n        expect(arg).to.be('bar');\n        done();\n      });\n    });\n    $.emit('foo', 'bar');\n  });",
            "file": "unit/pubsub.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listen() with context",
            "suites": [
                "PubSub"
            ],
            "updatePoint": {
                "line": 13,
                "column": 27
            },
            "line": 13,
            "code": "  it('listen() with context', done => {\n    var obj = {\n      foo: bar => {\n        return 'foo' + bar;\n      }\n    };\n    $.listen('foo', obj, function (instance, arg) {\n      expect(this.foo(arg)).to.be('foobar');\n      done();\n    });\n    $.emit('foo', 'bar');\n  });",
            "file": "unit/pubsub.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listenTo() Field",
            "suites": [
                "PubSub"
            ],
            "updatePoint": {
                "line": 25,
                "column": 22
            },
            "line": 25,
            "code": "  it('listenTo() Field', done => {\n    $('body').append('<input type=\"text\" id=\"element\" />');\n    $('body').append('<input type=\"text\" id=\"element2\" />');\n    var instance = $('#element').psly();\n    $.listenTo(instance, 'foo', parsleyInstance => {\n      expect(parsleyInstance.__id__).to.be(instance.__id__);\n      done();\n    });\n    $.emit('foo', 'bar');\n    $.emit('foo', $('#element2').psly());\n    $.emit('foo', instance);\n  });",
            "file": "unit/pubsub.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listenTo() Form will listen to Form",
            "suites": [
                "PubSub"
            ],
            "updatePoint": {
                "line": 37,
                "column": 41
            },
            "line": 37,
            "code": "  it('listenTo() Form will listen to Form', done => {\n    $('body').append('<form id=\"element\" data-parsley-trigger=\"change\">' + '<input id=\"field1\" type=\"text\" data-parsley-required=\"true\" />' + '<div id=\"field2\"></div>' + '<textarea id=\"field3\" data-parsley-notblank=\"true\"></textarea>' + '</form>');\n    $.listenTo($('#element').psly(), 'foo', parsleyInstance => {\n      expect($('#element').psly().__id__ === parsleyInstance.__id__);\n      done();\n    });\n    $.emit('foo', $('#element').psly());\n  });",
            "file": "unit/pubsub.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listenTo() Form will listen to its fields too",
            "suites": [
                "PubSub"
            ],
            "updatePoint": {
                "line": 45,
                "column": 51
            },
            "line": 45,
            "code": "  it('listenTo() Form will listen to its fields too', done => {\n    $('body').append('<form id=\"element\" data-parsley-trigger=\"change\">' + '<input id=\"field1\" type=\"text\" data-parsley-required=\"true\" />' + '<div id=\"field2\"></div>' + '<textarea id=\"field3\" data-parsley-notblank=\"true\"></textarea>' + '</form>');\n    $.listenTo($('#element').psly(), 'foo', instance => {\n      done();\n    });\n    $.emit('foo', $('#field1').psly());\n  });",
            "file": "unit/pubsub.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "unsubscribeTo()",
            "suites": [
                "PubSub"
            ],
            "updatePoint": {
                "line": 52,
                "column": 21
            },
            "line": 52,
            "code": "  it('unsubscribeTo()', done => {\n    $('body').append('<input type=\"text\" id=\"element\" />');\n    $.listen('foo', () => {\n      done();\n    });\n    $.listenTo($('#element').psly(), 'foo', () => {\n      expect(true).to.be(false);\n    });\n    $.unsubscribeTo($('#element').psly(), 'foo');\n    $.emit('foo', $('#element').psly());\n  });",
            "file": "unit/pubsub.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "unsubscribe()",
            "suites": [
                "PubSub"
            ],
            "updatePoint": {
                "line": 63,
                "column": 19
            },
            "line": 63,
            "code": "  it('unsubscribe()', () => {\n    var fn = () => {\n      expect(true).to.be(false);\n    };\n\n    $.listen('foo', fn);\n    $.unsubscribe('foo', fn);\n    $.emit('foo');\n  });",
            "file": "unit/pubsub.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have window.ParsleyExtend defined",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 32,
                "column": 46
            },
            "line": 32,
            "code": "  it('should have window.ParsleyExtend defined', () => {\n    expect(window.ParsleyExtend).not.to.be(undefined);\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle properly validation with remote validator",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 35,
                "column": 61
            },
            "line": 35,
            "code": "  it('should handle properly validation with remote validator', done => {\n    $('body').append('<input type=\"text\" data-parsley-remote=\"http://foo.bar\" id=\"element\" required name=\"element\" value=\"foo\" />');\n    var parsleyInstance = $('#element').parsley();\n    stubAjax(400);\n    parsleyInstance.whenValid().fail(() => {\n      stubAjax(200);\n      $('#element').val('bar');\n      parsleyInstance.whenValid().done(() => {\n        done();\n      });\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle remote reverse option",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 47,
                "column": 41
            },
            "line": 47,
            "code": "  it('should handle remote reverse option', done => {\n    $('body').append('<input type=\"text\" data-parsley-remote=\"http://foo.bar\" id=\"element\" data-parsley-remote-reverse=\"true\" required name=\"element\" value=\"baz\" />');\n    var parsleyInstance = $('#element').parsley();\n    stubAjax(200);\n    parsleyInstance.whenValid().fail(() => {\n      stubAjax(400);\n      $('#element').val('bux');\n      parsleyInstance.whenValid().done(() => {\n        done();\n      });\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle remote options",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 59,
                "column": 34
            },
            "line": 59,
            "code": "  it('should handle remote options', done => {\n    $('body').append('<input type=\"text\" data-parsley-remote=\"http://foo.bar\" id=\"element\" data-parsley-remote-options=\\'{ \"type\": \"POST\", \"data\": {\"foo\": \"bar\"} }\\' required name=\"element\" value=\"baz\" />');\n    var parsleyInstance = $('#element').parsley();\n    stubAjax(200);\n    parsleyInstance.whenValid().done(() => {\n      expect($.ajax.calledWithMatch({\n        type: 'POST'\n      })).to.be(true);\n      expect($.ajax.calledWithMatch({\n        url: 'http://foo.bar'\n      })).to.be(true);\n      expect($.ajax.calledWithMatch({\n        data: {\n          foo: 'bar',\n          element: 'baz'\n        }\n      })).to.be(true);\n      done();\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should save some calls for queries already done",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 79,
                "column": 53
            },
            "line": 79,
            "code": "  it('should save some calls for queries already done', done => {\n    $('body').append('<input type=\"text\" data-parsley-remote=\"http://foo.bar\" id=\"element\" required name=\"element\" value=\"foo\" />');\n    var parsleyInstance = $('#element').parsley();\n    stubAjax(200);\n    parsleyInstance.whenValid().done(() => {\n      expect($.ajax.calledOnce).to.be(true);\n      expect($.ajax.calledWithMatch({\n        data: {\n          element: 'foo'\n        }\n      })).to.be(true);\n      stubAjax(400);\n      $('#element').val('bar');\n      parsleyInstance.whenValid().fail(() => {\n        expect($.ajax.calledOnce).to.be(true);\n        expect($.ajax.calledWithMatch({\n          data: {\n            element: 'bar'\n          }\n        })).to.be(true);\n        stubAjax(200);\n        $('#element').val('foo');\n        parsleyInstance.whenValid().done(() => {\n          expect($.ajax.callCount).to.be(0);\n          expect($.ajax.calledOnce).to.be(false);\n          done();\n        });\n      });\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle remote validator option",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 109,
                "column": 43
            },
            "line": 109,
            "code": "  it('should handle remote validator option', done => {\n    window.Parsley.addAsyncValidator('custom', xhr => {\n      return xhr.status === 404;\n    });\n    $('body').append('<input type=\"text\" data-parsley-remote=\"http://foo.bar\" id=\"element\" data-parsley-remote-validator=\"custom\" required name=\"element\" value=\"foobar\" />');\n    var parsleyInstance = $('#element').parsley();\n    stubAjax(200);\n    parsleyInstance.whenValid().fail(() => {\n      stubAjax(400);\n      $('#element').val('foobaz');\n      parsleyInstance.whenValid().fail(() => {\n        stubAjax(404);\n        $('#element').val('fooquux');\n        parsleyInstance.whenValid().done(() => {\n          done();\n        });\n      });\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle remote validator option with custom url",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 128,
                "column": 59
            },
            "line": 128,
            "code": "  it('should handle remote validator option with custom url', done => {\n    $('body').append('<input type=\"text\" data-parsley-remote id=\"element\" data-parsley-remote-validator=\"mycustom\" required name=\"element\" value=\"foobar\" />');\n    var parsleyInstance = $('#element').parsley();\n    window.Parsley.addAsyncValidator('mycustom', xhr => {\n      return xhr.status === 404;\n    }, 'http://foobar.baz');\n    stubAjax(200);\n    parsleyInstance.whenValid().fail(() => {\n      expect($.ajax.calledWithMatch({\n        url: 'http://foobar.baz'\n      })).to.be(true);\n      done();\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have PluginField as the `this` context of the AJAX callback",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 142,
                "column": 72
            },
            "line": 142,
            "code": "  it('should have PluginField as the `this` context of the AJAX callback', done => {\n    $('body').append('<input type=\"text\" data-parsley-remote id=\"element\" data-parsley-remote-validator=\"mycustom\" required name=\"element\" value=\"foobar\" />');\n    var parsleyInstance = $('#element').parsley();\n    window.Parsley.addAsyncValidator('mycustom', function (xhr) {\n      expect(this.__class__).to.be('Field');\n    }, 'http://foobar.baz');\n    stubAjax(200);\n    parsleyInstance.whenValid().fail(() => {\n      expect($.ajax.calledWithMatch({\n        url: 'http://foobar.baz'\n      })).to.be(true);\n      done();\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle deprecated call to addAsyncValidator using an instance",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 156,
                "column": 74
            },
            "line": 156,
            "code": "  it('should handle deprecated call to addAsyncValidator using an instance', () => {\n    $('body').append('<input type=\"text\" data-parsley-remote id=\"element\" data-parsley-remote-validator=\"mycustom\" required name=\"element\" value=\"foobar\" />');\n    expectWarning(() => {\n      $('input').parsley().addAsyncValidator('instancetest', $.noop, '');\n    });\n    expect(Parsley.asyncValidators.instancetest).not.to.be(undefined);\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should clear the cache before and after submitting a form",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 163,
                "column": 63
            },
            "line": 163,
            "code": "  it('should clear the cache before and after submitting a form', () => {\n    var parsleyInstance = $('<form id=\"element\"><input type=\"text\" required></form>').appendTo('body').on('submit', evt => {\n      evt.preventDefault();\n    }).parsley();\n    window.Parsley._remoteCache = {\n      dummy: 42\n    };\n    $('#element').submit();\n    expect(window.Parsley._remoteCache.dummy).to.be(undefined);\n    window.Parsley._remoteCache = {\n      dummy: 42\n    };\n    $('#element input').val('hello');\n    parsleyInstance.validate();\n    expect(window.Parsley._remoteCache.dummy).to.be(42);\n    $('#element').submit();\n    expect(window.Parsley._remoteCache.dummy).to.be(undefined);\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow the change of XHR options",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 181,
                "column": 44
            },
            "line": 181,
            "code": "  it('should allow the change of XHR options', done => {\n    var parsleyInstance = $('<input id=\"element\" data-parsley-remote=\"http://parsleyjs.org\" name=\"element\" value=\"foobar\"/>').appendTo('body').parsley().on('field:ajaxoptions', (field, options) => {\n      options.url = options.url + '/test/' + options.data.element;\n    });\n    stubAjax(200);\n    parsleyInstance.whenValid().done(() => {\n      expect($.ajax.calledWithMatch({\n        url: 'http://parsleyjs.org/test/foobar'\n      })).to.be(true);\n      expect($.ajax.calledWithMatch({\n        data: {\n          element: 'foobar'\n        }\n      })).to.be(true);\n      done();\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow RESTful URLs",
            "suites": [
                "ParsleyRemote"
            ],
            "updatePoint": {
                "line": 198,
                "column": 31
            },
            "line": 198,
            "code": "  it('should allow RESTful URLs', done => {\n    var parsleyInstance = $('<input id=\"element\" data-parsley-remote=\"http://parsleyjs.org/thisisrest/{value}\" name=\"element\" value=\"foo bar\"/>').appendTo('body').parsley();\n    stubAjax(200);\n    parsleyInstance.whenValid().done(() => {\n      expect($.ajax.calledWithMatch({\n        url: 'http://parsleyjs.org/thisisrest/foo%20bar'\n      })).to.be(true);\n      expect($.ajax.calledWithMatch({\n        data: {\n          element: 'foo bar'\n        }\n      })).to.be(false);\n      done();\n    });\n  });",
            "file": "unit/remote.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should abort successives querries and do not handle their return",
            "suites": [
                "ParsleyRemote"
            ],
            "line": 213,
            "code": "  it.skip('should abort successives querries and do not handle their return');",
            "file": "unit/remote.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "should create proper errors container when needed",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 8,
                "column": 55
            },
            "line": 8,
            "code": "  it('should create proper errors container when needed', () => {\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-required />');\n    var parsleyField = $('#element').psly();\n    expect($('ul#parsley-id-' + parsleyField.__id__).length).to.be(0);\n    parsleyField.validate();\n    expect($('#element').attr('data-parsley-id')).to.be(parsleyField.__id__);\n    expect($('ul#parsley-id-' + parsleyField.__id__).length).to.be(1);\n    expect($('ul#parsley-id-' + parsleyField.__id__).hasClass('parsley-errors-list')).to.be(true);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle errors-container option",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 17,
                "column": 43
            },
            "line": 17,
            "code": "  it('should handle errors-container option', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\" required data-parsley-errors-container=\"#container\" />' + '<div id=\"container\"></div>' + '<div id=\"container2\"></div>' + '</form>');\n    $('#element').psly().validate();\n    expect($('#container .parsley-errors-list').length).to.be(1);\n    $('#element').psly().destroy();\n    $('#field1').removeAttr('data-parsley-errors-container');\n    $('#element').psly({\n      errorsContainer: function (ins) {\n        expect(ins).to.be($('#field1').psly());\n        expect(this).to.be($('#field1').psly());\n        return $('#container2');\n      }\n    }).validate();\n    expect($('#container2 .parsley-errors-list').length).to.be(1);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle errors-container option with function",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 32,
                "column": 57
            },
            "line": 32,
            "code": "  it('should handle errors-container option with function', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"text\" required data-parsley-errors-container=\"parsleyContainerFunction\" />' + '<div id=\"container\"></div>' + '<div id=\"container2\"></div>' + '</form>');\n\n    window.parsleyContainerFunction = function (ins) {\n      expect(ins).to.be($('#field1').psly());\n      expect(this).to.be($('#field1').psly());\n      return $('#container2');\n    };\n\n    $('#element').psly().validate();\n    expect($('#container2 .parsley-errors-list').length).to.be(1);\n    delete window.parsleyContainerFunction;\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle wrong errors-container option",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 45,
                "column": 49
            },
            "line": 45,
            "code": "  it('should handle wrong errors-container option', () => {\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-errors-container=\"#donotexist\" required/>');\n    var parsley = $('#element').psly();\n    expectWarning(() => {\n      parsley.validate();\n    });\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not add success class on a field without constraints",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 52,
                "column": 65
            },
            "line": 52,
            "code": "  it('should not add success class on a field without constraints', () => {\n    $('body').append('<input type=\"text\" id=\"element\" />');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('#element').hasClass('parsley-error')).to.be(false);\n    expect($('#element').hasClass('parsley-success')).to.be(false);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not add success class on an empty optional field",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 59,
                "column": 61
            },
            "line": 59,
            "code": "  it('should not add success class on an empty optional field', () => {\n    $('body').append('<input type=\"number\" id=\"element\" />');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('#element').hasClass('parsley-error')).to.be(false);\n    expect($('#element').hasClass('parsley-success')).to.be(false);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add proper parsley class on success or failure ()",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 68,
                "column": 71
            },
            "line": 68,
            "code": "    it(`should add proper parsley class on success or failure (${type})`, () => {\n      $('body').append(`<form id=\"element\"><section>${html}</section></form>`);\n      let form = $('#element').parsley();\n      let $inputHolder = $('#element section').children().first();\n      form.validate();\n      expect($inputHolder.attr('class')).to.be('parsley-error');\n      expect($('.parsley-errors-list').parent().prop(\"tagName\")).to.be('SECTION'); // Fill and revalidate:\n\n      fillValue($inputHolder);\n      form.validate();\n      expect($inputHolder.attr('class')).to.be('parsley-success');\n    });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle class-handler option",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 91,
                "column": 40
            },
            "line": 91,
            "code": "  it('should handle class-handler option', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"email\" data-parsley-class-handler=\"#field2\" required />' + '<div id=\"field2\"></div>' + '<div id=\"field3\"></div>' + '</form>');\n    $('#element').psly().validate();\n    expect($('#field2').hasClass('parsley-error')).to.be(true);\n    $('#element').psly().destroy();\n    $('#field1').removeAttr('data-parsley-class-handler');\n    $('#element').psly({\n      classHandler: function (ins) {\n        expect(ins).to.be($('#field1').parsley());\n        expect(this).to.be($('#field1').parsley());\n        return $('#field3');\n      }\n    }).validate();\n    expect($('#field3').hasClass('parsley-error')).to.be(true);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle class-handler option with a function",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 106,
                "column": 56
            },
            "line": 106,
            "code": "  it('should handle class-handler option with a function', () => {\n    $('body').append('<form id=\"element\">' + '<input id=\"field1\" type=\"email\" data-parsley-class-handler=\"#field2\" required />' + '<div id=\"field4\"></div>' + '</form>');\n    $('#field1').attr('data-parsley-class-handler', 'parsleyClassHandler');\n\n    window.parsleyClassHandler = function (ins) {\n      expect(ins).to.be($('#field1').parsley());\n      expect(this).to.be($('#field1').parsley());\n      return $('#field4');\n    };\n\n    $('#element').psly().validate();\n    expect($('#field4').hasClass('parsley-error')).to.be(true);\n    $('#element').psly().destroy();\n    $('#field1').attr('data-parsley-class-handler', 'someUndefinedFunctionName');\n    expectWarning(() => {\n      $('#element').psly().validate();\n    });\n    expect($('#field1').hasClass('parsley-error')).to.be(true);\n    delete window.parsleyClassHandler;\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show higher priority error message by default",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 126,
                "column": 58
            },
            "line": 126,
            "code": "  it('should show higher priority error message by default', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required />');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('#element').hasClass('parsley-error')).to.be(true);\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-required')).to.be(true);\n    $('#element').val('foo').psly().validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-type')).to.be(true);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show custom error message by validator",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 137,
                "column": 51
            },
            "line": 137,
            "code": "  it('should show custom error message by validator', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required data-parsley-required-message=\"foo\" data-parsley-type-message=\"bar\"/>');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('foo');\n    $('#element').val('foo').psly().validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('bar');\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show custom error message with variabilized parameters",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 145,
                "column": 67
            },
            "line": 145,
            "code": "  it('should show custom error message with variabilized parameters', () => {\n    $('body').append('<input type=\"text\" id=\"element\" value=\"bar\" data-parsley-minlength=\"7\" data-parsley-minlength-message=\"foo %s bar\"/>');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('foo 7 bar');\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show custom error message for whole field",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 151,
                "column": 54
            },
            "line": 151,
            "code": "  it('should show custom error message for whole field', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required data-parsley-error-message=\"baz\"/>');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('baz');\n    $('#element').val('foo').psly().validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('baz');\n    $('#element').val('foo@bar.baz').psly().validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should display no error message if diabled",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 161,
                "column": 48
            },
            "line": 161,
            "code": "  it('should display no error message if diabled', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required data-parsley-errors-messages-disabled />');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    expect($('#element').hasClass('parsley-error')).to.be(true);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle simple triggers (change, focus...)",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 168,
                "column": 54
            },
            "line": 168,
            "code": "  it('should handle simple triggers (change, focus...)', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required data-parsley-trigger=\"change\" />');\n    var parsleyField = $('#element').psly();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    $('#element').trigger($.Event('change'));\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow customization of triggers after first error",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 175,
                "column": 62
            },
            "line": 175,
            "code": "  it('should allow customization of triggers after first error', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required data-parsley-trigger-after-failure=\"focusout\" />');\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    $('#element').val('a@example.com');\n    $('#element').trigger('input');\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    $('#element').trigger('focusout');\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should auto bind error trigger on select field error (input=text)",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 186,
                "column": 71
            },
            "line": 186,
            "code": "  it('should auto bind error trigger on select field error (input=text)', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required />');\n    var parsleyField = $('#element').psly();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-required')).to.be(true);\n    $('#element').val('foo').trigger('input');\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-type')).to.be(true);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should auto bind error trigger on select field error (select)",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 196,
                "column": 67
            },
            "line": 196,
            "code": "  it('should auto bind error trigger on select field error (select)', () => {\n    $('body').append('<select id=\"element\" required>' + '<option value=\"\">Choose</option>' + '<option value=\"foo\">foo</option>' + '<option value=\"bar\">bar</option>' + '</select>');\n    var parsleyField = $('#element').psly();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-required')).to.be(true);\n    $('#element [option=\"foo\"]').attr('selected', 'selected');\n    $('#element').trigger($.Event('change'));\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-type')).to.be(false);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle complex triggers (keyup, keypress...)",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 207,
                "column": 57
            },
            "line": 207,
            "code": "  it('should handle complex triggers (keyup, keypress...)', () => {\n    $('body').append('<input type=\"email\" id=\"element\" required data-parsley-trigger=\"keyup\" />');\n    var parsleyField = $('#element').psly();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    $('#element').val('foo').trigger($.Event('keyup'));\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    $('#element').val('foob').trigger($.Event('keyup'));\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle trigger keyup threshold validation",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 216,
                "column": 54
            },
            "line": 216,
            "code": "  it('should handle trigger keyup threshold validation', () => {\n    $('body').append('<input type=\"email\" id=\"element\" data-parsley-validation-threshold=\"7\" required data-parsley-trigger=\"keyup\" />');\n    var parsleyField = $('#element').psly();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    $('#element').val('a@b.com').trigger('keyup');\n    expect($('#element').hasClass('success')).to.be(false);\n    $('#element').val('aa@b.com').trigger('keyup');\n    expect($('#element').hasClass('parsley-success')).to.be(true);\n    $('#element').val('@b.com').trigger('keyup');\n    expect($('#element').hasClass('parsley-success')).to.be(false);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle UI disabling",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 227,
                "column": 32
            },
            "line": 227,
            "code": "  it('should handle UI disabling', () => {\n    $('body').append('<input type=\"email\" id=\"element\" data-parsley-ui-enabled=\"false\" required data-parsley-trigger=\"keyup\" />');\n    var parsleyField = $('#element').psly();\n    expect($('ul#parsley-id-' + parsleyField.__id__).length).to.be(0);\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__).length).to.be(0);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add novalidate on form elem",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 234,
                "column": 40
            },
            "line": 234,
            "code": "  it('should add novalidate on form elem', () => {\n    $('body').append('<form id=\"element\" data-parsley-trigger=\"change\">' + '<input id=\"field1\" type=\"text\" data-parsley-required=\"true\" />' + '<div id=\"field2\"></div>' + '<textarea id=\"field3\" data-parsley-notblank=\"true\"></textarea>' + '</form>');\n    var parsleyForm = $('#element').parsley();\n    expect($('#element').attr('novalidate')).not.to.be(undefined);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should test the no-focus option",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 239,
                "column": 37
            },
            "line": 239,
            "code": "  it('should test the no-focus option', () => {\n    $('body').append('<form id=\"element\" data-parsley-focus=\"first\">' + '<input id=\"field1\" type=\"text\" data-parsley-required=\"true\" data-parsley-no-focus />' + '<input id=\"field2\" data-parsley-required />' + '</form>');\n    $('#element').parsley().validate();\n    expect($('#element').parsley()._focusedField.attr('id')).to.be('field2');\n    $('#field2').val('foo');\n    $('#element').psly().validate();\n    expect($('#element').parsley()._focusedField).to.be(null);\n    $('#field1').removeAttr('data-parsley-no-focus');\n    $('#element').psly().validate();\n    expect($('#element').parsley()._focusedField.attr('id')).to.be('field1');\n    $('#element').attr('data-parsley-focus', 'last');\n    $('#element').psly().validate();\n    expect($('#element').parsley()._focusedField.attr('id')).to.be('field1');\n    $('#field2').val('');\n    $('#element').psly().validate();\n    expect($('#element').parsley()._focusedField.attr('id')).to.be('field2');\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should test the manual add / update / remove error",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 256,
                "column": 56
            },
            "line": 256,
            "code": "  it('should test the manual add / update / remove error', () => {\n    $('body').append('<input type=\"text\" id=\"element\" />');\n    var parsleyField = $('#element').parsley();\n    parsleyField.removeError('non-existent');\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n    expect($('#element').hasClass('parsley-error')).to.be(false);\n    expectWarning(() => {\n      window.ParsleyUI.addError(parsleyField, 'foo', 'bar');\n    });\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);\n    expect($('#element').hasClass('parsley-error')).to.be(true);\n    expect($('li.parsley-foo').length).to.be(1);\n    expect($('li.parsley-foo').text()).to.be('bar');\n    expectWarning(() => {\n      window.ParsleyUI.updateError(parsleyField, 'foo', 'baz');\n    });\n    expect($('li.parsley-foo').text()).to.be('baz');\n    expectWarning(() => {\n      window.ParsleyUI.removeError(parsleyField, 'foo');\n    });\n    expect($('#element').hasClass('parsley-error')).to.be(false);\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a getErrorsMessage() method",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 280,
                "column": 45
            },
            "line": 280,
            "code": "  it('should have a getErrorsMessage() method', () => {\n    $('body').append('<input type=\"email\" id=\"element\" value=\"foo\" data-parsley-minlength=\"5\" />');\n    var parsleyInstance = $('#element').parsley();\n    parsleyInstance.validate();\n    expectWarning(() => {\n      window.ParsleyUI.getErrorsMessages(parsleyInstance);\n    });\n    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance).length).to.be(1);\n    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance)[0]).to.be('This value should be a valid email.');\n    $('#element').attr('data-parsley-priority-enabled', false);\n    parsleyInstance.validate();\n    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance).length).to.be(2);\n    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance)[0]).to.be('This value is too short. It should have 5 characters or more.');\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not have errors ul created for excluded fields",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 294,
                "column": 59
            },
            "line": 294,
            "code": "  it('should not have errors ul created for excluded fields', () => {\n    $('body').append('<div id=\"hidden\"><input type=\"hidden\" id=\"element\" value=\"foo\" data-parsley-minlength=\"5\" /></div>');\n    var parsleyInstance = $('#element').parsley();\n    expect($('#hidden ul').length).to.be(0);\n    $('#hidden').remove();\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should remove filled class from errors container when reseting",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 300,
                "column": 68
            },
            "line": 300,
            "code": "  it('should remove filled class from errors container when reseting', () => {\n    $('body').append('<input type=\"email\" id=\"element\" value=\"foo\" data-parsley-minlength=\"5\" />');\n    var parsleyInstance = $('#element').parsley();\n    parsleyInstance.validate();\n    parsleyInstance.reset();\n    expect($('ul#parsley-id-' + parsleyInstance.__id__).hasClass('filled')).to.be(false);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should re-bind error triggers after a reset (input=text)",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 307,
                "column": 62
            },
            "line": 307,
            "code": "  it('should re-bind error triggers after a reset (input=text)', () => {\n    $('body').append('<input type=\"text\" id=\"element\" required />');\n    var parsleyInstance = $('#element').parsley();\n    parsleyInstance.validate();\n    parsleyInstance.reset();\n    parsleyInstance.validate();\n    expect($('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(1);\n    $('#element').val('foo').trigger('input');\n    expect($('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(0);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should re-bind error triggers after a reset (select)",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 317,
                "column": 58
            },
            "line": 317,
            "code": "  it('should re-bind error triggers after a reset (select)', () => {\n    $('body').append('<select id=\"element\" required>' + '<option value=\"\">Choose</option>' + '<option value=\"foo\">foo</option>' + '<option value=\"bar\">bar</option>' + '</select>');\n    var parsleyInstance = $('#element').parsley();\n    parsleyInstance.validate();\n    parsleyInstance.reset();\n    parsleyInstance.validate();\n    expect($('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(1);\n    $('#element option[value=\"foo\"]').prop('selected', true);\n    $('#element').trigger('input');\n    expect($('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(0);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should re-bind custom triggers after a reset",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 328,
                "column": 50
            },
            "line": 328,
            "code": "  it('should re-bind custom triggers after a reset', () => {\n    $('body').append('<input type=\"text\" id=\"element\" required data-parsley-trigger=\"focusout\" />');\n    var parsleyInstance = $('#element').parsley();\n    parsleyInstance.validate();\n    parsleyInstance.reset();\n    $('#element').trigger('focusout');\n    expect($('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(1);\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle custom error message for validators with compound names",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 336,
                "column": 75
            },
            "line": 336,
            "code": "  it('should handle custom error message for validators with compound names', () => {\n    $('body').append('<input type=\"text\" value=\"1\" id=\"element\" data-parsley-custom-validator=\"2\" data-parsley-custom-validator-message=\"custom-validator error\"/>');\n    window.Parsley.addValidator('customValidator', (value, requirement) => {\n      return requirement === value;\n    }, 32);\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('custom-validator error');\n    window.Parsley.removeValidator('customValidator');\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle custom error messages returned from custom validators",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 346,
                "column": 73
            },
            "line": 346,
            "code": "  it('should handle custom error messages returned from custom validators', () => {\n    $('body').append('<input type=\"text\" value=\"1\" id=\"element\" data-parsley-custom-validator=\"2\" data-parsley-custom-validator-message=\"custom-validator error\"/>');\n    window.Parsley.addValidator('customValidator', (value, requirement) => {\n      return $.Deferred().reject(\"Hey, this ain't good at all\").promise();\n    }, 32);\n    var parsleyField = $('#element').psly();\n    parsleyField.validate();\n    expect($(`ul#parsley-id-${parsleyField.__id__} li`).text()).to.be(\"Hey, this ain't good at all\");\n    window.Parsley.removeValidator('customValidator');\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should run before events are fired",
            "suites": [
                "UI"
            ],
            "updatePoint": {
                "line": 356,
                "column": 40
            },
            "line": 356,
            "code": "  it('should run before events are fired', () => {\n    $('body').append('<input type=\"text\" id=\"element\" required/>');\n    var parsley = $('#element').parsley().on('field:validated', () => {\n      expect($('.parsley-errors-list')).to.have.length(1);\n    });\n    parsley.validate();\n  });",
            "file": "unit/ui.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should warn when using the old global ParsleyUtils",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 4,
                "column": 56
            },
            "line": 4,
            "code": "  it('should warn when using the old global ParsleyUtils', () => {\n    expectWarning(() => {\n      expect(window.ParsleyUtils.deserializeValue('true')).to.be(true);\n    });\n  });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper deserializeValue() function",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 9,
                "column": 54
            },
            "line": 9,
            "code": "  it('should have a proper deserializeValue() function', () => {\n    expect(Utils.deserializeValue('true')).to.be(true);\n    expect(Utils.deserializeValue('1')).to.be(1);\n    expect(Utils.deserializeValue('[\"foo\", \"bar\"]')).to.be.an('array');\n    expect(Utils.deserializeValue('{\"foo\": \"bar\"}')).to.be.an('object');\n  });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper camelize() function",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 15,
                "column": 46
            },
            "line": 15,
            "code": "  it('should have a proper camelize() function', () => {\n    expect(Utils.camelize('foo-bar')).to.be('fooBar');\n    expect(Utils.camelize('foo-bar-baz')).to.be('fooBarBaz');\n    expect(Utils.camelize('foo-bAr-baz')).to.be('fooBArBaz');\n  });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper dasherize() function",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 20,
                "column": 47
            },
            "line": 20,
            "code": "  it('should have a proper dasherize() function', () => {\n    expect(Utils.dasherize('fooBar')).to.be('foo-bar');\n    expect(Utils.dasherize('fooBarBaz')).to.be('foo-bar-baz');\n    expect(Utils.dasherize('fooBArBaz')).to.be('foo-b-ar-baz');\n  });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper attr() function",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 25,
                "column": 42
            },
            "line": 25,
            "code": "  it('should have a proper attr() function', () => {\n    var element = {\n      attributes: [{\n        specified: true,\n        name: \"data-parsley-foo\",\n        value: \"bar\"\n      }, {\n        specified: true,\n        name: \"parsley-foo\",\n        value: \"baz\"\n      }, {\n        specified: true,\n        name: \"data-parsley-bar\",\n        value: \"[0, 42]\"\n      }, {\n        specified: false,\n        name: \"data-parsley-foo\",\n        value: \"bar\"\n      }, {\n        foo: \"bar\"\n      }]\n    };\n    var attr = Utils.attr(element, 'data-parsley-');\n    expect(attr).to.eql({\n      'foo': 'bar',\n      'bar': [0, 42]\n    });\n  });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a proper attr() function that rewrites a given object",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 53,
                "column": 71
            },
            "line": 53,
            "code": "  it('should have a proper attr() function that rewrites a given object', () => {\n    var obj = Utils.objectCreate({\n      foo: 'x',\n      fox: 'trot'\n    });\n    obj.deleteMe = 'please';\n    var $element = $('<b data-parsley-foo=\"a\" data-parsley-bar=\"[0, 42]\" parsley-baz=\"baz\">');\n    Utils.attr($element[0], 'data-parsley-', obj);\n    expect(obj).to.eql({\n      foo: \"a\",\n      bar: [0, 42]\n    });\n    expect(obj.fox).to.eql('trot');\n  });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a checkAttr feature",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 67,
                "column": 37
            },
            "line": 67,
            "code": "  it('should have a checkAttr feature', () => {\n    var element = $('<span data-parsley-required-message=\"foo\" data-parsley-validate=\"true\">')[0];\n    expect(Utils.checkAttr(element, 'data-parsley-', 'required')).to.be(false);\n    expect(Utils.checkAttr(element, 'data-parsley-', 'required-message')).to.be(true);\n    expect(Utils.checkAttr(element, 'data-parsley-', 'validate')).to.be(true);\n  });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "maps '' to ''",
            "suites": [
                "Utils",
                "namespaceEvents"
            ],
            "updatePoint": {
                "line": 75,
                "column": 30
            },
            "line": 75,
            "code": "      it(`maps '${what}' to ''`, () => {\n        expect(Utils.namespaceEvents(what, 'ns')).to.eql(toWhat);\n      });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns null for invalid dates",
            "suites": [
                "Utils",
                "parse",
                "date"
            ],
            "updatePoint": {
                "line": 90,
                "column": 40
            },
            "line": 90,
            "code": "      it('returns null for invalid dates', () => {\n        expect(Utils.parse.date('1972-13-02')).to.be.null;\n        expect(Utils.parse.date('1973-02-29')).to.be.null;\n        expect(Utils.parse.date('72-01-06')).to.be.null;\n        expect(Utils.parse.date('1972/01/06')).to.be.null;\n        expect(Utils.parse.date('1972-01-6')).to.be.null;\n        expect(Utils.parse.date('1972-1-06')).to.be.null;\n        expect(Utils.parse.date('  1972-01 -06  ')).to.be.null;\n      });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns a date for strings of form YYYY/MM/DD",
            "suites": [
                "Utils",
                "parse",
                "date"
            ],
            "updatePoint": {
                "line": 99,
                "column": 55
            },
            "line": 99,
            "code": "      it('returns a date for strings of form YYYY/MM/DD', () => {\n        expect(Utils.parse.date('1972-01-06')).to.eql(new Date('1972/01/06'));\n      });",
            "file": "unit/utils.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 22,
                "column": 26
            },
            "line": 22,
            "code": "  it('should be a function', () => {\n    expect(ValidatorRegistry).to.be.a('function');\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should bind global config validators if given in constructor",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 25,
                "column": 66
            },
            "line": 25,
            "code": "  it('should bind global config validators if given in constructor', () => {\n    $.extend(true, Parsley.options, {\n      validators: {\n        foo: {\n          fn: () => {},\n          priority: 42\n        },\n        bar: {\n          fn: () => {},\n          priority: 12\n        }\n      }\n    });\n    var validator = new ValidatorRegistry(Parsley.options.validators);\n    expect(validator.validators).to.have.key('foo');\n    expect(validator.validators).to.have.key('bar');\n    expect(validatorRegistry.validators).not.to.have.key('foo');\n    delete Parsley.options.validators.foo;\n    delete Parsley.options.validators.bar;\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a required validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 45,
                "column": 38
            },
            "line": 45,
            "code": "  it('should have a required validator', () => {\n    expectValidation('', 'required').not.to.be(true);\n    expectValidation('foo', 'required').to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a notblank validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 49,
                "column": 38
            },
            "line": 49,
            "code": "  it('should have a notblank validator', () => {\n    expectValidation(' ', 'notblank').not.to.be(true);\n    expectValidation('foo', 'notblank').to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a type=\"email\" validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 53,
                "column": 42
            },
            "line": 53,
            "code": "  it('should have a type=\"email\" validator', () => {\n    expectValidation('', 'type', 'email').to.be(true);\n    expectValidation('foo', 'type', 'email').not.to.be(true);\n    expectValidation('foo@bar.y', 'type', 'email').not.to.be(true);\n    expectValidation('foo@bar.y.zz', 'type', 'email').to.be(true);\n    expectValidation('foo@bar.baz', 'type', 'email').to.be(true);\n    expectValidation('foo+bar@bar.baz', 'type', 'email').to.be(true);\n    expectValidation('foo.bar@bar.baz', 'type', 'email').to.be(true);\n    expectValidation('foo.bar@bar.com.ext', 'type', 'email').to.be(true);\n    expectValidation('foo@bar..tt.com', 'type', 'email').to.be(false);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a type=\"date\" validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 64,
                "column": 41
            },
            "line": 64,
            "code": "  it('should have a type=\"date\" validator', () => {\n    expectValidation('', 'type', 'date').to.be(true);\n    expectValidation('foo', 'type', 'date').not.to.be(true);\n    expectValidation('12', 'type', 'date').not.to.be(true);\n    expectValidation('2001-01-30', 'type', 'date').to.be(true);\n    expectValidation('2001-02-30', 'type', 'date').not.to.be(true);\n    expectValidation('2001-30-01', 'type', 'date').not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a min validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 72,
                "column": 33
            },
            "line": 72,
            "code": "  it('should have a min validator', () => {\n    expectValidation('', 'min', 6).to.be(true);\n    expectValidation('0', 'min', 6).not.to.be(true);\n    expectValidation('foo', 'min', 6).not.to.be(true);\n    expectValidation('1', 'min', 6).not.to.be(true);\n    expectValidation('6', 'min', 6).to.be(true);\n    expectValidation('10', 'min', 6).to.be(true);\n    $('body').append('<input type=\"text\" id=\"element\" value=\"7\" min=\"2\" />');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a max validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 82,
                "column": 33
            },
            "line": 82,
            "code": "  it('should have a max validator', () => {\n    expectValidation('', 'max', 10).to.be(true);\n    expectValidation('0', 'max', -3).not.to.be(true);\n    expectValidation('foo', 'max', 10).not.to.be(true);\n    expectValidation('1', 'max', 10).to.be(true);\n    expectValidation('1', 'max', '10').to.be(true);\n    expectValidation('10', 'max', 10).to.be(true);\n    expectValidation('17', 'max', 10).not.to.be(true);\n    $('body').append('<input type=\"text\" id=\"element\" value=\"7\" max=\"20\" />');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a range validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 93,
                "column": 35
            },
            "line": 93,
            "code": "  it('should have a range validator', () => {\n    expectValidation('1', 'range', [5, 10]).not.to.be(true);\n    expectValidation('7', 'range', [5, 10]).to.be(true);\n    expectValidation('17', 'range', [5, 10]).not.to.be(true);\n    $('body').append('<input type=\"text\" id=\"element\" value=\"7\" max=\"20\" min=\"2\" />');\n    expect($('#element').parsley().isValid()).to.be(true);\n    $('#element').remove();\n    $('body').append('<input type=\"range\" id=\"element\" value=\"7\" max=\"20\" min=\"2\" />');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a type=\"number\" validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 103,
                "column": 43
            },
            "line": 103,
            "code": "  it('should have a type=\"number\" validator', () => {\n    expectValidation('foo', 'type', 'number').not.to.be(true);\n    expectValidation('-', 'type', 'number').not.to.be(true);\n    expectValidation('1', 'type', 'number').to.be(true);\n    expectValidation('1.5', 'type', 'number', {\n      step: 'any'\n    }).to.be(true);\n    expectValidation('-1.5', 'type', 'number', {\n      step: 'any'\n    }).to.be(true);\n    expectValidation('1500.642', 'type', 'number', {\n      step: 'any'\n    }).to.be(true);\n    expectValidation('0.5', 'type', 'number', {\n      step: 'any'\n    }).to.be(true);\n    expectValidation('.5', 'type', 'number', {\n      step: 'any'\n    }).to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a type=\"digits\" validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 123,
                "column": 43
            },
            "line": 123,
            "code": "  it('should have a type=\"digits\" validator', () => {\n    expectValidation('foo', 'type', 'digits').not.to.be(true);\n    expectValidation('1', 'type', 'digits').to.be(true);\n    expectValidation('-1', 'type', 'digits').not.to.be(true);\n    expectValidation('1.5', 'type', 'digits').not.to.be(true);\n    expectValidation('-1.5', 'type', 'digits').not.to.be(true);\n    expectValidation('1,500.642', 'type', 'digits').not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a type=\"integer\" validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 131,
                "column": 44
            },
            "line": 131,
            "code": "  it('should have a type=\"integer\" validator', () => {\n    expectValidation('foo', 'type', 'integer').not.to.be(true);\n    expectValidation('1', 'type', 'integer').to.be(true);\n    expectValidation('-1', 'type', 'integer').to.be(true);\n    expectValidation('1.5', 'type', 'integer').not.to.be(true);\n    expectValidation('-1.5', 'type', 'integer').not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a type=\"alphanum\" validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 138,
                "column": 45
            },
            "line": 138,
            "code": "  it('should have a type=\"alphanum\" validator', () => {\n    expectValidation('foo', 'type', 'alphanum').to.be(true);\n    expectValidation('foo bar', 'type', 'alphanum').not.to.be(true);\n    expectValidation('foo$', 'type', 'alphanum').not.to.be(true);\n    $('body').append('<input data-parsley-type=\"alphanum\" id=\"element\" value=\"v4kRRyhYvo0P\" />');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a type=\"url\" validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 145,
                "column": 40
            },
            "line": 145,
            "code": "  it('should have a type=\"url\" validator', () => {\n    expectValidation('foo', 'type', 'url').not.to.be(true);\n    expectValidation('foo bar', 'type', 'url').not.to.be(true);\n    expectValidation('http://', 'type', 'url').not.to.be(true);\n    expectValidation('foo.bar', 'type', 'url').to.be(true);\n    expectValidation('www.foo.bar', 'type', 'url').to.be(true);\n    expectValidation('http://www.foo.bar', 'type', 'url').to.be(true);\n    expectValidation('https://www.foo.bar', 'type', 'url').to.be(true);\n    expectValidation('http://192.168.1.1/foo/bar', 'type', 'url').to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a pattern validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 155,
                "column": 37
            },
            "line": 155,
            "code": "  it('should have a pattern validator', () => {\n    expectValidation('a', 'pattern', '[a-z]+').to.be(true);\n    expectValidation('A', 'pattern', '[a-z]+').not.to.be(true);\n    expectValidation('a', 'pattern', '/[a-z]+/').to.be(true);\n    expectValidation('A', 'pattern', '/[a-z]+/').not.to.be(true);\n    expectValidation('a', 'pattern', '/[a-z]+/i').to.be(true);\n    expectValidation('A', 'pattern', '/[a-z]+/i').to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a pattern validator that behaves as the standard when not of the form /pattern/flag",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 163,
                "column": 101
            },
            "line": 163,
            "code": "  it('should have a pattern validator that behaves as the standard when not of the form /pattern/flag', () => {\n    expectValidation('aa', 'pattern', '[a-z]{1,2}').to.be(true);\n    expectValidation('aaa', 'pattern', '[a-z]{1,2}').not.to.be(true);\n    expectValidation('aa', 'pattern', '^[a-z]{2}$').to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a pattern validator that extends the standard for form /pattern/flag",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 168,
                "column": 86
            },
            "line": 168,
            "code": "  it('should have a pattern validator that extends the standard for form /pattern/flag', () => {\n    expectValidation('zAz', 'pattern', '/a/i').to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a length validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 171,
                "column": 36
            },
            "line": 171,
            "code": "  it('should have a length validator', () => {\n    expectValidation('foobar', 'length', [3, 9]).to.be(true);\n    expectValidation('foo', 'length', [4, 9]).not.to.be(true);\n    expectValidation('foobarbaz', 'length', [3, 8]).not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a minlength validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 176,
                "column": 39
            },
            "line": 176,
            "code": "  it('should have a minlength validator', () => {\n    expectValidation('foo', 'minlength', 3).to.be(true);\n    expectValidation('fo', 'minlength', 3).not.to.be(true);\n    $('body').append('<input type=\"text\" id=\"element\" value=\"foo\" data-parsley-minlength=\"2\" />');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a maxlength validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 182,
                "column": 39
            },
            "line": 182,
            "code": "  it('should have a maxlength validator', () => {\n    expectValidation('foo', 'maxlength', 3).to.be(true);\n    expectValidation('foobar', 'maxlength', 3).not.to.be(true);\n    $('body').append('<input type=\"text\" id=\"element\" value=\"foo\" data-parsley-maxlength=\"10\" />');\n    expect($('#element').parsley().isValid()).to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a check validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 188,
                "column": 35
            },
            "line": 188,
            "code": "  it('should have a check validator', () => {\n    expectValidation(['foo', 'bar', 'baz'], 'check', [3, 5]).to.be(true);\n    expectValidation(['foo', 'bar', 'baz', 'qux', 'bux'], 'check', [3, 4]).not.to.be(true);\n    expectValidation(['foo', 'bar'], 'check', [3, 5]).not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a mincheck validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 193,
                "column": 38
            },
            "line": 193,
            "code": "  it('should have a mincheck validator', () => {\n    expectValidation(['foo', 'bar', 'baz'], 'mincheck', 3).to.be(true);\n    expectValidation(['foo', 'bar'], 'mincheck', 3).not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a maxcheck validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 197,
                "column": 38
            },
            "line": 197,
            "code": "  it('should have a maxcheck validator', () => {\n    expectValidation(['foo', 'bar', 'baz'], 'maxcheck', 3).to.be(true);\n    expectValidation(['foo', 'bar', 'baz', 'qux'], 'maxcheck', 3).not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have an equalto validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 201,
                "column": 38
            },
            "line": 201,
            "code": "  it('should have an equalto validator', () => {\n    expectValidation('', 'equalto', 'foo').to.be(true);\n    expectValidation('bar', 'equalto', 'foo').not.to.be(true);\n    expectValidation('foo', 'equalto', 'foo').to.be(true);\n    $('body').append('<input type=\"text\" id=\"element\" data-parsley-equalto=\"#equalto\" required /><input type=\"text\" id=\"equalto\" value=\"foo\" />');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val('fo');\n    expect($('#element').psly().isValid()).to.be(false);\n    $('#element').val('foo');\n    expect($('#element').psly().isValid()).to.be(true);\n    $('#equalto').remove();\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a euvatin validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 213,
                "column": 37
            },
            "line": 213,
            "code": "  it('should have a euvatin validator', () => {\n    expectValidation('foo', 'euvatin').not.to.be(true);\n    expectValidation('AA1', 'euvatin').not.to.be(true);\n    expectValidation('AA12', 'euvatin').to.be(true);\n    expectValidation('AA12-34', 'euvatin').to.be(true);\n    expectValidation('AA12 3X', 'euvatin').to.be(true);\n    expectValidation('AA12.3X', 'euvatin').not.to.be(true);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle proper error message for validators",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 221,
                "column": 55
            },
            "line": 221,
            "code": "  it('should handle proper error message for validators', () => {\n    expect(validatorRegistry.getErrorMessage({\n      name: 'length',\n      requirements: [3, 6]\n    })).to.be('This value length is invalid. It should be between 3 and 6 characters long.');\n    expect(validatorRegistry.getErrorMessage({\n      name: 'notexisting'\n    })).to.be('This value seems to be invalid.');\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle proper error message for validators in various languages",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 230,
                "column": 76
            },
            "line": 230,
            "code": "  it('should handle proper error message for validators in various languages', () => {\n    validatorRegistry.setLocale('fr');\n    expect(validatorRegistry.getErrorMessage({\n      name: 'length',\n      requirements: [3, 6]\n    })).to.be('Cette valeur doit contenir entre 3 et 6 caractères.');\n    expect(validatorRegistry.getErrorMessage({\n      name: 'notexisting'\n    })).to.be('Cette valeur semble non valide.');\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not break for an incomplete language",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 240,
                "column": 49
            },
            "line": 240,
            "code": "  it('should not break for an incomplete language', () => {\n    validatorRegistry.addCatalog('klingon', {}, true);\n    expect(validatorRegistry.getErrorMessage({\n      name: 'type',\n      requirements: 'email'\n    })).to.be('This value seems to be invalid.');\n    expect(validatorRegistry.getErrorMessage({\n      name: 'length',\n      requirements: [3, 6]\n    })).to.be('This value seems to be invalid.');\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should warn if a custom validator has a reserved name",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 254,
                "column": 59
            },
            "line": 254,
            "code": "  it('should warn if a custom validator has a reserved name', () => {\n    $.extend(true, Parsley.options, {\n      validators: {\n        excluded: {\n          fn: () => {},\n          priority: 42\n        }\n      }\n    });\n    expectWarning(() => {\n      var validatorRegistry = new ValidatorRegistry(Parsley.options.validators);\n    });\n    delete Parsley.options.validators.excluded;\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should warn when adding an already defined validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 268,
                "column": 58
            },
            "line": 268,
            "code": "  it('should warn when adding an already defined validator', () => {\n    validatorRegistry.addValidator('foo', $.noop);\n    expectWarning(() => {\n      validatorRegistry.addValidator('foo', $.noop);\n    });\n    validatorRegistry.removeValidator('foo');\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should warn when updating or deleting a custom validator not already defined",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 275,
                "column": 82
            },
            "line": 275,
            "code": "  it('should warn when updating or deleting a custom validator not already defined', () => {\n    expectWarning(() => {\n      validatorRegistry.updateValidator('foo', () => {});\n    });\n    validatorRegistry.removeValidator('foo');\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should warn when updating or deleting a custom validator not already defined",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 281,
                "column": 82
            },
            "line": 281,
            "code": "  it('should warn when updating or deleting a custom validator not already defined', () => {\n    expectWarning(() => {\n      validatorRegistry.removeValidator('foo');\n    });\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should provide deprecated access through Validator for compatibility",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 286,
                "column": 74
            },
            "line": 286,
            "code": "  it('should provide deprecated access through Validator for compatibility', () => {\n    window.Parsley.formatMessage('foo', 'bar');\n    expectWarning(() => {\n      window.ParsleyValidator.formatMessage('foo', 'bar');\n    });\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should provide two ways to add error messages",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 292,
                "column": 51
            },
            "line": 292,
            "code": "  it('should provide two ways to add error messages', () => {\n    window.Parsley.addValidator('testMessage', {\n      validateString: $.noop,\n      messages: {\n        en: 'Not good at all',\n        fr: 'Très nul'\n      }\n    });\n    window.Parsley.addMessage('es', 'testMessage', 'Muy malo');\n    expect(window.Parsley.getErrorMessage({\n      name: 'testMessage'\n    })).to.eql('Not good at all');\n    window.Parsley.setLocale('fr');\n    expect(window.Parsley.getErrorMessage({\n      name: 'testMessage'\n    })).to.eql('Très nul');\n    window.Parsley.setLocale('es');\n    expect(window.Parsley.getErrorMessage({\n      name: 'testMessage'\n    })).to.eql('Muy malo');\n    window.Parsley.setLocale('en');\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can return the existence of a validator",
            "suites": [
                "ValidatorRegistry"
            ],
            "updatePoint": {
                "line": 314,
                "column": 45
            },
            "line": 314,
            "code": "  it('can return the existence of a validator', () => {\n    expect(window.Parsley.hasValidator('required')).to.be(true);\n    expect(window.Parsley.hasValidator('deriuqer')).to.be(false);\n  });",
            "file": "unit/validator_registry.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses  requirements",
            "suites": [
                "Validator"
            ],
            "updatePoint": {
                "line": 4,
                "column": 35
            },
            "line": 4,
            "code": "    it(`parses ${type} requirements`, () => {\n      var c = new Validator({\n        requirementType: type\n      });\n      expect(c.parseRequirements(input, extraOptions)).to.eql(output);\n    });",
            "file": "unit/validator.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "guillaumepotier__Parsley_js.svg"
}