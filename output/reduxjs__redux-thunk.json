{"repo":"reduxjs/redux-thunk","url":"https://github.com/reduxjs/redux-thunk","branch":"master","configs":[{"package":"redux-thunk","lang":"ts","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"must return a function to handle next","suites":["thunk middleware"],"updatePoint":{"line":11,"column":43},"line":11,"code":"  it('must return a function to handle next', () => {\n    expect(nextHandler).toBeInstanceOf(Function)\n    expect(nextHandler.length).toBe(1)\n  })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must return a function to handle action","suites":["thunk middleware","handle next"],"updatePoint":{"line":17,"column":47},"line":17,"code":"    it('must return a function to handle action', () => {\n      // @ts-ignore\n      const actionHandler = nextHandler()\n\n      expect(actionHandler).toBeInstanceOf(Function)\n      expect(actionHandler.length).toBe(1)\n    })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must run the given action function with dispatch and getState","suites":["thunk middleware","handle next","handle action"],"updatePoint":{"line":26,"column":71},"line":26,"code":"      it('must run the given action function with dispatch and getState', () => {\n        // @ts-ignore\n        const actionHandler = nextHandler()\n\n        actionHandler((dispatch: any, getState: any) => {\n          expect(dispatch).toBe(doDispatch)\n          expect(getState).toBe(doGetState)\n        })\n      })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must pass action to next if not a function","suites":["thunk middleware","handle next","handle action"],"updatePoint":{"line":36,"column":52},"line":36,"code":"      it('must pass action to next if not a function', () => {\n        const actionObj = {}\n\n        // @ts-ignore\n        const actionHandler = nextHandler(action => {\n          expect(action).toBe(actionObj)\n        })\n\n        actionHandler(actionObj)\n      })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must return the return value of next if not a function","suites":["thunk middleware","handle next","handle action"],"updatePoint":{"line":47,"column":64},"line":47,"code":"      it('must return the return value of next if not a function', () => {\n        const expected = 'redux'\n        // @ts-ignore\n        const actionHandler = nextHandler(() => expected)\n\n        // @ts-ignore\n        const outcome = actionHandler()\n        expect(outcome).toBe(expected)\n      })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must return value as expected if a function","suites":["thunk middleware","handle next","handle action"],"updatePoint":{"line":57,"column":53},"line":57,"code":"      it('must return value as expected if a function', () => {\n        const expected = 'rocks'\n        // @ts-ignore\n        const actionHandler = nextHandler()\n\n        const outcome = actionHandler(() => expected)\n        expect(outcome).toBe(expected)\n      })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must be invoked synchronously if a function","suites":["thunk middleware","handle next","handle action"],"updatePoint":{"line":66,"column":53},"line":66,"code":"      it('must be invoked synchronously if a function', () => {\n        // @ts-ignore\n        const actionHandler = nextHandler()\n        let mutated = 0\n\n        // eslint-disable-next-line no-plusplus\n        actionHandler(() => mutated++)\n        expect(mutated).toBe(1)\n      })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must throw if argument is non-object","suites":["thunk middleware","handle errors"],"updatePoint":{"line":79,"column":44},"line":79,"code":"    it('must throw if argument is non-object', () => {\n      try {\n        // @ts-expect-error\n        thunkMiddleware()\n      } catch (err) {}\n    })","file":"test.ts","skipped":false,"dir":"test"},{"name":"must pass the third argument","suites":["thunk middleware","withExtraArgument"],"updatePoint":{"line":88,"column":36},"line":88,"code":"    it('must pass the third argument', () => {\n      const extraArg = { lol: true }\n      // @ts-ignore\n      withExtraArgument(extraArg)({\n        dispatch: doDispatch,\n        getState: doGetState\n      })()((dispatch: any, getState: any, arg: any) => {\n        expect(dispatch).toBe(doDispatch)\n        expect(getState).toBe(doGetState)\n        expect(arg).toBe(extraArg)\n      })\n    })","file":"test.ts","skipped":false,"dir":"test"}]}