{"repo":"peers/peerjs","url":"https://github.com/peers/peerjs","branch":"master","configs":[{"package":"peerjs","lang":"ts","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should be disabled by default","suites":["Logger"],"updatePoint":{"line":11,"column":34},"line":11,"code":"\tit(\"should be disabled by default\", function () {\n\t\texpect(Logger.logLevel).to.eq(LogLevel.Disabled);\n\t});","file":"logger.ts","skipped":false,"dir":"test"},{"name":"should be accept new log level","suites":["Logger"],"updatePoint":{"line":15,"column":35},"line":15,"code":"\tit(\"should be accept new log level\", function () {\n\t\tconst checkedLevels = [];\n\n\t\tLogger.setLogFunction((logLevel) => {\n\t\t\tcheckedLevels.push(logLevel);\n\t\t});\n\n\t\tLogger.logLevel = LogLevel.Warnings;\n\n\t\texpect(Logger.logLevel).to.eq(LogLevel.Warnings);\n\n\t\tLogger.log(\"\");\n\t\tLogger.warn(\"\");\n\t\tLogger.error(\"\");\n\n\t\texpect(checkedLevels).to.deep.eq([LogLevel.Warnings, LogLevel.Errors]);\n\t});","file":"logger.ts","skipped":false,"dir":"test"},{"name":"should accept new log function","suites":["Logger"],"updatePoint":{"line":33,"column":35},"line":33,"code":"\tit(\"should accept new log function\", function () {\n\t\tLogger.logLevel = LogLevel.All;\n\n\t\tconst checkedLevels = [];\n\t\tconst testMessage = \"test it\";\n\n\t\tLogger.setLogFunction((logLevel, ...args) => {\n\t\t\tcheckedLevels.push(logLevel);\n\n\t\t\texpect(args[0]).to.eq(testMessage);\n\t\t});\n\n\t\tLogger.log(testMessage);\n\t\tLogger.warn(testMessage);\n\t\tLogger.error(testMessage);\n\n\t\texpect(checkedLevels).to.deep.eq([\n\t\t\tLogLevel.All,\n\t\t\tLogLevel.Warnings,\n\t\t\tLogLevel.Errors,\n\t\t]);\n\t});","file":"logger.ts","skipped":false,"dir":"test"},{"name":"shouldn't contains any connection","suites":["Peer","after construct without parameters"],"updatePoint":{"line":24,"column":39},"line":24,"code":"\t\tit(\"shouldn't contains any connection\", function () {\n\t\t\tconst peer = new Peer();\n\n\t\t\texpect(peer.open).to.be.false;\n\t\t\texpect(peer.connections).to.be.empty;\n\t\t\texpect(peer.id).to.be.null;\n\t\t\texpect(peer.disconnected).to.be.false;\n\t\t\texpect(peer.destroyed).to.be.false;\n\n\t\t\tpeer.destroy();\n\t\t});","file":"peer.ts","skipped":false,"dir":"test"},{"name":"should contains id and key","suites":["Peer","after construct with parameters"],"updatePoint":{"line":38,"column":32},"line":38,"code":"\t\tit(\"should contains id and key\", function () {\n\t\t\tconst peer = new Peer(\"1\", { key: \"anotherKey\" });\n\n\t\t\texpect(peer.id).to.eq(\"1\");\n\t\t\texpect(peer.options.key).to.eq(\"anotherKey\");\n\n\t\t\tpeer.destroy();\n\t\t});","file":"peer.ts","skipped":false,"dir":"test"},{"name":"Peer#1 should has id #1","suites":["Peer","after call to peer #2"],"updatePoint":{"line":55,"column":29},"line":55,"code":"\t\tit(\"Peer#1 should has id #1\", function (done) {\n\t\t\tconst peer1 = new Peer(\"1\", { port: 8080, host: \"localhost\" });\n\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\tconst mediaOptions = {\n\t\t\t\tmetadata: { var: \"123\" },\n\t\t\t\tconstraints: {\n\t\t\t\t\tmandatory: {\n\t\t\t\t\t\tOfferToReceiveAudio: true,\n\t\t\t\t\t\tOfferToReceiveVideo: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst track = new MediaStreamTrack();\n\t\t\tconst mediaStream = new MediaStream([track]);\n\n\t\t\tconst mediaConnection = peer1.call(\"2\", mediaStream, { ...mediaOptions });\n\n\t\t\texpect(mediaConnection.connectionId).to.be.a(\"string\");\n\t\t\texpect(mediaConnection.type).to.eq(ConnectionType.Media);\n\t\t\texpect(mediaConnection.peer).to.eq(\"2\");\n\t\t\texpect(mediaConnection.options).to.include(mediaOptions);\n\t\t\texpect(mediaConnection.metadata).to.deep.eq(mediaOptions.metadata);\n\t\t\texpect(mediaConnection.peerConnection.getSenders()[0].track.id).to.eq(\n\t\t\t\ttrack.id,\n\t\t\t);\n\n\t\t\tpeer1.once(\"open\", (id) => {\n\t\t\t\texpect(id).to.be.eq(\"1\");\n\t\t\t\t//@ts-ignore\n\t\t\t\texpect(peer1._lastServerId).to.be.eq(\"1\");\n\t\t\t\texpect(peer1.disconnected).to.be.false;\n\t\t\t\texpect(peer1.destroyed).to.be.false;\n\t\t\t\texpect(peer1.open).to.be.true;\n\n\t\t\t\tpeer1.destroy();\n\n\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\texpect(peer1.destroyed).to.be.true;\n\t\t\t\texpect(peer1.open).to.be.false;\n\t\t\t\texpect(peer1.connections).to.be.empty;\n\n\t\t\t\tdone();\n\t\t\t});\n\t\t});","file":"peer.ts","skipped":false,"dir":"test"},{"name":"connect to server => disconnect => reconnect => destroy","suites":["Peer","reconnect"],"updatePoint":{"line":114,"column":61},"line":114,"code":"\t\tit(\"connect to server => disconnect => reconnect => destroy\", function (done) {\n\t\t\tconst peer1 = new Peer(\"1\", { port: 8080, host: \"localhost\" });\n\n\t\t\tpeer1.once(\"open\", () => {\n\t\t\t\texpect(peer1.open).to.be.true;\n\n\t\t\t\tpeer1.once(\"disconnected\", () => {\n\t\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\t\texpect(peer1.destroyed).to.be.false;\n\t\t\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\t\t\tpeer1.once(\"open\", (id) => {\n\t\t\t\t\t\texpect(id).to.be.eq(\"1\");\n\t\t\t\t\t\texpect(peer1.disconnected).to.be.false;\n\t\t\t\t\t\texpect(peer1.destroyed).to.be.false;\n\t\t\t\t\t\texpect(peer1.open).to.be.true;\n\n\t\t\t\t\t\tpeer1.once(\"disconnected\", () => {\n\t\t\t\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\t\t\t\texpect(peer1.destroyed).to.be.false;\n\t\t\t\t\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\t\t\t\t\tpeer1.once(\"close\", () => {\n\t\t\t\t\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\t\t\t\t\texpect(peer1.destroyed).to.be.true;\n\t\t\t\t\t\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tpeer1.destroy();\n\t\t\t\t\t});\n\n\t\t\t\t\tpeer1.reconnect();\n\t\t\t\t});\n\n\t\t\t\tpeer1.disconnect();\n\t\t\t});\n\t\t});","file":"peer.ts","skipped":false,"dir":"test"},{"name":"disconnect => reconnect => destroy","suites":["Peer","reconnect"],"updatePoint":{"line":155,"column":40},"line":155,"code":"\t\tit(\"disconnect => reconnect => destroy\", function (done) {\n\t\t\tmockServer.stop();\n\n\t\t\tconst peer1 = new Peer(\"1\", { port: 8080, host: \"localhost\" });\n\n\t\t\tpeer1.once(\"disconnected\", (id) => {\n\t\t\t\texpect(id).to.be.eq(\"1\");\n\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\texpect(peer1.destroyed).to.be.false;\n\t\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\t\tpeer1.once(\"open\", (id) => {\n\t\t\t\t\texpect(id).to.be.eq(\"1\");\n\t\t\t\t\texpect(peer1.disconnected).to.be.false;\n\t\t\t\t\texpect(peer1.destroyed).to.be.false;\n\t\t\t\t\texpect(peer1.open).to.be.true;\n\n\t\t\t\t\tpeer1.once(\"disconnected\", () => {\n\t\t\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\t\t\texpect(peer1.destroyed).to.be.false;\n\t\t\t\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\t\t\t\tpeer1.once(\"close\", () => {\n\t\t\t\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\t\t\t\texpect(peer1.destroyed).to.be.true;\n\t\t\t\t\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tpeer1.destroy();\n\t\t\t\t});\n\n\t\t\t\tmockServer = createMockServer();\n\n\t\t\t\tpeer1.reconnect();\n\t\t\t});\n\t\t});","file":"peer.ts","skipped":false,"dir":"test"},{"name":"destroy peer if no id and no connection","suites":["Peer","reconnect"],"updatePoint":{"line":195,"column":45},"line":195,"code":"\t\tit(\"destroy peer if no id and no connection\", function (done) {\n\t\t\tmockServer.stop();\n\n\t\t\tconst peer1 = new Peer({ port: 8080, host: \"localhost\" });\n\n\t\t\tpeer1.once(\"error\", (_error) => {\n\t\t\t\t// expect(error.type).to.be.eq(PeerErrorType.ServerError);\n\n\t\t\t\tpeer1.once(\"close\", () => {\n\t\t\t\t\texpect(peer1.disconnected).to.be.true;\n\t\t\t\t\texpect(peer1.destroyed).to.be.true;\n\t\t\t\t\texpect(peer1.open).to.be.false;\n\n\t\t\t\t\tdone();\n\t\t\t\t});\n\n\t\t\t\tmockServer = createMockServer();\n\t\t\t});\n\t\t});","file":"peer.ts","skipped":false,"dir":"test"},{"name":"should be 16300","suites":["util","#chunkedMTU"],"updatePoint":{"line":7,"column":21},"line":7,"code":"\t\tit(\"should be 16300\", function () {\n\t\t\texpect(util.chunkedMTU).to.eq(16300);\n\t\t});","file":"util.ts","skipped":false,"dir":"test"}]}