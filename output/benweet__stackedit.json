{"repo":"benweet/stackedit","url":"https://github.com/benweet/stackedit","branch":"master","configs":[{"package":"stackedit","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should toggle the navigation bar","suites":["ButtonBar.vue"],"updatePoint":{"line":5,"column":38,"index":216},"line":5,"code":"  it('should toggle the navigation bar', async () => specUtils.checkToggler(ButtonBar, wrapper => wrapper.find('.button-bar__button--navigation-bar-toggler').trigger('click'), () => store.getters['data/layoutSettings'].showNavigationBar, 'toggleNavigationBar'));","file":"unit/specs/components/ButtonBar.spec.js","skipped":false,"dir":"test"},{"name":"should toggle the side preview","suites":["ButtonBar.vue"],"updatePoint":{"line":6,"column":36,"index":477},"line":6,"code":"  it('should toggle the side preview', async () => specUtils.checkToggler(ButtonBar, wrapper => wrapper.find('.button-bar__button--side-preview-toggler').trigger('click'), () => store.getters['data/layoutSettings'].showSidePreview, 'toggleSidePreview'));","file":"unit/specs/components/ButtonBar.spec.js","skipped":false,"dir":"test"},{"name":"should toggle the editor","suites":["ButtonBar.vue"],"updatePoint":{"line":7,"column":30,"index":726},"line":7,"code":"  it('should toggle the editor', async () => specUtils.checkToggler(ButtonBar, wrapper => wrapper.find('.button-bar__button--editor-toggler').trigger('click'), () => store.getters['data/layoutSettings'].showEditor, 'toggleEditor'));","file":"unit/specs/components/ButtonBar.spec.js","skipped":false,"dir":"test"},{"name":"should toggle the focus mode","suites":["ButtonBar.vue"],"updatePoint":{"line":8,"column":34,"index":963},"line":8,"code":"  it('should toggle the focus mode', async () => specUtils.checkToggler(ButtonBar, wrapper => wrapper.find('.button-bar__button--focus-mode-toggler').trigger('click'), () => store.getters['data/layoutSettings'].focusMode, 'toggleFocusMode'));","file":"unit/specs/components/ButtonBar.spec.js","skipped":false,"dir":"test"},{"name":"should toggle the scroll sync","suites":["ButtonBar.vue"],"updatePoint":{"line":9,"column":35,"index":1207},"line":9,"code":"  it('should toggle the scroll sync', async () => specUtils.checkToggler(ButtonBar, wrapper => wrapper.find('.button-bar__button--scroll-sync-toggler').trigger('click'), () => store.getters['data/layoutSettings'].scrollSync, 'toggleScrollSync'));","file":"unit/specs/components/ButtonBar.spec.js","skipped":false,"dir":"test"},{"name":"should toggle the status bar","suites":["ButtonBar.vue"],"updatePoint":{"line":10,"column":34,"index":1453},"line":10,"code":"  it('should toggle the status bar', async () => specUtils.checkToggler(ButtonBar, wrapper => wrapper.find('.button-bar__button--status-bar-toggler').trigger('click'), () => store.getters['data/layoutSettings'].showStatusBar, 'toggleStatusBar'));","file":"unit/specs/components/ButtonBar.spec.js","skipped":false,"dir":"test"},{"name":"should open/close itself","suites":["ContextMenu.vue"],"updatePoint":{"line":23,"column":30,"index":457},"line":23,"code":"  it('should open/close itself', async () => {\n    const wrapper = mount();\n    expect(wrapper.contains('.context-menu__item')).toEqual(false);\n    setTimeout(() => wrapper.find('.context-menu__item').trigger('click'), 1);\n    const item = await store.dispatch('contextMenu/open', makeOptions());\n    expect(item.name).toEqual(name);\n  });","file":"unit/specs/components/ContextMenu.spec.js","skipped":false,"dir":"test"},{"name":"should cancel itself","suites":["ContextMenu.vue"],"updatePoint":{"line":30,"column":26,"index":793},"line":30,"code":"  it('should cancel itself', async () => {\n    const wrapper = mount();\n    setTimeout(() => wrapper.trigger('click'), 1);\n    const item = await store.dispatch('contextMenu/open', makeOptions());\n    expect(item).toEqual(null);\n  });","file":"unit/specs/components/ContextMenu.spec.js","skipped":false,"dir":"test"},{"name":"should create new file in the root folder","suites":["Explorer.vue"],"updatePoint":{"line":23,"column":47,"index":791},"line":23,"code":"  it('should create new file in the root folder', async () => {\n    expect(store.state.explorer.newChildNode.isNil).toBeTruthy();\n    const wrapper = mount();\n    wrapper.find('.side-title__button--new-file').trigger('click');\n    expect(store.state.explorer.newChildNode.isNil).toBeFalsy();\n    expect(store.state.explorer.newChildNode.item).toMatchObject({\n      type: 'file',\n      parentId: null\n    });\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should create new file in a folder","suites":["Explorer.vue"],"updatePoint":{"line":33,"column":40,"index":1198},"line":33,"code":"  it('should create new file in a folder', async () => {\n    const folder = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    const wrapper = mount();\n    select(folder.id);\n    wrapper.find('.side-title__button--new-file').trigger('click');\n    expect(store.state.explorer.newChildNode.item).toMatchObject({\n      type: 'file',\n      parentId: folder.id\n    });\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should not create new files in the trash folder","suites":["Explorer.vue"],"updatePoint":{"line":45,"column":53,"index":1594},"line":45,"code":"  it('should not create new files in the trash folder', async () => {\n    const wrapper = mount();\n    select('trash');\n    wrapper.find('.side-title__button--new-file').trigger('click');\n    expect(store.state.explorer.newChildNode.item).toMatchObject({\n      type: 'file',\n      parentId: null\n    });\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should create new folders in the root folder","suites":["Explorer.vue"],"updatePoint":{"line":54,"column":50,"index":1901},"line":54,"code":"  it('should create new folders in the root folder', async () => {\n    expect(store.state.explorer.newChildNode.isNil).toBeTruthy();\n    const wrapper = mount();\n    wrapper.find('.side-title__button--new-folder').trigger('click');\n    expect(store.state.explorer.newChildNode.isNil).toBeFalsy();\n    expect(store.state.explorer.newChildNode.item).toMatchObject({\n      type: 'folder',\n      parentId: null\n    });\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should create new folders in a folder","suites":["Explorer.vue"],"updatePoint":{"line":64,"column":43,"index":2315},"line":64,"code":"  it('should create new folders in a folder', async () => {\n    const folder = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    const wrapper = mount();\n    select(folder.id);\n    wrapper.find('.side-title__button--new-folder').trigger('click');\n    expect(store.state.explorer.newChildNode.item).toMatchObject({\n      type: 'folder',\n      parentId: folder.id\n    });\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should not create new folders in the trash folder","suites":["Explorer.vue"],"updatePoint":{"line":76,"column":55,"index":2717},"line":76,"code":"  it('should not create new folders in the trash folder', async () => {\n    const wrapper = mount();\n    select('trash');\n    wrapper.find('.side-title__button--new-folder').trigger('click');\n    expect(store.state.explorer.newChildNode.item).toMatchObject({\n      type: 'folder',\n      parentId: null\n    });\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should not create new folders in the temp folder","suites":["Explorer.vue"],"updatePoint":{"line":85,"column":54,"index":3032},"line":85,"code":"  it('should not create new folders in the temp folder', async () => {\n    const wrapper = mount();\n    select('temp');\n    wrapper.find('.side-title__button--new-folder').trigger('click');\n    expect(store.state.explorer.newChildNode.item).toMatchObject({\n      type: 'folder',\n      parentId: null\n    });\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should move file to the trash folder on delete","suites":["Explorer.vue"],"updatePoint":{"line":94,"column":52,"index":3344},"line":94,"code":"  it('should move file to the trash folder on delete', async () => {\n    const file = await workspaceSvc.createFile({}, true);\n    expect(file.parentId).toEqual(null);\n    const wrapper = mount();\n    select(file.id);\n    wrapper.find('.side-title__button--delete').trigger('click');\n    ensureExists(file);\n    expect(refreshItem(file).parentId).toEqual('trash');\n    await specUtils.expectBadge('removeFile');\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should not delete the trash folder","suites":["Explorer.vue"],"updatePoint":{"line":104,"column":40,"index":3750},"line":104,"code":"  it('should not delete the trash folder', async () => {\n    const wrapper = mount();\n    select('trash');\n    wrapper.find('.side-title__button--delete').trigger('click');\n    await specUtils.resolveModal('trashDeletion');\n    await specUtils.expectBadge('removeFile', false);\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should not delete file in the trash folder","suites":["Explorer.vue"],"updatePoint":{"line":111,"column":48,"index":4042},"line":111,"code":"  it('should not delete file in the trash folder', async () => {\n    const file = await workspaceSvc.createFile({\n      parentId: 'trash'\n    }, true);\n    const wrapper = mount();\n    select(file.id);\n    wrapper.find('.side-title__button--delete').trigger('click');\n    await specUtils.resolveModal('trashDeletion');\n    ensureExists(file);\n    await specUtils.expectBadge('removeFile', false);\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should delete the temp folder after confirmation","suites":["Explorer.vue"],"updatePoint":{"line":122,"column":54,"index":4451},"line":122,"code":"  it('should delete the temp folder after confirmation', async () => {\n    const file = await workspaceSvc.createFile({\n      parentId: 'temp'\n    }, true);\n    const wrapper = mount();\n    select('temp');\n    wrapper.find('.side-title__button--delete').trigger('click');\n    await specUtils.resolveModal('tempFolderDeletion');\n    ensureNotExists(file);\n    await specUtils.expectBadge('removeFolder');\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should delete temp file after confirmation","suites":["Explorer.vue"],"updatePoint":{"line":133,"column":48,"index":4855},"line":133,"code":"  it('should delete temp file after confirmation', async () => {\n    const file = await workspaceSvc.createFile({\n      parentId: 'temp'\n    }, true);\n    const wrapper = mount();\n    select(file.id);\n    wrapper.find('.side-title__button--delete').trigger('click');\n    ensureExists(file);\n    await specUtils.resolveModal('tempFileDeletion');\n    ensureNotExists(file);\n    await specUtils.expectBadge('removeFile');\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should delete folder after confirmation","suites":["Explorer.vue"],"updatePoint":{"line":145,"column":45,"index":5277},"line":145,"code":"  it('should delete folder after confirmation', async () => {\n    const folder = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    const file = await workspaceSvc.createFile({\n      parentId: folder.id\n    }, true);\n    const wrapper = mount();\n    select(folder.id);\n    wrapper.find('.side-title__button--delete').trigger('click');\n    await specUtils.resolveModal('folderDeletion');\n    ensureNotExists(folder); // Make sure file has been moved to Trash\n\n    ensureExists(file);\n    expect(refreshItem(file).parentId).toEqual('trash');\n    await specUtils.expectBadge('removeFolder');\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should rename file","suites":["Explorer.vue"],"updatePoint":{"line":162,"column":24,"index":5864},"line":162,"code":"  it('should rename file', async () => {\n    const file = await workspaceSvc.createFile({}, true);\n    const wrapper = mount();\n    select(file.id);\n    wrapper.find('.side-title__button--rename').trigger('click');\n    expect(store.getters['explorer/editingNode'].item.id).toEqual(file.id);\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should rename folder","suites":["Explorer.vue"],"updatePoint":{"line":169,"column":26,"index":6163},"line":169,"code":"  it('should rename folder', async () => {\n    const folder = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    const wrapper = mount();\n    select(folder.id);\n    wrapper.find('.side-title__button--rename').trigger('click');\n    expect(store.getters['explorer/editingNode'].item.id).toEqual(folder.id);\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should not rename the trash folder","suites":["Explorer.vue"],"updatePoint":{"line":178,"column":40,"index":6501},"line":178,"code":"  it('should not rename the trash folder', async () => {\n    const wrapper = mount();\n    select('trash');\n    wrapper.find('.side-title__button--rename').trigger('click');\n    expect(store.getters['explorer/editingNode'].isNil).toBeTruthy();\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should not rename the temp folder","suites":["Explorer.vue"],"updatePoint":{"line":184,"column":39,"index":6749},"line":184,"code":"  it('should not rename the temp folder', async () => {\n    const wrapper = mount();\n    select('temp');\n    wrapper.find('.side-title__button--rename').trigger('click');\n    expect(store.getters['explorer/editingNode'].isNil).toBeTruthy();\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should close itself","suites":["Explorer.vue"],"updatePoint":{"line":190,"column":25,"index":6982},"line":190,"code":"  it('should close itself', async () => {\n    store.dispatch('data/toggleExplorer', true);\n    specUtils.checkToggler(Explorer, wrapper => wrapper.find('.side-title__button--close').trigger('click'), () => store.getters['data/layoutSettings'].showExplorer, 'toggleExplorer');\n  });","file":"unit/specs/components/Explorer.spec.js","skipped":false,"dir":"test"},{"name":"should open file on select after a timeout","suites":["ExplorerNode.vue"],"updatePoint":{"line":59,"column":48,"index":2032},"line":59,"code":"  it('should open file on select after a timeout', async () => {\n    const node = await makeFileNode();\n    mountAndSelect(node);\n    expect(store.getters['file/current'].id).not.toEqual(node.item.id);\n    await new Promise(resolve => setTimeout(resolve, 10));\n    expect(store.getters['file/current'].id).toEqual(node.item.id);\n    await specUtils.expectBadge('switchFile');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not open already open file","suites":["ExplorerNode.vue"],"updatePoint":{"line":67,"column":39,"index":2405},"line":67,"code":"  it('should not open already open file', async () => {\n    const node = await makeFileNode();\n    store.commit('file/setCurrentId', node.item.id);\n    mountAndSelect(node);\n    await new Promise(resolve => setTimeout(resolve, 10));\n    expect(store.getters['file/current'].id).toEqual(node.item.id);\n    await specUtils.expectBadge('switchFile', false);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should open folder on select after a timeout","suites":["ExplorerNode.vue"],"updatePoint":{"line":75,"column":50,"index":2777},"line":75,"code":"  it('should open folder on select after a timeout', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mountAndSelect(node);\n    expect(wrapper.classes()).not.toContain('explorer-node--open');\n    await new Promise(resolve => setTimeout(resolve, 10));\n    expect(wrapper.classes()).toContain('explorer-node--open');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should open folder on new child","suites":["ExplorerNode.vue"],"updatePoint":{"line":82,"column":37,"index":3111},"line":82,"code":"  it('should open folder on new child', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mountAndSelect(node); // Close the folder\n\n    wrapper.find('.explorer-node__item').trigger('click');\n    await new Promise(resolve => setTimeout(resolve, 10));\n    expect(wrapper.classes()).not.toContain('explorer-node--open');\n    explorerSvc.newItem();\n    expect(wrapper.classes()).toContain('explorer-node--open');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should create new file in a folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":92,"column":40,"index":3555},"line":92,"code":"  it('should create new file in a folder', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('New file');\n    expect(wrapper.contains('.explorer-node__new-child')).toBe(true);\n    store.commit('explorer/setNewItemName', modifiedName);\n    wrapper.find('.explorer-node__new-child .text-input').trigger('blur');\n    await new Promise(resolve => setTimeout(resolve, 1));\n    expect(store.getters['explorer/selectedNode'].item).toMatchObject({\n      name: modifiedName,\n      type: 'file',\n      parentId: node.item.id\n    });\n    expect(wrapper.contains('.explorer-node__new-child')).toBe(false);\n    await specUtils.expectBadge('createFile');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should cancel file creation on escape","suites":["ExplorerNode.vue"],"updatePoint":{"line":109,"column":43,"index":4318},"line":109,"code":"  it('should cancel file creation on escape', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('New file');\n    expect(wrapper.contains('.explorer-node__new-child')).toBe(true);\n    store.commit('explorer/setNewItemName', modifiedName);\n    wrapper.find('.explorer-node__new-child .text-input').trigger('keydown', {\n      keyCode: 27\n    });\n    await new Promise(resolve => setTimeout(resolve, 1));\n    expect(store.getters['explorer/selectedNode'].item).not.toMatchObject({\n      name: 'modifiedName',\n      type: 'file',\n      parentId: node.item.id\n    });\n    expect(wrapper.contains('.explorer-node__new-child')).toBe(false);\n    await specUtils.expectBadge('createFile', false);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not create new file in a file","suites":["ExplorerNode.vue"],"updatePoint":{"line":128,"column":42,"index":5123},"line":128,"code":"  it('should not create new file in a file', async () => {\n    const node = await makeFileNode();\n    mount(node).trigger('contextmenu');\n    expect(specUtils.getContextMenuItem('New file').disabled).toBe(true);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not create new file in the trash folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":133,"column":52,"index":5351},"line":133,"code":"  it('should not create new file in the trash folder', async () => {\n    const node = store.getters['explorer/nodeMap'].trash;\n    mount(node).trigger('contextmenu');\n    expect(specUtils.getContextMenuItem('New file').disabled).toBe(true);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should create new folder in folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":138,"column":40,"index":5586},"line":138,"code":"  it('should create new folder in folder', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('New folder');\n    expect(wrapper.contains('.explorer-node__new-child--folder')).toBe(true);\n    store.commit('explorer/setNewItemName', modifiedName);\n    wrapper.find('.explorer-node__new-child--folder .text-input').trigger('blur');\n    await new Promise(resolve => setTimeout(resolve, 1));\n    expect(store.getters['explorer/selectedNode'].item).toMatchObject({\n      name: modifiedName,\n      type: 'folder',\n      parentId: node.item.id\n    });\n    expect(wrapper.contains('.explorer-node__new-child--folder')).toBe(false);\n    await specUtils.expectBadge('createFolder');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should cancel folder creation on escape","suites":["ExplorerNode.vue"],"updatePoint":{"line":155,"column":45,"index":6381},"line":155,"code":"  it('should cancel folder creation on escape', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('New folder');\n    expect(wrapper.contains('.explorer-node__new-child--folder')).toBe(true);\n    store.commit('explorer/setNewItemName', modifiedName);\n    wrapper.find('.explorer-node__new-child--folder .text-input').trigger('keydown', {\n      keyCode: 27\n    });\n    await new Promise(resolve => setTimeout(resolve, 1));\n    expect(store.getters['explorer/selectedNode'].item).not.toMatchObject({\n      name: modifiedName,\n      type: 'folder',\n      parentId: node.item.id\n    });\n    expect(wrapper.contains('.explorer-node__new-child--folder')).toBe(false);\n    await specUtils.expectBadge('createFolder', false);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not create new folder in a file","suites":["ExplorerNode.vue"],"updatePoint":{"line":174,"column":44,"index":7216},"line":174,"code":"  it('should not create new folder in a file', async () => {\n    const node = await makeFileNode();\n    mount(node).trigger('contextmenu');\n    expect(specUtils.getContextMenuItem('New folder').disabled).toBe(true);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not create new folder in the trash folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":179,"column":54,"index":7448},"line":179,"code":"  it('should not create new folder in the trash folder', async () => {\n    const node = store.getters['explorer/nodeMap'].trash;\n    mount(node).trigger('contextmenu');\n    expect(specUtils.getContextMenuItem('New folder').disabled).toBe(true);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not create new folder in the temp folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":184,"column":53,"index":7698},"line":184,"code":"  it('should not create new folder in the temp folder', async () => {\n    const node = store.getters['explorer/nodeMap'].temp;\n    mount(node).trigger('contextmenu');\n    expect(specUtils.getContextMenuItem('New folder').disabled).toBe(true);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should rename file","suites":["ExplorerNode.vue"],"updatePoint":{"line":189,"column":24,"index":7918},"line":189,"code":"  it('should rename file', async () => {\n    const node = await makeFileNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('Rename');\n    expect(wrapper.contains('.explorer-node__item-editor')).toBe(true);\n    wrapper.setData({\n      editingValue: modifiedName\n    });\n    wrapper.find('.explorer-node__item-editor .text-input').trigger('blur');\n    expect(store.getters['explorer/selectedNode'].item.name).toEqual(modifiedName);\n    await specUtils.expectBadge('renameFile');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should cancel rename file on escape","suites":["ExplorerNode.vue"],"updatePoint":{"line":202,"column":41,"index":8483},"line":202,"code":"  it('should cancel rename file on escape', async () => {\n    const node = await makeFileNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('Rename');\n    expect(wrapper.contains('.explorer-node__item-editor')).toBe(true);\n    wrapper.setData({\n      editingValue: modifiedName\n    });\n    wrapper.find('.explorer-node__item-editor .text-input').trigger('keydown', {\n      keyCode: 27\n    });\n    expect(store.getters['explorer/selectedNode'].item.name).not.toEqual(modifiedName);\n    await specUtils.expectBadge('renameFile', false);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should rename folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":217,"column":26,"index":9074},"line":217,"code":"  it('should rename folder', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('Rename');\n    expect(wrapper.contains('.explorer-node__item-editor')).toBe(true);\n    wrapper.setData({\n      editingValue: modifiedName\n    });\n    wrapper.find('.explorer-node__item-editor .text-input').trigger('blur');\n    expect(store.getters['explorer/selectedNode'].item.name).toEqual(modifiedName);\n    await specUtils.expectBadge('renameFolder');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should cancel rename folder on escape","suites":["ExplorerNode.vue"],"updatePoint":{"line":230,"column":43,"index":9645},"line":230,"code":"  it('should cancel rename folder on escape', async () => {\n    const node = await makeFolderNode();\n    const wrapper = mount(node);\n    wrapper.trigger('contextmenu');\n    await specUtils.resolveContextMenu('Rename');\n    expect(wrapper.contains('.explorer-node__item-editor')).toBe(true);\n    wrapper.setData({\n      editingValue: modifiedName\n    });\n    wrapper.find('.explorer-node__item-editor .text-input').trigger('keydown', {\n      keyCode: 27\n    });\n    expect(store.getters['explorer/selectedNode'].item.name).not.toEqual(modifiedName);\n    await specUtils.expectBadge('renameFolder', false);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not rename the trash folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":245,"column":40,"index":10254},"line":245,"code":"  it('should not rename the trash folder', async () => {\n    const node = store.getters['explorer/nodeMap'].trash;\n    mount(node).trigger('contextmenu');\n    expect(specUtils.getContextMenuItem('Rename').disabled).toBe(true);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not rename the temp folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":250,"column":39,"index":10486},"line":250,"code":"  it('should not rename the temp folder', async () => {\n    const node = store.getters['explorer/nodeMap'].temp;\n    mount(node).trigger('contextmenu');\n    expect(specUtils.getContextMenuItem('Rename').disabled).toBe(true);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should move file into a folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":255,"column":36,"index":10714},"line":255,"code":"  it('should move file into a folder', async () => {\n    const sourceItem = await workspaceSvc.createFile({}, true);\n    const targetItem = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    dragAndDrop(sourceItem, targetItem);\n    await specUtils.expectBadge('moveFile');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should move folder into a folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":263,"column":38,"index":11008},"line":263,"code":"  it('should move folder into a folder', async () => {\n    const sourceItem = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    const targetItem = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    dragAndDrop(sourceItem, targetItem);\n    await specUtils.expectBadge('moveFolder');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should move file into a file parent folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":273,"column":48,"index":11333},"line":273,"code":"  it('should move file into a file parent folder', async () => {\n    const targetItem = await workspaceSvc.storeItem({\n      type: 'folder'\n    });\n    const file = await workspaceSvc.createFile({\n      parentId: targetItem.id\n    }, true);\n    const sourceItem = await workspaceSvc.createFile({}, true);\n    dragAndDrop(sourceItem, file);\n    await specUtils.expectBadge('moveFile');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not move the trash folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":284,"column":38,"index":11714},"line":284,"code":"  it('should not move the trash folder', async () => {\n    const sourceNode = store.getters['explorer/nodeMap'].trash;\n    mountAndSelect(sourceNode).find('.explorer-node__item').trigger('dragstart');\n    expect(store.state.explorer.dragSourceId).not.toEqual('trash');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not move the temp folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":289,"column":37,"index":11988},"line":289,"code":"  it('should not move the temp folder', async () => {\n    const sourceNode = store.getters['explorer/nodeMap'].temp;\n    mountAndSelect(sourceNode).find('.explorer-node__item').trigger('dragstart');\n    expect(store.state.explorer.dragSourceId).not.toEqual('temp');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not move file to the temp folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":294,"column":45,"index":12268},"line":294,"code":"  it('should not move file to the temp folder', async () => {\n    const targetNode = store.getters['explorer/nodeMap'].temp;\n    const wrapper = mount(targetNode);\n    wrapper.trigger('dragenter');\n    expect(store.state.explorer.dragTargetId).not.toEqual('temp');\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should not move file to a file in the temp folder","suites":["ExplorerNode.vue"],"updatePoint":{"line":300,"column":55,"index":12549},"line":300,"code":"  it('should not move file to a file in the temp folder', async () => {\n    const file = await workspaceSvc.createFile({\n      parentId: 'temp'\n    }, true);\n    const targetNode = store.getters['explorer/nodeMap'][file.id];\n    const wrapper = mount(targetNode);\n    wrapper.trigger('dragenter');\n    expect(store.state.explorer.dragTargetId).not.toEqual(file.id);\n  });","file":"unit/specs/components/ExplorerNode.spec.js","skipped":false,"dir":"test"},{"name":"should toggle the explorer","suites":["NavigationBar.vue"],"updatePoint":{"line":5,"column":32,"index":222},"line":5,"code":"  it('should toggle the explorer', async () => specUtils.checkToggler(NavigationBar, wrapper => wrapper.find('.navigation-bar__button--explorer-toggler').trigger('click'), () => store.getters['data/layoutSettings'].showExplorer, 'toggleExplorer'));","file":"unit/specs/components/NavigationBar.spec.js","skipped":false,"dir":"test"},{"name":"should toggle the side bar","suites":["NavigationBar.vue"],"updatePoint":{"line":6,"column":32,"index":471},"line":6,"code":"  it('should toggle the side bar', async () => specUtils.checkToggler(NavigationBar, wrapper => wrapper.find('.navigation-bar__button--stackedit').trigger('click'), () => store.getters['data/layoutSettings'].showSideBar, 'toggleSideBar'));","file":"unit/specs/components/NavigationBar.spec.js","skipped":false,"dir":"test"},{"name":"should autoclose itself","suites":["Notification.vue"],"updatePoint":{"line":11,"column":29,"index":312},"line":11,"code":"  it('should autoclose itself', async () => {\n    const wrapper = mount();\n    expect(wrapper.contains('.notification__item')).toBe(false);\n    store.dispatch('notification/showItem', {\n      type: 'info',\n      content: 'Test',\n      timeout: 10\n    });\n    expect(wrapper.contains('.notification__item')).toBe(true);\n    await new Promise(resolve => setTimeout(resolve, 10));\n    expect(wrapper.contains('.notification__item')).toBe(false);\n  });","file":"unit/specs/components/Notification.spec.js","skipped":false,"dir":"test"},{"name":"should show messages from top to bottom","suites":["Notification.vue"],"updatePoint":{"line":23,"column":45,"index":777},"line":23,"code":"  it('should show messages from top to bottom', async () => {\n    const wrapper = mount();\n    store.dispatch('notification/info', 'Test 1');\n    store.dispatch('notification/info', 'Test 2');\n    const items = wrapper.findAll('.notification__item');\n    expect(items.length).toEqual(2);\n    expect(items.at(0).text()).toMatch(/Test 1/);\n    expect(items.at(1).text()).toMatch(/Test 2/);\n  });","file":"unit/specs/components/Notification.spec.js","skipped":false,"dir":"test"},{"name":"should not open the same message twice","suites":["Notification.vue"],"updatePoint":{"line":32,"column":44,"index":1170},"line":32,"code":"  it('should not open the same message twice', async () => {\n    const wrapper = mount();\n    store.dispatch('notification/info', 'Test');\n    store.dispatch('notification/info', 'Test');\n    expect(wrapper.findAll('.notification__item').length).toEqual(1);\n  });","file":"unit/specs/components/Notification.spec.js","skipped":false,"dir":"test"}]}