{"repo":"pnpm/pnpm","url":"https://github.com/pnpm/pnpm","branch":"main","configs":[{"package":"@pnpm/audit","lang":"ts","dir":"packages/audit/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/cafs","lang":"ts","dir":"packages/cafs/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/client","lang":"ts","dir":"packages/client/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/config","lang":"ts","dir":"packages/config/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/core","lang":"ts","dir":"packages/core/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/default-reporter","lang":"ts","dir":"packages/default-reporter/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/default-resolver","lang":"ts","dir":"packages/default-resolver/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"dependencies-hierarchy","lang":"ts","dir":"packages/dependencies-hierarchy/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"dependency-path","lang":"ts","dir":"packages/dependency-path/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/directory-fetcher","lang":"ts","dir":"packages/directory-fetcher/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/exportable-manifest","lang":"ts","dir":"packages/exportable-manifest/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/fetch","lang":"ts","dir":"packages/fetch/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/file-reporter","lang":"ts","dir":"packages/file-reporter/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/filter-lockfile","lang":"ts","dir":"packages/filter-lockfile/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/filter-workspace-packages","lang":"ts","dir":"packages/filter-workspace-packages/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"find-packages","lang":"ts","dir":"packages/find-packages/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/find-workspace-dir","lang":"ts","dir":"packages/find-workspace-dir/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/find-workspace-packages","lang":"ts","dir":"packages/find-workspace-packages/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/git-fetcher","lang":"ts","dir":"packages/git-fetcher/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/git-resolver","lang":"ts","dir":"packages/git-resolver/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/global-bin-dir","lang":"ts","dir":"packages/global-bin-dir/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/headless","lang":"ts","dir":"packages/headless/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/lifecycle","lang":"ts","dir":"packages/lifecycle/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/link-bins","lang":"ts","dir":"packages/link-bins/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/list","lang":"ts","dir":"packages/list/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/local-resolver","lang":"ts","dir":"packages/local-resolver/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/lockfile-file","lang":"ts","dir":"packages/lockfile-file/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/lockfile-to-pnp","lang":"ts","dir":"packages/lockfile-to-pnp/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/lockfile-utils","lang":"ts","dir":"packages/lockfile-utils/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/make-dedicated-lockfile","lang":"ts","dir":"packages/make-dedicated-lockfile/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/manifest-utils","lang":"ts","dir":"packages/manifest-utils/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/matcher","lang":"ts","dir":"packages/matcher/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/merge-lockfile-changes","lang":"ts","dir":"packages/merge-lockfile-changes/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/modules-yaml","lang":"ts","dir":"packages/modules-yaml/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/mount-modules","lang":"ts","dir":"packages/mount-modules/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/npm-registry-agent","lang":"ts","dir":"packages/npm-registry-agent/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/npm-resolver","lang":"ts","dir":"packages/npm-resolver/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/outdated","lang":"ts","dir":"packages/outdated/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/package-bins","lang":"ts","dir":"packages/package-bins/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/package-is-installable","lang":"ts","dir":"packages/package-is-installable/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/package-requester","lang":"ts","dir":"packages/package-requester/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/package-store","lang":"ts","dir":"packages/package-store/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/parse-cli-args","lang":"ts","dir":"packages/parse-cli-args/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/parse-overrides","lang":"ts","dir":"packages/parse-overrides/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/pick-registry-for-package","lang":"ts","dir":"packages/pick-registry-for-package/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"pkgs-graph","lang":"ts","dir":"packages/pkgs-graph/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/plugin-commands-audit","lang":"ts","dir":"packages/plugin-commands-audit/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/plugin-commands-env","lang":"ts","dir":"packages/plugin-commands-env/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/plugin-commands-installation","lang":"ts","dir":"packages/plugin-commands-installation/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/plugin-commands-listing","lang":"ts","dir":"packages/plugin-commands-listing/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/plugin-commands-outdated","lang":"ts","dir":"packages/plugin-commands-outdated/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/plugin-commands-publishing","lang":"ts","dir":"packages/plugin-commands-publishing/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/plugin-commands-rebuild","lang":"ts","dir":"packages/plugin-commands-rebuild/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/plugin-commands-script-runners","lang":"ts","dir":"packages/plugin-commands-script-runners/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/plugin-commands-setup","lang":"ts","dir":"packages/plugin-commands-setup/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/plugin-commands-store","lang":"ts","dir":"packages/plugin-commands-store/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"pnpm","lang":"ts","dir":"packages/pnpm/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/pnpmfile","lang":"ts","dir":"packages/pnpmfile/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/prune-lockfile","lang":"ts","dir":"packages/prune-lockfile/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/read-package-json","lang":"ts","dir":"packages/read-package-json/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/read-project-manifest","lang":"ts","dir":"packages/read-project-manifest/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/render-peer-issues","lang":"ts","dir":"packages/render-peer-issues/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/resolve-dependencies","lang":"ts","dir":"packages/resolve-dependencies/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@pnpm/server","lang":"ts","dir":"packages/server/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/tarball-fetcher","lang":"ts","dir":"packages/tarball-fetcher/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/tarball-resolver","lang":"ts","dir":"packages/tarball-resolver/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/which-version-is-pinned","lang":"ts","dir":"packages/which-version-is-pinned/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/write-project-manifest","lang":"ts","dir":"packages/write-project-manifest/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/assert-project","lang":"ts","dir":"privatePackages/assert-project/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@pnpm/assert-store","lang":"ts","dir":"privatePackages/assert-store/test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"isAbsolute()","suites":[],"updatePoint":{"line":13,"column":18},"line":13,"code":"test('isAbsolute()', () => {\n  expect(isAbsolute('/foo/1.0.0')).toBeFalsy()\n  expect(isAbsolute('registry.npmjs.org/foo/1.0.0')).toBeTruthy()\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"parse()","suites":[],"updatePoint":{"line":18,"column":13},"line":18,"code":"test('parse()', () => {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  expect(() => parse(undefined as any)).toThrow(/got `undefined`/)\n  expect(() => parse({} as any)).toThrow(/got `object`/)\n  expect(() => parse(1 as any)).toThrow(/got `number`/)\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  expect(parse('/foo/1.0.0')).toStrictEqual({\n    host: undefined,\n    isAbsolute: false,\n    name: 'foo',\n    peersSuffix: undefined,\n    version: '1.0.0',\n  })\n\n  expect(parse('/@foo/bar/1.0.0')).toStrictEqual({\n    host: undefined,\n    isAbsolute: false,\n    name: '@foo/bar',\n    peersSuffix: undefined,\n    version: '1.0.0',\n  })\n\n  expect(parse('registry.npmjs.org/foo/1.0.0')).toStrictEqual({\n    host: 'registry.npmjs.org',\n    isAbsolute: true,\n    name: 'foo',\n    peersSuffix: undefined,\n    version: '1.0.0',\n  })\n\n  expect(parse('registry.npmjs.org/@foo/bar/1.0.0')).toStrictEqual({\n    host: 'registry.npmjs.org',\n    isAbsolute: true,\n    name: '@foo/bar',\n    peersSuffix: undefined,\n    version: '1.0.0',\n  })\n\n  expect(parse('github.com/kevva/is-positive')).toStrictEqual({\n    host: 'github.com',\n    isAbsolute: true,\n  })\n\n  expect(parse('example.com/foo/1.0.0')).toStrictEqual({\n    host: 'example.com',\n    isAbsolute: true,\n    name: 'foo',\n    peersSuffix: undefined,\n    version: '1.0.0',\n  })\n\n  expect(parse('example.com/foo/1.0.0_bar@2.0.0')).toStrictEqual({\n    host: 'example.com',\n    isAbsolute: true,\n    name: 'foo',\n    peersSuffix: 'bar@2.0.0',\n    version: '1.0.0',\n  })\n\n  expect(parse('/foo/1.0.0_@types+babel__core@7.1.14')).toStrictEqual({\n    host: undefined,\n    isAbsolute: false,\n    name: 'foo',\n    peersSuffix: '@types+babel__core@7.1.14',\n    version: '1.0.0',\n  })\n\n  expect(parse('example.com/foo/1.0.0(bar@2.0.0)')).toStrictEqual({\n    host: 'example.com',\n    isAbsolute: true,\n    name: 'foo',\n    peersSuffix: '(bar@2.0.0)',\n    version: '1.0.0',\n  })\n\n  expect(parse('/foo/1.0.0(@types/babel__core@7.1.14)(foo@1.0.0)')).toStrictEqual({\n    host: undefined,\n    isAbsolute: false,\n    name: 'foo',\n    peersSuffix: '(@types/babel__core@7.1.14)(foo@1.0.0)',\n    version: '1.0.0',\n  })\n\n  expect(parse('/@(-.-)/foo/1.0.0(@types/babel__core@7.1.14)(foo@1.0.0)')).toStrictEqual({\n    host: undefined,\n    isAbsolute: false,\n    name: '@(-.-)/foo',\n    peersSuffix: '(@types/babel__core@7.1.14)(foo@1.0.0)',\n    version: '1.0.0',\n  })\n\n  expect(() => parse('/foo/bar')).toThrow(/\\/foo\\/bar is an invalid relative dependency path/)\n\n  expect(parse('file:project(foo@1.0.0)')).toStrictEqual({\n    host: 'file:project(foo@1.0.0)',\n    isAbsolute: true,\n  })\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"refToAbsolute()","suites":[],"updatePoint":{"line":117,"column":21},"line":117,"code":"test('refToAbsolute()', () => {\n  const registries = {\n    '@foo': 'http://foo.com/',\n    default: 'https://registry.npmjs.org/',\n  }\n  expect(refToAbsolute('1.0.0', 'foo', registries)).toEqual('registry.npmjs.org/foo/1.0.0')\n  expect(refToAbsolute('1.0.0', '@foo/foo', registries)).toEqual('foo.com/@foo/foo/1.0.0')\n  expect(refToAbsolute('registry.npmjs.org/foo/1.0.0', 'foo', registries)).toEqual('registry.npmjs.org/foo/1.0.0')\n  expect(refToAbsolute('/foo/1.0.0', 'foo', registries)).toEqual('registry.npmjs.org/foo/1.0.0')\n  expect(refToAbsolute('/@foo/foo/1.0.0', '@foo/foo', registries)).toEqual('foo.com/@foo/foo/1.0.0')\n  expect(refToAbsolute('/@foo/foo@1.0.0(@foo/bar@1.0.0)', '@foo/foo', registries)).toEqual('foo.com/@foo/foo@1.0.0(@foo/bar@1.0.0)')\n  expect(refToAbsolute('/@foo/foo@1.0.0(@foo/bar@1.0.0)(@foo/qar@1.0.0)', '@foo/foo', registries)).toEqual('foo.com/@foo/foo@1.0.0(@foo/bar@1.0.0)(@foo/qar@1.0.0)')\n  // linked dependencies don't have an absolute path\n  expect(refToAbsolute('link:../foo', 'foo', registries)).toBeNull()\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"refToRelative()","suites":[],"updatePoint":{"line":133,"column":21},"line":133,"code":"test('refToRelative()', () => {\n  expect(refToRelative('/@most/multicast/1.3.0/most@1.7.3', '@most/multicast')).toEqual('/@most/multicast/1.3.0/most@1.7.3')\n  expect(refToRelative('/@most/multicast/1.3.0/most@1.7.3(@foo/bar@1.0.0)', '@most/multicast')).toEqual('/@most/multicast/1.3.0/most@1.7.3(@foo/bar@1.0.0)')\n  expect(refToRelative('/@most/multicast/1.3.0/most@1.7.3(@foo/bar@1.0.0)(@foo/qar@1.0.0)', '@most/multicast')).toEqual('/@most/multicast/1.3.0/most@1.7.3(@foo/bar@1.0.0)(@foo/qar@1.0.0)')\n  // linked dependencies don't have a relative path\n  expect(refToRelative('link:../foo', 'foo')).toBeNull()\n  expect(refToRelative('file:../tarball.tgz', 'foo')).toEqual('file:../tarball.tgz')\n  expect(refToRelative('1.3.0(@foo/bar@1.0.0)', '@qar/bar')).toEqual('/@qar/bar/1.3.0(@foo/bar@1.0.0)')\n  expect(refToRelative('1.3.0(@foo/bar@1.0.0)(@foo/qar@1.0.0)', '@qar/bar')).toEqual('/@qar/bar/1.3.0(@foo/bar@1.0.0)(@foo/qar@1.0.0)')\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"relative()","suites":[],"updatePoint":{"line":144,"column":16},"line":144,"code":"test('relative()', () => {\n  const registries = {\n    '@foo': 'http://localhost:4873/',\n    default: 'https://registry.npmjs.org/',\n  }\n  expect(relative(registries, 'foo', 'registry.npmjs.org/foo/1.0.0')).toEqual('/foo/1.0.0')\n  expect(relative(registries, '@foo/foo', 'localhost+4873/@foo/foo/1.0.0')).toEqual('/@foo/foo/1.0.0')\n  expect(relative(registries, 'foo', 'registry.npmjs.org/foo/1.0.0/PeLdniYiO858gXNY39o5wISKyw')).toEqual('/foo/1.0.0/PeLdniYiO858gXNY39o5wISKyw')\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"resolve()","suites":[],"updatePoint":{"line":154,"column":15},"line":154,"code":"test('resolve()', () => {\n  const registries = {\n    '@bar': 'https://bar.com/',\n    default: 'https://foo.com/',\n  }\n  expect(resolve(registries, '/foo/1.0.0')).toEqual('foo.com/foo/1.0.0')\n  expect(resolve(registries, '/@bar/bar/1.0.0')).toEqual('bar.com/@bar/bar/1.0.0')\n  expect(resolve(registries, '/@qar/qar/1.0.0')).toEqual('foo.com/@qar/qar/1.0.0')\n  expect(resolve(registries, 'qar.com/foo/1.0.0')).toEqual('qar.com/foo/1.0.0')\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"depPathToFilename()","suites":[],"updatePoint":{"line":165,"column":25},"line":165,"code":"test('depPathToFilename()', () => {\n  expect(depPathToFilename('/foo/1.0.0')).toBe('foo@1.0.0')\n  expect(depPathToFilename('/@foo/bar/1.0.0')).toBe('@foo+bar@1.0.0')\n  expect(depPathToFilename('github.com/something/foo/0000?v=1')).toBe('github.com+something+foo@0000+v=1')\n  expect(depPathToFilename('\\\\//:*?\"<>|')).toBe('++@+++++++')\n  expect(depPathToFilename('/foo/1.0.0(react@16.0.0)(react-dom@16.0.0)')).toBe('foo@1.0.0_react@16.0.0_react-dom@16.0.0')\n\n  const filename = depPathToFilename('file:test/foo-1.0.0.tgz_foo@2.0.0')\n  expect(filename).toBe('file+test+foo-1.0.0.tgz_foo@2.0.0')\n  expect(filename).not.toContain(':')\n\n  expect(depPathToFilename('abcd/'.repeat(200))).toBe('abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abcd+abc_e5jega7r3xmarw3h6f277a3any')\n  expect(depPathToFilename('/JSONSteam/1.0.0')).toBe('JSONSteam@1.0.0_jmswpk4sf667aelr6wp2xd3p54')\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"tryGetPackageId","suites":[],"updatePoint":{"line":180,"column":21},"line":180,"code":"test('tryGetPackageId', () => {\n  expect(tryGetPackageId({ default: 'https://registry.npmjs.org/' }, '/foo/1.0.0_@types+babel__core@7.1.14')).toEqual('registry.npmjs.org/foo/1.0.0')\n  expect(tryGetPackageId({ default: 'https://registry.npmjs.org/' }, '/foo/1.0.0(@types/babel__core@7.1.14)')).toEqual('registry.npmjs.org/foo/1.0.0')\n  expect(tryGetPackageId({ default: 'https://registry.npmjs.org/' }, '/@(-.-)/foo/1.0.0(@types/babel__core@7.1.14)')).toEqual('registry.npmjs.org/@(-.-)/foo/1.0.0')\n})","file":"index.ts","skipped":false,"dir":"packages/dependency-path/test"},{"name":"makeDedicatedLockfile()","suites":[],"updatePoint":{"line":10,"column":29},"line":10,"code":"test('makeDedicatedLockfile()', async () => {\n  const tmp = f.prepare('fixture')\n  fs.writeFileSync('.npmrc', 'store-dir=store\\ncache-dir=cache', 'utf8')\n  await pnpmExec(['install', '--no-frozen-lockfile'], { cwd: tmp })\n  const projectDir = path.join(tmp, 'packages/is-negative')\n  await makeDedicatedLockfile(tmp, projectDir)\n\n  const lockfile = await readWantedLockfile(projectDir, { ignoreIncompatible: false })\n  expect(Object.keys(lockfile?.importers ?? {})).toStrictEqual(['.', 'example'])\n  expect(Object.keys(lockfile?.packages ?? {})).toStrictEqual([\n    '/is-positive/1.0.0',\n    '/lodash/1.0.0',\n    '/ramda/0.26.0',\n    '/request/2.0.0',\n  ])\n})","file":"index.ts","skipped":false,"dir":"packages/make-dedicated-lockfile/test"},{"name":"setup makes no changes","suites":[],"updatePoint":{"line":11,"column":28},"line":11,"code":"test('setup makes no changes', async () => {\n  (addDirToEnvPath as jest.Mock).mockReturnValue(Promise.resolve<PathExtenderReport>({\n    oldSettings: 'PNPM_HOME=dir',\n    newSettings: 'PNPM_HOME=dir',\n  }))\n  const output = await setup.handler({ pnpmHomeDir: '' })\n  expect(output).toBe('No changes to the environment were made. Everything is already up to date.')\n})","file":"setup.test.ts","skipped":false,"dir":"packages/plugin-commands-setup/test"},{"name":"setup makes changes on POSIX","suites":[],"updatePoint":{"line":20,"column":34},"line":20,"code":"test('setup makes changes on POSIX', async () => {\n  (addDirToEnvPath as jest.Mock).mockReturnValue(Promise.resolve<PathExtenderReport>({\n    configFile: {\n      changeType: 'created',\n      path: '~/.bashrc',\n    },\n    oldSettings: 'export PNPM_HOME=dir1',\n    newSettings: 'export PNPM_HOME=dir2',\n  }))\n  const output = await setup.handler({ pnpmHomeDir: '' })\n  expect(output).toBe(`Created ~/.bashrc\n\nNext configuration changes were made:\nexport PNPM_HOME=dir2\n\nTo start using pnpm, run:\nsource ~/.bashrc\n`)\n})","file":"setup.test.ts","skipped":false,"dir":"packages/plugin-commands-setup/test"},{"name":"setup makes changes on Windows","suites":[],"updatePoint":{"line":40,"column":36},"line":40,"code":"test('setup makes changes on Windows', async () => {\n  (addDirToEnvPath as jest.Mock).mockReturnValue(Promise.resolve<PathExtenderReport>({\n    oldSettings: 'export PNPM_HOME=dir1',\n    newSettings: 'export PNPM_HOME=dir2',\n  }))\n  const output = await setup.handler({ pnpmHomeDir: '' })\n  expect(output).toBe(`Next configuration changes were made:\nexport PNPM_HOME=dir2\n\nSetup complete. Open a new terminal to start using pnpm.`)\n})","file":"setup.test.ts","skipped":false,"dir":"packages/plugin-commands-setup/test"},{"name":"hint is added to ERR_PNPM_BAD_ENV_FOUND error object","suites":[],"updatePoint":{"line":52,"column":58},"line":52,"code":"test('hint is added to ERR_PNPM_BAD_ENV_FOUND error object', async () => {\n  (addDirToEnvPath as jest.Mock).mockReturnValue(Promise.reject(new PnpmError('BAD_ENV_FOUND', '')))\n  let err!: PnpmError\n  try {\n    await setup.handler({ pnpmHomeDir: '' })\n  } catch (_err: any) { // eslint-disable-line\n    err = _err\n  }\n  expect(err?.hint).toBe('If you want to override the existing env variable, use the --force option')\n})","file":"setup.test.ts","skipped":false,"dir":"packages/plugin-commands-setup/test"},{"name":"hint is added to ERR_PNPM_BAD_SHELL_SECTION error object","suites":[],"updatePoint":{"line":63,"column":62},"line":63,"code":"test('hint is added to ERR_PNPM_BAD_SHELL_SECTION error object', async () => {\n  (addDirToEnvPath as jest.Mock).mockReturnValue(Promise.reject(new PnpmError('BAD_SHELL_SECTION', '')))\n  let err!: PnpmError\n  try {\n    await setup.handler({ pnpmHomeDir: '' })\n  } catch (_err: any) { // eslint-disable-line\n    err = _err\n  }\n  expect(err?.hint).toBe('If you want to override the existing configuration section, use the --force option')\n})","file":"setup.test.ts","skipped":false,"dir":"packages/plugin-commands-setup/test"},{"name":"renderPeerIssues()","suites":[],"updatePoint":{"line":4,"column":24},"line":4,"code":"test('renderPeerIssues()', () => {\n  expect(stripAnsi(renderPeerIssues({\n    'packages/0': {\n      conflicts: ['eee'],\n      intersections: { ddd: '^1.0.0' },\n      bad: {},\n      missing: {\n        ddd: [\n          {\n            parents: [\n              {\n                name: 'zzz',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '^1.0.0',\n          },\n        ],\n        eee: [\n          {\n            parents: [\n              {\n                name: 'zzz',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '^1.0.0',\n          },\n          {\n            parents: [\n              {\n                name: 'www',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '^2.0.0',\n          },\n        ],\n      },\n    },\n    '.': {\n      missing: {\n        aaa: [\n          {\n            parents: [\n              {\n                name: 'xxx',\n                version: '1.0.0',\n              },\n              {\n                name: 'yyy',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '>=1.0.0 <3.0.0',\n          },\n        ],\n      },\n      bad: {\n        bbb: [\n          {\n            parents: [\n              {\n                name: 'xxx',\n                version: '1.0.0',\n              },\n            ],\n            foundVersion: '2',\n            resolvedFrom: [],\n            optional: false,\n            wantedRange: '^1.0.0',\n          },\n        ],\n        ccc: [\n          {\n            parents: [\n              {\n                name: 'xxx',\n                version: '1.0.0',\n              },\n              {\n                name: 'yyy',\n                version: '1.0.0',\n              },\n            ],\n            foundVersion: '2',\n            resolvedFrom: [\n              {\n                name: 'xxx',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '^1.0.0',\n          },\n        ],\n      },\n      conflicts: [],\n      intersections: { aaa: '^1.0.0' },\n    },\n  }, { width: 500 }))).toMatchSnapshot()\n})","file":"index.ts","skipped":false,"dir":"packages/render-peer-issues/test"},{"name":"renderPeerIssues() optional peer dependencies are printed only if they are in conflict with non-optional peers","suites":[],"updatePoint":{"line":111,"column":116},"line":111,"code":"test('renderPeerIssues() optional peer dependencies are printed only if they are in conflict with non-optional peers', () => {\n  expect(stripAnsi(renderPeerIssues({\n    '.': {\n      missing: {\n        aaa: [\n          {\n            parents: [\n              {\n                name: 'xxx',\n                version: '1.0.0',\n              },\n              {\n                name: 'yyy',\n                version: '1.0.0',\n              },\n            ],\n            optional: true,\n            wantedRange: '^1.0.0',\n          },\n          {\n            parents: [\n              {\n                name: 'xxx',\n                version: '1.0.0',\n              },\n              {\n                name: 'yyy',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '^2.0.0',\n          },\n        ],\n        bbb: [\n          {\n            parents: [\n              {\n                name: 'xxx',\n                version: '1.0.0',\n              },\n            ],\n            optional: true,\n            wantedRange: '^1.0.0',\n          },\n        ],\n      },\n      bad: {},\n      conflicts: ['aaa'],\n      intersections: {},\n    },\n    empty: {\n      missing: {},\n      bad: {},\n      conflicts: [],\n      intersections: {},\n    },\n  }, { width: 500 }))).toMatchSnapshot()\n})","file":"index.ts","skipped":false,"dir":"packages/render-peer-issues/test"},{"name":"renderPeerIssues() format correctly the version ranges with spaces and \"*\"","suites":[],"updatePoint":{"line":171,"column":80},"line":171,"code":"test('renderPeerIssues() format correctly the version ranges with spaces and \"*\"', () => {\n  expect(stripAnsi(renderPeerIssues({\n    '.': {\n      conflicts: [],\n      intersections: { a: '*', b: '1 || 2' },\n      bad: {},\n      missing: {\n        a: [\n          {\n            parents: [\n              {\n                name: 'z',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '*',\n          },\n        ],\n        b: [\n          {\n            parents: [\n              {\n                name: 'z',\n                version: '1.0.0',\n              },\n            ],\n            optional: false,\n            wantedRange: '1 || 2',\n          },\n        ],\n      },\n    },\n  }, { width: 500 }))).toMatchSnapshot()\n})","file":"index.ts","skipped":false,"dir":"packages/render-peer-issues/test"},{"name":"whichVersionIsPinned()","suites":[],"line":3,"code":"test.each([\n  ['^1.0.0', 'major'],\n  ['~1.0.0', 'minor'],\n  ['1.0.0', 'patch'],\n  ['*', 'none'],\n  ['workspace:^1.0.0', 'major'],\n])('whichVersionIsPinned()', (spec, expectedResult) => {\n  expect(whichVersionIsPinned(spec)).toEqual(expectedResult)\n})","file":"index.ts","skipped":false,"dir":"packages/which-version-is-pinned/test"}]}