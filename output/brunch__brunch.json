{"repo":"brunch/brunch","url":"https://github.com/brunch/brunch","branch":"master","configs":[{"package":"brunch","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"plugins order","suites":[],"updatePoint":{"line":53,"column":17,"index":1411},"line":53,"code":"it('plugins order', done => {\n  fixturify.writeSync('.', {\n    'package.json': `{\n      \"name\": \"brunch-app\",\n      \"version\": \"0.1.0\",\n      \"devDependencies\": {\n        \"javascript-brunch\": \"^2.0.0\",\n        \"babel-brunch\": \"^6.0.4\",\n        \"terser-brunch\": \"^4.0.0\",\n        \"gzip-brunch\": \"^2.0.0\"\n      }\n    }`,\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      },\n      plugins: {\n        order: {\n          before: ['babel-brunch'],\n          after: ['gzip-brunch']\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/app.js');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"plugins order missing","suites":[],"updatePoint":{"line":92,"column":25,"index":2241},"line":92,"code":"it('plugins order missing', done => {\n  fixturify.writeSync('.', {\n    'package.json': `{\n      \"name\": \"brunch-app\",\n      \"version\": \"0.1.0\",\n      \"devDependencies\": {\n        \"javascript-brunch\": \"^2.0.0\",\n        \"babel-brunch\": \"^6.0.4\",\n        \"terser-brunch\": \"^4.0.0\",\n        \"gzip-brunch\": \"^2.0.0\"\n      }\n    }`,\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      },\n      plugins: {\n        order: {\n          before: ['missing'],\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      eOutputContains(\"Plugin 'missing' is found in 'plugins.order', but is not declared in package.json\");\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"compiler chaining: compiler.targetExtension","suites":[],"updatePoint":{"line":130,"column":47,"index":3128},"line":130,"code":"it('compiler chaining: compiler.targetExtension', done => {\n  fixturify.writeSync('.', {\n    'package.json': `{\n      \"name\": \"brunch-app\",\n      \"version\": \"0.1.0\",\n      \"devDependencies\": {\n        \"sass-brunch\": \"file:sass-brunch\",\n        \"postcss-brunch\": \"file:postcss-brunch\"\n      }\n    }`,\n    'brunch-config.js': `module.exports = {\n      files: {\n        stylesheets: {\n          joinTo: 'style.css'\n        }\n      }\n    }`,\n    app: {\n      'style.sass': 'header\\n\\tbackdrop-filter: blur(10px)'\n    },\n    'sass-brunch': {\n      'package.json': `{\n        \"name\": \"sass-brunch\",\n        \"version\": \"0.1.0\"\n      }`,\n      'index.js': `'use strict';\n        class SassCompiler {\n          compile(file) {\n            const data = file.data.replace(/\\\\t/, '{') + ';}';\n\n            return Promise.resolve({data});\n          }\n        }\n\n        Object.assign(SassCompiler.prototype, {\n          brunchPlugin: true,\n          type: 'stylesheet',\n          extension: 'sass',\n          targetExtension: 'css',\n        });\n\n        module.exports = SassCompiler;\n      `\n    },\n    'postcss-brunch': postcssBrunch\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/style.css');\n      fileContains('public/style.css', '{-webkit-backdrop');\n      noWarn();\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"compileStatic changes path","suites":[],"updatePoint":{"line":186,"column":30,"index":4437},"line":186,"code":"it('compileStatic changes path', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {},\n    }`,\n    app: {\n      assets: {\n        'test.emp': 'Hello, world!'\n      }\n    },\n    'package.json': `{\n      \"name\": \"brunch-app\",\n      \"version\": \"0.1.0\",\n      \"devDependencies\": {\n        \"compiler-brunch\": \"file:compiler-brunch\"\n      }\n    }`,\n    'compiler-brunch': {\n      'package.json': `{\n        \"name\": \"compiler-brunch\",\n        \"version\": \"0.1.0\"\n      }`,\n      'index.js': `'use strict';\n        class Compiler {\n          compileStatic(file) {\n            const data = file.data;\n            const path = file.path.replace('test', 'hello');\n            return Promise.resolve({data, path});\n          }\n        }\n\n        Object.assign(Compiler.prototype, {\n          brunchPlugin: true,\n          type: 'template',\n          extension: 'emp',\n          staticTargetExtension: 'built',\n        });\n\n        module.exports = Compiler;\n      `\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileDoesNotExist('public/test.built');\n      fileExists('public/hello.built');\n      fileEquals('public/hello.built', 'Hello, world!');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"compiler chaining: returning path","suites":[],"updatePoint":{"line":237,"column":37,"index":5662},"line":237,"code":"it('compiler chaining: returning path', done => {\n  fixturify.writeSync('.', {\n    'package.json': `{\n      \"name\": \"brunch-app\",\n      \"version\": \"0.1.0\",\n      \"dependencies\": {},\n      \"devDependencies\": {\n        \"sass-brunch\": \"file:sass-brunch\",\n        \"postcss-brunch\": \"file:postcss-brunch\"\n      }\n    }`,\n    'brunch-config.js': `module.exports = {\n      files: {\n        stylesheets: {\n          joinTo: 'style.css'\n        }\n      }\n    }`,\n    app: {\n      'style2.sass': 'header\\n\\tbackdrop-filter: blur(10px)'\n    },\n    'sass-brunch': {\n      'package.json': `{\n        \"name\": \"sass-brunch\",\n        \"version\": \"0.1.0\"\n      }`,\n      'index.js': `'use strict';\n        class SassCompiler {\n          compile(file) {\n            const data = file.data.replace(/\\\\t/, '{') + ';}';\n            const path = file.path.replace(/sass$/, 'css');\n\n            return Promise.resolve({data, path});\n          }\n        }\n\n        Object.assign(SassCompiler.prototype, {\n          brunchPlugin: true,\n          type: 'stylesheet',\n          extension: 'sass',\n        });\n\n        module.exports = SassCompiler;\n      `\n    },\n    'postcss-brunch': postcssBrunch\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/style.css');\n      fileContains('public/style.css', '{-webkit-backdrop');\n      noWarn();\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"basic build","suites":[],"updatePoint":{"line":294,"column":15,"index":7015},"line":294,"code":"it('basic build', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/app.js.map');\n      fileContains('public/app.js', '//# sourceMappingURL=app.js.map');\n      fileContains('public/app.js', `\nrequire.register(\"initialize.js\", function(exports, require, module) {\nconsole.log(\"hello world\")\n});`);\n      fileContains('public/index.html', '<h1>hello world</h1>');\n      outputContains('compiled initialize.js into app.js, copied index.html');\n      noWarn();\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"basic file joining","suites":[],"updatePoint":{"line":326,"column":22,"index":7856},"line":326,"code":"it('basic file joining', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'a.js': 'filea',\n      'b.js': 'fileb',\n      'c.js': 'filec'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/app.js.map');\n      fileContains('public/index.html', '<h1>hello world</h1>');\n      fileContains('public/app.js', `require.register(\"a.js\", function(exports, require, module) {\nfilea\n});\n\n;require.register(\"b.js\", function(exports, require, module) {\nfileb\n});\n\n;require.register(\"c.js\", function(exports, require, module) {\nfilec\n});\n`);\n      outputContains('compiled 3 files into app.js, copied index.html');\n      noWarn();\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"multi file output","suites":[],"updatePoint":{"line":367,"column":21,"index":8752},"line":367,"code":"it('multi file output', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: {\n            'javascripts/app.js': /^app/,\n            'javascripts/vendor.js': /^(?!app)/\n          }\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'a.js': 'filea',\n      'b.js': 'fileb',\n      'c.js': 'filec'\n    },\n    vendor: {\n      'a.js': 'vendora',\n      'b.js': 'vendorb',\n      'c.js': 'vendorc'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/javascripts/app.js.map');\n      fileExists('public/javascripts/vendor.js.map');\n      const appJs = `require.register(\"a.js\", function(exports, require, module) {\nfilea\n});\n\n;require.register(\"b.js\", function(exports, require, module) {\nfileb\n});\n\n;require.register(\"c.js\", function(exports, require, module) {\nfilec\n});`;\n      const vendorJs = `\nvendora\n;vendorb\n;vendorc\n;`;\n      fileContains('public/javascripts/app.js', appJs);\n      fileDoesNotContain('public/javascripts/app.js', vendorJs);\n      fileContains('public/javascripts/vendor.js', vendorJs);\n      fileDoesNotContain('public/javascripts/vendor.js', appJs);\n      fileDoesNotContain('public/javascripts/vendor.js', 'require.register(\"');\n      fileContains('public/index.html', '<h1>hello world</h1>');\n      outputContains('compiled 3 files into 2 files, copied index.html');\n      noWarn();\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"entry points","suites":[],"updatePoint":{"line":426,"column":16,"index":10265},"line":426,"code":"it('entry points', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          entryPoints: {\n            'app/initialize.js': 'bundle.js'\n          }\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'require(\"./c\"); initialize',\n      'c.js': 'require(\"b\"); filec',\n      'b.js': 'require(\"a\"); fileb',\n      'a.js': 'filea',\n      'not-required.js': 'notrequired'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/bundle.js.map');\n      fileContains('public/bundle.js', '//# sourceMappingURL=bundle.js.map');\n      fileDoesNotContain('public/bundle.js', `notrequired`);\n      fileContains('public/bundle.js', `require.register(\"a.js\", function(exports, require, module) {\nfilea\n});\n\n;require.register(\"b.js\", function(exports, require, module) {\nrequire(\"a\"); fileb\n});\n\n;require.register(\"c.js\", function(exports, require, module) {\nrequire(\"b\"); filec\n});\n\n;require.register(\"initialize.js\", function(exports, require, module) {\nrequire(\"./c\"); initialize\n});`);\n      fileContains('public/index.html', '<h1>hello world</h1>');\n      outputContains('compiled 4 files into bundle.js, copied index.html');\n      eOutputContains('app/not-required.js compiled, but not written');\n      noError();\n\n      // done();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"multi entry points","suites":[],"updatePoint":{"line":478,"column":22,"index":11691},"line":478,"code":"it('multi entry points', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          entryPoints: {\n            'app/entry1.js': 'bundle1.js',\n            'app/entry2.js': 'bundle2.js'\n          }\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'entry1.js': 'require(\"./a\"); entry1',\n      'entry2.js': 'require(\"./c\"); entry2',\n      'a.js': 'require(\"./b\"); filea',\n      'b.js': 'fileb',\n      'c.js': 'require(\"./d\"); filec',\n      'd.js': 'filed',\n      'not-required.js': 'notrequired'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/bundle1.js.map');\n      fileExists('public/bundle2.js.map');\n      fileContains('public/bundle1.js', '//# sourceMappingURL=bundle1.js.map');\n      fileContains('public/bundle2.js', '//# sourceMappingURL=bundle2.js.map');\n      fileDoesNotContain('public/bundle1.js', `notrequired`);\n      fileDoesNotContain('public/bundle2.js', `notrequired`);\n      fileContains('public/bundle1.js', `require.register(\"a.js\", function(exports, require, module) {\nrequire(\"./b\"); filea\n});\n\n;require.register(\"b.js\", function(exports, require, module) {\nfileb\n});\n\n;require.register(\"entry1.js\", function(exports, require, module) {\nrequire(\"./a\"); entry1\n});`);\n      fileContains('public/bundle2.js', `require.register(\"c.js\", function(exports, require, module) {\nrequire(\"./d\"); filec\n});\n\n;require.register(\"d.js\", function(exports, require, module) {\nfiled\n});\n\n;require.register(\"entry2.js\", function(exports, require, module) {\nrequire(\"./c\"); entry2\n});`);\n      fileContains('public/index.html', '<h1>hello world</h1>');\n      outputContains('compiled 6 files into 2 files, copied index.html');\n      eOutputContains('app/not-required.js compiled, but not written');\n      noError();\n\n      // done();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"customize paths.public config","suites":[],"updatePoint":{"line":543,"column":33,"index":13628},"line":543,"code":"it('customize paths.public config', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      },\n      paths: {\n        public: 'dist'\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('dist/app.js.map');\n      fileContains('dist/index.html', '<h1>hello world</h1>');\n      fileContains('dist/app.js', 'console.log(\"hello world\")');\n      outputContains('compiled initialize.js into app.js, copied index.html');\n      // in tests, this case will have a warning due to EventEmitter leak. Does not happen outside of tests, though.\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"npm integration","suites":[],"updatePoint":{"line":574,"column":19,"index":14460},"line":574,"code":"it('npm integration', done => {\n  fixturify.writeSync('.', {\n    'package.json': `\n      {\n        \"dependencies\": {\n          \"react\": \"0.14.0\",\n          \"react-dom\": \"0.14.0\",\n          \"socrates\": \"1.0.2\",\n          \"bignumber.js\": \"*\"\n        },\n        \"devDependencies\": {\n          \"javascript-brunch\": \"^2.0.0\"\n        }\n      }\n    `,\n    'brunch-config.js': `\n      module.exports = {\n        files: {\n          javascripts: {\n            joinTo: 'app.js'\n          }\n        },\n        npm: {\n          globals: {\n            React: 'react'\n          }\n        }\n      };\n    `,\n    app: {\n      'meaning.js': 'module.exports = 42;',\n      'initialize.js': `\n        var React = require('react');\n        var ReactDOM = require('react-dom');\n        var socrates = require('socrates');\n        require('./meaning.js');\n        require('bignumber.js');\n      `\n    }\n  });\n  npmInstall(() => {\n    brunch.build({\n      onCompile() {\n        const contains = text => fileContains('public/app.js', text);\n        const doesntContain = text => fileDoesNotContain('public/app.js', text);\n\n        // sets globals\n        contains('window.React = require(\"react\");');\n        // includes required files\n        contains('require.register(\"react/react.js\",');\n        contains('require.register(\"react-dom/index.js\",');\n        // and doesn't use windows slashes for module names\n        doesntContain('require.register(\"react\\\\react.js\",');\n        doesntContain('require.register(\"react-dom\\\\index.js\",');\n        // adds aliases for main files (that are not index.js)\n        contains('require.alias(\"react/react.js\", \"react\");');\n        // also spot-replaces process.env.NODE_ENV\n        doesntContain('process.env.NODE_ENV');\n        contains(`'development' !== 'production'`);\n        // includes the process shim\n        contains('require.alias(\"process/browser.js\", \"process\");');\n        contains(`process = require('process');`);\n        // indirectly-used @scoped modules should be fine, too\n        contains('require.register(\"@f/combine-reducers/lib/index.js\",');\n        // finally, modules with .js in their name are correctly processed\n        contains('require.alias(\"bignumber.js/bignumber.js\", \"bignumber.js\");');\n        outputContains(/compiled (\\d{3}) files into app\\.js/);\n        noError();\n        done();\n      }\n    });\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"compiling npm packages","suites":[],"updatePoint":{"line":647,"column":26,"index":16830},"line":647,"code":"it('compiling npm packages', done => {\n  fixturify.writeSync('.', {\n    'package.json': `\n      {\n        \"dependencies\": {\n          \"credit-card\": \"2.0.0\"\n        },\n        \"devDependencies\": {\n          \"javascript-brunch\": \"^2.0.0\",\n          \"babel-brunch\": \"^6.0.4\",\n          \"babel-preset-es2015\": \"^6.0.0\",\n          \"babel-preset-es2016\": \"^6.0.0\",\n          \"babel-plugin-syntax-exponentiation-operator\": \"^6.0.0\"\n        }\n      }\n    `,\n    'brunch-config.js': `\n      module.exports = {\n        files: {\n          javascripts: {\n            joinTo: 'app.js'\n          }\n        },\n        npm: {\n          compilers: ['babel-brunch']\n        }\n      };\n    `,\n    app: {\n      'initialize.js': `\n        var cc = require('credit-card');\n      `\n    }\n  });\n  npmInstall(() => {\n    brunch.build({\n      onCompile() {\n        const contains = text => fileContains('public/app.js', text);\n        const doesntContain = text => fileDoesNotContain('public/app.js', text);\n\n        // credit-card is compiled, too\n        doesntContain('const Reach');\n        contains('var Reach');\n        outputContains('compiled 2 files into app.js');\n        noWarn();\n        noError();\n        done();\n      }\n    });\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"config override","suites":[],"updatePoint":{"line":698,"column":19,"index":18051},"line":698,"code":"it('config override', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      overrides: {\n        custom: {\n          paths: {\n            public: 'dist'\n          }\n        }\n      },\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  brunch.build({\n    env: 'custom',\n    onCompile() {\n      fileExists('dist/app.js.map');\n      fileContains('dist/index.html', '<h1>hello world</h1>');\n      fileContains('dist/app.js', 'console.log(\"hello world\")');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"modules.definition option","suites":[],"updatePoint":{"line":731,"column":29,"index":18766},"line":731,"code":"it('modules.definition option', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      npm: {\n        enabled: false\n      },\n      modules: {\n        definition: false,\n        wrapper: function(path, data) {\n          return \"(function() {\" + data + \"})()\";\n        }\n      },\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/app.js.map');\n      fileEquals('public/app.js', '(function() {console.log(\"hello world\")\\n})();\\n//# sourceMappingURL=app.js.map');\n      fileContains('public/index.html', '<h1>hello world</h1>');\n      outputContains('compiled initialize.js into app.js, copied index.html');\n      noWarn();\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"static compilation","suites":[],"updatePoint":{"line":804,"column":22,"index":20608},"line":804,"code":"it('static compilation', done => {\n  const files = {\n    'brunch-config.js': `module.exports = {\n      files: {}\n    };`,\n    app: {\n      assets: {\n        'test.emp': 'Some-stuff-is-better-expressed-with-dashes.-Oh-wait-or-should-it-be-carets?'\n      }\n    }\n  };\n  fixturify.writeSync('.', Object.assign(files, TempCompiler));\n  brunch.build({\n    onCompile() {\n      fileDoesNotExist('public/test.emp');\n      fileExists('public/test.built');\n      fileEquals('public/test.built', 'Some^stuff^is^better^expressed^with^dashes.^Oh^wait^or^should^it^be^carets?');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"join templates according to joinTo option","suites":[],"updatePoint":{"line":825,"column":45,"index":21226},"line":825,"code":"it('join templates according to joinTo option', done => {\n  const files = {\n    'brunch-config.js': `module.exports = {\n      files: {\n        templates: {\n          joinTo: 'all.js'\n        }\n      }\n    };`,\n    app: {\n      'a.emp': 'hello-world',\n      'b.emp': 'module-exports'\n    }\n  };\n  fixturify.writeSync('.', Object.assign(files, TempCompiler));\n  brunch.build({\n    onCompile() {\n      fileDoesNotExist('public/a.emp');\n      fileDoesNotExist('public/b.built');\n      fileContains('public/all.js', 'hello^world');\n      fileContains('public/all.js', 'module^exports');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"reuse javascripts.joinTo for templates.joinTo","suites":[],"updatePoint":{"line":850,"column":49,"index":21842},"line":850,"code":"it('reuse javascripts.joinTo for templates.joinTo', done => {\n  const files = {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'all.js'\n        }\n      }\n    };`,\n    app: {\n      'a.emp': 'hello-world',\n      'b.emp': 'module-exports'\n    }\n  };\n  fixturify.writeSync('.', Object.assign(files, TempCompiler));\n  brunch.build({\n    onCompile() {\n      fileContains('public/all.js', 'hello^world');\n      fileContains('public/all.js', 'module^exports');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"reuse javascripts.joinTo only if templates.joinTo are empty","suites":[],"updatePoint":{"line":873,"column":63,"index":22392},"line":873,"code":"it('reuse javascripts.joinTo only if templates.joinTo are empty', done => {\n  const files = {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'scripts.js'\n        },\n        templates: {\n          joinTo: 'templates.js'\n        }\n      }\n    };`,\n    app: {\n      'a.emp': 'hello-world',\n      'b.emp': 'module-exports'\n    }\n  };\n  fixturify.writeSync('.', Object.assign(files, TempCompiler));\n  brunch.build({\n    onCompile() {\n      fileContains('public/templates.js', 'hello^world');\n      fileContains('public/templates.js', 'module^exports');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"inline source maps","suites":[],"updatePoint":{"line":899,"column":22,"index":22982},"line":899,"code":"it('inline source maps', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      sourceMaps: 'inline',\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileDoesNotExist('public/app.js.map');\n      fileContains('public/app.js', '//# sourceMappingURL=data:application/json;charset=utf-8;base64,');\n      noWarn();\n      noError();\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"include getter","suites":[],"updatePoint":{"line":923,"column":18,"index":23529},"line":923,"code":"it('include getter', done => {\n  fixturify.writeSync('.', {\n    'package.json': `{\n      \"name\": \"brunch-app\",\n      \"description\": \"Description\",\n      \"author\": \"Your Name\",\n      \"version\": \"0.1.0\",\n      \"dependencies\": {},\n      \"devDependencies\": {\n        \"javascript-brunch\": \"^2.0.0\",\n        \"include-brunch\": \"file:include-brunch\"\n      }\n    }`,\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    'include-brunch': {\n      'package.json': `{\n        \"name\": \"include-brunch\",\n        \"version\": \"0.1.0\",\n        \"main\": \"index.js\"\n      }`,\n      'index.js': `'use strict';\n        class IncludeCompiler {\n          compile(file) {\n            return Promise.resolve(file);\n          }\n          get include() {\n            return [ __dirname + '/pow.js' ];\n          }\n        }\n        Object.assign(IncludeCompiler.prototype, {\n          brunchPlugin: true,\n          type: 'javascript',\n          extension: 'js'\n        });\n        module.exports = IncludeCompiler;\n      `,\n      'pow.js': 'window.pow = Math.pow;'\n    }\n  });\n  brunch.build({\n    onCompile() {\n      fileExists('public/app.js');\n      fileContains('public/app.js', 'Math.pow');\n      done();\n    }\n  });\n});","file":"build.js","skipped":false,"dir":"test"},{"name":"loads the config without overriding","suites":["config"],"updatePoint":{"line":24,"column":41,"index":483},"line":24,"code":"  it('loads the config without overriding', async () => {\n    const brunchConfig = await load('config-with-overrides.js');\n    const watched = brunchConfig.paths.watched.map(getFolderName);\n    expect(getFolderName(brunchConfig.paths.public)).to.equal('tmp');\n    expect(watched).to.deep.equal(['app', 'test']);\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"overrides the config using the specified env","suites":["config"],"updatePoint":{"line":30,"column":50,"index":810},"line":30,"code":"  it('overrides the config using the specified env', async () => {\n    const brunchConfig = await load('config-with-overrides.js', {\n      env: 'meh'\n    });\n    const watched = brunchConfig.paths.watched.map(getFolderName);\n    expect(brunchConfig.paths.public).to.equal('public');\n    expect(watched).to.deep.equal(['app', 'test']);\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"removes trailing slash from paths","suites":["config"],"updatePoint":{"line":38,"column":39,"index":1140},"line":38,"code":"  it('removes trailing slash from paths', async () => {\n    const brunchConfig = await load('config-with-trailing-slashes.js');\n    expect(brunchConfig.paths.watched).to.deep.equal(['app/assets']);\n    expect(brunchConfig.paths.public).to.equal('app/builds');\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"files by config.before","suites":["fs_utils.generate generation"],"updatePoint":{"line":9,"column":28,"index":242},"line":9,"code":"  it('files by config.before', () => {\n    const files = ['backbone.js', 'jquery.js', 'underscore.js'];\n    const config = {\n      before: ['jquery.js', 'underscore.js', 'backbone.js']\n    };\n    expect(generate.sortByConfig(files, config)).to.deep.equal(config.before);\n  });","file":"fs_utils.js","skipped":false,"dir":"test"},{"name":"files by config.after","suites":["fs_utils.generate generation"],"updatePoint":{"line":16,"column":27,"index":518},"line":16,"code":"  it('files by config.after', () => {\n    const files = ['helper-1.js', 'backbone.js', 'helper-2.js'];\n    const config = {\n      after: ['helper-1.js', 'helper-2.js']\n    };\n    expect(generate.sortByConfig(files, config)).to.deep.equal(['backbone.js', 'helper-1.js', 'helper-2.js']);\n  });","file":"fs_utils.js","skipped":false,"dir":"test"},{"name":"files by config.vendor","suites":["fs_utils.generate generation"],"updatePoint":{"line":23,"column":28,"index":811},"line":23,"code":"  it('files by config.vendor', () => {\n    const files = ['vendor/backbone.js', 'jquery.js', 'meh/underscore.js'];\n    const config = {\n      vendorConvention: path => {\n        return /^(meh|vendor)/.test(path);\n      }\n    };\n    expect(generate.sortByConfig(files, config)).to.deep.equal(['meh/underscore.js', 'vendor/backbone.js', 'jquery.js']);\n  });","file":"fs_utils.js","skipped":false,"dir":"test"},{"name":"files alphabetically","suites":["fs_utils.generate generation"],"updatePoint":{"line":32,"column":26,"index":1165},"line":32,"code":"  it('files alphabetically', () => {\n    const files = ['z', 'e', 'a', 'd', 'c', 's', 'z'];\n    const config = {};\n    expect(generate.sortByConfig(files, config)).to.deep.equal(['a', 'c', 'd', 'e', 's', 'z', 'z']);\n  });","file":"fs_utils.js","skipped":false,"dir":"test"},{"name":"sorts files by config correctly","suites":["fs_utils.generate generation"],"updatePoint":{"line":37,"column":37,"index":1398},"line":37,"code":"  it('sorts files by config correctly', () => {\n    const files = ['a', 'b', 'c', 'vendor/5', 'vendor/4', 'd', 'vendor/1', 'vendor/3', 'vendor/6', 'e', 'vendor/2'];\n    const config = {\n      before: ['vendor/1', 'vendor/2', 'vendor/3', 'vendor/4', 'vendor/5'],\n      after: ['b'],\n      vendorConvention: path => {\n        return /vendor\\//.test(path);\n      }\n    };\n    const res = ['vendor/1', 'vendor/2', 'vendor/3', 'vendor/4', 'vendor/5', 'vendor/6', 'a', 'c', 'd', 'e', 'b'];\n    expect(generate.sortByConfig(files, config)).to.deep.equal(res);\n  });","file":"fs_utils.js","skipped":false,"dir":"test"},{"name":"ignores invalid files","suites":["fs_utils.is_ignored"],"updatePoint":{"line":51,"column":27,"index":1991},"line":51,"code":"  it('ignores invalid files', () => {\n    const files = ['app/assets/index.html', 'app/assets/favicon.ico', 'app/assets/.htaccess', 'app/assets/.rewrite', 'app/assets/#index.html#', 'app/assets/.index.html.swp'];\n    const expectedIgnoredFiles = ['app/assets/#index.html#', 'app/assets/.index.html.swp'];\n    expect(files.filter(isIgnored)).to.deep.equal(expectedIgnoredFiles);\n  });","file":"fs_utils.js","skipped":false,"dir":"test"},{"name":"resolves plugins.on|off merge","suites":["applyOverrides"],"updatePoint":{"line":9,"column":35,"index":209},"line":9,"code":"  it('resolves plugins.on|off merge', () => {\n    // describe('replaceConfigSlashes()', function() {\n    //   return it('should replace slashes with backslashes in config', function() {\n    //     application.__set__('isWindows', true);\n    //     const unix = require('./fixtures/unix_config');\n    //     const win = require('./fixtures/win_config');\n    //     return expect(application.replaceConfigSlashes(unix.config)).to.eql(win.config);\n    //   });\n    // });\n    const applyOverrides = application.__get__('applyOverrides');\n    const config = {\n      server: {},\n      plugins: {\n        on: ['a'],\n        off: ['b']\n      },\n      overrides: {\n        foo: {\n          plugins: {\n            on: ['b']\n          }\n        },\n        bar: {\n          plugins: {\n            off: ['a']\n          }\n        },\n        baz: {\n          plugins: {\n            on: ['c']\n          }\n        }\n      },\n      files: {},\n      paths: {},\n      hooks: {}\n    };\n    applyOverrides(config, ['foo', 'bar', 'baz']);\n    expect(config.plugins).to.deep.equal({\n      on: ['c', 'b'],\n      off: ['a']\n    });\n  });","file":"helpers.js","skipped":false,"dir":"test"},{"name":"compile on file changes","suites":[],"updatePoint":{"line":51,"column":27,"index":1320},"line":51,"code":"it('compile on file changes', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  watch({}, function* (compilation) {\n    yield compilation();\n    fileExists('public/app.js.map');\n    fileContains('public/app.js', '//# sourceMappingURL=app.js.map');\n    fileContains('public/app.js', `require.register(\"initialize.js\", function(exports, require, module) {\nconsole.log(\"hello world\")\n});`);\n    fileContains('public/index.html', '<h1>hello world</h1>');\n    fs.writeFileSync('app/initialize.js', 'console.log(\"changed\")');\n    yield compilation();\n    fileExists('public/app.js.map');\n    fileContains('public/app.js', '//# sourceMappingURL=app.js.map');\n    fileContains('public/app.js', `require.register(\"initialize.js\", function(exports, require, module) {\nconsole.log(\"changed\")\n});`);\n    fileContains('public/index.html', '<h1>hello world</h1>');\n    done();\n  });\n});","file":"watch.js","skipped":false,"dir":"test"},{"name":"detect file addition","suites":[],"updatePoint":{"line":86,"column":24,"index":2462},"line":86,"code":"it('detect file addition', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  watch({}, function* (compilation) {\n    yield compilation();\n    fileExists('public/app.js.map');\n    fileContains('public/app.js', '//# sourceMappingURL=app.js.map');\n    fileContains('public/app.js', `require.register(\"initialize.js\", function(exports, require, module) {\nconsole.log(\"hello world\")\n});`);\n    fileContains('public/index.html', '<h1>hello world</h1>');\n    fs.writeFileSync('app/new-file.js', 'console.log(\"new\")');\n    yield compilation();\n    fileExists('public/app.js.map');\n    fileContains('public/app.js', '//# sourceMappingURL=app.js.map');\n    fileContains('public/app.js', `require.register(\"initialize.js\", function(exports, require, module) {\nconsole.log(\"hello world\")\n});`);\n    fileContains('public/index.html', '<h1>hello world</h1>');\n    fileContains('public/app.js', `require.register(\"new-file.js\", function(exports, require, module) {\nconsole.log(\"new\")\n});`);\n    done();\n  });\n});","file":"watch.js","skipped":false,"dir":"test"},{"name":"detect file removal","suites":[],"updatePoint":{"line":124,"column":23,"index":3731},"line":124,"code":"it('detect file removal', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'a.js': 'filea',\n      'b.js': 'fileb'\n    }\n  });\n  watch({}, function* (compilation) {\n    yield compilation();\n    fileExists('public/app.js.map');\n    fileContains('public/app.js', '//# sourceMappingURL=app.js.map');\n    fileContains('public/app.js', `require.register(\"a.js\", function(exports, require, module) {\nfilea\n});`);\n    fileContains('public/app.js', `require.register(\"b.js\", function(exports, require, module) {\nfileb\n});`);\n    fileContains('public/index.html', '<h1>hello world</h1>');\n    fs.unlinkSync('app/b.js');\n    yield compilation();\n    fileExists('public/app.js.map');\n    fileContains('public/app.js', '//# sourceMappingURL=app.js.map');\n    fileContains('public/app.js', `require.register(\"a.js\", function(exports, require, module) {\nfilea\n});`);\n    fileDoesNotContain('public/app.js', `require.register(\"b.js\", function(exports, require, module) {\nfileb\n});`);\n    fileContains('public/index.html', '<h1>hello world</h1>');\n    done();\n  });\n});","file":"watch.js","skipped":false,"dir":"test"},{"name":"install npm packages if package.json changes","suites":[],"updatePoint":{"line":166,"column":48,"index":5022},"line":166,"code":"it('install npm packages if package.json changes', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  watch({}, function* (compilation) {\n    yield compilation();\n    expect(fs.readdirSync('./node_modules').includes('lodash')).to.be.false;\n    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n    packageJson.dependencies.lodash = '*';\n    fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));\n    yield compilation();\n    expect(fs.readdirSync('./node_modules').includes('lodash')).to.be.true;\n    done();\n  });\n});","file":"watch.js","skipped":false,"dir":"test"},{"name":"reload config if it changes","suites":[],"updatePoint":{"line":193,"column":31,"index":5835},"line":193,"code":"it('reload config if it changes', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      },\n      paths: {\n        public: 'public'\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  watch({}, function* (compilation) {\n    yield compilation();\n    fileDoesNotExist('dist/app.js.map');\n    fileDoesNotExist('dist/app.js');\n    fileDoesNotExist('dist/index.html');\n    fileExists('public/app.js.map');\n    fileExists('public/app.js');\n    fileExists('public/index.html');\n    fs.writeFileSync('brunch-config.js', `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      },\n      paths: {\n        public: 'dist'\n      }\n    };`);\n    yield compilation();\n    fileExists('dist/app.js.map');\n    fileExists('dist/app.js');\n    fileExists('dist/index.html');\n    done();\n  });\n});","file":"watch.js","skipped":false,"dir":"test"},{"name":"brunch server works","suites":[],"updatePoint":{"line":237,"column":23,"index":6868},"line":237,"code":"it('brunch server works', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  watch({\n    server: true\n  }, function* (compilation) {\n    yield compilation();\n    requestBrunchServer('/', responseText => {\n      expect(responseText).to.equal('<h1>hello world</h1>');\n      done();\n    });\n  });\n});","file":"watch.js","skipped":false,"dir":"test"},{"name":"brunch server reload files","suites":[],"updatePoint":{"line":263,"column":30,"index":7444},"line":263,"code":"it('brunch server reload files', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  watch({\n    server: true\n  }, function* (compilation) {\n    yield compilation();\n    requestBrunchServer('/', responseText => {\n      expect(responseText).to.equal('<h1>hello world</h1>');\n      fs.writeFileSync('app/assets/index.html', '<h1>changed</h1>');\n    });\n    yield compilation();\n    requestBrunchServer('/', responseText => {\n      expect(responseText).to.equal('<h1>changed</h1>');\n      done();\n    });\n  });\n});","file":"watch.js","skipped":false,"dir":"test"},{"name":"brunch server accepts custom server 1","suites":[],"updatePoint":{"line":294,"column":41,"index":8237},"line":294,"code":"it('brunch server accepts custom server 1', done => {\n  fixturify.writeSync('.', {\n    'brunch-config.js': `module.exports = {\n      files: {\n        javascripts: {\n          joinTo: 'app.js'\n        }\n      }\n    };`,\n    'brunch-server.js': `\nvar http = require('http');\n\nmodule.exports = {\n  startServer: function(port, path, callback) {\n    var server = http.createServer(function (req, res) {\n      res.end('hello from custom server');\n    });\n    return server.listen(port, function() { callback(undefined, server); });\n  }\n};`,\n    app: {\n      assets: {\n        'index.html': '<h1>hello world</h1>'\n      },\n      'initialize.js': 'console.log(\"hello world\")'\n    }\n  });\n  watch({\n    server: true\n  }, function* (compilation) {\n    yield compilation();\n    requestBrunchServer('/', responseText => {\n      expect(responseText).to.equal('hello from custom server');\n      done();\n    });\n  });\n});","file":"watch.js","skipped":false,"dir":"test"}]}