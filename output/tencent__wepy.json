{"repo":"Tencent/wepy","url":"https://github.com/Tencent/wepy","branch":"master","configs":[{"package":"wepy","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/babel-plugin-import-regenerator","lang":"js","dir":"packages/babel-plugin-import-regenerator/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/cli","lang":"js","dir":"packages/cli/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/compiler-babel","lang":"js","dir":"packages/compiler-babel/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/compiler-less","lang":"js","dir":"packages/compiler-less/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/compiler-postcss","lang":"js","dir":"packages/compiler-postcss/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/compiler-sass","lang":"js","dir":"packages/compiler-sass/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/compiler-stylus","lang":"js","dir":"packages/compiler-stylus/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/core","lang":"js","dir":"packages/core/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/plugin-define","lang":"js","dir":"packages/plugin-define/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/plugin-eslint","lang":"js","dir":"packages/plugin-eslint/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/plugin-uglifyjs","lang":"js","dir":"packages/plugin-uglifyjs/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/use-intercept","lang":"js","dir":"packages/use-intercept/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@wepy/use-promisify","lang":"js","dir":"packages/use-promisify/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should work with ","suites":["babel-plugin-import-regenerator"],"updatePoint":{"line":19,"column":57,"index":585},"line":19,"code":"    it(`should work with ${caseName.split('-').join(' ')}`, () => {\n      const actual = transform(readFileSync(actualFile), {\n        presets: ['env'],\n        plugins: [plugin]\n      }).code;\n      const expected = readFileSync(expectedFile, 'utf-8');\n      expect(actual.trim()).to.equal(expected.trim());\n    });","file":"index.test.js","skipped":false,"dir":"packages/babel-plugin-import-regenerator/test"},{"name":"should addDeps, getDeps and getSources","suites":["FileDep"],"updatePoint":{"line":4,"column":44,"index":165},"line":4,"code":"  it('should addDeps, getDeps and getSources', function () {\n    const fileDep = new FileDep();\n    fileDep.addDeps('a.wpy', ['b.js', 'c.js']);\n    expect(fileDep.getDeps('a.wpy')).to.eql(['b.js', 'c.js']);\n    expect(fileDep.getSources('b.js')).to.eql(['a.wpy']);\n    expect(fileDep.getSources('c.js')).to.eql(['a.wpy']);\n    fileDep.addDeps('b.wpy', ['c.js', 'd.js']);\n    expect(fileDep.getDeps('b.wpy')).to.eql(['c.js', 'd.js']);\n    expect(fileDep.getSources('c.js')).to.eql(['a.wpy', 'b.wpy']);\n  });","file":"core/fileDep.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should cleanDeps","suites":["FileDep"],"updatePoint":{"line":14,"column":22,"index":650},"line":14,"code":"  it('should cleanDeps', function () {\n    const fileDep = new FileDep();\n    fileDep.addDeps('a.wpy', ['b.js', 'c.js']);\n    fileDep.cleanDeps('a.wpy');\n    expect(fileDep.getDeps('a.wpy')).to.eql([]);\n    expect(fileDep.getSources('b.js')).to.eql([]);\n    expect(fileDep.getSources('c.js')).to.eql([]);\n    fileDep.addDeps('a.wpy', ['b.js', 'c.js']);\n    fileDep.addDeps('b.wpy', ['c.js', 'd.js']);\n    fileDep.cleanDeps('a.wpy');\n    expect(fileDep.getDeps('a.wpy')).to.eql([]);\n    expect(fileDep.getDeps('b.wpy')).to.eql(['c.js', 'd.js']);\n    expect(fileDep.getSources('b.js')).to.eql([]);\n    expect(fileDep.getSources('c.js')).to.eql(['b.wpy']);\n    expect(fileDep.getSources('d.js')).to.eql(['b.wpy']);\n  });","file":"core/fileDep.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should not add duplicated deps","suites":["FileDep"],"updatePoint":{"line":30,"column":36,"index":1382},"line":30,"code":"  it('should not add duplicated deps', function () {\n    const fileDep = new FileDep();\n    fileDep.addDeps('a.wpy', ['a.js', 'b.js']);\n    expect(fileDep.getDeps('a.wpy')).to.eql(['a.js', 'b.js']);\n    expect(fileDep.getSources('a.js')).to.eql(['a.wpy']);\n    expect(fileDep.getSources('b.js')).to.eql(['a.wpy']);\n    fileDep.addDeps('a.wpy', ['b.js', 'c.js', 'd.js']);\n    expect(fileDep.getDeps('a.wpy')).to.eql(['a.js', 'b.js', 'c.js', 'd.js']);\n    expect(fileDep.getSources('a.js')).to.eql(['a.wpy']);\n    expect(fileDep.getSources('b.js')).to.eql(['a.wpy']);\n    expect(fileDep.getSources('c.js')).to.eql(['a.wpy']);\n    expect(fileDep.getSources('d.js')).to.eql(['a.wpy']);\n  });","file":"core/fileDep.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should get isInvolved correctly","suites":["FileDep"],"updatePoint":{"line":43,"column":37,"index":2071},"line":43,"code":"  it('should get isInvolved correctly', function () {\n    const fileDep = new FileDep();\n    fileDep.addDeps('a.wpy', ['b.js', 'c.js']);\n    expect(fileDep.isInvolved('a.wpy')).to.be.true;\n    expect(fileDep.isInvolved('b.js')).to.be.true;\n    expect(fileDep.isInvolved('c.js')).to.be.true;\n    expect(fileDep.isInvolved('d.js')).to.be.false;\n    fileDep.cleanDeps('a.wpy');\n    expect(fileDep.isInvolved('a.wpy')).to.be.false;\n    expect(fileDep.isInvolved('b.js')).to.be.false;\n    expect(fileDep.isInvolved('c.js')).to.be.false;\n  });","file":"core/fileDep.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should register","suites":["Hook"],"updatePoint":{"line":4,"column":21,"index":133},"line":4,"code":"  it('should register', function () {\n    const hook = new Hook();\n    const handler = function () {};\n    hook.register('process-test', handler);\n    expect(hook._hooks).to.have.a.property('process-test');\n    expect(hook._hooks['process-test']).to.be.a('array');\n    expect(hook._hooks['process-test']).to.includes(handler);\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should unregister","suites":["Hook"],"updatePoint":{"line":12,"column":23,"index":468},"line":12,"code":"  it('should unregister', function () {\n    const hook = new Hook();\n    const handler1 = function () {};\n    const handler2 = function () {};\n    const unregisterHandler1 = hook.register('process-test', handler1);\n    hook.register('process-test', handler2);\n    expect(hook._hooks['process-test']).to.includes(handler1);\n    expect(hook._hooks['process-test']).to.includes(handler2);\n    unregisterHandler1();\n    expect(hook._hooks['process-test']).to.not.includes(handler1);\n    expect(hook._hooks['process-test']).to.includes(handler2);\n    hook.unregisterAll('process-test');\n    expect(hook._hooks['process-test']).to.be.an('undefined');\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should has hook","suites":["Hook"],"updatePoint":{"line":26,"column":21,"index":1117},"line":26,"code":"  it('should has hook', function () {\n    const hook = new Hook();\n    const handler = function () {};\n    hook.register('process-test', handler);\n    expect(hook.hasHook('process-test')).to.be.true;\n    expect(hook.hasHook('process-another')).to.be.false;\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should hook","suites":["Hook"],"updatePoint":{"line":33,"column":17,"index":1376},"line":33,"code":"  it('should hook', function () {\n    const hook = new Hook();\n    hook.register('process-test', function () {\n      return 1;\n    });\n    expect(hook.hook('process-test')).to.eql([1]);\n    hook.register('process-test', function (a) {\n      return a;\n    });\n    expect(hook.hook('process-test', 6)).to.eql([1, 6]);\n    hook.register('process-test', function (a, b) {\n      return a + b;\n    });\n    expect(hook.hook('process-test', 6, 66)).to.eql([1, 6, 72]);\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should hookSeq","suites":["Hook"],"updatePoint":{"line":48,"column":20,"index":1846},"line":48,"code":"  it('should hookSeq', function () {\n    const hook = new Hook();\n    expect(hook.hookSeq('unknown')).to.be.undefined;\n    expect(hook.hookSeq('unknown', 1)).to.equal(1);\n    expect(hook.hookSeq('unknown', 1, 2)).to.eql([1, 2]);\n    hook.register('process-test', function (a) {\n      return a + 1;\n    });\n    expect(hook.hookSeq('process-test', 6)).to.equal(7);\n    hook.register('process-test', function (b) {\n      return b * 2;\n    });\n    expect(hook.hookSeq('process-test', 6)).to.equal(14);\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should hookUnique","suites":["Hook"],"updatePoint":{"line":62,"column":23,"index":2353},"line":62,"code":"  it('should hookUnique', function () {\n    const hook = new Hook();\n    expect(hook.hookUnique('unknown')).to.be.undefined;\n    hook.register('process-test', function (a) {\n      return a + 1;\n    });\n    expect(hook.hookUnique('process-test', 6)).to.equal(7);\n    hook.register('process-test', function (a) {\n      return a * 2;\n    });\n    expect(hook.hookUnique('process-test', 6)).to.equal(12);\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should hookUniqueReturnArg","suites":["Hook"],"updatePoint":{"line":74,"column":32,"index":2768},"line":74,"code":"  it('should hookUniqueReturnArg', function () {\n    const hook = new Hook();\n    expect(hook.hookUniqueReturnArg('unknown')).to.be.undefined;\n    expect(hook.hookUniqueReturnArg('unknown', 666)).to.equal(666);\n    hook.register('process-test', function (a) {\n      return a + 1;\n    });\n    expect(hook.hookUniqueReturnArg('process-test', 6)).to.equal(7);\n    hook.register('process-test', function (a) {\n      return a * 2;\n    });\n    expect(hook.hookUniqueReturnArg('process-test', 6)).to.equal(12);\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should hookReturnOrigin","suites":["Hook"],"updatePoint":{"line":87,"column":29,"index":3275},"line":87,"code":"  it('should hookReturnOrigin', function () {\n    const hook = new Hook();\n    let oneFnCalled = false;\n    let twoFnCalled = false;\n    expect(hook.hookReturnOrigin('unknown', 6)).to.equal(6);\n    expect(hook.hookReturnOrigin('unknown', 6, 66)).to.eql([6, 66]);\n    hook.register('process-test', function () {\n      oneFnCalled = true;\n    });\n    expect(hook.hookReturnOrigin('process-test', 66)).to.equal(66);\n    expect(oneFnCalled).to.be.true;\n    hook.register('process-test', function () {\n      twoFnCalled = true;\n    });\n    expect(hook.hookReturnOrigin('process-test', 666)).to.equal(666);\n    expect(twoFnCalled).to.be.true;\n    oneFnCalled = false;\n    twoFnCalled = false;\n    expect(hook.hookReturnOrigin('process-test', 66, 666)).to.eql([66, 666]);\n    expect(oneFnCalled).to.be.true;\n    expect(twoFnCalled).to.be.true;\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"hookAsyncSeq should call then correctly","suites":["Hook"],"updatePoint":{"line":109,"column":45,"index":4134},"line":109,"code":"  it('hookAsyncSeq should call then correctly', function () {\n    const hook = new Hook();\n    return hook.hookAsyncSeq('unknown', 6).then(rst => {\n      // should return args[0]\n      expect(rst).to.equal(6);\n      return hook.hookAsyncSeq('unknown', 6, 66);\n    }).then(rst => {\n      // should return args\n      expect(rst).to.eql([6, 66]);\n      hook.register('process-test', function (obj) {\n        return {\n          count: obj.count + 1\n        };\n      });\n      return hook.hookAsyncSeq('process-test', {\n        count: 6\n      });\n    }).then(rst => {\n      // should return lastRst for one hook fn\n      expect(rst).to.eql({\n        count: 7\n      });\n      hook.register('process-test', function (obj) {\n        return new Promise(function (resolve) {\n          resolve({\n            count: obj.count + 1\n          });\n        });\n      });\n      return hook.hookAsyncSeq('process-test', {\n        count: 6\n      });\n    }).then(rst => {\n      // should return lastRst for multiple hook fns\n      expect(rst).to.eql({\n        count: 8\n      });\n      hook.register('process-test', function (obj) {\n        return new Promise(function (resolve) {\n          resolve({\n            ...obj,\n            text: 'hello, world!'\n          });\n        });\n      });\n      return hook.hookAsyncSeq('process-test', {\n        count: 66\n      });\n    }).then(rst => {\n      // should return lastRst\n      expect(rst).to.eql({\n        count: 68,\n        text: 'hello, world!'\n      });\n      hook.register('process-test', function (obj) {\n        return new Promise(function (resolve) {\n          resolve([obj, {\n            more: true\n          }]);\n        });\n      });\n      hook.register('process-test', function (obj, extra) {\n        return new Promise(function (resolve) {\n          expect(extra).to.eql({\n            more: true\n          });\n          resolve([obj, extra]);\n        });\n      });\n      return hook.hookAsyncSeq('process-test', {\n        count: 666\n      });\n    }).then(rst => {\n      // should return lastRst[0] if args.length === 1\n      expect(rst).to.eql({\n        count: 668,\n        text: 'hello, world!'\n      });\n      return hook.hookAsyncSeq('process-test', {\n        count: 6666\n      }, {\n        more: false\n      });\n    }).then(rst => {\n      // should return lastRst if args.length > 1\n      expect(rst).to.eql([{\n        count: 6668,\n        text: 'hello, world!'\n      }, {\n        more: true\n      }]);\n    });\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"hookAsyncSeq should call catch","suites":["Hook"],"updatePoint":{"line":202,"column":36,"index":6585},"line":202,"code":"  it('hookAsyncSeq should call catch', function (done) {\n    const hook = new Hook();\n    hook.register('process-test', function () {\n      return new Promise(function (resolve, reject) {\n        reject({\n          text: 'hi, rejected!'\n        });\n      });\n    });\n    hook.hookAsyncSeq('process-test', {\n      n: 6\n    }).catch(err => {\n      expect(err).to.eql({\n        text: 'hi, rejected!'\n      });\n      done();\n    });\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"hookAsyncSeq should not call then but catch","suites":["Hook"],"updatePoint":{"line":220,"column":49,"index":7033},"line":220,"code":"  it('hookAsyncSeq should not call then but catch', function (done) {\n    const hook = new Hook();\n    hook.register('process-test', function (obj) {\n      return {\n        n: obj.n + 1\n      };\n    });\n    hook.register('process-test', function () {\n      return new Promise(function (resolve, reject) {\n        reject({\n          text: 'hi, rejected!'\n        });\n      });\n    });\n    hook.register('process-test', function (obj) {\n      return {\n        n: obj.n + 2\n      };\n    });\n    hook.hookAsyncSeq('process-test', {\n      n: 66\n    }).then(() => {\n      throw new Error('it will not happen!');\n    }).catch(err => {\n      expect(err).to.eql({\n        text: 'hi, rejected!'\n      });\n      done();\n    });\n  });","file":"core/hook.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"test  plugin","suites":["init plugin"],"updatePoint":{"line":54,"column":26,"index":1089},"line":54,"code":"    it(`test ${key} plugin`, done => {\n      compare(key, done);\n    });","file":"core/init/plugin.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"getValue","suites":["parseOptions"],"updatePoint":{"line":4,"column":14,"index":140},"line":4,"code":"  it('getValue', function () {\n    expect(po.getValue({}, 'a.b.c')).to.equal(undefined);\n    expect(po.getValue({\n      a: 1\n    }, 'a')).to.equal(1);\n    expect(po.getValue({\n      a: {\n        b: {\n          c: 2\n        }\n      }\n    }, 'a.b')).to.deep.equal({\n      c: 2\n    });\n  });","file":"core/parseOption.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"setValue","suites":["parseOptions"],"updatePoint":{"line":19,"column":14,"index":429},"line":19,"code":"  it('setValue', function () {\n    expect(po.setValue({}, 'a.b.c', 1)).to.deep.equal({\n      a: {\n        b: {\n          c: 1\n        }\n      }\n    });\n    expect(po.setValue({\n      a: {},\n      a2: 2\n    }, 'a.b.c', 1)).to.deep.equal({\n      a: {\n        b: {\n          c: 1\n        }\n      },\n      a2: 2\n    });\n    expect(po.setValue({\n      a: {\n        b: 3\n      },\n      a2: 2\n    }, 'a.b.c', 1)).to.deep.equal({\n      a: {\n        b: {\n          c: 1\n        }\n      },\n      a2: 2\n    });\n    expect(po.setValue({\n      a: {\n        b: {\n          c: 2,\n          d: 3\n        }\n      },\n      a2: 2\n    }, 'a.b.c', 1)).to.deep.equal({\n      a: {\n        b: {\n          c: 1,\n          d: 3\n        }\n      },\n      a2: 2\n    });\n  });","file":"core/parseOption.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"parse","suites":["parseOptions"],"updatePoint":{"line":69,"column":11,"index":1173},"line":69,"code":"  it('parse', function () {\n    expect(po.parse().wpyExt).to.equal('.wpy');\n    expect(po.parse({\n      wpyExt: '.vue'\n    }).wpyExt).to.equal('.vue');\n    expect(po.parse({\n      build: {\n        web: {\n          resolve: {\n            a: 1\n          }\n        }\n      }\n    }).build.web.resolve.a).to.equal(1);\n    expect(po.parse({\n      watchOption: {\n        awaitWriteFinish: {\n          stabilityThreshold: 1000\n        }\n      }\n    }).watchOption.awaitWriteFinish.stabilityThreshold).to.equal(1000);\n  });","file":"core/parseOption.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"test default lang","suites":["sfcCustomBlock"],"updatePoint":{"line":18,"column":23,"index":474},"line":18,"code":"  it('test default lang', function () {\n    const sfc = sfcCompiler.parseComponent(`\n      <config></config>\n      <wxs></wxs>\n    `, {\n      pad: 'space'\n    });\n    const parsedSfc = compiler.hookSeq('sfc-custom-block', sfc);\n    expect(parsedSfc).to.have.a.property('config');\n    expect(parsedSfc).to.have.a.property('wxs');\n    expect(parsedSfc.config.lang).to.equal('json');\n    expect(parsedSfc.wxs).to.be.an.instanceof(Array);\n  });","file":"core/plugins/helper/sfcCustomBlock.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"test custom lang","suites":["sfcCustomBlock"],"updatePoint":{"line":31,"column":22,"index":914},"line":31,"code":"  it('test custom lang', function () {\n    const sfc = sfcCompiler.parseComponent(`\n      <config lang=\"customLang1\"></config>\n      <wxs lang=\"customLang2\"></wxs>\n      <wxs></wxs>\n    `, {\n      pad: 'space'\n    });\n    const parsedSfc = compiler.hookSeq('sfc-custom-block', sfc);\n    expect(parsedSfc).to.have.a.property('config');\n    expect(parsedSfc).to.have.a.property('wxs');\n    expect(parsedSfc.config.lang).to.equal('customLang1');\n    expect(parsedSfc.wxs).to.have.lengthOf(2);\n    expect(parsedSfc.wxs.some(_ => _.lang === 'customLang2')).to.be.true;\n  });","file":"core/plugins/helper/sfcCustomBlock.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should combineTagMap","suites":["tag"],"updatePoint":{"line":4,"column":26,"index":135},"line":4,"code":"  it('should combineTagMap', function () {\n    const additional = {\n      'test-tag-1': 'to-test-tag-1',\n      'test-tag-2': 'to-test-tag-2'\n    };\n    const ret = tag.combineTagMap(tag.HTML2WXML_MAP, additional);\n    expect(ret).to.include(tag.HTML2WXML_MAP);\n    expect(ret).to.include(additional);\n  });","file":"core/tag.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should combineTag","suites":["tag"],"updatePoint":{"line":13,"column":23,"index":439},"line":13,"code":"  it('should combineTag', function () {\n    let additional = 'add-test-tag-1';\n    let ret = tag.combineTag(tag.HTML_TAGS, additional);\n    expect(ret).to.include.members(tag.HTML_TAGS);\n    expect(ret).to.include(additional);\n    additional = 'add-test-tag-1,add-test-tag-2';\n    ret = tag.combineTag(tag.HTML_TAGS, additional);\n    expect(ret).to.include.members(tag.HTML_TAGS);\n    expect(ret).to.include.members(additional.split(','));\n    additional = ['add-test-tag-1', 'add-test-tag-2'];\n    ret = tag.combineTag(tag.HTML_TAGS, additional);\n    expect(ret).to.include.members(tag.HTML_TAGS);\n    expect(ret).to.include.members(additional);\n    additional = 123;\n    ret = tag.combineTag(tag.HTML_TAGS, additional);\n    expect(ret).to.eql(tag.HTML_TAGS);\n  });","file":"core/tag.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"Find entry","suites":["@wepy/compiler-babel"],"updatePoint":{"line":91,"column":16,"index":2332},"line":91,"code":"  it('Find entry', function () {\n    return testFixture('app.js').then(walker => {\n      return !!walker.entry;\n    }).then(res => {\n      expect(res).to.equal(true);\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/compiler-babel/test"},{"name":"should return number minus one","suites":["bar","bar()"],"updatePoint":{"line":5,"column":38,"index":168},"line":5,"code":"    it('should return number minus one', function () {\n      expect(bar(1)).to.equal(0);\n    });","file":"bar.spec.js","skipped":false,"dir":"packages/core/test"},{"name":"should return number plus one","suites":["foo","foo()"],"updatePoint":{"line":5,"column":37,"index":175},"line":5,"code":"    it('should return number plus one', function () {\n      expect(foo(1)).to.equal(2);\n    });","file":"foo.spec.js","skipped":false,"dir":"packages/core/test"},{"name":"should return same number","suites":["foo","foobar()"],"updatePoint":{"line":10,"column":33,"index":310},"line":10,"code":"    it('should return same number', function () {\n      expect(foobar(1)).to.equal(1);\n    });","file":"foo.spec.js","skipped":false,"dir":"packages/core/test"},{"name":"Create Page","suites":["weapp dispatcher"],"updatePoint":{"line":5,"column":17,"index":253},"line":5,"code":"  it('Create Page', done => {\n    const page = createOriginalPage();\n    const params = [1, 2];\n    const evtid = addEventListener(page, 'tap', function (...args) {\n      expect(args[0]).is.equal(params[0]);\n      expect(args[1]).is.equal(params[1]);\n      expect(args[2].type).is.equal('tap');\n      done();\n    });\n    const e = simulateOriginalWePYEvent('tap', evtid, params);\n    dispatcher.call(page, e);\n  });","file":"weapp/dispatcher/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add wepy.app life cycles for string","suites":["weapp life cycles"],"updatePoint":{"line":18,"column":48,"index":546},"line":18,"code":"  it('should add wepy.app life cycles for string', () => {\n    const rel = {\n      lifecycle: {\n        app: 'onSomeNewFeature'\n      }\n    };\n    const lifeCycles = getLifeCycle(WEAPP_APP_LIFECYCLE, rel, 'app');\n    expect(lifeCycles).to.deep.equal([...WEAPP_APP_LIFECYCLE, 'onSomeNewFeature']);\n  });","file":"weapp/init/lifecycle.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add wepy.app life cycles for array","suites":["weapp life cycles"],"updatePoint":{"line":27,"column":47,"index":848},"line":27,"code":"  it('should add wepy.app life cycles for array', () => {\n    const rel = {\n      lifecycle: {\n        app: ['onSomeNewFeature1', 'onSomeNewFeature2']\n      }\n    };\n    const lifeCycles = getLifeCycle(WEAPP_APP_LIFECYCLE, rel, 'app');\n    expect(lifeCycles).to.deep.equal([...WEAPP_APP_LIFECYCLE, 'onSomeNewFeature1', 'onSomeNewFeature2']);\n  });","file":"weapp/init/lifecycle.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should modify wepy.app life cycles for function","suites":["weapp life cycles"],"updatePoint":{"line":36,"column":53,"index":1202},"line":36,"code":"  it('should modify wepy.app life cycles for function', () => {\n    const rel = {\n      lifecycle: {\n        app: function (lifecycles) {\n          const newLifeCycles = lifecycles.filter(l => l !== 'onError');\n          return [...newLifeCycles, 'onSomeNewFeature'];\n        }\n      }\n    };\n    const lifeCycles = getLifeCycle(WEAPP_APP_LIFECYCLE, rel, 'app');\n    expect(lifeCycles).to.deep.equal([...WEAPP_APP_LIFECYCLE.filter(l => l !== 'onError'), 'onSomeNewFeature']);\n  });","file":"weapp/init/lifecycle.test.js","skipped":false,"dir":"packages/core/test"},{"name":"patchAppLifecycle","suites":["weapp life cycles"],"updatePoint":{"line":48,"column":23,"index":1654},"line":48,"code":"  it('patchAppLifecycle', () => {\n    const runState = {\n      onLaunch1: false,\n      onLaunch2: false,\n      onShow: false\n    };\n    const appInstance = {};\n    const appConfig = {};\n    const options = {\n      onShow() {\n        runState.onShow = true;\n      },\n      onLaunch: [() => {\n        runState.onLaunch1 = true;\n      }, () => {\n        runState.onLaunch2 = true;\n      }]\n    };\n    const rel = {};\n    patchAppLifecycle(appConfig, options, rel);\n    expect(appConfig.onLaunch).is.a('function');\n    expect(appConfig.onShow).is.a('function');\n    expect(appConfig.onError).is.a('undefined');\n    appConfig.onLaunch.call(appInstance);\n    appConfig.onShow.call(appInstance);\n    for (const k in runState) {\n      expect(runState[k]).to.be.equal(true);\n    }\n  });","file":"weapp/init/lifecycle.test.js","skipped":false,"dir":"packages/core/test"},{"name":"patchLifecycle componennt","suites":["weapp life cycles"],"updatePoint":{"line":77,"column":31,"index":2440},"line":77,"code":"  it('patchLifecycle componennt', () => {\n    const runState = {\n      ready: false\n    };\n    const compInstance = {};\n    const output = {\n      methods: {}\n    };\n    const options = {\n      ready() {\n        runState.ready = true;\n      }\n    };\n    const rel = {};\n    patchLifecycle(output, options, rel, true);\n    expect(output.created).is.a('function');\n    output.created.call(compInstance);\n    output.ready.call(compInstance);\n    expect(runState.ready).to.equal(true);\n  });","file":"weapp/init/lifecycle.test.js","skipped":false,"dir":"packages/core/test"},{"name":"patchLifecycle page","suites":["weapp life cycles"],"updatePoint":{"line":97,"column":25,"index":2922},"line":97,"code":"  it('patchLifecycle page', () => {\n    const runState = {\n      routed: false,\n      testPageRouted: false\n    };\n    const indexPage = {\n      is: 'somepage',\n      route: 'pages/index',\n      __wxExparserNodeId__: '29d1dad1',\n      __wxWebviewId__: 1\n    };\n    const output = {\n      methods: {}\n    };\n    const options = {\n      routed(oldRoute, newRoute) {\n        expect(oldRoute).to.equal(null);\n        expect(newRoute.path).to.equal(indexPage.route);\n        runState.routed = true;\n      }\n    };\n    const rel = {};\n    patchLifecycle(output, options, rel, false);\n    expect(output.created).is.a('function');\n    expect(output.attached).is.a('function');\n    output.created.call(indexPage);\n    output.attached.call(indexPage);\n    allPages.push(indexPage);\n    output.methods.onShow.call(indexPage);\n    expect(runState.routed).to.equal(true);\n    const testPage = {\n      is: 'testpage',\n      route: 'pages/test',\n      __wxExparserNodeId__: '29d2dad2',\n      __wxWebviewId__: 2\n    };\n    const testOutput = {\n      methods: {}\n    };\n    const testOutputOptions = {\n      routed(oldRoute, newRoute) {\n        expect(oldRoute.path).to.equal(indexPage.route);\n        expect(newRoute.path).to.equal(testPage.route);\n        runState.testPageRouted = true;\n      }\n    };\n    patchLifecycle(testOutput, testOutputOptions, rel, false);\n    testOutput.created.call(testPage);\n    testOutput.attached.call(testPage);\n    allPages.push(testPage);\n    testOutput.methods.onShow.call(testPage);\n    for (const k in runState) {\n      expect(runState[k]).to.be.equal(true);\n    }\n  });","file":"weapp/init/lifecycle.test.js","skipped":false,"dir":"packages/core/test"},{"name":"only path","suites":["weapp observer observerPath"],"updatePoint":{"line":7,"column":15,"index":433},"line":7,"code":"  it('only path', function () {\n    const vm = {};\n    initData(vm, {\n      num: 1,\n      str: 'string',\n      arr: [1, 2],\n      obj: {\n        a: 1\n      },\n      deepObj: {\n        node: {\n          a: 1\n        }\n      }\n    });\n    const data = vm._data;\n    expect(_getPathMap(data, 'num')).to.be.deep.equal({\n      num: {\n        key: 'num',\n        root: 'num',\n        path: 'num'\n      }\n    });\n    expect(_getPathMap(data, 'str')).to.be.deep.equal({\n      str: {\n        key: 'str',\n        root: 'str',\n        path: 'str'\n      }\n    });\n    expect(_getPathMap(data, 'arr')).to.be.deep.equal({\n      arr: {\n        key: 'arr',\n        root: 'arr',\n        path: 'arr'\n      }\n    });\n    expect(_getPathMap(data, 'obj')).to.be.deep.equal({\n      obj: {\n        key: 'obj',\n        root: 'obj',\n        path: 'obj'\n      }\n    });\n    expect(_getPathMap(data, 'deepObj')).to.be.deep.equal({\n      deepObj: {\n        key: 'deepObj',\n        root: 'deepObj',\n        path: 'deepObj'\n      }\n    });\n  });","file":"weapp/observer/observerPath.test.js","skipped":false,"dir":"packages/core/test"},{"name":"only deep path","suites":["weapp observer observerPath"],"updatePoint":{"line":59,"column":20,"index":1454},"line":59,"code":"  it('only deep path', function () {\n    const vm = {};\n    initData(vm, {\n      arr: [1, 2],\n      obj: {\n        a: 1\n      },\n      deepObj: {\n        node: {\n          a: 1\n        }\n      }\n    });\n    const data = vm._data;\n    expect(_getPathMap(data.arr, 0)).to.be.deep.equal({\n      'arr[0]': {\n        key: 0,\n        root: 'arr',\n        path: 'arr[0]'\n      }\n    });\n    expect(_getPathMap(data.obj, 'a')).to.be.deep.equal({\n      'obj.a': {\n        key: 'a',\n        root: 'obj',\n        path: 'obj.a'\n      }\n    });\n    expect(_getPathMap(data.deepObj.node, 'a')).to.be.deep.equal({\n      'deepObj.node.a': {\n        key: 'a',\n        root: 'deepObj',\n        path: 'deepObj.node.a'\n      }\n    });\n    set(vm, vm.deepObj, 'parent', {\n      child: 233\n    });\n    expect(_getPathMap(data.deepObj, 'parent')).to.be.deep.equal({\n      'deepObj.parent': {\n        key: 'parent',\n        root: 'deepObj',\n        path: 'deepObj.parent'\n      }\n    });\n    expect(_getPathMap(data.deepObj.parent, 'child')).to.be.deep.equal({\n      'deepObj.parent.child': {\n        key: 'child',\n        root: 'deepObj',\n        path: 'deepObj.parent.child'\n      }\n    });\n  });","file":"weapp/observer/observerPath.test.js","skipped":false,"dir":"packages/core/test"},{"name":"complex path: Object","suites":["weapp observer observerPath"],"updatePoint":{"line":112,"column":26,"index":2635},"line":112,"code":"  it('complex path: Object', function () {\n    const vm = {};\n    initData(vm, {\n      a: {\n        b: {\n          c: {\n            d: 123\n          }\n        }\n      },\n      x: {},\n      y: {}\n    });\n\n    // eslint-disable-next-line\n    const data = vm._data;\n    data.x = data.a.b.c;\n    data.y = data.x;\n    expect(_getPathMap(data.a.b.c, 'd')).to.be.deep.equal({\n      'x.d': {\n        key: 'd',\n        root: 'x',\n        path: 'x.d'\n      },\n      'y.d': {\n        key: 'd',\n        root: 'y',\n        path: 'y.d'\n      },\n      'a.b.c.d': {\n        key: 'd',\n        root: 'a',\n        path: 'a.b.c.d'\n      }\n    });\n    expect(_getPathMap(data.x, 'd')).to.be.deep.equal({\n      'x.d': {\n        key: 'd',\n        root: 'x',\n        path: 'x.d'\n      },\n      'y.d': {\n        key: 'd',\n        root: 'y',\n        path: 'y.d'\n      },\n      'a.b.c.d': {\n        key: 'd',\n        root: 'a',\n        path: 'a.b.c.d'\n      }\n    });\n    expect(_getPathMap(data.y, 'd')).to.be.deep.equal({\n      'x.d': {\n        key: 'd',\n        root: 'x',\n        path: 'x.d'\n      },\n      'y.d': {\n        key: 'd',\n        root: 'y',\n        path: 'y.d'\n      },\n      'a.b.c.d': {\n        key: 'd',\n        root: 'a',\n        path: 'a.b.c.d'\n      }\n    });\n    data.x = {\n      d: 123\n    };\n    expect(_getPathMap(data.a.b.c, 'd')).to.be.deep.equal({\n      'y.d': {\n        key: 'd',\n        root: 'y',\n        path: 'y.d'\n      },\n      'a.b.c.d': {\n        key: 'd',\n        root: 'a',\n        path: 'a.b.c.d'\n      }\n    });\n    expect(_getPathMap(data.x, 'd')).to.be.deep.equal({\n      'x.d': {\n        key: 'd',\n        root: 'x',\n        path: 'x.d'\n      }\n    });\n    expect(_getPathMap(data.y, 'd')).to.be.deep.equal({\n      'y.d': {\n        key: 'd',\n        root: 'y',\n        path: 'y.d'\n      },\n      'a.b.c.d': {\n        key: 'd',\n        root: 'a',\n        path: 'a.b.c.d'\n      }\n    });\n  });","file":"weapp/observer/observerPath.test.js","skipped":false,"dir":"packages/core/test"},{"name":"complex path: Array","suites":["weapp observer observerPath"],"updatePoint":{"line":216,"column":25,"index":4544},"line":216,"code":"  it('complex path: Array', function () {\n    const vm = {};\n    initData(vm, {\n      arr1: [],\n      arr2: [],\n      arr3: []\n    });\n    const data = vm._data;\n    const obj = {\n      a: 123\n    };\n    data.arr1.push(obj);\n    data.arr2.splice(0, 0, obj);\n    data.arr3.unshift(obj);\n    expect(_getPathMap(data.arr1[0], 'a')).to.be.deep.equal({\n      'arr1[0].a': {\n        key: 'a',\n        root: 'arr1',\n        path: 'arr1[0].a'\n      },\n      'arr2[0].a': {\n        key: 'a',\n        root: 'arr2',\n        path: 'arr2[0].a'\n      },\n      'arr3[0].a': {\n        key: 'a',\n        root: 'arr3',\n        path: 'arr3[0].a'\n      }\n    });\n    expect(_getPathMap(data.arr2[0], 'a')).to.be.deep.equal({\n      'arr1[0].a': {\n        key: 'a',\n        root: 'arr1',\n        path: 'arr1[0].a'\n      },\n      'arr2[0].a': {\n        key: 'a',\n        root: 'arr2',\n        path: 'arr2[0].a'\n      },\n      'arr3[0].a': {\n        key: 'a',\n        root: 'arr3',\n        path: 'arr3[0].a'\n      }\n    });\n    expect(_getPathMap(data.arr3[0], 'a')).to.be.deep.equal({\n      'arr1[0].a': {\n        key: 'a',\n        root: 'arr1',\n        path: 'arr1[0].a'\n      },\n      'arr2[0].a': {\n        key: 'a',\n        root: 'arr2',\n        path: 'arr2[0].a'\n      },\n      'arr3[0].a': {\n        key: 'a',\n        root: 'arr3',\n        path: 'arr3[0].a'\n      }\n    });\n    data.arr2.splice(0, 1);\n    expect(_getPathMap(data.arr1[0], 'a')).to.be.deep.equal({\n      'arr1[0].a': {\n        key: 'a',\n        root: 'arr1',\n        path: 'arr1[0].a'\n      },\n      'arr3[0].a': {\n        key: 'a',\n        root: 'arr3',\n        path: 'arr3[0].a'\n      }\n    });\n    expect(_getPathMap(data.arr3[0], 'a')).to.be.deep.equal({\n      'arr1[0].a': {\n        key: 'a',\n        root: 'arr1',\n        path: 'arr1[0].a'\n      },\n      'arr3[0].a': {\n        key: 'a',\n        root: 'arr3',\n        path: 'arr3[0].a'\n      }\n    });\n  });","file":"weapp/observer/observerPath.test.js","skipped":false,"dir":"packages/core/test"},{"name":"warn test","suites":["debug test"],"updatePoint":{"line":4,"column":15,"index":147},"line":4,"code":"  it('warn test', function () {\n    const app = {\n      data: 24\n    };\n    expect(warn('SyntaxError', app)).to.deep.equal(undefined);\n  });","file":"weapp/util/debug.test.js","skipped":false,"dir":"packages/core/test"},{"name":"tip test","suites":["debug test"],"updatePoint":{"line":10,"column":14,"index":287},"line":10,"code":"  it('tip test', function () {\n    const app = {\n      data: 24\n    };\n    expect(tip('ReferenceError', app)).to.deep.equal(undefined);\n  });","file":"weapp/util/debug.test.js","skipped":false,"dir":"packages/core/test"},{"name":"error test","suites":["handleError test"],"updatePoint":{"line":4,"column":16,"index":150},"line":4,"code":"  it('error test', () => {\n    const app = {\n      data: 24\n    };\n    const func = handleError('ReferenceError', app, 'render');\n    expect(func).to.deep.equal(undefined);\n  });","file":"weapp/util/error.test.js","skipped":false,"dir":"packages/core/test"},{"name":"arr remove 2","suites":["remove test"],"updatePoint":{"line":6,"column":18,"index":262},"line":6,"code":"  it('arr remove 2', () => {\n    const arr1 = [2, 3, 7, 5, 6, 7, 8, 1];\n    const removearr = remove(arr1, 2);\n    expect(removearr).to.deep.equal([2]);\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"arr remove 4","suites":["remove test"],"updatePoint":{"line":11,"column":18,"index":421},"line":11,"code":"  it('arr remove 4', () => {\n    const arr2 = [2, 3, 7, 5, 6, 7, 8, 1];\n    expect(remove(arr2, 4)).to.deep.equal(undefined);\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"arr is null","suites":["remove test"],"updatePoint":{"line":15,"column":17,"index":552},"line":15,"code":"  it('arr is null', () => {\n    const arr3 = [];\n    expect(remove(arr3, 2)).to.deep.equal(undefined);\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"Check if a string starts with _","suites":["isReserved test"],"updatePoint":{"line":21,"column":37,"index":721},"line":21,"code":"  it('Check if a string starts with _', () => {\n    expect(isReserved('_static')).to.be.true;\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"Check if a string starts with $ ","suites":["isReserved test"],"updatePoint":{"line":24,"column":38,"index":822},"line":24,"code":"  it('Check if a string starts with $ ', () => {\n    expect(isReserved('$key')).to.be.true;\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"Check if a string starts without $ or _ ","suites":["isReserved test"],"updatePoint":{"line":27,"column":46,"index":928},"line":27,"code":"  it('Check if a string starts without $ or _ ', () => {\n    expect(isReserved('dhdff')).to.be.false;\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"add property","suites":["def test"],"updatePoint":{"line":32,"column":18,"index":1041},"line":32,"code":"  it('add property', () => {\n    const obj = {};\n    def(obj, 'color', 'white', true);\n    expect(obj).to.deep.equal({\n      color: 'white'\n    });\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"modified property","suites":["def test"],"updatePoint":{"line":39,"column":23,"index":1200},"line":39,"code":"  it('modified property', () => {\n    const obj = {\n      eat: 'fish',\n      color: 'white'\n    };\n    def(obj, 'color', 'black', true);\n    expect(obj).to.deep.equal({\n      eat: 'fish',\n      color: 'black'\n    });\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"parsePath test: return an property value","suites":["parsePath test"],"updatePoint":{"line":52,"column":46,"index":1485},"line":52,"code":"  it('parsePath test: return an property value', () => {\n    const path = 'wepy.test';\n    let a = parsePath(path);\n    const b = a({\n      wepy: {\n        test: 1\n      }\n    });\n    expect(b).to.deep.equal(1);\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"parsePath test: return an object","suites":["parsePath test"],"updatePoint":{"line":62,"column":38,"index":1695},"line":62,"code":"  it('parsePath test: return an object', () => {\n    const path = 'wepy.test';\n    let a = parsePath(path);\n    const b = a({\n      wepy: {\n        test: {\n          test2: 'test3'\n        }\n      }\n    });\n    expect(b).to.deep.equal({\n      test2: 'test3'\n    });\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"parsePath test: Don't satisfy regular expression","suites":["parsePath test"],"updatePoint":{"line":76,"column":55,"index":1984},"line":76,"code":"  it('parsePath test: Don\\'t satisfy regular expression', () => {\n    const path = 'wepy.';\n    let a = parsePath(path);\n    const b = a({\n      wepy: {\n        test: {\n          test2: 'test3'\n        }\n      }\n    });\n    expect(b).to.deep.equal(undefined);\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"parsePath test: Don't satisfy regular expression","suites":["parsePath test"],"updatePoint":{"line":88,"column":55,"index":2250},"line":88,"code":"  it('parsePath test: Don\\'t satisfy regular expression', () => {\n    const path = 'wepy.test';\n    let a = parsePath(path);\n    const b = a({\n      wepy1: {\n        test1: {\n          test2: 'test3'\n        }\n      }\n    });\n    expect(b).to.deep.equal(undefined);\n  });","file":"weapp/util/index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"there are no square brackets and dots :","suites":["parseModel test"],"updatePoint":{"line":4,"column":45,"index":177},"line":4,"code":"  it('there are no square brackets and dots :', () => {\n    var str = '  test  ';\n    expect(parseModel(str)).to.deep.equal({\n      expr: 'test',\n      key: null\n    });\n  });","file":"weapp/util/model.test.js","skipped":false,"dir":"packages/core/test"},{"name":"there are only dots :","suites":["parseModel test"],"updatePoint":{"line":11,"column":27,"index":335},"line":11,"code":"  it('there are only dots :', () => {\n    var str = ' test.key ';\n    expect(parseModel(str)).to.deep.equal({\n      expr: 'test',\n      key: 'key'\n    });\n  });","file":"weapp/util/model.test.js","skipped":false,"dir":"packages/core/test"},{"name":" there are only brackets :","suites":["parseModel test"],"updatePoint":{"line":18,"column":32,"index":501},"line":18,"code":"  it(' there are only brackets :', () => {\n    var str = '  test[key]  ';\n    expect(parseModel(str)).to.deep.equal({\n      expr: 'test',\n      key: 'key'\n    });\n  });","file":"weapp/util/model.test.js","skipped":false,"dir":"packages/core/test"},{"name":"there are multiple square brackets nesting :","suites":["parseModel test"],"updatePoint":{"line":25,"column":50,"index":688},"line":25,"code":"  it('there are multiple square brackets nesting :', () => {\n    var str = ' test[test1[key]]  ';\n    expect(parseModel(str)).to.deep.equal({\n      expr: 'test',\n      key: 'test1[key]'\n    });\n  });","file":"weapp/util/model.test.js","skipped":false,"dir":"packages/core/test"},{"name":"there are double quotation marks ：","suites":["parseModel test"],"updatePoint":{"line":32,"column":40,"index":878},"line":32,"code":"  it('there are double quotation marks ：', () => {\n    var str = ' test[\"a\"][key]  ';\n    expect(parseModel(str)).to.deep.equal({\n      expr: 'test[\\\"a\\\"]',\n      key: 'key'\n    });\n  });","file":"weapp/util/model.test.js","skipped":false,"dir":"packages/core/test"},{"name":"there are points and brackets nesting :","suites":["parseModel test"],"updatePoint":{"line":39,"column":45,"index":1071},"line":39,"code":"  it('there are points and brackets nesting :', () => {\n    var str = ' xxx.test[a[a].test1[key]]  ';\n    expect(parseModel(str)).to.deep.equal({\n      expr: 'xxx.test',\n      key: 'a[a].test1[key]'\n    });\n  });","file":"weapp/util/model.test.js","skipped":false,"dir":"packages/core/test"},{"name":"there are multiple dots and brackets :","suites":["parseModel test"],"updatePoint":{"line":46,"column":44,"index":1283},"line":46,"code":"  it('there are multiple dots and brackets :', () => {\n    var str = ' test.xxx.a[\"asa\"][test1[key]]  ';\n    expect(parseModel(str)).to.deep.equal({\n      expr: 'test.xxx.a[\\\"asa\\\"]',\n      key: 'test1[key]'\n    });\n  });","file":"weapp/util/model.test.js","skipped":false,"dir":"packages/core/test"},{"name":"macro task with normal function","suites":["next-tick test"],"updatePoint":{"line":4,"column":37,"index":229},"line":4,"code":"  it('macro task with normal function', function () {\n    const fn = () => 1;\n    expect(withMacroTask(fn)).is.an('function');\n  });","file":"weapp/util/next-tick.test.js","skipped":false,"dir":"packages/core/test"},{"name":"walker-unary-expression-undefined","suites":["plugin-define"],"updatePoint":{"line":13,"column":39,"index":382},"line":13,"code":"  it('walker-unary-expression-undefined', function () {\n    const names = {\n      name: 'window'\n    };\n    // typeof window generate the same ast with typeof(window)\n    // let a = typeof window;\n    const unaryExpr = {\n      type: 'UnaryExpression',\n      start: 8,\n      end: 21,\n      operator: 'typeof',\n      prefix: true,\n      argument: {\n        type: 'Identifier',\n        start: 15,\n        end: 21,\n        name: 'window'\n      }\n    };\n    let compile = createCompile();\n    let args = compile.hookSeq('walker-unary-expression-undefined', compile.parser, unaryExpr, names);\n    expect(args[0].replacements.length).to.equal(0);\n    compile = createCompile({\n      'typeof window': JSON.stringify('xyz')\n    });\n    args = compile.hookSeq('walker-unary-expression-undefined', compile.parser, unaryExpr, names);\n    expect(args[0].replacements[0].expr).to.equal(unaryExpr);\n    expect(args[0].replacements[0].value).to.equal('\"xyz\"');\n\n    // delete x.y\n    const deleteUnaryExpr = {\n      type: 'UnaryExpression',\n      start: 0,\n      end: 10,\n      operator: 'delete',\n      prefix: true,\n      argument: {\n        type: 'MemberExpression',\n        start: 7,\n        end: 10,\n        object: {\n          type: 'Identifier',\n          start: 7,\n          end: 8,\n          name: 'x'\n        },\n        property: {\n          type: 'Identifier',\n          start: 9,\n          end: 10,\n          name: 'y'\n        },\n        computed: false\n      }\n    };\n    compile = createCompile({\n      'x.y': JSON.stringify('xyz')\n    });\n    args = compile.hookSeq('walker-unary-expression-undefined', compile.parser, deleteUnaryExpr, {\n      name: 'x.y'\n    });\n    expect(args[0].replacements.length).to.equal(0);\n  });","file":"index.test.js","skipped":false,"dir":"packages/plugin-define/test"},{"name":"walker-member-expression-undefined","suites":["plugin-define"],"updatePoint":{"line":76,"column":40,"index":2105},"line":76,"code":"  it('walker-member-expression-undefined', function () {\n    const memberExpr = {\n      type: 'MemberExpression',\n      start: 8,\n      end: 28,\n      object: {\n        type: 'MemberExpression',\n        start: 8,\n        end: 19,\n        object: {\n          type: 'Identifier',\n          start: 8,\n          end: 15,\n          name: 'process'\n        },\n        property: {\n          type: 'Identifier',\n          start: 16,\n          end: 19,\n          name: 'env'\n        },\n        computed: false\n      },\n      property: {\n        type: 'Identifier',\n        start: 20,\n        end: 28,\n        name: 'NODE_ENV'\n      },\n      computed: false\n    };\n    const names = {\n      name: 'process.env.NODE_ENV'\n    };\n    let compile = createCompile();\n    let args = compile.hookSeq('walker-member-expression-undefined', compile.parser, memberExpr, names);\n    expect(args[0].replacements.length).to.equal(0);\n    compile = createCompile({\n      'process.env.NODE_ENV': JSON.stringify('dev')\n    });\n    args = compile.hookSeq('walker-member-expression-undefined', compile.parser, memberExpr, names);\n    expect(args[0].replacements[0].expr).to.equal(memberExpr);\n    expect(args[0].replacements[0].value).to.equal('\"dev\"');\n  });","file":"index.test.js","skipped":false,"dir":"packages/plugin-define/test"},{"name":"walker-identifier-undefined","suites":["plugin-define"],"updatePoint":{"line":120,"column":33,"index":3329},"line":120,"code":"  it('walker-identifier-undefined', function () {\n    const memberExpr = {\n      type: 'Identifier',\n      start: 8,\n      end: 19,\n      name: 'DEFINED_VAR'\n    };\n    const names = {\n      name: 'DEFINED_VAR'\n    };\n    let compile = createCompile();\n    let args = compile.hookSeq('walker-identifier-undefined', compile.parser, memberExpr, names);\n    expect(args[0].replacements.length).to.equal(0);\n    compile = createCompile({\n      DEFINED_VAR: JSON.stringify('something')\n    });\n    args = compile.hookSeq('walker-identifier-undefined', compile.parser, memberExpr, names);\n    expect(args[0].replacements[0].expr).to.equal(memberExpr);\n    expect(args[0].replacements[0].value).to.equal('\"something\"');\n  });","file":"index.test.js","skipped":false,"dir":"packages/plugin-define/test"},{"name":"test different values","suites":["plugin-define"],"updatePoint":{"line":140,"column":27,"index":4042},"line":140,"code":"  it('test different values', function () {\n    let compile, args;\n    compile = createCompile({\n      V_NULL: null\n    });\n    args = compile.hookSeq('walker-member-expression-undefined', compile.parser, null, {\n      name: 'V_NULL'\n    });\n    expect(args[0].replacements[0].value).to.equal('null');\n    compile = createCompile({\n      V_UNDEFINED: undefined\n    });\n    args = compile.hookSeq('walker-member-expression-undefined', compile.parser, null, {\n      name: 'V_UNDEFINED'\n    });\n    expect(args[0].replacements[0].value).to.equal('undefined');\n    const reg = new RegExp('[0-9a-z]', 'ig');\n    compile = createCompile({\n      V_REGEXP: reg\n    });\n    args = compile.hookSeq('walker-member-expression-undefined', compile.parser, null, {\n      name: 'V_REGEXP'\n    });\n    expect(args[0].replacements[0].value).to.equal(reg.toString());\n    const func = () => func(1);\n    compile = createCompile({\n      V_FUNCTION: func\n    });\n    args = compile.hookSeq('walker-member-expression-undefined', compile.parser, null, {\n      name: 'V_FUNCTION'\n    });\n    expect(args[0].replacements[0].value).to.equal('(' + func.toString() + ')');\n    const obj = {\n      a: 1,\n      b: 4\n    };\n    compile = createCompile({\n      V_OBJECT: obj\n    });\n    args = compile.hookSeq('walker-member-expression-undefined', compile.parser, null, {\n      name: 'V_OBJECT'\n    });\n    const stringObj = args[0].replacements[0].value;\n    const toObj = new Function('return ' + stringObj)();\n    expect(JSON.stringify(obj)).to.equal(JSON.stringify(toObj));\n  });","file":"index.test.js","skipped":false,"dir":"packages/plugin-define/test"},{"name":"test callback success","suites":["@wepy/use-intercept"],"updatePoint":{"line":72,"column":27,"index":1666},"line":72,"code":"  it('test callback success', function (done) {\n    let task = ensureAllTaskDone(['test-getStorage-config', 'test-getStorage-success', 'test-request-complete'], done);\n    let wepy = {};\n    useInterceptInstall(wepy);\n    const timeNow = +new Date();\n    const getStorage = wepy.intercept(wepy.wx.getStorage, {\n      config(p) {\n        p.t = timeNow;\n        expect(p.key).to.equal('sid');\n        task.done('test-getStorage-config');\n        return p;\n      },\n      success(res) {\n        res += ' world';\n        return res;\n      },\n      complete(res) {\n        res += ' complete';\n        return res;\n      }\n    });\n    expect(getStorage).is.a('function');\n    wx.setStorageSync({\n      key: 'sid',\n      data: 'hello'\n    });\n    getStorage({\n      key: 'sid',\n      success(res) {\n        expect(res).to.equal('hello world');\n        task.done('test-getStorage-success');\n      },\n      fail() {\n        throw new Error('never go here');\n      },\n      complete(res) {\n        expect(res).to.equal('hello complete');\n        task.done('test-request-complete');\n      }\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-intercept/test"},{"name":"test callback config promise","suites":["@wepy/use-intercept"],"updatePoint":{"line":113,"column":34,"index":2766},"line":113,"code":"  it('test callback config promise', function (done) {\n    let task = ensureAllTaskDone(['test-getStorage-config', 'test-getStorage-success', 'test-request-complete'], done);\n    let wepy = {};\n    useInterceptInstall(wepy);\n    const timeNow = +new Date();\n    const getStorage = wepy.intercept(wepy.wx.getStorage, {\n      config(p) {\n        p.t = timeNow;\n        expect(p.key).to.equal('sid');\n        return new Promise(resolve => {\n          setTimeout(() => {\n            task.done('test-getStorage-config');\n            resolve(p);\n          });\n        });\n      },\n      success(res) {\n        res += ' world';\n        return res;\n      },\n      complete(res) {\n        res += ' complete';\n        return res;\n      }\n    });\n    expect(getStorage).is.a('function');\n    wx.setStorageSync({\n      key: 'sid',\n      data: 'hello'\n    });\n    getStorage({\n      key: 'sid',\n      success(res) {\n        expect(res).to.equal('hello world');\n        task.done('test-getStorage-success');\n      },\n      fail() {\n        throw new Error('never go here');\n      },\n      complete(res) {\n        expect(res).to.equal('hello complete');\n        task.done('test-request-complete');\n      }\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-intercept/test"},{"name":"test callback config promise reject","suites":["@wepy/use-intercept"],"updatePoint":{"line":158,"column":41,"index":3978},"line":158,"code":"  it('test callback config promise reject', function (done) {\n    let task = ensureAllTaskDone(['test-getStorage-config', 'test-getStorage-fail'], done);\n    let wepy = {};\n    useInterceptInstall(wepy);\n    const timeNow = +new Date();\n    const getStorage = wepy.intercept(wepy.wx.getStorage, {\n      config(p) {\n        p.t = timeNow;\n        expect(p.key).to.equal('sid');\n        return new Promise((_, reject) => {\n          setTimeout(() => {\n            task.done('test-getStorage-config');\n            reject(new Error('test'));\n          });\n        });\n      },\n      fail(e) {\n        return new Error(e.message + ' from interceptor');\n      },\n      success(res) {\n        res += ' world';\n        return res;\n      },\n      complete(res) {\n        res += ' complete';\n        return res;\n      }\n    });\n    expect(getStorage).is.a('function');\n    wx.setStorageSync({\n      key: 'sid',\n      data: 'hello'\n    });\n    getStorage({\n      key: 'sid',\n      success() {\n        throw new Error('never go here');\n      },\n      fail(e) {\n        expect(e.message).to.equal('test from interceptor');\n        task.done('test-getStorage-fail');\n      },\n      complete() {\n        throw new Error('never call complete when interceptor config reject');\n      }\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-intercept/test"},{"name":"test callback failed","suites":["@wepy/use-intercept"],"updatePoint":{"line":205,"column":26,"index":5245},"line":205,"code":"  it('test callback failed', function (done) {\n    let task = ensureAllTaskDone(['test-request-config', 'test-request-fail', 'test-request-complete'], done);\n    let wepy = {};\n    useInterceptInstall(wepy);\n    const timeNow = +new Date();\n    const request = wepy.intercept(wepy.wx.request, {\n      config(params) {\n        params.t = timeNow;\n        task.done('test-request-config');\n        expect(params.url).to.equal('www.baidu.com');\n        return params;\n      },\n      fail(e) {\n        e.intercept_fail = true;\n        return e;\n      },\n      complete(res) {\n        res.intercept_complete = true;\n        return res;\n      }\n    });\n    expect(request).is.a('function');\n    request({\n      url: 'www.baidu.com',\n      success() {\n        throw new Error('never go here');\n      },\n      fail(e) {\n        expect(e.intercept_fail).to.equal(true);\n        task.done('test-request-fail');\n      },\n      complete(res) {\n        expect(res.a).to.equal(1);\n        expect(res.intercept_complete).to.equal(true);\n        task.done('test-request-complete');\n      }\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-intercept/test"},{"name":"install","suites":["wepy@use-promisify"],"updatePoint":{"line":79,"column":13,"index":1906},"line":79,"code":"  it('install', function (done) {\n    let task = ensureAllTaskDone(['test-request-catch', 'test-storage', 'test-checkSession'], done);\n    let wepy = {};\n    usePromisifyInstall(wepy);\n    expect(wepy.wx.request).is.a('function');\n    let promise = wepy.wx.request();\n    expect(promise).is.a('promise');\n    promise.catch(e => {\n      expect(e).is.an('error');\n      expect(e.message).to.equal('timeout');\n      task.done('test-request-catch');\n    });\n    wepy.wx.getStorage({\n      key: 'mydata'\n    }).then(res => {\n      expect(res).to.deep.equal(__storage.mydata);\n      task.done('test-storage');\n    });\n    expect(wepy.wx.getStorageSync('mydata')).to.deep.equal(__storage.mydata);\n    wepy.wx.checkSession().then(res => {\n      expect(res).to.deep.equal({\n        errMsg: 'checkSession:ok'\n      });\n      task.done('test-checkSession');\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-promisify/test"},{"name":"install appends array list","suites":["wepy@use-promisify"],"updatePoint":{"line":105,"column":32,"index":2786},"line":105,"code":"  it('install appends array list', function (done) {\n    let wepy = {};\n    usePromisifyInstall(wepy, {\n      someNewAPI: false,\n      getStorage: true\n    });\n    wepy.wx.someNewAPI({\n      num: 1\n    }).then(res => {\n      expect(res).to.equal(1);\n      done();\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-promisify/test"},{"name":"install get rid apis","suites":["wepy@use-promisify"],"updatePoint":{"line":118,"column":26,"index":3058},"line":118,"code":"  it('install get rid apis', function (done) {\n    let wepy = {};\n    usePromisifyInstall(wepy, ['getStorage']);\n    wepy.wx.getStorage({\n      key: 'mydata',\n      success: function (res) {\n        expect(res).is.deep.equal(__storage.mydata);\n        done();\n      }\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-promisify/test"},{"name":"params fix testing","suites":["wepy@use-promisify"],"updatePoint":{"line":129,"column":24,"index":3338},"line":129,"code":"  it('params fix testing', function (done) {\n    let wepy = {};\n    usePromisifyInstall(wepy);\n    wepy.wx.setStorage('mydata', {\n      b: 1\n    }).then(() => {\n      wepy.wx.getStorage('mydata').then(res => {\n        expect(res).to.deep.equal({\n          b: 1\n        });\n        expect(__storage.mydata).to.deep.equal(res);\n        done();\n      });\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-promisify/test"},{"name":"test err-first promisify","suites":["wepy@use-promisify"],"updatePoint":{"line":144,"column":30,"index":3710},"line":144,"code":"  it('test err-first promisify', function (done) {\n    let task = ensureAllTaskDone(['test-greater', 'test-less'], done);\n    let isGreaterThan10 = function (num, callback) {\n      setTimeout(function () {\n        if (num > 10) {\n          callback(null, true);\n        } else {\n          callback(new Error('wrong'), false);\n        }\n      }, 300);\n    };\n    let wepy = {};\n    usePromisifyInstall(wepy);\n    let promisifyFn = wepy.promisify(isGreaterThan10, null, 'error-first');\n    promisifyFn(11).then(res => {\n      expect(res).to.equal(true);\n      task.done('test-greater');\n    });\n    promisifyFn(9).then(() => {\n      throw new Error('should not run here');\n    }).catch(e => {\n      expect(e).is.an('error');\n      expect(e.message).to.equal('wrong');\n      task.done('test-less');\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-promisify/test"},{"name":"test weapp-style promisify","suites":["wepy@use-promisify"],"updatePoint":{"line":170,"column":32,"index":4522},"line":170,"code":"  it('test weapp-style promisify', function (done) {\n    let task = ensureAllTaskDone(['test-greater', 'test-less'], done);\n    let isGreaterThan10 = function (option) {\n      if (option.num > 10) {\n        option.success(true);\n      } else {\n        option.fail(new Error('wrong'));\n      }\n    };\n    let wepy = {};\n    usePromisifyInstall(wepy);\n    let promisifyFn = wepy.promisify(isGreaterThan10);\n    promisifyFn({\n      num: 11\n    }).then(res => {\n      expect(res).to.equal(true);\n      task.done('test-greater');\n    });\n    promisifyFn({\n      num: 9\n    }).then(() => {\n      throw new Error('should not run here');\n    }).catch(e => {\n      expect(e).is.an('error');\n      expect(e.message).to.equal('wrong');\n      task.done('test-less');\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-promisify/test"},{"name":"test simplify","suites":["wepy@use-promisify"],"updatePoint":{"line":198,"column":19,"index":5278},"line":198,"code":"  it('test simplify', function (done) {\n    let wepy = {},\n      originParamsArr = [{\n        itemList: 0,\n        itemColor: 0\n      }, {\n        itemList: ['A', 'B', 'C'],\n        itemColor: '#000'\n      }, {\n        itemList: 'test?id=1'\n      }],\n      task = ensureAllTaskDone(function () {\n        return originParamsArr.map((item, index) => index);\n      }(), done);\n    usePromisifyInstall(wepy);\n    for (let item of originParamsArr) {\n      let filterParams = Object.values(item);\n      wepy.wx.showActionSheet(...filterParams).then(res => {\n        delete res.success;\n        delete res.fail;\n        expect(res).to.deep.equal(item);\n        task.done(originParamsArr.indexOf(item));\n      }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n      });\n    }\n  });","file":"index.test.js","skipped":false,"dir":"packages/use-promisify/test"}]}