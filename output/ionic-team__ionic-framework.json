{"repo":"ionic-team/ionic-framework","url":"https://github.com/ionic-team/ionic-framework","branch":"main","configs":[{"package":"react-router-new","lang":"js","dir":"packages/react-router/test-app/cypress","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@ionic/react/routing","lang":"ts","dir":"packages/react/src/routing/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-app","lang":"js","dir":"packages/react/test-app/cypress","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@ionic/vue-router","lang":"ts","dir":"packages/vue-router/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"then should be at /page2 canGoBack should be true","suites":["LocationHistory","Popping history","page1 > page2"],"updatePoint":{"line":25,"column":59},"line":25,"code":"      it('then should be at /page2 canGoBack should be true', () => {\n        expect(currentRoute().pathname).toEqual('/page2');\n        expect(locationHistory.canGoBack()).toBeTruthy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"when going back, should be on /page1 and canGoBack should be false","suites":["LocationHistory","Popping history","page1 > page2"],"updatePoint":{"line":30,"column":76},"line":30,"code":"      it('when going back, should be on /page1 and canGoBack should be false', () => {\n        popRoute();\n        expect(currentRoute().pathname).toEqual('/page1');\n        expect(locationHistory.canGoBack()).toBeFalsy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"then should be on tab1 and should not be able to go back","suites":["LocationHistory","Popping history","tab1 > tab2 > Back"],"updatePoint":{"line":46,"column":66},"line":46,"code":"      it('then should be on tab1 and should not be able to go back', () => {\n        expect(currentRoute().pathname).toEqual('/tab1');\n        expect(locationHistory.canGoBack()).toBeFalsy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"when back once, then should be on tab2 and should be able to go back","suites":["LocationHistory","Popping history","tab1 > tab2 > tab3"],"updatePoint":{"line":62,"column":78},"line":62,"code":"      it('when back once, then should be on tab2 and should be able to go back', () => {\n        popRoute();\n        expect(currentRoute().pathname).toEqual('/tab2');\n        expect(locationHistory.canGoBack).toBeTruthy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"when going back twice, should be on tab1 and not be able to go back","suites":["LocationHistory","Popping history","tab1 > tab2 > tab3"],"updatePoint":{"line":68,"column":77},"line":68,"code":"      it('when going back twice, should be on tab1 and not be able to go back', () => {\n        popRoute();\n        popRoute();\n        expect(currentRoute().pathname).toEqual('/tab1');\n        expect(locationHistory.canGoBack()).toBeFalsy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"then should be at details2 and able to go back","suites":["LocationHistory","Popping history","tab1 > tab1/details/1, then tab1/details/2"],"updatePoint":{"line":86,"column":56},"line":86,"code":"      it('then should be at details2 and able to go back', () => {\n        expect(currentRoute().pathname).toEqual('/tab1/details/2');\n        expect(locationHistory.canGoBack()).toBeTruthy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"when going back, should be at details1 and able to go back","suites":["LocationHistory","Popping history","tab1 > tab1/details/1, then tab1/details/2"],"updatePoint":{"line":91,"column":68},"line":91,"code":"      it('when going back, should be at details1 and able to go back', () => {\n        popRoute();\n        expect(currentRoute().pathname).toEqual('/tab1/details/1');\n        expect(locationHistory.canGoBack()).toBeTruthy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"when going back twice, should be at home and not able to go back","suites":["LocationHistory","Popping history","tab1 > tab1/details/1, then tab1/details/2"],"updatePoint":{"line":97,"column":74},"line":97,"code":"      it('when going back twice, should be at home and not able to go back', () => {\n        popRoute();\n        popRoute();\n        expect(currentRoute().pathname).toEqual('/tab1');\n        expect(locationHistory.canGoBack()).toBeFalsy();\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"then locationHistory should have 3 entries","suites":["LocationHistory","Switching tabs","tab1 > tab2 > tab1"],"updatePoint":{"line":117,"column":52},"line":117,"code":"      it('then locationHistory should have 3 entries', () =>\n        expect((locationHistory as any).locationHistory.length).toEqual(3));","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"then tab1 and tab2 should have one entry","suites":["LocationHistory","Switching tabs","tab1 > tab2 > tab1"],"updatePoint":{"line":120,"column":50},"line":120,"code":"      it('then tab1 and tab2 should have one entry', () => {\n        expect((locationHistory as any).tabHistory['tab1'].length).toEqual(1);\n        expect((locationHistory as any).tabHistory['tab2'].length).toEqual(1);\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"when going back, then locationHistory should have 2 entries","suites":["LocationHistory","Switching tabs","tab1 > tab2 > tab3 > Back"],"updatePoint":{"line":137,"column":69},"line":137,"code":"      it('when going back, then locationHistory should have 2 entries', () => {\n        expect((locationHistory as any).locationHistory.length).toEqual(2);\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"when going back, then tab1, tab2, and tab3 should have one entry","suites":["LocationHistory","Switching tabs","tab1 > tab2 > tab3 > Back"],"updatePoint":{"line":141,"column":74},"line":141,"code":"      it('when going back, then tab1, tab2, and tab3 should have one entry', () => {\n        expect((locationHistory as any).tabHistory['tab1'].length).toEqual(1);\n        expect((locationHistory as any).tabHistory['tab2'].length).toEqual(1);\n        expect((locationHistory as any).tabHistory['tab3'].length).toEqual(1);\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"then should be at details3","suites":["LocationHistory","Replacing history","tab1 > tab1/details/1, tab1/details/2, Replace to tab1/details/3"],"updatePoint":{"line":162,"column":36},"line":162,"code":"      it('then should be at details3', () => {\n        expect(currentRoute().pathname).toEqual('/tab1/details/3');\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"tab1 history should have 3 entries and they should have correct paths","suites":["LocationHistory","Replacing history","tab1 > tab1/details/1, tab1/details/2, Replace to tab1/details/3"],"updatePoint":{"line":166,"column":79},"line":166,"code":"      it('tab1 history should have 3 entries and they should have correct paths', () => {\n        expect((locationHistory as any).tabHistory['tab1'].length).toEqual(3);\n        expect((locationHistory as any).tabHistory['tab1'][0].pathname).toEqual('/tab1');\n        expect((locationHistory as any).tabHistory['tab1'][1].pathname).toEqual('/tab1/details/1');\n        expect((locationHistory as any).tabHistory['tab1'][2].pathname).toEqual('/tab1/details/3');\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"locationHistory should have 3 entries and they should have correct paths","suites":["LocationHistory","Replacing history","tab1 > tab1/details/1, tab1/details/2, Replace to tab1/details/3"],"updatePoint":{"line":173,"column":82},"line":173,"code":"      it('locationHistory should have 3 entries and they should have correct paths', () => {\n        expect((locationHistory as any).locationHistory.length).toEqual(3);\n        expect((locationHistory as any).locationHistory[0].pathname).toEqual('/tab1');\n        expect((locationHistory as any).locationHistory[1].pathname).toEqual('/tab1/details/1');\n        expect((locationHistory as any).locationHistory[2].pathname).toEqual('/tab1/details/3');\n      });","file":"LocationHistory.spec.ts","skipped":false,"dir":"packages/react/src/routing/__tests__"},{"name":"should correctly add an item to location history","suites":["Location History"],"updatePoint":{"line":9,"column":54},"line":9,"code":"  it('should correctly add an item to location history', () => {\n    locationHistory.add({ pathname: '/' });\n    expect(locationHistory.canGoBack(1)).toEqual(false);\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly replace an item to location history","suites":["Location History"],"updatePoint":{"line":14,"column":58},"line":14,"code":"  it('should correctly replace an item to location history', () => {\n    locationHistory.add({ pathname: '/home' });\n    locationHistory.add({ pathname: '/login', routerAction: 'replace' });\n\n    const current = locationHistory.last();\n    expect(current.pathname).toEqual('/login');\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly pop an item from location history","suites":["Location History"],"updatePoint":{"line":22,"column":56},"line":22,"code":"  it('should correctly pop an item from location history', () => {\n    locationHistory.add({ pathname: '/home' });\n    locationHistory.add({ pathname: '/login', routerAction: 'pop' });\n\n    const current = locationHistory.last();\n    expect(current.pathname).toEqual('/login');\n    expect(locationHistory.canGoBack(1)).toEqual(false);\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly wipe location history when routerDirection is root","suites":["Location History"],"updatePoint":{"line":31,"column":73},"line":31,"code":"  it('should correctly wipe location history when routerDirection is root', () => {\n    locationHistory.add({ pathname: '/home' });\n    locationHistory.add({ pathname: '/login' });\n    locationHistory.add({ pathname: '/logout', routerDirection: 'root' });\n\n    const current = locationHistory.last();\n    expect(current.pathname).toEqual('/logout');\n    expect(locationHistory.canGoBack(1)).toEqual(false);\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly update a route","suites":["Location History"],"updatePoint":{"line":41,"column":37},"line":41,"code":"  it('should correctly update a route', () => {\n    locationHistory.add({ id: '1', pathname: '/tabs/tab1', tab: 'tab1' });\n    locationHistory.add({ id: '2', pathname: '/tabs/tab2' });\n\n    const current = { ...locationHistory.last() };\n    current.tab = 'tab2';\n\n    locationHistory.update(current);\n\n    const getCurrentAgain = locationHistory.last();\n    expect(getCurrentAgain.tab).toEqual('tab2');\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly get the first route for a tab","suites":["Location History"],"updatePoint":{"line":54,"column":52},"line":54,"code":"  it('should correctly get the first route for a tab', () => {\n    locationHistory.add({ id: '1', pathname: '/tabs/tab1', tab: 'tab1' });\n    locationHistory.add({ id: '2', pathname: '/tabs/tab1/child', tab: 'tab1' });\n    locationHistory.add({ id: '2', pathname: '/tabs/tab1/child/1', tab: 'tab1' });\n\n    const first = locationHistory.getFirstRouteInfoForTab('tab1');\n    expect(first.pathname).toEqual('/tabs/tab1');\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly get the current route for a tab","suites":["Location History"],"updatePoint":{"line":63,"column":54},"line":63,"code":"  it('should correctly get the current route for a tab', () => {\n    locationHistory.add({ id: '1', pathname: '/tabs/tab1', tab: 'tab1' });\n    locationHistory.add({ id: '2', pathname: '/tabs/tab1/child', tab: 'tab1' });\n    locationHistory.add({ id: '2', pathname: '/tabs/tab1/child/1', tab: 'tab1' });\n\n    const first = locationHistory.getCurrentRouteInfoForTab('tab1');\n    expect(first.pathname).toEqual('/tabs/tab1/child/1');\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly get last route","suites":["Location History"],"updatePoint":{"line":72,"column":37},"line":72,"code":"  it('should correctly get last route', () => {\n    locationHistory.add({ pathname: '/home' });\n    locationHistory.add({ pathname: '/login' });\n\n    const current = locationHistory.last();\n    expect(current.pathname).toEqual('/login');\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should correctly determine if we can go back","suites":["Location History"],"updatePoint":{"line":80,"column":50},"line":80,"code":"  it('should correctly determine if we can go back', () => {\n    locationHistory.add({ pathname: '/home' });\n    locationHistory.add({ pathname: '/login' });\n\n    expect(locationHistory.canGoBack(1, 0, 1)).toEqual(true);\n    expect(locationHistory.canGoBack(2, 0, 1)).toEqual(false);\n  });","file":"locationHistory.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should create a view item","suites":["View Stacks"],"updatePoint":{"line":15,"column":31},"line":15,"code":"  it('should create a view item', () => {\n    const item = viewStacks.createViewItem(\n      '1',\n      () => {},\n      { path: '/mockMatchedRoute' },\n      { pathname: '/home' }\n    );\n\n    expect(item.outletId).toEqual('1');\n    expect(item.matchedRoute).toEqual({ path: '/mockMatchedRoute' });\n    expect(item.pathname).toEqual('/home');\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should add a view item","suites":["View Stacks"],"updatePoint":{"line":28,"column":28},"line":28,"code":"  it('should add a view item', () => {\n    const item = viewStacks.createViewItem(\n      '1',\n      () => {},\n      { path: '/mockMatchedRoute' },\n      { pathname: '/home' }\n    );\n\n    viewStacks.add(item);\n    const viewItem = viewStacks.findViewItemByRouteInfo({ pathname: '/home' }, '1');\n    expect(viewItem).toEqual(item);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should register an ion page","suites":["View Stacks"],"updatePoint":{"line":41,"column":33},"line":41,"code":"  it('should register an ion page', () => {\n    const item = viewStacks.createViewItem(\n      '1',\n      () => {},\n      { path: '/mockMatchedRoute' },\n      { pathname: '/home' }\n    );\n\n    viewStacks.add(item);\n\n    const ionPage = document.createElement('div');\n    ionPage.classList.add('ion-page');\n\n    viewStacks.registerIonPage(item, ionPage);\n\n    const viewItem = viewStacks.findViewItemByRouteInfo({ pathname: '/home' }, '1');\n    expect(viewItem.ionPageElement).toEqual(ionPage);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should get view item by route info","suites":["View Stacks"],"updatePoint":{"line":60,"column":40},"line":60,"code":"  it('should get view item by route info', () => {\n    const itemA = createRegisteredViewItem(viewStacks, '1', '/home');\n    const itemB = createRegisteredViewItem(viewStacks, '2', '/dashboard');\n\n    const getViewItem = viewStacks.findViewItemByRouteInfo({ pathname: '/dashboard', outletId: '2' });\n    expect(getViewItem.id).toEqual(itemB.id);\n\n    const getViewItemAgain = viewStacks.findViewItemByRouteInfo({ pathname: '/dashboard' });\n    expect(getViewItemAgain.id).toEqual(itemB.id);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should get leaving view by route info","suites":["View Stacks"],"updatePoint":{"line":71,"column":43},"line":71,"code":"  it('should get leaving view by route info', () => {\n    const itemA = createRegisteredViewItem(viewStacks, '1', '/home');\n    const itemB = createRegisteredViewItem(viewStacks, '2', '/dashboard');\n\n    const getLeavingView = viewStacks.findLeavingViewItemByRouteInfo({ pathname: '/home', lastPathname: '/dashboard', matchedRoute: { path: '/home' } });\n\n    expect(getLeavingView).toEqual(itemB);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should get children to render","suites":["View Stacks"],"updatePoint":{"line":80,"column":35},"line":80,"code":"  it('should get children to render', () => {\n    const itemA = createRegisteredViewItem(viewStacks);\n    const itemB = createRegisteredViewItem(viewStacks);\n    const itemC = createRegisteredViewItem(viewStacks);\n\n    itemA.mount = itemC.mount = true;\n\n    const routes = viewStacks.getChildrenToRender(1);\n    expect(routes).toEqual([\n      itemA,\n      itemC\n    ]);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should clear a stack","suites":["View Stacks"],"updatePoint":{"line":94,"column":26},"line":94,"code":"  it('should clear a stack', () => {\n    const itemA = createRegisteredViewItem(viewStacks, 2);\n    const itemB = createRegisteredViewItem(viewStacks, 2);\n\n    const viewItems = viewStacks.getViewStack(2);\n    expect(viewItems.length).toEqual(2);\n\n    viewStacks.clear('2');\n\n    const viewItemsAgain = viewStacks.getViewStack(2);\n    expect(viewItemsAgain).toEqual(undefined);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should unmount orphaned views","suites":["View Stacks"],"updatePoint":{"line":107,"column":35},"line":107,"code":"  it('should unmount orphaned views', () => {\n    const itemA = createRegisteredViewItem(viewStacks, 1, '/home/1', true);\n    const itemB = createRegisteredViewItem(viewStacks, 1, '/home/2', true);\n    const itemC = createRegisteredViewItem(viewStacks, 1, '/home/3', true);\n    const itemD = createRegisteredViewItem(viewStacks, 1, '/home/4', true);\n\n    viewStacks.unmountLeavingViews(1, itemA, -3);\n\n    expect(itemB.mount).toEqual(false);\n    expect(itemB.ionPageElement).toEqual(undefined);\n    expect(itemB.ionRoute).toEqual(false);\n\n    expect(itemC.mount).toEqual(false);\n    expect(itemC.ionPageElement).toEqual(undefined);\n    expect(itemC.ionRoute).toEqual(false);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"},{"name":"should remount intermediary views","suites":["View Stacks"],"updatePoint":{"line":124,"column":39},"line":124,"code":"  it('should remount intermediary views', () => {\n    const itemA = createRegisteredViewItem(viewStacks);\n    const itemB = createRegisteredViewItem(viewStacks);\n    const itemC = createRegisteredViewItem(viewStacks);\n    const itemD = createRegisteredViewItem(viewStacks);\n\n    viewStacks.mountIntermediaryViews(1, itemA, 3);\n\n    expect(itemB.mount).toEqual(true);\n    expect(itemC.mount).toEqual(true);\n  });","file":"viewStacks.spec.ts","skipped":false,"dir":"packages/vue-router/__tests__"}]}