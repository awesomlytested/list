{"repo":"rauchg/slackin","url":"https://github.com/rauchg/slackin","branch":"master","configs":[{"package":"slackin","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"returns success for a successful invite","suites":["slackin","POST /invite"],"updatePoint":{"line":27,"column":47,"index":769},"line":27,"code":"    it(\"returns success for a successful invite\", done => {\n      let opts = {\n        token: 'mytoken',\n        org: 'myorg'\n      };\n\n      // TODO simplify mocking\n      nock(`https://${opts.org}.slack.com`).post('/api/users.admin.invite').reply(200, {\n        ok: true\n      });\n      let app = slackin(opts);\n      request(app).post('/invite').send({\n        email: 'foo@example.com'\n      }).expect('Content-Type', /json/).expect(200, {\n        msg: 'WOOT. Check your email!'\n      }).end(done);\n    });","file":"index.js","skipped":false,"dir":"test"},{"name":"returns a failure for a failure message","suites":["slackin","POST /invite"],"updatePoint":{"line":44,"column":47,"index":1279},"line":44,"code":"    it(\"returns a failure for a failure message\", done => {\n      let opts = {\n        token: 'mytoken',\n        org: 'myorg'\n      };\n\n      // TODO simplify mocking\n      nock(`https://${opts.org}.slack.com`).post('/api/users.admin.invite').reply(200, {\n        ok: false,\n        error: \"other error\"\n      });\n      let app = slackin(opts);\n      request(app).post('/invite').send({\n        email: 'foo@example.com'\n      }).expect('Content-Type', /json/).expect(400, {\n        msg: \"other error\"\n      }).end(done);\n    });","file":"index.js","skipped":false,"dir":"test"},{"name":"returns the contents of the environment variable LETSENCRYPT_CHALLENGE","suites":["slackin","GET /.well-known/acme-challenge/:id"],"updatePoint":{"line":86,"column":78,"index":2534},"line":86,"code":"    it('returns the contents of the environment variable LETSENCRYPT_CHALLENGE', done => {\n      let opts = {\n        token: 'mytoken',\n        org: 'myorg'\n      };\n      let app = slackin(opts);\n      request(app).get('/.well-known/acme-challenge/deadbeef').expect(200, 'letsencrypt-challenge').end(done);\n    });","file":"index.js","skipped":false,"dir":"test"},{"name":"succeeds when ok","suites":["slack-invite",".invite()"],"updatePoint":{"line":15,"column":24,"index":363},"line":15,"code":"    it(\"succeeds when ok\", done => {\n      nock(`https://${opts.org}.slack.com`).post('/api/users.admin.invite').reply(200, {\n        ok: true\n      });\n      invite(opts, err => {\n        assert.equal(err, null);\n        done();\n      });\n    });","file":"slack-invite.js","skipped":false,"dir":"test"},{"name":"passes along an error message","suites":["slack-invite",".invite()"],"updatePoint":{"line":24,"column":37,"index":624},"line":24,"code":"    it(\"passes along an error message\", done => {\n      nock(`https://${opts.org}.slack.com`).post('/api/users.admin.invite').reply(200, {\n        ok: false,\n        error: \"other error\"\n      });\n      invite(opts, err => {\n        assert.notEqual(err, null);\n        assert.equal(err.message, \"other error\");\n        done();\n      });\n    });","file":"slack-invite.js","skipped":false,"dir":"test"}]}