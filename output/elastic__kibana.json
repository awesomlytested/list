{"repo":"elastic/kibana","url":"https://github.com/elastic/kibana","branch":"main","configs":[{"package":"kibana","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@elastic/safer-lodash-set","lang":"ts","dir":"packages/elastic-safer-lodash-set/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@kbn/tinymath","lang":"js","dir":"packages/kbn-tinymath/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"x-pack","lang":"js","dir":"x-pack/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apm-scripts","lang":"js","dir":"x-pack/plugins/apm/scripts/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"fleet","lang":"js","dir":"x-pack/plugins/fleet/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"osquery","lang":"js","dir":"x-pack/plugins/osquery/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"security_solution","lang":"js","dir":"x-pack/plugins/security_solution/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"only calls fn when previous call is complete, ignores when filter returns true","suites":[],"updatePoint":{"line":9,"column":82},"line":9,"code":"it('only calls fn when previous call is complete, ignores when filter returns true', async () => {\n  const orderOfEvents = [];\n\n  async function foo(arg) {\n    orderOfEvents.push(`called with ${arg}`);\n    await new Promise(resolve => setTimeout(resolve, arg));\n    orderOfEvents.push(`resolved with ${arg}`);\n  }\n\n  const serialized = preventParallelCalls(foo, arg => arg === 0);\n  await Promise.all([serialized(100), serialized(0), serialized(150), serialized(170), serialized(50)]);\n  expect(orderOfEvents).toMatchInlineSnapshot(`\nArray [\n  \"called with 100\",\n  \"called with 0\",\n  \"resolved with 0\",\n  \"resolved with 100\",\n  \"called with 150\",\n  \"resolved with 150\",\n  \"called with 170\",\n  \"resolved with 170\",\n  \"called with 50\",\n  \"resolved with 50\",\n]\n`);\n});","file":"functional/services/remote/prevent_parallel_calls.test.js","skipped":false,"dir":"test"},{"name":"numbers","suites":["Abs"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(abs(-10)).toEqual(10);\n    expect(abs(10)).toEqual(10);\n  });","file":"functions/abs.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Abs"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(abs([-1])).toEqual([1]);\n    expect(abs([-10, -20, -30, -40])).toEqual([10, 20, 30, 40]);\n    expect(abs([-13, 30, -90, 200])).toEqual([13, 30, 90, 200]);\n  });","file":"functions/abs.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Add"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(add(1)).toEqual(1);\n    expect(add(10, 2, 5, 8)).toEqual(25);\n    expect(add(0.1, 0.2, 0.4, 0.3)).toEqual(0.1 + 0.2 + 0.3 + 0.4);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Add"],"updatePoint":{"line":18,"column":22},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(add([10, 20, 30, 40], 10, 20, 30)).toEqual([70, 80, 90, 100]);\n    expect(add(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([43, 54, 65, 76]);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Add"],"updatePoint":{"line":22,"column":12},"line":22,"code":"  it('arrays', () => {\n    expect(add([1, 2, 3, 4])).toEqual(10);\n    expect(add([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([2, 4, 8, 14]);\n    expect(add([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([12, 24, 38, 54]);\n    expect(add([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12, 50, 63, 76]);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Add"],"updatePoint":{"line":28,"column":27},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => add([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cbrt"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(cbrt(27)).toEqual(3);\n    expect(cbrt(-1)).toEqual(-1);\n    expect(cbrt(94)).toEqual(4.546835943776344);\n  });","file":"functions/cbrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cbrt"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(cbrt([27, 64, 125])).toEqual([3, 4, 5]);\n    expect(cbrt([1, 8, 1000])).toEqual([1, 2, 10]);\n  });","file":"functions/cbrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Ceil"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(ceil(-10.5)).toEqual(-10);\n    expect(ceil(-10.1)).toEqual(-10);\n    expect(ceil(10.9)).toEqual(11);\n  });","file":"functions/ceil.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Ceil"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(ceil([-10.5, -20.9, -30.1, -40.2])).toEqual([-10, -20, -30, -40]);\n    expect(ceil([2.9, 5.1, 3.5, 4.3])).toEqual([3, 6, 4, 5]);\n  });","file":"functions/ceil.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Clamp"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(clamp(10, 5, 8)).toEqual(8);\n    expect(clamp(1, 2, 3)).toEqual(2);\n    expect(clamp(0.5, 0.2, 0.4)).toEqual(0.4);\n    expect(clamp(3.58, 0, 1)).toEqual(1);\n    expect(clamp(-0.48, 0, 1)).toEqual(0);\n    expect(clamp(1.38, -1, 0)).toEqual(0);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Clamp"],"updatePoint":{"line":21,"column":22},"line":21,"code":"  it('arrays & numbers', () => {\n    expect(clamp([10, 20, 30, 40], 15, 25)).toEqual([15, 20, 25, 25]);\n    expect(clamp(10, [15, 2, 4, 20], 25)).toEqual([15, 10, 10, 20]);\n    expect(clamp(5, 10, [20, 30, 40, 50])).toEqual([10, 10, 10, 10]);\n    expect(clamp(35, 10, [20, 30, 40, 50])).toEqual([20, 30, 35, 35]);\n    expect(clamp([1, 9], 3, [4, 5])).toEqual([3, 5]);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Clamp"],"updatePoint":{"line":28,"column":12},"line":28,"code":"  it('arrays', () => {\n    expect(clamp([6, 28, 32, 10], [11, 2, 5, 10], [20, 21, 22, 23])).toEqual([11, 21, 22, 10]);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"errors","suites":["Clamp"],"updatePoint":{"line":31,"column":12},"line":31,"code":"  it('errors', () => {\n    expect(() => clamp(1, 4, 3)).toThrow('Min must be less than max');\n    expect(() => clamp([1, 2], [3], 3)).toThrow('Array length mismatch');\n    expect(() => clamp([1, 2], [3], 3)).toThrow('Array length mismatch');\n    expect(() => clamp(10, 20, null)).toThrow(\"Missing maximum value. You may want to use the 'min' function instead\");\n    expect(() => clamp([10, 20, 30, 40], 15, null)).toThrow(\"Missing maximum value. You may want to use the 'min' function instead\");\n    expect(() => clamp(10, null, 30)).toThrow(\"Missing minimum value. You may want to use the 'max' function instead\");\n    expect(() => clamp([11, 28, 60, 10], null, [1, 48, 3, -17])).toThrow(\"Missing minimum value. You may want to use the 'max' function instead\");\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cosine"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(cos(0)).toEqual(1);\n    expect(cos(1.5707963267948966)).toEqual(6.123233995736766e-17);\n  });","file":"functions/cos.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cosine"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(cos([0, 1.5707963267948966])).toEqual([1, 6.123233995736766e-17]);\n  });","file":"functions/cos.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cube"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(cube(3)).toEqual(27);\n    expect(cube(-1)).toEqual(-1);\n  });","file":"functions/cube.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cube"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(cube([3, 4, 5])).toEqual([27, 64, 125]);\n    expect(cube([1, 2, 10])).toEqual([1, 8, 1000]);\n  });","file":"functions/cube.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Degrees to Radians"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(degtorad(0)).toEqual(0);\n    expect(degtorad(90)).toEqual(1.5707963267948966);\n  });","file":"functions/degtorad.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Degrees to Radians"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(degtorad([0, 90, 180, 360])).toEqual([0, 1.5707963267948966, 3.141592653589793, 6.283185307179586]);\n  });","file":"functions/degtorad.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Divide"],"updatePoint":{"line":13,"column":20},"line":13,"code":"  it('number, number', () => {\n    expect(divide(10, 2)).toEqual(5);\n    expect(divide(0.1, 0.02)).toEqual(0.1 / 0.02);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Divide"],"updatePoint":{"line":17,"column":19},"line":17,"code":"  it('array, number', () => {\n    expect(divide([10, 20, 30, 40], 10)).toEqual([1, 2, 3, 4]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Divide"],"updatePoint":{"line":20,"column":19},"line":20,"code":"  it('number, array', () => {\n    expect(divide(10, [1, 2, 5, 10])).toEqual([10, 5, 2, 1]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Divide"],"updatePoint":{"line":23,"column":18},"line":23,"code":"  it('array, array', () => {\n    expect(divide([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([11, 24, 20, 18]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Divide"],"updatePoint":{"line":26,"column":27},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => divide([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Exp"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(exp(3)).toEqual(Math.exp(3));\n    expect(exp(0)).toEqual(Math.exp(0));\n    expect(exp(5)).toEqual(Math.exp(5));\n  });","file":"functions/exp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Exp"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(exp([3, 4, 5])).toEqual([Math.exp(3), Math.exp(4), Math.exp(5)]);\n    expect(exp([1, 2, 10])).toEqual([Math.exp(1), Math.exp(2), Math.exp(10)]);\n    expect(exp([10])).toEqual([Math.exp(10)]);\n  });","file":"functions/exp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["First"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(first(-10)).toEqual(-10);\n    expect(first(10)).toEqual(10);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["First"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(first([])).toEqual(undefined);\n    expect(first([-1])).toEqual(-1);\n    expect(first([-10, -20, -30, -40])).toEqual(-10);\n    expect(first([-13, 30, -90, 200])).toEqual(-13);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["First"],"updatePoint":{"line":23,"column":29},"line":23,"code":"  it('skips number validation', () => {\n    expect(first).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Fix"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(fix(-10.5)).toEqual(-10);\n    expect(fix(-10.1)).toEqual(-10);\n    expect(fix(10.9)).toEqual(10);\n  });","file":"functions/fix.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Fix"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(fix([-10.5, -20.9, -30.1, -40.2])).toEqual([-10, -20, -30, -40]);\n    expect(fix([2.9, 5.1, 3.5, 4.3])).toEqual([2, 5, 3, 4]);\n  });","file":"functions/fix.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Floor"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(floor(-10.5)).toEqual(-11);\n    expect(floor(-10.1)).toEqual(-11);\n    expect(floor(10.9)).toEqual(10);\n  });","file":"functions/floor.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Floor"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(floor([-10.5, -20.9, -30.1, -40.2])).toEqual([-11, -21, -31, -41]);\n    expect(floor([2.9, 5.1, 3.5, 4.3])).toEqual([2, 5, 3, 4]);\n  });","file":"functions/floor.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Last"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(last(-10)).toEqual(-10);\n    expect(last(10)).toEqual(10);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Last"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(last([])).toEqual(undefined);\n    expect(last([-1])).toEqual(-1);\n    expect(last([-10, -20, -30, -40])).toEqual(-40);\n    expect(last([-13, 30, -90, 200])).toEqual(200);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Last"],"updatePoint":{"line":23,"column":29},"line":23,"code":"  it('skips number validation', () => {\n    expect(last).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Log"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(log(1)).toEqual(Math.log(1));\n    expect(log(3, 2)).toEqual(Math.log(3) / Math.log(2));\n    expect(log(11, 3)).toEqual(Math.log(11) / Math.log(3));\n    expect(log(42, 5)).toEqual(2.322344707681546);\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Log"],"updatePoint":{"line":19,"column":12},"line":19,"code":"  it('arrays', () => {\n    expect(log([3, 4, 5], 3)).toEqual([Math.log(3) / Math.log(3), Math.log(4) / Math.log(3), Math.log(5) / Math.log(3)]);\n    expect(log([1, 2, 10], 10)).toEqual([Math.log(1) / Math.log(10), Math.log(2) / Math.log(10), Math.log(10) / Math.log(10)]);\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number less than 1","suites":["Log"],"updatePoint":{"line":23,"column":24},"line":23,"code":"  it('number less than 1', () => {\n    expect(() => log(-1)).toThrow('Must be greater than 0');\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"base out of range","suites":["Log"],"updatePoint":{"line":26,"column":23},"line":26,"code":"  it('base out of range', () => {\n    expect(() => log(1, -1)).toThrow('Base out of range');\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Log10"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(log10(1)).toEqual(Math.log(1) / Math.log(10));\n    expect(log10(3)).toEqual(Math.log(3) / Math.log(10));\n    expect(log10(11)).toEqual(Math.log(11) / Math.log(10));\n    expect(log10(80)).toEqual(1.9030899869919433);\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Log10"],"updatePoint":{"line":19,"column":12},"line":19,"code":"  it('arrays', () => {\n    expect(log10([3, 4, 5], 3)).toEqual([Math.log(3) / Math.log(10), Math.log(4) / Math.log(10), Math.log(5) / Math.log(10)]);\n    expect(log10([1, 2, 10], 10)).toEqual([Math.log(1) / Math.log(10), Math.log(2) / Math.log(10), Math.log(10) / Math.log(10)]);\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number less than 1","suites":["Log10"],"updatePoint":{"line":23,"column":24},"line":23,"code":"  it('number less than 1', () => {\n    expect(() => log10(-1)).toThrow('Must be greater than 0');\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Max"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(max(1)).toEqual(1);\n    expect(max(10, 2, 5, 8)).toEqual(10);\n    expect(max(0.1, 0.2, 0.4, 0.3)).toEqual(0.4);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Max"],"updatePoint":{"line":18,"column":22},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(max([88, 20, 30, 40], 60, [30, 10, 70, 90])).toEqual([88, 60, 70, 90]);\n    expect(max(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([22, 22, 30, 40]);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Max"],"updatePoint":{"line":22,"column":12},"line":22,"code":"  it('arrays', () => {\n    expect(max([1, 2, 3, 4])).toEqual(4);\n    expect(max([6, 2, 3, 10], [11, 2, 5, 10])).toEqual([11, 2, 5, 10]);\n    expect(max([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([72, 55, 48, 40]);\n    expect(max([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([11, 48, 60, 10]);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Max"],"updatePoint":{"line":28,"column":27},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => max([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Mean"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(mean(1)).toEqual(1);\n    expect(mean(10, 2, 5, 8)).toEqual(25 / 4);\n    expect(mean(0.1, 0.2, 0.4, 0.3)).toEqual((0.1 + 0.2 + 0.3 + 0.4) / 4);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Mean"],"updatePoint":{"line":18,"column":22},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(mean([10, 20, 30, 40], 10, 20, 30)).toEqual([70 / 4, 80 / 4, 90 / 4, 100 / 4]);\n    expect(mean(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([43 / 4, 54 / 4, 65 / 4, 76 / 4]);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Mean"],"updatePoint":{"line":22,"column":12},"line":22,"code":"  it('arrays', () => {\n    expect(mean([1, 2, 3, 4])).toEqual(10 / 4);\n    expect(mean([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([2 / 2, 4 / 2, 8 / 2, 14 / 2]);\n    expect(mean([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([12 / 3, 24 / 3, 38 / 3, 54 / 3]);\n    expect(mean([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12 / 2, 50 / 2, 63 / 2, 76 / 2]);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mean"],"updatePoint":{"line":28,"column":27},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => mean([1, 2], [3])).toThrow();\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Median"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(median(1)).toEqual(1);\n    expect(median(10, 2, 5, 8)).toEqual((8 + 5) / 2);\n    expect(median(0.1, 0.2, 0.4, 0.3)).toEqual((0.2 + 0.3) / 2);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Median"],"updatePoint":{"line":18,"column":22},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(median([10, 20, 30, 40], 10, 20, 30)).toEqual([15, 20, 25, 25]);\n    expect(median(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([10, 15, 16, 16]);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Median"],"updatePoint":{"line":22,"column":12},"line":22,"code":"  it('arrays', () => {\n    expect(median([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([1, 2, 4, 7]);\n    expect(median([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([1, 2, 5, 10]);\n    expect(median([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12 / 2, 50 / 2, 63 / 2, 76 / 2]);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Median"],"updatePoint":{"line":27,"column":27},"line":27,"code":"  it('array length mismatch', () => {\n    expect(() => median([1, 2], [3])).toThrow();\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Min"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(min(1)).toEqual(1);\n    expect(min(10, 2, 5, 8)).toEqual(2);\n    expect(min(0.1, 0.2, 0.4, 0.3)).toEqual(0.1);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Min"],"updatePoint":{"line":18,"column":22},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(min([88, 20, 30, 100], 60, [30, 10, 70, 90])).toEqual([30, 10, 30, 60]);\n    expect(min([50, 20, 3, 40], 10, [13, 2, 34, 4], 22)).toEqual([10, 2, 3, 4]);\n    expect(min(10, [50, 20, 3, 40], [13, 2, 34, 4], 22)).toEqual([10, 2, 3, 4]);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Min"],"updatePoint":{"line":23,"column":12},"line":23,"code":"  it('arrays', () => {\n    expect(min([1, 2, 3, 4])).toEqual(1);\n    expect(min([6, 2, 30, 10], [11, 2, 5, 15])).toEqual([6, 2, 5, 10]);\n    expect(min([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([10, 20, 9, 4]);\n    expect(min([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([1, 28, 3, -17]);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Min"],"updatePoint":{"line":29,"column":27},"line":29,"code":"  it('array length mismatch', () => {\n    expect(() => min([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Mod"],"updatePoint":{"line":13,"column":20},"line":13,"code":"  it('number, number', () => {\n    expect(mod(13, 8)).toEqual(5);\n    expect(mod(0.1, 0.02)).toEqual(0.1 % 0.02);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Mod"],"updatePoint":{"line":17,"column":19},"line":17,"code":"  it('array, number', () => {\n    expect(mod([13, 26, 34, 42], 10)).toEqual([3, 6, 4, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Mod"],"updatePoint":{"line":20,"column":19},"line":20,"code":"  it('number, array', () => {\n    expect(mod(10, [3, 7, 2, 4])).toEqual([1, 3, 0, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Mod"],"updatePoint":{"line":23,"column":18},"line":23,"code":"  it('array, array', () => {\n    expect(mod([11, 48, 60, 72], [4, 13, 9, 5])).toEqual([3, 9, 6, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mod"],"updatePoint":{"line":26,"column":27},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => mod([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Mode"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(mode(1)).toEqual(1);\n    expect(mode(10, 2, 5, 8)).toEqual([2, 5, 8, 10]);\n    expect(mode(0.1, 0.2, 0.4, 0.3)).toEqual([0.1, 0.2, 0.3, 0.4]);\n    expect(mode(1, 1, 2, 3, 1, 4, 3, 2, 4)).toEqual([1]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Mode"],"updatePoint":{"line":19,"column":22},"line":19,"code":"  it('arrays & numbers', () => {\n    expect(mode([10, 20, 30, 40], 10, 20, 30)).toEqual([[10], [20], [30], [10, 20, 30, 40]]);\n    expect(mode([1, 2, 3, 4], 2, 3, [3, 2, 4, 3])).toEqual([[3], [2], [3], [3]]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Mode"],"updatePoint":{"line":23,"column":12},"line":23,"code":"  it('arrays', () => {\n    expect(mode([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([[1], [2], [3, 5], [4, 10]]);\n    expect(mode([1, 2, 3, 4], [1, 2, 1, 2], [2, 3, 2, 3], [4, 3, 2, 3])).toEqual([[1], [2, 3], [2], [3]]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mode"],"updatePoint":{"line":27,"column":27},"line":27,"code":"  it('array length mismatch', () => {\n    expect(() => mode([1, 2], [3])).toThrow();\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Multiply"],"updatePoint":{"line":13,"column":20},"line":13,"code":"  it('number, number', () => {\n    expect(multiply(10, 2)).toEqual(20);\n    expect(multiply(0.1, 0.2)).toEqual(0.1 * 0.2);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Multiply"],"updatePoint":{"line":17,"column":19},"line":17,"code":"  it('array, number', () => {\n    expect(multiply([10, 20, 30, 40], 10)).toEqual([100, 200, 300, 400]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Multiply"],"updatePoint":{"line":20,"column":19},"line":20,"code":"  it('number, array', () => {\n    expect(multiply(10, [1, 2, 5, 10])).toEqual([10, 20, 50, 100]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Multiply"],"updatePoint":{"line":23,"column":18},"line":23,"code":"  it('array, array', () => {\n    expect(multiply([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([11, 96, 180, 288]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Multiply"],"updatePoint":{"line":26,"column":27},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => multiply([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"constant","suites":["PI"],"updatePoint":{"line":13,"column":14},"line":13,"code":"  it('constant', () => {\n    expect(pi()).toEqual(Math.PI);\n  });","file":"functions/pi.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Pow"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(pow(3, 2)).toEqual(9);\n    expect(pow(-1, -1)).toEqual(-1);\n    expect(pow(5, 0)).toEqual(1);\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Pow"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(pow([3, 4, 5], 3)).toEqual([Math.pow(3, 3), Math.pow(4, 3), Math.pow(5, 3)]);\n    expect(pow([1, 2, 10], 10)).toEqual([Math.pow(1, 10), Math.pow(2, 10), Math.pow(10, 10)]);\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing exponent","suites":["Pow"],"updatePoint":{"line":22,"column":22},"line":22,"code":"  it('missing exponent', () => {\n    expect(() => pow(1)).toThrow('Missing exponent');\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Radians to Degrees"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(radtodeg(0)).toEqual(0);\n    expect(radtodeg(1.5707963267948966)).toEqual(90);\n  });","file":"functions/radtodeg.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Radians to Degrees"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(radtodeg([0, 1.5707963267948966, 3.141592653589793, 6.283185307179586])).toEqual([0, 90, 180, 360]);\n  });","file":"functions/radtodeg.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Random"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    const random1 = random();\n    expect(random1).toBeGreaterThanOrEqual(0);\n    expect(random1).toBeLessThan(1);\n    expect(random(0)).toEqual(0);\n    const random3 = random(3);\n    expect(random3).toBeGreaterThanOrEqual(0);\n    expect(random3).toBeLessThan(3);\n    const random100 = random(-100, 100);\n    expect(random100).toBeGreaterThanOrEqual(-100);\n    expect(random100).toBeLessThan(100);\n    expect(random(1, 1)).toEqual(1);\n    expect(random(100, 100)).toEqual(100);\n  });","file":"functions/random.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"min greater than max","suites":["Random"],"updatePoint":{"line":27,"column":26},"line":27,"code":"  it('min greater than max', () => {\n    expect(() => random(-1)).toThrow('Min is greater than max');\n    expect(() => random(3, 1)).toThrow('Min is greater than max');\n  });","file":"functions/random.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Range"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(range(1)).toEqual(0);\n    expect(range(10, 2, 5, 8)).toEqual(8);\n    expect(range(0.1, 0.2, 0.4, 0.3)).toEqual(0.4 - 0.1);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Range"],"updatePoint":{"line":18,"column":22},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(range([88, 20, 30, 40], 60, [30, 10, 70, 90])).toEqual([58, 50, 40, 50]);\n    expect(range(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([21, 20, 27, 36]);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Range"],"updatePoint":{"line":22,"column":12},"line":22,"code":"  it('arrays', () => {\n    expect(range([1, 2, 3, 4])).toEqual(3);\n    expect(range([6, 2, 3, 10], [11, 2, 5, 10])).toEqual([5, 0, 2, 0]);\n    expect(range([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([62, 35, 39, 36]);\n    expect(range([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([10, 20, 57, 27]);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Range"],"updatePoint":{"line":28,"column":27},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => range([1, 2], [3])).toThrow();\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Round"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(round(-10.51)).toEqual(-11);\n    expect(round(-10.1, 2)).toEqual(-10.1);\n    expect(round(10.93745987, 4)).toEqual(10.9375);\n  });","file":"functions/round.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Round"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(round([-10.51, -20.9, -30.1, -40.2])).toEqual([-11, -21, -30, -40]);\n    expect(round([2.9234, 5.1234, 3.5234, 4.49234324], 2)).toEqual([2.92, 5.12, 3.52, 4.49]);\n  });","file":"functions/round.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sine"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(sin(0)).toEqual(0);\n    expect(sin(1.5707963267948966)).toEqual(1);\n  });","file":"functions/sin.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sine"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(sin([0, 1.5707963267948966])).toEqual([0, 1]);\n  });","file":"functions/sin.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array","suites":["Size (also Count)"],"updatePoint":{"line":13,"column":11},"line":13,"code":"  it('array', () => {\n    expect(size([])).toEqual(0);\n    expect(size([10, 20, 30, 40])).toEqual(4);\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"not an array","suites":["Size (also Count)"],"updatePoint":{"line":17,"column":18},"line":17,"code":"  it('not an array', () => {\n    expect(() => size(null)).toThrow('Must pass an array');\n    expect(() => size(undefined)).toThrow('Must pass an array');\n    expect(() => size('string')).toThrow('Must pass an array');\n    expect(() => size(10)).toThrow('Must pass an array');\n    expect(() => size(true)).toThrow('Must pass an array');\n    expect(() => size({})).toThrow('Must pass an array');\n    expect(() => size(function () {})).toThrow('Must pass an array');\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Size (also Count)"],"updatePoint":{"line":26,"column":29},"line":26,"code":"  it('skips number validation', () => {\n    expect(size).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sqrt"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(sqrt(9)).toEqual(3);\n    expect(sqrt(0)).toEqual(0);\n    expect(sqrt(30)).toEqual(5.477225575051661);\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sqrt"],"updatePoint":{"line":18,"column":12},"line":18,"code":"  it('arrays', () => {\n    expect(sqrt([49, 64, 81])).toEqual([7, 8, 9]);\n    expect(sqrt([1, 4, 100])).toEqual([1, 2, 10]);\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Invalid negative number","suites":["Sqrt"],"updatePoint":{"line":22,"column":29},"line":22,"code":"  it('Invalid negative number', () => {\n    expect(() => sqrt(-1)).toThrow('Unable find the square root of a negative number');\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Square"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(square(3)).toEqual(9);\n    expect(square(-1)).toEqual(1);\n  });","file":"functions/square.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Square"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(square([3, 4, 5])).toEqual([9, 16, 25]);\n    expect(square([1, 2, 10])).toEqual([1, 4, 100]);\n  });","file":"functions/square.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Subtract"],"updatePoint":{"line":13,"column":20},"line":13,"code":"  it('number, number', () => {\n    expect(subtract(10, 2)).toEqual(8);\n    expect(subtract(0.1, 0.2)).toEqual(0.1 - 0.2);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Subtract"],"updatePoint":{"line":17,"column":19},"line":17,"code":"  it('array, number', () => {\n    expect(subtract([10, 20, 30, 40], 10)).toEqual([0, 10, 20, 30]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Subtract"],"updatePoint":{"line":20,"column":19},"line":20,"code":"  it('number, array', () => {\n    expect(subtract(10, [1, 2, 5, 10])).toEqual([9, 8, 5, 0]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Subtract"],"updatePoint":{"line":23,"column":18},"line":23,"code":"  it('array, array', () => {\n    expect(subtract([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([10, 46, 57, 68]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Subtract"],"updatePoint":{"line":26,"column":27},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => subtract([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sum"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(sum(10, 2, 5, 8)).toEqual(25);\n    expect(sum(0.1, 0.2, 0.4, 0.3)).toEqual(0.1 + 0.2 + 0.3 + 0.4);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Sum"],"updatePoint":{"line":17,"column":22},"line":17,"code":"  it('arrays & numbers', () => {\n    expect(sum([10, 20, 30, 40], 10, 20, 30)).toEqual(160);\n    expect(sum([10, 20, 30, 40], 10, [1, 2, 3], 22)).toEqual(138);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sum"],"updatePoint":{"line":21,"column":12},"line":21,"code":"  it('arrays', () => {\n    expect(sum([1, 2, 3, 4], [1, 2, 5, 10])).toEqual(28);\n    expect(sum([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual(128);\n    expect(sum([11, 48, 60, 72], [1, 2, 3, 4])).toEqual(201);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Tangent"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(tan(0)).toEqual(0);\n    expect(tan(1)).toEqual(1.5574077246549023);\n  });","file":"functions/tan.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Tangent"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(tan([0, 1])).toEqual([0, 1.5574077246549023]);\n  });","file":"functions/tan.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"2D arrays","suites":["transpose"],"updatePoint":{"line":13,"column":15},"line":13,"code":"  it('2D arrays', () => {\n    expect(transpose([[1, 2], [3, 4], [5, 6]], 0)).toEqual([[1, 3, 5], [2, 4, 6]]);\n    expect(transpose([10, 20, [10, 20, 30, 40], 30], 2)).toEqual([[10, 20, 10, 30], [10, 20, 20, 30], [10, 20, 30, 30], [10, 20, 40, 30]]);\n    expect(transpose([4, [1, 9], [3, 5]], 1)).toEqual([[4, 1, 3], [4, 9, 5]]);\n  });","file":"functions/transpose.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["transpose"],"updatePoint":{"line":18,"column":27},"line":18,"code":"  it('array length mismatch', () => {\n    expect(() => transpose([[1], [2, 3]], 0)).toThrow('Array length mismatch');\n  });","file":"functions/transpose.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Unique"],"updatePoint":{"line":13,"column":13},"line":13,"code":"  it('numbers', () => {\n    expect(unique(1)).toEqual(1);\n    expect(unique(10000)).toEqual(1);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Unique"],"updatePoint":{"line":17,"column":12},"line":17,"code":"  it('arrays', () => {\n    expect(unique([])).toEqual(0);\n    expect(unique([-10, -20, -30, -40])).toEqual(4);\n    expect(unique([-13, 30, -90, 200])).toEqual(4);\n    expect(unique([1, 2, 3, 4, 2, 2, 2, 3, 4, 2, 4, 5, 2, 1, 4, 2])).toEqual(5);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Unique"],"updatePoint":{"line":23,"column":29},"line":23,"code":"  it('skips number validation', () => {\n    expect(unique).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"integers","suites":["Parser","Numbers"],"updatePoint":{"line":40,"column":16},"line":40,"code":"    it('integers', () => {\n      expect(parse('10')).toEqual(10);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"floats","suites":["Parser","Numbers"],"updatePoint":{"line":43,"column":14},"line":43,"code":"    it('floats', () => {\n      expect(parse('10.5')).toEqual(10.5);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"negatives","suites":["Parser","Numbers"],"updatePoint":{"line":46,"column":17},"line":46,"code":"    it('negatives', () => {\n      expect(parse('-10')).toEqual(-10);\n      expect(parse('-10.5')).toEqual(-10.5);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"converts basic symbols into left-to-right pairs","suites":["Parser","Math"],"updatePoint":{"line":52,"column":55},"line":52,"code":"    it('converts basic symbols into left-to-right pairs', () => {\n      expect(parse('a + b + c - d')).toEqual({\n        args: [{\n          name: 'add',\n          type: 'function',\n          args: [{\n            name: 'add',\n            type: 'function',\n            args: [expect.objectContaining({\n              location: {\n                min: 0,\n                max: 2\n              }\n            }), expect.objectContaining({\n              location: {\n                min: 3,\n                max: 6\n              }\n            })]\n          }, expect.objectContaining({\n            location: {\n              min: 7,\n              max: 10\n            }\n          })]\n        }, expect.objectContaining({\n          location: {\n            min: 11,\n            max: 13\n          }\n        })],\n        name: 'subtract',\n        type: 'function',\n        text: 'a + b + c - d',\n        location: {\n          min: 0,\n          max: 13\n        }\n      });\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings","suites":["Parser","Variables"],"updatePoint":{"line":94,"column":15},"line":94,"code":"    it('strings', () => {\n      expect(parse('f')).toEqual(variableEqual('f'));\n      expect(parse('foo')).toEqual(variableEqual('foo'));\n      expect(parse('foo1')).toEqual(variableEqual('foo1'));\n      expect(() => parse('1foo1')).toThrow('but \"f\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with spaces","suites":["Parser","Variables"],"updatePoint":{"line":100,"column":27},"line":100,"code":"    it('strings with spaces', () => {\n      expect(parse(' foo ')).toEqual(variableEqual('foo'));\n      expect(() => parse(' foo bar ')).toThrow('but \"b\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"allowed characters","suites":["Parser","Variables"],"updatePoint":{"line":104,"column":26},"line":104,"code":"    it('allowed characters', () => {\n      expect(parse('_foo')).toEqual(variableEqual('_foo'));\n      expect(parse('@foo')).toEqual(variableEqual('@foo'));\n      expect(parse('.foo')).toEqual(variableEqual('.foo'));\n      expect(parse('-foo')).toEqual(variableEqual('-foo'));\n      expect(parse('_foo0')).toEqual(variableEqual('_foo0'));\n      expect(parse('@foo0')).toEqual(variableEqual('@foo0'));\n      expect(parse('.foo0')).toEqual(variableEqual('.foo0'));\n      expect(parse('-foo0')).toEqual(variableEqual('-foo0'));\n      expect(() => parse(`foo😀\\t')`)).toThrow('Failed to parse');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with double quotes","suites":["Parser","quoted variables"],"updatePoint":{"line":117,"column":34},"line":117,"code":"    it('strings with double quotes', () => {\n      expect(parse('\"foo\"')).toEqual(variableEqual('foo'));\n      expect(parse('\"f b\"')).toEqual(variableEqual('f b'));\n      expect(parse('\"foo bar\"')).toEqual(variableEqual('foo bar'));\n      expect(parse('\"foo bar fizz buzz\"')).toEqual(variableEqual('foo bar fizz buzz'));\n      expect(parse('\"foo   bar   baby\"')).toEqual(variableEqual('foo   bar   baby'));\n      expect(parse(`\"f'oo\"`)).toEqual(variableEqual(`f'oo`));\n      expect(parse(`\"foo😀\\t\"`)).toEqual(variableEqual(`foo😀\\t`));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with single quotes","suites":["Parser","quoted variables"],"updatePoint":{"line":126,"column":34},"line":126,"code":"    it('strings with single quotes', () => {\n      /* eslint-disable prettier/prettier */\n      expect(parse(\"'foo'\")).toEqual(variableEqual('foo'));\n      expect(parse(\"'f b'\")).toEqual(variableEqual('f b'));\n      expect(parse(\"'foo bar'\")).toEqual(variableEqual('foo bar'));\n      expect(parse(\"'foo bar fizz buzz'\")).toEqual(variableEqual('foo bar fizz buzz'));\n      expect(parse(\"'foo   bar   baby'\")).toEqual(variableEqual('foo   bar   baby'));\n      expect(parse(\"' foo bar'\")).toEqual(variableEqual(\" foo bar\"));\n      expect(parse(\"'foo bar '\")).toEqual(variableEqual(\"foo bar \"));\n      expect(parse(\"'0foo'\")).toEqual(variableEqual(\"0foo\"));\n      expect(parse(\"' foo bar'\")).toEqual(variableEqual(\" foo bar\"));\n      expect(parse(\"'foo bar '\")).toEqual(variableEqual(\"foo bar \"));\n      expect(parse(\"'0foo'\")).toEqual(variableEqual(\"0foo\"));\n      expect(parse(`'f\"oo'`)).toEqual(variableEqual(`f\"oo`));\n      expect(parse(`'foo😀\\t'`)).toEqual(variableEqual(`foo😀\\t`));\n      /* eslint-enable prettier/prettier */\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"allowed characters","suites":["Parser","quoted variables"],"updatePoint":{"line":143,"column":26},"line":143,"code":"    it('allowed characters', () => {\n      expect(parse('\"_foo bar\"')).toEqual(variableEqual('_foo bar'));\n      expect(parse('\"@foo bar\"')).toEqual(variableEqual('@foo bar'));\n      expect(parse('\".foo bar\"')).toEqual(variableEqual('.foo bar'));\n      expect(parse('\"-foo bar\"')).toEqual(variableEqual('-foo bar'));\n      expect(parse('\"_foo0 bar1\"')).toEqual(variableEqual('_foo0 bar1'));\n      expect(parse('\"@foo0 bar1\"')).toEqual(variableEqual('@foo0 bar1'));\n      expect(parse('\".foo0 bar1\"')).toEqual(variableEqual('.foo0 bar1'));\n      expect(parse('\"-foo0 bar1\"')).toEqual(variableEqual('-foo0 bar1'));\n      expect(parse('\" foo bar\"')).toEqual(variableEqual(' foo bar'));\n      expect(parse('\"foo bar \"')).toEqual(variableEqual('foo bar '));\n      expect(parse('\"0foo\"')).toEqual(variableEqual('0foo'));\n      expect(parse('\" foo bar\"')).toEqual(variableEqual(' foo bar'));\n      expect(parse('\"foo bar \"')).toEqual(variableEqual('foo bar '));\n      expect(parse('\"0foo\"')).toEqual(variableEqual('0foo'));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"no arguments","suites":["Parser","Functions"],"updatePoint":{"line":161,"column":20},"line":161,"code":"    it('no arguments', () => {\n      expect(parse('foo()')).toEqual(functionEqual('foo', []));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arguments","suites":["Parser","Functions"],"updatePoint":{"line":164,"column":17},"line":164,"code":"    it('arguments', () => {\n      expect(parse('foo(5,10)')).toEqual(functionEqual('foo', [5, 10]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arguments with strings","suites":["Parser","Functions"],"updatePoint":{"line":167,"column":30},"line":167,"code":"    it('arguments with strings', () => {\n      expect(parse('foo(\"string with spaces\")')).toEqual(functionEqual('foo', [variableEqual('string with spaces')]));\n      expect(parse(\"foo('string with spaces')\")).toEqual(functionEqual('foo', [variableEqual('string with spaces')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named only","suites":["Parser","Functions"],"updatePoint":{"line":171,"column":18},"line":171,"code":"    it('named only', () => {\n      expect(parse('foo(q=10)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 10)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named argument is numeric","suites":["Parser","Functions"],"updatePoint":{"line":174,"column":33},"line":174,"code":"    it('named argument is numeric', () => {\n      expect(parse('foo(q=10.1234e5)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 10.1234e5)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named argument is empty string","suites":["Parser","Functions"],"updatePoint":{"line":177,"column":38},"line":177,"code":"    it('named argument is empty string', () => {\n      expect(parse('foo(q=\"\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q', '')]));\n      expect(parse(`foo(q='')`)).toEqual(functionEqual('foo', [namedArgumentEqual('q', '')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named and positional","suites":["Parser","Functions"],"updatePoint":{"line":181,"column":28},"line":181,"code":"    it('named and positional', () => {\n      expect(parse('foo(ref, q=\"bar\")')).toEqual(functionEqual('foo', [variableEqual('ref'), namedArgumentEqual('q', 'bar')]));\n      expect(parse(`foo(ref, q='ba\"r')`)).toEqual(functionEqual('foo', [variableEqual('ref'), namedArgumentEqual('q', `ba\"r`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numerically named","suites":["Parser","Functions"],"updatePoint":{"line":185,"column":25},"line":185,"code":"    it('numerically named', () => {\n      expect(() => parse('foo(1=2)')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"multiple named","suites":["Parser","Functions"],"updatePoint":{"line":188,"column":22},"line":188,"code":"    it('multiple named', () => {\n      expect(parse('foo(q_param=\"bar\", offset=\"1d\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q_param', 'bar'), namedArgumentEqual('offset', '1d')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"multiple named and positional","suites":["Parser","Functions"],"updatePoint":{"line":191,"column":37},"line":191,"code":"    it('multiple named and positional', () => {\n      expect(parse('foo(q=\"bar\", ref, offset=\"1d\", 100)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 'bar'), variableEqual('ref'), namedArgumentEqual('offset', '1d'), 100]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"duplicate named","suites":["Parser","Functions"],"updatePoint":{"line":194,"column":23},"line":194,"code":"    it('duplicate named', () => {\n      expect(parse('foo(q=\"bar\", q=\"test\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 'bar'), namedArgumentEqual('q', 'test')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"incomplete named","suites":["Parser","Functions"],"updatePoint":{"line":197,"column":24},"line":197,"code":"    it('incomplete named', () => {\n      expect(() => parse('foo(a=)')).toThrow('but \"(\" found');\n      expect(() => parse('foo(=a)')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"invalid named","suites":["Parser","Functions"],"updatePoint":{"line":201,"column":21},"line":201,"code":"    it('invalid named', () => {\n      expect(() => parse('foo(offset-type=\"1d\")')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named with complex strings","suites":["Parser","Functions"],"updatePoint":{"line":204,"column":34},"line":204,"code":"    it('named with complex strings', () => {\n      expect(parse(`foo(filter='😀 > \"\\ttab\"')`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `😀 > \"\\ttab\"`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named with escape characters","suites":["Parser","Functions"],"updatePoint":{"line":207,"column":36},"line":207,"code":"    it('named with escape characters', () => {\n      expect(parse(`foo(filter='Women\\\\'s Clothing')`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `Women's Clothing`)]));\n      expect(parse(`foo(filter=\"\\\\\"Quoted inner string\\\\\"\")`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `\"Quoted inner string\"`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Missing expression","suites":["Parser","Functions"],"updatePoint":{"line":212,"column":24},"line":212,"code":"  it('Missing expression', () => {\n    expect(() => parse(undefined)).toThrow('Missing expression');\n    expect(() => parse(null)).toThrow('Missing expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Failed parse","suites":["Parser","Functions"],"updatePoint":{"line":216,"column":18},"line":216,"code":"  it('Failed parse', () => {\n    expect(() => parse('')).toThrow('Failed to parse expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Not a string","suites":["Parser","Functions"],"updatePoint":{"line":219,"column":18},"line":219,"code":"  it('Not a string', () => {\n    expect(() => parse(3)).toThrow('Expression must be a string');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Evaluate"],"updatePoint":{"line":224,"column":13},"line":224,"code":"  it('numbers', () => {\n    expect(evaluate('10')).toEqual(10);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables","suites":["Evaluate"],"updatePoint":{"line":227,"column":15},"line":227,"code":"  it('variables', () => {\n    expect(evaluate('foo', {\n      foo: 10\n    })).toEqual(10);\n    expect(evaluate('bar', {\n      bar: [1, 2]\n    })).toEqual([1, 2]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with spaces","suites":["Evaluate"],"updatePoint":{"line":235,"column":27},"line":235,"code":"  it('variables with spaces', () => {\n    expect(evaluate('\"foo bar\"', {\n      'foo bar': 10\n    })).toEqual(10);\n    expect(evaluate('\"key with many spaces in it\"', {\n      'key with many spaces in it': 10\n    })).toEqual(10);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with dots","suites":["Evaluate"],"updatePoint":{"line":243,"column":25},"line":243,"code":"  it('variables with dots', () => {\n    expect(evaluate('foo.bar', {\n      'foo.bar': 20\n    })).toEqual(20);\n    expect(evaluate('\"is.null\"', {\n      'is.null': null\n    })).toEqual(null);\n    expect(evaluate('\"is.false\"', {\n      'is.null': null,\n      'is.false': false\n    })).toEqual(false);\n    expect(evaluate('\"with space.val\"', {\n      'with space.val': 42\n    })).toEqual(42);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with dot notation","suites":["Evaluate"],"updatePoint":{"line":258,"column":33},"line":258,"code":"  it('variables with dot notation', () => {\n    expect(evaluate('foo.bar', {\n      foo: {\n        bar: 20\n      }\n    })).toEqual(20);\n    expect(evaluate('foo.bar[0].baz', {\n      foo: {\n        bar: [{\n          baz: 30\n        }, {\n          beer: 40\n        }]\n      }\n    })).toEqual(30);\n    expect(evaluate('\"is.false\"', {\n      is: {\n        null: null,\n        false: false\n      }\n    })).toEqual(false);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations","suites":["Evaluate"],"updatePoint":{"line":280,"column":15},"line":280,"code":"  it('equations', () => {\n    expect(evaluate('3 + 4')).toEqual(7);\n    expect(evaluate('10 - 2')).toEqual(8);\n    expect(evaluate('8 + 6 / 3')).toEqual(10);\n    expect(evaluate('10 * (1 + 2)')).toEqual(30);\n    expect(evaluate('(3 - 4) * 10')).toEqual(-10);\n    expect(evaluate('-1 - -12')).toEqual(11);\n    expect(evaluate('5/20')).toEqual(0.25);\n    expect(evaluate('1 + 1 + 2 + 3 + 12')).toEqual(19);\n    expect(evaluate('100 / 10 / 10')).toEqual(1);\n    expect(evaluate('0 * 1 - 100 / 10 / 10')).toEqual(-1);\n    expect(evaluate('100 / (10 / 10)')).toEqual(100);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with functions","suites":["Evaluate"],"updatePoint":{"line":293,"column":30},"line":293,"code":"  it('equations with functions', () => {\n    expect(evaluate('3 + multiply(10, 4)')).toEqual(43);\n    expect(evaluate('3 + multiply(10, 4, 5)')).toEqual(203);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with trigonometry","suites":["Evaluate"],"updatePoint":{"line":297,"column":33},"line":297,"code":"  it('equations with trigonometry', () => {\n    expect(evaluate('pi()')).toEqual(Math.PI);\n    expect(evaluate('sin(degtorad(0))')).toEqual(0);\n    expect(evaluate('sin(degtorad(180))')).toEqual(1.2246467991473532e-16);\n    expect(evaluate('cos(degtorad(0))')).toEqual(1);\n    expect(evaluate('cos(degtorad(180))')).toEqual(-1);\n    expect(evaluate('tan(degtorad(0))')).toEqual(0);\n    expect(evaluate('tan(degtorad(180))')).toEqual(-1.2246467991473532e-16);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with variables","suites":["Evaluate"],"updatePoint":{"line":306,"column":30},"line":306,"code":"  it('equations with variables', () => {\n    expect(evaluate('3 + foo', {\n      foo: 5\n    })).toEqual(8);\n    expect(evaluate('3 + foo', {\n      foo: [5, 10]\n    })).toEqual([8, 13]);\n    expect(evaluate('3 + foo', {\n      foo: 5\n    })).toEqual(8);\n    expect(evaluate('sum(foo)', {\n      foo: [5, 10, 15]\n    })).toEqual(30);\n    expect(evaluate('90 / sum(foo)', {\n      foo: [5, 10, 15]\n    })).toEqual(3);\n    expect(evaluate('multiply(foo, bar)', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([4, 10, 18]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with quoted variables","suites":["Evaluate"],"updatePoint":{"line":327,"column":37},"line":327,"code":"  it('equations with quoted variables', () => {\n    expect(evaluate('\"b\" * 7', {\n      b: 3\n    })).toEqual(21);\n    expect(evaluate('\"space name\" * 2', {\n      'space name': [1, 2, 21]\n    })).toEqual([2, 4, 42]);\n    expect(evaluate('sum(\"space name\")', {\n      'space name': [1, 2, 21]\n    })).toEqual(24);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"throws on named arguments","suites":["Evaluate"],"updatePoint":{"line":338,"column":31},"line":338,"code":"  it('throws on named arguments', () => {\n    expect(() => evaluate('sum(invalid=a)')).toThrow('Named arguments are not supported');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with injected functions","suites":["Evaluate"],"updatePoint":{"line":341,"column":39},"line":341,"code":"  it('equations with injected functions', () => {\n    expect(evaluate('plustwo(foo)', {\n      foo: 5\n    }, {\n      plustwo: function (a) {\n        return a + 2;\n      }\n    })).toEqual(7);\n    expect(evaluate('negate(1)', null, {\n      negate: function (a) {\n        return -a;\n      }\n    })).toEqual(-1);\n    expect(evaluate('stringify(2)', null, {\n      stringify: function (a) {\n        return '' + a;\n      }\n    })).toEqual('2');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with arrays using special operator functions","suites":["Evaluate"],"updatePoint":{"line":360,"column":60},"line":360,"code":"  it('equations with arrays using special operator functions', () => {\n    expect(evaluate('foo + bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([5, 7, 9]);\n    expect(evaluate('foo - bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([-3, -3, -3]);\n    expect(evaluate('foo * bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([4, 10, 18]);\n    expect(evaluate('foo / bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([1 / 4, 2 / 5, 3 / 6]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing expression","suites":["Evaluate"],"updatePoint":{"line":378,"column":24},"line":378,"code":"  it('missing expression', () => {\n    expect(() => evaluate('')).toThrow('Failed to parse expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing referenced scope when used in injected function","suites":["Evaluate"],"updatePoint":{"line":381,"column":61},"line":381,"code":"  it('missing referenced scope when used in injected function', () => {\n    expect(() => evaluate('increment(foo)', null, {\n      increment: function (a) {\n        return a + 1;\n      }\n    })).toThrow('Unknown variable: foo');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"invalid context datatypes","suites":["Evaluate"],"updatePoint":{"line":388,"column":31},"line":388,"code":"  it('invalid context datatypes', () => {\n    expect(evaluate('mean(foo)', {\n      foo: [true, true, false]\n    })).toBeNaN();\n    expect(evaluate('mean(foo + bar)', {\n      foo: [true, true, false],\n      bar: [1, 2, 3]\n    })).toBeNaN();\n    expect(evaluate('mean(foo)', {\n      foo: ['dog', 'cat', 'mouse']\n    })).toBeNaN();\n    expect(evaluate('mean(foo + 2)', {\n      foo: ['dog', 'cat', 'mouse']\n    })).toBeNaN();\n    expect(evaluate('foo + bar', {\n      foo: NaN,\n      bar: [4, 5, 6]\n    })).toBeNaN();\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"returns a 501","suites":[],"updatePoint":{"line":64,"column":21},"line":64,"code":"    it('returns a 501', async () => {\n      const status = await statusOf(getAnomalyCharts({\n        serviceName: 'a',\n        transactionType: 'request',\n        start: '2021-01-01T00:00:00.000Z',\n        end: '2021-01-01T00:15:00.000Z'\n      }));\n      expect(status).to.eql(501);\n    });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 403 for a user without access to ML","suites":[],"updatePoint":{"line":99,"column":53},"line":99,"code":"    it('returns a 403 for a user without access to ML', async () => {\n      expect(await statusOf(getAnomalyCharts({\n        serviceName: 'a',\n        transactionType: 'request',\n        start,\n        end\n      }, apmApiClient.noMlAccessUser))).to.eql(403);\n    });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200 for a user _with_ access to ML","suites":["without ml jobs"],"updatePoint":{"line":108,"column":54},"line":108,"code":"      it('returns a 200 for a user _with_ access to ML', async () => {\n        const status = await statusOf(getAnomalyCharts({\n          serviceName: 'a',\n          transactionType: 'request',\n          start,\n          end\n        }));\n        expect(status).to.eql(200);\n      });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200 for a user _with_ access to ML","suites":["with ml jobs"],"updatePoint":{"line":171,"column":54},"line":171,"code":"      it('returns a 200 for a user _with_ access to ML', async () => {\n        const status = await statusOf(getAnomalyCharts({\n          serviceName: 'a',\n          transactionType: 'request',\n          start,\n          end\n        }));\n        expect(status).to.eql(200);\n      });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns model plots for all detectors and job ids for the given transaction type","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":196,"column":92},"line":196,"code":"        it('returns model plots for all detectors and job ids for the given transaction type', () => {\n          expect(allAnomalyTimeseries.length).to.eql(3);\n          expect(allAnomalyTimeseries.every(spec => spec.bounds.some(bound => bound.y0 ?? 0 > 0)));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct metadata","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":200,"column":40},"line":200,"code":"        it('returns the correct metadata', () => {\n          function omitTimeseriesData(series) {\n            return series ? omit(series, 'anomalies', 'bounds') : undefined;\n          }\n\n          expect(omitTimeseriesData(latencySeries)).to.eql({\n            type: ApmMlDetectorType.txLatency,\n            jobId: 'apm-tx-metrics-prod',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n          expect(omitTimeseriesData(throughputSeries)).to.eql({\n            type: ApmMlDetectorType.txThroughput,\n            jobId: 'apm-tx-metrics-prod',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n          expect(omitTimeseriesData(failureRateSeries)).to.eql({\n            type: ApmMlDetectorType.txFailureRate,\n            jobId: 'apm-tx-metrics-prod',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns anomalies for during the spike","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":230,"column":50},"line":230,"code":"        it('returns anomalies for during the spike', () => {\n          const latencyAnomalies = latencySeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          const throughputAnomalies = throughputSeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          const failureRateAnomalies = failureRateSeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          expect(latencyAnomalies?.length).to.be.greaterThan(0);\n          expect(throughputAnomalies?.length).to.be.greaterThan(0);\n          expect(failureRateAnomalies?.length).to.be.greaterThan(0);\n          expect(latencyAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > NORMAL_DURATION));\n          expect(throughputAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > NORMAL_RATE));\n          expect(failureRateAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > 0));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":31,"column":31},"line":31,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.fieldCandidates.length).to.be(14);\n    });","file":"apm_api_integration/tests/correlations/field_candidates.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns field candidates","suites":[],"updatePoint":{"line":44,"column":32},"line":44,"code":"    it('returns field candidates', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.fieldCandidates.length).to.be(69);\n    });","file":"apm_api_integration/tests/correlations/field_candidates.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.fieldValuePairs.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/field_value_pairs.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns field value pairs","suites":[],"updatePoint":{"line":45,"column":33},"line":45,"code":"    it('returns field value pairs', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.fieldValuePairs.length).to.be(124);\n    });","file":"apm_api_integration/tests/correlations/field_value_pairs.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.failedTransactionsCorrelations.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/p_values.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns p values","suites":[],"updatePoint":{"line":45,"column":24},"line":45,"code":"    it('returns p values', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.failedTransactionsCorrelations.length).to.be(15);\n    });","file":"apm_api_integration/tests/correlations/p_values.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":74,"column":31},"line":74,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.latencyCorrelations.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/significant_correlations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns significant correlations","suites":[],"updatePoint":{"line":87,"column":40},"line":87,"code":"    it('returns significant correlations', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.latencyCorrelations.length).to.be(7);\n    });","file":"apm_api_integration/tests/correlations/significant_correlations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list","suites":[],"updatePoint":{"line":18,"column":26},"line":18,"code":"    it('returns empty list', async () => {\n      const response = await supertest.get('/internal/apm/ux/services').query({\n        start: '2020-06-28T10:24:46.055Z',\n        end: '2020-07-29T10:24:46.055Z',\n        uiFilters: '{\"agentName\":[\"js-base\",\"rum-js\"]}'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.rumServices).to.eql([]);\n    });","file":"apm_api_integration/tests/csm/csm_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns rum services list","suites":[],"updatePoint":{"line":32,"column":33},"line":32,"code":"    it('returns rum services list', async () => {\n      const response = await supertest.get('/internal/apm/ux/services').query({\n        start: '2020-06-28T10:24:46.055Z',\n        end: '2020-07-29T10:24:46.055Z',\n        uiFilters: '{\"agentName\":[\"js-base\",\"rum-js\"]}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body.rumServices).toMatchInline(`Array []`);\n    });","file":"apm_api_integration/tests/csm/csm_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list","suites":[],"updatePoint":{"line":18,"column":26},"line":18,"code":"    it('returns empty list', async () => {\n      const response = await supertest.get('/api/apm/observability_overview/has_rum_data?start=2020-09-07T20%3A35%3A54.654Z&end=2020-09-14T20%3A35%3A54.654Z&uiFilters=');\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"hasData\": false,\n            \"indices\": \"traces-apm*,apm-*\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/csm/has_rum_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns that it has data and service name with most traffic","suites":[],"updatePoint":{"line":33,"column":67},"line":33,"code":"    it('returns that it has data and service name with most traffic', async () => {\n      const response = await supertest.get('/api/apm/observability_overview/has_rum_data?start=2020-09-07T20%3A35%3A54.654Z&end=2020-09-16T20%3A35%3A54.654Z&uiFilters=');\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"hasData\": true,\n            \"indices\": \"traces-apm*,apm-*\",\n            \"serviceName\": \"client\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/csm/has_rum_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no js errors","suites":[],"updatePoint":{"line":18,"column":28},"line":18,"code":"    it('returns no js errors', async () => {\n      const response = await supertest.get('/internal/apm/ux/js-errors').query({\n        pageSize: 5,\n        pageIndex: 0,\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"totalErrorGroups\": 0,\n            \"totalErrorPages\": 0,\n            \"totalErrors\": 0,\n          }\n        `);\n    });","file":"apm_api_integration/tests/csm/js_errors.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns js errors","suites":[],"updatePoint":{"line":40,"column":25},"line":40,"code":"    it('returns js errors', async () => {\n      const response = await supertest.get('/internal/apm/ux/js-errors').query({\n        start: '2021-01-18T12:20:17.202Z',\n        end: '2021-01-18T12:25:17.203Z',\n        uiFilters: '{\"environment\":\"ENVIRONMENT_ALL\",\"serviceName\":[\"elastic-co-frontend\"]}',\n        pageSize: 5,\n        pageIndex: 0\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"items\": Array [\n              Object {\n                \"count\": 5,\n                \"errorGroupId\": \"de32dc81e2ee5165cbff20046c080a27\",\n                \"errorMessage\": \"SyntaxError: Document.querySelector: '' is not a valid selector\",\n              },\n              Object {\n                \"count\": 2,\n                \"errorGroupId\": \"34d83587e17711a7c257ffb080ddb1c6\",\n                \"errorMessage\": \"Uncaught SyntaxError: Failed to execute 'querySelector' on 'Document': The provided selector is empty.\",\n              },\n              Object {\n                \"count\": 43,\n                \"errorGroupId\": \"3dd5604267b928139d958706f09f7e09\",\n                \"errorMessage\": \"Script error.\",\n              },\n              Object {\n                \"count\": 1,\n                \"errorGroupId\": \"cd3a2b01017ff7bcce70479644f28318\",\n                \"errorMessage\": \"Unhandled promise rejection: TypeError: can't convert undefined to object\",\n              },\n              Object {\n                \"count\": 3,\n                \"errorGroupId\": \"23539422cf714db071aba087dd041859\",\n                \"errorMessage\": \"Unable to get property 'left' of undefined or null reference\",\n              },\n            ],\n            \"totalErrorGroups\": 6,\n            \"totalErrorPages\": 120,\n            \"totalErrors\": 2846,\n          }\n        `);\n    });","file":"apm_api_integration/tests/csm/js_errors.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list","suites":[],"updatePoint":{"line":18,"column":26},"line":18,"code":"    it('returns empty list', async () => {\n      const response = await supertest.get('/internal/apm/ux/long-task-metrics').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        longestLongTask: 0,\n        noOfLongTasks: 0,\n        sumOfLongTasks: 0\n      });\n    });","file":"apm_api_integration/tests/csm/long_task_metrics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns web core vitals values","suites":[],"updatePoint":{"line":36,"column":38},"line":36,"code":"    it('returns web core vitals values', async () => {\n      const response = await supertest.get('/internal/apm/ux/long-task-metrics').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"longestLongTask\": 0,\n            \"noOfLongTasks\": 0,\n            \"sumOfLongTasks\": 0,\n          }\n        `);\n    });","file":"apm_api_integration/tests/csm/long_task_metrics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list","suites":[],"updatePoint":{"line":18,"column":26},"line":18,"code":"    it('returns empty list', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-load-distribution').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_load_dist.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list with breakdowns","suites":[],"updatePoint":{"line":27,"column":42},"line":27,"code":"    it('returns empty list with breakdowns', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-load-distribution/breakdown').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}',\n        breakdown: 'Browser'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_load_dist.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns page load distribution","suites":[],"updatePoint":{"line":42,"column":38},"line":42,"code":"    it('returns page load distribution', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-load-distribution').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_load_dist.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns page load distribution with breakdown","suites":[],"updatePoint":{"line":51,"column":53},"line":51,"code":"    it('returns page load distribution with breakdown', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-load-distribution/breakdown').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}',\n        breakdown: 'Browser'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_load_dist.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list","suites":[],"updatePoint":{"line":18,"column":26},"line":18,"code":"    it('returns empty list', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-view-trends').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_views.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list with breakdowns","suites":[],"updatePoint":{"line":27,"column":42},"line":27,"code":"    it('returns empty list with breakdowns', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-view-trends').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}',\n        breakdowns: '{\"name\":\"Browser\",\"fieldName\":\"user_agent.name\",\"type\":\"category\"}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_views.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns page views","suites":[],"updatePoint":{"line":42,"column":26},"line":42,"code":"    it('returns page views', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-view-trends').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_views.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns page views with breakdown","suites":[],"updatePoint":{"line":51,"column":41},"line":51,"code":"    it('returns page views with breakdown', async () => {\n      const response = await supertest.get('/internal/apm/ux/page-view-trends').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}',\n        breakdowns: '{\"name\":\"Browser\",\"fieldName\":\"user_agent.name\",\"type\":\"category\"}'\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/csm/page_views.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list","suites":[],"updatePoint":{"line":18,"column":26},"line":18,"code":"    it('returns empty list', async () => {\n      const response = await supertest.get('/internal/apm/ux/url-search').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}',\n        percentile: 50\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n            Object {\n              \"items\": Array [],\n              \"total\": 0,\n            }\n          `);\n    });","file":"apm_api_integration/tests/csm/url_search.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns top urls when no query","suites":[],"updatePoint":{"line":38,"column":38},"line":38,"code":"    it('returns top urls when no query', async () => {\n      const response = await supertest.get('/internal/apm/ux/url-search').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}',\n        percentile: 50\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n            Object {\n              \"items\": Array [\n                Object {\n                  \"count\": 5,\n                  \"pld\": 4924000,\n                  \"url\": \"http://localhost:5601/nfw/app/csm?rangeFrom=now-15m&rangeTo=now&serviceName=kibana-frontend-8_0_0\",\n                },\n                Object {\n                  \"count\": 1,\n                  \"pld\": 2760000,\n                  \"url\": \"http://localhost:5601/nfw/app/home\",\n                },\n              ],\n              \"total\": 2,\n            }\n          `);\n    });","file":"apm_api_integration/tests/csm/url_search.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns specific results against query","suites":[],"updatePoint":{"line":64,"column":46},"line":64,"code":"    it('returns specific results against query', async () => {\n      const response = await supertest.get('/internal/apm/ux/url-search').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}',\n        urlQuery: 'csm',\n        percentile: 50\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n            Object {\n              \"items\": Array [\n                Object {\n                  \"count\": 5,\n                  \"pld\": 4924000,\n                  \"url\": \"http://localhost:5601/nfw/app/csm?rangeFrom=now-15m&rangeTo=now&serviceName=kibana-frontend-8_0_0\",\n                },\n              ],\n              \"total\": 1,\n            }\n          `);\n    });","file":"apm_api_integration/tests/csm/url_search.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty list","suites":[],"updatePoint":{"line":18,"column":26},"line":18,"code":"    it('returns empty list', async () => {\n      const response = await supertest.get('/internal/apm/ux/web-core-vitals').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-14T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"elastic-co-rum-test\"]}',\n        percentile: 50\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        coreVitalPages: 0,\n        cls: null,\n        tbt: 0,\n        lcpRanks: [100, 0, 0],\n        fidRanks: [100, 0, 0],\n        clsRanks: [100, 0, 0]\n      });\n    });","file":"apm_api_integration/tests/csm/web_core_vitals.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns web core vitals values","suites":[],"updatePoint":{"line":40,"column":38},"line":40,"code":"    it('returns web core vitals values', async () => {\n      const response = await supertest.get('/internal/apm/ux/web-core-vitals').query({\n        start: '2020-09-07T20:35:54.654Z',\n        end: '2020-09-16T20:35:54.654Z',\n        uiFilters: '{\"serviceName\":[\"kibana-frontend-8_0_0\"]}',\n        percentile: 50\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"cls\": 0,\n            \"clsRanks\": Array [\n              100,\n              0,\n              0,\n            ],\n            \"coreVitalPages\": 6,\n            \"fcp\": 817.5,\n            \"fid\": 1352.13,\n            \"fidRanks\": Array [\n              0,\n              0,\n              100,\n            ],\n            \"lcp\": 1019,\n            \"lcpRanks\": Array [\n              100,\n              0,\n              0,\n            ],\n            \"tbt\": 0,\n          }\n        `);\n    });","file":"apm_api_integration/tests/csm/web_core_vitals.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not create data view","suites":["when no data is generated"],"updatePoint":{"line":53,"column":35},"line":53,"code":"      it('does not create data view', async () => {\n        expect(response.status).to.be(200);\n        expect(response.body.created).to.be(false);\n      });","file":"apm_api_integration/tests/data_view/static.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"cannot fetch data view","suites":["when no data is generated"],"updatePoint":{"line":57,"column":32},"line":57,"code":"      it('cannot fetch data view', async () => {\n        await getDataView().expect(404);\n      });","file":"apm_api_integration/tests/data_view/static.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"successfully creates the apm data view","suites":["when data is generated"],"updatePoint":{"line":76,"column":48},"line":76,"code":"      it('successfully creates the apm data view', async () => {\n        expect(response.status).to.be(200);\n        expect(response.body.created).to.be(true);\n      });","file":"apm_api_integration/tests/data_view/static.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct id","suites":["when data is generated","when fetching the data view"],"updatePoint":{"line":86,"column":26},"line":86,"code":"        it('has correct id', () => {\n          expect(resBody.id).to.be('apm_static_index_pattern_id');\n        });","file":"apm_api_integration/tests/data_view/static.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct title","suites":["when data is generated","when fetching the data view"],"updatePoint":{"line":89,"column":29},"line":89,"code":"        it('has correct title', () => {\n          expect(resBody.attributes.title).to.be(dataViewPattern);\n        });","file":"apm_api_integration/tests/data_view/static.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct attributes","suites":["when data is generated","when fetching the data view"],"updatePoint":{"line":92,"column":34},"line":92,"code":"        it('has correct attributes', () => {\n          expect(resBody.attributes.fieldFormatMap).to.be(JSON.stringify({\n            'trace.id': {\n              id: 'url',\n              params: {\n                urlTemplate: 'apm/link-to/trace/{{value}}',\n                labelTemplate: '{{value}}'\n              }\n            },\n            'transaction.id': {\n              id: 'url',\n              params: {\n                urlTemplate: 'apm/link-to/transaction/{{value}}',\n                labelTemplate: '{{value}}'\n              }\n            }\n          }));\n        }); // this test ensures that the default APM Data View doesn't interfere with suggestions returned in the kuery bar (this has been a problem in the past)","file":"apm_api_integration/tests/data_view/static.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can get suggestions for `trace.id`","suites":["when data is generated","when fetching the data view"],"updatePoint":{"line":111,"column":46},"line":111,"code":"        it('can get suggestions for `trace.id`', async () => {\n          const suggestions = await getDataViewSuggestions('trace.id');\n          expect(suggestions.body.length).to.be(10);\n        });","file":"apm_api_integration/tests/data_view/static.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":36,"column":27},"line":36,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.metadata).to.empty();\n    });","file":"apm_api_integration/tests/dependencies/metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct metadata for the dependency","suites":[],"updatePoint":{"line":50,"column":51},"line":50,"code":"    it('returns correct metadata for the dependency', async () => {\n      await generateData({\n        synthtraceEsClient,\n        start,\n        end\n      });\n      const {\n        status,\n        body\n      } = await callApi();\n      const {\n        span\n      } = dataConfig;\n      expect(status).to.be(200);\n      expect(body.metadata.spanType).to.equal(span.type);\n      expect(body.metadata.spanSubtype).to.equal(span.subType);\n      await synthtraceEsClient.clean();\n    });","file":"apm_api_integration/tests/dependencies/metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":48,"column":31},"line":48,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.currentPeriod.length).to.be(0);\n      expect(response.body.previousPeriod.length).to.be(0);\n    });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays combined number of occurrences","suites":["errors distribution","without comparison"],"updatePoint":{"line":79,"column":51},"line":79,"code":"        it('displays combined number of occurrences', () => {\n          const countSum = sumBy(errorsDistribution.currentPeriod, 'y');\n          const numberOfBuckets = 15;\n          expect(countSum).to.equal((appleTransaction.failureRate + bananaTransaction.failureRate) * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays combined number of occurrences","suites":["errors distribution","displays occurrences for type \"apple transaction\" only"],"updatePoint":{"line":95,"column":51},"line":95,"code":"        it('displays combined number of occurrences', () => {\n          const countSum = sumBy(errorsDistribution.currentPeriod, 'y');\n          const numberOfBuckets = 15;\n          expect(countSum).to.equal(appleTransaction.failureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":116,"column":31},"line":116,"code":"          it('returns some data', () => {\n            const hasCurrentPeriodData = errorsDistribution.currentPeriod.some(({\n              y\n            }) => isFiniteNumber(y));\n            const hasPreviousPeriodData = errorsDistribution.previousPeriod.some(({\n              y\n            }) => isFiniteNumber(y));\n            expect(hasCurrentPeriodData).to.equal(true);\n            expect(hasPreviousPeriodData).to.equal(true);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":126,"column":50},"line":126,"code":"          it('has same start time for both periods', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":129,"column":48},"line":129,"code":"          it('has same end time for both periods', () => {\n            expect(last(errorsDistribution.currentPeriod)?.x).to.equal(last(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":132,"column":61},"line":132,"code":"          it('returns same number of buckets for both periods', () => {\n            expect(errorsDistribution.currentPeriod.length).to.equal(errorsDistribution.previousPeriod.length);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":149,"column":50},"line":149,"code":"          it('has same start time for both periods', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":152,"column":48},"line":152,"code":"          it('has same end time for both periods', () => {\n            expect(last(errorsDistribution.currentPeriod)?.x).to.equal(last(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":155,"column":61},"line":155,"code":"          it('returns same number of buckets for both periods', () => {\n            expect(errorsDistribution.currentPeriod.length).to.equal(errorsDistribution.previousPeriod.length);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":46,"column":27},"line":46,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of errors","suites":["errors group","returns the correct data"],"updatePoint":{"line":78,"column":44},"line":78,"code":"        it('returns correct number of errors', () => {\n          expect(errorGroups.length).to.equal(2);\n          expect(errorGroups.map(error => error.name).sort()).to.eql(['error 1', 'error 2']);\n        });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct occurences","suites":["errors group","returns the correct data"],"updatePoint":{"line":82,"column":38},"line":82,"code":"        it('returns correct occurences', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroups.map(error => error.occurrences).sort()).to.eql([appleTransaction.failureRate * numberOfBuckets, bananaTransaction.failureRate * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":47,"column":31},"line":47,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.occurrencesCount).to.be(0);\n    });","file":"apm_api_integration/tests/errors/group_id.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays correct number of occurrences","suites":["error group id","return correct data"],"updatePoint":{"line":80,"column":50},"line":80,"code":"        it('displays correct number of occurrences', () => {\n          const numberOfBuckets = 15;\n          expect(errorsDistribution.occurrencesCount).to.equal(bananaTransaction.failureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/group_id.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can't be accessed by logstash_read user","suites":[],"updatePoint":{"line":277,"column":52},"line":277,"code":"    it(`APIs can't be accessed by logstash_read user`, async () => {\n      const username = 'logstash_read';\n      const roleName = 'logstash_read';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can be accessed by global_all user","suites":[],"updatePoint":{"line":301,"column":47},"line":301,"code":"    it('APIs can be accessed by global_all user', async () => {\n      const username = 'global_all';\n      const roleName = 'global_all';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges,\n          kibana: [{\n            base: ['all'],\n            spaces: ['*']\n          }]\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'response'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    }); // this could be any role which doesn't have access to the APM feature","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can't be accessed by dashboard_all user","suites":[],"updatePoint":{"line":330,"column":52},"line":330,"code":"    it(`APIs can't be accessed by dashboard_all user`, async () => {\n      const username = 'dashboard_all';\n      const roleName = 'dashboard_all';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges,\n          kibana: [{\n            feature: {\n              dashboard: ['all']\n            },\n            spaces: ['*']\n          }]\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"user_1 can access APIs in space_1","suites":["spaces"],"updatePoint":{"line":403,"column":43},"line":403,"code":"      it('user_1 can access APIs in space_1', async () => {\n        await executeRequests({\n          username,\n          password,\n          expectation: 'response',\n          spaceId: space1Id\n        });\n      });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"user_1 can't access APIs in space_2","suites":["spaces"],"updatePoint":{"line":411,"column":45},"line":411,"code":"      it(`user_1 can't access APIs in space_2`, async () => {\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden',\n          spaceId: space2Id\n        });\n      });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":19,"column":31},"line":19,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/has_data`\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.be(false);\n    });","file":"apm_api_integration/tests/historical_data/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns hasData: true","suites":[],"updatePoint":{"line":31,"column":29},"line":31,"code":"    it('returns hasData: true', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/has_data`\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.be(true);\n    });","file":"apm_api_integration/tests/historical_data/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns response without `_inspect`","suites":["when omitting `_inspect` query param"],"updatePoint":{"line":22,"column":45},"line":22,"code":"      it('returns response without `_inspect`', async () => {\n        const {\n          status,\n          body\n        } = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/environments',\n          params: {\n            query: {\n              start: metadata.start,\n              end: metadata.end\n            }\n          }\n        });\n        expect(status).to.be(200);\n        expect(body._inspect).to.be(undefined);\n      });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for environments","suites":["when passing `_inspect` as query param","elasticsearch calls made with end-user auth are returned"],"updatePoint":{"line":41,"column":28},"line":41,"code":"        it('for environments', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/environments',\n            params: {\n              query: {\n                start: metadata.start,\n                end: metadata.end,\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).not.to.be.empty(); // @ts-expect-error\n\n          expect(Object.keys(body._inspect[0])).to.eql(['id', 'json', 'name', 'response', 'startTime', 'stats', 'status']);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for custom links","suites":["when passing `_inspect` as query param","elasticsearch calls made with internal user are not return"],"updatePoint":{"line":62,"column":28},"line":62,"code":"        it('for custom links', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/settings/custom_links',\n            params: {\n              query: {\n                'service.name': 'opbeans-node',\n                'transaction.type': 'request',\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).to.eql([]);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for agent configs","suites":["when passing `_inspect` as query param","elasticsearch calls made with internal user are not return"],"updatePoint":{"line":79,"column":29},"line":79,"code":"        it('for agent configs', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /api/apm/settings/agent-configuration',\n            params: {\n              query: {\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).to.eql([]);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains CPU usage and System memory usage chart data","suites":["for opbeans-node","returns metrics data"],"updatePoint":{"line":41,"column":65},"line":41,"code":"        it('contains CPU usage and System memory usage chart data', async () => {\n          expect(chartsResponse.status).to.be(200);\n          expectSnapshot(chartsResponse.body.charts.map(chart => chart.title)).toMatchInline(`\n                          Array [\n                            \"CPU usage\",\n                            \"System memory usage\",\n                          ]\n                      `);\n        });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-node","returns metrics data","CPU usage"],"updatePoint":{"line":57,"column":32},"line":57,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"System max\",\n                                \"System average\",\n                                \"Process max\",\n                                \"Process average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-node","returns metrics data","CPU usage"],"updatePoint":{"line":70,"column":47},"line":70,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.714,\n                                0.3877,\n                                0.75,\n                                0.2543,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-node","returns metrics data","System memory usage (using 'system.memory' fields to calculate the memory usage)"],"updatePoint":{"line":90,"column":32},"line":90,"code":"          it('has correct series', () => {\n            expect(systemMemoryUsageChart).to.not.empty();\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Max\",\n                                \"Average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-node","returns metrics data","System memory usage (using 'system.memory' fields to calculate the memory usage)"],"updatePoint":{"line":101,"column":47},"line":101,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.722093920925555,\n                                0.718173546796348,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct chart data","suites":["for opbeans-java","returns metrics data"],"updatePoint":{"line":134,"column":34},"line":134,"code":"        it('has correct chart data', async () => {\n          expect(chartsResponse.status).to.be(200);\n          expectSnapshot(chartsResponse.body.charts.map(chart => chart.title)).toMatchInline(`\n                          Array [\n                            \"CPU usage\",\n                            \"System memory usage\",\n                            \"Heap Memory\",\n                            \"Non-Heap Memory\",\n                            \"Thread Count\",\n                            \"Garbage collection per minute\",\n                            \"Garbage collection time spent per minute\",\n                          ]\n                      `);\n        });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":155,"column":32},"line":155,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"System max\",\n                                \"System average\",\n                                \"Process max\",\n                                \"Process average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":168,"column":47},"line":168,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.203,\n                                0.178777777777778,\n                                0.01,\n                                0.009,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":180,"column":34},"line":180,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                0.193,\n                                0.193,\n                                0.009,\n                                0.009,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":199,"column":32},"line":199,"code":"          it('has correct series', () => {\n            expect(systemMemoryUsageChart).to.not.empty();\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Max\",\n                                \"Average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":210,"column":47},"line":210,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.707924703557837,\n                                0.705395980841182,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":220,"column":34},"line":220,"code":"          it('has the correct rate', async () => {\n            const yValues = systemMemoryUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                0.707924703557837,\n                                0.707924703557837,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":237,"column":32},"line":237,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. used\",\n                                \"Avg. committed\",\n                                \"Avg. limit\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":249,"column":47},"line":249,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                222501617.777778,\n                                374341632,\n                                1560281088,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":260,"column":34},"line":260,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                211472896,\n                                374341632,\n                                1560281088,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":278,"column":32},"line":278,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. used\",\n                                \"Avg. committed\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":289,"column":47},"line":289,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                138573397.333333,\n                                147677639.111111,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":299,"column":34},"line":299,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                138162752,\n                                147386368,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":316,"column":32},"line":316,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. count\",\n                                \"Max count\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":327,"column":47},"line":327,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                44.4444444444444,\n                                45,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":337,"column":34},"line":337,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                44,\n                                44,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Garbage collection per minute"],"updatePoint":{"line":354,"column":32},"line":354,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"G1 Old Generation\",\n                                \"G1 Young Generation\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Garbage collection per minute"],"updatePoint":{"line":365,"column":47},"line":365,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0,\n                                3,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":383,"column":32},"line":383,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"G1 Old Generation\",\n                                \"G1 Young Generation\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":394,"column":47},"line":394,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0,\n                  37500,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"calculates system memory usage using system total field when cgroup limit is equal to 9223372036854771712","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":407,"column":115},"line":407,"code":"      it('calculates system memory usage using system total field when cgroup limit is equal to 9223372036854771712', async () => {\n        const chartsResponse = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/metrics/charts',\n          params: {\n            path: {\n              serviceName: 'opbeans-java'\n            },\n            query: {\n              start: '2020-09-08T15:00:30.000Z',\n              end: '2020-09-08T15:05:00.000Z',\n              agentName: 'java',\n              environment: 'ENVIRONMENT_ALL',\n              kuery: ``\n            }\n          }\n        });\n        const systemMemoryUsageChart = chartsResponse.body.charts.find(({\n          key\n        }) => key === 'memory_usage_chart');\n        expect(systemMemoryUsageChart).to.not.empty();\n        expectSnapshot(systemMemoryUsageChart?.series.map(({\n          title\n        }) => title)).toMatchInline(`\n                      Array [\n                        \"Max\",\n                        \"Average\",\n                      ]\n                  `);\n        expectSnapshot(systemMemoryUsageChart?.series.map(({\n          overallValue\n        }) => overallValue)).toMatchInline(`\n                      Array [\n                        0.114523896426499,\n                        0.114002376090415,\n                      ]\n                  `);\n        const yValues = systemMemoryUsageChart?.series.map(serie => first(serie.data)?.y);\n        expectSnapshot(yValues).toMatchInline(`\n                      Array [\n                        0.11383724014064,\n                        0.11383724014064,\n                      ]\n                  `);\n      });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns false when there is no data","suites":[],"updatePoint":{"line":18,"column":43},"line":18,"code":"    it('returns false when there is no data', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(false);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns false when there is only onboarding data","suites":[],"updatePoint":{"line":30,"column":56},"line":30,"code":"    it('returns false when there is only onboarding data', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(false);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns true when there is at least one document on transaction, error or metrics indices","suites":[],"updatePoint":{"line":42,"column":97},"line":42,"code":"    it('returns true when there is at least one document on transaction, error or metrics indices', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(true);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":["when data is not loaded"],"updatePoint":{"line":58,"column":33},"line":58,"code":"      it('handles the empty state', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: `GET /internal/apm/observability_overview`,\n          params: {\n            query: {\n              start: new Date(start).toISOString(),\n              end: new Date(end).toISOString(),\n              bucketSize,\n              intervalString\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expect(response.body.serviceCount).to.be(0);\n        expect(response.body.transactionPerMinute.timeseries.length).to.be(0);\n      });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of service as shown on service inventory API","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":96,"column":76},"line":96,"code":"        it('returns same number of service as shown on service inventory API', () => {\n          const {\n            serviceInventoryCount,\n            observabilityOverview\n          } = throughputValues;\n          [serviceInventoryCount, observabilityOverview.serviceCount].forEach(value => expect(value).to.be.equal(2));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value on service inventory and obs throughput count","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":103,"column":87},"line":103,"code":"        it('returns same throughput value on service inventory and obs throughput count', () => {\n          const {\n            serviceInventoryThroughputSum,\n            observabilityOverview\n          } = throughputValues;\n          const obsThroughputCount = roundNumber(observabilityOverview.transactionPerMinute.value);\n          [serviceInventoryThroughputSum, obsThroughputCount].forEach(value => expect(value).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE + JAVA_PROD_RATE)));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value on service inventory and obs mean throughput timeseries","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":111,"column":97},"line":111,"code":"        it('returns same throughput value on service inventory and obs mean throughput timeseries', () => {\n          const {\n            serviceInventoryThroughputSum,\n            observabilityOverview\n          } = throughputValues;\n          const obsThroughputMean = roundNumber(meanBy(observabilityOverview.transactionPerMinute.timeseries, 'y'));\n          [serviceInventoryThroughputSum, obsThroughputMean].forEach(value => expect(value).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE + JAVA_PROD_RATE)));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":42,"column":31},"line":42,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"serviceNodes\": Array [],\n          }\n        `);\n    });","file":"apm_api_integration/tests/service_nodes/get_service_nodes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns service nodes","suites":[],"updatePoint":{"line":66,"column":29},"line":66,"code":"    it('returns service nodes', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"serviceNodes\": Array [\n              Object {\n                \"cpu\": 1,\n                \"heapMemory\": 1000,\n                \"hostName\": \"instance-a\",\n                \"name\": \"instance-a\",\n                \"nonHeapMemory\": 100,\n                \"threadCount\": 25,\n              },\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/service_nodes/get_service_nodes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":["when data is not loaded"],"updatePoint":{"line":31,"column":29},"line":31,"code":"      it('handles empty state', async () => {\n        const response = await supertest.get(url.format({\n          pathname: '/internal/apm/services/opbeans-java/service_overview_instances/details/foo',\n          query: {\n            start,\n            end\n          }\n        }));\n        expect(response.status).to.be(200);\n        expect(response.body).to.eql({});\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the instance details","suites":["fetch instance details"],"updatePoint":{"line":66,"column":38},"line":66,"code":"      it('returns the instance details', () => {\n        expect(response.body).to.not.eql({});\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"return the correct data","suites":["fetch instance details"],"updatePoint":{"line":69,"column":33},"line":69,"code":"      it('return the correct data', () => {\n        expectSnapshot(omit(response.body, '@timestamp')).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"handles empty state when instance id not found","suites":["fetch instance details"],"updatePoint":{"line":78,"column":54},"line":78,"code":"    it('handles empty state when instance id not found', async () => {\n      const response = await supertest.get(url.format({\n        pathname: '/internal/apm/services/opbeans-java/service_overview_instances/details/foo',\n        query: {\n          start,\n          end\n        }\n      }));\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"handles the empty state","suites":["when data is not loaded"],"updatePoint":{"line":33,"column":33},"line":33,"code":"      it('handles the empty state', async () => {\n        const response = await supertest.get(url.format({\n          pathname: `/internal/apm/services/opbeans-java/service_overview_instances/detailed_statistics`,\n          query: {\n            latencyAggregationType: 'avg',\n            start,\n            end,\n            numBuckets: 20,\n            transactionType: 'request',\n            serviceNodeIds: JSON.stringify(await getServiceNodeIds({\n              apmApiSupertest,\n              start,\n              end\n            })),\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }));\n        expect(response.status).to.be(200);\n        expect(response.body).to.be.eql({\n          currentPeriod: {},\n          previousPeriod: {}\n        });\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a service node item","suites":["fetching data without comparison"],"updatePoint":{"line":88,"column":37},"line":88,"code":"      it('returns a service node item', () => {\n        expect(Object.values(response.body.currentPeriod).length).to.be.greaterThan(0);\n        expect(Object.values(response.body.previousPeriod)).to.eql(0);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns statistics for each service node","suites":["fetching data without comparison"],"updatePoint":{"line":92,"column":50},"line":92,"code":"      it('returns statistics for each service node', async () => {\n        const item = response.body.currentPeriod[serviceNodeIds[0]];\n        expect(item?.cpuUsage?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.memoryUsage?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.errorRate?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.throughput?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.latency?.some(point => isFiniteNumber(point.y))).to.be(true);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the right data","suites":["fetching data without comparison"],"updatePoint":{"line":100,"column":32},"line":100,"code":"      it('returns the right data', () => {\n        expectSnapshot(Object.values(response.body.currentPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.keys(response.body.currentPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(response.body).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a service node item for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":137,"column":70},"line":137,"code":"      it('returns a service node item for current and previous periods', () => {\n        expect(Object.values(response.body.currentPeriod).length).to.be.greaterThan(0);\n        expect(Object.values(response.body.previousPeriod).length).to.be.greaterThan(0);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns statistics for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":141,"column":61},"line":141,"code":"      it('returns statistics for current and previous periods', () => {\n        const currentPeriodItem = response.body.currentPeriod[serviceNodeIds[0]];\n\n        function hasValidYCoordinate(point) {\n          return isFiniteNumber(point.y);\n        }\n\n        expect(currentPeriodItem?.cpuUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.memoryUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.errorRate?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.throughput?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.latency?.some(hasValidYCoordinate)).to.be(true);\n        const previousPeriodItem = response.body.previousPeriod[serviceNodeIds[0]];\n        expect(previousPeriodItem?.cpuUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.memoryUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.errorRate?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.throughput?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.latency?.some(hasValidYCoordinate)).to.be(true);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the right data for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":160,"column":65},"line":160,"code":"      it('returns the right data for current and previous periods', () => {\n        expectSnapshot(Object.values(response.body.currentPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.values(response.body.previousPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.keys(response.body.currentPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(Object.keys(response.body.previousPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(response.body).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"matches x-axis on current period and previous period","suites":["fetching data with comparison"],"updatePoint":{"line":175,"column":62},"line":175,"code":"      it('matches x-axis on current period and previous period', () => {\n        const currentLatencyItems = response.body.currentPeriod[serviceNodeIds[0]]?.latency;\n        const previousLatencyItems = response.body.previousPeriod[serviceNodeIds[0]]?.latency;\n        expect(currentLatencyItems?.map(({\n          x\n        }) => x)).to.be.eql(previousLatencyItems?.map(({\n          x\n        }) => x));\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":23,"column":31},"line":23,"code":"    it('handles the empty state', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/agent?start=${start}&end=${end}`);\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/services/agent.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the agent name","suites":[],"updatePoint":{"line":33,"column":30},"line":33,"code":"    it('returns the agent name', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/agent?start=${start}&end=${end}`);\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        agentName: 'nodejs',\n        runtimeName: 'node'\n      });\n    });","file":"apm_api_integration/tests/services/agent.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 403 forbidden","suites":["when creating an annotation"],"updatePoint":{"line":52,"column":36},"line":52,"code":"      it('fails with a 403 forbidden', async () => {\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': new Date().toISOString(),\n            message: 'New deployment',\n            tags: ['foo'],\n            service: {\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n        expect(response.status).to.be(403);\n        expect(response.body.message).to.be('Annotations require at least a gold license or a trial license.');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 400 bad request if data is missing","suites":["when creating an annotation"],"updatePoint":{"line":87,"column":57},"line":87,"code":"      it('fails with a 400 bad request if data is missing', async () => {\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST'\n        });\n        expect(response.status).to.be(400);\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 400 bad request if data is invalid","suites":["when creating an annotation"],"updatePoint":{"line":94,"column":57},"line":94,"code":"      it('fails with a 400 bad request if data is invalid', async () => {\n        const invalidTimestampResponse = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': 'foo',\n            message: 'foo'\n          }\n        });\n        expect(invalidTimestampResponse.status).to.be(400);\n        const missingServiceVersionResponse = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': new Date().toISOString(),\n            message: 'New deployment'\n          }\n        });\n        expect(missingServiceVersionResponse.status).to.be(400);\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"completes with a 200 and the created annotation if data is complete and valid","suites":["when creating an annotation"],"updatePoint":{"line":114,"column":87},"line":114,"code":"      it('completes with a 200 and the created annotation if data is complete and valid', async () => {\n        const timestamp = new Date().toISOString();\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': timestamp,\n            message: 'New deployment',\n            tags: ['foo'],\n            service: {\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expectContainsObj(response.body, {\n          _source: {\n            annotation: {\n              type: 'deployment'\n            },\n            tags: ['apm', 'foo'],\n            message: 'New deployment',\n            '@timestamp': timestamp,\n            service: {\n              name: 'opbeans-java',\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"prefills `message` and `tags`","suites":["when creating an annotation"],"updatePoint":{"line":146,"column":39},"line":146,"code":"      it('prefills `message` and `tags`', async () => {\n        const timestamp = new Date().toISOString();\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': timestamp,\n            service: {\n              version: '1.1'\n            }\n          }\n        });\n        expectContainsObj(response.body, {\n          _source: {\n            annotation: {\n              type: 'deployment'\n            },\n            tags: ['apm'],\n            message: '1.1',\n            '@timestamp': timestamp,\n            service: {\n              name: 'opbeans-java',\n              version: '1.1'\n            }\n          }\n        });\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the derived annotations if there are no stored annotations","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":260,"column":76},"line":260,"code":"      it('returns the derived annotations if there are no stored annotations', async () => {\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 20).toISOString()\n        };\n        const response = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(response.status).to.be(200);\n        expect(response.body.annotations.length).to.be(2);\n        expect(response.body.annotations[0].text).to.be('1.1');\n        expect(response.body.annotations[1].text).to.be('1.2');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the stored annotations only if there are any","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":274,"column":62},"line":274,"code":"      it('returns the stored annotations only if there are any', async () => {\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 23).toISOString()\n        };\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        const response = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(response.body.annotations.length).to.be(1);\n        expect(response.body.annotations[0].text).to.be('1.3');\n        const earlierRange = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 20).toISOString()\n        };\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        const responseFromEarlierRange = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${earlierRange.start}&end=${earlierRange.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(responseFromEarlierRange.body.annotations.length).to.be(2);\n        expect(responseFromEarlierRange.body.annotations[0].text).to.be('1.1');\n        expect(responseFromEarlierRange.body.annotations[1].text).to.be('1.2');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns stored annotations for the given environment","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":317,"column":62},"line":317,"code":"      it('returns stored annotations for the given environment', async () => {\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.4',\n              environment: 'production'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 31).toISOString()\n          }\n        })).status).to.be(200);\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 23).toISOString()\n        };\n        const allEnvironmentsResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(allEnvironmentsResponse.body.annotations.length).to.be(2);\n        const productionEnvironmentResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=production`,\n          method: 'GET'\n        });\n        expect(productionEnvironmentResponse.body.annotations.length).to.be(1);\n        expect(productionEnvironmentResponse.body.annotations[0].text).to.be('1.4');\n        const missingEnvironmentsResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_NOT_DEFINED`,\n          method: 'GET'\n        });\n        expect(missingEnvironmentsResponse.body.annotations.length).to.be(1);\n        expect(missingEnvironmentsResponse.body.annotations[0].text).to.be('1.3');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"annotations are displayed for the service versions in the given time range","suites":["when there are multiple service versions"],"updatePoint":{"line":128,"column":84},"line":128,"code":"      it('annotations are displayed for the service versions in the given time range', async () => {\n        expect(response.annotations.length).to.be(2);\n        expect(response.annotations[0]['@timestamp']).to.be(dates[1].getTime());\n        expect(response.annotations[1]['@timestamp']).to.be(dates[2].getTime());\n        expectSnapshot(response.annotations[0]).toMatchInline(`\n            Object {\n              \"@timestamp\": 1612141200000,\n              \"id\": \"2\",\n              \"text\": \"2\",\n              \"type\": \"version\",\n            }\n          `);\n      });","file":"apm_api_integration/tests/services/derived_annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"annotations are not displayed for the service versions outside of the given time range","suites":["when there are multiple service versions"],"updatePoint":{"line":141,"column":96},"line":141,"code":"      it('annotations are not displayed for the service versions outside of the given time range', () => {\n        expect(response.annotations.some(annotation => {\n          return annotation['@timestamp'] !== dates[0].getTime() && annotation['@timestamp'] !== dates[2].getTime();\n        }));\n      });","file":"apm_api_integration/tests/services/derived_annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":52,"column":27},"line":52,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body).to.be.eql({\n        currentPeriod: {},\n        previousPeriod: {}\n      });\n    });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"return detailed statistics for all errors found","suites":["when data is loaded","without data comparison"],"updatePoint":{"line":96,"column":59},"line":96,"code":"        it('return detailed statistics for all errors found', () => {\n          expect(Object.keys(errorGroupsDetailedStatistics.currentPeriod).sort()).to.eql(errorIds);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of occurrencies","suites":["when data is loaded","without data comparison"],"updatePoint":{"line":99,"column":50},"line":99,"code":"        it('returns correct number of occurrencies', () => {\n          const numberOfBuckets = 15;\n          const detailedStatisticsOccurrenciesSum = Object.values(errorGroupsDetailedStatistics.currentPeriod).sort().map(({\n            timeseries\n          }) => {\n            return sumBy(timeseries, 'y');\n          });\n          expect(detailedStatisticsOccurrenciesSum).to.eql([PROD_ID_ERROR_RATE * numberOfBuckets, PROD_LIST_ERROR_RATE * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty state","suites":["when data is loaded","return empty state when invalid group id"],"updatePoint":{"line":119,"column":31},"line":119,"code":"        it('returns empty state', () => {\n          expect(errorGroupsDetailedStatistics).to.be.eql({\n            currentPeriod: {},\n            previousPeriod: {}\n          });\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["when data is loaded","with comparison"],"updatePoint":{"line":147,"column":29},"line":147,"code":"        it('returns some data', () => {\n          expect(Object.keys(errorGroupsDetailedStatistics.currentPeriod).length).to.be.greaterThan(0);\n          expect(Object.keys(errorGroupsDetailedStatistics.previousPeriod).length).to.be.greaterThan(0);\n          const hasCurrentPeriodData = Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries.some(({\n            y\n          }) => isFiniteNumber(y));\n          const hasPreviousPeriodData = Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasCurrentPeriodData).to.equal(true);\n          expect(hasPreviousPeriodData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":159,"column":48},"line":159,"code":"        it('has same start time for both periods', () => {\n          expect(first(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries)?.x).to.equal(first(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries)?.x);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":162,"column":46},"line":162,"code":"        it('has same end time for both periods', () => {\n          expect(last(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries)?.x).to.equal(last(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries)?.x);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":165,"column":59},"line":165,"code":"        it('returns same number of buckets for both periods', () => {\n          expect(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries.length).to.equal(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries.length);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":47,"column":27},"line":47,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of occurrences","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":79,"column":49},"line":79,"code":"        it('returns correct number of occurrences', () => {\n          expect(errorGroupMainStatistics.errorGroups.length).to.equal(2);\n          expect(errorGroupMainStatistics.errorGroups.map(error => error.name).sort()).to.eql([ERROR_NAME_1, ERROR_NAME_2]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct occurences","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":83,"column":38},"line":83,"code":"        it('returns correct occurences', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroupMainStatistics.errorGroups.map(error => error.occurrences).sort()).to.eql([PROD_LIST_ERROR_RATE * numberOfBuckets, PROD_ID_ERROR_RATE * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same last seen value as end date","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":87,"column":48},"line":87,"code":"        it('has same last seen value as end date', () => {\n          errorGroupMainStatistics.errorGroups.map(error => {\n            expect(error.lastSeen).to.equal(moment(end).startOf('minute').valueOf());\n          });\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":42,"column":31},"line":42,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"containerId\": \"N/A\",\n            \"host\": \"N/A\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/get_service_node_metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns service node metadata","suites":[],"updatePoint":{"line":62,"column":37},"line":62,"code":"    it('returns service node metadata', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"containerId\": \"instance-a\",\n            \"host\": \"instance-a\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/get_service_node_metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":25,"column":31},"line":25,"code":"    it('handles the empty state', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/opbeans-java/metadata/details`,\n        query: {\n          start,\n          end\n        }\n      }));\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/services/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns java service details","suites":[],"updatePoint":{"line":41,"column":36},"line":41,"code":"    it('returns java service details', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/opbeans-java/metadata/details`,\n        query: {\n          start,\n          end\n        }\n      }));\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"cloud\": Object {\n              \"availabilityZones\": Array [\n                \"europe-west1-c\",\n              ],\n              \"machineTypes\": Array [\n                \"n1-standard-4\",\n              ],\n              \"projectName\": \"elastic-observability\",\n              \"provider\": \"gcp\",\n            },\n            \"container\": Object {\n              \"isContainerized\": true,\n              \"os\": \"Linux\",\n              \"totalNumberInstances\": 1,\n              \"type\": \"Kubernetes\",\n            },\n            \"service\": Object {\n              \"agent\": Object {\n                \"ephemeral_id\": \"2745d454-f57f-4473-a09b-fe6bef295860\",\n                \"name\": \"java\",\n                \"version\": \"1.25.1-SNAPSHOT.UNKNOWN\",\n              },\n              \"runtime\": Object {\n                \"name\": \"Java\",\n                \"version\": \"11.0.11\",\n              },\n              \"versions\": Array [\n                \"2021-08-03 04:26:27\",\n              ],\n            },\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns python service details","suites":[],"updatePoint":{"line":85,"column":38},"line":85,"code":"    it('returns python service details', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/opbeans-python/metadata/details`,\n        query: {\n          start,\n          end\n        }\n      }));\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"cloud\": Object {\n              \"availabilityZones\": Array [\n                \"europe-west1-c\",\n              ],\n              \"machineTypes\": Array [\n                \"n1-standard-4\",\n              ],\n              \"projectName\": \"elastic-observability\",\n              \"provider\": \"gcp\",\n            },\n            \"container\": Object {\n              \"isContainerized\": true,\n              \"os\": \"linux\",\n              \"totalNumberInstances\": 1,\n              \"type\": \"Kubernetes\",\n            },\n            \"service\": Object {\n              \"agent\": Object {\n                \"name\": \"python\",\n                \"version\": \"6.3.3\",\n              },\n              \"framework\": \"django\",\n              \"runtime\": Object {\n                \"name\": \"CPython\",\n                \"version\": \"3.9.6\",\n              },\n              \"versions\": Array [\n                \"2021-08-03 04:26:25\",\n              ],\n            },\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":25,"column":31},"line":25,"code":"    it('handles the empty state', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/opbeans-java/metadata/icons`,\n        query: {\n          start,\n          end\n        }\n      }));\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/services/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns java service icons","suites":[],"updatePoint":{"line":41,"column":34},"line":41,"code":"    it('returns java service icons', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/opbeans-java/metadata/icons`,\n        query: {\n          start,\n          end\n        }\n      }));\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"agentName\": \"java\",\n            \"cloudProvider\": \"gcp\",\n            \"containerType\": \"Kubernetes\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns python service icons","suites":[],"updatePoint":{"line":58,"column":36},"line":58,"code":"    it('returns python service icons', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/opbeans-python/metadata/icons`,\n        query: {\n          start,\n          end\n        }\n      }));\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"agentName\": \"python\",\n            \"cloudProvider\": \"gcp\",\n            \"containerType\": \"Kubernetes\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":30,"column":31},"line":30,"code":"    it('handles the empty state', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/detailed_statistics`,\n        query: {\n          start,\n          end,\n          serviceNames: JSON.stringify(serviceNames),\n          environment: 'ENVIRONMENT_ALL',\n          kuery: '',\n          offset: '1d'\n        }\n      }));\n      expect(response.status).to.be(200);\n      expect(response.body.currentPeriod).to.be.empty();\n      expect(response.body.previousPeriod).to.be.empty();\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns current period data","suites":[],"updatePoint":{"line":66,"column":35},"line":66,"code":"    it('returns current period data', async () => {\n      expect(servicesDetailedStatistics.currentPeriod).not.to.be.empty();\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"doesn't returns previous period data","suites":[],"updatePoint":{"line":69,"column":44},"line":69,"code":"    it(\"doesn't returns previous period data\", async () => {\n      expect(servicesDetailedStatistics.previousPeriod).to.be.empty();\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns current data for requested service names","suites":[],"updatePoint":{"line":72,"column":56},"line":72,"code":"    it('returns current data for requested service names', () => {\n      serviceNames.forEach(serviceName => {\n        expect(servicesDetailedStatistics.currentPeriod[serviceName]).not.to.be.empty();\n      });\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct statistics","suites":[],"updatePoint":{"line":77,"column":34},"line":77,"code":"    it('returns correct statistics', () => {\n      const statistics = servicesDetailedStatistics.currentPeriod[serviceNames[0]];\n      expect(statistics.latency.length).to.be.greaterThan(0);\n      expect(statistics.throughput.length).to.be.greaterThan(0);\n      expect(statistics.transactionErrorRate.length).to.be.greaterThan(0); // latency\n\n      const nonNullLantencyDataPoints = statistics.latency.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullLantencyDataPoints.length).to.be.greaterThan(0); // throughput\n\n      const nonNullThroughputDataPoints = statistics.throughput.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullThroughputDataPoints.length).to.be.greaterThan(0); // transaction erro rate\n\n      const nonNullTransactionErrorRateDataPoints = statistics.transactionErrorRate.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullTransactionErrorRateDataPoints.length).to.be.greaterThan(0);\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty when empty service names is passed","suites":[],"updatePoint":{"line":98,"column":56},"line":98,"code":"    it('returns empty when empty service names is passed', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/detailed_statistics`,\n        query: {\n          start,\n          end,\n          serviceNames: JSON.stringify([]),\n          environment: 'ENVIRONMENT_ALL',\n          kuery: ''\n        }\n      }));\n      expect(response.status).to.be(400);\n      expect(response.body.message).to.equal('serviceNames cannot be empty');\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"filters by environment","suites":[],"updatePoint":{"line":112,"column":30},"line":112,"code":"    it('filters by environment', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/detailed_statistics`,\n        query: {\n          start,\n          end,\n          serviceNames: JSON.stringify(serviceNames),\n          environment: 'production',\n          kuery: ''\n        }\n      }));\n      expect(response.status).to.be(200);\n      expect(Object.keys(response.body.currentPeriod).length).to.be(1);\n      expect(response.body.currentPeriod['opbeans-java']).not.to.be.empty();\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"filters by kuery","suites":[],"updatePoint":{"line":127,"column":24},"line":127,"code":"    it('filters by kuery', async () => {\n      const response = await supertest.get(url.format({\n        pathname: `/internal/apm/services/detailed_statistics`,\n        query: {\n          start,\n          end,\n          serviceNames: JSON.stringify(serviceNames),\n          environment: 'ENVIRONMENT_ALL',\n          kuery: 'transaction.type : \"invalid_transaction_type\"'\n        }\n      }));\n      expect(response.status).to.be(200);\n      expect(Object.keys(response.body.currentPeriod)).to.be.empty();\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns current period data","suites":[],"updatePoint":{"line":162,"column":35},"line":162,"code":"    it('returns current period data', async () => {\n      expect(servicesDetailedStatistics.currentPeriod).not.to.be.empty();\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns previous period data","suites":[],"updatePoint":{"line":165,"column":36},"line":165,"code":"    it('returns previous period data', async () => {\n      expect(servicesDetailedStatistics.previousPeriod).not.to.be.empty();\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns current data for requested service names","suites":[],"updatePoint":{"line":168,"column":56},"line":168,"code":"    it('returns current data for requested service names', () => {\n      serviceNames.forEach(serviceName => {\n        expect(servicesDetailedStatistics.currentPeriod[serviceName]).not.to.be.empty();\n      });\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns previous data for requested service names","suites":[],"updatePoint":{"line":173,"column":57},"line":173,"code":"    it('returns previous data for requested service names', () => {\n      serviceNames.forEach(serviceName => {\n        expect(servicesDetailedStatistics.currentPeriod[serviceName]).not.to.be.empty();\n      });\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct statistics","suites":[],"updatePoint":{"line":178,"column":34},"line":178,"code":"    it('returns correct statistics', () => {\n      const currentPeriodStatistics = servicesDetailedStatistics.currentPeriod[serviceNames[0]];\n      const previousPeriodStatistics = servicesDetailedStatistics.previousPeriod[serviceNames[0]];\n      expect(currentPeriodStatistics.latency.length).to.be.greaterThan(0);\n      expect(currentPeriodStatistics.throughput.length).to.be.greaterThan(0);\n      expect(currentPeriodStatistics.transactionErrorRate.length).to.be.greaterThan(0); // latency\n\n      const nonNullCurrentPeriodLantencyDataPoints = currentPeriodStatistics.latency.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullCurrentPeriodLantencyDataPoints.length).to.be.greaterThan(0); // throughput\n\n      const nonNullCurrentPeriodThroughputDataPoints = currentPeriodStatistics.throughput.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullCurrentPeriodThroughputDataPoints.length).to.be.greaterThan(0); // transaction erro rate\n\n      const nonNullCurrentPeriodTransactionErrorRateDataPoints = currentPeriodStatistics.transactionErrorRate.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullCurrentPeriodTransactionErrorRateDataPoints.length).to.be.greaterThan(0);\n      expect(previousPeriodStatistics.latency.length).to.be.greaterThan(0);\n      expect(previousPeriodStatistics.throughput.length).to.be.greaterThan(0);\n      expect(previousPeriodStatistics.transactionErrorRate.length).to.be.greaterThan(0); // latency\n\n      const nonNullPreviousPeriodLantencyDataPoints = previousPeriodStatistics.latency.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullPreviousPeriodLantencyDataPoints.length).to.be.greaterThan(0); // throughput\n\n      const nonNullPreviousPeriodThroughputDataPoints = previousPeriodStatistics.throughput.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullPreviousPeriodThroughputDataPoints.length).to.be.greaterThan(0); // transaction erro rate\n\n      const nonNullPreviousPeriodTransactionErrorRateDataPoints = previousPeriodStatistics.transactionErrorRate.filter(({\n        y\n      }) => isFiniteNumber(y));\n      expect(nonNullPreviousPeriodTransactionErrorRateDataPoints.length).to.be.greaterThan(0);\n    });","file":"apm_api_integration/tests/services/services_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":51,"column":31},"line":51,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.currentPeriod.length).to.be(0);\n      expect(response.body.previousPeriod.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":89,"column":42},"line":89,"code":"        it('returns some transactions data', () => {\n          expect(throughputTransactions.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughputTransactions.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some metrics data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":96,"column":37},"line":96,"code":"        it('returns some metrics data', () => {\n          expect(throughputMetrics.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughputMetrics.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same mean value for metrics and transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":103,"column":65},"line":103,"code":"        it('has same mean value for metrics and transactions data', () => {\n          const transactionsMean = meanBy(throughputTransactions.currentPeriod, 'y');\n          const metricsMean = meanBy(throughputMetrics.currentPeriod, 'y');\n          [transactionsMean, metricsMean].forEach(value => expect(roundNumber(value)).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE)));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has a bucket size of 10 seconds for transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":108,"column":65},"line":108,"code":"        it('has a bucket size of 10 seconds for transactions data', () => {\n          const firstTimerange = throughputTransactions.currentPeriod[0].x;\n          const secondTimerange = throughputTransactions.currentPeriod[1].x;\n          const timeIntervalAsSeconds = (secondTimerange - firstTimerange) / 1000;\n          expect(timeIntervalAsSeconds).to.equal(10);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has a bucket size of 1 minute for metrics data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":114,"column":58},"line":114,"code":"        it('has a bucket size of 1 minute for metrics data', () => {\n          const firstTimerange = throughputMetrics.currentPeriod[0].x;\n          const secondTimerange = throughputMetrics.currentPeriod[1].x;\n          const timeIntervalAsMinutes = (secondTimerange - firstTimerange) / 1000 / 60;\n          expect(timeIntervalAsMinutes).to.equal(1);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","production environment"],"updatePoint":{"line":131,"column":29},"line":131,"code":"        it('returns some data', () => {\n          expect(throughput.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughput.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct average throughput","suites":["Throughput chart api","production environment"],"updatePoint":{"line":138,"column":46},"line":138,"code":"        it('returns correct average throughput', () => {\n          const throughputMean = meanBy(throughput.currentPeriod, 'y');\n          expect(roundNumber(throughputMean)).to.be.equal(roundNumber(GO_PROD_RATE));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","when synth-java is selected"],"updatePoint":{"line":153,"column":29},"line":153,"code":"        it('returns some data', () => {\n          expect(throughput.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughput.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns throughput related to java agent","suites":["Throughput chart api","when synth-java is selected"],"updatePoint":{"line":160,"column":52},"line":160,"code":"        it('returns throughput related to java agent', () => {\n          const throughputMean = meanBy(throughput.currentPeriod, 'y');\n          expect(roundNumber(throughputMean)).to.be.equal(roundNumber(JAVA_PROD_RATE));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":178,"column":29},"line":178,"code":"        it('returns some data', () => {\n          expect(throughputResponse.currentPeriod.length).to.be.greaterThan(0);\n          expect(throughputResponse.previousPeriod.length).to.be.greaterThan(0);\n          const hasCurrentPeriodData = throughputResponse.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          const hasPreviousPeriodData = throughputResponse.previousPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasCurrentPeriodData).to.equal(true);\n          expect(hasPreviousPeriodData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":190,"column":48},"line":190,"code":"        it('has same start time for both periods', () => {\n          expect(first(throughputResponse.currentPeriod)?.x).to.equal(first(throughputResponse.previousPeriod)?.x);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":193,"column":46},"line":193,"code":"        it('has same end time for both periods', () => {\n          expect(last(throughputResponse.currentPeriod)?.x).to.equal(last(throughputResponse.previousPeriod)?.x);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":196,"column":59},"line":196,"code":"        it('returns same number of buckets for both periods', () => {\n          expect(throughputResponse.currentPeriod.length).to.be(throughputResponse.previousPeriod.length);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same mean value for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":199,"column":48},"line":199,"code":"        it('has same mean value for both periods', () => {\n          const currentPeriodMean = meanBy(throughputResponse.currentPeriod.filter(item => isFiniteNumber(item.y) && item.y > 0), 'y');\n          const previousPeriodMean = meanBy(throughputResponse.previousPeriod.filter(item => isFiniteNumber(item.y) && item.y > 0), 'y');\n          const currentPeriod = throughputResponse.currentPeriod;\n          const bucketSize = currentPeriod[1].x - currentPeriod[0].x;\n          const durationAsMinutes = bucketSize / 1000 / 60;\n          [currentPeriodMean, previousPeriodMean].every(value => expect(roundNumber(value)).to.be.equal(roundNumber((GO_PROD_RATE + GO_DEV_RATE) / durationAsMinutes)));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":33,"column":31},"line":33,"code":"    it('handles the empty state', async () => {\n      const response = await supertest.get(`/internal/apm/services?start=${start}&end=${end}&environment=ENVIRONMENT_ALL&kuery=`);\n      expect(response.status).to.be(200);\n      expect(response.body.hasLegacyData).to.be(false);\n      expect(response.body.items.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a successful response","suites":["when no additional filters are applied"],"updatePoint":{"line":88,"column":39},"line":88,"code":"      it('returns a successful response', () => {\n        expect(response.status).to.be(200);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct statistics","suites":["when no additional filters are applied"],"updatePoint":{"line":91,"column":40},"line":91,"code":"      it('returns the correct statistics', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.prod.rps + config.multiple.dev.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['production', 'development'],\n          agentName: 'go',\n          latency: 1000 * ((config.multiple.prod.duration * config.multiple.prod.rps + config.multiple.dev.duration * config.multiple.dev.rps) / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: config.multiple.dev.rps / (config.multiple.prod.rps + config.multiple.dev.rps)\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns services without transaction data","suites":["when no additional filters are applied"],"updatePoint":{"line":104,"column":51},"line":104,"code":"      it('returns services without transaction data', () => {\n        const serviceNames = response.body.items.map(item => item.serviceName);\n        expect(serviceNames).to.contain('metric-only-service');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data only for that environment","suites":["when applying an environment filter"],"updatePoint":{"line":123,"column":48},"line":123,"code":"      it('returns data only for that environment', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.prod.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['production'],\n          agentName: 'go',\n          latency: 1000 * (config.multiple.prod.duration * config.multiple.prod.rps / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: 0\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data for that kuery filter only","suites":["when applying a kuery filter"],"updatePoint":{"line":151,"column":49},"line":151,"code":"      it('returns data for that kuery filter only', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.dev.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['development'],\n          agentName: 'go',\n          latency: 1000 * (config.multiple.dev.duration * config.multiple.dev.rps / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: 1\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data for the top transaction type that is not a default","suites":["when excluding default transaction types"],"updatePoint":{"line":179,"column":73},"line":179,"code":"      it('returns data for the top transaction type that is not a default', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        expect(multipleEnvService?.transactionType).to.eql('rpc');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"the response is successful","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":195,"column":38},"line":195,"code":"        it('the response is successful', () => {\n          expect(response.status).to.eql(200);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"there is at least one service","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":198,"column":41},"line":198,"code":"        it('there is at least one service', () => {\n          expect(response.body.items.length).to.be.greaterThan(0);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"some items have a health status set","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":201,"column":47},"line":201,"code":"        it('some items have a health status set', () => {\n          // Under the assumption that the loaded archive has\n          // at least one APM ML job, and the time range is longer\n          // than 15m, at least one items should have a health status\n          // set. Note that we currently have a bug where healthy\n          // services report as unknown (so without any health status):\n          // https://github.com/elastic/kibana/issues/77083\n          const healthStatuses = sortBy(response.body.items, 'serviceName').map(item => item.healthStatus);\n          expect(healthStatuses.filter(Boolean).length).to.be.greaterThan(0);\n          expectSnapshot(healthStatuses).toMatchInline(`\n              Array [\n                undefined,\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n              ]\n            `);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"the response is successful","suites":["with a user that does not have access to ML"],"updatePoint":{"line":230,"column":36},"line":230,"code":"      it('the response is successful', () => {\n        expect(response.status).to.eql(200);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"there is at least one service","suites":["with a user that does not have access to ML"],"updatePoint":{"line":233,"column":39},"line":233,"code":"      it('there is at least one service', () => {\n        expect(response.body.items.length).to.be.greaterThan(0);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains no health statuses","suites":["with a user that does not have access to ML"],"updatePoint":{"line":236,"column":37},"line":236,"code":"      it('contains no health statuses', () => {\n        const definedHealthStatuses = response.body.items.map(item => item.healthStatus).filter(Boolean);\n        expect(definedHealthStatuses.length).to.be(0);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not return health statuses for services that are not found in APM data","suites":["and fetching a list of services with a filter"],"updatePoint":{"line":246,"column":85},"line":246,"code":"      it('does not return health statuses for services that are not found in APM data', () => {\n        expect(response.status).to.be(200);\n        expect(response.body.items.length).to.be(1);\n        expect(response.body.items[0].serviceName).to.be('opbeans-java');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":24,"column":27},"line":24,"code":"    it('handles empty state', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/transaction_types?start=${start}&end=${end}`);\n      expect(response.status).to.be(200);\n      expect(response.body.transactionTypes.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/transaction_types.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":34,"column":27},"line":34,"code":"    it('handles empty state', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/transaction_types?start=${start}&end=${end}`);\n      expect(response.status).to.be(200);\n      expect(response.body.transactionTypes.length).to.be.greaterThan(0);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"transactionTypes\": Array [\n              \"request\",\n              \"Worker\",\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/transaction_types.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state for services","suites":[],"updatePoint":{"line":114,"column":44},"line":114,"code":"    it('handles the empty state for services', async () => {\n      const {\n        body\n      } = await getServices();\n      expect(body.serviceNames).to.eql(['ALL_OPTION_VALUE']);\n    });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state for environments","suites":[],"updatePoint":{"line":120,"column":48},"line":120,"code":"    it('handles the empty state for environments', async () => {\n      const {\n        body\n      } = await getEnvironments('myservice');\n      expect(body.environments).to.eql([{\n        name: 'ALL_OPTION_VALUE',\n        alreadyConfigured: false\n      }]);\n    });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state for agent name","suites":[],"updatePoint":{"line":129,"column":46},"line":129,"code":"    it('handles the empty state for agent name', async () => {\n      const {\n        body\n      } = await getAgentName('myservice');\n      expect(body.agentName).to.eql(undefined);\n    });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow creating config","suites":["as a read-only user"],"updatePoint":{"line":142,"column":40},"line":142,"code":"      it('does not allow creating config', async () => {\n        await expectStatusCode(() => createConfiguration(newConfig, {\n          user: 'read'\n        }), 403);\n      });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow updating the config","suites":["as a read-only user","when a configuration already exists"],"updatePoint":{"line":150,"column":46},"line":150,"code":"        it('does not allow updating the config', async () => {\n          await expectStatusCode(() => updateConfiguration(newConfig, {\n            user: 'read'\n          }), 403);\n        });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow deleting the config","suites":["as a read-only user","when a configuration already exists"],"updatePoint":{"line":155,"column":46},"line":155,"code":"        it('does not allow deleting the config', async () => {\n          await expectStatusCode(() => deleteConfiguration(newConfig, {\n            user: 'read'\n          }), 403);\n        });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can create and delete config","suites":["when creating one configuration"],"updatePoint":{"line":176,"column":38},"line":176,"code":"      it('can create and delete config', async () => {\n        // assert that config does not exist\n        await expectMissing(() => searchConfigurations(searchParams)); // create config\n\n        await createConfiguration(newConfig); // assert that config now exists\n\n        await expectExists(() => searchConfigurations(searchParams)); // delete config\n\n        await deleteConfiguration(newConfig); // assert that config was deleted\n\n        await expectMissing(() => searchConfigurations(searchParams));\n      });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can find the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":191,"column":31},"line":191,"code":"        it('can find the config', async () => {\n          const {\n            status,\n            body\n          } = await searchConfigurations(searchParams);\n          expect(status).to.equal(200);\n          expect(body._source.service).to.eql({});\n          expect(body._source.settings).to.eql({\n            transaction_sample_rate: '0.55'\n          });\n        });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can list the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":202,"column":31},"line":202,"code":"        it('can list the config', async () => {\n          const {\n            status,\n            body\n          } = await getAllConfigurations();\n          expect(status).to.equal(200);\n          expect(omitTimestamp(body.configurations)).to.eql([{\n            service: {},\n            settings: {\n              transaction_sample_rate: '0.55'\n            },\n            applied_by_agent: false,\n            etag: 'eb88a8997666cc4b33745ef355a1bbd7c4782f2d'\n          }]);\n        });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can update the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":217,"column":33},"line":217,"code":"        it('can update the config', async () => {\n          await updateConfiguration({\n            service: {},\n            settings: {\n              transaction_sample_rate: '0.85'\n            }\n          });\n          const {\n            status,\n            body\n          } = await searchConfigurations(searchParams);\n          expect(status).to.equal(200);\n          expect(body._source.service).to.eql({});\n          expect(body._source.settings).to.eql({\n            transaction_sample_rate: '0.85'\n          });\n        });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can list all configs","suites":["when creating multiple configurations"],"updatePoint":{"line":327,"column":30},"line":327,"code":"      it('can list all configs', async () => {\n        const {\n          status,\n          body\n        } = await getAllConfigurations();\n        expect(status).to.equal(200);\n        expect(orderBy(omitTimestamp(body.configurations), ['settings.transaction_sample_rate'])).to.eql([{\n          service: {},\n          settings: {\n            transaction_sample_rate: '0.1'\n          },\n          applied_by_agent: false,\n          etag: '0758cb18817de60cca29e07480d472694239c4c3'\n        }, {\n          service: {\n            name: 'my_service'\n          },\n          settings: {\n            transaction_sample_rate: '0.2'\n          },\n          applied_by_agent: false,\n          etag: 'e04737637056fdf1763bf0ef0d3fcb86e89ae5fc'\n        }, {\n          service: {\n            name: 'my_service',\n            environment: 'development'\n          },\n          settings: {\n            transaction_sample_rate: '0.3'\n          },\n          applied_by_agent: false,\n          etag: 'af4dac62621b6762e6281481d1f7523af1124120'\n        }, {\n          service: {\n            environment: 'production'\n          },\n          settings: {\n            transaction_sample_rate: '0.4'\n          },\n          applied_by_agent: false,\n          etag: '8d1bf8e6b778b60af351117e2cf53fb1ee570068'\n        }, {\n          service: {\n            environment: 'development'\n          },\n          settings: {\n            transaction_sample_rate: '0.5'\n          },\n          applied_by_agent: false,\n          etag: '4ce40da57e3c71daca704121c784b911ec05ae81'\n        }]);\n      });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":" / ","suites":["when creating multiple configurations"],"updatePoint":{"line":381,"column":78},"line":381,"code":"        it(`${agentRequest.service.name} / ${agentRequest.service.environment}`, async () => {\n          const {\n            status,\n            body\n          } = await searchConfigurations({\n            service: agentRequest.service,\n            etag: 'abc'\n          });\n          expect(status).to.equal(200);\n          expect(body._source.settings).to.eql(agentRequest.expectedSettings);\n        });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' before supplying etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":423,"column":68},"line":423,"code":"      it(`should have 'applied_by_agent=false' before supplying etag`, async () => {\n        const res1 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          }\n        });\n        etag = res1.body._source.etag;\n        const res2 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          },\n          etag\n        });\n        expect(res1.body._source.applied_by_agent).to.be(false);\n        expect(res2.body._source.applied_by_agent).to.be(false);\n      });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' after supplying etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":441,"column":66},"line":441,"code":"      it(`should have 'applied_by_agent=true' after supplying etag`, async () => {\n        await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          },\n          etag\n        });\n\n        async function hasBeenAppliedByAgent() {\n          const {\n            body\n          } = await searchConfigurations({\n            service: {\n              name: 'myservice',\n              environment: 'development'\n            }\n          });\n          return !!body._source.applied_by_agent;\n        } // wait until `applied_by_agent` has been updated in elasticsearch\n\n\n        expect(await waitFor(hasBeenAppliedByAgent)).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' before marking as applied","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":465,"column":72},"line":465,"code":"      it(`should have 'applied_by_agent=false' before marking as applied`, async () => {\n        const res1 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'production'\n          }\n        });\n        expect(res1.body._source.applied_by_agent).to.be(false);\n      });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' when 'mark_as_applied_by_agent' attribute is true","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":474,"column":95},"line":474,"code":"      it(`should have 'applied_by_agent=true' when 'mark_as_applied_by_agent' attribute is true`, async () => {\n        await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'production'\n          },\n          mark_as_applied_by_agent: true\n        });\n\n        async function hasBeenAppliedByAgent() {\n          const {\n            body\n          } = await searchConfigurations({\n            service: {\n              name: 'myservice',\n              environment: 'production'\n            }\n          });\n          return !!body._source.applied_by_agent;\n        } // wait until `applied_by_agent` has been updated in elasticsearch\n\n\n        expect(await waitFor(hasBeenAppliedByAgent)).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all services","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":504,"column":28},"line":504,"code":"    it('returns all services', async () => {\n      const {\n        body\n      } = await getServices();\n      expectSnapshot(body).toMatchInline(`\n          Object {\n            \"serviceNames\": Array [\n              \"ALL_OPTION_VALUE\",\n              \"auditbeat\",\n              \"opbeans-dotnet\",\n              \"opbeans-go\",\n              \"opbeans-java\",\n              \"opbeans-node\",\n              \"opbeans-python\",\n              \"opbeans-ruby\",\n              \"opbeans-rum\",\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the environments, all unconfigured","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":524,"column":50},"line":524,"code":"    it('returns the environments, all unconfigured', async () => {\n      const {\n        body\n      } = await getEnvironments('opbeans-node');\n      const {\n        environments\n      } = body;\n      expect(environments.map(item => item.name)).to.contain('ALL_OPTION_VALUE');\n      expect(environments.every(item => item.alreadyConfigured === false)).to.be(true);\n      expectSnapshot(body).toMatchInline(`\n          Object {\n            \"environments\": Array [\n              Object {\n                \"alreadyConfigured\": false,\n                \"name\": \"ALL_OPTION_VALUE\",\n              },\n              Object {\n                \"alreadyConfigured\": false,\n                \"name\": \"testing\",\n              },\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the agent name","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":548,"column":30},"line":548,"code":"    it('returns the agent name', async () => {\n      const {\n        body\n      } = await getAgentName('opbeans-node');\n      expect(body.agentName).to.eql('nodejs');\n    });","file":"apm_api_integration/tests/settings/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"user without access","suites":[],"updatePoint":{"line":44,"column":27},"line":44,"code":"    it('user without access', async () => {\n      await expectForbidden(noAccessUser);\n    });","file":"apm_api_integration/tests/settings/anomaly_detection/basic.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"read user","suites":[],"updatePoint":{"line":47,"column":17},"line":47,"code":"    it('read user', async () => {\n      await expectForbidden(readUser);\n    });","file":"apm_api_integration/tests/settings/anomaly_detection/basic.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"write user","suites":[],"updatePoint":{"line":50,"column":18},"line":50,"code":"    it('write user', async () => {\n      await expectForbidden(writeUser);\n    });","file":"apm_api_integration/tests/settings/anomaly_detection/basic.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an error because the user does not have access","suites":["when user does not have read access to ML","when calling the endpoint for listing jobs"],"updatePoint":{"line":31,"column":66},"line":31,"code":"        it('returns an error because the user does not have access', async () => {\n          const {\n            body\n          } = await getJobs();\n          expect(body.statusCode).to.be(403);\n          expect(body.error).to.be('Forbidden');\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/no_access_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an error because the user does not have access","suites":["when user does not have read access to ML","when calling create endpoint"],"updatePoint":{"line":40,"column":66},"line":40,"code":"        it('returns an error because the user does not have access', async () => {\n          const {\n            body\n          } = await createJobs(['production', 'staging']);\n          expect(body.statusCode).to.be(403);\n          expect(body.error).to.be('Forbidden');\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/no_access_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a list of jobs","suites":["when user has read access to ML","when calling the endpoint for listing jobs"],"updatePoint":{"line":31,"column":34},"line":31,"code":"        it('returns a list of jobs', async () => {\n          const {\n            body\n          } = await getJobs();\n          expect(body.jobs.length).to.be(0);\n          expect(body.hasLegacyJobs).to.be(false);\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/read_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an error because the user does not have access","suites":["when user has read access to ML","when calling create endpoint"],"updatePoint":{"line":40,"column":66},"line":40,"code":"        it('returns an error because the user does not have access', async () => {\n          const {\n            body\n          } = await createJobs(['production', 'staging']);\n          expect(body.statusCode).to.be(403);\n          expect(body.error).to.be('Forbidden');\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/read_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200/true","suites":["when there are no v2 jobs"],"updatePoint":{"line":68,"column":28},"line":68,"code":"      it('returns a 200/true', async () => {\n        const {\n          status,\n          body\n        } = await callUpdateEndpoint();\n        expect(status).to.eql(200);\n        expect(body.update).to.eql(true);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"creates a new job for each environment that has a v2 job","suites":["when there are only v2 jobs"],"updatePoint":{"line":81,"column":66},"line":81,"code":"      it('creates a new job for each environment that has a v2 job', async () => {\n        await callUpdateEndpoint();\n        const {\n          body: {\n            jobs\n          }\n        } = await getJobs();\n        expect(jobs.filter(job => job.version === 3).map(job => job.environment).sort()).to.eql(['development', 'production']);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"only creates new jobs for environments that did not have a v3 job","suites":["when there are both v2 and v3 jobs"],"updatePoint":{"line":100,"column":75},"line":100,"code":"      it('only creates new jobs for environments that did not have a v3 job', async () => {\n        await callUpdateEndpoint();\n        const {\n          body: {\n            jobs\n          }\n        } = await getJobs();\n        expect(jobs.filter(job => job.version === 3).map(job => job.environment).sort()).to.eql(['development', 'production']);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a list of jobs","suites":["when user has write access to ML","when calling the endpoint for listing jobs"],"updatePoint":{"line":51,"column":34},"line":51,"code":"        it('returns a list of jobs', async () => {\n          const {\n            body\n          } = await getJobs();\n          expect(body.jobs.length).to.be(0);\n          expect(body.hasLegacyJobs).to.be(false);\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"creates two jobs","suites":["when user has write access to ML","when calling create endpoint"],"updatePoint":{"line":60,"column":28},"line":60,"code":"        it('creates two jobs', async () => {\n          await createJobs(['production', 'staging']);\n          const {\n            body\n          } = await getJobs();\n          expect(body.hasLegacyJobs).to.be(false);\n          expect(countBy(body.jobs, 'environment')).to.eql({\n            production: 1,\n            staging: 1\n          });\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"skips duplicate job creation","suites":["when user has write access to ML","when calling create endpoint","with existing ML jobs"],"updatePoint":{"line":75,"column":42},"line":75,"code":"          it('skips duplicate job creation', async () => {\n            await createJobs(['production', 'test']);\n            const {\n              body\n            } = await getJobs();\n            expect(countBy(body.jobs, 'environment')).to.eql({\n              production: 1,\n              staging: 1,\n              test: 1\n            });\n          });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all environments","suites":["with environment","with an empty string parameter"],"updatePoint":{"line":21,"column":36},"line":21,"code":"        it('returns all environments', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                field: SERVICE_ENVIRONMENT,\n                string: ''\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n          Object {\n            \"terms\": Array [\n              \"production\",\n              \"testing\",\n            ],\n          }\n        `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with environment","with a string parameter"],"updatePoint":{"line":44,"column":55},"line":44,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                field: SERVICE_ENVIRONMENT,\n                string: 'pr'\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n            Object {\n              \"terms\": Array [\n                \"production\",\n              ],\n            }\n          `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all services","suites":["with service name","with an empty string parameter"],"updatePoint":{"line":68,"column":32},"line":68,"code":"        it('returns all services', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                field: SERVICE_NAME,\n                string: ''\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n              Object {\n                \"terms\": Array [\n                  \"auditbeat\",\n                  \"opbeans-dotnet\",\n                  \"opbeans-go\",\n                  \"opbeans-java\",\n                  \"opbeans-node\",\n                  \"opbeans-python\",\n                  \"opbeans-ruby\",\n                  \"opbeans-rum\",\n                ],\n              }\n            `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with service name","with a string parameter"],"updatePoint":{"line":97,"column":55},"line":97,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                field: SERVICE_NAME,\n                string: 'aud'\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n              Object {\n                \"terms\": Array [\n                  \"auditbeat\",\n                ],\n              }\n            `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all transaction types","suites":["with transaction type","with an empty string parameter"],"updatePoint":{"line":121,"column":41},"line":121,"code":"        it('returns all transaction types', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                field: TRANSACTION_TYPE,\n                string: ''\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n                Object {\n                  \"terms\": Array [\n                    \"Worker\",\n                    \"celery\",\n                    \"page-load\",\n                    \"request\",\n                  ],\n                }\n              `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with transaction type","with a string parameter"],"updatePoint":{"line":146,"column":55},"line":146,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                field: TRANSACTION_TYPE,\n                string: 'w'\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n                Object {\n                  \"terms\": Array [\n                    \"Worker\",\n                  ],\n                }\n              `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":25,"column":27},"line":25,"code":"    it('handles empty state', async () => {\n      const response = await supertest.get(`/internal/apm/traces?start=${start}&end=${end}&environment=ENVIRONMENT_ALL&kuery=`);\n      expect(response.status).to.be(200);\n      expect(response.body.items.length).to.be(0);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct status code","suites":[],"updatePoint":{"line":39,"column":39},"line":39,"code":"    it('returns the correct status code', async () => {\n      expect(response.status).to.be(200);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct number of buckets","suites":[],"updatePoint":{"line":42,"column":45},"line":42,"code":"    it('returns the correct number of buckets', async () => {\n      expectSnapshot(response.body.items.length).toMatchInline(`81`);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct buckets","suites":[],"updatePoint":{"line":45,"column":35},"line":45,"code":"    it('returns the correct buckets', async () => {\n      const sortedItems = sortBy(response.body.items, 'impact');\n      const firstItem = sortedItems[0];\n      const lastItem = sortedItems[sortedItems.length - 1];\n      const groups = sortedItems.map(item => item.key).slice(0, 5);\n      expectSnapshot(sortedItems).toMatch();\n      expectSnapshot(firstItem).toMatchInline(`\n          Object {\n            \"agentName\": \"java\",\n            \"averageResponseTime\": 1639,\n            \"impact\": 0,\n            \"key\": Object {\n              \"service.name\": \"opbeans-java\",\n              \"transaction.name\": \"DispatcherServlet#doPost\",\n            },\n            \"serviceName\": \"opbeans-java\",\n            \"transactionName\": \"DispatcherServlet#doPost\",\n            \"transactionType\": \"request\",\n            \"transactionsPerMinute\": 0.0333333333333333,\n          }\n        `);\n      expectSnapshot(lastItem).toMatchInline(`\n          Object {\n            \"agentName\": \"dotnet\",\n            \"averageResponseTime\": 5963775,\n            \"impact\": 100,\n            \"key\": Object {\n              \"service.name\": \"opbeans-dotnet\",\n              \"transaction.name\": \"GET Orders/Get\",\n            },\n            \"serviceName\": \"opbeans-dotnet\",\n            \"transactionName\": \"GET Orders/Get\",\n            \"transactionType\": \"request\",\n            \"transactionsPerMinute\": 0.633333333333333,\n          }\n        `);\n      expectSnapshot(groups).toMatchInline(`\n          Array [\n            Object {\n              \"service.name\": \"opbeans-java\",\n              \"transaction.name\": \"DispatcherServlet#doPost\",\n            },\n            Object {\n              \"service.name\": \"opbeans-node\",\n              \"transaction.name\": \"POST /api/orders\",\n            },\n            Object {\n              \"service.name\": \"opbeans-node\",\n              \"transaction.name\": \"GET /api/products/:id\",\n            },\n            Object {\n              \"service.name\": \"opbeans-dotnet\",\n              \"transaction.name\": \"POST Orders/Post\",\n            },\n            Object {\n              \"service.name\": \"opbeans-python\",\n              \"transaction.name\": \"GET opbeans.views.product\",\n            },\n          ]\n        `);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":25,"column":31},"line":25,"code":"    it('handles the empty state', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/transaction/charts/breakdown?start=${start}&end=${end}&transactionType=${transactionType}&environment=ENVIRONMENT_ALL&kuery=`);\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        timeseries: []\n      });\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown for a service","suites":[],"updatePoint":{"line":37,"column":55},"line":37,"code":"    it('returns the transaction breakdown for a service', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/transaction/charts/breakdown?start=${start}&end=${end}&transactionType=${transactionType}&environment=ENVIRONMENT_ALL&kuery=`);\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown for a transaction group","suites":[],"updatePoint":{"line":42,"column":65},"line":42,"code":"    it('returns the transaction breakdown for a transaction group', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/transaction/charts/breakdown?start=${start}&end=${end}&transactionType=${transactionType}&transactionName=${transactionName}&environment=ENVIRONMENT_ALL&kuery=`);\n      expect(response.status).to.be(200);\n      const {\n        timeseries\n      } = response.body;\n      const numberOfSeries = timeseries.length;\n      expectSnapshot(numberOfSeries).toMatchInline(`1`);\n      const {\n        title,\n        color,\n        type,\n        data,\n        hideLegend,\n        legendValue\n      } = timeseries[0];\n      const nonNullDataPoints = data.filter(y => y !== null);\n      expectSnapshot(nonNullDataPoints.length).toMatchInline(`61`);\n      expectSnapshot(data.slice(0, 5).map(({\n        x,\n        y\n      }) => {\n        return {\n          x: new Date(x ?? NaN).toISOString(),\n          y\n        };\n      })).toMatchInline(`\n        Array [\n          Object {\n            \"x\": \"2021-08-03T06:50:00.000Z\",\n            \"y\": null,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:50:30.000Z\",\n            \"y\": 1,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:51:00.000Z\",\n            \"y\": null,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:51:30.000Z\",\n            \"y\": 1,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:52:00.000Z\",\n            \"y\": 1,\n          },\n        ]\n      `);\n      expectSnapshot(title).toMatchInline(`\"app\"`);\n      expectSnapshot(color).toMatchInline(`\"#54b399\"`);\n      expectSnapshot(type).toMatchInline(`\"areaStacked\"`);\n      expectSnapshot(hideLegend).toMatchInline(`false`);\n      expectSnapshot(legendValue).toMatchInline(`\"100%\"`);\n      expectSnapshot(data).toMatch();\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown sorted by name","suites":[],"updatePoint":{"line":99,"column":56},"line":99,"code":"    it('returns the transaction breakdown sorted by name', async () => {\n      const response = await supertest.get(`/internal/apm/services/opbeans-node/transaction/charts/breakdown?start=${start}&end=${end}&transactionType=${transactionType}&environment=ENVIRONMENT_ALL&kuery=`);\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body.timeseries.map(serie => serie.title)).toMatchInline(`\n          Array [\n            \"app\",\n            \"http\",\n            \"postgresql\",\n            \"redis\",\n          ]\n        `);\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.percentileThresholdValue).to.be(undefined);\n      expect(response.body?.overallHistogram?.length).to.be(undefined);\n    });","file":"apm_api_integration/tests/transactions/latency_overall_distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns percentileThresholdValue and overall histogram","suites":[],"updatePoint":{"line":47,"column":62},"line":47,"code":"    it('returns percentileThresholdValue and overall histogram', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200); // This matches the values returned for the other tab's search strategy approach in `../correlations/*`.\n\n      expect(response.body?.percentileThresholdValue).to.be(1309695.875);\n      expect(response.body?.overallHistogram?.length).to.be(101);\n    });","file":"apm_api_integration/tests/transactions/latency_overall_distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":32,"column":27},"line":32,"code":"    it('handles empty state', async () => {\n      const response = await supertest.get(url);\n      expect(response.status).to.be(200);\n      expect(response.body.traceSamples.length).to.be(0);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct metadata","suites":[],"updatePoint":{"line":46,"column":36},"line":46,"code":"    it('returns the correct metadata', () => {\n      expect(response.status).to.be(200);\n      expect(response.body.traceSamples.length).to.be.greaterThan(0);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct number of samples","suites":[],"updatePoint":{"line":50,"column":45},"line":50,"code":"    it('returns the correct number of samples', () => {\n      expectSnapshot(response.body.traceSamples.length).toMatchInline(`15`);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct samples","suites":[],"updatePoint":{"line":53,"column":35},"line":53,"code":"    it('returns the correct samples', () => {\n      const {\n        traceSamples\n      } = response.body;\n      expectSnapshot(sortBy(traceSamples, sample => sample.traceId)).toMatchInline(`\n          Array [\n            Object {\n              \"traceId\": \"0996b09e42ad4dbfaaa6a069326c6e66\",\n              \"transactionId\": \"5721364b179716d0\",\n            },\n            Object {\n              \"traceId\": \"10d882b7118870015815a27c37892375\",\n              \"transactionId\": \"0cf9db0b1e321239\",\n            },\n            Object {\n              \"traceId\": \"2ca82e99453c58584c4b8de9a8ba4ec3\",\n              \"transactionId\": \"8fa2ca73976ce1e7\",\n            },\n            Object {\n              \"traceId\": \"45b3d1a86003938687a55e49bf3610b8\",\n              \"transactionId\": \"a707456bda99ee98\",\n            },\n            Object {\n              \"traceId\": \"4943691f87b7eb97d442d1ef33ca65c7\",\n              \"transactionId\": \"f6f4677d731e57c5\",\n            },\n            Object {\n              \"traceId\": \"5267685738bf75b68b16bf3426ba858c\",\n              \"transactionId\": \"5223f43bc3154c5a\",\n            },\n            Object {\n              \"traceId\": \"66bd97c457f5675665397ac9201cc050\",\n              \"transactionId\": \"592b60cc9ddabb15\",\n            },\n            Object {\n              \"traceId\": \"6d85d8f1bc4bbbfdb19cdba59d2fc164\",\n              \"transactionId\": \"d0a16f0f52f25d6b\",\n            },\n            Object {\n              \"traceId\": \"7483bd52150d1c93a858c60bfdd0c138\",\n              \"transactionId\": \"e20e701ff93bdb55\",\n            },\n            Object {\n              \"traceId\": \"9a84d15e5a0e32098d569948474e8e2f\",\n              \"transactionId\": \"b85db78a9824107b\",\n            },\n            Object {\n              \"traceId\": \"a21ea39b41349a4614a86321d965c957\",\n              \"transactionId\": \"338bd7908cbf7f2d\",\n            },\n            Object {\n              \"traceId\": \"ca7a2072e7974ae84b5096706c6b6255\",\n              \"transactionId\": \"92ab7f2ef11685dd\",\n            },\n            Object {\n              \"traceId\": \"d250e2a1bad40f78653d8858db65326b\",\n              \"transactionId\": \"6fcd12599c1b57fa\",\n            },\n            Object {\n              \"traceId\": \"d9415d102c0634e1e8fa53ceef07be70\",\n              \"transactionId\": \"fab91c68c9b1c42b\",\n            },\n            Object {\n              \"traceId\": \"e123f0466fa092f345d047399db65aa2\",\n              \"transactionId\": \"c0af16286229d811\",\n            },\n          ]\n        `);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"PNG that matches the baseline","suites":["Captures"],"updatePoint":{"line":24,"column":37},"line":24,"code":"    it('PNG that matches the baseline', async () => {\n      await PageObjects.common.navigateToApp(appId);\n      await (await testSubjects.find('shareButton')).click();\n      await (await testSubjects.find('captureTestPanel')).click();\n      await (await testSubjects.find('captureTestPNG')).click();\n      await PageObjects.reporting.clickGenerateReportButton();\n      const url = await PageObjects.reporting.getReportURL(60000);\n      const captureData = await PageObjects.reporting.getRawPdfReportData(url);\n      const pngSessionFilePath = await compareImages.writeToSessionFile('capture_test_baseline_a', captureData);\n      expect(await compareImages.checkIfPngsMatch(pngSessionFilePath, fixtures.baselineAPng)).to.be.lessThan(0.09);\n    });","file":"examples/reporting_examples/capture_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"loads workpad list","suites":["smoke test"],"updatePoint":{"line":29,"column":26},"line":29,"code":"    it('loads workpad list', async () => {\n      await retry.try(async () => {\n        const workpadRows = await testSubjects.findAll(workpadListSelector);\n        expect(workpadRows).to.have.length(1);\n        expect(await workpadRows[0].getVisibleText()).to.equal('Test Workpad');\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"loads workpage when clicked","suites":["smoke test"],"updatePoint":{"line":36,"column":35},"line":36,"code":"    it('loads workpage when clicked', async () => {\n      // click the first workpad in the list to load it\n      await testSubjects.click(workpadListSelector); // wait for the workpad page to load\n\n      await retry.waitFor('workpad page', () => testSubjects.exists('canvasWorkpadPage')); // check that workpad loaded in url\n\n      await retry.try(async () => {\n        const url = await browser.getCurrentUrl(); // remove all the search params, just compare the route\n\n        const hashRoute = new URL(url).hash.split('?')[0];\n        expect(hashRoute).to.equal(`#/workpad/${testWorkpadId}/page/1`);\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"renders elements on workpad","suites":["smoke test"],"updatePoint":{"line":49,"column":35},"line":49,"code":"    it('renders elements on workpad', async () => {\n      await retry.try(async () => {\n        // check for elements on the page\n        const elements = await testSubjects.findAll('canvasWorkpadPage > canvasWorkpadPageElementContent');\n        expect(elements).to.have.length(4); // check that the elements are what we expect\n        // first is a markdown element\n\n        const md = await elements[0].findByCssSelector('.canvasMarkdown');\n        expect(await md.getVisibleText()).to.contain('Welcome to Canvas'); // second element is a datatable that uses essql\n\n        const serverRows = await elements[1].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(serverRows).to.have.length(10); // third is a datatable that uses csv\n\n        const commonRows = await elements[2].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(commonRows).to.have.length(2); // fourth is a datatable that uses timelion\n\n        const timelionRows = await elements[3].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(timelionRows).to.have.length(12);\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with controls from 8.0.0","suites":["Export import saved objects between versions"],"updatePoint":{"line":43,"column":67},"line":43,"code":"    it('should be able to import dashboard with controls from 8.0.0', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await savedObjects.checkImportSucceeded();\n      await savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":48,"column":49},"line":48,"code":"    it('should render all panels on the dashboard', async () => {\n      await dashboardControls.enableControlsLab();\n      await common.navigateToApp('dashboard');\n      await dashboard.loadSavedDashboard('[8.0.0] Controls Dashboard'); // dashboard should load properly\n\n      await dashboard.expectOnDashboard('[8.0.0] Controls Dashboard');\n      await dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"loads all controls from the saved dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":59,"column":51},"line":59,"code":"    it('loads all controls from the saved dashboard', async () => {\n      expect(await dashboardControls.getControlsCount()).to.be(2);\n      expect(await dashboardControls.getAllControlTitles()).to.eql(['Speaker Name', 'Play Name']);\n      const ids = await dashboardControls.getAllControlIds();\n\n      for (const id of ids) {\n        await dashboardControls.optionsListOpenPopover(id);\n        await retry.try(async () => {\n          // Value counts should be 10, because there are more than 10 speakers and plays in the data set\n          expect(await dashboardControls.optionsListPopoverGetAvailableOptionsCount()).to.be(10);\n        });\n        await dashboardControls.optionsListEnsurePopoverIsClosed(id);\n      }\n    });","file":"functional/apps/dashboard/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"applies default selected options list options to control","suites":["Export import saved objects between versions"],"updatePoint":{"line":73,"column":64},"line":73,"code":"    it('applies default selected options list options to control', async () => {\n      const controlIds = await dashboardControls.getAllControlIds();\n      const selectionString = await dashboardControls.optionsListGetSelectionsString(controlIds[0]);\n      expect(selectionString).to.be('HAMLET, ROMEO, JULIET, BRUTUS');\n    });","file":"functional/apps/dashboard/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"applies default selected options list options to dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":78,"column":66},"line":78,"code":"    it('applies default selected options list options to dashboard', async () => {\n      // because 4 selections are made on the control, the pie chart should only show 4 slices.\n      expect(await pieChart.getPieSliceCount()).to.be(4);\n    });","file":"functional/apps/dashboard/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with various Lens panels from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":35,"column":79},"line":35,"code":"    it('should be able to import dashboard with various Lens panels from 7.12.1', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":40,"column":49},"line":40,"code":"    it('should render all panels on the dashboard', async () => {\n      await PageObjects.common.navigateToApp('dashboard');\n      await PageObjects.dashboard.loadSavedDashboard('[7.12.1] Lens By Value Test Dashboard'); // dashboard should load properly\n\n      await PageObjects.dashboard.expectOnDashboard('[7.12.1] Lens By Value Test Dashboard');\n      await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":50},"line":50,"code":"    it('should show the edit action for all panels', async () => {\n      await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n      const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n      for (const title of panelTitles) {\n        await dashboardPanelActions.expectExistsEditPanelAction(title);\n      }\n    });","file":"functional/apps/dashboard/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":59,"column":54},"line":59,"code":"    it('should retain all panel drilldowns from 7.12.1', async () => {\n      // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n      const totalPanels = await PageObjects.dashboard.getPanelCount();\n      let panelsWithDrilldowns = 0;\n\n      for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n        if ((await PageObjects.dashboard.getPanelDrilldownCount(panelIndex)) === 1) {\n          panelsWithDrilldowns++;\n        }\n      }\n\n      expect(panelsWithDrilldowns).to.be(2);\n    });","file":"functional/apps/dashboard/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with TSVB panels from 7.12.1","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":28,"column":73},"line":28,"code":"      it('should be able to import dashboard with TSVB panels from 7.12.1', async () => {\n        // this will catch cases where there is an error in the migrations.\n        await PageObjects.savedObjects.checkImportSucceeded();\n        await PageObjects.savedObjects.clickImportDone();\n      });","file":"functional/apps/dashboard/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":33,"column":51},"line":33,"code":"      it('should render all panels on the dashboard', async () => {\n        await PageObjects.common.navigateToApp('dashboard');\n        await PageObjects.dashboard.loadSavedDashboard('TSVB Index Pattern Smoke Test'); // dashboard should load properly\n\n        await PageObjects.dashboard.expectOnDashboard('TSVB Index Pattern Smoke Test');\n        await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n        const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n        expect(errorEmbeddables.length).to.be(0);\n      });","file":"functional/apps/dashboard/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":43,"column":52},"line":43,"code":"      it('should show the edit action for all panels', async () => {\n        await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n        const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n        for (const title of panelTitles) {\n          await dashboardPanelActions.expectExistsEditPanelAction(title);\n        }\n      });","file":"functional/apps/dashboard/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":52,"column":56},"line":52,"code":"      it('should retain all panel drilldowns from 7.12.1', async () => {\n        // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n        const totalPanels = await PageObjects.dashboard.getPanelCount();\n        let panelsWithDrilldowns = 0;\n        let drilldownCount = 0;\n\n        for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n          const panelDrilldownCount = await PageObjects.dashboard.getPanelDrilldownCount(panelIndex);\n\n          if (panelDrilldownCount >= 1) {\n            panelsWithDrilldowns++;\n          }\n\n          drilldownCount += await PageObjects.dashboard.getPanelDrilldownCount(panelIndex);\n        }\n\n        expect(panelsWithDrilldowns).to.be(2);\n        expect(drilldownCount).to.be(3);\n      });","file":"functional/apps/dashboard/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with TSVB panels from 7.13.3","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":84,"column":73},"line":84,"code":"      it('should be able to import dashboard with TSVB panels from 7.13.3', async () => {\n        // this will catch cases where there is an error in the migrations.\n        await PageObjects.savedObjects.checkImportSucceeded();\n        await PageObjects.savedObjects.clickImportDone();\n      });","file":"functional/apps/dashboard/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":89,"column":51},"line":89,"code":"      it('should render all panels on the dashboard', async () => {\n        await PageObjects.common.navigateToApp('dashboard');\n        await PageObjects.dashboard.loadSavedDashboard('TSVB 7.13.3'); // dashboard should load properly\n\n        await PageObjects.dashboard.expectOnDashboard('TSVB 7.13.3');\n        await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n        const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n        expect(errorEmbeddables.length).to.be(0);\n      });","file":"functional/apps/dashboard/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":99,"column":52},"line":99,"code":"      it('should show the edit action for all panels', async () => {\n        await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n        const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n        for (const title of panelTitles) {\n          await dashboardPanelActions.expectExistsEditPanelAction(title);\n        }\n      });","file":"functional/apps/dashboard/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with various Visualize panels from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":35,"column":84},"line":35,"code":"    it('should be able to import dashboard with various Visualize panels from 7.12.1', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":40,"column":49},"line":40,"code":"    it('should render all panels on the dashboard', async () => {\n      await PageObjects.common.navigateToApp('dashboard');\n      await PageObjects.dashboard.loadSavedDashboard('[7.12.1] Visualize Test Dashboard'); // dashboard should load properly\n\n      await PageObjects.dashboard.expectOnDashboard('[7.12.1] Visualize Test Dashboard');\n      await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":50},"line":50,"code":"    it('should show the edit action for all panels', async () => {\n      await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n      const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n      for (const title of panelTitles) {\n        await dashboardPanelActions.expectExistsEditPanelAction(title);\n      }\n    });","file":"functional/apps/dashboard/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":59,"column":54},"line":59,"code":"    it('should retain all panel drilldowns from 7.12.1', async () => {\n      // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n      const totalPanels = await PageObjects.dashboard.getPanelCount();\n      let panelsWithDrilldowns = 0;\n\n      for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n        if ((await PageObjects.dashboard.getPanelDrilldownCount(panelIndex)) === 1) {\n          panelsWithDrilldowns++;\n        }\n      }\n\n      expect(panelsWithDrilldowns).to.be(2);\n    });","file":"functional/apps/dashboard/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"create and save a new watch","suites":["watcher_test"],"updatePoint":{"line":61,"column":35},"line":61,"code":"    it('create and save a new watch', async () => {\n      await PageObjects.watcher.createWatch(watchID, watchName);\n      const watch = await PageObjects.watcher.getWatch(watchID);\n      expect(watch.id).to.be(watchID);\n      expect(watch.name).to.be(watchName);\n    });","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should not allow a user to save a watch with the same ID","suites":["watcher_test"],"updatePoint":{"line":67,"column":64},"line":67,"code":"    it('should not allow a user to save a watch with the same ID', async () => {\n      await PageObjects.watcher.createWatch(watchID, updatedName);\n      const errorCallout = await testSubjects.find('sectionErrorMessage');\n      const errorCalloutText = await errorCallout.getVisibleText();\n      expect(errorCalloutText).to.be(`There is already a watch with ID '${watchID}'.`);\n    }); //delete the watch","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should delete the watch","suites":["watcher_test"],"updatePoint":{"line":74,"column":31},"line":74,"code":"    it('should delete the watch', async () => {\n      // Navigate to the main list page\n      await PageObjects.common.navigateToApp('watcher');\n      const watchList = keyBy(await PageObjects.watcher.getWatches(), 'id');\n      log.debug(watchList);\n      expect(watchList.watchID.name).to.eql([watchName]);\n      await PageObjects.watcher.deleteWatch(watchID);\n      await testSubjects.click('confirmModalConfirmButton');\n      await PageObjects.header.waitUntilLoadingHasFinished();\n      await retry.try(async () => {\n        const emptyPrompt = await testSubjects.find('emptyPrompt');\n        const emptyPromptText = await emptyPrompt.getVisibleText();\n        expect(emptyPromptText).to.contain('You don’t have any watches yet\\n');\n      });\n    });","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"can navigate to APM app","suites":["APM smoke test"],"updatePoint":{"line":25,"column":31},"line":25,"code":"    it('can navigate to APM app', async () => {\n      await testSubjects.existOrFail('apmMainContainer', {\n        timeout: 10000\n      }); // wait for this last change on the page;\n      // <caption class=\"euiScreenReaderOnly euiTableCaption\">This table contains 1 rows out of 1 rows; Page 1 of 1.</caption>\n      // but \"<caption class=\"euiScreenReaderOnly euiTableCaption\">\" always exists so we have to wait until there's text\n\n      await retry.waitForWithTimeout('The APM table has a caption', 5000, async () => {\n        return (await (await find.byCssSelector('caption')).getAttribute('innerHTML')).includes('This table contains ');\n      });\n      await find.clickByDisplayedLinkText('apm-a-rum-test-e2e-general-usecase');\n      log.debug('### apm smoke test passed');\n      await find.clickByLinkText('general-usecase-initial-p-load');\n      log.debug('### general use case smoke test passed');\n    });","file":"stack_functional_integration/apps/apm/apm_smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should display tabs in the ML app correctly","suites":["ML smoke test should check all the tabs"],"updatePoint":{"line":17,"column":51},"line":17,"code":"    it('should display tabs in the ML app correctly', async () => {\n      await ml.testExecution.logTestStep('should load the ML app');\n      await ml.navigation.navigateToMl();\n      await ml.testExecution.logTestStep('should display the enabled \"Overview\" tab');\n      await ml.navigation.assertOverviewTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Anomaly Detection\" tab');\n      await ml.navigation.assertAnomalyDetectionTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Data Frame Analytics\" tab');\n      await ml.navigation.assertDataFrameAnalyticsTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Data Visualizer\" tab');\n      await ml.navigation.assertDataVisualizerTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Settings\" tab');\n      await ml.navigation.assertSettingsTabEnabled(true);\n    });","file":"stack_functional_integration/apps/ml/ml_smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should display Add agent button and Healthy agent once Fleet Agent page loaded","suites":["Fleet startup"],"updatePoint":{"line":13,"column":84},"line":13,"code":"  it('should display Add agent button and Healthy agent once Fleet Agent page loaded', () => {\n    cy.getBySel(ADD_AGENT_BUTTON).contains('Add agent');\n    cy.get('.euiBadge').contains('Healthy');\n  });","file":"integration/fleet_startup.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should display default agent policies on agent policies tab","suites":["Fleet startup"],"updatePoint":{"line":17,"column":65},"line":17,"code":"  it('should display default agent policies on agent policies tab', () => {\n    cy.getBySel(AGENT_POLICIES_TAB).click();\n    cy.get('.euiLink').contains('Default policy');\n    cy.get('.euiLink').contains('Default Fleet Server policy');\n  });","file":"integration/fleet_startup.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should display default tokens on enrollment tokens tab","suites":["Fleet startup"],"updatePoint":{"line":22,"column":60},"line":22,"code":"  it('should display default tokens on enrollment tokens tab', () => {\n    cy.getBySel(ENROLLMENT_TOKENS_TAB).click();\n    cy.get('.euiTableRow').should('have.length', 2);\n    cy.get('.euiTableRowCell').contains('Default policy');\n    cy.get('.euiTableRowCell').contains('Default Fleet Server policy');\n  });","file":"integration/fleet_startup.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should display Apache integration in the Policies list once installed ","suites":["Add Integration","Real API"],"updatePoint":{"line":16,"column":78},"line":16,"code":"    it('should display Apache integration in the Policies list once installed ', () => {\n      addAndVerifyIntegration();\n    });","file":"integration/integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should upgrade policies with integration update","suites":["Add Integration","Real API"],"updatePoint":{"line":19,"column":55},"line":19,"code":"    it('should upgrade policies with integration update', () => {\n      const oldVersion = '0.3.3';\n      installPackageWithVersion('apache', oldVersion);\n      navigateTo(`app/integrations/detail/apache-${oldVersion}/policies`);\n      addIntegration();\n      cy.getBySel(INTEGRATION_NAME_LINK).contains('apache-');\n      cy.getBySel(PACKAGE_VERSION).contains(oldVersion);\n      clickIfVisible(FLYOUT_CLOSE_BTN_SEL);\n      cy.getBySel(SETTINGS_TAB).click();\n      cy.getBySel(UPDATE_PACKAGE_BTN).click();\n      cy.getBySel(CONFIRM_MODAL_BTN).click();\n      cy.getBySel(LATEST_VERSION).then($title => {\n        const newVersion = $title.text();\n        cy.get('#upgradePoliciesCheckbox').should('not.exist');\n        cy.getBySel(POLICIES_TAB).click();\n        cy.getBySel(PACKAGE_VERSION).contains(oldVersion).should('not.exist');\n        cy.getBySel(PACKAGE_VERSION).contains(newVersion);\n      });\n    });","file":"integration/integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"[Mocked requests] should display Apache integration in the Policies list once installed ","suites":["Add Integration","Real API"],"line":51,"code":"  it.skip('[Mocked requests] should display Apache integration in the Policies list once installed ', () => {","file":"integration/integrations.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should open Osquery app","suites":["Add Integration"],"line":16,"code":"  it.skip('should open Osquery app', () => {","file":"integration/integration.spec.ts","skipped":true,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should display Osquery integration in the Policies list once installed ","suites":["Add Integration"],"updatePoint":{"line":39,"column":77},"line":39,"code":"  it('should display Osquery integration in the Policies list once installed ', () => {\n    addAndVerifyIntegration();\n  });","file":"integration/integration.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should run live query","suites":["Add Integration"],"line":42,"code":"  it.skip('should run live query', () => {","file":"integration/integration.spec.ts","skipped":true,"dir":"x-pack/plugins/osquery/cypress"},{"name":"Displays the unmapped field on the JSON view","suites":["Alert details with unmapped fields"],"updatePoint":{"line":28,"column":50},"line":28,"code":"  it('Displays the unmapped field on the JSON view', () => {\n    const expectedUnmappedValue = 'This is the unmapped field';\n    openJsonView();\n    cy.get(JSON_TEXT).then(x => {\n      const parsed = JSON.parse(x.text());\n      expect(parsed._source.unmapped).to.equal(expectedUnmappedValue);\n    });\n  });","file":"ccs_integration/detection_alerts/alerts_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"EQL rule on remote indices generates alerts","suites":["Detection rules"],"updatePoint":{"line":22,"column":49},"line":22,"code":"  it('EQL rule on remote indices generates alerts', function () {\n    esArchiverCCSLoad('linux_process');\n    this.rule = getCCSEqlRule();\n    createEventCorrelationRule(this.rule);\n    loginAndWaitForPageWithoutDateRange(DETECTIONS_RULE_MANAGEMENT_URL);\n    waitForRulesTableToBeLoaded();\n    filterByCustomRules();\n    goToRuleDetails();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfAlerts);\n    cy.get(ALERT_DATA_GRID).invoke('text').then(text => {\n      cy.log('ALERT_DATA_GRID', text);\n      expect(text).contains(this.rule.name);\n      expect(text).contains(this.rule.severity.toLowerCase());\n      expect(text).contains(this.rule.riskScore);\n    });\n  });","file":"ccs_integration/detection_rules/event_correlation_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"attach timeline to a new case","suites":["attach timeline to case","without cases created"],"updatePoint":{"line":23,"column":37},"line":23,"code":"    it('attach timeline to a new case', function () {\n      loginAndWaitForTimeline(this.myTimeline.savedObjectId);\n      attachTimelineToNewCase();\n      cy.location('origin').then(origin => {\n        cy.get(DESCRIPTION_INPUT).should('have.text', `[${this.myTimeline.title}](${origin}/app/security/timelines?timeline=(id:%27${this.myTimeline.savedObjectId}%27,isOpen:!t))`);\n      });\n    });","file":"integration/cases/attach_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"attach timeline to an existing case with no case","suites":["attach timeline to case","without cases created"],"updatePoint":{"line":30,"column":56},"line":30,"code":"    it('attach timeline to an existing case with no case', function () {\n      loginAndWaitForTimeline(this.myTimeline.savedObjectId);\n      attachTimelineToExistingCase();\n      addNewCase();\n      cy.location('origin').then(origin => {\n        cy.get(DESCRIPTION_INPUT).should('have.text', `[${this.myTimeline.title}](${origin}/app/security/timelines?timeline=(id:%27${this.myTimeline.savedObjectId}%27,isOpen:!t))`);\n      });\n    });","file":"integration/cases/attach_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"attach timeline to an existing case","suites":["attach timeline to case","with cases created"],"updatePoint":{"line":45,"column":43},"line":45,"code":"    it('attach timeline to an existing case', function () {\n      loginAndWaitForTimeline(this.timelineId);\n      attachTimelineToExistingCase();\n      selectCase(this.caseId);\n      cy.location('origin').then(origin => {\n        cy.get(ADD_COMMENT_INPUT).should('have.text', `[${getTimeline().title}](${origin}/app/security/timelines?timeline=(id:%27${this.timelineId}%27,isOpen:!t))`);\n      });\n    });","file":"integration/cases/attach_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Correct incident fields show when connector is changed","suites":["Cases connector incident fields"],"updatePoint":{"line":34,"column":60},"line":34,"code":"  it('Correct incident fields show when connector is changed', () => {\n    loginAndWaitForPageWithoutDateRange(CASES_URL);\n    goToCreateNewCase();\n    fillCasesMandatoryfields(getCase1());\n    fillJiraConnectorOptions(getJiraConnectorOptions());\n    fillServiceNowConnectorOptions(getServiceNowConnectorOptions());\n    fillIbmResilientConnectorOptions(getIbmResilientConnectorOptions());\n    createCase();\n    cy.get(CONNECTOR_TITLE).should('have.text', getIbmResilientConnectorOptions().title);\n    cy.get(CONNECTOR_CARD_DETAILS).should('have.text', `${getIbmResilientConnectorOptions().title}Incident Types: ${getIbmResilientConnectorOptions().incidentTypes.join(', ')}Severity: ${getIbmResilientConnectorOptions().severity}`);\n  });","file":"integration/cases/connector_options.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Configures a new connector","suites":["Cases connectors"],"updatePoint":{"line":87,"column":32},"line":87,"code":"  it('Configures a new connector', () => {\n    loginAndWaitForPageWithoutDateRange(CASES_URL);\n    goToEditExternalConnection();\n    openAddNewConnectorOption();\n    addServiceNowConnector(snConnector);\n    cy.wait('@createConnector').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.get(TOASTER).should('have.text', \"Created 'New connector'\");\n      cy.get(TOASTER).should('not.exist');\n      selectLastConnectorCreated(response?.body.id);\n      cy.wait('@saveConnector', {\n        timeout: 10000\n      }).its('response.statusCode').should('eql', 200);\n      cy.get(SERVICE_NOW_MAPPING).first().should('have.text', 'short_description');\n      cy.get(TOASTER).should('have.text', 'Saved external connection settings');\n    });\n  });","file":"integration/cases/connectors.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"User  with role(s)  can create a case","suites":["Cases privileges"],"updatePoint":{"line":47,"column":81},"line":47,"code":"    it(`User ${user.username} with role(s) ${user.roles.join()} can create a case`, () => {\n      loginWithUserAndWaitForPageWithoutDateRange(CASES_URL, user);\n      goToCreateNewCase();\n      fillCasesMandatoryfields(testCase);\n      createCase();\n      backToCases();\n      filterStatusOpen();\n      cy.get(ALL_CASES_NAME).should('have.text', testCase.name);\n    });","file":"integration/cases/privileges.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds field to alert table","suites":["Create DataView runtime field"],"updatePoint":{"line":23,"column":31},"line":23,"code":"  it('adds field to alert table', () => {\n    const fieldName = 'field.name.alert.page';\n    loginAndWaitForPage(ALERTS_URL);\n    waitForAlertsPanelToBeLoaded();\n    waitForAlertsIndexToBeCreated();\n    createCustomRuleActivated(getNewRule());\n    refreshPage();\n    waitForAlertsToPopulate(500);\n    openEventsViewerFieldsBrowser();\n    createField(fieldName);\n    assertFieldDisplayed(fieldName, 'alerts');\n  });","file":"integration/data_sources/create_runtime_field.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds field to timeline","suites":["Create DataView runtime field"],"updatePoint":{"line":35,"column":28},"line":35,"code":"  it('adds field to timeline', () => {\n    const fieldName = 'field.name.timeline';\n    loginAndWaitForPage(HOSTS_URL);\n    openTimelineUsingToggle();\n    populateTimeline();\n    openTimelineFieldsBrowser();\n    createField(fieldName);\n    assertFieldDisplayed(fieldName);\n  });","file":"integration/data_sources/create_runtime_field.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"role(s)  shows error when user does not have permissions","suites":["Sourcerer","permissions"],"updatePoint":{"line":33,"column":99},"line":33,"code":"    it(`role(s) ${secReadCasesAllUser.roles.join()} shows error when user does not have permissions`, () => {\n      loginWithUserAndWaitForPageWithoutDateRange(HOSTS_URL, secReadCasesAllUser);\n      cy.get(TOASTER).should('have.text', 'Write role required to generate data');\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"correctly loads SIEM data view","suites":["Sourcerer","Default scope"],"updatePoint":{"line":43,"column":38},"line":43,"code":"    it('correctly loads SIEM data view', () => {\n      openSourcerer();\n      isDataViewSelection(siemDataViewTitle);\n      openAdvancedSettings();\n      isSourcererSelection(`auditbeat-*`);\n      isSourcererOptions(DEFAULT_INDEX_PATTERN.filter(pattern => pattern !== 'auditbeat-*'));\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selecting new data view does not add a modified badge","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":51,"column":63},"line":51,"code":"      it('Selecting new data view does not add a modified badge', () => {\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n        openDataViewSelection();\n        isKibanaDataViewOption(dataViews);\n        cy.get(SOURCERER.selectListDefaultOption).should(`contain`, siemDataViewTitle);\n        cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n        isDataViewSelection(dataViews[1]);\n        saveSourcerer();\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n      });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows modified badge when index patterns change and removes when reset","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":65,"column":80},"line":65,"code":"      it('shows modified badge when index patterns change and removes when reset', () => {\n        openSourcerer();\n        openDataViewSelection();\n        cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n        isDataViewSelection(dataViews[1]);\n        openAdvancedSettings();\n        const patterns = dataViews[1].split(',');\n        deselectSourcererOptions([patterns[0]]);\n        saveSourcerer();\n        cy.get(SOURCERER.badgeModified).should(`exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`exist`);\n        resetSourcerer();\n        saveSourcerer();\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n        isDataViewSelection(siemDataViewTitle);\n      });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"disables save when no patterns are selected","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":85,"column":51},"line":85,"code":"    it('disables save when no patterns are selected', () => {\n      openSourcerer();\n      openAdvancedSettings();\n      cy.get(SOURCERER.saveButton).should('be.enabled');\n      deselectSourcererOptions(['auditbeat-*']);\n      cy.get(SOURCERER.saveButton).should('be.disabled');\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds a pattern to the default index and correctly filters out auditbeat-*","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":92,"column":81},"line":92,"code":"    it('adds a pattern to the default index and correctly filters out auditbeat-*', () => {\n      openSourcerer();\n      isSourcererSelection(`auditbeat-*`);\n      isNotSourcererSelection('beats*');\n      addIndexToDefault('beats*');\n      isHostsStatValue('4 ');\n      openSourcerer();\n      openAdvancedSettings();\n      isSourcererSelection(`auditbeat-*`);\n      isSourcererSelection('beats*');\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"correctly loads SIEM data view before and after signals index exists","suites":["Timeline scope"],"updatePoint":{"line":110,"column":74},"line":110,"code":"  it('correctly loads SIEM data view before and after signals index exists', () => {\n    openTimelineUsingToggle();\n    openSourcerer('timeline');\n    isDataViewSelection(siemDataViewTitle);\n    openAdvancedSettings();\n    isSourcererSelection(`auditbeat-*`);\n    isNotSourcererSelection(`${DEFAULT_ALERTS_INDEX}-default`);\n    isSourcererOptions([...DEFAULT_INDEX_PATTERN, `${DEFAULT_ALERTS_INDEX}-default`].filter(pattern => pattern !== 'auditbeat-*'));\n    waitForAlertsIndexToExist();\n    isSourcererOptions(DEFAULT_INDEX_PATTERN.filter(pattern => pattern !== 'auditbeat-*'));\n    isNotSourcererOption(`${DEFAULT_ALERTS_INDEX}-default`);\n  });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selecting new data view does not add a modified badge","suites":["Timeline scope","Modified badge"],"updatePoint":{"line":123,"column":61},"line":123,"code":"    it('Selecting new data view does not add a modified badge', () => {\n      openTimelineUsingToggle();\n      cy.get(SOURCERER.badgeModified).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n      openDataViewSelection();\n      isKibanaDataViewOption(dataViews);\n      cy.get(SOURCERER.selectListDefaultOption).should(`contain`, siemDataViewTitle);\n      cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n      isDataViewSelection(dataViews[1]);\n      saveSourcerer();\n      cy.get(SOURCERER.badgeModified).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows modified badge when index patterns change and removes when reset","suites":["Timeline scope","Modified badge"],"updatePoint":{"line":138,"column":78},"line":138,"code":"    it('shows modified badge when index patterns change and removes when reset', () => {\n      openTimelineUsingToggle();\n      openSourcerer('timeline');\n      openDataViewSelection();\n      cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n      isDataViewSelection(dataViews[1]);\n      openAdvancedSettings();\n      const patterns = dataViews[1].split(',');\n      deselectSourcererOptions([patterns[0]]);\n      saveSourcerer();\n      cy.get(SOURCERER.badgeModified).should(`exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`exist`);\n      resetSourcerer();\n      saveSourcerer();\n      cy.get(SOURCERER.badgeModified).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n      isDataViewSelection(siemDataViewTitle);\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Modifies timeline to alerts only, and switches to different saved timeline without issue","suites":["Timeline scope","Alerts checkbox"],"updatePoint":{"line":168,"column":96},"line":168,"code":"    it('Modifies timeline to alerts only, and switches to different saved timeline without issue', function () {\n      openTimelineById(this.timelineId).then(() => {\n        cy.get(SOURCERER.badgeAlerts).should(`not.exist`);\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer('timeline');\n        clickAlertCheckbox();\n        saveSourcerer();\n        cy.get(SOURCERER.badgeAlerts).should(`exist`);\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        closeTimeline();\n        openTimelineById(this.auditbeatTimelineId).then(() => {\n          cy.get(SOURCERER.badgeModified).should(`exist`);\n          cy.get(SOURCERER.badgeAlerts).should(`not.exist`);\n          openSourcerer('timeline');\n          openAdvancedSettings();\n          isSourcererSelection(`auditbeat-*`);\n        });\n      });\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"alerts checkbox behaves as expected","suites":["Timeline scope","Alerts checkbox"],"updatePoint":{"line":188,"column":43},"line":188,"code":"    it('alerts checkbox behaves as expected', () => {\n      isDataViewSelection(siemDataViewTitle);\n      defaultPatterns.forEach(pattern => isSourcererSelection(pattern));\n      openDataViewSelection();\n      cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n      isDataViewSelection(dataViews[1]);\n      dataViews[1].split(',').filter(pattern => pattern !== 'fakebeat-*').forEach(pattern => isSourcererSelection(pattern));\n      clickAlertCheckbox();\n      isNotSourcererSelection(`auditbeat-*`);\n      isSourcererSelection(`${DEFAULT_ALERTS_INDEX}-default`);\n      cy.get(SOURCERER.alertCheckbox).uncheck({\n        force: true\n      });\n      defaultPatterns.forEach(pattern => isSourcererSelection(pattern));\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows alerts badge when index patterns change and removes when reset","suites":["Timeline scope","Alerts checkbox"],"updatePoint":{"line":203,"column":76},"line":203,"code":"    it('shows alerts badge when index patterns change and removes when reset', () => {\n      clickAlertCheckbox();\n      saveSourcerer();\n      cy.get(SOURCERER.badgeAlerts).should(`exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeAlertsOption).should(`exist`);\n      resetSourcerer();\n      saveSourcerer();\n      cy.get(SOURCERER.badgeAlerts).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeAlertsOption).should(`not.exist`);\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Mark one alert as acknowledged when more than one open alerts are selected","suites":["Marking alerts as acknowledged"],"updatePoint":{"line":26,"column":80},"line":26,"code":"  it('Mark one alert as acknowledged when more than one open alerts are selected', () => {\n    cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n      const numberOfAlerts = alertNumberString.split(' ')[0];\n      const numberOfAlertsToBeMarkedAcknowledged = 1;\n      const numberOfAlertsToBeSelected = 3;\n      cy.get(TAKE_ACTION_POPOVER_BTN).should('not.exist');\n      selectNumberOfAlerts(numberOfAlertsToBeSelected);\n      cy.get(TAKE_ACTION_POPOVER_BTN).should('exist');\n      markAcknowledgedFirstAlert();\n      const expectedNumberOfAlerts = +numberOfAlerts - numberOfAlertsToBeMarkedAcknowledged;\n      cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlerts} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlerts}`);\n      goToAcknowledgedAlerts();\n      waitForAlerts();\n      cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeMarkedAcknowledged} alert`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlertsToBeMarkedAcknowledged}`);\n    });\n  });","file":"integration/detection_alerts/acknowledged.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the unmapped field on the JSON view","suites":["Alert details with unmapped fields"],"updatePoint":{"line":29,"column":50},"line":29,"code":"  it('Displays the unmapped field on the JSON view', () => {\n    const expectedUnmappedValue = 'This is the unmapped field';\n    openJsonView();\n    cy.get(JSON_TEXT).then(x => {\n      const parsed = JSON.parse(x.text());\n      expect(parsed._source.unmapped).to.equal(expectedUnmappedValue);\n    });\n  }); // This test needs to be updated to not look for the field in a specific row, as it prevents us from adding/removing fields","file":"integration/detection_alerts/alerts_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the unmapped field on the table","suites":["Alert details with unmapped fields"],"line":38,"code":"  it.skip('Displays the unmapped field on the table', () => {","file":"integration/detection_alerts/alerts_details.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Table does not scroll horizontally","suites":["Alert details with unmapped fields"],"updatePoint":{"line":51,"column":40},"line":51,"code":"  it('Table does not scroll horizontally', () => {\n    openTable();\n    cy.get(ALERT_FLYOUT).find(TABLE_CONTAINER).within($tableContainer => {\n      expect($tableContainer[0].scrollLeft).to.equal(0); // Try to scroll left and make sure that the table hasn't actually scrolled\n\n      $tableContainer[0].scroll({\n        left: 1000\n      });\n      expect($tableContainer[0].scrollLeft).to.equal(0);\n    });\n  });","file":"integration/detection_alerts/alerts_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show the need admin primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"true\" and their admin callouts should show up","On Detections home page"],"updatePoint":{"line":51,"column":48},"line":51,"code":"      it('We show the need admin primary callout', () => {\n        waitForCallOutToBeShown(NEED_ADMIN_FOR_UPDATE_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout of need admin","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"true\" and their admin callouts should show up","On Rules Management page"],"updatePoint":{"line":59,"column":49},"line":59,"code":"      it('We show 1 primary callout of need admin', () => {\n        waitForCallOutToBeShown(NEED_ADMIN_FOR_UPDATE_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"true\" and their admin callouts should show up","On Rule Details page"],"updatePoint":{"line":73,"column":35},"line":73,"code":"      it('We show 1 primary callout', () => {\n        waitForCallOutToBeShown(NEED_ADMIN_FOR_UPDATE_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show the need admin primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"false\" and their admin callouts should not show up ","On Detections home page"],"updatePoint":{"line":91,"column":48},"line":91,"code":"      it('We show the need admin primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout of need admin","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"false\" and their admin callouts should not show up ","On Rules Management page"],"updatePoint":{"line":99,"column":49},"line":99,"code":"      it('We show 1 primary callout of need admin', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"false\" and their admin callouts should not show up ","On Rule Details page"],"updatePoint":{"line":113,"column":35},"line":113,"code":"      it('We show 1 primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show the need admin primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"null\" and their admin callouts should not show up ","On Detections home page"],"updatePoint":{"line":131,"column":48},"line":131,"code":"      it('We show the need admin primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout of need admin","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"null\" and their admin callouts should not show up ","On Rules Management page"],"updatePoint":{"line":139,"column":49},"line":139,"code":"      it('We show 1 primary callout of need admin', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"null\" and their admin callouts should not show up ","On Rule Details page"],"updatePoint":{"line":153,"column":35},"line":153,"code":"      it('We show 1 primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should not allow user with read only privileges to attach alerts to cases","suites":["Alerts timeline","Privileges: read only"],"updatePoint":{"line":40,"column":81},"line":40,"code":"    it('should not allow user with read only privileges to attach alerts to cases', () => {\n      expandFirstAlertActions();\n      cy.get(ATTACH_ALERT_TO_CASE_BUTTON).should('not.exist');\n    });","file":"integration/detection_alerts/attach_to_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should allow a user with crud privileges to attach alerts to cases","suites":["Alerts timeline","Privileges: can crud"],"updatePoint":{"line":49,"column":74},"line":49,"code":"    it('should allow a user with crud privileges to attach alerts to cases', () => {\n      expandFirstAlertActions();\n      cy.get(ATTACH_ALERT_TO_CASE_BUTTON).first().should('not.be.disabled');\n    });","file":"integration/detection_alerts/attach_to_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Alerts should be visible on the Rule Detail page and not visible on the Overview page","suites":["Alerts generated by building block rules"],"updatePoint":{"line":26,"column":91},"line":26,"code":"  it('Alerts should be visible on the Rule Detail page and not visible on the Overview page', () => {\n    createCustomRuleActivated(getBuildingBlockRule());\n    loginAndWaitForPage(DETECTIONS_RULE_MANAGEMENT_URL);\n    goToRuleDetails();\n    waitForTheRuleToBeExecuted(); // Check that generated events are visible on the Details page\n\n    waitForAlertsToPopulate(EXPECTED_NUMBER_OF_ALERTS);\n    navigateFromHeaderTo(OVERVIEW); // Check that generated events are hidden on the Overview page\n\n    cy.get(OVERVIEW_ALERTS_HISTOGRAM).should('contain.text', 'No data to display');\n  });","file":"integration/detection_alerts/building_block_alerts.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Closes and opens alerts","suites":["Closing alerts"],"updatePoint":{"line":27,"column":29},"line":27,"code":"  it('Closes and opens alerts', () => {\n    const numberOfAlertsToBeClosed = 3;\n    cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n      const numberOfAlerts = alertNumberString.split(' ')[0];\n      cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlerts} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlerts}`);\n      selectNumberOfAlerts(numberOfAlertsToBeClosed);\n      cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeClosed} alerts`);\n      closeAlerts();\n      waitForAlerts();\n      const expectedNumberOfAlertsAfterClosing = +numberOfAlerts - numberOfAlertsToBeClosed;\n      cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing}`);\n      goToClosedAlerts();\n      waitForAlerts();\n      cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeClosed} alerts`);\n      const numberOfAlertsToBeOpened = 1;\n      selectNumberOfAlerts(numberOfAlertsToBeOpened);\n      cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeOpened} alert`);\n      openAlerts();\n      waitForAlerts();\n      const expectedNumberOfClosedAlertsAfterOpened = 2;\n      cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfClosedAlertsAfterOpened} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfClosedAlertsAfterOpened}`);\n      goToOpenedAlerts();\n      waitForAlerts();\n      const expectedNumberOfOpenedAlerts = +numberOfAlerts - expectedNumberOfClosedAlertsAfterOpened;\n      cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfOpenedAlerts} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfOpenedAlerts}`);\n    });\n  });","file":"integration/detection_alerts/closing.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Closes one alert when more than one opened alerts are selected","suites":["Closing alerts"],"updatePoint":{"line":58,"column":68},"line":58,"code":"  it('Closes one alert when more than one opened alerts are selected', () => {\n    cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n      const numberOfAlerts = alertNumberString.split(' ')[0];\n      const numberOfAlertsToBeClosed = 1;\n      const numberOfAlertsToBeSelected = 3;\n      cy.get(TAKE_ACTION_POPOVER_BTN).should('not.exist');\n      selectNumberOfAlerts(numberOfAlertsToBeSelected);\n      cy.get(TAKE_ACTION_POPOVER_BTN).should('exist');\n      closeFirstAlert();\n      waitForAlerts();\n      const expectedNumberOfAlerts = +numberOfAlerts - numberOfAlertsToBeClosed;\n      cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlerts} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlerts}`);\n      goToClosedAlerts();\n      waitForAlerts();\n      cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeClosed} alert`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlertsToBeClosed}`);\n    });\n  });","file":"integration/detection_alerts/closing.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Updates trend histogram whenever alert status is updated in table","suites":["Closing alerts"],"updatePoint":{"line":77,"column":71},"line":77,"code":"  it('Updates trend histogram whenever alert status is updated in table', () => {\n    const numberOfAlertsToBeClosed = 1;\n    cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n      const numberOfAlerts = alertNumberString.split(' ')[0];\n      cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlerts} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlerts}`);\n      selectNumberOfAlerts(numberOfAlertsToBeClosed);\n      cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeClosed} alert`);\n      closeAlerts();\n      waitForAlerts();\n      const expectedNumberOfAlertsAfterClosing = +numberOfAlerts - numberOfAlertsToBeClosed;\n      cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing} alerts`);\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing}`);\n      goToClosedAlerts();\n      waitForAlerts();\n      cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeClosed} alert`);\n      const numberOfAlertsToBeOpened = 1;\n      selectNumberOfAlerts(numberOfAlertsToBeOpened);\n      cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeOpened} alert`);\n      cy.get(ALERTS_TREND_SIGNAL_RULE_NAME_PANEL).should('exist');\n      openAlerts();\n      waitForAlerts();\n      cy.get(ALERTS_COUNT).should('not.exist');\n      cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('not.exist');\n      cy.get(ALERTS_TREND_SIGNAL_RULE_NAME_PANEL).should('not.exist');\n    });\n  });","file":"integration/detection_alerts/closing.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Investigate alert in default timeline","suites":["Alerts timeline"],"updatePoint":{"line":26,"column":43},"line":26,"code":"  it('Investigate alert in default timeline', () => {\n    investigateFirstAlertInTimeline();\n    cy.get(PROVIDER_BADGE).first().invoke('text').then(eventId => {\n      investigateFirstAlertInTimeline();\n      cy.get(PROVIDER_BADGE).filter(':visible').should('have.text', eventId);\n    });\n  });","file":"integration/detection_alerts/investigate_in_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show one primary callout","suites":["Detections > Callouts","indicating read-only access to resources","On Detections home page"],"updatePoint":{"line":53,"column":37},"line":53,"code":"      it('We show one primary callout', () => {\n        waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We hide it and persist the dismissal","suites":["Detections > Callouts","indicating read-only access to resources","On Detections home page","When a user clicks Dismiss on the callout"],"updatePoint":{"line":57,"column":48},"line":57,"code":"        it('We hide it and persist the dismissal', () => {\n          waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n          dismissCallOut(MISSING_PRIVILEGES_CALLOUT);\n          reloadPage();\n          getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n        });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show one primary callout","suites":["Detections > Callouts","indicating read-only access to resources","On Rules Management page"],"updatePoint":{"line":69,"column":37},"line":69,"code":"      it('We show one primary callout', () => {\n        waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We hide it and persist the dismissal","suites":["Detections > Callouts","indicating read-only access to resources","On Rules Management page","When a user clicks Dismiss on the callout"],"updatePoint":{"line":73,"column":48},"line":73,"code":"        it('We hide it and persist the dismissal', () => {\n          waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n          dismissCallOut(MISSING_PRIVILEGES_CALLOUT);\n          reloadPage();\n          getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n        });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show one primary callout","suites":["Detections > Callouts","indicating read-only access to resources","On Rule Details page"],"updatePoint":{"line":91,"column":37},"line":91,"code":"      it('We show one primary callout', () => {\n        waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We hide them and persist the dismissal","suites":["Detections > Callouts","indicating read-only access to resources","On Rule Details page","When a user clicks Dismiss on the callouts"],"updatePoint":{"line":95,"column":50},"line":95,"code":"        it('We hide them and persist the dismissal', () => {\n          waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n          dismissCallOut(MISSING_PRIVILEGES_CALLOUT);\n          reloadPage();\n          getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n        });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show no callout","suites":["Detections > Callouts","indicating read-write access to resources","On Detections home page"],"updatePoint":{"line":109,"column":28},"line":109,"code":"      it('We show no callout', () => {\n        getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show no callout","suites":["Detections > Callouts","indicating read-write access to resources","On Rules Management page"],"updatePoint":{"line":117,"column":28},"line":117,"code":"      it('We show no callout', () => {\n        getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show no callouts","suites":["Detections > Callouts","indicating read-write access to resources","On Rule Details page"],"updatePoint":{"line":131,"column":29},"line":131,"code":"      it('We show no callouts', () => {\n        getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Open one alert when more than one closed alerts are selected","suites":["Opening alerts"],"updatePoint":{"line":31,"column":66},"line":31,"code":"  it('Open one alert when more than one closed alerts are selected', () => {\n    waitForAlertsToPopulate();\n    cy.get(ALERTS_COUNT).invoke('text').then(numberOfOpenedAlertsText => {\n      const numberOfOpenedAlerts = parseInt(numberOfOpenedAlertsText, 10);\n      goToClosedAlerts();\n      cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n        const numberOfAlerts = alertNumberString.split(' ')[0];\n        const numberOfAlertsToBeOpened = 1;\n        const numberOfAlertsToBeSelected = 3;\n        cy.get(TAKE_ACTION_POPOVER_BTN).should('not.exist');\n        selectNumberOfAlerts(numberOfAlertsToBeSelected);\n        cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeSelected} alerts`); // TODO: Popover not shwing up in cypress UI, but code is in the UtilityBar\n        // cy.get(TAKE_ACTION_POPOVER_BTN).should('not.have.attr', 'disabled');\n\n        openFirstAlert();\n        waitForAlerts();\n        const expectedNumberOfAlerts = +numberOfAlerts - numberOfAlertsToBeOpened;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlerts}`);\n        goToOpenedAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfOpenedAlerts + numberOfAlertsToBeOpened} alerts`.toString());\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfOpenedAlerts + numberOfAlertsToBeOpened}`);\n      });\n    });\n  });","file":"integration/detection_alerts/opening.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and activates a new rule","suites":["Custom detection rules creation"],"updatePoint":{"line":39,"column":38},"line":39,"code":"  it('Creates and activates a new rule', function () {\n    loginAndWaitForPageWithoutDateRange(ALERTS_URL);\n    waitForAlertsPanelToBeLoaded();\n    waitForAlertsIndexToBeCreated();\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    goToCreateNewRule();\n    fillDefineCustomRuleWithImportedQueryAndContinue(this.rule);\n    fillAboutRuleAndContinue(this.rule);\n    fillScheduleRuleAndContinue(this.rule); // expect define step to repopulate\n\n    cy.get(DEFINE_EDIT_BUTTON).click();\n    cy.get(CUSTOM_QUERY_INPUT).should('have.value', this.rule.customQuery);\n    cy.get(DEFINE_CONTINUE_BUTTON).should('exist').click({\n      force: true\n    });\n    cy.get(DEFINE_CONTINUE_BUTTON).should('not.exist'); // expect about step to populate\n\n    cy.get(ABOUT_EDIT_BUTTON).click();\n    cy.get(RULE_NAME_INPUT).invoke('val').should('eql', this.rule.name);\n    cy.get(ABOUT_CONTINUE_BTN).should('exist').click({\n      force: true\n    });\n    cy.get(ABOUT_CONTINUE_BTN).should('not.exist');\n    createAndActivateRule();\n    cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n    changeRowsPerPageTo100();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n    });\n    filterByCustomRules();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', 1);\n    });\n    cy.get(RULE_NAME).should('have.text', this.rule.name);\n    cy.get(RISK_SCORE).should('have.text', this.rule.riskScore);\n    cy.get(SEVERITY).should('have.text', this.rule.severity);\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    goToRuleDetails();\n    cy.get(RULE_NAME_HEADER).should('contain', `${this.rule.name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', this.rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', this.rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', this.rule.riskScore);\n      getDetails(REFERENCE_URLS_DETAILS).should(details => {\n        expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n      });\n      getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n      getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n        expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n      });\n      getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n    });\n    cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n      force: true\n    });\n    cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getIndexPatterns().join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', this.rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Query');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', `${getNewRule().runsEvery.interval}${getNewRule().runsEvery.type}`);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${getNewRule().lookBack.interval}${getNewRule().lookBack.type}`);\n    });\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(NUMBER_OF_ALERTS).should($count => expect(+$count.text().split(' ')[0]).to.be.gte(1));\n    cy.get(ALERT_GRID_CELL).contains(this.rule.name);\n  });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes one rule","suites":["Custom detection rules deletion and edition","Deletion"],"updatePoint":{"line":124,"column":24},"line":124,"code":"    it('Deletes one rule', () => {\n      cy.get(RULES_TABLE).find(RULES_ROW).then(rules => {\n        const initialNumberOfRules = rules.length;\n        const expectedNumberOfRulesAfterDeletion = initialNumberOfRules - 1;\n        cy.get(SHOWING_RULES_TEXT).should('have.text', `Showing ${initialNumberOfRules} rules`);\n        deleteFirstRule();\n        waitForRulesTableToBeRefreshed();\n        cy.get(RULES_TABLE).then($table => {\n          cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRulesAfterDeletion);\n        });\n        cy.get(SHOWING_RULES_TEXT).should('have.text', `Showing ${expectedNumberOfRulesAfterDeletion} rules`);\n        cy.get(CUSTOM_RULES_BTN).should('have.text', `Custom rules (${expectedNumberOfRulesAfterDeletion})`);\n      });\n    });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes more than one rule","suites":["Custom detection rules deletion and edition","Deletion"],"updatePoint":{"line":138,"column":34},"line":138,"code":"    it('Deletes more than one rule', () => {\n      cy.get(RULES_TABLE).find(RULES_ROW).then(rules => {\n        const initialNumberOfRules = rules.length;\n        const numberOfRulesToBeDeleted = 2;\n        const expectedNumberOfRulesAfterDeletion = initialNumberOfRules - numberOfRulesToBeDeleted;\n        selectNumberOfRules(numberOfRulesToBeDeleted);\n        deleteSelectedRules();\n        waitForRulesTableToBeRefreshed();\n        cy.get(RULES_TABLE).then($table => {\n          cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRulesAfterDeletion);\n        });\n        cy.get(SHOWING_RULES_TEXT).should('have.text', `Showing ${expectedNumberOfRulesAfterDeletion} rule`);\n        cy.get(CUSTOM_RULES_BTN).should('have.text', `Custom rules (${expectedNumberOfRulesAfterDeletion})`);\n      });\n    });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes one rule from detail page","suites":["Custom detection rules deletion and edition","Deletion"],"updatePoint":{"line":153,"column":41},"line":153,"code":"    it('Deletes one rule from detail page', () => {\n      cy.get(RULES_TABLE).find(RULES_ROW).then(rules => {\n        const initialNumberOfRules = rules.length;\n        const expectedNumberOfRulesAfterDeletion = initialNumberOfRules - 1;\n        goToRuleDetails();\n        cy.intercept('POST', '/api/detection_engine/rules/_bulk_delete').as('deleteRule');\n        deleteRuleFromDetailsPage();\n        cy.waitFor('@deleteRule').then(() => {\n          cy.get(RULES_TABLE).should('exist');\n          cy.get(RULES_TABLE).then($table => {\n            cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRulesAfterDeletion);\n          });\n          cy.get(SHOWING_RULES_TEXT).should('have.text', `Showing ${expectedNumberOfRulesAfterDeletion} rules`);\n          cy.get(CUSTOM_RULES_BTN).should('have.text', `Custom rules (${expectedNumberOfRulesAfterDeletion})`);\n        });\n      });\n    });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Only modifies rule active status on enable/disable","suites":["Custom detection rules deletion and edition","Edition"],"updatePoint":{"line":182,"column":58},"line":182,"code":"    it('Only modifies rule active status on enable/disable', () => {\n      activatesRule();\n      cy.intercept('GET', `/api/detection_engine/rules?id=*`).as('fetchRuleDetails');\n      goToRuleDetails();\n      cy.wait('@fetchRuleDetails').then(({\n        response\n      }) => {\n        cy.wrap(response?.statusCode).should('eql', 200);\n        cy.wrap(response?.body.max_signals).should('eql', getExistingRule().maxSignals);\n        cy.wrap(response?.body.enabled).should('eql', false);\n      });\n    });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows a rule to be edited","suites":["Custom detection rules deletion and edition","Edition"],"updatePoint":{"line":194,"column":34},"line":194,"code":"    it('Allows a rule to be edited', () => {\n      editFirstRule();\n      waitForKibana(); // expect define step to populate\n\n      cy.get(CUSTOM_QUERY_INPUT).should('have.value', getExistingRule().customQuery);\n\n      if (getExistingRule().index && getExistingRule().index.length > 0) {\n        cy.get(DEFINE_INDEX_INPUT).should('have.text', getExistingRule().index.join(''));\n      }\n\n      goToAboutStepTab(); // expect about step to populate\n\n      cy.get(RULE_NAME_INPUT).invoke('val').should('eql', getExistingRule().name);\n      cy.get(RULE_DESCRIPTION_INPUT).should('have.text', getExistingRule().description);\n      cy.get(TAGS_FIELD).should('have.text', getExistingRule().tags.join(''));\n      cy.get(SEVERITY_DROPDOWN).should('have.text', getExistingRule().severity);\n      cy.get(DEFAULT_RISK_SCORE_INPUT).invoke('val').should('eql', getExistingRule().riskScore);\n      goToScheduleStepTab(); // expect schedule step to populate\n\n      const interval = getExistingRule().interval;\n      const intervalParts = interval != null && interval.match(/[0-9]+|[a-zA-Z]+/g);\n\n      if (intervalParts) {\n        const [amount, unit] = intervalParts;\n        cy.get(SCHEDULE_INTERVAL_AMOUNT_INPUT).invoke('val').should('eql', amount);\n        cy.get(SCHEDULE_INTERVAL_UNITS_INPUT).invoke('val').should('eql', unit);\n      } else {\n        throw new Error('Cannot assert scheduling info on a rule without an interval');\n      }\n\n      goToActionsStepTab();\n      cy.get(ACTIONS_THROTTLE_INPUT).invoke('val').should('eql', 'no_actions');\n      cy.get(ACTIONS_THROTTLE_INPUT).select('Weekly');\n      cy.get(EMAIL_ACTION_BTN).click();\n      cy.get(CREATE_ACTION_CONNECTOR_BTN).click();\n      fillEmailConnectorForm();\n      cy.get(SAVE_ACTION_CONNECTOR_BTN).click();\n      cy.get(EMAIL_ACTION_TO_INPUT).type('test@example.com');\n      cy.get(EMAIL_ACTION_SUBJECT_INPUT).type('Subject');\n      cy.get(FROM_VALIDATION_ERROR).should('not.exist');\n      goToAboutStepTab();\n      cy.get(TAGS_CLEAR_BUTTON).click({\n        force: true\n      });\n      fillAboutRule(getEditedRule());\n      cy.intercept('GET', '/api/detection_engine/rules?id*').as('getRule');\n      saveEditedRule();\n      cy.wait('@getRule').then(({\n        response\n      }) => {\n        cy.wrap(response?.statusCode).should('eql', 200); // ensure that editing rule does not modify max_signals\n\n        cy.wrap(response?.body.max_signals).should('eql', getExistingRule().maxSignals);\n      });\n      cy.get(RULE_NAME_HEADER).should('contain', `${getEditedRule().name}`);\n      cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', getEditedRule().description);\n      cy.get(ABOUT_DETAILS).within(() => {\n        getDetails(SEVERITY_DETAILS).should('have.text', getEditedRule().severity);\n        getDetails(RISK_SCORE_DETAILS).should('have.text', getEditedRule().riskScore);\n        getDetails(TAGS_DETAILS).should('have.text', expectedEditedtags);\n      });\n      cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n        force: true\n      });\n      cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', getEditedRule().note);\n      cy.get(DEFINITION_DETAILS).within(() => {\n        getDetails(INDEX_PATTERNS_DETAILS).should('have.text', expectedEditedIndexPatterns.join(''));\n        getDetails(CUSTOM_QUERY_DETAILS).should('have.text', getEditedRule().customQuery);\n        getDetails(RULE_TYPE_DETAILS).should('have.text', 'Query');\n        getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      });\n\n      if (getEditedRule().interval) {\n        cy.get(SCHEDULE_DETAILS).within(() => {\n          getDetails(RUNS_EVERY_DETAILS).should('have.text', getEditedRule().interval);\n        });\n      }\n    });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and activates a new EQL rule","suites":["Detection rules, EQL"],"updatePoint":{"line":36,"column":42},"line":36,"code":"  it('Creates and activates a new EQL rule', function () {\n    loginAndWaitForPageWithoutDateRange(ALERTS_URL);\n    waitForAlertsPanelToBeLoaded();\n    waitForAlertsIndexToBeCreated();\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    goToCreateNewRule();\n    selectEqlRuleType();\n    fillDefineEqlRuleAndContinue(this.rule);\n    fillAboutRuleAndContinue(this.rule);\n    fillScheduleRuleAndContinue(this.rule);\n    createAndActivateRule();\n    cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n    changeRowsPerPageTo100();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n    });\n    filterByCustomRules();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', 1);\n    });\n    cy.get(RULE_NAME).should('have.text', this.rule.name);\n    cy.get(RISK_SCORE).should('have.text', this.rule.riskScore);\n    cy.get(SEVERITY).should('have.text', this.rule.severity);\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    goToRuleDetails();\n    cy.get(RULE_NAME_HEADER).should('contain', `${this.rule.name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', this.rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', this.rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', this.rule.riskScore);\n      getDetails(REFERENCE_URLS_DETAILS).should(details => {\n        expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n      });\n      getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n      getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n        expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n      });\n      getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n    });\n    cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n      force: true\n    });\n    cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getIndexPatterns().join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', this.rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Event Correlation');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', `${this.rule.runsEvery.interval}${this.rule.runsEvery.type}`);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${this.rule.lookBack.interval}${this.rule.lookBack.type}`);\n    });\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfAlerts);\n    cy.get(ALERT_DATA_GRID).invoke('text').then(text => {\n      expect(text).contains(this.rule.name);\n    });\n  });","file":"integration/detection_rules/event_correlation_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and activates a new EQL rule with a sequence","suites":["Detection rules, sequence EQL"],"updatePoint":{"line":111,"column":58},"line":111,"code":"  it('Creates and activates a new EQL rule with a sequence', function () {\n    loginAndWaitForPageWithoutDateRange(ALERTS_URL);\n    waitForAlertsPanelToBeLoaded();\n    waitForAlertsIndexToBeCreated();\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    goToCreateNewRule();\n    selectEqlRuleType();\n    fillDefineEqlRuleAndContinue(this.rule);\n    fillAboutRuleAndContinue(this.rule);\n    fillScheduleRuleAndContinue(this.rule);\n    createAndActivateRule();\n    cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n    changeRowsPerPageTo100();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n    });\n    filterByCustomRules();\n    goToRuleDetails();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfSequenceAlerts);\n    cy.get(ALERT_DATA_GRID).invoke('text').then(text => {\n      cy.log('ALERT_DATA_GRID', text);\n      expect(text).contains(this.rule.name);\n      expect(text).contains(this.rule.severity.toLowerCase());\n    });\n  });","file":"integration/detection_rules/event_correlation_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports a custom rule","suites":["Export rules"],"updatePoint":{"line":23,"column":27},"line":23,"code":"  it('Exports a custom rule', function () {\n    goToManageAlertsDetectionRules();\n    exportFirstRule();\n    cy.wait('@export').then(({\n      response\n    }) => {\n      cy.wrap(response?.body).should('eql', expectedExportedRule(this.ruleResponse));\n    });\n  });","file":"integration/detection_rules/export_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Imports a custom rule with exceptions","suites":["Import rules"],"updatePoint":{"line":21,"column":43},"line":21,"code":"  it('Imports a custom rule with exceptions', function () {\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      getRulesImportToast(['Successfully imported 1 rule', 'Successfully imported 2 exceptions.']);\n    });\n  });","file":"integration/detection_rules/import_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows error toaster when trying to import rule and exception list that already exist","suites":["Import rules"],"updatePoint":{"line":30,"column":90},"line":30,"code":"  it('Shows error toaster when trying to import rule and exception list that already exist', function () {\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n    });\n    reload();\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      getRulesImportToast(['Failed to import 1 rule', 'Failed to import 2 exceptions']);\n    });\n  });","file":"integration/detection_rules/import_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not show error toaster when trying to import rule and exception list that already exist when overwrite is true","suites":["Import rules"],"updatePoint":{"line":46,"column":121},"line":46,"code":"  it('Does not show error toaster when trying to import rule and exception list that already exist when overwrite is true', function () {\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n    });\n    reload();\n    importRulesWithOverwriteAll('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      getRulesImportToast(['Successfully imported 1 rule', 'Successfully imported 2 exceptions.']);\n    });\n  });","file":"integration/detection_rules/import_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Contains a predefined index pattern","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Index patterns"],"updatePoint":{"line":49,"column":47},"line":49,"code":"        it('Contains a predefined index pattern', () => {\n          getIndicatorIndex().should('have.text', getIndexPatterns().join(''));\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text on initial page load if indicator index pattern is filled out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Index patterns"],"updatePoint":{"line":52,"column":105},"line":52,"code":"        it('Does NOT show invalidation text on initial page load if indicator index pattern is filled out', () => {\n          getDefineContinueButton().click();\n          getIndexPatternInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when you try to continue without filling it out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Index patterns"],"updatePoint":{"line":56,"column":83},"line":56,"code":"        it('Shows invalidation text when you try to continue without filling it out', () => {\n          getIndexPatternClearButton().click();\n          getIndicatorIndicatorIndex().type(`{backspace}{enter}`);\n          getDefineContinueButton().click();\n          getIndexPatternInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Contains a predefined index pattern","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator index patterns"],"updatePoint":{"line":64,"column":47},"line":64,"code":"        it('Contains a predefined index pattern', () => {\n          getIndicatorIndicatorIndex().should('have.text', getThreatIndexPatterns().join(''));\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text on initial page load","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator index patterns"],"updatePoint":{"line":67,"column":64},"line":67,"code":"        it('Does NOT show invalidation text on initial page load', () => {\n          getIndexPatternInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text if you try to continue without filling it out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator index patterns"],"updatePoint":{"line":70,"column":81},"line":70,"code":"        it('Shows invalidation text if you try to continue without filling it out', () => {\n          getIndicatorIndicatorIndex().type(`{backspace}{enter}`);\n          getDefineContinueButton().click();\n          getIndexPatternInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has a default set of *:*","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom query input"],"updatePoint":{"line":77,"column":36},"line":77,"code":"        it('Has a default set of *:*', () => {\n          getCustomQueryInput().should('have.text', '*:*');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text if text is removed","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom query input"],"updatePoint":{"line":80,"column":54},"line":80,"code":"        it('Shows invalidation text if text is removed', () => {\n          getCustomQueryInput().type('{selectall}{del}');\n          getCustomQueryInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has a default set of ","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom indicator query input"],"updatePoint":{"line":86,"column":62},"line":86,"code":"        it(`Has a default set of ${DEFAULT_THREAT_MATCH_QUERY}`, () => {\n          getCustomIndicatorQueryInput().should('have.text', DEFAULT_THREAT_MATCH_QUERY);\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text if text is removed","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom indicator query input"],"updatePoint":{"line":89,"column":54},"line":89,"code":"        it('Shows invalidation text if text is removed', () => {\n          getCustomIndicatorQueryInput().type('{selectall}{del}');\n          getCustomQueryInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text on initial page load","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":98,"column":64},"line":98,"code":"        it('Does NOT show invalidation text on initial page load', () => {\n          getIndicatorInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when you try to press continue without filling anything out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":101,"column":95},"line":101,"code":"        it('Shows invalidation text when you try to press continue without filling anything out', () => {\n          getDefineContinueButton().click();\n          getIndicatorAtLeastOneInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when the \"AND\" button is pressed and both the mappings are blank","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":105,"column":100},"line":105,"code":"        it('Shows invalidation text when the \"AND\" button is pressed and both the mappings are blank', () => {\n          getIndicatorAndButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when the \"OR\" button is pressed and both the mappings are blank","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":109,"column":99},"line":109,"code":"        it('Shows invalidation text when the \"OR\" button is pressed and both the mappings are blank', () => {\n          getIndicatorOrButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text when there is a valid \"index field\" and a valid \"indicator index field\"","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":113,"column":115},"line":113,"code":"        it('Does NOT show invalidation text when there is a valid \"index field\" and a valid \"indicator index field\"', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getDefineContinueButton().click();\n          getIndicatorInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when there is an invalid \"index field\" and a valid \"indicator index field\"","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":121,"column":110},"line":121,"code":"        it('Shows invalidation text when there is an invalid \"index field\" and a valid \"indicator index field\"', () => {\n          fillIndicatorMatchRow({\n            indexField: 'non-existent-value',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getDefineContinueButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when there is a valid \"index field\" and an invalid \"indicator index field\"","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":130,"column":110},"line":130,"code":"        it('Shows invalidation text when there is a valid \"index field\" and an invalid \"indicator index field\"', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: 'non-existent-value',\n            validColumns: 'indexField'\n          });\n          getDefineContinueButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row when you have two rows. Both rows valid rows of \"index fields\" and valid \"indicator index fields\". The second row should become the first row","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":139,"column":175},"line":139,"code":"        it('Deletes the first row when you have two rows. Both rows valid rows of \"index fields\" and valid \"indicator index fields\". The second row should become the first row', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: 'agent.name',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('have.text', 'agent.name');\n          getIndicatorMappingComboField().should('have.text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row when you have two rows. Both rows have valid \"index fields\" and invalid \"indicator index fields\". The second row should become the first row","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":157,"column":174},"line":157,"code":"        it('Deletes the first row when you have two rows. Both rows have valid \"index fields\" and invalid \"indicator index fields\". The second row should become the first row', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: 'non-existent-value',\n            validColumns: 'indexField'\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: 'second-non-existent-value',\n            validColumns: 'indexField'\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorMappingComboField().should('have.text', 'second-non-existent-value');\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row when you have two rows. Both rows have valid \"indicator index fields\" and invalid \"index fields\". The second row should become the first row","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":175,"column":174},"line":175,"code":"        it('Deletes the first row when you have two rows. Both rows have valid \"indicator index fields\" and invalid \"index fields\". The second row should become the first row', () => {\n          fillIndicatorMatchRow({\n            indexField: 'non-existent-value',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: 'second-non-existent-value',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('have.text', 'second-non-existent-value');\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row of data but not the UI elements and the text defaults back to the placeholder of Search","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":193,"column":121},"line":193,"code":"        it('Deletes the first row of data but not the UI elements and the text defaults back to the placeholder of Search', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('text', 'Search');\n          getIndicatorMappingComboField().should('text', 'Search');\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the second row when you have three rows. The first row is valid data, the second row is invalid data, and the third row is valid data. Third row should shift up correctly","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":204,"column":190},"line":204,"code":"        it('Deletes the second row when you have three rows. The first row is valid data, the second row is invalid data, and the third row is valid data. Third row should shift up correctly', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: 'non-existent-value',\n            indicatorIndexField: 'non-existent-value',\n            validColumns: 'none'\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 3,\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorDeleteButton(2).click();\n          getIndicatorIndexComboField(1).should('text', getNewThreatIndicatorRule().indicatorMappingField);\n          getIndicatorMappingComboField(1).should('text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(2).should('text', getNewThreatIndicatorRule().indicatorMappingField);\n          getIndicatorMappingComboField(2).should('text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(3).should('not.exist');\n          getIndicatorMappingComboField(3).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Can add two OR rows and delete the second row. The first row has invalid data and the second row has valid data. The first row is deleted and the second row shifts up correctly.","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":230,"column":189},"line":230,"code":"        it('Can add two OR rows and delete the second row. The first row has invalid data and the second row has valid data. The first row is deleted and the second row shifts up correctly.', () => {\n          fillIndicatorMatchRow({\n            indexField: 'non-existent-value-one',\n            indicatorIndexField: 'non-existent-value-two',\n            validColumns: 'none'\n          });\n          getIndicatorOrButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('text', getNewThreatIndicatorRule().indicatorMappingField);\n          getIndicatorMappingComboField().should('text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"IM rule has 1h time interval and lookback by default","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Schedule"],"updatePoint":{"line":250,"column":64},"line":250,"code":"        it('IM rule has 1h time interval and lookback by default', () => {\n          selectIndicatorMatchType();\n          fillDefineIndicatorMatchRuleAndContinue(getNewThreatIndicatorRule());\n          fillAboutRuleAndContinue(getNewThreatIndicatorRule());\n          cy.get(SCHEDULE_INTERVAL_AMOUNT_INPUT).invoke('val').should('eql', '1');\n          cy.get(SCHEDULE_INTERVAL_UNITS_INPUT).invoke('val').should('eql', 'h');\n          cy.get(SCHEDULE_LOOKBACK_AMOUNT_INPUT).invoke('val').should('eql', '5');\n          cy.get(SCHEDULE_LOOKBACK_UNITS_INPUT).invoke('val').should('eql', 'm');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and activates a new Indicator Match rule","suites":["indicator match","Detection rules, Indicator Match","Generating signals"],"updatePoint":{"line":266,"column":58},"line":266,"code":"      it('Creates and activates a new Indicator Match rule', () => {\n        waitForAlertsPanelToBeLoaded();\n        waitForAlertsIndexToBeCreated();\n        goToManageAlertsDetectionRules();\n        waitForRulesTableToBeLoaded();\n        goToCreateNewRule();\n        selectIndicatorMatchType();\n        fillDefineIndicatorMatchRuleAndContinue(getNewThreatIndicatorRule());\n        fillAboutRuleAndContinue(getNewThreatIndicatorRule());\n        fillScheduleRuleAndContinue(getNewThreatIndicatorRule());\n        createAndActivateRule();\n        cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n        changeRowsPerPageTo100();\n        cy.get(RULES_TABLE).then($table => {\n          cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n        });\n        filterByCustomRules();\n        cy.get(RULES_TABLE).then($table => {\n          cy.wrap($table.find(RULES_ROW).length).should('eql', 1);\n        });\n        cy.get(RULE_NAME).should('have.text', getNewThreatIndicatorRule().name);\n        cy.get(RISK_SCORE).should('have.text', getNewThreatIndicatorRule().riskScore);\n        cy.get(SEVERITY).should('have.text', getNewThreatIndicatorRule().severity);\n        cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n        goToRuleDetails();\n        cy.get(RULE_NAME_HEADER).should('contain', `${getNewThreatIndicatorRule().name}`);\n        cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', getNewThreatIndicatorRule().description);\n        cy.get(ABOUT_DETAILS).within(() => {\n          getDetails(SEVERITY_DETAILS).should('have.text', getNewThreatIndicatorRule().severity);\n          getDetails(RISK_SCORE_DETAILS).should('have.text', getNewThreatIndicatorRule().riskScore);\n          getDetails(INDICATOR_PREFIX_OVERRIDE).should('have.text', getNewThreatIndicatorRule().threatIndicatorPath);\n          getDetails(REFERENCE_URLS_DETAILS).should(details => {\n            expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n          });\n          getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n          getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n            expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n          });\n          getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n        });\n        cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n          force: true\n        });\n        cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n        cy.get(DEFINITION_DETAILS).within(() => {\n          getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getNewThreatIndicatorRule().index.join(''));\n          getDetails(CUSTOM_QUERY_DETAILS).should('have.text', '*:*');\n          getDetails(RULE_TYPE_DETAILS).should('have.text', 'Indicator Match');\n          getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n          getDetails(INDICATOR_INDEX_PATTERNS).should('have.text', getNewThreatIndicatorRule().indicatorIndexPattern.join(''));\n          getDetails(INDICATOR_MAPPING).should('have.text', `${getNewThreatIndicatorRule().indicatorMappingField} MATCHES ${getNewThreatIndicatorRule().indicatorIndexField}`);\n          getDetails(INDICATOR_INDEX_QUERY).should('have.text', '*:*');\n        });\n        cy.get(SCHEDULE_DETAILS).within(() => {\n          getDetails(RUNS_EVERY_DETAILS).should('have.text', `${getNewThreatIndicatorRule().runsEvery.interval}${getNewThreatIndicatorRule().runsEvery.type}`);\n          getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${getNewThreatIndicatorRule().lookBack.interval}${getNewThreatIndicatorRule().lookBack.type}`);\n        });\n        waitForTheRuleToBeExecuted();\n        waitForAlertsToPopulate();\n        cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfAlerts);\n        cy.get(ALERT_RULE_NAME).first().should('have.text', getNewThreatIndicatorRule().name);\n        cy.get(ALERT_SEVERITY).first().should('have.text', getNewThreatIndicatorRule().severity.toLowerCase());\n        cy.get(ALERT_RISK_SCORE).first().should('have.text', getNewThreatIndicatorRule().riskScore);\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Investigate alert in timeline","suites":["indicator match","Detection rules, Indicator Match","Generating signals"],"line":330,"code":"      it.skip('Investigate alert in timeline', () => {","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows the rule to be duplicated from the table","suites":["indicator match","Detection rules, Indicator Match","Duplicates the indicator rule"],"updatePoint":{"line":352,"column":57},"line":352,"code":"      it('Allows the rule to be duplicated from the table', () => {\n        waitForKibana();\n        duplicateFirstRule();\n        goBackToRuleDetails();\n        goBackToAllRulesTable();\n        checkDuplicatedRule();\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows the rule to be duplicated from the table's bulk actions","suites":["indicator match","Detection rules, Indicator Match","Duplicates the indicator rule"],"updatePoint":{"line":359,"column":72},"line":359,"code":"      it(\"Allows the rule to be duplicated from the table's bulk actions\", () => {\n        waitForKibana();\n        selectNumberOfRules(1);\n        duplicateSelectedRules();\n        checkDuplicatedRule();\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows the rule to be duplicated from the edit screen","suites":["indicator match","Detection rules, Indicator Match","Duplicates the indicator rule"],"updatePoint":{"line":365,"column":63},"line":365,"code":"      it('Allows the rule to be duplicated from the edit screen', () => {\n        waitForKibana();\n        goToRuleDetails();\n        duplicateRuleFromMenu();\n        goBackToRuleDetails();\n        goBackToAllRulesTable();\n        reload();\n        checkDuplicatedRule();\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render correct link for rule name - rules","suites":["Rules talbes links"],"updatePoint":{"line":23,"column":54},"line":23,"code":"  it('should render correct link for rule name - rules', () => {\n    cy.get(RULE_NAME).first().click();\n    cy.url().should('contain', 'rules/id/');\n  });","file":"integration/detection_rules/links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render correct link for rule name - rule monitoring","suites":["Rules talbes links"],"updatePoint":{"line":27,"column":64},"line":27,"code":"  it('should render correct link for rule name - rule monitoring', () => {\n    cy.get(RULES_MONIROTING_TABLE).first().click();\n    cy.get(RULE_NAME).first().click();\n    cy.url().should('contain', 'rules/id/');\n  });","file":"integration/detection_rules/links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and activates a new ml rule","suites":["Detection rules, machine learning"],"updatePoint":{"line":26,"column":41},"line":26,"code":"  it('Creates and activates a new ml rule', () => {\n    loginAndWaitForPageWithoutDateRange(ALERTS_URL);\n    waitForAlertsPanelToBeLoaded();\n    waitForAlertsIndexToBeCreated();\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    goToCreateNewRule();\n    selectMachineLearningRuleType();\n    fillDefineMachineLearningRuleAndContinue(getMachineLearningRule());\n    fillAboutRuleAndContinue(getMachineLearningRule());\n    fillScheduleRuleAndContinue(getMachineLearningRule());\n    createAndActivateRule();\n    cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n    changeRowsPerPageTo100();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n    });\n    filterByCustomRules();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', 1);\n    });\n    cy.get(RULE_NAME).should('have.text', getMachineLearningRule().name);\n    cy.get(RISK_SCORE).should('have.text', getMachineLearningRule().riskScore);\n    cy.get(SEVERITY).should('have.text', getMachineLearningRule().severity);\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    goToRuleDetails();\n    cy.get(RULE_NAME_HEADER).should('contain', `${getMachineLearningRule().name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', getMachineLearningRule().description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', getMachineLearningRule().severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', getMachineLearningRule().riskScore);\n      getDetails(REFERENCE_URLS_DETAILS).should(details => {\n        expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n      });\n      getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n      getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n        expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n      });\n      getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n    });\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(ANOMALY_SCORE_DETAILS).should('have.text', getMachineLearningRule().anomalyScoreThreshold);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Machine Learning');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      getMachineLearningRule().machineLearningJobs.forEach((machineLearningJob, jobIndex) => {\n        cy.get(MACHINE_LEARNING_JOB_STATUS).eq(jobIndex).should('have.text', 'Stopped');\n        cy.get(MACHINE_LEARNING_JOB_ID).eq(jobIndex).should('have.text', machineLearningJob);\n      });\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', `${getMachineLearningRule().runsEvery.interval}${getMachineLearningRule().runsEvery.type}`);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${getMachineLearningRule().lookBack.interval}${getMachineLearningRule().lookBack.type}`);\n    });\n  });","file":"integration/detection_rules/machine_learning_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Loads prebuilt rules","suites":["Alerts rules, prebuilt rules"],"updatePoint":{"line":18,"column":26},"line":18,"code":"  it('Loads prebuilt rules', () => {\n    const rowsPerPage = 100;\n    const expectedNumberOfRules = totalNumberOfPrebuiltRules;\n    const expectedNumberOfPages = Math.ceil(totalNumberOfPrebuiltRules / rowsPerPage);\n    const expectedElasticRulesBtnText = `Elastic rules (${expectedNumberOfRules})`;\n    loginAndWaitForPageWithoutDateRange(ALERTS_URL);\n    waitForAlertsIndexToBeCreated();\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    loadPrebuiltDetectionRules();\n    waitForPrebuiltDetectionRulesToBeLoaded();\n    cy.get(ELASTIC_RULES_BTN).should('have.text', expectedElasticRulesBtnText);\n    changeRowsPerPageTo(rowsPerPage);\n    cy.get(SHOWING_RULES_TEXT).should('have.text', `Showing ${expectedNumberOfRules} rules`);\n    cy.get(pageSelector(expectedNumberOfPages)).should('exist');\n  });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows to activate/deactivate all rules at once","suites":["Actions with prebuilt rules"],"updatePoint":{"line":48,"column":53},"line":48,"code":"  it('Allows to activate/deactivate all rules at once', () => {\n    selectAllRules();\n    activateSelectedRules();\n    waitForRuleToChangeStatus();\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    selectAllRules();\n    deactivateSelectedRules();\n    waitForRuleToChangeStatus();\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'false');\n  });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows to activate all rules on a page and deactivate single one at monitoring table","suites":["Actions with prebuilt rules"],"updatePoint":{"line":58,"column":90},"line":58,"code":"  it('Allows to activate all rules on a page and deactivate single one at monitoring table', () => {\n    cy.get(RULES_MONIROTING_TABLE).click();\n    cy.get(SELECT_ALL_RULES_ON_PAGE_CHECKBOX).click();\n    activateSelectedRules();\n    waitForRuleToChangeStatus();\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    selectNumberOfRules(1);\n    cy.get(RULE_SWITCH).first().click();\n    waitForRuleToChangeStatus();\n    cy.get(RULE_SWITCH).first().should('have.attr', 'aria-checked', 'false');\n  });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows to delete all rules at once","suites":["Actions with prebuilt rules"],"updatePoint":{"line":69,"column":40},"line":69,"code":"  it('Allows to delete all rules at once', () => {\n    selectAllRules();\n    deleteSelectedRules();\n    confirmRulesDelete();\n    cy.get(RULES_EMPTY_PROMPT).should('be.visible');\n  });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not allow to delete one rule when more than one is selected","suites":["Actions with prebuilt rules"],"updatePoint":{"line":75,"column":70},"line":75,"code":"  it('Does not allow to delete one rule when more than one is selected', () => {\n    changeRowsPerPageTo100();\n    const numberOfRulesToBeSelected = 2;\n    selectNumberOfRules(numberOfRulesToBeSelected);\n    cy.get(COLLAPSED_ACTION_BTN).each(collapsedItemActionBtn => {\n      cy.wrap(collapsedItemActionBtn).should('have.attr', 'disabled');\n    });\n  });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes and recovers one rule","suites":["Actions with prebuilt rules"],"updatePoint":{"line":83,"column":35},"line":83,"code":"  it('Deletes and recovers one rule', () => {\n    changeRowsPerPageTo100();\n    const expectedNumberOfRulesAfterDeletion = totalNumberOfPrebuiltRules - 1;\n    const expectedNumberOfRulesAfterRecovering = totalNumberOfPrebuiltRules;\n    deleteFirstRule();\n    cy.reload();\n    changeRowsPerPageTo100();\n    cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterDeletion})`);\n    cy.get(RELOAD_PREBUILT_RULES_BTN).should('exist');\n    cy.get(RELOAD_PREBUILT_RULES_BTN).should('have.text', 'Install 1 Elastic prebuilt rule ');\n    reloadDeletedRules();\n    cy.get(RELOAD_PREBUILT_RULES_BTN).should('not.exist');\n    cy.reload();\n    changeRowsPerPageTo100();\n    cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterRecovering})`);\n  });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes and recovers more than one rule","suites":["Actions with prebuilt rules"],"updatePoint":{"line":99,"column":45},"line":99,"code":"  it('Deletes and recovers more than one rule', () => {\n    changeRowsPerPageTo100();\n    const numberOfRulesToBeSelected = 2;\n    const expectedNumberOfRulesAfterDeletion = totalNumberOfPrebuiltRules - 2;\n    const expectedNumberOfRulesAfterRecovering = totalNumberOfPrebuiltRules;\n    selectNumberOfRules(numberOfRulesToBeSelected);\n    deleteSelectedRules();\n    cy.reload();\n    changeRowsPerPageTo100();\n    cy.get(RELOAD_PREBUILT_RULES_BTN).should('exist');\n    cy.get(RELOAD_PREBUILT_RULES_BTN).should('have.text', `Install ${numberOfRulesToBeSelected} Elastic prebuilt rules `);\n    cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterDeletion})`);\n    reloadDeletedRules();\n    cy.get(RELOAD_PREBUILT_RULES_BTN).should('not.exist');\n    cy.reload();\n    changeRowsPerPageTo100();\n    cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterRecovering})`);\n  });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Sorts by activated rules","suites":["Alerts detection rules"],"updatePoint":{"line":27,"column":30},"line":27,"code":"  it('Sorts by activated rules', () => {\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    cy.get(RULE_NAME).eq(SECOND_RULE).invoke('text').then(secondInitialRuleName => {\n      activateRule(SECOND_RULE);\n      waitForRuleToChangeStatus();\n      cy.get(RULE_NAME).eq(FOURTH_RULE).invoke('text').then(fourthInitialRuleName => {\n        activateRule(FOURTH_RULE);\n        waitForRuleToChangeStatus();\n        sortByActivatedRules();\n        cy.get(RULE_NAME).eq(FIRST_RULE).invoke('text').then(firstRuleName => {\n          cy.get(RULE_NAME).eq(SECOND_RULE).invoke('text').then(secondRuleName => {\n            const expectedRulesNames = `${firstRuleName} ${secondRuleName}`;\n            cy.wrap(expectedRulesNames).should('include', secondInitialRuleName);\n            cy.wrap(expectedRulesNames).should('include', fourthInitialRuleName);\n          });\n        });\n        cy.get(RULE_SWITCH).eq(FIRST_RULE).should('have.attr', 'role', 'switch');\n        cy.get(RULE_SWITCH).eq(SECOND_RULE).should('have.attr', 'role', 'switch');\n      });\n    });\n  });","file":"integration/detection_rules/sorting.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Pagination updates page number and results","suites":["Alerts detection rules"],"updatePoint":{"line":49,"column":48},"line":49,"code":"  it('Pagination updates page number and results', () => {\n    createCustomRule({ ...getNewRule(),\n      name: 'Test a rule'\n    }, '5');\n    createCustomRule({ ...getNewRule(),\n      name: 'Not same as first rule'\n    }, '6');\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    changeRowsPerPageTo(5);\n    const FIRST_PAGE_SELECTOR = pageSelector(1);\n    const SECOND_PAGE_SELECTOR = pageSelector(2);\n    cy.get(RULES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    cy.get(RULES_TABLE).find(RULE_NAME).first().invoke('text').then(ruleNameFirstPage => {\n      goToPage(2);\n      cy.get(RULES_TABLE).find(RULE_NAME).first().invoke('text').should(ruleNameSecondPage => {\n        expect(ruleNameFirstPage).not.to.eq(ruleNameSecondPage);\n      });\n    });\n    cy.get(RULES_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n    cy.get(RULES_TABLE).find(SECOND_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n  });","file":"integration/detection_rules/sorting.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Auto refreshes rules","suites":["Alerts detection rules"],"updatePoint":{"line":71,"column":26},"line":71,"code":"  it('Auto refreshes rules', () => {\n    /**\n     * Ran into the error: timer created with setInterval() but cleared with cancelAnimationFrame()\n     * There are no cancelAnimationFrames in the codebase that are used to clear a setInterval so\n     * explicitly set the below overrides. see https://docs.cypress.io/api/commands/clock#Function-names\n     */\n    cy.clock(Date.now(), ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval', 'Date']);\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded(); // mock 1 minute passing to make sure refresh\n    // is conducted\n\n    checkAutoRefresh(DEFAULT_RULE_REFRESH_INTERVAL_VALUE, 'be.visible'); // mock 45 minutes passing to check that idle modal shows\n    // and refreshing is paused\n\n    checkAllRulesIdleModal('be.visible');\n    checkAutoRefresh(DEFAULT_RULE_REFRESH_INTERVAL_VALUE, 'not.exist'); // clicking on modal to continue, should resume refreshing\n\n    dismissAllRulesIdleModal();\n    checkAutoRefresh(DEFAULT_RULE_REFRESH_INTERVAL_VALUE, 'be.visible'); // if mouse movement detected, idle modal should not\n    // show after 45 min\n\n    resetAllRulesIdleModalTimeout();\n    cy.get(RULE_AUTO_REFRESH_IDLE_MODAL).should('not.exist');\n  });","file":"integration/detection_rules/sorting.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and activates a new threshold rule","suites":["Detection rules, threshold"],"updatePoint":{"line":37,"column":48},"line":37,"code":"  it('Creates and activates a new threshold rule', () => {\n    goToManageAlertsDetectionRules();\n    waitForRulesTableToBeLoaded();\n    goToCreateNewRule();\n    selectThresholdRuleType();\n    fillDefineThresholdRuleAndContinue(rule);\n    fillAboutRuleAndContinue(rule);\n    fillScheduleRuleAndContinue(rule);\n    createAndActivateRule();\n    cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n    changeRowsPerPageTo100();\n    const expectedNumberOfRules = 1;\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n    });\n    filterByCustomRules();\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', 1);\n    });\n    cy.get(RULE_NAME).should('have.text', rule.name);\n    cy.get(RISK_SCORE).should('have.text', rule.riskScore);\n    cy.get(SEVERITY).should('have.text', rule.severity);\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    goToRuleDetails();\n    cy.get(RULE_NAME_HEADER).should('contain', `${rule.name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', rule.riskScore);\n      getDetails(REFERENCE_URLS_DETAILS).should(details => {\n        expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n      });\n      getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n      getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n        expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n      });\n      getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n    });\n    cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n      force: true\n    });\n    cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getIndexPatterns().join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Threshold');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      getDetails(THRESHOLD_DETAILS).should('have.text', `Results aggregated by ${rule.thresholdField} >= ${rule.threshold}`);\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', `${rule.runsEvery.interval}${rule.runsEvery.type}`);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${rule.lookBack.interval}${rule.lookBack.type}`);\n    });\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(NUMBER_OF_ALERTS).should($count => expect(+$count.text().split(' ')[0]).to.be.lt(100));\n    cy.get(ALERT_GRID_CELL).contains(rule.name);\n  });","file":"integration/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Preview results of keyword using \"host.name\"","suites":["Detection rules, threshold"],"line":95,"code":"  it.skip('Preview results of keyword using \"host.name\"', () => {","file":"integration/detection_rules/threshold_rule.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Preview results of \"ip\" using \"source.ip\"","suites":["Detection rules, threshold"],"line":106,"code":"  it.skip('Preview results of \"ip\" using \"source.ip\"', () => {","file":"integration/detection_rules/threshold_rule.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not overwrite values and-ed together","suites":["Exceptions modal"],"updatePoint":{"line":42,"column":47},"line":42,"code":"  it('Does not overwrite values and-ed together', () => {\n    cy.get(ADD_EXCEPTIONS_BTN).click({\n      force: true\n    }); // add multiple entries with invalid field values\n\n    addExceptionEntryFieldValue('agent.name', 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValue('@timestamp', 1);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValue('c', 2); // delete second item, invalid values 'a' and 'c' should remain\n\n    cy.get(ENTRY_DELETE_BTN).eq(1).click();\n    cy.get(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(FIELD_INPUT).eq(1).should('have.text', 'c');\n    closeExceptionBuilderModal();\n  });","file":"integration/exceptions/exceptions_modal.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not overwrite values or-ed together","suites":["Exceptions modal"],"updatePoint":{"line":58,"column":46},"line":58,"code":"  it('Does not overwrite values or-ed together', () => {\n    cy.get(ADD_EXCEPTIONS_BTN).click({\n      force: true\n    }); // exception item 1\n\n    addExceptionEntryFieldValueOfItemX('agent.name', 0, 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.id.keyword', 0, 1); // exception item 2\n\n    cy.get(ADD_OR_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.first', 1, 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.last', 1, 1);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('e', 1, 2); // delete single entry from exception item 2\n\n    cy.get(ENTRY_DELETE_BTN).eq(3).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'user.id.keyword');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(0).should('have.text', 'user.first');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(1).should('have.text', 'e'); // delete remaining entries in exception item 2\n\n    cy.get(ENTRY_DELETE_BTN).eq(2).click();\n    cy.get(ENTRY_DELETE_BTN).eq(2).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'user.id.keyword');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).should('not.exist');\n    closeExceptionBuilderModal();\n  });","file":"integration/exceptions/exceptions_modal.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not overwrite values of nested entry items","suites":["Exceptions modal"],"updatePoint":{"line":87,"column":53},"line":87,"code":"  it('Does not overwrite values of nested entry items', () => {\n    openExceptionModalFromRuleSettings();\n    cy.get(LOADING_SPINNER).should('not.exist'); // exception item 1\n\n    addExceptionEntryFieldValueOfItemX('agent.name', 0, 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('b', 0, 1); // exception item 2 with nested field\n\n    cy.get(ADD_OR_BTN).click();\n    addExceptionEntryFieldValueOfItemX('agent.name', 1, 0);\n    cy.get(ADD_NESTED_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.id{downarrow}{enter}', 1, 1);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('last{downarrow}{enter}', 1, 3); // This button will now read `Add non-nested button`\n\n    cy.get(ADD_NESTED_BTN).scrollIntoView();\n    cy.get(ADD_NESTED_BTN).focus().click();\n    addExceptionEntryFieldValueOfItemX('@timestamp', 1, 4); // should have only deleted `user.id`\n\n    cy.get(ENTRY_DELETE_BTN).eq(4).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'b');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(1).should('have.text', 'user');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(2).should('have.text', 'last');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(3).should('have.text', '@timestamp'); // deleting the last value of a nested entry, should delete the child and parent\n\n    cy.get(ENTRY_DELETE_BTN).eq(4).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'b');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(1).should('have.text', '@timestamp');\n    closeExceptionBuilderModal();\n  });","file":"integration/exceptions/exceptions_modal.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports exception list","suites":["Exceptions Table"],"updatePoint":{"line":42,"column":28},"line":42,"code":"  it('Exports exception list', function () {\n    cy.intercept(/(\\/api\\/exception_lists\\/_export)/).as('export');\n    waitForPageWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded();\n    exportExceptionList();\n    cy.wait('@export').then(({\n      response\n    }) => cy.wrap(response?.body).should('eql', expectedExportedExceptionList(this.exceptionListResponse)));\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Filters exception lists on search","suites":["Exceptions Table"],"updatePoint":{"line":51,"column":39},"line":51,"code":"  it('Filters exception lists on search', () => {\n    waitForPageWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded();\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 3 lists`); // Single word search\n\n    searchForExceptionList('Endpoint');\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 1 list`);\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).should('have.text', 'Endpoint Security Exception List'); // Multi word search\n\n    clearSearchSelection();\n    searchForExceptionList('New Rule Test');\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 2 lists`);\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).eq(0).should('have.text', 'Test exception list');\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).eq(1).should('have.text', 'New Rule Test'); // Exact phrase search\n\n    clearSearchSelection();\n    searchForExceptionList('\"New Rule Test\"');\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 1 list`);\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).should('have.text', 'New Rule Test'); // Field search\n\n    clearSearchSelection();\n    searchForExceptionList('list_id:endpoint_list');\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 1 list`);\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).should('have.text', 'Endpoint Security Exception List');\n    clearSearchSelection();\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 3 lists`);\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes exception list without rule reference","suites":["Exceptions Table"],"updatePoint":{"line":78,"column":51},"line":78,"code":"  it('Deletes exception list without rule reference', () => {\n    waitForPageWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded();\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 3 lists`);\n    deleteExceptionListWithoutRuleReference();\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 2 lists`);\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes exception list with rule reference","suites":["Exceptions Table"],"updatePoint":{"line":85,"column":48},"line":85,"code":"  it('Deletes exception list with rule reference', () => {\n    waitForPageWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded();\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 2 lists`);\n    deleteExceptionListWithRuleReference();\n    cy.get(EXCEPTIONS_TABLE_SHOWING_LISTS).should('have.text', `Showing 1 list`);\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates an exception and deletes it","suites":["From alert"],"updatePoint":{"line":41,"column":41},"line":41,"code":"  it('Creates an exception and deletes it', () => {\n    addExceptionFromFirstAlert();\n    addsException(getException());\n    esArchiverLoad('auditbeat_for_exceptions2');\n    cy.get(EMPTY_ALERT_TABLE).should('exist');\n    goToClosedAlerts();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`);\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    cy.get(EMPTY_ALERT_TABLE).should('exist');\n    goToExceptionsTab();\n    removeException();\n    goToAlertsTab();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`);\n  });","file":"integration/exceptions/from_alert.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates an exception and deletes it","suites":["From rule"],"updatePoint":{"line":43,"column":41},"line":43,"code":"  it('Creates an exception and deletes it', () => {\n    goToExceptionsTab();\n    addsExceptionFromRuleSettings(getException());\n    esArchiverLoad('auditbeat_for_exceptions2');\n    waitForTheRuleToBeExecuted();\n    goToAlertsTab();\n    cy.get(EMPTY_ALERT_TABLE).should('exist');\n    goToClosedAlerts();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS} alert`);\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    cy.get(EMPTY_ALERT_TABLE).should('exist');\n    goToExceptionsTab();\n    removeException();\n    goToAlertsTab();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS} alert`);\n  });","file":"integration/exceptions/from_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Overview page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":19,"column":36},"line":19,"code":"  it('navigates to the Overview page', () => {\n    navigateFromHeaderTo(OVERVIEW);\n    cy.url().should('include', OVERVIEW_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Alerts page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":23,"column":34},"line":23,"code":"  it('navigates to the Alerts page', () => {\n    navigateFromHeaderTo(ALERTS);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Hosts page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":27,"column":33},"line":27,"code":"  it('navigates to the Hosts page', () => {\n    navigateFromHeaderTo(HOSTS);\n    cy.url().should('include', HOSTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Network page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":31,"column":35},"line":31,"code":"  it('navigates to the Network page', () => {\n    navigateFromHeaderTo(NETWORK);\n    cy.url().should('include', NETWORK_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Rules page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":35,"column":33},"line":35,"code":"  it('navigates to the Rules page', () => {\n    navigateFromHeaderTo(RULES);\n    cy.url().should('include', DETECTIONS_RULE_MANAGEMENT_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Exceptions page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":39,"column":38},"line":39,"code":"  it('navigates to the Exceptions page', () => {\n    navigateFromHeaderTo(EXCEPTIONS);\n    cy.url().should('include', EXCEPTIONS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Timelines page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":43,"column":37},"line":43,"code":"  it('navigates to the Timelines page', () => {\n    navigateFromHeaderTo(TIMELINES);\n    cy.url().should('include', TIMELINES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Cases page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":47,"column":33},"line":47,"code":"  it('navigates to the Cases page', () => {\n    navigateFromHeaderTo(CASES);\n    cy.url().should('include', CASES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Endpoints page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":51,"column":37},"line":51,"code":"  it('navigates to the Endpoints page', () => {\n    navigateFromHeaderTo(ENDPOINTS);\n    cy.url().should('include', ENDPOINTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Trusted Apps page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":55,"column":40},"line":55,"code":"  it('navigates to the Trusted Apps page', () => {\n    navigateFromHeaderTo(TRUSTED_APPS);\n    cy.url().should('include', TRUSTED_APPS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Event Filters page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":59,"column":41},"line":59,"code":"  it('navigates to the Event Filters page', () => {\n    navigateFromHeaderTo(EVENT_FILTERS);\n    cy.url().should('include', EVENT_FILTERS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Overview page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":71,"column":36},"line":71,"code":"  it('navigates to the Overview page', () => {\n    navigateFromKibanaCollapsibleTo(OVERVIEW_PAGE);\n    cy.url().should('include', OVERVIEW_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Alerts page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":75,"column":34},"line":75,"code":"  it('navigates to the Alerts page', () => {\n    navigateFromKibanaCollapsibleTo(ALERTS_PAGE);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Hosts page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":79,"column":33},"line":79,"code":"  it('navigates to the Hosts page', () => {\n    navigateFromKibanaCollapsibleTo(HOSTS_PAGE);\n    cy.url().should('include', HOSTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Network page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":83,"column":35},"line":83,"code":"  it('navigates to the Network page', () => {\n    navigateFromKibanaCollapsibleTo(NETWORK_PAGE);\n    cy.url().should('include', NETWORK_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Timelines page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":87,"column":37},"line":87,"code":"  it('navigates to the Timelines page', () => {\n    navigateFromKibanaCollapsibleTo(TIMELINES_PAGE);\n    cy.url().should('include', TIMELINES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Cases page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":91,"column":33},"line":91,"code":"  it('navigates to the Cases page', () => {\n    navigateFromKibanaCollapsibleTo(CASES_PAGE);\n    cy.url().should('include', CASES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Endpoints page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":95,"column":37},"line":95,"code":"  it('navigates to the Endpoints page', () => {\n    navigateFromKibanaCollapsibleTo(ENDPOINTS_PAGE);\n    cy.url().should('include', ENDPOINTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds correctly a filter to the global search bar","suites":["SearchBar"],"updatePoint":{"line":20,"column":54},"line":20,"code":"  it('adds correctly a filter to the global search bar', () => {\n    openAddFilterPopover();\n    fillAddFilterForm(getHostIpFilter());\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).should('have.text', `${getHostIpFilter().key}: ${getHostIpFilter().value}`);\n  });","file":"integration/header/search_bar.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays the `default ECS` category (by default)","suites":["Events Viewer","Fields rendering"],"updatePoint":{"line":46,"column":56},"line":46,"code":"    it('displays the `default ECS` category (by default)', () => {\n      cy.get(FIELDS_BROWSER_SELECTED_CATEGORY_TITLE).should('have.text', 'default ECS');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays a checked checkbox for all of the default events viewer columns that are also in the default ECS category","suites":["Events Viewer","Fields rendering"],"updatePoint":{"line":49,"column":122},"line":49,"code":"    it('displays a checked checkbox for all of the default events viewer columns that are also in the default ECS category', () => {\n      defaultHeadersInDefaultEcsCategory.forEach(header => cy.get(FIELDS_BROWSER_CHECKBOX(header.id)).should('be.checked'));\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"launches the inspect query modal when the inspect button is clicked","suites":["Events Viewer","Events viewer query modal"],"updatePoint":{"line":59,"column":75},"line":59,"code":"    it('launches the inspect query modal when the inspect button is clicked', () => {\n      waitsForEventsToBeLoaded();\n      opensInspectQueryModal();\n      cy.get(INSPECT_MODAL).should('exist');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds a field to the events viewer when the user clicks the checkbox","suites":["Events Viewer","Events viewer fields behaviour"],"updatePoint":{"line":74,"column":75},"line":74,"code":"    it('adds a field to the events viewer when the user clicks the checkbox', () => {\n      const filterInput = 'host.geo.c';\n      filterFieldsBrowser(filterInput);\n      cy.get(HOST_GEO_CITY_NAME_HEADER).should('not.exist');\n      addsHostGeoCityNameToHeader();\n      closeFieldsBrowser();\n      cy.get(HOST_GEO_CITY_NAME_HEADER).should('exist');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"resets all fields in the events viewer when `Reset Fields` is clicked","suites":["Events Viewer","Events viewer fields behaviour"],"updatePoint":{"line":82,"column":77},"line":82,"code":"    it('resets all fields in the events viewer when `Reset Fields` is clicked', () => {\n      const filterInput = 'host.geo.c';\n      filterFieldsBrowser(filterInput);\n      cy.get(HOST_GEO_COUNTRY_NAME_HEADER).should('not.exist');\n      addsHostGeoCountryNameToHeader();\n      resetFields();\n      cy.get(HOST_GEO_COUNTRY_NAME_HEADER).should('not.exist');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"filters the events by applying filter criteria from the search bar at the top of the page","suites":["Events Viewer","Events behavior"],"updatePoint":{"line":101,"column":97},"line":101,"code":"    it('filters the events by applying filter criteria from the search bar at the top of the page', () => {\n      const filterInput = 'aa7ca589f1b8220002f2fc61c64cfbf1'; // this will never match real data\n\n      cy.get(SERVER_SIDE_EVENT_COUNT).invoke('text').then(initialNumberOfEvents => {\n        kqlSearch(`${filterInput}{enter}`);\n        cy.get(SERVER_SIDE_EVENT_COUNT).should('not.have.text', initialNumberOfEvents);\n      });\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the ","suites":["Inspect","Hosts stats and tables"],"updatePoint":{"line":24,"column":86},"line":24,"code":"    INSPECT_HOSTS_BUTTONS_IN_SECURITY.forEach(table => it(`inspects the ${table.title}`, () => {\n      openStatsAndTables(table);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    }));","file":"integration/hosts/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the host details","suites":["Inspect","Hosts details"],"updatePoint":{"line":36,"column":33},"line":36,"code":"    it(`inspects the host details`, () => {\n      clickInspectButton(HOST_OVERVIEW);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    });","file":"integration/hosts/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders","suites":["RiskyHosts KPI"],"updatePoint":{"line":10,"column":13},"line":10,"code":"  it('renders', () => {\n    loginAndWaitForPage(HOSTS_URL);\n    cy.get('[data-test-subj=\"riskyHostsTotal\"]').should('have.text', '0 Risky Hosts');\n    cy.get('[data-test-subj=\"riskyHostsCriticalQuantity\"]').should('have.text', '0 hosts');\n    cy.get('[data-test-subj=\"riskyHostsHighQuantity\"]').should('have.text', '0 hosts');\n  });","file":"integration/hosts/risky_hosts_kpi.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a single IP with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":15,"column":62},"line":15,"code":"  it('sets the KQL from a single IP with a value for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkSingleIpKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple IPs with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":19,"column":64},"line":19,"code":"  it('sets the KQL from a multiple IPs with a null for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkMultipleIpNullKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '((source.ip: \"127.0.0.1\" or destination.ip: \"127.0.0.1\") or (source.ip: \"127.0.0.2\" or destination.ip: \"127.0.0.2\"))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple IPs with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":23,"column":65},"line":23,"code":"  it('sets the KQL from a multiple IPs with a value for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkMultipleIpKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '((source.ip: \"127.0.0.1\" or destination.ip: \"127.0.0.1\") or (source.ip: \"127.0.0.2\" or destination.ip: \"127.0.0.2\")) and ((process.name: \"conhost.exe\" or process.name: \"sc.exe\"))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a $ip$ with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":27,"column":57},"line":27,"code":"  it('sets the KQL from a $ip$ with a value for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a single host name with a value for query","suites":["ml conditional links"],"updatePoint":{"line":31,"column":65},"line":31,"code":"  it('sets the KQL from a single host name with a value for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostSingleHostKqlQuery);\n    cy.get(KQL_INPUT).invoke('text').should('eq', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple host names with null for query","suites":["ml conditional links"],"updatePoint":{"line":35,"column":65},"line":35,"code":"  it('sets the KQL from a multiple host names with null for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostMultiHostNullKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(host.name: \"siem-windows\" or host.name: \"siem-suricata\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple host names with a value for query","suites":["ml conditional links"],"updatePoint":{"line":39,"column":68},"line":39,"code":"  it('sets the KQL from a multiple host names with a value for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostMultiHostKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(host.name: \"siem-windows\" or host.name: \"siem-suricata\") and ((process.name: \"conhost.exe\" or process.name: \"sc.exe\"))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a undefined/null host name but with a value for query","suites":["ml conditional links"],"updatePoint":{"line":43,"column":77},"line":43,"code":"  it('sets the KQL from a undefined/null host name but with a value for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostVariableHostKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single IP with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":47,"column":58},"line":47,"code":"  it('redirects from a single IP with a null for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkSingleIpNullKqlQuery);\n    cy.url().should('include', 'app/security/network/ip/127.0.0.1/source?timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single IP with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":51,"column":59},"line":51,"code":"  it('redirects from a single IP with a value for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkSingleIpKqlQuery);\n    cy.url().should('include', '/app/security/network/ip/127.0.0.1/source?query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple IPs with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":55,"column":61},"line":55,"code":"  it('redirects from a multiple IPs with a null for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkMultipleIpNullKqlQuery);\n    cy.url().should('include', 'app/security/network/flows?query=(language:kuery,query:%27((source.ip:%20%22127.0.0.1%22%20or%20destination.ip:%20%22127.0.0.1%22)%20or%20(source.ip:%20%22127.0.0.2%22%20or%20destination.ip:%20%22127.0.0.2%22))%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple IPs with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":59,"column":62},"line":59,"code":"  it('redirects from a multiple IPs with a value for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkMultipleIpKqlQuery);\n    cy.url().should('include', '/app/security/network/flows?query=(language:kuery,query:%27((source.ip:%20%22127.0.0.1%22%20or%20destination.ip:%20%22127.0.0.1%22)%20or%20(source.ip:%20%22127.0.0.2%22%20or%20destination.ip:%20%22127.0.0.2%22))%20and%20((process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22))%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a $ip$ with a null query","suites":["ml conditional links"],"updatePoint":{"line":63,"column":45},"line":63,"code":"  it('redirects from a $ip$ with a null query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkNullKqlQuery);\n    cy.url().should('include', '/app/security/network/flows?timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a $ip$ with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":67,"column":54},"line":67,"code":"  it('redirects from a $ip$ with a value for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlNetworkKqlQuery);\n    cy.url().should('include', `/app/security/network/flows?query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))`);\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single host name with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":71,"column":65},"line":71,"code":"  it('redirects from a single host name with a null for the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostSingleHostNullKqlQuery);\n    cy.url().should('include', '/app/security/hosts/siem-windows/anomalies?timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a host name with a variable in the query","suites":["ml conditional links"],"updatePoint":{"line":75,"column":61},"line":75,"code":"  it('redirects from a host name with a variable in the query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostSingleHostKqlQueryVariable);\n    cy.url().should('include', '/app/security/hosts/siem-windows/anomalies?timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single host name with a value for query","suites":["ml conditional links"],"updatePoint":{"line":79,"column":62},"line":79,"code":"  it('redirects from a single host name with a value for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostSingleHostKqlQuery);\n    cy.url().should('include', '/app/security/hosts/siem-windows/anomalies?query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple host names with null for query","suites":["ml conditional links"],"updatePoint":{"line":83,"column":62},"line":83,"code":"  it('redirects from a multiple host names with null for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostMultiHostNullKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?query=(language:kuery,query:%27(host.name:%20%22siem-windows%22%20or%20host.name:%20%22siem-suricata%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple host names with a value for query","suites":["ml conditional links"],"updatePoint":{"line":87,"column":65},"line":87,"code":"  it('redirects from a multiple host names with a value for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostMultiHostKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?query=(language:kuery,query:%27(host.name:%20%22siem-windows%22%20or%20host.name:%20%22siem-suricata%22)%20and%20((process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22))%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a undefined/null host name with a null for the KQL","suites":["ml conditional links"],"updatePoint":{"line":91,"column":71},"line":91,"code":"  it('redirects from a undefined/null host name with a null for the KQL', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostVariableHostNullKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a undefined/null host name but with a value for query","suites":["ml conditional links"],"updatePoint":{"line":95,"column":74},"line":95,"code":"  it('redirects from a undefined/null host name but with a value for query', () => {\n    loginAndWaitForPageWithoutDateRange(mlHostVariableHostKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))&sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the ","suites":["Inspect","Network stats and tables"],"updatePoint":{"line":21,"column":88},"line":21,"code":"    INSPECT_NETWORK_BUTTONS_IN_SECURITY.forEach(table => it(`inspects the ${table.title}`, () => {\n      openStatsAndTables(table);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    }));","file":"integration/network/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled threat intel module as expected","suites":["CTI Link Panel"],"updatePoint":{"line":16,"column":54},"line":16,"code":"  it('renders disabled threat intel module as expected', () => {\n    loginAndWaitForPage(OVERVIEW_URL);\n    cy.get(`${OVERVIEW_CTI_LINKS} ${OVERVIEW_CTI_LINKS_ERROR_INNER_PANEL}`).should('exist');\n    cy.get(`${OVERVIEW_CTI_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 indicators');\n    cy.get(`${OVERVIEW_CTI_ENABLE_MODULE_BUTTON}`).should('exist');\n    cy.get(`${OVERVIEW_CTI_ENABLE_MODULE_BUTTON}`).should('have.attr', 'href').and('match', /app\\/integrations\\/browse\\?q=threat%20intelligence/);\n  });","file":"integration/overview/cti_link_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled dashboard module as expected when there are no events in the selected time period","suites":["CTI Link Panel","enabled threat intel module"],"updatePoint":{"line":30,"column":106},"line":30,"code":"    it('renders disabled dashboard module as expected when there are no events in the selected time period', () => {\n      loginAndWaitForPage(`${OVERVIEW_URL}?sourcerer=(timerange:(from:%272021-07-08T04:00:00.000Z%27,kind:absolute,to:%272021-07-09T03:59:59.999Z%27))`);\n      cy.get(`${OVERVIEW_CTI_LINKS} ${OVERVIEW_CTI_LINKS_INFO_INNER_PANEL}`).should('exist');\n      cy.get(`${OVERVIEW_CTI_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 indicators');\n    });","file":"integration/overview/cti_link_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders dashboard module as expected when there are events in the selected time period","suites":["CTI Link Panel","enabled threat intel module"],"updatePoint":{"line":35,"column":94},"line":35,"code":"    it('renders dashboard module as expected when there are events in the selected time period', () => {\n      loginAndWaitForPage(OVERVIEW_URL);\n      cy.get(`${OVERVIEW_CTI_LINKS} ${OVERVIEW_CTI_LINKS_INFO_INNER_PANEL}`).should('exist');\n      cy.get(`${OVERVIEW_CTI_LINKS} ${OVERVIEW_CTI_ENABLE_INTEGRATIONS_BUTTON}`).should('exist');\n      cy.get(OVERVIEW_CTI_LINKS).should('not.contain.text', 'Anomali');\n      cy.get(OVERVIEW_CTI_LINKS).should('contain.text', 'AbuseCH malware');\n      cy.get(`${OVERVIEW_CTI_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 1 indicator');\n    });","file":"integration/overview/cti_link_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Host stats render with correct values","suites":["Overview Page"],"updatePoint":{"line":24,"column":43},"line":24,"code":"  it('Host stats render with correct values', () => {\n    expandHostStats();\n    HOST_STATS.forEach(stat => {\n      cy.get(stat.domId).should('have.text', stat.value);\n    });\n  });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Network stats render with correct values","suites":["Overview Page"],"updatePoint":{"line":30,"column":46},"line":30,"code":"  it('Network stats render with correct values', () => {\n    expandNetworkStats();\n    NETWORK_STATS.forEach(stat => {\n      cy.get(stat.domId).should('have.text', stat.value);\n    });\n  });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should appear on overview page","suites":["Overview Page","Favorite Timelines"],"updatePoint":{"line":37,"column":38},"line":37,"code":"    it('should appear on overview page', () => {\n      createTimeline(getTimeline()).then(response => response.body.data.persistTimeline.timeline.savedObjectId).then(timelineId => {\n        favoriteTimeline({\n          timelineId,\n          timelineType: 'default'\n        }).then(() => {\n          loginAndWaitForPage(OVERVIEW_URL);\n          cy.get('[data-test-subj=\"overview-recent-timelines\"]').should('contain', getTimeline().title);\n        });\n      });\n    });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Splash screen should be here","suites":["Overview page with no data"],"updatePoint":{"line":57,"column":34},"line":57,"code":"  it('Splash screen should be here', () => {\n    loginAndWaitForPage(OVERVIEW_URL);\n    cy.get(OVERVIEW_EMPTY_PAGE).should('be.visible');\n  });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled panel view as expected","suites":["Risky Hosts Link Panel"],"updatePoint":{"line":19,"column":45},"line":19,"code":"  it('renders disabled panel view as expected', () => {\n    loginAndWaitForPage(OVERVIEW_URL);\n    cy.get(`${OVERVIEW_RISKY_HOSTS_LINKS} ${OVERVIEW_RISKY_HOSTS_LINKS_ERROR_INNER_PANEL}`).should('exist');\n    cy.get(`${OVERVIEW_RISKY_HOSTS_VIEW_DASHBOARD_BUTTON}`).should('be.disabled');\n    cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 hosts');\n    cy.get(`${OVERVIEW_RISKY_HOSTS_ENABLE_MODULE_BUTTON}`).should('exist');\n    cy.get(`${OVERVIEW_RISKY_HOSTS_ENABLE_MODULE_BUTTON}`).should('have.attr', 'href').and('match', /host-risk-score.md/);\n  });","file":"integration/overview/risky_hosts_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled dashboard module as expected when there are no hosts in the selected time period","suites":["Risky Hosts Link Panel","enabled module"],"updatePoint":{"line":36,"column":105},"line":36,"code":"    it('renders disabled dashboard module as expected when there are no hosts in the selected time period', () => {\n      loginAndWaitForPage(`${OVERVIEW_URL}?sourcerer=(timerange:(from:%272021-07-08T04:00:00.000Z%27,kind:absolute,to:%272021-07-09T03:59:59.999Z%27))`);\n      cy.get(`${OVERVIEW_RISKY_HOSTS_LINKS} ${OVERVIEW_RISKY_HOSTS_LINKS_WARNING_INNER_PANEL}`).should('exist');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_VIEW_DASHBOARD_BUTTON}`).should('be.disabled');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 hosts');\n    });","file":"integration/overview/risky_hosts_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders space aware dashboard module as expected when there are hosts in the selected time period","suites":["Risky Hosts Link Panel","enabled module"],"updatePoint":{"line":42,"column":105},"line":42,"code":"    it('renders space aware dashboard module as expected when there are hosts in the selected time period', () => {\n      loginAndWaitForPage(OVERVIEW_URL);\n      cy.get(`${OVERVIEW_RISKY_HOSTS_LINKS} ${OVERVIEW_RISKY_HOSTS_LINKS_WARNING_INNER_PANEL}`).should('not.exist');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_VIEW_DASHBOARD_BUTTON}`).should('be.disabled');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 1 host');\n      changeSpace(testSpaceName);\n      cy.visit(`/s/${testSpaceName}${OVERVIEW_URL}`);\n      cy.get(`${OVERVIEW_RISKY_HOSTS_VIEW_DASHBOARD_BUTTON}`).should('be.disabled');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 hosts');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_ENABLE_MODULE_BUTTON}`).should('exist');\n    });","file":"integration/overview/risky_hosts_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pagination updates results and page number","suites":["Pagination"],"updatePoint":{"line":26,"column":48},"line":26,"code":"  it('pagination updates results and page number', () => {\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(PROCESS_NAME_FIELD).first().invoke('text').then(processNameFirstPage => {\n      goToThirdPage();\n      waitForUncommonProcessesToBeLoaded();\n      cy.wait(1500);\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(PROCESS_NAME_FIELD).first().invoke('text').should(processNameSecondPage => {\n        expect(processNameFirstPage).not.to.eq(processNameSecondPage);\n      });\n    });\n    cy.wait(3000);\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(THIRD_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n  });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pagination keeps track of page results when tabs change","suites":["Pagination"],"updatePoint":{"line":40,"column":61},"line":40,"code":"  it('pagination keeps track of page results when tabs change', () => {\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    goToThirdPage();\n    waitForUncommonProcessesToBeLoaded();\n    cy.get(PROCESS_NAME_FIELD).first().invoke('text').then(expectedThirdPageResult => {\n      openAuthentications();\n      waitForAuthenticationsToBeLoaded();\n      cy.get(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n      openUncommonProcesses();\n      waitForUncommonProcessesToBeLoaded();\n      cy.get(THIRD_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n      cy.get(PROCESS_NAME_FIELD).first().invoke('text').should(actualThirdPageResult => {\n        expect(expectedThirdPageResult).to.eq(actualThirdPageResult);\n      });\n    });\n  });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pagination resets results and page number to first page when refresh is clicked","suites":["Pagination"],"updatePoint":{"line":56,"column":85},"line":56,"code":"  it('pagination resets results and page number to first page when refresh is clicked', () => {\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    goToThirdPage();\n    waitForUncommonProcessesToBeLoaded();\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n    refreshPage();\n    waitForUncommonProcessesToBeLoaded();\n    cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n  });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates a timeline template","suites":["Timeline Templates"],"updatePoint":{"line":22,"column":33},"line":22,"code":"  it('Creates a timeline template', async () => {\n    loginAndWaitForPageWithoutDateRange(TIMELINES_URL);\n    openTimelineUsingToggle();\n    createNewTimelineTemplate();\n    populateTimeline();\n    addFilter(getTimeline().filter);\n    cy.get(PIN_EVENT).should('have.attr', 'aria-label', 'This event may not be pinned while editing a template timeline');\n    cy.get(LOCKED_ICON).should('be.visible');\n    addNameToTimeline(getTimeline().title);\n    cy.wait('@timeline').then(({\n      response\n    }) => {\n      const timelineId = response?.body.data.persistTimeline.timeline.savedObjectId;\n      addDescriptionToTimeline(getTimeline().description);\n      addNotesToTimeline(getTimeline().notes);\n      markAsFavorite();\n      waitForTimelineChanges();\n      createNewTimelineTemplate();\n      closeTimeline();\n      openTimelineTemplateFromSettings(timelineId);\n      cy.contains(getTimeline().title).should('exist');\n      cy.get(TIMELINES_DESCRIPTION).first().should('have.text', getTimeline().description);\n      cy.get(TIMELINES_PINNED_EVENT_COUNT).first().should('have.text', '1');\n      cy.get(TIMELINES_NOTES_COUNT).first().should('have.text', '1');\n      cy.get(TIMELINES_FAVORITE).first().should('exist');\n      openTimeline(timelineId);\n      cy.get(FAVORITE_TIMELINE).should('exist');\n      cy.get(TIMELINE_TITLE).should('have.text', getTimeline().title);\n      cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n      cy.get(TIMELINE_QUERY).should('have.text', getTimeline().query); // Comments this assertion until we agreed what to do with the filters.\n      // cy.get(TIMELINE_FILTER(timeline.filter)).should('exist');\n      // cy.get(NOTES_COUNT).should('have.text', '1');\n\n      cy.get(NOTES_TAB_BUTTON).click();\n      cy.get(NOTES_TEXT_AREA).should('exist');\n      cy.get(NOTES).should('have.text', getTimeline().notes);\n    });\n  });","file":"integration/timeline_templates/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Create template from timeline","suites":["Timeline Templates"],"updatePoint":{"line":60,"column":35},"line":60,"code":"  it('Create template from timeline', () => {\n    createTimeline(getTimeline());\n    loginAndWaitForPageWithoutDateRange(TIMELINES_URL);\n    waitForTimelinesPanelToBeLoaded();\n    expandEventAction();\n    clickingOnCreateTemplateFromTimelineBtn();\n    cy.wait('@timeline', {\n      timeout: 100000\n    });\n    cy.get(TIMELINE_FLYOUT_WRAPPER).should('have.css', 'visibility', 'visible');\n    cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n    cy.get(TIMELINE_QUERY).should('have.text', getTimeline().query);\n  });","file":"integration/timeline_templates/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports a custom timeline template","suites":["Export timelines"],"updatePoint":{"line":26,"column":40},"line":26,"code":"  it('Exports a custom timeline template', function () {\n    loginAndWaitForPageWithoutDateRange(TIMELINE_TEMPLATES_URL);\n    exportTimeline(this.templateId);\n    cy.wait('@export').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.wrap(response?.body).should('eql', expectedExportedTimelineTemplate(this.templateResponse));\n    });\n  });","file":"integration/timeline_templates/export.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"toggle create timeline ","suites":["Timelines","Toggle create timeline from plus icon"],"updatePoint":{"line":26,"column":31},"line":26,"code":"    it('toggle create timeline ', () => {\n      createNewTimeline();\n      cy.get(TIMELINE_PANEL).should('be.visible');\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can be added filter","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":43,"column":27},"line":43,"code":"    it('can be added filter', () => {\n      addFilter(getTimeline().filter);\n      cy.get(TIMELINE_FILTER(getTimeline().filter)).should('exist');\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pins an event","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":47,"column":21},"line":47,"code":"    it('pins an event', () => {\n      pinFirstEvent();\n      cy.get(PIN_EVENT).should('have.attr', 'aria-label').and('match', /Unpin the event in row 2/);\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"has a lock icon","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":51,"column":23},"line":51,"code":"    it('has a lock icon', () => {\n      cy.get(LOCKED_ICON).should('be.visible');\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can be added notes","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":54,"column":26},"line":54,"code":"    it('can be added notes', () => {\n      addNotesToTimeline(getTimeline().notes);\n      cy.get(TIMELINE_TAB_CONTENT_GRAPHS_NOTES).find(NOTES_TEXT).should('have.text', getTimeline().notes);\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should update timeline after adding eql","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":58,"column":47},"line":58,"code":"    it('should update timeline after adding eql', () => {\n      cy.intercept('PATCH', '/api/timeline').as('updateTimeline');\n      const eql = 'any where process.name == \"which\"';\n      addEqlToTimeline(eql);\n      cy.wait('@updateTimeline', {\n        timeout: 10000\n      }).its('response.statusCode').should('eq', 200);\n      cy.get(`${TIMELINE_TAB_CONTENT_EQL} ${SERVER_SIDE_EVENT_COUNT}`).invoke('text').then(parseInt).should('be.gt', 0);\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Should have the same query and open the timeline modal","suites":["Create a timeline from a template"],"updatePoint":{"line":77,"column":60},"line":77,"code":"  it('Should have the same query and open the timeline modal', () => {\n    selectCustomTemplates();\n    cy.wait('@timeline', {\n      timeout: 100000\n    });\n    expandEventAction();\n    clickingOnCreateTimelineFormTemplateBtn();\n    cy.wait('@timeline', {\n      timeout: 100000\n    });\n    cy.get(TIMELINE_FLYOUT_WRAPPER).should('have.css', 'visibility', 'visible');\n    cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n    cy.get(TIMELINE_QUERY).should('have.text', getTimeline().query);\n    closeTimeline();\n  });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays the data provider action menu when Enter is pressed","suites":["timeline data providers"],"updatePoint":{"line":25,"column":66},"line":25,"code":"  it('displays the data provider action menu when Enter is pressed', done => {\n    openTimelineUsingToggle();\n    addDataProvider({\n      field: 'host.name',\n      operator: 'exists'\n    }).then(() => {\n      cy.get(TIMELINE_DATA_PROVIDERS_ACTION_MENU).should('not.exist');\n      cy.get(`${TIMELINE_FLYOUT_HEADER} ${TIMELINE_DROPPED_DATA_PROVIDERS}`).pipe($el => $el.trigger('focus')).should('exist');\n      cy.get(`${TIMELINE_FLYOUT_HEADER} ${TIMELINE_DROPPED_DATA_PROVIDERS}`).first().parent().type('{enter}');\n      cy.get(TIMELINE_DATA_PROVIDERS_ACTION_MENU).should('exist');\n      done();\n    });\n  });","file":"integration/timelines/data_providers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports a custom timeline","suites":["Export timelines"],"updatePoint":{"line":26,"column":31},"line":26,"code":"  it('Exports a custom timeline', function () {\n    loginAndWaitForPageWithoutDateRange(TIMELINES_URL);\n    waitForTimelinesPanelToBeLoaded();\n    exportTimeline(this.timelineId);\n    cy.wait('@export').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.wrap(response?.body).should('eql', expectedExportedTimeline(this.timelineResponse));\n    });\n  });","file":"integration/timelines/export.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays the `default ECS` category (by default)","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":44,"column":56},"line":44,"code":"    it('displays the `default ECS` category (by default)', () => {\n      cy.get(FIELDS_BROWSER_SELECTED_CATEGORY_TITLE).should('have.text', 'default ECS');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"the `defaultECS` (selected) category count matches the default timeline header count","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":47,"column":92},"line":47,"code":"    it('the `defaultECS` (selected) category count matches the default timeline header count', () => {\n      cy.get(FIELDS_BROWSER_SELECTED_CATEGORY_COUNT).should('have.text', `${defaultHeaders.length}`);\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays a checked checkbox for all of the default timeline columns","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":50,"column":75},"line":50,"code":"    it('displays a checked checkbox for all of the default timeline columns', () => {\n      defaultHeaders.forEach(header => cy.get(`[data-test-subj=\"field-${header.id}-checkbox\"]`).should('be.checked'));\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays the expected count of categories that match the filter input","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":53,"column":77},"line":53,"code":"    it('displays the expected count of categories that match the filter input', () => {\n      const filterInput = 'host.mac';\n      filterFieldsBrowser(filterInput);\n      cy.get(FIELDS_BROWSER_CATEGORIES_COUNT).should('have.text', '2 categories');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays a search results label with the expected count of fields matching the filter input","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":58,"column":99},"line":58,"code":"    it('displays a search results label with the expected count of fields matching the filter input', () => {\n      const filterInput = 'host.mac';\n      filterFieldsBrowser(filterInput);\n      cy.get(FIELDS_BROWSER_HOST_CATEGORIES_COUNT).invoke('text').then(hostCategoriesCount => {\n        cy.get(FIELDS_BROWSER_SYSTEM_CATEGORIES_COUNT).invoke('text').then(systemCategoriesCount => {\n          cy.get(FIELDS_BROWSER_FIELDS_COUNT).should('have.text', `${+hostCategoriesCount + +systemCategoriesCount} fields`);\n        });\n      });\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays a count of only the fields in the selected category that match the filter input","suites":["Fields Browser","Fields Browser rendering"],"line":67,"code":"    it.skip('displays a count of only the fields in the selected category that match the filter input', () => {","file":"integration/timelines/fields_browser.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"removes the message field from the timeline when the user un-checks the field","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":85,"column":85},"line":85,"code":"    it('removes the message field from the timeline when the user un-checks the field', () => {\n      cy.get(FIELDS_BROWSER_MESSAGE_HEADER).should('exist');\n      removesMessageField();\n      closeFieldsBrowser();\n      cy.get(FIELDS_BROWSER_MESSAGE_HEADER).should('not.exist');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"selects a search results label with the expected count of categories matching the filter input","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":91,"column":102},"line":91,"code":"    it('selects a search results label with the expected count of categories matching the filter input', () => {\n      const category = 'host';\n      filterFieldsBrowser(category);\n      cy.get(FIELDS_BROWSER_SELECTED_CATEGORY_TITLE).should('have.text', category);\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds a field to the timeline when the user clicks the checkbox","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":96,"column":70},"line":96,"code":"    it('adds a field to the timeline when the user clicks the checkbox', () => {\n      const filterInput = 'host.geo.c';\n      filterFieldsBrowser(filterInput);\n      cy.get(FIELDS_BROWSER_HOST_GEO_CITY_NAME_HEADER).should('not.exist');\n      addsHostGeoCityNameToTimeline();\n      closeFieldsBrowser();\n      cy.get(FIELDS_BROWSER_HOST_GEO_CITY_NAME_HEADER).should('exist');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"resets all fields in the timeline when `Reset Fields` is clicked","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":104,"column":72},"line":104,"code":"    it('resets all fields in the timeline when `Reset Fields` is clicked', () => {\n      const filterInput = 'host.geo.c';\n      filterFieldsBrowser(filterInput);\n      cy.get(FIELDS_BROWSER_HEADER_HOST_GEO_CONTINENT_NAME_HEADER).should('not.exist');\n      addsHostGeoContinentNameToTimeline();\n      closeFieldsBrowser();\n      cy.get(FIELDS_BROWSER_HEADER_HOST_GEO_CONTINENT_NAME_HEADER).should('exist');\n      openTimelineFieldsBrowser();\n      resetFields();\n      cy.get(FIELDS_BROWSER_HEADER_HOST_GEO_CONTINENT_NAME_HEADER).should('not.exist');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"restores focus to the Customize Columns button when `Reset Fields` is clicked","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":115,"column":85},"line":115,"code":"    it('restores focus to the Customize Columns button when `Reset Fields` is clicked', () => {\n      openTimelineFieldsBrowser();\n      resetFields();\n      cy.get(TIMELINE_FIELDS_BUTTON).should('have.focus');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"restores focus to the Customize Columns button when Esc is pressed","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":120,"column":74},"line":120,"code":"    it('restores focus to the Customize Columns button when Esc is pressed', () => {\n      openTimelineFieldsBrowser();\n      cy.get(FIELDS_BROWSER_FILTER_INPUT).type('{esc}');\n      cy.get(TIMELINE_FIELDS_BUTTON).should('have.focus');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"toggles open the timeline","suites":["timeline flyout button"],"updatePoint":{"line":20,"column":31},"line":20,"code":"  it('toggles open the timeline', () => {\n    openTimelineUsingToggle();\n    cy.get(TIMELINE_FLYOUT_HEADER).should('have.css', 'visibility', 'visible');\n    closeTimelineUsingToggle();\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"re-focuses the toggle button when timeline is closed by clicking the active timeline toggle button","suites":["timeline flyout button"],"updatePoint":{"line":25,"column":104},"line":25,"code":"  it('re-focuses the toggle button when timeline is closed by clicking the active timeline toggle button', () => {\n    openTimelineUsingToggle();\n    closeTimelineUsingToggle();\n    cy.get(TIMELINE_BOTTOM_BAR_TOGGLE_BUTTON).should('have.focus');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"re-focuses the toggle button when timeline is closed by clicking the [X] close button","suites":["timeline flyout button"],"updatePoint":{"line":30,"column":91},"line":30,"code":"  it('re-focuses the toggle button when timeline is closed by clicking the [X] close button', () => {\n    openTimelineUsingToggle();\n    closeTimelineUsingCloseButton();\n    cy.get(TIMELINE_BOTTOM_BAR_TOGGLE_BUTTON).should('have.focus');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"re-focuses the toggle button when timeline is closed by pressing the Esc key","suites":["timeline flyout button"],"updatePoint":{"line":35,"column":82},"line":35,"code":"  it('re-focuses the toggle button when timeline is closed by pressing the Esc key', () => {\n    openTimelineUsingToggle();\n    cy.get('body').type('{esc}');\n    cy.get(TIMELINE_BOTTOM_BAR_TOGGLE_BUTTON).should('have.focus');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"the `(+)` button popover menu owns focus","suites":["timeline flyout button"],"updatePoint":{"line":40,"column":46},"line":40,"code":"  it('the `(+)` button popover menu owns focus', () => {\n    cy.get(TIMELINE_SETTINGS_ICON).filter(':visible').click({\n      force: true\n    });\n    cy.get(`${CREATE_NEW_TIMELINE}`).pipe($el => $el.trigger('focus')).should('have.focus');\n    cy.get(TIMELINE_SETTINGS_ICON).filter(':visible').type('{esc}');\n    cy.get(CREATE_NEW_TIMELINE).should('not.be.visible');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render the global search dropdown when the input is focused","suites":["timeline flyout button"],"updatePoint":{"line":48,"column":72},"line":48,"code":"  it('should render the global search dropdown when the input is focused', () => {\n    openTimelineUsingToggle();\n    cy.get('[data-test-subj=\"nav-search-input\"]').focus();\n    cy.get('[data-test-subj=\"nav-search-input\"]').should('be.focused');\n    cy.get('[data-test-subj=\"nav-search-option\"]').should('be.visible');\n    cy.get('[data-test-subj=\"nav-search-option\"]').first().trigger('mouseenter'); // check that at least one item is visible in the search bar after mousing over, i.e. it's still usable.\n\n    cy.get('[data-test-subj=\"nav-search-option\"]').its('length').should('be.gte', 1);\n    closeTimelineUsingCloseButton();\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Should hide timeline header and tab list area","suites":["Toggle full screen"],"updatePoint":{"line":20,"column":51},"line":20,"code":"  it('Should hide timeline header and tab list area', () => {\n    enterFullScreenMode();\n    cy.get(TIMELINE_TABS).should('not.exist');\n    cy.get(TIMELINE_HEADER).should('not.be.visible');\n  });","file":"integration/timelines/full_screen.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Should show timeline header and tab list area","suites":["Toggle full screen"],"updatePoint":{"line":25,"column":51},"line":25,"code":"  it('Should show timeline header and tab list area', () => {\n    exitFullScreenMode();\n    cy.get(TIMELINE_TABS).should('exist');\n    cy.get(TIMELINE_HEADER).should('be.visible');\n  });","file":"integration/timelines/full_screen.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the timeline","suites":["Inspect","Timeline"],"updatePoint":{"line":14,"column":29},"line":14,"code":"    it('inspects the timeline', () => {\n      const hostExistsQuery = 'host.name: *';\n      loginAndWaitForPage(HOSTS_URL);\n      openTimelineUsingToggle();\n      executeTimelineKQL(hostExistsQuery);\n      openTimelineInspectButton();\n      cy.get(INSPECT_MODAL).should('be.visible');\n    });","file":"integration/timelines/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"persist the deletion of a column","suites":["persistent timeline"],"updatePoint":{"line":23,"column":38},"line":23,"code":"  it('persist the deletion of a column', function () {\n    const MESSAGE_COLUMN = 'message';\n    const MESSAGE_COLUMN_POSITION = 2;\n    cy.get(DATAGRID_HEADERS).eq(MESSAGE_COLUMN_POSITION).should('have.text', MESSAGE_COLUMN);\n    removeColumn(MESSAGE_COLUMN);\n    cy.get(DATAGRID_HEADERS).should('have.length', this.expectedNumberOfTimelineColumns);\n    reload();\n    waitsForEventsToBeLoaded();\n    cy.get(DATAGRID_HEADERS).should('have.length', this.expectedNumberOfTimelineColumns);\n    cy.get(DATAGRID_HEADERS).each($el => expect($el.text()).not.equal(MESSAGE_COLUMN));\n  });","file":"integration/timelines/local_storage.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render mockdown","suites":["Timeline notes tab"],"updatePoint":{"line":29,"column":28},"line":29,"code":"  it('should render mockdown', () => {\n    cy.intercept('/api/note').as(`updateNote`);\n    addNotesToTimeline(getTimelineNonValidQuery().notes);\n    cy.wait('@updateNote').its('response.statusCode').should('eq', 200);\n    cy.get(NOTES_TEXT_AREA).should('exist');\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should contain notes","suites":["Timeline notes tab"],"updatePoint":{"line":35,"column":26},"line":35,"code":"  it('should contain notes', () => {\n    cy.intercept('/api/note').as(`updateNote`);\n    addNotesToTimeline(getTimelineNonValidQuery().notes);\n    cy.wait('@updateNote').its('response.statusCode').should('eq', 200);\n    cy.get(NOTES_TEXT).first().should('have.text', getTimelineNonValidQuery().notes);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render font in bold","suites":["Timeline notes tab"],"updatePoint":{"line":41,"column":43},"line":41,"code":"  it('should be able to render font in bold', () => {\n    cy.intercept('/api/note').as(`updateNote`);\n    addNotesToTimeline(`**bold**`);\n    cy.wait('@updateNote').its('response.statusCode').should('eq', 200);\n    cy.get(`${NOTES_TEXT} strong`).last().should('have.text', `bold`);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render font in italics","suites":["Timeline notes tab"],"updatePoint":{"line":47,"column":46},"line":47,"code":"  it('should be able to render font in italics', () => {\n    cy.intercept('/api/note').as(`updateNote`);\n    addNotesToTimeline(`_italics_`);\n    cy.wait('@updateNote').its('response.statusCode').should('eq', 200);\n    cy.get(`${NOTES_TEXT} em`).last().should('have.text', `italics`);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render code blocks","suites":["Timeline notes tab"],"updatePoint":{"line":53,"column":42},"line":53,"code":"  it('should be able to render code blocks', () => {\n    cy.intercept('/api/note').as(`updateNote`);\n    addNotesToTimeline(`\\`code\\``);\n    cy.wait('@updateNote').its('response.statusCode').should('eq', 200);\n    cy.get(NOTES_CODE_BLOCK).should('exist');\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render the right author","suites":["Timeline notes tab"],"updatePoint":{"line":59,"column":36},"line":59,"code":"  it('should render the right author', () => {\n    cy.intercept('/api/note').as(`updateNote`);\n    addNotesToTimeline(getTimelineNonValidQuery().notes);\n    cy.wait('@updateNote').its('response.statusCode').should('eq', 200);\n    cy.get(NOTES_AUTHOR).first().should('have.text', text);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render a link","suites":["Timeline notes tab"],"updatePoint":{"line":65,"column":37},"line":65,"code":"  it('should be able to render a link', () => {\n    cy.intercept('/api/note').as(`updateNote`);\n    cy.intercept(link).as(`link`);\n    addNotesToTimeline(`[${text}](${link})`);\n    cy.wait('@updateNote').its('response.statusCode').should('eq', 200);\n    cy.get(NOTES_LINK).last().should('have.text', `${text}(opens in a new tab or window)`);\n    cy.get(NOTES_LINK).last().click();\n    cy.wait('@link').its('response.statusCode').should('eq', 200);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should open a modal","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":35,"column":27},"line":35,"code":"    it('should open a modal', () => {\n      cy.get(OPEN_TIMELINE_MODAL).should('be.visible');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - title","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":38,"column":44},"line":38,"code":"    it('should display timeline info - title', () => {\n      cy.contains(getTimeline().title).should('exist');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - description","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":41,"column":50},"line":41,"code":"    it('should display timeline info - description', () => {\n      cy.get(TIMELINES_DESCRIPTION).first().should('have.text', getTimeline().description);\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - pinned event count","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":44,"column":57},"line":44,"code":"    it('should display timeline info - pinned event count', () => {\n      cy.get(TIMELINES_PINNED_EVENT_COUNT).first().should('have.text', '1');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - notes count","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":47,"column":50},"line":47,"code":"    it('should display timeline info - notes count', () => {\n      cy.get(TIMELINES_NOTES_COUNT).first().should('have.text', '1');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - favorite timeline","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":50,"column":56},"line":50,"code":"    it('should display timeline info - favorite timeline', () => {\n      cy.get(TIMELINES_FAVORITE).first().should('exist');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline content - title","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":53,"column":47},"line":53,"code":"    it('should display timeline content - title', () => {\n      cy.get(TIMELINE_TITLE).should('have.text', getTimeline().title);\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline content - description","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":56,"column":53},"line":56,"code":"    it('should display timeline content - description', () => {\n      cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should have  events in the page by default","suites":["Pagination"],"updatePoint":{"line":21,"column":66},"line":21,"code":"  it(`should have ${defaultPageSize} events in the page by default`, () => {\n    cy.get(TIMELINE_EVENT).should('have.length', defaultPageSize);\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should select  items per page by default","suites":["Pagination"],"updatePoint":{"line":24,"column":64},"line":24,"code":"  it(`should select ${defaultPageSize} items per page by default`, () => {\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE).should('contain.text', defaultPageSize);\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to change items count per page with the dropdown","suites":["Pagination"],"updatePoint":{"line":27,"column":69},"line":27,"code":"  it('should be able to change items count per page with the dropdown', () => {\n    const itemsPerPage = 100;\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE_BTN).first().click();\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE_OPTION(itemsPerPage)).click();\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE).should('contain.text', itemsPerPage);\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to go to next / previous page","suites":["Pagination"],"updatePoint":{"line":33,"column":50},"line":33,"code":"  it('should be able to go to next / previous page', () => {\n    cy.get(`${TIMELINE_FLYOUT} ${TIMELINE_EVENTS_COUNT_NEXT_PAGE}`).first().click();\n    cy.get(`${TIMELINE_FLYOUT} ${TIMELINE_EVENTS_COUNT_PREV_PAGE}`).first().click();\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should contain the right query","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":31,"column":38},"line":31,"code":"    it('should contain the right query', () => {\n      cy.get(TIMELINE_QUERY).should('have.text', `${getTimeline().query}`);\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to add event note","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":34,"column":40},"line":34,"code":"    it('should be able to add event note', () => {\n      cy.get(NOTE_CARD_CONTENT).should('contain', 'event note');\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline filter","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":37,"column":38},"line":37,"code":"    it('should display timeline filter', () => {\n      cy.get(TIMELINE_FILTER(getTimeline().filter)).should('exist');\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display pinned events","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":40,"column":36},"line":40,"code":"    it('should display pinned events', () => {\n      cy.get(PIN_EVENT).should('have.attr', 'aria-label').and('match', /Unpin the event in row 2/);\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should have an unlock icon","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":43,"column":34},"line":43,"code":"    it('should have an unlock icon', () => {\n      cy.get(UNLOCKED_ICON).should('be.visible');\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Row renderers should be enabled by default","suites":["Row renderers"],"updatePoint":{"line":30,"column":48},"line":30,"code":"  it('Row renderers should be enabled by default', () => {\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).should('exist');\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).should('be.checked');\n  });","file":"integration/timelines/row_renderers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selected renderer can be disabled and enabled","suites":["Row renderers"],"updatePoint":{"line":34,"column":51},"line":34,"code":"  it('Selected renderer can be disabled and enabled', () => {\n    cy.get(TIMELINE_ROW_RENDERERS_SEARCHBOX).should('exist');\n    cy.get(TIMELINE_ROW_RENDERERS_SEARCHBOX).type('flow'); // Intercepts should be before click handlers that activate them rather than afterwards or you have race conditions\n\n    cy.intercept('PATCH', '/api/timeline').as('updateTimeline');\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).first().uncheck();\n    cy.wait('@updateTimeline').then(interception => {\n      expect(interception.request.body.timeline.excludedRowRendererIds).to.contain('netflow');\n    });\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).first().check();\n    cy.wait('@updateTimeline').then(interception => {\n      expect(interception.request.body.timeline.excludedRowRendererIds).not.to.contain('netflow');\n    });\n  });","file":"integration/timelines/row_renderers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selected renderer can be disabled with one click","suites":["Row renderers"],"updatePoint":{"line":48,"column":54},"line":48,"code":"  it('Selected renderer can be disabled with one click', () => {\n    // Ensure these elements are visible before continuing since sometimes it takes a second for the modal to show up\n    // and it gives the click handlers a bit of time to be initialized as well to reduce chances of flake but you still\n    // have to use pipe() below as an additional measure.\n    cy.get(TIMELINE_ROW_RENDERERS_DISABLE_ALL_BTN).should('exist');\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).should('be.checked'); // Intercepts should be before click handlers that activate them rather than afterwards or you have race conditions\n\n    cy.intercept('PATCH', '/api/timeline').as('updateTimeline'); // Keep clicking on the disable all button until the first element of all the elements are no longer checked.\n    // In cases where the click handler is not present on the page just yet, this will cause the button to be clicked\n    // multiple times until it sees that the click took effect. You could go through the whole list but I just check\n    // for the first to be unchecked and then assume the click was successful\n\n    cy.root().pipe($el => {\n      $el.find(TIMELINE_ROW_RENDERERS_DISABLE_ALL_BTN).trigger('click');\n      return $el.find(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).first();\n    }).should('not.be.checked');\n    cy.wait('@updateTimeline').its('response.statusCode').should('eq', 200);\n  });","file":"integration/timelines/row_renderers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Signature tooltips do not overlap","suites":["Row renderers","Suricata"],"updatePoint":{"line":67,"column":41},"line":67,"code":"    it('Signature tooltips do not overlap', () => {\n      // Hover the signature to show the tooltips\n      cy.get(TIMELINE_ROW_RENDERERS_SURICATA_SIGNATURE).parents('.euiPopover__anchor').trigger('mouseover');\n      cy.get(TIMELINE_ROW_RENDERERS_SURICATA_LINK_TOOLTIP).then($googleLinkTooltip => {\n        cy.get(TIMELINE_ROW_RENDERERS_SURICATA_SIGNATURE_TOOLTIP).then($signatureTooltip => {\n          expect(elementsOverlap($googleLinkTooltip, $signatureTooltip), 'tooltips do not overlap').to.equal(false);\n        });\n      });\n    });","file":"integration/timelines/row_renderers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"executes a KQL query","suites":["timeline search or filter KQL bar"],"updatePoint":{"line":19,"column":26},"line":19,"code":"  it('executes a KQL query', () => {\n    const hostExistsQuery = 'host.name: *';\n    openTimelineUsingToggle();\n    executeTimelineKQL(hostExistsQuery);\n    cy.get(SERVER_SIDE_EVENT_COUNT).should($count => expect(+$count.text()).to.be.gt(0));\n  });","file":"integration/timelines/search_or_filter.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to update timeline kqlMode with filter","suites":["Update kqlMode for timeline"],"updatePoint":{"line":37,"column":59},"line":37,"code":"  it('should be able to update timeline kqlMode with filter', () => {\n    cy.get(TIMELINE_KQLMODE_FILTER).click();\n    cy.wait('@update').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.wrap(response?.body.data.persistTimeline.timeline.kqlMode).should('eql', 'filter');\n      cy.get(ADD_FILTER).should('exist');\n    });\n  });","file":"integration/timelines/search_or_filter.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to update timeline kqlMode with search","suites":["Update kqlMode for timeline"],"updatePoint":{"line":47,"column":59},"line":47,"code":"  it('should be able to update timeline kqlMode with search', () => {\n    cy.get(TIMELINE_KQLMODE_SEARCH).click();\n    cy.wait('@update').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.wrap(response?.body.data.persistTimeline.timeline.kqlMode).should('eql', 'search');\n      cy.get(ADD_FILTER).should('not.exist');\n    });\n  });","file":"integration/timelines/search_or_filter.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"removes the @timestamp field from the timeline when the user un-checks the toggle","suites":["toggle column in timeline"],"updatePoint":{"line":27,"column":87},"line":27,"code":"  it('removes the @timestamp field from the timeline when the user un-checks the toggle', () => {\n    expandFirstTimelineEventDetails();\n    clickTimestampToggleField();\n    cy.get(TIMESTAMP_HEADER_FIELD).should('not.exist');\n  });","file":"integration/timelines/toggle_column.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds the _id field to the timeline when the user checks the field","suites":["toggle column in timeline"],"updatePoint":{"line":32,"column":71},"line":32,"code":"  it('adds the _id field to the timeline when the user checks the field', () => {\n    expandFirstTimelineEventDetails();\n    clickIdToggleField();\n    cy.get(ID_HEADER_FIELD).should('exist');\n  });","file":"integration/timelines/toggle_column.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to alerts from old siem Detections URL","suites":["URL compatibility"],"updatePoint":{"line":21,"column":54},"line":21,"code":"  it('Redirects to alerts from old siem Detections URL', () => {\n    loginAndWaitForPage(DETECTIONS);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to alerts from old Detections URL","suites":["URL compatibility"],"updatePoint":{"line":25,"column":49},"line":25,"code":"  it('Redirects to alerts from old Detections URL', () => {\n    loginAndWaitForPage(SECURITY_DETECTIONS_URL);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rules from old Detections rules URL","suites":["URL compatibility"],"updatePoint":{"line":29,"column":54},"line":29,"code":"  it('Redirects to rules from old Detections rules URL', () => {\n    loginAndWaitForPage(SECURITY_DETECTIONS_RULES_URL);\n    cy.url().should('include', DETECTIONS_RULE_MANAGEMENT_URL);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rules creation from old Detections rules creation URL","suites":["URL compatibility"],"updatePoint":{"line":33,"column":72},"line":33,"code":"  it('Redirects to rules creation from old Detections rules creation URL', () => {\n    loginAndWaitForPage(SECURITY_DETECTIONS_RULES_CREATION_URL);\n    cy.url().should('include', RULE_CREATION);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rule details from old Detections rule details URL","suites":["URL compatibility"],"updatePoint":{"line":37,"column":68},"line":37,"code":"  it('Redirects to rule details from old Detections rule details URL', () => {\n    loginAndWaitForPage(detectionsRuleDetailsUrl(RULE_ID));\n    cy.url().should('include', ruleDetailsUrl(RULE_ID));\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rule edit from old Detections rule edit URL","suites":["URL compatibility"],"updatePoint":{"line":41,"column":62},"line":41,"code":"  it('Redirects to rule edit from old Detections rule edit URL', () => {\n    loginAndWaitForPage(detectionRuleEditUrl(RULE_ID));\n    cy.url().should('include', ruleEditUrl(RULE_ID));\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the global start and end dates from the url with timestamps","suites":["URL compatibility"],"updatePoint":{"line":45,"column":70},"line":45,"code":"  it('sets the global start and end dates from the url with timestamps', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.urlWithTimestamps);\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the alerts page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":17,"column":54},"line":17,"code":"  it('navigates to the alerts page with incorrect link', () => {\n    loginAndWaitForPage(`${ALERTS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the exceptions page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":21,"column":58},"line":21,"code":"  it('navigates to the exceptions page with incorrect link', () => {\n    loginAndWaitForPage(`${EXCEPTIONS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the rules page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":25,"column":53},"line":25,"code":"  it('navigates to the rules page with incorrect link', () => {\n    loginAndWaitForPage(`${DETECTIONS_RULE_MANAGEMENT_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the rules creation page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":29,"column":62},"line":29,"code":"  it('navigates to the rules creation page with incorrect link', () => {\n    loginAndWaitForPage(`${RULE_CREATION}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the rules details page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":33,"column":61},"line":33,"code":"  it('navigates to the rules details page with incorrect link', () => {\n    loginAndWaitForPage(`${ruleDetailsUrl(mockRuleId)}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the edit rules page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":37,"column":58},"line":37,"code":"  it('navigates to the edit rules page with incorrect link', () => {\n    loginAndWaitForPage(`${ruleEditUrl(mockRuleId)}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the endpoints page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":41,"column":57},"line":41,"code":"  it('navigates to the endpoints page with incorrect link', () => {\n    loginAndWaitForPage(`${ENDPOINTS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the trusted applications page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":45,"column":68},"line":45,"code":"  it('navigates to the trusted applications page with incorrect link', () => {\n    loginAndWaitForPage(`${TRUSTED_APPS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the event filters page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":49,"column":61},"line":49,"code":"  it('navigates to the event filters page with incorrect link', () => {\n    loginAndWaitForPage(`${EVENT_FILTERS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the global start and end dates from the url","suites":["url state"],"updatePoint":{"line":41,"column":54},"line":41,"code":"  it('sets the global start and end dates from the url', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when start and end date are set","suites":["url state"],"updatePoint":{"line":46,"column":56},"line":46,"code":"  it('sets the url state when start and end date are set', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    setStartDate(ABSOLUTE_DATE.newStartTimeTyped);\n    updateDates();\n    waitForIpsTableToBeLoaded();\n    setEndDate(ABSOLUTE_DATE.newEndTimeTyped);\n    updateDates();\n    let startDate;\n    let endDate;\n\n    if (Cypress.browser.name === 'firefox') {\n      startDate = new Date(ABSOLUTE_DATE.firefoxStartTimeTyped).toISOString().replace('000', '186');\n      endDate = new Date(ABSOLUTE_DATE.firefoxEndTimeTyped).toISOString().replace('000', '186');\n    } else {\n      startDate = new Date(ABSOLUTE_DATE.newStartTimeTyped).toISOString();\n      endDate = new Date(ABSOLUTE_DATE.newEndTimeTyped).toISOString();\n    }\n\n    cy.url().should('include', `(global:(linkTo:!(timeline),timerange:(from:%27${startDate}%27,kind:absolute,to:%27${endDate}%27))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the timeline start and end dates from the url when locked to global time","suites":["url state"],"updatePoint":{"line":66,"column":83},"line":66,"code":"  it('sets the timeline start and end dates from the url when locked to global time', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    openTimelineUsingToggle();\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the timeline start and end dates independently of the global start and end dates when times are unlocked","suites":["url state"],"updatePoint":{"line":72,"column":115},"line":72,"code":"  it('sets the timeline start and end dates independently of the global start and end dates when times are unlocked', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.urlUnlinked);\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n    openTimelineUsingToggle();\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.startTimeTimelineFormatted);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.endTimeTimelineFormatted);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when timeline/global date pickers are unlinked and timeline start and end date are set","suites":["url state"],"updatePoint":{"line":80,"column":111},"line":80,"code":"  it('sets the url state when timeline/global date pickers are unlinked and timeline start and end date are set', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.urlUnlinked);\n    openTimelineUsingToggle();\n    setTimelineStartDate(ABSOLUTE_DATE.newStartTimeTyped);\n    updateTimelineDates();\n    setTimelineEndDate(ABSOLUTE_DATE.newEndTimeTyped);\n    updateTimelineDates();\n    let startDate;\n    let endDate;\n\n    if (Cypress.browser.name === 'firefox') {\n      startDate = new Date(ABSOLUTE_DATE.firefoxStartTimeTyped).toISOString().replace('000', '186');\n      endDate = new Date(ABSOLUTE_DATE.firefoxEndTimeTyped).toISOString().replace('000', '186');\n    } else {\n      startDate = new Date(ABSOLUTE_DATE.newStartTimeTyped).toISOString();\n      endDate = new Date(ABSOLUTE_DATE.newEndTimeTyped).toISOString();\n    }\n\n    cy.url().should('include', `timeline:(linkTo:!(),timerange:(from:%27${startDate}%27,kind:absolute,to:%27${endDate}%27))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets kql on network page","suites":["url state"],"updatePoint":{"line":100,"column":30},"line":100,"code":"  it('sets kql on network page', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.urlKqlNetworkNetwork);\n    cy.get(KQL_INPUT).should('have.text', 'source.ip: \"10.142.0.9\"');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets kql on hosts page","suites":["url state"],"updatePoint":{"line":104,"column":28},"line":104,"code":"  it('sets kql on hosts page', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.urlKqlHostsHosts);\n    cy.get(KQL_INPUT).should('have.text', 'source.ip: \"10.142.0.9\"');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when kql is set","suites":["url state"],"updatePoint":{"line":108,"column":40},"line":108,"code":"  it('sets the url state when kql is set', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    kqlSearch('source.ip: \"10.142.0.9\" {enter}');\n    cy.url().should('include', `query=(language:kuery,query:%27source.ip:%20%2210.142.0.9%22%20%27)`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when kql is set and check if href reflect this change","suites":["url state"],"updatePoint":{"line":113,"column":78},"line":113,"code":"  it('sets the url state when kql is set and check if href reflect this change', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    kqlSearch('source.ip: \"10.142.0.9\" {enter}');\n    navigateFromHeaderTo(HOSTS);\n    cy.get(NETWORK).should('have.attr', 'href', `/app/security/network?query=(language:kuery,query:'source.ip:%20%2210.142.0.9%22%20')&sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2019-08-01T20:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2019-08-01T20:33:29.186Z')))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets KQL in host page and detail page and check if href match on breadcrumb, tabs and subTabs","suites":["url state"],"updatePoint":{"line":119,"column":99},"line":119,"code":"  it('sets KQL in host page and detail page and check if href match on breadcrumb, tabs and subTabs', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.urlHostNew);\n    kqlSearch('host.name: \"siem-kibana\" {enter}');\n    openAllHosts();\n    waitForAllHostsToBeLoaded();\n    cy.get(HOSTS).should('have.attr', 'href', `/app/security/hosts?query=(language:kuery,query:'host.name:%20%22siem-kibana%22%20')&sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')))`);\n    cy.get(NETWORK).should('have.attr', 'href', `/app/security/network?query=(language:kuery,query:'host.name:%20%22siem-kibana%22%20')&sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')))`);\n    cy.get(HOSTS_NAMES).first().should('have.text', 'siem-kibana');\n    openFirstHostDetails();\n    clearSearchBar();\n    kqlSearch('agent.type: \"auditbeat\" {enter}');\n    cy.get(ANOMALIES_TAB).should('have.attr', 'href', \"/app/security/hosts/siem-kibana/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')))&query=(language:kuery,query:'agent.type:%20%22auditbeat%22%20')\");\n    cy.get(BREADCRUMBS).eq(1).should('have.attr', 'href', `/app/security/hosts?query=(language:kuery,query:'agent.type:%20%22auditbeat%22%20')&sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')))`);\n    cy.get(BREADCRUMBS).eq(2).should('have.attr', 'href', `/app/security/hosts/siem-kibana?query=(language:kuery,query:'agent.type:%20%22auditbeat%22%20')&sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2020-01-01T21:33:29.186Z')))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Do not clears kql when navigating to a new page","suites":["url state"],"updatePoint":{"line":134,"column":53},"line":134,"code":"  it('Do not clears kql when navigating to a new page', () => {\n    loginAndWaitForPageWithoutDateRange(ABSOLUTE_DATE_RANGE.urlKqlHostsHosts);\n    navigateFromHeaderTo(NETWORK);\n    cy.get(KQL_INPUT).should('have.text', 'source.ip: \"10.142.0.9\"');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets and reads the url state for timeline by id","suites":["url state"],"updatePoint":{"line":139,"column":53},"line":139,"code":"  it('sets and reads the url state for timeline by id', () => {\n    loginAndWaitForPage(HOSTS_URL);\n    openTimelineUsingToggle();\n    populateTimeline();\n    cy.intercept('PATCH', '/api/timeline').as('timeline');\n    addNameToTimeline(getTimeline().title);\n    cy.wait('@timeline').then(({\n      response\n    }) => {\n      closeTimeline();\n      cy.wrap(response?.statusCode).should('eql', 200);\n      const timelineId = response?.body.data.persistTimeline.timeline.savedObjectId;\n      cy.visit('/app/home');\n      cy.visit(`/app/security/timelines?timeline=(id:'${timelineId}',isOpen:!t)`);\n      cy.get(DATE_PICKER_APPLY_BUTTON_TIMELINE).should('exist');\n      cy.get(DATE_PICKER_APPLY_BUTTON_TIMELINE).should('not.have.text', 'Updating');\n      cy.get(TIMELINE).should('be.visible');\n      cy.get(TIMELINE_TITLE).should('be.visible');\n      cy.get(TIMELINE_TITLE).should('have.text', getTimeline().title);\n    });\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can open and close the modal","suites":["value lists","management modal"],"updatePoint":{"line":26,"column":36},"line":26,"code":"    it('can open and close the modal', () => {\n      openValueListsModal();\n      closeValueListsModal();\n    });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"keyword\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":34,"column":56},"line":34,"code":"      it('creates a \"keyword\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        selectValueListType('keyword');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('Keywords');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"text\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":44,"column":53},"line":44,"code":"      it('creates a \"text\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        selectValueListType('text');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('Text');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"ip\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":54,"column":51},"line":54,"code":"      it('creates a \"ip\" list from an uploaded file', () => {\n        const listName = 'ip_list.txt';\n        selectValueListType('ip');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('IP addresses');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"ip_range\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":64,"column":57},"line":64,"code":"      it('creates a \"ip_range\" list from an uploaded file', () => {\n        const listName = 'cidr_list.txt';\n        selectValueListType('ip_range');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('IP ranges');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"keyword\" list from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":76,"column":56},"line":76,"code":"      it('deletes a \"keyword\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        importValueList(listName, 'keyword');\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"text\" list from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":85,"column":53},"line":85,"code":"      it('deletes a \"text\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        importValueList(listName, 'text');\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"ip\" from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":94,"column":46},"line":94,"code":"      it('deletes a \"ip\" from an uploaded file', () => {\n        const listName = 'ip_list.txt';\n        importValueList(listName, 'ip');\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"ip_range\" from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":103,"column":52},"line":103,"code":"      it('deletes a \"ip_range\" from an uploaded file', () => {\n        const listName = 'cidr_list.txt';\n        importValueList(listName, 'ip_range', ['192.168.100.0']);\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"keyword\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":114,"column":56},"line":114,"code":"      it('exports a \"keyword\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList('value_list.txt', 'keyword');\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne, lineTwo] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n            expect(response?.body).to.contain(lineTwo);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"text\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":130,"column":53},"line":130,"code":"      it('exports a \"text\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList(listName, 'text');\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne, lineTwo] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n            expect(response?.body).to.contain(lineTwo);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"ip\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":146,"column":51},"line":146,"code":"      it('exports a \"ip\" list from an uploaded file', () => {\n        const listName = 'ip_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList(listName, 'ip');\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne, lineTwo] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n            expect(response?.body).to.contain(lineTwo);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"ip_range\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":162,"column":57},"line":162,"code":"      it('exports a \"ip_range\" list from an uploaded file', () => {\n        const listName = 'cidr_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList(listName, 'ip_range', ['192.168.100.0']);\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not allow a t1 analyst user to upload a value list","suites":["value lists","user with restricted access role"],"updatePoint":{"line":187,"column":63},"line":187,"code":"    it('Does not allow a t1 analyst user to upload a value list', () => {\n      cy.get(VALUE_LISTS_MODAL_ACTIVATOR).should('have.attr', 'disabled');\n    });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has the expected alerts number","suites":["After an upgrade, the custom query rule"],"updatePoint":{"line":47,"column":36},"line":47,"code":"  it('Has the expected alerts number', () => {\n    cy.get(SERVER_SIDE_EVENT_COUNT).contains(EXPECTED_NUMBER_OF_ALERTS);\n  });","file":"upgrade_integration/detections/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the rule details","suites":["After an upgrade, the custom query rule"],"updatePoint":{"line":50,"column":31},"line":50,"code":"  it('Displays the rule details', () => {\n    cy.get(RULE_NAME_HEADER).should('contain', `${rule.name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', rule.riskScore);\n    });\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', rule.index.join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Query');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', rule.timeline);\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', rule.runsEvery);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', rule.lookBack);\n    });\n  });","file":"upgrade_integration/detections/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the alert details at the tgrid","suites":["After an upgrade, the custom query rule"],"updatePoint":{"line":68,"column":45},"line":68,"code":"  it('Displays the alert details at the tgrid', () => {\n    let expectedReason;\n\n    if (semver.gt(Cypress.env('ORIGINAL_VERSION'), '7.15.0')) {\n      expectedReason = alert.reason;\n    } else {\n      expectedReason = '-';\n    }\n\n    cy.get(RULE_NAME).should('have.text', alert.rule);\n    cy.get(SEVERITY).should('have.text', alert.severity);\n    cy.get(RISK_SCORE).should('have.text', alert.riskScore);\n    cy.get(REASON).should('have.text', expectedReason).type('{rightarrow}');\n    cy.get(HOST_NAME).should('have.text', alert.hostName);\n    cy.get(USER_NAME).should('have.text', alert.username);\n    cy.get(PROCESS_NAME).should('have.text', alert.processName);\n    cy.get(SOURCE_IP).should('have.text', alert.sourceIp);\n    cy.get(DESTINATION_IP).should('have.text', alert.destinationIp);\n  });","file":"upgrade_integration/detections/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has the expected alerts number","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":47,"column":36},"line":47,"code":"  it('Has the expected alerts number', () => {\n    cy.get(SERVER_SIDE_EVENT_COUNT).contains(EXPECTED_NUMBER_OF_ALERTS);\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the rule details","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":50,"column":31},"line":50,"code":"  it('Displays the rule details', () => {\n    cy.get(RULE_NAME_HEADER).should('contain', rule.name);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', rule.riskScore);\n    });\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', rule.index.join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Threshold');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', rule.timeline);\n      getDetails(THRESHOLD_DETAILS).should('have.text', `Results aggregated by ${rule.thresholdField} >= ${rule.threholdValue}`);\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', rule.runsEvery);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', rule.lookBack);\n    });\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the alert details in the TGrid","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":69,"column":45},"line":69,"code":"  it('Displays the alert details in the TGrid', () => {\n    let expectedReason;\n\n    if (semver.gt(Cypress.env('ORIGINAL_VERSION'), '7.15.0')) {\n      expectedReason = alert.reason;\n    } else {\n      expectedReason = '-';\n    }\n\n    cy.get(RULE_NAME).should('have.text', alert.rule);\n    cy.get(SEVERITY).should('have.text', alert.severity);\n    cy.get(RISK_SCORE).should('have.text', alert.riskScore);\n    cy.get(REASON).should('have.text', expectedReason);\n    cy.get(HOST_NAME).should('have.text', alert.hostName);\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the Overview alert details in the alert flyout","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":84,"column":61},"line":84,"code":"  it('Displays the Overview alert details in the alert flyout', () => {\n    expandFirstAlert();\n    cy.get(OVERVIEW_STATUS).should('have.text', 'open');\n    cy.get(OVERVIEW_RULE).should('have.text', alert.rule);\n    cy.get(OVERVIEW_SEVERITY).should('have.text', alert.severity);\n    cy.get(OVERVIEW_RISK_SCORE).should('have.text', alert.riskScore);\n    cy.get(OVERVIEW_HOST_NAME).should('have.text', alert.hostName);\n    cy.get(OVERVIEW_THRESHOLD_COUNT).should('have.text', alert.thresholdCount);\n    cy.get(OVERVIEW_THRESHOLD_VALUE).should('have.text', alert.hostName);\n    cy.get(SUMMARY_VIEW).should('contain', `${rule.thresholdField} [threshold]`);\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct number of opened cases on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":57,"column":67},"line":57,"code":"  it('Displays the correct number of opened cases on the cases page', () => {\n    const EXPECTED_NUMBER_OF_OPENED_CASES = '0';\n    cy.get(ALL_CASES_OPEN_CASES_STATS).should('have.text', EXPECTED_NUMBER_OF_OPENED_CASES);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct number of in progress cases on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":61,"column":72},"line":61,"code":"  it('Displays the correct number of in progress cases on the cases page', () => {\n    const EXPECTED_NUMBER_OF_IN_PROGRESS_CASES = '1';\n    cy.get(ALL_CASES_IN_PROGRESS_CASES_STATS).should('have.text', EXPECTED_NUMBER_OF_IN_PROGRESS_CASES);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct number of closed cases on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":65,"column":67},"line":65,"code":"  it('Displays the correct number of closed cases on the cases page', () => {\n    const EXPECTED_NUMBER_OF_CLOSED_CASES = '0';\n    cy.get(ALL_CASES_CLOSED_CASES_STATS).should('have.text', EXPECTED_NUMBER_OF_CLOSED_CASES);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct case details on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":69,"column":57},"line":69,"code":"  it('Displays the correct case details on the cases page', () => {\n    cy.get(ALL_CASES_NAME).should('have.text', importedCase.title);\n    cy.get(ALL_CASES_REPORTER).should('have.text', importedCase.reporter);\n    cy.get(ALL_CASES_NUMBER_OF_ALERTS).should('have.text', importedCase.numberOfAlerts);\n    cy.get(ALL_CASES_COMMENTS_COUNT).should('have.text', importedCase.numberOfComments);\n    cy.get(ALL_CASES_NOT_PUSHED).should('be.visible');\n    cy.get(ALL_CASES_IN_PROGRESS_STATUS).should('be.visible');\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct case details on the case details page","suites":["Import case after upgrade"],"updatePoint":{"line":77,"column":64},"line":77,"code":"  it('Displays the correct case details on the case details page', () => {\n    goToCaseDetails();\n    cy.get(CASE_DETAILS_PAGE_TITLE).should('have.text', importedCase.title);\n    cy.get(CASE_IN_PROGRESS_STATUS).should('exist');\n    cy.get(CASE_SWITCH).should('have.attr', 'aria-checked', 'false');\n    cy.get(CASE_USER_ACTION).eq(DESCRIPTION).should('have.text', importedCase.description);\n    cy.get(CASE_USER_ACTION).eq(TIMELINE).should('have.text', importedCase.timeline);\n    cy.get(CASE_USER_ACTION).eq(LENS).should('have.text', '');\n    cy.get(CASE_EVENT_UPDATE).should('have.length', EXPECTED_NUMBER_OF_UPDATES);\n    cy.get(CASE_EVENT_UPDATE).eq(STATUS_UPDATE).invoke('text').should('match', updateStatusRegex);\n    cy.get(CASE_EVENT_UPDATE).eq(FIRST_ALERT_UPDATE).invoke('text').should('match', alertUpdateRegex);\n    cy.get(CASE_EVENT_UPDATE).eq(SECOND_ALERT_UPDATE).invoke('text').should('match', alertUpdateRegex);\n    cy.get(CASE_EVENT_UPDATE).eq(INCIDENT_MANAGEMENT_SYSTEM_UPDATE).invoke('text').should('match', incidentManagementSystemRegex);\n    cy.get(CASE_DETAILS_USERNAMES).should('have.length', EXPECTED_NUMBER_OF_PARTICIPANTS);\n    cy.get(CASE_DETAILS_USERNAMES).eq(REPORTER).should('have.text', importedCase.user);\n    cy.get(CASE_DETAILS_USERNAMES).eq(FIRST_PARTICIPANT).should('have.text', importedCase.user);\n    cy.get(CASE_DETAILS_USERNAMES).eq(SECOND_PARTICIPANT).should('have.text', importedCase.participants[0]);\n    cy.get(CASE_DETAILS_USERNAMES).eq(THIRD_PARTICIPANT).should('have.text', importedCase.participants[1]);\n    cy.get(CASES_TAGS(importedCase.tags)).should('exist');\n    cy.get(CASE_CONNECTOR).should('have.text', importedCase.connector);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details on the timelines page","suites":["Import timeline after upgrade"],"updatePoint":{"line":52,"column":65},"line":52,"code":"  it('Displays the correct timeline details on the timelines page', () => {\n    cy.readFile(`cypress/fixtures/${timeline}`).then(file => {\n      const timelineJson = JSON.parse(file);\n      const regex = new RegExp(`\\\\S${timelineJson.globalNotes[0].createdBy}added a note\\\\S*\\\\s?(\\\\S*)?\\\\s?(\\\\S*)?${timelineJson.globalNotes[0].createdBy} added a note${timelineJson.globalNotes[0].note}`);\n      cy.get(TIMELINE_NAME).should('have.text', timelineJson.title);\n      cy.get(TIMELINES_DESCRIPTION).should('have.text', timelineJson.description);\n      cy.get(TIMELINES_USERNAME).should('have.text', username);\n      cy.get(TIMELINES_NOTES_COUNT).should('have.text', timelineJson.globalNotes.length.toString());\n      cy.get(TIMELINES_PINNED_EVENT_COUNT).should('have.text', timelineJson.pinnedEventIds.length.toString());\n      expandNotes();\n      cy.get(NOTE).invoke('text').should('match', regex);\n    });\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details inside the query tab","suites":["Import timeline after upgrade"],"updatePoint":{"line":65,"column":64},"line":65,"code":"  it('Displays the correct timeline details inside the query tab', () => {\n    openTimeline();\n    cy.readFile(`cypress/fixtures/${timeline}`).then(file => {\n      const timelineJson = JSON.parse(file);\n      cy.get(TIMELINE_TITLE).should('have.text', timelineJson.title);\n      cy.get(TIMELINE_DESCRIPTION).should('have.text', timelineJson.description);\n      cy.get(DATA_PROVIDERS).should('have.length', timelineJson.dataProviders.length.toString());\n      cy.get(DATA_PROVIDERS).invoke('text').then(value => {\n        expect(value.replace(/\"/g, '')).to.eq(timelineJson.dataProviders[0].name);\n      });\n      cy.get(PROCESS_KPI).should('contain', '0');\n      cy.get(USER_KPI).should('contain', '0');\n      cy.get(HOST_KPI).should('contain', '1');\n      cy.get(SOURCE_IP_KPI).should('contain', '1');\n      cy.get(DESTINATION_IP_KPI).should('contain', '1');\n      cy.get(DATE_PICKER_START).should('contain', timelineDetails.dateStart);\n      cy.get(DATE_PICKER_END).should('contain', timelineDetails.dateEnd);\n      cy.get(TIMELINE_QUERY).should('have.text', timelineJson.kqlQuery.filterQuery.kuery.expression);\n      cy.get(QUERY_TAB_BUTTON).should('have.text', timelineDetails.queryTab);\n      cy.get(TIMELINE_CORRELATION_TAB).should('have.text', timelineDetails.correlationTab);\n      cy.get(GRAPH_TAB_BUTTON).should('have.text', timelineDetails.analyzerTab).and('be.disabled');\n      cy.get(NOTES_TAB_BUTTON).should('have.text', timelineDetails.notesTab);\n      cy.get(PINNED_TAB_BUTTON).should('have.text', timelineDetails.pinnedTab);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(1).should('contain', detectionAlert.message);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(2).should('contain', detectionAlert.eventCategory);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(3).should('contain', detectionAlert.eventAction);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(4).should('contain', detectionAlert.hostName);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(5).should('contain', detectionAlert.sourceIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(6).should('contain', detectionAlert.destinationIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(7).should('contain', detectionAlert.userName);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(8).should('contain', event.timestamp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(9).should('contain', event.message);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(10).should('contain', event.eventCategory);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(11).should('contain', event.eventAction);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(12).should('contain', event.hostName);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(13).should('contain', event.sourceIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(14).should('contain', event.destinationIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(15).should('contain', event.userName);\n    });\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details inside the correlation tab","suites":["Import timeline after upgrade"],"updatePoint":{"line":105,"column":70},"line":105,"code":"  it('Displays the correct timeline details inside the correlation tab', () => {\n    goToCorrelationTab();\n    cy.get(TIMELINE_CORRELATION_INPUT).should('be.empty');\n    cy.get(CORRELATION_EVENT_TABLE_CELL).should('not.exist');\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details inside the notes tab","suites":["Import timeline after upgrade"],"updatePoint":{"line":110,"column":64},"line":110,"code":"  it('Displays the correct timeline details inside the notes tab', () => {\n    goToNotesTab();\n    cy.readFile(`cypress/fixtures/${timeline}`).then(file => {\n      const timelineJson = JSON.parse(file);\n      const descriptionRegex = new RegExp(`\\\\S${username}added description\\\\S*\\\\s?(\\\\S*)?\\\\s?(\\\\S*)?${timelineJson.description}`);\n      const noteRegex = new RegExp(`\\\\S${timelineJson.globalNotes[0].createdBy}added a note\\\\S*\\\\s?(\\\\S*)?\\\\s?(\\\\S*)?${timelineJson.globalNotes[0].createdBy} added a note${timelineJson.globalNotes[0].note}`);\n      cy.get(NOTE_DESCRIPTION).invoke('text').should('match', descriptionRegex);\n      cy.get(NOTE_PREVIEW).last().invoke('text').should('match', noteRegex);\n    });\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details inside the pinned tab","suites":["Import timeline after upgrade"],"updatePoint":{"line":120,"column":65},"line":120,"code":"  it('Displays the correct timeline details inside the pinned tab', () => {\n    goToPinnedTab();\n    cy.get(PINNED_EVENT_TABLE_CELL).eq(1).should('contain', detectionAlert.message);\n    cy.get(PINNED_EVENT_TABLE_CELL).eq(2).should('contain', detectionAlert.eventCategory);\n    cy.get(PINNED_EVENT_TABLE_CELL).eq(3).should('contain', detectionAlert.eventAction);\n    cy.get(PINNED_EVENT_TABLE_CELL).eq(4).should('contain', detectionAlert.hostName);\n    cy.get(PINNED_EVENT_TABLE_CELL).eq(5).should('contain', detectionAlert.sourceIp);\n    cy.get(PINNED_EVENT_TABLE_CELL).eq(6).should('contain', detectionAlert.destinationIp);\n    cy.get(PINNED_EVENT_TABLE_CELL).eq(7).should('contain', detectionAlert.userName);\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"}]}