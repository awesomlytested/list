{"repo":"gitpoint/git-point","url":"https://github.com/gitpoint/git-point","branch":"master","configs":[{"package":"gitpoint","lang":"js","dir":"__tests__","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should return a success response","suites":["fetchOrganizationRepos()"],"updatePoint":{"line":20,"column":38},"line":20,"code":"  it('should return a success response', async () => {\n    const expectedData = {\n      name: 'organization'\n    };\n    v3.getJson.mockResolvedValueOnce(expectedData);\n    await store.dispatch(fetchOrganizationRepos(''));\n    expect(store.getActions()).toEqual(expect.arrayContaining([{\n      type: GET_ORG_REPOS_LOADING,\n      payload: true\n    }, {\n      type: GET_ORG_REPOS_ERROR,\n      payload: ''\n    }, {\n      type: GET_ORG_REPOS,\n      payload: expectedData\n    }]));\n    expect(store.getActions()).not.toEqual(expect.arrayContaining([{\n      type: GET_ORG_REPOS_LOADING,\n      payload: false\n    }, {\n      type: GET_ORG_REPOS_ERROR,\n      payload: expectedData\n    }]));\n  });","file":"tests/actions/organization.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["fetchOrganizationRepos()"],"updatePoint":{"line":44,"column":37},"line":44,"code":"  it('should return an error response', async () => {\n    const expectedData = {\n      error: 'no organization'\n    };\n    v3.getJson.mockRejectedValueOnce(expectedData);\n    await store.dispatch(fetchOrganizationRepos(''));\n    expect(store.getActions()).toEqual(expect.arrayContaining([{\n      type: GET_ORG_REPOS_LOADING,\n      payload: true\n    }, {\n      type: GET_ORG_REPOS_LOADING,\n      payload: false\n    }, {\n      type: GET_ORG_REPOS_ERROR,\n      payload: ''\n    }, {\n      type: GET_ORG_REPOS_ERROR,\n      payload: expectedData\n    }]));\n    expect(store.getActions()).not.toEqual(expect.arrayContaining([{\n      type: GET_ORG_REPOS,\n      payload: expectedData\n    }]));\n  });","file":"tests/actions/organization.action.js","skipped":false,"dir":"__tests__"},{"name":"should return a success response","suites":["getContents()"],"updatePoint":{"line":26,"column":38},"line":26,"code":"  it('should return a success response', async () => {\n    const level = 'some-level';\n    const expectedData = {\n      key: 'value '\n    };\n    v3.getJson.mockResolvedValue(expectedData);\n    await store.dispatch(getContents('', level));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_CONTENTS.PENDING\n    });\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_CONTENTS.SUCCESS,\n      results: expectedData,\n      level\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_CONTENTS.ERROR\n    }));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["getContents()"],"updatePoint":{"line":45,"column":37},"line":45,"code":"  it('should return an error response', async () => {\n    const expectedData = 'ERROR';\n    v3.getJson.mockRejectedValue(expectedData);\n    await store.dispatch(getContents());\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_CONTENTS.PENDING\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_CONTENTS.SUCCESS\n    }));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_CONTENTS.ERROR,\n      payload: expectedData\n    });\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return a success response","suites":["getRepositoryFile()"],"updatePoint":{"line":62,"column":38},"line":62,"code":"  it('should return a success response', async () => {\n    const expectedData = {\n      key: 'value '\n    };\n    v3.getRaw.mockResolvedValue(expectedData);\n    await store.dispatch(getRepositoryFile(''));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_FILE.PENDING\n    });\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_FILE.SUCCESS,\n      payload: expectedData\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_FILE.ERROR\n    }));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["getRepositoryFile()"],"updatePoint":{"line":79,"column":37},"line":79,"code":"  it('should return an error response', async () => {\n    const expectedData = 'ERROR';\n    v3.getRaw.mockRejectedValue(expectedData);\n    await store.dispatch(getRepositoryFile());\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_FILE.PENDING\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_FILE.SUCCESS\n    }));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_FILE.ERROR,\n      payload: expectedData\n    });\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return a success response","suites":["getCommits()"],"updatePoint":{"line":96,"column":38},"line":96,"code":"  it('should return a success response', async () => {\n    const expectedData = {\n      key: 'value '\n    };\n    v3.getJson.mockResolvedValue(expectedData);\n    await store.dispatch(getCommits(''));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_COMMITS.PENDING\n    });\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_COMMITS.SUCCESS,\n      payload: expectedData\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_COMMITS.ERROR\n    }));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["getCommits()"],"updatePoint":{"line":113,"column":37},"line":113,"code":"  it('should return an error response', async () => {\n    const expectedData = 'ERROR';\n    v3.getJson.mockRejectedValue(expectedData);\n    await store.dispatch(getCommits());\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_COMMITS.PENDING\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_COMMITS.SUCCESS\n    }));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_COMMITS.ERROR,\n      payload: expectedData\n    });\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return a success response","suites":["getCommitFromUrl()"],"updatePoint":{"line":130,"column":38},"line":130,"code":"  it('should return a success response', async () => {\n    const expectedData = {\n      key: 'value '\n    };\n    v3.getJson.mockResolvedValue(expectedData);\n    await store.dispatch(getCommitFromUrl(''));\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT.PENDING\n    });\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT.SUCCESS,\n      payload: expectedData\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_COMMIT.ERROR\n    }));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["getCommitFromUrl()"],"updatePoint":{"line":147,"column":37},"line":147,"code":"  it('should return an error response', async () => {\n    const expectedData = 'ERROR';\n    v3.getJson.mockRejectedValue(expectedData);\n    await store.dispatch(getCommitFromUrl());\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT.PENDING\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_COMMIT.SUCCESS\n    }));\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT.ERROR,\n      payload: expectedData\n    });\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return a success response","suites":["getCommitDiffFromUrl()"],"updatePoint":{"line":164,"column":38},"line":164,"code":"  it('should return a success response', async () => {\n    const expectedData = {\n      key: 'value '\n    };\n    fetchDiff.mockResolvedValue(expectedData);\n    await store.dispatch(getCommitDiffFromUrl(''));\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT_DIFF.PENDING\n    });\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT_DIFF.SUCCESS,\n      payload: expectedData\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_COMMIT_DIFF.ERROR\n    }));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["getCommitDiffFromUrl()"],"updatePoint":{"line":181,"column":37},"line":181,"code":"  it('should return an error response', async () => {\n    const expectedData = 'ERROR';\n    fetchDiff.mockRejectedValue(expectedData);\n    await store.dispatch(getCommitDiffFromUrl());\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT_DIFF.PENDING\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_COMMIT_DIFF.SUCCESS\n    }));\n    expect(store.getActions()).toContainEqual({\n      type: GET_COMMIT_DIFF.ERROR,\n      payload: expectedData\n    });\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return a success response","suites":["getReadMe()"],"updatePoint":{"line":198,"column":38},"line":198,"code":"  it('should return a success response', async () => {\n    const expectedData = {\n      key: 'value '\n    };\n    fetchReadMe.mockResolvedValue(expectedData);\n    await store.dispatch(getReadMe(''));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_README.PENDING\n    });\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_README.SUCCESS,\n      payload: expectedData\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_README.ERROR\n    }));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["getReadMe()"],"updatePoint":{"line":215,"column":37},"line":215,"code":"  it('should return an error response', async () => {\n    const expectedData = 'ERROR';\n    fetchReadMe.mockRejectedValue(expectedData);\n    await store.dispatch(getReadMe());\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_README.PENDING\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_README.SUCCESS\n    }));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_README.ERROR,\n      payload: expectedData\n    });\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return a success response","suites":["getLabels()"],"updatePoint":{"line":232,"column":38},"line":232,"code":"  it('should return a success response', async () => {\n    const expectedData = {\n      key: 'value '\n    };\n    v3.getJson.mockResolvedValue(expectedData);\n    await store.dispatch(getLabels(''));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_LABELS.PENDING\n    });\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_LABELS.SUCCESS,\n      payload: expectedData\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_LABELS.ERROR\n    }));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should return an error response","suites":["getLabels()"],"updatePoint":{"line":249,"column":37},"line":249,"code":"  it('should return an error response', async () => {\n    const expectedData = 'ERROR';\n    v3.getJson.mockRejectedValue(expectedData);\n    await store.dispatch(getLabels());\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_LABELS.PENDING\n    });\n    expect(store.getActions()).not.toContainEqual(expect.objectContaining({\n      type: GET_REPOSITORY_LABELS.SUCCESS\n    }));\n    expect(store.getActions()).toContainEqual({\n      type: GET_REPOSITORY_LABELS.ERROR,\n      payload: expectedData\n    });\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should get commit and commit diff","suites":["getCommitDetails()"],"updatePoint":{"line":266,"column":39},"line":266,"code":"  it('should get commit and commit diff', async () => {\n    const commit = {\n      url: 'url.com'\n    };\n    v3.getJson.mockResolvedValue({});\n    await store.dispatch(getCommitDetails(commit));\n    expect(v3.getJson).toHaveBeenCalledWith(commit.url, expect.any(String));\n    expect(fetchDiff).toHaveBeenCalledWith(commit.url, expect.any(String));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should get commit and commit diff when commit has nested commit","suites":["getCommitDetails()"],"updatePoint":{"line":275,"column":69},"line":275,"code":"  it('should get commit and commit diff when commit has nested commit', async () => {\n    const nestedCommit = {\n      commit: {\n        url: 'nestedUrl.dev'\n      }\n    };\n    v3.getJson.mockResolvedValue({});\n    await store.dispatch(getCommitDetails(nestedCommit));\n    expect(v3.getJson).toHaveBeenCalledWith(nestedCommit.commit.url, expect.any(String));\n    expect(fetchDiff).toHaveBeenCalledWith(nestedCommit.commit.url, expect.any(String));\n  });","file":"tests/actions/repository.action.js","skipped":false,"dir":"__tests__"},{"name":"should call fetch with the expected params","suites":["API v3 test","v3 call"],"updatePoint":{"line":12,"column":50},"line":12,"code":"    it('should call fetch with the expected params', () => {\n      const expectedUrl = 'https://api.github.com';\n      const expectedParams = 'parameters';\n      expect(global.fetch).not.toHaveBeenCalled();\n      v3.call('https://api.github.com', 'parameters');\n      expect(global.fetch).toHaveBeenCalledWith(expectedUrl, expectedParams);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"should return the expected response object","suites":["API v3 test","v3 call"],"updatePoint":{"line":19,"column":50},"line":19,"code":"    it('should return the expected response object', async () => {\n      const expected = open;\n      expect(v3.call('https://api.github.com', 'parameters')).resolves.toEqual(expected);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"should return the expected default params object","suites":["API v3 test","v3 parameters"],"updatePoint":{"line":26,"column":56},"line":26,"code":"    it('should return the expected default params object', () => {\n      const expected = {\n        headers: {\n          Accept: 'application/vnd.github.v3+json',\n          Authorization: 'token 12345abcdef98765432',\n          'Cache-Control': 'no-cache'\n        },\n        method: 'GET'\n      };\n      expect(v3.parameters(accessToken)).toEqual(expected);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"should return the expected params object when called with args","suites":["API v3 test","v3 parameters"],"updatePoint":{"line":37,"column":70},"line":37,"code":"    it('should return the expected params object when called with args', () => {\n      const mercyPreview = 'application/vnd.github.mercy-preview+json';\n      const body = {\n        client_id: '1234',\n        client_secret: 'abc1234',\n        code: '001',\n        state: 'state string'\n      };\n      const expected = {\n        headers: {\n          Accept: 'application/vnd.github.mercy-preview+json',\n          Authorization: 'token 12345abcdef98765432',\n          'Cache-Control': 'no-cache'\n        },\n        body: '{\"client_id\":\"1234\",\"client_secret\":\"abc1234\",\"code\":\"001\",\"state\":\"state string\"}',\n        method: 'POST'\n      };\n      expect(v3.parameters(accessToken, 'POST', mercyPreview, body)).toEqual(expected);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"should be called with expected url and accessToken params","suites":["API v3 test","v3 count"],"updatePoint":{"line":68,"column":65},"line":68,"code":"    it('should be called with expected url and accessToken params', () => {\n      const expectedUrl = 'https://api.github.com?per_page=1';\n      const expectedBody = v3.parameters(accessToken);\n      v3.count('https://api.github.com', accessToken);\n      expect(global.fetch).toHaveBeenCalledWith(expectedUrl, expectedBody);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"should return number","suites":["API v3 test","v3 count"],"updatePoint":{"line":74,"column":28},"line":74,"code":"    it('should return number', async () => {\n      expect(await v3.count('https://api.github.com', accessToken)).toEqual(1);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"should call fetch with the expected params","suites":["API v3 test","v3 delete"],"updatePoint":{"line":86,"column":50},"line":86,"code":"    it('should call fetch with the expected params', () => {\n      const expectedUrl = 'https://api.github.com';\n      const expected = {\n        headers: {\n          Accept: 'application/vnd.github.v3+json',\n          Authorization: 'token 12345abcdef98765432',\n          'Cache-Control': 'no-cache'\n        },\n        method: 'DELETE'\n      };\n      expect(global.fetch).not.toHaveBeenCalled();\n      v3.delete('https://api.github.com', accessToken);\n      expect(global.fetch).toHaveBeenCalledWith(expectedUrl, expected);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"should return expected response","suites":["API v3 test","v3 delete"],"updatePoint":{"line":100,"column":39},"line":100,"code":"    it('should return expected response', () => {\n      const expected = 'successful response';\n      expect(v3.delete('https://api.github.com', accessToken)).resolves.toEqual(expected);\n    });","file":"tests/api/index.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with text","suites":["<Badge />"],"updatePoint":{"line":5,"column":33},"line":5,"code":"  it('correctly renders with text', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Badge, {\n      text: \"test text\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('test text');\n  });","file":"tests/components/Badge.js","skipped":false,"dir":"__tests__"},{"name":"correctly responds to presses","suites":["<Button />"],"updatePoint":{"line":5,"column":35},"line":5,"code":"  it('correctly responds to presses', () => {\n    const onPress = jest.fn();\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Button, {\n      title: \"test text\",\n      onPress: onPress\n    }));\n    wrapper.simulate('press');\n    expect(onPress.mock.calls.length).toEqual(1);\n  });","file":"tests/components/Button.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders without title props","suites":["<Button />"],"updatePoint":{"line":14,"column":43},"line":14,"code":"  it('correctly renders without title props', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Button, null));\n    expect(wrapper.find('text').text()).toEqual('missing title!');\n  });","file":"tests/components/Button.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with only title","suites":["<Button />"],"updatePoint":{"line":18,"column":39},"line":18,"code":"  it('correctly renders with only title', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Button, {\n      title: \"test text\"\n    }));\n    expect(wrapper.find('text').text()).toEqual('test text');\n  });","file":"tests/components/Button.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with only icon","suites":["<Button />"],"updatePoint":{"line":24,"column":38},"line":24,"code":"  it('correctly renders with only icon', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Button, {\n      icon: {\n        name: 'git-merge',\n        type: 'octicon'\n      }\n    }));\n    expect(wrapper.find('text').last().text()).toEqual('missing title!');\n  });","file":"tests/components/Button.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with title and icon","suites":["<Button />"],"updatePoint":{"line":33,"column":43},"line":33,"code":"  it('correctly renders with title and icon', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Button, {\n      title: \"test text\",\n      icon: {\n        name: 'git-merge',\n        type: 'octicon'\n      }\n    }));\n    expect(wrapper.find('text').last().text()).toEqual('test text');\n  });","file":"tests/components/Button.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders patch line","suites":["<CodeLine />"],"updatePoint":{"line":5,"column":34},"line":5,"code":"  it('correctly renders patch line', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CodeLine, {\n      newChunk: true,\n      change: {\n        content: 'test line'\n      },\n      filename: 'test.js'\n    })).childAt(0);\n    const lineNumbers = wrapper.childAt(0);\n    const lineContent = wrapper.childAt(1).childAt(0).childAt(0);\n    expect(lineNumbers.childAt(0).childAt(0).text()).toEqual('...');\n    expect(lineNumbers.childAt(1).childAt(0).text()).toEqual('...');\n    expect(lineContent.text()).toEqual('test line');\n  });","file":"tests/components/CodeLine.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders normal line","suites":["<CodeLine />"],"updatePoint":{"line":19,"column":35},"line":19,"code":"  it('correctly renders normal line', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CodeLine, {\n      newChunk: true,\n      change: {\n        content: 'test line',\n        type: 'normal',\n        ln1: 50,\n        ln2: 51\n      },\n      filename: 'test.js'\n    })).childAt(0);\n    const lineNumbers = wrapper.childAt(0);\n    const lineContent = wrapper.childAt(1).childAt(0).childAt(0);\n    expect(lineNumbers.childAt(0).childAt(0).text()).toEqual('50');\n    expect(lineNumbers.childAt(1).childAt(0).text()).toEqual('51');\n    expect(lineContent.text()).toEqual('test line');\n  });","file":"tests/components/CodeLine.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders addition line","suites":["<CodeLine />"],"updatePoint":{"line":36,"column":37},"line":36,"code":"  it('correctly renders addition line', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CodeLine, {\n      change: {\n        content: 'test line',\n        type: 'add',\n        ln: 57\n      },\n      filename: 'test.js'\n    })).childAt(0);\n    const lineNumbers = wrapper.childAt(0);\n    const lineContent = wrapper.childAt(1).childAt(0).childAt(0);\n    expect(lineNumbers.childAt(0).childAt(0).text()).toEqual('');\n    expect(lineNumbers.childAt(1).childAt(0).text()).toEqual('57');\n    expect(lineContent.text()).toEqual('test line');\n  });","file":"tests/components/CodeLine.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders deletion line","suites":["<CodeLine />"],"updatePoint":{"line":51,"column":37},"line":51,"code":"  it('correctly renders deletion line', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CodeLine, {\n      change: {\n        content: 'test line',\n        type: 'del',\n        ln: 57\n      },\n      filename: 'test.js'\n    })).childAt(0);\n    const lineNumbers = wrapper.childAt(0);\n    const lineContent = wrapper.childAt(1).childAt(0).childAt(0);\n    expect(lineNumbers.childAt(0).childAt(0).text()).toEqual('57');\n    expect(lineNumbers.childAt(1).childAt(0).text()).toEqual('');\n    expect(lineContent.text()).toEqual('test line');\n  });","file":"tests/components/CodeLine.js","skipped":false,"dir":"__tests__"},{"name":"should render styled TextInput and send Icon if user has push permissions and issue is not locked","suites":["<CommentInput />"],"updatePoint":{"line":15,"column":103},"line":15,"code":"  it('should render styled TextInput and send Icon if user has push permissions and issue is not locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, defaultProps));\n    expect(wrapper.find('Styled(TextInput)').length).toEqual(1);\n    expect(wrapper.find('Styled(Icon)[name=\"send\"]').length).toEqual(1);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should not render styled Text and lock Icon if user has push permissions and issue is not locked","suites":["<CommentInput />"],"updatePoint":{"line":20,"column":102},"line":20,"code":"  it('should not render styled Text and lock Icon if user has push permissions and issue is not locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, defaultProps));\n    expect(wrapper.find('Styled(Text)').length).toEqual(0);\n    expect(wrapper.find('Icon').length).toEqual(0);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should not render styled TextInput and send Icon if user does not have push permissions and issue is locked","suites":["<CommentInput />"],"updatePoint":{"line":25,"column":113},"line":25,"code":"  it('should not render styled TextInput and send Icon if user does not have push permissions and issue is locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, _extends({}, defaultProps, {\n      userHasPushPermission: false,\n      issueLocked: true\n    })));\n    expect(wrapper.find('Styled(TextInput)').length).toEqual(0);\n    expect(wrapper.find('Styled(Icon)[name=\"send\"]').length).toEqual(0);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should render styled Text and lock Icon if user does not have push permissions and issue is locked","suites":["<CommentInput />"],"updatePoint":{"line":33,"column":104},"line":33,"code":"  it('should render styled Text and lock Icon if user does not have push permissions and issue is locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, _extends({}, defaultProps, {\n      userHasPushPermission: false,\n      issueLocked: true\n    })));\n    expect(wrapper.find('Styled(Text)').length).toEqual(1);\n    expect(wrapper.find('Icon').length).toEqual(1);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should render styled TextInput and send Icon if user has push permissions and issue is locked","suites":["<CommentInput />"],"updatePoint":{"line":41,"column":99},"line":41,"code":"  it('should render styled TextInput and send Icon if user has push permissions and issue is locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, _extends({}, defaultProps, {\n      issueLocked: true\n    })));\n    expect(wrapper.find('Styled(TextInput)').length).toEqual(1);\n    expect(wrapper.find('Styled(Icon)[name=\"send\"]').length).toEqual(1);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should not render styled Text and lock Icon if user has push permissions and issue is locked","suites":["<CommentInput />"],"updatePoint":{"line":48,"column":98},"line":48,"code":"  it('should not render styled Text and lock Icon if user has push permissions and issue is locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, _extends({}, defaultProps, {\n      issueLocked: true\n    })));\n    expect(wrapper.find('Styled(Text)').length).toEqual(0);\n    expect(wrapper.find('Icon').length).toEqual(0);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should not render styled Text and lock Icon if user does not have push permissions and issue is not locked","suites":["<CommentInput />"],"updatePoint":{"line":55,"column":112},"line":55,"code":"  it('should not render styled Text and lock Icon if user does not have push permissions and issue is not locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, _extends({}, defaultProps, {\n      userHasPushPermission: false\n    })));\n    expect(wrapper.find('Styled(Text)').length).toEqual(0);\n    expect(wrapper.find('Icon').length).toEqual(0);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should render styled TextInput and send Icon if user does not have push permissions and issue is not locked","suites":["<CommentInput />"],"updatePoint":{"line":62,"column":113},"line":62,"code":"  it('should render styled TextInput and send Icon if user does not have push permissions and issue is not locked', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, _extends({}, defaultProps, {\n      userHasPushPermission: false\n    })));\n    expect(wrapper.find('Styled(TextInput)').length).toEqual(1);\n    expect(wrapper.find('Styled(Icon)[name=\"send\"]').length).toEqual(1);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should update the state text if value is changed","suites":["<CommentInput />"],"updatePoint":{"line":69,"column":54},"line":69,"code":"  it('should update the state text if value is changed', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, defaultProps));\n    const input = wrapper.find('Styled(TextInput)');\n    input.simulate('changeText', 'Changed text');\n    expect(wrapper.state('text')).toEqual('Changed text');\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should call handleSubmit method when submitted","suites":["<CommentInput />"],"updatePoint":{"line":75,"column":52},"line":75,"code":"  it('should call handleSubmit method when submitted', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, defaultProps));\n    const handleSubmitSpy = jest.spyOn(wrapper.instance(), 'handleSubmit');\n    wrapper.instance().forceUpdate();\n    wrapper.find('Styled(TextInput)').simulate('changeText', 'Changed text');\n    wrapper.find('Styled(Icon)[name=\"send\"]').parent().simulate('press');\n    expect(handleSubmitSpy).toHaveBeenCalled();\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should change the content size","suites":["<CommentInput />"],"updatePoint":{"line":83,"column":36},"line":83,"code":"  it('should change the content size', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, defaultProps));\n    wrapper.find('Styled(TextInput)').simulate('contentSizeChange', {\n      nativeEvent: {\n        contentSize: {\n          height: 10\n        }\n      }\n    });\n    expect(wrapper.state('height')).toBe(10);\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should call handleSubmitEditing method in Android when onSubmitEditing event is raised","suites":["<CommentInput />"],"updatePoint":{"line":94,"column":92},"line":94,"code":"  it('should call handleSubmitEditing method in Android when onSubmitEditing event is raised', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(CommentInput, defaultProps));\n    const handleSubmitEditingSpy = jest.spyOn(wrapper.instance(), 'handleSubmitEditing');\n    wrapper.instance().forceUpdate();\n    Platform.OS = 'android';\n    wrapper.find('Styled(TextInput)').simulate('submitEditing', {\n      nativeEvent: {\n        text: 'Changed by submitEditing'\n      }\n    });\n    expect(handleSubmitEditingSpy).toHaveBeenCalled();\n    expect(wrapper.state('text')).toEqual('Changed by submitEditing\\n');\n  });","file":"tests/components/CommentInput.js","skipped":false,"dir":"__tests__"},{"name":"should render organization correctly","suites":["<EntityInfo />"],"updatePoint":{"line":8,"column":42},"line":8,"code":"  it('should render organization correctly', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: organization,\n      language: \"en\"\n    }));\n    expect(wrapper.find({\n      title: 'Location'\n    }).prop('subtitle')).toEqual(organization.location);\n    wrapper.find({\n      title: 'Location'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(`https://www.google.com/maps/place/${organization.location.replace(/ /g, '+')}`);\n    expect(wrapper.find({\n      title: 'Email'\n    }).prop('subtitle')).toEqual(organization.email);\n    wrapper.find({\n      title: 'Email'\n    }).simulate('press');\n    expect(Communications.email).toBeCalledWith([organization.email], null, null, null, null);\n    expect(wrapper.find({\n      title: 'Website'\n    }).prop('subtitle')).toEqual(organization.blog);\n    wrapper.find({\n      title: 'Website'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(organization.blog);\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"should render users correctly","suites":["<EntityInfo />"],"updatePoint":{"line":35,"column":35},"line":35,"code":"  it('should render users correctly', () => {\n    const navigationMock = {\n      navigate: jest.fn()\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: user,\n      orgs: [organization],\n      language: \"en\",\n      navigation: navigationMock\n    }));\n    expect(wrapper.find({\n      title: 'Location'\n    }).prop('subtitle')).toEqual(user.location);\n    wrapper.find({\n      title: 'Location'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(`https://www.google.com/maps/place/${user.location.replace(/ /g, '+')}`);\n    expect(wrapper.find({\n      title: 'Email'\n    }).prop('subtitle')).toEqual(user.email);\n    wrapper.find({\n      title: 'Email'\n    }).simulate('press');\n    expect(Communications.email).toBeCalledWith([user.email], null, null, null, null);\n    expect(wrapper.find({\n      title: 'Website'\n    }).prop('subtitle')).toEqual(user.blog);\n    wrapper.find({\n      title: 'Website'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(user.blog);\n    expect(wrapper.find({\n      title: 'Company'\n    }).prop('subtitle')).toEqual(user.company);\n    wrapper.find({\n      title: 'Company'\n    }).simulate('press');\n    expect(navigationMock.navigate).toBeCalledWith('Organization', {\n      organization\n    });\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"should render user without company","suites":["<EntityInfo />"],"updatePoint":{"line":76,"column":40},"line":76,"code":"  it('should render user without company', () => {\n    const navigationMock = {\n      navigate: jest.fn()\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: noCompany,\n      orgs: [organization],\n      language: \"en\",\n      navigation: navigationMock\n    }));\n    expect(wrapper.find({\n      title: 'Location'\n    }).prop('subtitle')).toEqual(noCompany.location);\n    wrapper.find({\n      title: 'Location'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(`https://www.google.com/maps/place/${noCompany.location.replace(/ /g, '+')}`);\n    expect(wrapper.find({\n      title: 'Email'\n    }).prop('subtitle')).toEqual(noCompany.email);\n    wrapper.find({\n      title: 'Email'\n    }).simulate('press');\n    expect(Communications.email).toBeCalledWith([noCompany.email], null, null, null, null);\n    expect(wrapper.find({\n      title: 'Website'\n    }).prop('subtitle')).toEqual(noCompany.blog);\n    wrapper.find({\n      title: 'Website'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(noCompany.blog);\n    expect(wrapper.find({\n      title: 'Company'\n    }).length).toEqual(0);\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"should render user without a tagged company","suites":["<EntityInfo />"],"updatePoint":{"line":111,"column":49},"line":111,"code":"  it('should render user without a tagged company', () => {\n    const navigationMock = {\n      navigate: jest.fn()\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: noTaggedCompany,\n      orgs: [organization],\n      language: \"en\",\n      navigation: navigationMock\n    }));\n    expect(wrapper.find({\n      title: 'Location'\n    }).prop('subtitle')).toEqual(noTaggedCompany.location);\n    wrapper.find({\n      title: 'Location'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(`https://www.google.com/maps/place/${noCompany.location.replace(/ /g, '+')}`);\n    expect(wrapper.find({\n      title: 'Email'\n    }).prop('subtitle')).toEqual(noTaggedCompany.email);\n    wrapper.find({\n      title: 'Email'\n    }).simulate('press');\n    expect(Communications.email).toBeCalledWith([noCompany.email], null, null, null, null);\n    expect(wrapper.find({\n      title: 'Website'\n    }).prop('subtitle')).toEqual(noTaggedCompany.blog);\n    wrapper.find({\n      title: 'Website'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(noCompany.blog);\n    expect(wrapper.find({\n      title: 'Company'\n    }).prop('subtitle')).toEqual(noTaggedCompany.company);\n    wrapper.find({\n      title: 'Company'\n    }).simulate('press');\n    expect(navigationMock.navigate.mock.calls.length).toEqual(0);\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"should render user without a location","suites":["<EntityInfo />"],"updatePoint":{"line":150,"column":43},"line":150,"code":"  it('should render user without a location', () => {\n    const navigationMock = {\n      navigate: jest.fn()\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: noLocation,\n      orgs: [organization],\n      language: \"en\",\n      navigation: navigationMock\n    }));\n    expect(wrapper.find({\n      title: 'Location'\n    }).length).toEqual(0);\n    expect(wrapper.find({\n      title: 'Email'\n    }).prop('subtitle')).toEqual(noLocation.email);\n    wrapper.find({\n      title: 'Email'\n    }).simulate('press');\n    expect(Communications.email).toBeCalledWith([noLocation.email], null, null, null, null);\n    expect(wrapper.find({\n      title: 'Website'\n    }).prop('subtitle')).toEqual(noLocation.blog);\n    wrapper.find({\n      title: 'Website'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(noLocation.blog);\n    expect(wrapper.find({\n      title: 'Company'\n    }).prop('subtitle')).toEqual(noLocation.company);\n    wrapper.find({\n      title: 'Company'\n    }).simulate('press');\n    expect(navigationMock.navigate).toBeCalledWith('Organization', {\n      organization\n    });\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"should render user without a tagged company","suites":["<EntityInfo />"],"updatePoint":{"line":187,"column":49},"line":187,"code":"  it('should render user without a tagged company', () => {\n    const navigationMock = {\n      navigate: jest.fn()\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: noEmail,\n      orgs: [organization],\n      language: \"en\",\n      navigation: navigationMock\n    }));\n    expect(wrapper.find({\n      title: 'Location'\n    }).prop('subtitle')).toEqual(noEmail.location);\n    wrapper.find({\n      title: 'Location'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(`https://www.google.com/maps/place/${noEmail.location.replace(/ /g, '+')}`);\n    expect(wrapper.find({\n      title: 'Email'\n    }).length).toEqual(0);\n    expect(wrapper.find({\n      title: 'Website'\n    }).prop('subtitle')).toEqual(noEmail.blog);\n    wrapper.find({\n      title: 'Website'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(noEmail.blog);\n    expect(wrapper.find({\n      title: 'Company'\n    }).prop('subtitle')).toEqual(noEmail.company);\n    wrapper.find({\n      title: 'Company'\n    }).simulate('press');\n    expect(navigationMock.navigate).toBeCalledWith('Organization', {\n      organization\n    });\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"should render user without a blog beginning with http","suites":["<EntityInfo />"],"updatePoint":{"line":224,"column":59},"line":224,"code":"  it('should render user without a blog beginning with http', () => {\n    const navigationMock = {\n      navigate: jest.fn()\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: noHttpInBlog,\n      orgs: [organization],\n      language: \"en\",\n      navigation: navigationMock\n    }));\n    expect(wrapper.find({\n      title: 'Location'\n    }).prop('subtitle')).toEqual(noHttpInBlog.location);\n    wrapper.find({\n      title: 'Location'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(`https://www.google.com/maps/place/${noHttpInBlog.location.replace(/ /g, '+')}`);\n    expect(wrapper.find({\n      title: 'Email'\n    }).prop('subtitle')).toEqual(noHttpInBlog.email);\n    wrapper.find({\n      title: 'Email'\n    }).simulate('press');\n    expect(Communications.email).toBeCalledWith([noHttpInBlog.email], null, null, null, null);\n    expect(wrapper.find({\n      title: 'Website'\n    }).prop('subtitle')).toEqual(noHttpInBlog.blog);\n    wrapper.find({\n      title: 'Website'\n    }).simulate('press');\n    expect(Communications.web).toBeCalledWith(`http://${noHttpInBlog.blog}`);\n    expect(wrapper.find({\n      title: 'Company'\n    }).prop('subtitle')).toEqual(noHttpInBlog.company);\n    wrapper.find({\n      title: 'Company'\n    }).simulate('press');\n    expect(navigationMock.navigate).toBeCalledWith('Organization', {\n      organization\n    });\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"should not render without required keys","suites":["<EntityInfo />"],"updatePoint":{"line":265,"column":45},"line":265,"code":"  it('should not render without required keys', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(EntityInfo, {\n      entity: {\n        name: 'John Doe'\n      },\n      orgs: [organization],\n      language: \"en\"\n    }));\n    expect(wrapper.html()).toEqual(null);\n  });","file":"tests/components/EntityInfo.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders <details/> tag in GithubHtmlView with correct icon","suites":["<GithubHtmlView />"],"updatePoint":{"line":7,"column":74},"line":7,"code":"  it('correctly renders <details/> tag in GithubHtmlView with correct icon', () => {\n    const sourceHtml = `\n      <details>\n        <summary>title</summary>\n        <div>description</div>\n      </details> \n    `;\n    const inst = renderer.create( /*#__PURE__*/React.createElement(GithubHtmlView, {\n      source: sourceHtml,\n      onLinkPress: () => 0\n    }));\n    expect(inst.root.findByType(Icon).props.name).toEqual('triangle-right');\n  });","file":"tests/components/GithubHtmlView.js","skipped":false,"dir":"__tests__"},{"name":"if <summary/> tag contains a single text node, we shoud prettify it","suites":["<GithubHtmlView />"],"updatePoint":{"line":20,"column":73},"line":20,"code":"  it('if <summary/> tag contains a single text node, we shoud prettify it', () => {\n    const sourceHtml = `\n      <details>\n        <summary>    \n              make some space and line break here...     \n        \n        </summary>\n        <div>description</div>\n      </details> \n    `;\n    const inst = renderer.create( /*#__PURE__*/React.createElement(GithubHtmlView, {\n      source: sourceHtml,\n      onLinkPress: () => 0\n    }));\n    expect(!!inst.root.findAllByType(Text).find(e => e.props.children === 'make some space and line break here...')).toBe(true);\n  });","file":"tests/components/GithubHtmlView.js","skipped":false,"dir":"__tests__"},{"name":"if there is no <summary/> tag, we should do fallback render which contains no icon","suites":["<GithubHtmlView />"],"updatePoint":{"line":36,"column":88},"line":36,"code":"  it('if there is no <summary/> tag, we should do fallback render which contains no icon', () => {\n    const sourceHtml = `\n      <details>\n        <div>no summary here!!</div>\n      </details> \n    `;\n    const inst = renderer.create( /*#__PURE__*/React.createElement(GithubHtmlView, {\n      source: sourceHtml,\n      onLinkPress: () => 0\n    }));\n    expect(inst.root.findAllByType(Icon).length).toBe(0);\n  });","file":"tests/components/GithubHtmlView.js","skipped":false,"dir":"__tests__"},{"name":"if <summary/> contain nested tags, should still be rendered without exception","suites":["<GithubHtmlView />"],"updatePoint":{"line":48,"column":83},"line":48,"code":"  it('if <summary/> contain nested tags, should still be rendered without exception', () => {\n    const sourceHtml = `\n      <details>\n        <summary>\n          abcde <div>test</div> fg\n        </summary>\n        <div>no summary here!!</div>\n      </details> \n    `;\n    const inst = renderer.create( /*#__PURE__*/React.createElement(GithubHtmlView, {\n      source: sourceHtml,\n      onLinkPress: () => 0\n    }));\n    expect(inst.root.findByType(Icon).props.name).toEqual('triangle-right');\n  });","file":"tests/components/GithubHtmlView.js","skipped":false,"dir":"__tests__"},{"name":"should render clickable image when the component initializes","suites":["<ImageZoom />"],"updatePoint":{"line":13,"column":66},"line":13,"code":"  it('should render clickable image when the component initializes', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ImageZoom, defaultProps));\n    const clickableImg = wrapper.find({\n      nativeId: 'image-zoom-clickable-img'\n    });\n    expect(clickableImg.length).toBe(1);\n  });","file":"tests/components/ImageZoom.js","skipped":false,"dir":"__tests__"},{"name":"should render modal when the user presses Touchable","suites":["<ImageZoom />"],"updatePoint":{"line":20,"column":57},"line":20,"code":"  it('should render modal when the user presses Touchable', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ImageZoom, defaultProps));\n    wrapper.find({\n      nativeId: 'image-zoom-clickable-img'\n    }).simulate('press');\n    const modal = wrapper.find({\n      nativeId: 'image-zoom-modal'\n    });\n    expect(modal.length).toBe(1);\n  });","file":"tests/components/ImageZoom.js","skipped":false,"dir":"__tests__"},{"name":"should close modal when onRequestClose is called","suites":["<ImageZoom />"],"updatePoint":{"line":30,"column":54},"line":30,"code":"  it('should close modal when onRequestClose is called', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ImageZoom, defaultProps));\n    wrapper.setState({\n      imgZoom: true\n    });\n    wrapper.find({\n      nativeId: 'image-zoom-modal'\n    }).simulate('requestClose');\n    const modal = wrapper.find({\n      nativeId: 'image-zoom-modal'\n    });\n    expect(modal.length).toBe(0);\n  });","file":"tests/components/ImageZoom.js","skipped":false,"dir":"__tests__"},{"name":"should close modal when the user presses CloseButton","suites":["<ImageZoom />"],"updatePoint":{"line":43,"column":58},"line":43,"code":"  it('should close modal when the user presses CloseButton', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ImageZoom, defaultProps));\n    wrapper.setState({\n      imgZoom: true\n    });\n    wrapper.find({\n      nativeId: 'image-zoom-close-button'\n    }).simulate('press');\n    expect(wrapper.state('imgZoom')).toBeFalsy();\n  });","file":"tests/components/ImageZoom.js","skipped":false,"dir":"__tests__"},{"name":"should close modal when the user taps the image","suites":["<ImageZoom />"],"updatePoint":{"line":53,"column":53},"line":53,"code":"  it('should close modal when the user taps the image', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ImageZoom, defaultProps));\n    wrapper.setState({\n      imgZoom: true\n    });\n    wrapper.find({\n      nativeId: 'image-zoom-photo-view'\n    }).simulate('tap');\n    expect(wrapper.state('imgZoom')).toBeFalsy();\n  });","file":"tests/components/ImageZoom.js","skipped":false,"dir":"__tests__"},{"name":"should render open issue info","suites":["<IssueListItem />"],"updatePoint":{"line":22,"column":35},"line":22,"code":"  it('should render open issue info', () => {\n    const props = { ...defaultProps,\n      issue: { ...defaultProps.issue,\n        state: 'open'\n      }\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(IssueListItem, props));\n    const infoWrapper = wrapper.find('ListItem');\n    expect(infoWrapper.prop('leftIcon').name).toEqual('issue-opened');\n    expect(infoWrapper.prop('title')).toEqual(props.issue.title);\n    expect(infoWrapper.prop('subtitle')).toEqual(expect.stringContaining(`#${props.issue.number}`));\n  });","file":"tests/components/IssueListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render closed issue info","suites":["<IssueListItem />"],"updatePoint":{"line":34,"column":37},"line":34,"code":"  it('should render closed issue info', () => {\n    const props = { ...defaultProps,\n      issue: { ...defaultProps.issue,\n        state: 'closed',\n        closed_at: new Date()\n      }\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(IssueListItem, props));\n    const infoWrapper = wrapper.find('ListItem');\n    expect(infoWrapper.prop('leftIcon').name).toEqual('issue-closed');\n    expect(infoWrapper.prop('title')).toEqual(props.issue.title);\n    expect(infoWrapper.prop('subtitle')).toEqual(expect.stringContaining(`#${props.issue.number} by ${props.issue.user.login} was closed 1m ago`));\n  });","file":"tests/components/IssueListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render merged pull request info","suites":["<IssueListItem />"],"updatePoint":{"line":47,"column":44},"line":47,"code":"  it('should render merged pull request info', () => {\n    const props = { ...defaultProps,\n      type: undefined,\n      issue: { ...defaultProps.issue,\n        state: 'merged',\n        closed_at: new Date()\n      }\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(IssueListItem, props));\n    const infoWrapper = wrapper.find('ListItem');\n    expect(infoWrapper.prop('leftIcon').name).toEqual('git-pull-request');\n    expect(infoWrapper.prop('title')).toEqual(props.issue.title);\n    expect(infoWrapper.prop('subtitle')).toEqual(expect.stringContaining(`#${props.issue.number} by ${props.issue.user.login} was closed 1m ago`));\n  });","file":"tests/components/IssueListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render comments icon and counter","suites":["<IssueListItem />"],"updatePoint":{"line":61,"column":45},"line":61,"code":"  it('should render comments icon and counter', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(IssueListItem, defaultProps));\n    expect(wrapper.find('Icon')).toHaveLength(1);\n    expect(wrapper.find('Text').contains(defaultProps.issue.comments)).toBe(true);\n  });","file":"tests/components/IssueListItem.js","skipped":false,"dir":"__tests__"},{"name":"should open issue when pressing","suites":["<IssueListItem />"],"updatePoint":{"line":66,"column":37},"line":66,"code":"  it('should open issue when pressing', () => {\n    const navigation = {\n      navigate: jest.fn()\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(IssueListItem, _extends({}, defaultProps, {\n      navigation: navigation\n    })));\n    wrapper.simulate('press');\n    expect(navigation.navigate).toHaveBeenCalledTimes(1);\n    expect(navigation.navigate).toHaveBeenCalledWith('Issue', expect.anything());\n  });","file":"tests/components/IssueListItem.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders small style","suites":["<LabelButton />"],"updatePoint":{"line":6,"column":35},"line":6,"code":"  it('correctly renders small style', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(LabelButton, {\n      label: label\n    }));\n    expect(wrapper.prop('title')).toEqual(label.name);\n    expect(wrapper.prop('fontSize')).toEqual(12);\n    expect(wrapper.prop('color')).toEqual('#000000');\n    expect(wrapper.prop('backgroundColor')).toEqual('#c3c3c3');\n    expect(wrapper.prop('icon')).toEqual(undefined);\n  });","file":"tests/components/LabelButton.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders large style","suites":["<LabelButton />"],"updatePoint":{"line":16,"column":35},"line":16,"code":"  it('correctly renders large style', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(LabelButton, {\n      label: label,\n      largeWithTag: true\n    }));\n    expect(wrapper.prop('title')).toEqual(label.name);\n    expect(wrapper.prop('fontSize')).toEqual(13);\n    expect(wrapper.prop('color')).toEqual('#000000');\n    expect(wrapper.prop('backgroundColor')).toEqual('#c3c3c3');\n    expect(wrapper.prop('icon')).toEqual({\n      name: 'tag',\n      type: 'octicon',\n      color: '#000000'\n    });\n  });","file":"tests/components/LabelButton.js","skipped":false,"dir":"__tests__"},{"name":"should render component with the correct label","suites":["<LabelListItem />"],"updatePoint":{"line":9,"column":52},"line":9,"code":"  it('should render component with the correct label', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(LabelListItem, defaultProps));\n    expect(wrapper.find(LabelButton)).toHaveLength(1);\n    expect(wrapper.contains( /*#__PURE__*/React.createElement(LabelButton, {\n      label: defaultProps.label,\n      largeWithTag: true\n    }))).toEqual(true);\n  });","file":"tests/components/LabelListItem.js","skipped":false,"dir":"__tests__"},{"name":"should call remove label with correct label when user presses IconContainer","suites":["<LabelListItem />"],"updatePoint":{"line":17,"column":81},"line":17,"code":"  it('should call remove label with correct label when user presses IconContainer', () => {\n    const removeLabelMock = jest.fn();\n    defaultProps.removeLabel = removeLabelMock;\n    const wrapper = shallow( /*#__PURE__*/React.createElement(LabelListItem, defaultProps));\n    wrapper.find('IconContainer').simulate('press');\n    expect(wrapper.find('IconContainer')).toHaveLength(1);\n    expect(removeLabelMock).toHaveBeenCalledWith(defaultProps.label);\n  });","file":"tests/components/LabelListItem.js","skipped":false,"dir":"__tests__"},{"name":"should display a Badge component when notificationsCount is greater than 0","suites":["<NotificationIcon />"],"updatePoint":{"line":11,"column":80},"line":11,"code":"  it('should display a Badge component when notificationsCount is greater than 0', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationIconComponent, defaultProps));\n    const badges = wrapper.find(Badge);\n    expect(badges.length).toBe(1);\n  });","file":"tests/components/NotificationIcon.js","skipped":false,"dir":"__tests__"},{"name":"should not display a Badge component when notificationsCount is 0","suites":["<NotificationIcon />"],"updatePoint":{"line":16,"column":71},"line":16,"code":"  it('should not display a Badge component when notificationsCount is 0', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationIconComponent, _extends({}, defaultProps, {\n      notificationsCount: 0\n    })));\n    const badges = wrapper.find(Badge);\n    expect(badges.length).toBe(0);\n  });","file":"tests/components/NotificationIcon.js","skipped":false,"dir":"__tests__"},{"name":"should display a Badge component displaying '99+' in normal text when notificationsCount is greater than 99","suites":["<NotificationIcon />"],"updatePoint":{"line":23,"column":113},"line":23,"code":"  it(\"should display a Badge component displaying '99+' in normal text when notificationsCount is greater than 99\", () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationIconComponent, _extends({}, defaultProps, {\n      notificationsCount: 100\n    })));\n    const badge = wrapper.find(Badge);\n    expect(badge.prop('text')).toBe('99+');\n    expect(badge.prop('largeText')).toBe(false);\n  });","file":"tests/components/NotificationIcon.js","skipped":false,"dir":"__tests__"},{"name":"should display a Badge component displaying notificationsCount in largeText if notificationsCount is less than or equal to 99","suites":["<NotificationIcon />"],"updatePoint":{"line":31,"column":131},"line":31,"code":"  it('should display a Badge component displaying notificationsCount in largeText if notificationsCount is less than or equal to 99', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationIconComponent, _extends({}, defaultProps, {\n      notificationsCount: 99\n    })));\n    const badge = wrapper.find(Badge);\n    expect(badge.prop('text')).toBe(99);\n    expect(badge.prop('largeText')).toBe(true);\n  });","file":"tests/components/NotificationIcon.js","skipped":false,"dir":"__tests__"},{"name":"should render a View component if notification type is 'Commit'","suites":["<NotificationListItem />"],"updatePoint":{"line":21,"column":69},"line":21,"code":"  it(\"should render a View component if notification type is 'Commit'\", () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationListItem, defaultProps));\n    const result = wrapper.instance().getComponentType();\n    expect(result).toBe(View);\n  });","file":"tests/components/NotificationListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render a TouchableOpacity component if notification type is not 'Commit'","suites":["<NotificationListItem />"],"updatePoint":{"line":26,"column":85},"line":26,"code":"  it(\"should render a TouchableOpacity component if notification type is not 'Commit'\", () => {\n    const notification = {\n      subject: {\n        type: 'not a commit'\n      }\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationListItem, _extends({}, defaultProps, {\n      notification: notification\n    })));\n    const result = wrapper.instance().getComponentType();\n    expect(result).toBe(TouchableOpacity);\n  });","file":"tests/components/NotificationListItem.js","skipped":false,"dir":"__tests__"},{"name":"should call navigation when user presses TitleComponent","suites":["<NotificationListItem />"],"updatePoint":{"line":38,"column":61},"line":38,"code":"  it('should call navigation when user presses TitleComponent', () => {\n    const notification = {\n      subject: {\n        type: 'not a commit'\n      }\n    };\n    const navigationActionMock = jest.fn();\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationListItem, _extends({}, defaultProps, {\n      notification: notification,\n      navigationAction: navigationActionMock\n    })));\n    wrapper.find({\n      nativeId: 'TitleComponent'\n    }).simulate('press');\n    expect(navigationActionMock).toHaveBeenCalledWith(notification);\n  });","file":"tests/components/NotificationListItem.js","skipped":false,"dir":"__tests__"},{"name":"should return the correct icon name","suites":["<NotificationListItem />"],"updatePoint":{"line":54,"column":41},"line":54,"code":"  it('should return the correct icon name', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationListItem, defaultProps));\n    expect(wrapper.instance().getIconName('Commit')).toEqual('git-commit');\n    expect(wrapper.instance().getIconName('PullRequest')).toEqual('git-pull-request');\n    expect(wrapper.instance().getIconName('wrong data')).toEqual('issue-opened');\n  });","file":"tests/components/NotificationListItem.js","skipped":false,"dir":"__tests__"},{"name":"should call iconAction on press and notification is unread","suites":["<NotificationListItem />"],"updatePoint":{"line":60,"column":64},"line":60,"code":"  it('should call iconAction on press and notification is unread', () => {\n    const notification = {\n      id: 1,\n      subject: {\n        type: 'Commit'\n      },\n      unread: true\n    };\n    const iconActionMock = jest.fn();\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationListItem, _extends({}, defaultProps, {\n      notification: notification,\n      iconAction: iconActionMock\n    })));\n    wrapper.find({\n      nativeId: 'notification-unread'\n    }).simulate('press');\n    expect(iconActionMock).toHaveBeenCalledWith(1);\n    expect(iconActionMock).toHaveBeenCalledTimes(1);\n  });","file":"tests/components/NotificationListItem.js","skipped":false,"dir":"__tests__"},{"name":"should return object empty","suites":["<NotificationListItem />"],"updatePoint":{"line":79,"column":32},"line":79,"code":"  it('should return object empty', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationListItem, defaultProps));\n    expect(wrapper.instance().getTitleComponentProps()).toEqual({});\n  });","file":"tests/components/NotificationListItem.js","skipped":false,"dir":"__tests__"},{"name":"should return object with nativeId and onPress","suites":["<NotificationListItem />"],"updatePoint":{"line":83,"column":52},"line":83,"code":"  it('should return object with nativeId and onPress', () => {\n    const notification = {\n      subject: {\n        type: 'not a commit'\n      }\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(NotificationListItem, _extends({}, defaultProps, {\n      notification: notification\n    })));\n    const result = wrapper.instance().getTitleComponentProps();\n    expect(result.nativeId).toBe('TitleComponent');\n    expect(result.onPress).toEqual(expect.any(Function));\n  });","file":"tests/components/NotificationListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render the Icon component if loading is false and repository language is not null","suites":["<RepositoryProfile />"],"updatePoint":{"line":28,"column":94},"line":28,"code":"  it('should render the Icon component if loading is false and repository language is not null', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(RepositoryProfile, defaultProps));\n    const icon = wrapper.find({\n      name: 'fiber-manual-record'\n    });\n    expect(icon.length).toBeTruthy();\n  });","file":"tests/components/RepositoryProfile.js","skipped":false,"dir":"__tests__"},{"name":"should not render the Icon component if loading is true","suites":["<RepositoryProfile />"],"updatePoint":{"line":35,"column":61},"line":35,"code":"  it('should not render the Icon component if loading is true', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(RepositoryProfile, _extends({}, defaultProps, {\n      loading: true\n    })));\n    const icon = wrapper.find({\n      name: 'fiber-manual-record'\n    });\n    expect(icon.length).toBeFalsy();\n  });","file":"tests/components/RepositoryProfile.js","skipped":false,"dir":"__tests__"},{"name":"should not render the Icon component if repository language is null","suites":["<RepositoryProfile />"],"updatePoint":{"line":44,"column":73},"line":44,"code":"  it('should not render the Icon component if repository language is null', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(RepositoryProfile, _extends({}, defaultProps, {\n      repository: { ...defaultProps.repository,\n        primaryLanguage: null\n      }\n    })));\n    const icon = wrapper.find({\n      name: 'fiber-manual-record'\n    });\n    expect(icon.length).toBeFalsy();\n  });","file":"tests/components/RepositoryProfile.js","skipped":false,"dir":"__tests__"},{"name":"should render repository fork text container if repository.isFork is true","suites":["<RepositoryProfile />"],"updatePoint":{"line":55,"column":79},"line":55,"code":"  it('should render repository fork text container if repository.isFork is true', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(RepositoryProfile, defaultProps));\n    const repositoryContainer = wrapper.find({\n      nativeId: 'repository-fork-container'\n    });\n    expect(repositoryContainer.length).toBeTruthy();\n  });","file":"tests/components/RepositoryProfile.js","skipped":false,"dir":"__tests__"},{"name":"should call navigation.navigate onPress repository parent","suites":["<RepositoryProfile />"],"updatePoint":{"line":62,"column":63},"line":62,"code":"  it('should call navigation.navigate onPress repository parent', () => {\n    const navigateMock = jest.fn();\n    const navigation = {\n      navigate: navigateMock\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(RepositoryProfile, _extends({}, defaultProps, {\n      navigation: navigation\n    })));\n    wrapper.find({\n      nativeId: 'repository-navigate-container'\n    }).simulate('press');\n    expect(navigateMock).toHaveBeenCalledWith('Repository', {\n      repoId: 'foo/bar'\n    });\n  });","file":"tests/components/RepositoryProfile.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with open issue","suites":["<StateBadge />"],"updatePoint":{"line":8,"column":39},"line":8,"code":"  it('correctly renders with open issue', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      issue: openIssue,\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('Open');\n    expect(wrapper.prop('color')).toEqual(colors.green);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with closed issue","suites":["<StateBadge />"],"updatePoint":{"line":16,"column":41},"line":16,"code":"  it('correctly renders with closed issue', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      issue: closedIssue,\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('Closed');\n    expect(wrapper.prop('color')).toEqual(colors.red);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with open pull request","suites":["<StateBadge />"],"updatePoint":{"line":24,"column":46},"line":24,"code":"  it('correctly renders with open pull request', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      issue: openPr,\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('Open');\n    expect(wrapper.prop('color')).toEqual(colors.green);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with closed pull request","suites":["<StateBadge />"],"updatePoint":{"line":32,"column":48},"line":32,"code":"  it('correctly renders with closed pull request', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      issue: closedPr,\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('Closed');\n    expect(wrapper.prop('color')).toEqual(colors.red);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with merged pull request","suites":["<StateBadge />"],"updatePoint":{"line":40,"column":48},"line":40,"code":"  it('correctly renders with merged pull request', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      isMerged: true,\n      issue: mergedPr,\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('Merged');\n    expect(wrapper.prop('color')).toEqual(colors.purple);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders without issue","suites":["<StateBadge />"],"updatePoint":{"line":49,"column":37},"line":49,"code":"  it('correctly renders without issue', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      isMerged: true,\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('Merged');\n    expect(wrapper.prop('color')).toEqual(colors.purple);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with open type","suites":["<StateBadge />"],"updatePoint":{"line":57,"column":38},"line":57,"code":"  it('correctly renders with open type', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      type: \"open\",\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('');\n    expect(wrapper.prop('color')).toEqual(colors.green);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with closed type","suites":["<StateBadge />"],"updatePoint":{"line":65,"column":40},"line":65,"code":"  it('correctly renders with closed type', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      type: \"closed\",\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('');\n    expect(wrapper.prop('color')).toEqual(colors.red);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with closed type","suites":["<StateBadge />"],"updatePoint":{"line":73,"column":40},"line":73,"code":"  it('correctly renders with closed type', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      type: \"merged\",\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('');\n    expect(wrapper.prop('color')).toEqual(colors.purple);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with custom text","suites":["<StateBadge />"],"updatePoint":{"line":81,"column":40},"line":81,"code":"  it('correctly renders with custom text', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(StateBadge, {\n      type: \"open\",\n      text: \"test text\",\n      language: \"en\"\n    }));\n    expect(wrapper.childAt(0).childAt(0).text()).toEqual('test text');\n    expect(wrapper.prop('color')).toEqual(colors.green);\n  });","file":"tests/components/StateBadge.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with default touchable view","suites":["<ToggleView />"],"updatePoint":{"line":6,"column":51},"line":6,"code":"  it('correctly renders with default touchable view', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(ToggleView, null, /*#__PURE__*/React.createElement(Text, null, \"I am hidden\")));\n    expect(wrapper.find('text').first().text()).toEqual('…');\n  });","file":"tests/components/ToggleView.js","skipped":false,"dir":"__tests__"},{"name":"correctly renders with a custom touchable view","suites":["<ToggleView />"],"updatePoint":{"line":10,"column":52},"line":10,"code":"  it('correctly renders with a custom touchable view', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(ToggleView, {\n      TouchableView: /*#__PURE__*/React.createElement(Text, null, \"CUSTOM\")\n    }, /*#__PURE__*/React.createElement(Text, null, \"I am hidden\")));\n    expect(wrapper.find('text').first().text()).toEqual('CUSTOM');\n  });","file":"tests/components/ToggleView.js","skipped":false,"dir":"__tests__"},{"name":"starts with the hidden element collapsed","suites":["<ToggleView />"],"updatePoint":{"line":16,"column":46},"line":16,"code":"  it('starts with the hidden element collapsed', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ToggleView, {\n      TouchableView: /*#__PURE__*/React.createElement(Text, null, \"CUSTOM\")\n    }, /*#__PURE__*/React.createElement(Text, null, \"I am hidden\")));\n    expect(wrapper.find('Collapsible').prop('collapsed')).toEqual(true);\n  });","file":"tests/components/ToggleView.js","skipped":false,"dir":"__tests__"},{"name":"uncollapses the hidden element when touched","suites":["<ToggleView />"],"updatePoint":{"line":22,"column":49},"line":22,"code":"  it('uncollapses the hidden element when touched', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ToggleView, null, /*#__PURE__*/React.createElement(Text, null, \"I am hidden\")));\n    wrapper.find('TouchableOpacity').simulate('press');\n    expect(wrapper.find('Collapsible').prop('collapsed')).toEqual(false);\n  });","file":"tests/components/ToggleView.js","skipped":false,"dir":"__tests__"},{"name":"recollapses the hidden element when touched twice","suites":["<ToggleView />"],"updatePoint":{"line":27,"column":55},"line":27,"code":"  it('recollapses the hidden element when touched twice', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ToggleView, null, /*#__PURE__*/React.createElement(Text, null, \"I am hidden\")));\n    wrapper.find('TouchableOpacity').simulate('press');\n    wrapper.find('TouchableOpacity').simulate('press');\n    expect(wrapper.find('Collapsible').prop('collapsed')).toEqual(true);\n  });","file":"tests/components/ToggleView.js","skipped":false,"dir":"__tests__"},{"name":"should navigate to AuthProfile screen when item is the logged in user","suites":["<UserListItem />"],"updatePoint":{"line":31,"column":75},"line":31,"code":"  it('should navigate to AuthProfile screen when item is the logged in user', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, defaultProps), {\n      context: {\n        store\n      }\n    }).dive();\n    wrapper.find('Styled(TouchableHighlight)').simulate('press');\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledTimes(1);\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledWith('AuthProfile', expect.anything());\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should navigate to Profile screen when item is not the logged in user","suites":["<UserListItem />"],"updatePoint":{"line":41,"column":75},"line":41,"code":"  it('should navigate to Profile screen when item is not the logged in user', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, _extends({}, defaultProps, {\n      user: {\n        type: 'User',\n        login: 'someone'\n      }\n    })), {\n      context: {\n        store\n      }\n    }).dive();\n    wrapper.find('Styled(TouchableHighlight)').simulate('press');\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledTimes(1);\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledWith('Profile', expect.anything());\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should navigate to Organization screen when item is not user type","suites":["<UserListItem />"],"updatePoint":{"line":56,"column":71},"line":56,"code":"  it('should navigate to Organization screen when item is not user type', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, _extends({}, defaultProps, {\n      user: {\n        type: '',\n        login: 'org'\n      }\n    })), {\n      context: {\n        store\n      }\n    }).dive();\n    wrapper.find('Styled(TouchableHighlight)').simulate('press');\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledTimes(1);\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledWith('Organization', expect.anything());\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should navigate to user screen when user component is pressed","suites":["<UserListItem />"],"updatePoint":{"line":71,"column":67},"line":71,"code":"  it('should navigate to user screen when user component is pressed', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, defaultProps), {\n      context: {\n        store\n      }\n    }).dive();\n    wrapper.find('[data-testid=\"userListItem-user\"]').simulate('press');\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledTimes(1);\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledWith(expect.any(String), {\n      user: defaultProps.user\n    });\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should navigate to user screen when user image container is pressed","suites":["<UserListItem />"],"updatePoint":{"line":83,"column":73},"line":83,"code":"  it('should navigate to user screen when user image container is pressed', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, defaultProps), {\n      context: {\n        store\n      }\n    }).dive();\n    wrapper.find('[data-testid=\"userListItem-imageContainer\"]').simulate('press');\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledTimes(1);\n    expect(defaultProps.navigation.navigate).toHaveBeenCalledWith(expect.any(String), {\n      user: defaultProps.user\n    });\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render user image","suites":["<UserListItem />"],"updatePoint":{"line":95,"column":30},"line":95,"code":"  it('should render user image', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, defaultProps), {\n      context: {\n        store\n      }\n    }).dive();\n    const image = wrapper.find('[data-testid=\"userListItem-image\"]');\n    expect(image.prop('source').uri).toBe(defaultProps.user.avatar_url);\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render user login as title","suites":["<UserListItem />"],"updatePoint":{"line":104,"column":39},"line":104,"code":"  it('should render user login as title', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, defaultProps), {\n      context: {\n        store\n      }\n    }).dive();\n    const title = wrapper.find('Styled(Text)');\n    expect(title.contains(defaultProps.user.login)).toBe(true);\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render title and subtitle","suites":["<UserListItem />"],"updatePoint":{"line":113,"column":38},"line":113,"code":"  it('should render title and subtitle', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, _extends({}, defaultProps, {\n      title: \"git\",\n      subtitle: \"point\"\n    })), {\n      context: {\n        store\n      }\n    }).dive();\n    const hasTitle = wrapper.find('Styled(Text)').contains('git');\n    const hasSubtitle = wrapper.find('Styled(Text)').contains('point');\n    expect(hasTitle).toBe(true);\n    expect(hasSubtitle).toBe(true);\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should call iconAction","suites":["<UserListItem />"],"updatePoint":{"line":127,"column":28},"line":127,"code":"  it('should call iconAction', () => {\n    const iconAction = jest.fn();\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserListItem, _extends({}, defaultProps, {\n      iconAction: iconAction\n    })), {\n      context: {\n        store\n      }\n    }).dive();\n    wrapper.find('[data-testid=\"userListItem-icon\"]').simulate('press');\n    expect(iconAction).toHaveBeenCalledTimes(1);\n    expect(iconAction).toHaveBeenCalledWith(defaultProps.user.login);\n  });","file":"tests/components/UserListItem.js","skipped":false,"dir":"__tests__"},{"name":"should render user profile if user has public repos and has starred repos","suites":["<UserProfile />"],"updatePoint":{"line":28,"column":79},"line":28,"code":"  it('should render user profile if user has public repos and has starred repos', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserProfile, defaultProps));\n    const container = wrapper.find({\n      nativeId: 'user-profile-container'\n    });\n    expect(container.length).toBeTruthy();\n  });","file":"tests/components/UserProfile.js","skipped":false,"dir":"__tests__"},{"name":"should return an uri based on initialUser data if initialUser has the property avatar_url","suites":["<UserProfile />"],"updatePoint":{"line":35,"column":95},"line":35,"code":"  it('should return an uri based on initialUser data if initialUser has the property avatar_url', () => {\n    const initialUser = {\n      avatar_url: 'foo.jpg',\n      updated_at: '01/01/01'\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserProfile, _extends({}, defaultProps, {\n      initialUser: initialUser\n    })));\n    const result = wrapper.instance().getUserUri();\n    const expectedResult = {\n      uri: `${initialUser.avatar_url}&lastModified=${initialUser.updated_at}`\n    };\n    expect(result).toEqual(expectedResult);\n  });","file":"tests/components/UserProfile.js","skipped":false,"dir":"__tests__"},{"name":"should return an uri based on user data if initialUser doesn't have the property avatar_url","suites":["<UserProfile />"],"updatePoint":{"line":49,"column":97},"line":49,"code":"  it(\"should return an uri based on user data if initialUser doesn't have the property avatar_url\", () => {\n    const initialUser = {\n      updated_at: '01/01/01'\n    };\n    const user = {\n      avatar_url: 'foo.jpg',\n      updated_at: '01/01/01'\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserProfile, _extends({}, defaultProps, {\n      initialUser: initialUser,\n      user: user\n    })));\n    const result = wrapper.instance().getUserUri();\n    const expectedResult = {\n      uri: `${user.avatar_url}&lastModified=${user.updated_at}`\n    };\n    expect(result).toEqual(expectedResult);\n  });","file":"tests/components/UserProfile.js","skipped":false,"dir":"__tests__"},{"name":"should call navigation when user press Repository List TouchableOpacity component","suites":["<UserProfile />"],"updatePoint":{"line":67,"column":87},"line":67,"code":"  it('should call navigation when user press Repository List TouchableOpacity component', () => {\n    const navigationMock = jest.fn();\n    const navigation = {\n      navigate: navigationMock\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserProfile, _extends({}, defaultProps, {\n      navigation: navigation\n    })));\n    const expectedSecondArgument = {\n      repoCount: 15,\n      title: 'Repositories',\n      user: { ...defaultProps.user\n      }\n    };\n    wrapper.find({\n      nativeId: 'touchable-repository-list'\n    }).simulate('press');\n    expect(navigationMock).toHaveBeenCalledTimes(1);\n    expect(navigationMock).toHaveBeenCalledWith('RepositoryList', expectedSecondArgument);\n  });","file":"tests/components/UserProfile.js","skipped":false,"dir":"__tests__"},{"name":"should call navigation when user press Start Count List TouchableOpacity component","suites":["<UserProfile />"],"updatePoint":{"line":87,"column":88},"line":87,"code":"  it('should call navigation when user press Start Count List TouchableOpacity component', () => {\n    const navigationMock = jest.fn();\n    const navigation = {\n      navigate: navigationMock\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserProfile, _extends({}, defaultProps, {\n      navigation: navigation,\n      type: \"foo\"\n    })));\n    const expectedSecondArgument = {\n      followerCount: 15,\n      title: 'Followers',\n      user: defaultProps.user\n    };\n    wrapper.find({\n      nativeId: 'touchable-followers-list'\n    }).simulate('press');\n    expect(navigationMock).toHaveBeenCalledTimes(1);\n    expect(navigationMock).toHaveBeenCalledWith('FollowerList', expectedSecondArgument);\n  });","file":"tests/components/UserProfile.js","skipped":false,"dir":"__tests__"},{"name":"should call navigation when user press Following List TouchableOpacity component","suites":["<UserProfile />"],"updatePoint":{"line":107,"column":86},"line":107,"code":"  it('should call navigation when user press Following List TouchableOpacity component', () => {\n    const navigationMock = jest.fn();\n    const navigation = {\n      navigate: navigationMock\n    };\n    const wrapper = shallow( /*#__PURE__*/React.createElement(UserProfile, _extends({}, defaultProps, {\n      navigation: navigation,\n      type: \"foo\"\n    })));\n    const expectedSecondArgument = {\n      followingCount: 15,\n      title: 'Following',\n      user: defaultProps.user\n    };\n    wrapper.find({\n      nativeId: 'touchable-following-list'\n    }).simulate('press');\n    expect(navigationMock).toHaveBeenCalledTimes(1);\n    expect(navigationMock).toHaveBeenCalledWith('FollowingList', expectedSecondArgument);\n  });","file":"tests/components/UserProfile.js","skipped":false,"dir":"__tests__"},{"name":"should always render a <StyledViewContainer />","suites":["<ViewContainer />"],"updatePoint":{"line":5,"column":52},"line":5,"code":"  it('should always render a <StyledViewContainer />', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ViewContainer, null));\n    expect(wrapper.find(StyledViewContainer).length).toBe(1);\n    expect(wrapper.find(StyledViewContainer).prop('children')).toBe(null);\n  });","file":"tests/components/ViewContainer.js","skipped":false,"dir":"__tests__"},{"name":"should pass children to <StyledViewContainer /> if present","suites":["<ViewContainer />"],"updatePoint":{"line":10,"column":64},"line":10,"code":"  it('should pass children to <StyledViewContainer /> if present', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(ViewContainer, null, \"test\"));\n    expect(wrapper.find(StyledViewContainer).children().text()).toBe('test');\n  });","file":"tests/components/ViewContainer.js","skipped":false,"dir":"__tests__"},{"name":" should contain same keys as ","suites":["Locales"],"updatePoint":{"line":9,"column":58},"line":9,"code":"    it(`${key} should contain same keys as ${baseLanguage}`, () => {\n      expect(dumpKeysRecursively(languages[key]).sort()).toEqual(expect.arrayContaining(baseKeys));\n    });","file":"tests/others/locales.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPhone 5","suites":["Normalize Text"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it('should normalize correctly on iPhone 5', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPhone5,\n      pixelRatio: 2\n    });\n    expectSize(0.95);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPhone 6","suites":["Normalize Text"],"updatePoint":{"line":31,"column":44},"line":31,"code":"  it('should normalize correctly on iPhone 6', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPhone6,\n      pixelRatio: 2\n    });\n    expectSize(1.15);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPhone 6 Plus","suites":["Normalize Text"],"updatePoint":{"line":38,"column":49},"line":38,"code":"  it('should normalize correctly on iPhone 6 Plus', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPhone6Plus,\n      pixelRatio: 3\n    });\n    expectSize(1.27);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPhone 7","suites":["Normalize Text"],"updatePoint":{"line":45,"column":44},"line":45,"code":"  it('should normalize correctly on iPhone 7', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPhone7,\n      pixelRatio: 2\n    });\n    expectSize(1.15);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPhone 7 Plus","suites":["Normalize Text"],"updatePoint":{"line":52,"column":49},"line":52,"code":"  it('should normalize correctly on iPhone 7 Plus', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPhone7Plus,\n      pixelRatio: 3\n    });\n    expectSize(1.27);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPod Touch","suites":["Normalize Text"],"updatePoint":{"line":59,"column":46},"line":59,"code":"  it('should normalize correctly on iPod Touch', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPodTouch,\n      pixelRatio: 2\n    });\n    expectSize(0.95);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPad Pro","suites":["Normalize Text"],"updatePoint":{"line":66,"column":44},"line":66,"code":"  it('should normalize correctly on iPad Pro', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPadPro,\n      pixelRatio: 2\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPad Gen 3/4","suites":["Normalize Text"],"updatePoint":{"line":73,"column":48},"line":73,"code":"  it('should normalize correctly on iPad Gen 3/4', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPadGen3,\n      pixelRatio: 2\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPad Air","suites":["Normalize Text"],"updatePoint":{"line":80,"column":44},"line":80,"code":"  it('should normalize correctly on iPad Air', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPadAir,\n      pixelRatio: 2\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on iPad Mini","suites":["Normalize Text"],"updatePoint":{"line":87,"column":45},"line":87,"code":"  it('should normalize correctly on iPad Mini', () => {\n    mockRequiredClasses({\n      dimensions: screens.iPadMini,\n      pixelRatio: 1\n    });\n    expectSize(1);\n  }); // Android Devices","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Nexus 6P","suites":["Normalize Text"],"updatePoint":{"line":95,"column":44},"line":95,"code":"  it('should normalize correctly on Nexus 6P', () => {\n    mockRequiredClasses({\n      dimensions: screens.Nexus6P,\n      pixelRatio: 3.5\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Nexus 5X","suites":["Normalize Text"],"updatePoint":{"line":102,"column":44},"line":102,"code":"  it('should normalize correctly on Nexus 5X', () => {\n    mockRequiredClasses({\n      dimensions: screens.Nexus5X,\n      pixelRatio: 2.6\n    });\n    expectSize(1.15);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Google Pixel","suites":["Normalize Text"],"updatePoint":{"line":109,"column":48},"line":109,"code":"  it('should normalize correctly on Google Pixel', () => {\n    mockRequiredClasses({\n      dimensions: screens.GooglePixel,\n      pixelRatio: 2.6\n    });\n    expectSize(1.15);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Google Pixel XL","suites":["Normalize Text"],"updatePoint":{"line":116,"column":51},"line":116,"code":"  it('should normalize correctly on Google Pixel XL', () => {\n    mockRequiredClasses({\n      dimensions: screens.GooglePixelXL,\n      pixelRatio: 3.5\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Samsung Galaxy Note 5","suites":["Normalize Text"],"updatePoint":{"line":123,"column":57},"line":123,"code":"  it('should normalize correctly on Samsung Galaxy Note 5', () => {\n    mockRequiredClasses({\n      dimensions: screens.SamsungGalaxyNote5,\n      pixelRatio: 4\n    });\n    expectSize(1);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Samsung Galaxy S7","suites":["Normalize Text"],"updatePoint":{"line":130,"column":53},"line":130,"code":"  it('should normalize correctly on Samsung Galaxy S7', () => {\n    mockRequiredClasses({\n      dimensions: screens.SamsungGalaxyS7,\n      pixelRatio: 4\n    });\n    expectSize(1);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Samsung Galaxy S7 Edge","suites":["Normalize Text"],"updatePoint":{"line":137,"column":58},"line":137,"code":"  it('should normalize correctly on Samsung Galaxy S7 Edge', () => {\n    mockRequiredClasses({\n      dimensions: screens.SamsungGalaxyS7Edge,\n      pixelRatio: 4\n    });\n    expectSize(1);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on LG G5","suites":["Normalize Text"],"updatePoint":{"line":144,"column":41},"line":144,"code":"  it('should normalize correctly on LG G5', () => {\n    mockRequiredClasses({\n      dimensions: screens.LGG5,\n      pixelRatio: 4\n    });\n    expectSize(1);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on OnePlus 3","suites":["Normalize Text"],"updatePoint":{"line":151,"column":45},"line":151,"code":"  it('should normalize correctly on OnePlus 3', () => {\n    mockRequiredClasses({\n      dimensions: screens.OnePlus3,\n      pixelRatio: 3\n    });\n    expectSize(1);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Nexus 7","suites":["Normalize Text"],"updatePoint":{"line":158,"column":43},"line":158,"code":"  it('should normalize correctly on Nexus 7', () => {\n    mockRequiredClasses({\n      dimensions: screens.Nexus7,\n      pixelRatio: 2\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Nexus 9","suites":["Normalize Text"],"updatePoint":{"line":165,"column":43},"line":165,"code":"  it('should normalize correctly on Nexus 9', () => {\n    mockRequiredClasses({\n      dimensions: screens.Nexus9,\n      pixelRatio: 2\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on Samsung Galaxy Tab 10","suites":["Normalize Text"],"updatePoint":{"line":172,"column":57},"line":172,"code":"  it('should normalize correctly on Samsung Galaxy Tab 10', () => {\n    mockRequiredClasses({\n      dimensions: screens.SamsungGalaxyTab10,\n      pixelRatio: 1\n    });\n    expectSize(1);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should normalize correctly on ChromebookPixel","suites":["Normalize Text"],"updatePoint":{"line":179,"column":51},"line":179,"code":"  it('should normalize correctly on ChromebookPixel', () => {\n    mockRequiredClasses({\n      dimensions: screens.ChromebookPixel,\n      pixelRatio: 2\n    });\n    expectSize(1.25);\n  });","file":"tests/others/normalize-text.js","skipped":false,"dir":"__tests__"},{"name":"should set isLoggingIn: true and isAuthenticated: false when LOGIN.PENDING action is dispatched","suites":["Auth Reducer"],"updatePoint":{"line":12,"column":101},"line":12,"code":"  it('should set isLoggingIn: true and isAuthenticated: false when LOGIN.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isLoggingIn: true,\n      isAuthenticated: false\n    };\n    const action = {\n      type: LOGIN.PENDING\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an access token from payload of LOGIN.SUCCESS action and set isLoggingIn: false, isAuthenticated: true","suites":["Auth Reducer"],"updatePoint":{"line":22,"column":119},"line":22,"code":"  it('should set an access token from payload of LOGIN.SUCCESS action and set isLoggingIn: false, isAuthenticated: true', () => {\n    const expectedState = { ...initialState,\n      isLoggingIn: false,\n      isAuthenticated: true,\n      accessToken: CLIENT_SECRET\n    };\n    const action = {\n      type: LOGIN.SUCCESS,\n      payload: CLIENT_SECRET\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from payload of LOGIN.ERROR action and set isLoggingIn: false, isAuthenticated: false","suites":["Auth Reducer"],"updatePoint":{"line":34,"column":111},"line":34,"code":"  it('should set an error from payload of LOGIN.ERROR action and set isLoggingIn: false, isAuthenticated: false', () => {\n    const expectedState = { ...initialState,\n      isLoggingIn: false,\n      isAuthenticated: false,\n      error: authError\n    };\n    const action = {\n      type: LOGIN.ERROR,\n      payload: authError\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isSigningOut: true when LOGOUT.PENDING action is dispatched","suites":["Auth Reducer"],"updatePoint":{"line":50,"column":76},"line":50,"code":"  it('should set isSigningOut: true when LOGOUT.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isSigningOut: true\n    };\n    const action = {\n      type: LOGOUT.PENDING\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set hasInitialUser: false when LOGOUT.SUCCESS action is dispatched","suites":["Auth Reducer"],"updatePoint":{"line":59,"column":79},"line":59,"code":"  it('should set hasInitialUser: false when LOGOUT.SUCCESS action is dispatched', () => {\n    const expectedState = { ...initialState,\n      hasInitialUser: false\n    };\n    const action = {\n      type: LOGOUT.SUCCESS\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from payload of LOGOUT.ERROR action and set isSigningOut: false","suites":["Auth Reducer"],"updatePoint":{"line":68,"column":89},"line":68,"code":"  it('should set an error from payload of LOGOUT.ERROR action and set isSigningOut: false', () => {\n    const expectedState = { ...initialState,\n      isSigningOut: false,\n      error: authError\n    };\n    const action = {\n      type: LOGOUT.ERROR,\n      payload: authError\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingUser: true when GET_AUTH_USER.PENDING action is dispatched","suites":["Auth Reducer"],"updatePoint":{"line":83,"column":84},"line":83,"code":"  it('should set isPendingUser: true when GET_AUTH_USER.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingUser: true\n    };\n    const action = {\n      type: GET_AUTH_USER.PENDING\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set user data from payload of GET_AUTH_USER.SUCCESS action and set isPendingUser: false, hasInitialUser: true","suites":["Auth Reducer"],"updatePoint":{"line":92,"column":122},"line":92,"code":"  it('should set user data from payload of GET_AUTH_USER.SUCCESS action and set isPendingUser: false, hasInitialUser: true', () => {\n    const expectedState = { ...initialState,\n      isPendingUser: false,\n      hasInitialUser: true,\n      user\n    };\n    const action = {\n      type: GET_AUTH_USER.SUCCESS,\n      payload: user\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from payload of GET_AUTH_USER.ERROR action and set isLoggingIn: false, isAuthenticated: false","suites":["Auth Reducer"],"updatePoint":{"line":104,"column":119},"line":104,"code":"  it('should set an error from payload of GET_AUTH_USER.ERROR action and set isLoggingIn: false, isAuthenticated: false', () => {\n    const expectedState = { ...initialState,\n      isPendingUser: false,\n      error: authError\n    };\n    const action = {\n      type: GET_AUTH_USER.ERROR,\n      payload: authError\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingStarCount: true when GET_AUTH_STAR_COUNT.PENDING action is dispatched","suites":["Auth Reducer"],"updatePoint":{"line":119,"column":95},"line":119,"code":"  it('should set isPendingStarCount: true when GET_AUTH_STAR_COUNT.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingStarCount: true\n    };\n    const action = {\n      type: GET_AUTH_STAR_COUNT.PENDING\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set starCount from payload of GET_AUTH_STAR_COUNT.SUCCESS action and set isPendingStarCount: false","suites":["Auth Reducer"],"updatePoint":{"line":128,"column":111},"line":128,"code":"  it('should set starCount from payload of GET_AUTH_STAR_COUNT.SUCCESS action and set isPendingStarCount: false', () => {\n    const starCount = 5;\n    const expectedState = { ...initialState,\n      isPendingStarCount: false,\n      starCount\n    };\n    const action = {\n      type: GET_AUTH_STAR_COUNT.SUCCESS,\n      payload: starCount\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from payload of GET_AUTH_STAR_COUNT.ERROR action and set isPendingStarCount: false","suites":["Auth Reducer"],"updatePoint":{"line":140,"column":108},"line":140,"code":"  it('should set an error from payload of GET_AUTH_STAR_COUNT.ERROR action and set isPendingStarCount: false', () => {\n    const expectedState = { ...initialState,\n      isPendingStarCount: false,\n      error: authError\n    };\n    const action = {\n      type: GET_AUTH_STAR_COUNT.ERROR,\n      payload: authError\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingOrgs: true when GET_AUTH_ORGS.PENDING action is dispatched","suites":["Auth Reducer"],"updatePoint":{"line":155,"column":84},"line":155,"code":"  it('should set isPendingOrgs: true when GET_AUTH_ORGS.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingOrgs: true\n    };\n    const action = {\n      type: GET_AUTH_ORGS.PENDING\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set orgs from payload of GET_AUTH_ORGS.SUCCESS action and set isPendingOrgs: false","suites":["Auth Reducer"],"updatePoint":{"line":164,"column":95},"line":164,"code":"  it('should set orgs from payload of GET_AUTH_ORGS.SUCCESS action and set isPendingOrgs: false', () => {\n    const orgs = ['git-point', 'test org'];\n    const expectedState = { ...initialState,\n      isPendingOrgs: false,\n      orgs\n    };\n    const action = {\n      type: GET_AUTH_ORGS.SUCCESS,\n      payload: orgs\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from payload of GET_AUTH_ORGS.ERROR action and set isPendingOrgs: false","suites":["Auth Reducer"],"updatePoint":{"line":176,"column":97},"line":176,"code":"  it('should set an error from payload of GET_AUTH_ORGS.ERROR action and set isPendingOrgs: false', () => {\n    const expectedState = { ...initialState,\n      isPendingOrgs: false,\n      error: authError\n    };\n    const action = {\n      type: GET_AUTH_ORGS.ERROR,\n      payload: authError\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set a locale from payload of CHANGE_LOCALE.SUCCESS action","suites":["Auth Reducer"],"updatePoint":{"line":191,"column":70},"line":191,"code":"  it('should set a locale from payload of CHANGE_LOCALE.SUCCESS action', () => {\n    const expectedState = { ...initialState,\n      locale: 'en'\n    };\n    const action = {\n      type: CHANGE_LOCALE.SUCCESS,\n      payload: 'en'\n    };\n    expect(authReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/auth.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should have initial state","suites":["Issuer Reducer"],"updatePoint":{"line":6,"column":31},"line":6,"code":"  it('should have initial state', () => {\n    expect(issueReducer()).toEqual(initialState);\n  });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PEDNING should set pending state","suites":["Issuer Reducer","POST_ISSUE_COMMENT"],"updatePoint":{"line":10,"column":41},"line":10,"code":"    it('.PEDNING should set pending state', () => {\n      const action = {\n        type: POST_ISSUE_COMMENT.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPostingComment: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","POST_ISSUE_COMMENT"],"updatePoint":{"line":19,"column":37},"line":19,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: POST_ISSUE_COMMENT.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isPostingComment: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set comments","suites":["Issuer Reducer","POST_ISSUE_COMMENT"],"updatePoint":{"line":30,"column":36},"line":30,"code":"    it('.SUCCESS should set comments', () => {\n      const action = {\n        type: POST_ISSUE_COMMENT.SUCCESS,\n        payload: {\n          id: 1\n        }\n      };\n      const expectedState = { ...initialState,\n        isPostingComment: false,\n        comments: [action.payload]\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should append payload to comments","suites":["Issuer Reducer","POST_ISSUE_COMMENT"],"updatePoint":{"line":43,"column":50},"line":43,"code":"    it('.SUCCESS should append payload to comments', () => {\n      const comments = [0];\n      const action = {\n        type: POST_ISSUE_COMMENT.SUCCESS,\n        payload: {}\n      };\n      const expectedState = { ...initialState,\n        isPostingComment: false,\n        comments: [...comments, action.payload]\n      };\n      expect(issueReducer({ ...initialState,\n        comments\n      }, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","DELETE_ISSUE_COMMENT"],"updatePoint":{"line":59,"column":41},"line":59,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: DELETE_ISSUE_COMMENT.PENDING\n      };\n      const expectedState = { ...initialState,\n        isDeletingComment: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","DELETE_ISSUE_COMMENT"],"updatePoint":{"line":68,"column":37},"line":68,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: DELETE_ISSUE_COMMENT.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isDeletingComment: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set pending state","suites":["Issuer Reducer","EDIT_ISSUE_COMMENT"],"updatePoint":{"line":138,"column":32},"line":138,"code":"    it('should set pending state', () => {\n      const action = {\n        type: EDIT_ISSUE_COMMENT.PENDING\n      };\n      const expectedState = { ...initialState,\n        isEditingComment: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","EDIT_ISSUE_COMMENT"],"updatePoint":{"line":147,"column":37},"line":147,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: EDIT_ISSUE_COMMENT.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isEditingComment: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","EDIT_ISSUE"],"updatePoint":{"line":235,"column":41},"line":235,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: EDIT_ISSUE.PENDING\n      };\n      const expectedState = { ...initialState,\n        isEditingIssue: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","EDIT_ISSUE"],"updatePoint":{"line":244,"column":37},"line":244,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: EDIT_ISSUE.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isEditingIssue: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set issue","suites":["Issuer Reducer","EDIT_ISSUE"],"updatePoint":{"line":255,"column":33},"line":255,"code":"    it('.SUCCESS should set issue', () => {\n      const action = {\n        type: EDIT_ISSUE.SUCCESS,\n        payload: open\n      };\n      const expectedState = { ...initialState,\n        issue: action.payload\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","EDIT_ISSUE_BODY"],"updatePoint":{"line":267,"column":41},"line":267,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: EDIT_ISSUE_BODY.PENDING\n      };\n      const expectedState = { ...initialState,\n        isEditingComment: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","EDIT_ISSUE_BODY"],"updatePoint":{"line":276,"column":37},"line":276,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: EDIT_ISSUE_BODY.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isEditingComment: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","CHANGE_LOCK_STATUS"],"updatePoint":{"line":321,"column":41},"line":321,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: CHANGE_LOCK_STATUS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isChangingLockStatus: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","CHANGE_LOCK_STATUS"],"updatePoint":{"line":330,"column":37},"line":330,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: CHANGE_LOCK_STATUS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isChangingLockStatus: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","GET_ISSUE_DIFF"],"updatePoint":{"line":378,"column":41},"line":378,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_ISSUE_DIFF.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingDiff: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","GET_ISSUE_DIFF"],"updatePoint":{"line":387,"column":37},"line":387,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_ISSUE_DIFF.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isPendingDiff: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set diff","suites":["Issuer Reducer","GET_ISSUE_DIFF"],"updatePoint":{"line":398,"column":32},"line":398,"code":"    it('.SUCCESS should set diff', () => {\n      const action = {\n        type: GET_ISSUE_DIFF.SUCCESS,\n        payload: {\n          id: 1\n        }\n      };\n      const expectedState = { ...initialState,\n        isPendingDiff: false,\n        diff: action.payload\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","GET_ISSUE_MERGE_STATUS"],"updatePoint":{"line":413,"column":41},"line":413,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_ISSUE_MERGE_STATUS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingCheckMerge: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","GET_ISSUE_MERGE_STATUS"],"updatePoint":{"line":422,"column":37},"line":422,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_ISSUE_MERGE_STATUS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isPendingCheckMerge: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","MERGE_PULL_REQUEST"],"updatePoint":{"line":454,"column":41},"line":454,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: MERGE_PULL_REQUEST.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingMerging: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","MERGE_PULL_REQUEST"],"updatePoint":{"line":463,"column":37},"line":463,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: MERGE_PULL_REQUEST.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isPendingMerging: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","GET_PULL_REQUEST_FROM_URL"],"updatePoint":{"line":495,"column":41},"line":495,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_PULL_REQUEST_FROM_URL.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingPR: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Issuer Reducer","GET_PULL_REQUEST_FROM_URL"],"updatePoint":{"line":504,"column":37},"line":504,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_PULL_REQUEST_FROM_URL.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isPendingPR: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set pr","suites":["Issuer Reducer","GET_PULL_REQUEST_FROM_URL"],"updatePoint":{"line":515,"column":30},"line":515,"code":"    it('.SUCCESS should set pr', () => {\n      const action = {\n        type: GET_PULL_REQUEST_FROM_URL.SUCCESS,\n        payload: {\n          pr: 1\n        }\n      };\n      const expectedState = { ...initialState,\n        isPendingPR: false,\n        pr: action.payload\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Issuer Reducer","SUBMIT_NEW_ISSUE"],"updatePoint":{"line":530,"column":41},"line":530,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: SUBMIT_NEW_ISSUE.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingSubmitting: true\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error","suites":["Issuer Reducer","SUBMIT_NEW_ISSUE"],"updatePoint":{"line":539,"column":31},"line":539,"code":"    it('.ERROR should set error', () => {\n      const action = {\n        type: SUBMIT_NEW_ISSUE.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        isPendingSubmitting: false,\n        error: 'error'\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set issue","suites":["Issuer Reducer","SUBMIT_NEW_ISSUE"],"updatePoint":{"line":550,"column":33},"line":550,"code":"    it('.SUCCESS should set issue', () => {\n      const action = {\n        type: SUBMIT_NEW_ISSUE.SUCCESS,\n        payload: open\n      };\n      const expectedState = { ...initialState,\n        isPendingSubmitting: false,\n        issue: action.payload\n      };\n      expect(issueReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/issue.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should return the initial state","suites":["Notifications Reducer"],"updatePoint":{"line":7,"column":37},"line":7,"code":"  it('should return the initial state', () => {\n    expect(notificationsReducer(undefined, {})).toEqual(initialState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set notifications count from GET_NOTIFICATIONS_COUNT.SUCCESS action","suites":["Notifications Reducer"],"updatePoint":{"line":10,"column":80},"line":10,"code":"  it('should set notifications count from GET_NOTIFICATIONS_COUNT.SUCCESS action', () => {\n    const expectedState = { ...initialState,\n      notificationsCount: 1\n    };\n    const getNotificationsCountSuccessAction = {\n      type: GET_NOTIFICATIONS_COUNT.SUCCESS,\n      payload: 1\n    };\n    expect(notificationsReducer(initialState, getNotificationsCountSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from GET_NOTIFICATIONS_COUNT.ERROR action","suites":["Notifications Reducer"],"updatePoint":{"line":20,"column":67},"line":20,"code":"  it('should set an error from GET_NOTIFICATIONS_COUNT.ERROR action', () => {\n    const expectedState = { ...initialState,\n      error: authError\n    };\n    const getNotificationsCountErrorAction = {\n      type: GET_NOTIFICATIONS_COUNT.ERROR,\n      payload: authError\n    };\n    expect(notificationsReducer(initialState, getNotificationsCountErrorAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingUnread to true when GET_UNREAD_NOTIFICATIONS.PENDING action is dispatched","suites":["Notifications Reducer"],"updatePoint":{"line":34,"column":99},"line":34,"code":"  it('should set isPendingUnread to true when GET_UNREAD_NOTIFICATIONS.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingUnread: true\n    };\n    const getUnreadNotificationsAction = {\n      type: GET_UNREAD_NOTIFICATIONS.PENDING\n    };\n    expect(notificationsReducer(initialState, getUnreadNotificationsAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set unread notifications from GET_UNREAD_NOTIFICATIONS.SUCCESS action","suites":["Notifications Reducer"],"updatePoint":{"line":43,"column":82},"line":43,"code":"  it('should set unread notifications from GET_UNREAD_NOTIFICATIONS.SUCCESS action', () => {\n    const expectedState = { ...initialState,\n      unread: [notification],\n      isPendingUnread: false\n    };\n    const getUnreadNotificationsSuccessAction = {\n      type: GET_UNREAD_NOTIFICATIONS.SUCCESS,\n      payload: [notification]\n    };\n    expect(notificationsReducer(initialState, getUnreadNotificationsSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from GET_UNREAD_NOTIFICATIONS.ERROR action","suites":["Notifications Reducer"],"updatePoint":{"line":54,"column":68},"line":54,"code":"  it('should set an error from GET_UNREAD_NOTIFICATIONS.ERROR action', () => {\n    const expectedState = { ...initialState,\n      error: authError,\n      isPendingUnread: false\n    };\n    const getUnreadNotificationsErrorAction = {\n      type: GET_UNREAD_NOTIFICATIONS.ERROR,\n      payload: authError\n    };\n    expect(notificationsReducer(initialState, getUnreadNotificationsErrorAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingParticipating to true when GET_PARTICIPATING_NOTIFICATIONS.PENDING action is dispatched","suites":["Notifications Reducer"],"updatePoint":{"line":69,"column":113},"line":69,"code":"  it('should set isPendingParticipating to true when GET_PARTICIPATING_NOTIFICATIONS.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingParticipating: true\n    };\n    const getParticipatingNotificationsAction = {\n      type: GET_PARTICIPATING_NOTIFICATIONS.PENDING\n    };\n    expect(notificationsReducer(initialState, getParticipatingNotificationsAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set unread notifications from GET_PARTICIPATING_NOTIFICATIONS.SUCCESS action","suites":["Notifications Reducer"],"updatePoint":{"line":78,"column":89},"line":78,"code":"  it('should set unread notifications from GET_PARTICIPATING_NOTIFICATIONS.SUCCESS action', () => {\n    const expectedState = { ...initialState,\n      participating: [notification],\n      isPendingParticipating: false\n    };\n    const getParticipatingNotificationsSuccessAction = {\n      type: GET_PARTICIPATING_NOTIFICATIONS.SUCCESS,\n      payload: [notification]\n    };\n    expect(notificationsReducer(initialState, getParticipatingNotificationsSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from GET_PARTICIPATING_NOTIFICATIONS.ERROR action","suites":["Notifications Reducer"],"updatePoint":{"line":89,"column":75},"line":89,"code":"  it('should set an error from GET_PARTICIPATING_NOTIFICATIONS.ERROR action', () => {\n    const expectedState = { ...initialState,\n      error: authError,\n      isPendingParticipating: false\n    };\n    const getParticipatingNotificationsErrorAction = {\n      type: GET_PARTICIPATING_NOTIFICATIONS.ERROR,\n      payload: authError\n    };\n    expect(notificationsReducer(initialState, getParticipatingNotificationsErrorAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingAll to true when GET_ALL_NOTIFICATIONS.PENDING action is dispatched","suites":["Notifications Reducer"],"updatePoint":{"line":104,"column":93},"line":104,"code":"  it('should set isPendingAll to true when GET_ALL_NOTIFICATIONS.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingAll: true\n    };\n    const getPendingNotificationsAction = {\n      type: GET_ALL_NOTIFICATIONS.PENDING\n    };\n    expect(notificationsReducer(initialState, getPendingNotificationsAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set pending notifications from GET_ALL_NOTIFICATIONS.SUCCESS action","suites":["Notifications Reducer"],"updatePoint":{"line":113,"column":80},"line":113,"code":"  it('should set pending notifications from GET_ALL_NOTIFICATIONS.SUCCESS action', () => {\n    const expectedState = { ...initialState,\n      all: [notification, notification],\n      isPendingAll: false\n    };\n    const getPendingNotificationsSuccessAction = {\n      type: GET_ALL_NOTIFICATIONS.SUCCESS,\n      payload: [notification, notification]\n    };\n    expect(notificationsReducer(initialState, getPendingNotificationsSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from GET_ALL_NOTIFICATIONS.ERROR action","suites":["Notifications Reducer"],"updatePoint":{"line":124,"column":65},"line":124,"code":"  it('should set an error from GET_ALL_NOTIFICATIONS.ERROR action', () => {\n    const expectedState = { ...initialState,\n      error: authError,\n      isPendingAll: false\n    };\n    const getPendingNotificationsErrorAction = {\n      type: GET_ALL_NOTIFICATIONS.ERROR,\n      payload: authError\n    };\n    expect(notificationsReducer(initialState, getPendingNotificationsErrorAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingMarkNotificationAsRead to true when MARK_NOTIFICATION_AS_READ.PENDING action is dispatched","suites":["Notifications Reducer"],"updatePoint":{"line":139,"column":116},"line":139,"code":"  it('should set isPendingMarkNotificationAsRead to true when MARK_NOTIFICATION_AS_READ.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingMarkNotificationAsRead: true\n    };\n    const markNotificationsReadAction = {\n      type: MARK_NOTIFICATION_AS_READ.PENDING\n    };\n    expect(notificationsReducer(initialState, markNotificationsReadAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should filter out the unread notification from returned notifications and update the notification count given a notification id","suites":["Notifications Reducer"],"updatePoint":{"line":148,"column":133},"line":148,"code":"  it('should filter out the unread notification from returned notifications and update the notification count given a notification id', () => {\n    const state = { ...initialState,\n      unread: [notification],\n      notificationsCount: 1,\n      isPendingMarkNotificationAsRead: true\n    };\n    const expectedState = { ...initialState,\n      unread: [],\n      isPendingMarkNotificationAsRead: false,\n      notificationsCount: 0\n    };\n    const markNotificationsReadSuccessAction = {\n      type: MARK_NOTIFICATION_AS_READ.SUCCESS,\n      notificationID: '1'\n    };\n    expect(notificationsReducer(state, markNotificationsReadSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should filter out the participating notification from returned notifications and update the notification count given a notification id","suites":["Notifications Reducer"],"updatePoint":{"line":165,"column":140},"line":165,"code":"  it('should filter out the participating notification from returned notifications and update the notification count given a notification id', () => {\n    const state = { ...initialState,\n      participating: [notification],\n      notificationsCount: 1,\n      isPendingMarkNotificationAsRead: true\n    };\n    const expectedState = { ...initialState,\n      participating: [],\n      isPendingMarkNotificationAsRead: false,\n      notificationsCount: 0\n    };\n    const markNotificationsReadSuccessAction = {\n      type: MARK_NOTIFICATION_AS_READ.SUCCESS,\n      notificationID: '1'\n    };\n    expect(notificationsReducer(state, markNotificationsReadSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set the value of the unread property to false for a single notification in 'all' update the notification count given a notification id","suites":["Notifications Reducer"],"updatePoint":{"line":182,"column":147},"line":182,"code":"  it(\"should set the value of the unread property to false for a single notification in 'all' update the notification count given a notification id\", () => {\n    const state = { ...initialState,\n      all: [notification],\n      isPendingMarkNotificationAsRead: true,\n      notificationsCount: 1\n    };\n    const readNotification = { ...notification,\n      unread: false\n    };\n    const expectedState = { ...initialState,\n      all: [readNotification],\n      isPendingMarkNotificationAsRead: false,\n      notificationsCount: 0\n    };\n    const markNotificationsReadSuccessAction = {\n      type: MARK_NOTIFICATION_AS_READ.SUCCESS,\n      notificationID: '1'\n    };\n    expect(notificationsReducer(state, markNotificationsReadSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from MARK_NOTIFICATION_AS_READ.ERROR action","suites":["Notifications Reducer"],"updatePoint":{"line":202,"column":69},"line":202,"code":"  it('should set an error from MARK_NOTIFICATION_AS_READ.ERROR action', () => {\n    const expectedState = { ...initialState,\n      error: authError,\n      isPendingMarkNotificationAsRead: false\n    };\n    const markNotificationsReadErrorAction = {\n      type: MARK_NOTIFICATION_AS_READ.ERROR,\n      payload: authError\n    };\n    expect(notificationsReducer(initialState, markNotificationsReadErrorAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingMarkAllNotificationsAsRead to true when MARK_ALL_NOTIFICATIONS_AS_READ.PENDING action is dispatched","suites":["Notifications Reducer"],"updatePoint":{"line":217,"column":125},"line":217,"code":"  it('should set isPendingMarkAllNotificationsAsRead to true when MARK_ALL_NOTIFICATIONS_AS_READ.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingMarkAllNotificationsAsRead: true\n    };\n    const markAllNotificationsReadAction = {\n      type: MARK_ALL_NOTIFICATIONS_AS_READ.PENDING\n    };\n    expect(notificationsReducer(initialState, markAllNotificationsReadAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingMarkAllNotificationsAsRead to false when MARK_ALL_NOTIFICATIONS_AS_READ.SUCCESS action is dispatched","suites":["Notifications Reducer"],"updatePoint":{"line":226,"column":126},"line":226,"code":"  it('should set isPendingMarkAllNotificationsAsRead to false when MARK_ALL_NOTIFICATIONS_AS_READ.SUCCESS action is dispatched', () => {\n    const state = { ...initialState,\n      isPendingMarkAllNotificationsAsRead: true\n    };\n    const expectedState = { ...initialState,\n      isPendingMarkAllNotificationsAsRead: false\n    };\n    const markAllNotificationsReadSuccessAction = {\n      type: MARK_ALL_NOTIFICATIONS_AS_READ.SUCCESS\n    };\n    expect(notificationsReducer(state, markAllNotificationsReadSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from MARK_ALL_NOTIFICATIONS_AS_READ.ERROR action","suites":["Notifications Reducer"],"updatePoint":{"line":238,"column":74},"line":238,"code":"  it('should set an error from MARK_ALL_NOTIFICATIONS_AS_READ.ERROR action', () => {\n    const expectedState = { ...initialState,\n      error: authError,\n      isPendingMarkNotificationAsRead: false\n    };\n    const markAllNotificationsReadErrorAction = {\n      type: MARK_ALL_NOTIFICATIONS_AS_READ.ERROR,\n      payload: authError\n    };\n    expect(notificationsReducer(initialState, markAllNotificationsReadErrorAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set isPendingMarkNotificationAsRead to true when MARK_REPO_AS_READ.PENDING action is dispatched","suites":["Notifications Reducer"],"updatePoint":{"line":253,"column":108},"line":253,"code":"  it('should set isPendingMarkNotificationAsRead to true when MARK_REPO_AS_READ.PENDING action is dispatched', () => {\n    const expectedState = { ...initialState,\n      isPendingRepoMarkAsRead: true\n    };\n    const markRepoAsReadAction = {\n      type: MARK_REPO_AS_READ.PENDING\n    };\n    expect(notificationsReducer(initialState, markRepoAsReadAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should filter out the repo notification from returned unread notifications and update the notification count given a repo name","suites":["Notifications Reducer"],"updatePoint":{"line":262,"column":132},"line":262,"code":"  it('should filter out the repo notification from returned unread notifications and update the notification count given a repo name', () => {\n    const state = { ...initialState,\n      unread: [notification],\n      notificationsCount: 1,\n      isPendingRepoMarkAsRead: true\n    };\n    const expectedState = { ...initialState,\n      unread: [],\n      isPendingRepoMarkAsRead: false,\n      notificationsCount: 0\n    };\n    const markRepoNotificationsReadSuccessAction = {\n      type: MARK_REPO_AS_READ.SUCCESS,\n      repoFullName: notification.repository.full_name,\n      repoNotificationsCount: 1\n    };\n    expect(notificationsReducer(state, markRepoNotificationsReadSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should filter out the repo notification from returned participating notifications and update the notification count given a repo name","suites":["Notifications Reducer"],"updatePoint":{"line":280,"column":139},"line":280,"code":"  it('should filter out the repo notification from returned participating notifications and update the notification count given a repo name', () => {\n    const state = { ...initialState,\n      participating: [notification],\n      notificationsCount: 1,\n      isPendingRepoMarkAsRead: true\n    };\n    const expectedState = { ...initialState,\n      participating: [],\n      isPendingRepoMarkAsRead: false,\n      notificationsCount: 0\n    };\n    const markRepoNotificationsReadSuccessAction = {\n      type: MARK_REPO_AS_READ.SUCCESS,\n      repoFullName: notification.repository.full_name,\n      repoNotificationsCount: 1\n    };\n    expect(notificationsReducer(state, markRepoNotificationsReadSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set the value of the unread property to false for a single notification in 'all' and update the notification count given a repo name","suites":["Notifications Reducer"],"updatePoint":{"line":298,"column":145},"line":298,"code":"  it(\"should set the value of the unread property to false for a single notification in 'all' and update the notification count given a repo name\", () => {\n    const state = { ...initialState,\n      all: [notification],\n      isPendingRepoMarkAsRead: true,\n      notificationsCount: 1\n    };\n    const readNotification = { ...notification,\n      unread: false\n    };\n    const expectedState = { ...initialState,\n      all: [readNotification],\n      isPendingRepoMarkAsRead: false,\n      notificationsCount: 0\n    };\n    const markRepoNotificationsReadSuccessAction = {\n      type: MARK_REPO_AS_READ.SUCCESS,\n      repoFullName: notification.repository.full_name,\n      repoNotificationsCount: 1\n    };\n    expect(notificationsReducer(state, markRepoNotificationsReadSuccessAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set an error from the MARK_REPO_AS_READ.ERROR action","suites":["Notifications Reducer"],"updatePoint":{"line":319,"column":65},"line":319,"code":"  it('should set an error from the MARK_REPO_AS_READ.ERROR action', () => {\n    const expectedState = { ...initialState,\n      error: authError,\n      isPendingRepoMarkAsRead: false\n    };\n    const markRepoNotificationsReadErrorAction = {\n      type: MARK_REPO_AS_READ.ERROR,\n      payload: authError\n    };\n    expect(notificationsReducer(initialState, markRepoNotificationsReadErrorAction)).toEqual(expectedState);\n  });","file":"tests/reducers/notifications.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set initial state","suites":["Organization Reducer"],"updatePoint":{"line":4,"column":30},"line":4,"code":"  it('should set initial state', () => {\n    expect(organizationReducer(undefined, {})).toEqual(initialState);\n  });","file":"tests/reducers/organization.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set loading state to  on action \"GET_ORG_REPOS_LOADING\"","suites":["Organization Reducer"],"updatePoint":{"line":8,"column":96},"line":8,"code":"    it(`should set loading state to ${JSON.stringify(payload)} on action \"GET_ORG_REPOS_LOADING\"`, () => {\n      const action = {\n        type: GET_ORG_REPOS_LOADING,\n        payload\n      };\n      const expectedState = { ...initialState,\n        isPendingRepos: action.payload\n      };\n      expect(organizationReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/organization.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set repos on success on action \"GET_ORG_REPOS\"","suites":["Organization Reducer"],"updatePoint":{"line":24,"column":61},"line":24,"code":"    it('should set repos on success on action \"GET_ORG_REPOS\"', () => {\n      const action = {\n        type: GET_ORG_REPOS,\n        payload\n      };\n      const expectedState = { ...initialState,\n        isPendingRepos: false,\n        repositories: payload\n      };\n      expect(organizationReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/organization.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set error state on action \"GET_ORG_REPOS_ERROR\"","suites":["Organization Reducer"],"updatePoint":{"line":36,"column":60},"line":36,"code":"  it('should set error state on action \"GET_ORG_REPOS_ERROR\"', () => {\n    const action = {\n      type: GET_ORG_REPOS_ERROR,\n      payload: 'error'\n    };\n    const expectedState = { ...initialState,\n      organizationRepositoriesError: action.payload\n    };\n    expect(organizationReducer(initialState, action)).toEqual(expectedState);\n  });","file":"tests/reducers/organization.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set initial state","suites":["Repository Reducer"],"updatePoint":{"line":4,"column":30},"line":4,"code":"  it('should set initial state', () => {\n    expect(repositoryReducer(undefined)).toEqual(initialState);\n  });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Repository Reducer","GET_REPOSITORY_CONTENTS"],"updatePoint":{"line":8,"column":41},"line":8,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_REPOSITORY_CONTENTS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingContents: true\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Repository Reducer","GET_REPOSITORY_CONTENTS"],"updatePoint":{"line":17,"column":37},"line":17,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_REPOSITORY_CONTENTS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set repository top content","suites":["Repository Reducer","GET_REPOSITORY_CONTENTS"],"updatePoint":{"line":27,"column":50},"line":27,"code":"    it('.SUCCESS should set repository top content', () => {\n      const action = {\n        type: GET_REPOSITORY_CONTENTS.SUCCESS,\n        level: 'top',\n        results: [{\n          id: 1\n        }]\n      };\n      const expectedState = { ...initialState,\n        contents: {\n          top: action.results\n        }\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Repository Reducer","GET_REPOSITORY_FILE"],"updatePoint":{"line":66,"column":41},"line":66,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_REPOSITORY_FILE.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingFile: true\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Repository Reducer","GET_REPOSITORY_FILE"],"updatePoint":{"line":75,"column":37},"line":75,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_REPOSITORY_FILE.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set file content","suites":["Repository Reducer","GET_REPOSITORY_FILE"],"updatePoint":{"line":85,"column":40},"line":85,"code":"    it('.SUCCESS should set file content', () => {\n      const action = {\n        type: GET_REPOSITORY_FILE.SUCCESS,\n        payload: 'content'\n      };\n      const expectedState = { ...initialState,\n        fileContent: action.payload\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Repository Reducer","GET_REPOSITORY_README"],"updatePoint":{"line":97,"column":41},"line":97,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_REPOSITORY_README.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingReadMe: true\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Repository Reducer","GET_REPOSITORY_README"],"updatePoint":{"line":106,"column":37},"line":106,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_REPOSITORY_README.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set readme","suites":["Repository Reducer","GET_REPOSITORY_README"],"updatePoint":{"line":116,"column":34},"line":116,"code":"    it('.SUCCESS should set readme', () => {\n      const action = {\n        type: GET_REPOSITORY_README.SUCCESS,\n        payload: 'content'\n      };\n      const expectedState = { ...initialState,\n        readMe: action.payload\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["Repository Reducer","GET_REPOSITORY_LABELS"],"updatePoint":{"line":128,"column":41},"line":128,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_REPOSITORY_LABELS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingLabels: true\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["Repository Reducer","GET_REPOSITORY_LABELS"],"updatePoint":{"line":137,"column":37},"line":137,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_REPOSITORY_LABELS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set labels","suites":["Repository Reducer","GET_REPOSITORY_LABELS"],"updatePoint":{"line":147,"column":34},"line":147,"code":"    it('.SUCCESS should set labels', () => {\n      const action = {\n        type: GET_REPOSITORY_LABELS.SUCCESS,\n        payload: [{\n          id: 1\n        }]\n      };\n      const expectedState = { ...initialState,\n        labels: action.payload\n      };\n      expect(repositoryReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/repository.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should set initial state","suites":["User Reducer"],"updatePoint":{"line":6,"column":30},"line":6,"code":"  it('should set initial state', () => {\n    expect(userReducer()).toEqual(initialState);\n  });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_USER"],"updatePoint":{"line":10,"column":41},"line":10,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_USER.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingUser: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_USER"],"updatePoint":{"line":19,"column":37},"line":19,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_USER.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set user","suites":["User Reducer","GET_USER"],"updatePoint":{"line":29,"column":32},"line":29,"code":"    it('.SUCCESS should set user', () => {\n      const action = {\n        type: GET_USER.SUCCESS,\n        payload: user\n      };\n      const expectedState = { ...initialState,\n        user: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_ORGS"],"updatePoint":{"line":41,"column":41},"line":41,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_ORGS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingOrgs: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_ORGS"],"updatePoint":{"line":50,"column":37},"line":50,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_ORGS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set organizations","suites":["User Reducer","GET_ORGS"],"updatePoint":{"line":60,"column":41},"line":60,"code":"    it('.SUCCESS should set organizations', () => {\n      const action = {\n        type: GET_ORGS.SUCCESS,\n        payload: [organization]\n      };\n      const expectedState = { ...initialState,\n        orgs: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_STAR_COUNT"],"updatePoint":{"line":72,"column":41},"line":72,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_STAR_COUNT.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingStarCount: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_STAR_COUNT"],"updatePoint":{"line":81,"column":37},"line":81,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_STAR_COUNT.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set star count","suites":["User Reducer","GET_STAR_COUNT"],"updatePoint":{"line":91,"column":38},"line":91,"code":"    it('.SUCCESS should set star count', () => {\n      const action = {\n        type: GET_STAR_COUNT.SUCCESS,\n        payload: 9001\n      };\n      const expectedState = { ...initialState,\n        starCount: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_IS_FOLLOWING"],"updatePoint":{"line":103,"column":41},"line":103,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_IS_FOLLOWING.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingCheckFollowing: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_IS_FOLLOWING"],"updatePoint":{"line":112,"column":37},"line":112,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_IS_FOLLOWING.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set is following","suites":["User Reducer","GET_IS_FOLLOWING"],"updatePoint":{"line":122,"column":40},"line":122,"code":"    it('.SUCCESS should set is following', () => {\n      const action = {\n        type: GET_IS_FOLLOWING.SUCCESS,\n        payload: true\n      };\n      const expectedState = { ...initialState,\n        isFollowing: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_IS_FOLLOWER"],"updatePoint":{"line":134,"column":41},"line":134,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_IS_FOLLOWER.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingCheckFollower: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_IS_FOLLOWER"],"updatePoint":{"line":143,"column":37},"line":143,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_IS_FOLLOWER.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set is follower","suites":["User Reducer","GET_IS_FOLLOWER"],"updatePoint":{"line":153,"column":39},"line":153,"code":"    it('.SUCCESS should set is follower', () => {\n      const action = {\n        type: GET_IS_FOLLOWER.SUCCESS,\n        payload: true\n      };\n      const expectedState = { ...initialState,\n        isFollower: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","CHANGE_FOLLOW_STATUS"],"updatePoint":{"line":165,"column":41},"line":165,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: CHANGE_FOLLOW_STATUS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingChangeFollowing: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","CHANGE_FOLLOW_STATUS"],"updatePoint":{"line":174,"column":37},"line":174,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: CHANGE_FOLLOW_STATUS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should increment followers with ","suites":["User Reducer","CHANGE_FOLLOW_STATUS"],"updatePoint":{"line":185,"column":65},"line":185,"code":"      it(`.SUCCESS should increment followers with ${incrementBy}`, () => {\n        const isFollowing = incrementBy > 0;\n        let initialUser = { ...user,\n          followers: 1\n        };\n        const action = {\n          type: CHANGE_FOLLOW_STATUS.SUCCESS,\n          changeTo: isFollowing,\n          authUser: initialUser.login\n        };\n        const expectedState = { ...initialState,\n          user: { ...initialUser,\n            followers: initialUser.followers + incrementBy\n          },\n          followers: [],\n          isFollowing\n        };\n        expect(userReducer({ ...initialState,\n          user: initialUser,\n          followers: []\n        }, action)).toEqual(expectedState);\n      });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set followers","suites":["User Reducer","CHANGE_FOLLOW_STATUS"],"updatePoint":{"line":208,"column":37},"line":208,"code":"    it('.SUCCESS should set followers', () => {\n      const initialUser = { ...user,\n        followers: 1\n      };\n      const follower = { ...user,\n        login: 'test'\n      };\n      const action = {\n        type: CHANGE_FOLLOW_STATUS.SUCCESS,\n        changeTo: true,\n        authUser: initialUser.login\n      };\n      const expectedState = { ...initialState,\n        user: { ...initialUser,\n          followers: 2\n        },\n        followers: [follower],\n        isFollowing: true\n      };\n      expect(userReducer({ ...initialState,\n        user: initialUser,\n        followers: [initialUser, follower]\n      }, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_REPOSITORIES"],"updatePoint":{"line":234,"column":41},"line":234,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_REPOSITORIES.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingRepositories: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_REPOSITORIES"],"updatePoint":{"line":243,"column":37},"line":243,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_REPOSITORIES.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set repositories","suites":["User Reducer","GET_REPOSITORIES"],"updatePoint":{"line":253,"column":40},"line":253,"code":"    it('.SUCCESS should set repositories', () => {\n      const action = {\n        type: GET_REPOSITORIES.SUCCESS,\n        payload: [{\n          id: 1\n        }]\n      };\n      const expectedState = { ...initialState,\n        repositories: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_FOLLOWERS"],"updatePoint":{"line":267,"column":41},"line":267,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_FOLLOWERS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingFollowers: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_FOLLOWERS"],"updatePoint":{"line":276,"column":37},"line":276,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_FOLLOWERS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set follwers","suites":["User Reducer","GET_FOLLOWERS"],"updatePoint":{"line":286,"column":36},"line":286,"code":"    it('.SUCCESS should set follwers', () => {\n      const action = {\n        type: GET_FOLLOWERS.SUCCESS,\n        payload: [{\n          id: 1\n        }]\n      };\n      const expectedState = { ...initialState,\n        followers: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","GET_FOLLOWING"],"updatePoint":{"line":300,"column":41},"line":300,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: GET_FOLLOWING.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingFollowing: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","GET_FOLLOWING"],"updatePoint":{"line":309,"column":37},"line":309,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: GET_FOLLOWING.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set following","suites":["User Reducer","GET_FOLLOWING"],"updatePoint":{"line":319,"column":37},"line":319,"code":"    it('.SUCCESS should set following', () => {\n      const action = {\n        type: GET_FOLLOWING.SUCCESS,\n        payload: true\n      };\n      const expectedState = { ...initialState,\n        following: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".PENDING should set pending state","suites":["User Reducer","SEARCH_USER_REPOS"],"updatePoint":{"line":331,"column":41},"line":331,"code":"    it('.PENDING should set pending state', () => {\n      const action = {\n        type: SEARCH_USER_REPOS.PENDING\n      };\n      const expectedState = { ...initialState,\n        isPendingSearchUserRepos: true\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".ERROR should set error state","suites":["User Reducer","SEARCH_USER_REPOS"],"updatePoint":{"line":340,"column":37},"line":340,"code":"    it('.ERROR should set error state', () => {\n      const action = {\n        type: SEARCH_USER_REPOS.ERROR,\n        payload: 'error'\n      };\n      const expectedState = { ...initialState,\n        error: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":".SUCCESS should set searchedUserRepos","suites":["User Reducer","SEARCH_USER_REPOS"],"updatePoint":{"line":350,"column":45},"line":350,"code":"    it('.SUCCESS should set searchedUserRepos', () => {\n      const action = {\n        type: SEARCH_USER_REPOS.SUCCESS,\n        searchedUserRepos: [{\n          id: 1\n        }]\n      };\n      const expectedState = { ...initialState,\n        searchedUserRepos: action.payload\n      };\n      expect(userReducer(initialState, action)).toEqual(expectedState);\n    });","file":"tests/reducers/user.reducer.js","skipped":false,"dir":"__tests__"},{"name":"should generate the right actions","suites":["Action Helpers"],"updatePoint":{"line":3,"column":39},"line":3,"code":"  it('should generate the right actions', () => {\n    const result = createActionSet('FOO');\n    expect(result).toMatchObject({\n      PENDING: 'FOO_PENDING',\n      SUCCESS: 'FOO_SUCCESS',\n      ERROR: 'FOO_ERROR',\n      actionName: 'FOO'\n    });\n  });","file":"tests/utilities/action-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should generate right pagination actions","suites":["Action Helpers"],"updatePoint":{"line":12,"column":46},"line":12,"code":"  it('should generate right pagination actions', () => {\n    const result = createPaginationActionSet('BAR');\n    expect(result).toMatchObject({\n      PENDING: 'BAR_PENDING',\n      SUCCESS: 'BAR_SUCCESS',\n      ERROR: 'BAR_ERROR',\n      RESET: 'BAR_RESET',\n      actionName: 'BAR'\n    });\n  });","file":"tests/utilities/action-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should return a black font color for the light yellow background","suites":["Color Helpers"],"updatePoint":{"line":3,"column":70},"line":3,"code":"  it('should return a black font color for the light yellow background', () => {\n    const lightYellowColor = 'e5f496';\n    expect(getFontColorByBackground(lightYellowColor)).toBe('#000000');\n  });","file":"tests/utilities/color-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should return a black font color for the light blue background","suites":["Color Helpers"],"updatePoint":{"line":7,"column":68},"line":7,"code":"  it('should return a black font color for the light blue background', () => {\n    const lightBlueColor = 'a9b3ff';\n    expect(getFontColorByBackground(lightBlueColor)).toBe('#000000');\n  });","file":"tests/utilities/color-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should return a black font color for the light red background","suites":["Color Helpers"],"updatePoint":{"line":11,"column":67},"line":11,"code":"  it('should return a black font color for the light red background', () => {\n    const lightRedColor = 'f4ad96';\n    expect(getFontColorByBackground(lightRedColor)).toBe('#000000');\n  });","file":"tests/utilities/color-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should return a white font color for the dark green background","suites":["Color Helpers"],"updatePoint":{"line":15,"column":68},"line":15,"code":"  it('should return a white font color for the dark green background', () => {\n    const darkGreenColor = '288702';\n    expect(getFontColorByBackground(darkGreenColor)).toBe('#ffffff');\n  });","file":"tests/utilities/color-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should return a white font color for the dark blue background","suites":["Color Helpers"],"updatePoint":{"line":19,"column":67},"line":19,"code":"  it('should return a white font color for the dark blue background', () => {\n    const darkBlueColor = '0800fd';\n    expect(getFontColorByBackground(darkBlueColor)).toBe('#ffffff');\n  });","file":"tests/utilities/color-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should return a white font color for the dark red background","suites":["Color Helpers"],"updatePoint":{"line":23,"column":66},"line":23,"code":"  it('should return a white font color for the dark red background', () => {\n    const darkRedColor = 'fd0000';\n    expect(getFontColorByBackground(darkRedColor)).toBe('#ffffff');\n  });","file":"tests/utilities/color-helpers.js","skipped":false,"dir":"__tests__"},{"name":"should return a repo id in {username}/{reponame} format","suites":["Migration Helper"],"updatePoint":{"line":3,"column":61},"line":3,"code":"  it('should return a repo id in {username}/{reponame} format', () => {\n    const result = getRepoIdFromUrl('https://api.github.com/repos/octocat/Hello-World');\n    expect(result).toBe('octocat/Hello-World');\n  });","file":"tests/utilities/migration-helper.js","skipped":false,"dir":"__tests__"},{"name":"should convert a user object to old format","suites":["Migration Helper"],"updatePoint":{"line":7,"column":48},"line":7,"code":"  it('should convert a user object to old format', () => {\n    const user = {};\n    const result = toOldUserFormat(user);\n    const resultKeys = Object.keys(result);\n    expect(result.avatar_url).toBe(user.avatarUrl);\n    expect(Object.keys(user).reduce((accum, key) => accum && resultKeys.includes(key), true)).toBe(true);\n  });","file":"tests/utilities/migration-helper.js","skipped":false,"dir":"__tests__"},{"name":"should convert an issue object to old format","suites":["Migration Helper"],"updatePoint":{"line":14,"column":50},"line":14,"code":"  it('should convert an issue object to old format', () => {\n    const issue = {\n      author: {},\n      comments: {\n        totalCount: 7\n      },\n      closedAt: '',\n      createdAt: '',\n      number: 42,\n      state: 'StAte'\n    };\n    const repoId = 'git-point';\n    const result = toOldIssueFormat(issue, repoId);\n    const resultKeys = Object.keys(result);\n    expect(Object.keys(issue).reduce((accum, key) => accum && resultKeys.includes(key), true)).toBe(true);\n    expect(result.comments).toBe(issue.comments.totalCount);\n    expect(result.closed_at).toBe(issue.closedAt);\n    expect(result.created_at).toBe(issue.createdAt);\n    expect(result.state).toBe('state');\n    expect(result.pull_request).toBeNull();\n    expect(result.url).toBe('https://api.github.com/repos/git-point/issues/42');\n    expect(toOldIssueFormat(issue, repoId, false).pull_request).toBeNull();\n    expect(toOldIssueFormat(issue, repoId, true).pull_request).toMatchObject({});\n  });","file":"tests/utilities/migration-helper.js","skipped":false,"dir":"__tests__"},{"name":"should call correcly with text params","suites":["Text Helper","emojifyText"],"updatePoint":{"line":5,"column":45},"line":5,"code":"    it('should call correcly with text params', () => {\n      const emojify = jest.spyOn(emoji, 'emojify');\n      const input = 'I need more :coffee';\n      emojifyText(input);\n      expect(emojify).toBeCalledWith(input);\n      emojify.mockReset();\n      emojify.mockRestore();\n    });","file":"tests/utilities/text-helper.js","skipped":false,"dir":"__tests__"},{"name":"should return 1 when given 1","suites":["Text Helper","abbreviateNumber"],"updatePoint":{"line":15,"column":36},"line":15,"code":"    it('should return 1 when given 1', () => {\n      const input = 1;\n      const expected = 1;\n      const result = abbreviateNumber(input);\n      expect(result).toEqual(expected);\n    });","file":"tests/utilities/text-helper.js","skipped":false,"dir":"__tests__"},{"name":"should return 1k when given 1000","suites":["Text Helper","abbreviateNumber"],"updatePoint":{"line":21,"column":40},"line":21,"code":"    it('should return 1k when given 1000', () => {\n      const input = 1000;\n      const expected = '1k';\n      const result = abbreviateNumber(input);\n      expect(result).toEqual(expected);\n    });","file":"tests/utilities/text-helper.js","skipped":false,"dir":"__tests__"},{"name":"should return 1.1k when given 1100","suites":["Text Helper","abbreviateNumber"],"updatePoint":{"line":27,"column":42},"line":27,"code":"    it('should return 1.1k when given 1100', () => {\n      const input = 1100;\n      const expected = '1.1k';\n      const result = abbreviateNumber(input);\n      expect(result).toEqual(expected);\n    });","file":"tests/utilities/text-helper.js","skipped":false,"dir":"__tests__"},{"name":"should return 96.2k when given 96234","suites":["Text Helper","abbreviateNumber"],"updatePoint":{"line":33,"column":44},"line":33,"code":"    it('should return 96.2k when given 96234', () => {\n      const input = 96234;\n      const expected = '96.2k';\n      const result = abbreviateNumber(input);\n      expect(result).toEqual(expected);\n    });","file":"tests/utilities/text-helper.js","skipped":false,"dir":"__tests__"}]}