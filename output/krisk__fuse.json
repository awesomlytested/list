{"repo":"krisk/Fuse","url":"https://github.com/krisk/Fuse","branch":"master","configs":[{"package":"fuse.js","lang":"ts","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Search: exact-match","suites":["Searching using extended search"],"updatePoint":{"line":35,"column":27},"line":35,"code":"  test('Search: exact-match', () => {\n    let result = fuse.search('=smith')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: include-match","suites":["Searching using extended search"],"updatePoint":{"line":40,"column":29},"line":40,"code":"  test('Search: include-match', () => {\n    let result = fuse.search(\"'hello\")\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: prefix-exact-match","suites":["Searching using extended search"],"updatePoint":{"line":45,"column":34},"line":45,"code":"  test('Search: prefix-exact-match', () => {\n    let result = fuse.search('^hello')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: suffix-exact-match","suites":["Searching using extended search"],"updatePoint":{"line":50,"column":34},"line":50,"code":"  test('Search: suffix-exact-match', () => {\n    let result = fuse.search('fine$')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: inverse-exact-match","suites":["Searching using extended search"],"updatePoint":{"line":55,"column":35},"line":55,"code":"  test('Search: inverse-exact-match', () => {\n    let result = fuse.search('!indeed')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: inverse-prefix-exact-match","suites":["Searching using extended search"],"updatePoint":{"line":60,"column":42},"line":60,"code":"  test('Search: inverse-prefix-exact-match', () => {\n    let result = fuse.search('!^hello')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: inverse-suffix-exact-match","suites":["Searching using extended search"],"updatePoint":{"line":65,"column":42},"line":65,"code":"  test('Search: inverse-suffix-exact-match', () => {\n    let result = fuse.search('!foo$')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: all","suites":["Searching using extended search"],"updatePoint":{"line":70,"column":19},"line":70,"code":"  test('Search: all', () => {\n    let result = fuse.search('!foo$ !^how')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: single literal match","suites":["Searching using extended search"],"updatePoint":{"line":75,"column":36},"line":75,"code":"  test('Search: single literal match', () => {\n    let result = fuse.search('\\'\"indeed fine\"')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: literal match with regular match","suites":["Searching using extended search"],"updatePoint":{"line":80,"column":48},"line":80,"code":"  test('Search: literal match with regular match', () => {\n    let result = fuse.search('\\'\"indeed fine\" foo$ | \\'are')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: literal match with fuzzy match","suites":["Searching using extended search"],"updatePoint":{"line":85,"column":46},"line":85,"code":"  test('Search: literal match with fuzzy match', () => {\n    let result = fuse.search('\\'\"indeed fine\" foo$ | helol')\n    expect(result).toMatchSnapshot()\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Search: literal match with fuzzy match","suites":["ignoreLocation when useExtendedSearch is true"],"updatePoint":{"line":99,"column":46},"line":99,"code":"  test('Search: literal match with fuzzy match', () => {\n    const options = {\n      threshold: 0.2,\n      useExtendedSearch: true,\n      ignoreLocation: true,\n      keys: ['document']\n    }\n    const fuse = new Fuse(list, options)\n\n    let result = fuse.search('Apple')\n    expect(result).toHaveLength(1)\n  })","file":"extended-search.test.js","skipped":false,"dir":"test"},{"name":"Errors are thrown","suites":["Initialization errors"],"updatePoint":{"line":7,"column":25},"line":7,"code":"  test('Errors are thrown', () => {\n    expect(() => {\n      new Fuse(Books, {\n        useExtendedSearch: true,\n        keys: ['title']\n      })\n    }).toThrowError(ErrorMsg.EXTENDED_SEARCH_UNAVAILABLE)\n\n    expect(() => {\n      let fuse = new Fuse(Books, {\n        keys: ['title']\n      })\n      fuse.search({ title: 'hello' })\n    }).toThrowError(ErrorMsg.LOGICAL_SEARCH_UNAVAILABLE)\n  })","file":"feature-flags.test.js","skipped":false,"dir":"test"},{"name":"we get a list of exactly 1 item","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When searching for the term \"Apple\""],"updatePoint":{"line":22,"column":41},"line":22,"code":"    test('we get a list of exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the index 0, representing [\"Apple\"]","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When searching for the term \"Apple\""],"updatePoint":{"line":26,"column":60},"line":26,"code":"    test('whose value is the index 0, representing [\"Apple\"]', () => {\n      expect(result[0].refIndex).toBe(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of containing 2 items","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"ran\""],"updatePoint":{"line":35,"column":45},"line":35,"code":"    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose values represent the indices of [\"Orange\", \"Banana\"]","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"ran\""],"updatePoint":{"line":39,"column":68},"line":39,"code":"    test('whose values represent the indices of [\"Orange\", \"Banana\"]', () => {\n      expect(result[0].refIndex).toBe(1)\n      expect(result[1].refIndex).toBe(2)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of containing 2 items","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"nan\""],"updatePoint":{"line":49,"column":45},"line":49,"code":"    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose values represent the indices of [\"Banana\", \"Orange\"]","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"nan\""],"updatePoint":{"line":53,"column":68},"line":53,"code":"    test('whose values represent the indices of [\"Banana\", \"Orange\"]', () => {\n      expect(result[0].refIndex).toBe(2)\n      expect(result[1].refIndex).toBe(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of containing 1 item: [2]","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"nan\" with a limit of 1 result"],"updatePoint":{"line":63,"column":49},"line":63,"code":"    test('we get a list of containing 1 item: [2]', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose values represent the indices of [\"Banana\", \"Orange\"]","suites":["Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"nan\" with a limit of 1 result"],"updatePoint":{"line":67,"column":68},"line":67,"code":"    test('whose values represent the indices of [\"Banana\", \"Orange\"]', () => {\n      expect(result[0].refIndex).toBe(2)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list containing at least 1 item","suites":["Deep key search, with [\"title\", \"author.firstName\"]","When searching for the term \"Stve\""],"updatePoint":{"line":99,"column":50},"line":99,"code":"    test('we get a list containing at least 1 item', () => {\n      expect(result.length).toBeGreaterThanOrEqual(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"and the first item has the matching key/value pairs","suites":["Deep key search, with [\"title\", \"author.firstName\"]","When searching for the term \"Stve\""],"updatePoint":{"line":103,"column":61},"line":103,"code":"    test('and the first item has the matching key/value pairs', () => {\n      expect(result[0].item).toMatchObject({\n        title: 'The Lock Artist',\n        author: { firstName: 'Steve', lastName: 'Hamilton' }\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of exactly 1 item","suites":["Deep key search, with [\"title\", \"author.firstName\"]","When searching for the term \"106\""],"updatePoint":{"line":115,"column":41},"line":115,"code":"    test('we get a list of exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value matches","suites":["Deep key search, with [\"title\", \"author.firstName\"]","When searching for the term \"106\""],"updatePoint":{"line":119,"column":29},"line":119,"code":"    test('whose value matches', () => {\n      expect(result[0].item).toMatchObject({\n        title: 'A History of England',\n        author: { firstName: 1066, lastName: 'Hastings' }\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list containing at least 1 item","suites":["Custom search function, with [\"title\", \"author.firstName\"]","When searching for the term \"Hmlt\""],"updatePoint":{"line":160,"column":50},"line":160,"code":"    test('we get a list containing at least 1 item', () => {\n      expect(result.length).toBeGreaterThanOrEqual(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"and the first item has the matching key/value pairs","suites":["Custom search function, with [\"title\", \"author.firstName\"]","When searching for the term \"Hmlt\""],"updatePoint":{"line":164,"column":61},"line":164,"code":"    test('and the first item has the matching key/value pairs', () => {\n      expect(result[0].item).toMatchObject({\n        title: 'The Lock Artist',\n        author: { firstName: 'Steve', lastName: 'Hamilton' }\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of exactly 0 items","suites":["Custom search function, with [\"title\", \"author.firstName\"]","When searching for the term \"Stve\""],"updatePoint":{"line":176,"column":42},"line":176,"code":"    test('we get a list of exactly 0 items', () => {\n      expect(result).toHaveLength(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of exactly 1 item","suites":["Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]","When searching for the term \"Apple\""],"updatePoint":{"line":190,"column":41},"line":190,"code":"    test('we get a list of exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the index 0, representing [\"Apple\"]","suites":["Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]","When searching for the term \"Apple\""],"updatePoint":{"line":194,"column":60},"line":194,"code":"    test('whose value is the index 0, representing [\"Apple\"]', () => {\n      expect(result[0].refIndex).toBe(0)\n      expect(result[0].score).toBe(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of containing 2 items","suites":["Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"ran\""],"updatePoint":{"line":204,"column":45},"line":204,"code":"    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose values represent the indices, and have non-zero scores","suites":["Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]","When performing a fuzzy search for the term \"ran\""],"updatePoint":{"line":208,"column":70},"line":208,"code":"    test('whose values represent the indices, and have non-zero scores', () => {\n      expect(result[0].refIndex).toBe(1)\n      expect(result[0].score).not.toBe(0)\n      expect(result[1].refIndex).toBe(2)\n      expect(result[1].score).not.toBe(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list containing exactly 1 item","suites":["Include both ID and score in results list","When searching for the term \"Stve\""],"updatePoint":{"line":241,"column":49},"line":241,"code":"    test('we get a list containing exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the ISBN of the book","suites":["Include both ID and score in results list","When searching for the term \"Stve\""],"updatePoint":{"line":245,"column":45},"line":245,"code":"    test('whose value is the ISBN of the book', () => {\n      expect(result[0].item.ISBN).toBe('0312696957')\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"and has a score that is not zero","suites":["Include both ID and score in results list","When searching for the term \"Stve\""],"updatePoint":{"line":249,"column":42},"line":249,"code":"    test('and has a score that is not zero', () => {\n      expect(result[0].score).not.toBe(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list containing exactly 1 item","suites":["Search when IDs are numbers","When searching for the term \"Stve\""],"updatePoint":{"line":280,"column":49},"line":280,"code":"    test('we get a list containing exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the ISBN of the book","suites":["Search when IDs are numbers","When searching for the term \"Stve\""],"updatePoint":{"line":284,"column":45},"line":284,"code":"    test('whose value is the ISBN of the book', () => {\n      expect(result[0].item.ISBN).toBe(2222)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"and has a score that is not zero","suites":["Search when IDs are numbers","When searching for the term \"Stve\""],"updatePoint":{"line":288,"column":42},"line":288,"code":"    test('and has a score that is not zero', () => {\n      expect(result[0].score).not.toBe(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list containing exactly 1 item","suites":["Recurse into arrays","When searching for the tag \"nonfiction\""],"updatePoint":{"line":327,"column":49},"line":327,"code":"    test('we get a list containing exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the ISBN of the book","suites":["Recurse into arrays","When searching for the tag \"nonfiction\""],"updatePoint":{"line":331,"column":45},"line":331,"code":"    test('whose value is the ISBN of the book', () => {\n      expect(result[0].item.ISBN).toBe('0321784421')\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"with matched tag provided","suites":["Recurse into arrays","When searching for the tag \"nonfiction\""],"updatePoint":{"line":335,"column":35},"line":335,"code":"    test('with matched tag provided', () => {\n      const { matches } = result[0]\n      expect(matches[0]).toMatchObject({\n        indices: [[0, 9]],\n        value: 'nonfiction',\n        key: 'tags',\n        refIndex: 1\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list containing exactly 1 item","suites":["Recurse into objects in arrays with null object in array","When searching for the author tag \"British\""],"updatePoint":{"line":399,"column":49},"line":399,"code":"    test('we get a list containing exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the ISBN of the book","suites":["Recurse into objects in arrays with null object in array","When searching for the author tag \"British\""],"updatePoint":{"line":403,"column":45},"line":403,"code":"    test('whose value is the ISBN of the book', () => {\n      expect(result[0].item.ISBN).toBe('0321784421')\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list containing exactly 1 item","suites":["Recurse into objects in arrays","When searching for the author tag \"British\""],"updatePoint":{"line":459,"column":49},"line":459,"code":"    test('we get a list containing exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the ISBN of the book","suites":["Recurse into objects in arrays","When searching for the author tag \"British\""],"updatePoint":{"line":463,"column":45},"line":463,"code":"    test('whose value is the ISBN of the book', () => {\n      expect(result[0].item.ISBN).toBe('0321784421')\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of exactly 1 item","suites":["Set new list on Fuse","When searching for the term \"Lettuce\""],"updatePoint":{"line":482,"column":41},"line":482,"code":"    test('we get a list of exactly 1 item', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"whose value is the index 0, representing [\"Apple\"]","suites":["Set new list on Fuse","When searching for the term \"Lettuce\""],"updatePoint":{"line":486,"column":60},"line":486,"code":"    test('whose value is the index 0, representing [\"Apple\"]', () => {\n      expect(result[0].refIndex).toBe(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Invalid key entries throw errors","suites":["Weighted search"],"updatePoint":{"line":516,"column":40},"line":516,"code":"  test('Invalid key entries throw errors', () => {\n    expect(() => {\n      setup(customBookList, {\n        keys: [\n          { name: 'title', weight: -10 },\n          { name: 'author', weight: 0.7 }\n        ]\n      })\n    }).toThrowError(ErrorMsg.INVALID_KEY_WEIGHT_VALUE('title'))\n\n    expect(() => {\n      setup(customBookList, {\n        keys: [{ weight: 10 }, { name: 'author', weight: 0.7 }]\n      })\n    }).toThrowError(ErrorMsg.MISSING_KEY_PROPERTY('name'))\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get the the exactly matching object","suites":["Weighted search","When searching for the term \"John Smith\" with author weighted higher"],"updatePoint":{"line":547,"column":48},"line":547,"code":"    test('We get the the exactly matching object', () => {\n      expect(result[0]).toMatchObject({\n        item: {\n          title: 'The life of Jane',\n          author: 'John Smith',\n          tags: ['john', 'smith']\n        },\n        refIndex: 2\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get the the exactly matching object","suites":["Weighted search","When searching for the term \"John Smith\" with author weighted higher, with mixed key types"],"updatePoint":{"line":571,"column":48},"line":571,"code":"    test('We get the the exactly matching object', () => {\n      expect(result[0]).toMatchObject({\n        item: {\n          title: 'The life of Jane',\n          author: 'John Smith',\n          tags: ['john', 'smith']\n        },\n        refIndex: 2\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Throws when key does not have a name property","suites":["Weighted search","When searching for the term \"John Smith\" with author weighted higher, with mixed key types"],"updatePoint":{"line":582,"column":55},"line":582,"code":"    test('Throws when key does not have a name property', () => {\n      expect(() => {\n        new Fuse(customBookList, {\n          keys: ['title', { weight: 2 }]\n        })\n      }).toThrow()\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get the the exactly matching object","suites":["Weighted search","When searching for the term \"John Smith\" with title weighted higher"],"updatePoint":{"line":605,"column":48},"line":605,"code":"    test('We get the the exactly matching object', () => {\n      expect(result[0]).toMatchObject({\n        item: {\n          title: 'John Smith',\n          author: 'Steve Pearson',\n          tags: ['steve', 'pearson']\n        },\n        refIndex: 3\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get the the exactly matching object","suites":["Weighted search","When searching for the term \"Man\", where the author is weighted higher than title"],"updatePoint":{"line":631,"column":48},"line":631,"code":"    test('We get the the exactly matching object', () => {\n      expect(result[0]).toMatchObject({\n        item: {\n          title: 'Right Ho Jeeves',\n          author: 'P.D. Mans',\n          tags: ['fiction', 'war']\n        },\n        refIndex: 1\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get the the exactly matching object","suites":["Weighted search","When searching for the term \"Man\", where the title is weighted higher than author"],"updatePoint":{"line":657,"column":48},"line":657,"code":"    test('We get the the exactly matching object', () => {\n      expect(result[0]).toMatchObject({\n        item: {\n          title: \"Old Man's War fiction\",\n          author: 'John X',\n          tags: ['war']\n        },\n        refIndex: 0\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get the exactly matching object","suites":["Weighted search","When searching for the term \"War\", where tags are weighted higher than all other keys"],"updatePoint":{"line":684,"column":44},"line":684,"code":"    test('We get the exactly matching object', () => {\n      expect(result[0]).toMatchObject({\n        item: {\n          title: \"Old Man's War fiction\",\n          author: 'John X',\n          tags: ['war']\n        },\n        refIndex: 0\n      })\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get a list whose indices are found","suites":["Search location","When searching for the term \"wor\""],"updatePoint":{"line":716,"column":47},"line":716,"code":"    test('We get a list whose indices are found', () => {\n      expect(matches[0].indices[0]).toEqual([4, 4])\n      expect(matches[0].indices[1]).toEqual([6, 8])\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"with original text values","suites":["Search location","When searching for the term \"wor\""],"updatePoint":{"line":721,"column":35},"line":721,"code":"    test('with original text values', () => {\n      expect(matches[0].value).toBe('Hello World')\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get a match containing 4 indices","suites":["Searching with default options","When searching for the term \"test\""],"updatePoint":{"line":737,"column":45},"line":737,"code":"    test('We get a match containing 4 indices', () => {\n      expect(result[0].matches[0].indices).toHaveLength(4)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"and the first index is a single character","suites":["Searching with default options","When searching for the term \"test\""],"updatePoint":{"line":741,"column":51},"line":741,"code":"    test('and the first index is a single character', () => {\n      expect(result[0].matches[0].indices[0][0]).toBe(0)\n      expect(result[0].matches[0].indices[0][1]).toBe(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get a match containing 7 indices","suites":["Searching with findAllMatches","When searching for the term \"test\""],"updatePoint":{"line":764,"column":45},"line":764,"code":"    test('We get a match containing 7 indices', () => {\n      expect(result[0].matches[0].indices).toHaveLength(7)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"and the first index is a single character","suites":["Searching with findAllMatches","When searching for the term \"test\""],"updatePoint":{"line":768,"column":51},"line":768,"code":"    test('and the first index is a single character', () => {\n      expect(result[0].matches[0].indices[0][0]).toBe(0)\n      expect(result[0].matches[0].indices[0][1]).toBe(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get a match containing 3 indices","suites":["Searching with minCharLength","When searching for the term \"test\""],"updatePoint":{"line":791,"column":45},"line":791,"code":"    test('We get a match containing 3 indices', () => {\n      expect(result[0].matches[0].indices).toHaveLength(3)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"and the first index is a single character","suites":["Searching with minCharLength","When searching for the term \"test\""],"updatePoint":{"line":795,"column":51},"line":795,"code":"    test('and the first index is a single character', () => {\n      expect(result[0].matches[0].indices[0][0]).toBe(2)\n      expect(result[0].matches[0].indices[0][1]).toBe(3)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get no results","suites":["Searching with minCharLength","When searching for a string shorter than minMatchCharLength"],"updatePoint":{"line":805,"column":27},"line":805,"code":"    test('We get no results', () => {\n      expect(result).toHaveLength(0)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get a result with no matches","suites":["Searching with minCharLength","Main functionality"],"updatePoint":{"line":834,"column":41},"line":834,"code":"    test('We get a result with no matches', () => {\n      const result = fuse.search('remy')\n\n      expect(result).toHaveLength(1)\n      expect(result[0].matches).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get exactly 1 result","suites":["Searching with minCharLength and pattern larger than machine word size","When searching for the term \"American as apple pie is odd treatment of something made by mom\""],"updatePoint":{"line":873,"column":33},"line":873,"code":"    test('We get exactly 1 result', () => {\n      expect(result).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Which corresponds to the first item in the list, with no matches","suites":["Searching with minCharLength and pattern larger than machine word size","When searching for the term \"American as apple pie is odd treatment of something made by mom\""],"updatePoint":{"line":877,"column":74},"line":877,"code":"    test('Which corresponds to the first item in the list, with no matches', () => {\n      expect(result[0].refIndex).toBe(0)\n      expect(result[0].matches).toHaveLength(1)\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get the properly ordered results","suites":["Sorted search results","When searching for the term \"wood\""],"updatePoint":{"line":910,"column":45},"line":910,"code":"    test('We get the properly ordered results', () => {\n      expect(result[0].item.title).toBe('The Code of the Wooster')\n      expect(result[1].item.title).toBe('Right Ho Jeeves')\n      expect(result[2].item.title).toBe('Thank You Jeeves')\n    })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"finds no matches when string is larger than 32 characters","suites":["Searching using string large strings"],"updatePoint":{"line":938,"column":65},"line":938,"code":"  test('finds no matches when string is larger than 32 characters', () => {\n    const fuse = new Fuse(list, options)\n\n    let pattern = 'where exctly is carmen in the world san diego'\n    let result = fuse.search(pattern)\n    expect(result.length).toBe(1)\n    expect(result[0].item.text).toBe(list[2].text)\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Test matches with very long patterns","suites":["Searching using string large strings"],"updatePoint":{"line":947,"column":44},"line":947,"code":"  test('Test matches with very long patterns', () => {\n    let fuse = new Fuse(list, options)\n    let patterns = []\n\n    for (let i = 0; i < 66; ++i) {\n      patterns.push('w'.repeat(i))\n    }\n\n    const search = (pattern) => {\n      return fuse.search(pattern).length === 0\n    }\n\n    expect(search(patterns[32])).toBeTruthy()\n    expect(search(patterns[33])).toBeTruthy()\n    expect(search(patterns[34])).toBeTruthy()\n    expect(search(patterns[64])).toBeTruthy()\n    expect(search(patterns[65])).toBeTruthy()\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"With hyphens","suites":["Searching using string large strings"],"updatePoint":{"line":966,"column":18},"line":966,"code":"  it('With hyphens', () => {\n    const searchText = 'leverage-streams-to'\n    const fuseOptions = {\n      distance: 1000,\n      includeScore: true,\n      includeMatches: true,\n      keys: ['name', 'tag', 'description'],\n      minMatchCharLength: Math.floor(searchText.length * 0.6),\n      shouldSort: false\n    }\n    const fuse = new Fuse(\n      [\n        {\n          name: 'Streaming Service',\n          description: 'Leverage-streams-to-ingest, analyze, monitor.',\n          tag: 'Free'\n        }\n      ],\n      fuseOptions\n    )\n\n    const results = fuse.search(searchText)\n    expect(results[0].matches).toEqual([\n      {\n        indices: [[0, 18]],\n        key: 'description',\n        value: 'Leverage-streams-to-ingest, analyze, monitor.'\n      }\n    ])\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"With spaces","suites":["Searching using string large strings"],"updatePoint":{"line":997,"column":17},"line":997,"code":"  it('With spaces', () => {\n    const searchText = 'leverage streams to'\n    const fuseOptions = {\n      distance: 1000,\n      includeScore: true,\n      includeMatches: true,\n      keys: ['name', 'tag', 'description'],\n      minMatchCharLength: Math.floor(searchText.length * 0.6),\n      shouldSort: false\n    }\n    const fuse = new Fuse(\n      [\n        {\n          name: 'Streaming Service',\n          description: 'Leverage streams to ingest, analyze, monitor.',\n          tag: 'Free'\n        }\n      ],\n      fuseOptions\n    )\n\n    const results = fuse.search(searchText)\n    expect(results[0].matches).toEqual([\n      {\n        indices: [[0, 18]],\n        key: 'description',\n        value: 'Leverage streams to ingest, analyze, monitor.'\n      }\n    ])\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"The entry with the shorter field length appears first","suites":["Searching taking into account field length"],"updatePoint":{"line":1045,"column":61},"line":1045,"code":"  test('The entry with the shorter field length appears first', () => {\n    const fuse = new Fuse(list, {\n      keys: ['title']\n    })\n    let result = fuse.search('war')\n\n    expect(result.length).toBe(2)\n    expect(result[0].item.ISBN).toBe('0765348276')\n    expect(result[1].item.ISBN).toBe('0312696957')\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Weighted entries still are given high precedence","suites":["Searching taking into account field length"],"updatePoint":{"line":1056,"column":56},"line":1056,"code":"  test('Weighted entries still are given high precedence', () => {\n    const fuse = new Fuse(list, {\n      keys: [\n        { name: 'tags', weight: 0.8 },\n        { name: 'title', weight: 0.2 }\n      ]\n    })\n    let result = fuse.search('war')\n    expect(result.length).toBe(2)\n    expect(result[0].item.ISBN).toBe('0312696957')\n    expect(result[1].item.ISBN).toBe('0765348276')\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Check order of entries when location and field-length norm are ignored","suites":["Ignore location and field length norm"],"updatePoint":{"line":1082,"column":78},"line":1082,"code":"  test('Check order of entries when location and field-length norm are ignored', () => {\n    const options = {\n      includeScore: true,\n      ignoreLocation: true,\n      ignoreFieldNorm: true\n    }\n    const fuse = new Fuse(list, options)\n    let result = fuse.search('promiseawarebeforeEach')\n\n    expect(result).toMatchSnapshot()\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Check order of entries when location and field-length norm are not ignored","suites":["Ignore location and field length norm"],"updatePoint":{"line":1094,"column":82},"line":1094,"code":"  test('Check order of entries when location and field-length norm are not ignored', () => {\n    const options = {\n      includeScore: true\n    }\n    const fuse = new Fuse(list, options)\n    let result = fuse.search('beforeEach')\n    expect(result).toMatchSnapshot()\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get mathes","suites":["Standard dotted keys"],"updatePoint":{"line":1105,"column":21},"line":1105,"code":"  test('We get mathes', () => {\n    const list = [\n      {\n        title: 'HTML5',\n        author: {\n          firstName: 'Remy',\n          lastName: 'Sharp'\n        }\n      },\n      {\n        title: 'Angels & Demons',\n        author: {\n          firstName: 'rmy',\n          lastName: 'Brown'\n        }\n      }\n    ]\n\n    const fuse = new Fuse(list, {\n      keys: ['title', ['author', 'firstName']],\n      includeMatches: true,\n      includeScore: true\n    })\n\n    const result = fuse.search('remy')\n\n    expect(result).toHaveLength(2)\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"We get a result with no matches","suites":["Standard dotted keys"],"updatePoint":{"line":1134,"column":39},"line":1134,"code":"  test('We get a result with no matches', () => {\n    const list = [\n      {\n        title: 'HTML5',\n        author: {\n          'first.name': 'Remy',\n          'last.name': 'Sharp'\n        }\n      },\n      {\n        title: 'Angels & Demons',\n        author: {\n          'first.name': 'rmy',\n          'last.name': 'Brown'\n        }\n      }\n    ]\n\n    const fuse = new Fuse(list, {\n      keys: ['title', ['author', 'first.name']],\n      includeMatches: true,\n      includeScore: true\n    })\n\n    const result = fuse.search('remy')\n\n    expect(result).toHaveLength(2)\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Keys with weights","suites":["Standard dotted keys"],"updatePoint":{"line":1163,"column":25},"line":1163,"code":"  test('Keys with weights', () => {\n    const list = [\n      {\n        title: 'HTML5',\n        author: {\n          firstName: 'Remy',\n          lastName: 'Sharp'\n        }\n      },\n      {\n        title: 'Angels & Demons',\n        author: {\n          firstName: 'rmy',\n          lastName: 'Brown'\n        }\n      }\n    ]\n\n    const fuse = new Fuse(list, {\n      keys: [{ name: 'title' }, { name: ['author', 'firstName'] }],\n      includeMatches: true,\n      includeScore: true\n    })\n\n    const result = fuse.search('remy')\n\n    expect(result).toHaveLength(2)\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Booleans are still processed","suites":["Breaking values"],"updatePoint":{"line":1194,"column":36},"line":1194,"code":"  test('Booleans are still processed', () => {\n    const data = [{ first: false }]\n    const options = { keys: [{ name: 'first' }] }\n    const fuse = new Fuse(data, options)\n\n    const result = fuse.search('fa')\n    expect(result).toHaveLength(1)\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"Object values are ignored","suites":["Breaking values"],"updatePoint":{"line":1203,"column":33},"line":1203,"code":"  test('Object values are ignored', () => {\n    const data = [{ a: 'hello' }, { a: {} }]\n    const options = { keys: ['a'] }\n    const fuse = new Fuse(data, options)\n\n    const result = fuse.search('hello')\n    expect(result).toHaveLength(1)\n  })","file":"fuzzy-search.test.js","skipped":false,"dir":"test"},{"name":"createIndex: ensure properties exist","suites":["Searching"],"updatePoint":{"line":16,"column":44},"line":16,"code":"  test('createIndex: ensure properties exist', () => {\n    let myIndex = Fuse.createIndex(options.keys, Books)\n\n    expect(myIndex.records).toBeDefined()\n    expect(myIndex.keys).toBeDefined()\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"createIndex: ensure keys can be created with objects","suites":["Searching"],"updatePoint":{"line":23,"column":60},"line":23,"code":"  test('createIndex: ensure keys can be created with objects', () => {\n    let myIndex = Fuse.createIndex(\n      [{ name: 'title' }, { name: 'author.firstName' }],\n      Books\n    )\n    expect(myIndex.records).toBeDefined()\n    expect(myIndex.keys).toBeDefined()\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"createIndex: ensure keys can be created with getFn","suites":["Searching"],"updatePoint":{"line":32,"column":58},"line":32,"code":"  test('createIndex: ensure keys can be created with getFn', () => {\n    let myIndex = Fuse.createIndex(\n      [\n        { name: 'title', getFn: (book) => book.title },\n        { name: 'author.firstName', getFn: (book) => book.author.firstName }\n      ],\n      Books\n    )\n    expect(myIndex.records).toBeDefined()\n    expect(myIndex.keys).toBeDefined()\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"parseIndex: ensure index can be exported and Fuse can be initialized","suites":["Searching"],"updatePoint":{"line":44,"column":76},"line":44,"code":"  test('parseIndex: ensure index can be exported and Fuse can be initialized', () => {\n    const myIndex = Fuse.createIndex(options.keys, Books)\n    expect(myIndex.size()).toBe(Books.length)\n\n    const data = myIndex.toJSON()\n    expect(data.records).toBeDefined()\n    expect(data.keys).toBeDefined()\n\n    const parsedIndex = Fuse.parseIndex(data)\n    expect(parsedIndex.size()).toBe(Books.length)\n\n    const fuse = new Fuse(Books, options, parsedIndex)\n    const result = fuse.search({ title: 'old man' })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"parseIndex: search with getFn","suites":["Searching"],"updatePoint":{"line":61,"column":37},"line":61,"code":"  test('parseIndex: search with getFn', () => {\n    const fuse = new Fuse(Books, {\n      useExtendedSearch: true,\n      includeMatches: true,\n      includeScore: true,\n      threshold: 0.3,\n      keys: [\n        { name: 'bookTitle', getFn: (book) => book.title },\n        { name: 'authorName', getFn: (book) => book.author.firstName }\n      ]\n    })\n    const result = fuse.search({ bookTitle: 'old man' })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"Fuse can be instantiated with an index","suites":["Searching"],"updatePoint":{"line":77,"column":46},"line":77,"code":"  test('Fuse can be instantiated with an index', () => {\n    let myIndex = Fuse.createIndex(options.keys, Books)\n    const fuse = new Fuse(Books, options, myIndex)\n\n    let result = fuse.search({ title: 'old man' })\n\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n    expect(result[0].matches[0].indices).toMatchObject([\n      [0, 2],\n      [4, 6]\n    ])\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"Throws on invalid index format","suites":["Searching"],"updatePoint":{"line":91,"column":38},"line":91,"code":"  test('Throws on invalid index format', () => {\n    expect(() => {\n      new Fuse(Books, options, [])\n    }).toThrow()\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"Add object to Index","suites":["Searching"],"updatePoint":{"line":97,"column":27},"line":97,"code":"  test('Add object to Index', () => {\n    const fuse = new Fuse(Books, options)\n\n    fuse.add({\n      title: 'book',\n      author: {\n        firstName: 'Kiro',\n        lastName: 'Risk'\n      }\n    })\n\n    let result = fuse.search('kiro')\n\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([Books.length - 1])\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"Add string to Index","suites":["Searching"],"updatePoint":{"line":114,"column":27},"line":114,"code":"  test('Add string to Index', () => {\n    const fruits = ['apple', 'orange']\n    const fuse = new Fuse(fruits, { includeScore: true })\n\n    fuse.add('banana')\n\n    let result = fuse.search('banana')\n\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([2])\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"Remove string from the Index","suites":["Searching"],"updatePoint":{"line":126,"column":36},"line":126,"code":"  test('Remove string from the Index', () => {\n    const fruits = ['apple', 'orange', 'banana', 'pear']\n    const fuse = new Fuse(fruits)\n\n    expect(fuse.getIndex().size()).toBe(4)\n    expect(idxMap(fuse)).toMatchObject([\n      ['apple', 0],\n      ['orange', 1],\n      ['banana', 2],\n      ['pear', 3]\n    ])\n\n    fuse.removeAt(1)\n\n    expect(fuse.getIndex().size()).toBe(3)\n    expect(idxMap(fuse)).toMatchObject([\n      ['apple', 0],\n      ['banana', 1],\n      ['pear', 2]\n    ])\n\n    const results = fuse.remove((doc) => {\n      return doc === 'banana' || doc === 'pear'\n    })\n\n    expect(results.length).toBe(2)\n    expect(fuse.getIndex().size()).toBe(1)\n    expect(fuse._docs.length).toBe(1)\n  })","file":"indexing.test.js","skipped":false,"dir":"test"},{"name":"Tree structure","suites":["Logical parser"],"updatePoint":{"line":14,"column":22},"line":14,"code":"  test('Tree structure', () => {\n    const query = {\n      $and: [\n        { title: 'old war' },\n        {\n          $or: [{ title: '!arts' }, { title: '^lock' }]\n        }\n      ]\n    }\n    let root = Fuse.parseQuery(query, options, { auto: false })\n\n    expect(root).toMatchSnapshot()\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Implicit operations","suites":["Logical parser"],"updatePoint":{"line":28,"column":27},"line":28,"code":"  test('Implicit operations', () => {\n    const query = {\n      $and: [\n        { title: 'old war' },\n        {\n          $or: [{ title: '!arts', tags: 'kiro' }, { title: '^lock' }]\n        }\n      ]\n    }\n    let root = Fuse.parseQuery(query, options, { auto: false })\n\n    expect(root).toMatchSnapshot()\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: implicit AND","suites":["Searching using logical search"],"updatePoint":{"line":52,"column":28},"line":52,"code":"  test('Search: implicit AND', () => {\n    let result = fuse.search({ title: 'old man' })\n    expect(result.length).toBe(1)\n    expect(result[0].refIndex).toBe(0)\n    expect(result[0].matches[0].indices).toMatchObject([\n      [0, 2],\n      [4, 6]\n    ])\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: AND with single item","suites":["Searching using logical search"],"updatePoint":{"line":62,"column":36},"line":62,"code":"  test('Search: AND with single item', () => {\n    let result = fuse.search({ $and: [{ title: 'old man' }] })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n    expect(result[0].matches[0].indices).toMatchObject([\n      [0, 2],\n      [4, 6]\n    ])\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: AND with multiple entries","suites":["Searching using logical search"],"updatePoint":{"line":72,"column":41},"line":72,"code":"  test('Search: AND with multiple entries', () => {\n    let result = fuse.search({\n      $and: [{ 'author.lastName': 'Woodhose' }, { title: 'the' }]\n    })\n    expect(result.length).toBe(2)\n    expect(idx(result)).toMatchObject([4, 5])\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: AND with multiple entries + exact match","suites":["Searching using logical search"],"updatePoint":{"line":80,"column":55},"line":80,"code":"  test('Search: AND with multiple entries + exact match', () => {\n    let result = fuse.search({\n      $and: [{ 'author.lastName': 'Woodhose' }, { title: \"'The\" }]\n    })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([4])\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: OR with multiple entries","suites":["Searching using logical search"],"updatePoint":{"line":88,"column":40},"line":88,"code":"  test('Search: OR with multiple entries', () => {\n    let result = fuse.search({\n      $or: [{ title: 'angls' }, { title: 'incmpetnce' }]\n    })\n    expect(result.length).toBe(3)\n    expect(idx(result)).toMatchObject([14, 7, 0])\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: OR with multiple entries","suites":["Searching using logical search"],"updatePoint":{"line":96,"column":40},"line":96,"code":"  test('Search: OR with multiple entries', () => {\n    let result = fuse.search({\n      $or: [\n        { title: 'angls' },\n        { $and: [{ title: '!dwarf' }, { title: 'bakwrds' }] }\n      ]\n    })\n    expect(result.length).toBe(2)\n    expect(idx(result)).toMatchObject([7, 0])\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: nested AND + OR","suites":["Multiple nested conditions"],"updatePoint":{"line":141,"column":31},"line":141,"code":"  test('Search: nested AND + OR', () => {\n    const result = fuse1.search({\n      $and: [\n        { title: 'old' },\n        {\n          $or: [{ 'author.firstName': 'j' }, { 'author.lastName': 'Sa' }]\n        },\n        {\n          $or: [{ 'author.age': \"'62\" }]\n        }\n      ]\n    })\n\n    expect(result.length).toBe(0)\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: deep nested AND + OR","suites":["Multiple nested conditions"],"updatePoint":{"line":157,"column":36},"line":157,"code":"  test('Search: deep nested AND + OR', () => {\n    const result = fuse1.search({\n      $and: [\n        { title: 'old' },\n        {\n          $or: [{ 'author.firstName': 'jon' }, { 'author.lastName': 'Sazi' }]\n        },\n        {\n          $or: [\n            { 'author.age': \"'62\" },\n            { $and: [{ title: 'old' }, { 'author.age': \"'61\" }] }\n          ]\n        }\n      ]\n    })\n\n    expect(result.length).toBe(1)\n    expect(result[0]).toHaveProperty('score')\n    expect(result[0].score).toBeGreaterThan(0)\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: deep nested AND + OR","suites":["Multiple nested conditions"],"updatePoint":{"line":178,"column":36},"line":178,"code":"  test('Search: deep nested AND + OR', () => {\n    const result = fuse2.search({\n      $and: [\n        { title: 'old' },\n        {\n          $and: [{ 'author.firstName': 'jon' }, { 'author.lastName': 'Sazi' }]\n        },\n        {\n          $or: [\n            { 'author.age': \"'62\" },\n            { $and: [{ title: 'old' }, { 'author.age': \"'62\" }] }\n          ]\n        }\n      ]\n    })\n\n    expect(result.length).toBe(1)\n    expect(result[0]).toHaveProperty('score')\n    expect(result[0].score).toBeGreaterThan(0)\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"Search: deep nested AND + OR","suites":["Logical search with dotted keys"],"updatePoint":{"line":224,"column":36},"line":224,"code":"  test('Search: deep nested AND + OR', () => {\n    const query = {\n      $and: [\n        {\n          $path: ['author', 'first.name'],\n          $val: 'jon'\n        },\n        {\n          $path: ['author', 'last.name'],\n          $val: 'scazi'\n        }\n      ]\n    }\n\n    const result = fuse.search(query)\n\n    expect(result.length).toBe(1)\n  })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"we get the top three results scored based matches from all their fields","suites":["Searching using logical OR with same query across fields","When searching for the term \"wood\""],"updatePoint":{"line":257,"column":81},"line":257,"code":"    test('we get the top three results scored based matches from all their fields', () => {\n      expect(idx(result.slice(0, 3))).toMatchObject([4, 3, 5])\n    })","file":"logical-search.test.js","skipped":false,"dir":"test"},{"name":"we get a list of containing 2 items","suites":["Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]","When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off"],"updatePoint":{"line":21,"column":45},"line":21,"code":"    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })","file":"scoring.test.js","skipped":false,"dir":"test"},{"name":"whose values represent the indices of [\"Stove\", \"My good friend Steve from college\"]","suites":["Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]","When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off"],"updatePoint":{"line":25,"column":94},"line":25,"code":"    test('whose values represent the indices of [\"Stove\", \"My good friend Steve from college\"]', () => {\n      expect(result[0].refIndex).toBe(0)\n      expect(result[1].refIndex).toBe(1)\n    })","file":"scoring.test.js","skipped":false,"dir":"test"},{"name":"we get a list of containing 2 items","suites":["Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]","When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm on"],"updatePoint":{"line":38,"column":45},"line":38,"code":"    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })","file":"scoring.test.js","skipped":false,"dir":"test"},{"name":"whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]","suites":["Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]","When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm on"],"updatePoint":{"line":42,"column":94},"line":42,"code":"    test('whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]', () => {\n      expect(result[0].refIndex).toBe(1)\n      expect(result[1].refIndex).toBe(0)\n    })","file":"scoring.test.js","skipped":false,"dir":"test"},{"name":"we get a list of containing 2 items","suites":["Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]","When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off and fieldNormWeight decreased"],"updatePoint":{"line":55,"column":45},"line":55,"code":"    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })","file":"scoring.test.js","skipped":false,"dir":"test"},{"name":"whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]","suites":["Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]","When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off and fieldNormWeight decreased"],"updatePoint":{"line":59,"column":94},"line":59,"code":"    test('whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]', () => {\n      expect(result[0].refIndex).toBe(1)\n      expect(result[1].refIndex).toBe(0)\n    })","file":"scoring.test.js","skipped":false,"dir":"test"},{"name":"When searching by number","suites":["Search with typings"],"updatePoint":{"line":14,"column":32},"line":14,"code":"  test('When searching by number', () => {\n    let pokeFuse = new Fuse(BattlePokedex, defaultOptions)\n\n    const pokemon = '2'\n    const firstSearch = pokeFuse.search(pokemon)\n\n    const poke: PokedexType = firstSearch[0].item\n\n    // let x = Fuse.createIndex<PokedexType>(\n    //   ['alias', 'species', 'name', 'num'],\n    //   BattlePokedex,\n    // )\n\n    const expected = {\n      num: 2,\n      species: 'Ivysaur',\n      types: ['Grass', 'Poison'],\n      genderRatio: { M: 0.875, F: 0.125 },\n      baseStats: { hp: 60, atk: 62, def: 63, spa: 80, spd: 80, spe: 60 },\n      abilities: { 0: 'Overgrow', H: 'Chlorophyll' },\n      heightm: 1,\n      weightkg: 13,\n      color: 'Green',\n      prevo: 'bulbasaur',\n      evos: ['venusaur'],\n      evoLevel: 16,\n      eggGroups: ['Monster', 'Grass']\n    }\n\n    expect(poke.species).toBe('Ivysaur')\n    expect(poke).toMatchObject(expected)\n  })","file":"typings.test.ts","skipped":false,"dir":"test"},{"name":"When searching by number","suites":["Search results with indices"],"updatePoint":{"line":49,"column":32},"line":49,"code":"  test('When searching by number', () => {\n    interface Board {\n      readonly name: string\n    }\n    const list: Array<Board> = [\n      {\n        name: 'Arduino Duemilanove or Diecimila'\n      }\n    ]\n    const options: Fuse.IFuseOptions<Board> = {\n      includeMatches: true,\n      minMatchCharLength: 1,\n      keys: ['name']\n    }\n\n    const fuse = new Fuse(list, options)\n    const results = fuse.search(`ar due di`)\n\n    expect(results.length).toBe(1)\n\n    const matches = results[0].matches\n\n    expect(matches?.length).toBe(1)\n    expect(matches?.[0].indices.length).toBe(9)\n    expect(matches?.[0].indices[0]).toMatchObject([0, 4])\n  })","file":"typings.test.ts","skipped":false,"dir":"test"},{"name":"Search: AND with multiple entries + exact match","suites":["Logical search results"],"updatePoint":{"line":94,"column":55},"line":94,"code":"  test('Search: AND with multiple entries + exact match', () => {\n    let result = fuse.search({\n      $and: [{ name: 'Woodhose' }, { title: \"'The\" }]\n    })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n  })","file":"typings.test.ts","skipped":false,"dir":"test"}]}