{"repo":"ChainSafe/web3.js","url":"https://github.com/ChainSafe/web3.js","branch":"1.x","configs":[{"package":"web3.js","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"web3-eth2-beaconchain","lang":"ts","dir":"packages/web3-eth2-beaconchain/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"web3-eth2-core","lang":"ts","dir":"packages/web3-eth2-core/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"when instantiating Web3","suites":["Web3.providers.givenProvider","should be set if window.ethereum is available"],"updatePoint":{"line":17,"column":31,"index":550},"line":17,"code":"    it('when instantiating Web3', function () {\n      var Web3 = require('../packages/web3');\n      assert.deepEqual(Web3.givenProvider, global.ethereum);\n    });","file":"1_givenProvider-ethereumProvider.js","skipped":false,"dir":"test"},{"name":"when instantiating Eth","suites":["Web3.providers.givenProvider","should be set if window.ethereum is available"],"updatePoint":{"line":21,"column":30,"index":712},"line":21,"code":"    it('when instantiating Eth', function () {\n      var Eth = require('../packages/web3-eth');\n      assert.deepEqual(Eth.givenProvider, global.ethereum);\n    });","file":"1_givenProvider-ethereumProvider.js","skipped":false,"dir":"test"},{"name":"when instantiating Bzz","suites":["Web3.providers.givenProvider","should be set if window.ethereum is available"],"updatePoint":{"line":25,"column":30,"index":876},"line":25,"code":"    it('when instantiating Bzz', function () {\n      var Bzz = require('../packages/web3-bzz');\n      assert.deepEqual(Bzz.givenProvider, global.ethereum.bzz);\n    });","file":"1_givenProvider-ethereumProvider.js","skipped":false,"dir":"test"},{"name":"should use request()","suites":["Web3.providers.givenProvider","should use request() if available, otherwise falling back to sendAsync() and send()"],"updatePoint":{"line":34,"column":28,"index":1227},"line":34,"code":"    it('should use request()', async function () {\n      global.ethereum = {\n        request: async () => {\n          return '0x64';\n        },\n        sendAsync: () => {\n          throw new Error('used sendAsync');\n        },\n        send: () => {\n          throw new Error('used send');\n        }\n      };\n      const Web3 = require('../packages/web3');\n      const web3 = new Web3(Web3.givenProvider);\n      const blockNumber = await web3.eth.getBlockNumber();\n      assert.equal(blockNumber, 100);\n    });","file":"1_givenProvider-ethereumProvider.js","skipped":false,"dir":"test"},{"name":"should use sendAsync()","suites":["Web3.providers.givenProvider","should use request() if available, otherwise falling back to sendAsync() and send()"],"updatePoint":{"line":51,"column":30,"index":1739},"line":51,"code":"    it('should use sendAsync()', async function () {\n      global.ethereum = {\n        sendAsync: (args, callback) => {\n          return callback(null, {\n            jsonrpc: '2.0',\n            id: 0,\n            result: 101\n          });\n        },\n        send: () => {\n          throw new Error('used send');\n        }\n      };\n      const Web3 = require('../packages/web3');\n      const web3 = new Web3(Web3.givenProvider);\n      const blockNumber = await web3.eth.getBlockNumber();\n      assert.equal(blockNumber, 101);\n    });","file":"1_givenProvider-ethereumProvider.js","skipped":false,"dir":"test"},{"name":"should use send()","suites":["Web3.providers.givenProvider","should use request() if available, otherwise falling back to sendAsync() and send()"],"updatePoint":{"line":69,"column":25,"index":2267},"line":69,"code":"    it('should use send()', async function () {\n      global.ethereum = {\n        send: (args, callback) => {\n          return callback(null, {\n            jsonrpc: '2.0',\n            id: 0,\n            result: 102\n          });\n        }\n      };\n      const Web3 = require('../packages/web3');\n      const web3 = new Web3(Web3.givenProvider);\n      const blockNumber = await web3.eth.getBlockNumber();\n      assert.equal(blockNumber, 102);\n    });","file":"1_givenProvider-ethereumProvider.js","skipped":false,"dir":"test"},{"name":"should error without any request or send method","suites":["Web3.providers.givenProvider","should use request() if available, otherwise falling back to sendAsync() and send()"],"updatePoint":{"line":84,"column":55,"index":2747},"line":84,"code":"    it('should error without any request or send method', async function () {\n      global.ethereum = {};\n      const Web3 = require('../packages/web3');\n      const web3 = new Web3(Web3.givenProvider);\n      try {\n        await web3.eth.getBlockNumber();\n        assert.fail('should error');\n      } catch (error) {\n        assert.equal(error.message, 'Provider does not have a request or send method to use.');\n      }\n    });","file":"1_givenProvider-ethereumProvider.js","skipped":false,"dir":"test"},{"name":"when instantiating Web3","suites":["Web3.providers.currentProvider","should be set if web3.currentProvider is available"],"updatePoint":{"line":19,"column":31,"index":592},"line":19,"code":"    it('when instantiating Web3', function () {\n      var Web3 = require('../packages/web3');\n      assert.deepEqual(Web3.givenProvider, global.web3.currentProvider);\n    });","file":"2_givenProvider-currentProvider.js","skipped":false,"dir":"test"},{"name":"when instantiating Eth","suites":["Web3.providers.currentProvider","should be set if web3.currentProvider is available"],"updatePoint":{"line":23,"column":30,"index":766},"line":23,"code":"    it('when instantiating Eth', function () {\n      var Eth = require('../packages/web3-eth');\n      assert.deepEqual(Eth.givenProvider, global.web3.currentProvider);\n    });","file":"2_givenProvider-currentProvider.js","skipped":false,"dir":"test"},{"name":"requestManager attaches 4 listeners","suites":["web.providers.givenProvider (ganache)"],"updatePoint":{"line":24,"column":41,"index":660},"line":24,"code":"  it('requestManager attaches 4 listeners', async function () {\n    assert.equal(1, web3.currentProvider.listenerCount('message'));\n    assert.equal(1, web3.currentProvider.listenerCount('connect'));\n    assert.equal(1, web3.currentProvider.listenerCount('error'));\n    // TODO: Remove close once the standard allows it\n    assert(web3.currentProvider.listenerCount(\"disconnect\") === 1 || web3.currentProvider.listenerCount(\"close\") === 1);\n  });","file":"3_givenProvider-ganache.js","skipped":false,"dir":"test"},{"name":"deploys a contract","suites":["web.providers.givenProvider (ganache)"],"updatePoint":{"line":31,"column":24,"index":1090},"line":31,"code":"  it('deploys a contract', async function () {\n    var instance = await basic.deploy().send({\n      from: accounts[0],\n      maxFeePerGas: 875000000\n    });\n    assert(web3.utils.isAddress(instance.options.address));\n  });","file":"3_givenProvider-ganache.js","skipped":false,"dir":"test"},{"name":"can repeatedly setProvider without triggering MaxListeners","suites":["web.providers.givenProvider (ganache)"],"updatePoint":{"line":38,"column":64,"index":1353},"line":38,"code":"  it('can repeatedly setProvider without triggering MaxListeners', function (done) {\n    let failed = false;\n    process.once('warning', function (msg) {\n      failed = msg.toString().includes(\"MaxListenersExceededWarning\");\n    });\n\n    // Setting the provider more than 9X triggers the warning in 1.2.7-rc.0\n    for (var i = 1; i <= 10; i++) {\n      basic.setProvider(provider);\n    }\n    setTimeout(function () {\n      if (failed) assert.fail(\"MaxListenersExceededWarning\");\n      done();\n    }, 500);\n  });","file":"3_givenProvider-ganache.js","skipped":false,"dir":"test"},{"name":"should not alter inputs","suites":["/lib/solidity/coder","decodeParam"],"updatePoint":{"line":554,"column":31,"index":50619},"line":554,"code":"    it('should not alter inputs', function () {\n      const t = {\n        type: \"function\",\n        name: \"f\",\n        internalType: \"function () external\"\n      };\n      const copyOfT = Object.assign({}, t);\n      coder.decodeParameter(t, '063e4f349a9e91c6575aedab0e70087fab642ecac04062260000000000000000'); //must not alter t!\n      assert.deepEqual(t, copyOfT);\n    });","file":"abi.decodeParameter.js","skipped":false,"dir":"test"},{"name":"should sort the responses in order of requests","suites":["lib/web3/batch","_sortResponses"],"updatePoint":{"line":7,"column":54,"index":293},"line":7,"code":"    it('should sort the responses in order of requests', function () {\n      var provider = new FakeIpcProvider();\n      var web3 = new Web3(provider);\n      var batch = new web3.BatchRequest();\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000000', 'latest', () => {}));\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000005', 'latest', () => {}));\n      const res1 = {\n        id: 1,\n        result: 'res1'\n      };\n      const res2 = {\n        id: 2,\n        result: 'res2'\n      };\n      const res3 = {\n        id: 3,\n        result: 'res3'\n      };\n      const sortedResponses = batch._sortResponses([res3, res1, res2]);\n      assert.deepEqual(sortedResponses, [res1, res2, res3]);\n      batch.execute();\n    });","file":"batch.js","skipped":false,"dir":"test"},{"name":"should execute batch request","suites":["lib/web3/batch","execute"],"updatePoint":{"line":31,"column":36,"index":1104},"line":31,"code":"    it('should execute batch request', function (done) {\n      var provider = new FakeIpcProvider();\n      var web3 = new Web3(provider);\n      var result = '0x126';\n      var resultVal = '294';\n      var result2 = '0x127';\n      var result2Val = '295';\n      provider.injectBatchResults([result, result2]);\n      var counter = 0;\n      var callback = function (err, r) {\n        counter++;\n        assert.deepEqual(r, resultVal);\n      };\n      var callback2 = function (err, r) {\n        assert.equal(counter, 1);\n        assert.deepEqual(r, result2Val);\n        done();\n      };\n      provider.injectValidation(function (payload) {\n        var first = payload[0];\n        var second = payload[1];\n        assert.equal(first.method, 'eth_getBalance');\n        assert.deepEqual(first.params, ['0x0000000000000000000000000000000000000000', 'latest']);\n        assert.equal(second.method, 'eth_getBalance');\n        assert.deepEqual(second.params, ['0x0000000000000000000000000000000000000005', 'latest']);\n      });\n      var batch = new web3.BatchRequest();\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000000', 'latest', callback));\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000005', 'latest', callback2));\n      batch.execute();\n    });","file":"batch.js","skipped":false,"dir":"test"},{"name":"should execute batch request for async properties","suites":["lib/web3/batch","execute"],"updatePoint":{"line":62,"column":57,"index":2440},"line":62,"code":"    it('should execute batch request for async properties', function (done) {\n      var provider = new FakeIpcProvider();\n      var web3 = new Web3(provider);\n      var result = [];\n      var result2 = '0xb';\n      provider.injectBatchResults([result, result2]);\n      var counter = 0;\n      var callback = function (err, r) {\n        counter++;\n        assert.isArray(result, r);\n      };\n      var callback2 = function (err, r) {\n        assert.equal(counter, 1);\n        assert.equal(r, 11);\n        done();\n      };\n      provider.injectValidation(function (payload) {\n        var first = payload[0];\n        var second = payload[1];\n        assert.equal(first.method, 'eth_accounts');\n        assert.deepEqual(first.params, []);\n        assert.equal(second.method, 'shh_post');\n        assert.deepEqual(second.params, [{}]);\n      });\n      var batch = new web3.BatchRequest();\n      batch.add(web3.eth.getAccounts.request(callback));\n      batch.add(web3.shh.post.request({}, callback2));\n      batch.execute();\n    });","file":"batch.js","skipped":false,"dir":"test"},{"name":"should execute batch request with contract","suites":["lib/web3/batch","execute"],"updatePoint":{"line":91,"column":50,"index":3459},"line":91,"code":"    it('should execute batch request with contract', function (done) {\n      var provider = new FakeIpcProvider();\n      var web3 = new Web3(provider);\n      var abi = [{\n        \"name\": \"balance\",\n        \"type\": \"function\",\n        \"inputs\": [{\n          \"name\": \"who\",\n          \"type\": \"address\"\n        }],\n        \"constant\": true,\n        \"outputs\": [{\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }]\n      }];\n      var address = '0x1000000000000000000000000000000000000001';\n      var result = '0x126';\n      var resultVal = '294';\n      var result2 = '0x0000000000000000000000000000000000000000000000000000000000000123';\n      var result2Val = '291';\n      var counter = 0;\n      var callback = function (err, r) {\n        counter++;\n        assert.deepEqual(r, resultVal);\n      };\n      var callback2 = function (err, r) {\n        assert.equal(counter, 1);\n        assert.deepEqual(r, result2Val);\n      };\n      var callback3 = function (err, r) {\n        counter++;\n        assert.equal(counter, 2);\n        assert.deepEqual(r, result2Val);\n        done();\n      };\n      provider.injectValidation(function (payload) {\n        assert.equal(payload[0].method, 'eth_getBalance');\n        assert.deepEqual(payload[0].params, ['0x0000000000000000000000000000000000000022', 'latest']);\n        assert.equal(payload[1].method, 'eth_call');\n        assert.deepEqual(payload[1].params, [{\n          'to': '0x1000000000000000000000000000000000000001',\n          'data': '0xe3d670d70000000000000000000000001000000000000000000000000000000000000001'\n        }, 'latest' // default block\n        ]);\n\n        assert.equal(payload[2].method, 'eth_call');\n        assert.deepEqual(payload[2].params, [{\n          'to': '0x1000000000000000000000000000000000000001',\n          'from': '0x1000000000000000000000000000000000000002',\n          'data': '0xe3d670d70000000000000000000000001000000000000000000000000000000000000001'\n        }, 'latest' // default block\n        ]);\n\n        assert.equal(payload[3].method, 'eth_call');\n        assert.deepEqual(payload[3].params, [{\n          'to': '0x1000000000000000000000000000000000000001',\n          'from': '0x1000000000000000000000000000000000000003',\n          'data': '0xe3d670d70000000000000000000000001000000000000000000000000000000000000001'\n        }, '0xa' // default block\n        ]);\n\n        assert.equal(payload[4].method, 'eth_call');\n        assert.deepEqual(payload[4].params, [{\n          'to': '0x1000000000000000000000000000000000000001',\n          'data': '0xe3d670d70000000000000000000000001000000000000000000000000000000000000001'\n        }, '0xa' // default block\n        ]);\n      });\n\n      var batch = new web3.BatchRequest();\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000022', 'latest', callback));\n      batch.add(new web3.eth.Contract(abi, address).methods.balance(address).call.request(callback2));\n      batch.add(new web3.eth.Contract(abi, address).methods.balance(address).call.request({\n        from: '0x1000000000000000000000000000000000000002'\n      }, callback2));\n      batch.add(new web3.eth.Contract(abi, address).methods.balance(address).call.request({\n        from: '0x1000000000000000000000000000000000000003'\n      }, 10, callback2));\n      batch.add(new web3.eth.Contract(abi, address).methods.balance(address).call.request(10, callback3));\n      provider.injectBatchResults([result, result2, result2, result2, result2]);\n      batch.execute();\n    });","file":"batch.js","skipped":false,"dir":"test"},{"name":"should execute batch requests and receive errors","suites":["lib/web3/batch","execute"],"updatePoint":{"line":174,"column":56,"index":6965},"line":174,"code":"    it('should execute batch requests and receive errors', function (done) {\n      var provider = new FakeIpcProvider();\n      var web3 = new Web3(provider);\n      var abi = [{\n        \"name\": \"balance\",\n        \"type\": \"function\",\n        \"inputs\": [{\n          \"name\": \"who\",\n          \"type\": \"address\"\n        }],\n        \"constant\": true,\n        \"outputs\": [{\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }]\n      }];\n      var address = '0x1000000000000000000000000000000000000001';\n      var result = 'Something went wrong';\n      var result2 = 'Something went wrong 2';\n      var counter = 0;\n      var callback = function (err, r) {\n        counter++;\n        assert.isNotNull(err);\n      };\n      var callback2 = function (err, r) {\n        assert.equal(counter, 1);\n        assert.isNotNull(err);\n        done();\n      };\n      provider.injectValidation(function (payload) {\n        var first = payload[0];\n        var second = payload[1];\n        assert.equal(first.method, 'eth_getBalance');\n        assert.deepEqual(first.params, ['0x0000000000000000000000000000000000000000', 'latest']);\n        assert.equal(second.method, 'eth_call');\n        assert.deepEqual(second.params, [{\n          'to': '0x1000000000000000000000000000000000000001',\n          'from': '0x0000000000000000000000000000000000000000',\n          'data': '0xe3d670d70000000000000000000000001000000000000000000000000000000000000001'\n        }, '0xa']);\n      });\n      var batch = new web3.BatchRequest();\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000000', 'latest', callback));\n      batch.add(new web3.eth.Contract(abi, address).methods.balance(address).call.request({\n        from: '0x0000000000000000000000000000000000000000'\n      }, 10, callback2));\n      provider.injectBatchResults([result, result2], true); // injects error\n      batch.execute();\n    });","file":"batch.js","skipped":false,"dir":"test"},{"name":"should propagate output formatter error to callback","suites":["lib/web3/batch","execute"],"updatePoint":{"line":223,"column":59,"index":8873},"line":223,"code":"    it('should propagate output formatter error to callback', function (done) {\n      const provider = new FakeIpcProvider();\n      const web3 = new Web3(provider);\n      const abi = [{\n        name: 'symbol',\n        type: 'function',\n        inputs: [],\n        constant: true,\n        outputs: [{\n          name: 'symbol',\n          type: 'string'\n        }]\n      }];\n      const address = '0x1000000000000000000000000000000000000001';\n      const result = '0x0000000000000000000000000000000000000000000000000000000000000123';\n      const callback = (err, _r) => {\n        assert.isNotNull(err);\n        done();\n      };\n      provider.injectValidation(payload => {\n        assert.equal(payload[0].method, 'eth_call');\n        assert.deepEqual(payload[0].params, [{\n          to: '0x1000000000000000000000000000000000000001',\n          data: '0x95d89b41'\n        }, 'latest']);\n      });\n      const batch = new web3.BatchRequest();\n      batch.add(new web3.eth.Contract(abi, address).methods.symbol().call.request(callback));\n      provider.injectBatchResults([result]); // no explicit error, it'll be thrown when formatting\n      batch.execute();\n    });","file":"batch.js","skipped":false,"dir":"test"},{"name":"should execute batch request with provider that supports sendAsync","suites":["lib/web3/batch","execute"],"updatePoint":{"line":254,"column":74,"index":10049},"line":254,"code":"    it('should execute batch request with provider that supports sendAsync', function (done) {\n      var provider = new FakeIpcProvider();\n      var web3 = new Web3(provider);\n      provider.sendAsync = provider.send;\n      provider.send = () => {\n        throw new Error('send was called instead of sendAsync');\n      };\n      var result = '0x126';\n      var resultVal = '294';\n      var result2 = '0x127';\n      var result2Val = '295';\n      provider.injectBatchResults([result, result2]);\n      var counter = 0;\n      var callback = function (err, r) {\n        counter++;\n        assert.deepEqual(r, resultVal);\n      };\n      var callback2 = function (err, r) {\n        assert.equal(counter, 1);\n        assert.deepEqual(r, result2Val);\n        done();\n      };\n      provider.injectValidation(function (payload) {\n        var first = payload[0];\n        var second = payload[1];\n        assert.equal(first.method, 'eth_getBalance');\n        assert.deepEqual(first.params, ['0x0000000000000000000000000000000000000000', 'latest']);\n        assert.equal(second.method, 'eth_getBalance');\n        assert.deepEqual(second.params, ['0x0000000000000000000000000000000000000005', 'latest']);\n      });\n      var batch = new web3.BatchRequest();\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000000', 'latest', callback));\n      batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000005', 'latest', callback2));\n      batch.execute();\n    });","file":"batch.js","skipped":false,"dir":"test"},{"name":"should handle bytes32 arrays that only contain 1 byte","suites":["contract","method.encodeABI"],"updatePoint":{"line":28,"column":61,"index":703},"line":28,"code":"    it('should handle bytes32 arrays that only contain 1 byte', function () {\n      var provider = new FakeIpcProvider();\n      var eth = new Eth(provider);\n      var contract = new eth.Contract(abi);\n      var result = contract.methods.takesTwoBytes32('0x'.concat('a'.repeat(2)), '0x'.concat('b'.repeat(2))).encodeABI();\n      assert.equal(result, ['0x1323517e', 'aa00000000000000000000000000000000000000000000000000000000000000', 'bb00000000000000000000000000000000000000000000000000000000000000'].join(''));\n    });","file":"contract.encodeABI.js","skipped":false,"dir":"test"},{"name":"should handle bytes32 arrays that are short 1 byte","suites":["contract","method.encodeABI"],"updatePoint":{"line":35,"column":58,"index":1219},"line":35,"code":"    it('should handle bytes32 arrays that are short 1 byte', function () {\n      var provider = new FakeIpcProvider();\n      var eth = new Eth(provider);\n      var contract = new eth.Contract(abi);\n      var result = contract.methods.takesTwoBytes32('0x'.concat('a'.repeat(62)), '0x'.concat('b'.repeat(62))).encodeABI();\n      assert.equal(result, ['0x1323517e', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00'].join(''));\n    });","file":"contract.encodeABI.js","skipped":false,"dir":"test"},{"name":"should handle bytes32 arrays that are full","suites":["contract","method.encodeABI"],"updatePoint":{"line":56,"column":50,"index":2324},"line":56,"code":"    it('should handle bytes32 arrays that are full', function () {\n      var provider = new FakeIpcProvider();\n      var eth = new Eth(provider);\n      var contract = new eth.Contract(abi);\n      var result = contract.methods.takesTwoBytes32('0x'.concat('a'.repeat(64)), '0x'.concat('b'.repeat(64))).encodeABI();\n      assert.equal(result, ['0x1323517e', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'].join(''));\n    });","file":"contract.encodeABI.js","skipped":false,"dir":"test"},{"name":"errors when no ABI is provided","suites":["contract: errors"],"updatePoint":{"line":27,"column":36,"index":650},"line":27,"code":"  it('errors when no ABI is provided', function () {\n    const expected = 'You must provide the json interface of the ' + 'contract when instantiating a contract object.';\n    try {\n      new eth.Contract();\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when provided ABI is not array","suites":["contract: errors"],"updatePoint":{"line":36,"column":43,"index":964},"line":36,"code":"  it('errors when provided ABI is not array', function () {\n    const expected = 'You must provide the json interface of the ' + 'contract when instantiating a contract object.';\n    try {\n      new eth.Contract({});\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when event listener is not provided with callback","suites":["contract: errors"],"updatePoint":{"line":45,"column":62,"index":1299},"line":45,"code":"  it('errors when event listener is not provided with callback', function () {\n    const expected = 'Once requires a callback as the second parameter';\n    const contract = new eth.Contract(abi);\n    try {\n      contract.once('data');\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when a non-existant event is listened for","suites":["contract: errors"],"updatePoint":{"line":55,"column":54,"index":1625},"line":55,"code":"  it('errors when a non-existant event is listened for', function () {\n    const expected = 'Event \"void\" doesn\\'t exist in this contract';\n    const contract = new eth.Contract(abi);\n    try {\n      contract.once('void', () => {});\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when listening for event without setting address","suites":["contract: errors"],"updatePoint":{"line":65,"column":61,"index":1964},"line":65,"code":"  it('errors when listening for event without setting address', function () {\n    const expected = 'This contract object doesn\\'t have address set yet, ' + 'please set an address first';\n    const eventAbi = [{\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"BasicEvent\",\n      \"type\": \"event\"\n    }];\n    const contract = new eth.Contract(eventAbi);\n    try {\n      contract.once('BasicEvent', () => {});\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when an event name is reserved","suites":["contract: errors"],"updatePoint":{"line":81,"column":43,"index":2464},"line":81,"code":"  it('errors when an event name is reserved', function () {\n    const expected = 'The event \"newListener\" is a reserved event name, ' + 'you can\\'t use it.';\n    const newListenerEventAbi = [{\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"newListener\",\n      \"type\": \"event\"\n    }];\n    const contract = new eth.Contract(newListenerEventAbi, contractAddress);\n    try {\n      contract.once('newListener', () => {});\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when deploy is called without data (throw)","suites":["contract: errors"],"updatePoint":{"line":97,"column":55,"index":3006},"line":97,"code":"  it('errors when deploy is called without data (throw)', function () {\n    const expected = 'No \"data\" specified in neither the given options, ' + 'nor the default options.';\n    const contract = new eth.Contract(abi);\n    try {\n      contract.deploy();\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when deploy is called without data (callback)","suites":["contract: errors"],"updatePoint":{"line":107,"column":58,"index":3363},"line":107,"code":"  it('errors when deploy is called without data (callback)', function (done) {\n    const expected = 'No \"data\" specified in neither the given options, ' + 'nor the default options.';\n    const contract = new eth.Contract(abi);\n\n    // Callback format\n    contract.deploy({}, function (err) {\n      assert(err.message.includes(expected));\n      done();\n    });\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when send is called without a *contract address* set","suites":["contract: errors"],"updatePoint":{"line":117,"column":65,"index":3736},"line":117,"code":"  it('errors when send is called without a *contract address* set', function () {\n    const expected = 'This contract object doesn\\'t have address set yet, ' + 'please set an address first.';\n    const contract = new eth.Contract(abi);\n    try {\n      contract.methods.simpleMethod(\"0xaaa\").send();\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when send is called without a *from address* being set (promise)","suites":["contract: errors"],"updatePoint":{"line":127,"column":77,"index":4146},"line":127,"code":"  it('errors when send is called without a *from address* being set (promise)', async function () {\n    const expected = 'No \"from\" address specified in neither the given options, ';\n    'nor the default options.';\n    const contract = new eth.Contract(abi, contractAddress);\n    try {\n      await contract.methods.simpleMethod(\"0xaaa\").send({});\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(expected));\n    }\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"errors when send is called without a *from address* being set (callback)","suites":["contract: errors"],"updatePoint":{"line":138,"column":78,"index":4593},"line":138,"code":"  it('errors when send is called without a *from address* being set (callback)', function (done) {\n    const expected = 'No \"from\" address specified in neither the given options, ';\n    'nor the default options.';\n    const contract = new eth.Contract(abi, contractAddress);\n    contract.methods.simpleMethod(\"0xaaa\").send({}, function (err) {\n      assert(err.message.includes(expected));\n      done();\n    });\n  });","file":"contract.errors.js","skipped":false,"dir":"test"},{"name":"should transform address from checksum addressess","suites":["instantiation"],"updatePoint":{"line":251,"column":57,"index":5436},"line":251,"code":"    it('should transform address from checksum addressess', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, provider);\n      assert.equal(contract.options.address, address);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should transform address to checksum address","suites":["instantiation"],"updatePoint":{"line":256,"column":52,"index":5674},"line":256,"code":"    it('should transform address to checksum address', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, provider);\n      assert.equal(contract.options.address, address);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should fail on invalid address","suites":["instantiation"],"updatePoint":{"line":261,"column":38,"index":5898},"line":261,"code":"    it('should fail on invalid address', function () {\n      var provider = new FakeIpcProvider();\n      var test = function () {\n        contractFactory(abi, '0x11F4D0A3c12e86B4b5F39B213F7E19D048276DAe', provider);\n      };\n      assert.throws(test);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should fail on invalid address as options.from","suites":["instantiation"],"updatePoint":{"line":268,"column":54,"index":6174},"line":268,"code":"    it('should fail on invalid address as options.from', function () {\n      var provider = new FakeIpcProvider();\n      var test = function () {\n        contractFactory(abi, address, {\n          from: '0x11F4D0A3c12e86B4b5F39B213F7E19D048276DAe'\n        }, provider);\n      };\n      assert.throws(test);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the handleRevert object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":277,"column":81,"index":6514},"line":277,"code":"    it('should define the handleRevert object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        handleRevert: true\n      }, provider);\n      assert.equal(contract.handleRevert, true);\n      assert.equal(contract.options.handleRevert, true);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the handleRevert property in the options object","suites":["instantiation"],"updatePoint":{"line":285,"column":69,"index":6858},"line":285,"code":"    it('should update the handleRevert property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        handleRevert: false\n      }, provider);\n      contract.handleRevert = true;\n      assert.equal(contract.options.handleRevert, true);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the defaultCommon object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":293,"column":82,"index":7203},"line":293,"code":"    it('should define the defaultCommon object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        common: true\n      }, provider);\n      assert.equal(contract.defaultCommon, true);\n      assert.equal(contract.options.common, true);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the defaultCommon property in the options object","suites":["instantiation"],"updatePoint":{"line":301,"column":70,"index":7537},"line":301,"code":"    it('should update the defaultCommon property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        common: false\n      }, provider);\n      contract.defaultCommon = true;\n      assert.equal(contract.options.common, true);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the defaultHardfork object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":309,"column":84,"index":7873},"line":309,"code":"    it('should define the defaultHardfork object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        hardfork: 'istanbul'\n      }, provider);\n      assert.equal(contract.defaultHardfork, 'istanbul');\n      assert.equal(contract.options.hardfork, 'istanbul');\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the defaultHardfork property in the options object","suites":["instantiation"],"updatePoint":{"line":317,"column":72,"index":8233},"line":317,"code":"    it('should update the defaultHardfork property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        hardfork: false\n      }, provider);\n      contract.defaultHardfork = true;\n      assert.equal(contract.options.hardfork, true);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the defaultChain object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":325,"column":81,"index":8572},"line":325,"code":"    it('should define the defaultChain object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        chain: 'mainnet'\n      }, provider);\n      assert.equal(contract.defaultChain, 'mainnet');\n      assert.equal(contract.options.chain, 'mainnet');\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the defaultChain property in the options object","suites":["instantiation"],"updatePoint":{"line":333,"column":69,"index":8917},"line":333,"code":"    it('should update the defaultChain property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        chain: false\n      }, provider);\n      contract.defaultChain = true;\n      assert.equal(contract.options.chain, true);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the transactionPollingTimeout object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":341,"column":94,"index":9260},"line":341,"code":"    it('should define the transactionPollingTimeout object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionPollingTimeout: 0\n      }, provider);\n      assert.equal(contract.transactionPollingTimeout, 0);\n      assert.equal(contract.options.transactionPollingTimeout, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the transactionPollingTimeout property in the options object","suites":["instantiation"],"updatePoint":{"line":349,"column":82,"index":9647},"line":349,"code":"    it('should update the transactionPollingTimeout property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionPollingTimeout: 1\n      }, provider);\n      contract.transactionPollingTimeout = 0;\n      assert.equal(contract.options.transactionPollingTimeout, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the transactionPollingInterval object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":357,"column":95,"index":10034},"line":357,"code":"    it('should define the transactionPollingInterval object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionPollingInterval: 0\n      }, provider);\n      assert.equal(contract.transactionPollingInterval, 0);\n      assert.equal(contract.options.transactionPollingInterval, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the transactionPollingInterval property in the options object","suites":["instantiation"],"updatePoint":{"line":365,"column":83,"index":10425},"line":365,"code":"    it('should update the transactionPollingInterval property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionPollingInterval: 1\n      }, provider);\n      contract.transactionPollingInterval = 0;\n      assert.equal(contract.options.transactionPollingInterval, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the transactionConfirmationBlocks object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":373,"column":98,"index":10818},"line":373,"code":"    it('should define the transactionConfirmationBlocks object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionConfirmationBlocks: 0\n      }, provider);\n      assert.equal(contract.transactionConfirmationBlocks, 0);\n      assert.equal(contract.options.transactionConfirmationBlocks, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the transactionConfirmationBlocks property in the options object","suites":["instantiation"],"updatePoint":{"line":381,"column":86,"index":11221},"line":381,"code":"    it('should update the transactionConfirmationBlocks property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionConfirmationBlocks: 1\n      }, provider);\n      contract.transactionConfirmationBlocks = 0;\n      assert.equal(contract.options.transactionConfirmationBlocks, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should define the transactionBlockTimeout object property if passed over the options","suites":["instantiation"],"updatePoint":{"line":389,"column":92,"index":11617},"line":389,"code":"    it('should define the transactionBlockTimeout object property if passed over the options', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionBlockTimeout: 0\n      }, provider);\n      assert.equal(contract.transactionBlockTimeout, 0);\n      assert.equal(contract.options.transactionBlockTimeout, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update the transactionBlockTimeout property in the options object","suites":["instantiation"],"updatePoint":{"line":397,"column":80,"index":11996},"line":397,"code":"    it('should update the transactionBlockTimeout property in the options object', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, {\n        transactionBlockTimeout: 1\n      }, provider);\n      contract.transactionBlockTimeout = 0;\n      assert.equal(contract.options.transactionBlockTimeout, 0);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":".clone() should properly clone the contract instance","suites":["instantiation"],"updatePoint":{"line":405,"column":60,"index":12342},"line":405,"code":"    it('.clone() should properly clone the contract instance', function () {\n      var provider = new FakeIpcProvider();\n      var fromAddress = '0xDDfFD0A3C12e86b4b5f39B213f7e19d048276daE';\n      var abi2 = [{\n        \"name\": \"ballerRo\",\n        \"type\": \"function\",\n        \"inputs\": [{\n          \"name\": \"So\",\n          \"type\": \"address\"\n        }],\n        \"constant\": true,\n        \"outputs\": [{\n          \"name\": \"man\",\n          \"type\": \"uint256\"\n        }]\n      }];\n      var contract1 = contractFactory(abi, address, {\n        gas: 1222,\n        gasPrice: 12345678,\n        from: fromAddress\n      }, provider);\n      var contract2 = contract1.clone();\n      assert.equal(contract1.options.address, address);\n      assert.equal(contract1.options.gas, 1222);\n      assert.equal(contract1.options.gasPrice, '12345678');\n      assert.deepEqual(contract1.options.jsonInterface, abi);\n      contract2.options.jsonInterface = abi2;\n      contract2.options.address = fromAddress;\n      contract2.options.gas = 300;\n      contract2.options.gasPrice = '234234';\n      assert.isFunction(contract2.methods.ballerRo);\n      assert.equal(contract2.options.address, fromAddress);\n      assert.equal(contract2.options.gas, 300);\n      assert.equal(contract2.options.gasPrice, '234234');\n      assert.deepEqual(contract2.options.jsonInterface, abi2);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should assign a provider to a new instance without modifying old instance","suites":["provider assignment"],"updatePoint":{"line":443,"column":81,"index":13769},"line":443,"code":"    it('should assign a provider to a new instance without modifying old instance', function () {\n      var provider1 = new FakeIpcProvider();\n      var provider2 = new FakeHttpProvider();\n      var contract1 = getStandAloneContractInstance(abi, address, provider1);\n      var contract2 = getStandAloneContractInstance(abi, address, provider2);\n      assert.deepEqual(contract1.currentProvider, provider1);\n      assert.deepEqual(contract2.currentProvider, provider2);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_encodeEventABI should return the encoded event object without topics","suites":["internal method"],"updatePoint":{"line":453,"column":77,"index":14292},"line":453,"code":"    it('_encodeEventABI should return the encoded event object without topics', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, provider);\n      var result = contract._encodeEventABI({\n        signature: '0x1234',\n        \"name\": \"Changed\",\n        \"type\": \"event\",\n        \"inputs\": [{\n          \"name\": \"from\",\n          \"type\": \"address\",\n          \"indexed\": true\n        }, {\n          \"name\": \"amount\",\n          \"type\": \"uint256\",\n          \"indexed\": true\n        }, {\n          \"name\": \"t1\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }, {\n          \"name\": \"t2\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }]\n      });\n      assert.deepEqual(result, {\n        address: addressLowercase,\n        topics: ['0x1234', null, null]\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_encodeEventABI should return the encoded event object with topics","suites":["internal method"],"updatePoint":{"line":483,"column":74,"index":15146},"line":483,"code":"    it('_encodeEventABI should return the encoded event object with topics', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, provider);\n      var result = contract._encodeEventABI({\n        signature: '0x1234',\n        \"name\": \"Changed\",\n        \"type\": \"event\",\n        \"inputs\": [{\n          \"name\": \"from\",\n          \"type\": \"address\",\n          \"indexed\": true\n        }, {\n          \"name\": \"amount\",\n          \"type\": \"uint256\",\n          \"indexed\": true\n        }, {\n          \"name\": \"t1\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }, {\n          \"name\": \"t2\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }]\n      }, {\n        filter: {\n          amount: 12\n        },\n        fromBlock: 2\n      });\n      assert.deepEqual(result, {\n        address: addressLowercase,\n        fromBlock: '0x2',\n        topics: ['0x1234', null, '0x000000000000000000000000000000000000000000000000000000000000000c']\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_encodeEventABI should return the encoded event object with topics and multiple choices","suites":["internal method"],"updatePoint":{"line":519,"column":95,"index":16193},"line":519,"code":"    it('_encodeEventABI should return the encoded event object with topics and multiple choices', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, provider);\n      var result = contract._encodeEventABI({\n        signature: '0x1234',\n        \"name\": \"Changed\",\n        \"type\": \"event\",\n        \"inputs\": [{\n          \"name\": \"test\",\n          \"type\": \"uint256\",\n          \"indexed\": true\n        }, {\n          \"name\": \"from\",\n          \"type\": \"address\",\n          \"indexed\": true\n        }, {\n          \"name\": \"amount\",\n          \"type\": \"uint256\",\n          \"indexed\": true\n        }, {\n          \"name\": \"t1\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }, {\n          \"name\": \"t2\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }]\n      }, {\n        filter: {\n          amount: [12, 10],\n          from: address\n        },\n        fromBlock: 2\n      });\n      assert.deepEqual(result, {\n        address: addressLowercase,\n        fromBlock: '0x2',\n        topics: ['0x1234', null, '0x000000000000000000000000' + addressLowercase.replace('0x', ''), ['0x000000000000000000000000000000000000000000000000000000000000000c', '0x000000000000000000000000000000000000000000000000000000000000000a']]\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_decodeEventABI should return the decoded event object with topics","suites":["internal method"],"updatePoint":{"line":560,"column":74,"index":17483},"line":560,"code":"    it('_decodeEventABI should return the decoded event object with topics', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      var contract = contractFactory(abi, address, provider);\n      var result = contract._decodeEventABI.call({\n        signature: sha3(signature),\n        \"name\": \"Changed\",\n        \"type\": \"event\",\n        \"inputs\": [{\n          \"name\": \"from\",\n          \"type\": \"address\",\n          \"indexed\": true\n        }, {\n          \"name\": \"amount\",\n          \"type\": \"uint256\",\n          \"indexed\": true\n        }, {\n          \"name\": \"t1\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }, {\n          \"name\": \"t2\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }]\n      }, {\n        address: address,\n        topics: [sha3(signature), '0x000000000000000000000000' + address.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n        blockNumber: '0x3',\n        transactionHash: '0x1234',\n        blockHash: '0x1345',\n        transactionIndex: '0x0',\n        logIndex: '0x4',\n        data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n      });\n      assert.equal(result.blockNumber, 3);\n      assert.equal(result.blockHash, '0x1345');\n      assert.equal(result.logIndex, 4);\n      assert.equal(result.id, 'log_9ff24cb4');\n      assert.equal(result.transactionIndex, 0);\n      assert.equal(result.returnValues.from, address);\n      assert.equal(result.returnValues.amount, 1);\n      assert.equal(result.returnValues.t1, 1);\n      assert.equal(result.returnValues.t2, 8);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_decodeMethodReturn should return the decoded values","suites":["internal method"],"updatePoint":{"line":605,"column":60,"index":19212},"line":605,"code":"    it('_decodeMethodReturn should return the decoded values', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      var contract = contractFactory(abi, address, provider);\n      var result = contract._decodeMethodReturn([{\n        \"name\": \"myAddress\",\n        \"type\": \"address\"\n      }, {\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }], '0x000000000000000000000000' + address.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a');\n      assert.isObject(result);\n      assert.equal(result[0], address);\n      assert.equal(result.myAddress, address);\n      assert.equal(result[1], 10);\n      assert.equal(result.value, 10);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_decodeMethodReturn should return a single decoded value","suites":["internal method"],"updatePoint":{"line":622,"column":64,"index":19970},"line":622,"code":"    it('_decodeMethodReturn should return a single decoded value', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      var contract = contractFactory(abi, address, provider);\n      var result = contract._decodeMethodReturn([{\n        \"name\": \"myAddress\",\n        \"type\": \"address\"\n      }], '0x000000000000000000000000' + address.replace('0x', ''));\n      assert.equal(result, address);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_executeMethod as instantSealEngine should sendTransaction and check for receipts","suites":["internal method"],"updatePoint":{"line":632,"column":89,"index":20468},"line":632,"code":"    it('_executeMethod as instantSealEngine should sendTransaction and check for receipts', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a',\n          from: address2,\n          to: addressLowercase,\n          gasPrice: \"0x5af3107a4000\"\n        }]);\n      });\n      provider.injectResult('0x1234000000000000000000000000000000000000000000000000000000056789');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      // with instant seal we get the receipt right away\n      provider.injectResult({\n        contractAddress: addressLowercase,\n        cumulativeGasUsed: '0xa',\n        transactionIndex: '0x3',\n        blockNumber: '0xa',\n        blockHash: '0xbf1234',\n        gasUsed: '0x0'\n      });\n      var contract = contractFactory(abi, address, provider);\n      var txObject = {};\n      txObject._method = {\n        signature: signature,\n        \"name\": \"send\",\n        \"type\": \"function\",\n        \"inputs\": [{\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }],\n        \"outputs\": []\n      };\n      txObject._parent = contract;\n      txObject.encodeABI = contract._encodeMethodABI.bind(txObject);\n      txObject.arguments = [address, 10];\n      var deploy = contract._executeMethod.call(txObject, 'send', {\n        from: address2,\n        gasPrice: '100000000000000'\n      }, function (err, result) {\n        // tx hash\n        assert.equal(result, '0x1234000000000000000000000000000000000000000000000000000000056789');\n      }).on('receipt', function (result) {\n        assert.deepEqual(result, {\n          contractAddress: address,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xbf1234',\n          gasUsed: 0\n        });\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_executeMethod should sendTransaction and check for receipts","suites":["internal method"],"updatePoint":{"line":694,"column":68,"index":22851},"line":694,"code":"    it('_executeMethod should sendTransaction and check for receipts', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a',\n          from: address2,\n          to: addressLowercase,\n          gasPrice: \"0x5af3107a4000\"\n        }]);\n      });\n      provider.injectResult('0x1234000000000000000000000000000000000000000000000000000000056789');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult('0x1234567');\n\n      // fake newBlock\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x1234567',\n          result: {\n            blockNumber: '0x10'\n          }\n        }\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult({\n        contractAddress: addressLowercase,\n        cumulativeGasUsed: '0xa',\n        transactionIndex: '0x3',\n        blockNumber: '0xa',\n        blockHash: '0xbf1234',\n        gasUsed: '0x0'\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_unsubscribe');\n        assert.deepEqual(payload.params, ['0x1234567']);\n      });\n      provider.injectResult('0x321');\n      var contract = contractFactory(abi, address, provider);\n      var txObject = {};\n      txObject._method = {\n        signature: signature,\n        \"name\": \"send\",\n        \"type\": \"function\",\n        \"inputs\": [{\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }],\n        \"outputs\": []\n      };\n      txObject._parent = contract;\n      txObject.encodeABI = contract._encodeMethodABI.bind(txObject);\n      txObject.arguments = [address, 10];\n      var deploy = contract._executeMethod.call(txObject, 'send', {\n        from: address2,\n        gasPrice: '100000000000000'\n      }, function (err, result) {\n        // tx hash\n        assert.equal(result, '0x1234000000000000000000000000000000000000000000000000000000056789');\n      }).on('receipt', function (result) {\n        assert.deepEqual(result, {\n          contractAddress: address,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xbf1234',\n          gasUsed: 0\n        });\n        done();\n      }).catch(console.log);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"_executeMethod should call and return values","suites":["internal method"],"updatePoint":{"line":781,"column":52,"index":26125},"line":781,"code":"    it('_executeMethod should call and return values', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('balance(address)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          from: address2,\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x000000000000000000000000000000000000000000000000000000000000000a');\n      var contract = contractFactory(abi, address, provider);\n      var txObject = {};\n      txObject._method = {\n        signature: signature,\n        \"name\": \"balance\",\n        \"type\": \"function\",\n        \"inputs\": [{\n          \"name\": \"who\",\n          \"type\": \"address\"\n        }],\n        \"constant\": true,\n        \"outputs\": [{\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }]\n      };\n      txObject._parent = contract;\n      txObject.encodeABI = contract._encodeMethodABI.bind(txObject);\n      txObject.arguments = [address];\n      var deploy = contract._executeMethod.call(txObject, 'call', {\n        from: address2\n      }, function (err, result) {\n        assert.equal(result, '10');\n      }).then(function (result) {\n        assert.equal(result, '10');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create event subscription","suites":["event"],"updatePoint":{"line":823,"column":40,"index":27575},"line":823,"code":"    it('should create event subscription', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), null],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x123');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n        done();\n      });\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x123',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      var contract = contractFactory(abi, address, provider);\n      var event = contract.events.Changed({\n        filter: {\n          from: address\n        }\n      }, function (err, result, sub) {\n        assert.equal(result.returnValues.from, address);\n        assert.equal(result.returnValues.amount, 1);\n        assert.equal(result.returnValues.t1, 1);\n        assert.equal(result.returnValues.t2, 8);\n        sub.unsubscribe();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create event from the events object and use the fromBlock option","suites":["event"],"updatePoint":{"line":868,"column":79,"index":29502},"line":868,"code":"    it('should create event from the events object and use the fromBlock option', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_getLogs');\n      });\n      provider.injectResult([{\n        address: addressLowercase,\n        topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000002'],\n        blockNumber: '0x3',\n        transactionHash: '0x1234',\n        blockHash: '0x1345',\n        logIndex: '0x4',\n        data: '0x0000000000000000000000000000000000000000000000000000000000000002' + '0000000000000000000000000000000000000000000000000000000000000009'\n      }, {\n        address: addressLowercase,\n        topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000003'],\n        blockNumber: '0x4',\n        transactionHash: '0x1235',\n        blockHash: '0x1346',\n        logIndex: '0x1',\n        data: '0x0000000000000000000000000000000000000000000000000000000000000004' + '0000000000000000000000000000000000000000000000000000000000000005'\n      }]);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), null],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x321');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n        done();\n      });\n      provider.injectResult(true);\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      var contract = contractFactory(abi, address, provider);\n      var count = 0;\n      var event = contract.events.Changed({\n        fromBlock: 0,\n        filter: {\n          from: address\n        }\n      }).on('data', function (result) {\n        count++;\n        if (count === 1) {\n          assert.equal(result.returnValues.from, address);\n          assert.equal(result.returnValues.amount, 2);\n          assert.equal(result.returnValues.t1, 2);\n          assert.equal(result.returnValues.t2, 9);\n        }\n        if (count === 2) {\n          assert.equal(result.returnValues.from, address);\n          assert.equal(result.returnValues.amount, 3);\n          assert.equal(result.returnValues.t1, 4);\n          assert.equal(result.returnValues.t2, 5);\n        }\n        if (count === 3) {\n          assert.equal(result.returnValues.from, address);\n          assert.equal(result.returnValues.amount, 1);\n          assert.equal(result.returnValues.t1, 1);\n          assert.equal(result.returnValues.t2, 8);\n          event.unsubscribe();\n        }\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create event from the events object using a signature and callback","suites":["event"],"updatePoint":{"line":952,"column":81,"index":33249},"line":952,"code":"    it('should create event from the events object using a signature and callback', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), null],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x321');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n        done();\n      });\n      provider.injectResult(true);\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      var contract = contractFactory(abi, address, provider);\n      var event = contract.events['0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651']({\n        filter: {\n          from: address\n        }\n      }, function (err, result) {\n        assert.equal(result.returnValues.from, address);\n        assert.equal(result.returnValues.amount, 1);\n        assert.equal(result.returnValues.t1, 1);\n        assert.equal(result.returnValues.t2, 8);\n        event.unsubscribe();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create event from the events object using event name and parameters","suites":["event"],"updatePoint":{"line":998,"column":82,"index":35273},"line":998,"code":"    it('should create event from the events object using event name and parameters', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), null],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x321');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n        done();\n      });\n      provider.injectResult(true);\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      var contract = contractFactory(abi, address, provider);\n      var event = contract.events[signature]({\n        filter: {\n          from: address\n        }\n      }, function (err, result) {\n        assert.equal(result.returnValues.from, address);\n        assert.equal(result.returnValues.amount, 1);\n        assert.equal(result.returnValues.t1, 1);\n        assert.equal(result.returnValues.t2, 8);\n        event.unsubscribe();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create event using the  function and unsubscribe after one log received","suites":["event"],"updatePoint":{"line":1044,"column":86,"index":37242},"line":1044,"code":"    it('should create event using the  function and unsubscribe after one log received', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), null],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x321');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n      });\n      provider.injectResult(true);\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      var count = 1;\n      var contract = contractFactory(abi, address, provider);\n      contract.once('Changed', {\n        filter: {\n          from: address\n        }\n      }, function (err, result, sub) {\n        assert.equal(result.returnValues.from, address);\n        assert.equal(result.returnValues.amount, 1);\n        assert.equal(result.returnValues.t1, 1);\n        assert.equal(result.returnValues.t2, 8);\n        assert.deepEqual(sub.options.requestManager.subscriptions, new Map());\n        assert.equal(count, 1);\n        count++;\n        setTimeout(done, 10);\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create event using the  function and unsubscribe after one log received when no options are provided","suites":["event"],"updatePoint":{"line":1108,"column":115,"index":40044},"line":1108,"code":"    it('should create event using the  function and unsubscribe after one log received when no options are provided', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [sha3(signature), null, null],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x321');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n      });\n      provider.injectResult(true);\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      var count = 1;\n      var contract = contractFactory(abi, address, provider);\n      contract.once('Changed', function (err, result, sub) {\n        assert.equal(result.returnValues.from, address);\n        assert.equal(result.returnValues.amount, 1);\n        assert.equal(result.returnValues.t1, 1);\n        assert.equal(result.returnValues.t2, 8);\n        assert.deepEqual(sub.options.requestManager.subscriptions, new Map());\n        assert.equal(count, 1);\n        count++;\n        setTimeout(done, 10);\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should throw an error when using the once() function and no callback is provided","suites":["event"],"updatePoint":{"line":1168,"column":88,"index":42695},"line":1168,"code":"    it('should throw an error when using the once() function and no callback is provided', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, provider);\n      assert.throws(contract.once.bind(contract, 'Changed', {\n        filter: {\n          from: address\n        }\n      }));\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create event subscription and fire the changed event, if log.removed = true","suites":["event"],"updatePoint":{"line":1177,"column":90,"index":43041},"line":1177,"code":"    it('should create event subscription and fire the changed event, if log.removed = true', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), null],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x321');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n      });\n      provider.injectResult(true);\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x321',\n          result: {\n            address: addressLowercase,\n            topics: [sha3(signature), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            removed: true,\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      var count = 1;\n      var contract = contractFactory(abi, address, provider);\n      contract.events.Changed({\n        filter: {\n          from: address\n        }\n      }).on('data', function (result) {\n        assert.equal(result.returnValues.from, address);\n        assert.equal(result.returnValues.amount, 1);\n        assert.equal(result.returnValues.t1, 1);\n        assert.equal(result.returnValues.t2, 8);\n        assert.equal(count, 1);\n        count++;\n      }).on('changed', function (result) {\n        assert.equal(result.returnValues.from, address);\n        assert.equal(result.returnValues.amount, 1);\n        assert.equal(result.returnValues.t1, 1);\n        assert.equal(result.returnValues.t2, 8);\n        assert.equal(result.removed, true);\n        assert.equal(count, 2);\n      });\n      setTimeout(done, 60);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should create all event filter and receive two logs","suites":["event"],"updatePoint":{"line":1248,"column":59,"index":46060},"line":1248,"code":"    it('should create all event filter and receive two logs', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'Changed(address,uint256,uint256,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params[1], {\n          topics: [],\n          address: addressLowercase\n        });\n      });\n      provider.injectResult('0x333');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_unsubscribe');\n        done();\n      });\n      provider.injectResult(true);\n      var contract = contractFactory(abi, address, provider);\n      var count = 0;\n      var event = contract.events.allEvents(function (err, result) {\n        count++;\n        if (count === 1) {\n          assert.equal(result.returnValues.from, address);\n          assert.equal(result.returnValues.amount, 1);\n          assert.equal(result.returnValues.t1, 1);\n          assert.equal(result.returnValues.t2, 8);\n        }\n        if (count === 2) {\n          assert.equal(result.returnValues.addressFrom, address);\n          assert.equal(result.returnValues.value, 2);\n          assert.equal(result.returnValues.t1, 5);\n          event.unsubscribe();\n        }\n      });\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x333',\n          result: {\n            address: address,\n            topics: [sha3('Changed(address,uint256,uint256,uint256)'), '0x000000000000000000000000' + address.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n          }\n        }\n      });\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x333',\n          result: {\n            address: address,\n            topics: [sha3('Unchanged(uint256,address,uint256)'), '0x0000000000000000000000000000000000000000000000000000000000000002', '0x000000000000000000000000' + address.replace('0x', '')],\n            blockNumber: '0x3',\n            transactionHash: '0x1234',\n            blockHash: '0x1345',\n            logIndex: '0x4',\n            data: '0x0000000000000000000000000000000000000000000000000000000000000005'\n          }\n        }\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should change the address","suites":["with methods"],"updatePoint":{"line":1316,"column":33,"index":48798},"line":1316,"code":"    it('should change the address', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      var contract = contractFactory(abi, address, provider);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase,\n          from: address2\n        }, 'latest']);\n      });\n      contract.methods.balance(address).call({\n        from: address2\n      });\n\n      // change address\n      contract.options.address = address2;\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: address2,\n          from: addressLowercase\n        }, 'latest']);\n      });\n      contract.methods.balance(address).call({\n        from: address\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should reset functions when resetting json interface","suites":["with methods"],"updatePoint":{"line":1346,"column":60,"index":49956},"line":1346,"code":"    it('should reset functions when resetting json interface', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, provider);\n      assert.isFunction(contract.methods.mySend);\n      assert.isFunction(contract.events.Changed);\n      contract.options.jsonInterface = [{\n        \"name\": \"otherSend\",\n        \"type\": \"function\",\n        \"inputs\": [{\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }],\n        \"outputs\": []\n      }, {\n        \"name\": \"Unchanged\",\n        \"type\": \"event\",\n        \"inputs\": [{\n          \"name\": \"value\",\n          \"type\": \"uint256\",\n          \"indexed\": true\n        }, {\n          \"name\": \"addressFrom\",\n          \"type\": \"address\",\n          \"indexed\": true\n        }, {\n          \"name\": \"t1\",\n          \"type\": \"uint256\",\n          \"indexed\": false\n        }]\n      }];\n      assert.isFunction(contract.methods.otherSend);\n      assert.isFunction(contract.events.Unchanged);\n      assert.isUndefined(contract.methods.mySend);\n      assert.isUndefined(contract.events.Changed);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should encode a function call","suites":["with methods"],"updatePoint":{"line":1384,"column":37,"index":51079},"line":1384,"code":"    it('should encode a function call', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      var contract = contractFactory(abi, provider);\n      var result = contract.methods.balance(address).encodeABI();\n      assert.equal(result, sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''));\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should encode a constructor call with pre set data","suites":["with methods"],"updatePoint":{"line":1391,"column":58,"index":51491},"line":1391,"code":"    it('should encode a constructor call with pre set data', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      var contract = contractFactory(abi, {\n        data: '0x1234'\n      }, provider);\n      var result = contract.deploy({\n        arguments: [address, 10]\n      }).encodeABI();\n      assert.equal(result, '0x1234' + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a');\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should encode a constructor call with passed data","suites":["with methods"],"updatePoint":{"line":1402,"column":57,"index":52011},"line":1402,"code":"    it('should encode a constructor call with passed data', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      var contract = contractFactory(abi, provider);\n      var result = contract.deploy({\n        arguments: [address, 10],\n        data: '0x1234'\n      }).encodeABI();\n      assert.equal(result, '0x1234' + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a');\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should estimate a function","suites":["with methods"],"updatePoint":{"line":1412,"column":34,"index":52498},"line":1412,"code":"    it('should estimate a function', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_estimateGas');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase\n        }]);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000032');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.balance(address).estimateGas(function (err, res) {\n        assert.deepEqual(res, 50);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should estimate the constructor","suites":["with methods"],"updatePoint":{"line":1429,"column":39,"index":53268},"line":1429,"code":"    it('should estimate the constructor', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_estimateGas');\n        assert.deepEqual(payload.params, [{\n          data: '0x1234000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000032'\n        }]);\n      });\n      provider.injectResult('0x000000000000000000000000000000000000000000000000000000000000000a');\n      var contract = contractFactory(abi, address, {\n        data: '0x1234'\n      }, provider);\n      contract.deploy({\n        arguments: [address, 50]\n      }).estimateGas(function (err, res) {\n        assert.deepEqual(res, 10);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should send with many parameters","suites":["with methods"],"updatePoint":{"line":1449,"column":40,"index":54111},"line":1449,"code":"    it('should send with many parameters', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: '0x8708f4a12454534500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000c30786666323435343533343500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ff24545345000000000000000000000000000000000000000000000000000000534500000000000000000000000000000000000000000000000000000000000045450000000000000000000000000000000000000000000000000000000000004533450000000000000000000000000000000000000000000000000000000000',\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x000000000000000000000000' + addressLowercase.replace('0x', ''));\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.hasALotOfParams(\"0x24545345\", \"0xff24545345\", [\"0xff24545345\", \"0x5345\", \"0x4545\", \"0x453345\"]).call(function (err, res) {\n        assert.deepEqual(res, address);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should send overload functions with zero parameters","suites":["with methods"],"updatePoint":{"line":1465,"column":59,"index":55494},"line":1465,"code":"    it('should send overload functions with zero parameters', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: '0xbb853481',\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000005');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.overloadedFunction().call(function (err, res) {\n        assert.equal(res, 5);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should send overload functions with one parameters","suites":["with methods"],"updatePoint":{"line":1481,"column":58,"index":56154},"line":1481,"code":"    it('should send overload functions with one parameters', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: '0x533678270000000000000000000000000000000000000000000000000000000000000006',\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000006');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.overloadedFunction(6).call(function (err, res) {\n        assert.equal(res, 6);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should call constant function","suites":["with methods"],"updatePoint":{"line":1497,"column":37,"index":56858},"line":1497,"code":"    it('should call constant function', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000032');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.balance(address).call(function (err, res) {\n        assert.deepEqual(res, '50');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should call constant function with default block","suites":["with methods"],"updatePoint":{"line":1514,"column":56,"index":57643},"line":1514,"code":"    it('should call constant function with default block', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase\n        }, '0xb']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000032');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.balance(address).call(11).then(function (r) {\n        assert.deepEqual(r, '50');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should call constant concurrently","suites":["with methods"],"updatePoint":{"line":1531,"column":41,"index":58410},"line":1531,"code":"    it('should call constant concurrently', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('balance(address)').slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x000000000000000000000000000000000000000000000000000000000000000a');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('owner()').slice(0, 10),\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x00000000000000000000000011f4d0a3c12e86b4b5f39b213f7e19d048276dae');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('getStr()').slice(0, 10),\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000');\n      var contract = contractFactory(abi, address, provider);\n      Promise.all([contract.methods.balance(address).call(), contract.methods.owner().call(), contract.methods.getStr().call()]).then(results => {\n        assert.deepEqual(results[0], '10');\n        assert.deepEqual(results[1], '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe');\n        assert.deepEqual(results[2], 'Hello!%!');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should return an error when returned string is 0x","suites":["with methods"],"updatePoint":{"line":1565,"column":57,"index":60225},"line":1565,"code":"    it('should return an error when returned string is 0x', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'getStr()';\n      var contract = contractFactory(abi, address, provider);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10),\n          to: addressLowercase,\n          from: address2\n        }, 'latest']);\n      });\n      provider.injectResult('0x');\n      contract.methods.getStr().call({\n        from: address2\n      }, function (err, result) {\n        // console.log(err, result)\n        assert.isTrue(err instanceof Error);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should return an empty string when 0x0","suites":["with methods"],"updatePoint":{"line":1586,"column":46,"index":60961},"line":1586,"code":"    it('should return an empty string when 0x0', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'getStr()';\n      var contract = contractFactory(abi, address, provider);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10),\n          to: addressLowercase,\n          from: address2\n        }, 'latest']);\n      });\n      provider.injectResult('0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000');\n      contract.methods.getStr().call({\n        from: address2\n      }, function (err, result) {\n        assert.equal(result, '');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction and check for receipts with formatted logs","suites":["with methods"],"updatePoint":{"line":1606,"column":73,"index":61805},"line":1606,"code":"    it('should sendTransaction and check for receipts with formatted logs', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a',\n          from: address2,\n          to: addressLowercase,\n          gasPrice: \"0x1369ed97fb71\"\n        }]);\n      });\n      provider.injectResult('0x1234000000000000000000000000000000000000000000000000000000056789');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult('0x1234567');\n\n      // fake newBlock\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x1234567',\n          result: {\n            blockNumber: '0x10'\n          }\n        }\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult({\n        contractAddress: null,\n        cumulativeGasUsed: '0xa',\n        transactionIndex: '0x3',\n        transactionHash: '0x1234',\n        blockNumber: '0xa',\n        blockHash: '0x1234',\n        gasUsed: '0x0',\n        logs: [{\n          address: address,\n          topics: [sha3('Unchanged(uint256,address,uint256)'), '0x0000000000000000000000000000000000000000000000000000000000000002', '0x000000000000000000000000' + addressLowercase.replace('0x', '')],\n          blockNumber: '0xa',\n          transactionHash: '0x1234',\n          transactionIndex: '0x0',\n          blockHash: '0x1345',\n          logIndex: '0x4',\n          data: '0x0000000000000000000000000000000000000000000000000000000000000005'\n        }, {\n          address: address,\n          topics: [sha3('Changed(address,uint256,uint256,uint256)'), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n          blockNumber: '0xa',\n          transactionHash: '0x1234',\n          transactionIndex: '0x0',\n          blockHash: '0x1345',\n          logIndex: '0x4',\n          data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n        }]\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_unsubscribe');\n        assert.deepEqual(payload.params, ['0x1234567']);\n      });\n      provider.injectResult('0x321');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 10).send({\n        from: address2,\n        gasPrice: '21345678654321'\n      }).on('receipt', function (receipt) {\n        // console.log(receipt);\n        // console.log(receipt.events[0].raw);\n        // console.log(receipt.events[1].raw);\n\n        // wont throw if it errors ?!\n        assert.deepEqual(receipt, {\n          contractAddress: null,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          transactionHash: '0x1234',\n          blockNumber: 10,\n          blockHash: '0x1234',\n          gasUsed: 0,\n          events: {\n            Unchanged: {\n              address: address,\n              blockNumber: 10,\n              transactionHash: '0x1234',\n              blockHash: '0x1345',\n              logIndex: 4,\n              id: 'log_9ff24cb4',\n              transactionIndex: 0,\n              returnValues: {\n                0: '2',\n                1: address,\n                2: '5',\n                value: '2',\n                addressFrom: address,\n                t1: '5'\n              },\n              event: 'Unchanged',\n              signature: \"0xf359668f205d0b5cfdc20d11353e05f633f83322e96f15486cbb007d210d66e5\",\n              raw: {\n                topics: ['0xf359668f205d0b5cfdc20d11353e05f633f83322e96f15486cbb007d210d66e5', '0x0000000000000000000000000000000000000000000000000000000000000002', '0x000000000000000000000000' + addressLowercase.replace('0x', '')],\n                data: '0x0000000000000000000000000000000000000000000000000000000000000005'\n              }\n            },\n            Changed: {\n              address: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n              blockNumber: 10,\n              transactionHash: '0x1234',\n              blockHash: '0x1345',\n              logIndex: 4,\n              id: 'log_9ff24cb4',\n              transactionIndex: 0,\n              returnValues: {\n                0: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                1: '1',\n                2: '1',\n                3: '8',\n                from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                amount: '1',\n                t1: '1',\n                t2: '8'\n              },\n              event: 'Changed',\n              signature: \"0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651\",\n              raw: {\n                topics: ['0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651', '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n                data: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008'\n              }\n            }\n          }\n        });\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction and check for receipts with formatted logs when multiple of same event","suites":["with methods"],"updatePoint":{"line":1749,"column":101,"index":67961},"line":1749,"code":"    it('should sendTransaction and check for receipts with formatted logs when multiple of same event', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a',\n          from: address2,\n          to: addressLowercase,\n          gasPrice: \"0x1369ed97fb71\"\n        }]);\n      });\n      provider.injectResult('0x1234000000000000000000000000000000000000000000000000000000056789');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult('0x1234567');\n\n      // fake newBlock\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x1234567',\n          result: {\n            blockNumber: '0x10'\n          }\n        }\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult({\n        contractAddress: null,\n        cumulativeGasUsed: '0xa',\n        transactionIndex: '0x3',\n        transactionHash: '0x1234',\n        blockNumber: '0xa',\n        blockHash: '0x1234',\n        gasUsed: '0x0',\n        logs: [{\n          address: address,\n          topics: [sha3('Changed(address,uint256,uint256,uint256)'), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n          blockNumber: '0xa',\n          transactionHash: '0x1234',\n          transactionIndex: '0x0',\n          blockHash: '0x1345',\n          logIndex: '0x4',\n          data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n        }, {\n          address: address,\n          topics: [sha3('Changed(address,uint256,uint256,uint256)'), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000002'],\n          blockNumber: '0xa',\n          transactionHash: '0x1234',\n          transactionIndex: '0x0',\n          blockHash: '0x1345',\n          logIndex: '0x5',\n          data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n        }]\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_unsubscribe');\n        assert.deepEqual(payload.params, ['0x1234567']);\n      });\n      provider.injectResult('0x321');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 10).send({\n        from: address2,\n        gasPrice: '21345678654321'\n      }).on('receipt', function (receipt) {\n        // wont throw if it errors ?! nope: causes a timeout\n        assert.deepEqual(receipt, {\n          contractAddress: null,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          transactionHash: '0x1234',\n          blockNumber: 10,\n          blockHash: '0x1234',\n          gasUsed: 0,\n          events: {\n            Changed: [{\n              address: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n              blockNumber: 10,\n              transactionHash: '0x1234',\n              blockHash: '0x1345',\n              logIndex: 4,\n              id: 'log_9ff24cb4',\n              transactionIndex: 0,\n              returnValues: {\n                0: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                1: '1',\n                2: '1',\n                3: '8',\n                from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                amount: '1',\n                t1: '1',\n                t2: '8'\n              },\n              event: 'Changed',\n              signature: \"0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651\",\n              raw: {\n                topics: ['0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651', '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n                data: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008'\n              }\n            }, {\n              address: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n              blockNumber: 10,\n              transactionHash: '0x1234',\n              blockHash: '0x1345',\n              logIndex: 5,\n              id: 'log_8b8a2b7f',\n              transactionIndex: 0,\n              returnValues: {\n                0: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                1: '2',\n                2: '1',\n                3: '8',\n                from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                amount: '2',\n                t1: '1',\n                t2: '8'\n              },\n              event: 'Changed',\n              signature: \"0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651\",\n              raw: {\n                topics: ['0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651', '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000002'],\n                data: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008'\n              }\n            }]\n          }\n        });\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction and check for receipts with formatted logs using the HTTP provider","suites":["with methods"],"updatePoint":{"line":1889,"column":97,"index":74278},"line":1889,"code":"    it('should sendTransaction and check for receipts with formatted logs using the HTTP provider', function (done) {\n      var provider = new FakeHttpProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a',\n          from: address2,\n          to: addressLowercase,\n          gasPrice: \"0x1369ed97fb71\"\n        }]);\n      });\n      provider.injectResult('0x1234000000000000000000000000000000000000000000000000000000056789');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult({\n        contractAddress: null,\n        cumulativeGasUsed: '0xa',\n        transactionIndex: '0x3',\n        transactionHash: '0x1234',\n        blockNumber: '0xa',\n        blockHash: '0x43ffdd',\n        gasUsed: '0x0',\n        logs: [{\n          address: address,\n          topics: [sha3('Unchanged(uint256,address,uint256)'), '0x0000000000000000000000000000000000000000000000000000000000000002', '0x000000000000000000000000' + addressLowercase.replace('0x', '')],\n          blockNumber: '0xa',\n          transactionHash: '0x1234',\n          transactionIndex: '0x0',\n          blockHash: '0x1345',\n          logIndex: '0x4',\n          data: '0x0000000000000000000000000000000000000000000000000000000000000005'\n        }, {\n          address: address,\n          topics: [sha3('Changed(address,uint256,uint256,uint256)'), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n          blockNumber: '0xa',\n          transactionHash: '0x1234',\n          transactionIndex: '0x0',\n          blockHash: '0x1345',\n          logIndex: '0x4',\n          data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n        }]\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_unsubscribe');\n        assert.deepEqual(payload.params, ['0x1234567']);\n      });\n      provider.injectResult('0x321');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 10).send({\n        from: address2,\n        gasPrice: '21345678654321'\n      }).on('receipt', function (receipt) {\n        // console.log(receipt);\n        // console.log(receipt.events[0].raw);\n        // console.log(receipt.events[1].raw);\n\n        // wont throw if it errors ?!\n        assert.deepEqual(receipt, {\n          contractAddress: null,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          transactionHash: '0x1234',\n          blockNumber: 10,\n          blockHash: '0x43ffdd',\n          gasUsed: 0,\n          events: {\n            Unchanged: {\n              address: address,\n              blockNumber: 10,\n              transactionHash: '0x1234',\n              blockHash: '0x1345',\n              logIndex: 4,\n              id: 'log_9ff24cb4',\n              transactionIndex: 0,\n              returnValues: {\n                0: '2',\n                1: address,\n                2: '5',\n                value: '2',\n                addressFrom: address,\n                t1: '5'\n              },\n              event: 'Unchanged',\n              signature: '0xf359668f205d0b5cfdc20d11353e05f633f83322e96f15486cbb007d210d66e5',\n              raw: {\n                topics: ['0xf359668f205d0b5cfdc20d11353e05f633f83322e96f15486cbb007d210d66e5', '0x0000000000000000000000000000000000000000000000000000000000000002', '0x000000000000000000000000' + addressLowercase.replace('0x', '')],\n                data: '0x0000000000000000000000000000000000000000000000000000000000000005'\n              }\n            },\n            Changed: {\n              address: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n              blockNumber: 10,\n              transactionHash: '0x1234',\n              blockHash: '0x1345',\n              logIndex: 4,\n              id: 'log_9ff24cb4',\n              transactionIndex: 0,\n              returnValues: {\n                0: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                1: '1',\n                2: '1',\n                3: '8',\n                from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n                amount: '1',\n                t1: '1',\n                t2: '8'\n              },\n              event: 'Changed',\n              signature: '0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651',\n              raw: {\n                topics: ['0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651', '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n                data: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008'\n              }\n            }\n          }\n        });\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction and receive multiple confirmations","suites":["with methods"],"updatePoint":{"line":2016,"column":65,"index":79952},"line":2016,"code":"    it('should sendTransaction and receive multiple confirmations', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '000000000000000000000000000000000000000000000000000000000000000a',\n          from: address2,\n          to: addressLowercase,\n          gasPrice: \"0x1369ed97fb71\"\n        }]);\n      });\n      provider.injectResult('0x1234000000000000000000000000000000000000000000000000000000056789');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234000000000000000000000000000000000000000000000000000000056789']);\n      });\n      provider.injectResult({\n        contractAddress: null,\n        cumulativeGasUsed: '0xa',\n        transactionIndex: '0x3',\n        transactionHash: '0x1234',\n        blockNumber: '0xa',\n        blockHash: '0x1234',\n        gasUsed: '0x0',\n        logs: []\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult('0x1234567');\n      var contract = contractFactory(abi, address, provider);\n      var count = 0;\n      contract.methods.mySend(address, 10).send({\n        from: address2,\n        gasPrice: '21345678654321'\n      }).on('confirmation', function (confirmationNumber, receipt) {\n        count++;\n        if (count === 1) {\n          assert.deepEqual(receipt, {\n            contractAddress: null,\n            cumulativeGasUsed: 10,\n            transactionIndex: 3,\n            transactionHash: '0x1234',\n            blockNumber: 10,\n            blockHash: '0x1234',\n            gasUsed: 0,\n            events: {}\n          });\n          assert.equal(confirmationNumber, 0);\n        }\n        if (count === 2) {\n          assert.deepEqual(receipt, {\n            contractAddress: null,\n            cumulativeGasUsed: 10,\n            transactionIndex: 3,\n            transactionHash: '0x1234',\n            blockNumber: 10,\n            blockHash: '0x1234',\n            gasUsed: 0,\n            events: {}\n          });\n          assert.equal(confirmationNumber, 1);\n          done();\n        }\n      });\n\n      // fake newBlocks\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x1234567',\n          result: {\n            blockNumber: '0x10'\n          }\n        }\n      });\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x1234567',\n          result: {\n            blockNumber: '0x11'\n          }\n        }\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction to contract function","suites":["with methods"],"updatePoint":{"line":2104,"column":51,"index":82939},"line":2104,"code":"    it('should sendTransaction to contract function', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'mySend(address,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          from: addressLowercase,\n          to: addressLowercase,\n          gasPrice: \"0x369d1f7fd2\"\n        }]);\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 17).send({\n        from: address,\n        gasPrice: '234564321234'\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should throw error when trying to send ether to a non payable contract function","suites":["with methods"],"updatePoint":{"line":2122,"column":87,"index":83785},"line":2122,"code":"    it('should throw error when trying to send ether to a non payable contract function', function () {\n      var provider = new FakeIpcProvider();\n      var contract = contractFactory(abi, address, provider);\n      try {\n        contract.methods.myDisallowedSend(address, 17).send({\n          from: address,\n          value: 123\n        }).on('error', function (e) {\n          assert.isTrue(e instanceof Error, 'Should throw error');\n        }).catch(function (e) {\n          assert.isTrue(e instanceof Error, 'Should throw error');\n        });\n      } catch (e) {\n        assert.isTrue(e instanceof Error, 'Should throw error');\n      }\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should not throw error when trying to not send ether to a non payable contract function","suites":["with methods"],"updatePoint":{"line":2138,"column":95,"index":84440},"line":2138,"code":"    it('should not throw error when trying to not send ether to a non payable contract function', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'myDisallowedSend(address,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          from: addressLowercase,\n          to: addressLowercase,\n          gasPrice: \"0x1555757ee6b1\"\n        }]);\n        done();\n      });\n      var contract = contractFactory(abi, address, provider);\n      try {\n        contract.methods.myDisallowedSend(address, 17).send({\n          from: address,\n          gasPrice: '23456787654321'\n        }).on('error', function (e) {\n          assert.isFalse(e instanceof Error, 'Should not throw error');\n        }).catch(function (e) {\n          assert.isFalse(e instanceof Error, 'Should not throw error');\n        });\n      } catch (e) {\n        assert.isFalse(e instanceof Error, 'Should not throw error');\n      }\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction to contract function using the function namen incl. parameters","suites":["with methods"],"updatePoint":{"line":2165,"column":93,"index":85668},"line":2165,"code":"    it('should sendTransaction to contract function using the function namen incl. parameters', function () {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          from: addressLowercase,\n          to: addressLowercase,\n          gasPrice: \"0x1555757ee6b1\"\n        }]);\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods['mySend(address,uint256)'](address, 17).send({\n        from: address,\n        gasPrice: '23456787654321'\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction to contract function using the signature","suites":["with methods"],"updatePoint":{"line":2183,"column":71,"index":86522},"line":2183,"code":"    it('should sendTransaction to contract function using the signature', function () {\n      var provider = new FakeIpcProvider();\n      var signature = sha3('mySend(address,uint256)').slice(0, 10);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: signature + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          from: addressLowercase,\n          to: addressLowercase,\n          gasPrice: \"0x49504f80\"\n        }]);\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods[signature](address, 17).send({\n        from: address,\n        gasPrice: '1230000000'\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should throw when trying to create a tx object and wrong amount of params","suites":["with methods"],"updatePoint":{"line":2201,"column":81,"index":87362},"line":2201,"code":"    it('should throw when trying to create a tx object and wrong amount of params', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'mySend(address,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8',\n          value: '0x2710'\n        }]);\n        done();\n      });\n      var contract = contractFactory(abi, address, provider);\n      assert.throws(function () {\n        contract.methods.mySend(address);\n      });\n      setTimeout(done, 1);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should make a call with optional params","suites":["with methods"],"updatePoint":{"line":2222,"column":47,"index":88230},"line":2222,"code":"    it('should make a call with optional params', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      var count = 0;\n      provider.injectValidation(function (payload) {\n        count++;\n        if (count > 1) return;\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000032');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.balance(address).call({\n        from: address,\n        gas: 50000\n      }).then(function (r) {\n        assert.deepEqual(r, '50');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should explicitly make a call with optional params","suites":["with methods"],"updatePoint":{"line":2247,"column":58,"index":89194},"line":2247,"code":"    it('should explicitly make a call with optional params', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000032');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.balance(address).call({\n        from: address,\n        gas: 50000\n      }).then(function (r) {\n        assert.deepEqual(r, '50');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should explicitly make a call with optional params and defaultBlock","suites":["with methods"],"updatePoint":{"line":2269,"column":75,"index":90106},"line":2269,"code":"    it('should explicitly make a call with optional params and defaultBlock', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'balance(address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', ''),\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350'\n        }, '0xb']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000032');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.balance(address).call({\n        from: address,\n        gas: 50000\n      }, 11).then(function (r) {\n        assert.deepEqual(r, '50');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction with optional params","suites":["with methods"],"updatePoint":{"line":2291,"column":51,"index":90995},"line":2291,"code":"    it('should sendTransaction with optional params', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'mySend(address,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8',\n          value: '0x2710'\n        }]);\n        done();\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 17).send({\n        from: address,\n        gas: 50000,\n        gasPrice: 3000,\n        value: 10000\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should sendTransaction and fill in default gasPrice","suites":["with methods"],"updatePoint":{"line":2314,"column":59,"index":91910},"line":2314,"code":"    it('should sendTransaction and fill in default gasPrice', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'mySend(address,uint256)';\n      provider.injectResult({\n        baseFeePerGas: \"0x7\",\n        difficulty: \"0x6cd6be3a\",\n        extraData: \"0x796f75747562652e636f6d2f77617463683f763d6451773477395767586351\",\n        gasLimit: \"0x1c9c381\",\n        gasUsed: \"0x8dc073\",\n        hash: \"0x846880b1158f434884f3637802ed09bac77eafc35b5f03b881ac88ce38a54907\",\n        logsBloom: \"0x4020001000000000000000008000010000000000400200000001002140000008000000010000810020000840000204304000081000000b00400010000822200004200020020140000001000882000064000021303200020000400008800000000002202102000084010000090020a8000800002000000010000030300000000000000006001005000040080001010000010040018100004c0050004000000000420000000021000200000010020008100000004000080000000000000040000900080102004002000080210201081014004030200148101000002020108025000018020020102040000204240500010000002200048000401300080088000002\",\n        miner: \"0x86864f1edf10eaf105b1bdc6e9aa8232b4c6aa00\",\n        mixHash: \"0xa29afb1fa1aea9eeac72ff435a8fc420bbc1fa1be08223eb61f294ee32250bde\",\n        nonce: \"0x122af1a5ccd78f3b\",\n        number: \"0xa0d600\",\n        parentHash: \"0x28f49150e1fe6f245655925b290f59e707d1e5c646dadaa22937169433b30294\",\n        receiptsRoot: \"0xc97d4f9980d680053606318a5820261a1dccb556d1056b70f0d48fb384986be5\",\n        sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        size: \"0x2042\",\n        stateRoot: \"0x116981b10423133ade5bd44f03c54cc3c57f4467a1c3d4b0c6d8d33a76c361ad\",\n        timestamp: \"0x60dc24ec\",\n        totalDifficulty: \"0x78828f2d886cbb\",\n        transactions: [],\n        transactionsRoot: \"0x738f53f745d58169da93ebbd52cc49e0c979d6ca68a6513007b546b19ab78ba4\",\n        uncles: []\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getBlockByNumber');\n        assert.deepEqual(payload.params, ['latest', false]);\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_gasPrice');\n        assert.deepEqual(payload.params, []);\n      });\n      provider.injectResult('0x45656456456456');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          to: addressLowercase,\n          from: addressLowercase,\n          maxPriorityFeePerGas: '0x9502F900',\n          maxFeePerGas: '0x9502f90e'\n        }]);\n        done();\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 17).send({\n        from: address\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should explicitly sendTransaction with optional params","suites":["with methods"],"updatePoint":{"line":2365,"column":62,"index":94852},"line":2365,"code":"    it('should explicitly sendTransaction with optional params', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'mySend(address,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8',\n          value: '0x2710'\n        }]);\n        done();\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 17).send({\n        from: address,\n        gas: 50000,\n        gasPrice: 3000,\n        value: 10000\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should explicitly call sendTransaction with optional params and call callback without error","suites":["with methods"],"updatePoint":{"line":2388,"column":99,"index":95807},"line":2388,"code":"    it('should explicitly call sendTransaction with optional params and call callback without error', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'mySend(address,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8',\n          value: '0x2710'\n        }]);\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 17).send({\n        from: address,\n        gas: 50000,\n        gasPrice: 3000,\n        value: 10000\n      }, function (err) {\n        assert.equal(err, null);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should explicitly estimateGas with optional params","suites":["with methods"],"updatePoint":{"line":2413,"column":58,"index":96780},"line":2413,"code":"    it('should explicitly estimateGas with optional params', function () {\n      var provider = new FakeIpcProvider();\n      var signature = 'mySend(address,uint256)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_estimateGas');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '000000000000000000000000' + addressLowercase.replace('0x', '') + '0000000000000000000000000000000000000000000000000000000000000011',\n          to: addressLowercase,\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8',\n          value: '0x2710'\n        }]);\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.mySend(address, 17).estimateGas({\n        from: address,\n        gas: 50000,\n        gasPrice: 3000,\n        value: 10000\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"getPastEvents should get past events and format them correctly","suites":["with methods"],"updatePoint":{"line":2435,"column":70,"index":97689},"line":2435,"code":"    it('getPastEvents should get past events and format them correctly', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'testArr(int[])';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getLogs');\n        assert.deepEqual(payload.params, [{\n          address: addressLowercase,\n          fromBlock: \"latest\",\n          topics: [\"0x792991ed5ba9322deaef76cff5051ce4bedaaa4d097585970f9ad8f09f54e651\", \"0x000000000000000000000000\" + address2.replace('0x', ''), null]\n        }]);\n      });\n      var topic1 = [sha3(signature), '0x000000000000000000000000' + address.replace('0x', ''), '0x000000000000000000000000000000000000000000000000000000000000000a'];\n      var topic2 = [sha3(signature), '0x000000000000000000000000' + address.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000003'];\n      provider.injectResult([{\n        address: address,\n        topics: topic1,\n        blockNumber: '0x3',\n        transactionHash: '0x1234',\n        transactionIndex: '0x0',\n        blockHash: '0x1345',\n        logIndex: '0x4',\n        data: '0x0000000000000000000000000000000000000000000000000000000000000002' + '0000000000000000000000000000000000000000000000000000000000000009'\n      }, {\n        address: address,\n        topics: topic2,\n        blockNumber: '0x4',\n        transactionHash: '0x1235',\n        transactionIndex: '0x0',\n        blockHash: '0x1346',\n        logIndex: '0x1',\n        data: '0x0000000000000000000000000000000000000000000000000000000000000004' + '0000000000000000000000000000000000000000000000000000000000000005'\n      }]);\n      var contract = contractFactory(abi, address, provider);\n      contract.getPastEvents('Changed', {\n        filter: {\n          from: address2\n        }\n      }).then(function (result) {\n        assert.deepEqual(result, [{\n          event: \"Changed\",\n          signature: \"0xc00c1c37cc8b83163fb4fddc06c74d1d5c00d74648e7cb28c0ebada3e32fd62c\",\n          id: \"log_9ff24cb4\",\n          address: address,\n          blockNumber: 3,\n          transactionHash: '0x1234',\n          blockHash: '0x1345',\n          logIndex: 4,\n          transactionIndex: 0,\n          raw: {\n            data: '0x0000000000000000000000000000000000000000000000000000000000000002' + '0000000000000000000000000000000000000000000000000000000000000009',\n            topics: topic1\n          },\n          returnValues: {\n            0: address,\n            1: '10',\n            2: '2',\n            3: '9',\n            from: address,\n            amount: '10',\n            t1: '2',\n            t2: '9'\n          }\n        }, {\n          event: \"Changed\",\n          signature: \"0xc00c1c37cc8b83163fb4fddc06c74d1d5c00d74648e7cb28c0ebada3e32fd62c\",\n          id: \"log_29c93e15\",\n          address: address,\n          blockNumber: 4,\n          transactionHash: '0x1235',\n          blockHash: '0x1346',\n          logIndex: 1,\n          transactionIndex: 0,\n          raw: {\n            data: '0x0000000000000000000000000000000000000000000000000000000000000004' + '0000000000000000000000000000000000000000000000000000000000000005',\n            topics: topic2\n          },\n          returnValues: {\n            0: address,\n            1: '3',\n            2: '4',\n            3: '5',\n            from: address,\n            amount: '3',\n            t1: '4',\n            t2: '5'\n          }\n        }]);\n        done();\n      }).catch(done);\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should call testArr method and properly parse result","suites":["with methods"],"updatePoint":{"line":2525,"column":60,"index":101147},"line":2525,"code":"    it('should call testArr method and properly parse result', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'testArr(int[])';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '0000000000000000000000000000000000000000000000000000000000000020' + '0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000003',\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000005');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.testArr([3]).call().then(function (result) {\n        assert.deepEqual(result, '5');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should call testArr method, properly parse result and return the result in a callback","suites":["with methods"],"updatePoint":{"line":2542,"column":93,"index":102111},"line":2542,"code":"    it('should call testArr method, properly parse result and return the result in a callback', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'testArr(int[])';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '0000000000000000000000000000000000000000000000000000000000000020' + '0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000003',\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000005');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.testArr([3]).call(function (err, result) {\n        assert.deepEqual(result, '5');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should call owner method, properly","suites":["with methods"],"updatePoint":{"line":2559,"column":42,"index":103022},"line":2559,"code":"    it('should call owner method, properly', function (done) {\n      var provider = new FakeIpcProvider();\n      var signature = 'owner()';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10),\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x000000000000000000000000' + addressLowercase.replace('0x', ''));\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.owner().call(function (err, result) {\n        assert.deepEqual(result, address);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should decode an struct correctly","suites":["with methods"],"updatePoint":{"line":2576,"column":41,"index":103714},"line":2576,"code":"    it('should decode an struct correctly', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: '0x2a4aedd50000000000000000000000009cc9a2c777605af16872e0997b3aeb91d96d5d8c',\n          to: addressLowercase\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.listOfNestedStructs('0x9CC9a2c777605Af16872E0997b3Aeb91d96D5D8c').call().then(function (result) {\n        var expectedArray = [];\n        expectedArray[0] = true;\n        expectedArray['status'] = true;\n        assert.deepEqual(result, expectedArray);\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should call an contract method with an struct as parameter","suites":["with methods"],"updatePoint":{"line":2595,"column":66,"index":104620},"line":2595,"code":"    it('should call an contract method with an struct as parameter', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: '0x814a4d160000000000000000000000000000000000000000000000000000000000000001',\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8',\n          to: addressLowercase\n        }]);\n        done();\n      });\n      var contract = contractFactory(abi, address, provider);\n      contract.methods.addStruct({\n        status: true\n      }).send({\n        from: address,\n        gas: 50000,\n        gasPrice: 3000\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should deploy a contract and use callback","suites":["with data"],"updatePoint":{"line":2619,"column":49,"index":105406},"line":2619,"code":"    it('should deploy a contract and use callback', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectResult('0x1234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: '0x1234567000000000000000000000000555456789012345678901234567890123456789100000000000000000000000000000000000000000000000000000000000000c8',\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8'\n        }]);\n      });\n      var contract = contractFactory(abi, provider);\n      contract.deploy({\n        data: '0x1234567',\n        arguments: ['0x5554567890123456789012345678901234567891', 200]\n      }).send({\n        from: address,\n        gas: 50000,\n        gasPrice: 3000\n      }, function (err, result) {\n        assert.equal(err, null);\n        assert.equal(result, '0x1234567');\n        done();\n      });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should deploy a contract and use all promise steps","suites":["with data"],"updatePoint":{"line":2645,"column":58,"index":106397},"line":2645,"code":"    it('should deploy a contract and use all promise steps', function (done) {\n      var provider = new FakeIpcProvider();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          data: '0x1234567000000000000000000000000' + addressLowercase.replace('0x', '') + '00000000000000000000000000000000000000000000000000000000000000c8',\n          from: addressLowercase,\n          gas: '0xc350',\n          gasPrice: '0xbb8'\n        }]);\n      });\n      provider.injectResult('0x5550000000000000000000000000000000000000000000000000000000000032');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x5550000000000000000000000000000000000000000000000000000000000032']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult('0x1234567');\n\n      // fake newBlock\n      provider.injectNotification({\n        method: 'eth_subscription',\n        params: {\n          subscription: '0x1234567',\n          result: {\n            blockNumber: '0x10'\n          }\n        }\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x5550000000000000000000000000000000000000000000000000000000000032']);\n      });\n      provider.injectResult({\n        contractAddress: addressLowercase,\n        blockHash: '0xffdd'\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getCode');\n        assert.deepEqual(payload.params, [addressLowercase, 'latest']);\n      });\n      provider.injectResult('0x321');\n      var contract = contractFactory(abi, provider);\n      contract.deploy({\n        data: '0x1234567',\n        arguments: [address, 200]\n      }).send({\n        from: address,\n        gas: 50000,\n        gasPrice: 3000\n      }).on('transactionHash', function (value) {\n        assert.equal('0x5550000000000000000000000000000000000000000000000000000000000032', value);\n      }).on('receipt', function (receipt) {\n        assert.equal(address, receipt.contractAddress);\n        assert.isNull(contract.options.address);\n      }).then(function (newContract) {\n        assert.equal(newContract.options.address, address);\n        assert.isTrue(newContract !== contract, 'contract objects shouldn\\'t the same');\n        setTimeout(function () {\n          done();\n        }, 1);\n      });\n      // .on('error', function (value) {\n      //     console.log('error', value);\n      //     done();\n      // });\n    });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should not mutate options object - call","suites":["typical usage"],"updatePoint":{"line":2721,"column":45,"index":109337},"line":2721,"code":"  it('should not mutate options object - call', function (done) {\n    var provider = new FakeHttpProvider();\n    provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000032');\n    var eth = new Eth(provider);\n    var contract = new eth.Contract(abi, address);\n    var options = {\n      from: address\n    };\n    var expectedOptions = {\n      ...options\n    };\n    contract.methods.balance(address).call(options).then(function () {\n      assert.deepEqual(options, expectedOptions);\n      done();\n    });\n  });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should not mutate options object - send","suites":["typical usage"],"updatePoint":{"line":2737,"column":45,"index":109875},"line":2737,"code":"  it('should not mutate options object - send', function (done) {\n    var provider = new FakeHttpProvider();\n    provider.injectResult('0x1234000000000000000000000000000000000000000000000000000000056789');\n    provider.injectResult({\n      contractAddress: null,\n      cumulativeGasUsed: '0xa',\n      transactionIndex: '0x3',\n      transactionHash: '0x1234',\n      blockNumber: '0xa',\n      blockHash: '0x1234',\n      gasUsed: '0x0',\n      logs: [{\n        address: address,\n        topics: [sha3('Unchanged(uint256,address,uint256)'), '0x0000000000000000000000000000000000000000000000000000000000000002', '0x000000000000000000000000' + addressLowercase.replace('0x', '')],\n        blockNumber: '0xa',\n        transactionHash: '0x1234',\n        transactionIndex: '0x0',\n        blockHash: '0x1345',\n        logIndex: '0x4',\n        data: '0x0000000000000000000000000000000000000000000000000000000000000005'\n      }, {\n        address: address,\n        topics: [sha3('Changed(address,uint256,uint256,uint256)'), '0x000000000000000000000000' + addressLowercase.replace('0x', ''), '0x0000000000000000000000000000000000000000000000000000000000000001'],\n        blockNumber: '0xa',\n        transactionHash: '0x1234',\n        transactionIndex: '0x0',\n        blockHash: '0x1345',\n        logIndex: '0x4',\n        data: '0x0000000000000000000000000000000000000000000000000000000000000001' + '0000000000000000000000000000000000000000000000000000000000000008'\n      }]\n    });\n    var eth = new Eth(provider);\n    var contract = new eth.Contract(abi, address);\n    var options = {\n      from: address,\n      gasPrice: '21345678654321'\n    };\n    var expectedOptions = {\n      ...options\n    };\n    contract.methods.mySend(address, 10).send(options).on('receipt', function () {\n      assert.deepEqual(options, expectedOptions);\n      done();\n    });\n  });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update contract instance provider when assigned a provider to eth instance that contract instance came from","suites":["typical usage"],"updatePoint":{"line":2782,"column":120,"index":111796},"line":2782,"code":"  it('should update contract instance provider when assigned a provider to eth instance that contract instance came from', function () {\n    var provider1 = new FakeIpcProvider();\n    var provider2 = new FakeHttpProvider();\n    var eth = new Eth(provider1);\n    var contract = new eth.Contract(abi, address);\n    assert.deepEqual(contract.currentProvider, provider1);\n    assert.deepEqual(eth.currentProvider, provider1);\n    eth.setProvider(provider2);\n    assert.deepEqual(contract.currentProvider, provider2);\n    assert.deepEqual(eth.currentProvider, provider2);\n  });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should update contract instance provider when calling setProvider on itself","suites":["typical usage"],"updatePoint":{"line":2793,"column":81,"index":112330},"line":2793,"code":"  it('should update contract instance provider when calling setProvider on itself', function () {\n    var provider1 = new FakeIpcProvider();\n    var provider2 = new FakeHttpProvider();\n    var eth = new Eth(provider1);\n    var contract = new eth.Contract(abi, address);\n    assert.deepEqual(contract.currentProvider, provider1);\n    contract.setProvider(provider2);\n    assert.deepEqual(contract.currentProvider, provider2);\n  });","file":"contract.js","skipped":false,"dir":"test"},{"name":"errors when invoked without the \"new\" operator","suites":["typical usage"],"updatePoint":{"line":2802,"column":52,"index":112732},"line":2802,"code":"  it('errors when invoked without the \"new\" operator', function () {\n    try {\n      var provider = new FakeHttpProvider();\n      var eth = new Eth(provider);\n      eth.Contract(abi, address);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('the \"new\" keyword'));\n    }\n  });","file":"contract.js","skipped":false,"dir":"test"},{"name":"should deploy a contract, sign transaction, and return contract instance","suites":["typical usage"],"updatePoint":{"line":2812,"column":78,"index":113061},"line":2812,"code":"  it('should deploy a contract, sign transaction, and return contract instance', async function () {\n    var provider = new FakeIpcProvider();\n    var eth = new Eth(provider);\n    eth.accounts.wallet.add(account.privateKey);\n    const tx = await eth.accounts.wallet[0].signTransaction({\n      data: '0x1234567000000000000000000000000' + account.address.toLowerCase().replace('0x', '') + '00000000000000000000000000000000000000000000000000000000000000c8',\n      from: account.address.toLowerCase(),\n      gas: '0xd658',\n      gasPrice: '0xbb8',\n      chainId: '0x1',\n      nonce: '0x1',\n      chain: 'mainnet',\n      hardfork: 'petersburg'\n    });\n    provider.injectValidation(function (payload) {\n      const expected = tx.rawTransaction;\n      assert.equal(payload.method, 'eth_sendRawTransaction');\n      assert.deepEqual(payload.params, [expected]);\n    });\n    provider.injectResult('0x5550000000000000000000000000000000000000000000000000000000000032');\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_getTransactionReceipt');\n      assert.deepEqual(payload.params, ['0x5550000000000000000000000000000000000000000000000000000000000032']);\n    });\n    provider.injectResult(null);\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_subscribe');\n      assert.deepEqual(payload.params, ['newHeads']);\n    });\n    provider.injectResult('0x1234567');\n\n    // fake newBlock\n    provider.injectNotification({\n      method: 'eth_subscription',\n      params: {\n        subscription: '0x1234567',\n        result: {\n          blockNumber: '0x10'\n        }\n      }\n    });\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_getTransactionReceipt');\n      assert.deepEqual(payload.params, ['0x5550000000000000000000000000000000000000000000000000000000000032']);\n    });\n    provider.injectResult({\n      contractAddress: addressLowercase,\n      blockHash: '0xffdd'\n    });\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_getCode');\n      assert.deepEqual(payload.params, [addressLowercase, 'latest']);\n    });\n    provider.injectResult('0x321');\n    var contract = new eth.Contract(abi);\n    let heardTxHashEvent = false;\n    let heardReceiptEvent = false;\n    await new Promise(function (resolve, reject) {\n      contract.deploy({\n        data: '0x1234567',\n        arguments: [account.address, 200]\n      }).send({\n        from: account.address,\n        gas: 54872,\n        gasPrice: 3000,\n        chainId: 1,\n        nonce: 1,\n        chain: 'mainnet',\n        hardfork: 'petersburg'\n      }).on('transactionHash', function (value) {\n        assert.equal('0x5550000000000000000000000000000000000000000000000000000000000032', value);\n        heardTxHashEvent = true;\n      }).on('receipt', function (receipt) {\n        assert.equal(address, receipt.contractAddress);\n        assert.isNull(contract.options.address);\n        heardReceiptEvent = true;\n      }).then(function (newContract) {\n        assert.equal(newContract.options.address, address);\n        assert.isTrue(newContract !== contract, 'contract objects shouldn\\'t the same');\n        assert.isTrue(heardTxHashEvent, 'transactionHash event should have fired');\n        assert.isTrue(heardReceiptEvent, 'receipt event should have fired');\n        resolve();\n      });\n    });\n  });","file":"contract.js","skipped":false,"dir":"test"},{"name":"returns an instance","suites":["contract.deploy [ @E2E ]","http"],"updatePoint":{"line":44,"column":27,"index":1326},"line":44,"code":"    it('returns an instance', async function () {\n      var instance = await basic.deploy().send({\n        from: accounts[0]\n      });\n      assert(web3.utils.isAddress(instance.options.address));\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"errors on \"intrinic gas too low\" OOG","suites":["contract.deploy [ @E2E ]","http"],"updatePoint":{"line":53,"column":44,"index":1646},"line":53,"code":"    it('errors on \"intrinic gas too low\" OOG', async function () {\n      try {\n        await basic.deploy().send({\n          from: accounts[0],\n          gas: 1000\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes('gas'));\n        assert(err.receipt === undefined);\n      }\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"errors on OOG reached while running EVM","suites":["contract.deploy [ @E2E ]","http"],"updatePoint":{"line":69,"column":47,"index":2152},"line":69,"code":"    it('errors on OOG reached while running EVM', async function () {\n      const estimate = await basic.deploy().estimateGas({\n        from: accounts[0]\n      });\n      const gas = estimate - 1000;\n      try {\n        await basic.deploy().send({\n          from: accounts[0],\n          gas: gas\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes(couldNotBeStoredMessage));\n        assert(err.receipt.status === false);\n      }\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"errors deploying a zero length bytecode","suites":["contract.deploy [ @E2E ]","http"],"updatePoint":{"line":88,"column":47,"index":2779},"line":88,"code":"    it('errors deploying a zero length bytecode', async function () {\n      try {\n        await noBytecode.deploy().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes(creationWithoutDataMessage) || err.message.includes(couldNotBeStoredMessage));\n      }\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"errors on revert","suites":["contract.deploy [ @E2E ]","http"],"updatePoint":{"line":98,"column":24,"index":3095},"line":98,"code":"    it('errors on revert', async function () {\n      try {\n        await reverts.deploy().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes(couldNotBeStoredMessage) || err.message.includes(revertMessage));\n        assert(err.receipt.status === false);\n      }\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the confirmation handler","suites":["contract.deploy [ @E2E ]","http"],"updatePoint":{"line":109,"column":38,"index":3455},"line":109,"code":"    it('fires the confirmation handler', function () {\n      // Http confirmations poll at 1s interval.\n      // Automine has a 2s interval.\n      if (!process.env.GETH_AUTOMINE) return;\n      return new Promise(async (resolve, reject) => {\n        var startBlock = await web3.eth.getBlockNumber();\n        await basic.deploy().send({\n          from: accounts[0]\n        }).on('confirmation', async (number, receipt, latestBlockHash) => {\n          assert(receipt.contractAddress);\n          if (number === 1) {\n            // Confirmation numbers are zero indexed\n            var endBlock = await web3.eth.getBlock('latest');\n            assert(endBlock.number >= startBlock + 2);\n            assert(endBlock.hash === latestBlockHash);\n            resolve();\n          }\n        });\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"returns an instance","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":141,"column":27,"index":4703},"line":141,"code":"    it('returns an instance', async function () {\n      var instance = await basic.deploy().send({\n        from: accounts[0]\n      });\n      assert(web3.utils.isAddress(instance.options.address));\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"errors on OOG","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":147,"column":21,"index":4902},"line":147,"code":"    it('errors on OOG', async function () {\n      try {\n        await basic.deploy().send({\n          from: accounts[0],\n          gas: 1000\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes('gas'));\n      }\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"errors on revert","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":158,"column":24,"index":5164},"line":158,"code":"    it('errors on revert', async function () {\n      try {\n        await reverts.deploy().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes(couldNotBeStoredMessage) || err.message.includes(revertMessage));\n      }\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the sending event with the payload","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":168,"column":48,"index":5488},"line":168,"code":"    it('fires the sending event with the payload', function (done) {\n      basic.deploy().send({\n        from: accounts[0]\n      }).on('sending', payload => {\n        assert(basic.options.data === payload.params[0].data);\n        done();\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the sent event with the payload","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":176,"column":45,"index":5741},"line":176,"code":"    it('fires the sent event with the payload', function (done) {\n      basic.deploy().send({\n        from: accounts[0]\n      }).on('sent', payload => {\n        assert(basic.options.data === payload.params[0].data);\n        done();\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the transactionHash event","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":184,"column":39,"index":5985},"line":184,"code":"    it('fires the transactionHash event', function (done) {\n      basic.deploy().send({\n        from: accounts[0]\n      }).on('transactionHash', hash => {\n        assert(web3.utils.isHex(hash));\n        done();\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the receipt event","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":192,"column":31,"index":6206},"line":192,"code":"    it('fires the receipt event', function (done) {\n      basic.deploy().send({\n        from: accounts[0]\n      }).on('receipt', receipt => {\n        assert(web3.utils.isAddress(receipt.contractAddress));\n        done();\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the confirmation handler","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":200,"column":38,"index":6452},"line":200,"code":"    it('fires the confirmation handler', function () {\n      return new Promise(async (resolve, reject) => {\n        var startBlock = await web3.eth.getBlockNumber();\n        await basic.deploy().send({\n          from: accounts[0]\n        }).on('confirmation', async (number, receipt, latestBlockHash) => {\n          if (number === 1) {\n            // Confirmation numbers are zero indexed\n            var endBlock = await web3.eth.getBlock('latest');\n            assert(endBlock.number >= startBlock + 2);\n            assert(endBlock.hash === latestBlockHash);\n            resolve();\n          }\n        });\n\n        // Necessary for instamine, should not interfere with automine.\n        await utils.mine(web3, accounts[0]);\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the error handler on OOG","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":219,"column":38,"index":7197},"line":219,"code":"    it('fires the error handler on OOG', function (done) {\n      basic.deploy().send({\n        from: accounts[0],\n        gas: 1000\n      }).on('error', err => {\n        assert(err.message.includes('gas'));\n        done();\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"fires the error handler on revert","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":228,"column":41,"index":7441},"line":228,"code":"    it('fires the error handler on revert', function (done) {\n      reverts.deploy().send({\n        from: accounts[0]\n      }).on('error', err => {\n        assert(err.message.includes(couldNotBeStoredMessage) || err.message.includes(revertMessage));\n        done();\n      });\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"can connect over wss with username:password header","suites":["contract.deploy [ @E2E ]","ws"],"updatePoint":{"line":236,"column":58,"index":7742},"line":236,"code":"    it('can connect over wss with username:password header', function () {\n      const _web3 = new Web3('wss://usr:psswrd@localhost:' + port);\n    });","file":"e2e.contract.deploy.js","skipped":false,"dir":"test"},{"name":"contract.getPastEvents","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":31,"column":28,"index":949},"line":31,"code":"  it('contract.getPastEvents', async function () {\n    await instance.methods.firesEvent(accounts[0], 1).send({\n      from: accounts[0]\n    });\n    await instance.methods.firesEvent(accounts[0], 2).send({\n      from: accounts[0]\n    });\n    const events = await instance.getPastEvents({\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n    assert.equal(events.length, 2);\n    assert.equal(events[0].event, 'BasicEvent');\n    assert.equal(events[1].event, 'BasicEvent');\n    assert.notEqual(events[0].id, events[1].id);\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"contract.events.<eventName>","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":47,"column":33,"index":1482},"line":47,"code":"  it('contract.events.<eventName>', function () {\n    return new Promise(async resolve => {\n      instance.events.BasicEvent({\n        fromBlock: 0\n      }).on('data', function (event) {\n        assert.equal(event.event, 'BasicEvent');\n        this.removeAllListeners();\n        resolve();\n      });\n      await instance.methods.firesEvent(accounts[0], 1).send({\n        from: accounts[0]\n      });\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"works also when toBlock is passed to contract.events.<eventName>","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":61,"column":70,"index":1932},"line":61,"code":"  it('works also when toBlock is passed to contract.events.<eventName>', function () {\n    const originalWarn = console.warn;\n    let message;\n    console.warn = function (str) {\n      message = str;\n    };\n    return new Promise(async resolve => {\n      instance.events.BasicEvent({\n        fromBlock: 0,\n        toBlock: 'latest'\n      }).on('data', function (event) {\n        assert.equal(event.event, 'BasicEvent');\n        this.removeAllListeners();\n        resolve();\n      });\n      assert.equal(message, 'Invalid option: toBlock. Use getPastEvents for specific range.');\n      console.warn = originalWarn;\n      await instance.methods.firesEvent(accounts[0], 1).send({\n        from: accounts[0]\n      });\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"works also when toBlock is passed to contract.events.allEvents","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":83,"column":68,"index":2657},"line":83,"code":"  it('works also when toBlock is passed to contract.events.allEvents', function () {\n    const originalWarn = console.warn;\n    let message;\n    console.warn = function (str) {\n      message = str;\n    };\n    return new Promise(async (resolve, reject) => {\n      instance.events.allEvents({\n        fromBlock: 0,\n        toBlock: 'latest'\n      }).on('data', function (event) {\n        this.removeAllListeners();\n        resolve();\n      });\n      assert.equal(message, 'Invalid option: toBlock. Use getPastEvents for specific range.');\n      console.warn = originalWarn;\n      await instance.methods.firesEvent(accounts[0], 1).send({\n        from: accounts[0]\n      });\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"should not hear the error handler when connection.closed() called","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":104,"column":71,"index":3345},"line":104,"code":"  it('should not hear the error handler when connection.closed() called', function () {\n    this.timeout(15000);\n    let failed = false;\n    return new Promise(async (resolve, reject) => {\n      instance.events.BasicEvent({\n        fromBlock: 0\n      }).on('error', function (err) {\n        failed = true;\n        this.removeAllListeners();\n        reject(new Error('err listener should not hear connection.close'));\n      });\n      await instance.methods.firesEvent(accounts[0], 1).send({\n        from: accounts[0]\n      });\n      web3.currentProvider.connection.close();\n\n      // Resolve only if we haven't already rejected\n      setTimeout(() => {\n        if (!failed) resolve();\n      }, 2500);\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"should not hear the error handler when provider.disconnect() called","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":126,"column":73,"index":4061},"line":126,"code":"  it('should not hear the error handler when provider.disconnect() called', function () {\n    this.timeout(15000);\n    let failed = false;\n    return new Promise(async (resolve, reject) => {\n      instance.events.BasicEvent({\n        fromBlock: 0\n      }).on('error', function (err) {\n        failed = true;\n        this.removeAllListeners();\n        reject(new Error('err listener should not hear provider.disconnect'));\n      });\n      await instance.methods.firesEvent(accounts[0], 1).send({\n        from: accounts[0]\n      });\n      web3.currentProvider.disconnect();\n\n      // Resolve only if we haven't already rejected\n      setTimeout(() => {\n        if (!failed) resolve();\n      }, 2500);\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"can immediately listen for events in the past","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":152,"column":51,"index":4975},"line":152,"code":"  it('can immediately listen for events in the past', async function () {\n    this.timeout(15000);\n    const first = await instance.methods.firesEvent(accounts[0], 1).send({\n      from: accounts[0]\n    });\n    const second = await instance.methods.firesEvent(accounts[0], 1).send({\n      from: accounts[0]\n    });\n\n    // Go forward one block...\n    await utils.mine(web3, accounts[0]);\n    const latestBlock = await web3.eth.getBlockNumber();\n    assert(first.blockNumber < latestBlock);\n    assert(second.blockNumber < latestBlock);\n\n    // Re-instantiate web3 & instance to simulate\n    // subscribing to past events as first request\n    web3 = new Web3('ws://localhost:' + port);\n    const newInstance = new web3.eth.Contract(Basic.abi, instance.options.address);\n    let counter = 0;\n    await new Promise(async resolve => {\n      newInstance.events.BasicEvent({\n        fromBlock: 0\n      }).on('data', function (event) {\n        counter++;\n        assert(event.blockNumber < latestBlock);\n        if (counter === 2) {\n          this.removeAllListeners();\n          resolve();\n        }\n      });\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"hears events when subscribed to \"logs\" (emitter)","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":185,"column":54,"index":6095},"line":185,"code":"  it('hears events when subscribed to \"logs\" (emitter)', function () {\n    return new Promise(async function (resolve, reject) {\n      assert(typeof instance.options.address === 'string');\n      assert(instance.options.address.length > 0);\n      const subscription = web3.eth.subscribe(\"logs\", {\n        address: instance.options.address\n      }).once(\"data\", function (log) {\n        assert.equal(log.address, instance.options.address);\n        subscription.unsubscribe();\n        resolve();\n      });\n      await instance.methods.firesEvent(accounts[0], 1).send({\n        from: accounts[0]\n      });\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"hears events when subscribed to \"logs\" (callback)","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":201,"column":55,"index":6712},"line":201,"code":"  it('hears events when subscribed to \"logs\" (callback)', function () {\n    return new Promise(async function (resolve, reject) {\n      assert(typeof instance.options.address === 'string');\n      assert(instance.options.address.length > 0);\n      const subscription = web3.eth.subscribe(\"logs\", {\n        address: instance.options.address\n      }, function (error, log) {\n        assert.equal(log.address, instance.options.address);\n        subscription.unsubscribe();\n        resolve();\n      });\n      await instance.methods.firesEvent(accounts[0], 1).send({\n        from: accounts[0]\n      });\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"handles child events with shadowed signatures","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":221,"column":51,"index":7536},"line":221,"code":"  it('handles child events with shadowed signatures', async function () {\n    this.timeout(25000);\n    let contract;\n    const options = {\n      gasPrice: 1000000000,\n      // Default gasPrice set by Geth\n      gas: 4000000\n    };\n    options.data = Child.bytecode;\n    contract = new web3.eth.Contract(Child.abi, options);\n    const child = await contract.deploy().send({\n      from: accounts[0]\n    });\n    options.data = Parent.bytecode;\n    contract = new web3.eth.Contract(Parent.abi, options);\n    const parent = await contract.deploy().send({\n      from: accounts[0]\n    });\n    await parent.methods.fireChildSimilarEvent(child.options.address).send({\n      from: accounts[0]\n    });\n    await parent.methods.fireChildIdenticalEvent(child.options.address).send({\n      from: accounts[0]\n    });\n    const childEvents = await child.getPastEvents({\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n    const parentEvents = await parent.getPastEvents({\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n    assert.equal(childEvents.length, 2);\n    assert.equal(parentEvents.length, 0);\n    assert.equal(childEvents[0].event, 'Similar');\n    assert.equal(typeof childEvents[0].returnValues._owner, 'string');\n    assert.equal(childEvents[1].event, 'Identical');\n    assert.equal(typeof childEvents[1].returnValues.childA, 'string');\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"backfills missed events when auto-reconnecting","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":264,"column":52,"index":9141},"line":264,"code":"  it('backfills missed events when auto-reconnecting', function () {\n    if (!process.env.GANACHE) return;\n    this.timeout(20000);\n    let counter = 0;\n    const acc = accounts[0];\n\n    // Create a parallel connection & contract instance\n    // so we can trigger events while the WS provider is down...\n    const _web3 = new Web3('http://localhost:8545');\n    const shadow = new _web3.eth.Contract(Basic.abi, instance.options.address);\n\n    // Create a reconnect-enabled WS provider and set the default Web3 with it.\n    const provider = new Web3.providers.WebsocketProvider('ws://localhost:' + port, {\n      reconnect: {\n        auto: true,\n        delay: 4000,\n        maxAttempts: 1\n      }\n    });\n    web3.setProvider(provider);\n    return new Promise(async function (resolve) {\n      instance.events.BasicEvent().on('data', function (event) {\n        counter++;\n        if (counter === 2) {\n          assert(finalBlock >= event.blockNumber || finalBlock <= event.blockNumber + 2);\n          this.removeAllListeners();\n          resolve();\n        }\n      });\n\n      // First: a regular event\n      const firstReceipt = await instance.methods.firesEvent(acc, 1).send({\n        from: acc\n      });\n\n      // Close connection and let it settle...\n      provider.connection.close(4000);\n      await utils.waitSeconds(1);\n\n      // Submit another event on parallel connection and mine forward 2 blocks\n      const secondReceipt = await shadow.methods.firesEvent(acc, 1).send({\n        from: acc\n      });\n      utils.mine(_web3, acc);\n      utils.mine(_web3, acc);\n      const finalBlock = await _web3.eth.getBlockNumber();\n      assert(finalBlock === secondReceipt.blockNumber + 2);\n    });\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"when event param is a simple string","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":313,"column":41,"index":10830},"line":313,"code":"  it('when event param is a simple string', async function () {\n    const msg = 'simplestring';\n    await instance.methods.firesStringEvent(msg).send({\n      from: accounts[0]\n    });\n    const events = await instance.getPastEvents({\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n    assert.equal(events[0].returnValues.str, msg);\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"when an invalid utf-8 string is passed in JS as param to emit","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":328,"column":67,"index":11350},"line":328,"code":"  it('when an invalid utf-8 string is passed in JS as param to emit', async function () {\n    const msg = '�������';\n    await instance.methods.firesStringEvent(msg).send({\n      from: accounts[0]\n    });\n    const events = await instance.getPastEvents({\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n    assert.equal(msg, events[0].returnValues.str);\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"when Solidity emits an invalid utf-8 string","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":339,"column":49,"index":11696},"line":339,"code":"  it('when Solidity emits an invalid utf-8 string', async function () {\n    await instance.methods.firesIllegalUtf8StringEvent().send({\n      from: accounts[0]\n    });\n    const events = await instance.getPastEvents({\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n    assert.equal('�������', events[0].returnValues.str);\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"when wide unicode characters are passed in JS as param to emit","suites":["contract.events [ @E2E ]"],"updatePoint":{"line":349,"column":68,"index":12048},"line":349,"code":"  it('when wide unicode characters are passed in JS as param to emit', async function () {\n    const msg = '💐';\n    await instance.methods.firesStringEvent(msg).send({\n      from: accounts[0]\n    });\n    const events = await instance.getPastEvents({\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n    assert(msg.length > 'a'.length);\n    assert.equal(msg, events[0].returnValues.str);\n  });","file":"e2e.contract.events.js","skipped":false,"dir":"test"},{"name":"custom registry got defined in the ENS module","suites":["ENS [ @E2E ]"],"updatePoint":{"line":29,"column":51,"index":829},"line":29,"code":"  it('custom registry got defined in the ENS module', function () {\n    assert(web3.eth.ens.registryAddress, registryAddr);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should return the subnode owner of \"resolver\"","suites":["ENS [ @E2E ]"],"updatePoint":{"line":32,"column":51,"index":959},"line":32,"code":"  it('should return the subnode owner of \"resolver\"', async function () {\n    const owner = await web3.eth.ens.registry.getOwner('resolver');\n    assert.equal(owner, account);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should fetch the registered resolver for the subnode \"resolver\"","suites":["ENS [ @E2E ]"],"updatePoint":{"line":36,"column":69,"index":1159},"line":36,"code":"  it('should fetch the registered resolver for the subnode \"resolver\"', async function () {\n    const resolver = await web3.eth.ens.registry.getResolver('resolver');\n    assert.equal(resolver.options.address, resolverAddr);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should return the addr record for the subnode \"resolver\"","suites":["ENS [ @E2E ]"],"updatePoint":{"line":40,"column":62,"index":1382},"line":40,"code":"  it('should return the addr record for the subnode \"resolver\"', async function () {\n    const address = await web3.eth.ens.getAddress('resolver');\n    assert.equal(address, '0x0000000000000000000000000000000000000001');\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should get/set a publickey","suites":["ENS [ @E2E ]"],"updatePoint":{"line":44,"column":32,"index":1579},"line":44,"code":"  it('should get/set a publickey', async function () {\n    const x = \"0x3078303030303030303030303030303030303030303030303030303030303030\";\n    const y = \"0x3030303030303030303030303030303030303030303030303030303030303030\";\n    await web3.eth.ens.setPubkey('resolver', x, y, options);\n    const coords = await web3.eth.ens.getPubkey('resolver');\n    assert.equal(coords.x, x);\n    assert.equal(coords.y, y);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should error when calling \"getContent\" if resolver does not support it","suites":["ENS [ @E2E ]"],"updatePoint":{"line":52,"column":76,"index":2036},"line":52,"code":"  it('should error when calling \"getContent\" if resolver does not support it', async function () {\n    try {\n      await web3.eth.ens.getContent('resolver');\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(resolverAddr));\n      assert(err.message.includes('does not implement requested method: \"content\"'));\n    }\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should error when calling \"setContent\" if resolver does not support it","suites":["ENS [ @E2E ]"],"updatePoint":{"line":61,"column":76,"index":2383},"line":61,"code":"  it('should error when calling \"setContent\" if resolver does not support it', async function () {\n    try {\n      await web3.eth.ens.setContent('resolver', web3.utils.sha3('test'));\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(resolverAddr));\n      assert(err.message.includes('does not implement requested method: \"setContent\"'));\n    }\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"getContenthash return object keys are null if no contentHash is set","suites":["ENS [ @E2E ]"],"updatePoint":{"line":72,"column":73,"index":2816},"line":72,"code":"  it('getContenthash return object keys are null if no contentHash is set', async function () {\n    const val = await web3.eth.ens.getContenthash('resolver');\n    assert.equal(val.protocolType, null);\n    assert.equal(val.decoded, null);\n    assert.equal(val.error, null);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should get/set an IPFS contenthash (ipfs://)","suites":["ENS [ @E2E ]"],"updatePoint":{"line":83,"column":50,"index":3294},"line":83,"code":"  it('should get/set an IPFS contenthash (ipfs://)', async function () {\n    const prefix = \"ipfs://\";\n    const hash = \"QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn\";\n    await web3.eth.ens.setContenthash('resolver', prefix + hash, options);\n    const val = await web3.eth.ens.getContenthash('resolver');\n    assert.equal(val.protocolType, 'ipfs');\n    assert.equal(val.decoded, hash);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should get/set an IPFS contenthash (/ipfs/)","suites":["ENS [ @E2E ]"],"updatePoint":{"line":91,"column":49,"index":3688},"line":91,"code":"  it('should get/set an IPFS contenthash (/ipfs/)', async function () {\n    const prefix = \"/ipfs/\";\n    const hash = \"QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL\";\n    await web3.eth.ens.setContenthash('resolver', prefix + hash, options);\n    const val = await web3.eth.ens.getContenthash('resolver');\n    assert.equal(val.protocolType, 'ipfs');\n    assert.equal(val.decoded, hash);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should get/set a bzz contenthash","suites":["ENS [ @E2E ]"],"updatePoint":{"line":99,"column":38,"index":4070},"line":99,"code":"  it('should get/set a bzz contenthash', async function () {\n    const prefix = \"bzz://\";\n    const hash = \"d1de9994b4d039f6548d191eb26786769f580809256b4685ef316805265ea162\";\n    await web3.eth.ens.setContenthash('resolver', prefix + hash, options);\n    const val = await web3.eth.ens.getContenthash('resolver');\n    assert.equal(val.protocolType, 'bzz');\n    assert.equal(val.decoded, hash);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should get/set an onion contenthash","suites":["ENS [ @E2E ]"],"updatePoint":{"line":107,"column":41,"index":4472},"line":107,"code":"  it('should get/set an onion contenthash', async function () {\n    const prefix = \"onion://\";\n    const hash = \"3g2upl4pq6kufc4m\";\n    await web3.eth.ens.setContenthash('resolver', prefix + hash, options);\n    const val = await web3.eth.ens.getContenthash('resolver');\n    assert.equal(val.protocolType, 'onion');\n    assert.equal(val.decoded, hash);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"should get/set an onion3 contenthash","suites":["ENS [ @E2E ]"],"updatePoint":{"line":115,"column":42,"index":4831},"line":115,"code":"  it('should get/set an onion3 contenthash', async function () {\n    const prefix = \"onion3://\";\n    const hash = \"p53lf57qovyuvwsc6xnrppyply3vtqm7l6pcobkmyqsiofyeznfu5uqd\";\n    await web3.eth.ens.setContenthash('resolver', prefix + hash, options);\n    const val = await web3.eth.ens.getContenthash('resolver');\n    assert.equal(val.protocolType, 'onion3');\n    assert.equal(val.decoded, hash);\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"setContenthash errors when encoding an invalid contenthash (promise)","suites":["ENS [ @E2E ]"],"updatePoint":{"line":123,"column":74,"index":5264},"line":123,"code":"  it('setContenthash errors when encoding an invalid contenthash (promise)', async function () {\n    // Missing required protocol prefix\n    const hash = \"p53lf57qovyuvwsc6xnrppyply3vtqm7l6pcobkmyqsiofyeznfu5uqd\";\n    try {\n      await web3.eth.ens.setContenthash('resolver', hash, options);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes(`Could not encode ${hash}`));\n    }\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"setContentHash errors when encoding an invalid contenthash (callback)","suites":["ENS [ @E2E ]"],"updatePoint":{"line":133,"column":75,"index":5674},"line":133,"code":"  it('setContentHash errors when encoding an invalid contenthash (callback)', function (done) {\n    // Missing required protocol prefix\n    const hash = \"p53lf57qovyuvwsc6xnrppyply3vtqm7l6pcobkmyqsiofyeznfu5uqd\";\n    web3.eth.ens.setContenthash('resolver', hash, options, function (err, result) {\n      assert(err.message.includes(`Could not encode ${hash}`));\n      done();\n    });\n  });","file":"e2e.ens.js","skipped":false,"dir":"test"},{"name":"returns expected access list for getValue","suites":["method.call [ @E2E ]","http"],"updatePoint":{"line":33,"column":49,"index":926},"line":33,"code":"    it('returns expected access list for getValue', async function () {\n      // Currently only Geth supports eth_createAccessList\n      if (process.env.GANACHE || global.window) return;\n      var expected = {\n        accessList: [{\n          address: instance.options.address.toLowerCase(),\n          storageKeys: [\"0x0000000000000000000000000000000000000000000000000000000000000000\"]\n        }],\n        gasUsed: '0x644e'\n      };\n      assert.deepEqual(await instance.methods.getValue().createAccessList({\n        from: accounts[0]\n      }), expected);\n    });","file":"e2e.eth.createAccessList.js","skipped":false,"dir":"test"},{"name":"returns expected access list for setValue","suites":["method.call [ @E2E ]","http"],"updatePoint":{"line":47,"column":49,"index":1490},"line":47,"code":"    it('returns expected access list for setValue', async function () {\n      // Currently only Geth supports eth_createAccessList\n      if (process.env.GANACHE || global.window) return;\n      var expected = {\n        accessList: [{\n          address: instance.options.address.toLowerCase(),\n          storageKeys: [\"0x0000000000000000000000000000000000000000000000000000000000000000\"]\n        }],\n        gasUsed: '0xb2f5'\n      };\n      assert.deepEqual(await instance.methods.setValue(1).createAccessList({\n        from: accounts[0]\n      }), expected);\n    });","file":"e2e.eth.createAccessList.js","skipped":false,"dir":"test"},{"name":"retrieves a uint value","suites":["method.call [ @E2E ]","http"],"updatePoint":{"line":33,"column":30,"index":907},"line":33,"code":"    it('retrieves a uint value', async function () {\n      var expected = '1';\n      await instance.methods.setValue(expected).send({\n        from: accounts[0]\n      });\n      var value = await instance.methods.getValue().call({\n        from: accounts[0]\n      });\n      assert.equal(value, expected);\n    });","file":"e2e.method.call.js","skipped":false,"dir":"test"},{"name":"errors correctly when abi and bytecode do not match","suites":["method.call [ @E2E ]","http"],"updatePoint":{"line":43,"column":59,"index":1246},"line":43,"code":"    it('errors correctly when abi and bytecode do not match', async function () {\n      // Misc n.eq Basic\n      var wrong = new web3.eth.Contract(Basic.abi, miscOptions);\n      var wrongInstance = await wrong.deploy().send({\n        from: accounts[0]\n      });\n      try {\n        await wrongInstance.methods.getValue().call({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        // ganache | geth <= 1.9.13\n        const nullDataResponse = err.message.includes(\"Returned values aren't valid\") && err.message.includes('the correct ABI');\n\n        // geth >= 1.9.15\n        const gethErrResponse = err.message.includes(\"revert\");\n        assert(nullDataResponse || gethErrResponse);\n      }\n    });","file":"e2e.method.call.js","skipped":false,"dir":"test"},{"name":"returns the expected revert reason string","suites":["method.call [ @E2E ]","revert handling"],"updatePoint":{"line":74,"column":49,"index":2338},"line":74,"code":"    it('returns the expected revert reason string', async function () {\n      try {\n        await instance.methods.reverts().call({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('reverted'));\n        assert.equal(error.reason, 'REVERTED WITH REVERT');\n        assert.equal(error.signature, 'Error(String)');\n      }\n    });","file":"e2e.method.call.js","skipped":false,"dir":"test"},{"name":"returns a receipt","suites":["method.send [ @E2E ]","http"],"updatePoint":{"line":28,"column":25,"index":828},"line":28,"code":"    it('returns a receipt', async function () {\n      var nonceVal = await web3.eth.getTransactionCount(accounts[0]);\n      var receipt = await instance.methods.setValue('1').send({\n        from: accounts[0],\n        nonceVal\n      });\n      assert(receipt.status === true);\n      assert(web3.utils.isHexStrict(receipt.transactionHash));\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"should yield 0x1 for type and add accessList property","suites":["method.send [ @E2E ]","http"],"updatePoint":{"line":37,"column":61,"index":1210},"line":37,"code":"    it('should yield 0x1 for type and add accessList property', async function () {\n      // ganache does not support eth_signTransaction\n      if (process.env.GANACHE || global.window) return;\n      var nonceVal = await web3.eth.getTransactionCount(accounts[0]);\n      var receipt = await web3.eth.sendTransaction({\n        to: accounts[1],\n        from: accounts[0],\n        nonce: nonceVal,\n        value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n        gas: web3.utils.toHex(21000),\n        type: 1\n      });\n      assert(receipt.status === true);\n      assert(receipt.type === '0x1');\n      var fetchedTransaction = await web3.eth.getTransaction(receipt.transactionHash);\n      assert(fetchedTransaction.accessList.length === 0);\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"returns a receipt (EIP-1559, maxFeePerGas and maxPriorityFeePerGas specified)","suites":["method.send [ @E2E ]","http"],"updatePoint":{"line":54,"column":85,"index":1989},"line":54,"code":"    it('returns a receipt (EIP-1559, maxFeePerGas and maxPriorityFeePerGas specified)', async function () {\n      // ganache does not support eth_signTransaction\n      if (process.env.GANACHE || global.window) return;\n      var nonceVal = await web3.eth.getTransactionCount(accounts[0]);\n      var receipt = await web3.eth.sendTransaction({\n        to: accounts[1],\n        from: accounts[0],\n        nonce: nonceVal,\n        value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n        gas: web3.utils.toHex(21000),\n        maxFeePerGas: '0x59682F00',\n        // 1.5 Gwei\n        maxPriorityFeePerGas: '0x1DCD6500',\n        // .5 Gwei\n        type: '0x2'\n      });\n      assert(receipt.status === true);\n      assert(web3.utils.isHexStrict(receipt.transactionHash));\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"errors on OOG","suites":["method.send [ @E2E ]","http"],"updatePoint":{"line":73,"column":21,"index":2707},"line":73,"code":"    it('errors on OOG', async function () {\n      try {\n        var nonceVal = await web3.eth.getTransactionCount(accounts[0]);\n        await instance.methods.setValue('1').send({\n          from: accounts[0],\n          gas: 100,\n          nonce: nonceVal\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes('gas'));\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"errors on revert","suites":["method.send [ @E2E ]","http"],"updatePoint":{"line":86,"column":24,"index":3083},"line":86,"code":"    it('errors on revert', async function () {\n      try {\n        await instance.methods.reverts().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        var receipt = utils.extractReceipt(err.message);\n        assert(err.message.includes('revert'));\n        assert(receipt.status === false);\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"is configurable for web3.eth methods","suites":["method.send [ @E2E ]","http","transactionPollingTimeout"],"updatePoint":{"line":104,"column":46,"index":3739},"line":104,"code":"      it('is configurable for web3.eth methods', async function () {\n        web3.eth.transactionPollingTimeout = .25;\n        try {\n          await web3.eth.sendTransaction({\n            from: accounts[0],\n            to: accounts[1],\n            value: web3.utils.toWei('1', 'ether'),\n            gas: 21000,\n            gasPrice: 1\n          });\n          assert.fail();\n        } catch (err) {\n          assert(err.message.includes('Transaction was not mined within 0.25 seconds'));\n        }\n      });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"is configurable for contract methods","suites":["method.send [ @E2E ]","http","transactionPollingTimeout"],"updatePoint":{"line":119,"column":46,"index":4246},"line":119,"code":"      it('is configurable for contract methods', async function () {\n        web3.eth.transactionPollingTimeout = .25;\n        try {\n          await instance.methods.setValue('1').send({\n            from: accounts[0]\n          });\n          assert.fail();\n        } catch (err) {\n          assert(err.message.includes('Transaction was not mined within 0.25 seconds'));\n        }\n      });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"returns a receipt","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":147,"column":25,"index":5204},"line":147,"code":"    it('returns a receipt', async function () {\n      var nonceVal = await web3.eth.getTransactionCount(accounts[0]);\n      var receipt = await instance.methods.setValue('1').send({\n        from: accounts[0],\n        nonce: nonceVal\n      });\n      assert(receipt.status === true);\n      assert(web3.utils.isHexStrict(receipt.transactionHash));\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"returns a receipt (EIP-1559, maxFeePerGas and maxPriorityFeePerGas specified)","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":156,"column":85,"index":5617},"line":156,"code":"    it('returns a receipt (EIP-1559, maxFeePerGas and maxPriorityFeePerGas specified)', async function () {\n      // ganache does not support eth_signTransaction\n      if (process.env.GANACHE || global.window) return;\n      var nonceVal = await web3.eth.getTransactionCount(accounts[0]);\n      var receipt = await web3.eth.sendTransaction({\n        to: accounts[1],\n        from: accounts[0],\n        nonce: nonceVal,\n        value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n        gas: web3.utils.toHex(21000),\n        maxFeePerGas: '0x59682F00',\n        // 1.5 Gwei\n        maxPriorityFeePerGas: '0x1DCD6500',\n        // .5 Gwei\n        type: '0x2'\n      });\n      assert(receipt.status === true);\n      assert(web3.utils.isHexStrict(receipt.transactionHash));\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"errors on OOG","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":175,"column":21,"index":6335},"line":175,"code":"    it('errors on OOG', async function () {\n      try {\n        var nonceVal = await web3.eth.getTransactionCount(accounts[0]);\n        await instance.methods.setValue('1').send({\n          from: accounts[0],\n          gas: 100,\n          nonce: nonceVal\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes('gas'));\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"errors on revert","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":188,"column":24,"index":6711},"line":188,"code":"    it('errors on revert', async function () {\n      try {\n        await instance.methods.reverts().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        var receipt = utils.extractReceipt(err.message);\n        assert(err.message.includes('revert'));\n        assert(receipt.status === false);\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the transactionHash event","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":200,"column":39,"index":7081},"line":200,"code":"    it('fires the transactionHash event', function (done) {\n      instance.methods.setValue('1').send({\n        from: accounts[0]\n      }).on('transactionHash', hash => {\n        assert(web3.utils.isHex(hash));\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the receipt event","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":208,"column":31,"index":7318},"line":208,"code":"    it('fires the receipt event', function (done) {\n      instance.methods.setValue('1').send({\n        from: accounts[0]\n      }).on('receipt', receipt => {\n        assert(receipt.status === true);\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the confirmation handler","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":216,"column":38,"index":7558},"line":216,"code":"    it('fires the confirmation handler', function () {\n      return new Promise(async (resolve, reject) => {\n        var startBlock = await web3.eth.getBlockNumber();\n        await instance.methods.setValue('1').send({\n          from: accounts[0]\n        }).on('confirmation', async (number, receipt) => {\n          if (number === 1) {\n            // Confirmation numbers are zero indexed\n            var endBlock = await web3.eth.getBlockNumber();\n            assert(endBlock >= startBlock + 2);\n            resolve();\n          }\n        });\n\n        // Necessary for instamine, should not interfere with automine.\n        await utils.mine(web3, accounts[0]);\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the error handler on OOG","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":234,"column":38,"index":8238},"line":234,"code":"    it('fires the error handler on OOG', function (done) {\n      instance.methods.setValue('1').send({\n        from: accounts[0],\n        gas: 100\n      }).on('error', err => {\n        assert(err.message.includes('gas'));\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the error handler on revert","suites":["method.send [ @E2E ]","ws"],"updatePoint":{"line":243,"column":41,"index":8497},"line":243,"code":"    it('fires the error handler on revert', function (done) {\n      instance.methods.reverts().send({\n        from: accounts[0]\n      }).on('error', err => {\n        assert(err.message.includes('revert'));\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"errors on OOG","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":262,"column":21,"index":9095},"line":262,"code":"    it('errors on OOG', async function () {\n      try {\n        await instance.methods.setValue('1').send({\n          from: accounts[0],\n          gas: 100\n        });\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes('gas'));\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"Promise throws on revert","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":273,"column":32,"index":9380},"line":273,"code":"    it('Promise throws on revert', async function () {\n      try {\n        await instance.methods.reverts().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        assert.equal(err.signature, 'Error(String)');\n        assert.equal(err.reason, 'REVERTED WITH REVERT');\n        assert(err.message.includes('reverted'));\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"Promise throws on failing require with a revert reason given","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":285,"column":68,"index":9794},"line":285,"code":"    it('Promise throws on failing require with a revert reason given', async function () {\n      try {\n        await instance.methods.requireWithReason().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        assert.equal(err.signature, 'Error(String)');\n        assert.equal(err.reason, 'REVERTED WITH REQUIRE');\n        assert(err.message.includes('reverted'));\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"Promise throws on failing require without a revert reason given","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":297,"column":71,"index":10222},"line":297,"code":"    it('Promise throws on failing require without a revert reason given', async function () {\n      try {\n        await instance.methods.requireWithoutReason().send({\n          from: accounts[0]\n        });\n        assert.fail();\n      } catch (err) {\n        var receipt = utils.extractReceipt(err.message);\n        assert.equal(receipt.status, false);\n        assert.equal(err.signature, undefined);\n        assert.equal(err.reason, undefined);\n        assert(err.message.includes('EVM'));\n      }\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the error handler on OOG","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":311,"column":38,"index":10697},"line":311,"code":"    it('fires the error handler on OOG', function (done) {\n      instance.methods.setValue('1').send({\n        from: accounts[0],\n        gas: 100\n      }).on('error', err => {\n        assert(err.message.includes('gas'));\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the error handler on failing require without a revert reason given","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":320,"column":80,"index":10995},"line":320,"code":"    it('fires the error handler on failing require without a revert reason given', function (done) {\n      instance.methods.requireWithoutReason().send({\n        from: accounts[0]\n      }).on('error', (err, receipt) => {\n        assert.equal(receipt.status, false);\n        assert.equal(err.signature, undefined);\n        assert.equal(err.reason, undefined);\n        assert(err.message.includes('EVM'));\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the error handler on failing require with a revert reason given","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":331,"column":77,"index":11430},"line":331,"code":"    it('fires the error handler on failing require with a revert reason given', function (done) {\n      instance.methods.requireWithReason().send({\n        from: accounts[0]\n      }).on('error', (err, receipt) => {\n        assert.equal(receipt.status, false);\n        assert.equal(err.signature, 'Error(String)');\n        assert.equal(err.reason, 'REVERTED WITH REQUIRE');\n        assert(err.message.includes('reverted'));\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"fires the error handler on revert","suites":["method.send [ @E2E ]","with revert handling activated"],"updatePoint":{"line":342,"column":41,"index":11851},"line":342,"code":"    it('fires the error handler on revert', function (done) {\n      instance.methods.reverts().send({\n        from: accounts[0]\n      }).on('error', (err, receipt) => {\n        assert.equal(receipt.status, false);\n        assert.equal(err.signature, 'Error(String)');\n        assert.equal(err.reason, 'REVERTED WITH REVERT');\n        assert(err.message.includes('reverted'));\n        done();\n      });\n    });","file":"e2e.method.send.js","skipped":false,"dir":"test"},{"name":"sendSignedTransaction (with eth.signTransaction)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":37,"column":54,"index":1060},"line":37,"code":"  it('sendSignedTransaction (with eth.signTransaction)', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    const destination = wallet[1].address;\n    const source = accounts[0]; // Unlocked geth-dev account\n\n    const txCount = await web3.eth.getTransactionCount(source);\n    const rawTx = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      from: source,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex('1000000000')\n    };\n    const signed = await web3.eth.signTransaction(rawTx);\n    const receipt = await web3.eth.sendSignedTransaction(signed.raw);\n    assert(receipt.status === true);\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"sendSignedTransaction (accounts.signTransaction with signing options)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":56,"column":75,"index":1867},"line":56,"code":"  it('sendSignedTransaction (accounts.signTransaction with signing options)', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n    const networkId = await web3.eth.net.getId();\n    const chainId = await web3.eth.getChainId();\n    const customCommon = {\n      baseChain: 'mainnet',\n      customChain: {\n        name: 'custom-network',\n        networkId: networkId,\n        chainId: chainId\n      },\n      harfork: 'petersburg'\n    };\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n      common: customCommon\n    };\n    const signed = await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n    assert(receipt.status === true);\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"sendSignedTransaction (accounts.signTransaction / without signing options)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":85,"column":80,"index":3035},"line":85,"code":"  it('sendSignedTransaction (accounts.signTransaction / without signing options)', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei'))\n    };\n    const signed = await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n    assert(receipt.status === true);\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction, (with callback, nonce not specified)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":102,"column":68,"index":3857},"line":102,"code":"  it('accounts.signTransaction, (with callback, nonce not specified)', function (done) {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) {\n      done();\n      return;\n    }\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txObject = {\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei'))\n    };\n    web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey, async function (err, signed) {\n      const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n      assert(receipt.status === true);\n      done();\n    });\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction, (EIP-2930, accessList specified)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":122,"column":64,"index":4632},"line":122,"code":"  it('accounts.signTransaction, (EIP-2930, accessList specified)', function (done) {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) {\n      done();\n      return;\n    }\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txObject = {\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gas: web3.utils.toHex(21000),\n      accessList: []\n    };\n    web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey, async function (err, signed) {\n      const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n      assert(receipt.status === true);\n      done();\n    });\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction, (EIP-2930, type 1 specified)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":142,"column":60,"index":5354},"line":142,"code":"  it('accounts.signTransaction, (EIP-2930, type 1 specified)', function (done) {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) {\n      done();\n      return;\n    }\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txObject = {\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gas: web3.utils.toHex(21000),\n      type: 1\n    };\n    web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey, async function (err, signed) {\n      const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n      assert(receipt.status === true);\n      done();\n    });\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction, (EIP-1559, maxFeePerGas and maxPriorityFeePerGas specified)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":162,"column":91,"index":6100},"line":162,"code":"  it('accounts.signTransaction, (EIP-1559, maxFeePerGas and maxPriorityFeePerGas specified)', function (done) {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) {\n      done();\n      return;\n    }\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txObject = {\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gas: web3.utils.toHex(21000),\n      maxFeePerGas: '0x59682F00',\n      // 1.5 Gwei\n      maxPriorityFeePerGas: '0x1DCD6500' // .5 Gwei\n    };\n\n    web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey, async function (err, signed) {\n      const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n      assert(receipt.status === true);\n      done();\n    });\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction, (EIP-1559, type 2 specified)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":185,"column":60,"index":6906},"line":185,"code":"  it('accounts.signTransaction, (EIP-1559, type 2 specified)', function (done) {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) {\n      done();\n      return;\n    }\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txObject = {\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gas: web3.utils.toHex(21000),\n      type: 2\n    };\n    web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey, async function (err, signed) {\n      const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n      assert(receipt.status === true);\n      done();\n    });\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction, (EIP-1559, maxFeePerGas and accessList specified)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":205,"column":81,"index":7642},"line":205,"code":"  it('accounts.signTransaction, (EIP-1559, maxFeePerGas and accessList specified)', function (done) {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) {\n      done();\n      return;\n    }\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txObject = {\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gas: web3.utils.toHex(21000),\n      maxFeePerGas: '0x59682F00',\n      // 1.5 Gwei\n      maxPriorityFeePerGas: '0x1DCD6500',\n      // .5 Gwei\n      accessList: []\n    };\n    web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey, async function (err, signed) {\n      const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);\n      assert(receipt.status === true);\n      done();\n    });\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction errors when common, chain and hardfork all defined","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":229,"column":81,"index":8496},"line":229,"code":"  it('accounts.signTransaction errors when common, chain and hardfork all defined', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n      chain: \"ropsten\",\n      common: {\n        customChain: {\n          name: 'custom-network',\n          networkId: 1,\n          chainId: 1\n        }\n      },\n      hardfork: \"istanbul\"\n    };\n    try {\n      await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('common object or the chain and hardfork'));\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction errors when chain specified without hardfork","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":258,"column":75,"index":9519},"line":258,"code":"  it('accounts.signTransaction errors when chain specified without hardfork', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n      chain: \"ropsten\"\n    };\n    try {\n      await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('both values must be defined'));\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction errors when hardfork specified without chain","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":279,"column":75,"index":10365},"line":279,"code":"  it('accounts.signTransaction errors when hardfork specified without chain', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n      hardfork: \"istanbul\"\n    };\n    try {\n      await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('both values must be defined'));\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction errors when tx signing is invalid","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":300,"column":64,"index":11204},"line":300,"code":"  it('accounts.signTransaction errors when tx signing is invalid', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n\n    // Using gas === 0 / ethereumjs-tx checks this wrt common baseFee\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(0),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n      hardfork: \"istanbul\",\n      chain: \"ropsten\"\n    };\n    try {\n      await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('gasLimit is too low'));\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction errors when no transaction is passed","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":324,"column":67,"index":12129},"line":324,"code":"  it('accounts.signTransaction errors when no transaction is passed', async function () {\n    // ganache does not support eth_signTransaction\n    if (process.env.GANACHE || global.window) return;\n    try {\n      await web3.eth.accounts.signTransaction(undefined, wallet[0].privateKey);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('No transaction object'));\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"wallet executes method call using chain & hardfork options","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":334,"column":64,"index":12526},"line":334,"code":"  it('wallet executes method call using chain & hardfork options', async function () {\n    // Geth --dev errors with 'invalid sender' when using these options.\n    // Requires a custom common configuration (see next test). Ganache doesn't care\n    if (!process.env.GANACHE) return;\n    basic = new web3.eth.Contract(Basic.abi, basicOptions);\n    basic.defaultChain = 'mainnet';\n    basic.defaultHardfork = 'london';\n    instance = await basic.deploy().send({\n      from: wallet[0].address\n    });\n    const receipt = await instance.methods.setValue('1').send({\n      from: wallet[0].address\n    });\n    assert(receipt.status === true);\n    assert(web3.utils.isHexStrict(receipt.transactionHash));\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"wallet executes method call using customCommon option","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":350,"column":59,"index":13224},"line":350,"code":"  it('wallet executes method call using customCommon option', async function () {\n    this.timeout(10000);\n    const networkId = await web3.eth.net.getId();\n    const chainId = await web3.eth.getChainId();\n    const customCommon = {\n      baseChain: 'mainnet',\n      customChain: {\n        name: 'custom-network',\n        networkId: networkId,\n        chainId: chainId\n      },\n      harfork: 'istanbul'\n    };\n    basic = new web3.eth.Contract(Basic.abi, basicOptions);\n    basic.defaultCommon = customCommon;\n    instance = await basic.deploy().send({\n      from: wallet[0].address\n    });\n    const receipt = await instance.methods.setValue('1').send({\n      from: wallet[0].address\n    });\n    assert(receipt.status === true);\n    assert(web3.utils.isHexStrict(receipt.transactionHash));\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"transactions sent with wallet throws error correctly (with receipt)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":374,"column":73,"index":14036},"line":374,"code":"  it('transactions sent with wallet throws error correctly (with receipt)', async function () {\n    const data = instance.methods.reverts().encodeABI();\n    const tx = {\n      from: wallet[0],\n      to: instance.options.address,\n      data: data,\n      gasPrice: 1000000000,\n      // Default gasPrice set by Geth\n      gas: 4000000\n    };\n    try {\n      await web3.eth.sendTransaction(tx);\n      assert.fail();\n    } catch (err) {\n      var receipt = utils.extractReceipt(err.message);\n      assert(err.message.includes('revert'));\n      assert(receipt.status === false);\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"sendSignedTransaction reverts with reason","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":393,"column":47,"index":14595},"line":393,"code":"  it('sendSignedTransaction reverts with reason', async function () {\n    const data = instance.methods.reverts().encodeABI();\n    const source = wallet[0].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: instance.options.address,\n      gasLimit: web3.utils.toHex(400000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n      data: data\n    };\n    const signed = await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n    web3.eth.handleRevert = true;\n    try {\n      await web3.eth.sendSignedTransaction(signed.rawTransaction);\n      assert.fail();\n    } catch (err) {\n      assert.equal(err.receipt.status, false);\n      assert.equal(err.reason, \"REVERTED WITH REVERT\");\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"transactions sent with wallet error correctly (OOG)","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":414,"column":57,"index":15424},"line":414,"code":"  it('transactions sent with wallet error correctly (OOG)', function (done) {\n    const data = instance.methods.reverts().encodeABI();\n    const tx = {\n      from: wallet[0],\n      to: instance.options.address,\n      data: data,\n      gasPrice: '1',\n      gas: 10\n    };\n    web3.eth.sendTransaction(tx).on('error', function (err) {\n      assert(err.message.includes('gas'));\n      done();\n    });\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"eth.personal.sign","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":428,"column":23,"index":15794},"line":428,"code":"  it('eth.personal.sign', async function () {\n    // ganache does not support eth_sign\n    if (process.env.GANACHE || global.window) return;\n    const message = 'hello';\n    const signature = await web3.eth.personal.sign(message, accounts[1],\n    // Unlocked geth-dev acct\n    \"left-hand-of-darkness\" // Default password at geth-dev\n    );\n\n    const recovered = await web3.eth.personal.ecRecover(message, signature);\n    assert.equal(accounts[1].toLowerCase(), recovered.toLowerCase());\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"eth.accounts.sign","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":440,"column":23,"index":16288},"line":440,"code":"  it('eth.accounts.sign', async function () {\n    if (process.env.GANACHE || global.window) return;\n    const message = 'hello';\n    const signed = web3.eth.accounts.sign(message, wallet[0].privateKey);\n    const recovered = await web3.eth.personal.ecRecover(message, signed.signature);\n    assert.equal(wallet[0].address.toLowerCase(), recovered.toLowerCase());\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"encrypt then decrypt wallet","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":451,"column":33,"index":16856},"line":451,"code":"  it(\"encrypt then decrypt wallet\", function (done) {\n    this.timeout(20000);\n    try {\n      const password = \"qwerty\";\n      const addressFromWallet = wallet[0].address;\n      const keystore = wallet.encrypt(password);\n\n      // Wallet created w/ 10 accounts in before block\n      assert.equal(keystore.length, 10);\n      wallet.decrypt(keystore, password);\n      assert.equal(wallet.length, 10);\n      const addressFromKeystore = wallet[0].address;\n      assert.equal(addressFromKeystore, addressFromWallet);\n      done();\n    } catch (error) {\n      done(error);\n    }\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"accounts.signTransaction returning valid v r s values","suites":["transaction and message signing [ @E2E ]"],"updatePoint":{"line":469,"column":59,"index":17462},"line":469,"code":"  it('accounts.signTransaction returning valid v r s values', async function () {\n    const source = wallet[0].address;\n    const destination = wallet[1].address;\n    const txCount = await web3.eth.getTransactionCount(source);\n    const networkId = await web3.eth.net.getId();\n    const chainId = await web3.eth.getChainId();\n    const customCommon = {\n      baseChain: 'mainnet',\n      customChain: {\n        name: 'custom-network',\n        networkId: networkId,\n        chainId: chainId\n      },\n      hardfork: 'petersburg'\n    };\n    const txObject = {\n      nonce: web3.utils.toHex(txCount),\n      to: destination,\n      value: web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),\n      gasLimit: web3.utils.toHex(21000),\n      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n      common: customCommon\n    };\n    const signed = await web3.eth.accounts.signTransaction(txObject, wallet[0].privateKey);\n    const data = Buffer.from(signed.rawTransaction.slice(2), \"hex\");\n    const tx = TransactionFactory.fromSerializedData(data);\n    assert(signed.v === '0x' + tx.v.toString('hex'));\n    assert(signed.r === '0x' + tx.r.toString('hex'));\n    assert(signed.s === '0x' + tx.s.toString('hex'));\n  });","file":"e2e.method.signing.js","skipped":false,"dir":"test"},{"name":"loads","suites":["window.Web3 is defined"],"updatePoint":{"line":5,"column":11,"index":266},"line":5,"code":"  it(\"loads\", function () {\n    try {\n      if (process) return;\n    } catch (e) {}\n    if (!window.Web3) throw new Error('\"window.Web3\" was not defined');\n  });","file":"e2e.minified.js","skipped":false,"dir":"test"},{"name":"should return and error","suites":["lib/web3/method","getCall"],"updatePoint":{"line":7,"column":33,"index":265},"line":7,"code":"      it('should return and error', function () {\n        assert.instanceOf(errors[key](), Error);\n      });","file":"errors.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["decodeLog"],"updatePoint":{"line":176,"column":32,"index":5842},"line":176,"code":"    it('should convert correctly', function () {\n      assert.deepEqual(Web3Abi.decodeLog.apply(Web3Abi, test.params), test.result);\n    });","file":"eth.abi.decodeLog.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["decodeParameter"],"updatePoint":{"line":13,"column":32,"index":583},"line":13,"code":"    it('should convert correctly', function () {\n      assert.equal(Abi.decodeParameter.apply(Abi, test.params), test.result);\n    });","file":"eth.abi.decodeParameter.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["decodeParameters"],"updatePoint":{"line":71,"column":32,"index":2377},"line":71,"code":"    it('should convert correctly', function () {\n      assert.deepEqual(Abi.decodeParameters.apply(Abi, test.params), test.result);\n    });","file":"eth.abi.decodeParameters.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["encodeEventSignature"],"updatePoint":{"line":40,"column":32,"index":922},"line":40,"code":"    it('should convert correctly', function () {\n      assert.equal(Abi.encodeEventSignature.apply(Abi, test.params), test.result);\n    });","file":"eth.abi.encodeEventSignature.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["encodeFunctionCall"],"updatePoint":{"line":46,"column":32,"index":1627},"line":46,"code":"    it('should convert correctly', function () {\n      assert.equal(Abi.encodeFunctionCall.apply(Abi, test.params), test.result);\n    });","file":"eth.abi.encodeFunctionCall.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["encodeFunctionSignature"],"updatePoint":{"line":53,"column":32,"index":975},"line":53,"code":"    it('should convert correctly', function () {\n      assert.equal(Abi.encodeFunctionSignature.apply(Abi, test.params), test.result);\n    });","file":"eth.abi.encodeFunctionSignature.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["encodeParameter"],"updatePoint":{"line":16,"column":32,"index":789},"line":16,"code":"    it('should convert correctly', function () {\n      assert.equal(Abi.encodeParameter.apply(Abi, test.params), test.result);\n    });","file":"eth.abi.encodeParameter.js","skipped":false,"dir":"test"},{"name":"should convert correctly","suites":["encodeParameters"],"updatePoint":{"line":16,"column":32,"index":1493},"line":16,"code":"    it('should convert correctly', function () {\n      assert.equal(Abi.encodeParameters.apply(Abi, test.params), test.result);\n    });","file":"eth.abi.encodeParameters.js","skipped":false,"dir":"test"},{"name":"create eth.account, and compare to ethers wallet","suites":["eth","accounts"],"updatePoint":{"line":14,"column":58,"index":441},"line":14,"code":"      it(\"create eth.account, and compare to ethers wallet\", function () {\n        var ethAccounts = new Accounts();\n\n        // create account\n        var acc = ethAccounts.create();\n\n        // create ethers wallet\n        var ethWall = new ethers.Wallet(acc.privateKey);\n\n        // compare addresses and private keys\n        assert.equal(acc.address, ethWall.address);\n        assert.equal(acc.privateKey, ethWall.privateKey);\n      });","file":"eth.accounts.create.js","skipped":false,"dir":"test"},{"name":"encrypt eth.account, and compare to ethers wallet","suites":["eth","with feross/buffer@4.9.1","accounts"],"updatePoint":{"line":135,"column":57,"index":4209},"line":135,"code":"    it(\"encrypt eth.account, and compare to ethers wallet\", async () => {\n      var ethAccounts = new Accounts();\n\n      // create account\n      var acc = ethAccounts.create();\n\n      // create ethers wallet\n      var ethWall = new ethers.Wallet(acc.privateKey);\n\n      // compare addresses and private keys\n      assert.equal(acc.address, ethWall.address);\n      assert.equal(acc.privateKey, ethWall.privateKey);\n      var encrypt = acc.encrypt(pw, {\n        n: n,\n        r: r,\n        p: p,\n        salt: salt,\n        iv: iv,\n        uuid: uuid\n      });\n      var ethWallEncrypt = JSON.parse((await ethWall.encrypt(pw, {\n        scrypt: {\n          N: n,\n          r: r,\n          p: p\n        },\n        salt: '0x' + salt,\n        iv: '0x' + iv.toString('hex'),\n        uuid: '0x' + uuid.toString('hex')\n      })).toLowerCase());\n      assert.deepEqual(encrypt, ethWallEncrypt);\n    });","file":"eth.accounts.encrypt-decrypt.js","skipped":false,"dir":"test"},{"name":"encrypt eth.account, and decrypt with ethers wallet","suites":["eth","with feross/buffer@4.9.1","accounts"],"updatePoint":{"line":167,"column":59,"index":5104},"line":167,"code":"    it(\"encrypt eth.account, and decrypt with ethers wallet\", async () => {\n      var ethAccounts = new Accounts();\n\n      // create account\n      var acc = ethAccounts.create();\n      var encrypt = acc.encrypt(pw, {\n        n: n\n      });\n\n      // create ethers wallet\n      var ethWall = await ethers.Wallet.fromEncryptedJson(JSON.stringify(encrypt), pw);\n\n      // compare addresses and private keys\n      assert.equal(acc.address, ethWall.address);\n      assert.equal(acc.privateKey, ethWall.privateKey);\n    });","file":"eth.accounts.encrypt-decrypt.js","skipped":false,"dir":"test"},{"name":"encrypt ethers wallet, and decrypt with eth.account","suites":["eth","with feross/buffer@4.9.1","accounts"],"updatePoint":{"line":183,"column":59,"index":5622},"line":183,"code":"    it(\"encrypt ethers wallet, and decrypt with eth.account\", async () => {\n      var ethAccounts = new Accounts();\n\n      // create ethers wallet\n      var ethWall = ethers.Wallet.createRandom();\n      var encrypt = await ethWall.encrypt(pw, {\n        scrypt: {\n          N: n\n        }\n      });\n\n      // create account using encrypted json (nonStrict)\n      var acc = ethAccounts.decrypt(encrypt, pw, true);\n\n      // compare addresses and private keys\n      assert.equal(acc.address, ethWall.address);\n      assert.equal(acc.privateKey, ethWall.privateKey);\n    });","file":"eth.accounts.encrypt-decrypt.js","skipped":false,"dir":"test"},{"name":"decrypt static signature using ethers wallet and eth.account and compare","suites":["eth","with feross/buffer@4.9.1","accounts"],"updatePoint":{"line":201,"column":80,"index":6214},"line":201,"code":"    it(\"decrypt static signature using ethers wallet and eth.account and compare\", async () => {\n      var ethAccounts = new Accounts();\n      var encrypt = {\n        version: 3,\n        id: '6dac4ae5-7604-498e-a2a2-e86cfb289d0c',\n        address: '143f8913e0417997304fc179b531ff4cb9cab582',\n        crypto: {\n          ciphertext: '8b20d7797fee1c36ec2fff176e1778170745794ad2f124862f7f4bfc028daa27',\n          cipherparams: {\n            iv: 'c6170befc885c940e0d0553f3ba01c6a'\n          },\n          cipher: 'aes-128-ctr',\n          kdf: 'scrypt',\n          kdfparams: {\n            dklen: 32,\n            salt: 'd78584e30aaf56781b4432116b1de9b1560b3ca6f4624624c14fb6e6d5638a48',\n            n: 256,\n            r: 8,\n            p: 1\n          },\n          mac: '23d4497c779a6bc421f5cc54358309228389597f594448c5c900ad747f97401b'\n        }\n      };\n      var acc = ethAccounts.decrypt(encrypt, pw);\n      var ethWall = await ethers.Wallet.fromEncryptedJson(JSON.stringify(encrypt), pw);\n\n      // compare addresses\n      assert.equal(acc.address, ethWall.address);\n      assert.equal(web3.utils.toChecksumAddress('0x143f8913e0417997304fc179b531ff4cb9cab582'), acc.address);\n      assert.equal(web3.utils.toChecksumAddress('0x143f8913e0417997304fc179b531ff4cb9cab582'), ethWall.address);\n      assert.equal(ethers.utils.getAddress('0x143f8913e0417997304fc179b531ff4cb9cab582'), acc.address);\n      assert.equal(ethers.utils.getAddress('0x143f8913e0417997304fc179b531ff4cb9cab582'), ethWall.address);\n\n      // compare private keys\n      assert.equal(acc.privateKey, ethWall.privateKey);\n    });","file":"eth.accounts.encrypt-decrypt.js","skipped":false,"dir":"test"},{"name":"decrypt staticTests and compare to private key","suites":["eth","with feross/buffer@4.9.1","accounts"],"updatePoint":{"line":239,"column":54,"index":7831},"line":239,"code":"    it(\"decrypt staticTests and compare to private key\", function () {\n      // disable the test timeout\n      this.timeout(0);\n      var ethAccounts = new Accounts();\n\n      // create account\n      var acc = ethAccounts.decrypt(test.json, test.password);\n\n      // compare addresses\n      assert.equal(acc.privateKey, '0x' + test.priv);\n    });","file":"eth.accounts.encrypt-decrypt.js","skipped":false,"dir":"test"},{"name":"sign data using a string","suites":["eth","accounts"],"updatePoint":{"line":28,"column":34,"index":1458},"line":28,"code":"      it(\"sign data using a string\", function () {\n        var ethAccounts = new Accounts();\n        var data = ethAccounts.sign(test.data, test.privateKey);\n        assert.equal(data.signature, test.signature);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"sign data using a utf8 encoded hex string","suites":["eth","accounts"],"updatePoint":{"line":33,"column":51,"index":1697},"line":33,"code":"      it(\"sign data using a utf8 encoded hex string\", function () {\n        var ethAccounts = new Accounts();\n        var data = web3.utils.isHexStrict(test.data) ? test.data : web3.utils.utf8ToHex(test.data);\n        var data = ethAccounts.sign(data, test.privateKey);\n        assert.equal(data.signature, test.signature);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"recover signature using a string","suites":["eth","accounts"],"updatePoint":{"line":39,"column":42,"index":2022},"line":39,"code":"      it(\"recover signature using a string\", function () {\n        var ethAccounts = new Accounts();\n        var address = ethAccounts.recover(test.data, test.signature);\n        assert.equal(address, test.address);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"recover signature using a string and preFixed","suites":["eth","accounts"],"updatePoint":{"line":44,"column":55,"index":2261},"line":44,"code":"      it(\"recover signature using a string and preFixed\", function () {\n        var ethAccounts = new Accounts();\n        var address = ethAccounts.recover(ethAccounts.hashMessage(test.data), test.signature, true);\n        assert.equal(address, test.address);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"recover signature using a hash and r s v values and preFixed","suites":["eth","accounts"],"updatePoint":{"line":49,"column":70,"index":2546},"line":49,"code":"      it(\"recover signature using a hash and r s v values and preFixed\", function () {\n        var ethAccounts = new Accounts();\n        var sig = ethAccounts.sign(test.data, test.privateKey);\n        var address = ethAccounts.recover(ethAccounts.hashMessage(test.data), sig.v, sig.r, sig.s, true);\n        assert.equal(address, test.address);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"recover signature (pre encoded) using a signature object","suites":["eth","accounts"],"updatePoint":{"line":55,"column":66,"index":2896},"line":55,"code":"      it(\"recover signature (pre encoded) using a signature object\", function () {\n        var ethAccounts = new Accounts();\n        var data = web3.utils.isHexStrict(test.data) ? test.data : web3.utils.utf8ToHex(test.data);\n        var sig = ethAccounts.sign(data, test.privateKey);\n        var address = ethAccounts.recover(sig);\n        assert.equal(address, test.address);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"recover signature using a signature object","suites":["eth","accounts"],"updatePoint":{"line":62,"column":52,"index":3269},"line":62,"code":"      it(\"recover signature using a signature object\", function () {\n        var ethAccounts = new Accounts();\n        var sig = ethAccounts.sign(test.data, test.privateKey);\n        var address = ethAccounts.recover(sig);\n        assert.equal(address, test.address);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"recover signature (pre encoded) using a hash and r s v values","suites":["eth","accounts"],"updatePoint":{"line":68,"column":71,"index":3566},"line":68,"code":"      it(\"recover signature (pre encoded) using a hash and r s v values\", function () {\n        var ethAccounts = new Accounts();\n        var data = web3.utils.isHexStrict(test.data) ? test.data : web3.utils.utf8ToHex(test.data);\n        var sig = ethAccounts.sign(data, test.privateKey);\n        var address = ethAccounts.recover(test.data, sig.v, sig.r, sig.s);\n        assert.equal(address, test.address);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"recover signature using a hash and r s v values","suites":["eth","accounts"],"updatePoint":{"line":75,"column":57,"index":3971},"line":75,"code":"      it(\"recover signature using a hash and r s v values\", function () {\n        var ethAccounts = new Accounts();\n        var sig = ethAccounts.sign(test.data, test.privateKey);\n        var address = ethAccounts.recover(test.data, sig.v, sig.r, sig.s);\n        assert.equal(address, test.address);\n      });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"should add the \"0x\" prefix and sign the given message correctly","suites":["eth","accounts"],"updatePoint":{"line":83,"column":69,"index":4307},"line":83,"code":"  it('should add the \"0x\" prefix and sign the given message correctly', function () {\n    assert.equal('0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b', new Accounts().sign('Some data', 'be6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728').signature);\n  });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"should add the \"0x\" prefix to the privateKey","suites":["eth","accounts"],"updatePoint":{"line":86,"column":50,"index":4646},"line":86,"code":"  it('should add the \"0x\" prefix to the privateKey', function () {\n    assert.equal('0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728', new Accounts().privateKeyToAccount('be6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728').privateKey);\n  });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"should throw if a privateKey is given with a invalid length","suites":["eth","accounts"],"updatePoint":{"line":89,"column":65,"index":4937},"line":89,"code":"  it('should throw if a privateKey is given with a invalid length', function () {\n    try {\n      new Accounts().privateKeyToAccount('0000be6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728');\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('Private key must be 32 bytes long'));\n    }\n  });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"should throw if a privateKey is given with a invalid length","suites":["eth","accounts"],"updatePoint":{"line":97,"column":65,"index":5269},"line":97,"code":"  it('should throw if a privateKey is given with a invalid length', function () {\n    try {\n      new Accounts().sign('data', '00be6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728');\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('Private key must be 32 bytes long'));\n    }\n  });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"should sign data correctly using an emoji character","suites":["eth","accounts"],"updatePoint":{"line":105,"column":57,"index":5584},"line":105,"code":"  it('should sign data correctly using an emoji character', function () {\n    const message = '🤗';\n    const ethAccounts = new Accounts();\n    const hashMessage = ethAccounts.hashMessage(message);\n    assert.equal(hashMessage, '0x716ce69c5d2d629c168bc02e24a961456bdc5a362d366119305aea73978a0332');\n    const hashMessageHex = ethAccounts.hashMessage(web3.utils.utf8ToHex(message));\n    assert.equal(hashMessageHex, '0x716ce69c5d2d629c168bc02e24a961456bdc5a362d366119305aea73978a0332');\n  });","file":"eth.accounts.sign.js","skipped":false,"dir":"test"},{"name":"signTransaction must error","suites":["eth","accounts"],"updatePoint":{"line":770,"column":38,"index":40074},"line":770,"code":"        it(\"signTransaction must error\", function (done) {\n          var ethAccounts = new Accounts();\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          testAccount.signTransaction(test.transaction).then(() => done()).catch(function (err) {\n            assert.instanceOf(err, Error);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction must compare to eth_signTransaction","suites":["eth","accounts"],"updatePoint":{"line":782,"column":63,"index":40598},"line":782,"code":"        it(\"signTransaction must compare to eth_signTransaction\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          provider.injectResult('0x5022');\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_gasPrice');\n            assert.deepEqual(payload.params, []);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          testAccount.signTransaction(test.transaction).then(function (tx) {\n            assert.equal(tx.messageHash, test.messageHash, \"message hash failed\");\n            assert.equal(tx.transactionHash, test.transactionHash, \"tx hash failed\");\n            assert.equal(tx.rawTransaction, test.rawTransaction, \"rawtx failed\");\n            if (test.r && test.s && test.v) {\n              assert.equal(tx.v, test.v, \"v property of signature failed\");\n              assert.equal(tx.s, test.s, \"s property of signature failed\");\n              assert.equal(tx.r, test.r, \"r property of signature failed\");\n            }\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction using the iban as \"to\" must compare to eth_signTransaction","suites":["eth","accounts"],"updatePoint":{"line":815,"column":88,"index":42363},"line":815,"code":"        it(\"signTransaction using the iban as \\\"to\\\" must compare to eth_signTransaction\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          var transaction = clone(test.transaction);\n          transaction.to = transaction.toIban;\n          delete transaction.toIban;\n          testAccount.signTransaction(transaction).then(function (tx) {\n            assert.equal(tx.rawTransaction, test.rawTransaction);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction will call for nonce","suites":["eth","accounts"],"updatePoint":{"line":838,"column":47,"index":43474},"line":838,"code":"        it(\"signTransaction will call for nonce\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult('0xa');\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getTransactionCount');\n            assert.deepEqual(payload.params, [test.address, \"latest\"]);\n          });\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          var transaction = clone(test.transaction);\n          delete transaction.nonce;\n          testAccount.signTransaction(transaction).then(function (tx) {\n            assert.isObject(tx);\n            assert.isString(tx.rawTransaction);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction will call for gasPrice","suites":["eth","accounts"],"updatePoint":{"line":867,"column":50,"index":44857},"line":867,"code":"        it(\"signTransaction will call for gasPrice\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          provider.injectResult('0x5022');\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_gasPrice');\n            assert.deepEqual(payload.params, []);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          var transaction = clone(test.transaction);\n          delete transaction.gasPrice;\n          testAccount.signTransaction(transaction).then(function (tx) {\n            assert.isObject(tx);\n            assert.isString(tx.rawTransaction);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction should not call for chainId if common.customChain.chainId provided","suites":["eth","accounts"],"updatePoint":{"line":896,"column":94,"index":46257},"line":896,"code":"        it(\"signTransaction should not call for chainId if common.customChain.chainId provided\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          var transaction = clone(test.transaction);\n          delete transaction.chainId;\n          testAccount.signTransaction(transaction).then(function (tx) {\n            assert.isObject(tx);\n            assert.isString(tx.rawTransaction);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction should call for chainId if common.customChain.chainId not provided","suites":["eth","accounts"],"updatePoint":{"line":919,"column":94,"index":47384},"line":919,"code":"        it(\"signTransaction should call for chainId if common.customChain.chainId not provided\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(1);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_chainId');\n            assert.deepEqual(payload.params, []);\n          });\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          var transaction = clone(test.transaction);\n          delete transaction.chainId;\n          delete transaction.common;\n          testAccount.signTransaction(transaction).then(function (tx) {\n            assert.isObject(tx);\n            assert.isString(tx.rawTransaction);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction will call for networkId","suites":["eth","accounts"],"updatePoint":{"line":949,"column":51,"index":48769},"line":949,"code":"        it(\"signTransaction will call for networkId\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          provider.injectResult('0x5022');\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_gasPrice');\n            assert.deepEqual(payload.params, []);\n          });\n          provider.injectResult(1);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_networkId');\n            assert.deepEqual(payload.params, []);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          var transaction = clone(test.transaction);\n          delete transaction.common;\n          testAccount.signTransaction(transaction).then(function (tx) {\n            assert.isObject(tx);\n            assert.isString(tx.rawTransaction);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"signTransaction will call for nonce, gasPrice, chainId and networkId","suites":["eth","accounts"],"updatePoint":{"line":984,"column":80,"index":50419},"line":984,"code":"        it(\"signTransaction will call for nonce, gasPrice, chainId and networkId\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(1);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_chainId');\n            assert.deepEqual(payload.params, []);\n          });\n          provider.injectResult(1);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getTransactionCount');\n            assert.deepEqual(payload.params, [test.address, \"latest\"]);\n          });\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          provider.injectResult(1);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_gasPrice');\n            assert.deepEqual(payload.params, []);\n          });\n          provider.injectResult(1);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_networkId');\n            assert.deepEqual(payload.params, []);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          var transaction = clone(test.transaction);\n          delete transaction.chainId;\n          delete transaction.gasPrice;\n          delete transaction.nonce;\n          delete transaction.common;\n          testAccount.signTransaction(transaction).then(function (tx) {\n            assert.isObject(tx);\n            assert.isString(tx.rawTransaction);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"recoverTransaction, must recover signature","suites":["eth","accounts"],"updatePoint":{"line":1034,"column":54,"index":52711},"line":1034,"code":"        it(\"recoverTransaction, must recover signature\", function (done) {\n          var provider = new FakeHttpProvider();\n          var web3 = new Web3(provider);\n          provider.injectResult(test.transaction.common.hardfork === 'london' ? postEip1559Block : preEip1559Block);\n          provider.injectValidation(function (payload) {\n            assert.equal(payload.jsonrpc, '2.0');\n            assert.equal(payload.method, 'eth_getBlockByNumber');\n            assert.deepEqual(payload.params, ['latest', false]);\n          });\n          var ethAccounts = new Accounts(web3);\n          var testAccount = ethAccounts.privateKeyToAccount(test.privateKey);\n          assert.equal(testAccount.address, test.address);\n          testAccount.signTransaction(test.transaction).then(function (tx) {\n            assert.equal(ethAccounts.recoverTransaction(tx.rawTransaction), test.address);\n            done();\n          }).catch(e => {\n            console.log(i, e);\n            done(e);\n          });\n        });","file":"eth.accounts.signTransaction.js","skipped":false,"dir":"test"},{"name":"creates the right number of wallets","suites":["eth","accounts.wallet"],"updatePoint":{"line":28,"column":45,"index":1427},"line":28,"code":"      it(\"creates the right number of wallets\", function () {\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.create(2, '542342f!@#$$');\n        assert.equal(ethAccounts.wallet.length, 2);\n        assert.equal(wallet.length, 2);\n        wallet = ethAccounts.wallet.create(3);\n        assert.equal(ethAccounts.wallet.length, 5);\n        assert.equal(wallet.length, 5);\n        assert.isTrue(web3.utils.isAddress(wallet[1].address));\n        assert.isTrue(web3.utils.isAddress(ethAccounts.wallet[2].address));\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"add wallet using a privatekey","suites":["eth","accounts.wallet"],"updatePoint":{"line":40,"column":39,"index":2025},"line":40,"code":"      it(\"add wallet using a privatekey\", function () {\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.add(test.privateKey);\n        assert.equal(wallet.address, test.address);\n        assert.equal(wallet.privateKey, test.privateKey);\n        assert.isFunction(wallet.signTransaction);\n        assert.isFunction(wallet.sign);\n        assert.equal(wallet.index, 0);\n\n        // test if its retrievabe via address and index\n        assert.equal(ethAccounts.wallet[test.address].address, test.address);\n        assert.equal(ethAccounts.wallet[test.address.toLowerCase()].address, test.address);\n        assert.equal(ethAccounts.wallet[0].address, test.address);\n        assert.equal(ethAccounts.wallet.length, 1);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"add wallet using an account","suites":["eth","accounts.wallet"],"updatePoint":{"line":56,"column":37,"index":2831},"line":56,"code":"      it(\"add wallet using an account\", function () {\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.add({\n          address: test.address,\n          privateKey: test.privateKey\n        });\n        assert.equal(wallet.address, test.address);\n        assert.equal(wallet.privateKey, test.privateKey);\n        assert.isFunction(wallet.signTransaction);\n        assert.isFunction(wallet.sign);\n        assert.equal(wallet.index, 0);\n\n        // test if its retrievabe via address and index\n        assert.equal(ethAccounts.wallet[test.address].address, test.address);\n        assert.equal(ethAccounts.wallet[test.address.toLowerCase()].address, test.address);\n        assert.equal(ethAccounts.wallet[0].address, test.address);\n        assert.equal(ethAccounts.wallet.length, 1);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"add wallet double shouldn't work","suites":["eth","accounts.wallet"],"updatePoint":{"line":75,"column":42,"index":3709},"line":75,"code":"      it(\"add wallet double shouldn't work\", function () {\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.add({\n          address: test.address,\n          privateKey: test.privateKey\n        });\n        wallet = ethAccounts.wallet.add({\n          address: test.address,\n          privateKey: test.privateKey\n        });\n        wallet = ethAccounts.wallet.add(test.privateKey);\n        assert.equal(wallet.address, test.address);\n        assert.equal(wallet.privateKey, test.privateKey);\n        assert.isFunction(wallet.signTransaction);\n        assert.isFunction(wallet.sign);\n        assert.equal(wallet.index, 0);\n\n        // test if its retrievabe via address and index\n        assert.equal(ethAccounts.wallet[test.address].address, test.address);\n        assert.equal(ethAccounts.wallet[test.address.toLowerCase()].address, test.address);\n        assert.equal(ethAccounts.wallet[0].address, test.address);\n        assert.equal(ethAccounts.wallet.length, 1);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"remove wallet using an index","suites":["eth","accounts.wallet"],"updatePoint":{"line":99,"column":38,"index":4766},"line":99,"code":"      it(\"remove wallet using an index\", async function () {\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.add(test.privateKey);\n        assert.equal(ethAccounts.wallet.length, 1);\n\n        // await setImmediate to fix wallet race condition when calling `wallet.remove` immediately after `wallet.add`\n        await new Promise(resolve => setImmediate(resolve));\n        ethAccounts.wallet.remove(0);\n        assert.isUndefined(ethAccounts.wallet[0]);\n        assert.isUndefined(ethAccounts.wallet[wallet.address]);\n        assert.isUndefined(ethAccounts.wallet[wallet.address.toLowerCase()]);\n        assert.equal(ethAccounts.wallet.length, 0);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"remove wallet using an address","suites":["eth","accounts.wallet"],"updatePoint":{"line":113,"column":40,"index":5511},"line":113,"code":"      it(\"remove wallet using an address\", async function () {\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.add(test.privateKey);\n        assert.equal(ethAccounts.wallet.length, 1);\n\n        // await setImmediate to fix wallet race condition when calling `wallet.remove` immediately after `wallet.add`\n        await new Promise(resolve => setImmediate(resolve));\n        ethAccounts.wallet.remove(test.address);\n        assert.isUndefined(ethAccounts.wallet[0]);\n        assert.isUndefined(ethAccounts.wallet[wallet.address]);\n        assert.isUndefined(ethAccounts.wallet[wallet.address.toLowerCase()]);\n        assert.equal(ethAccounts.wallet.length, 0);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"remove wallet using an lowercase address","suites":["eth","accounts.wallet"],"updatePoint":{"line":127,"column":50,"index":6277},"line":127,"code":"      it(\"remove wallet using an lowercase address\", async function () {\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.add(test.privateKey);\n        assert.equal(ethAccounts.wallet.length, 1);\n\n        // await setImmediate to fix wallet race condition when calling `wallet.remove` immediately after `wallet.add`\n        await new Promise(resolve => setImmediate(resolve));\n        ethAccounts.wallet.remove(test.address.toLowerCase());\n        assert.isUndefined(ethAccounts.wallet[0]);\n        assert.isUndefined(ethAccounts.wallet[wallet.address]);\n        assert.isUndefined(ethAccounts.wallet[wallet.address.toLowerCase()]);\n        assert.equal(ethAccounts.wallet.length, 0);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"create 5 wallets, remove two, create two more and check for overwrites","suites":["eth","accounts.wallet"],"updatePoint":{"line":141,"column":80,"index":7087},"line":141,"code":"      it(\"create 5 wallets, remove two, create two more and check for overwrites\", async function () {\n        var count = 5;\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.create(count);\n        var initialAddresses = [0, 1, 2, 3, 4].map(function (n) {\n          return wallet[n].address;\n        });\n        assert.equal(ethAccounts.wallet.length, count);\n        var thirdAddress = ethAccounts.wallet[2].address;\n        var lastAddress = ethAccounts.wallet[4].address;\n        var remainingAddresses = [0, 1, 3];\n        var beforeRemoval = remainingAddresses.map(function (n) {\n          return wallet[n].address;\n        });\n\n        // await setImmediate to fix wallet race condition when calling `wallet.remove` immediately after `wallet.add`\n        await new Promise(resolve => setImmediate(resolve));\n        ethAccounts.wallet.remove(2);\n        ethAccounts.wallet.remove(4);\n        assert.isUndefined(ethAccounts.wallet[2]);\n        assert.isUndefined(ethAccounts.wallet[thirdAddress]);\n        assert.isUndefined(ethAccounts.wallet[thirdAddress.toLowerCase()]);\n        assert.isUndefined(ethAccounts.wallet[4]);\n        assert.isUndefined(ethAccounts.wallet[lastAddress]);\n        assert.isUndefined(ethAccounts.wallet[lastAddress.toLowerCase()]);\n        var afterRemoval = remainingAddresses.map(function (n) {\n          return wallet[n].address;\n        });\n        assert.equal(ethAccounts.wallet._findSafeIndex(), 2);\n        assert.equal(ethAccounts.wallet.length, 3);\n        ethAccounts.wallet.create(2);\n        assert.isTrue(web3.utils.isAddress(wallet[2].address));\n        assert.isTrue(web3.utils.isAddress(wallet[4].address));\n        assert.isUndefined(ethAccounts.wallet[5]);\n        var afterMoreCreation = remainingAddresses.map(function (n) {\n          return wallet[n].address;\n        });\n        var newAddresses = [0, 1, 2, 3, 4].map(function (n) {\n          return wallet[n].address;\n        });\n\n        // Checks for account overwrites\n        assert.sameOrderedMembers(beforeRemoval, afterMoreCreation, \"same ordered members\");\n        assert.sameOrderedMembers(afterRemoval, afterMoreCreation, \"same ordered members\");\n        assert.notSameMembers(initialAddresses, newAddresses, \"not same members\");\n        assert.equal(ethAccounts.wallet.length, count);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"clear wallet","suites":["eth","accounts.wallet"],"updatePoint":{"line":189,"column":22,"index":9428},"line":189,"code":"      it(\"clear wallet\", async function () {\n        this.timeout(10000);\n        var count = 10;\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.create(count);\n        assert.equal(ethAccounts.wallet.length, count);\n        var addresses = [];\n        for (var i = 0; i < count; i++) {\n          addresses.push(wallet[i].address);\n        }\n\n        // await setImmediate to fix wallet race condition when calling `wallet.remove` immediately after `wallet.add`\n        await new Promise(resolve => setImmediate(resolve));\n        ethAccounts.wallet.clear();\n        for (var i = 0; i < count; i++) {\n          assert.isUndefined(ethAccounts.wallet[i]);\n          assert.isUndefined(ethAccounts.wallet[addresses[i]]);\n          assert.isUndefined(ethAccounts.wallet[addresses[i].toLowerCase()]);\n        }\n        assert.equal(ethAccounts.wallet.length, 0);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"remove accounts then clear wallet","suites":["eth","accounts.wallet"],"updatePoint":{"line":211,"column":43,"index":10403},"line":211,"code":"      it(\"remove accounts then clear wallet\", async function () {\n        this.timeout(10000);\n        var count = 10;\n        var ethAccounts = new Accounts();\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.create(count);\n        assert.equal(ethAccounts.wallet.length, count);\n        var addresses = [];\n        for (var i = 0; i < count; i++) {\n          addresses.push(wallet[i].address);\n        }\n\n        // await setImmediate to fix wallet race condition when calling `wallet.remove` immediately after `wallet.add`\n        await new Promise(resolve => setImmediate(resolve));\n        ethAccounts.wallet.remove(0);\n        assert.isUndefined(ethAccounts.wallet[0]);\n        ethAccounts.wallet.remove(5);\n        assert.isUndefined(ethAccounts.wallet[5]);\n        ethAccounts.wallet.clear();\n        await new Promise(resolve => setImmediate(resolve));\n        for (var i = 0; i < count; i++) {\n          assert.isUndefined(ethAccounts.wallet[i]);\n          assert.isUndefined(ethAccounts.wallet[addresses[i]]);\n          assert.isUndefined(ethAccounts.wallet[addresses[i].toLowerCase()]);\n        }\n        assert.equal(ethAccounts.wallet.length, 0);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"encrypt then decrypt wallet","suites":["eth","accounts.wallet"],"updatePoint":{"line":238,"column":37,"index":11611},"line":238,"code":"      it(\"encrypt then decrypt wallet\", async function () {\n        this.timeout(10000);\n        var ethAccounts = new Accounts();\n        var password = \"qwerty\";\n        assert.equal(ethAccounts.wallet.length, 0);\n        var wallet = ethAccounts.wallet.create(5);\n        var addressFromWallet = ethAccounts.wallet[0].address;\n        assert.equal(ethAccounts.wallet.length, 5);\n\n        // await setImmediate to fix wallet race condition when calling `wallet.remove` immediately after `wallet.add`\n        await new Promise(resolve => setImmediate(resolve));\n        ethAccounts.wallet.remove(2);\n        assert.equal(ethAccounts.wallet.length, 4);\n        var keystore = ethAccounts.wallet.encrypt(password);\n        assert.equal(keystore.length, 4);\n        ethAccounts.wallet.clear();\n        assert.equal(ethAccounts.wallet.length, 0);\n        ethAccounts.wallet.decrypt(keystore, password);\n        assert.equal(ethAccounts.wallet.length, 4);\n        var addressFromKeystore = ethAccounts.wallet[0].address;\n        assert.equal(addressFromKeystore, addressFromWallet);\n      });","file":"eth.accounts.wallet.js","skipped":false,"dir":"test"},{"name":"should check if blockHeaderTimeout is set to proper value","suites":["web3.eth","blockHeaderTimeout"],"updatePoint":{"line":8,"column":65,"index":286},"line":8,"code":"    it('should check if blockHeaderTimeout is set to proper value', function () {\n      assert.equal(eth.blockHeaderTimeout, 10);\n      assert.equal(eth.Contract.blockHeaderTimeout, 10);\n      assert.equal(eth.getCode.method.blockHeaderTimeout, 10);\n    });","file":"eth.blockHeaderTimeout.js","skipped":false,"dir":"test"},{"name":"should set blockHeaderTimeout for all sub packages is set to proper value, if Eth package is changed","suites":["web3.eth","blockHeaderTimeout"],"updatePoint":{"line":13,"column":108,"index":587},"line":13,"code":"    it('should set blockHeaderTimeout for all sub packages is set to proper value, if Eth package is changed', function () {\n      eth.blockHeaderTimeout = setValue;\n      assert.equal(eth.blockHeaderTimeout, setValue);\n      assert.equal(eth.Contract.blockHeaderTimeout, setValue);\n      assert.equal(eth.getCode.method.blockHeaderTimeout, setValue);\n    });","file":"eth.blockHeaderTimeout.js","skipped":false,"dir":"test"},{"name":"Errors with revert reason string through MetaMask","suites":["call revert"],"updatePoint":{"line":13,"column":55,"index":412},"line":13,"code":"  it('Errors with revert reason string through MetaMask', async function () {\n    provider.injectRawError({\n      \"code\": -32603,\n      \"message\": \"execution reverted: DeadlineExpired\",\n      \"data\": {\n        \"originalError\": {\n          \"code\": 3,\n          \"data\": \"0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f446561646c696e65457870697265640000000000000000000000000000000000\",\n          \"message\": \"execution reverted: DeadlineExpired\"\n        }\n      }\n    });\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.jsonrpc, '2.0');\n      assert.equal(payload.method, 'eth_call');\n      assert.deepEqual(payload.params, [{\n        to: '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',\n        data: '0x23455654',\n        gas: '0xb',\n        gasPrice: '0xb'\n      }, 'latest']);\n    });\n    var options = {\n      to: '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',\n      data: '0x23455654',\n      gas: 11,\n      gasPrice: 11\n    };\n    try {\n      await web3.eth.call(options, 'latest');\n      assert.fail('call should have failed!');\n    } catch (error) {\n      assert.equal(error.reason, 'DeadlineExpired');\n    }\n  });","file":"eth.call.revert.js","skipped":false,"dir":"test"},{"name":"Errors with revert reason string from Ganache through MetaMask","suites":["call revert"],"updatePoint":{"line":48,"column":68,"index":1661},"line":48,"code":"  it('Errors with revert reason string from Ganache through MetaMask', async function () {\n    provider.injectRawError({\n      \"code\": -32603,\n      \"message\": \"Internal JSON-RPC error.\",\n      \"data\": {\n        \"message\": \"VM Exception while processing transaction: revert ImproperState\",\n        \"stack\": \"CallError: VM Exception while processing transaction: revert ImproperState\\n    at Blockchain.simulateTransaction (C:\\\\Users\\\\nicos\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\ganache\\\\dist\\\\node\\\\1.js:2:82786)\",\n        \"code\": -32000,\n        \"name\": \"CallError\",\n        \"data\": \"0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d496d70726f706572537461746500000000000000000000000000000000000000\"\n      }\n    });\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.jsonrpc, '2.0');\n      assert.equal(payload.method, 'eth_call');\n      assert.deepEqual(payload.params, [{\n        to: '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',\n        data: '0x23455654',\n        gas: '0xb',\n        gasPrice: '0xb'\n      }, 'latest']);\n    });\n    var options = {\n      to: '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',\n      data: '0x23455654',\n      gas: 11,\n      gasPrice: 11\n    };\n    try {\n      await web3.eth.call(options, 'latest');\n      assert.fail('call should have failed!');\n    } catch (error) {\n      assert.equal(error.reason, 'ImproperState');\n    }\n  });","file":"eth.call.revert.js","skipped":false,"dir":"test"},{"name":"should check if defaultAccount is set to proper value","suites":["web3.eth","defaultAccount"],"updatePoint":{"line":9,"column":61,"index":359},"line":9,"code":"    it('should check if defaultAccount is set to proper value', function () {\n      assert.equal(eth.defaultAccount, null);\n      assert.equal(eth.personal.defaultAccount, null);\n      assert.equal(eth.Contract.defaultAccount, null);\n      assert.equal(eth.getCode.method.defaultAccount, null);\n    });","file":"eth.defaultAccount.js","skipped":false,"dir":"test"},{"name":"should set defaultAccount for all sub packages is set to proper value, if Eth package is changed","suites":["web3.eth","defaultAccount"],"updatePoint":{"line":15,"column":104,"index":705},"line":15,"code":"    it('should set defaultAccount for all sub packages is set to proper value, if Eth package is changed', function () {\n      eth.defaultAccount = setValue;\n      assert.equal(eth.defaultAccount, setValue);\n      assert.equal(eth.personal.defaultAccount, setValue);\n      assert.equal(eth.Contract.defaultAccount, setValue);\n      assert.equal(eth.getCode.method.defaultAccount, setValue);\n    });","file":"eth.defaultAccount.js","skipped":false,"dir":"test"},{"name":"should fail if address is invalid, wich is to be set to defaultAccount","suites":["web3.eth","defaultAccount"],"updatePoint":{"line":22,"column":78,"index":1078},"line":22,"code":"    it('should fail if address is invalid, wich is to be set to defaultAccount', function () {\n      assert.throws(function () {\n        eth.defaultAccount = '0x17F33b27Bb249a2DBab4C0612BF9CaF4C1950855';\n      });\n    });","file":"eth.defaultAccount.js","skipped":false,"dir":"test"},{"name":"should have different values for two Eth instances","suites":["web3.eth","defaultAccount"],"updatePoint":{"line":27,"column":58,"index":1280},"line":27,"code":"    it('should have different values for two Eth instances', function () {\n      var eth1 = new Eth();\n      eth1.defaultAccount = setValue;\n      assert.equal(eth1.defaultAccount, setValue);\n      var eth2 = new Eth();\n      assert.equal(eth2.defaultAccount, null);\n    });","file":"eth.defaultAccount.js","skipped":false,"dir":"test"},{"name":"should have different values for two Web3 instances","suites":["web3.eth","defaultAccount"],"updatePoint":{"line":34,"column":59,"index":1556},"line":34,"code":"    it('should have different values for two Web3 instances', function () {\n      var web31 = new Web3();\n      web31.eth.defaultAccount = setValue;\n      assert.equal(web31.eth.defaultAccount, setValue);\n      var web32 = new Web3();\n      assert.equal(web32.eth.defaultAccount, null);\n    });","file":"eth.defaultAccount.js","skipped":false,"dir":"test"},{"name":"should check if defaultBlock is set to proper value","suites":["web3.eth","defaultBlock"],"updatePoint":{"line":8,"column":59,"index":274},"line":8,"code":"    it('should check if defaultBlock is set to proper value', function () {\n      assert.equal(eth.defaultBlock, 'latest');\n      assert.equal(eth.personal.defaultBlock, 'latest');\n      assert.equal(eth.Contract.defaultBlock, 'latest');\n      assert.equal(eth.getCode.method.defaultBlock, 'latest');\n    });","file":"eth.defaultBlock.js","skipped":false,"dir":"test"},{"name":"should set defaultBlock for all sub packages is set to proper value, if Eth package is changed","suites":["web3.eth","defaultBlock"],"updatePoint":{"line":14,"column":102,"index":626},"line":14,"code":"    it('should set defaultBlock for all sub packages is set to proper value, if Eth package is changed', function () {\n      eth.defaultBlock = setValue;\n      assert.equal(eth.defaultBlock, setValue);\n      assert.equal(eth.personal.defaultBlock, setValue);\n      assert.equal(eth.Contract.defaultBlock, setValue);\n      assert.equal(eth.getCode.method.defaultBlock, setValue);\n    });","file":"eth.defaultBlock.js","skipped":false,"dir":"test"},{"name":"should set the property \"registryAddress\" to \"null\" and not throw any error","suites":["ens","setters"],"updatePoint":{"line":131,"column":83,"index":4645},"line":131,"code":"    it('should set the property \"registryAddress\" to \"null\" and not throw any error', function () {\n      web3.eth.ens.registryAddress = null;\n      assert.equal(web3.eth.ens.registryAddress, null);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner record for a name","suites":["ens","setters"],"updatePoint":{"line":135,"column":46,"index":4815},"line":135,"code":"    it('should set the owner record for a name', async function () {\n      this.timeout(10000);\n      const signature = 'setOwner(bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address'], [hashedName, '0x0123456701234567012345670123456701234567'], false);\n      const receipt = await web3.eth.ens.setOwner(name, '0x0123456701234567012345670123456701234567', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner record for a name and throw the expected error (callback)","suites":["ens","setters"],"updatePoint":{"line":147,"column":86,"index":5422},"line":147,"code":"    it('should set the owner record for a name and throw the expected error (callback)', function (done) {\n      const signature = 'setOwner(bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address'], [hashedName, '0x0123456701234567012345670123456701234567'], true);\n      web3.eth.ens.setOwner(name, '0x0123456701234567012345670123456701234567', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      }, function (error, result) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner record for a name and throw the expected error (promise)","suites":["ens","setters"],"updatePoint":{"line":161,"column":85,"index":6114},"line":161,"code":"    it('should set the owner record for a name and throw the expected error (promise)', async function () {\n      const signature = 'setOwner(bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address'], [hashedName, '0x0123456701234567012345670123456701234567'], true);\n      try {\n        await web3.eth.ens.setOwner(name, '0x0123456701234567012345670123456701234567', {\n          from: '0x0123456701234567012345670123456701234567',\n          gas: 100,\n          gasPrice: 100,\n          nonce: 1\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the record for a name","suites":["ens","setters"],"updatePoint":{"line":176,"column":40,"index":6760},"line":176,"code":"    it('should set the record for a name', async function () {\n      const signature = 'setRecord(bytes32,address,address,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address', 'address', 'uint64'], [hashedName, '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000], false);\n      const receipt = await web3.eth.ens.setRecord(name, '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000, {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the record for a name and throw the expected error (callback)","suites":["ens","setters"],"updatePoint":{"line":187,"column":80,"index":7478},"line":187,"code":"    it('should set the record for a name and throw the expected error (callback)', function (done) {\n      const signature = 'setRecord(bytes32,address,address,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address', 'address', 'uint64'], [hashedName, '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000], true);\n      web3.eth.ens.setRecord(name, '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000, {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      }, function (error, result) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the record for a name and throw the expected error (promise)","suites":["ens","setters"],"updatePoint":{"line":201,"column":79,"index":8308},"line":201,"code":"    it('should set the record for a name and throw the expected error (promise)', async function () {\n      const signature = 'setRecord(bytes32,address,address,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address', 'address', 'uint64'], [hashedName, '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000], true);\n      try {\n        await web3.eth.ens.setRecord(name, '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000, {\n          from: '0x0123456701234567012345670123456701234567',\n          gas: 100,\n          gasPrice: 100,\n          nonce: 1\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner, resolver, and ttl for a name","suites":["ens","setters"],"updatePoint":{"line":216,"column":58,"index":9116},"line":216,"code":"    it('should set the owner, resolver, and ttl for a name', async function () {\n      const signature = 'setSubnodeRecord(bytes32,bytes32,address,address,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address', 'address', 'uint64'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000], false);\n      const receipt = await web3.eth.ens.setSubnodeRecord(name, 'label', '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000, {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner, resolver, and ttl for a name with already hashed label","suites":["ens","setters"],"updatePoint":{"line":227,"column":84,"index":9901},"line":227,"code":"    it('should set the owner, resolver, and ttl for a name with already hashed label', async function () {\n      const signature = 'setSubnodeRecord(bytes32,bytes32,address,address,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address', 'address', 'uint64'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000], false);\n      const receipt = await web3.eth.ens.setSubnodeRecord(name, utils.sha3('label'), '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000, {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner, resolver, and ttl for a name and throw the expected error (callback)","suites":["ens","setters"],"updatePoint":{"line":238,"column":98,"index":10712},"line":238,"code":"    it('should set the owner, resolver, and ttl for a name and throw the expected error (callback)', function (done) {\n      const signature = 'setSubnodeRecord(bytes32,bytes32,address,address,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address', 'address', 'uint64'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000], true);\n      web3.eth.ens.setSubnodeRecord(name, 'label', '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000, {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      }, function (error, result) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner, resolver, and ttl for a name and throw the expected error (promise)","suites":["ens","setters"],"updatePoint":{"line":252,"column":97,"index":11623},"line":252,"code":"    it('should set the owner, resolver, and ttl for a name and throw the expected error (promise)', async function () {\n      const signature = 'setSubnodeRecord(bytes32,bytes32,address,address,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address', 'address', 'uint64'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000], true);\n      try {\n        await web3.eth.ens.setSubnodeRecord(name, 'label', '0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', 10000, {\n          from: '0x0123456701234567012345670123456701234567',\n          gas: 100,\n          gasPrice: 100,\n          nonce: 1\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set an approval by the given operator","suites":["ens","setters"],"updatePoint":{"line":267,"column":52,"index":12488},"line":267,"code":"    it('should set an approval by the given operator', async function () {\n      const signature = 'setApprovalForAll(address,bool)';\n      prepareProviderForSetter(provider, signature, ['address', 'bool'], ['0x0123456701234567012345670123456701234567', true], false);\n      const receipt = await web3.eth.ens.setApprovalForAll('0x0123456701234567012345670123456701234567', true, {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set an approval by the given operator and throw the expected error (callback)","suites":["ens","setters"],"updatePoint":{"line":278,"column":92,"index":13080},"line":278,"code":"    it('should set an approval by the given operator and throw the expected error (callback)', function (done) {\n      const signature = 'setApprovalForAll(address,bool)';\n      prepareProviderForSetter(provider, signature, ['address', 'bool'], ['0x0123456701234567012345670123456701234567', true], true);\n      web3.eth.ens.setApprovalForAll('0x0123456701234567012345670123456701234567', true, {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      }, function (error, result) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set an approval by the given operator and throw the expected error (promise)","suites":["ens","setters"],"updatePoint":{"line":292,"column":91,"index":13784},"line":292,"code":"    it('should set an approval by the given operator and throw the expected error (promise)', async function () {\n      const signature = 'setApprovalForAll(address,bool)';\n      prepareProviderForSetter(provider, signature, ['address', 'bool'], ['0x0123456701234567012345670123456701234567', true], true);\n      try {\n        await web3.eth.ens.setApprovalForAll('0x0123456701234567012345670123456701234567', true, {\n          from: '0x0123456701234567012345670123456701234567',\n          gas: 100,\n          gasPrice: 100,\n          nonce: 1\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner, resolver, and TTL for an record","suites":["ens","setters"],"updatePoint":{"line":307,"column":61,"index":14457},"line":307,"code":"    it('should set the owner, resolver, and TTL for an record', async function () {\n      const signature = 'setResolver(bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address'], [hashedName, '0x0123456701234567012345670123456701234567'], false);\n      const receipt = await web3.eth.ens.setResolver(name, '0x0123456701234567012345670123456701234567', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner, resolver, and TTL for an record and throw the expected error (callback)","suites":["ens","setters"],"updatePoint":{"line":318,"column":101,"index":15058},"line":318,"code":"    it('should set the owner, resolver, and TTL for an record and throw the expected error (callback)', function (done) {\n      const signature = 'setResolver(bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address'], [hashedName, '0x0123456701234567012345670123456701234567'], true);\n      web3.eth.ens.setResolver(name, '0x0123456701234567012345670123456701234567', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      }, function (error, result) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the owner, resolver, and TTL for an record and throw the expected error (promise)","suites":["ens","setters"],"updatePoint":{"line":332,"column":100,"index":15771},"line":332,"code":"    it('should set the owner, resolver, and TTL for an record and throw the expected error (promise)', async function () {\n      const signature = 'setResolver(bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'address'], [hashedName, '0x0123456701234567012345670123456701234567'], true);\n      try {\n        await web3.eth.ens.setResolver(name, '0x0123456701234567012345670123456701234567', {\n          from: '0x0123456701234567012345670123456701234567',\n          gas: 100,\n          gasPrice: 100,\n          nonce: 1\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should set the TTL (caching time) record for a name","suites":["ens","setters"],"updatePoint":{"line":347,"column":59,"index":16442},"line":347,"code":"    it('should set the TTL (caching time) record for a name', async function () {\n      const signature = 'setTTL(bytes32,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'uint64'], [hashedName, '1'], false);\n      const receipt = await web3.eth.ens.setTTL(name, '1', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call the TTL (caching time) record setter for a name and throw the expected error (callback)","suites":["ens","setters"],"updatePoint":{"line":358,"column":107,"index":16955},"line":358,"code":"    it('should call the TTL (caching time) record setter for a name and throw the expected error (callback)', function (done) {\n      const signature = 'setTTL(bytes32,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'uint64'], [hashedName, '1'], true);\n      web3.eth.ens.setTTL(name, '1', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      }, function (error, result) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call the TTL (caching time) record setter for a name and throw the expected error (promise)","suites":["ens","setters"],"updatePoint":{"line":372,"column":106,"index":17580},"line":372,"code":"    it('should call the TTL (caching time) record setter for a name and throw the expected error (promise)', async function () {\n      const signature = 'setTTL(bytes32,uint64)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'uint64'], [hashedName, '1'], true);\n      try {\n        await web3.eth.ens.setTTL(name, '1', {\n          from: '0x0123456701234567012345670123456701234567',\n          gas: 100,\n          gasPrice: 100,\n          nonce: 1\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should create a new sub node with the specified label and owner","suites":["ens","setters"],"updatePoint":{"line":387,"column":71,"index":18169},"line":387,"code":"    it('should create a new sub node with the specified label and owner', async function () {\n      const signature = 'setSubnodeOwner(bytes32,bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567'], false);\n      const receipt = await web3.eth.ens.setSubnodeOwner(name, 'label', '0x0123456701234567012345670123456701234567', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should create a new sub node with the specified hashed label and owner","suites":["ens","setters"],"updatePoint":{"line":398,"column":78,"index":18804},"line":398,"code":"    it('should create a new sub node with the specified hashed label and owner', async function () {\n      const signature = 'setSubnodeOwner(bytes32,bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567'], false);\n      const receipt = await web3.eth.ens.setSubnodeOwner(name, utils.sha3('label'), '0x0123456701234567012345670123456701234567', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      });\n      isExpectedReceipt(receipt);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should create a new sub node with the specified label and owner and throw the expected error (callback)","suites":["ens","setters"],"updatePoint":{"line":409,"column":111,"index":19484},"line":409,"code":"    it('should create a new sub node with the specified label and owner and throw the expected error (callback)', function (done) {\n      const signature = 'setSubnodeOwner(bytes32,bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567'], true);\n      web3.eth.ens.setSubnodeOwner(name, 'label', '0x0123456701234567012345670123456701234567', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 100,\n        gasPrice: 100,\n        nonce: 1\n      }, function (error, result) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should create a new sub node with the specified label and owner and throw the expected error (promise)","suites":["ens","setters"],"updatePoint":{"line":423,"column":110,"index":20264},"line":423,"code":"    it('should create a new sub node with the specified label and owner and throw the expected error (promise)', async function () {\n      const signature = 'setSubnodeOwner(bytes32,bytes32,address)';\n      prepareProviderForSetter(provider, signature, ['bytes32', 'bytes32', 'address'], [hashedName, utils.sha3('label'), '0x0123456701234567012345670123456701234567'], true);\n      try {\n        await web3.eth.ens.setSubnodeOwner(name, 'label', '0x0123456701234567012345670123456701234567', {\n          from: '0x0123456701234567012345670123456701234567',\n          gas: 100,\n          gasPrice: 100,\n          nonce: 1\n        });\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Transaction has been reverted by the EVM'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call supportsInterface with the interfaceId and return \"true\" (promise)","suites":["ens","getters"],"updatePoint":{"line":467,"column":86,"index":22118},"line":467,"code":"    it('should call supportsInterface with the interfaceId and return \"true\" (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const supportsInterfaceSignature = 'supportsInterface(bytes4)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(supportsInterfaceSignature).slice(0, 10) + sha3('addr(bytes32)').slice(2, 10) + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      const owner = await web3.eth.ens.supportsInterface('foobar.eth', '0x3b3b57de');\n      assert.equal(owner, true);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call supportsInterface with the interfaceId and return \"true\" (callback)","suites":["ens","getters"],"updatePoint":{"line":491,"column":87,"index":23530},"line":491,"code":"    it('should call supportsInterface with the interfaceId and return \"true\" (callback)', function (done) {\n      const resolverSignature = 'resolver(bytes32)';\n      const supportsInterfaceSignature = 'supportsInterface(bytes4)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(supportsInterfaceSignature).slice(0, 10) + sha3('addr(bytes32)').slice(2, 10) + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      web3.eth.ens.supportsInterface('foobar.eth', '0x3b3b57de', function (error, owner) {\n        assert.equal(owner, true);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call supportsInterface with the signature and throw the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":517,"column":96,"index":24982},"line":517,"code":"    it('should call supportsInterface with the signature and throw the expected error (callback)', function (done) {\n      const resolverSignature = 'resolver(bytes32)';\n      const supportsInterfaceSignature = 'supportsInterface(bytes4)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(supportsInterfaceSignature).slice(0, 10) + sha3('addr(bytes32)').slice(2, 10) + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.supportsInterface('foobar.eth', 'addr(bytes32)', function (error, supported) {\n        assert.equal(supported, null);\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call supportsInterface with the signature and throw the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":550,"column":95,"index":26575},"line":550,"code":"    it('should call supportsInterface with the signature and throw the expected error (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const supportsInterfaceSignature = 'supportsInterface(bytes4)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(supportsInterfaceSignature).slice(0, 10) + sha3('addr(bytes32)').slice(2, 10) + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.supportsInterface('foobar.eth', 'addr(bytes32)');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getTTL and return the expected result (promise)","suites":["ens","getters"],"updatePoint":{"line":584,"column":67,"index":28129},"line":584,"code":"    it('should call getTTL and return the expected result (promise)', async function () {\n      const signature = 'ttl(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      const ttl = await web3.eth.ens.getTTL('foobar.eth');\n      assert.equal(ttl, 1);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getTTL and return the expected result (callback)","suites":["ens","getters"],"updatePoint":{"line":598,"column":68,"index":28854},"line":598,"code":"    it('should call getTTL and return the expected result (callback)', function (done) {\n      const signature = 'ttl(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      web3.eth.ens.getTTL('foobar.eth', function (error, ttl) {\n        assert.equal(ttl, 1);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getTTL and throw the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":614,"column":66,"index":29608},"line":614,"code":"    it('should call getTTL and throw the expected error (callback)', function (done) {\n      const signature = 'ttl(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.getTTL('foobar.eth', function (error, ttl) {\n        assert.equal(ttl, null);\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getTTL and throw the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":636,"column":65,"index":30468},"line":636,"code":"    it('should call getTTL and throw the expected error (promise)', async function () {\n      const signature = 'ttl(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.getTTL('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call isApprovedForAll and return the expected result (promise)","suites":["ens","getters"],"updatePoint":{"line":659,"column":77,"index":31335},"line":659,"code":"    it('should call isApprovedForAll and return the expected result (promise)', async function () {\n      const signature = 'isApprovedForAll(address,address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '00000000000000000000000001234567012345670123456701234567012345670000000000000000000000000123456701234567012345670123456701234567',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      const isApproved = await web3.eth.ens.isApprovedForAll('0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567');\n      assert.equal(isApproved, true);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call isApprovedForAll and return the expected result (callback)","suites":["ens","getters"],"updatePoint":{"line":673,"column":78,"index":32260},"line":673,"code":"    it('should call isApprovedForAll and return the expected result (callback)', function (done) {\n      const signature = 'isApprovedForAll(address,address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '00000000000000000000000001234567012345670123456701234567012345670000000000000000000000000123456701234567012345670123456701234567',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      web3.eth.ens.isApprovedForAll('0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', function (error, isApproved) {\n        assert.equal(isApproved, true);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call isApprovedForAll and throws the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":689,"column":77,"index":33215},"line":689,"code":"    it('should call isApprovedForAll and throws the expected error (callback)', function (done) {\n      const signature = 'isApprovedForAll(address,address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '00000000000000000000000001234567012345670123456701234567012345670000000000000000000000000123456701234567012345670123456701234567',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.isApprovedForAll('0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567', function (error, isApproved) {\n        assert.equal(isApproved, null);\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call isApprovedForAll and throws the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":711,"column":76,"index":34273},"line":711,"code":"    it('should call isApprovedForAll and throws the expected error (promise)', async function () {\n      const signature = 'isApprovedForAll(address,address)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '00000000000000000000000001234567012345670123456701234567012345670000000000000000000000000123456701234567012345670',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.isApprovedForAll('0x0123456701234567012345670123456701234567', '0x0123456701234567012345670123456701234567');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call recordExists and return the expected result (promise)","suites":["ens","getters"],"updatePoint":{"line":734,"column":73,"index":35294},"line":734,"code":"    it('should call recordExists and return the expected result (promise)', async function () {\n      const signature = 'recordExists(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      const exists = await web3.eth.ens.recordExists(name);\n      assert.equal(exists, true);\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call recordExists and return the expected result (callback)","suites":["ens","getters"],"updatePoint":{"line":748,"column":74,"index":36041},"line":748,"code":"    it('should call recordExists and return the expected result (callback)', function (done) {\n      const signature = 'recordExists(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      web3.eth.ens.recordExists(name, function (error, exists) {\n        assert.equal(exists, true);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call recordExists and throws the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":764,"column":73,"index":36818},"line":764,"code":"    it('should call recordExists and throws the expected error (callback)', function (done) {\n      const signature = 'recordExists(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.recordExists(name, function (error, isApproved) {\n        assert.equal(isApproved, null);\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call recordExists and throws the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":786,"column":72,"index":37706},"line":786,"code":"    it('should call recordExists and throws the expected error (promise)', async function () {\n      const signature = 'recordExists(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.recordExists(name);\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should return the owner record for a name (owner)","suites":["ens","getters"],"updatePoint":{"line":809,"column":57,"index":38560},"line":809,"code":"    it('should return the owner record for a name (owner)', async function () {\n      const signature = 'owner(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      const owner = await web3.eth.ens.registry.getOwner('foobar.eth');\n      assert.equal(owner, '0x0123456701234567012345670123456701234567');\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getOwner and return the expected owner (promise)","suites":["ens","getters"],"updatePoint":{"line":823,"column":68,"index":39345},"line":823,"code":"    it('should call getOwner and return the expected owner (promise)', async function () {\n      const signature = 'owner(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      const owner = await web3.eth.ens.getOwner('foobar.eth');\n      assert.equal(owner, '0x0123456701234567012345670123456701234567');\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getOwner and return the expected owner (callback)","suites":["ens","getters"],"updatePoint":{"line":837,"column":69,"index":40122},"line":837,"code":"    it('should call getOwner and return the expected owner (callback)', function (done) {\n      const signature = 'owner(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      web3.eth.ens.getOwner('foobar.eth', function (error, owner) {\n        assert.equal(owner, '0x0123456701234567012345670123456701234567');\n        assert.equal(error, '0x0123456701234567012345670123456701234567'); // For backward compatibility\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getOwner and throw the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":854,"column":68,"index":41034},"line":854,"code":"    it('should call getOwner and throw the expected error (callback)', function (done) {\n      const signature = 'owner(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.getOwner('foobar.eth', function (error, owner) {\n        assert.equal(owner, null);\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getOwner and throw the error on requesting of registry contract (callback)","suites":["ens","getters"],"updatePoint":{"line":876,"column":94,"index":41931},"line":876,"code":"    it('should call getOwner and throw the error on requesting of registry contract (callback)', function (done) {\n      const signature = 'owner(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.getOwner('foobar.eth', function (error, owner) {\n        assert.equal(owner, null);\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getOwner and throw the error on requesting of registry contract (promise)","suites":["ens","getters"],"updatePoint":{"line":897,"column":93,"index":42794},"line":897,"code":"    it('should call getOwner and throw the error on requesting of registry contract (promise)', async function () {\n      const signature = 'owner(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.getOwner('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call resolver and return the expected resolver (promise)","suites":["ens","getters"],"updatePoint":{"line":919,"column":71,"index":43626},"line":919,"code":"    it('should call resolver and return the expected resolver (promise)', async function () {\n      const signature = 'resolver(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      const resolver = await web3.eth.ens.getResolver('foobar.eth');\n      assert.equal(resolver.options.address, '0x0123456701234567012345670123456701234567');\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call resolver and return the expected resolver (callback)","suites":["ens","getters"],"updatePoint":{"line":933,"column":72,"index":44434},"line":933,"code":"    it('should call resolver and return the expected resolver (callback)', function (done) {\n      const signature = 'resolver(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      web3.eth.ens.getResolver('foobar.eth', function (error, resolver) {\n        assert.equal(resolver.options.address, '0x0123456701234567012345670123456701234567');\n        assert.equal(error.options.address, '0x0123456701234567012345670123456701234567'); // For backward compatibility\n\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getResolver and return the expected resolver (promise)","suites":["ens","getters"],"updatePoint":{"line":951,"column":74,"index":45397},"line":951,"code":"    it('should call getResolver and return the expected resolver (promise)', async function () {\n      const signature = 'resolver(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      const resolver = await web3.eth.ens.getResolver('foobar.eth');\n      assert.equal(resolver.options.address, '0x0123456701234567012345670123456701234567');\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getResolver and throw the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":965,"column":70,"index":46203},"line":965,"code":"    it('should call getResolver and throw the expected error (promise)', async function () {\n      const signature = 'resolver(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.getResolver('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getResolver and throw the expected error on the contract registry call (promise)","suites":["ens","getters"],"updatePoint":{"line":988,"column":100,"index":47103},"line":988,"code":"    it('should call getResolver and throw the expected error on the contract registry call (promise)', async function () {\n      const signature = 'resolver(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.getResolver('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getResolver and throw the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":1010,"column":71,"index":47941},"line":1010,"code":"    it('should call getResolver and throw the expected error (callback)', function (done) {\n      const signature = 'resolver(bytes32)';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(signature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.getResolver('foobar.eth', function (error, resolver) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        assert.equal(resolver, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getAddress and return the expected address (promise)","suites":["ens","getters"],"updatePoint":{"line":1032,"column":72,"index":48828},"line":1032,"code":"    it('should call getAddress and return the expected address (promise)', async function () {\n      const resolverSig = 'resolver(bytes32)';\n      const addrSig = 'addr(bytes32)';\n      const addrInterfaceId = \"3b3b57de\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + addrInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(addrSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000001234567012345670123456701234567012345670');\n      const addr = await web3.eth.ens.getAddress('foobar.eth');\n      assert.equal(addr, '0x1234567012345670123456701234567012345670');\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getAddress and return the expected address (callback)","suites":["ens","getters"],"updatePoint":{"line":1066,"column":73,"index":50721},"line":1066,"code":"    it('should call getAddress and return the expected address (callback)', function (done) {\n      const resolverSig = 'resolver(bytes32)';\n      const addrSig = 'addr(bytes32)';\n      const addrInterfaceId = \"3b3b57de\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + addrInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(addrSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000001234567012345670123456701234567012345670');\n      web3.eth.ens.getAddress('foobar.eth', function (error, addr) {\n        assert.equal(error, '0x1234567012345670123456701234567012345670'); // For backward compatibility\n        assert.equal(addr, '0x1234567012345670123456701234567012345670');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getAddress and throw the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":1103,"column":69,"index":52746},"line":1103,"code":"    it('should call getAddress and throw the expected error (promise)', async function () {\n      const resolverSig = 'resolver(bytes32)';\n      const addrSig = 'addr(bytes32)';\n      const addrInterfaceId = \"3b3b57de\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + addrInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(addrSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.getAddress('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getAddress and throw the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":1150,"column":70,"index":54856},"line":1150,"code":"    it('should call getAddress and throw the expected error (callback)', function (done) {\n      const resolverSig = 'resolver(bytes32)';\n      const addrSig = 'addr(bytes32)';\n      const addrInterfaceId = \"3b3b57de\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + addrInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(addrSig).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.getAddress('foobar.eth', function (error, addr) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        assert.equal(addr, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getPubkey and return the expected X and Y value (promise)","suites":["ens","getters"],"updatePoint":{"line":1196,"column":77,"index":56980},"line":1196,"code":"    it('should call getPubkey and return the expected X and Y value (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const pubkeySignature = 'pubkey(bytes32)';\n      const pubkeyInterfaceId = \"c8690233\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + pubkeyInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(pubkeySignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      const pubkeyCoordinateAsHex = asciiToHex('0x0000000000000000000000000000000000000000000000000000000000000000');\n      provider.injectResult([pubkeyCoordinateAsHex, pubkeyCoordinateAsHex]);\n      const result = await web3.eth.ens.getPubkey('foobar.eth');\n      assert.equal(result[0][0], '0x3078303030303030303030303030303030303030303030303030303030303030');\n      assert.equal(result[0][1], '0x3030303030303030303030303030303030303030303030303030303030303030');\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getPubkey and return the expected X and Y value (callback)","suites":["ens","getters"],"updatePoint":{"line":1232,"column":78,"index":59145},"line":1232,"code":"    it('should call getPubkey and return the expected X and Y value (callback)', function (done) {\n      const resolverSignature = 'resolver(bytes32)';\n      const pubkeySignature = 'pubkey(bytes32)';\n      const pubkeyInterfaceId = \"c8690233\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + pubkeyInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(pubkeySignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      const pubkeyCoordinateAsHex = asciiToHex('0x0000000000000000000000000000000000000000000000000000000000000000');\n      provider.injectResult([pubkeyCoordinateAsHex, pubkeyCoordinateAsHex]);\n      web3.eth.ens.getPubkey('foobar.eth', function (error, result) {\n        assert.equal(result[0][0], '0x3078303030303030303030303030303030303030303030303030303030303030');\n        assert.equal(result[0][1], '0x3030303030303030303030303030303030303030303030303030303030303030');\n        assert.equal(error[0][0], '0x3078303030303030303030303030303030303030303030303030303030303030');\n        assert.equal(error[0][1], '0x3030303030303030303030303030303030303030303030303030303030303030');\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getPubkey and throw the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":1272,"column":69,"index":61544},"line":1272,"code":"    it('should call getPubkey and throw the expected error (callback)', function (done) {\n      const resolverSignature = 'resolver(bytes32)';\n      const pubkeySignature = 'pubkey(bytes32)';\n      const pubkeyInterfaceId = \"c8690233\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + pubkeyInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(pubkeySignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      const pubkeyCoordinateAsHex = asciiToHex('0x0000000000000000000000000000000000000000000000000000000000000000');\n      provider.injectResult([pubkeyCoordinateAsHex, pubkeyCoordinateAsHex]);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.getPubkey('foobar.eth', function (error, result) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getPubkey and throw the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":1320,"column":68,"index":63891},"line":1320,"code":"    it('should call getPubkey and throw the expected error (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const pubkeySignature = 'pubkey(bytes32)';\n      const pubkeyInterfaceId = \"c8690233\";\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + pubkeyInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(pubkeySignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      const pubkeyCoordinateAsHex = asciiToHex('0x0000000000000000000000000000000000000000000000000000000000000000');\n      provider.injectResult([pubkeyCoordinateAsHex, pubkeyCoordinateAsHex]);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.getPubkey('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getContent and return the expected content of the resolver (promise)","suites":["ens","getters"],"updatePoint":{"line":1369,"column":88,"index":66247},"line":1369,"code":"    it('should call getContent and return the expected content of the resolver (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'content(bytes32)';\n      const contentInterfaceId = 'd8389dc5';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contentInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(contentSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000000');\n      const result = await web3.eth.ens.getContent('foobar.eth');\n      assert.equal(result, '0x0000000000000000000000000000000000000000000000000000000000000000');\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getContent and return the expected content of the resolver (callback)","suites":["ens","getters"],"updatePoint":{"line":1403,"column":89,"index":68223},"line":1403,"code":"    it('should call getContent and return the expected content of the resolver (callback)', function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'content(bytes32)';\n      const contentInterfaceId = 'd8389dc5';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contentInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(contentSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000000');\n      web3.eth.ens.getContent('foobar.eth', function (error, result) {\n        assert.equal(result, '0x0000000000000000000000000000000000000000000000000000000000000000');\n        assert.equal(error, '0x0000000000000000000000000000000000000000000000000000000000000000');\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getContent and throw the expected error (promise)","suites":["ens","getters"],"updatePoint":{"line":1439,"column":69,"index":70289},"line":1439,"code":"    it('should call getContent and throw the expected error (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'content(bytes32)';\n      const contentInterfaceId = 'd8389dc5';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contentInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(contentSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      try {\n        await web3.eth.ens.getContent('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should call getContent and throw the expected error (callback)","suites":["ens","getters"],"updatePoint":{"line":1486,"column":70,"index":72438},"line":1486,"code":"    it('should call getContent and throw the expected error (callback)', function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'content(bytes32)';\n      const contentInterfaceId = 'd8389dc5';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contentInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000001');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(contentSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000000');\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.error.push(null);\n      provider.injectError({\n        code: 1234,\n        message: 'ERROR'\n      });\n      web3.eth.ens.getContent('foobar.eth', function (error, result) {\n        assert.equal(error.code, 1234);\n        assert.equal(error.message, 'ERROR');\n        assert.equal(result, null);\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should error if resolver ABI does not support contenthash (promise)","suites":["ens","getters"],"updatePoint":{"line":1532,"column":75,"index":74682},"line":1532,"code":"    it('should error if resolver ABI does not support contenthash (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'contenthash(bytes32)';\n      const contenthashInterfaceId = 'bc1c58d1';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contenthashInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000000');\n      try {\n        await web3.eth.ens.getContenthash('foobar.eth');\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('does not implement requested method: \"contenthash\"'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should error if resolver ABI does not support contenthash (callback)","suites":["ens","getters"],"updatePoint":{"line":1561,"column":76,"index":76205},"line":1561,"code":"    it('should error if resolver ABI does not support contenthash (callback)', function (done) {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'contenthash(bytes32)';\n      const contenthashInterfaceId = 'bc1c58d1';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contenthashInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000000');\n      web3.eth.ens.getContenthash('foobar.eth', function (error, result) {\n        assert(error.message.includes('does not implement requested method: \"contenthash\"'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should error if resolver ABI does not support setContenthash (promise)","suites":["ens","getters"],"updatePoint":{"line":1589,"column":78,"index":77741},"line":1589,"code":"    it('should error if resolver ABI does not support setContenthash (promise)', async function () {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'setContenthash(bytes32)';\n      const contenthashInterfaceId = 'bc1c58d1';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contenthashInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000000');\n      try {\n        await web3.eth.ens.setContenthash('foobar.eth', 'ipfs://QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn');\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('does not implement requested method: \"setContenthash\"'));\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should error if resolver ABI does not support setContenthash (callback)","suites":["ens","getters"],"updatePoint":{"line":1618,"column":79,"index":79330},"line":1618,"code":"    it('should error if resolver ABI does not support setContenthash (callback)', function (done) {\n      const resolverSignature = 'resolver(bytes32)';\n      const contentSignature = 'setContenthash(bytes32)';\n      const contenthashInterfaceId = 'bc1c58d1';\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3(resolverSignature).slice(0, 10) + '1757b5941987904c18c7594de32c1726cda093fdddacb738cfbc4a7cd1ef4370',\n          to: '0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000123456701234567012345670123456701234567');\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          data: sha3('supportsInterface(bytes4)').slice(0, 10) + contenthashInterfaceId + '00000000000000000000000000000000000000000000000000000000',\n          to: '0x0123456701234567012345670123456701234567'\n        }, 'latest']);\n      });\n      provider.injectResult('0x0000000000000000000000000000000000000000000000000000000000000000');\n      web3.eth.ens.setContenthash('foobar.eth', 'ipfs://QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn', {\n        from: '0x0123456701234567012345670123456701234567',\n        gas: 4000000,\n        gasPrice: 1\n      }, function (error, result) {\n        assert(error.message.includes('does not implement requested method: \"setContenthash\"'));\n        assert.equal(result, null);\n        done();\n      });\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"won't resolve on an unknown network","suites":["ens","checkNetwork"],"updatePoint":{"line":1652,"column":43,"index":81054},"line":1652,"code":"    it(\"won't resolve on an unknown network\", async function () {\n      provider = new FakeHttpProvider();\n      web3 = new Web3(provider);\n      provider.injectResult({\n        timestamp: Math.floor(new Date() / 1000) - 60\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_getBlockByNumber');\n        assert.deepEqual(payload.params, ['latest', false]);\n      });\n      provider.injectResult(1);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'net_version');\n        assert.deepEqual(payload.params, []);\n      });\n      provider.injectResult({\n        hash: '0x0123456701234567012345670123456701234567012345670123456701234567',\n        blockNumber: '0x0'\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_getBlockByNumber');\n        assert.deepEqual(payload.params, ['0x0', false]);\n      });\n      try {\n        await web3.eth.ens.getAddress('foobar.eth');\n        assert.fail();\n      } catch (err) {\n        assert.isTrue(err instanceof Error, 'Should throw error');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"won't resolve when out of date","suites":["ens","checkNetwork"],"updatePoint":{"line":1685,"column":38,"index":82328},"line":1685,"code":"    it(\"won't resolve when out of date\", async function () {\n      provider = new FakeHttpProvider();\n      web3 = new Web3(provider);\n      provider.injectResult({\n        timestamp: Math.floor(new Date() / 1000) - 3660\n      });\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.jsonrpc, '2.0');\n        assert.equal(payload.method, 'eth_getBlockByNumber');\n        assert.deepEqual(payload.params, ['latest', false]);\n      });\n      try {\n        await web3.eth.ens.getAddress('foobar.eth');\n        assert.fail();\n      } catch (err) {\n        assert.isTrue(err instanceof Error, 'Should throw error');\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should only check if the connected node is synced if at least a hour is gone","suites":["ens","checkNetwork"],"updatePoint":{"line":1703,"column":84,"index":83030},"line":1703,"code":"    it('should only check if the connected node is synced if at least a hour is gone', async function () {\n      provider = new FakeHttpProvider();\n      web3 = new Web3(provider);\n      web3.eth.ens._lastSyncCheck = new Date() / 1000;\n      try {\n        await web3.eth.ens.checkNetwork();\n        assert.fail();\n      } catch (error) {\n        return true;\n      }\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should use the custom defined registry address in checkNetwork","suites":["ens","custom registry address"],"updatePoint":{"line":1734,"column":70,"index":84065},"line":1734,"code":"    it('should use the custom defined registry address in checkNetwork', async function () {\n      const currentRegistry = await web3.eth.ens.checkNetwork();\n      assert.equal(currentRegistry, formatters.inputAddressFormatter(address));\n      assert.equal(web3.eth.ens.registryAddress, formatters.inputAddressFormatter(address));\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should keep the custom defined registry address if the provider changes","suites":["ens","custom registry address"],"updatePoint":{"line":1739,"column":79,"index":84413},"line":1739,"code":"    it('should keep the custom defined registry address if the provider changes', async function () {\n      web3.eth.setProvider(provider);\n      const currentRegistry = await web3.eth.ens.checkNetwork();\n      assert.equal(currentRegistry, formatters.inputAddressFormatter(address));\n      assert.equal(web3.eth.ens.registryAddress, formatters.inputAddressFormatter(address));\n    });","file":"eth.ens.js","skipped":false,"dir":"test"},{"name":"should check if handleRevert is set to proper value","suites":["web3.eth","handleRevert"],"updatePoint":{"line":8,"column":59,"index":275},"line":8,"code":"    it('should check if handleRevert is set to proper value', function () {\n      assert.equal(eth.handleRevert, false);\n      assert.equal(eth.Contract.handleRevert, false);\n      assert.equal(eth.getCode.method.handleRevert, false);\n    });","file":"eth.handleRevert.js","skipped":false,"dir":"test"},{"name":"should set handleRevert for all sub packages","suites":["web3.eth","handleRevert"],"updatePoint":{"line":13,"column":52,"index":511},"line":13,"code":"    it('should set handleRevert for all sub packages', function () {\n      eth.handleRevert = setValue;\n      assert.equal(eth.handleRevert, setValue);\n      assert.equal(eth.Contract.handleRevert, setValue);\n      assert.equal(eth.getCode.method.handleRevert, setValue);\n    });","file":"eth.handleRevert.js","skipped":false,"dir":"test"},{"name":"should default to 100","suites":["web3.eth","maxListenersWarningThreshold"],"updatePoint":{"line":11,"column":29,"index":312},"line":11,"code":"    it('should default to 100', function () {\n      assert.equal(eth.maxListenersWarningThreshold, 100);\n    });","file":"eth.maxListenersWarningThreshold.js","skipped":false,"dir":"test"},{"name":"should set threshold to proper value","suites":["web3.eth","maxListenersWarningThreshold"],"updatePoint":{"line":14,"column":44,"index":440},"line":14,"code":"    it('should set threshold to proper value', function () {\n      // Mock EventEmitter interface\n      eth.currentProvider = {\n        setMaxListeners: () => {}\n      };\n      eth.maxListenersWarningThreshold = setValue;\n      assert.equal(eth.maxListenersWarningThreshold, setValue);\n    });","file":"eth.maxListenersWarningThreshold.js","skipped":false,"dir":"test"},{"name":"should *NOT* set threshold when there is no currentProvider","suites":["web3.eth","maxListenersWarningThreshold"],"updatePoint":{"line":22,"column":67,"index":757},"line":22,"code":"    it('should *NOT* set threshold when there is no currentProvider', function () {\n      eth.maxListenersWarningThreshold = setValue;\n      assert.equal(eth.maxListenersWarningThreshold, 100);\n    });","file":"eth.maxListenersWarningThreshold.js","skipped":false,"dir":"test"},{"name":"should *NOT* set threshold when currentProvider does not extend EventEmitter","suites":["web3.eth","maxListenersWarningThreshold"],"updatePoint":{"line":26,"column":84,"index":976},"line":26,"code":"    it('should *NOT* set threshold when currentProvider does not extend EventEmitter', function () {\n      eth.currentProvider = {};\n      eth.maxListenersWarningThreshold = setValue;\n      assert.equal(eth.maxListenersWarningThreshold, 100);\n    });","file":"eth.maxListenersWarningThreshold.js","skipped":false,"dir":"test"},{"name":"Errors without revert reason string","suites":["sendTransaction revert:"],"updatePoint":{"line":12,"column":41,"index":396},"line":12,"code":"  it('Errors without revert reason string', function (done) {\n    provider.injectResult('0x1234567');\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.jsonrpc, '2.0');\n      assert.equal(payload.method, 'eth_sendTransaction');\n      assert.deepEqual(payload.params, [{\n        from: \"0xdbdbdb2cbd23b783741e8d7fcf51e459b497e4a6\",\n        to: \"0xdbdbdb2cbd23b783741e8d7fcf51e459b497e4a6\",\n        value: \"0x11f71f76bb1\",\n        gasPrice: \"0x4b7dddc97a\"\n      }]);\n    });\n    provider.injectResult(null);\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_getTransactionReceipt');\n    });\n\n    // inject receipt\n    provider.injectResult({\n      \"blockHash\": \"0x6fd9e2a26ab\",\n      \"blockNumber\": \"0x15df\",\n      \"transactionHash\": \"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\",\n      \"transactionIndex\": \"0x1\",\n      \"contractAddress\": \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n      \"cumulativeGasUsed\": \"0x7f110\",\n      \"gasUsed\": \"0x7f110\",\n      \"status\": \"0x0\"\n    });\n    var options = {\n      from: '0xdbdbdB2cBD23b783741e8d7fcF51e459b497e4a6',\n      to: '0xdbdbdB2cBD23b783741e8d7fcF51e459b497e4a6',\n      value: '1234567654321',\n      gasPrice: '324234234234'\n    };\n    web3.eth.sendTransaction(options).catch(function (error) {\n      assert.equal(error.receipt.status, false);\n      assert.equal(error.reason, undefined);\n      assert.equal(error.signature, undefined);\n      done();\n    });\n  });","file":"eth.sendTransaction.revert.js","skipped":false,"dir":"test"},{"name":"Errors with revert reason string","suites":["sendTransaction revert:"],"updatePoint":{"line":53,"column":38,"index":1898},"line":53,"code":"  it('Errors with revert reason string', function (done) {\n    provider.injectResult('0x1234567');\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.jsonrpc, '2.0');\n      assert.equal(payload.method, 'eth_sendTransaction');\n      assert.deepEqual(payload.params, [{\n        from: \"0xdbdbdb2cbd23b783741e8d7fcf51e459b497e4a6\",\n        to: \"0xdbdbdb2cbd23b783741e8d7fcf51e459b497e4a6\",\n        value: \"0x11f71f76bb1\",\n        gasPrice: \"0x4b7dddc97a\"\n      }]);\n    });\n    provider.injectResult(null);\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_getTransactionReceipt');\n    });\n\n    // inject receipt\n    provider.injectResult({\n      \"blockHash\": \"0x6fd9e2a26ab\",\n      \"blockNumber\": \"0x15df\",\n      \"transactionHash\": \"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\",\n      \"transactionIndex\": \"0x1\",\n      \"contractAddress\": \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n      \"cumulativeGasUsed\": \"0x7f110\",\n      \"gasUsed\": \"0x7f110\",\n      \"status\": \"0x0\"\n    });\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_getTransactionReceipt');\n    });\n    provider.injectResult('0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a4e6f7420656e6f7567682045746865722070726f76696465642e000000000000');\n    provider.injectValidation(function (payload) {\n      assert.equal(payload.method, 'eth_call');\n    });\n    var options = {\n      from: '0xdbdbdB2cBD23b783741e8d7fcF51e459b497e4a6',\n      to: '0xdbdbdB2cBD23b783741e8d7fcF51e459b497e4a6',\n      value: '1234567654321',\n      gasPrice: '324234234234'\n    };\n    web3.eth.sendTransaction(options).catch(function (error) {\n      assert.equal(error.receipt.status, false);\n      assert.equal(error.reason, 'Not enough Ether provided.');\n      assert.equal(error.signature, 'Error(String)');\n      done();\n    });\n  });","file":"eth.sendTransaction.revert.js","skipped":false,"dir":"test"},{"name":"subscribes (baseline)","suites":["subscription connect/reconnect"],"updatePoint":{"line":35,"column":27,"index":798},"line":35,"code":"  it('subscribes (baseline)', function (done) {\n    web3.eth.subscribe('newBlockHeaders').once('data', function (result) {\n      assert(result.parentHash);\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"subscribes with a callback","suites":["subscription connect/reconnect"],"updatePoint":{"line":41,"column":32,"index":987},"line":41,"code":"  it('subscribes with a callback', function (done) {\n    subscription = web3.eth.subscribe('newBlockHeaders', function (err, result) {\n      assert(result.parentHash);\n      subscription.unsubscribe(); // Stop listening..\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"subscription emits a connected event","suites":["subscription connect/reconnect"],"updatePoint":{"line":48,"column":42,"index":1247},"line":48,"code":"  it('subscription emits a connected event', function (done) {\n    subscription = web3.eth.subscribe('newBlockHeaders').on('connected', function (result) {\n      assert(result); // First subscription\n      subscription.unsubscribe(); // Stop listening..\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"unsubscribe should remove the subscription object from the subscriptions and send eth_unsubscribe to the node","suites":["subscription connect/reconnect"],"updatePoint":{"line":55,"column":115,"index":1602},"line":55,"code":"  it('unsubscribe should remove the subscription object from the subscriptions and send eth_unsubscribe to the node', function (done) {\n    subscription = web3.eth.subscribe('newBlockHeaders').on('connected', function () {\n      const id = subscription.id;\n      assert(subscription.options.requestManager.subscriptions.has(id));\n      subscription.unsubscribe(); // Send eth_unsubscribe to the node\n      assert(!subscription.options.requestManager.subscriptions.has(id));\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"clearSubscriptions","suites":["subscription connect/reconnect"],"updatePoint":{"line":64,"column":24,"index":2013},"line":64,"code":"  it('clearSubscriptions', async function () {\n    web3.eth.subscribe('newBlockHeaders');\n    await waitSeconds(1); // Sub need a little time to set up\n\n    assert.equal(1, web3.eth._requestManager.subscriptions.size);\n    assert.ok(web3.eth.clearSubscriptions());\n    assert.equal(0, web3.eth._requestManager.subscriptions.size);\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"unsubscribes given an id","suites":["subscription connect/reconnect"],"updatePoint":{"line":72,"column":30,"index":2356},"line":72,"code":"  it('unsubscribes given an id', async function () {\n    subscription = web3.eth.subscribe('newBlockHeaders');\n    await waitSeconds(1);\n    assert.equal(1, web3.eth._requestManager.subscriptions.size);\n    web3.eth.removeSubscriptionById(subscription.id);\n    assert.equal(0, web3.eth._requestManager.subscriptions.size);\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"unsubscribes given an id with multiple subscriptions","suites":["subscription connect/reconnect"],"updatePoint":{"line":79,"column":58,"index":2713},"line":79,"code":"  it('unsubscribes given an id with multiple subscriptions', async function () {\n    subscription = web3.eth.subscribe('newBlockHeaders');\n    subscription2 = web3.eth.subscribe(\"logs\");\n    await waitSeconds(1);\n    assert.equal(2, web3.eth._requestManager.subscriptions.size);\n    web3.eth.removeSubscriptionById(subscription.id);\n    assert.equal(1, web3.eth._requestManager.subscriptions.size);\n    web3.eth.removeSubscriptionById(subscription2.id);\n    assert.equal(0, web3.eth._requestManager.subscriptions.size);\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"resubscribes to an existing subscription","suites":["subscription connect/reconnect"],"updatePoint":{"line":89,"column":46,"index":3227},"line":89,"code":"  it('resubscribes to an existing subscription', function (done) {\n    this.timeout(5000);\n    let stage = 0;\n    subscription = web3.eth.subscribe('newBlockHeaders');\n    subscription.on('data', function (result) {\n      if (stage === 0) {\n        subscription.resubscribe();\n        stage = 1;\n        return;\n      }\n      assert(result.parentHash);\n      subscription.unsubscribe(); // Stop listening..\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"resubscribes after being unsubscribed","suites":["subscription connect/reconnect"],"updatePoint":{"line":104,"column":43,"index":3659},"line":104,"code":"  it('resubscribes after being unsubscribed', function (done) {\n    this.timeout(5000);\n    let stage = 0;\n    subscription = web3.eth.subscribe('newBlockHeaders').on('data', function (result) {\n      assert(result.parentHash);\n      subscription.unsubscribe();\n      stage = 1;\n    });\n\n    // Resubscribe from outside\n    let interval = setInterval(async function () {\n      if (stage === 1) {\n        clearInterval(interval);\n        subscription.resubscribe();\n        subscription.on('data', function (result) {\n          assert(result.parentHash);\n          subscription.unsubscribe(); // Stop listening..\n          done();\n        });\n      }\n    }, 500);\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"does not error when client closes after disconnect","suites":["subscription connect/reconnect"],"updatePoint":{"line":128,"column":56,"index":4410},"line":128,"code":"  it('does not error when client closes after disconnect', async function () {\n    this.timeout(7000);\n    return new Promise(async function (resolve, reject) {\n      web3.eth.subscribe('newBlockHeaders').once(\"error\", function (err) {\n        reject(new Error('Should not hear an error '));\n      });\n\n      // Let a couple blocks mine..\n      await waitSeconds(2);\n      web3.currentProvider.disconnect();\n\n      // This delay seems to be required (on Travis).\n      await waitSeconds(1);\n      await server.close();\n      await waitSeconds(1);\n      resolve();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"does not hear old subscriptions after setting a new provider","suites":["subscription connect/reconnect"],"updatePoint":{"line":148,"column":66,"index":5047},"line":148,"code":"  it('does not hear old subscriptions after setting a new provider', async function () {\n    this.timeout(7000);\n    let counter = 0;\n    return new Promise(async function (resolve, reject) {\n      web3.eth.subscribe('newBlockHeaders').on(\"data\", function (_) {\n        counter++;\n      });\n\n      // Let a couple blocks mine..\n      await waitSeconds(2);\n      assert(counter >= 1);\n\n      // Connect to a different client;\n      const newServer = ganache.server({\n        miner: {\n          blockTime: 1\n        }\n      });\n      await newServer.listen(8777);\n      const finalCount = counter;\n      web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8777'));\n      await waitSeconds(2);\n      assert.equal(counter, finalCount);\n      await newServer.close();\n      resolve();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"allows a subscription which does not exist","suites":["subscription connect/reconnect"],"updatePoint":{"line":175,"column":48,"index":5841},"line":175,"code":"  it('allows a subscription which does not exist', function () {\n    web3.eth.subscribe('subscription-does-not-exists');\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"errors when zero params subscrip. is called with the wrong arguments","suites":["subscription connect/reconnect"],"updatePoint":{"line":178,"column":74,"index":5994},"line":178,"code":"  it('errors when zero params subscrip. is called with the wrong arguments', function () {\n    try {\n      web3.eth.subscribe('newBlockHeaders', 5);\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('Invalid number of parameters for \"newHeads\"'));\n      assert(err.message.includes('Got 1 expected 0'));\n    }\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"errors when the provider is not set (callback)","suites":["subscription connect/reconnect"],"updatePoint":{"line":187,"column":52,"index":6313},"line":187,"code":"  it('errors when the provider is not set (callback)', function (done) {\n    web3 = new Web3();\n    web3.eth.subscribe('newBlockHeaders', function (err, result) {\n      assert(err.message.includes('No provider set'));\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"errors when the provider is not set (.on(\"error\"))","suites":["subscription connect/reconnect"],"updatePoint":{"line":194,"column":56,"index":6563},"line":194,"code":"  it('errors when the provider is not set (.on(\"error\"))', function (done) {\n    web3 = new Web3();\n    web3.eth.subscribe('newBlockHeaders').once(\"error\", function (err) {\n      assert(err.message.includes('No provider set'));\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"errors when the provider does not support subscriptions (callback)","suites":["subscription connect/reconnect"],"updatePoint":{"line":201,"column":72,"index":6835},"line":201,"code":"  it('errors when the provider does not support subscriptions (callback)', function (done) {\n    web3 = new Web3('http://localhost:' + port);\n    web3.eth.subscribe('newBlockHeaders', function (err, result) {\n      assert(err.message.includes(\"provider doesn't support subscriptions: HttpProvider\"));\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"errors when the provider does not support subscriptions (.on(\"error\"))","suites":["subscription connect/reconnect"],"updatePoint":{"line":208,"column":76,"index":7168},"line":208,"code":"  it('errors when the provider does not support subscriptions (.on(\"error\"))', function (done) {\n    web3 = new Web3('http://localhost:' + port);\n    web3.eth.subscribe('newBlockHeaders').once(\"error\", function (err) {\n      assert(err.message.includes(\"provider doesn't support subscriptions: HttpProvider\"));\n      done();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"errors when the `eth_subscribe` request got send, the reponse isnt returned from the node, and the connection does get closed in the mean time","suites":["subscription connect/reconnect"],"updatePoint":{"line":215,"column":148,"index":7579},"line":215,"code":"  it('errors when the `eth_subscribe` request got send, the reponse isnt returned from the node, and the connection does get closed in the mean time', async function () {\n    await server.close();\n    return new Promise(async function (resolve) {\n      web3.eth.subscribe('newBlockHeaders').once('error', function (err) {\n        assert(err.message.includes('connection not open on send()'));\n        resolve();\n      });\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"errors when the subscription got established (is running) and the connection does get closed","suites":["subscription connect/reconnect"],"updatePoint":{"line":224,"column":98,"index":7965},"line":224,"code":"  it('errors when the subscription got established (is running) and the connection does get closed', function () {\n    this.timeout(5000);\n    let counter = 0;\n    return new Promise(async function (resolve) {\n      web3.eth.subscribe('newBlockHeaders').once('data', async function () {\n        await server.close();\n      });\n      web3.eth.currentProvider.on('close', function (err) {\n        counter++;\n        assert(err.reason.includes('Server closed by client'));\n        assert(err.code === 1000);\n      });\n\n      // Make sure error handler doesn't fire twice\n      await waitSeconds(2);\n      assert.equal(counter, 1);\n      web3.eth.currentProvider.removeAllListeners();\n      resolve();\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"auto reconnects and keeps the subscription running","suites":["subscription connect/reconnect"],"updatePoint":{"line":244,"column":56,"index":8635},"line":244,"code":"  it('auto reconnects and keeps the subscription running', function () {\n    this.timeout(6000);\n    web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:' + port, {\n      reconnect: {\n        auto: true\n      }\n    }));\n    return new Promise(async function (resolve) {\n      // Stage 0:\n      let stage = 0;\n      web3.eth.subscribe('newBlockHeaders').on('data', function (result) {\n        assert(result.parentHash);\n\n        // Exit point, flag set below\n        if (stage === 1) {\n          web3.currentProvider.disconnect();\n          this.removeAllListeners();\n          resolve();\n        }\n      });\n\n      // Stage 1: Close & re-open server\n      await server.close();\n      server = ganache.server({\n        miner: {\n          blockTime: 1\n        },\n        server: {\n          ws: true\n        }\n      });\n      await server.listen(port);\n      stage = 1;\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"auto reconnects, keeps the subscription running and triggers the `connected` event listener twice","suites":["subscription connect/reconnect"],"updatePoint":{"line":279,"column":103,"index":9582},"line":279,"code":"  it('auto reconnects, keeps the subscription running and triggers the `connected` event listener twice', function () {\n    this.timeout(6000);\n    web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:' + port, {\n      reconnect: {\n        auto: true\n      }\n    }));\n    return new Promise(async function (resolve) {\n      // Stage 0:\n      let stage = 0;\n      web3.eth.subscribe('newBlockHeaders').on('connected', function (result) {\n        assert(result);\n\n        // Exit point, flag set below\n        if (stage === 1) {\n          web3.currentProvider.disconnect();\n          this.removeAllListeners();\n          resolve();\n        }\n      });\n\n      // Stage 1: Close & re-open server\n      await server.close();\n      server = ganache.server({\n        miner: {\n          blockTime: 1\n        },\n        server: {\n          ws: true\n        }\n      });\n      await server.listen(port);\n      stage = 1;\n    });\n  });","file":"eth.subscribe.ganache.js","skipped":false,"dir":"test"},{"name":"should check if transactionBlockTimeout is set to proper value","suites":["web3.eth","transactionBlockTimeout"],"updatePoint":{"line":8,"column":70,"index":296},"line":8,"code":"    it('should check if transactionBlockTimeout is set to proper value', function () {\n      assert.equal(eth.transactionBlockTimeout, 50);\n      assert.equal(eth.Contract.transactionBlockTimeout, 50);\n      assert.equal(eth.getCode.method.transactionBlockTimeout, 50);\n    });","file":"eth.transactionBlockTimeout.js","skipped":false,"dir":"test"},{"name":"should set transactionBlockTimeout for all sub packages is set to proper value, if Eth package is changed","suites":["web3.eth","transactionBlockTimeout"],"updatePoint":{"line":13,"column":113,"index":617},"line":13,"code":"    it('should set transactionBlockTimeout for all sub packages is set to proper value, if Eth package is changed', function () {\n      eth.transactionBlockTimeout = setValue;\n      assert.equal(eth.transactionBlockTimeout, setValue);\n      assert.equal(eth.Contract.transactionBlockTimeout, setValue);\n      assert.equal(eth.getCode.method.transactionBlockTimeout, setValue);\n    });","file":"eth.transactionBlockTimeout.js","skipped":false,"dir":"test"},{"name":"should check if transactionConfirmationBlocks is set to proper value","suites":["web3.eth","transactionConfirmationBlocks"],"updatePoint":{"line":8,"column":76,"index":308},"line":8,"code":"    it('should check if transactionConfirmationBlocks is set to proper value', function () {\n      assert.equal(eth.transactionConfirmationBlocks, 24);\n      assert.equal(eth.Contract.transactionConfirmationBlocks, 24);\n      assert.equal(eth.getCode.method.transactionConfirmationBlocks, 24);\n    });","file":"eth.transactionConfirmationBlocks.js","skipped":false,"dir":"test"},{"name":"should set transactionConfirmationBlocks for all sub packages is set to proper value, if Eth package is changed","suites":["web3.eth","transactionConfirmationBlocks"],"updatePoint":{"line":13,"column":119,"index":653},"line":13,"code":"    it('should set transactionConfirmationBlocks for all sub packages is set to proper value, if Eth package is changed', function () {\n      eth.transactionConfirmationBlocks = setValue;\n      assert.equal(eth.transactionConfirmationBlocks, setValue);\n      assert.equal(eth.Contract.transactionConfirmationBlocks, setValue);\n      assert.equal(eth.getCode.method.transactionConfirmationBlocks, setValue);\n    });","file":"eth.transactionConfirmationBlocks.js","skipped":false,"dir":"test"},{"name":"should check if transactionPollingInterval is set to proper value","suites":["web3.eth","transactionPollingInterval"],"updatePoint":{"line":8,"column":73,"index":302},"line":8,"code":"    it('should check if transactionPollingInterval is set to proper value', function () {\n      assert.equal(eth.transactionPollingInterval, 1000);\n      assert.equal(eth.Contract.transactionPollingInterval, 1000);\n      assert.equal(eth.getCode.method.transactionPollingInterval, 1000);\n    });","file":"eth.transactionPollingInterval.js","skipped":false,"dir":"test"},{"name":"should set transactionPollingInterval for all sub packages is set to proper value, if Eth package is changed","suites":["web3.eth","transactionPollingInterval"],"updatePoint":{"line":13,"column":116,"index":641},"line":13,"code":"    it('should set transactionPollingInterval for all sub packages is set to proper value, if Eth package is changed', function () {\n      eth.transactionPollingInterval = setValue;\n      assert.equal(eth.transactionPollingInterval, setValue);\n      assert.equal(eth.Contract.transactionPollingInterval, setValue);\n      assert.equal(eth.getCode.method.transactionPollingInterval, setValue);\n    });","file":"eth.transactionPollingInterval.js","skipped":false,"dir":"test"},{"name":"should check if transactionPollingTimeout is set to proper value","suites":["web3.eth","transactionPollingTimeout"],"updatePoint":{"line":8,"column":72,"index":300},"line":8,"code":"    it('should check if transactionPollingTimeout is set to proper value', function () {\n      assert.equal(eth.transactionPollingTimeout, 750);\n      assert.equal(eth.Contract.transactionPollingTimeout, 750);\n      assert.equal(eth.getCode.method.transactionPollingTimeout, 750);\n    });","file":"eth.transactionPollingTimeout.js","skipped":false,"dir":"test"},{"name":"should set transactionPollingTimeout for all sub packages is set to proper value, if Eth package is changed","suites":["web3.eth","transactionPollingTimeout"],"updatePoint":{"line":13,"column":115,"index":632},"line":13,"code":"    it('should set transactionPollingTimeout for all sub packages is set to proper value, if Eth package is changed', function () {\n      eth.transactionPollingTimeout = setValue;\n      assert.equal(eth.transactionPollingTimeout, setValue);\n      assert.equal(eth.Contract.transactionPollingTimeout, setValue);\n      assert.equal(eth.getCode.method.transactionPollingTimeout, setValue);\n    });","file":"eth.transactionPollingTimeout.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","inputAddressFormatter correct addresses"],"updatePoint":{"line":39,"column":41,"index":1711},"line":39,"code":"      it('should return the correct value', function () {\n        assert.deepEqual(formatters.inputAddressFormatter(test.input), test.result);\n      });","file":"formatters.inputAddressFormatter.js","skipped":false,"dir":"test"},{"name":"should throw an exception","suites":["formatters","inputAddressFormatter wrong addresses"],"updatePoint":{"line":48,"column":35,"index":2020},"line":48,"code":"      it('should throw an exception', function () {\n        assert.throws(function () {\n          formatters.inputAddressFormatter(test);\n        }, null, null, 'Should throw:' + test);\n      });","file":"formatters.inputAddressFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with a valid log","suites":["InputLogFormatterTest"],"updatePoint":{"line":5,"column":45,"index":225},"line":5,"code":"  it('call inputLogFormatter with a valid log', function () {\n    var log = {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: ['0x0'],\n      address: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: ['0x0'],\n      address: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with numerical from/to blocks","suites":["InputLogFormatterTest"],"updatePoint":{"line":19,"column":58,"index":669},"line":19,"code":"  it('call inputLogFormatter with numerical from/to blocks', function () {\n    var log = {\n      fromBlock: 1,\n      toBlock: 2,\n      topics: ['0x0'],\n      address: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: '0x1',\n      toBlock: '0x2',\n      topics: ['0x0'],\n      address: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with zero valued from/to blocks","suites":["InputLogFormatterTest"],"updatePoint":{"line":33,"column":60,"index":1091},"line":33,"code":"  it('call inputLogFormatter with zero valued from/to blocks', function () {\n    var log = {\n      fromBlock: 0,\n      toBlock: 0,\n      topics: ['0x0'],\n      address: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: '0x0',\n      toBlock: '0x0',\n      topics: ['0x0'],\n      address: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with a array of addresses in the log","suites":["InputLogFormatterTest"],"updatePoint":{"line":47,"column":65,"index":1518},"line":47,"code":"  it('call inputLogFormatter with a array of addresses in the log', function () {\n    var log = {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: ['0x0'],\n      address: ['0x03C9A938fF7f54090d0d99e2c6f80380510Ea078', '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078']\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: ['0x0'],\n      address: ['0x03c9a938ff7f54090d0d99e2c6f80380510ea078', '0x03c9a938ff7f54090d0d99e2c6f80380510ea078']\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with an topic item of null","suites":["InputLogFormatterTest"],"updatePoint":{"line":61,"column":55,"index":2055},"line":61,"code":"  it('call inputLogFormatter with an topic item of null', function () {\n    var log = {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: [null],\n      address: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: [null],\n      address: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with an topic item that does not start with \"0x\"","suites":["InputLogFormatterTest"],"updatePoint":{"line":75,"column":77,"index":2516},"line":75,"code":"  it('call inputLogFormatter with an topic item that does not start with \"0x\"', function () {\n    var log = {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: ['00'],\n      address: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: 'earliest',\n      toBlock: 'latest',\n      topics: ['0x3030'],\n      address: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with a valid log and safe tag toBlock","suites":["InputLogFormatterTest"],"updatePoint":{"line":89,"column":66,"index":2970},"line":89,"code":"  it('call inputLogFormatter with a valid log and safe tag toBlock', function () {\n    var log = {\n      fromBlock: 'earliest',\n      toBlock: 'safe',\n      topics: ['0x0'],\n      address: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: 'earliest',\n      toBlock: 'safe',\n      topics: ['0x0'],\n      address: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"call inputLogFormatter with a valid log and finalized tag toBlock","suites":["InputLogFormatterTest"],"updatePoint":{"line":103,"column":71,"index":3423},"line":103,"code":"  it('call inputLogFormatter with a valid log and finalized tag toBlock', function () {\n    var log = {\n      fromBlock: 'earliest',\n      toBlock: 'finalized',\n      topics: ['0x0'],\n      address: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    };\n    assert.deepEqual(formatters.inputLogFormatter(log), {\n      fromBlock: 'earliest',\n      toBlock: 'finalized',\n      topics: ['0x0'],\n      address: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    });\n  });","file":"formatters.inputLogFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","inputPostFormatter"],"updatePoint":{"line":6,"column":39,"index":255},"line":6,"code":"    it('should return the correct value', function () {\n      // input as strings and numbers\n      assert.deepEqual(formatters.inputPostFormatter({\n        from: '0x00000',\n        to: '0x00000',\n        payload: '0x7b2274657374223a2274657374227d',\n        //{test: 'test'},\n        ttl: 200,\n        priority: 1000,\n        topics: ['hello', 'mytopics'],\n        \"workToProve\": 1\n      }), {\n        from: '0x00000',\n        to: '0x00000',\n        payload: '0x7b2274657374223a2274657374227d',\n        ttl: '0xc8',\n        priority: '0x3e8',\n        topics: ['0x68656c6c6f', '0x6d79746f70696373'],\n        workToProve: '0x1'\n      });\n    });","file":"formatters.inputPostFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","inputTransactionFormatter"],"updatePoint":{"line":248,"column":41,"index":6141},"line":248,"code":"      it('should return the correct value', function () {\n        assert.deepEqual(formatters.inputTransactionFormatter(test.input), test.result);\n      });","file":"formatters.inputTransactionFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","outputBlockFormatter"],"updatePoint":{"line":6,"column":39,"index":257},"line":6,"code":"    it('should return the correct value', function () {\n      assert.deepEqual(formatters.outputBlockFormatter({\n        hash: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        parentHash: '0x83ffb245cfced97ccc5c75253d6960376d6c6dea93647397a543a72fdaea5265',\n        miner: '0xdcc6960376d6c6dea93647383ffb245cfced97cf',\n        stateRoot: '0x54dda68af07643f68739a6e9612ad157a26ae7e2ce81f77842bb5835fbcde583',\n        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n        bloom: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        difficulty: '0x3e8',\n        totalDifficulty: '0x3e8',\n        number: '0x3e8',\n        gasLimit: '0x3e8',\n        gasUsed: '0x3e8',\n        timestamp: '0x3e8',\n        extraData: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        nonce: '0x1fc0f46a3e5325fa',\n        size: '0x3e8'\n      }), {\n        hash: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        parentHash: '0x83ffb245cfced97ccc5c75253d6960376d6c6dea93647397a543a72fdaea5265',\n        miner: '0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf',\n        stateRoot: '0x54dda68af07643f68739a6e9612ad157a26ae7e2ce81f77842bb5835fbcde583',\n        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n        bloom: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        difficulty: '1000',\n        totalDifficulty: '1000',\n        number: 1000,\n        gasLimit: 1000,\n        gasUsed: 1000,\n        timestamp: 1000,\n        extraData: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        nonce: '0x1fc0f46a3e5325fa',\n        size: 1000\n      });\n    });","file":"formatters.outputBlockFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value, when null values are present","suites":["formatters","outputBlockFormatter"],"updatePoint":{"line":41,"column":69,"index":2045},"line":41,"code":"    it('should return the correct value, when null values are present', function () {\n      assert.deepEqual(formatters.outputBlockFormatter({\n        hash: null,\n        parentHash: '0x83ffb245cfced97ccc5c75253d6960376d6c6dea93647397a543a72fdaea5265',\n        miner: null,\n        stateRoot: '0x54dda68af07643f68739a6e9612ad157a26ae7e2ce81f77842bb5835fbcde583',\n        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n        bloom: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        difficulty: '0x3e8',\n        totalDifficulty: '0x3e8',\n        number: null,\n        gasLimit: '0x3e8',\n        gasUsed: '0x3e8',\n        timestamp: '0x3e8',\n        extraData: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        nonce: null,\n        size: '0x3e8'\n      }), {\n        hash: null,\n        parentHash: '0x83ffb245cfced97ccc5c75253d6960376d6c6dea93647397a543a72fdaea5265',\n        miner: null,\n        stateRoot: '0x54dda68af07643f68739a6e9612ad157a26ae7e2ce81f77842bb5835fbcde583',\n        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n        bloom: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        difficulty: '1000',\n        totalDifficulty: '1000',\n        number: null,\n        gasLimit: 1000,\n        gasUsed: 1000,\n        timestamp: 1000,\n        extraData: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        nonce: null,\n        size: 1000\n      });\n    });","file":"formatters.outputBlockFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value, when baseFeePerGas is present","suites":["formatters","outputBlockFormatter"],"updatePoint":{"line":76,"column":70,"index":3591},"line":76,"code":"    it('should return the correct value, when baseFeePerGas is present', function () {\n      assert.deepEqual(formatters.outputBlockFormatter({\n        baseFeePerGas: \"0x7\",\n        difficulty: \"0x6cd6be3a\",\n        extraData: \"0x796f75747562652e636f6d2f77617463683f763d6451773477395767586351\",\n        gasLimit: \"0x1c9c381\",\n        gasUsed: \"0x8dc073\",\n        hash: \"0x846880b1158f434884f3637802ed09bac77eafc35b5f03b881ac88ce38a54907\",\n        logsBloom: \"0x4020001000000000000000008000010000000000400200000001002140000008000000010000810020000840000204304000081000000b00400010000822200004200020020140000001000882000064000021303200020000400008800000000002202102000084010000090020a8000800002000000010000030300000000000000006001005000040080001010000010040018100004c0050004000000000420000000021000200000010020008100000004000080000000000000040000900080102004002000080210201081014004030200148101000002020108025000018020020102040000204240500010000002200048000401300080088000002\",\n        miner: \"0x86864f1edf10eaf105b1bdc6e9aa8232b4c6aa00\",\n        mixHash: \"0xa29afb1fa1aea9eeac72ff435a8fc420bbc1fa1be08223eb61f294ee32250bde\",\n        nonce: \"0x122af1a5ccd78f3b\",\n        number: \"0xa0d600\",\n        parentHash: \"0x28f49150e1fe6f245655925b290f59e707d1e5c646dadaa22937169433b30294\",\n        receiptsRoot: \"0xc97d4f9980d680053606318a5820261a1dccb556d1056b70f0d48fb384986be5\",\n        sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        size: \"0x2042\",\n        stateRoot: \"0x116981b10423133ade5bd44f03c54cc3c57f4467a1c3d4b0c6d8d33a76c361ad\",\n        timestamp: \"0x60dc24ec\",\n        totalDifficulty: \"0x78828f2d886cbb\",\n        transactions: [],\n        transactionsRoot: \"0x738f53f745d58169da93ebbd52cc49e0c979d6ca68a6513007b546b19ab78ba4\",\n        uncles: []\n      }), {\n        baseFeePerGas: 7,\n        difficulty: \"1826012730\",\n        extraData: \"0x796f75747562652e636f6d2f77617463683f763d6451773477395767586351\",\n        gasLimit: 30000001,\n        gasUsed: 9289843,\n        hash: \"0x846880b1158f434884f3637802ed09bac77eafc35b5f03b881ac88ce38a54907\",\n        logsBloom: \"0x4020001000000000000000008000010000000000400200000001002140000008000000010000810020000840000204304000081000000b00400010000822200004200020020140000001000882000064000021303200020000400008800000000002202102000084010000090020a8000800002000000010000030300000000000000006001005000040080001010000010040018100004c0050004000000000420000000021000200000010020008100000004000080000000000000040000900080102004002000080210201081014004030200148101000002020108025000018020020102040000204240500010000002200048000401300080088000002\",\n        miner: \"0x86864F1edf10eAf105b1BDC6E9aA8232B4c6aA00\",\n        mixHash: \"0xa29afb1fa1aea9eeac72ff435a8fc420bbc1fa1be08223eb61f294ee32250bde\",\n        nonce: \"0x122af1a5ccd78f3b\",\n        number: 10540544,\n        parentHash: \"0x28f49150e1fe6f245655925b290f59e707d1e5c646dadaa22937169433b30294\",\n        receiptsRoot: \"0xc97d4f9980d680053606318a5820261a1dccb556d1056b70f0d48fb384986be5\",\n        sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        size: 8258,\n        stateRoot: \"0x116981b10423133ade5bd44f03c54cc3c57f4467a1c3d4b0c6d8d33a76c361ad\",\n        timestamp: 1625040108,\n        totalDifficulty: \"33920548661128379\",\n        transactions: [],\n        transactionsRoot: \"0x738f53f745d58169da93ebbd52cc49e0c979d6ca68a6513007b546b19ab78ba4\",\n        uncles: []\n      });\n    });","file":"formatters.outputBlockFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","outputLogFormatter"],"updatePoint":{"line":5,"column":39,"index":233},"line":5,"code":"    it('should return the correct value', function () {\n      assert.deepEqual(formatters.outputLogFormatter({\n        transactionIndex: '0x3e8',\n        logIndex: '0x3e8',\n        blockNumber: '0x3e8',\n        transactionHash: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        blockHash: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        data: '0x7b2274657374223a2274657374227',\n        address: \"0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae\",\n        // lowercase address\n        topics: ['0x68656c6c6f', '0x6d79746f70696373']\n      }), {\n        transactionIndex: 1000,\n        logIndex: 1000,\n        blockNumber: 1000,\n        transactionHash: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        blockHash: '0xd6960376d6c6dea93647383ffb245cfced97ccc5c7525397a543a72fdaea5265',\n        data: '0x7b2274657374223a2274657374227',\n        topics: ['0x68656c6c6f', '0x6d79746f70696373'],\n        address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n        // checksum address\n        id: \"log_2b801386\"\n      });\n    });","file":"formatters.outputLogFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value, when null values are present","suites":["formatters","outputLogFormatter"],"updatePoint":{"line":29,"column":69,"index":1366},"line":29,"code":"    it('should return the correct value, when null values are present', function () {\n      assert.deepEqual(formatters.outputLogFormatter({\n        transactionIndex: null,\n        logIndex: null,\n        blockNumber: null,\n        transactionHash: null,\n        blockHash: null,\n        data: '0x7b2274657374223a2274657374227',\n        topics: ['0x68656c6c6f', '0x6d79746f70696373']\n      }), {\n        transactionIndex: null,\n        logIndex: null,\n        blockNumber: null,\n        transactionHash: null,\n        blockHash: null,\n        id: null,\n        data: '0x7b2274657374223a2274657374227',\n        topics: ['0x68656c6c6f', '0x6d79746f70696373']\n      });\n    });","file":"formatters.outputLogFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","outputPostFormatter"],"updatePoint":{"line":5,"column":39,"index":234},"line":5,"code":"    it('should return the correct value', function () {\n      assert.deepEqual(formatters.outputPostFormatter({\n        expiry: '0x3e8',\n        sent: '0x3e8',\n        ttl: '0x3e8',\n        workProved: '0x3e8',\n        payload: '0x7b2274657374223a2274657374227d',\n        topics: ['0x68656c6c6f', '0x6d79746f70696373']\n      }), {\n        expiry: 1000,\n        sent: 1000,\n        ttl: 1000,\n        workProved: 1000,\n        payload: '0x7b2274657374223a2274657374227d',\n        //{test: 'test'},\n        // payloadRaw: '0x7b2274657374223a2274657374227d',\n        topics: ['hello', 'mytopics']\n      });\n    });","file":"formatters.outputPostFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","outputTransactionFormatter"],"updatePoint":{"line":5,"column":39,"index":241},"line":5,"code":"    it('should return the correct value', function () {\n      assert.deepEqual(formatters.outputTransactionFormatter({\n        input: '0x3454645634534',\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n        value: '0x3e8',\n        gas: '0x3e8',\n        gasPrice: '0x3e8',\n        nonce: '0xb',\n        transactionIndex: '0x1',\n        blockNumber: '0x3e8',\n        blockHash: '0xc9b9cdc2092a9d6589d96662b1fd6949611163fb3910cf8a173cd060f17702f9'\n      }), {\n        input: '0x3454645634534',\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        value: '1000',\n        gas: 1000,\n        gasPrice: '1000',\n        nonce: 11,\n        blockNumber: 1000,\n        blockHash: '0xc9b9cdc2092a9d6589d96662b1fd6949611163fb3910cf8a173cd060f17702f9',\n        transactionIndex: 1\n      });\n    });","file":"formatters.outputTransactionFormatter.js","skipped":false,"dir":"test"},{"name":"should return the correct value, when null values are present","suites":["formatters","outputTransactionFormatter"],"updatePoint":{"line":30,"column":69,"index":1201},"line":30,"code":"    it('should return the correct value, when null values are present', function () {\n      assert.deepEqual(formatters.outputTransactionFormatter({\n        input: '0x3454645634534',\n        from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n        to: null,\n        value: '0x3e8',\n        gas: '0x3e8',\n        gasPrice: null,\n        nonce: '0xb',\n        transactionIndex: null,\n        blockNumber: null,\n        blockHash: null\n      }), {\n        input: '0x3454645634534',\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: null,\n        value: 1000,\n        gas: 1000,\n        gasPrice: null,\n        nonce: 11,\n        blockNumber: null,\n        blockHash: null,\n        transactionIndex: null\n      });\n    });","file":"formatters.outputTransactionFormatter.js","skipped":false,"dir":"test"},{"name":"should format EIP1559 values correctly","suites":["formatters","outputTransactionFormatter"],"updatePoint":{"line":55,"column":46,"index":1922},"line":55,"code":"    it('should format EIP1559 values correctly', function () {\n      assert.deepEqual(formatters.outputTransactionFormatter({\n        accessList: [],\n        input: '0x3454645634534',\n        from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n        to: null,\n        value: '0x3e8',\n        gas: '0x3e8',\n        gasPrice: '0x3e8',\n        maxFeePerGas: '0x104c533c00',\n        maxPriorityFeePerGas: '0x1a13b8600',\n        nonce: '0xb',\n        transactionIndex: null,\n        type: '0x2',\n        blockNumber: null,\n        blockHash: null\n      }), {\n        accessList: [],\n        input: '0x3454645634534',\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: null,\n        value: '1000',\n        gas: 1000,\n        gasPrice: '1000',\n        maxFeePerGas: '70000000000',\n        maxPriorityFeePerGas: '7000000000',\n        nonce: 11,\n        blockNumber: null,\n        blockHash: null,\n        transactionIndex: null,\n        type: 2\n      });\n    });","file":"formatters.outputTransactionFormatter.js","skipped":false,"dir":"test"},{"name":"call outputTransactionReceiptFormatter with a valid receipt","suites":["outputTransactionReceiptFormatter"],"updatePoint":{"line":4,"column":65,"index":235},"line":4,"code":"  it('call outputTransactionReceiptFormatter with a valid receipt', function () {\n    var receipt = {\n      status: '0x0',\n      cumulativeGasUsed: '0x100',\n      gasUsed: '0x100',\n      blockNumber: '0x100',\n      transactionIndex: '0xa',\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    };\n    assert.deepEqual(formatters.outputTransactionReceiptFormatter(receipt), {\n      status: false,\n      cumulativeGasUsed: 256,\n      gasUsed: 256,\n      blockNumber: 256,\n      transactionIndex: 10,\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078'\n    });\n  });","file":"formatters.outputTransactionReceiptFormatter.js","skipped":false,"dir":"test"},{"name":"call outputTransactionReceiptFormatter with a valid receipt and logs","suites":["outputTransactionReceiptFormatter"],"updatePoint":{"line":26,"column":74,"index":1070},"line":26,"code":"  it('call outputTransactionReceiptFormatter with a valid receipt and logs', function () {\n    var receipt = {\n      status: '0x0',\n      cumulativeGasUsed: '0x100',\n      gasUsed: '0x100',\n      blockNumber: '0x100',\n      transactionIndex: '0xa',\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      logs: [{}]\n    };\n    assert.deepEqual(formatters.outputTransactionReceiptFormatter(receipt), {\n      status: false,\n      cumulativeGasUsed: 256,\n      gasUsed: 256,\n      blockNumber: 256,\n      transactionIndex: 10,\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03C9A938fF7f54090d0d99e2c6f80380510Ea078',\n      logs: [{\n        blockNumber: undefined,\n        id: null,\n        logIndex: undefined,\n        transactionIndex: undefined\n      }]\n    });\n  });","file":"formatters.outputTransactionReceiptFormatter.js","skipped":false,"dir":"test"},{"name":"call outputTransactionReceiptFormatter when status is \"0x1\"","suites":["outputTransactionReceiptFormatter"],"updatePoint":{"line":55,"column":65,"index":2054},"line":55,"code":"  it('call outputTransactionReceiptFormatter when status is \"0x1\"', function () {\n    var receipt = {\n      status: '0x1',\n      cumulativeGasUsed: '0x100',\n      gasUsed: '0x100',\n      blockNumber: '0x100',\n      transactionIndex: '0xa',\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    };\n    assert.equal(formatters.outputTransactionReceiptFormatter(receipt).status, true);\n  });","file":"formatters.outputTransactionReceiptFormatter.js","skipped":false,"dir":"test"},{"name":"call outputTransactionReceiptFormatter when status is \"0x01\"","suites":["outputTransactionReceiptFormatter"],"updatePoint":{"line":68,"column":66,"index":2576},"line":68,"code":"  it('call outputTransactionReceiptFormatter when status is \"0x01\"', function () {\n    var receipt = {\n      status: '0x01',\n      cumulativeGasUsed: '0x100',\n      gasUsed: '0x100',\n      blockNumber: '0x100',\n      transactionIndex: '0xa',\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    };\n    assert.equal(formatters.outputTransactionReceiptFormatter(receipt).status, true);\n  });","file":"formatters.outputTransactionReceiptFormatter.js","skipped":false,"dir":"test"},{"name":"call outputTransactionReceiptFormatter when status is \"undefined\"","suites":["outputTransactionReceiptFormatter"],"updatePoint":{"line":81,"column":71,"index":3104},"line":81,"code":"  it('call outputTransactionReceiptFormatter when status is \"undefined\"', function () {\n    var receipt = {\n      status: undefined,\n      cumulativeGasUsed: '0x100',\n      gasUsed: '0x100',\n      blockNumber: '0x100',\n      transactionIndex: '0xa',\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    };\n    assert.equal(formatters.outputTransactionReceiptFormatter(receipt).status, undefined);\n  });","file":"formatters.outputTransactionReceiptFormatter.js","skipped":false,"dir":"test"},{"name":"call outputTransactionReceiptFormatter when status is \"null\"","suites":["outputTransactionReceiptFormatter"],"updatePoint":{"line":94,"column":66,"index":3635},"line":94,"code":"  it('call outputTransactionReceiptFormatter when status is \"null\"', function () {\n    var receipt = {\n      status: null,\n      cumulativeGasUsed: '0x100',\n      gasUsed: '0x100',\n      blockNumber: '0x100',\n      transactionIndex: '0xa',\n      to: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      from: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078',\n      contractAddress: '0x03c9a938ff7f54090d0d99e2c6f80380510ea078'\n    };\n    assert.equal(formatters.outputTransactionReceiptFormatter(receipt).status, null);\n  });","file":"formatters.outputTransactionReceiptFormatter.js","skipped":false,"dir":"test"},{"name":"should set request header","suites":["web3-providers-http","prepareRequest"],"updatePoint":{"line":32,"column":33,"index":1015},"line":32,"code":"    it('should set request header', function () {\n      var options = {\n        headers: [{\n          name: 'Access-Control-Allow-Origin',\n          value: '*'\n        }]\n      };\n      var provider = new HttpProvider('http://localhost:8545', options);\n      assert.equal(provider.headers, options.headers);\n      assert.equal(provider.httpAgent instanceof http.Agent, true);\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should have https agent","suites":["web3-providers-http","prepareRequest"],"updatePoint":{"line":43,"column":31,"index":1397},"line":43,"code":"    it('should have https agent', function () {\n      var provider = new HttpProvider('https://localhost');\n      assert.equal(provider.httpsAgent instanceof https.Agent, true);\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should use the passed custom http agent","suites":["web3-providers-http","prepareRequest"],"updatePoint":{"line":47,"column":47,"index":1599},"line":47,"code":"    it('should use the passed custom http agent', function () {\n      var agent = new http.Agent();\n      var options = {\n        agent: {\n          http: agent\n        }\n      };\n      var provider = new HttpProvider('http://localhost:8545', options);\n      assert.equal(provider.agent.http, agent);\n      assert.equal(provider.httpAgent, undefined);\n      assert.equal(provider.httpsAgent, undefined);\n      assert.equal(provider.agent, options.agent);\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should use the passed custom https agent","suites":["web3-providers-http","prepareRequest"],"updatePoint":{"line":60,"column":48,"index":2063},"line":60,"code":"    it('should use the passed custom https agent', function () {\n      var agent = new https.Agent();\n      var options = {\n        agent: {\n          https: agent\n        }\n      };\n      var provider = new HttpProvider('http://localhost:8545', options);\n      assert.equal(provider.agent.https, agent);\n      assert.equal(provider.httpAgent, undefined);\n      assert.equal(provider.httpsAgent, undefined);\n      assert.equal(provider.agent, options.agent);\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should fail with invalid remote node connection","suites":["web3-providers-http","send"],"updatePoint":{"line":75,"column":55,"index":2576},"line":75,"code":"    it('should fail with invalid remote node connection', async function () {\n      var provider = new HttpProvider('http://localhost:8545');\n      var web3 = new Web3(provider);\n      await expect(web3.eth.getChainId()).to.be.rejectedWith(Error, \"CONNECTION ERROR: Couldn't connect to node http://localhost:8545.\");\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should fail for non-json format response","suites":["web3-providers-http","send"],"updatePoint":{"line":80,"column":48,"index":2894},"line":80,"code":"    it('should fail for non-json format response', async function () {\n      var provider = new HttpProvider('/fetchMock');\n      var web3 = new Web3(provider);\n      fetchMock.mock('/fetchMock', 'Testing non-json format response');\n      await expect(web3.eth.getChainId()).to.be.rejectedWith(Error, /Invalid JSON RPC response/);\n      fetchMock.restore();\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should timeout by delayed response","suites":["web3-providers-http","send"],"updatePoint":{"line":87,"column":42,"index":3254},"line":87,"code":"    it('should timeout by delayed response', async function () {\n      var provider = new HttpProvider('/fetchMock', {\n        timeout: 500\n      });\n      var web3 = new Web3(provider);\n      fetchMock.mock('/fetchMock', 'Testing non-json format response', {\n        delay: 1000\n      });\n      await expect(web3.eth.getChainId()).to.be.rejectedWith(Error, 'CONNECTION TIMEOUT: timeout of 500 ms achived');\n      fetchMock.restore();\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should send basic async request","suites":["web3-providers-http","send"],"updatePoint":{"line":98,"column":39,"index":3694},"line":98,"code":"    it('should send basic async request', async function () {\n      var provider = new HttpProvider('/fetchMock');\n      var reqObject = {\n        'jsonrpc': '2.0',\n        'id': 0,\n        'method': 'eth_chainId',\n        'params': []\n      };\n      var resObject = {\n        'jsonrpc': '2.0',\n        'id': 0,\n        'result': '0x1'\n      };\n      fetchMock.mock((url, opts) => {\n        const reqCount = JSON.parse(opts.body).id;\n        reqObject = JSON.stringify((() => {\n          const obj = reqObject;\n          obj.id = reqCount;\n          return obj;\n        })());\n        resObject = (() => {\n          const obj = resObject;\n          obj.id = reqCount;\n          return obj;\n        })();\n        const matcher = {\n          url: '/fetchMock',\n          method: 'POST',\n          credentials: 'omit',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: reqObject\n        };\n        return url === matcher.url && opts.method === matcher.method && opts.credentials === matcher.credentials && deepEqual(opts.headers, matcher.headers) && opts.body === matcher.body;\n      }, resObject);\n      var web3 = new Web3(provider);\n      var chainId = await web3.eth.getChainId();\n      assert.equal(chainId, 1);\n      fetchMock.restore();\n    });","file":"httpprovider.js","skipped":false,"dir":"test"},{"name":"should increment the id","suites":["lib/web3/jsonrpc","id"],"updatePoint":{"line":6,"column":31,"index":235},"line":6,"code":"    it('should increment the id', function () {\n      // given\n      var method = 'm';\n\n      // when\n      var p1 = Jsonrpc.toPayload(method);\n      var p2 = Jsonrpc.toPayload(method);\n\n      // then\n      assert.equal(p2.id, p1.id + 1);\n    });","file":"jsonrpc.id.js","skipped":false,"dir":"test"},{"name":"should validate basic jsonrpc response","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":5,"column":46,"index":232},"line":5,"code":"    it('should validate basic jsonrpc response', function () {\n      // given\n      var response = {\n        jsonrpc: '2.0',\n        id: 1,\n        result: []\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, true);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate basic undefined response","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":19,"column":48,"index":526},"line":19,"code":"    it('should validate basic undefined response', function () {\n      // given\n      var response = undefined;\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, false);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response without jsonrpc field","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":29,"column":62,"index":777},"line":29,"code":"    it('should validate jsonrpc response without jsonrpc field', function () {\n      // given\n      var response = {\n        id: 1,\n        result: []\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, false);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response with wrong jsonrpc version","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":42,"column":67,"index":1067},"line":42,"code":"    it('should validate jsonrpc response with wrong jsonrpc version', function () {\n      // given\n      var response = {\n        jsonrpc: '1.0',\n        id: 1,\n        result: []\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, false);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response without id number","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":56,"column":58,"index":1372},"line":56,"code":"    it('should validate jsonrpc response without id number', function () {\n      // given\n      var response = {\n        jsonrpc: '2.0',\n        result: []\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, false);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response with string id field","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":69,"column":61,"index":1665},"line":69,"code":"    it('should validate jsonrpc response with string id field', function () {\n      // given\n      var response = {\n        jsonrpc: '2.0',\n        id: 'x',\n        result: []\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, true);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response with string id field but as number","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":83,"column":75,"index":1988},"line":83,"code":"    it('should validate jsonrpc response with string id field but as number', function () {\n      // given\n      var response = {\n        jsonrpc: '2.0',\n        id: '23',\n        result: []\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, true);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response without result field","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":97,"column":61,"index":2298},"line":97,"code":"    it('should validate jsonrpc response without result field', function () {\n      // given\n      var response = {\n        jsonrpc: '2.0',\n        id: 1\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, false);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response with result field === false","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":110,"column":68,"index":2593},"line":110,"code":"    it('should validate jsonrpc response with result field === false', function () {\n      // given\n      var response = {\n        jsonrpc: '2.0',\n        id: 1,\n        result: false\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, true);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should validate jsonrpc response with result field === 0","suites":["jsonrpc","isValidResponse"],"updatePoint":{"line":124,"column":64,"index":2906},"line":124,"code":"    it('should validate jsonrpc response with result field === 0', function () {\n      // given\n      var response = {\n        jsonrpc: '2.0',\n        id: 1,\n        result: 0\n      };\n\n      // when\n      var valid = Jsonrpc.isValidResponse(response);\n\n      // then\n      assert.equal(valid, true);\n    });","file":"jsonrpc.isValidResponse.js","skipped":false,"dir":"test"},{"name":"should create basic batch payload","suites":["jsonrpc","toBatchPayload"],"updatePoint":{"line":5,"column":41,"index":226},"line":5,"code":"    it('should create basic batch payload', function () {\n      // given\n      var messages = [{\n        method: 'helloworld'\n      }, {\n        method: 'test2',\n        params: [1]\n      }];\n\n      // when\n      var payload = Jsonrpc.toBatchPayload(messages);\n\n      // then\n      assert.equal(Array.isArray(payload), true);\n      assert.equal(payload.length, 2);\n      assert.equal(payload[0].jsonrpc, '2.0');\n      assert.equal(payload[1].jsonrpc, '2.0');\n      assert.equal(payload[0].method, 'helloworld');\n      assert.equal(payload[1].method, 'test2');\n      assert.equal(Array.isArray(payload[0].params), true);\n      assert.equal(payload[1].params.length, 1);\n      assert.equal(payload[1].params[0], 1);\n      assert.equal(typeof payload[0].id, 'number');\n      assert.equal(typeof payload[1].id, 'number');\n      assert.equal(payload[0].id + 1, payload[1].id);\n    });","file":"jsonrpc.toBatchPayload.js","skipped":false,"dir":"test"},{"name":"should create batch payload for empty input array","suites":["jsonrpc","toBatchPayload"],"updatePoint":{"line":31,"column":57,"index":1122},"line":31,"code":"    it('should create batch payload for empty input array', function () {\n      // given\n      var messages = [];\n\n      // when\n      var payload = Jsonrpc.toBatchPayload(messages);\n\n      // then\n      assert.equal(Array.isArray(payload), true);\n      assert.equal(payload.length, 0);\n    });","file":"jsonrpc.toBatchPayload.js","skipped":false,"dir":"test"},{"name":"should create basic payload","suites":["jsonrpc","toPayload"],"updatePoint":{"line":6,"column":35,"index":237},"line":6,"code":"    it('should create basic payload', function () {\n      // given\n      var method = 'helloworld';\n\n      // when\n      var payload = Jsonrpc.toPayload(method);\n\n      // then\n      assert.equal(payload.jsonrpc, '2.0');\n      assert.equal(payload.method, method);\n      assert.equal(Array.isArray(payload.params), true);\n      assert.equal(payload.params.length, 0);\n      assert.equal(typeof payload.id, 'number');\n    });","file":"jsonrpc.toPayload.js","skipped":false,"dir":"test"},{"name":"should create payload with params","suites":["jsonrpc","toPayload"],"updatePoint":{"line":20,"column":41,"index":668},"line":20,"code":"    it('should create payload with params', function () {\n      // given\n      var method = 'helloworld1';\n      var params = [123, 'test'];\n\n      // when\n      var payload = Jsonrpc.toPayload(method, params);\n\n      // then\n      assert.equal(payload.jsonrpc, '2.0');\n      assert.equal(payload.method, method);\n      assert.equal(payload.params.length, 2);\n      assert.equal(payload.params[0], params[0]);\n      assert.equal(payload.params[1], params[1]);\n      assert.equal(typeof payload.id, 'number');\n    });","file":"jsonrpc.toPayload.js","skipped":false,"dir":"test"},{"name":"should return a promise and resolve it","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":11,"column":46,"index":537},"line":11,"code":"    it('should return a promise and resolve it', function (done) {\n      var provider = new FakeHttpProvider();\n      var eth = new Eth(provider);\n      var method = new Method({\n        name: 'call',\n        call: 'eth_call',\n        params: 2,\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter.bind({\n          defaultBlock: 'latest'\n        })]\n      });\n      method.setRequestManager(eth._requestManager);\n\n      // generate send function\n      var send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          data: '0xa123456'\n        }, \"latest\"]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456'\n      }).then(function (result) {\n        assert.deepEqual(result, '0x1234567453543456321456321');\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should return a promise and fail it","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":47,"column":43,"index":1779},"line":47,"code":"    it('should return a promise and fail it', function (done) {\n      var provider = new FakeHttpProvider();\n      var eth = new Eth(provider);\n      var method = new Method({\n        name: 'call',\n        call: 'eth_call',\n        params: 2,\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter.bind({\n          defaultBlock: 'latest'\n        })]\n      });\n      method.setRequestManager(eth._requestManager);\n\n      // generate send function\n      var send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          data: '0xa123456'\n        }, \"latest\"]);\n      });\n      provider.injectError({\n        message: 'Wrong!',\n        code: 1234\n      });\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456'\n      }).catch(function (error) {\n        assert.deepEqual(error, {\n          message: 'Wrong!',\n          code: 1234\n        });\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should return an error, if the outputFormatter returns an error","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":88,"column":71,"index":3093},"line":88,"code":"    it('should return an error, if the outputFormatter returns an error', function (done) {\n      var provider = new FakeHttpProvider();\n      var eth = new Eth(provider);\n      var method = new Method({\n        name: 'call',\n        call: 'eth_call',\n        params: 2,\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter.bind({\n          defaultBlock: 'latest'\n        })],\n        outputFormatter: function (result) {\n          return new Error('Error!');\n        }\n      });\n      method.setRequestManager(eth._requestManager);\n\n      // generate send function\n      var send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          data: '0xa123456'\n        }, \"latest\"]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456'\n      }, function (err, result) {\n        assert.isTrue(err instanceof Error);\n        assert.isUndefined(result);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should return an error, if the outputFormatter throws","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":128,"column":61,"index":4463},"line":128,"code":"    it('should return an error, if the outputFormatter throws', function (done) {\n      var provider = new FakeHttpProvider();\n      var eth = new Eth(provider);\n      var method = new Method({\n        name: 'call',\n        call: 'eth_call',\n        params: 2,\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter.bind({\n          defaultBlock: 'latest'\n        })],\n        outputFormatter: function (result) {\n          throw new Error('Error!');\n        }\n      });\n      method.setRequestManager(eth._requestManager);\n\n      // generate send function\n      var send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_call');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          data: '0xa123456'\n        }, \"latest\"]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456'\n      }, function (err, result) {\n        assert.isTrue(err instanceof Error);\n        assert.isUndefined(result);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fill in gasPrice if not given","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":168,"column":44,"index":5815},"line":168,"code":"    it('should fill in gasPrice if not given', function (done) {\n      var provider = new FakeHttpProvider();\n      var eth = new Eth(provider);\n      var method = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n      });\n      method.setRequestManager(eth._requestManager, eth);\n\n      // generate send function\n      var send = method.buildCall();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getBlockByNumber');\n        assert.deepEqual(payload.params, ['latest', false]);\n      });\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_gasPrice');\n        assert.deepEqual(payload.params, []);\n      });\n      provider.injectResult('0xffffdddd'); // gas price\n\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          data: '0xa123456',\n          gasPrice: '0x1234567453543456321456321',\n          type: '0x2'\n        }]);\n        done();\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        type: '0x2'\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should send legacy tx even though network supports EIP-1559","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":213,"column":67,"index":7422},"line":213,"code":"    it('should send legacy tx even though network supports EIP-1559', function (done) {\n      var provider = new FakeHttpProvider();\n      var eth = new Eth(provider);\n      var method = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n      });\n      method.setRequestManager(eth._requestManager, eth);\n\n      // generate send function\n      var send = method.buildCall();\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getBlockByNumber');\n        assert.deepEqual(payload.params, ['latest', false]);\n      });\n      provider.injectResult({\n        baseFeePerGas: \"0x7\",\n        difficulty: \"0x6cd6be3a\",\n        extraData: \"0x796f75747562652e636f6d2f77617463683f763d6451773477395767586351\",\n        gasLimit: \"0x1c9c381\",\n        gasUsed: \"0x8dc073\",\n        hash: \"0x846880b1158f434884f3637802ed09bac77eafc35b5f03b881ac88ce38a54907\",\n        logsBloom: \"0x4020001000000000000000008000010000000000400200000001002140000008000000010000810020000840000204304000081000000b00400010000822200004200020020140000001000882000064000021303200020000400008800000000002202102000084010000090020a8000800002000000010000030300000000000000006001005000040080001010000010040018100004c0050004000000000420000000021000200000010020008100000004000080000000000000040000900080102004002000080210201081014004030200148101000002020108025000018020020102040000204240500010000002200048000401300080088000002\",\n        miner: \"0x86864f1edf10eaf105b1bdc6e9aa8232b4c6aa00\",\n        mixHash: \"0xa29afb1fa1aea9eeac72ff435a8fc420bbc1fa1be08223eb61f294ee32250bde\",\n        nonce: \"0x122af1a5ccd78f3b\",\n        number: \"0xa0d600\",\n        parentHash: \"0x28f49150e1fe6f245655925b290f59e707d1e5c646dadaa22937169433b30294\",\n        receiptsRoot: \"0xc97d4f9980d680053606318a5820261a1dccb556d1056b70f0d48fb384986be5\",\n        sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        size: \"0x2042\",\n        stateRoot: \"0x116981b10423133ade5bd44f03c54cc3c57f4467a1c3d4b0c6d8d33a76c361ad\",\n        timestamp: \"0x60dc24ec\",\n        totalDifficulty: \"0x78828f2d886cbb\",\n        transactions: [],\n        transactionsRoot: \"0x738f53f745d58169da93ebbd52cc49e0c979d6ca68a6513007b546b19ab78ba4\",\n        uncles: []\n      });\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_gasPrice');\n        assert.deepEqual(payload.params, []);\n      });\n      provider.injectResult('0xffffdddd'); // gas price\n\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          data: '0xa123456',\n          type: '0x0',\n          gasPrice: '0xffffdddd'\n        }]);\n        done();\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        type: '0x0'\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should use promise \"then\" when subscribing and checking for receipt if \"sendTransaction\"","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":349,"column":96,"index":12967},"line":349,"code":"    it('should use promise \"then\" when subscribing and checking for receipt if \"sendTransaction\"', function (done) {\n      var send = succeedOnReceipt();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        value: '0xa',\n        gasPrice: '23435234234'\n      }).then(function (result) {\n        assert.deepEqual(result, {\n          contractAddress: address,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xafff',\n          gasUsed: 0\n        });\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should use on(\"receipt\", ...) when subscribing and checking for receipt if \"sendTransaction\"","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":368,"column":100,"index":13604},"line":368,"code":"    it('should use on(\"receipt\", ...) when subscribing and checking for receipt if \"sendTransaction\"', function (done) {\n      var send = succeedOnReceipt();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        value: '0xa',\n        gasPrice: '23435234234'\n      }).on('receipt', function (result) {\n        assert.deepEqual(result, {\n          contractAddress: address,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xafff',\n          gasUsed: 0\n        });\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should use promise \"then\" when subscribing and checking for receipt and code if \"sendTransaction\" deploying contract","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":453,"column":124,"index":16486},"line":453,"code":"    it('should use promise \"then\" when subscribing and checking for receipt and code if \"sendTransaction\" deploying contract', function (done) {\n      var send = succeedwhenDeploying();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).then(function (result) {\n        assert.deepEqual(result, {\n          contractAddress: address,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xafff',\n          gasUsed: 0\n        });\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should use on(\"receipt\", ...) when subscribing and checking  for receipt and code if \"sendTransaction\" deploying contract","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":471,"column":129,"index":17103},"line":471,"code":"    it('should use on(\"receipt\", ...) when subscribing and checking  for receipt and code if \"sendTransaction\" deploying contract', function (done) {\n      var send = succeedwhenDeploying();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).on('receipt', function (result) {\n        assert.deepEqual(result, {\n          contractAddress: address,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xafff',\n          gasUsed: 0\n        });\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fail on promise when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if code is empty","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":555,"column":146,"index":19926},"line":555,"code":"    it('should fail on promise when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if code is empty', function (done) {\n      var send = failOnCodeEmpty();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).catch(function (error) {\n        assert.instanceOf(error, Error);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fail with on(\"error\", ...) when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if code is empty","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":566,"column":157,"index":20381},"line":566,"code":"    it('should fail with on(\"error\", ...) when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if code is empty', function (done) {\n      var send = failOnCodeEmpty();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).on('error', function (error) {\n        assert.instanceOf(error, Error);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fail on promise when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if receipt has no contract address","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":643,"column":164,"index":23029},"line":643,"code":"    it('should fail on promise when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if receipt has no contract address', function (done) {\n      var send = failOnMissingAddress();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).catch(function (error) {\n        assert.instanceOf(error, Error);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fail with on(\"error\", ...) when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if receipt has no contract address","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":654,"column":175,"index":23507},"line":654,"code":"    it('should fail with on(\"error\", ...) when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: error if receipt has no contract address', function (done) {\n      var send = failOnMissingAddress();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).on('error', function (error) {\n        assert.instanceOf(error, Error);\n      }).catch(function (error) {\n        // also run catch!\n        assert.instanceOf(error, Error);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fail with promise when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: if not receipt after 50 blocks","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":726,"column":156,"index":25970},"line":726,"code":"    it('should fail with promise when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: if not receipt after 50 blocks', function (done) {\n      var send = failOnTimeout();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).catch(function (error) {\n        assert.instanceOf(error, Error);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fail with on(\"error\", ...) when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: if not receipt after 50 blocks","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":737,"column":165,"index":26431},"line":737,"code":"    it('should fail with on(\"error\", ...) when subscribing and check for receipt and code if \"sendTransaction\" and deploying contract: if not receipt after 50 blocks', function (done) {\n      var send = failOnTimeout();\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data: '0xa123456',\n        gasPrice: '23435234234'\n      }).on('error', function (error) {\n        assert.instanceOf(error, Error);\n        done();\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should give confirmation receipts with on(\"confirmation\", ...) when subscribing \"sendTransaction\"","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":748,"column":105,"index":26838},"line":748,"code":"    it('should give confirmation receipts with on(\"confirmation\", ...) when subscribing \"sendTransaction\"', function (done) {\n      var provider = new FakeIpcProvider();\n      var eth = new Eth(provider);\n      var method = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n      });\n      method.setRequestManager(eth._requestManager, eth);\n\n      // generate send function\n      var send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          gasPrice: \"0x574d94bba\"\n        }]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult('0x1234567'); // subscription id\n\n      // fire 50 fake newBlocks\n      for (i = 0; i < 30; i++) {\n        setTimeout(function () {\n          provider.injectNotification({\n            method: 'eth_subscription',\n            params: {\n              subscription: '0x1234567',\n              result: {\n                blockNumber: '0x10'\n              }\n            }\n          });\n        }, i);\n\n        // receipt\n        provider.injectResult({\n          contractAddress: null,\n          cumulativeGasUsed: '0xa',\n          transactionIndex: '0x3',\n          blockNumber: '0xa',\n          blockHash: '0xafff',\n          gasUsed: '0x0'\n        });\n      }\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n      });\n      var countConf = 0;\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        gasPrice: '23435234234'\n      }).on('transactionHash', function (result) {\n        assert.deepEqual(result, '0x1234567453543456321456321');\n      }).on('receipt', function (result) {\n        assert.deepEqual(result, {\n          contractAddress: null,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xafff',\n          gasUsed: 0\n        });\n      }).on('confirmation', function (conf, receipt) {\n        assert.deepEqual(receipt, {\n          contractAddress: null,\n          cumulativeGasUsed: 10,\n          transactionIndex: 3,\n          blockNumber: 10,\n          blockHash: '0xafff',\n          gasUsed: 0\n        });\n        assert.deepEqual(conf, countConf);\n        countConf++;\n        if (conf === 12) {\n          done();\n        }\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should subscribe to new blocks if using IpcProvider","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":843,"column":59,"index":29964},"line":843,"code":"    it('should subscribe to new blocks if using IpcProvider', function (done) {\n      const provider = new FakeIpcProvider();\n      const eth = new Eth(provider);\n      const method = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n      });\n      method.setRequestManager(eth._requestManager, eth);\n\n      // generate send function\n      const send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          value: '0xa',\n          gasPrice: \"0x574d94bba\"\n        }]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        // here is the check.\n        // will be `eth_subscribe` if subscribing.\n        // will be `eth_getTransactionReceipt` if polling.\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n        done();\n      });\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        value: '0xa',\n        gasPrice: '23435234234'\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should use polling if using HttpProvider","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":889,"column":48,"index":31670},"line":889,"code":"    it('should use polling if using HttpProvider', function (done) {\n      const provider = new FakeHttpProvider();\n      const eth = new Eth(provider);\n      const method = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n      });\n      method.setRequestManager(eth._requestManager, eth);\n\n      // generate send function\n      const send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          value: '0xa',\n          gasPrice: \"0x574d94bba\"\n        }]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        // here is the check.\n        // will be `eth_subscribe` if subscribing.\n        // will be `eth_getTransactionReceipt` if polling.\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n        done();\n      });\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        value: '0xa',\n        gasPrice: '23435234234'\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should use polling if using provider with method `on` but no subscription capabilities","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":935,"column":94,"index":33454},"line":935,"code":"    it('should use polling if using provider with method `on` but no subscription capabilities', function (done) {\n      this.timeout(5000);\n      const provider = new FakeHttpProvider();\n      // provider with method 'on' but no subscription capabilities should use polling\n      provider.on = (...args) => {};\n      const eth = new Eth(provider);\n      const method = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n      });\n      method.setRequestManager(eth._requestManager, eth);\n\n      // generate send function\n      const send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          value: '0xa',\n          gasPrice: \"0x574d94bba\"\n        }]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        // here is the check.\n        // first will try subscribing with `eth_subscribe`.\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult(null);\n\n      // after failing with `eth_subscribe`,\n      // it should start polling with `eth_getTransactionReceipt`\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n      });\n      provider.injectResult(null);\n\n      // second poll\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n      });\n      provider.injectResult(null);\n\n      // third poll\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n        done();\n      });\n      provider.injectResult(null);\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        value: '0xa',\n        gasPrice: '23435234234'\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should fallback to polling if provider support `on` but `newBlockHeaders` does not arrive in `blockHeaderTimeout` seconds","suites":["lib/web3/method","buildCall"],"updatePoint":{"line":1006,"column":129,"index":36252},"line":1006,"code":"    it('should fallback to polling if provider support `on` but `newBlockHeaders` does not arrive in `blockHeaderTimeout` seconds', function (done) {\n      const provider = new FakeHttpProvider();\n      // provider with method 'on' but no subscription capabilities should use polling\n      provider.on = (...args) => {};\n      const eth = new Eth(provider);\n      const method = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n      });\n      method.setRequestManager(eth._requestManager, eth);\n      method.blockHeaderTimeout = 1;\n\n      // generate send function\n      const send = method.buildCall();\n\n      // add results\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_sendTransaction');\n        assert.deepEqual(payload.params, [{\n          from: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          to: '0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae',\n          value: '0xa',\n          gasPrice: \"0x574d94bba\"\n        }]);\n      });\n      provider.injectResult('0x1234567453543456321456321'); // tx hash\n\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n      });\n      provider.injectResult(null);\n      provider.injectValidation(function (payload) {\n        // here is the check.\n        // first will try subscribing with `eth_subscribe`.\n        assert.equal(payload.method, 'eth_subscribe');\n        assert.deepEqual(payload.params, ['newHeads']);\n      });\n      provider.injectResult(null);\n\n      // after failing with `eth_subscribe`,\n      // it should start polling with `eth_getTransactionReceipt`\n      provider.injectValidation(function (payload) {\n        assert.equal(payload.method, 'eth_getTransactionReceipt');\n        assert.deepEqual(payload.params, ['0x1234567453543456321456321']);\n        done();\n      });\n      provider.injectResult(null);\n      send({\n        from: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        value: '0xa',\n        gasPrice: '23435234234'\n      });\n    });","file":"method.buildCall.js","skipped":false,"dir":"test"},{"name":"should extract callback","suites":["lib/web3/method","extractCallback"],"updatePoint":{"line":6,"column":31,"index":226},"line":6,"code":"    it('should extract callback', function () {\n      // given\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something'\n      });\n      var callback = function () {};\n      var args = [1, callback];\n\n      // when\n      var result = method.extractCallback(args);\n\n      // then\n      assert.equal(args.length, 1);\n      assert.equal(callback, result);\n    });","file":"method.extractCallback.js","skipped":false,"dir":"test"},{"name":"should extract callback created using newFunction","suites":["lib/web3/method","extractCallback"],"updatePoint":{"line":22,"column":57,"index":644},"line":22,"code":"    it('should extract callback created using newFunction', function () {\n      // given\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something'\n      });\n      var callback = new Function();\n      var args = [1, callback];\n\n      // when\n      var result = method.extractCallback(args);\n\n      // then\n      assert.equal(args.length, 1);\n      assert.equal(callback, result);\n    });","file":"method.extractCallback.js","skipped":false,"dir":"test"},{"name":"should not extract the callback","suites":["lib/web3/method","extractCallback"],"updatePoint":{"line":38,"column":39,"index":1044},"line":38,"code":"    it('should not extract the callback', function () {\n      // given\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something'\n      });\n      var args = [1, 2];\n\n      // when\n      var result = method.extractCallback(args);\n\n      // then\n      assert.equal(args.length, 2);\n      assert.equal(result, null);\n    });","file":"method.extractCallback.js","skipped":false,"dir":"test"},{"name":"should format plain input","suites":["lib/web3/method","formatInput"],"updatePoint":{"line":6,"column":33,"index":224},"line":6,"code":"    it('should format plain input', function () {\n      // given\n      var star = function (arg) {\n        return arg + '*';\n      };\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something',\n        inputFormatter: [star, star, star]\n      });\n      var args = ['1', '2', '3'];\n      var expectedArgs = ['1*', '2*', '3*'];\n\n      // when\n      var result = method.formatInput(args);\n\n      // then\n      assert.deepEqual(result, expectedArgs);\n    });","file":"method.formatInput.js","skipped":false,"dir":"test"},{"name":"should do nothing if there is no formatter","suites":["lib/web3/method","formatInput"],"updatePoint":{"line":25,"column":50,"index":726},"line":25,"code":"    it('should do nothing if there is no formatter', function () {\n      // given\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something'\n      });\n      var args = [1, 2, 3];\n\n      // when\n      var result = method.formatInput(args);\n\n      // then\n      assert.deepEqual(result, args);\n    });","file":"method.formatInput.js","skipped":false,"dir":"test"},{"name":"should format plain output","suites":["lib/web3/method","formatOutput"],"updatePoint":{"line":6,"column":34,"index":226},"line":6,"code":"    it('should format plain output', function () {\n      // given\n      var formatter = function (arg) {\n        return arg + '*';\n      };\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something',\n        outputFormatter: formatter\n      });\n      var args = '1';\n      var expectedArgs = '1*';\n\n      // when\n      var result = method.formatOutput(args);\n\n      // then\n      assert.deepEqual(result, expectedArgs);\n    });","file":"method.formatOutput.js","skipped":false,"dir":"test"},{"name":"should format plain output if array","suites":["lib/web3/method","formatOutput"],"updatePoint":{"line":25,"column":43,"index":693},"line":25,"code":"    it('should format plain output if array', function () {\n      // given\n      var formatter = function (arg) {\n        return arg + '*';\n      };\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something',\n        outputFormatter: formatter\n      });\n      var args = '1';\n      var expectedArgs = ['1*', '1*'];\n\n      // when\n      var result = method.formatOutput([args, args]);\n\n      // then\n      assert.deepEqual(result, expectedArgs);\n    });","file":"method.formatOutput.js","skipped":false,"dir":"test"},{"name":"should format output arrays with the same formatter","suites":["lib/web3/method","formatOutput"],"updatePoint":{"line":44,"column":59,"index":1192},"line":44,"code":"    it('should format output arrays with the same formatter', function () {\n      // given\n      var formatter = function (arg) {\n        return arg + '*';\n      };\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something',\n        outputFormatter: formatter\n      });\n      var args = ['1', '2', '3'];\n      var expectedArgs = ['1*', '2*', '3*'];\n\n      // when\n      var result = method.formatOutput(args);\n\n      // then\n      assert.deepEqual(result, expectedArgs);\n    });","file":"method.formatOutput.js","skipped":false,"dir":"test"},{"name":"should do nothing if there is no formatter","suites":["lib/web3/method","formatOutput"],"updatePoint":{"line":63,"column":50,"index":1692},"line":63,"code":"    it('should do nothing if there is no formatter', function () {\n      // given\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something'\n      });\n      var args = [1, 2, 3];\n\n      // when\n      var result = method.formatOutput(args);\n\n      // then\n      assert.deepEqual(result, args);\n    });","file":"method.formatOutput.js","skipped":false,"dir":"test"},{"name":"should return call name","suites":["lib/web3/method","getCall"],"updatePoint":{"line":6,"column":31,"index":218},"line":6,"code":"    it('should return call name', function () {\n      // given\n      var call = 'hello_call_world';\n      var method = new Method({\n        name: 'something',\n        call: call\n      });\n\n      // when\n      var result = method.getCall();\n\n      // then\n      assert.equal(call, result);\n    });","file":"method.getCall.js","skipped":false,"dir":"test"},{"name":"should return call based on args","suites":["lib/web3/method","getCall"],"updatePoint":{"line":20,"column":40,"index":524},"line":20,"code":"    it('should return call based on args', function () {\n      // given\n      var call = function (args) {\n        return args ? args.length.toString() : '0';\n      };\n      var method = new Method({\n        name: 'something',\n        call: call\n      });\n\n      // when\n      var r0 = method.getCall();\n      var r1 = method.getCall([1]);\n      var r2 = method.getCall([1, 2]);\n\n      // then\n      assert.equal(r0, '0');\n      assert.equal(r1, '1');\n      assert.equal(r2, '2');\n    });","file":"method.getCall.js","skipped":false,"dir":"test"},{"name":"should pass","suites":["lib/web3/method","validateArgs"],"updatePoint":{"line":7,"column":19,"index":277},"line":7,"code":"    it('should pass', function () {\n      // given\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something',\n        params: 1\n      });\n      var args = [1];\n      var args2 = ['heloas'];\n\n      // when\n      var test = function () {\n        method.validateArgs(args);\n      };\n      var test2 = function () {\n        method.validateArgs(args2);\n      };\n\n      // then\n      assert.doesNotThrow(test);\n      assert.doesNotThrow(test2);\n    });","file":"method.validateArgs.js","skipped":false,"dir":"test"},{"name":"should return call based on args","suites":["lib/web3/method","validateArgs"],"updatePoint":{"line":29,"column":40,"index":776},"line":29,"code":"    it('should return call based on args', function () {\n      // given\n      var method = new Method({\n        name: 'something',\n        call: 'eth_something',\n        params: 2\n      });\n      var args = [1];\n      var args2 = ['heloas', '12', 3];\n\n      // when\n      var test = function () {\n        method.validateArgs(args);\n      };\n      var test2 = function () {\n        method.validateArgs(args2);\n      };\n\n      // then\n      assert.throws(test, errors.InvalidNumberOfParams(1, 2, 'something').message);\n      assert.throws(test2, errors.InvalidNumberOfParams(3, 2, 'something').message);\n    });","file":"method.validateArgs.js","skipped":false,"dir":"test"},{"name":"initiates on package level","suites":["web3","automatic provider selection"],"updatePoint":{"line":129,"column":38,"index":3294},"line":129,"code":"        it('initiates on package level', function () {\n          var pkg = new test.package(test.providerParams[0], test.providerParams[1]);\n          assert.equal(pkg.currentProvider.constructor.name, test.providerType);\n        });","file":"provider.js","skipped":false,"dir":"test"},{"name":"initiates using setProvider","suites":["web3","automatic provider selection"],"updatePoint":{"line":133,"column":39,"index":3529},"line":133,"code":"        it('initiates using setProvider', function () {\n          var pkg = new test.package();\n          assert.equal(pkg.currentProvider, null);\n          pkg.setProvider.apply(pkg, test.providerParams);\n          assert.equal(pkg.currentProvider.constructor.name, test.providerType);\n        });","file":"provider.js","skipped":false,"dir":"test"},{"name":"can't autodetect the provider","suites":["web3","automatic provider selection"],"updatePoint":{"line":140,"column":42,"index":3846},"line":140,"code":"        it('can\\'t autodetect the provider', function () {\n          assert.throws(function () {\n            new test.package(test.providerParams[0]);\n          });\n        });","file":"provider.js","skipped":false,"dir":"test"},{"name":"can't autodetect the provider when using setProvider","suites":["web3","automatic provider selection"],"updatePoint":{"line":145,"column":65,"index":4046},"line":145,"code":"        it('can\\'t autodetect the provider when using setProvider', function () {\n          var pkg = new test.package();\n          assert.throws(function () {\n            pkg.setProvider(test.providerParams[0]);\n          });\n        });","file":"provider.js","skipped":false,"dir":"test"},{"name":"should return expected result asynchronously","suites":["lib/web3/requestmanager","send"],"updatePoint":{"line":11,"column":52,"index":380},"line":11,"code":"    it('should return expected result asynchronously', function (done) {\n      var provider = new FakeHttpProvider();\n      var manager = new requestManager.Manager(provider);\n      var expected = 'hello_world';\n      provider.injectResult(expected);\n      manager.send({\n        method: 'test',\n        params: [1, 2, 3]\n      }, function (error, result) {\n        assert.equal(error, null);\n        assert.equal(expected, result);\n        done();\n      });\n    });","file":"requestmanager.js","skipped":false,"dir":"test"},{"name":"Web3 submodules should set the provider using constructor","suites":["lib/web3/setProvider"],"updatePoint":{"line":44,"column":63,"index":1216},"line":44,"code":"  it('Web3 submodules should set the provider using constructor', function () {\n    var provider1 = new FakeHttpProvider();\n    var provider2 = new FakeIpcProvider();\n    provider1.bzz = 'http://localhost:8500';\n    provider2.bzz = 'http://swarm-gateways.net';\n    var provider3 = new FakeHttpProvider();\n    provider3.bzz = 'http://localhost2:8500';\n    var lib = new Web3(provider1);\n    var lib2 = new Web3(provider3);\n    assert.equal(lib.eth.currentProvider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.net.currentProvider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.personal.currentProvider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.Contract.currentProvider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.accounts.currentProvider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.shh.currentProvider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.bzz.currentProvider, provider1.bzz);\n    assert.equal(lib.eth._requestManager.provider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.net._requestManager.provider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.personal._requestManager.provider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.Contract._requestManager.provider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.eth.accounts._requestManager.provider.constructor.name, provider1.constructor.name);\n    assert.equal(lib.shh._requestManager.provider.constructor.name, provider1.constructor.name);\n    assert.equal(lib2.eth.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.net.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.personal.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.Contract.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.accounts.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.shh.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.bzz.currentProvider, provider3.bzz);\n    assert.equal(lib2.eth._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.net._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.personal._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.Contract._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.accounts._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.shh._requestManager.provider.constructor.name, provider3.constructor.name);\n    lib.setProvider(provider2);\n    assert.equal(lib.eth.currentProvider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.net.currentProvider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.personal.currentProvider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.Contract.currentProvider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.accounts.currentProvider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.shh.currentProvider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.bzz.currentProvider, provider2.bzz);\n    assert.equal(lib.eth._requestManager.provider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.net._requestManager.provider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.personal._requestManager.provider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.Contract._requestManager.provider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.eth.accounts._requestManager.provider.constructor.name, provider2.constructor.name);\n    assert.equal(lib.shh._requestManager.provider.constructor.name, provider2.constructor.name);\n    assert.equal(lib2.eth.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.net.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.personal.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.Contract.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.accounts.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.shh.currentProvider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.bzz.currentProvider, provider3.bzz);\n    assert.equal(lib2.eth._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.net._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.personal._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.Contract._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.eth.accounts._requestManager.provider.constructor.name, provider3.constructor.name);\n    assert.equal(lib2.shh._requestManager.provider.constructor.name, provider3.constructor.name);\n  });","file":"setProvider.js","skipped":false,"dir":"test"},{"name":"Bzz should set automatically to ethereumProvider","suites":["lib/web3/setProvider"],"updatePoint":{"line":107,"column":54,"index":6613},"line":107,"code":"  it('Bzz should set automatically to ethereumProvider', function () {\n    var provider1 = new FakeHttpProvider();\n    provider1.bzz = 'http://localhost:8500';\n    var provider2 = new FakeIpcProvider();\n    provider2.bzz = 'http://focalhost:8500';\n\n    // was set in test/1_givenProvider-ethereumProvider.js\n    var lib = new Bzz(provider1);\n    assert.equal(lib.currentProvider, provider1.bzz);\n    lib.setProvider(provider2);\n    assert.equal(lib.currentProvider, provider2.bzz);\n  });","file":"setProvider.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["formatters","compare blocknumbers"],"updatePoint":{"line":328,"column":41,"index":3773},"line":328,"code":"      it('should return the correct value', function () {\n        assert.deepEqual(formatters.compareBlockNumbers(test.input.a, test.input.b), test.result);\n      });","file":"utils.compareBlockNumbers.js","skipped":false,"dir":"test"},{"name":"should hash mixed boolean values in any order","suites":["web3.encodePacked"],"updatePoint":{"line":308,"column":51,"index":7188},"line":308,"code":"  it('should hash mixed boolean values in any order', function () {\n    assert.deepEqual(utils.encodePacked(tests[0].values[1],\n    // true\n    tests[1].values[0],\n    // false\n    tests[1].values[2],\n    // false\n    tests[0].values[3] // true\n    ), '0x01000001');\n  });","file":"utils.encodePacked.js","skipped":false,"dir":"test"},{"name":"should hash mixed string and number values in any order","suites":["web3.encodePacked"],"updatePoint":{"line":318,"column":61,"index":7471},"line":318,"code":"  it('should hash mixed string and number values in any order', function () {\n    assert.deepEqual(utils.encodePacked(tests[2].values[0],\n    // 'Hello!%'\n    tests[3].values[2],\n    // 2345676856\n    tests[4].values[2],\n    // '2342342342342342342345676856'\n    tests[2].values[3],\n    // 'Hello!%'\n    tests[1].values[2] // false\n    ), '0x48656c6c6f2125000000000000000000000000000000000000000000000000000000008bd03038000000000000000000000000000000000000000007918a48d0493ed3da6ed83848656c6c6f212500');\n  });","file":"utils.encodePacked.js","skipped":false,"dir":"test"},{"name":"should hash mixed number types in any order","suites":["web3.encodePacked"],"updatePoint":{"line":330,"column":49,"index":7969},"line":330,"code":"  it('should hash mixed number types in any order', function () {\n    assert.deepEqual(utils.encodePacked(tests[5].values[0],\n    // v: '56', t: 'uint8'\n    tests[6].values[0],\n    // v: '256', t: 'uint16'\n    tests[7].values[0],\n    // v: '3256', t: 'uint32'\n    tests[8].values[0],\n    // v: '454256', t: 'uint64'\n    tests[9].values[0],\n    // v: '44454256', t: 'uint128'\n    tests[10].values[0] // v: '3435454256', t: 'uint160'\n    ), '0x38010000000cb8000000000006ee7000000000000000000000000002a6517000000000000000000000000000000000ccc4df30');\n  });","file":"utils.encodePacked.js","skipped":false,"dir":"test"},{"name":"should hash mixed number types addresses and boolean in any order","suites":["web3.encodePacked"],"updatePoint":{"line":344,"column":71,"index":8545},"line":344,"code":"  it('should hash mixed number types addresses and boolean in any order', function () {\n    assert.deepEqual(utils.encodePacked(tests[5].values[0],\n    // v: '56', t: 'uint8'\n    tests[13].values[0],\n    // v: '-36', t: 'int8'\n    tests[15].values[0],\n    // v: '0x44222266', t: 'bytes4'\n    tests[0].values[0],\n    // true\n    tests[17].values[1] // v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1', t: 'address'\n    ), '0x38dc4422226601407d73d8a49eeb85d32cf465507dd71d507100c1');\n  });","file":"utils.encodePacked.js","skipped":false,"dir":"test"},{"name":"should hash mixed number arrays addresses and boolean in any order","suites":["web3.encodePacked"],"updatePoint":{"line":356,"column":72,"index":9033},"line":356,"code":"  it('should hash mixed number arrays addresses and boolean in any order', function () {\n    assert.deepEqual(utils.encodePacked(tests[15].values[1],\n    // v: '0x44222266', t: 'bytes4'\n    tests[25].values[0],\n    // address array\n    tests[0].values[0],\n    // true\n    tests[13].values[0],\n    // v: '-36', t: 'int8'\n    tests[12].values[5],\n    // v: '-3435454256', t: 'int256'\n    tests[17].values[0],\n    // 0x407D73d8a49eeb85D32Cf465507dd71d507100c1\n    tests[17].values[1] // v: 0x407D73d8a49eeb85D32Cf465507dd71d507100c1 t: address\n    ), '0x44222266000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c100000000000000000000000085f43d8a49eeb85d32cf465507dd71d507100c1d01dcffffffffffffffffffffffffffffffffffffffffffffffffffffffff333b20d0407d73d8a49eeb85d32cf465507dd71d507100c1407d73d8a49eeb85d32cf465507dd71d507100c1');\n  });","file":"utils.encodePacked.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["lib/utils/utils","fromWei"],"updatePoint":{"line":5,"column":39,"index":197},"line":5,"code":"    it('should return the correct value', function () {\n      assert.equal(utils.fromWei('1000000000000000000', 'wei'), '1000000000000000000');\n      assert.equal(utils.fromWei('1000000000000000000', 'kwei'), '1000000000000000');\n      assert.equal(utils.fromWei('1000000000000000000', 'mwei'), '1000000000000');\n      assert.equal(utils.fromWei('1000000000000000000', 'gwei'), '1000000000');\n      assert.equal(utils.fromWei('1000000000000000000', 'szabo'), '1000000');\n      assert.equal(utils.fromWei('1000000000000000000', 'finney'), '1000');\n      assert.equal(utils.fromWei('1000000000000000000', 'ether'), '1');\n      assert.equal(utils.fromWei('1000000000000000000', 'kether'), '0.001');\n      assert.equal(utils.fromWei('1000000000000000000', 'grand'), '0.001');\n      assert.equal(utils.fromWei('1000000000000000000', 'mether'), '0.000001');\n      assert.equal(utils.fromWei('1000000000000000000', 'gether'), '0.000000001');\n      assert.equal(utils.fromWei('1000000000000000000', 'tether'), '0.000000000001');\n    });","file":"utils.fromWei.js","skipped":false,"dir":"test"},{"name":"should verify \"number\" arg is string or BN","suites":["lib/utils/utils","fromWei"],"updatePoint":{"line":19,"column":50,"index":1237},"line":19,"code":"    it('should verify \"number\" arg is string or BN', function () {\n      try {\n        utils.fromWei(100000000000, 'wei');\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Please pass numbers as strings or BN objects'));\n      }\n    });","file":"utils.fromWei.js","skipped":false,"dir":"test"},{"name":"should return the correct type","suites":["lib/utils/utils","fromWei"],"updatePoint":{"line":28,"column":38,"index":1536},"line":28,"code":"    it('should return the correct type', function () {\n      var weiString = '100000000000000000';\n      var weiBN = utils.toBN(weiString);\n      assert(typeof utils.fromWei(weiString) === 'string');\n      assert(typeof utils.fromWei(weiBN) === 'string');\n    });","file":"utils.fromWei.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["lib/utils/utils","hexToNumber"],"updatePoint":{"line":5,"column":39,"index":201},"line":5,"code":"    it('should return the correct value', function () {\n      assert.equal(utils.hexToNumber(\"0x3e8\"), 1000);\n      assert.equal(utils.hexToNumber('0x1f0fe294a36'), 2134567897654);\n      // allow compatiblity\n      assert.equal(utils.hexToNumber(100000), 100000);\n    });","file":"utils.hexToNumber.js","skipped":false,"dir":"test"},{"name":"should validate hex strings","suites":["lib/utils/utils","hexToNumber"],"updatePoint":{"line":11,"column":35,"index":469},"line":11,"code":"    it('should validate hex strings', function () {\n      try {\n        utils.hexToNumber('100000');\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('is not a valid hex string'));\n      }\n    });","file":"utils.hexToNumber.js","skipped":false,"dir":"test"},{"name":"should return sha3 with hex prefix","suites":["web3.sha3"],"updatePoint":{"line":9,"column":40,"index":341},"line":9,"code":"  it('should return sha3 with hex prefix', function () {\n    test1 = sha3('test123');\n    test2 = sha3('test(int)');\n    assert.deepEqual(test1, '0x' + cjsSha3('test123', {\n      outputLength: 256\n    }).toString());\n    assert.deepEqual(test2, '0x' + cjsSha3('test(int)', {\n      outputLength: 256\n    }).toString());\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should return sha3 with hex prefix when hex input","suites":["web3.sha3"],"updatePoint":{"line":19,"column":55,"index":681},"line":19,"code":"  it('should return sha3 with hex prefix when hex input', function () {\n    var sha3Hex = function (value) {\n      if (value.length > 2 && value.startsWith('0x')) {\n        value = value.slice(2);\n      }\n      value = CryptoJS.enc.Hex.parse(value);\n      return cjsSha3(value, {\n        outputLength: 256\n      }).toString();\n    };\n    test3 = sha3('0x80');\n    test4 = sha3('0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1');\n    assert.deepEqual(test3, '0x' + sha3Hex('0x80'));\n    assert.deepEqual(test4, '0x' + sha3Hex('0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1'));\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should return sha3 with hex prefix when hex input","suites":["web3.sha3"],"updatePoint":{"line":34,"column":55,"index":1303},"line":34,"code":"  it('should return sha3 with hex prefix when hex input', function () {\n    var test = function (v, e, o) {\n      it('should encode ' + v + ' to ' + e, function () {\n        assert.equal(sha3(v, o), e);\n      });\n    };\n    test('test123', '0xf81b517a242b218999ec8eec0ea6e2ddbef2a367a14e93f4a32a39e260f686ad');\n    test('test(int)', '0xf4d03772bec1e62fbe8c5691e1a9101e520e8f8b5ca612123694632bf3cb51b1');\n    test('0x80', '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421');\n    test('0x80', '0x6b03a5eef7706e3fb52a61c19ab1122fad7237726601ac665bd4def888f0e4a0');\n    test('0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1', '0x82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28');\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should not return the same sha3 hash","suites":["web3.sha3"],"updatePoint":{"line":46,"column":42,"index":2026},"line":46,"code":"  it('should not return the same sha3 hash', function () {\n    assert.notEqual(sha3('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:9382:image'), sha3('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:2382:image'));\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should return the same keccak256 hash as ethers","suites":["web3.sha3"],"updatePoint":{"line":49,"column":53,"index":2249},"line":49,"code":"  it('should return the same keccak256 hash as ethers', function () {\n    assert.equal(ethers.utils.keccak256(Buffer.from('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:9382:image', 'utf-8')), sha3('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:9382:image'));\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should return the same keccak256 hash as ethereumjsUtil","suites":["web3.sha3"],"updatePoint":{"line":52,"column":61,"index":2517},"line":52,"code":"  it('should return the same keccak256 hash as ethereumjsUtil', function () {\n    assert.equal(ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak256(Buffer.from('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:9382:image', 'utf-8'))), sha3('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:9382:image'));\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should equal the expected hash","suites":["web3.sha3"],"updatePoint":{"line":55,"column":36,"index":2790},"line":55,"code":"  it('should equal the expected hash', function () {\n    assert.equal(sha3('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:9382:image'), '0x3ec7b047254e2b906ed1d3af460b970ce1c9001b3882e42cdcc090e6ca049fa5');\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should equal the expected hash","suites":["web3.sha3"],"updatePoint":{"line":58,"column":36,"index":3000},"line":58,"code":"  it('should equal the expected hash', function () {\n    assert.equal(sha3('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68:2382:image'), '0x74e687805c0cfbf0065120987739a5b0ba9b3686a1a778a463bddddcd18cc432');\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should return the same keccak256 hash as ethers","suites":["web3.sha3"],"updatePoint":{"line":61,"column":53,"index":3227},"line":61,"code":"  it('should return the same keccak256 hash as ethers', function () {\n    assert.equal(ethers.utils.keccak256('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68'), sha3('0x265385c7f4132228a0d54eb1a9e7460b91c0cc68'));\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should return the same keccak256 hash as ethers","suites":["web3.sha3"],"updatePoint":{"line":64,"column":53,"index":3443},"line":64,"code":"  it('should return the same keccak256 hash as ethers', function () {\n    assert.equal(ethers.utils.keccak256(Buffer.from('1234', 'utf-8')), sha3('1234'));\n  });","file":"utils.sha3.js","skipped":false,"dir":"test"},{"name":"should return the sha3 hash with hex prefix","suites":["web3.sha3Raw"],"updatePoint":{"line":6,"column":49,"index":241},"line":6,"code":"  it('should return the sha3 hash with hex prefix', function () {\n    assert.deepEqual(sha3Raw(''), '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470');\n  });","file":"utils.sha3Raw.js","skipped":false,"dir":"test"},{"name":"should return sha3 with hex prefix","suites":["web3.sha3Raw"],"updatePoint":{"line":9,"column":40,"index":409},"line":9,"code":"  it('should return sha3 with hex prefix', function () {\n    assert.deepEqual(sha3Raw('test123'), '0x' + cjsSha3('test123', {\n      outputLength: 256\n    }).toString());\n    assert.deepEqual(sha3Raw('test(int)'), '0x' + cjsSha3('test(int)', {\n      outputLength: 256\n    }).toString());\n  });","file":"utils.sha3Raw.js","skipped":false,"dir":"test"},{"name":"should hash mixed boolean values in any order","suites":["web3.soliditySha3"],"updatePoint":{"line":308,"column":51,"index":7628},"line":308,"code":"  it('should hash mixed boolean values in any order', function () {\n    assert.deepEqual(utils.soliditySha3(tests[0].values[1],\n    // true\n    tests[1].values[0],\n    // false\n    tests[1].values[2],\n    // false\n    tests[0].values[3] // true\n    ), '0x4ba958c4829ba5d3f9eaa61058ef208aba8bc25c0b6e33044015e0af9fb1c35d');\n  });","file":"utils.soliditySha3.js","skipped":false,"dir":"test"},{"name":"should hash mixed string and number values in any order","suites":["web3.soliditySha3"],"updatePoint":{"line":318,"column":61,"index":7967},"line":318,"code":"  it('should hash mixed string and number values in any order', function () {\n    assert.deepEqual(utils.soliditySha3(tests[2].values[0],\n    // 'Hello!%'\n    tests[3].values[2],\n    // 2345676856\n    tests[4].values[2],\n    // '2342342342342342342345676856'\n    tests[2].values[3],\n    // 'Hello!%'\n    tests[1].values[2] // false\n    ), '0x7eb45eb9a0e1f6904514bc34c8b43e71c2e1f96f21b45ea284a0418cb351ec69');\n  });","file":"utils.soliditySha3.js","skipped":false,"dir":"test"},{"name":"should hash mixed number types in any order","suites":["web3.soliditySha3"],"updatePoint":{"line":330,"column":49,"index":8371},"line":330,"code":"  it('should hash mixed number types in any order', function () {\n    assert.deepEqual(utils.soliditySha3(tests[5].values[0],\n    // v: '56', t: 'uint8'\n    tests[6].values[0],\n    // v: '256', t: 'uint16'\n    tests[7].values[0],\n    // v: '3256', t: 'uint32'\n    tests[8].values[0],\n    // v: '454256', t: 'uint64'\n    tests[9].values[0],\n    // v: '44454256', t: 'uint128'\n    tests[10].values[0] // v: '3435454256', t: 'uint160'\n    ), '0x31d6c48574796dfb1a652f2e5c5a261db0677e39fff5c3032449c50eade4b6b6');\n  });","file":"utils.soliditySha3.js","skipped":false,"dir":"test"},{"name":"should hash mixed number types addresses and boolean in any order","suites":["web3.soliditySha3"],"updatePoint":{"line":344,"column":71,"index":8909},"line":344,"code":"  it('should hash mixed number types addresses and boolean in any order', function () {\n    assert.deepEqual(utils.soliditySha3(tests[5].values[0],\n    // v: '56', t: 'uint8'\n    tests[13].values[0],\n    // v: '-36', t: 'int8'\n    tests[15].values[0],\n    // v: '0x44222266', t: 'bytes4'\n    tests[0].values[0],\n    // true\n    tests[17].values[1] // v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1', t: 'address'\n    ), '0x334086a8fa05e16afb86bed41c614aa74e99ea32eefe8ce0026b4076ce217698');\n  });","file":"utils.soliditySha3.js","skipped":false,"dir":"test"},{"name":"should hash mixed number arrays addresses and boolean in any order","suites":["web3.soliditySha3"],"updatePoint":{"line":356,"column":72,"index":9407},"line":356,"code":"  it('should hash mixed number arrays addresses and boolean in any order', function () {\n    assert.deepEqual(utils.soliditySha3(tests[15].values[1],\n    // v: '0x44222266', t: 'bytes4'\n    tests[25].values[0],\n    // address array\n    tests[0].values[0],\n    // true\n    tests[13].values[0],\n    // v: '-36', t: 'int8'\n    tests[12].values[5],\n    // v: '-3435454256', t: 'int256'\n    tests[17].values[0],\n    // 0x407D73d8a49eeb85D32Cf465507dd71d507100c1\n    tests[17].values[1] // v: 0x407D73d8a49eeb85D32Cf465507dd71d507100c1 t: address\n    ), '0x61c62b29bbe21d8821a938f7331ac875859cc50331556b3383196b19cfc45aff');\n  });","file":"utils.soliditySha3.js","skipped":false,"dir":"test"},{"name":"should return the sha3 hash of a empty string with hex prefix","suites":["web3.soliditySha3Raw"],"updatePoint":{"line":5,"column":67,"index":242},"line":5,"code":"  it('should return the sha3 hash of a empty string with hex prefix', function () {\n    assert.deepEqual(soliditySha3Raw({\n      t: 'string',\n      v: ''\n    }), '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470');\n  });","file":"utils.soliditySha3Raw.js","skipped":false,"dir":"test"},{"name":"should return the expected sha3 hash with hex prefix","suites":["web3.soliditySha3Raw"],"updatePoint":{"line":11,"column":58,"index":472},"line":11,"code":"  it('should return the expected sha3 hash with hex prefix', function () {\n    assert.deepEqual(soliditySha3Raw('Hello!%', 2345676856, '2342342342342342342345676856', 'Hello!%', false), '0x7eb45eb9a0e1f6904514bc34c8b43e71c2e1f96f21b45ea284a0418cb351ec69');\n  });","file":"utils.soliditySha3Raw.js","skipped":false,"dir":"test"},{"name":"should error with message","suites":["lib/utils/utils","toNumber"],"updatePoint":{"line":172,"column":37,"index":4456},"line":172,"code":"        it('should error with message', function () {\n          try {\n            utils.toNumber(test.value, test.bigIntOnOverflow);\n            assert.fail();\n          } catch (err) {\n            assert.strictEqual(err.message, test.errorMessage);\n          }\n        });","file":"utils.toNumber.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["lib/utils/utils","hexToNumberString"],"updatePoint":{"line":5,"column":39,"index":207},"line":5,"code":"    it('should return the correct value', function () {\n      assert.equal(utils.hexToNumberString(\"0x3e8\"), '1000');\n      assert.equal(utils.hexToNumberString('0x1f0fe294a36'), '2134567897654');\n      // allow compatiblity\n      assert.equal(utils.hexToNumberString(100000), '100000');\n    });","file":"utils.toNumberString.js","skipped":false,"dir":"test"},{"name":"should validate hex strings","suites":["lib/utils/utils","hexToNumberString"],"updatePoint":{"line":11,"column":35,"index":499},"line":11,"code":"    it('should validate hex strings', function () {\n      try {\n        utils.hexToNumberString('100000');\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('is not a valid hex string'));\n      }\n    });","file":"utils.toNumberString.js","skipped":false,"dir":"test"},{"name":"should return the correct value","suites":["lib/utils/utils","toWei"],"updatePoint":{"line":6,"column":39,"index":217},"line":6,"code":"    it('should return the correct value', function () {\n      assert.equal(utils.toWei('1', 'wei'), '1');\n      assert.equal(utils.toWei('1', 'kwei'), '1000');\n      assert.equal(utils.toWei('1', 'Kwei'), '1000');\n      assert.equal(utils.toWei('1', 'babbage'), '1000');\n      assert.equal(utils.toWei('1', 'mwei'), '1000000');\n      assert.equal(utils.toWei('1', 'Mwei'), '1000000');\n      assert.equal(utils.toWei('1', 'lovelace'), '1000000');\n      assert.equal(utils.toWei('1', 'gwei'), '1000000000');\n      assert.equal(utils.toWei('1', 'Gwei'), '1000000000');\n      assert.equal(utils.toWei('1', 'shannon'), '1000000000');\n      assert.equal(utils.toWei('1', 'szabo'), '1000000000000');\n      assert.equal(utils.toWei('1', 'finney'), '1000000000000000');\n      assert.equal(utils.toWei('1', 'ether'), '1000000000000000000');\n      assert.equal(utils.toWei('1', 'kether'), '1000000000000000000000');\n      assert.equal(utils.toWei('1', 'grand'), '1000000000000000000000');\n      assert.equal(utils.toWei('1', 'mether'), '1000000000000000000000000');\n      assert.equal(utils.toWei('1', 'gether'), '1000000000000000000000000000');\n      assert.equal(utils.toWei('1', 'tether'), '1000000000000000000000000000000');\n      assert.equal(utils.toWei('1', 'kwei'), utils.toWei('1', 'femtoether'));\n      assert.equal(utils.toWei('1', 'szabo'), utils.toWei('1', 'microether'));\n      assert.equal(utils.toWei('1', 'finney'), utils.toWei('1', 'milliether'));\n      assert.equal(utils.toWei('1', 'milli'), utils.toWei('1', 'milliether'));\n      assert.equal(utils.toWei('1', 'milli'), utils.toWei('1000', 'micro'));\n      assert.throws(function () {\n        utils.toWei(1, 'wei1');\n      }, Error);\n    });","file":"utils.toWei.js","skipped":false,"dir":"test"},{"name":"should verify \"number\" arg is string or BN","suites":["lib/utils/utils","toWei"],"updatePoint":{"line":34,"column":50,"index":1930},"line":34,"code":"    it('should verify \"number\" arg is string or BN', function () {\n      try {\n        utils.toWei(1, 'wei');\n        assert.fail();\n      } catch (error) {\n        assert(error.message.includes('Please pass numbers as strings or BN objects'));\n      }\n    });","file":"utils.toWei.js","skipped":false,"dir":"test"},{"name":"should return the correct type","suites":["lib/utils/utils","toWei"],"updatePoint":{"line":44,"column":38,"index":2244},"line":44,"code":"    it('should return the correct type', function () {\n      var weiString = '1';\n      var weiBN = utils.toBN(weiString);\n      var bn = utils.toWei(weiBN);\n      assert(utils.isBN(bn));\n      assert(typeof utils.toWei(weiString) === 'string');\n    });","file":"utils.toWei.js","skipped":false,"dir":"test"},{"name":"errors when there is no connection","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":61,"column":40,"index":1621},"line":61,"code":"  it('errors when there is no connection', async function () {\n    web3 = new Web3(host + 8777);\n    try {\n      await web3.eth.getBlockNumber();\n      assert.fail();\n    } catch (err) {\n      assert(err.code, 1006);\n      assert(err.reason, 'connection failed');\n      assert(err.message.includes('connection not open on send'));\n    }\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"\"error\" handler fires if the client closes unilaterally","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":72,"column":61,"index":1985},"line":72,"code":"  it('\"error\" handler fires if the client closes unilaterally', async function () {\n    this.timeout(5000);\n    server = ganache.server(ganacheOptions);\n    await server.listen(port, async err => {\n      if (err) throw err;\n    });\n\n    // Open and verify connection\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n    await web3.eth.getBlockNumber();\n    await new Promise(async function (resolve) {\n      web3.currentProvider.on('close', function (err) {\n        assert(err.reason.includes('Server closed'));\n        assert(err.code === 1000);\n        resolve();\n      });\n      await server.close();\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"\"error\" handler fires if Web3 disconnects with error code","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":91,"column":63,"index":2628},"line":91,"code":"  it('\"error\" handler fires if Web3 disconnects with error code', async function () {\n    this.timeout(5000);\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n\n    // Open and verify connection\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n    await web3.eth.getBlockNumber();\n    await new Promise(async function (resolve) {\n      web3.currentProvider.on('close', function (err) {\n        assert(err.reason.includes('restart'));\n        assert(err.code === 1012);\n        resolve();\n      });\n      web3.currentProvider.disconnect(1012, 'restart');\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"\"error\" handler *DOES NOT* fire if disconnection is clean","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":108,"column":63,"index":3245},"line":108,"code":"  it('\"error\" handler *DOES NOT* fire if disconnection is clean', async function () {\n    this.timeout(5000);\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n\n    // Open and verify connection\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n    await web3.eth.getBlockNumber();\n    await new Promise(async function (resolve, reject) {\n      web3.currentProvider.once('error', function (err) {\n        reject('Should not fire error handler');\n      });\n      web3.currentProvider.disconnect(1000);\n      await utils.waitSeconds(2);\n      resolve();\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"\"end\" handler fires with close event object if client disconnect","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":125,"column":70,"index":3866},"line":125,"code":"  it('\"end\" handler fires with close event object if client disconnect', async function () {\n    this.timeout(5000);\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n\n    // Open and verify connection\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n    await web3.eth.getBlockNumber();\n    await new Promise(async function (resolve) {\n      web3.currentProvider.on('close', function (err) {\n        assert(err.type, 'close');\n        assert(err.wasClean, true);\n        resolve();\n      });\n      await server.close();\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"\"end\" handler fires with close event object if Web3 disconnects","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":142,"column":69,"index":4449},"line":142,"code":"  it('\"end\" handler fires with close event object if Web3 disconnects', async function () {\n    this.timeout(5000);\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n\n    // Open and verify connection\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n    await web3.eth.getBlockNumber();\n    await new Promise(async function (resolve) {\n      web3.currentProvider.on('close', function (err) {\n        assert(err.type, 'close');\n        assert(err.wasClean, true);\n        resolve();\n      });\n      web3.currentProvider.disconnect(1000);\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"\"end\" handler fires with close event object if Web3 disconnects","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":159,"column":69,"index":5049},"line":159,"code":"  it('\"end\" handler fires with close event object if Web3 disconnects', async function () {\n    this.timeout(5000);\n    server = ganache.server({\n      server: {\n        ws: false,\n        http: true\n      }\n    });\n    await server.listen(port);\n    const web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n    web3.currentProvider.on('error', err => {\n      assert(err.description.includes('Server responded with a non-101 status'));\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"errors when requests continue after socket closed","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":176,"column":55,"index":5669},"line":176,"code":"  it('errors when requests continue after socket closed', async function () {\n    web3 = new Web3(host + 8777);\n    try {\n      await web3.eth.getBlockNumber();\n    } catch (err) {\n      assert(err.message.includes('connection not open on send'));\n      assert(err.code, 1006);\n      assert(err.reason, 'connection failed');\n      try {\n        await web3.eth.getBlockNumber();\n        assert.fail();\n      } catch (err) {\n        assert(err.message.includes('connection not open on send'));\n        assert(typeof err.code === 'undefined');\n        assert(typeof err.reason === 'undefined');\n      }\n    }\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"errors after client has disconnected","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":194,"column":42,"index":6268},"line":194,"code":"  it('errors after client has disconnected', async function () {\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n\n    // Verify connection and disconnect\n    await web3.eth.getBlockNumber();\n    web3.currentProvider.disconnect();\n    try {\n      await web3.eth.getBlockNumber();\n      assert.fail();\n    } catch (err) {\n      assert(err.message.includes('connection not open on send'));\n      assert(typeof err.code === 'undefined');\n      assert(typeof err.reason === 'undefined');\n    }\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"can connect after being disconnected","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":211,"column":42,"index":6863},"line":211,"code":"  it('can connect after being disconnected', async function () {\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n\n    // Verify connection and disconnect\n    await web3.eth.getBlockNumber();\n    web3.currentProvider.disconnect();\n    try {\n      await web3.eth.getBlockNumber();\n    } catch (e) {}\n    web3.currentProvider.connect();\n\n    // This test fails unless there's a brief delay after\n    // connecting again...\n    await new Promise(resolve => {\n      setTimeout(async function () {\n        const blockNumber = await web3.eth.getBlockNumber();\n        assert(blockNumber === 0);\n        resolve();\n      }, 100);\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"supports subscriptions","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":234,"column":28,"index":7585},"line":234,"code":"  it('supports subscriptions', async function () {\n    web3 = new Web3(host + port); // TODO why is this was working without this line?\n    assert(web3.eth.currentProvider.supportsSubscriptions());\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"times out when connection is lost mid-chunk","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":238,"column":49,"index":7810},"line":238,"code":"  it('times out when connection is lost mid-chunk', async function () {\n    this.timeout(5000);\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n      timeout: 1000\n    }));\n    await new Promise(resolve => {\n      web3.currentProvider.once('error', function (err) {\n        assert(err.message.includes('CONNECTION TIMEOUT: timeout of 1000 ms achived'));\n        resolve();\n      });\n      web3.currentProvider._parseResponse('abc|--|dedf');\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"manually reconnecting","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":253,"column":27,"index":8343},"line":253,"code":"  it('manually reconnecting', function () {\n    this.timeout(6000);\n    return new Promise(async function (resolve) {\n      let stage = 0;\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port));\n      web3.currentProvider.on('connect', async function () {\n        if (stage === 0) {\n          web3.currentProvider.reconnect();\n          stage = 1;\n        } else {\n          await server.close();\n          this.removeAllListeners();\n          resolve();\n        }\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"calling of reconnect with auto-reconnecting activated","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":272,"column":59,"index":8962},"line":272,"code":"  it('calling of reconnect with auto-reconnecting activated', function () {\n    this.timeout(6000);\n    return new Promise(async function (resolve) {\n      let stage = 0;\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true\n        }\n      }));\n      web3.currentProvider.on('connect', async function () {\n        if (stage === 0) {\n          web3.currentProvider.reconnect();\n          stage = 1;\n        } else {\n          await server.close();\n          this.removeAllListeners();\n          resolve();\n        }\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"automatically connects as soon as the WS socket of the node is running","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":295,"column":76,"index":9661},"line":295,"code":"  it('automatically connects as soon as the WS socket of the node is running', async function () {\n    return new Promise(async function (resolve) {\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true\n        }\n      }));\n      web3.currentProvider.once('connect', async function () {\n        resolve();\n      });\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"reached the max. configured attempts and throws the expected error","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":309,"column":72,"index":10129},"line":309,"code":"  it('reached the max. configured attempts and throws the expected error', function () {\n    this.timeout(6000);\n    return new Promise(async function (resolve) {\n      // try to connect to closed server\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          maxAttempts: 1\n        }\n      }));\n      web3.currentProvider.once('error', function (error) {\n        assert(error.message.includes('Maximum number of reconnect attempts reached!'));\n        resolve();\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"errors when call is made after max. configured attempts has elapsed","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":325,"column":73,"index":10689},"line":325,"code":"  it('errors when call is made after max. configured attempts has elapsed', function () {\n    this.timeout(6000);\n    return new Promise(async function (resolve) {\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          maxAttempts: 1,\n          delay: 1000\n        }\n      }));\n      web3.currentProvider.once('connect', async function () {\n        await server.close();\n        await utils.waitSeconds(2);\n        try {\n          await web3.eth.getBlockNumber();\n        } catch (err) {\n          assert(err.message.includes('connection not open on send()'));\n          resolve();\n        }\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"does not auto reconnect after max. configured attempts has elapsed","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":349,"column":72,"index":11456},"line":349,"code":"  it('does not auto reconnect after max. configured attempts has elapsed', function () {\n    this.timeout(10000);\n    return new Promise(async function (resolve) {\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          maxAttempts: 1,\n          delay: 1000\n        }\n      }));\n      web3.currentProvider.once('close', async function () {\n        // Close and then re-open server after\n        // reconnection window has elapsed.\n        server = ganache.server(ganacheOptions);\n        await server.listen(port);\n        try {\n          await web3.eth.getBlockNumber();\n        } catch (err) {\n          assert(err.message.includes('connection not open on send()'));\n          resolve();\n        }\n      });\n      await waitForOpenConnection(server);\n      await server.close();\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"allows disconnection when reconnect is enabled","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":377,"column":52,"index":12382},"line":377,"code":"  it('allows disconnection when reconnect is enabled', function () {\n    this.timeout(6000);\n    return new Promise(async function (resolve) {\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          maxAttempts: 1\n        }\n      }));\n      web3.currentProvider.once('connect', async function () {\n        web3.currentProvider.disconnect();\n        try {\n          await web3.eth.getBlockNumber();\n          assert.fail();\n        } catch (err) {\n          await server.close();\n          assert(err.message.includes('connection not open on send'));\n          assert(typeof err.code === 'undefined');\n          assert(typeof err.reason === 'undefined');\n          resolve();\n        }\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"allows disconnection on lost connection, when reconnect is enabled","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":403,"column":72,"index":13262},"line":403,"code":"  it('allows disconnection on lost connection, when reconnect is enabled', function () {\n    this.timeout(6000);\n    let stage = 0;\n    return new Promise(async function (resolve) {\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          maxAttempts: 1\n        }\n      }));\n\n      //Shutdown server\n      web3.currentProvider.on('connect', async function () {\n        // Stay isolated, just in case\n        if (stage === 0) {\n          await server.close();\n          stage = 1;\n          web3.currentProvider.disconnect(1012, 'close');\n        }\n      });\n      web3.currentProvider.on('close', function (err) {\n        assert(err.code, 1012);\n        resolve();\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"uses the custom configured delay on re-connect","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":431,"column":52,"index":14081},"line":431,"code":"  it('uses the custom configured delay on re-connect', function () {\n    let timeout;\n    this.timeout(4000);\n    return new Promise(async function (resolve, reject) {\n      const child = spawn('ganache');\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          delay: 3000,\n          maxAttempts: 1\n        }\n      }));\n      web3.currentProvider.once('connect', async function () {\n        timeout = setTimeout(function () {\n          reject(new Error('Test Failed: Configured delay is not applied!'));\n        }, 3100);\n      });\n      web3.currentProvider.once('reconnect', async function () {\n        child.kill();\n        clearTimeout(timeout);\n        resolve();\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"clears pending requests on maxAttempts failed reconnection","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":455,"column":64,"index":14858},"line":455,"code":"  it('clears pending requests on maxAttempts failed reconnection', function () {\n    this.timeout(6000);\n    return new Promise(async function (resolve) {\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          maxAttempts: 1\n        }\n      }));\n      web3.currentProvider.once('reconnect', async function () {\n        try {\n          await web3.eth.getBlockNumber();\n          assert.fail();\n        } catch (err) {\n          assert(err.message.includes('Maximum number of reconnect attempts'));\n          resolve();\n        }\n      });\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"queues requests made while connection is lost / executes on reconnect","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":475,"column":75,"index":15493},"line":475,"code":"  it('queues requests made while connection is lost / executes on reconnect', function () {\n    this.timeout(10000);\n    let stage = 0;\n    return new Promise(async function (resolve, reject) {\n      server = ganache.server(ganacheOptions);\n      await server.listen(port);\n      web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n        reconnect: {\n          auto: true,\n          delay: 2000,\n          maxAttempts: 5\n        }\n      }));\n      web3.currentProvider.on('connect', async function () {\n        if (stage === 0) {\n          await server.close();\n          stage = 1;\n        }\n      });\n      setTimeout(async function () {\n        assert(stage === 1);\n        let blockNumber;\n        // manually reconnect so we don't error out\n        web3.currentProvider.reconnect();\n        const deferred = web3.eth.getBlockNumber();\n        server = ganache.server(ganacheOptions);\n        await server.listen(port);\n        try {\n          blockNumber = await deferred;\n          resolve(true);\n        } catch (error) {\n          reject(error);\n        }\n        web3.currentProvider.removeAllListeners();\n      }, 1000);\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"errors when failing to reconnect after data is lost mid-chunk","suites":["WebsocketProvider (ganache)"],"updatePoint":{"line":512,"column":67,"index":16648},"line":512,"code":"  it('errors when failing to reconnect after data is lost mid-chunk', async function () {\n    this.timeout(7000);\n    server = ganache.server(ganacheOptions);\n    await server.listen(port);\n    web3 = new Web3(new Web3.providers.WebsocketProvider(host + port, {\n      timeout: 1000,\n      reconnect: {\n        auto: true,\n        delay: 2000,\n        maxAttempts: 1,\n        onTimeout: true\n      }\n    }));\n    await new Promise(async resolve => {\n      web3.currentProvider.once('error', function (err) {\n        assert(err.message.includes('Maximum number of reconnect attempts reached'));\n        resolve();\n      });\n      await server.close();\n      web3.currentProvider._parseResponse('abc|--|dedf');\n    });\n  });","file":"websocket.ganache.js","skipped":false,"dir":"test"},{"name":"constructs a ETH2BeaconChain instance with expected properties","suites":[],"updatePoint":{"line":6,"column":66},"line":6,"code":"it('constructs a ETH2BeaconChain instance with expected properties', () => {\n    const eth2BeaconChain = new ETH2BeaconChain(provider)\n    expect(eth2BeaconChain.name).toBe('eth2-beaconchain')\n    expect(eth2BeaconChain.provider).toBe(`${provider}${providerSuffix}`)\n    expect(eth2BeaconChain.protectProvider)\n})","file":"constructor.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getGenesis","suites":[],"updatePoint":{"line":24,"column":14},"line":24,"code":"it('getGenesis', async () => {\n    const expectedResponse = {\n        genesis_validators_root: expect.stringMatching(/0x[a-f|A-F|\\d]{64}/),\n        genesis_time: expect.stringMatching(/\\d{10}/),\n        genesis_fork_version: expect.stringMatching(/0x[a-f|A-F|\\d]{8}/)\n    }\n\n    const response = await eth2BeaconChain.getGenesis()\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getHashRoot","suites":[],"updatePoint":{"line":35,"column":15},"line":35,"code":"it('getHashRoot', async () => {\n    const routeParameters = { stateId: 'head' }\n    const expectedResponse = {\n        root: expect.stringMatching(/0x[a-f|A-F|\\d]{64}/),\n    }\n\n    const response = await eth2BeaconChain.getHashRoot(routeParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getForkData","suites":[],"updatePoint":{"line":45,"column":15},"line":45,"code":"it('getForkData', async () => {\n    const routeParameters = { stateId: 'head' }\n    const expectedResponse = {\n        current_version: expect.stringMatching(/0x[a-f|A-F|\\d]{8}/),\n        epoch: expect.stringMatching(/\\d/),\n        previous_version: expect.stringMatching(/0x[a-f|A-F|\\d]{8}/),\n    }\n\n    const response = await eth2BeaconChain.getForkData(routeParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getFinalityCheckpoint","suites":[],"updatePoint":{"line":57,"column":25},"line":57,"code":"it('getFinalityCheckpoint', async () => {\n    const routeParameters = { stateId: 'head' }\n    const expectedResponse = {\n        current_justified: {\n            epoch: expect.stringMatching(/\\d+/),\n            root: expect.stringMatching(/0x[a-f|A-F|\\d]{64}/),\n        },\n        finalized: {\n            epoch: expect.stringMatching(/\\d+/),\n            root: expect.stringMatching(/0x[a-f|A-F|\\d]{64}/),\n        },\n        previous_justified: {\n            epoch: expect.stringMatching(/\\d+/),\n            root: expect.stringMatching(/0x[a-f|A-F|\\d]{64}/),\n        },\n    }\n\n    const response = await eth2BeaconChain.getFinalityCheckpoint(routeParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getValidators","suites":[],"updatePoint":{"line":78,"column":17},"line":78,"code":"it('getValidators', async () => {\n    const routeParameters = { stateId: 'genesis' }\n    const expectedResponse = {\n        balance: expect.stringMatching(/\\d+/),\n        index: expect.stringMatching(/\\d+/),\n        status: expect.stringMatching(/pending_initialized|pending_queued|active_ongoing|active_exiting|active_slashed|exited_unslashed|exited_slashed|withdrawal_possible|withdrawal_done|active|pending|exited|withdrawal/),\n        validator: {\n            activation_eligibility_epoch: expect.stringMatching(/\\d+/),\n            activation_epoch: expect.stringMatching(/\\d+/),\n            effective_balance: expect.stringMatching(/\\d+/),\n            exit_epoch: expect.stringMatching(/\\d+/),\n            pubkey: expect.stringMatching(/0x[a-f|A-F|\\d]{96}/),\n            slashed: false,\n            withdrawable_epoch: expect.stringMatching(/\\d+/),\n            withdrawal_credentials: expect.stringMatching(/0x[a-f|A-F|\\d]{64}/),\n        }\n    }\n\n    const response = await eth2BeaconChain.getValidators(routeParameters)\n    expect(response[0]).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getValidatorById","suites":[],"updatePoint":{"line":100,"column":20},"line":100,"code":"it('getValidatorById', async () => {\n    const routeParameters = {\n        stateId: 'head',\n        validatorId: '0x96fb9db98b540d8500711c45fcb3608cc3fd75212457976f5b11f9f93c26701e68f846a9751e3dc2d92fa3d972a8c6b0'\n    }\n    const expectedResponse = {\n        balance: expect.stringMatching(/\\d+/),\n        index: expect.stringMatching(/\\d+/),\n        status: expect.stringMatching(/pending_initialized|pending_queued|active_ongoing|active_exiting|active_slashed|exited_unslashed|exited_slashed|withdrawal_possible|withdrawal_done|active|pending|exited|withdrawal/),\n        validator: {\n            activation_eligibility_epoch: expect.stringMatching(/\\d+/),\n            activation_epoch: expect.stringMatching(/\\d+/),\n            effective_balance: expect.stringMatching(/\\d+/),\n            exit_epoch: expect.stringMatching(/\\d+/),\n            pubkey: expect.stringMatching(/0x[a-f|A-F|\\d]{96}/),\n            slashed: false,\n            withdrawable_epoch: expect.stringMatching(/\\d+/),\n            withdrawal_credentials: expect.stringMatching(/0x[a-f|A-F|\\d]{64}/),\n        }\n    }\n\n    const response = await eth2BeaconChain.getValidatorById(routeParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getValidatorBalances","suites":[],"updatePoint":{"line":125,"column":24},"line":125,"code":"it('getValidatorBalances', async () => {\n    const routeParameters = {\n        stateId: 'head',\n    }\n    const expectedResponse = {\n        balance: expect.stringMatching(/\\d+/),\n        index: expect.stringMatching(/\\d+/)\n    }\n\n    const response = await eth2BeaconChain.getValidatorBalances(routeParameters)\n    expect(response[0]).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getBlockHeaders","suites":[],"updatePoint":{"line":157,"column":19},"line":157,"code":"it('getBlockHeaders', async () => {\n    const expectedResponse = [\n        {\n            root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n            // @ts-ignore - method is added at top of file\n            canonical: expect.toBeBoolean(),\n            header: {\n                message: {\n                    slot: expect.stringMatching(/\\d/),\n                    proposer_index: expect.stringMatching(/\\d/),\n                    parent_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n                    state_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n                    body_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n                },\n                signature: expect.stringMatching(/0x[a-f|A-F|\\d]{192}/),\n            }\n        }\n    ]\n\n    const response = await eth2BeaconChain.getBlockHeaders()\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getBlockHeader","suites":[],"updatePoint":{"line":180,"column":18},"line":180,"code":"it('getBlockHeader', async () => {\n    const routeParameters = {\n        blockId: 'head',\n    }\n    const expectedResponse = {\n        root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n        // @ts-ignore - method is added at top of file\n        canonical: expect.toBeBoolean(),\n        header: {\n            message: {\n                slot: expect.stringMatching(/\\d/),\n                proposer_index: expect.stringMatching(/\\d/),\n                parent_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n                state_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n                body_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n            },\n            signature: expect.stringMatching(/0x[a-f|A-F|\\d]{192}/),\n        }\n    }\n\n    const response = await eth2BeaconChain.getBlockHeader(routeParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"publishSignedBlock","suites":[],"updatePoint":{"line":208,"column":22},"line":208,"code":"it('publishSignedBlock', async () => {\n    const response = eth2BeaconChain.publishSignedBlock()\n    await expect(response).rejects.toThrow('Failed to publish signed block: Request failed with status code 400')\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getBlock","suites":[],"updatePoint":{"line":213,"column":12},"line":213,"code":"it('getBlock', async () => {\n    const routeParameters = {\n        blockId: 'head',\n    }\n    const expectedResponse = {\n        root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n        // @ts-ignore - method is added at top of file\n        canonical: expect.toBeBoolean(),\n        header: {\n            message: {\n                slot: expect.stringMatching(/\\d/),\n                proposer_index: expect.stringMatching(/\\d/),\n                parent_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n                state_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n                body_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n            },\n            signature: expect.stringMatching(/0x[a-f|A-F|\\d]{192}/),\n        }\n    }\n\n    const response = await eth2BeaconChain.getBlockHeader(routeParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getBlockRoot","suites":[],"updatePoint":{"line":237,"column":16},"line":237,"code":"it('getBlockRoot', async () => {\n    const routeParameters = {\n        blockId: 'head',\n    }\n    const expectedResponse = {\n        root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/)\n    }\n\n    const response = await eth2BeaconChain.getBlockRoot(routeParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getBlockAttestations","suites":[],"updatePoint":{"line":249,"column":24},"line":249,"code":"it('getBlockAttestations', async () => {\n    const routeParameters = {\n        blockId: 'head',\n    }\n    const expectedResponse = {\n        aggregation_bits: expect.stringMatching(/0x[a-f|A-F|\\d]{2}/),\n        signature: expect.stringMatching(/0x[a-f|A-F|\\d]{192}/),\n        data: {\n            slot: expect.stringMatching(/\\d/),\n            index: expect.stringMatching(/\\d/),\n            beacon_block_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n            source: {\n                epoch: expect.stringMatching(/\\d/),\n                root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/)\n            },\n            target: {\n                epoch: expect.stringMatching(/\\d/),\n                root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/)\n            }\n        }\n    }\n\n    const response = await eth2BeaconChain.getBlockAttestations(routeParameters)\n    expect(response[0]).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getAttestationsFromPool","suites":[],"updatePoint":{"line":278,"column":27},"line":278,"code":"it('getAttestationsFromPool', async () => {\n    const queryParameters = {\n        slot: 1,\n        committee_index: 1\n    }\n    // const expectedResponse = {\n    //     aggregation_bits: expect.stringMatching(/0x[a-f|A-F|\\d]{2}/),\n    //     signature: expect.stringMatching(/0x[a-f|A-F|\\d]{192}/),\n    //     data: {\n    //         slot: expect.stringMatching(/\\d/),\n    //         index: expect.stringMatching(/\\d/),\n    //         beacon_block_root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/),\n    //         source: {\n    //             epoch: expect.stringMatching(/\\d/),\n    //             root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/)\n    //         },\n    //         target: {\n    //             epoch: expect.stringMatching(/\\d/),\n    //             root: expect.stringMatching(/0x[a-f|A-F|\\d]{62}/)\n    //         }\n    //     }\n    // }\n    const expectedResponse: any[] = []\n\n    const response = await eth2BeaconChain.getAttestationsFromPool(null, queryParameters)\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"submitAttestation","suites":[],"updatePoint":{"line":310,"column":21},"line":310,"code":"it('submitAttestation', async () => {\n    const response = eth2BeaconChain.submitAttestation()\n    await expect(response).rejects.toThrow('Failed to submit attestations to operations pool: Request failed with status code 400')\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getAttesterSlashings","suites":[],"updatePoint":{"line":315,"column":24},"line":315,"code":"it('getAttesterSlashings', async () => {\n    const expectedResponse: any[] = []\n    const response = await eth2BeaconChain.getAttesterSlashings()\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"submitAttesterSlashings","suites":[],"updatePoint":{"line":325,"column":27},"line":325,"code":"it('submitAttesterSlashings', async () => {\n    const response = eth2BeaconChain.submitAttesterSlashings()\n    await expect(response).rejects.toThrow('Failed to submit attester slashings to operations pool: Request failed with status code 400')\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getProposerSlashings","suites":[],"updatePoint":{"line":330,"column":24},"line":330,"code":"it('getProposerSlashings', async () => {\n    const expectedResponse: any[] = []\n    const response = await eth2BeaconChain.getProposerSlashings()\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"submitProposerSlashings","suites":[],"updatePoint":{"line":340,"column":27},"line":340,"code":"it('submitProposerSlashings', async () => {\n    const response = eth2BeaconChain.submitProposerSlashings()\n    await expect(response).rejects.toThrow('Failed to submit proposer slashings to operations pool: Request failed with status code 400')\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"getSignedVoluntaryExits","suites":[],"updatePoint":{"line":345,"column":27},"line":345,"code":"it('getSignedVoluntaryExits', async () => {\n    const expectedResponse: any[] = []\n    const response = await eth2BeaconChain.getSignedVoluntaryExits()\n    expect(response).toMatchObject(expectedResponse)\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"submitVoluntaryExit","suites":[],"updatePoint":{"line":355,"column":23},"line":355,"code":"it('submitVoluntaryExit', async () => {\n    const response = eth2BeaconChain.submitVoluntaryExit()\n    await expect(response).rejects.toThrow('Failed to submit voluntary exit to operations pool: Request failed with status code 400')\n})","file":"schemaMethods.test.ts","skipped":false,"dir":"packages/web3-eth2-beaconchain/test"},{"name":"constructs a ETH2Core instance with expected properties","suites":[],"updatePoint":{"line":20,"column":59},"line":20,"code":"it('constructs a ETH2Core instance with expected properties', () => {\n    // @ts-ignore using a mock schema for test\n    const eth2Core = new ETH2Core(provider, testAPISchema, { protectProvider: true })\n\n    expect(eth2Core.name).toBe(testAPISchema.packageName)\n    expect(eth2Core.provider).toBe(`${provider}${testAPISchema.routePrefix}`)\n    expect(eth2Core.protectProvider)\n    expect(eth2Core.testMethod).toBeDefined()\n})","file":"constructor.test.ts","skipped":false,"dir":"packages/web3-eth2-core/test"},{"name":"Should build expectedComputedRoute with 1 parameter","suites":[],"updatePoint":{"line":45,"column":55},"line":45,"code":"it('Should build expectedComputedRoute with 1 parameter', () => {\n    const routeParameter = { replaceMe: 'testValue' }\n    const expectedComputedRoute = `additional/route/${routeParameter.replaceMe}`\n    // @ts-ignore routeBuilder is private\n    const computedRoute = eth2Core.routeBuilder(testAPISchema.methods[0].route, routeParameter)\n    expect(computedRoute).toBe(expectedComputedRoute)\n})","file":"routeBuild.test.ts","skipped":false,"dir":"packages/web3-eth2-core/test"},{"name":"Should throw missing parameter error","suites":[],"updatePoint":{"line":53,"column":40},"line":53,"code":"it('Should throw missing parameter error', () => {\n    const routeParameter = {}\n    expect(() => {\n        // @ts-ignore routeBuilder is private\n        eth2Core.routeBuilder(testAPISchema.methods[0].route, routeParameter)\n    }).toThrow('Failed to build route: The parameter replaceMe was not provided')\n})","file":"routeBuild.test.ts","skipped":false,"dir":"packages/web3-eth2-core/test"},{"name":"Should build expectedComputedRoute with 0 parameters","suites":[],"updatePoint":{"line":61,"column":56},"line":61,"code":"it('Should build expectedComputedRoute with 0 parameters', () => {\n    const routeParameter = {}\n    const expectedComputedRoute = testAPISchema.methods[1].route\n    // @ts-ignore routeBuilder is private\n    const computedRoute = eth2Core.routeBuilder(testAPISchema.methods[1].route, routeParameter)\n    expect(computedRoute).toBe(expectedComputedRoute)\n})","file":"routeBuild.test.ts","skipped":false,"dir":"packages/web3-eth2-core/test"},{"name":"Should build expectedComputedRoute with 4 parameters","suites":[],"updatePoint":{"line":69,"column":56},"line":69,"code":"it('Should build expectedComputedRoute with 4 parameters', () => {\n    const routeParameters = {\n        replaceMe1: 'testValue',\n        replaceMe2: 'testValue2',\n        replaceMe3: 'testValue3',\n        replaceMe4: 'testValue4'\n    }\n    const expectedComputedRoute = `${routeParameters.replaceMe1}/foo/${routeParameters.replaceMe2}/${routeParameters.replaceMe3}/bar/${routeParameters.replaceMe4}`\n    // @ts-ignore routeBuilder is private\n    const computedRoute = eth2Core.routeBuilder(testAPISchema.methods[2].route, routeParameters)\n    expect(computedRoute).toBe(expectedComputedRoute)\n})","file":"routeBuild.test.ts","skipped":false,"dir":"packages/web3-eth2-core/test"}]}