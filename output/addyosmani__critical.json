{"repo":"addyosmani/critical","url":"https://github.com/addyosmani/critical","branch":"master","configs":[{"package":"critical","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"async map","suites":[],"updatePoint":{"line":8,"column":15,"index":303},"line":8,"code":"test('async map', async () => {\n  const afunc = async value => {\n    await waitRandom();\n    return value * value;\n  };\n\n  const func = value => value * value;\n\n  const array = [1, 2, 3, 4, 5, 6, 7, 8];\n  const expected = array.map(value => func(value));\n  const result1 = await mapAsync(array, v => func(v));\n  const result2 = await mapAsync(array, v => afunc(v));\n  expect(result1).toEqual(expected);\n  expect(result2).toEqual(expected);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async map (default)","suites":[],"updatePoint":{"line":23,"column":25,"index":757},"line":23,"code":"test('async map (default)', async () => {\n  const array = [1, 2, 3, 4, 5, 6, 7, 8];\n  const result = await mapAsync(array);\n  expect(result).toEqual(array);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async map (empty)","suites":[],"updatePoint":{"line":28,"column":23,"index":916},"line":28,"code":"test('async map (empty)', async () => {\n  const result = await mapAsync();\n  expect(result).toEqual([]);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async reduce","suites":[],"updatePoint":{"line":32,"column":18,"index":1020},"line":32,"code":"test('async reduce', async () => {\n  const afunc = async (res, value, index) => {\n    await waitRandom();\n    return [...res, value * index];\n  };\n\n  const func = (res, value, index) => [...res, value * index];\n\n  const array = [1, 2, 3, 4, 5, 6, 7, 8];\n  const expected = array.reduce((res, value, index) => func(res, value, index), []);\n  const result1 = await reduceAsync([], array, func);\n  const result2 = await reduceAsync([], array, afunc);\n  expect(result1).toEqual(expected);\n  expect(result2).toEqual(expected);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async reduce (default)","suites":[],"updatePoint":{"line":47,"column":28,"index":1556},"line":47,"code":"test('async reduce (default)', async () => {\n  const array = [1, 2, 3, 4, 5, 6, 7, 8];\n  const result = await reduceAsync(array);\n  expect(result).toEqual(array);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async reduce (empty)","suites":[],"updatePoint":{"line":52,"column":26,"index":1721},"line":52,"code":"test('async reduce (empty)', async () => {\n  const result = await reduceAsync();\n  expect(result).toEqual(undefined);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async filter","suites":[],"updatePoint":{"line":56,"column":18,"index":1835},"line":56,"code":"test('async filter', async () => {\n  const afunc = async value => {\n    await waitRandom();\n    return value % 2;\n  };\n\n  const func = value => value % 2;\n\n  const array = [1, 2, 3, 4, 5, 6, 7, 8];\n  const expected = array.filter(value => func(value));\n  const result1 = await filterAsync(array, func);\n  const result2 = await filterAsync(array, afunc);\n  expect(result1).toEqual(expected);\n  expect(result2).toEqual(expected);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async filter (default)","suites":[],"updatePoint":{"line":71,"column":28,"index":2277},"line":71,"code":"test('async filter (default)', async () => {\n  const array = [1, 0, 3, false, 5, undefined, 7, null];\n  const result = await filterAsync(array);\n  expect(result).toEqual([1, 3, 5, 7]);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async filter (empty)","suites":[],"updatePoint":{"line":76,"column":26,"index":2464},"line":76,"code":"test('async filter (empty)', async () => {\n  const result = await filterAsync();\n  expect(result).toEqual([]);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"async forEach","suites":[],"updatePoint":{"line":80,"column":19,"index":2572},"line":80,"code":"test('async forEach', async () => {\n  const array = [1, 2, 3, 4, 5, 6, 7, 8];\n  const expected = [];\n  const result1 = [];\n  const result2 = [];\n  array.forEach(v => expected.push(v));\n  await forEachAsync(array, v => result1.push(v));\n  await forEachAsync(array, async v => {\n    await waitRandom();\n    result2.push(v);\n  });\n  expect(result1).toEqual(expected);\n  expect(result2).toEqual(expected);\n});","file":"array.test.js","skipped":false,"dir":"test"},{"name":"generate critical-path CSS","suites":["generate (local)"],"updatePoint":{"line":83,"column":34,"index":2149},"line":83,"code":"  test('generate critical-path CSS', done => {\n    const expected = read('expected/generate-default.css');\n    const target = path.resolve('.critical.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default.html',\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"generate critical-path CSS from CSS files passed as Vinyl objects","suites":["generate (local)"],"updatePoint":{"line":94,"column":73,"index":2527},"line":94,"code":"  test('generate critical-path CSS from CSS files passed as Vinyl objects', done => {\n    const expected = read('expected/generate-default.css');\n    const target = path.resolve('.critical.css');\n    const stylesheets = ['fixtures/styles/main.css', 'fixtures/styles/bootstrap.css'].map(filePath => {\n      return new Vinyl({\n        cwd: '/',\n        base: '/fixtures/',\n        path: filePath,\n        contents: Buffer.from(fs.readFileSync(path.join(__dirname, filePath), 'utf8'), 'utf8')\n      });\n    });\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default-nostyle.html',\n      target,\n      css: stylesheets,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should throw an error on timeout","suites":["generate (local)"],"updatePoint":{"line":114,"column":40,"index":3216},"line":114,"code":"  test('should throw an error on timeout', done => {\n    const target = path.join(__dirname, '.include.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default.html',\n      penthouse: {\n        timeout: 1\n      },\n      target,\n      width: 1300,\n      height: 900\n    }, err => {\n      expect(err).toBeInstanceOf(Error);\n      done();\n    });\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should throw a usable error when no stylesheets are found","suites":["generate (local)"],"updatePoint":{"line":130,"column":65,"index":3611},"line":130,"code":"  test('should throw a usable error when no stylesheets are found', done => {\n    const target = path.join(__dirname, '.error.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'error.html',\n      penthouse: {\n        timeout: 1\n      },\n      target,\n      width: 1300,\n      height: 900\n    }, err => {\n      expect(err).toBeInstanceOf(Error);\n      fs.unlink(target, () => done());\n    });\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate critical-path CSS with query string in file name","suites":["generate (local)"],"updatePoint":{"line":146,"column":72,"index":4025},"line":146,"code":"  test('should generate critical-path CSS with query string in file name', done => {\n    const expected = read('expected/generate-default.css');\n    const target = path.resolve('.critical.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default-querystring.html',\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should ignore stylesheets blocked due to 403","suites":["generate (local)"],"updatePoint":{"line":157,"column":52,"index":4394},"line":157,"code":"  test('should ignore stylesheets blocked due to 403', done => {\n    const expected = '';\n    const target = path.resolve('.403.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: '403-css.html',\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should ignore stylesheets blocked due to 404","suites":["generate (local)"],"updatePoint":{"line":168,"column":52,"index":4702},"line":168,"code":"  test('should ignore stylesheets blocked due to 404', done => {\n    const expected = '';\n    const target = path.resolve('.404.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: '404-css.html',\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate multi-dimension critical-path CSS","suites":["generate (local)"],"updatePoint":{"line":179,"column":57,"index":5015},"line":179,"code":"  test('should generate multi-dimension critical-path CSS', done => {\n    const expected = read('expected/generate-adaptive.css', 'utf8');\n    const target = path.resolve('.adaptive.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-adaptive.html',\n      target,\n      dimensions: [{\n        width: 100,\n        height: 70\n      }, {\n        width: 1000,\n        height: 70\n      }]\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should consider inline styles","suites":["generate (local)"],"updatePoint":{"line":195,"column":37,"index":5450},"line":195,"code":"  test('should consider inline styles', done => {\n    const expected = read('expected/generate-adaptive.css', 'utf8');\n    const target = path.resolve('.adaptive-inline.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-adaptive-inline.html',\n      target,\n      dimensions: [{\n        width: 100,\n        height: 70\n      }, {\n        width: 1000,\n        height: 70\n      }]\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should consider data uris in stylesheet hrefs","suites":["generate (local)"],"updatePoint":{"line":211,"column":53,"index":5915},"line":211,"code":"  test('should consider data uris in stylesheet hrefs', done => {\n    const expected = read('expected/generate-adaptive.css', 'utf8');\n    const target = path.resolve('.adaptive-base64.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-adaptive-base64.html',\n      target,\n      dimensions: [{\n        width: 100,\n        height: 70\n      }, {\n        width: 1000,\n        height: 70\n      }]\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate minified critical-path CSS","suites":["generate (local)"],"updatePoint":{"line":227,"column":50,"index":6377},"line":227,"code":"  test('should generate minified critical-path CSS', done => {\n    const expected = read('expected/generate-default.css', true);\n    const target = path.resolve('.critical.min.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default.html',\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate minified critical-path CSS successfully with external css file configured","suites":["generate (local)"],"updatePoint":{"line":238,"column":97,"index":6789},"line":238,"code":"  test('should generate minified critical-path CSS successfully with external css file configured', done => {\n    const expected = read('expected/generate-default.css', true);\n    const target = path.resolve('.nostyle.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default-nostyle.html',\n      css: ['fixtures/styles/main.css', 'fixtures/styles/bootstrap.css'],\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline relative images","suites":["generate (local)"],"updatePoint":{"line":250,"column":37,"index":7218},"line":250,"code":"  test('should inline relative images', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.resolve('.image-relative.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-image.html',\n      css: ['fixtures/styles/image-relative.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline relative images from folder","suites":["generate (local)"],"updatePoint":{"line":263,"column":49,"index":7651},"line":263,"code":"  test('should inline relative images from folder', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.resolve('.image-relative.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'folder/generate-image.html',\n      css: ['fixtures/styles/image-relative.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should rewrite relative images for html outside root","suites":["generate (local)"],"updatePoint":{"line":276,"column":60,"index":8102},"line":276,"code":"  test('should rewrite relative images for html outside root', done => {\n    const expected = read('expected/generate-image-relative.css');\n    const target = path.resolve('fixtures/folder/.image-relative.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'folder/generate-image.html',\n      css: ['fixtures/styles/image-relative.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: false\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should rewrite relative images for html outside root with css file","suites":["generate (local)"],"updatePoint":{"line":289,"column":74,"index":8593},"line":289,"code":"  test('should rewrite relative images for html outside root with css file', done => {\n    const expected = read('expected/generate-image-relative-subfolder.css');\n    const target = path.resolve('fixtures/folder/subfolder/.image-relative-subfolder.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'folder/subfolder/generate-image-absolute.html',\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: false\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should rewrite relative images for html outside root destFolder option","suites":["generate (local)"],"updatePoint":{"line":301,"column":78,"index":9086},"line":301,"code":"  test('should rewrite relative images for html outside root destFolder option', done => {\n    const expected = read('expected/generate-image-relative-subfolder.css');\n    const target = path.resolve('.image-relative-subfolder.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'folder/subfolder/generate-image-absolute.html',\n      // destFolder: 'folder/subfolder',\n      // Dest: target,\n      width: 1300,\n      height: 900,\n      inlineImages: false\n    }, assertCritical(target, expected, done, true));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should rewrite relative images for html inside root","suites":["generate (local)"],"updatePoint":{"line":314,"column":59,"index":9590},"line":314,"code":"  test('should rewrite relative images for html inside root', done => {\n    const expected = read('expected/generate-image-skip.css');\n    const target = path.resolve('.image-relative.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-image.html',\n      css: ['fixtures/styles/image-relative.css'],\n      target,\n      // destFolder: '.',\n      width: 1300,\n      height: 900,\n      inlineImages: false\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline absolute images","suites":["generate (local)"],"updatePoint":{"line":328,"column":37,"index":10043},"line":328,"code":"  test('should inline absolute images', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.resolve('.image-absolute.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-image.html',\n      css: ['fixtures/styles/image-absolute.css'],\n      target,\n      // destFolder: '.',\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should skip to big images","suites":["generate (local)"],"updatePoint":{"line":342,"column":33,"index":10486},"line":342,"code":"  test('should skip to big images', done => {\n    const expected = read('expected/generate-image-big.css');\n    const target = path.resolve('.image-big.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-image.html',\n      css: ['fixtures/styles/image-big.css'],\n      target,\n      // destFolder: '.',\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"considers \"inlineImages\" option","suites":["generate (local)"],"updatePoint":{"line":356,"column":39,"index":10929},"line":356,"code":"  test('considers \"inlineImages\" option', done => {\n    const expected = read('expected/generate-image-skip.css');\n    const target = path.resolve('.image-skip.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-image.html',\n      css: ['fixtures/styles/image-relative.css'],\n      target,\n      // destFolder: '.',\n      width: 1300,\n      height: 900,\n      inlineImages: false\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should not screw up win32 paths","suites":["generate (local)"],"updatePoint":{"line":370,"column":39,"index":11380},"line":370,"code":"  test('should not screw up win32 paths', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.resolve('.image.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-image.html',\n      css: ['fixtures/styles/some/path/image.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should respect pathPrefix","suites":["generate (local)"],"updatePoint":{"line":383,"column":33,"index":11789},"line":383,"code":"  test('should respect pathPrefix', done => {\n    const expected = read('expected/path-prefix.css');\n    const target = path.resolve('.path-prefix1.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'path-prefix.html',\n      css: ['fixtures/styles/path-prefix.css'],\n      target,\n      width: 1300,\n      height: 900 // pathPrefix: ''\n\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should detect pathPrefix","suites":["generate (local)"],"updatePoint":{"line":396,"column":32,"index":12187},"line":396,"code":"  test('should detect pathPrefix', done => {\n    const expected = read('expected/path-prefix.css');\n    const target = path.resolve('.path-prefix2.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'path-prefix.html',\n      css: ['fixtures/styles/path-prefix.css'],\n      target,\n      // destFolder: '.',\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate and inline, if \"inline\" option is set","suites":["generate (local)"],"updatePoint":{"line":409,"column":61,"index":12621},"line":409,"code":"  test('should generate and inline, if \"inline\" option is set', done => {\n    const expected = read('expected/generateInline.html');\n    const target = path.join(__dirname, '.generateInline1.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generateInline.html',\n      // destFolder: '.',\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate and inline critical-path CSS","suites":["generate (local)"],"updatePoint":{"line":420,"column":52,"index":12999},"line":420,"code":"  test('should generate and inline critical-path CSS', done => {\n    const expected = read('expected/generateInline.html');\n    const target = path.join(__dirname, '.generateInline2.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generateInline.html',\n      // destFolder: '.',\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate and inline minified critical-path CSS","suites":["generate (local)"],"updatePoint":{"line":431,"column":61,"index":13386},"line":431,"code":"  test('should generate and inline minified critical-path CSS', done => {\n    const expected = read('expected/generateInline.html');\n    const target = path.join(__dirname, '.generateInline-minified3.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generateInline.html',\n      // destFolder: '.',\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle multiple calls","suites":["generate (local)"],"updatePoint":{"line":442,"column":36,"index":13757},"line":442,"code":"  test('should handle multiple calls', done => {\n    const expected1 = read('expected/generateInline.html');\n    const expected2 = read('expected/generateInline-svg.html');\n    async.series({\n      first(cb) {\n        generate({\n          base: FIXTURES_DIR,\n          src: 'generateInline.html',\n          inline: true\n        }, cb);\n      },\n\n      second(cb) {\n        generate({\n          base: FIXTURES_DIR,\n          src: 'generateInline-svg.html',\n          inline: true\n        }, cb);\n      }\n\n    }, (err, results) => {\n      try {\n        expect(err).toBeFalsy();\n        expect(nn(results.first.html)).toBe(expected1);\n        expect(nn(results.second.html)).toBe(expected2);\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline critical-path CSS ignoring remote stylesheets","suites":["generate (local)"],"updatePoint":{"line":473,"column":67,"index":14560},"line":473,"code":"  test('should inline critical-path CSS ignoring remote stylesheets', done => {\n    const expected = read('expected/generateInline-external-minified.html');\n    const target = path.resolve('.generateInline-external.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generateInline-external.html',\n      inlineImages: false,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline critical-path CSS with extract option ignoring remote stylesheets","suites":["generate (local)"],"updatePoint":{"line":484,"column":87,"index":15001},"line":484,"code":"  test('should inline critical-path CSS with extract option ignoring remote stylesheets', done => {\n    const expected = read('expected/generateInline-external-extract.html');\n    const target = path.resolve('.generateInline-external-extract.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generateInline-external.html',\n      inlineImages: false,\n      extract: true,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline critical-path CSS without screwing svg images ","suites":["generate (local)"],"updatePoint":{"line":496,"column":68,"index":15451},"line":496,"code":"  test('should inline critical-path CSS without screwing svg images ', done => {\n    const expected = read('expected/generateInline-svg.html');\n    const target = path.resolve('.generateInline-svg.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generateInline-svg.html',\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline and extract critical-path CSS","suites":["generate (local)"],"updatePoint":{"line":506,"column":51,"index":15805},"line":506,"code":"  test('should inline and extract critical-path CSS', done => {\n    const expected = read('expected/generateInline-extract.html');\n    const target = path.resolve('.generateInline-extract.html');\n    generate({\n      base: FIXTURES_DIR,\n      extract: true,\n      src: 'generateInline.html',\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline and extract critical-path CSS from html source","suites":["generate (local)"],"updatePoint":{"line":517,"column":68,"index":16201},"line":517,"code":"  test('should inline and extract critical-path CSS from html source', done => {\n    const expected = read('expected/generateInline-extract.html');\n    const target = path.resolve('.generateInline-extract-src.html');\n    generate({\n      base: FIXTURES_DIR,\n      extract: true,\n      html: read('fixtures/generateInline.html'),\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should consider \"ignore\" option","suites":["generate (local)"],"updatePoint":{"line":528,"column":39,"index":16588},"line":528,"code":"  test('should consider \"ignore\" option', done => {\n    const expected = read('expected/generate-ignore.css');\n    const target = path.resolve('.ignore.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default.html',\n      target,\n      ignore: ['@media', '.header', /jumbotron/],\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle empty \"ignore\" array","suites":["generate (local)"],"updatePoint":{"line":540,"column":42,"index":16982},"line":540,"code":"  test('should handle empty \"ignore\" array', done => {\n    const expected = read('expected/generate-default.css', true);\n    const target = path.join(__dirname, '.ignore.min.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default.html',\n      target,\n      ignore: [],\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle ignore \"@font-face\"","suites":["generate (local)"],"updatePoint":{"line":552,"column":41,"index":17362},"line":552,"code":"  test('should handle ignore \"@font-face\"', done => {\n    const expected = read('expected/generate-ignorefont.css', true);\n    const target = path.join(__dirname, '.ignorefont.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-ignorefont.html',\n      target,\n      ignore: ['@font-face'],\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should keep styles defined by the `include` option","suites":["generate (local)"],"updatePoint":{"line":564,"column":58,"index":17777},"line":564,"code":"  test('should keep styles defined by the `include` option', done => {\n    const expected = read('fixtures/styles/include.css');\n    const target = path.join(__dirname, '.include.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'include.html',\n      include: [/someRule/],\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"#192 - include option - generate","suites":["generate (local)"],"updatePoint":{"line":576,"column":40,"index":18147},"line":576,"code":"  test('#192 - include option - generate', done => {\n    const expected = read('expected/issue-192.css');\n    const target = path.join(__dirname, '.issue-192.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'issue-192.html',\n      css: ['fixtures/styles/issue-192.css'],\n      dimensions: [{\n        width: 320,\n        height: 480\n      }, {\n        width: 768,\n        height: 1024\n      }, {\n        width: 1280,\n        height: 960\n      }, {\n        width: 1920,\n        height: 1080\n      }],\n      extract: false,\n      ignore: ['@font-face', /url\\(/],\n      include: [/^\\.main-navigation.*$/, /^\\.hero-deck.*$/, /^\\.deck.*$/, /^\\.search-box.*$/],\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should not complain about missing css if the css is passed via options","suites":["generate (local)"],"updatePoint":{"line":604,"column":78,"index":18955},"line":604,"code":"  test('should not complain about missing css if the css is passed via options', done => {\n    const expected = read('expected/generate-default-nostyle.css');\n    const target = path.join(__dirname, '.generate-default-nostyle.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default-nostyle.html',\n      css: ['fixtures/styles/bootstrap.css'],\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should not complain about missing css if the css is passed via options (inline)","suites":["generate (local)"],"updatePoint":{"line":616,"column":87,"index":19433},"line":616,"code":"  test('should not complain about missing css if the css is passed via options (inline)', done => {\n    const expected = read('expected/generate-default-nostyle.html');\n    const target = path.join(__dirname, '.generate-default-nostyle.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'generate-default-nostyle.html',\n      css: ['fixtures/styles/bootstrap.css'],\n      target,\n      inline: true,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle PAGE_UNLOADED_DURING_EXECUTION error (inline)","suites":["generate (local)"],"updatePoint":{"line":629,"column":67,"index":19913},"line":629,"code":"  test('should handle PAGE_UNLOADED_DURING_EXECUTION error (inline)', done => {\n    const expected = read('fixtures/issue-314.html');\n    const target = path.join(__dirname, '.issue-314.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'issue-314.html',\n      css: ['fixtures/styles/bootstrap.css'],\n      target,\n      inline: true,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle PAGE_UNLOADED_DURING_EXECUTION error","suites":["generate (local)"],"line":642,"code":"  test.skip('should handle PAGE_UNLOADED_DURING_EXECUTION error', done => {","file":"blackbox.test.js","skipped":true,"dir":"test"},{"name":"external CSS with absolute url","suites":["generate (local)"],"line":656,"code":"  test.skip('external CSS with absolute url', done => {","file":"blackbox.test.js","skipped":true,"dir":"test"},{"name":"Correctly order css on multiple dimensions","suites":["generate (local)"],"updatePoint":{"line":668,"column":50,"index":21122},"line":668,"code":"  test('Correctly order css on multiple dimensions', done => {\n    const dimensions = [700, 600, 100, 200, 250, 150, 350, 400, 450, 500, 300, 550, 50].map(width => {\n      return {\n        width,\n        height: 1000\n      };\n    });\n    const expected = read('fixtures/styles/issue-415.css');\n    const target = path.join(__dirname, '.issue-415.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: 'issue-415.html',\n      target,\n      inline: false,\n      dimensions,\n      concurrency: 10\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate critical-path CSS","suites":["generate (remote)"],"updatePoint":{"line":688,"column":41,"index":21707},"line":688,"code":"  test('should generate critical-path CSS', done => {\n    const expected = read('expected/generate-default.css');\n    const target = path.join(__dirname, '.critical.css');\n    generate({\n      src: `http://localhost:${port}/generate-default.html`,\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate multi-dimension critical-path CSS","suites":["generate (remote)"],"updatePoint":{"line":698,"column":57,"index":22076},"line":698,"code":"  test('should generate multi-dimension critical-path CSS', done => {\n    const expected = read('expected/generate-adaptive.css', 'utf8');\n    const target = path.join(__dirname, '.adaptive.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-adaptive.html`,\n      target,\n      penthouse: {\n        timeout: 10_000\n      },\n      dimensions: [{\n        width: 100,\n        height: 70\n      }, {\n        width: 1000,\n        height: 70\n      }]\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate minified critical-path CSS","suites":["generate (remote)"],"updatePoint":{"line":717,"column":50,"index":22609},"line":717,"code":"  test('should generate minified critical-path CSS', done => {\n    const expected = read('expected/generate-default.css', true);\n    const target = path.join(__dirname, '.critical.min.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-default.html`,\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate minified critical-path CSS successfully with external css file configured","suites":["generate (remote)"],"updatePoint":{"line":728,"column":97,"index":23054},"line":728,"code":"  test('should generate minified critical-path CSS successfully with external css file configured', done => {\n    const expected = read('expected/generate-default.css', true);\n    const target = path.join(__dirname, '.nostyle.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-default-nostyle.html`,\n      css: ['fixtures/styles/main.css', 'fixtures/styles/bootstrap.css'],\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline relative images","suites":["generate (remote)"],"updatePoint":{"line":740,"column":37,"index":23516},"line":740,"code":"  test('should inline relative images', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.join(__dirname, '.image-relative.css');\n\n    try {\n      generate({\n        src: `http://localhost:${port}/generate-image.html`,\n        target,\n        width: 1300,\n        height: 900,\n        inlineImages: true\n      }, assertCritical(target, expected, done));\n    } catch (error) {\n      console.log(error);\n    }\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline relative images fetched over http","suites":["generate (remote)"],"updatePoint":{"line":756,"column":55,"index":23990},"line":756,"code":"  test('should inline relative images fetched over http', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.join(__dirname, '.image-relative.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-image.html`,\n      css: ['fixtures/styles/image-relative.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true //  assetPaths: [`http://localhost:${port}/`, `http://localhost:${port}/styles`]\n\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline absolute images","suites":["generate (remote)"],"updatePoint":{"line":770,"column":37,"index":24526},"line":770,"code":"  test('should inline absolute images', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.join(__dirname, '.image-absolute.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-image.html`,\n      css: ['fixtures/styles/image-absolute.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline absolute images fetched over http","suites":["generate (remote)"],"updatePoint":{"line":783,"column":55,"index":24998},"line":783,"code":"  test('should inline absolute images fetched over http', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.join(__dirname, '.image-absolute.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-image.html`,\n      css: ['fixtures/styles/image-absolute.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true // assetPaths: [`http://localhost:${port}/`, `http://localhost:${port}/styles`]\n\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should skip to big images","suites":["generate (remote)"],"updatePoint":{"line":797,"column":33,"index":25529},"line":797,"code":"  test('should skip to big images', done => {\n    const expected = read('expected/generate-image-big.css');\n    const target = path.join(__dirname, '.image-big.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-image.html`,\n      css: ['fixtures/styles/image-big.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"considers \"inlineImages\" option","suites":["generate (remote)"],"updatePoint":{"line":810,"column":39,"index":25979},"line":810,"code":"  test('considers \"inlineImages\" option', done => {\n    const expected = read('expected/generate-image-skip.css');\n    const target = path.join(__dirname, '.image-skip.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-image.html`,\n      css: ['fixtures/styles/image-relative.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: false\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should not screw up win32 paths","suites":["generate (remote)"],"updatePoint":{"line":823,"column":39,"index":26437},"line":823,"code":"  test('should not screw up win32 paths', done => {\n    const expected = read('expected/generate-image.css');\n    const target = path.join(__dirname, '.image.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-image.html`,\n      css: ['fixtures/styles/some/path/image.css'],\n      target,\n      width: 1300,\n      height: 900,\n      inlineImages: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should respect pathPrefix","suites":["generate (remote)"],"updatePoint":{"line":836,"column":33,"index":26879},"line":836,"code":"  test('should respect pathPrefix', done => {\n    const expected = read('expected/path-prefix.css');\n    const target = path.join(__dirname, '.path-prefix.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/path-prefix.html`,\n      css: ['fixtures/styles/path-prefix.css'],\n      target,\n      width: 1300,\n      height: 900 // Empty string most likely to candidate for failure if change in code results in checking option lazily,\n      // pathPrefix: ''\n\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should detect pathPrefix","suites":["generate (remote)"],"updatePoint":{"line":850,"column":32,"index":27421},"line":850,"code":"  test('should detect pathPrefix', done => {\n    const expected = read('expected/path-prefix.css');\n    const target = path.join(__dirname, '.path-prefix.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/path-prefix.html`,\n      css: ['fixtures/styles/path-prefix.css'],\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate and inline, if \"inline\" option is set","suites":["generate (remote)"],"updatePoint":{"line":862,"column":61,"index":27861},"line":862,"code":"  test('should generate and inline, if \"inline\" option is set', done => {\n    const expected = read('expected/generateInline.html');\n    const target = path.join(__dirname, '.generateInline.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generateInline.html`,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate and inline critical-path CSS","suites":["generate (remote)"],"updatePoint":{"line":872,"column":52,"index":28237},"line":872,"code":"  test('should generate and inline critical-path CSS', done => {\n    const expected = read('expected/generateInline.html');\n    const target = path.join(__dirname, '.generateInline.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generateInline.html`,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should generate and inline minified critical-path CSS","suites":["generate (remote)"],"updatePoint":{"line":882,"column":61,"index":28622},"line":882,"code":"  test('should generate and inline minified critical-path CSS', done => {\n    const expected = read('expected/generateInline.html');\n    const target = path.join(__dirname, '.generateInline.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generateInline.html`,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle multiple calls","suites":["generate (remote)"],"updatePoint":{"line":892,"column":36,"index":28982},"line":892,"code":"  test('should handle multiple calls', done => {\n    const expected1 = read('expected/generateInline.html');\n    const expected2 = read('expected/generateInline.html');\n    async.series({\n      first(cb) {\n        generate({\n          base: FIXTURES_DIR,\n          src: `http://localhost:${port}/generateInline.html`,\n          inline: true\n        }, cb);\n      },\n\n      second(cb) {\n        generate({\n          base: FIXTURES_DIR,\n          src: `http://localhost:${port}/generateInline.html`,\n          inline: true\n        }, cb);\n      }\n\n    }, (err, results) => {\n      expect(err).toBeFalsy();\n      expect(nn(results.first.html)).toBe(expected1);\n      expect(nn(results.second.html)).toBe(expected2);\n      done(err);\n    });\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline critical-path CSS handling remote stylesheets","suites":["generate (remote)"],"updatePoint":{"line":919,"column":67,"index":29757},"line":919,"code":"  test('should inline critical-path CSS handling remote stylesheets', done => {\n    const expected = read('expected/generateInline-external-minified2.html');\n    const target = path.join(__dirname, '.generateInline-external2.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generateInline-external2.html`,\n      inlineImages: false,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline critical-path CSS with extract option handling remote stylesheets","suites":["generate (remote)"],"updatePoint":{"line":930,"column":87,"index":30234},"line":930,"code":"  test('should inline critical-path CSS with extract option handling remote stylesheets', done => {\n    const expected = read('expected/generateInline-external-extract2.html');\n    const target = path.join(__dirname, '.generateInline-external-extract.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generateInline-external2.html`,\n      inlineImages: false,\n      extract: true,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline critical-path CSS without screwing svg images ","suites":["generate (remote)"],"updatePoint":{"line":942,"column":68,"index":30719},"line":942,"code":"  test('should inline critical-path CSS without screwing svg images ', done => {\n    const expected = read('expected/generateInline-svg.html');\n    const target = path.join(__dirname, '.generateInline-svg.html');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generateInline-svg.html`,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should inline and extract critical-path CSS","suites":["generate (remote)"],"updatePoint":{"line":952,"column":51,"index":31106},"line":952,"code":"  test('should inline and extract critical-path CSS', done => {\n    const expected = read('expected/generateInline-extract.html');\n    const target = path.join(__dirname, '.generateInline-extract.html');\n    generate({\n      base: FIXTURES_DIR,\n      extract: true,\n      src: `http://localhost:${port}/generateInline.html`,\n      target,\n      inline: true\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should consider \"ignore\" option","suites":["generate (remote)"],"updatePoint":{"line":963,"column":39,"index":31506},"line":963,"code":"  test('should consider \"ignore\" option', done => {\n    const expected = read('expected/generate-ignore.css');\n    const target = path.join(__dirname, '.ignore.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-default.html`,\n      target,\n      ignore: ['@media', '.header', /jumbotron/],\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle empty \"ignore\" array","suites":["generate (remote)"],"updatePoint":{"line":975,"column":42,"index":31933},"line":975,"code":"  test('should handle empty \"ignore\" array', done => {\n    const expected = read('expected/generate-default.css', true);\n    const target = path.join(__dirname, '.ignore.min.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-default.html`,\n      target,\n      ignore: [],\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should handle ignore \"@font-face\"","suites":["generate (remote)"],"updatePoint":{"line":987,"column":41,"index":32338},"line":987,"code":"  test('should handle ignore \"@font-face\"', done => {\n    const expected = read('expected/generate-ignorefont.css', true);\n    const target = path.join(__dirname, '.ignorefont.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-ignorefont.html`,\n      target,\n      ignore: ['@font-face'],\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should keep styles defined by the `include` option","suites":["generate (remote)"],"updatePoint":{"line":999,"column":58,"index":32778},"line":999,"code":"  test('should keep styles defined by the `include` option', done => {\n    const expected = read('fixtures/styles/include.css');\n    const target = path.join(__dirname, '.include.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/include.html`,\n      include: [/someRule/],\n      target,\n      width: 1300,\n      height: 900\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should use the provided user agent to get the remote src","suites":["generate (remote)"],"updatePoint":{"line":1011,"column":64,"index":33197},"line":1011,"code":"  test('should use the provided user agent to get the remote src', done => {\n    const expected = read('expected/generate-default.css');\n    const target = path.join(__dirname, '.critical.css');\n    generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-default-useragent.html`,\n      include: [/someRule/],\n      target,\n      width: 1300,\n      height: 900,\n      userAgent: 'custom agent'\n    }, assertCritical(target, expected, done));\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"should use the provided request method to check for asset existance","suites":["generate (remote)"],"updatePoint":{"line":1024,"column":75,"index":33682},"line":1024,"code":"  test('should use the provided request method to check for asset existance', async () => {\n    const mockGet = jest.fn();\n    const mockHead = jest.fn();\n    nock(`http://localhost:${port}`, {\n      allowUnmocked: true\n    }).intercept('/styles/adaptive.css', 'GET').reply(200, mockGet).intercept('/styles/adaptive.css', 'HEAD').reply(200, mockHead);\n    await generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-adaptive.html`,\n      width: 1300,\n      height: 900,\n      request: {\n        method: 'get'\n      }\n    });\n    expect(mockGet).toHaveBeenCalled();\n    expect(mockHead).not.toHaveBeenCalled();\n    await generate({\n      base: FIXTURES_DIR,\n      src: `http://localhost:${port}/generate-adaptive.html`,\n      width: 1300,\n      height: 900\n    });\n    expect(mockHead).toHaveBeenCalled();\n  });","file":"blackbox.test.js","skipped":false,"dir":"test"},{"name":"Show error alongside help","suites":["CLI","acceptance"],"updatePoint":{"line":59,"column":35,"index":1720},"line":59,"code":"    test('Show error alongside help', async () => {\n      expect.assertions(3);\n\n      try {\n        await run(['not available']);\n      } catch (error) {\n        expect(error.stderr).toMatch('Error:');\n        expect(error.stderr).toMatch('Usage: critical');\n        expect(error.code).toBe(1);\n      }\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Return version","suites":["CLI","acceptance"],"updatePoint":{"line":70,"column":24,"index":2021},"line":70,"code":"    test('Return version', async () => {\n      const {\n        stdout,\n        stderr\n      } = await run(['--version']);\n      expect(stderr).toBeFalsy();\n      expect(stdout.trim()).toBe(version);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Take html file passed via parameter","suites":["CLI","acceptance"],"updatePoint":{"line":78,"column":45,"index":2249},"line":78,"code":"    test('Take html file passed via parameter', async () => {\n      const {\n        stdout,\n        stderr\n      } = await run(['fixtures/generate-default.html', '--base', 'fixtures', '--width', '1300', '--height', '900']);\n      const expected = await read('expected/generate-default.css');\n      expect(stderr).toBeFalsy();\n      expect(nn(stdout)).toBe(expected);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Take html file piped to critical","suites":["CLI","acceptance"],"updatePoint":{"line":87,"column":42,"index":2621},"line":87,"code":"    test('Take html file piped to critical', async () => {\n      const {\n        stdout,\n        stderr\n      } = await pipe(path.normalize('fixtures/generate-default.html'), ['--base', 'fixtures', '--width', '1300', '--height', '900']);\n      const expected = await read('expected/generate-default.css');\n      expect(stderr).toMatch('Not rebasing assets for');\n      expect(stderr.code).toBeUndefined();\n      expect(nn(stdout)).toBe(expected);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Pipe html file inside a folder to critical","suites":["CLI","acceptance"],"updatePoint":{"line":97,"column":52,"index":3086},"line":97,"code":"    test('Pipe html file inside a folder to critical', async () => {\n      const {\n        stdout,\n        stderr\n      } = await pipe(path.normalize('fixtures/folder/generate-default.html'), ['--base', 'fixtures', '--width', '1300', '--height', '900']);\n      const expected = await read('expected/generate-default.css');\n      expect(stderr).toMatch('Not rebasing assets for');\n      expect(stderr.code).toBeUndefined();\n      expect(nn(stdout)).toBe(expected);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Inline images to piped html file","suites":["CLI","acceptance"],"updatePoint":{"line":107,"column":42,"index":3548},"line":107,"code":"    test('Inline images to piped html file', async () => {\n      const {\n        stdout,\n        stderr\n      } = await pipe(path.normalize('fixtures/generate-image.html'), ['-c', 'fixtures/styles/image-relative.css', '--inlineImages', '--base', 'fixtures', '--width', '1300', '--height', '900']);\n      const expected = await read('expected/generate-image.css');\n      expect(stderr).toBeFalsy();\n      expect(nn(stdout)).toBe(expected);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Add an absolute image path to critical css if we can't determine document location","suites":["CLI","acceptance"],"updatePoint":{"line":116,"column":92,"index":4045},"line":116,"code":"    test(\"Add an absolute image path to critical css if we can't determine document location\", async () => {\n      const {\n        stdout,\n        stderr\n      } = await pipe(path.normalize('fixtures/folder/generate-image.html'), ['-c', 'fixtures/styles/image-relative.css', '--base', 'fixtures', '--width', '1300', '--height', '900']);\n      const expected = await read('expected/generate-image-absolute.css');\n      expect(stderr).toBeFalsy();\n      expect(nn(stdout)).toBe(expected);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Add absolute image paths on piped html without relative links","suites":["CLI","acceptance"],"updatePoint":{"line":125,"column":71,"index":4519},"line":125,"code":"    test('Add absolute image paths on piped html without relative links', async () => {\n      const {\n        stdout,\n        stderr\n      } = await pipe(path.normalize('fixtures/folder/subfolder/generate-image-absolute.html'), ['--base', 'fixtures', '--width', '1300', '--height', '900']);\n      const expected = await read('expected/generate-image-absolute.css');\n      expect(stderr).toBeFalsy();\n      expect(nn(stdout)).toBe(expected);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Exit with code 1 and show help","suites":["CLI","acceptance"],"updatePoint":{"line":134,"column":40,"index":4937},"line":134,"code":"    test('Exit with code 1 and show help', async () => {\n      expect.assertions(2);\n\n      try {\n        await run(['fixtures/not-exists.html']);\n      } catch (error) {\n        expect(error.code).toBe(1);\n        expect(error.stderr).toMatch('Usage:');\n      }\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Generate multi-dimension critical-path CSS using cli","suites":["CLI","acceptance"],"updatePoint":{"line":144,"column":62,"index":5230},"line":144,"code":"    test('Generate multi-dimension critical-path CSS using cli', async () => {\n      const {\n        stdout\n      } = await pipe(path.normalize('fixtures/generate-adaptive.html'), ['--base', 'fixtures', '--dimensions', '100x70', '--dimensions', '1000x70']);\n      const expected = await read('expected/generate-adaptive.css', 'utf8');\n      expect(nn(stdout)).toBe(expected);\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"pass the correct opts when using short opts","suites":["CLI","mocked"],"updatePoint":{"line":161,"column":53,"index":5794},"line":161,"code":"    test('pass the correct opts when using short opts', async () => {\n      const args = await getArgs(['fixtures/generate-default.html', '-c', 'css', '-w', '300', '-h', '400', '-e', '-i']);\n      expect(args).toMatchObject({\n        width: 300,\n        height: 400,\n        css: ['css'],\n        inline: true,\n        extract: true\n      });\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"pass the correct opts when using long opts","suites":["CLI","mocked"],"updatePoint":{"line":171,"column":52,"index":6144},"line":171,"code":"    test('pass the correct opts when using long opts', async () => {\n      const args = await getArgs(['fixtures/generate-default.html', '--css', 'css', '--width', '300', '--height', '400', '--ignore', 'ignore', '--include', '/include/', '--inline', '--extract', '--inlineImages', '1024', '--assetPaths', 'assetPath1', '--assetPaths', 'assetPath2', '--dimensions', '1300x800', '--dimensions', '640x480', '--dimensions', '1x2,3x4,5x6']);\n      expect(args).toMatchObject({\n        width: 300,\n        height: 400,\n        css: ['css'],\n        inline: true,\n        extract: true,\n        dimensions: [{\n          width: 1300,\n          height: 800\n        }, {\n          width: 640,\n          height: 480\n        }, {\n          width: 1,\n          height: 2\n        }, {\n          width: 3,\n          height: 4\n        }, {\n          width: 5,\n          height: 6\n        }]\n      });\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Set inline to false when prefixed with --no","suites":["CLI","mocked"],"updatePoint":{"line":197,"column":53,"index":7038},"line":197,"code":"    test('Set inline to false when prefixed with --no', async () => {\n      const args = await getArgs(['fixtures/generate-default.html', '--no-inline']);\n      expect(args).toMatchObject({\n        inline: false\n      });\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Set penthouse options prefixed with --penthouse-","suites":["CLI","mocked"],"updatePoint":{"line":203,"column":58,"index":7273},"line":203,"code":"    test('Set penthouse options prefixed with --penthouse-', async () => {\n      const args = await getArgs(['fixtures/generate-default.html', '--penthouse-strict', '--penthouse-timeout', '50000', '--penthouse-renderWaitTime', '300']);\n      expect(args).toMatchObject({\n        penthouse: {\n          strict: true,\n          timeout: 50_000,\n          renderWaitTime: 300\n        }\n      });\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Set request options prefixed with --request-","suites":["CLI","mocked"],"updatePoint":{"line":213,"column":54,"index":7670},"line":213,"code":"    test('Set request options prefixed with --request-', async () => {\n      const args = await getArgs(['fixtures/generate-default.html', '--request-method', 'get', '--no-request-followRedirect']);\n      expect(args).toMatchObject({\n        request: {\n          method: 'get',\n          followRedirect: false\n        }\n      });\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Handle shell expanded the glob","suites":["CLI","mocked"],"updatePoint":{"line":222,"column":40,"index":7994},"line":222,"code":"    test('Handle shell expanded the glob', async () => {\n      // simulate system glob\n      const css = await globby('fixtures/**/*.css');\n      const args = await getArgs(['fixtures/generate-default.html', '-c', ...css, '--target', 'test.css']);\n      expect(args).toMatchObject({\n        css,\n        target: 'test.css',\n        src: 'fixtures/generate-default.html'\n      });\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Handle glob","suites":["CLI","mocked"],"updatePoint":{"line":232,"column":21,"index":8363},"line":232,"code":"    test('Handle glob', async () => {\n      // simulate system glob\n      const args = await getArgs(['fixtures/generate-default.html', '-c', 'fixtures/**/*.css', '--target', 'test.css']);\n      expect(args).toMatchObject({\n        css: ['fixtures/**/*.css'],\n        target: 'test.css',\n        src: 'fixtures/generate-default.html'\n      });\n    });","file":"cli.test.js","skipped":false,"dir":"test"},{"name":"Throws ConfigError on invalid config","suites":[],"updatePoint":{"line":3,"column":42,"index":147},"line":3,"code":"test('Throws ConfigError on invalid config', () => {\n  expect(() => {\n    getOptions({\n      invalidParam: true\n    });\n  }).toThrow(ConfigError);\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Throws ConfigError on missing param","suites":[],"updatePoint":{"line":10,"column":41,"index":297},"line":10,"code":"test('Throws ConfigError on missing param', () => {\n  expect(() => {\n    getOptions({});\n  }).toThrow(ConfigError);\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Throws ConfigError when html & src are both set","suites":[],"updatePoint":{"line":15,"column":53,"index":429},"line":15,"code":"test('Throws ConfigError when html & src are both set', () => {\n  expect(() => {\n    getOptions({\n      html: '...',\n      src: '...'\n    });\n  }).toThrow(ConfigError);\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Throws ConfigError on empty required value","suites":[],"updatePoint":{"line":23,"column":48,"index":597},"line":23,"code":"test('Throws ConfigError on empty required value', () => {\n  expect(() => {\n    getOptions({\n      src: ''\n    });\n  }).toThrow(ConfigError);\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Returns config object","suites":[],"updatePoint":{"line":30,"column":27,"index":722},"line":30,"code":"test('Returns config object', () => {\n  const config = getOptions({\n    src: '...'\n  });\n  expect(config).toMatchObject({\n    src: '...',\n    width: DEFAULT.width,\n    height: DEFAULT.height,\n    maxImageFileSize: DEFAULT.maxImageFileSize,\n    strict: DEFAULT.strict,\n    extract: DEFAULT.extract,\n    concurrency: DEFAULT.concurrency,\n    inlineImages: DEFAULT.inlineImages,\n    include: DEFAULT.include,\n    inline: DEFAULT.inline,\n    dimensions: [{\n      width: DEFAULT.width,\n      height: DEFAULT.height\n    }],\n    penthouse: {\n      forceInclude: DEFAULT.include,\n      timeout: DEFAULT.timeout,\n      maxEmbeddedBase64Length: DEFAULT.maxImageFileSize\n    }\n  });\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Target config on passed string","suites":[],"updatePoint":{"line":56,"column":36,"index":1407},"line":56,"code":"test('Target config on passed string', () => {\n  expect(getOptions({\n    src: '...',\n    target: 'test.css'\n  })).toHaveProperty('target', {\n    css: 'test.css'\n  });\n  expect(getOptions({\n    src: '...',\n    target: 'test.html'\n  })).toHaveProperty('target', {\n    html: 'test.html'\n  });\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Inline config on passed boolean","suites":[],"updatePoint":{"line":70,"column":37,"index":1702},"line":70,"code":"test('Inline config on passed boolean', () => {\n  expect(getOptions({\n    src: '...',\n    inline: true,\n    base: 'BASE'\n  })).toHaveProperty('inline', {\n    basePath: 'BASE',\n    strategy: 'media'\n  });\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Inline config on passed object","suites":[],"updatePoint":{"line":80,"column":36,"index":1909},"line":80,"code":"test('Inline config on passed object', () => {\n  expect(getOptions({\n    src: '...',\n    inline: {\n      check: true\n    },\n    base: 'BASE'\n  })).toHaveProperty('inline', {\n    basePath: 'BASE',\n    check: true\n  });\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Penthouse config on passed object","suites":[],"updatePoint":{"line":92,"column":39,"index":2134},"line":92,"code":"test('Penthouse config on passed object', () => {\n  expect(getOptions({\n    src: '...',\n    penthouse: {\n      check: true\n    }\n  })).toHaveProperty('penthouse', {\n    forceInclude: DEFAULT.include,\n    timeout: DEFAULT.timeout,\n    maxEmbeddedBase64Length: DEFAULT.maxImageFileSize,\n    check: true\n  });\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Ignore config on passed array","suites":[],"updatePoint":{"line":105,"column":35,"index":2441},"line":105,"code":"test('Ignore config on passed array', () => {\n  expect(getOptions({\n    src: '...',\n    ignore: ['@font-face']\n  })).toHaveProperty('ignore', {\n    atrule: ['@font-face'],\n    rule: ['@font-face'],\n    decl: ['@font-face']\n  });\n});","file":"config.test.js","skipped":false,"dir":"test"},{"name":"Generate critical-path CSS","suites":[],"updatePoint":{"line":37,"column":32,"index":1088},"line":37,"code":"test('Generate critical-path CSS', async () => {\n  const css = read('expected/generate-default.css');\n  const html = read('fixtures/generate-default.html');\n\n  try {\n    const result = await create({\n      src: `http://localhost:${port}/generate-default.html`\n    });\n    expect(result.css).toBe(css);\n    expect(result.html).toBe(html);\n  } catch (error) {\n    expect(error).toBe(undefined);\n  }\n});","file":"core.test.js","skipped":false,"dir":"test"},{"name":"checkCssOption","suites":[],"updatePoint":{"line":44,"column":20,"index":1585},"line":44,"code":"test('checkCssOption', () => {\n  expect(checkCssOption(undefined)).toEqual(false);\n  expect(checkCssOption('')).toEqual(false);\n  expect(checkCssOption(false)).toEqual(false);\n  expect(checkCssOption([])).toEqual(false);\n  expect(checkCssOption(['abc'])).toEqual(true);\n  expect(checkCssOption('abc')).toEqual(true);\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Normalize paths","suites":[],"updatePoint":{"line":52,"column":21,"index":1907},"line":52,"code":"test('Normalize paths', () => {\n  const plattform = process.platform;\n  Object.defineProperty(process, 'platform', {\n    value: 'win32'\n  });\n  expect(normalizePath('foo\\\\bar')).toBe('foo/bar');\n  expect(normalizePath('C:\\\\images\\\\critical.png')).toBe('/images/critical.png');\n  expect(normalizePath(`http://localhost:${port}/styles/main.css`)).toBe(`http://localhost:${port}/styles/main.css`);\n  Object.defineProperty(process, 'platform', {\n    value: plattform\n  });\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Remote file detection","suites":[],"updatePoint":{"line":64,"column":27,"index":2386},"line":64,"code":"test('Remote file detection', () => {\n  const local = ['../test/foo.html', '/usr/tmp/bar'];\n  const remote = ['https://test.io/', '//test.io/styles/main.css'];\n  local.forEach(p => expect(isRemote(p)).toBe(false));\n  remote.forEach(p => expect(isRemote(p)).toBe(true));\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Error for file not found","suites":[],"updatePoint":{"line":70,"column":30,"index":2663},"line":70,"code":"test('Error for file not found', () => {\n  expect(vinylize({\n    filenpath: 'non-existant-file.html'\n  })).rejects.toThrow(FileNotFoundError);\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"fileExists","suites":[],"updatePoint":{"line":75,"column":16,"index":2796},"line":75,"code":"test('fileExists', async () => {\n  const tests = [{\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/head.html'),\n    expected: true\n  }, {\n    filepath: path.join(__dirname, 'fixtures/not-available'),\n    expected: false\n  }, {\n    filepath: `http://localhost:${port}/head.html`,\n    expected: true\n  }, {\n    filepath: `http://localhost:${port}/styles/main.css`,\n    expected: true\n  }, {\n    filepath: `http://localhost:${port}/styles/nope.css`,\n    expected: false\n  }];\n  expect.assertions(tests.length);\n\n  for (const {\n    filepath,\n    expected\n  } of tests) {\n    const result = await fileExists(filepath);\n    expect(result).toBe(expected);\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"joinPath","suites":[],"updatePoint":{"line":102,"column":14,"index":3466},"line":102,"code":"test('joinPath', () => {\n  const tests = [{\n    base: '/folder/subfolder/head',\n    part: 'test.html',\n    expected: '/folder/subfolder/head/test.html'\n  }, {\n    base: '/folder/subfolder/head',\n    part: '../../test.html',\n    expected: '/folder/test.html'\n  }, {\n    base: `http://localhost:${port}`,\n    part: '../../test.html',\n    expected: `http://localhost:${port}/test.html`\n  }, {\n    base: `http://localhost:${port}/a/b/c`,\n    part: '../../test.html',\n    expected: `http://localhost:${port}/test.html`\n  }, {\n    base: `http://localhost:${port}/a/b/c/d.html`,\n    part: 'test.html',\n    expected: `http://localhost:${port}/a/b/c/test.html`\n  }, {\n    base: `http://localhost:${port}/a/b/c/d.html`,\n    part: '../test.html',\n    expected: `http://localhost:${port}/a/b/test.html`\n  }];\n  expect.assertions(tests.length);\n\n  for (const {\n    base,\n    part,\n    expected\n  } of tests) {\n    const result = joinPath(base, part);\n    expect(normalizePath(result)).toBe(expected);\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"resolve","suites":[],"updatePoint":{"line":139,"column":13,"index":4461},"line":139,"code":"test('resolve', async () => {\n  const tests = [{\n    filepath: '/folder/subfolder/head.html',\n    paths: [__dirname, path.join(__dirname, 'fixtures'), `http://localhost:${port}`],\n    expected: path.join(__dirname, 'fixtures/folder/subfolder/head.html')\n  }, {\n    filepath: '/folder/subfolder/head.html',\n    paths: [__dirname, `http://localhost:${port}`, path.join(__dirname, 'fixtures/folder/subfolder/head.html')],\n    expected: `http://localhost:${port}/folder/subfolder/head.html`\n  }, {\n    filepath: '../styles/main.css',\n    paths: [__dirname, `http://localhost:${port}`, `http://localhost:${port}/folder/`, path.join(__dirname, 'fixtures/folder/subfolder/head.html')],\n    expected: `http://localhost:${port}/styles/main.css`\n  }];\n  expect.assertions(tests.length);\n\n  for (const {\n    filepath,\n    paths,\n    expected\n  } of tests) {\n    const result = await resolve(filepath, paths);\n    expect(result).toBe(expected);\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"resolve error","suites":[],"updatePoint":{"line":164,"column":19,"index":5408},"line":164,"code":"test('resolve error', () => {\n  const paths = [__dirname, `http://localhost:${port}`];\n  expect(resolve('non-existant-file.html', paths)).rejects.toThrow(FileNotFoundError);\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Vinylize local file","suites":[],"updatePoint":{"line":168,"column":25,"index":5592},"line":168,"code":"test('Vinylize local file', async () => {\n  const files = [path.join(__dirname, 'fixtures/folder/subfolder/head.html'), path.join(__dirname, 'fixtures/head.html')];\n  const contents = await Promise.all(files.map(f => readFileAsync(f)));\n  const result = await Promise.all(files.map(filepath => vinylize({\n    filepath\n  })));\n  expect.hasAssertions();\n  expect(result.length).toBe(files.length);\n\n  for (const [i, element] of result.entries()) {\n    expect(element.path).toBe(files[i]);\n    expect(element.remote).toBe(false);\n    expect(element.url).toBe(undefined);\n    expect(element.urlObj).toBe(undefined);\n    expect(element.contents.toString()).toBe(contents[i].toString());\n  }\n\n  return true;\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Vinylize remote file","suites":[],"updatePoint":{"line":187,"column":26,"index":6299},"line":187,"code":"test('Vinylize remote file', async () => {\n  const files = ['fixtures/folder/subfolder/head.html', 'fixtures/head.html', 'fixtures/styles/main.css', 'fixtures/images/critical.png'];\n  const contents = await Promise.all(files.map(f => readFileAsync(path.join(__dirname, f))));\n  const urls = files.map(f => f.replace(/^fixtures/, `http://localhost:${port}`));\n  const result = await Promise.all(urls.map(filepath => vinylize({\n    filepath\n  }))); // expect.assertions(files.length * 4 + 1);\n\n  expect(result.length).toBe(files.length);\n\n  for (const [i, element] of result.entries()) {\n    expect(element.remote).toBe(true);\n    expect(element.url).toBe(urls[i]);\n    expect(element.urlObj).toEqual(urlParse(urls[i]));\n    expect(element.contents.toString()).toBe(contents[i].toString());\n  }\n\n  expect.hasAssertions();\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Append stylesheets to vinyl","suites":[],"updatePoint":{"line":206,"column":33,"index":7130},"line":206,"code":"test('Append stylesheets to vinyl', async () => {\n  const files = ['fixtures/folder/subfolder/head.html', 'fixtures/folder/generate-default.html', 'fixtures/head.html', 'fixtures/styles/main.css', 'fixtures/images/critical.png'];\n  const vinyls = await Promise.all(files.map(f => vinylize({\n    filepath: path.join(__dirname, f)\n  })));\n  const result = vinyls.map(v => getStylesheetHrefs(v));\n  expect.assertions(files.length + 6);\n  expect(result.length).toBe(5);\n  result.forEach(stylesheets => expect(Array.isArray(stylesheets)).toBeTruthy());\n  expect(result[0].length).toBe(1);\n  expect(result[1].length).toBe(2);\n  expect(result[2].length).toBe(2);\n  expect(result[3].length).toBe(0);\n  expect(result[4].length).toBe(0);\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Append assets to vinyl","suites":[],"updatePoint":{"line":221,"column":28,"index":7857},"line":221,"code":"test('Append assets to vinyl', async () => {\n  const files = ['fixtures/folder/subfolder/head.html', 'fixtures/head.html', 'fixtures/styles/bootstrap.css', 'fixtures/styles/image-relative.css', 'fixtures/images/critical.png'];\n  const vinyls = await Promise.all(files.map(f => vinylize({\n    filepath: path.join(__dirname, f)\n  })));\n  const result = vinyls.map(v => getAssets(v));\n  expect.assertions(files.length + 6);\n  expect(result.length).toBe(5);\n  result.forEach(assets => expect(Array.isArray(assets)).toBeTruthy());\n  expect(result[0].length).toBe(0);\n  expect(result[1].length).toBe(0);\n  expect(result[2].length).toBe(5);\n  expect(result[3].length).toBe(1);\n  expect(result[4].length).toBe(0);\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Compute document base (with base option)","suites":[],"updatePoint":{"line":236,"column":46,"index":8585},"line":236,"code":"test('Compute document base (with base option)', async () => {\n  const vinyls = await Promise.all([{\n    filepath: `http://localhost:${port}/folder/generate-default.html`,\n    expected: '/folder'\n  }, {\n    filepath: `http://localhost:${port}/folder/head.html`,\n    expected: '/folder'\n  }, {\n    filepath: `http://localhost:${port}/generate-default.html`,\n    expected: '/'\n  }, {\n    filepath: `http://localhost:${port}/folder`,\n    expected: '/'\n  }, {\n    filepath: `http://localhost:${port}/folder/`,\n    expected: '/folder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/head.html'),\n    expected: '/folder/subfolder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/generate-default.html'),\n    expected: '/folder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/head.html'),\n    expected: '/'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/relative.html'),\n    expected: '/folder/subfolder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/relative.html'),\n    expected: '/folder'\n  }].map(f => vinylize(f).then(vinyl => ({ ...f,\n    vinyl\n  }))));\n  const files = vinyls.map(data => {\n    data.vinyl.stylesheets = getStylesheetHrefs(data.vinyl);\n    return data;\n  });\n  expect.hasAssertions();\n\n  for (const file of files) {\n    const filepath = await getDocumentPath(file.vinyl, {\n      base: path.join(__dirname, 'fixtures')\n    });\n    expect(path.dirname(filepath)).toBe(file.expected);\n  }\n\n  expect(stderr).not.toHaveBeenCalled();\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Compute document base (without base option)","suites":[],"updatePoint":{"line":285,"column":49,"index":10107},"line":285,"code":"test('Compute document base (without base option)', async () => {\n  const vinyls = await Promise.all([{\n    filepath: `http://localhost:${port}/folder`,\n    expected: '/'\n  }, {\n    filepath: `http://localhost:${port}/folder/`,\n    expected: '/folder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/head.html'),\n    expected: '/folder/subfolder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/generate-default.html'),\n    expected: '/folder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/head.html'),\n    expected: '/'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/relative.html'),\n    expected: '/folder/subfolder'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/relative.html'),\n    expected: '/folder'\n  }].map(f => vinylize(f).then(vinyl => ({ ...f,\n    vinyl\n  }))));\n  const files = vinyls.map(data => {\n    data.vinyl.stylesheets = getStylesheetHrefs(data.vinyl);\n    return data;\n  });\n  expect.hasAssertions();\n\n  for (const file of files) {\n    const filepath = await getDocumentPath(file.vinyl);\n    expect(path.dirname(filepath)).toBe(file.expected);\n\n    if (file.noBase) {\n      expect(stderr).toHaveBeenCalledWith(BASE_WARNING);\n    }\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get document","suites":[],"updatePoint":{"line":325,"column":18,"index":11308},"line":325,"code":"test('Get document', async () => {\n  const file = path.join(__dirname, 'fixtures/folder/relative.html');\n  const vinyl = new Vinyl({\n    path: file,\n    contents: Buffer.from(read(file))\n  });\n  const tests = [{\n    filepath: `http://localhost:${port}/folder`,\n    expected: '/folder'\n  }, {\n    filepath: `http://localhost:${port}/folder/`,\n    expected: '/folder/index.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/head.html'),\n    expected: '/folder/subfolder/head.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/generate-default.html'),\n    expected: '/folder/generate-default.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/head.html'),\n    expected: '/head.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/relative.html'),\n    expected: '/folder/subfolder/relative.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/relative.html'),\n    expected: '/folder/relative.html'\n  }, {\n    filepath: 'folder/relative.html',\n    options: {\n      base: path.join(__dirname, 'fixtures')\n    },\n    expected: '/folder/relative.html'\n  }, {\n    filepath: vinyl,\n    options: {\n      base: path.join(__dirname, 'fixtures')\n    },\n    expected: '/folder/relative.html'\n  }];\n  expect.hasAssertions();\n\n  for (const testdata of tests) {\n    const {\n      filepath,\n      expected,\n      options\n    } = testdata;\n    const file = await getDocument(filepath, options);\n    expect(file.virtualPath).toBe(expected);\n\n    if (testdata.noBase) {\n      expect(stderr).toHaveBeenCalledWith(BASE_WARNING);\n    }\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get document from source with rebase option","suites":[],"updatePoint":{"line":381,"column":49,"index":12937},"line":381,"code":"test('Get document from source with rebase option', async () => {\n  const base = path.join(__dirname, 'fixtures');\n  const tests = [{\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/head.html'),\n    expected: '/folder/subfolder/head.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/generate-default.html'),\n    expected: '/folder/generate-default.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/head.html'),\n    expected: '/head.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/subfolder/relative.html'),\n    expected: '/folder/subfolder/relative.html'\n  }, {\n    filepath: path.join(__dirname, 'fixtures/folder/relative.html'),\n    expected: '/folder/relative.html'\n  }]; // expect.assertions(tests.length + 1);\n\n  for (const testdata of tests) {\n    const {\n      filepath,\n      expected\n    } = testdata;\n    const rebase = {\n      to: `/${normalizePath(path.relative(base, filepath))}`\n    };\n    const source = await readFileAsync(filepath);\n    const file = await getDocumentFromSource(source, {\n      rebase,\n      base\n    });\n    expect(file.virtualPath).toBe(expected);\n  }\n\n  expect(stderr).not.toHaveBeenCalled();\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get document from source without path options","suites":[],"updatePoint":{"line":418,"column":51,"index":14126},"line":418,"code":"test('Get document from source without path options', async () => {\n  const filepath = path.join(__dirname, 'fixtures/folder/subfolder/head.html');\n  const source = await readFileAsync(filepath);\n  const css = path.join(__dirname, 'fixtures/styles/image-relative.css');\n  const file = await getDocumentFromSource(source, {\n    css\n  });\n  const styles = await readFileAsync(css, 'utf8'); // expect(file.path).toBe(undefined);\n\n  expect(file.css).toMatch(styles);\n  expect(stderr).toHaveBeenCalled();\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Compute base for stylesheets","suites":[],"updatePoint":{"line":430,"column":34,"index":14613},"line":430,"code":"test('Compute base for stylesheets', async () => {\n  const docs = await mapAsync([`http://localhost:${port}/generate-image.html`, path.join(__dirname, 'fixtures/folder/generate-image.html'), `http://localhost:${port}/folder/relative-different.html`, path.join(__dirname, 'fixtures/relative-different.html'), path.join(__dirname, 'fixtures/remote-different.html')], async filepath => {\n    const document = await vinylize({\n      filepath\n    });\n    document.stylesheets = await getStylesheetHrefs(document);\n    document.virtualPath = await getDocumentPath(document);\n    return document;\n  });\n  const tests = [{\n    filepath: `http://localhost:${port}/styles/image-relative.css`,\n    expected: ['/styles/image-relative.css', `http://localhost:${port}/styles/image-relative.css`, `/styles/image-relative.css`, `http://localhost:${port}/styles/image-relative.css`, `http://localhost:${port}/styles/image-relative.css`]\n  }, {\n    filepath: `http://127.0.0.1:${port}/styles/image-relative.css`,\n    expected: [`http://127.0.0.1:${port}/styles/image-relative.css`, `http://127.0.0.1:${port}/styles/image-relative.css`, `http://127.0.0.1:${port}/styles/image-relative.css`, `http://127.0.0.1:${port}/styles/image-relative.css`, `http://127.0.0.1:${port}/styles/image-relative.css`]\n  }, {\n    filepath: path.join(__dirname, 'fixtures/styles/image-relative.css'),\n    expected: ['/styles/image-relative.css', '/styles/image-relative.css', '/folder/styles/image-relative.css', '/styles/image-relative.css', 'http://www.cdn.somewhere/styles/image-relative.css']\n  }];\n  expect.assertions(docs.length * tests.length);\n\n  for (const [index, document] of docs.entries()) {\n    for (const testdata of tests) {\n      const {\n        filepath,\n        expected\n      } = testdata;\n      const file = await vinylize({\n        filepath\n      });\n      const result = await getStylesheetPath(document, file);\n      expect(result).toBe(expected[index]);\n    }\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get styles","suites":[],"updatePoint":{"line":465,"column":16,"index":16548},"line":465,"code":"test('Get styles', async () => {\n  const docs = await mapAsync([`http://localhost:${port}/generate-image.html`, path.join(__dirname, 'fixtures/folder/generate-image.html')], filepath => getDocument(filepath));\n  const tests = [{\n    filepath: `http://localhost:${port}/styles/image-relative.css`,\n    expected: ['images/critical.png', `http://localhost:${port}/images/critical.png`]\n  }, {\n    filepath: `http://localhost:${port}/folder/subfolder/issue-216.css`,\n    expected: [`folder/fonts/fontawesome-webfont.woff`, `http://localhost:${port}/folder/fonts/fontawesome-webfont.woff`]\n  }, {\n    filepath: `http://127.0.0.1:${port}/styles/image-relative.css`,\n    expected: [`http://127.0.0.1:${port}/images/critical.png`, `http://127.0.0.1:${port}/images/critical.png`]\n  }, {\n    filepath: `http://127.0.0.1:${port}/folder/subfolder/issue-216.css`,\n    expected: [`http://127.0.0.1:${port}/folder/fonts/fontawesome-webfont.woff`, `http://127.0.0.1:${port}/folder/fonts/fontawesome-webfont.woff`]\n  }, {\n    filepath: path.join(__dirname, 'fixtures/styles/image-relative.css'),\n    expected: ['images/critical.png', '../images/critical.png']\n  }, {\n    filepath: path.join(__dirname, 'fixtures/styles/image-relative.css'),\n    options: {\n      rebase: {\n        from: '/styles/main.css',\n        to: '/index.html'\n      }\n    },\n    expected: ['images/critical.png', 'images/critical.png']\n  }, {\n    filepath: path.join(__dirname, 'fixtures/styles/image-relative.css'),\n    options: {\n      rebase: {\n        from: '/styles/main.css',\n        to: '/a/b/c/index.html'\n      }\n    },\n    expected: ['../../../images/critical.png', '../../../images/critical.png']\n  }, {\n    filepath: path.join(__dirname, 'fixtures/styles/image-relative.css'),\n    options: {\n      rebase: asset => `https://my-cdn.com${asset.absolutePath}`\n    },\n    expected: ['https://my-cdn.com/images/critical.png', 'https://my-cdn.com/images/critical.png']\n  }];\n\n  for (const [index, document] of docs.entries()) {\n    for (const testdata of tests) {\n      const {\n        filepath,\n        expected,\n        options = {}\n      } = testdata;\n      const file = await getStylesheet(document, filepath, {\n        base: path.join(__dirname, 'fixtures'),\n        ...options\n      });\n      expect(file.contents.toString()).toMatch(expected[index]);\n    }\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get inline styles","suites":[],"updatePoint":{"line":523,"column":23,"index":18888},"line":523,"code":"test('Get inline styles', async () => {\n  const docs = await mapAsync([`http://localhost:${port}/generate-adaptive.html`, `http://localhost:${port}/generate-adaptive-inline.html`, path.join(__dirname, 'fixtures/generate-adaptive-inline.html')], filepath => getDocument(filepath));\n  const [expected, ...cssArray] = docs.map(doc => strip(doc.css));\n\n  for (const css of cssArray) {\n    expect(css).toMatch(expected);\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get styles with media attribute","suites":[],"updatePoint":{"line":531,"column":37,"index":19326},"line":531,"code":"test('Get styles with media attribute', async () => {\n  const docs = await mapAsync([`http://localhost:${port}/media-attr.html`, path.join(__dirname, 'fixtures/media-attr.html')], filepath => getDocument(filepath));\n  const expected = `@media (max-width: 1024px) { .header {\n    display: flex;\n} }`;\n\n  for (const document of docs) {\n    expect(document.css.toString()).toMatch(expected);\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get base64 styles","suites":[],"updatePoint":{"line":541,"column":23,"index":19709},"line":541,"code":"test('Get base64 styles', async () => {\n  const docs = await mapAsync([`http://localhost:${port}/generate-adaptive.html`, `http://localhost:${port}/generate-adaptive-base64.html`, path.join(__dirname, 'fixtures/generate-adaptive-base64.html')], filepath => getDocument(filepath));\n  const [expected, ...cssArray] = docs.map(doc => strip(doc.css));\n\n  for (const css of cssArray) {\n    expect(css).toMatch(expected);\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Get styles (without path)","suites":[],"updatePoint":{"line":549,"column":31,"index":20141},"line":549,"code":"test('Get styles (without path)', async () => {\n  const docs = await mapAsync([path.join(__dirname, 'fixtures/folder/generate-image.html'), path.join(__dirname, 'fixtures/relative-different.html'), path.join(__dirname, 'fixtures/remote-different.html')], file => readFileAsync(file));\n  const tests = [{\n    filepath: `http://localhost:${port}/styles/image-relative.css`,\n    expected: [`http://localhost:${port}/images/critical.png`, `http://localhost:${port}/images/critical.png`, `http://localhost:${port}/images/critical.png`]\n  }, {\n    filepath: `http://127.0.0.1:${port}/styles/image-relative.css`,\n    expected: [`http://127.0.0.1:${port}/images/critical.png`, `http://127.0.0.1:${port}/images/critical.png`, `http://127.0.0.1:${port}/images/critical.png`]\n  }, {\n    filepath: path.join(__dirname, 'fixtures/styles/image-relative.css'),\n    expected: [`'/images/critical.png'`, `'/images/critical.png'`, `'/images/critical.png'`]\n  }];\n\n  for (const [index, element] of docs.entries()) {\n    for (const testdata of tests) {\n      const {\n        filepath,\n        expected\n      } = testdata;\n      const document = await getDocumentFromSource(element, {\n        css: filepath\n      });\n      const file = await getStylesheet(document, filepath, {\n        base: path.join(__dirname, 'fixtures')\n      });\n      expect(file.contents.toString()).toMatch(expected[index]);\n    }\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Does not rebase when rebase is disabled via option","suites":[],"updatePoint":{"line":578,"column":56,"index":21559},"line":578,"code":"test('Does not rebase when rebase is disabled via option', async () => {\n  const docs = await mapAsync([path.join(__dirname, 'fixtures/folder/generate-image.html'), path.join(__dirname, 'fixtures/relative-different.html'), path.join(__dirname, 'fixtures/remote-different.html')], file => readFileAsync(file));\n  const tests = [{\n    filepath: `http://localhost:${port}/styles/image-relative.css`,\n    expected: [`'../images/critical.png'`, `'../images/critical.png'`, `'../images/critical.png'`]\n  }, {\n    filepath: `http://127.0.0.1:${port}/styles/image-relative.css`,\n    expected: [`'../images/critical.png'`, `'../images/critical.png'`, `'../images/critical.png'`]\n  }, {\n    filepath: path.join(__dirname, 'fixtures/styles/image-relative.css'),\n    expected: [`'../images/critical.png'`, `'../images/critical.png'`, `'../images/critical.png'`]\n  }];\n\n  for (const [index, element] of docs.entries()) {\n    for (const testdata of tests) {\n      const {\n        filepath,\n        expected\n      } = testdata;\n      const document = await getDocumentFromSource(element, {\n        css: filepath\n      });\n      const file = await getStylesheet(document, filepath, {\n        base: path.join(__dirname, 'fixtures'),\n        rebase: false\n      });\n      expect(file.contents.toString()).toMatch(expected[index]);\n    }\n  }\n});","file":"file.test.js","skipped":false,"dir":"test"},{"name":"Handle errors with passed callback method","suites":[],"updatePoint":{"line":28,"column":47,"index":973},"line":28,"code":"test('Handle errors with passed callback method', done => {\n  const tmp = generate({}, (error, data) => {\n    expect(data).toBeFalsy();\n    expect(error).toBeInstanceOf(Error);\n    done();\n  });\n  expect(tmp).resolves.toBeUndefined();\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Call callback function with object containing html, css and uncritical props","suites":[],"updatePoint":{"line":36,"column":82,"index":1247},"line":36,"code":"test('Call callback function with object containing html, css and uncritical props', done => {\n  generate({\n    src: path.join(__dirname, 'fixtures/generate-default.html')\n  }, (error, data) => {\n    expect(error).toBeFalsy();\n    expect(data).toHaveProperty('css');\n    expect(data).toHaveProperty('html');\n    expect(data).toHaveProperty('uncritical');\n    done();\n  });\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Write css target","suites":[],"updatePoint":{"line":47,"column":22,"index":1564},"line":47,"code":"test('Write css target', async () => {\n  const data = await generate({\n    src: path.join(__dirname, 'fixtures/generate-default.html'),\n    target: '.test.css'\n  });\n  expect(data).toHaveProperty('css');\n  expect(data).toHaveProperty('html');\n  expect(fs.existsSync('.test.css')).toBeTruthy();\n  const content = readAndRemove('.test.css');\n  expect(content).toBe(data.css);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Write html target","suites":[],"updatePoint":{"line":58,"column":23,"index":1943},"line":58,"code":"test('Write html target', async () => {\n  const data = await generate({\n    src: path.join(__dirname, 'fixtures/generate-default.html'),\n    target: '.test.html'\n  });\n  expect(data).toHaveProperty('css');\n  expect(data).toHaveProperty('html');\n  expect(fs.existsSync('.test.html')).toBeTruthy();\n  const content = readAndRemove('.test.html');\n  expect(content).toBe(data.html);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Write all targets","suites":[],"updatePoint":{"line":69,"column":23,"index":2326},"line":69,"code":"test('Write all targets', async () => {\n  const data = await generate({\n    src: path.join(__dirname, 'fixtures/generate-default.html'),\n    target: {\n      html: '.test.html',\n      css: '.test.css',\n      uncritical: '.uncritical.css'\n    }\n  });\n  expect(data).toHaveProperty('css');\n  expect(data).toHaveProperty('html');\n  expect(fs.existsSync('.test.css')).toBeTruthy();\n  expect(fs.existsSync('.uncritical.css')).toBeTruthy();\n  expect(fs.existsSync('.test.html')).toBeTruthy();\n  const html = readAndRemove('.test.html');\n  const css = readAndRemove('.test.css');\n  readAndRemove('.uncritical.css');\n  expect(html).toBe(data.html);\n  expect(css).toBe(data.css);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Write all targets relative to base","suites":[],"updatePoint":{"line":89,"column":40,"index":3017},"line":89,"code":"test('Write all targets relative to base', async () => {\n  const base = temporaryDirectory();\n\n  const getFile = f => path.join(base, f);\n\n  const data = await generate({\n    base,\n    src: path.join(__dirname, 'fixtures/generate-default.html'),\n    target: {\n      html: '.test.html',\n      css: '.test.css',\n      uncritical: '.uncritical.css'\n    }\n  });\n  expect(data).toHaveProperty('css');\n  expect(data).toHaveProperty('html');\n  expect(data).toHaveProperty('uncritical');\n  expect(fs.existsSync(getFile('.test.css'))).toBeTruthy();\n  expect(fs.existsSync(getFile('.uncritical.css'))).toBeTruthy();\n  expect(fs.existsSync(getFile('.test.html'))).toBeTruthy();\n  const html = readAndRemove(getFile('.test.html'));\n  const css = readAndRemove(getFile('.test.css'));\n  const uncritical = readAndRemove(getFile('.uncritical.css'));\n  expect(uncritical).toBe(data.uncritical);\n  expect(html).toBe(data.html);\n  expect(css).toBe(data.css);\n\n  try {\n    await unlinkAsync(base);\n  } catch {// file not  there\n  }\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Write all targets respecting absolute paths","suites":[],"updatePoint":{"line":121,"column":49,"index":4043},"line":121,"code":"test('Write all targets respecting absolute paths', async () => {\n  const base = temporaryDirectory();\n  const fileBase = temporaryDirectory();\n\n  const getFile = f => path.join(fileBase, f);\n\n  const data = await generate({\n    base,\n    src: path.join(__dirname, 'fixtures/generate-default.html'),\n    target: {\n      html: getFile('.test.html'),\n      css: getFile('.test.css'),\n      uncritical: getFile('.uncritical.css')\n    }\n  });\n  expect(data).toHaveProperty('css');\n  expect(data).toHaveProperty('html');\n  expect(data).toHaveProperty('uncritical');\n  expect(fs.existsSync(getFile('.test.css'))).toBeTruthy();\n  expect(fs.existsSync(getFile('.uncritical.css'))).toBeTruthy();\n  expect(fs.existsSync(getFile('.test.html'))).toBeTruthy();\n  const html = readAndRemove(getFile('.test.html'));\n  const css = readAndRemove(getFile('.test.css'));\n  const uncritical = readAndRemove(getFile('.uncritical.css'));\n  expect(uncritical).toBe(data.uncritical);\n  expect(html).toBe(data.html);\n  expect(css).toBe(data.css);\n\n  try {\n    await unlinkAsync(base);\n    await unlinkAsync(fileBase);\n  } catch {// file already deleted\n  }\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Reject with ConfigError on invalid config","suites":[],"updatePoint":{"line":155,"column":47,"index":5177},"line":155,"code":"test('Reject with ConfigError on invalid config', () => {\n  expect(generate({})).rejects.toThrow(ConfigError);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Throws FileNotFound error on missing file","suites":[],"updatePoint":{"line":158,"column":47,"index":5292},"line":158,"code":"test('Throws FileNotFound error on missing file', () => {\n  expect(generate({\n    src: 'not-found.html'\n  })).rejects.toThrow(FileNotFoundError);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Throws NoCssError error on empty styles in strict mode","suites":[],"updatePoint":{"line":163,"column":60,"index":5455},"line":163,"code":"test('Throws NoCssError error on empty styles in strict mode', () => {\n  expect(generate({\n    src: path.join(__dirname, 'fixtures/error.html'),\n    strict: true\n  })).rejects.toThrow(NoCssError);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Emit error on streamed file","suites":[],"updatePoint":{"line":169,"column":33,"index":5629},"line":169,"code":"test('Emit error on streamed file', done => {\n  const critical = stream({\n    base: path.join(__dirname, 'fixtures')\n  });\n  const fakeFilePath = path.join(__dirname, 'fixtures', 'generate-default.html');\n  expect.hasAssertions();\n  fs.createReadStream(fakeFilePath).pipe(vinylStream()).pipe(critical).on('data', () => done.fail(new Error('Should not emit data'))).on('error', ({\n    message\n  }) => {\n    expect(message).toBe('Streaming not supported');\n    done();\n  });\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Throws PluginError on critical.stream error","suites":[],"updatePoint":{"line":182,"column":49,"index":6122},"line":182,"code":"test('Throws PluginError on critical.stream error', done => {\n  const critical = stream({\n    invalidOption: true\n  });\n  getVinyl('error.html').pipe(critical).on('data', () => done.fail(new Error('Should not emit data'))).on('error', error => {\n    expect(error).toBeInstanceOf(PluginError);\n    expect(error.plugin).toBe('critical');\n    done();\n  });\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Support vinyl buffer streams and return critical css vinyl","suites":[],"updatePoint":{"line":192,"column":64,"index":6495},"line":192,"code":"test('Support vinyl buffer streams and return critical css vinyl', done => {\n  const critical = stream({\n    base: path.join(__dirname, 'fixtures')\n  });\n  getVinyl('generate-default.html').pipe(critical).on('data', data => {\n    expect(data).toBeTruthy();\n    expect(data).toBeInstanceOf(Vinyl);\n    expect(data.path).toMatch(/\\.css/);\n    done();\n  }).on('error', () => {\n    done.fail(new Error('Should not emit error'));\n    done();\n  });\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Support vinyl buffer streams and returns html vinyl with inlined css","suites":[],"updatePoint":{"line":206,"column":74,"index":6952},"line":206,"code":"test('Support vinyl buffer streams and returns html vinyl with inlined css', done => {\n  const critical = stream({\n    base: path.join(__dirname, 'fixtures'),\n    inline: true\n  });\n  getVinyl('generate-default.html').pipe(critical).on('data', data => {\n    expect(data).toBeTruthy();\n    expect(data).toBeInstanceOf(Vinyl);\n    expect(data.path).toMatch(/\\.html/);\n    expect(data.contents.toString()).toMatch(/<style>/);\n    done();\n  }).on('error', () => {\n    done.fail(new Error('Should not emit error'));\n    done();\n  });\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Return empty vinyl on empty vinyl","suites":[],"updatePoint":{"line":222,"column":39,"index":7450},"line":222,"code":"test('Return empty vinyl on empty vinyl', done => {\n  const critical = stream({\n    base: path.join(__dirname, 'fixtures')\n  });\n  getVinyl(false).pipe(critical).on('data', data => {\n    expect(data).toBeTruthy();\n    expect(data).toBeInstanceOf(Vinyl);\n    expect(data.isNull).toBeTruthy();\n    done();\n  }).on('error', () => {\n    done.fail(new Error('Should not emit error'));\n    done();\n  });\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"#192 - include option - stream","suites":[],"updatePoint":{"line":236,"column":36,"index":7849},"line":236,"code":"test('#192 - include option - stream', done => {\n  const critical = stream({\n    base: path.join(__dirname, 'fixtures'),\n    css: ['fixtures/styles/issue-192.css'],\n    extract: false,\n    ignore: ['@font-face', /url\\(/],\n    dimensions: [{\n      width: 320,\n      height: 480\n    }, {\n      width: 768,\n      height: 1024\n    }, {\n      width: 1280,\n      height: 960\n    }, {\n      width: 1920,\n      height: 1080\n    }],\n    include: [/^\\.main-navigation.*$/, /^\\.hero-deck.*$/, /^\\.deck.*$/, /^\\.search-box.*$/],\n    width: 1300,\n    height: 900\n  });\n  const expected = read('expected/issue-192.css');\n  getVinyl('issue-192.html').pipe(critical).pipe(streamAssert.length(1)).pipe(streamAssert.nth(0, d => {\n    expect(path.extname(d.path)).toBe('.css');\n    expect(nn(d.contents.toString('utf8'))).toBe(expected);\n  })).pipe(streamAssert.end(done));\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"should generate multi-dimension critical-path CSS in stream mode","suites":[],"updatePoint":{"line":265,"column":70,"index":8742},"line":265,"code":"test('should generate multi-dimension critical-path CSS in stream mode', done => {\n  const expected = read('expected/generate-adaptive.css', 'utf8');\n  const critical = stream({\n    base: 'fixtures/',\n    dimensions: [{\n      width: 100,\n      height: 70\n    }, {\n      width: 1000,\n      height: 70\n    }]\n  });\n  getVinyl('generate-adaptive.html').pipe(critical).pipe(streamAssert.length(1)).pipe(streamAssert.nth(0, d => {\n    expect(path.extname(d.path)).toBe('.css');\n    expect(nn(d.contents.toString('utf8'))).toBe(expected);\n  })).pipe(streamAssert.end(done));\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"issue 341","suites":[],"updatePoint":{"line":282,"column":15,"index":9260},"line":282,"code":"test('issue 341', async () => {\n  const expected = [];\n  const sources = [read('fixtures/generate-adaptive.html', 'utf8'), read('fixtures/generate-default.html', 'utf8'), read('fixtures/generate-image.html', 'utf8')];\n  const options = {\n    base: path.join(__dirname, 'fixtures'),\n    extract: false,\n    inline: false,\n    dimensions: [{\n      width: 100,\n      height: 70\n    }, {\n      width: 1000,\n      height: 70\n    }]\n  }; // first await all results regularly\n\n  expected[0] = await generate({ ...options,\n    html: sources[0]\n  });\n  expected[1] = await generate({ ...options,\n    html: sources[1]\n  });\n  expected[2] = await generate({ ...options,\n    html: sources[2]\n  }); // limit concurrency and run all processes in parallel\n\n  const promises = sources.map(html => generate({ ...options,\n    html,\n    concurrency: 2\n  }));\n  const results = await Promise.all(promises);\n  expect(results[0].css).toBe(expected[0].css);\n  expect(results[1].css).toBe(expected[1].css);\n  expect(results[2].css).toBe(expected[2].css);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Replace stylesheet on extract-target","suites":[],"updatePoint":{"line":317,"column":42,"index":10322},"line":317,"code":"test('Replace stylesheet on extract-target', async () => {\n  const target = path.join(__dirname, 'fixtures/styles/uncritical.css');\n  const result = await generate({\n    html: read('fixtures/generate-adaptive.html'),\n    base: path.join(__dirname, 'fixtures'),\n    target: {\n      uncritical: target\n    },\n    extract: true,\n    inline: true\n  });\n  const uncritical = readAndRemove(target);\n  expect(result.html).toMatch('\"/styles/uncritical.css\"');\n  expect(uncritical).toBe(result.uncritical);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Remove stylesheet on empty uncritical css","suites":[],"updatePoint":{"line":332,"column":47,"index":10829},"line":332,"code":"test('Remove stylesheet on empty uncritical css', async () => {\n  const result = await generate({\n    html: read('fixtures/issue-304.html'),\n    base: path.join(__dirname, 'fixtures'),\n    extract: true,\n    inline: true\n  });\n  expect(result.html).not.toMatch('<link');\n  expect(result.uncritical).toBe(result.uncritical);\n});","file":"index.test.js","skipped":false,"dir":"test"},{"name":"Use async cb result for inline.replaceStylesheets","suites":[],"updatePoint":{"line":342,"column":55,"index":11165},"line":342,"code":"test('Use async cb result for inline.replaceStylesheets', async () => {\n  const cb = () => Promise.resolve(['ab.css']);\n\n  const result = await generate({\n    html: read('fixtures/issue-304.html'),\n    base: path.join(__dirname, 'fixtures'),\n    extract: true,\n    inline: {\n      replaceStylesheets: cb\n    }\n  });\n  expect(result.html).toMatch('\"ab.css\"');\n  expect(result.uncritical).toBe(result.uncritical);\n});","file":"index.test.js","skipped":false,"dir":"test"}]}