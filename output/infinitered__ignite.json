{"repo":"infinitered/ignite","url":"https://github.com/infinitered/ignite","branch":"master","configs":[{"package":"hello-world","lang":"ts","dir":"boilerplate/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"ignite-cli","lang":"ts","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"There are no missing keys","suites":["i18n"],"updatePoint":{"line":44,"column":33},"line":44,"code":"  test(\"There are no missing keys\", (done) => {\n    // Actual command output:\n    // grep \"Tx=\\\"\\S*\\\"\\|tx=\\\"\\S*\\\"\\|translate(\\\"\\S*\\\"\" -ohr './app' | grep -o \"\\\".*\\\"\"\n    const command = `grep \"Tx=\\\\\"\\\\S*\\\\\"\\\\|tx=\\\\\"\\\\S*\\\\\"\\\\|translate(\\\\\"\\\\S*\\\\\"\" -ohr './app' | grep -o \"\\\\\".*\\\\\"\"`\n    exec(command, (_, stdout) => {\n      const allTranslationsDefined = iterate(en, \"\", [])\n      const allTranslationsUsed = stdout.replace(/\"/g, \"\").split(\"\\n\")\n      allTranslationsUsed.splice(-1, 1)\n\n      for (let i = 0; i < allTranslationsUsed.length; i += 1) {\n        if (!EXCEPTIONS.includes(allTranslationsUsed[i])) {\n          // You can add keys to EXCEPTIONS (above) if you don't want them included in the test\n          expect(allTranslationsDefined).toContainEqual(allTranslationsUsed[i])\n        }\n      }\n      done()\n    })\n  }, 240000)","file":"i18n.test.ts","skipped":false,"dir":"boilerplate/test"},{"name":"ignite help","suites":[],"updatePoint":{"line":3,"column":17},"line":3,"code":"test(`ignite help`, async () => {\n  const result = await runIgnite(`help`)\n\n  expect(result).toContain(\"Ignite\")\n  expect(result).toContain(\"new\")\n  expect(result).toContain(\"generate\")\n  expect(result).toContain(\"doctor\")\n  expect(result).toContain(`community.infinite.red`)\n})","file":"ignite-help.test.ts","skipped":false,"dir":"test"},{"name":"ignite new (no name)","suites":["Checking for ignite. ðŸª”"],"updatePoint":{"line":22,"column":28},"line":22,"code":"  test(`ignite new (no name)`, async () => {\n    const result = await runError(`new`)\n    expect((result as any).stdout).toContain(`Project name is required`)\n  })","file":"ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"ignite new (invalid bundle ID)","suites":["Checking for ignite. ðŸª”"],"updatePoint":{"line":27,"column":38},"line":27,"code":"  test(`ignite new (invalid bundle ID)`, async () => {\n    const result = await runError(`new BadBundleID --bundle thisisbad`)\n    expect((result as any).stdout).toContain(`Invalid Bundle Identifier.`)\n  })","file":"ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"ignite new ","suites":["Igniting new app! ðŸ”¥\nGo get a coffee or something. This is gonna take a while."],"updatePoint":{"line":34,"column":30},"line":34,"code":"  test(`ignite new ${APP_NAME}`, async () => {\n    const result = await runIgnite(`new ${APP_NAME}`)\n\n    expect(result).toContain(`Using ignite-cli`)\n    expect(result).toContain(`Ignite CLI ignited ${APP_NAME}`)\n\n    // now let's examine the spun-up app\n    process.chdir(APP_NAME)\n\n    const dirs = filesystem.list(`.`)\n    expect(dirs).toContain(\"ios\")\n    expect(dirs).toContain(\"android\")\n    expect(dirs).toContain(\"app\")\n\n    // check the android bundle id has changed\n    const androidPackageName = APP_NAME.toLowerCase()\n    const mainAppJava = filesystem.read(\n      `./android/app/src/main/java/com/${androidPackageName}/MainApplication.java`,\n    )\n    expect(mainAppJava).toContain(`package com.${androidPackageName};`)\n    const mainActivityJava = filesystem.read(\n      `./android/app/src/main/java/com/${androidPackageName}/MainActivity.java`,\n    )\n    expect(mainActivityJava).toContain(`package com.${androidPackageName};`)\n\n    await testSpunUpApp()\n\n    // we're done!\n    process.chdir(\"..\")\n  })","file":"ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"ignite new  --expo","suites":["Igniting new expo app! ðŸ”¥\nRemember how long that last one took? We're gonna do it again."],"updatePoint":{"line":67,"column":42},"line":67,"code":"  test(`ignite new ${EXPO_APP_NAME} --expo`, async () => {\n    const result = await runIgnite(`new ${EXPO_APP_NAME} --expo`)\n\n    expect(result).toContain(`Using expo-cli`)\n    expect(result).toContain(`Ignite CLI ignited ${EXPO_APP_NAME}`)\n\n    // now let's examine the spun-up app\n    process.chdir(EXPO_APP_NAME)\n\n    const dirs = filesystem.list(`.`)\n    expect(dirs).not.toContain(\"ios\")\n    expect(dirs).not.toContain(\"android\")\n    expect(dirs).toContain(\"app\")\n\n    await testSpunUpApp()\n\n    // we're done!\n    process.chdir(\"..\")\n  })","file":"ignite-new.test.ts","skipped":false,"dir":"test"}]}