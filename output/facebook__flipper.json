{
    "repo": "facebook/flipper",
    "url": "https://github.com/facebook/flipper",
    "branch": "main",
    "configs": [
        {
            "package": "flipper-pkg-lib",
            "lang": "ts",
            "dir": "desktop/pkg-lib/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-pkg",
            "lang": "ts",
            "dir": "desktop/pkg/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-lib",
            "lang": "ts",
            "dir": "desktop/plugin-lib/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-crash-reporter",
            "lang": "js",
            "dir": "desktop/plugins/public/crash_reporter/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-databases",
            "lang": "js",
            "dir": "desktop/plugins/public/databases/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-inspector",
            "lang": "js",
            "dir": "desktop/plugins/public/layout/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-device-logs",
            "lang": "js",
            "dir": "desktop/plugins/public/logs/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-navigation",
            "lang": "js",
            "dir": "desktop/plugins/public/navigation/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-network",
            "lang": "js",
            "dir": "desktop/plugins/public/network/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "flipper-plugin-sea-mammals",
            "lang": "js",
            "dir": "desktop/plugins/public/seamammals/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "js-flipper",
            "lang": "ts",
            "dir": "js/js-flipper/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "ReactNativeFlipperExample",
            "lang": "js",
            "dir": "react-native/ReactNativeFlipperExample/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "getWatchFolders correctly resolves symlinked packages",
            "suites": [
                "getWatchFolders"
            ],
            "updatePoint": {
                "line": 30,
                "column": 61
            },
            "line": 30,
            "code": "  test('getWatchFolders correctly resolves symlinked packages', async () => {\n    const rootDir =\n      process.platform === 'win32' ? 'C:\\\\test\\\\root' : '/test/root';\n    const files = {\n      [rootDir]: {\n        node_modules: {\n          installed_module_1: {},\n          local_module_1: mockfs.symlink({path: '../local_module_1'}),\n          local_module_2: mockfs.symlink({path: '../local_module_2'}),\n          plugin_module_1: mockfs.symlink({path: '../plugins/plugin_module_1'}),\n          plugin_module_2: mockfs.symlink({path: '../plugins/plugin_module_2'}),\n          fb_plugin_module_1: mockfs.symlink({\n            path: '../plugins/fb/fb_plugin_module_1',\n          }),\n          fb_plugin_module_2: mockfs.symlink({\n            path: '../plugins/fb/fb_plugin_module_2',\n          }),\n          '@scoped': {\n            local_module_3: mockfs.symlink({\n              path: '../../local_module_3',\n            }),\n          },\n        },\n        local_module_1: {\n          'package.json': '{\"dependencies\": {\"installed_module_1\": \"1.0.0\"}}',\n        },\n        local_module_2: {\n          'package.json':\n            '{\"dependencies\": {\"fb_plugin_module_1\": \"1.0.0\", \"plugin_module_1\": \"1.0.0\"}}',\n        },\n        local_module_3: {\n          'package.json': '{\"dependencies\": {\"installed_module_1\": \"1.0.0\"}}',\n        },\n        plugins: {\n          plugin_module_1: {\n            'package.json':\n              '{\"dependencies\": {\"local_module_2\": \"1.0.0\", \"@scoped/local_module_3\": \"1.0.0\"}}',\n          },\n          plugin_module_2: {\n            'package.json': '{\"dependencies\": {\"fb_plugin_module_1\": \"1.0.0\"}}',\n          },\n          fb: {\n            node_modules: {\n              installed_module_2: {},\n            },\n            fb_plugin_module_1: {\n              'package.json': '{\"dependencies\": {\"plugin_module_2\": \"1.0.0\"}}',\n            },\n            fb_plugin_module_2: {\n              'package.json': '{\"dependencies\": {}}',\n            },\n          },\n        },\n      },\n    };\n    mockfs(files);\n    const readJsonMock = async (file: string) => {\n      if (!file.startsWith(rootDir)) {\n        throw new Error('File not found: ' + file);\n      }\n      const parts = file.substring(rootDir.length + 1).split(path.sep);\n      let cur = <any>files[rootDir];\n      for (const part of parts) {\n        cur = cur[part];\n        if (!cur) {\n          throw new Error(`File part \"${part}\" not found: ${file}`);\n        }\n      }\n      return JSON.parse(cur);\n    };\n    const readReadJson = fs.readJson;\n    try {\n      fs.readJson = <any>readJsonMock;\n      const resolvedFolders = await getWatchFolders(\n        path.join(rootDir, 'local_module_2'),\n      );\n      expect(resolvedFolders.map(normalizePath)).toMatchInlineSnapshot(`\n        Array [\n          \"/test/root/local_module_2\",\n          \"/test/root/node_modules\",\n          \"/test/root/plugins/fb/fb_plugin_module_1\",\n          \"/test/root/plugins/fb/node_modules\",\n          \"/test/root/plugins/plugin_module_1\",\n          \"/test/root/plugins/plugin_module_2\",\n          \"/test/root/local_module_3\",\n        ]\n      `);\n    } finally {\n      fs.readJson = readReadJson;\n    }\n  });",
            "file": "getWatchFolders.node.ts",
            "skipped": false,
            "dir": "desktop/pkg-lib/src/__tests__"
        },
        {
            "name": "tests are working",
            "suites": [],
            "updatePoint": {
                "line": 10,
                "column": 23
            },
            "line": 10,
            "code": "test('tests are working', () => {\n  expect(true).toBeTruthy();\n});",
            "file": "index.node.ts",
            "skipped": false,
            "dir": "desktop/pkg-lib/src/__tests__"
        },
        {
            "name": "It generates the correct files for client plugin",
            "suites": [],
            "updatePoint": {
                "line": 40,
                "column": 54
            },
            "line": 40,
            "code": "test('It generates the correct files for client plugin', async () => {\n  await initTemplate(\n    'my weird Package %name. etc',\n    'Nice title',\n    'client',\n    undefined,\n    '/dev/null',\n  );\n  expect(files).toMatchInlineSnapshot(`\n    Object {\n      \"/dev/null/.gitignore\": \"node_modules\n    dist/\n    \",\n      \"/dev/null/babel.config.js\": \"module.exports = {\n        presets: [\n            '@babel/preset-typescript', \n            '@babel/preset-react', \n            ['@babel/preset-env', {targets: {node: 'current'}}]\n        ],\n    };\n    \",\n      \"/dev/null/package.json\": \"{\n      \\\\\"$schema\\\\\": \\\\\"https://fbflipper.com/schemas/plugin-package/v2.json\\\\\",\n      \\\\\"name\\\\\": \\\\\"flipper-plugin-my-weird-package-name-etc\\\\\",\n      \\\\\"id\\\\\": \\\\\"my weird Package %name. etc\\\\\",\n      \\\\\"version\\\\\": \\\\\"1.0.0\\\\\",\n      \\\\\"pluginType\\\\\": \\\\\"client\\\\\",\n      \\\\\"main\\\\\": \\\\\"dist/bundle.js\\\\\",\n      \\\\\"flipperBundlerEntry\\\\\": \\\\\"src/index.tsx\\\\\",\n      \\\\\"license\\\\\": \\\\\"MIT\\\\\",\n      \\\\\"keywords\\\\\": [\n        \\\\\"flipper-plugin\\\\\"\n      ],\n      \\\\\"icon\\\\\": \\\\\"apps\\\\\",\n      \\\\\"title\\\\\": \\\\\"Nice title\\\\\",\n      \\\\\"scripts\\\\\": {\n        \\\\\"lint\\\\\": \\\\\"flipper-pkg lint\\\\\",\n        \\\\\"prepack\\\\\": \\\\\"flipper-pkg lint && flipper-pkg bundle\\\\\",\n        \\\\\"build\\\\\": \\\\\"flipper-pkg bundle\\\\\",\n        \\\\\"watch\\\\\": \\\\\"flipper-pkg bundle --watch\\\\\",\n        \\\\\"test\\\\\": \\\\\"jest --no-watchman\\\\\"\n      },\n      \\\\\"peerDependencies\\\\\": {\n        \\\\\"@emotion/styled\\\\\": \\\\\"latest\\\\\",\n        \\\\\"flipper-plugin\\\\\": \\\\\"^0.0.0\\\\\",\n        \\\\\"antd\\\\\": \\\\\"latest\\\\\",\n        \\\\\"react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"react-dom\\\\\": \\\\\"latest\\\\\"\n      },\n      \\\\\"devDependencies\\\\\": {\n        \\\\\"@babel/preset-react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@babel/preset-typescript\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@emotion/styled\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@testing-library/react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@types/jest\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@types/react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@types/react-dom\\\\\": \\\\\"latest\\\\\",\n        \\\\\"antd\\\\\": \\\\\"latest\\\\\",\n        \\\\\"flipper-plugin\\\\\": \\\\\"latest\\\\\",\n        \\\\\"flipper-pkg\\\\\": \\\\\"latest\\\\\",\n        \\\\\"jest\\\\\": \\\\\"latest\\\\\",\n        \\\\\"jest-mock-console\\\\\": \\\\\"latest\\\\\",\n        \\\\\"react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"react-dom\\\\\": \\\\\"latest\\\\\",\n        \\\\\"typescript\\\\\": \\\\\"latest\\\\\"\n      },\n      \\\\\"jest\\\\\": {\n        \\\\\"testEnvironment\\\\\": \\\\\"jsdom\\\\\"\n      }\n    }\n    \",\n      \"/dev/null/src/__tests__/test.spec.tsx\": \"import {TestUtils} from 'flipper-plugin';\n    import * as Plugin from '..';\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    // API: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    test('It can store data', () => {\n      const {instance, sendEvent} = TestUtils.startPlugin(Plugin);\n\n      expect(instance.data.get()).toEqual({});\n\n      sendEvent('newData', {id: 'firstID'});\n      sendEvent('newData', {id: 'secondID'});\n\n      expect(instance.data.get()).toMatchInlineSnapshot(\\`\n        Object {\n          \\\\\"firstID\\\\\": Object {\n            \\\\\"id\\\\\": \\\\\"firstID\\\\\",\n          },\n          \\\\\"secondID\\\\\": Object {\n            \\\\\"id\\\\\": \\\\\"secondID\\\\\",\n          },\n        }\n      \\`);\n    });\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    // API: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    test('It can render data', async () => {\n      const {instance, renderer, sendEvent} = TestUtils.renderPlugin(Plugin);\n\n      expect(instance.data.get()).toEqual({});\n\n      sendEvent('newData', {id: 'firstID'});\n      sendEvent('newData', {id: 'secondID'});\n\n      expect(await renderer.findByTestId('firstID')).not.toBeNull();\n      expect(await renderer.findByTestId('secondID')).toMatchInlineSnapshot(\\`\n        <pre\n          data-testid=\\\\\"secondID\\\\\"\n        >\n          {\\\\\"id\\\\\":\\\\\"secondID\\\\\"}\n        </pre>\n      \\`);\n    });\n    \",\n      \"/dev/null/src/index.tsx\": \"import React from 'react';\n    import {PluginClient, usePlugin, createState, useValue, Layout} from 'flipper-plugin';\n\n    type Data = {\n      id: string;\n      message?: string;\n    };\n\n    type Events = {\n      newData: Data;\n    };\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#creating-a-first-plugin\n    // API: https://fbflipper.com/docs/extending/flipper-plugin#pluginclient\n    export function plugin(client: PluginClient<Events, {}>) {\n      const data = createState<Record<string, Data>>({}, {persist: 'data'});\n\n      client.onMessage('newData', (newData) => {\n        data.update((draft) => {\n          draft[newData.id] = newData;\n        });\n      });\n\n      client.addMenuEntry({\n        action: 'clear',\n        handler: async () => {\n          data.set({});\n        },\n      });\n\n      return {data};\n    }\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#building-a-user-interface-for-the-plugin\n    // API: https://fbflipper.com/docs/extending/flipper-plugin#react-hooks\n    export function Component() {\n      const instance = usePlugin(plugin);\n      const data = useValue(instance.data);\n\n      return (\n        <Layout.ScrollContainer>\n          {Object.entries(data).map(([id, d]) => (\n            <pre key={id} data-testid={id}>\n              {JSON.stringify(d)}\n            </pre>\n          ))}\n        </Layout.ScrollContainer>\n      );\n    }\n    \",\n      \"/dev/null/tsconfig.json\": \"{\n      \\\\\"compilerOptions\\\\\": {\n        \\\\\"target\\\\\": \\\\\"ES2017\\\\\",\n        \\\\\"module\\\\\": \\\\\"ES6\\\\\",\n        \\\\\"jsx\\\\\": \\\\\"react\\\\\",\n        \\\\\"sourceMap\\\\\": true,\n        \\\\\"noEmit\\\\\": true,\n        \\\\\"strict\\\\\": true,\n        \\\\\"moduleResolution\\\\\": \\\\\"node\\\\\",\n        \\\\\"esModuleInterop\\\\\": true,\n        \\\\\"forceConsistentCasingInFileNames\\\\\": true\n      },\n      \\\\\"files\\\\\": [\\\\\"src/index.tsx\\\\\"]\n    }\n    \",\n    }\n  `);\n});",
            "file": "runInit.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "It generates the correct files for device plugin",
            "suites": [],
            "updatePoint": {
                "line": 225,
                "column": 54
            },
            "line": 225,
            "code": "test('It generates the correct files for device plugin', async () => {\n  await initTemplate(\n    'my weird Package %name. etc',\n    'Nice title',\n    'device',\n    ['iOS', 'Android'],\n    '/dev/null',\n  );\n  expect(files).toMatchInlineSnapshot(`\n    Object {\n      \"/dev/null/.gitignore\": \"node_modules\n    dist/\n    \",\n      \"/dev/null/babel.config.js\": \"module.exports = {\n        presets: [\n            '@babel/preset-typescript', \n            '@babel/preset-react', \n            ['@babel/preset-env', {targets: {node: 'current'}}]\n        ],\n    };\n    \",\n      \"/dev/null/package.json\": \"{\n      \\\\\"$schema\\\\\": \\\\\"https://fbflipper.com/schemas/plugin-package/v2.json\\\\\",\n      \\\\\"name\\\\\": \\\\\"flipper-plugin-my-weird-package-name-etc\\\\\",\n      \\\\\"id\\\\\": \\\\\"my weird Package %name. etc\\\\\",\n      \\\\\"version\\\\\": \\\\\"1.0.0\\\\\",\n      \\\\\"pluginType\\\\\": \\\\\"device\\\\\",\n      \\\\\"supportedDevices\\\\\": [{\\\\\"os\\\\\":\\\\\"iOS\\\\\"},{\\\\\"os\\\\\":\\\\\"Android\\\\\"}],\n      \\\\\"main\\\\\": \\\\\"dist/bundle.js\\\\\",\n      \\\\\"flipperBundlerEntry\\\\\": \\\\\"src/index.tsx\\\\\",\n      \\\\\"license\\\\\": \\\\\"MIT\\\\\",\n      \\\\\"keywords\\\\\": [\n        \\\\\"flipper-plugin\\\\\"\n      ],\n      \\\\\"icon\\\\\": \\\\\"apps\\\\\",\n      \\\\\"title\\\\\": \\\\\"Nice title\\\\\",\n      \\\\\"scripts\\\\\": {\n        \\\\\"lint\\\\\": \\\\\"flipper-pkg lint\\\\\",\n        \\\\\"prepack\\\\\": \\\\\"flipper-pkg lint && flipper-pkg bundle\\\\\",\n        \\\\\"build\\\\\": \\\\\"flipper-pkg bundle\\\\\",\n        \\\\\"watch\\\\\": \\\\\"flipper-pkg bundle --watch\\\\\",\n        \\\\\"test\\\\\": \\\\\"jest --no-watchman\\\\\"\n      },\n      \\\\\"peerDependencies\\\\\": {\n        \\\\\"flipper-plugin\\\\\": \\\\\"^0.0.0\\\\\",\n        \\\\\"antd\\\\\": \\\\\"latest\\\\\"\n      },\n      \\\\\"devDependencies\\\\\": {\n        \\\\\"@babel/preset-react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@babel/preset-typescript\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@testing-library/react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@types/jest\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@types/react\\\\\": \\\\\"latest\\\\\",\n        \\\\\"@types/react-dom\\\\\": \\\\\"latest\\\\\",\n        \\\\\"antd\\\\\": \\\\\"latest\\\\\",\n        \\\\\"flipper-plugin\\\\\": \\\\\"latest\\\\\",\n        \\\\\"flipper-pkg\\\\\": \\\\\"latest\\\\\",\n        \\\\\"jest\\\\\": \\\\\"latest\\\\\",\n        \\\\\"typescript\\\\\": \\\\\"latest\\\\\"\n      }\n    }\n    \",\n      \"/dev/null/src/__tests__/test.spec.tsx\": \"import {TestUtils} from 'flipper-plugin';\n    import * as Plugin from '..';\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    // API: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    test('It can store data', () => {\n      const {instance, sendLogEntry} = TestUtils.startDevicePlugin(Plugin);\n\n      expect(instance.data.get()).toEqual([]);\n\n      sendLogEntry({\n        date: new Date(1611854112859),\n        message: 'test1',\n        pid: 0,\n        tag: 'test',\n        tid: 1,\n        type: 'error',\n        app: 'X',\n      });\n      sendLogEntry({\n        date: new Date(1611854117859),\n        message: 'test2',\n        pid: 2,\n        tag: 'test',\n        tid: 3,\n        type: 'warn',\n        app: 'Y',\n      });\n\n      expect(instance.data.get()).toMatchInlineSnapshot(\\`\n        Array [\n          \\\\\"test1\\\\\",\n          \\\\\"test2\\\\\",\n        ]\n      \\`);\n    });\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    // API: https://fbflipper.com/docs/tutorial/js-custom#testing-plugin-logic\n    test('It can render data', async () => {\n      const {instance, renderer, sendLogEntry} = TestUtils.renderDevicePlugin(\n        Plugin,\n      );\n\n      expect(instance.data.get()).toEqual([]);\n\n      sendLogEntry({\n        date: new Date(1611854112859),\n        message: 'test1',\n        pid: 0,\n        tag: 'test',\n        tid: 1,\n        type: 'error',\n        app: 'X',\n      });\n      sendLogEntry({\n        date: new Date(1611854117859),\n        message: 'test2',\n        pid: 2,\n        tag: 'test',\n        tid: 3,\n        type: 'warn',\n        app: 'Y',\n      });\n\n      expect(await renderer.findByTestId('0')).not.toBeNull();\n      expect(await renderer.findByTestId('1')).toMatchInlineSnapshot();\n    });\n    \",\n      \"/dev/null/src/index.tsx\": \"import React from 'react';\n    import {\n      DevicePluginClient,\n      usePlugin,\n      createState,\n      useValue,\n      Layout,\n    } from 'flipper-plugin';\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#creating-a-first-plugin\n    // API: https://fbflipper.com/docs/extending/flipper-plugin#pluginclient\n    export function devicePlugin(client: DevicePluginClient) {\n      const data = createState<string[]>([]);\n\n      client.device.onLogEntry((entry) => {\n        data.update((draft) => {\n          draft.push(entry.message);\n        });\n      });\n\n      client.addMenuEntry({\n        action: 'clear',\n        handler: async () => {\n          data.set([]);\n        },\n      });\n\n      return {data};\n    }\n\n    // Read more: https://fbflipper.com/docs/tutorial/js-custom#building-a-user-interface-for-the-plugin\n    // API: https://fbflipper.com/docs/extending/flipper-plugin#react-hooks\n    export function Component() {\n      const instance = usePlugin(devicePlugin);\n      const data = useValue(instance.data);\n\n      return (\n        <Layout.ScrollContainer>\n          {Object.entries(data).map(([id, d]) => (\n            <pre key={id} data-testid={id}>\n              {JSON.stringify(d)}\n            </pre>\n          ))}\n        </Layout.ScrollContainer>\n      );\n    }\n    \",\n      \"/dev/null/tsconfig.json\": \"{\n      \\\\\"compilerOptions\\\\\": {\n        \\\\\"target\\\\\": \\\\\"ES2017\\\\\",\n        \\\\\"module\\\\\": \\\\\"ES6\\\\\",\n        \\\\\"jsx\\\\\": \\\\\"react\\\\\",\n        \\\\\"sourceMap\\\\\": true,\n        \\\\\"noEmit\\\\\": true,\n        \\\\\"strict\\\\\": true,\n        \\\\\"moduleResolution\\\\\": \\\\\"node\\\\\",\n        \\\\\"esModuleInterop\\\\\": true,\n        \\\\\"forceConsistentCasingInFileNames\\\\\": true\n      },\n      \\\\\"files\\\\\": [\\\\\"src/index.tsx\\\\\"]\n    }\n    \",\n    }\n  `);\n});",
            "file": "runInit.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "valid package json",
            "suites": [],
            "updatePoint": {
                "line": 45,
                "column": 24
            },
            "line": 45,
            "code": "test('valid package json', async () => {\n  const json = JSON.stringify(validPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toBe(null);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "valid scoped package json",
            "suites": [],
            "updatePoint": {
                "line": 52,
                "column": 31
            },
            "line": 52,
            "code": "test('valid scoped package json', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  testPackageJson.name = '@test/flipper-plugin-package';\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toBe(null);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "$schema field is required",
            "suites": [],
            "updatePoint": {
                "line": 61,
                "column": 31
            },
            "line": 61,
            "code": "test('$schema field is required', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  // @ts-ignore cannot delete non-optional fields\n  delete testPackageJson.$schema;\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      \". should have required property \\\\\"$schema\\\\\" pointing to a supported schema URI, e.g.:\n    {\n     \\\\\"$schema\\\\\": \\\\\"https://fbflipper.com/schemas/plugin-package/v2.json\\\\\",\n     \\\\\"name\\\\\": \\\\\"flipper-plugin-example\\\\\",\n     ...\n    }\",\n    ]\n  `);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "supported schema is required",
            "suites": [],
            "updatePoint": {
                "line": 80,
                "column": 34
            },
            "line": 80,
            "code": "test('supported schema is required', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  testPackageJson.$schema =\n    'https://fbflipper.com/schemas/plugin-package/v1.json';\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      \".$schema should point to a supported schema. Currently supported schemas:\n    - https://fbflipper.com/schemas/plugin-package/v2.json\",\n    ]\n  `);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "name is required",
            "suites": [],
            "updatePoint": {
                "line": 95,
                "column": 22
            },
            "line": 95,
            "code": "test('name is required', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  // @ts-ignore cannot delete non-optional fields\n  delete testPackageJson.name;\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      \". should have required property 'name'\",\n    ]\n  `);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "name must start with \"flipper-plugin-\"",
            "suites": [],
            "updatePoint": {
                "line": 109,
                "column": 44
            },
            "line": 109,
            "code": "test('name must start with \"flipper-plugin-\"', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  testPackageJson.name = 'test-plugin';\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      \"/name should start with \\\\\"flipper-plugin-\\\\\", e.g. \\\\\"flipper-plugin-example\\\\\"\",\n    ]\n  `);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "keywords must contain \"flipper-plugin\"",
            "suites": [],
            "updatePoint": {
                "line": 122,
                "column": 44
            },
            "line": 122,
            "code": "test('keywords must contain \"flipper-plugin\"', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  testPackageJson.keywords = ['flipper', 'network'];\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      \"/keywords should contain keyword \\\\\"flipper-plugin\\\\\"\",\n    ]\n  `);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "flippeBundlerEntry must point to an existing file",
            "suites": [],
            "updatePoint": {
                "line": 135,
                "column": 55
            },
            "line": 135,
            "code": "test('flippeBundlerEntry must point to an existing file', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  testPackageJson.flipperBundlerEntry = 'unexisting/file';\n  fs.pathExistsSync = jest\n    .fn()\n    .mockImplementation(\n      (filePath) => !filePath.includes(path.join('unexisting', 'file')),\n    );\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      \"/flipperBundlerEntry should point to a valid file\",\n    ]\n  `);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "multiple validation errors reported",
            "suites": [],
            "updatePoint": {
                "line": 153,
                "column": 41
            },
            "line": 153,
            "code": "test('multiple validation errors reported', async () => {\n  const testPackageJson = Object.assign({}, validPackageJson);\n  testPackageJson.keywords = ['flipper'];\n  // @ts-ignore cannot delete non-optional fields\n  delete testPackageJson.flipperBundlerEntry;\n  const json = JSON.stringify(testPackageJson);\n  fs.readFile = jest.fn().mockResolvedValue(new Buffer(json));\n  const result = await runLint('dir');\n  expect(result).toMatchInlineSnapshot(`\n    Array [\n      \". should have required property 'flipperBundlerEntry'\",\n      \"/keywords should contain keyword \\\\\"flipper-plugin\\\\\"\",\n    ]\n  `);\n});",
            "file": "runLint.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "converts package.json and adds dependencies",
            "suites": [],
            "updatePoint": {
                "line": 70,
                "column": 49
            },
            "line": 70,
            "code": "test('converts package.json and adds dependencies', async () => {\n  const error = await runMigrate('dir');\n  expect(error).toBeUndefined();\n  expect(convertedPackageJsonString).toMatchInlineSnapshot(`\n    \"{\n      \\\\\"$schema\\\\\": \\\\\"https://fbflipper.com/schemas/plugin-package/v2.json\\\\\",\n      \\\\\"name\\\\\": \\\\\"flipper-plugin-fresco\\\\\",\n      \\\\\"id\\\\\": \\\\\"Fresco\\\\\",\n      \\\\\"version\\\\\": \\\\\"1.0.0\\\\\",\n      \\\\\"main\\\\\": \\\\\"dist/bundle.js\\\\\",\n      \\\\\"flipperBundlerEntry\\\\\": \\\\\"index.tsx\\\\\",\n      \\\\\"license\\\\\": \\\\\"MIT\\\\\",\n      \\\\\"keywords\\\\\": [\n        \\\\\"flipper-plugin\\\\\",\n        \\\\\"images\\\\\"\n      ],\n      \\\\\"peerDependencies\\\\\": {\n        \\\\\"flipper\\\\\": \\\\\"latest\\\\\"\n      },\n      \\\\\"devDependencies\\\\\": {\n        \\\\\"flipper\\\\\": \\\\\"latest\\\\\",\n        \\\\\"flipper-pkg\\\\\": \\\\\"latest\\\\\"\n      },\n      \\\\\"scripts\\\\\": {\n        \\\\\"prepack\\\\\": \\\\\"yarn reset && yarn build && flipper-pkg lint && flipper-pkg bundle\\\\\"\n      },\n      \\\\\"title\\\\\": \\\\\"Images\\\\\",\n      \\\\\"icon\\\\\": \\\\\"profile\\\\\",\n      \\\\\"bugs\\\\\": {\n        \\\\\"email\\\\\": \\\\\"example@test.com\\\\\"\n      }\n    }\"\n  `);\n});",
            "file": "runMigrate.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "converts package.json without changing dependencies",
            "suites": [],
            "updatePoint": {
                "line": 105,
                "column": 57
            },
            "line": 105,
            "code": "test('converts package.json without changing dependencies', async () => {\n  const error = await runMigrate('dir', {noDependencies: true});\n  expect(error).toBeUndefined();\n  expect(convertedPackageJsonString).toMatchInlineSnapshot(`\n    \"{\n      \\\\\"$schema\\\\\": \\\\\"https://fbflipper.com/schemas/plugin-package/v2.json\\\\\",\n      \\\\\"name\\\\\": \\\\\"flipper-plugin-fresco\\\\\",\n      \\\\\"id\\\\\": \\\\\"Fresco\\\\\",\n      \\\\\"version\\\\\": \\\\\"1.0.0\\\\\",\n      \\\\\"main\\\\\": \\\\\"dist/bundle.js\\\\\",\n      \\\\\"flipperBundlerEntry\\\\\": \\\\\"index.tsx\\\\\",\n      \\\\\"license\\\\\": \\\\\"MIT\\\\\",\n      \\\\\"keywords\\\\\": [\n        \\\\\"flipper-plugin\\\\\",\n        \\\\\"images\\\\\"\n      ],\n      \\\\\"dependencies\\\\\": {\n        \\\\\"flipper\\\\\": \\\\\"latest\\\\\"\n      },\n      \\\\\"scripts\\\\\": {\n        \\\\\"prepack\\\\\": \\\\\"yarn reset && yarn build && flipper-pkg lint && flipper-pkg bundle\\\\\"\n      },\n      \\\\\"title\\\\\": \\\\\"Images\\\\\",\n      \\\\\"icon\\\\\": \\\\\"profile\\\\\",\n      \\\\\"bugs\\\\\": {\n        \\\\\"email\\\\\": \\\\\"example@test.com\\\\\"\n      }\n    }\"\n  `);\n});",
            "file": "runMigrate.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "does not migrate already migrated packages",
            "suites": [],
            "updatePoint": {
                "line": 136,
                "column": 48
            },
            "line": 136,
            "code": "test('does not migrate already migrated packages', async () => {\n  fs.readJson = jest.fn().mockResolvedValue(packageJsonV2);\n  fs.readFile = jest\n    .fn()\n    .mockResolvedValue(new Buffer(JSON.stringify(packageJsonV2)));\n  const error = await runMigrate('dir');\n  expect(error).toBeUndefined();\n  expect(convertedPackageJsonString).toBeUndefined();\n});",
            "file": "runMigrate.node.ts",
            "skipped": false,
            "dir": "desktop/pkg/src/__tests__"
        },
        {
            "name": "getPluginDetailsV1",
            "suites": [],
            "updatePoint": {
                "line": 26,
                "column": 24
            },
            "line": 26,
            "code": "test('getPluginDetailsV1', async () => {\n  const pluginV1 = {\n    name: 'flipper-plugin-test',\n    version: '2.0.0',\n    title: 'Test Plugin',\n    main: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    gatekeeper: 'GK_flipper_plugin_test',\n  };\n  fs.readJson = jest.fn().mockImplementation(() => pluginV1);\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": undefined,\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/plugins/flipper-plugin-test@2.0.0.js\",\n      \"flipperSDKVersion\": undefined,\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"flipper-plugin-test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": undefined,\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 1,\n      \"supportedApps\": undefined,\n      \"supportedDevices\": undefined,\n      \"title\": \"Test Plugin\",\n      \"version\": \"2.0.0\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "getPluginDetailsV2",
            "suites": [],
            "updatePoint": {
                "line": 66,
                "column": 24
            },
            "line": 66,
            "code": "test('getPluginDetailsV2', async () => {\n  const pluginV2 = {\n    $schema: 'https://fbflipper.com/schemas/plugin-package/v2.json',\n    name: 'flipper-plugin-test',\n    title: 'Test',\n    version: '3.0.1',\n    main: 'dist/bundle.js',\n    flipperBundlerEntry: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    gatekeeper: 'GK_flipper_plugin_test',\n  };\n  fs.readJson = jest.fn().mockImplementation(() => pluginV2);\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": undefined,\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test/dist/bundle.js\",\n      \"flipperSDKVersion\": undefined,\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"flipper-plugin-test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": undefined,\n      \"publishedDocs\": undefined,\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 2,\n      \"supportedApps\": undefined,\n      \"supportedDevices\": undefined,\n      \"title\": \"Test\",\n      \"version\": \"3.0.1\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "id used as title if the latter omited",
            "suites": [],
            "updatePoint": {
                "line": 109,
                "column": 43
            },
            "line": 109,
            "code": "test('id used as title if the latter omited', async () => {\n  const pluginV2 = {\n    $schema: 'https://fbflipper.com/schemas/plugin-package/v2.json',\n    name: 'flipper-plugin-test',\n    id: 'test',\n    version: '3.0.1',\n    main: 'dist/bundle.js',\n    flipperBundlerEntry: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    gatekeeper: 'GK_flipper_plugin_test',\n  };\n  fs.readJson = jest.fn().mockImplementation(() => pluginV2);\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": undefined,\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test/dist/bundle.js\",\n      \"flipperSDKVersion\": undefined,\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": undefined,\n      \"publishedDocs\": undefined,\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 2,\n      \"supportedApps\": undefined,\n      \"supportedDevices\": undefined,\n      \"title\": \"test\",\n      \"version\": \"3.0.1\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "name without \"flipper-plugin-\" prefix is used as title if the latter omited",
            "suites": [],
            "updatePoint": {
                "line": 152,
                "column": 81
            },
            "line": 152,
            "code": "test('name without \"flipper-plugin-\" prefix is used as title if the latter omited', async () => {\n  const pluginV2 = {\n    $schema: 'https://fbflipper.com/schemas/plugin-package/v2.json',\n    name: 'flipper-plugin-test',\n    version: '3.0.1',\n    main: 'dist/bundle.js',\n    flipperBundlerEntry: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    gatekeeper: 'GK_flipper_plugin_test',\n  };\n  fs.readJson = jest.fn().mockImplementation(() => pluginV2);\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": undefined,\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test/dist/bundle.js\",\n      \"flipperSDKVersion\": undefined,\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"flipper-plugin-test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": undefined,\n      \"publishedDocs\": undefined,\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 2,\n      \"supportedApps\": undefined,\n      \"supportedDevices\": undefined,\n      \"title\": \"test\",\n      \"version\": \"3.0.1\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "flipper-plugin-version is parsed",
            "suites": [],
            "updatePoint": {
                "line": 194,
                "column": 38
            },
            "line": 194,
            "code": "test('flipper-plugin-version is parsed', async () => {\n  const pluginV2 = {\n    $schema: 'https://fbflipper.com/schemas/plugin-package/v2.json',\n    name: 'flipper-plugin-test',\n    version: '3.0.1',\n    main: 'dist/bundle.js',\n    flipperBundlerEntry: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    gatekeeper: 'GK_flipper_plugin_test',\n    peerDependencies: {\n      'flipper-plugin': '^0.45',\n    },\n  };\n  fs.readJson = jest.fn().mockImplementation(() => pluginV2);\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": undefined,\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test/dist/bundle.js\",\n      \"flipperSDKVersion\": \"^0.45\",\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"flipper-plugin-test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": undefined,\n      \"publishedDocs\": undefined,\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 2,\n      \"supportedApps\": undefined,\n      \"supportedDevices\": undefined,\n      \"title\": \"test\",\n      \"version\": \"3.0.1\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "plugin type and supported devices parsed",
            "suites": [],
            "updatePoint": {
                "line": 239,
                "column": 46
            },
            "line": 239,
            "code": "test('plugin type and supported devices parsed', async () => {\n  const pluginV2 = {\n    $schema: 'https://fbflipper.com/schemas/plugin-package/v2.json',\n    name: 'flipper-plugin-test',\n    title: 'Test',\n    version: '3.0.1',\n    pluginType: 'device',\n    supportedDevices: [\n      {os: 'Android', archived: false},\n      {os: 'Android', type: 'physical', specs: ['KaiOS']},\n      {os: 'iOS', type: 'emulator'},\n    ],\n    main: 'dist/bundle.js',\n    flipperBundlerEntry: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    gatekeeper: 'GK_flipper_plugin_test',\n  };\n  fs.readJson = jest.fn().mockImplementation(() => pluginV2);\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": undefined,\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test/dist/bundle.js\",\n      \"flipperSDKVersion\": undefined,\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"flipper-plugin-test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": \"device\",\n      \"publishedDocs\": undefined,\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 2,\n      \"supportedApps\": undefined,\n      \"supportedDevices\": Array [\n        Object {\n          \"archived\": false,\n          \"os\": \"Android\",\n        },\n        Object {\n          \"os\": \"Android\",\n          \"specs\": Array [\n            \"KaiOS\",\n          ],\n          \"type\": \"physical\",\n        },\n        Object {\n          \"os\": \"iOS\",\n          \"type\": \"emulator\",\n        },\n      ],\n      \"title\": \"Test\",\n      \"version\": \"3.0.1\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "plugin type and supported apps parsed",
            "suites": [],
            "updatePoint": {
                "line": 304,
                "column": 43
            },
            "line": 304,
            "code": "test('plugin type and supported apps parsed', async () => {\n  const pluginV2 = {\n    $schema: 'https://fbflipper.com/schemas/plugin-package/v2.json',\n    name: 'flipper-plugin-test',\n    title: 'Test',\n    version: '3.0.1',\n    pluginType: 'client',\n    supportedApps: [\n      {appID: 'Messenger', os: 'Android', type: 'emulator'},\n      {appID: 'Instagram', os: 'Android', type: 'physical'},\n      {appID: 'Facebook', os: 'iOS', type: 'emulator'},\n    ],\n    main: 'dist/bundle.js',\n    flipperBundlerEntry: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    gatekeeper: 'GK_flipper_plugin_test',\n  };\n  fs.readJson = jest.fn().mockImplementation(() => pluginV2);\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": undefined,\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test/dist/bundle.js\",\n      \"flipperSDKVersion\": undefined,\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"flipper-plugin-test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": \"client\",\n      \"publishedDocs\": undefined,\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 2,\n      \"supportedApps\": Array [\n        Object {\n          \"appID\": \"Messenger\",\n          \"os\": \"Android\",\n          \"type\": \"emulator\",\n        },\n        Object {\n          \"appID\": \"Instagram\",\n          \"os\": \"Android\",\n          \"type\": \"physical\",\n        },\n        Object {\n          \"appID\": \"Facebook\",\n          \"os\": \"iOS\",\n          \"type\": \"emulator\",\n        },\n      ],\n      \"supportedDevices\": undefined,\n      \"title\": \"Test\",\n      \"version\": \"3.0.1\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "can merge two package.json files",
            "suites": [],
            "updatePoint": {
                "line": 369,
                "column": 38
            },
            "line": 369,
            "code": "test('can merge two package.json files', async () => {\n  const pluginBase = {\n    $schema: 'https://fbflipper.com/schemas/plugin-package/v2.json',\n    name: 'flipper-plugin-test',\n    title: 'Test',\n    version: '3.0.1',\n    pluginType: 'device',\n    supportedDevices: [\n      {os: 'Android', archived: false},\n      {os: 'Android', type: 'physical', specs: ['KaiOS']},\n      {os: 'iOS', type: 'emulator'},\n    ],\n    main: 'dist/bundle.js',\n    flipperBundlerEntry: 'src/index.tsx',\n    description: 'Description of Test Plugin',\n    bugs: {\n      url: 'https://github.com/facebook/flipper/issues',\n    },\n  };\n  const pluginAdditional = {\n    gatekeeper: 'GK_flipper_plugin_test',\n    bugs: {\n      url: 'https://fb.com/groups/flippersupport',\n      email: 'flippersupport@example.localhost',\n    },\n  };\n  const mockedFs = mocked(fs);\n  mockedFs.readJson.mockImplementation((file) => {\n    if (file === path.join(pluginPath, 'package.json')) {\n      return pluginBase;\n    } else if (file === path.join(pluginPath, 'fb', 'package.json')) {\n      return pluginAdditional;\n    }\n  });\n  mockedFs.pathExists.mockImplementation(() => Promise.resolve(true));\n  const details = await getInstalledPluginDetails(pluginPath);\n  details.dir = normalizePath(details.dir);\n  details.entry = normalizePath(details.entry);\n  expect(details).toMatchInlineSnapshot(`\n    Object {\n      \"bugs\": Object {\n        \"email\": \"flippersupport@example.localhost\",\n        \"url\": \"https://fb.com/groups/flippersupport\",\n      },\n      \"category\": undefined,\n      \"description\": \"Description of Test Plugin\",\n      \"dir\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test\",\n      \"engines\": undefined,\n      \"entry\": \"/Users/mock/.flipper/thirdparty/flipper-plugin-test/dist/bundle.js\",\n      \"flipperSDKVersion\": undefined,\n      \"gatekeeper\": \"GK_flipper_plugin_test\",\n      \"icon\": undefined,\n      \"id\": \"flipper-plugin-test\",\n      \"isActivatable\": true,\n      \"isBundled\": false,\n      \"main\": \"dist/bundle.js\",\n      \"name\": \"flipper-plugin-test\",\n      \"pluginType\": \"device\",\n      \"publishedDocs\": Object {\n        \"overview\": true,\n        \"setup\": true,\n      },\n      \"source\": \"src/index.tsx\",\n      \"specVersion\": 2,\n      \"supportedApps\": undefined,\n      \"supportedDevices\": Array [\n        Object {\n          \"archived\": false,\n          \"os\": \"Android\",\n        },\n        Object {\n          \"os\": \"Android\",\n          \"specs\": Array [\n            \"KaiOS\",\n          ],\n          \"type\": \"physical\",\n        },\n        Object {\n          \"os\": \"iOS\",\n          \"type\": \"emulator\",\n        },\n      ],\n      \"title\": \"Test\",\n      \"version\": \"3.0.1\",\n    }\n  `);\n});",
            "file": "getPluginDetails.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "annotatePluginsWithUpdates",
            "suites": [],
            "updatePoint": {
                "line": 95,
                "column": 32
            },
            "line": 95,
            "code": "test('annotatePluginsWithUpdates', async () => {\n  const getInstalledPluginsMock = mocked(getInstalledPlugins);\n  getInstalledPluginsMock.mockReturnValue(Promise.resolve(installedPlugins));\n\n  const getNpmHostedPluginsMock = mocked(getNpmHostedPlugins);\n  getNpmHostedPluginsMock.mockReturnValue(Promise.resolve(updates));\n\n  const res = await getUpdatablePlugins();\n\n  expect(res.length).toBe(2);\n  expect({\n    name: res[0].name,\n    version: res[0].version,\n    updateStatus: res[0].updateStatus,\n  }).toMatchInlineSnapshot(`\n    Object {\n      \"name\": \"flipper-plugin-hello\",\n      \"updateStatus\": Object {\n        \"kind\": \"up-to-date\",\n      },\n      \"version\": \"0.1.0\",\n    }\n  `);\n\n  expect({\n    name: res[1].name,\n    version: res[1].version,\n    updateStatus: res[1].updateStatus,\n  }).toMatchInlineSnapshot(`\n    Object {\n      \"name\": \"flipper-plugin-world\",\n      \"updateStatus\": Object {\n        \"kind\": \"update-available\",\n        \"version\": \"0.3.0\",\n      },\n      \"version\": \"0.3.0\",\n    }\n  `);\n});",
            "file": "getUpdatablePlugins.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "getInstalledPlugins",
            "suites": [
                "pluginInstaller"
            ],
            "updatePoint": {
                "line": 142,
                "column": 27
            },
            "line": 142,
            "code": "  test('getInstalledPlugins', async () => {\n    const plugins = await getInstalledPlugins();\n    expect(plugins).toHaveLength(3);\n    expect(plugins.map((p) => p.version).sort()).toEqual([\n      '0.3.0',\n      '11.2.0',\n      '2.0.0-beta.1',\n    ]);\n  });",
            "file": "pluginInstaller.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "getInstalledPlugins when no plugins installed",
            "suites": [
                "pluginInstaller"
            ],
            "updatePoint": {
                "line": 152,
                "column": 53
            },
            "line": 152,
            "code": "  test('getInstalledPlugins when no plugins installed', async () => {\n    await fs.remove(pluginInstallationDir);\n    const plugins = await getInstalledPlugins();\n    expect(plugins).toHaveLength(0);\n  });",
            "file": "pluginInstaller.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "moveInstalledPluginsFromLegacyDir",
            "suites": [
                "pluginInstaller"
            ],
            "updatePoint": {
                "line": 158,
                "column": 41
            },
            "line": 158,
            "code": "  test('moveInstalledPluginsFromLegacyDir', async () => {\n    await moveInstalledPluginsFromLegacyDir();\n    expect(\n      fs.pathExistsSync(\n        path.join(\n          pluginInstallationDir,\n          'flipper-plugin-test4',\n          '1.0.0',\n          'package.json',\n        ),\n      ),\n    ).toBeTruthy();\n    expect(\n      fs.pathExistsSync(\n        path.join(\n          pluginInstallationDir,\n          'flipper-plugin-test5',\n          '0.0.1',\n          'package.json',\n        ),\n      ),\n    ).toBeTruthy();\n    expect(fs.pathExistsSync(legacyPluginInstallationDir)).toBeFalsy();\n  });",
            "file": "pluginInstaller.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "cleanupOldInstalledPluginVersions(1)",
            "suites": [
                "pluginInstaller"
            ],
            "updatePoint": {
                "line": 183,
                "column": 44
            },
            "line": 183,
            "code": "  test('cleanupOldInstalledPluginVersions(1)', async () => {\n    await cleanupOldInstalledPluginVersions(1);\n    const subdirs1 = await fs.readdir(\n      path.join(pluginInstallationDir, 'flipper-plugin-test1'),\n    );\n    const subdirs2 = await fs.readdir(\n      path.join(pluginInstallationDir, 'flipper-plugin-test2'),\n    );\n    const subdirs3 = await fs.readdir(\n      path.join(pluginInstallationDir, 'flipper-plugin-test3'),\n    );\n    expect(subdirs1.sort()).toEqual(['11.2.0']);\n    expect(subdirs2.sort()).toEqual(['0.3.0']);\n    expect(subdirs3.sort()).toEqual(['2.0.0-beta.1']);\n  });",
            "file": "pluginInstaller.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "cleanupOldInstalledPluginVersions(2)",
            "suites": [
                "pluginInstaller"
            ],
            "updatePoint": {
                "line": 199,
                "column": 44
            },
            "line": 199,
            "code": "  test('cleanupOldInstalledPluginVersions(2)', async () => {\n    await cleanupOldInstalledPluginVersions(2);\n    const subdirs1 = await fs.readdir(\n      path.join(pluginInstallationDir, 'flipper-plugin-test1'),\n    );\n    const subdirs2 = await fs.readdir(\n      path.join(pluginInstallationDir, 'flipper-plugin-test2'),\n    );\n    const subdirs3 = await fs.readdir(\n      path.join(pluginInstallationDir, 'flipper-plugin-test3'),\n    );\n    expect(subdirs1.sort()).toEqual(['1.2.0', '11.2.0']);\n    expect(subdirs2.sort()).toEqual(['0.2.0', '0.3.0']);\n    expect(subdirs3.sort()).toEqual(['2.0.0-beta.1']);\n  });",
            "file": "pluginInstaller.node.ts",
            "skipped": false,
            "dir": "desktop/plugin-lib/src/__tests__"
        },
        {
            "name": "returns a list of registered plugins",
            "suites": [
                "client",
                "message handling",
                "getPlugins"
            ],
            "updatePoint": {
                "line": 55,
                "column": 46
            },
            "line": 55,
            "code": "      it('returns a list of registered plugins', async () => {\n        const serverReceivedMessages = new WSMessageAccumulator();\n        wsServer.on('connection', (ws) => {\n          ws.send(JSON.stringify({method: 'getPlugins', id: 0}));\n          ws.on('message', (message) =>\n            serverReceivedMessages.add(message.toString()),\n          );\n        });\n\n        client.addPlugin({\n          getId: () => '42',\n          onConnect: () => undefined,\n          onDisconnect: () => undefined,\n        });\n\n        await client.start();\n\n        const expectedGetPluginsResponse = {\n          id: 0,\n          success: {\n            plugins: ['42'],\n          },\n        };\n        const actualGetPluginsReponse = await serverReceivedMessages.newMessage;\n        expect(actualGetPluginsReponse).toBe(\n          JSON.stringify(expectedGetPluginsResponse),\n        );\n      });",
            "file": "client.spec.ts",
            "skipped": false,
            "dir": "js/js-flipper/src/__tests__"
        },
        {
            "name": "onError is called if message handling has failed, connection is closed, client reconnects",
            "suites": [
                "client",
                "message handling",
                "getPlugins"
            ],
            "updatePoint": {
                "line": 85,
                "column": 97
            },
            "line": 85,
            "code": "    it('onError is called if message handling has failed, connection is closed, client reconnects', async () => {\n      const onError = jest.fn();\n      client.onError = onError;\n\n      let resolveFirstConnectionPromise: () => void;\n      const firstConnectionPromise = new Promise<void>((resolve) => {\n        resolveFirstConnectionPromise = resolve;\n      });\n      wsServer.on('connection', (ws) => {\n        resolveFirstConnectionPromise();\n        // Send a malformed message to cause a failure\n        ws.send('{{{');\n      });\n\n      // Capturing a moment when the client received an error\n      const receivedErrorPromise = new Promise<void>((resolve) =>\n        onError.mockImplementationOnce((e) => {\n          resolve();\n        }),\n      );\n\n      await client.start();\n\n      // Capturing a moment when the client was closed because of the error\n      const closedPromise = new Promise<void>((resolve) => {\n        const originalOnclose = (client as any).ws.onclose;\n        (client as any).ws.onclose = (data: unknown) => {\n          originalOnclose(data);\n          resolve();\n        };\n      });\n\n      await receivedErrorPromise;\n      expect(onError).toBeCalledTimes(1);\n\n      // Make sure that the connection went through\n      await firstConnectionPromise;\n\n      wsServer.removeAllListeners('connection');\n\n      let resolveSecondConnectionPromise: () => void;\n      const secondConnectionPromise = new Promise<void>((resolve) => {\n        resolveSecondConnectionPromise = resolve;\n      });\n      wsServer.on('connection', () => {\n        resolveSecondConnectionPromise();\n      });\n\n      // Make sure the current client is closed\n      // When it closes, it schedules a reconnection\n      await closedPromise;\n\n      // Now, once the reconnection is scheduled, we can advance timers to do the actual reconnection\n      jest.advanceTimersByTime(RECONNECT_TIMEOUT);\n\n      // Make sure that the client reconnects\n      await secondConnectionPromise;\n    });",
            "file": "client.spec.ts",
            "skipped": false,
            "dir": "js/js-flipper/src/__tests__"
        },
        {
            "name": "onError is called if connection has failed, it is called every time Flipper fails to reconnect",
            "suites": [
                "client",
                "connection"
            ],
            "updatePoint": {
                "line": 146,
                "column": 102
            },
            "line": 146,
            "code": "    it('onError is called if connection has failed, it is called every time Flipper fails to reconnect', async () => {\n      allowConnection = false;\n\n      const onError = jest.fn();\n      client.onError = onError;\n\n      expect(onError).toBeCalledTimes(0);\n      client.start();\n\n      // Expect connection request to fail\n      await new Promise((resolve) => onError.mockImplementationOnce(resolve));\n      expect(onError).toBeCalledTimes(1);\n      // Checking that the request went through to the server\n      expect(verifyClient).toBeCalledTimes(1);\n\n      // Exepect reconnection attempts to fail\n      for (let i = 2; i < 10; i++) {\n        jest.advanceTimersByTime(RECONNECT_TIMEOUT);\n        await new Promise((resolve) => onError.mockImplementationOnce(resolve));\n        expect(onError).toBeCalledTimes(i);\n        expect(verifyClient).toBeCalledTimes(i);\n      }\n    });",
            "file": "client.spec.ts",
            "skipped": false,
            "dir": "js/js-flipper/src/__tests__"
        },
        {
            "name": "renders correctly",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 21
            },
            "line": 14,
            "code": "it('renders correctly', () => {\n  renderer.create( /*#__PURE__*/React.createElement(App, null));\n});",
            "file": "App-test.js",
            "skipped": false,
            "dir": "react-native/ReactNativeFlipperExample/__tests__"
        }
    ],
    "badge": "facebook__flipper.svg"
}