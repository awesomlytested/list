{"repo":"jlmakes/scrollreveal","url":"https://github.com/jlmakes/scrollreveal","branch":"master","configs":[{"package":"scrollreveal","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should return a new instance with `new` keyword","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":6,"column":55,"index":278},"line":6,"code":"    it('should return a new instance with `new` keyword', () => {\n      const sr = new ScrollReveal();\n      expect(sr).to.exist;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should return a new instance without `new` keyword","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":10,"column":58,"index":419},"line":10,"code":"    it('should return a new instance without `new` keyword', () => {\n      const sr = ScrollReveal();\n      expect(sr).to.exist;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should add the class `sr` to `<html>` element","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":14,"column":53,"index":551},"line":14,"code":"    it('should add the class `sr` to `<html>` element', () => {\n      document.documentElement.classList.remove('sr');\n      ScrollReveal();\n      const result = document.documentElement.classList.contains('sr');\n      expect(result).to.be.true;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should add `height: 100%` to `<body>` element","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":20,"column":53,"index":805},"line":20,"code":"    it('should add `height: 100%` to `<body>` element', () => {\n      document.body.style.height = 'auto';\n      ScrollReveal();\n      const result = document.body.style.height === '100%';\n      expect(result).to.be.true;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should return a noop instance when not supported","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":26,"column":56,"index":1038},"line":26,"code":"    it('should return a noop instance when not supported', () => {\n      const stubs = [sinon.stub(console, 'log'), sinon.stub(ScrollReveal, 'isSupported')];\n      const sr = ScrollReveal();\n      stubs.forEach(stub => stub.restore());\n      expect(sr.noop).to.be.true;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should return a noop instance when device is disabled","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":32,"column":61,"index":1321},"line":32,"code":"    it('should return a noop instance when device is disabled', () => {\n      isMobile() ? expect(ScrollReveal({\n        mobile: false\n      }).noop).to.be.true : expect(ScrollReveal({\n        desktop: false\n      }).noop).to.be.true;\n      ScrollReveal({\n        desktop: true,\n        mobile: true\n      });\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should return a noop instance when container is invalid","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":43,"column":63,"index":1641},"line":43,"code":"    it('should return a noop instance when container is invalid', () => {\n      const stub = sinon.stub(console, 'log');\n      const sr = ScrollReveal({\n        container: null\n      });\n      stub.restore();\n      expect(sr.noop).to.be.true;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should return a noop instance when passed non-object options","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":51,"column":68,"index":1897},"line":51,"code":"    it('should return a noop instance when passed non-object options', () => {\n      const stub = sinon.stub(console, 'log');\n      let sr;\n      {\n        sr = ScrollReveal(null);\n        expect(sr.noop).to.be.true;\n        sr = ScrollReveal('foo');\n        expect(sr.noop).to.be.true;\n      }\n      stub.restore();\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should return a singleton","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":62,"column":33,"index":2187},"line":62,"code":"    it('should return a singleton', () => {\n      const A = ScrollReveal();\n      const B = ScrollReveal();\n      expect(A === B).to.be.true;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should not update the defaults when re-invoked with invalid options","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":67,"column":75,"index":2379},"line":67,"code":"    it('should not update the defaults when re-invoked with invalid options', () => {\n      ScrollReveal({\n        duration: 1000\n      });\n      ScrollReveal(null);\n      expect(ScrollReveal().defaults.duration).to.equal(1000);\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should update the defaults when re-invoked with valid options","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":74,"column":69,"index":2610},"line":74,"code":"    it('should update the defaults when re-invoked with valid options', () => {\n      ScrollReveal({\n        duration: 1000\n      });\n      ScrollReveal({\n        duration: 5000\n      });\n      expect(ScrollReveal().defaults.duration).to.equal(5000);\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a static `debug` property","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":83,"column":45,"index":2845},"line":83,"code":"    it('should have a static `debug` property', () => {\n      expect(ScrollReveal.debug).to.exist;\n      expect(ScrollReveal.debug).to.be.a('boolean');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should accept boolean value for static `debug` property","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":87,"column":63,"index":3023},"line":87,"code":"    it('should accept boolean value for static `debug` property', () => {\n      ScrollReveal.debug = true;\n      expect(ScrollReveal.debug).to.be.true;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should ignore non-boolean values assigned to static `debug` property","suites":["ScrollReveal","Constructor"],"updatePoint":{"line":91,"column":76,"index":3196},"line":91,"code":"    it('should ignore non-boolean values assigned to static `debug` property', () => {\n      ScrollReveal.debug = null;\n      expect(ScrollReveal.debug).to.exist;\n      expect(ScrollReveal.debug).to.be.a('boolean');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `clean` method","suites":["ScrollReveal","Instance"],"updatePoint":{"line":99,"column":36,"index":3452},"line":99,"code":"    it('should have a `clean` method', () => {\n      expect(sr.clean).to.exist;\n      expect(sr.clean).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `destroy` method","suites":["ScrollReveal","Instance"],"updatePoint":{"line":103,"column":38,"index":3586},"line":103,"code":"    it('should have a `destroy` method', () => {\n      expect(sr.destroy).to.exist;\n      expect(sr.destroy).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `reveal` method","suites":["ScrollReveal","Instance"],"updatePoint":{"line":107,"column":37,"index":3723},"line":107,"code":"    it('should have a `reveal` method', () => {\n      expect(sr.reveal).to.exist;\n      expect(sr.reveal).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `sync` method","suites":["ScrollReveal","Instance"],"updatePoint":{"line":111,"column":35,"index":3856},"line":111,"code":"    it('should have a `sync` method', () => {\n      expect(sr.sync).to.exist;\n      expect(sr.sync).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `delegate` property","suites":["ScrollReveal","Instance"],"updatePoint":{"line":115,"column":41,"index":3991},"line":115,"code":"    it('should have a `delegate` property', () => {\n      expect(sr.delegate).to.exist;\n      expect(sr.delegate).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `version` property","suites":["ScrollReveal","Instance"],"updatePoint":{"line":119,"column":40,"index":4133},"line":119,"code":"    it('should have a `version` property', () => {\n      expect(sr.version).to.exist;\n      expect(sr.version).to.be.equal(version);\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `noop` property set to `false`","suites":["ScrollReveal","Instance"],"updatePoint":{"line":123,"column":52,"index":4286},"line":123,"code":"    it('should have a `noop` property set to `false`', () => {\n      expect(sr.noop).to.exist;\n      expect(sr.noop).to.be.false;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `clean` method","suites":["ScrollReveal","Non-operational Instance"],"updatePoint":{"line":132,"column":36,"index":4624},"line":132,"code":"    it('should have a `clean` method', () => {\n      expect(sr.clean).to.exist;\n      expect(sr.clean).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `destroy` method","suites":["ScrollReveal","Non-operational Instance"],"updatePoint":{"line":136,"column":38,"index":4758},"line":136,"code":"    it('should have a `destroy` method', () => {\n      expect(sr.destroy).to.exist;\n      expect(sr.destroy).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `reveal` method","suites":["ScrollReveal","Non-operational Instance"],"updatePoint":{"line":140,"column":37,"index":4895},"line":140,"code":"    it('should have a `reveal` method', () => {\n      expect(sr.reveal).to.exist;\n      expect(sr.reveal).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `sync` method","suites":["ScrollReveal","Non-operational Instance"],"updatePoint":{"line":144,"column":35,"index":5028},"line":144,"code":"    it('should have a `sync` method', () => {\n      expect(sr.sync).to.exist;\n      expect(sr.sync).to.be.a('function');\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should have a `noop` property set to `true`","suites":["ScrollReveal","Non-operational Instance"],"updatePoint":{"line":148,"column":51,"index":5173},"line":148,"code":"    it('should have a `noop` property set to `true`', () => {\n      expect(sr.noop).to.exist;\n      expect(sr.noop).to.be.true;\n    });","file":"instance/constructor.spec.js","skipped":false,"dir":"test"},{"name":"should be a function","suites":["Polyfills","mathSign()"],"updatePoint":{"line":4,"column":28,"index":150},"line":4,"code":"    it('should be a function', () => {\n      expect(polyfill).to.be.a('function');\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should return -1 when passed values smaller than 0","suites":["Polyfills","mathSign()"],"updatePoint":{"line":7,"column":58,"index":271},"line":7,"code":"    it('should return -1 when passed values smaller than 0', () => {\n      expect(polyfill(-500)).to.equal(-1);\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should return 1 when passed values larger than 0","suites":["Polyfills","mathSign()"],"updatePoint":{"line":10,"column":56,"index":389},"line":10,"code":"    it('should return 1 when passed values larger than 0', () => {\n      expect(polyfill(500)).to.equal(1);\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should return 1 when passed true","suites":["Polyfills","mathSign()"],"updatePoint":{"line":13,"column":40,"index":489},"line":13,"code":"    it('should return 1 when passed true', () => {\n      expect(polyfill(true)).to.equal(1);\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should return -0 when passed -0","suites":["Polyfills","mathSign()"],"updatePoint":{"line":16,"column":39,"index":589},"line":16,"code":"    it('should return -0 when passed -0', () => {\n      expect(polyfill(-0)).to.equal(-0);\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should return 0 when passed 0","suites":["Polyfills","mathSign()"],"updatePoint":{"line":19,"column":37,"index":686},"line":19,"code":"    it('should return 0 when passed 0', () => {\n      expect(polyfill(0)).to.equal(0);\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should return 0 when passed falsey values","suites":["Polyfills","mathSign()"],"updatePoint":{"line":22,"column":49,"index":793},"line":22,"code":"    it('should return 0 when passed falsey values', () => {\n      expect(polyfill(false)).to.equal(0);\n      expect(polyfill('')).to.equal(0);\n      expect(polyfill([])).to.equal(0);\n      expect(polyfill(null)).to.equal(0);\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should return NaN when passed non-falsey non-numbers","suites":["Polyfills","mathSign()"],"updatePoint":{"line":28,"column":60,"index":1037},"line":28,"code":"    it('should return NaN when passed non-falsey non-numbers', () => {\n      expect(polyfill('foo')).to.be.NaN;\n      expect(polyfill({})).to.be.NaN;\n      expect(polyfill([1, 2, 3])).to.be.NaN;\n    });","file":"polyfills/math-sign.spec.js","skipped":false,"dir":"test"},{"name":"should assign source values to target object","suites":["Utilities","deepAssign()"],"updatePoint":{"line":4,"column":52,"index":172},"line":4,"code":"    it('should assign source values to target object', () => {\n      const target = {\n        foo: 'bar',\n        bun: 'baz'\n      };\n      const source = {\n        foo: 'bonk!',\n        bif: 'baff'\n      };\n      const goal = {\n        foo: 'bonk!',\n        bun: 'baz',\n        bif: 'baff'\n      };\n      deepAssign(target, source);\n      expect(target).to.deep.equal(goal);\n    });","file":"utils/deep-assign.spec.js","skipped":false,"dir":"test"},{"name":"should assign nested source values to target object","suites":["Utilities","deepAssign()"],"updatePoint":{"line":21,"column":59,"index":563},"line":21,"code":"    it('should assign nested source values to target object', () => {\n      // each property tests a\n      // different execution path\n      const target = {\n        foo: 'initial',\n        bar: 'initial',\n        kel: {\n          pow: 'pop'\n        },\n        zad: null\n      };\n      const source = {\n        foo: 'bonk!',\n        bar: {\n          baz: 'baff'\n        },\n        kel: {\n          pow: 'lol'\n        },\n        zad: {\n          min: 'max'\n        }\n      };\n      const goal = {\n        foo: 'bonk!',\n        bar: {\n          baz: 'baff'\n        },\n        kel: {\n          pow: 'lol'\n        },\n        zad: {\n          min: 'max'\n        }\n      };\n      deepAssign(target, source);\n      expect(target).to.deep.equal(goal);\n    });","file":"utils/deep-assign.spec.js","skipped":false,"dir":"test"},{"name":"should accept multiple sources","suites":["Utilities","deepAssign()"],"updatePoint":{"line":59,"column":38,"index":1294},"line":59,"code":"    it('should accept multiple sources', () => {\n      const target = {\n        foo: 'bar',\n        bun: 'baz'\n      };\n      const source1 = {\n        foo: 'bonk!',\n        bif: 'baff'\n      };\n      const source2 = {\n        foo: 'pow!'\n      };\n      const goal = {\n        foo: 'pow!',\n        bun: 'baz',\n        bif: 'baff'\n      };\n      deepAssign(target, source1, source2);\n      expect(target).to.deep.equal(goal);\n    });","file":"utils/deep-assign.spec.js","skipped":false,"dir":"test"},{"name":"should throw a type error when not passed an object literal","suites":["Utilities","deepAssign()"],"updatePoint":{"line":79,"column":67,"index":1756},"line":79,"code":"    it('should throw a type error when not passed an object literal', () => {\n      let caught;\n\n      try {\n        deepAssign(null, null);\n      } catch (error) {\n        caught = error;\n      }\n\n      expect(caught).to.exist;\n      expect(caught).to.be.an.instanceof(TypeError);\n    });","file":"utils/deep-assign.spec.js","skipped":false,"dir":"test"},{"name":"should invoke callback for each property","suites":["Utilities","each()","if passed an object literal..."],"updatePoint":{"line":10,"column":50,"index":286},"line":10,"code":"      it('should invoke callback for each property', () => {\n        const fixture = new Fixture();\n        const spy = sinon.spy();\n        each(fixture, spy);\n        expect(spy).to.have.been.calledTwice;\n      });","file":"utils/each.spec.js","skipped":false,"dir":"test"},{"name":"should ignore properties on the prototype chain","suites":["Utilities","each()","if passed an object literal..."],"updatePoint":{"line":16,"column":57,"index":510},"line":16,"code":"      it('should ignore properties on the prototype chain', () => {\n        Fixture.prototype.biff = 'baff';\n        const fixture = new Fixture();\n        const spy = sinon.spy();\n        each(fixture, spy);\n        expect(spy).to.have.been.calledTwice;\n      });","file":"utils/each.spec.js","skipped":false,"dir":"test"},{"name":"should pass the value, key and collection to the callback","suites":["Utilities","each()","if passed an object literal..."],"updatePoint":{"line":23,"column":67,"index":785},"line":23,"code":"      it('should pass the value, key and collection to the callback', () => {\n        const fixture = new Fixture();\n\n        let _value, _key, _collection;\n\n        each(fixture, (value, key, collection) => {\n          _value = value;\n          _key = key;\n          _collection = collection;\n        });\n        expect(_value).to.equal('bun');\n        expect(_key).to.equal('baz');\n        expect(_collection).to.deep.equal(fixture);\n      });","file":"utils/each.spec.js","skipped":false,"dir":"test"},{"name":"should invoke callback for each value","suites":["Utilities","each()","if passed an array..."],"updatePoint":{"line":40,"column":47,"index":1318},"line":40,"code":"      it('should invoke callback for each value', () => {\n        const spy = sinon.spy();\n        each(fixture, spy);\n        expect(spy).to.have.been.calledThrice;\n      });","file":"utils/each.spec.js","skipped":false,"dir":"test"},{"name":"should pass the value, index and collection to the callback","suites":["Utilities","each()","if passed an array..."],"updatePoint":{"line":45,"column":69,"index":1516},"line":45,"code":"      it('should pass the value, index and collection to the callback', () => {\n        let _value, _index, _collection;\n\n        each(fixture, (value, index, collection) => {\n          _value = value;\n          _index = index;\n          _collection = collection;\n        });\n        expect(_value).to.equal('banana');\n        expect(_index).to.equal(2);\n        expect(_collection).to.deep.equal(fixture);\n      });","file":"utils/each.spec.js","skipped":false,"dir":"test"},{"name":"should throw a type error when passed an invalid collection","suites":["Utilities","each()","else"],"updatePoint":{"line":59,"column":69,"index":1970},"line":59,"code":"      it('should throw a type error when passed an invalid collection', () => {\n        let caught;\n\n        try {\n          each(null, () => {});\n        } catch (error) {\n          caught = error;\n        }\n\n        expect(caught).to.exist;\n        expect(caught).to.be.an.instanceof(TypeError);\n      });","file":"utils/each.spec.js","skipped":false,"dir":"test"},{"name":"should return unprefixed properties before prefixed","suites":["Utilities","getPrefixedCssProp()"],"updatePoint":{"line":7,"column":59,"index":290},"line":7,"code":"    it('should return unprefixed properties before prefixed', () => {\n      const source = {\n        transform: '',\n        '-webkit-transform': ''\n      };\n      const result = getPrefixedCssProp('transform', source);\n      expect(result).to.equal('transform');\n    });","file":"utils/get-prefixed-css-prop.spec.js","skipped":false,"dir":"test"},{"name":"should return prefixed property names","suites":["Utilities","getPrefixedCssProp()"],"updatePoint":{"line":15,"column":45,"index":547},"line":15,"code":"    it('should return prefixed property names', () => {\n      const source = {\n        '-webkit-transform': ''\n      };\n      const result = getPrefixedCssProp('transform', source);\n      expect(result).to.equal('-webkit-transform');\n    });","file":"utils/get-prefixed-css-prop.spec.js","skipped":false,"dir":"test"},{"name":"should return property names from cache when available","suites":["Utilities","getPrefixedCssProp()"],"updatePoint":{"line":22,"column":62,"index":806},"line":22,"code":"    it('should return property names from cache when available', () => {\n      const source = {\n        '-webkit-transform': ''\n      };\n      getPrefixedCssProp('transform', source);\n      const result = getPrefixedCssProp('transform', {});\n      expect(result).to.equal('-webkit-transform');\n    });","file":"utils/get-prefixed-css-prop.spec.js","skipped":false,"dir":"test"},{"name":"should throw a range error when no property is found","suites":["Utilities","getPrefixedCssProp()"],"updatePoint":{"line":30,"column":60,"index":1106},"line":30,"code":"    it('should throw a range error when no property is found', () => {\n      let caught;\n\n      try {\n        getPrefixedCssProp('transform', {});\n      } catch (error) {\n        caught = error;\n      }\n\n      expect(caught).to.exist;\n      expect(caught).to.be.an.instanceof(RangeError);\n    });","file":"utils/get-prefixed-css-prop.spec.js","skipped":false,"dir":"test"},{"name":"should throw a type error if not passed a string","suites":["Utilities","getPrefixedCssProp()"],"updatePoint":{"line":42,"column":56,"index":1399},"line":42,"code":"    it('should throw a type error if not passed a string', () => {\n      let caught;\n\n      try {\n        getPrefixedCssProp(null);\n      } catch (error) {\n        caught = error;\n      }\n\n      expect(caught).to.exist;\n      expect(caught).to.be.an.instanceof(TypeError);\n    });","file":"utils/get-prefixed-css-prop.spec.js","skipped":false,"dir":"test"},{"name":"should return true when passed a mobile user agent","suites":["Utilities","isMobile()"],"updatePoint":{"line":4,"column":58,"index":172},"line":4,"code":"    it('should return true when passed a mobile user agent', () => {\n      const android = `Mozilla/5.0 (Linux; U; Android 4.2; en-us;\n\t\t\t\tAndroid SDK built for x86 Build/JOP40C) AppleWebKit/534.30\n\t\t\t\t(KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`;\n      const iPhone = `Mozilla/5.0 (iPhone; CPU iPhone OS 10_10_5 like Mac OS X)\n\t\t\t\tAppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B411 Safari/600.1.4`;\n      expect(isMobile(android)).to.be.true;\n      expect(isMobile(iPhone)).to.be.true;\n    });","file":"utils/is-mobile.spec.js","skipped":false,"dir":"test"},{"name":"should return false when passed a desktop user agent","suites":["Utilities","isMobile()"],"updatePoint":{"line":13,"column":60,"index":693},"line":13,"code":"    it('should return false when passed a desktop user agent', () => {\n      const chrome = `Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36\n\t\t\t\t(KHTML, like Gecko) Chrome/50.0.2661.75 Safari/537.36`;\n      const firefox = 'Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0';\n      const ie10 = `Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1;\n\t\t\t\tWOW64; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E)`;\n      expect(isMobile(chrome)).to.be.false;\n      expect(isMobile(firefox)).to.be.false;\n      expect(isMobile(ie10)).to.be.false;\n    });","file":"utils/is-mobile.spec.js","skipped":false,"dir":"test"},{"name":"should work when not passed an explicit user agent","suites":["Utilities","isMobile()"],"updatePoint":{"line":23,"column":58,"index":1280},"line":23,"code":"    it('should work when not passed an explicit user agent', () => {\n      expect(isMobile()).to.be.a('boolean');\n    });","file":"utils/is-mobile.spec.js","skipped":false,"dir":"test"},{"name":"should return true when passed an object literal","suites":["Utilities","isObject()"],"updatePoint":{"line":4,"column":56,"index":170},"line":4,"code":"    it('should return true when passed an object literal', () => {\n      const result = isObject({});\n      expect(result).to.be.true;\n    });","file":"utils/is-object.spec.js","skipped":false,"dir":"test"},{"name":"should return false when passed a function","suites":["Utilities","isObject()"],"updatePoint":{"line":8,"column":50,"index":307},"line":8,"code":"    it('should return false when passed a function', () => {\n      const result = isObject(() => {});\n      expect(result).to.be.false;\n    });","file":"utils/is-object.spec.js","skipped":false,"dir":"test"},{"name":"should return false when passed an array","suites":["Utilities","isObject()"],"updatePoint":{"line":12,"column":48,"index":449},"line":12,"code":"    it('should return false when passed an array', () => {\n      const result = isObject([]);\n      expect(result).to.be.false;\n    });","file":"utils/is-object.spec.js","skipped":false,"dir":"test"},{"name":"should return false when passed null","suites":["Utilities","isObject()"],"updatePoint":{"line":16,"column":44,"index":581},"line":16,"code":"    it('should return false when passed null', () => {\n      const result = isObject(null);\n      expect(result).to.be.false;\n    });","file":"utils/is-object.spec.js","skipped":false,"dir":"test"},{"name":"should return false when passed undefined","suites":["Utilities","isObject()"],"updatePoint":{"line":20,"column":49,"index":720},"line":20,"code":"    it('should return false when passed undefined', () => {\n      const result = isObject(undefined);\n      expect(result).to.be.false;\n    });","file":"utils/is-object.spec.js","skipped":false,"dir":"test"},{"name":"should return true","suites":["Utilities","isTransformSupported()"],"updatePoint":{"line":4,"column":26,"index":177},"line":4,"code":"    it('should return true', () => {\n      expect(isTransformSupported()).to.be.true;\n    });","file":"utils/is-transform-supported.spec.js","skipped":false,"dir":"test"},{"name":"should return true","suites":["Utilities","isTransitionSupported()"],"updatePoint":{"line":4,"column":26,"index":180},"line":4,"code":"    it('should return true', () => {\n      expect(isTransitionSupported()).to.be.true;\n    });","file":"utils/is-transition-supported.spec.js","skipped":false,"dir":"test"},{"name":"should invoke console.log","suites":["Utilities","logger()"],"updatePoint":{"line":15,"column":33,"index":374},"line":15,"code":"    it('should invoke console.log', () => {\n      logger.call(mock);\n      expect(spy).to.have.been.called;\n    });","file":"utils/logger.spec.js","skipped":false,"dir":"test"},{"name":"should prepend output with `ScrollReveal: `","suites":["Utilities","logger()"],"updatePoint":{"line":19,"column":51,"index":508},"line":19,"code":"    it('should prepend output with `ScrollReveal: `', () => {\n      logger.call(mock, 'test');\n      const result = '%cScrollReveal: test';\n      const style = 'color: #ea654b;';\n      expect(spy).to.have.been.calledWith(result, style);\n    });","file":"utils/logger.spec.js","skipped":false,"dir":"test"},{"name":"should accept multiple arguments as message details","suites":["Utilities","logger()"],"updatePoint":{"line":25,"column":59,"index":761},"line":25,"code":"    it('should accept multiple arguments as message details', () => {\n      logger.call(mock, 'message', 'detail one', 'detail two');\n      const result = '%cScrollReveal: message\\n — detail one\\n — detail two';\n      const style = 'color: #ea654b;';\n      expect(spy).to.have.been.calledWith(result, style);\n    });","file":"utils/logger.spec.js","skipped":false,"dir":"test"},{"name":"should start at 0","suites":["Utilities","nextUniqueId()"],"updatePoint":{"line":4,"column":25,"index":152},"line":4,"code":"    it('should start at 0', () => {\n      const result = nextUniqueId();\n      expect(result).to.equal(0);\n    });","file":"utils/next-unique-id.spec.js","skipped":false,"dir":"test"},{"name":"should increment by 1","suites":["Utilities","nextUniqueId()"],"updatePoint":{"line":8,"column":29,"index":271},"line":8,"code":"    it('should increment by 1', () => {\n      const result = nextUniqueId();\n      expect(result).to.equal(1);\n    });","file":"utils/next-unique-id.spec.js","skipped":false,"dir":"test"},{"name":"should return a number","suites":["Utilities","nextUniqueId()"],"updatePoint":{"line":12,"column":30,"index":391},"line":12,"code":"    it('should return a number', () => {\n      const result = nextUniqueId();\n      expect(result).to.be.a('number');\n    });","file":"utils/next-unique-id.spec.js","skipped":false,"dir":"test"}]}