{"repo":"docsifyjs/docsify","url":"https://github.com/docsifyjs/docsify","branch":"develop","configs":[{"package":"docsify","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"catchPluginErrors:true (handles uncaught errors)","suites":[],"updatePoint":{"line":7,"column":56,"index":233},"line":7,"code":"  test('catchPluginErrors:true (handles uncaught errors)', async ({\n    page\n  }) => {\n    let consoleMsg, errorMsg;\n    page.on('console', msg => consoleMsg = msg.text());\n    page.on('pageerror', err => errorMsg = err.message);\n    await docsifyInit({\n      config: {\n        catchPluginErrors: true,\n        plugins: [function (hook, vm) {\n          hook.init(function () {\n            // eslint-disable-next-line no-undef\n            fail();\n          });\n          hook.beforeEach(function (markdown) {\n            return `${markdown}\\n\\nbeforeEach`;\n          });\n        }]\n      },\n      markdown: {\n        homepage: '# Hello World'\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = page.locator('#main');\n    expect(errorMsg).toBeUndefined();\n    expect(consoleMsg).toContain('Docsify plugin error');\n    await expect(mainElm).toContainText('Hello World');\n    await expect(mainElm).toContainText('beforeEach');\n  });","file":"e2e/configuration.test.js","skipped":false,"dir":"test"},{"name":"catchPluginErrors:false (throws uncaught errors)","suites":[],"updatePoint":{"line":38,"column":56,"index":1173},"line":38,"code":"  test('catchPluginErrors:false (throws uncaught errors)', async ({\n    page\n  }) => {\n    let consoleMsg, errorMsg;\n    page.on('console', msg => consoleMsg = msg.text());\n    page.on('pageerror', err => errorMsg = err.message);\n    await docsifyInit({\n      config: {\n        catchPluginErrors: false,\n        plugins: [function (hook, vm) {\n          hook.ready(function () {\n            // eslint-disable-next-line no-undef\n            fail();\n          });\n        }]\n      },\n      markdown: {\n        homepage: '# Hello World'\n      }\n      // _logHTML: true,\n    });\n\n    expect(consoleMsg).toBeUndefined();\n    expect(errorMsg).toContain('fail');\n  });","file":"e2e/configuration.test.js","skipped":false,"dir":"test"},{"name":"dom manipulation","suites":[],"updatePoint":{"line":14,"column":24,"index":494},"line":14,"code":"  test('dom manipulation', async ({\n    page\n  }) => {\n    const testText = 'This is a test';\n    const testHTML = `<h1>Test</h1><p>${testText}</p>`;\n\n    // Inject HTML\n    await page.setContent(testHTML);\n\n    // Get reference to page element\n    const bodyElm = page.locator('body');\n    const pElm = page.locator('body > p');\n\n    // Add class to element and test\n    await bodyElm.evaluate(elm => elm.classList.add('foo'));\n\n    // Tests\n    await expect(bodyElm).toHaveClass('foo');\n    await expect(bodyElm).toContainText('Test');\n    await expect(pElm).toHaveCount(1);\n    await expect(pElm).toHaveText(testText);\n    await expect(pElm).not.toHaveText('NOPE');\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"javascript in browser context","suites":[],"updatePoint":{"line":37,"column":37,"index":1182},"line":37,"code":"  test('javascript in browser context', async ({\n    page\n  }) => {\n    // Get native DOM values\n    const clientDimensions = await page.evaluate(() => {\n      return {\n        width: document.documentElement.clientWidth,\n        height: document.documentElement.clientHeight\n      };\n    });\n    expect(clientDimensions).toHaveProperty('width');\n    expect(typeof clientDimensions.width).toBe('number');\n    expect(clientDimensions).toHaveProperty('height');\n    expect(typeof clientDimensions.height).toBe('number');\n\n    // Get result of script executed in browser context\n    const scriptResult = await page.evaluate(numbers => {\n      const result = numbers.reduce((accumulator, currentValue) => accumulator + currentValue);\n      return Promise.resolve(result);\n    }, [1, 2, 3]);\n    expect(scriptResult).toBe(6);\n\n    // Get result of local function executed in browser context\n    function add(...addends) {\n      return addends.reduce((accumulator, currentValue) => accumulator + currentValue);\n    }\n    const functionResult = await page.evaluate(`\n      const add = ${add.toString()};\n\n      const result = add(1, 2, 3);\n\n      Promise.resolve(result);\n    `);\n    expect(functionResult).toBe(6);\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"manual docsify site using playwright methods","suites":[],"updatePoint":{"line":72,"column":52,"index":2412},"line":72,"code":"  test('manual docsify site using playwright methods', async ({\n    page\n  }) => {\n    // Add docsify target element\n    await page.setContent('<div id=\"app\"></div>');\n\n    // Set docsify configuration\n    await page.evaluate(() => {\n      window.$docsify = {\n        el: '#app',\n        basePath: '/docs/',\n        themeColor: 'red'\n      };\n    });\n\n    // Inject docsify theme (vue.css)\n    await page.addStyleTag({\n      url: '/lib/themes/vue.css'\n    });\n\n    // Inject docsify.js\n    await page.addScriptTag({\n      url: '/lib/docsify.js'\n    });\n\n    // Wait for docsify to initialize\n    await page.waitForSelector('#main');\n\n    // Create handle for JavaScript object in browser\n    const $docsify = await page.evaluate(() => window.$docsify);\n    // const $docsify = await page.evaluateHandle(() => window.$docsify);\n\n    // Test object property and value\n    expect($docsify).toHaveProperty('themeColor', 'red');\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"Docsify /docs/ site using docsifyInit()","suites":[],"updatePoint":{"line":107,"column":47,"index":3337},"line":107,"code":"  test('Docsify /docs/ site using docsifyInit()', async ({\n    page\n  }) => {\n    // Load custom docsify\n    // (See ./helpers/docsifyInit.js for details)\n    await docsifyInit({\n      config: {\n        basePath: '/docs/'\n      }\n      // _logHTML: true,\n    });\n\n    // Verify docsifyInitConfig.markdown content was rendered\n    const mainElm = page.locator('#main');\n    await expect(mainElm).toHaveCount(1);\n    await expect(mainElm).toContainText('A magical documentation site generator');\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"custom docsify site using docsifyInit()","suites":[],"updatePoint":{"line":124,"column":47,"index":3837},"line":124,"code":"  test('custom docsify site using docsifyInit()', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      config: {\n        name: 'Docsify Name',\n        themeColor: 'red'\n      },\n      markdown: {\n        coverpage: `\n          # Docsify Test\n\n          > Testing a magical documentation site generator\n\n          [GitHub](https://github.com/docsifyjs/docsify/)\n        `,\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        navbar: `\n          - [docsify.js.org](https://docsify.js.org/#/)\n        `,\n        sidebar: `\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        'test.md': `\n          # Test Page\n\n          This is a custom route.\n        `,\n        'data-test-scripturls.js': `\n          document.body.setAttribute('data-test-scripturls', 'pass');\n        `\n      },\n      script: `\n        document.body.setAttribute('data-test-script', 'pass');\n      `,\n      scriptURLs: [\n      // docsifyInit() route\n      'data-test-scripturls.js',\n      // Server route\n      '/lib/plugins/search.min.js'],\n      style: `\n        body {\n          background: red !important;\n        }\n      `,\n      styleURLs: ['/lib/themes/vue.css']\n    };\n    await docsifyInit({\n      ...docsifyInitConfig\n      // _logHTML: true,\n    });\n\n    const $docsify = await page.evaluate(() => window.$docsify);\n\n    // Verify config options\n    expect(typeof $docsify).toEqual('object');\n    expect($docsify).toHaveProperty('themeColor', 'red');\n    await expect(page.locator('.app-name')).toHaveText('Docsify Name');\n\n    // Verify docsifyInitConfig.markdown content was rendered\n    await expect(page.locator('section.cover h1')).toHaveText('Docsify Test'); // Coverpage\n    await expect(page.locator('nav.app-nav')).toHaveText('docsify.js.org'); // Navbar\n    await expect(page.locator('aside.sidebar')).toContainText('Test Page'); // Sidebar\n    await expect(page.locator('#main')).toContainText('This is the homepage'); // Homepage\n\n    // Verify docsifyInitConfig.scriptURLs were added to the DOM\n    for (const scriptURL of docsifyInitConfig.scriptURLs) {\n      await expect(page.locator(`script[src$=\"${scriptURL}\"]`)).toHaveCount(1);\n    }\n\n    // Verify docsifyInitConfig.scriptURLs were executed\n    await expect(page.locator('body[data-test-scripturls]')).toHaveCount(1);\n    await expect(page.locator('.search input[type=\"search\"]')).toHaveCount(1);\n\n    // Verify docsifyInitConfig.script was added to the DOM\n    expect(await page.evaluate(scriptText => {\n      return [...document.querySelectorAll('script')].some(elm => elm.textContent.replace(/\\s+/g, '') === scriptText);\n    }, docsifyInitConfig.script.replace(/\\s+/g, ''))).toBe(true);\n\n    // Verify docsifyInitConfig.script was executed\n    await expect(page.locator('body[data-test-script]')).toHaveCount(1);\n\n    // Verify docsifyInitConfig.styleURLs were added to the DOM\n    for (const styleURL of docsifyInitConfig.styleURLs) {\n      await expect(page.locator(`link[rel*=\"stylesheet\"][href$=\"${styleURL}\"]`)).toHaveCount(1);\n    }\n\n    // Verify docsifyInitConfig.style was added to the DOM\n    expect(await page.evaluate(styleText => {\n      return [...document.querySelectorAll('style')].some(elm => elm.textContent.replace(/\\s+/g, '') === styleText);\n    }, docsifyInitConfig.style.replace(/\\s+/g, ''))).toBe(true);\n\n    // Verify docsify navigation and docsifyInitConfig.routes\n    await page.click('a[href=\"#/test\"]');\n    expect(page.url()).toMatch(/\\/test$/);\n    await expect(page.locator('#main')).toContainText('This is a custom route');\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"should serve from index file","suites":[],"updatePoint":{"line":13,"column":36,"index":333},"line":13,"code":"  test('should serve from index file', async ({\n    page\n  }) => {\n    await docsifyInit(sharedOptions);\n    await expect(page.locator('#main')).toContainText('A magical documentation site generator');\n    expect(page.url()).toMatch(/index\\.html#\\/$/);\n  });","file":"e2e/index-file.test.js","skipped":false,"dir":"test"},{"name":"should use index file links in sidebar from index file hosting","suites":[],"updatePoint":{"line":20,"column":70,"index":626},"line":20,"code":"  test('should use index file links in sidebar from index file hosting', async ({\n    page\n  }) => {\n    await docsifyInit(sharedOptions);\n    await page.click('a[href=\"#/quickstart\"]');\n    await expect(page.locator('#main')).toContainText('Quick start');\n    expect(page.url()).toMatch(/index\\.html#\\/quickstart$/);\n  });","file":"e2e/index-file.test.js","skipped":false,"dir":"test"},{"name":"Hook order","suites":[],"updatePoint":{"line":7,"column":18,"index":181},"line":7,"code":"  test('Hook order', async ({\n    page\n  }) => {\n    const consoleMsgs = [];\n    const expectedMsgs = ['init', 'mounted', 'beforeEach-async', 'beforeEach', 'afterEach-async', 'afterEach', 'doneEach', 'ready'];\n    page.on('console', msg => consoleMsgs.push(msg.text()));\n    await docsifyInit({\n      config: {\n        plugins: [function (hook, vm) {\n          hook.init(function () {\n            console.log('init');\n          });\n          hook.mounted(function () {\n            console.log('mounted');\n          });\n          hook.beforeEach(function (markdown, next) {\n            setTimeout(function () {\n              console.log('beforeEach-async');\n              next(markdown);\n            }, 100);\n          });\n          hook.beforeEach(function (markdown) {\n            console.log('beforeEach');\n            return markdown;\n          });\n          hook.afterEach(function (html, next) {\n            setTimeout(function () {\n              console.log('afterEach-async');\n              next(html);\n            }, 100);\n          });\n          hook.afterEach(function (html) {\n            console.log('afterEach');\n            return html;\n          });\n          hook.doneEach(function () {\n            console.log('doneEach');\n          });\n          hook.ready(function () {\n            console.log('ready');\n          });\n        }]\n      },\n      markdown: {\n        homepage: '# Hello World'\n      }\n      // _logHTML: true,\n    });\n\n    expect(consoleMsgs).toEqual(expectedMsgs);\n  });","file":"e2e/plugins.test.js","skipped":false,"dir":"test"},{"name":"beforeEach() return value","suites":[],"updatePoint":{"line":58,"column":33,"index":1700},"line":58,"code":"  test('beforeEach() return value', async ({\n    page\n  }) => {\n    await docsifyInit({\n      config: {\n        plugins: [function (hook, vm) {\n          hook.beforeEach(function (markdown) {\n            return 'beforeEach';\n          });\n        }]\n      }\n      // _logHTML: true,\n    });\n\n    await expect(page.locator('#main')).toContainText('beforeEach');\n  });","file":"e2e/plugins.test.js","skipped":false,"dir":"test"},{"name":"beforeEach() async return value","suites":[],"updatePoint":{"line":74,"column":39,"index":2073},"line":74,"code":"  test('beforeEach() async return value', async ({\n    page\n  }) => {\n    await docsifyInit({\n      config: {\n        plugins: [function (hook, vm) {\n          hook.beforeEach(function (markdown, next) {\n            setTimeout(function () {\n              next('beforeEach');\n            }, 100);\n          });\n        }]\n      },\n      markdown: {\n        homepage: '# Hello World'\n      }\n      // _logHTML: true,\n    });\n\n    await expect(page.locator('#main')).toContainText('beforeEach');\n  });","file":"e2e/plugins.test.js","skipped":false,"dir":"test"},{"name":"afterEach() return value","suites":[],"updatePoint":{"line":95,"column":32,"index":2565},"line":95,"code":"  test('afterEach() return value', async ({\n    page\n  }) => {\n    await docsifyInit({\n      config: {\n        plugins: [function (hook, vm) {\n          hook.afterEach(function (html) {\n            return '<p>afterEach</p>';\n          });\n        }]\n      },\n      markdown: {\n        homepage: '# Hello World'\n      }\n      // _logHTML: true,\n    });\n\n    await expect(page.locator('#main')).toContainText('afterEach');\n  });","file":"e2e/plugins.test.js","skipped":false,"dir":"test"},{"name":"afterEach() async return value","suites":[],"updatePoint":{"line":114,"column":38,"index":2998},"line":114,"code":"  test('afterEach() async return value', async ({\n    page\n  }) => {\n    await docsifyInit({\n      config: {\n        plugins: [function (hook, vm) {\n          hook.afterEach(function (html, next) {\n            setTimeout(function () {\n              next('<p>afterEach</p>');\n            }, 100);\n          });\n        }]\n      },\n      markdown: {\n        homepage: '# Hello World'\n      }\n      // _logHTML: true,\n    });\n\n    await expect(page.locator('#main')).toContainText('afterEach');\n  });","file":"e2e/plugins.test.js","skipped":false,"dir":"test"},{"name":"search readme","suites":[],"updatePoint":{"line":7,"column":21,"index":196},"line":7,"code":"  test('search readme', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        sidebar: `\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        '/test.md': `\n          # Test Page\n\n          This is a custom route.\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    const searchFieldElm = page.locator('input[type=search]');\n    const resultsHeadingElm = page.locator('.results-panel h2');\n    await docsifyInit(docsifyInitConfig);\n    await searchFieldElm.fill('hello');\n    await expect(resultsHeadingElm).toHaveText('Hello World');\n    await page.click('.clear-button');\n    await searchFieldElm.fill('test');\n    await expect(resultsHeadingElm).toHaveText('Test Page');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search ignore title","suites":[],"updatePoint":{"line":39,"column":27,"index":1048},"line":39,"code":"  test('search ignore title', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        sidebar: `\n          - [Home page](/)\n          - [GitHub Pages](github)\n        `\n      },\n      routes: {\n        '/github.md': `\n            # GitHub Pages\n\n            This is the GitHub Pages.\n\n            ## GitHub Pages ignore1 <!-- {docsify-ignore} -->\n\n            There're three places to populate your docs for your Github repository1.\n\n            ## GitHub Pages ignore2 {docsify-ignore}\n\n            There're three places to populate your docs for your Github repository2.\n          `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    const searchFieldElm = page.locator('input[type=search]');\n    const resultsHeadingElm = page.locator('.results-panel h2');\n    await docsifyInit(docsifyInitConfig);\n    await searchFieldElm.fill('repository1');\n    await expect(resultsHeadingElm).toHaveText('GitHub Pages ignore1');\n    await page.click('.clear-button');\n    await searchFieldElm.fill('repository2');\n    await expect(resultsHeadingElm).toHaveText('GitHub Pages ignore2');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search only one homepage","suites":[],"updatePoint":{"line":80,"column":32,"index":2272},"line":80,"code":"  test('search only one homepage', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      markdown: {\n        sidebar: `\n          - [README](README)\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        '/README.md': `\n          # Hello World\n\n          This is the homepage.\n        `,\n        '/test.md': `\n          # Test Page\n\n          This is a custom route.\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.js']\n    };\n    const searchFieldElm = page.locator('input[type=search]');\n    const resultsHeadingElm = page.locator('.results-panel h2');\n    const resultElm = page.locator('.matching-post');\n    await docsifyInit(docsifyInitConfig);\n    await searchFieldElm.fill('hello');\n    await expect(resultElm).toHaveCount(1);\n    await expect(resultsHeadingElm).toHaveText('Hello World');\n    await page.click('.clear-button');\n    await searchFieldElm.fill('test');\n    await expect(resultsHeadingElm).toHaveText('Test Page');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search ignore diacritical marks","suites":[],"updatePoint":{"line":115,"column":39,"index":3263},"line":115,"code":"  test('search ignore diacritical marks', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          # Qué es\n\n          docsify genera su sitio web de documentación sobre la marcha. A diferencia de GitBook, no genera archivos estáticos html. En cambio, carga y analiza de forma inteligente sus archivos de Markdown y los muestra como sitio web. Todo lo que necesita hacer es crear un index.html para comenzar y desplegarlo en GitHub Pages.\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    const searchFieldElm = page.locator('input[type=search]');\n    const resultsHeadingElm = page.locator('.results-panel h2');\n    await docsifyInit(docsifyInitConfig);\n    await searchFieldElm.fill('documentacion');\n    await expect(resultsHeadingElm).toHaveText('Que es');\n    await page.click('.clear-button');\n    await searchFieldElm.fill('estáticos');\n    await expect(resultsHeadingElm).toHaveText('Que es');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search when there is no title","suites":[],"updatePoint":{"line":137,"column":37,"index":4249},"line":137,"code":"  test('search when there is no title', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          This is some description. We assume autoHeader added the # Title. A long paragraph.\n        `,\n        sidebar: `\n          - [Changelog](changelog)\n        `\n      },\n      routes: {\n        '/changelog.md': `\n          feat: Support search when there is no title\n\n          ## Changelog Title\n\n          hello, this is a changelog\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    const searchFieldElm = page.locator('input[type=search]');\n    const resultsHeadingElm = page.locator('.results-panel h2');\n    await docsifyInit(docsifyInitConfig);\n    await searchFieldElm.fill('paragraph');\n    await expect(resultsHeadingElm).toHaveText('Home Page');\n    await page.click('.clear-button');\n    await searchFieldElm.fill('Support');\n    await expect(resultsHeadingElm).toHaveText('changelog');\n    await page.click('.clear-button');\n    await searchFieldElm.fill('hello');\n    await expect(resultsHeadingElm).toHaveText('Changelog Title');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search when there is no body","suites":[],"updatePoint":{"line":172,"column":36,"index":5373},"line":172,"code":"  test('search when there is no body', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          # EmptyContent\n          ---\n          ---\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    const searchFieldElm = page.locator('input[type=search]');\n    const resultsHeadingElm = page.locator('.results-panel h2');\n    await docsifyInit(docsifyInitConfig);\n    await searchFieldElm.fill('empty');\n    await expect(resultsHeadingElm).toHaveText('EmptyContent');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"should not load remote content from hash ()","suites":[],"updatePoint":{"line":18,"column":60,"index":524},"line":18,"code":"    test(`should not load remote content from hash (${hash})`, async ({\n      page\n    }) => {\n      const mainElm = page.locator('#main');\n      await docsifyInit(sharedOptions);\n      await expect(mainElm).toContainText('Hello World');\n      await page.evaluate(() => location.hash = '#/test');\n      await expect(mainElm).toContainText('Test Page');\n      await page.evaluate(newHash => {\n        location.hash = newHash;\n      }, hash);\n      await expect(mainElm).toContainText('Hello World');\n      expect(page.url()).toMatch(/#\\/$/);\n    });","file":"e2e/security.test.js","skipped":false,"dir":"test"},{"name":"Active Test","suites":[],"updatePoint":{"line":12,"column":19,"index":371},"line":12,"code":"  test('Active Test', async ({\n    page\n  }) => {\n    const docsifyInitConfig = {\n      markdown: {\n        sidebar: `\n          - [Test Space](test%20space)\n          - [Test _](test_foo)\n          - [Test -](test-foo)\n          - [Test .](test.foo)\n          - [Test >](test>foo)\n          - [Test](test)\n        `\n      },\n      routes: {\n        '/test space.md': `\n          # Test Space\n        `,\n        '/test_foo.md': `\n          # Test _\n        `,\n        '/test-foo.md': `\n          # Test -\n        `,\n        '/test.foo.md': `\n          # Test .\n        `,\n        '/test>foo.md': `\n          # Test >\n        `,\n        '/test.md': `\n          # Test page\n        `\n      }\n    };\n    const activeLinkElm = page.locator('.sidebar-nav li[class=active]');\n    await docsifyInit(docsifyInitConfig);\n    await page.click('a[href=\"#/test%20space\"]');\n    await expect(activeLinkElm).toHaveText('Test Space');\n    expect(page.url()).toMatch(/\\/test%20space$/);\n    await page.click('a[href=\"#/test_foo\"]');\n    await expect(activeLinkElm).toHaveText('Test _');\n    expect(page.url()).toMatch(/\\/test_foo$/);\n    await page.click('a[href=\"#/test-foo\"]');\n    await expect(activeLinkElm).toHaveText('Test -');\n    expect(page.url()).toMatch(/\\/test-foo$/);\n    await page.click('a[href=\"#/test.foo\"]');\n    expect(page.url()).toMatch(/\\/test.foo$/);\n    await expect(activeLinkElm).toHaveText('Test .');\n    await page.click('a[href=\"#/test>foo\"]');\n    await expect(activeLinkElm).toHaveText('Test >');\n    expect(page.url()).toMatch(/\\/test%3Efoo$/);\n    await page.click('a[href=\"#/test\"]');\n    await expect(activeLinkElm).toHaveText('Test');\n    expect(page.url()).toMatch(/\\/test$/);\n  });","file":"e2e/sidebar.test.js","skipped":false,"dir":"test"},{"name":"rendering virtual routes specified as string","suites":[],"updatePoint":{"line":18,"column":54,"index":681},"line":18,"code":"    test('rendering virtual routes specified as string', async ({\n      page\n    }) => {\n      const routes = {\n        '/my-awesome-route': '# My Awesome Route'\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/my-awesome-route');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('My Awesome Route');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"rendering virtual routes specified as functions","suites":[],"updatePoint":{"line":33,"column":57,"index":1113},"line":33,"code":"    test('rendering virtual routes specified as functions', async ({\n      page\n    }) => {\n      const routes = {\n        '/my-awesome-function-route': function () {\n          return '# My Awesome Function Route';\n        }\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/my-awesome-function-route');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('My Awesome Function Route');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"rendering virtual routes specified functions that use the \"next\" callback","suites":[],"updatePoint":{"line":50,"column":83,"index":1649},"line":50,"code":"    test('rendering virtual routes specified functions that use the \"next\" callback', async ({\n      page\n    }) => {\n      const routes = {\n        '/my-awesome-async-function-route': async function (route, matched, next) {\n          setTimeout(() => next('# My Awesome Function Route'), 100);\n        }\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/my-awesome-async-function-route');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('My Awesome Function Route');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"rendering virtual routes with regex matches","suites":[],"updatePoint":{"line":69,"column":53,"index":2274},"line":69,"code":"    test('rendering virtual routes with regex matches', async ({\n      page\n    }) => {\n      const routes = {\n        '/items/(.*)': '# Item Page'\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/items/banana');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('Item Page');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"virtual route functions should get the route as first parameter","suites":[],"updatePoint":{"line":84,"column":73,"index":2698},"line":84,"code":"    test('virtual route functions should get the route as first parameter', async ({\n      page\n    }) => {\n      const routes = {\n        '/pets/(.*)': function (route) {\n          return `# Route: /pets/dog`;\n        }\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/pets/dog');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('Route: /pets/dog');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"virtual route functions should get the matched array as second parameter","suites":[],"updatePoint":{"line":101,"column":82,"index":3187},"line":101,"code":"    test('virtual route functions should get the matched array as second parameter', async ({\n      page\n    }) => {\n      const routes = {\n        '/pets/(.*)': function (_, matched) {\n          return `# Pets Page (${matched[1]})`;\n        }\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/pets/cat');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('Pets Page (cat)');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"routes should be exact match if no regex was passed","suites":[],"updatePoint":{"line":120,"column":61,"index":3726},"line":120,"code":"    test('routes should be exact match if no regex was passed', async ({\n      page\n    }) => {\n      const routes = {\n        '/my': '# Incorrect Route - only prefix',\n        '/route': '# Incorrect Route - only postfix',\n        '/my/route': '# Correct Route'\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/my/route');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('Correct Route');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"if there are two routes that match, the first one should be taken","suites":[],"updatePoint":{"line":137,"column":75,"index":4258},"line":137,"code":"    test('if there are two routes that match, the first one should be taken', async ({\n      page\n    }) => {\n      const routes = {\n        '/multiple/(.+)': '# First Match',\n        '/multiple/(.*)': '# Second Match'\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/multiple/matches');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('First Match');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"prefer virtual route over a real file, if a virtual route exists","suites":[],"updatePoint":{"line":153,"column":74,"index":4738},"line":153,"code":"    test('prefer virtual route over a real file, if a virtual route exists', async ({\n      page\n    }) => {\n      const routes = {\n        '/': '# Virtual Homepage'\n      };\n      await docsifyInit({\n        markdown: {\n          homepage: '# Real File Homepage'\n        },\n        config: {\n          routes\n        }\n      });\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('Virtual Homepage');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"fallback to default routing if no route was matched","suites":[],"updatePoint":{"line":170,"column":61,"index":5176},"line":170,"code":"    test('fallback to default routing if no route was matched', async ({\n      page\n    }) => {\n      const routes = {\n        '/a': '# A',\n        '/b': '# B',\n        '/c': '# C'\n      };\n      await docsifyInit({\n        markdown: {\n          homepage: '# Real File Homepage'\n        },\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/d');\n      const mainElm = page.locator('#main');\n      await expect(mainElm).toContainText('404 - Not found');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"skip routes that returned a falsy value that is not a boolean","suites":[],"updatePoint":{"line":190,"column":71,"index":5687},"line":190,"code":"    test('skip routes that returned a falsy value that is not a boolean', async ({\n      page\n    }) => {\n      const routes = {\n        '/multiple/(.+)': () => null,\n        '/multiple/(.*)': () => undefined,\n        '/multiple/.+': () => 0,\n        '/multiple/.*': () => '# Last Match'\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/multiple/matches');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('Last Match');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"abort virtual routes and not try the next one, if any matched route returned an explicit \"false\" boolean","suites":[],"updatePoint":{"line":208,"column":114,"index":6279},"line":208,"code":"    test('abort virtual routes and not try the next one, if any matched route returned an explicit \"false\" boolean', async ({\n      page\n    }) => {\n      const routes = {\n        '/multiple/(.+)': () => false,\n        '/multiple/(.*)': () => \"# You Shouldn't See Me\"\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/multiple/matches');\n      const mainElm = page.locator('#main');\n      await expect(mainElm).toContainText('404 - Not found');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"skip routes that are not a valid string or function","suites":[],"updatePoint":{"line":224,"column":61,"index":6755},"line":224,"code":"    test('skip routes that are not a valid string or function', async ({\n      page\n    }) => {\n      const routes = {\n        '/multiple/(.+)': 123,\n        '/multiple/(.*)': false,\n        '/multiple/.+': null,\n        '/multiple/..+': [],\n        '/multiple/..*': {},\n        '/multiple/.*': '# Last Match'\n      };\n      await docsifyInit({\n        config: {\n          routes\n        }\n      });\n      await navigateToRoute(page, '/multiple/matches');\n      const titleElm = page.locator('#main h1');\n      await expect(titleElm).toContainText('Last Match');\n    });","file":"e2e/virtual-routes.test.js","skipped":false,"dir":"test"},{"name":"renders content when executeScript is ","suites":[],"updatePoint":{"line":99,"column":68,"index":2798},"line":99,"code":"        test(`renders content when executeScript is ${executeScript}`, async ({\n          page\n        }) => {\n          const docsifyInitConfig = getSharedConfig();\n          docsifyInitConfig.config.executeScript = executeScript;\n          docsifyInitConfig.scriptURLs = vueURL;\n          await docsifyInit(docsifyInitConfig);\n\n          // Static\n          await expect(page.locator('#vuefor')).toHaveText('12345');\n          await expect(page.locator('#vuecomponent')).toHaveText('0');\n          await expect(page.locator('#vueglobaloptions p')).toHaveText('vueglobaloptions');\n          await expect(page.locator('#vueglobaloptions > span')).toHaveText('0');\n          await expect(page.locator('#vuemounts p')).toHaveText('vuemounts');\n          await expect(page.locator('#vuemounts > span')).toHaveText('0');\n          await expect(page.locator('#vuescript p')).toHaveText('vuescript');\n          await expect(page.locator('#vuescript > span')).toHaveText('0');\n\n          // Reactive\n          await page.click('#vuecomponent');\n          await expect(page.locator('#vuecomponent')).toHaveText('1');\n          await page.click('#vueglobaloptions button');\n          await expect(page.locator('#vueglobaloptions > span')).toHaveText('1');\n          await page.click('#vuemounts button');\n          await expect(page.locator('#vuemounts > span')).toHaveText('1');\n          await page.click('#vuescript button');\n          await expect(page.locator('#vuescript > span')).toHaveText('1');\n        });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when Vue is not present","suites":[],"updatePoint":{"line":128,"column":51,"index":4296},"line":128,"code":"      test(`ignores content when Vue is not present`, async ({\n        page\n      }) => {\n        const docsifyInitConfig = getSharedConfig();\n        await docsifyInit(docsifyInitConfig);\n        await page.evaluate(() => 'Vue' in window === false);\n        await expect(page.locator('#vuefor')).toHaveText('{{ i }}');\n        await expect(page.locator('#vuecomponent')).toHaveText('---');\n        await expect(page.locator('#vueglobaloptions p')).toHaveText('---');\n        await expect(page.locator('#vuemounts p')).toHaveText('---');\n        await expect(page.locator('#vuescript p')).toHaveText('---');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when vueComponents, vueMounts, and vueGlobalOptions are undefined","suites":[],"updatePoint":{"line":140,"column":93,"index":4956},"line":140,"code":"      test(`ignores content when vueComponents, vueMounts, and vueGlobalOptions are undefined`, async ({\n        page\n      }) => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.vueComponents = undefined;\n        docsifyInitConfig.config.vueGlobalOptions = undefined;\n        docsifyInitConfig.config.vueMounts = undefined;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page.locator('#vuefor')).toHaveText('{{ i }}');\n        await expect(page.locator('#vuecomponent')).toHaveText('---');\n        await expect(page.locator('#vueglobaloptions p')).toHaveText('---');\n        await expect(page.locator('#vuemounts p')).toHaveText('---');\n        await expect(page.locator('#vuescript p')).toHaveText('vuescript');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when vueGlobalOptions is undefined","suites":[],"updatePoint":{"line":155,"column":62,"index":5755},"line":155,"code":"      test(`ignores content when vueGlobalOptions is undefined`, async ({\n        page\n      }) => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.vueGlobalOptions = undefined;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page.locator('#vuefor')).toHaveText('12345');\n        await expect(page.locator('#vuecomponent')).toHaveText('0');\n        await expect(page.locator('#vuecomponent')).toHaveText('0');\n        expect(await page.locator('#vueglobaloptions p').innerText()).toBe('');\n        await expect(page.locator('#vuemounts p')).toHaveText('vuemounts');\n        await expect(page.locator('#vuescript p')).toHaveText('vuescript');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when vueMounts is undefined","suites":[],"updatePoint":{"line":169,"column":55,"index":6505},"line":169,"code":"      test(`ignores content when vueMounts is undefined`, async ({\n        page\n      }) => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.vueMounts['#vuemounts'] = undefined;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page.locator('#vuefor')).toHaveText('12345');\n        await expect(page.locator('#vuecomponent')).toHaveText('0');\n        await expect(page.locator('#vueglobaloptions p')).toHaveText('vueglobaloptions');\n        await expect(page.locator('#vuemounts p')).toHaveText('vueglobaloptions');\n        await expect(page.locator('#vuescript p')).toHaveText('vuescript');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores <script> when executeScript is false","suites":[],"updatePoint":{"line":182,"column":56,"index":7211},"line":182,"code":"      test(`ignores <script> when executeScript is false`, async ({\n        page\n      }) => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.executeScript = false;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page.locator('#vuescript p')).toHaveText('vueglobaloptions');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"coverpage renders and is unchanged","suites":["Docs Site"],"updatePoint":{"line":8,"column":42,"index":318},"line":8,"code":"  test('coverpage renders and is unchanged', async () => {\n    // Override Math.random implementation to prevent random gradient values\n    // used as background image from causing test to fail\n    const mathSpy = jest.spyOn(Math, 'random').mockReturnValue(0.5);\n    await docsifyInit({\n      config: {\n        coverpage: 'docs/_coverpage.md'\n      },\n      markdown: {\n        homepage: '# Hello World'\n      },\n      waitForSelector: '.cover-main > *'\n    });\n    const coverpageElm = document.querySelector('section.cover');\n\n    // Test snapshots\n    expect(mathSpy).toHaveBeenCalled();\n    expect(coverpageElm).not.toBeNull();\n    expect(coverpageElm.outerHTML).toMatchSnapshot();\n  });","file":"integration/docs.test.js","skipped":false,"dir":"test"},{"name":"sidebar renders and is unchanged","suites":["Docs Site"],"updatePoint":{"line":28,"column":40,"index":1008},"line":28,"code":"  test('sidebar renders and is unchanged', async () => {\n    await docsifyInit({\n      config: {\n        loadSidebar: 'docs/_sidebar.md'\n      },\n      markdown: {\n        homepage: '# Hello World'\n      },\n      waitForSelector: '.sidebar-nav > ul'\n    });\n    const sidebarElm = document.querySelector('.sidebar');\n\n    // Test snapshots\n    expect(sidebarElm).not.toBeNull();\n    expect(sidebarElm.outerHTML).toMatchSnapshot();\n  });","file":"integration/docs.test.js","skipped":false,"dir":"test"},{"name":"navbar renders and is unchanged","suites":["Docs Site"],"updatePoint":{"line":44,"column":39,"index":1444},"line":44,"code":"  test('navbar renders and is unchanged', async () => {\n    await docsifyInit({\n      config: {\n        loadNavbar: 'docs/_navbar.md'\n      },\n      markdown: {\n        homepage: '# Hello World'\n      },\n      waitForSelector: '.app-nav > ul'\n    });\n    const navbarElm = document.querySelector('nav.app-nav');\n\n    // Test snapshots\n    expect(navbarElm).not.toBeNull();\n    expect(navbarElm.outerHTML).toMatchSnapshot();\n  });","file":"integration/docs.test.js","skipped":false,"dir":"test"},{"name":"allows $docsify configuration to be a function","suites":["Docsify"],"updatePoint":{"line":8,"column":54,"index":328},"line":8,"code":"  test('allows $docsify configuration to be a function', async () => {\n    const testConfig = jest.fn(vm => {\n      expect(vm).toBeInstanceOf(Object);\n      expect(vm.constructor.name).toBe('Docsify');\n      expect(vm.$fetch).toBeInstanceOf(Function);\n      expect(vm.$resetEvents).toBeInstanceOf(Function);\n      expect(vm.route).toBeInstanceOf(Object);\n    });\n    await docsifyInit({\n      config: testConfig\n    });\n    expect(typeof Docsify).toBe('object');\n    expect(testConfig).toHaveBeenCalled();\n  });","file":"integration/docsify.test.js","skipped":false,"dir":"test"},{"name":"provides the hooks and vm API to plugins","suites":["Docsify"],"updatePoint":{"line":22,"column":48,"index":834},"line":22,"code":"  test('provides the hooks and vm API to plugins', async () => {\n    const testConfig = jest.fn(vm => {\n      const vm1 = vm;\n      return {\n        plugins: [function (hook, vm2) {\n          expect(vm1).toEqual(vm2);\n          expect(hook.init).toBeInstanceOf(Function);\n          expect(hook.beforeEach).toBeInstanceOf(Function);\n          expect(hook.afterEach).toBeInstanceOf(Function);\n          expect(hook.doneEach).toBeInstanceOf(Function);\n          expect(hook.mounted).toBeInstanceOf(Function);\n          expect(hook.ready).toBeInstanceOf(Function);\n        }]\n      };\n    });\n    await docsifyInit({\n      config: testConfig\n    });\n    expect(typeof Docsify).toBe('object');\n    expect(testConfig).toHaveBeenCalled();\n  });","file":"integration/docsify.test.js","skipped":false,"dir":"test"},{"name":"Renders native emoji characters (nativeEmoji:true)","suites":["Emoji"],"updatePoint":{"line":25,"column":58,"index":525},"line":25,"code":"  test('Renders native emoji characters (nativeEmoji:true)', async () => {\n    await docsifyInit({\n      config: {\n        nativeEmoji: true\n      },\n      markdown: {\n        homepage: emojiMarkdown\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Renders GitHub emoji images (nativeEmoji:false)","suites":["Emoji"],"updatePoint":{"line":39,"column":55,"index":872},"line":39,"code":"  test('Renders GitHub emoji images (nativeEmoji:false)', async () => {\n    await docsifyInit({\n      config: {\n        nativeEmoji: false\n      },\n      markdown: {\n        homepage: emojiMarkdown\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores all emoji shorthand codes (noEmoji:true)","suites":["Emoji"],"updatePoint":{"line":53,"column":56,"index":1221},"line":53,"code":"  test('Ignores all emoji shorthand codes (noEmoji:true)', async () => {\n    await docsifyInit({\n      config: {\n        noEmoji: true\n      },\n      markdown: {\n        homepage: emojiMarkdown\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores unmatched emoji shorthand codes","suites":["Emoji"],"updatePoint":{"line":67,"column":47,"index":1556},"line":67,"code":"  test('Ignores unmatched emoji shorthand codes', async () => {\n    await docsifyInit({\n      markdown: {\n        homepage: `\n          hh:mm\n\n          hh:mm:ss\n\n          Namespace::SubNameSpace\n\n          Namespace::SubNameSpace::Class\n\n          2014-12-29T16:11:20+00:00\n        `\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores emoji shorthand codes in comments","suites":["Emoji"],"updatePoint":{"line":88,"column":49,"index":1994},"line":88,"code":"  test('Ignores emoji shorthand codes in comments', async () => {\n    await docsifyInit({\n      markdown: {\n        homepage: 'Text <!-- :foo: :100: -->'\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores emoji shorthand codes in URIs","suites":["Emoji"],"updatePoint":{"line":99,"column":45,"index":2294},"line":99,"code":"  test('Ignores emoji shorthand codes in URIs', async () => {\n    await docsifyInit({\n      markdown: {\n        homepage: 'Url https://docsify.js.org/:foo:/ http://docsify.js.org/:100:/ ftp://docsify.js.org/:smile:/'\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores emoji shorthand codes in URIs while handling anchor content","suites":["Emoji"],"updatePoint":{"line":110,"column":75,"index":2691},"line":110,"code":"  test('Ignores emoji shorthand codes in URIs while handling anchor content', async () => {\n    await docsifyInit({\n      markdown: {\n        homepage: 'Achor tags [:100:](http://docsify.js.org/:100:/)'\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores emoji shorthand codes in html attributes","suites":["Emoji"],"updatePoint":{"line":121,"column":56,"index":3025},"line":121,"code":"  test('Ignores emoji shorthand codes in html attributes', async () => {\n    await docsifyInit({\n      markdown: {\n        homepage: `<a href=\"http://domain.com/:smile:/\"> <img src='http://domain.com/:smile:/file.png'> <script src=http://domain.com/:smile:/file.js></script>`\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores emoji shorthand codes in style url() values","suites":["Emoji"],"updatePoint":{"line":132,"column":59,"index":3454},"line":132,"code":"  test('Ignores emoji shorthand codes in style url() values', async () => {\n    await docsifyInit({\n      markdown: {\n        homepage: `<style>@import url(http://domain.com/:smile/file.css);</style>`\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Ignores emoji shorthand codes in code, pre, script, and template tags","suites":["Emoji"],"updatePoint":{"line":143,"column":77,"index":3823},"line":143,"code":"  test('Ignores emoji shorthand codes in code, pre, script, and template tags', async () => {\n    await docsifyInit({\n      markdown: {\n        homepage: `\n          <pre>:100:</pre>\n\n          <code>:100:</code>\n\n          <script>\n            var test = ':100:';\n          </script>\n\n          <template>\n            <p>:100</p>\n          </template>\n        `\n      }\n      // _logHTML: true,\n    });\n\n    const mainElm = document.querySelector('#main');\n    expect(mainElm.innerHTML).toMatchSnapshot();\n  });","file":"integration/emoji.test.js","skipped":false,"dir":"test"},{"name":"Docsify /docs/ site using docsifyInit()","suites":["Example Tests"],"updatePoint":{"line":12,"column":47,"index":404},"line":12,"code":"  test('Docsify /docs/ site using docsifyInit()', async () => {\n    await docsifyInit({\n      config: {\n        basePath: '/docs/'\n      }\n      // _logHTML: true,\n    });\n\n    // Verify config options\n    expect(typeof window.$docsify).toBe('object');\n\n    // Verify options.markdown content was rendered\n    expect(document.querySelector('#main').textContent).toContain('A magical documentation site generator');\n  });","file":"integration/example.test.js","skipped":false,"dir":"test"},{"name":"kitchen sink docsify site using docsifyInit()","suites":["Example Tests"],"updatePoint":{"line":26,"column":53,"index":831},"line":26,"code":"  test('kitchen sink docsify site using docsifyInit()', async () => {\n    const docsifyInitConfig = {\n      config: {\n        name: 'Docsify Name',\n        themeColor: 'red'\n      },\n      markdown: {\n        coverpage: `\n          # Docsify Test\n\n          > Testing a magical documentation site generator\n\n          [GitHub](https://github.com/docsifyjs/docsify/)\n        `,\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        navbar: `\n          - [docsify.js.org](https://docsify.js.org/#/)\n        `,\n        sidebar: `\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        'test.md': `\n          # Test Page\n\n          This is a custom route.\n        `,\n        'data-test-scripturls.js': `\n          document.body.setAttribute('data-test-scripturls', 'pass');\n        `\n      },\n      script: `\n        document.body.setAttribute('data-test-script', 'pass');\n      `,\n      scriptURLs: [\n      // docsifyInit() route\n      'data-test-scripturls.js',\n      // Server route\n      '/lib/plugins/search.min.js'],\n      style: `\n        body {\n          background: red !important;\n        }\n      `,\n      styleURLs: ['/lib/themes/vue.css']\n    };\n    await docsifyInit({\n      ...docsifyInitConfig\n      // _logHTML: true,\n    });\n\n    // Verify config options\n    expect(typeof window.$docsify).toBe('object');\n    expect(window.$docsify).toHaveProperty('themeColor', 'red');\n    expect(document.querySelector('.app-name').textContent).toContain('Docsify Name');\n\n    // Verify docsifyInitConfig.markdown content was rendered\n    Object.entries({\n      'section.cover': 'Docsify Test',\n      // Coverpage\n      'nav.app-nav': 'docsify.js.org',\n      // Navbar\n      'aside.sidebar': 'Test Page',\n      // Sidebar\n      '#main': 'This is the homepage' // Homepage\n    }).forEach(([selector, content]) => {\n      expect(document.querySelector(selector).textContent).toContain(content);\n    });\n\n    // Verify docsifyInitConfig.scriptURLs were added to the DOM\n    for (const scriptURL of docsifyInitConfig.scriptURLs) {\n      const matchElm = document.querySelector(`script[data-src$=\"${scriptURL}\"]`);\n      expect(matchElm).toBeTruthy();\n    }\n\n    // Verify docsifyInitConfig.scriptURLs were executed\n    expect(document.body.hasAttribute('data-test-scripturls')).toBe(true);\n    expect(document.querySelector('.search input[type=\"search\"]')).toBeTruthy();\n\n    // Verify docsifyInitConfig.script was added to the DOM\n    expect([...document.querySelectorAll('script')].some(elm => elm.textContent.replace(/\\s+/g, '') === docsifyInitConfig.script.replace(/\\s+/g, ''))).toBe(true);\n\n    // Verify docsifyInitConfig.script was executed\n    expect(document.body.hasAttribute('data-test-script')).toBe(true);\n\n    // Verify docsifyInitConfig.styleURLs were added to the DOM\n    for (const styleURL of docsifyInitConfig.styleURLs) {\n      const matchElm = document.querySelector(`link[rel*=\"stylesheet\"][href$=\"${styleURL}\"]`);\n      expect(matchElm).toBeTruthy();\n    }\n\n    // Verify docsifyInitConfig.style was added to the DOM\n    expect([...document.querySelectorAll('style')].some(elm => elm.textContent.replace(/\\s+/g, '') === docsifyInitConfig.style.replace(/\\s+/g, ''))).toBe(true);\n\n    // Verify docsify navigation and docsifyInitConfig.routes\n    document.querySelector('a[href=\"#/test\"]').click();\n    expect(await waitForFunction(() => /#\\/test$/.test(window.location.href))).toBeTruthy();\n    expect(await waitForText('#main', 'This is a custom route')).toBeTruthy();\n  });","file":"integration/example.test.js","skipped":false,"dir":"test"},{"name":"APIs are available","suites":["Global APIs"],"updatePoint":{"line":8,"column":26,"index":306},"line":8,"code":"  test('APIs are available', () => {\n    initGlobalAPI();\n    expect(typeof window.Docsify).toBe('object');\n    expect(typeof window.Docsify.util).toBe('object');\n    expect(typeof window.Docsify.dom).toBe('object');\n    expect(typeof window.Docsify.get).toBe('function');\n    expect(typeof window.Docsify.slugify).toBe('function');\n    expect(typeof window.Docsify.version).toBe('string');\n    expect(typeof window.DocsifyCompiler).toBe('function');\n    expect(typeof window.marked).toBe('function');\n    expect(typeof window.Prism).toBe('object');\n  });","file":"integration/global-apis.test.js","skipped":false,"dir":"test"},{"name":"important content","suites":["render","helpers"],"updatePoint":{"line":16,"column":27,"index":552},"line":16,"code":"    test('important content', () => {\n      const output = window.marked('!> Important content');\n      expect(output).toMatchInlineSnapshot(`\"<p class=\\\\\"tip\\\\\">Important content</p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"general tip","suites":["render","helpers"],"updatePoint":{"line":20,"column":21,"index":742},"line":20,"code":"    test('general tip', () => {\n      const output = window.marked('?> General tip');\n      expect(output).toMatchInlineSnapshot(`\"<p class=\\\\\"warn\\\\\">General tip</p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"as unordered task list","suites":["render","lists"],"updatePoint":{"line":29,"column":32,"index":1065},"line":29,"code":"    test('as unordered task list', async function () {\n      const output = window.marked(stripIndent`\n        - [x] Task 1\n        - [ ] Task 2\n        - [ ] Task 3\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ul class=\\\\\"task-list\\\\\"><li class=\\\\\"task-list-item\\\\\"><label><input checked=\\\\\"\\\\\" disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 1</label></li><li class=\\\\\"task-list-item\\\\\"><label><input disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 2</label></li><li class=\\\\\"task-list-item\\\\\"><label><input disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 3</label></li></ul>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"as ordered task list","suites":["render","lists"],"updatePoint":{"line":37,"column":30,"index":1646},"line":37,"code":"    test('as ordered task list', async function () {\n      const output = window.marked(stripIndent`\n        1. [ ] Task 1\n        2. [x] Task 2\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ol class=\\\\\"task-list\\\\\"><li class=\\\\\"task-list-item\\\\\"><label><input disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 1</label></li><li class=\\\\\"task-list-item\\\\\"><label><input checked=\\\\\"\\\\\" disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 2</label></li></ol>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"normal unordered","suites":["render","lists"],"updatePoint":{"line":44,"column":26,"index":2103},"line":44,"code":"    test('normal unordered', async function () {\n      const output = window.marked(stripIndent`\n        - [linktext](link)\n        - just text\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ul ><li><a href=\\\\\"#/link\\\\\" >linktext</a></li><li>just text</li></ul>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"unordered with custom start","suites":["render","lists"],"updatePoint":{"line":51,"column":37,"index":2397},"line":51,"code":"    test('unordered with custom start', async function () {\n      const output = window.marked(stripIndent`\n        1. first\n        2. second\n\n        text\n\n        3. third\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ol ><li>first</li><li>second</li></ol><p>text</p><ol start=\\\\\"3\\\\\"><li>third</li></ol>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"nested","suites":["render","lists"],"updatePoint":{"line":62,"column":16,"index":2706},"line":62,"code":"    test('nested', async function () {\n      const output = window.marked(stripIndent`\n        - 1\n        - 2\n          - 2 a\n          - 2 b\n        - 3\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ul ><li>1</li><li>2<ul ><li>2 a</li><li>2 b</li></ul></li><li>3</li></ul>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"regular","suites":["render","images"],"updatePoint":{"line":77,"column":17,"index":3139},"line":77,"code":"    test('regular', async function () {\n      const output = window.marked('![alt text](http://imageUrl)');\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\"></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"class","suites":["render","images"],"updatePoint":{"line":81,"column":15,"index":3394},"line":81,"code":"    test('class', async function () {\n      const output = window.marked(\"![alt text](http://imageUrl ':class=someCssClass')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" class=\\\\\"someCssClass\\\\\" /></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"id","suites":["render","images"],"updatePoint":{"line":85,"column":12,"index":3695},"line":85,"code":"    test('id', async function () {\n      const output = window.marked(\"![alt text](http://imageUrl ':id=someCssID')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" id=\\\\\"someCssID\\\\\" /></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"no-zoom","suites":["render","images"],"updatePoint":{"line":89,"column":17,"index":3989},"line":89,"code":"    test('no-zoom', async function () {\n      const output = window.marked(\"![alt text](http://imageUrl ':no-zoom')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" data-no-zoom /></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"width and height","suites":["render","images","size"],"updatePoint":{"line":94,"column":28,"index":4318},"line":94,"code":"      test('width and height', async function () {\n        const output = window.marked(\"![alt text](http://imageUrl ':size=WIDTHxHEIGHT')\");\n        expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" width=\\\\\"WIDTH\\\\\" height=\\\\\"HEIGHT\\\\\" /></p>\"`);\n      });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"width","suites":["render","images","size"],"updatePoint":{"line":98,"column":17,"index":4642},"line":98,"code":"      test('width', async function () {\n        const output = window.marked(\"![alt text](http://imageUrl ':size=50')\");\n        expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" width=\\\\\"50\\\\\" /></p>\"`);\n      });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h1","suites":["render","headings"],"updatePoint":{"line":108,"column":12,"index":5075},"line":108,"code":"    test('h1', async function () {\n      const output = window.marked('# h1 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h1 id=\\\\\"h1-tag\\\\\"><a href=\\\\\"#/?id=h1-tag\\\\\" data-id=\\\\\"h1-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h1 tag</span></a></h1>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h2","suites":["render","headings"],"updatePoint":{"line":112,"column":12,"index":5331},"line":112,"code":"    test('h2', async function () {\n      const output = window.marked('## h2 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h2 id=\\\\\"h2-tag\\\\\"><a href=\\\\\"#/?id=h2-tag\\\\\" data-id=\\\\\"h2-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h2 tag</span></a></h2>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h3","suites":["render","headings"],"updatePoint":{"line":116,"column":12,"index":5588},"line":116,"code":"    test('h3', async function () {\n      const output = window.marked('### h3 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h3 id=\\\\\"h3-tag\\\\\"><a href=\\\\\"#/?id=h3-tag\\\\\" data-id=\\\\\"h3-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h3 tag</span></a></h3>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h4","suites":["render","headings"],"updatePoint":{"line":120,"column":12,"index":5846},"line":120,"code":"    test('h4', async function () {\n      const output = window.marked('#### h4 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h4 id=\\\\\"h4-tag\\\\\"><a href=\\\\\"#/?id=h4-tag\\\\\" data-id=\\\\\"h4-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h4 tag</span></a></h4>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h5","suites":["render","headings"],"updatePoint":{"line":124,"column":12,"index":6105},"line":124,"code":"    test('h5', async function () {\n      const output = window.marked('##### h5 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h5 id=\\\\\"h5-tag\\\\\"><a href=\\\\\"#/?id=h5-tag\\\\\" data-id=\\\\\"h5-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h5 tag</span></a></h5>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h6","suites":["render","headings"],"updatePoint":{"line":128,"column":12,"index":6365},"line":128,"code":"    test('h6', async function () {\n      const output = window.marked('###### h6 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h6 id=\\\\\"h6-tag\\\\\"><a href=\\\\\"#/?id=h6-tag\\\\\" data-id=\\\\\"h6-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h6 tag</span></a></h6>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"regular","suites":["render","link"],"updatePoint":{"line":134,"column":17,"index":6670},"line":134,"code":"    test('regular', async function () {\n      const output = window.marked('[alt text](http://url)');\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"linkrel","suites":["render","link"],"updatePoint":{"line":138,"column":17,"index":6914},"line":138,"code":"    test('linkrel', async function () {\n      // const { docsify } = await init('default', {\n      //   externalLinkTarget: '_blank',\n      //   externalLinkRel: 'noopener',\n      // });\n      const output = window.marked('[alt text](http://www.example.com)');\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://www.example.com\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"disabled","suites":["render","link"],"updatePoint":{"line":146,"column":18,"index":7330},"line":146,"code":"    test('disabled', async function () {\n      const output = window.marked(\"[alt text](http://url ':disabled')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"javascript:void(0)\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\" disabled>alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"target","suites":["render","link"],"updatePoint":{"line":150,"column":16,"index":7602},"line":150,"code":"    test('target', async function () {\n      const output = window.marked(\"[alt text](http://url ':target=_self')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_self\\\\\" >alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"class","suites":["render","link"],"updatePoint":{"line":154,"column":15,"index":7840},"line":154,"code":"    test('class', async function () {\n      const output = window.marked(\"[alt text](http://url ':class=someCssClass')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\" class=\\\\\"someCssClass\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"id","suites":["render","link"],"updatePoint":{"line":158,"column":12,"index":8126},"line":158,"code":"    test('id', async function () {\n      const output = window.marked(\"[alt text](http://url ':id=someCssID')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\" id=\\\\\"someCssID\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"non external local url with one /","suites":["core/util","isExternal()"],"updatePoint":{"line":12,"column":43,"index":386},"line":12,"code":"    test('non external local url with one /', () => {\n      const result = isExternal(`/${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external local url with two //","suites":["core/util","isExternal()"],"updatePoint":{"line":16,"column":44,"index":553},"line":16,"code":"    test('non external local url with two //', () => {\n      const result = isExternal(`//${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external local url with three ///","suites":["core/util","isExternal()"],"updatePoint":{"line":20,"column":47,"index":724},"line":20,"code":"    test('non external local url with three ///', () => {\n      const result = isExternal(`///${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external local url with more /","suites":["core/util","isExternal()"],"updatePoint":{"line":24,"column":44,"index":893},"line":24,"code":"    test('non external local url with more /', () => {\n      const result = isExternal(`//////////////////${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external url with one /","suites":["core/util","isExternal()"],"updatePoint":{"line":28,"column":37,"index":1070},"line":28,"code":"    test('non external url with one /', () => {\n      const result = isExternal('/example.github.io/docsify/demo.md');\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with two //","suites":["core/util","isExternal()"],"updatePoint":{"line":34,"column":34,"index":1254},"line":34,"code":"    test('external url with two //', () => {\n      const result = isExternal('/docsify/demo.md');\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with three ///","suites":["core/util","isExternal()"],"updatePoint":{"line":38,"column":37,"index":1397},"line":38,"code":"    test('external url with three ///', () => {\n      const result = isExternal('///example.github.io/docsify/demo.md');\n      expect(result).toBeTruthy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with more /","suites":["core/util","isExternal()"],"updatePoint":{"line":42,"column":34,"index":1558},"line":42,"code":"    test('external url with more /', () => {\n      const result = isExternal('//////////////////example.github.io/docsify/demo.md');\n      expect(result).toBeTruthy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with one \\","suites":["core/util","isExternal()"],"updatePoint":{"line":46,"column":34,"index":1734},"line":46,"code":"    test('external url with one \\\\', () => {\n      const result = isExternal('/\\\\example.github.io/docsify/demo.md');\n      expect(result).toBeTruthy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with two \\","suites":["core/util","isExternal()"],"updatePoint":{"line":50,"column":34,"index":1895},"line":50,"code":"    test('external url with two \\\\', () => {\n      const result = isExternal('/\\\\\\\\example.github.io/docsify/demo.md');\n      expect(result).toBeTruthy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"dom manipulation (jsdom)","suites":["Example Tests","Jest & JSDOM basics"],"updatePoint":{"line":16,"column":34,"index":657},"line":16,"code":"    test('dom manipulation (jsdom)', () => {\n      const testText = 'This is a test';\n      const testHTML = `<h1>Test</h1><p>${testText}</p>`;\n\n      // Inject HTML\n      document.body.innerHTML = testHTML;\n\n      // Add class to <body> element and verify\n      document.body.classList.add('foo');\n\n      // Test HTML\n      expect(document.body.getAttribute('class')).toBe('foo');\n      expect(document.body.textContent).toMatch(/Test/);\n      expect(document.querySelectorAll('p')).toHaveLength(1);\n      expect(document.querySelector('p').textContent).toBe(testText);\n      expect(document.querySelector('table')).toBeNull();\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"snapshot (jsdom)","suites":["Example Tests","Jest & JSDOM basics"],"updatePoint":{"line":36,"column":26,"index":1361},"line":36,"code":"    test('snapshot (jsdom)', () => {\n      const testText = 'This is a test';\n      const testHTML = `<h1>Test</h1><p>${testText}</p>`;\n\n      // Inject HTML\n      document.body.innerHTML = testHTML;\n\n      // Add class to <body> element and verify\n      document.body.classList.add('foo');\n      const documentHTML = document.documentElement.outerHTML;\n\n      // Test snapshots\n      expect(documentHTML).toMatchSnapshot(); // See __snapshots__\n      expect(documentHTML).toMatchInlineSnapshot(`\"<html><head></head><body class=\\\\\"foo\\\\\"><h1>Test</h1><p>This is a test</p></body></html>\"`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"mock import/require dependency using jest.fn()","suites":["Example Tests","Mocks & Spies"],"updatePoint":{"line":62,"column":56,"index":2307},"line":62,"code":"    test('mock import/require dependency using jest.fn()', () => {\n      const testModule = require('./fixtures/get-time-of-day.js');\n      const {\n        greet: testGreet\n      } = require('./fixtures/greet.js');\n      testModule.getTimeOfDay = jest.fn(() => 'day');\n      const timeOfDay = testModule.getTimeOfDay();\n      const greeting = testGreet('John');\n      expect(timeOfDay).toBe('day');\n      expect(greeting).toBe(`Good day, John!`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"mock import/require dependency using jest.doMock()","suites":["Example Tests","Mocks & Spies"],"updatePoint":{"line":73,"column":60,"index":2766},"line":73,"code":"    test('mock import/require dependency using jest.doMock()', () => {\n      const mockModulePath = './fixtures/get-time-of-day.js';\n      jest.doMock(mockModulePath, () => ({\n        __esModule: true,\n        getTimeOfDay: jest.fn(() => 'night')\n      }));\n      const mockGetTimeOfDay = require(mockModulePath).getTimeOfDay;\n      const {\n        greet: testGreet\n      } = require('./fixtures/greet.js');\n      const timeOfDay = mockGetTimeOfDay();\n      const greeting = testGreet('John');\n      expect(timeOfDay).toBe('night');\n      expect(greeting).toBe(`Good night, John!`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"spy on native method using jest.spyOn()","suites":["Example Tests","Mocks & Spies"],"updatePoint":{"line":88,"column":49,"index":3346},"line":88,"code":"    test('spy on native method using jest.spyOn()', () => {\n      // Replace Math.random() implementation to return fixed value\n      jest.spyOn(Math, 'random').mockImplementation(() => 0.1);\n      expect(Math.random()).toBe(0.1);\n      expect(Math.random()).toBe(0.1);\n      expect(Math.random()).toBe(0.1);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"spy on import/require dependency using jest.spyOn()","suites":["Example Tests","Mocks & Spies"],"updatePoint":{"line":95,"column":61,"index":3675},"line":95,"code":"    test('spy on import/require dependency using jest.spyOn()', () => {\n      jest.spyOn(getTimeOfDayModule, 'getTimeOfDay').mockImplementation(() => 'night');\n      const timeOfDay = getTimeOfDay();\n      const greeting = greet('John');\n      expect(timeOfDay).toBe('night');\n      expect(greeting).toBe(`Good night, John!`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"document.querySelector with id=pure number","suites":["Example Tests","Verify Special Changes Test Case"],"updatePoint":{"line":104,"column":52,"index":4068},"line":104,"code":"    test('document.querySelector with id=pure number', () => {\n      const testText = 'This is a test';\n      const testHTML = `<div id=24><p>${testText}</p></div>`;\n\n      // Inject HTML\n      document.body.innerHTML = testHTML;\n      expect(() => {\n        document.querySelector('#24');\n      }).toThrow(DOMException);\n      expect(document.querySelector(\"[id='24']\").textContent).toBe(testText);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"removeAtag from a link","suites":["core/render/utils","removeAtag()"],"updatePoint":{"line":19,"column":32,"index":538},"line":19,"code":"    test('removeAtag from a link', () => {\n      const result = removeAtag('<a href=\"www.example.com\">content</a>');\n      expect(result).toBe('content');\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"getAndRemoveDocisfyIgnorConfig from <!-- {docsify-ignore} -->","suites":["core/render/utils","getAndRemoveDocisfyIgnorConfig()"],"updatePoint":{"line":28,"column":71,"index":921},"line":28,"code":"    test('getAndRemoveDocisfyIgnorConfig from <!-- {docsify-ignore} -->', () => {\n      const {\n        content,\n        ignoreAllSubs,\n        ignoreSubHeading\n      } = getAndRemoveDocisfyIgnorConfig('My Ignore Title<!-- {docsify-ignore} -->');\n      expect(content).toBe('My Ignore Title');\n      expect(ignoreSubHeading).toBeTruthy();\n      expect(ignoreAllSubs === undefined).toBeTruthy();\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"getAndRemoveDocisfyIgnorConfig from <!-- {docsify-ignore-all} -->","suites":["core/render/utils","getAndRemoveDocisfyIgnorConfig()"],"updatePoint":{"line":38,"column":75,"index":1328},"line":38,"code":"    test('getAndRemoveDocisfyIgnorConfig from <!-- {docsify-ignore-all} -->', () => {\n      const {\n        content,\n        ignoreAllSubs,\n        ignoreSubHeading\n      } = getAndRemoveDocisfyIgnorConfig('My Ignore Title<!-- {docsify-ignore-all} -->');\n      expect(content).toBe('My Ignore Title');\n      expect(ignoreAllSubs).toBeTruthy();\n      expect(ignoreSubHeading === undefined).toBeTruthy();\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"getAndRemoveDocisfyIgnorConfig from {docsify-ignore}","suites":["core/render/utils","getAndRemoveDocisfyIgnorConfig()"],"updatePoint":{"line":48,"column":62,"index":1726},"line":48,"code":"    test('getAndRemoveDocisfyIgnorConfig from {docsify-ignore}', () => {\n      const {\n        content,\n        ignoreAllSubs,\n        ignoreSubHeading\n      } = getAndRemoveDocisfyIgnorConfig('My Ignore Title{docsify-ignore}');\n      expect(content).toBe('My Ignore Title');\n      expect(ignoreSubHeading).toBeTruthy();\n      expect(ignoreAllSubs === undefined).toBeTruthy();\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"getAndRemoveDocisfyIgnorConfig from {docsify-ignore-all}","suites":["core/render/utils","getAndRemoveDocisfyIgnorConfig()"],"updatePoint":{"line":58,"column":66,"index":2115},"line":58,"code":"    test('getAndRemoveDocisfyIgnorConfig from {docsify-ignore-all}', () => {\n      const {\n        content,\n        ignoreAllSubs,\n        ignoreSubHeading\n      } = getAndRemoveDocisfyIgnorConfig('My Ignore Title{docsify-ignore-all}');\n      expect(content).toBe('My Ignore Title');\n      expect(ignoreAllSubs).toBeTruthy();\n      expect(ignoreSubHeading === undefined).toBeTruthy();\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"parse simple config","suites":["core/render/utils","getAndRemoveConfig()"],"updatePoint":{"line":73,"column":29,"index":2628},"line":73,"code":"    test('parse simple config', () => {\n      const result = getAndRemoveConfig(`[filename](_media/example.md ':include')`);\n      expect(result).toMatchObject({\n        config: {},\n        str: `[filename](_media/example.md ':include')`\n      });\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"parse config with arguments","suites":["core/render/utils","getAndRemoveConfig()"],"updatePoint":{"line":80,"column":37,"index":2892},"line":80,"code":"    test('parse config with arguments', () => {\n      const result = getAndRemoveConfig(`[filename](_media/example.md ':include :foo=bar :baz test')`);\n      expect(result).toMatchObject({\n        config: {\n          foo: 'bar',\n          baz: true\n        },\n        str: `[filename](_media/example.md ':include test')`\n      });\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"parse config with double quotes","suites":["core/render/utils","getAndRemoveConfig()"],"updatePoint":{"line":90,"column":41,"index":3235},"line":90,"code":"    test('parse config with double quotes', () => {\n      const result = getAndRemoveConfig(`[filename](_media/example.md \":include\")`);\n      expect(result).toMatchObject({\n        config: {},\n        str: `[filename](_media/example.md \":include\")`\n      });\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"remove html tag in tree","suites":["core/render/tpl"],"updatePoint":{"line":100,"column":31,"index":3539},"line":100,"code":"  test('remove html tag in tree', () => {\n    const result = tree([{\n      level: 2,\n      slug: '#/cover?id=basic-usage',\n      title: '<span style=\"color:red\">Basic usage</span>'\n    }, {\n      level: 2,\n      slug: '#/cover?id=custom-background',\n      title: 'Custom background'\n    }, {\n      level: 2,\n      slug: '#/cover?id=test',\n      title: '<img src=\"/docs/_media/favicon.ico\" data-origin=\"/_media/favicon.ico\" alt=\"ico\">Test'\n    }]);\n    expect(result).toBe(`<ul class=\"app-sub-sidebar\"><li><a class=\"section-link\" href=\"#/cover?id=basic-usage\" title=\"Basic usage\"><span style=\"color:red\">Basic usage</span></a></li><li><a class=\"section-link\" href=\"#/cover?id=custom-background\" title=\"Custom background\">Custom background</a></li><li><a class=\"section-link\" href=\"#/cover?id=test\" title=\"Test\"><img src=\"/docs/_media/favicon.ico\" data-origin=\"/_media/favicon.ico\" alt=\"ico\">Test</a></li></ul>`);\n  });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"slugify()","suites":["core/render/slugify"],"updatePoint":{"line":118,"column":17,"index":4487},"line":118,"code":"  test('slugify()', () => {\n    const result = slugify(`Bla bla bla <svg aria-label=\"broken\" class=\"broken\" viewPort=\"0 0 1 1\"><circle cx=\"0.5\" cy=\"0.5\"/></svg>`);\n    const result2 = slugify(`Another <span style=\"font-size: 1.2em\" class=\"foo bar baz\">broken <span class=\"aaa\">example</span></span>`);\n    expect(result).toBe(`bla-bla-bla-`);\n    expect(result2).toBe(`another-broken-example`);\n  });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"toURL","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":32,"column":15,"index":871},"line":32,"code":"    test('toURL', () => {\n      const url = history.toURL('guide.md', {}, '/zh-ch/');\n      expect(url).toBe('/zh-ch/guide');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL with double dot","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":36,"column":31,"index":1021},"line":36,"code":"    test('toURL with double dot', () => {\n      const url = history.toURL('../README.md', {}, '/zh-ch/');\n      expect(url).toBe('/README');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL child path","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":40,"column":26,"index":1165},"line":40,"code":"    test('toURL child path', () => {\n      const url = history.toURL('config/example.md', {}, '/zh-ch/');\n      expect(url).toBe('/zh-ch/config/example');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL absolute path","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":44,"column":29,"index":1331},"line":44,"code":"    test('toURL absolute path', () => {\n      const url = history.toURL('/README', {}, '/zh-ch/');\n      expect(url).toBe('/README');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL","suites":["router/history/base","relativePath: false"],"updatePoint":{"line":63,"column":15,"index":1916},"line":63,"code":"    test('toURL', () => {\n      const url = history.toURL('README', {}, '/zh-ch/');\n      expect(url).toBe('/README');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"resolvePath with filename","suites":["router/util","resolvePath()"],"updatePoint":{"line":11,"column":35,"index":353},"line":11,"code":"    test('resolvePath with filename', () => {\n      const result = resolvePath('hello.md');\n      expect(result).toBe('/hello.md');\n    });","file":"unit/router-util.test.js","skipped":false,"dir":"test"},{"name":"resolvePath with ./","suites":["router/util","resolvePath()"],"updatePoint":{"line":15,"column":29,"index":487},"line":15,"code":"    test('resolvePath with ./', () => {\n      const result = resolvePath('./hello.md');\n      expect(result).toBe('/hello.md');\n    });","file":"unit/router-util.test.js","skipped":false,"dir":"test"},{"name":"resolvePath with ../","suites":["router/util","resolvePath()"],"updatePoint":{"line":19,"column":30,"index":624},"line":19,"code":"    test('resolvePath with ../', () => {\n      const result = resolvePath('test/../hello.md');\n      expect(result).toBe('/hello.md');\n    });","file":"unit/router-util.test.js","skipped":false,"dir":"test"}]}