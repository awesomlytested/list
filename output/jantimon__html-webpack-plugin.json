{
    "repo": "jantimon/html-webpack-plugin",
    "url": "https://github.com/jantimon/html-webpack-plugin",
    "branch": "main",
    "configs": [
        {
            "package": "html-webpack-plugin",
            "lang": "js",
            "dir": "spec",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "generates a default index.html file for a single entry point",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 114,
                "column": 66
            },
            "line": 114,
            "code": "  it('generates a default index.html file for a single entry point', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"index_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "properly encodes file names in emitted URIs",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 125,
                "column": 49
            },
            "line": 125,
            "code": "  it('properly encodes file names in emitted URIs', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'foo/very fancy+name.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"foo\\/very%20fancy%2Bname.js\"><\\/script>[\\s]*<\\/head>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "generates a default index.html file with multiple entry points",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 147,
                "column": 68
            },
            "line": 147,
            "code": "  it('generates a default index.html file with multiple entry points', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to specify a custom loader without injection",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 161,
                "column": 61
            },
            "line": 161,
            "code": "  it('allows you to specify a custom loader without injection', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: 'pug-loader!' + path.join(__dirname, 'fixtures/template.pug')\n      })]\n    }, ['<script src=\"app_bundle.js', 'Some unique text'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should pass through loader errors",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 177,
                "column": 39
            },
            "line": 177,
            "code": "  it('should pass through loader errors', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      optimization: {\n        emitOnErrors: true\n      },\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/invalid.html')\n      })]\n    }, ['ReferenceError: foo is not defined'], null, done, true);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "uses a custom loader from webpacks config",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 196,
                "column": 47
            },
            "line": 196,
            "code": "  it('uses a custom loader from webpacks config', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      module: {\n        rules: [{\n          test: /\\.pug$/,\n          loader: 'pug-loader'\n        }]\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/template.pug')\n      })]\n    }, ['<script src=\"app_bundle.js', 'Some unique text'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "works when using html-loader",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 218,
                "column": 34
            },
            "line": 218,
            "code": "  it('works when using html-loader', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        template: 'html-loader!' + path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to specify your own HTML template file",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 234,
                "column": 55
            },
            "line": 234,
            "code": "  it('allows you to specify your own HTML template file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/test.html'),\n        inject: false\n      })]\n    }, ['<script src=\"app_bundle.js', 'Some unique text'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to use a function to map entry names to filenames",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 250,
                "column": 62
            },
            "line": 250,
            "code": "  it('allows to use a function to map entry names to filenames', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: entry => `${entry}.html`\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js'], 'app.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to use [name] for file names",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 265,
                "column": 41
            },
            "line": 265,
            "code": "  it('allows to use [name] for file names', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: '[name].html'\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js'], 'app.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "picks up src/index.ejs by default",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 280,
                "column": 39
            },
            "line": 280,
            "code": "  it('picks up src/index.ejs by default', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      context: path.join(__dirname, 'fixtures'),\n      entry: {\n        app: './index.js'\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js', 'src/index.ejs'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to inject the assets into a given html file",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 294,
                "column": 60
            },
            "line": 294,
            "code": "  it('allows you to inject the assets into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to inject the assets into the body of the given template",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 311,
                "column": 73
            },
            "line": 311,
            "code": "  it('allows you to inject the assets into the body of the given template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'body',\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to inject the assets into the head of the given template",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 328,
                "column": 73
            },
            "line": 328,
            "code": "  it('allows you to inject the assets into the head of the given template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'head',\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"util_bundle.js\"', '<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to inject a specified asset into a given html file",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 345,
                "column": 67
            },
            "line": 345,
            "code": "  it('allows you to inject a specified asset into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        chunks: ['app'],\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to inject a specified asset into a given html file",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 363,
                "column": 67
            },
            "line": 363,
            "code": "  it('allows you to inject a specified asset into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        excludeChunks: ['util'],\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to use chunkhash with asset into a given html file",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 381,
                "column": 67
            },
            "line": 381,
            "code": "  it('allows you to use chunkhash with asset into a given html file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/webpackconfig.html')\n      })]\n    }, [{\n      type: 'chunkhash',\n      chunkName: 'app',\n      containStr: '<script src=\"app_bundle.js\"'\n    }], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to disable injection",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 401,
                "column": 37
            },
            "line": 401,
            "code": "  it('allows you to disable injection', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<body></body>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to specify your own HTML template function",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 418,
                "column": 59
            },
            "line": 418,
            "code": "  it('allows you to specify your own HTML template function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'app_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        templateContent: function () {\n          return fs.readFileSync(path.join(__dirname, 'fixtures/plain.html'), 'utf8');\n        }\n      })]\n    }, ['<script defer=\"defer\" src=\"app_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "works with source maps",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 435,
                "column": 28
            },
            "line": 435,
            "code": "  it('works with source maps', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      devtool: 'source-map',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer src=\"index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "handles hashes in bundle filenames",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 447,
                "column": 40
            },
            "line": 447,
            "code": "  it('handles hashes in bundle filenames', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle_[hash].js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"index_bundle_[0-9a-f]+\\.js\"*/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "handles hashes in the directory which has the bundle file",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 458,
                "column": 63
            },
            "line": 458,
            "code": "  it('handles hashes in the directory which has the bundle file', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/dist/[hash]/',\n        filename: 'index_bundle_[hash].js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"\\/dist\\/[0-9a-f]+\\/index_bundle_[0-9a-f]+\\.js\"*/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to append hashes to the assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 470,
                "column": 43
            },
            "line": 470,
            "code": "  it('allows to append hashes to the assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js?%hash%\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to append hashes to the assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 483,
                "column": 43
            },
            "line": 483,
            "code": "  it('allows to append hashes to the assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        inject: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js?%hash%\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should work with the css extract plugin",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 497,
                "column": 45
            },
            "line": 497,
            "code": "  it('should work with the css extract plugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin(), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\" rel=\"stylesheet\">'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "works with a javascript returning loader like raw-loader",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 516,
                "column": 62
            },
            "line": 516,
            "code": "  it('works with a javascript returning loader like raw-loader', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      module: {\n        rules: [{\n          test: /\\.html$/,\n          use: ['raw-loader']\n        }]\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name].js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        template: path.join(__dirname, 'fixtures/plain.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"main.js\"', '<title>Example Plain file</title>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should work with the css extract plugin on windows and protocol relative urls support (#205)",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 536,
                "column": 98
            },
            "line": 536,
            "code": "  it('should work with the css extract plugin on windows and protocol relative urls support (#205)', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '//localhost:8080/'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin(), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"//localhost:8080/styles.css\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to add cache hashes to with the css assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 556,
                "column": 61
            },
            "line": 556,
            "code": "  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some/'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"/some/styles.css?%hash%\"'], path.join('subfolder', 'test.html'), done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to add cache hashes to with the css assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 579,
                "column": 61
            },
            "line": 579,
            "code": "  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"/some/styles.css?%hash%\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to add cache hashes to with the css assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 601,
                "column": 61
            },
            "line": 601,
            "code": "  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: 'some/'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"some/styles.css?%hash%\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to add cache hashes to with the css assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 623,
                "column": 61
            },
            "line": 623,
            "code": "  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css?%hash%\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to add cache hashes to with the css assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 644,
                "column": 61
            },
            "line": 644,
            "code": "  it('should allow to add cache hashes to with the css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"../styles.css?%hash%\"'], path.join('subfolder', 'test.html'), done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should inject css files when using the extract text plugin",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 666,
                "column": 64
            },
            "line": 666,
            "code": "  it('should inject css files when using the extract text plugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to add cache hashes to with injected css assets",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 687,
                "column": 66
            },
            "line": 687,
            "code": "  it('should allow to add cache hashes to with injected css assets', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        hash: true,\n        inject: true\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css?%hash%\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should output xhtml link stylesheet tag",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 709,
                "column": 45
            },
            "line": 709,
            "code": "  it('should output xhtml link stylesheet tag', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        xhtml: true,\n        minify: {\n          keepClosingSlash: true\n        }\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\" rel=\"stylesheet\"/>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "prepends the publicPath to function",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 733,
                "column": 41
            },
            "line": 733,
            "code": "  it('prepends the publicPath to function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n\n        publicPath() {\n          return '/';\n        }\n\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "prepends the publicPath to /some/",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 749,
                "column": 39
            },
            "line": 749,
            "code": "  it('prepends the publicPath to /some/', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/some/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "prepends the publicPath to /some",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 761,
                "column": 38
            },
            "line": 761,
            "code": "  it('prepends the publicPath to /some', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: '/some'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/some/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "prepends the publicPath to /some",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 773,
                "column": 38
            },
            "line": 773,
            "code": "  it('prepends the publicPath to /some', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: 'some/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"some/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "prepends the publicPath to undefined",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 785,
                "column": 42
            },
            "line": 785,
            "code": "  it('prepends the publicPath to undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "prepends the publicPath to undefined",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 796,
                "column": 42
            },
            "line": 796,
            "code": "  it('prepends the publicPath to undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"../index_bundle.js\"'], path.join('subfolder', 'test.html'), done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "prepends the publicPath to script defer=\"defer\" src",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 809,
                "column": 57
            },
            "line": 809,
            "code": "  it('prepends the publicPath to script defer=\"defer\" src', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        publicPath: 'http://cdn.example.com/assets/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"http://cdn.example.com/assets/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "handles subdirectories in the webpack output bundles",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 821,
                "column": 58
            },
            "line": 821,
            "code": "  it('handles subdirectories in the webpack output bundles', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: '/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"/assets/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to set public path to an empty string",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 833,
                "column": 50
            },
            "line": 833,
            "code": "  it('allows to set public path to an empty string', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: ''\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'foo/index.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"assets/index_bundle.js\"'], 'foo/index.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to set the html-webpack-plugin public path to an empty string",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 847,
                "column": 74
            },
            "line": 847,
            "code": "  it('allows to set the html-webpack-plugin public path to an empty string', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: '/'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'foo/index.html',\n        publicPath: ''\n      })]\n    }, ['<script defer=\"defer\" src=\"assets/index_bundle.js\"'], 'foo/index.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "handles subdirectories in the webpack output bundles along with a relative path",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 862,
                "column": 85
            },
            "line": 862,
            "code": "  it('handles subdirectories in the webpack output bundles along with a relative path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"assets/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "handles subdirectories in the webpack output bundles along with a relative path",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 873,
                "column": 85
            },
            "line": 873,
            "code": "  it('handles subdirectories in the webpack output bundles along with a relative path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"../assets/index_bundle.js\"'], path.join('subfolder', 'test.html'), done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "handles subdirectories in the webpack output bundles along with a absolute path",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 886,
                "column": 85
            },
            "line": 886,
            "code": "  it('handles subdirectories in the webpack output bundles along with a absolute path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js',\n        publicPath: 'http://cdn.example.com/'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, ['<script defer=\"defer\" src=\"http://cdn.example.com/assets/index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to configure the title of the generated HTML page",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 898,
                "column": 66
            },
            "line": 898,
            "code": "  it('allows you to configure the title of the generated HTML page', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        title: 'My Cool App'\n      })]\n    }, ['<title>My Cool App</title>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to configure the output filename",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 911,
                "column": 49
            },
            "line": 911,
            "code": "  it('allows you to configure the output filename', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], 'test.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "will replace [hash] in the filename with the child compilation hash",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 924,
                "column": 73
            },
            "line": 924,
            "code": "  it('will replace [hash] in the filename with the child compilation hash', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'test-[hash].html'\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], /test-\\S+\\.html$/, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should work with hash options provided in output options",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 937,
                "column": 62
            },
            "line": 937,
            "code": "  it('should work with hash options provided in output options', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js',\n        hashDigestLength: 16\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[contenthash].html'\n      })]\n    }, [], /index\\.[a-z0-9]{16}\\.html/, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow filename in the format of [contenthash:<length>]",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 953,
                "column": 67
            },
            "line": 953,
            "code": "  it('should allow filename in the format of [contenthash:<length>]', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[contenthash:4].html'\n      })]\n    }, [], /index\\.[a-z0-9]{4}\\.html/, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "will replace [contenthash] in the filename with a content hash of 32 hex characters",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 968,
                "column": 89
            },
            "line": 968,
            "code": "  it('will replace [contenthash] in the filename with a content hash of 32 hex characters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[contenthash].html'\n      })]\n    }, [], /index\\.[a-f0-9]{20}\\.html/, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "will replace [templatehash] in the filename with a content hash of 32 hex characters",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 983,
                "column": 90
            },
            "line": 983,
            "code": "  it('will replace [templatehash] in the filename with a content hash of 32 hex characters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'index.[templatehash].html'\n      })]\n    }, [], /index\\.[a-f0-9]{20}\\.html/, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to use an absolute output filename",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 998,
                "column": 51
            },
            "line": 998,
            "code": "  it('allows you to use an absolute output filename', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"../index_bundle.js\"'], path.join('subfolder', 'test.html'), done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to use an absolute output filename outside the output path",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1011,
                "column": 75
            },
            "line": 1011,
            "code": "  it('allows you to use an absolute output filename outside the output path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: path.join(OUTPUT_DIR, 'app'),\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: path.resolve(OUTPUT_DIR, 'test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"app/index_bundle.js\"'], 'test.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to use an relative output filename outside the output path",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1024,
                "column": 75
            },
            "line": 1024,
            "code": "  it('allows you to use an relative output filename outside the output path', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: path.join(OUTPUT_DIR, 'app'),\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: '../test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"app/index_bundle.js\"'], 'test.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "will try to use a relative name if the filename is in a subdirectory",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1037,
                "column": 74
            },
            "line": 1037,
            "code": "  it('will try to use a relative name if the filename is in a subdirectory', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'assets/test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"../index_bundle.js\"'], 'assets/test.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "will try to use a relative name if the filename and the script defer=\"defer\" are in a subdirectory",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1050,
                "column": 104
            },
            "line": 1050,
            "code": "  it('will try to use a relative name if the filename and the script defer=\"defer\" are in a subdirectory', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'assets/index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        filename: 'assets/demo/test.html'\n      })]\n    }, ['<script defer=\"defer\" src=\"../../assets/index_bundle.js\"'], 'assets/demo/test.html', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you write multiple HTML files",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1063,
                "column": 42
            },
            "line": 1063,
            "code": "  it('allows you write multiple HTML files', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), new HtmlWebpackPlugin({\n        filename: 'second-file.html',\n        template: path.join(__dirname, 'fixtures/test.html')\n      }), new HtmlWebpackPlugin({\n        filename: 'third-file.html',\n        template: path.join(__dirname, 'fixtures/test.html')\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"'], null, () => {\n      expect(fs.existsSync(path.join(OUTPUT_DIR, 'second-file.html'))).toBe(true);\n      expect(fs.existsSync(path.join(OUTPUT_DIR, 'third-file.html'))).toBe(true);\n      done();\n    });\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should inject js css files even if the html file is incomplete",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1086,
                "column": 68
            },
            "line": 1086,
            "code": "  it('should inject js css files even if the html file is incomplete', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/empty_html.html')\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, ['<link href=\"styles.css\"', '<script defer=\"defer\" src=\"index_bundle.js\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "exposes the webpack configuration to templates",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1107,
                "column": 52
            },
            "line": 1107,
            "code": "  it('exposes the webpack configuration to templates', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: 'https://cdn.com',\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/webpackconfig.html')\n      })]\n    }, ['Public path is https://cdn.com'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "fires the html-webpack-plugin-alter-asset-tags event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1123,
                "column": 58
            },
            "line": 1123,
            "code": "  it('fires the html-webpack-plugin-alter-asset-tags event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            expect(Object.keys(object.assetTags)).toEqual(['scripts', 'styles', 'meta']);\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows events to add a no-value attribute",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1152,
                "column": 47
            },
            "line": 1152,
            "code": "  it('allows events to add a no-value attribute', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.specialAttribute = true;\n              }\n\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/[\\s]*<script defer=\"defer\" src=\"app_bundle.js\" specialattribute><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows events to remove an attribute by setting it to false",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1181,
                "column": 65
            },
            "line": 1181,
            "code": "  it('allows events to remove an attribute by setting it to false', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.async = false;\n              }\n\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows events to remove an attribute by setting it to null",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1210,
                "column": 64
            },
            "line": 1210,
            "code": "  it('allows events to remove an attribute by setting it to null', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.async = null;\n              }\n\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows events to remove an attribute by setting it to undefined",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1239,
                "column": 69
            },
            "line": 1239,
            "code": "  it('allows events to remove an attribute by setting it to undefined', done => {\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            pluginArgs.assetTags.scripts = pluginArgs.assetTags.scripts.map(tag => {\n              if (tag.tagName === 'script') {\n                tag.attributes.async = undefined;\n              }\n\n              return tag;\n            });\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done, false, false);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "provides the options to the afterEmit event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1268,
                "column": 49
            },
            "line": 1268,
            "code": "  it('provides the options to the afterEmit event', done => {\n    let eventArgs;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterEmit.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            eventArgs = pluginArgs;\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        foo: 'bar'\n      }), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, () => {\n      expect(eventArgs.plugin.options.foo).toBe('bar');\n      done();\n    }, false, false);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "provides the outputName to the afterEmit event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1297,
                "column": 52
            },
            "line": 1297,
            "code": "  it('provides the outputName to the afterEmit event', done => {\n    let eventArgs;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterEmit.tapAsync('HtmlWebpackPluginTest', (pluginArgs, callback) => {\n            eventArgs = pluginArgs;\n            callback(null, pluginArgs);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [/<script defer=\"defer\" src=\"app_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, () => {\n      expect(eventArgs.outputName).toBe('index.html');\n      done();\n    }, false, false);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "fires the html-webpack-plugin-after-template-execution event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1324,
                "column": 66
            },
            "line": 1324,
            "code": "  it('fires the html-webpack-plugin-after-template-execution event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterTemplateExecution.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "fires the html-webpack-plugin-before-emit event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1352,
                "column": 53
            },
            "line": 1352,
            "code": "  it('fires the html-webpack-plugin-before-emit event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "fires the html-webpack-plugin-after-emit event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1380,
                "column": 52
            },
            "line": 1380,
            "code": "  it('fires the html-webpack-plugin-after-emit event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            callback();\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    });\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to modify the html during html-webpack-plugin-before-emit event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1407,
                "column": 76
            },
            "line": 1407,
            "code": "  it('allows to modify the html during html-webpack-plugin-before-emit event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.html += 'Injected by plugin';\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, ['Injected by plugin'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to access all hooks from within a plugin",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1436,
                "column": 53
            },
            "line": 1436,
            "code": "  it('allows to access all hooks from within a plugin', done => {\n    let hookNames;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          hookNames = Object.keys(HtmlWebpackPlugin.getHooks(compilation)).sort();\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(hookNames).toEqual(['afterEmit', 'afterTemplateExecution', 'alterAssetTagGroups', 'alterAssetTags', 'beforeAssetTagGeneration', 'beforeEmit']);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to modify sequentially the html during html-webpack-plugin-before-emit event by edit the given arguments object",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1461,
                "column": 124
            },
            "line": 1461,
            "code": "  it('allows to modify sequentially the html during html-webpack-plugin-before-emit event by edit the given arguments object', done => {\n    let eventFiredForFirstPlugin = false;\n    let eventFiredForSecondPlugin = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForFirstPlugin = true;\n            object.html += 'Injected by first plugin';\n            callback(null, object);\n          });\n        });\n      }\n    };\n    const secondExamplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForSecondPlugin = true;\n            object.html += ' Injected by second plugin';\n            callback(null);\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin, secondExamplePlugin]\n    }, ['Injected by first plugin Injected by second plugin'], null, () => {\n      expect(eventFiredForFirstPlugin).toBe(true);\n      expect(eventFiredForSecondPlugin).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to modify sequentially the html during html-webpack-plugin-before-emit event either by edit the given arguments object or by return a new object in the callback",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1503,
                "column": 173
            },
            "line": 1503,
            "code": "  it('allows to modify sequentially the html during html-webpack-plugin-before-emit event either by edit the given arguments object or by return a new object in the callback', done => {\n    let eventFiredForFirstPlugin = false;\n    let eventFiredForSecondPlugin = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForFirstPlugin = true;\n\n            const result = _.extend(object, {\n              html: object.html + 'Injected by first plugin'\n            });\n\n            callback(null, result);\n          });\n        });\n      }\n    };\n    const secondExamplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForSecondPlugin = true;\n            object.html += ' Injected by second plugin';\n            callback(null);\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin, secondExamplePlugin]\n    }, ['Injected by first plugin Injected by second plugin'], null, () => {\n      expect(eventFiredForFirstPlugin).toBe(true);\n      expect(eventFiredForSecondPlugin).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to modify sequentially the html during html-webpack-plugin-before-emit event by return a new object in the callback",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1549,
                "column": 128
            },
            "line": 1549,
            "code": "  it('allows to modify sequentially the html during html-webpack-plugin-before-emit event by return a new object in the callback', done => {\n    let eventFiredForFirstPlugin = false;\n    let eventFiredForSecondPlugin = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForFirstPlugin = true;\n\n            const result = _.extend(object, {\n              html: object.html + 'Injected by first plugin'\n            });\n\n            callback(null, result);\n          });\n        });\n      }\n    };\n    const secondExamplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFiredForSecondPlugin = true;\n\n            const result = _.extend(object, {\n              html: object.html + ' Injected by second plugin'\n            });\n\n            callback(null, result);\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin, secondExamplePlugin]\n    }, ['Injected by first plugin Injected by second plugin'], null, () => {\n      expect(eventFiredForFirstPlugin).toBe(true);\n      expect(eventFiredForSecondPlugin).toBe(true);\n      done();\n    });\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to modify the html during html-webpack-plugin-after-template-execution event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1598,
                "column": 89
            },
            "line": 1598,
            "code": "  it('allows to modify the html during html-webpack-plugin-after-template-execution event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).afterTemplateExecution.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.bodyTags.push(HtmlWebpackPlugin.createHtmlTagObject('script', {\n              src: 'funky-script.js'\n            }));\n            object.html += 'Injected by plugin';\n            callback();\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, ['Injected by plugin', '<script src=\"funky-script.js\"'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to modify the html during html-webpack-plugin-before-asset-tag-generation event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1630,
                "column": 92
            },
            "line": 1630,
            "code": "  it('allows to modify the html during html-webpack-plugin-before-asset-tag-generation event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeAssetTagGeneration.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.assets.js.push('funky-script.js');\n            callback();\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: false,\n        template: 'pug-loader!' + path.join(__dirname, 'fixtures/template.pug')\n      }), examplePlugin]\n    }, ['<script src=\"funky-script.js\"'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    });\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to inject files during html-webpack-plugin-before-asset-tag-generation event",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1661,
                "column": 89
            },
            "line": 1661,
            "code": "  it('allows to inject files during html-webpack-plugin-before-asset-tag-generation event', done => {\n    let eventFired = false;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          HtmlWebpackPlugin.getHooks(compilation).beforeAssetTagGeneration.tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n            eventFired = true;\n            object.assets.js.push('funky-script.js');\n            callback();\n          });\n        });\n      }\n    };\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, ['<script defer=\"defer\" src=\"funky-script.js\"'], null, () => {\n      expect(eventFired).toBe(true);\n      done();\n    });\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "fires the events in the correct order",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1689,
                "column": 43
            },
            "line": 1689,
            "code": "  it('fires the events in the correct order', done => {\n    const hookCallOrder = ['beforeAssetTagGeneration', 'alterAssetTags', 'alterAssetTagGroups', 'afterTemplateExecution', 'beforeEmit', 'afterEmit'];\n    let eventsFired = [];\n    let hookLength = 0;\n    const examplePlugin = {\n      apply: function (compiler) {\n        compiler.hooks.compilation.tap('HtmlWebpackPlugin', compilation => {\n          const hooks = HtmlWebpackPlugin.getHooks(compilation);\n          hookLength = hooks.length; // Hook into all hooks\n\n          Object.keys(hooks).forEach(hookName => {\n            hooks[hookName].tapAsync('HtmlWebpackPluginTest', (object, callback) => {\n              eventsFired.push(hookName);\n              callback();\n            });\n          });\n        });\n      }\n    };\n    const shouldExpectWarnings = webpackMajorVersion < 4;\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin(), examplePlugin]\n    }, [], null, () => {\n      expect(hookLength).not.toBe(0);\n      expect(eventsFired).toEqual(hookCallOrder);\n      done();\n    }, false, shouldExpectWarnings);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "works with commons chunk plugin",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1725,
                "column": 37
            },
            "line": 1725,
            "code": "  it('works with commons chunk plugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      optimization: {\n        splitChunks: {\n          cacheGroups: {\n            commons: {\n              chunks: 'initial',\n              name: 'common',\n              enforce: true\n            }\n          }\n        }\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<script defer=\"defer\" src=\"common_bundle.js\">[\\s\\S]*<script defer=\"defer\" src=\"util_bundle.js\">/, /<script defer=\"defer\" src=\"common_bundle.js\"[\\s\\S]*<script defer=\"defer\" src=\"index_bundle.js\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1750,
                "column": 20
            },
            "line": 1750,
            "code": "  it('adds a favicon', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a base tag with attributes",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1763,
                "column": 37
            },
            "line": 1763,
            "code": "  it('adds a base tag with attributes', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        base: {\n          href: 'http://example.com/page.html',\n          target: '_blank'\n        }\n      })]\n    }, [/<base href=\"http:\\/\\/example\\.com\\/page\\.html\" target=\"_blank\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a base tag short syntax",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1779,
                "column": 34
            },
            "line": 1779,
            "code": "  it('adds a base tag short syntax', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        base: 'http://example.com/page.html'\n      })]\n    }, [/<base href=\"http:\\/\\/example\\.com\\/page\\.html\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a meta tag",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1792,
                "column": 21
            },
            "line": 1792,
            "code": "  it('adds a meta tag', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        meta: {\n          'viewport': {\n            'name': 'viewport',\n            'content': 'width=device-width, initial-scale=1, shrink-to-fit=no'\n          }\n        }\n      })]\n    }, [/<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a meta tag with short notation",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1810,
                "column": 41
            },
            "line": 1810,
            "code": "  it('adds a meta tag with short notation', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        meta: {\n          'viewport': 'width=device-width, initial-scale=1, shrink-to-fit=no'\n        }\n      })]\n    }, [/<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with publicPath set to /some/",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1825,
                "column": 50
            },
            "line": 1825,
            "code": "  it('adds a favicon with publicPath set to /some/', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/some/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\/some\\/+[^\"]+\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with publicPath set to /some",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1839,
                "column": 49
            },
            "line": 1839,
            "code": "  it('adds a favicon with publicPath set to /some', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/some',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\/some\\/+[^\"]+\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with publicPath set to some/",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1853,
                "column": 49
            },
            "line": 1853,
            "code": "  it('adds a favicon with publicPath set to some/', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: 'some/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"some\\/+[^\"]+\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with publicPath undefined",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1867,
                "column": 46
            },
            "line": 1867,
            "code": "  it('adds a favicon with publicPath undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with publicPath undefined",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1880,
                "column": 46
            },
            "line": 1880,
            "code": "  it('adds a favicon with publicPath undefined', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico'),\n        filename: path.resolve(OUTPUT_DIR, 'subfolder', 'test.html')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\.\\.\\/[^\"]+\\.ico\">/], path.join('subfolder', 'test.html'), done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with a publicPath set to /[hash]/ and replaces the hash",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1894,
                "column": 76
            },
            "line": 1894,
            "code": "  it('adds a favicon with a publicPath set to /[hash]/ and replaces the hash', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '/[hash]/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"\\/[a-z0-9]{20}\\/favicon\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with a publicPath set to [hash]/ and replaces the hash",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1908,
                "column": 75
            },
            "line": 1908,
            "code": "  it('adds a favicon with a publicPath set to [hash]/ and replaces the hash', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        publicPath: '[hash]/',\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[a-z0-9]{20}\\/favicon\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with inject enabled",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1922,
                "column": 40
            },
            "line": 1922,
            "code": "  it('adds a favicon with inject enabled', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "adds a favicon with xhtml enabled",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1936,
                "column": 39
            },
            "line": 1936,
            "code": "  it('adds a favicon with xhtml enabled', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        xhtml: true,\n        minify: {\n          keepClosingSlash: true\n        },\n        favicon: path.join(__dirname, 'fixtures/favicon.ico')\n      })]\n    }, [/<link rel=\"icon\" href=\"[^\"]+\\.ico\"\\/>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "shows an error if the favicon could not be load",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1954,
                "column": 53
            },
            "line": 1954,
            "code": "  it('shows an error if the favicon could not be load', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      optimization: {\n        emitOnErrors: true\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: true,\n        favicon: path.join(__dirname, 'fixtures/does_not_exist.ico')\n      })]\n    }, ['Error: HtmlWebpackPlugin: could not load file'], null, done, true);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "works with webpack bannerplugin",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1971,
                "column": 37
            },
            "line": 1971,
            "code": "  it('works with webpack bannerplugin', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new webpack.BannerPlugin('Copyright and such.'), new HtmlWebpackPlugin()]\n    }, ['<html'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "shows an error when a template fails to load",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1982,
                "column": 50
            },
            "line": 1982,
            "code": "  it('shows an error when a template fails to load', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/non-existing-template.html')\n      })]\n    }, [Number(webpackMajorVersion) >= 5 ? 'Child compilation failed:\\n  Module not found:' : 'Child compilation failed:\\n  Entry module not found:'], null, done, true);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should sort the chunks in auto mode",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 1995,
                "column": 41
            },
            "line": 1995,
            "code": "  it('should sort the chunks in auto mode', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        util: path.join(__dirname, 'fixtures/util.js'),\n        index: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      optimization: {\n        splitChunks: {\n          cacheGroups: {\n            commons: {\n              chunks: 'initial',\n              name: 'common',\n              enforce: true\n            }\n          }\n        }\n      },\n      plugins: [new HtmlWebpackPlugin({\n        chunksSortMode: 'auto'\n      })]\n    }, [/(<script defer=\"defer\" src=\"common_bundle.js\">.+<script defer=\"defer\" src=\"util_bundle.js\">.+<script defer=\"defer\" src=\"index_bundle.js\">)|(<script defer=\"defer\" src=\"common_bundle.js\">.+<script defer=\"defer\" src=\"index_bundle.js\">.+<script defer=\"defer\" src=\"util_bundle.js\">)/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should sort the chunks in custom (reverse alphabetical) order",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2022,
                "column": 67
            },
            "line": 2022,
            "code": "  it('should sort the chunks in custom (reverse alphabetical) order', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        b: path.join(__dirname, 'fixtures/index.js'),\n        c: path.join(__dirname, 'fixtures/util.js'),\n        a: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        chunksSortMode: function (a, b) {\n          if (a < b) {\n            return 1;\n          }\n\n          if (a > b) {\n            return -1;\n          }\n\n          return 0;\n        }\n      })]\n    }, [/<script defer=\"defer\" src=\"c_bundle.js\">.+<script defer=\"defer\" src=\"b_bundle.js\">.+<script defer=\"defer\" src=\"a_bundle.js\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should sort manually by the chunks",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2049,
                "column": 40
            },
            "line": 2049,
            "code": "  it('should sort manually by the chunks', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        b: path.join(__dirname, 'fixtures/util.js'),\n        a: path.join(__dirname, 'fixtures/theme.js'),\n        d: path.join(__dirname, 'fixtures/util.js'),\n        c: path.join(__dirname, 'fixtures/theme.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          loader: 'css-loader'\n        }]\n      },\n      optimization: {\n        splitChunks: {\n          cacheGroups: {\n            commons: {\n              chunks: 'initial',\n              name: 'common',\n              enforce: true\n            }\n          }\n        }\n      },\n      plugins: [new HtmlWebpackPlugin({\n        chunksSortMode: 'manual',\n        chunks: ['common', 'a', 'b', 'c']\n      })]\n    }, [/<script defer=\"defer\" src=\"common_bundle.js\">.+<script defer=\"defer\" src=\"a_bundle.js\">.+<script defer=\"defer\" src=\"b_bundle.js\">.+<script defer=\"defer\" src=\"c_bundle.js\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should add the webpack compilation object as a property of the templateParam object",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2085,
                "column": 89
            },
            "line": 2085,
            "code": "  it('should add the webpack compilation object as a property of the templateParam object', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false\n      })]\n    }, ['templateParams keys: \"compilation,webpackConfig,htmlWebpackPlugin\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to disable template parameters",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2099,
                "column": 49
            },
            "line": 2099,
            "code": "  it('should allow to disable template parameters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: false\n      })]\n    }, ['templateParams keys: \"\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to set specific template parameters",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2114,
                "column": 54
            },
            "line": 2114,
            "code": "  it('should allow to set specific template parameters', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: {\n          foo: 'bar'\n        }\n      })]\n    }, ['templateParams keys: \"compilation,webpackConfig,htmlWebpackPlugin,foo\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to set specific template parameters using a function",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2131,
                "column": 71
            },
            "line": 2131,
            "code": "  it('should allow to set specific template parameters using a function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: function () {\n          return {\n            'foo': 'bar'\n          };\n        }\n      })]\n    }, ['templateParams keys: \"foo\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to set specific template parameters using a async function",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2150,
                "column": 77
            },
            "line": 2150,
            "code": "  it('should allow to set specific template parameters using a async function', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'fixtures/templateParam.js'),\n        inject: false,\n        templateParameters: function () {\n          return Promise.resolve({\n            'foo': 'bar'\n          });\n        }\n      })]\n    }, ['templateParams keys: \"foo\"'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not treat templateContent set to an empty string as missing",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2169,
                "column": 72
            },
            "line": 2169,
            "code": "  it('should not treat templateContent set to an empty string as missing', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'app_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        templateContent: ''\n      })]\n    }, [/^<head><script defer=\"defer\" src=\"app_bundle\\.js\"><\\/script><\\/head>$/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to inject the assets into the body of the given spaced closing tag template",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2184,
                "column": 92
            },
            "line": 2184,
            "code": "  it('allows you to inject the assets into the body of the given spaced closing tag template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'body',\n        template: path.join(__dirname, 'fixtures/spaced_plain.html')\n      })]\n    }, [/<body>[\\s]*<script defer=\"defer\" src=\"index_bundle.js\"><\\/script>[\\s]*<\\/body>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows you to inject the assets into the head of the given spaced closing tag template",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2198,
                "column": 92
            },
            "line": 2198,
            "code": "  it('allows you to inject the assets into the head of the given spaced closing tag template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        inject: 'head',\n        template: path.join(__dirname, 'fixtures/spaced_plain.html')\n      })]\n    }, [/<script defer=\"defer\" src=\"index_bundle.js\"><\\/script>[\\s]*<\\/head>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should minify by default when mode is production",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2212,
                "column": 54
            },
            "line": 2212,
            "code": "  it('should minify by default when mode is production', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<!doctype html><html><head><meta charset=\"utf-8\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not minify by default when mode is development",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2223,
                "column": 59
            },
            "line": 2223,
            "code": "  it('should not minify by default when mode is development', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin()]\n    }, [/<!DOCTYPE html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should minify in production if options.minify is true",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2234,
                "column": 59
            },
            "line": 2234,
            "code": "  it('should minify in production if options.minify is true', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: true\n      })]\n    }, [/<!doctype html><html><head><meta charset=\"utf-8\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should minify in development if options.minify is true",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2247,
                "column": 60
            },
            "line": 2247,
            "code": "  it('should minify in development if options.minify is true', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: true\n      })]\n    }, [/<!doctype html><html><head><meta charset=\"utf-8\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not minify in production if options.minify is false",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2260,
                "column": 64
            },
            "line": 2260,
            "code": "  it('should not minify in production if options.minify is false', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: false\n      })]\n    }, [/<!DOCTYPE html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not minify in development if options.minify is false",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2273,
                "column": 65
            },
            "line": 2273,
            "code": "  it('should not minify in development if options.minify is false', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: false\n      })]\n    }, [/<!DOCTYPE html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow custom minify options and not merge them with the defaults",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2286,
                "column": 77
            },
            "line": 2286,
            "code": "  it('should allow custom minify options and not merge them with the defaults', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        minify: {\n          useShortDoctype: true\n        }\n      })]\n    }, [/<!doctype html>\\s+<html>\\s+<head>\\s+<meta charset=\"utf-8\">/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to inject scripts with a defer=\"defer\" attribute",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2301,
                "column": 67
            },
            "line": 2301,
            "code": "  it('should allow to inject scripts with a defer=\"defer\" attribute', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer'\n      })]\n    }, [/<script defer=\"defer\" .+<body>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to inject scripts with a type=\"module\" attribute",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2314,
                "column": 67
            },
            "line": 2314,
            "code": "  it('should allow to inject scripts with a type=\"module\" attribute', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'module'\n      })]\n    }, [/<script type=\"module\" src=\"index_bundle.js\"><\\/script>.+<body>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to inject scripts with a defer=\"defer\" attribute to the body",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2327,
                "column": 79
            },
            "line": 2327,
            "code": "  it('should allow to inject scripts with a defer=\"defer\" attribute to the body', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        inject: 'body'\n      })]\n    }, [/<body>.*<script defer=\"defer\"/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to inject scripts with a defer=\"defer\" in front of styles",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2341,
                "column": 76
            },
            "line": 2341,
            "code": "  it('should allow to inject scripts with a defer=\"defer\" in front of styles', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer'\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, [/<script defer=\"defer\".+<link href=\"styles.css\"/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should keep closing slashes from the template",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2362,
                "column": 51
            },
            "line": 2362,
            "code": "  it('should keep closing slashes from the template', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        templateContent: '<html><body> <selfclosed /> </body></html>'\n      }), new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      })]\n    }, [/<selfclosed\\/>/], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should add the javascript assets to the head for inject:true with scriptLoading:defer",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2384,
                "column": 91
            },
            "line": 2384,
            "code": "  it('should add the javascript assets to the head for inject:true with scriptLoading:defer', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        inject: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"></script><link href=\"styles.css\" rel=\"stylesheet\"></head>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to use headTags and bodyTags directly in string literals",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2406,
                "column": 75
            },
            "line": 2406,
            "code": "  it('should allow to use headTags and bodyTags directly in string literals', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        scriptLoading: 'blocking',\n        inject: false,\n        templateContent: ({\n          htmlWebpackPlugin\n        }) => `\n            <html>\n              <head>${htmlWebpackPlugin.tags.headTags}</head>\n              <body>${htmlWebpackPlugin.tags.bodyTags}</body>\n            </html>\n            `\n      })]\n    }, ['<head><link href=\"styles.css\" rel=\"stylesheet\"></head>', '<script src=\"index_bundle.js\"></script></body>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should add the javascript assets to the head for inject:true with scriptLoading:defer",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2436,
                "column": 91
            },
            "line": 2436,
            "code": "  it('should add the javascript assets to the head for inject:true with scriptLoading:defer', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        scriptLoading: 'defer',\n        inject: true\n      })]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"></script><link href=\"styles.css\" rel=\"stylesheet\"></head>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to use headTags and bodyTags directly in string literals",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2458,
                "column": 75
            },
            "line": 2458,
            "code": "  it('should allow to use headTags and bodyTags directly in string literals', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/theme.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.css$/,\n          use: [MiniCssExtractPlugin.loader, 'css-loader']\n        }]\n      },\n      plugins: [new MiniCssExtractPlugin({\n        filename: 'styles.css'\n      }), new HtmlWebpackPlugin({\n        inject: false,\n        templateContent: ({\n          htmlWebpackPlugin\n        }) => `\n            <html>\n              <head>${htmlWebpackPlugin.tags.headTags}</head>\n              <body>${htmlWebpackPlugin.tags.bodyTags}</body>\n            </html>\n            `\n      })]\n    }, ['<head><script defer=\"defer\" src=\"index_bundle.js\"></script><link href=\"styles.css\" rel=\"stylesheet\"></head>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should allow to use experiments:{outputModule:true}",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2487,
                "column": 57
            },
            "line": 2487,
            "code": "  it('should allow to use experiments:{outputModule:true}', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        module: true\n      },\n      experiments: {\n        outputModule: true\n      },\n      plugins: [new HtmlWebpackPlugin({})]\n    }, ['<script defer=\"defer\" src=\"index_bundle.js\"></script>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "generates relative path for asset/resource",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2502,
                "column": 48
            },
            "line": 2502,
            "code": "  it('generates relative path for asset/resource', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        assetModuleFilename: 'assets/demo[ext]'\n      },\n      module: {\n        rules: [{\n          test: /\\.png$/,\n          type: 'asset/resource'\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: 'html-loader!' + path.join(__dirname, 'fixtures/logo.html'),\n        filename: 'demo/index.js'\n      })]\n    }, ['<img src=\"../assets/demo.png'], 'demo/index.js', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "uses the absolute path for asset/resource",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2523,
                "column": 47
            },
            "line": 2523,
            "code": "  it('uses the absolute path for asset/resource', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        assetModuleFilename: 'assets/demo[ext]'\n      },\n      module: {\n        rules: [{\n          test: /\\.png$/,\n          type: 'asset/resource'\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        template: 'html-loader!' + path.join(__dirname, 'fixtures/logo.html'),\n        filename: 'demo/index.js',\n        publicPath: '/foo/'\n      })]\n    }, ['<img src=\"/foo/assets/demo.png'], 'demo/index.js', done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "generates an html file if entry is empty",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2545,
                "column": 46
            },
            "line": 2545,
            "code": "  it('generates an html file if entry is empty', done => {\n    testHtmlPlugin({\n      mode: 'development',\n      entry: {},\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'index_bundle.js',\n        assetModuleFilename: 'assets/demo[ext]'\n      },\n      plugins: [new HtmlWebpackPlugin({})]\n    }, ['<body>'], null, done);\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "allows to set custom loader interpolation settings",
            "suites": [
                "HtmlWebpackPlugin"
            ],
            "updatePoint": {
                "line": 2557,
                "column": 56
            },
            "line": 2557,
            "code": "  it('allows to set custom loader interpolation settings', done => {\n    testHtmlPlugin({\n      mode: 'production',\n      entry: {\n        app: path.join(__dirname, 'fixtures/index.js')\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name]_bundle.js'\n      },\n      module: {\n        rules: [{\n          test: /\\.html$/,\n          loader: require.resolve('../lib/loader.js'),\n          options: {\n            interpolate: /\\{%=([\\s\\S]+?)%\\}/g\n          }\n        }]\n      },\n      plugins: [new HtmlWebpackPlugin({\n        title: 'Interpolation Demo',\n        template: path.join(__dirname, 'fixtures/interpolation.html')\n      })]\n    }, ['Interpolation Demo'], null, () => {\n      done();\n    });\n  });",
            "file": "basic.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should compile nothing if no file was changed",
            "suites": [
                "HtmlWebpackPluginCaching"
            ],
            "updatePoint": {
                "line": 94,
                "column": 51
            },
            "line": 94,
            "code": "  it('should compile nothing if no file was changed', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      template: template\n    });\n    let childCompilerHash;\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    compiler.run() // Change the template file and compile again\n    .then(() => {\n      childCompilerHash = htmlWebpackPlugin.childCompilerHash;\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats); // Verify that no file was built\n\n      expect(getCompiledModules(stats.toJson())).toEqual([]); // Verify that the html was processed only during the initial build\n\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(1); // Verify that the child compilation was executed twice\n\n      expect(htmlWebpackPlugin.childCompilerHash).toBe(childCompilerHash);\n    }).then(done);\n  });",
            "file": "caching.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not compile the webpack html file if only a javascript file was changed",
            "suites": [
                "HtmlWebpackPluginCaching"
            ],
            "updatePoint": {
                "line": 117,
                "column": 84
            },
            "line": 117,
            "code": "  it('should not compile the webpack html file if only a javascript file was changed', done => {\n    const htmlWebpackPlugin = new HtmlWebpackPlugin();\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    let childCompilerHash;\n    compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    compiler.run() // Change a js file and compile again\n    .then(() => {\n      childCompilerHash = htmlWebpackPlugin.childCompilerHash;\n      compiler.simulateFileChange(path.join(__dirname, 'fixtures/index.js'), {\n        footer: '//1'\n      });\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats); // Verify that only one file was built\n\n      expect(getCompiledModuleCount(stats.toJson())).toBe(1); // Verify that the html was processed only during the initial build\n\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(1); // Verify that the child compilation was executed only once\n\n      expect(htmlWebpackPlugin.childCompilerHash).toBe(childCompilerHash);\n    }).then(done);\n  });",
            "file": "caching.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should compile the webpack html file even if only a javascript file was changed if caching is disabled",
            "suites": [
                "HtmlWebpackPluginCaching"
            ],
            "updatePoint": {
                "line": 140,
                "column": 108
            },
            "line": 140,
            "code": "  it('should compile the webpack html file even if only a javascript file was changed if caching is disabled', done => {\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      cache: false\n    });\n    let childCompilerHash;\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    compiler.run() // Change a js file and compile again\n    .then(() => {\n      childCompilerHash = htmlWebpackPlugin.childCompilerHash;\n      compiler.simulateFileChange(path.join(__dirname, 'fixtures/index.js'), {\n        footer: '//1'\n      });\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats); // Verify that only one file was built\n\n      expect(getCompiledModuleCount(stats.toJson())).toBe(1); // Verify that the html was processed on every run\n\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(2); // Verify that the child compilation was executed only once\n\n      expect(htmlWebpackPlugin.childCompilerHash).toBe(childCompilerHash);\n    }).then(done);\n  });",
            "file": "caching.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should compile the webpack html if the template file was changed",
            "suites": [
                "HtmlWebpackPluginCaching"
            ],
            "updatePoint": {
                "line": 165,
                "column": 70
            },
            "line": 165,
            "code": "  it('should compile the webpack html if the template file was changed', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      template: template\n    });\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(template);\n    compiler.run() // Change the template file and compile again\n    .then(() => {\n      compiler.simulateFileChange(template, {\n        footer: '<!-- 1 -->'\n      });\n      return compiler.run();\n    }).then(stats => {\n      // Expect no errors:\n      expectNoErrors(stats); // Verify that only one file was built\n\n      expect(getCompiledModuleCount(stats.toJson())).toBe(1); // Verify that the html was processed twice\n\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(2);\n      const [evaluateCompilationResultArgs1, evaluateCompilationResultArgs2] = htmlWebpackPlugin.evaluateCompilationResult.mock.calls;\n      const compiledSource = evaluateCompilationResultArgs1[0];\n      const compiledSourceSecondRun = evaluateCompilationResultArgs2[0]; // Verify that the child compilation was executed twice\n\n      expect(compiledSource).not.toBe(compiledSourceSecondRun);\n    }).then(done);\n  });",
            "file": "caching.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not slow down linear (10 plugins should not take 2.5 as much time as a 1 plugin)",
            "suites": [
                "HtmlWebpackPluginCaching"
            ],
            "updatePoint": {
                "line": 192,
                "column": 93
            },
            "line": 192,
            "code": "  it('should not slow down linear (10 plugins should not take 2.5 as much time as a 1 plugin)', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n\n    const createHtmlWebpackPlugin = () => new HtmlWebpackPlugin({\n      template: template,\n      minify: false\n    });\n\n    let singlePluginCompileStart;\n    let singleCompileRunDuration;\n    let multiPluginComileStart;\n    let multiCompileRunDuration;\n    let singleCompiler = setUpCompiler(createHtmlWebpackPlugin());\n    let multiCompiler = setUpCompiler.apply(null, Array(10).fill(0).map(() => createHtmlWebpackPlugin()));\n    Promise.resolve().then(function singleCompileRun() {\n      singlePluginCompileStart = process.hrtime();\n      return singleCompiler.run() // Change the template file and compile again\n      .then(() => {\n        singleCompileRunDuration = process.hrtime(singlePluginCompileStart);\n      });\n    }).then(function multiCompileRun() {\n      multiPluginComileStart = process.hrtime();\n      return multiCompiler.run() // Change the template file and compile again\n      .then(() => {\n        multiCompileRunDuration = process.hrtime(multiPluginComileStart);\n      });\n    }).then(function meassureTime() {\n      const singleCompileRunDurationInNs = singleCompileRunDuration[0] * 1e9 + singleCompileRunDuration[1];\n      const multiCompileRunDurationInNs = multiCompileRunDuration[0] * 1e9 + multiCompileRunDuration[1];\n      const speedComarision = multiCompileRunDurationInNs / singleCompileRunDurationInNs * 100;\n      expect(speedComarision).toBeLessThan(250);\n      done();\n    });\n  });",
            "file": "caching.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should keep watching the webpack html if only a js file was changed",
            "suites": [
                "HtmlWebpackPluginCaching"
            ],
            "updatePoint": {
                "line": 226,
                "column": 73
            },
            "line": 226,
            "code": "  it('should keep watching the webpack html if only a js file was changed', done => {\n    const template = path.join(__dirname, 'fixtures/plain.html');\n    const jsFile = path.join(__dirname, 'fixtures/index.js');\n    const htmlWebpackPlugin = new HtmlWebpackPlugin({\n      template: template\n    });\n    const compiler = setUpCompiler(htmlWebpackPlugin);\n    compiler.addTestFile(template);\n    compiler.addTestFile(jsFile); // Build the template file for the first time\n\n    compiler.startWatching() // Change the template file (second build)\n    .then(() => {\n      compiler.simulateFileChange(template, {\n        footer: '<!-- 1 -->'\n      });\n      return compiler.waitForWatchRunComplete();\n    }) // Change js\n    .then(() => {\n      compiler.simulateFileChange(jsFile, {\n        footer: '// 1'\n      });\n      return compiler.waitForWatchRunComplete();\n    }) // Change js\n    .then(() => {\n      compiler.simulateFileChange(jsFile, {\n        footer: '// 2'\n      });\n      return compiler.waitForWatchRunComplete();\n    }) // Change js\n    .then(() => {\n      compiler.simulateFileChange(jsFile, {\n        footer: '// 3'\n      });\n      return compiler.waitForWatchRunComplete();\n    }) // Change the template file (third build)\n    .then(() => {\n      compiler.simulateFileChange(template, {\n        footer: '<!-- 2 -->'\n      });\n      return compiler.waitForWatchRunComplete();\n    }).then(() => {\n      // Verify that the html was processed trice\n      expect(htmlWebpackPlugin.evaluateCompilationResult.mock.calls.length).toBe(3);\n    }).then(() => compiler.stopWatching()).then(done);\n  });",
            "file": "caching.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "custom-template example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 73,
                "column": 29
            },
            "line": 73,
            "code": "  it('custom-template example', done => {\n    runExample('custom-template', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "default example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 76,
                "column": 21
            },
            "line": 76,
            "code": "  it('default example', done => {\n    runExample('default', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "favicon example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 79,
                "column": 21
            },
            "line": 79,
            "code": "  it('favicon example', done => {\n    runExample('favicon', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "html-loader example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 82,
                "column": 25
            },
            "line": 82,
            "code": "  it('html-loader example', done => {\n    runExample('html-loader', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "inline example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 85,
                "column": 20
            },
            "line": 85,
            "code": "  it('inline example', done => {\n    runExample('inline', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "pug-loader example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 88,
                "column": 24
            },
            "line": 88,
            "code": "  it('pug-loader example', done => {\n    runExample('pug-loader', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "javascript example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 91,
                "column": 24
            },
            "line": 91,
            "code": "  it('javascript example', done => {\n    runExample('javascript', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "javascript-advanced example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 94,
                "column": 33
            },
            "line": 94,
            "code": "  it('javascript-advanced example', done => {\n    runExample('javascript-advanced', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "sort manually example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 97,
                "column": 27
            },
            "line": 97,
            "code": "  it('sort manually example', done => {\n    runExample('sort-manually', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "multi-page example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 100,
                "column": 24
            },
            "line": 100,
            "code": "  it('multi-page example', done => {\n    runExample('multi-page', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "template-parameters example",
            "suites": [
                "HtmlWebpackPlugin Examples"
            ],
            "updatePoint": {
                "line": 103,
                "column": 33
            },
            "line": 103,
            "code": "  it('template-parameters example', done => {\n    runExample('template-parameters', done);\n  });",
            "file": "example.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not cause errors for the main compilation if hot-reload is active",
            "suites": [
                "HtmlWebpackPluginHMR"
            ],
            "updatePoint": {
                "line": 33,
                "column": 78
            },
            "line": 33,
            "code": "  it('should not cause errors for the main compilation if hot-reload is active', () => {\n    const config = {\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      output: {\n        path: OUTPUT_DIR\n      },\n      plugins: [new webpack.HotModuleReplacementPlugin(), new HtmlWebpackPlugin({\n        template: DEFAULT_TEMPLATE\n      })]\n    };\n    const compiler = new WebpackRecompilationSimulator(webpack(config));\n    const jsFileTempPath = compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    fs.writeFileSync(jsFileTempPath, 'module.exports = function calc(a, b){ return a + b };');\n    return compiler.startWatching() // Change the template file and compile again\n    .then(() => {\n      fs.writeFileSync(jsFileTempPath, 'module.exports = function calc(a, b){ return a - b };');\n      return compiler.waitForWatchRunComplete();\n    }).then(stats => {\n      expect(stats.compilation.errors).toEqual([]);\n    }).then(() => compiler.stopWatching());\n  });",
            "file": "hot.spec.js",
            "skipped": false,
            "dir": "spec"
        },
        {
            "name": "should not cause missing hot-reloaded code of the main compilation",
            "suites": [
                "HtmlWebpackPluginHMR"
            ],
            "updatePoint": {
                "line": 55,
                "column": 72
            },
            "line": 55,
            "code": "  it('should not cause missing hot-reloaded code of the main compilation', () => {\n    const config = {\n      mode: 'development',\n      entry: path.join(__dirname, 'fixtures/index.js'),\n      target: 'node',\n      output: {\n        path: OUTPUT_DIR\n      },\n      plugins: [new webpack.HotModuleReplacementPlugin(), new HtmlWebpackPlugin({\n        template: DEFAULT_TEMPLATE\n      })]\n    };\n    const compiler = new WebpackRecompilationSimulator(webpack(config));\n    const jsFileTempPath = compiler.addTestFile(path.join(__dirname, 'fixtures/index.js'));\n    fs.writeFileSync(jsFileTempPath, 'global = 1; module.hot.accept();');\n    return compiler.startWatching() // Change the template file and compile again\n    .then(() => {\n      fs.writeFileSync(jsFileTempPath, 'global = 2; module.hot.accept();');\n      return compiler.waitForWatchRunComplete();\n    }).then(stats => {\n      const hotUpdateJsFileNames = Object.keys(stats.compilation.assets).filter(fileName => /\\.hot-update\\.js$/.test(fileName));\n      expect(hotUpdateJsFileNames).not.toEqual([]);\n      expect(hotUpdateJsFileNames.length).toEqual(1);\n      const hotUpdateFileSize = stats.compilation.assets[hotUpdateJsFileNames[0]].size();\n      expect(hotUpdateFileSize).not.toEqual(0);\n    }).then(() => compiler.stopWatching());\n  });",
            "file": "hot.spec.js",
            "skipped": false,
            "dir": "spec"
        }
    ],
    "badge": "jantimon__html-webpack-plugin.svg"
}