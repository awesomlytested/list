{
    "repo": "xtermjs/xterm.js",
    "url": "https://github.com/xtermjs/xterm.js",
    "branch": "master",
    "configs": [
        {
            "package": "xterm",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "ASCII chars",
            "suites": [
                "CharWidth Integration Tests",
                "getStringCellWidth"
            ],
            "updatePoint": {
                "line": 33,
                "column": 19
            },
            "line": 33,
            "code": "    it('ASCII chars', async function () {\n      const input = 'This is just ASCII text.#';\n      await page.evaluate(`window.term.write('${input}')`);\n      await pollFor(page, () => sumWidths(0, 1, '#'), 25);\n    });",
            "file": "api/CharWidth.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "combining chars",
            "suites": [
                "CharWidth Integration Tests",
                "getStringCellWidth"
            ],
            "updatePoint": {
                "line": 38,
                "column": 23
            },
            "line": 38,
            "code": "    it('combining chars', async function () {\n      const input = 'e\\u0301e\\u0301e\\u0301e\\u0301e\\u0301e\\u0301e\\u0301e\\u0301e\\u0301#';\n      await page.evaluate(`window.term.write('${input}')`);\n      await pollFor(page, () => sumWidths(0, 1, '#'), 10);\n    });",
            "file": "api/CharWidth.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "surrogate chars",
            "suites": [
                "CharWidth Integration Tests",
                "getStringCellWidth"
            ],
            "updatePoint": {
                "line": 43,
                "column": 23
            },
            "line": 43,
            "code": "    it('surrogate chars', async function () {\n      const input = '𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞𝄞#';\n      await page.evaluate(`window.term.write('${input}')`);\n      await pollFor(page, () => sumWidths(0, 1, '#'), 28);\n    });",
            "file": "api/CharWidth.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "surrogate combining chars",
            "suites": [
                "CharWidth Integration Tests",
                "getStringCellWidth"
            ],
            "updatePoint": {
                "line": 48,
                "column": 33
            },
            "line": 48,
            "code": "    it('surrogate combining chars', async function () {\n      const input = '𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301𓂀\\u0301#';\n      await page.evaluate(`window.term.write('${input}')`);\n      await pollFor(page, () => sumWidths(0, 1, '#'), 12);\n    });",
            "file": "api/CharWidth.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fullwidth chars",
            "suites": [
                "CharWidth Integration Tests",
                "getStringCellWidth"
            ],
            "updatePoint": {
                "line": 53,
                "column": 23
            },
            "line": 53,
            "code": "    it('fullwidth chars', async function () {\n      const input = '１２３４５６７８９０#';\n      await page.evaluate(`window.term.write('${input}')`);\n      await pollFor(page, () => sumWidths(0, 1, '#'), 21);\n    });",
            "file": "api/CharWidth.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fullwidth chars offset 1",
            "suites": [
                "CharWidth Integration Tests",
                "getStringCellWidth"
            ],
            "updatePoint": {
                "line": 58,
                "column": 32
            },
            "line": 58,
            "code": "    it('fullwidth chars offset 1', async function () {\n      const input = 'a１２３４５６７８９０#';\n      await page.evaluate(`window.term.write('${input}')`);\n      await pollFor(page, () => sumWidths(0, 1, '#'), 22);\n    }); // TODO: multiline tests once #1685 is resolved",
            "file": "api/CharWidth.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call custom CSI handler with js array params",
            "suites": [
                "Parser Integration Tests",
                "registerCsiHandler"
            ],
            "updatePoint": {
                "line": 26,
                "column": 59
            },
            "line": 26,
            "code": "    it('should call custom CSI handler with js array params', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customCsiHandlerParams = [];\n        const _customCsiHandler = window.term.parser.registerCsiHandler({final: 'm'}, (params, collect) => {\n          window._customCsiHandlerParams.push(params);\n          return false;\n        }, '');\n      `);\n      await writeSync(page, '\\x1b[38;5;123mparams\\x1b[38:2::50:100:150msubparams');\n      assert.deepEqual(await page.evaluate(`window._customCsiHandlerParams`), [[38, 5, 123], [38, [2, -1, 50, 100, 150]]]);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "async",
            "suites": [
                "Parser Integration Tests",
                "registerCsiHandler"
            ],
            "updatePoint": {
                "line": 38,
                "column": 13
            },
            "line": 38,
            "code": "    it('async', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customCsiHandlerCallStack = [];\n        const _customCsiHandlerA = window.term.parser.registerCsiHandler({intermediates:'+', final: 'Z'}, params => {\n          window._customCsiHandlerCallStack.push(['A', params]);\n          return false;\n        });\n        const _customCsiHandlerB = window.term.parser.registerCsiHandler({intermediates:'+', final: 'Z'}, async params => {\n          await new Promise(res => setTimeout(res, 50));\n          window._customCsiHandlerCallStack.push(['B', params]);\n          return false;\n        });\n        const _customCsiHandlerC = window.term.parser.registerCsiHandler({intermediates:'+', final: 'Z'}, params => {\n          window._customCsiHandlerCallStack.push(['C', params]);\n          return false;\n        });\n      `);\n      await writeSync(page, '\\x1b[1;2+Z');\n      assert.deepEqual(await page.evaluate(`window._customCsiHandlerCallStack`), [['C', [1, 2]], ['B', [1, 2]], ['A', [1, 2]]]);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should respects return value",
            "suites": [
                "Parser Integration Tests",
                "registerDcsHandler"
            ],
            "updatePoint": {
                "line": 61,
                "column": 36
            },
            "line": 61,
            "code": "    it('should respects return value', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customDcsHandlerCallStack = [];\n        const _customDcsHandlerA = window.term.parser.registerDcsHandler({intermediates:'+', final: 'p'}, (data, params) => {\n          window._customDcsHandlerCallStack.push(['A', params, data]);\n          return false;\n        });\n        const _customDcsHandlerB = window.term.parser.registerDcsHandler({intermediates:'+', final: 'p'}, (data, params) => {\n          window._customDcsHandlerCallStack.push(['B', params, data]);\n          return true;\n        });\n        const _customDcsHandlerC = window.term.parser.registerDcsHandler({intermediates:'+', final: 'p'}, (data, params) => {\n          window._customDcsHandlerCallStack.push(['C', params, data]);\n          return false;\n        });\n      `);\n      await writeSync(page, '\\x1bP1;2+psome data\\x1b\\\\\\\\');\n      assert.deepEqual(await page.evaluate(`window._customDcsHandlerCallStack`), [['C', [1, 2], 'some data'], ['B', [1, 2], 'some data']]);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "async",
            "suites": [
                "Parser Integration Tests",
                "registerDcsHandler"
            ],
            "updatePoint": {
                "line": 81,
                "column": 13
            },
            "line": 81,
            "code": "    it('async', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customDcsHandlerCallStack = [];\n        const _customDcsHandlerA = window.term.parser.registerDcsHandler({intermediates:'+', final: 'q'}, (data, params) => {\n          window._customDcsHandlerCallStack.push(['A', params, data]);\n          return false;\n        });\n        const _customDcsHandlerB = window.term.parser.registerDcsHandler({intermediates:'+', final: 'q'}, async (data, params) => {\n          await new Promise(res => setTimeout(res, 50));\n          window._customDcsHandlerCallStack.push(['B', params, data]);\n          return false;\n        });\n        const _customDcsHandlerC = window.term.parser.registerDcsHandler({intermediates:'+', final: 'q'}, (data, params) => {\n          window._customDcsHandlerCallStack.push(['C', params, data]);\n          return false;\n        });\n      `);\n      await writeSync(page, '\\x1bP1;2+qsome data\\x1b\\\\\\\\');\n      assert.deepEqual(await page.evaluate(`window._customDcsHandlerCallStack`), [['C', [1, 2], 'some data'], ['B', [1, 2], 'some data'], ['A', [1, 2], 'some data']]);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should respects return value",
            "suites": [
                "Parser Integration Tests",
                "registerEscHandler"
            ],
            "updatePoint": {
                "line": 104,
                "column": 36
            },
            "line": 104,
            "code": "    it('should respects return value', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customEscHandlerCallStack = [];\n        const _customEscHandlerA = window.term.parser.registerEscHandler({intermediates:'(', final: 'B'}, () => {\n          window._customEscHandlerCallStack.push('A');\n          return false;\n        });\n        const _customEscHandlerB = window.term.parser.registerEscHandler({intermediates:'(', final: 'B'}, () => {\n          window._customEscHandlerCallStack.push('B');\n          return true;\n        });\n        const _customEscHandlerC = window.term.parser.registerEscHandler({intermediates:'(', final: 'B'}, () => {\n          window._customEscHandlerCallStack.push('C');\n          return false;\n        });\n      `);\n      await writeSync(page, '\\x1b(B');\n      assert.deepEqual(await page.evaluate(`window._customEscHandlerCallStack`), ['C', 'B']);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "async",
            "suites": [
                "Parser Integration Tests",
                "registerEscHandler"
            ],
            "updatePoint": {
                "line": 124,
                "column": 13
            },
            "line": 124,
            "code": "    it('async', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customEscHandlerCallStack = [];\n        const _customEscHandlerA = window.term.parser.registerEscHandler({intermediates:'(', final: 'Z'}, () => {\n          window._customEscHandlerCallStack.push('A');\n          return false;\n        });\n        const _customEscHandlerB = window.term.parser.registerEscHandler({intermediates:'(', final: 'Z'}, async () => {\n          await new Promise(res => setTimeout(res, 50));\n          window._customEscHandlerCallStack.push('B');\n          return false;\n        });\n        const _customEscHandlerC = window.term.parser.registerEscHandler({intermediates:'(', final: 'Z'}, () => {\n          window._customEscHandlerCallStack.push('C');\n          return false;\n        });\n      `);\n      await writeSync(page, '\\x1b(Z');\n      assert.deepEqual(await page.evaluate(`window._customEscHandlerCallStack`), ['C', 'B', 'A']);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should respects return value",
            "suites": [
                "Parser Integration Tests",
                "registerOscHandler"
            ],
            "updatePoint": {
                "line": 147,
                "column": 36
            },
            "line": 147,
            "code": "    it('should respects return value', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customOscHandlerCallStack = [];\n        const _customOscHandlerA = window.term.parser.registerOscHandler(1234, data => {\n          window._customOscHandlerCallStack.push(['A', data]);\n          return false;\n        });\n        const _customOscHandlerB = window.term.parser.registerOscHandler(1234, data => {\n          window._customOscHandlerCallStack.push(['B', data]);\n          return true;\n        });\n        const _customOscHandlerC = window.term.parser.registerOscHandler(1234, data => {\n          window._customOscHandlerCallStack.push(['C', data]);\n          return false;\n        });\n      `);\n      await writeSync(page, '\\x1b]1234;some data\\x07');\n      assert.deepEqual(await page.evaluate(`window._customOscHandlerCallStack`), [['C', 'some data'], ['B', 'some data']]);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "async",
            "suites": [
                "Parser Integration Tests",
                "registerOscHandler"
            ],
            "updatePoint": {
                "line": 167,
                "column": 13
            },
            "line": 167,
            "code": "    it('async', async () => {\n      await page.evaluate(`\n        window.term.reset();\n        window._customOscHandlerCallStack = [];\n        const _customOscHandlerA = window.term.parser.registerOscHandler(666, data => {\n          window._customOscHandlerCallStack.push(['A', data]);\n          return false;\n        });\n        const _customOscHandlerB = window.term.parser.registerOscHandler(666, async data => {\n          await new Promise(res => setTimeout(res, 50));\n          window._customOscHandlerCallStack.push(['B', data]);\n          return false;\n        });\n        const _customOscHandlerC = window.term.parser.registerOscHandler(666, data => {\n          window._customOscHandlerCallStack.push(['C', data]);\n          return false;\n        });\n      `);\n      await writeSync(page, '\\x1b]666;some data\\x07');\n      assert.deepEqual(await page.evaluate(`window._customOscHandlerCallStack`), [['C', 'some data'], ['B', 'some data'], ['A', 'some data']]);\n    });",
            "file": "api/Parser.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Default options",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 25,
                "column": 21
            },
            "line": 25,
            "code": "  it('Default options', async () => {\n    await openTerminal(page);\n    assert.equal(await page.evaluate(`window.term.cols`), 80);\n    assert.equal(await page.evaluate(`window.term.rows`), 24);\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Proposed API check",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 30,
                "column": 24
            },
            "line": 30,
            "code": "  it('Proposed API check', async () => {\n    await openTerminal(page, {\n      allowProposedApi: false\n    });\n    await page.evaluate(`\n      try {\n        window.term.buffer;\n      } catch (e) {\n        window.throwMessage = e.message;\n      }\n    `);\n    await pollFor(page, 'window.throwMessage', 'You must set the allowProposedApi option to true to use proposed API');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "write",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 43,
                "column": 11
            },
            "line": 43,
            "code": "  it('write', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.term.write('foo');\n      window.term.write('bar');\n      window.term.write('文');\n    `);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'foobar文');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "write with callback",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 52,
                "column": 25
            },
            "line": 52,
            "code": "  it('write with callback', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.term.write('foo', () => { window.__x = 'a'; });\n      window.term.write('bar', () => { window.__x += 'b'; });\n      window.term.write('文', () => { window.__x += 'c'; });\n    `);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'foobar文');\n    await pollFor(page, `window.__x`, 'abc');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "write - bytes (UTF8)",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 62,
                "column": 26
            },
            "line": 62,
            "code": "  it('write - bytes (UTF8)', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.term.write(new Uint8Array([102, 111, 111])); // foo\n      window.term.write(new Uint8Array([98, 97, 114])); // bar\n      window.term.write(new Uint8Array([230, 150, 135])); // 文\n    `);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'foobar文');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "write - bytes (UTF8) with callback",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 71,
                "column": 40
            },
            "line": 71,
            "code": "  it('write - bytes (UTF8) with callback', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.term.write(new Uint8Array([102, 111, 111]), () => { window.__x = 'A'; }); // foo\n      window.term.write(new Uint8Array([98, 97, 114]), () => { window.__x += 'B'; }); // bar\n      window.term.write(new Uint8Array([230, 150, 135]), () => { window.__x += 'C'; }); // 文\n    `);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'foobar文');\n    await pollFor(page, `window.__x`, 'ABC');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "writeln",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 81,
                "column": 13
            },
            "line": 81,
            "code": "  it('writeln', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.term.writeln('foo');\n      window.term.writeln('bar');\n      window.term.writeln('文');\n    `);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'foo');\n    await pollFor(page, `window.term.buffer.active.getLine(1).translateToString(true)`, 'bar');\n    await pollFor(page, `window.term.buffer.active.getLine(2).translateToString(true)`, '文');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "writeln with callback",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 92,
                "column": 27
            },
            "line": 92,
            "code": "  it('writeln with callback', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.term.writeln('foo', () => { window.__x = '1'; });\n      window.term.writeln('bar', () => { window.__x += '2'; });\n      window.term.writeln('文', () => { window.__x += '3'; });\n    `);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'foo');\n    await pollFor(page, `window.term.buffer.active.getLine(1).translateToString(true)`, 'bar');\n    await pollFor(page, `window.term.buffer.active.getLine(2).translateToString(true)`, '文');\n    await pollFor(page, `window.__x`, '123');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "writeln - bytes (UTF8)",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 104,
                "column": 28
            },
            "line": 104,
            "code": "  it('writeln - bytes (UTF8)', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.term.writeln(new Uint8Array([102, 111, 111]));\n      window.term.writeln(new Uint8Array([98, 97, 114]));\n      window.term.writeln(new Uint8Array([230, 150, 135]));\n    `);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'foo');\n    await pollFor(page, `window.term.buffer.active.getLine(1).translateToString(true)`, 'bar');\n    await pollFor(page, `window.term.buffer.active.getLine(2).translateToString(true)`, '文');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "paste",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 115,
                "column": 11
            },
            "line": 115,
            "code": "  it('paste', async () => {\n    await openTerminal(page);\n    await page.evaluate(`\n      window.calls = [];\n      window.term.onData(e => calls.push(e));\n      window.term.paste('foo');\n      window.term.paste('\\\\r\\\\nfoo\\\\nbar\\\\r');\n      window.term.write('\\\\x1b[?2004h', () => {\n        window.term.paste('foo');\n      });\n    `);\n    await pollFor(page, `window.calls`, ['foo', '\\rfoo\\rbar\\r', '\\x1b[200~foo\\x1b[201~']);\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clear",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 128,
                "column": 11
            },
            "line": 128,
            "code": "  it('clear', async () => {\n    await openTerminal(page, {\n      rows: 5\n    });\n    await page.evaluate(`\n      window.term.write('test0');\n      window.parsed = 0;\n      for (let i = 1; i < 10; i++) {\n        window.term.write('\\\\n\\\\rtest' + i, () => window.parsed++);\n      }\n    `);\n    await pollFor(page, `window.parsed`, 9);\n    await page.evaluate(`window.term.clear()`);\n    await pollFor(page, `window.term.buffer.active.length`, 5);\n    await pollFor(page, `window.term.buffer.active.getLine(0).translateToString(true)`, 'test9');\n\n    for (let i = 1; i < 5; i++) {\n      await pollFor(page, `window.term.buffer.active.getLine(${i}).translateToString(true)`, '');\n    }\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "getOption, setOption",
            "suites": [
                "API Integration Tests"
            ],
            "updatePoint": {
                "line": 148,
                "column": 26
            },
            "line": 148,
            "code": "  it('getOption, setOption', async () => {\n    await openTerminal(page);\n    assert.equal(await page.evaluate(`window.term.getOption('rendererType')`), 'canvas');\n    await page.evaluate(`window.term.setOption('rendererType', 'dom')`);\n    assert.equal(await page.evaluate(`window.term.getOption('rendererType')`), 'dom');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "getter",
            "suites": [
                "API Integration Tests",
                "options"
            ],
            "updatePoint": {
                "line": 155,
                "column": 14
            },
            "line": 155,
            "code": "    it('getter', async () => {\n      await openTerminal(page);\n      assert.equal(await page.evaluate(`window.term.options.rendererType`), 'canvas');\n      assert.equal(await page.evaluate(`window.term.options.cols`), 80);\n      assert.equal(await page.evaluate(`window.term.options.rows`), 24);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setter",
            "suites": [
                "API Integration Tests",
                "options"
            ],
            "updatePoint": {
                "line": 161,
                "column": 14
            },
            "line": 161,
            "code": "    it('setter', async () => {\n      await openTerminal(page);\n\n      try {\n        await page.evaluate('window.term.options.cols = 40');\n        fail();\n      } catch {}\n\n      try {\n        await page.evaluate('window.term.options.rows = 20');\n        fail();\n      } catch {}\n\n      await page.evaluate('window.term.options.scrollback = 1');\n      assert.equal(await page.evaluate(`window.term.options.scrollback`), 1);\n      await page.evaluate(`\n        window.term.options = {\n          fontSize: 30,\n          fontFamily: 'Arial'\n        };\n      `);\n      assert.equal(await page.evaluate(`window.term.options.fontSize`), 30);\n      assert.equal(await page.evaluate(`window.term.options.fontFamily`), 'Arial');\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "foreground",
            "suites": [
                "API Integration Tests",
                "renderer"
            ],
            "updatePoint": {
                "line": 187,
                "column": 18
            },
            "line": 187,
            "code": "    it('foreground', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await writeSync(page, '\\\\x1b[30m0\\\\x1b[31m1\\\\x1b[32m2\\\\x1b[33m3\\\\x1b[34m4\\\\x1b[35m5\\\\x1b[36m6\\\\x1b[37m7');\n      await pollFor(page, `document.querySelectorAll('.xterm-rows > :nth-child(1) > *').length`, 9);\n      assert.deepEqual(await page.evaluate(`\n        [\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(1)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(2)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(3)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(4)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(5)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(6)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(7)').className\n        ]\n      `), ['xterm-fg-0', 'xterm-fg-1', 'xterm-fg-2', 'xterm-fg-3', 'xterm-fg-4', 'xterm-fg-5', 'xterm-fg-6']);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "background",
            "suites": [
                "API Integration Tests",
                "renderer"
            ],
            "updatePoint": {
                "line": 205,
                "column": 18
            },
            "line": 205,
            "code": "    it('background', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await writeSync(page, '\\\\x1b[40m0\\\\x1b[41m1\\\\x1b[42m2\\\\x1b[43m3\\\\x1b[44m4\\\\x1b[45m5\\\\x1b[46m6\\\\x1b[47m7');\n      await pollFor(page, `document.querySelectorAll('.xterm-rows > :nth-child(1) > *').length`, 9);\n      assert.deepEqual(await page.evaluate(`\n        [\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(1)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(2)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(3)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(4)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(5)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(6)').className,\n          document.querySelector('.xterm-rows > :nth-child(1) > :nth-child(7)').className\n        ]\n      `), ['xterm-bg-0', 'xterm-bg-1', 'xterm-bg-2', 'xterm-bg-3', 'xterm-bg-4', 'xterm-bg-5', 'xterm-bg-6']);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "selection",
            "suites": [
                "API Integration Tests",
                "renderer"
            ],
            "updatePoint": {
                "line": 224,
                "column": 15
            },
            "line": 224,
            "code": "  it('selection', async () => {\n    await openTerminal(page, {\n      rows: 5,\n      cols: 5\n    });\n    await writeSync(page, `\\\\n\\\\nfoo\\\\n\\\\n\\\\rbar\\\\n\\\\n\\\\rbaz`);\n    assert.equal(await page.evaluate(`window.term.hasSelection()`), false);\n    assert.equal(await page.evaluate(`window.term.getSelection()`), '');\n    assert.deepEqual(await page.evaluate(`window.term.getSelectionPosition()`), undefined);\n    await page.evaluate(`window.term.selectAll()`);\n    assert.equal(await page.evaluate(`window.term.hasSelection()`), true);\n\n    if (process.platform === 'win32') {\n      assert.equal(await page.evaluate(`window.term.getSelection()`), '\\r\\n\\r\\nfoo\\r\\n\\r\\nbar\\r\\n\\r\\nbaz');\n    } else {\n      assert.equal(await page.evaluate(`window.term.getSelection()`), '\\n\\nfoo\\n\\nbar\\n\\nbaz');\n    }\n\n    assert.deepEqual(await page.evaluate(`window.term.getSelectionPosition()`), {\n      startColumn: 0,\n      startRow: 0,\n      endColumn: 5,\n      endRow: 6\n    });\n    await page.evaluate(`window.term.clearSelection()`);\n    assert.equal(await page.evaluate(`window.term.hasSelection()`), false);\n    assert.equal(await page.evaluate(`window.term.getSelection()`), '');\n    assert.deepEqual(await page.evaluate(`window.term.getSelectionPosition()`), undefined);\n    await page.evaluate(`window.term.select(1, 2, 2)`);\n    assert.equal(await page.evaluate(`window.term.hasSelection()`), true);\n    assert.equal(await page.evaluate(`window.term.getSelection()`), 'oo');\n    assert.deepEqual(await page.evaluate(`window.term.getSelectionPosition()`), {\n      startColumn: 1,\n      startRow: 2,\n      endColumn: 3,\n      endRow: 2\n    });\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "focus, blur",
            "suites": [
                "API Integration Tests",
                "renderer"
            ],
            "updatePoint": {
                "line": 262,
                "column": 17
            },
            "line": 262,
            "code": "  it('focus, blur', async () => {\n    await openTerminal(page);\n    assert.equal(await page.evaluate(`document.activeElement.className`), '');\n    await page.evaluate(`window.term.focus()`);\n    assert.equal(await page.evaluate(`document.activeElement.className`), 'xterm-helper-textarea');\n    await page.evaluate(`window.term.blur()`);\n    assert.equal(await page.evaluate(`document.activeElement.className`), '');\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "constructor",
            "suites": [
                "API Integration Tests",
                "loadAddon"
            ],
            "updatePoint": {
                "line": 271,
                "column": 19
            },
            "line": 271,
            "code": "    it('constructor', async () => {\n      await openTerminal(page, {\n        cols: 5\n      });\n      await page.evaluate(`\n        window.cols = 0;\n        window.term.loadAddon({\n          activate: (t) => window.cols = t.cols,\n          dispose: () => {}\n        });\n      `);\n      assert.equal(await page.evaluate(`window.cols`), 5);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "dispose (addon)",
            "suites": [
                "API Integration Tests",
                "loadAddon"
            ],
            "updatePoint": {
                "line": 284,
                "column": 23
            },
            "line": 284,
            "code": "    it('dispose (addon)', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.disposeCalled = false\n        window.addon = {\n          activate: () => {},\n          dispose: () => window.disposeCalled = true\n        };\n        window.term.loadAddon(window.addon);\n      `);\n      assert.equal(await page.evaluate(`window.disposeCalled`), false);\n      await page.evaluate(`window.addon.dispose()`);\n      assert.equal(await page.evaluate(`window.disposeCalled`), true);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "dispose (terminal)",
            "suites": [
                "API Integration Tests",
                "loadAddon"
            ],
            "updatePoint": {
                "line": 298,
                "column": 26
            },
            "line": 298,
            "code": "    it('dispose (terminal)', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.disposeCalled = false\n        window.term.loadAddon({\n          activate: () => {},\n          dispose: () => window.disposeCalled = true\n        });\n      `);\n      assert.equal(await page.evaluate(`window.disposeCalled`), false);\n      await page.evaluate(`window.term.dispose()`);\n      assert.equal(await page.evaluate(`window.disposeCalled`), true);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onCursorMove",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 313,
                "column": 20
            },
            "line": 313,
            "code": "    it('onCursorMove', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.callCount = 0;\n        window.term.onCursorMove(e => window.callCount++);\n        window.term.write('foo');\n      `);\n      await pollFor(page, `window.callCount`, 1);\n      await page.evaluate(`window.term.write('bar')`);\n      await pollFor(page, `window.callCount`, 2);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onData",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 324,
                "column": 14
            },
            "line": 324,
            "code": "    it('onData', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.calls = [];\n        window.term.onData(e => calls.push(e));\n      `);\n      await page.type('.xterm-helper-textarea', 'foo');\n      assert.deepEqual(await page.evaluate(`window.calls`), ['f', 'o', 'o']);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onKey",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 333,
                "column": 13
            },
            "line": 333,
            "code": "    it('onKey', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.calls = [];\n        window.term.onKey(e => calls.push(e.key));\n      `);\n      await page.type('.xterm-helper-textarea', 'foo');\n      assert.deepEqual(await page.evaluate(`window.calls`), ['f', 'o', 'o']);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onLineFeed",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 342,
                "column": 18
            },
            "line": 342,
            "code": "    it('onLineFeed', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.callCount = 0;\n        window.term.onLineFeed(() => callCount++);\n        window.term.writeln('foo');\n      `);\n      await pollFor(page, `window.callCount`, 1);\n      await page.evaluate(`window.term.writeln('bar')`);\n      await pollFor(page, `window.callCount`, 2);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onScroll",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 353,
                "column": 16
            },
            "line": 353,
            "code": "    it('onScroll', async () => {\n      await openTerminal(page, {\n        rows: 5\n      });\n      await page.evaluate(`\n        window.calls = [];\n        window.term.onScroll(e => window.calls.push(e));\n        for (let i = 0; i < 4; i++) {\n          window.term.writeln('foo');\n        }\n      `);\n      await pollFor(page, `window.calls`, []);\n      await page.evaluate(`window.term.writeln('bar')`);\n      await pollFor(page, `window.calls`, [1]);\n      await page.evaluate(`window.term.writeln('baz')`);\n      await pollFor(page, `window.calls`, [1, 2]);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onSelectionChange",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 370,
                "column": 25
            },
            "line": 370,
            "code": "    it('onSelectionChange', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.callCount = 0;\n        window.term.onSelectionChange(() => window.callCount++);\n      `);\n      await pollFor(page, `window.callCount`, 0);\n      await page.evaluate(`window.term.selectAll()`);\n      await pollFor(page, `window.callCount`, 1);\n      await page.evaluate(`window.term.clearSelection()`);\n      await pollFor(page, `window.callCount`, 2);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onRender",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 382,
                "column": 16
            },
            "line": 382,
            "code": "    it('onRender', async function () {\n      this.retries(3);\n      await openTerminal(page);\n      await timeout(20); // Ensure all init events are fired\n\n      await page.evaluate(`\n        window.calls = [];\n        window.term.onRender(e => window.calls.push([e.start, e.end]));\n      `);\n      await pollFor(page, `window.calls`, []);\n      await page.evaluate(`window.term.write('foo')`);\n      await pollFor(page, `window.calls`, [[0, 0]]);\n      await page.evaluate(`window.term.write('bar\\\\n\\\\nbaz')`);\n      await pollFor(page, `window.calls`, [[0, 0], [0, 2]]);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onResize",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 397,
                "column": 16
            },
            "line": 397,
            "code": "    it('onResize', async () => {\n      await openTerminal(page);\n      await timeout(20); // Ensure all init events are fired\n\n      await page.evaluate(`\n        window.calls = [];\n        window.term.onResize(e => window.calls.push([e.cols, e.rows]));\n      `);\n      await pollFor(page, `window.calls`, []);\n      await page.evaluate(`window.term.resize(10, 5)`);\n      await pollFor(page, `window.calls`, [[10, 5]]);\n      await page.evaluate(`window.term.resize(20, 15)`);\n      await pollFor(page, `window.calls`, [[10, 5], [20, 15]]);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onTitleChange",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 411,
                "column": 21
            },
            "line": 411,
            "code": "    it('onTitleChange', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.calls = [];\n        window.term.onTitleChange(e => window.calls.push(e));\n      `);\n      await pollFor(page, `window.calls`, []);\n      await page.evaluate(`window.term.write('\\\\x1b]2;foo\\\\x9c')`);\n      await pollFor(page, `window.calls`, ['foo']);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "onBell",
            "suites": [
                "API Integration Tests",
                "Events"
            ],
            "updatePoint": {
                "line": 421,
                "column": 14
            },
            "line": 421,
            "code": "    it('onBell', async () => {\n      await openTerminal(page);\n      await page.evaluate(`\n        window.calls = [];\n        window.term.onBell(() => window.calls.push(true));\n      `);\n      await pollFor(page, `window.calls`, []);\n      await page.evaluate(`window.term.write('\\\\x07')`);\n      await pollFor(page, `window.calls`, [true]);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "cursorX, cursorY",
            "suites": [
                "API Integration Tests",
                "buffer"
            ],
            "updatePoint": {
                "line": 433,
                "column": 24
            },
            "line": 433,
            "code": "    it('cursorX, cursorY', async () => {\n      await openTerminal(page, {\n        rows: 5,\n        cols: 5\n      });\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorX`), 0);\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorY`), 0);\n      await writeSync(page, 'foo');\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorX`), 3);\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorY`), 0);\n      await writeSync(page, '\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorX`), 3);\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorY`), 1);\n      await writeSync(page, '\\\\r');\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorX`), 0);\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorY`), 1);\n      await writeSync(page, 'abcde');\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorX`), 5);\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorY`), 1);\n      await writeSync(page, '\\\\n\\\\r\\\\n\\\\n\\\\n\\\\n\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorX`), 0);\n      assert.equal(await page.evaluate(`window.term.buffer.active.cursorY`), 4);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "viewportY",
            "suites": [
                "API Integration Tests",
                "buffer"
            ],
            "updatePoint": {
                "line": 456,
                "column": 17
            },
            "line": 456,
            "code": "    it('viewportY', async () => {\n      await openTerminal(page, {\n        rows: 5\n      });\n      assert.equal(await page.evaluate(`window.term.buffer.active.viewportY`), 0);\n      await writeSync(page, '\\\\n\\\\n\\\\n\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.viewportY`), 0);\n      await writeSync(page, '\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.viewportY`), 1);\n      await writeSync(page, '\\\\n\\\\n\\\\n\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.viewportY`), 5);\n      await page.evaluate(`window.term.scrollLines(-1)`);\n      assert.equal(await page.evaluate(`window.term.buffer.active.viewportY`), 4);\n      await page.evaluate(`window.term.scrollToTop()`);\n      assert.equal(await page.evaluate(`window.term.buffer.active.viewportY`), 0);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "baseY",
            "suites": [
                "API Integration Tests",
                "buffer"
            ],
            "updatePoint": {
                "line": 472,
                "column": 13
            },
            "line": 472,
            "code": "    it('baseY', async () => {\n      await openTerminal(page, {\n        rows: 5\n      });\n      assert.equal(await page.evaluate(`window.term.buffer.active.baseY`), 0);\n      await writeSync(page, '\\\\n\\\\n\\\\n\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.baseY`), 0);\n      await writeSync(page, '\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.baseY`), 1);\n      await writeSync(page, '\\\\n\\\\n\\\\n\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.baseY`), 5);\n      await page.evaluate(`window.term.scrollLines(-1)`);\n      assert.equal(await page.evaluate(`window.term.buffer.active.baseY`), 5);\n      await page.evaluate(`window.term.scrollToTop()`);\n      assert.equal(await page.evaluate(`window.term.buffer.active.baseY`), 5);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "length",
            "suites": [
                "API Integration Tests",
                "buffer"
            ],
            "updatePoint": {
                "line": 488,
                "column": 14
            },
            "line": 488,
            "code": "    it('length', async () => {\n      await openTerminal(page, {\n        rows: 5\n      });\n      assert.equal(await page.evaluate(`window.term.buffer.active.length`), 5);\n      await writeSync(page, '\\\\n\\\\n\\\\n\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.length`), 5);\n      await writeSync(page, '\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.length`), 6);\n      await writeSync(page, '\\\\n\\\\n\\\\n\\\\n');\n      assert.equal(await page.evaluate(`window.term.buffer.active.length`), 10);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "invalid index",
            "suites": [
                "API Integration Tests",
                "buffer",
                "getLine"
            ],
            "updatePoint": {
                "line": 501,
                "column": 23
            },
            "line": 501,
            "code": "      it('invalid index', async () => {\n        await openTerminal(page, {\n          rows: 5\n        });\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(-1)`), undefined);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(5)`), undefined);\n      });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isWrapped",
            "suites": [
                "API Integration Tests",
                "buffer",
                "getLine"
            ],
            "updatePoint": {
                "line": 508,
                "column": 19
            },
            "line": 508,
            "code": "      it('isWrapped', async () => {\n        await openTerminal(page, {\n          cols: 5\n        });\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).isWrapped`), false);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(1).isWrapped`), false);\n        await writeSync(page, 'abcde');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).isWrapped`), false);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(1).isWrapped`), false);\n        await writeSync(page, 'f');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).isWrapped`), false);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(1).isWrapped`), true);\n      });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "translateToString",
            "suites": [
                "API Integration Tests",
                "buffer",
                "getLine"
            ],
            "updatePoint": {
                "line": 521,
                "column": 27
            },
            "line": 521,
            "code": "      it('translateToString', async () => {\n        await openTerminal(page, {\n          cols: 5\n        });\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString()`), '     ');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString(true)`), '');\n        await writeSync(page, 'foo');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString()`), 'foo  ');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString(true)`), 'foo');\n        await writeSync(page, 'bar');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString()`), 'fooba');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString(true)`), 'fooba');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(1).translateToString(true)`), 'r');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString(false, 1)`), 'ooba');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString(false, 1, 3)`), 'oo');\n      });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "getCell",
            "suites": [
                "API Integration Tests",
                "buffer",
                "getLine"
            ],
            "updatePoint": {
                "line": 537,
                "column": 17
            },
            "line": 537,
            "code": "      it('getCell', async () => {\n        await openTerminal(page, {\n          cols: 5\n        });\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(-1)`), undefined);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(5)`), undefined);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(0).getChars()`), '');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(0).getWidth()`), 1);\n        await writeSync(page, 'a文');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(0).getChars()`), 'a');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(0).getWidth()`), 1);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(1).getChars()`), '文');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(1).getWidth()`), 2);\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(2).getChars()`), '');\n        assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).getCell(2).getWidth()`), 0);\n      });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "active, normal, alternate",
            "suites": [
                "API Integration Tests",
                "buffer",
                "getLine"
            ],
            "updatePoint": {
                "line": 554,
                "column": 33
            },
            "line": 554,
            "code": "    it('active, normal, alternate', async () => {\n      await openTerminal(page, {\n        cols: 5\n      });\n      assert.equal(await page.evaluate(`window.term.buffer.active.type`), 'normal');\n      assert.equal(await page.evaluate(`window.term.buffer.normal.type`), 'normal');\n      assert.equal(await page.evaluate(`window.term.buffer.alternate.type`), 'alternate');\n      await writeSync(page, 'norm ');\n      assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString()`), 'norm ');\n      assert.equal(await page.evaluate(`window.term.buffer.normal.getLine(0).translateToString()`), 'norm ');\n      assert.equal(await page.evaluate(`window.term.buffer.alternate.getLine(0)`), undefined);\n      await writeSync(page, '\\\\x1b[?47h\\\\r'); // use alternate screen buffer\n\n      assert.equal(await page.evaluate(`window.term.buffer.active.type`), 'alternate');\n      assert.equal(await page.evaluate(`window.term.buffer.normal.type`), 'normal');\n      assert.equal(await page.evaluate(`window.term.buffer.alternate.type`), 'alternate');\n      assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString()`), '     ');\n      await writeSync(page, 'alt  ');\n      assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString()`), 'alt  ');\n      assert.equal(await page.evaluate(`window.term.buffer.normal.getLine(0).translateToString()`), 'norm ');\n      assert.equal(await page.evaluate(`window.term.buffer.alternate.getLine(0).translateToString()`), 'alt  ');\n      await writeSync(page, '\\\\x1b[?47l\\\\r'); // use normal screen buffer\n\n      assert.equal(await page.evaluate(`window.term.buffer.active.type`), 'normal');\n      assert.equal(await page.evaluate(`window.term.buffer.normal.type`), 'normal');\n      assert.equal(await page.evaluate(`window.term.buffer.alternate.type`), 'alternate');\n      assert.equal(await page.evaluate(`window.term.buffer.active.getLine(0).translateToString()`), 'norm ');\n      assert.equal(await page.evaluate(`window.term.buffer.normal.getLine(0).translateToString()`), 'norm ');\n      assert.equal(await page.evaluate(`window.term.buffer.alternate.getLine(0)`), undefined);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "defaults",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 586,
                "column": 16
            },
            "line": 586,
            "code": "    it('defaults', async () => {\n      await openTerminal(page);\n      assert.deepStrictEqual(await page.evaluate(`window.term.modes`), {\n        applicationCursorKeysMode: false,\n        applicationKeypadMode: false,\n        bracketedPasteMode: false,\n        insertMode: false,\n        mouseTrackingMode: 'none',\n        originMode: false,\n        reverseWraparoundMode: false,\n        sendFocusMode: false,\n        wraparoundMode: true\n      });\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "applicationCursorKeysMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 600,
                "column": 33
            },
            "line": 600,
            "code": "    it('applicationCursorKeysMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?1h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.applicationCursorKeysMode`), true);\n      await writeSync(page, '\\\\x1b[?1l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.applicationCursorKeysMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "applicationKeypadMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 607,
                "column": 29
            },
            "line": 607,
            "code": "    it('applicationKeypadMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?66h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.applicationKeypadMode`), true);\n      await writeSync(page, '\\\\x1b[?66l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.applicationKeypadMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "bracketedPasteMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 614,
                "column": 26
            },
            "line": 614,
            "code": "    it('bracketedPasteMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?2004h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.bracketedPasteMode`), true);\n      await writeSync(page, '\\\\x1b[?2004l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.bracketedPasteMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 621,
                "column": 18
            },
            "line": 621,
            "code": "    it('insertMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[4h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.insertMode`), true);\n      await writeSync(page, '\\\\x1b[4l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.insertMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "mouseTrackingMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 628,
                "column": 25
            },
            "line": 628,
            "code": "    it('mouseTrackingMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?9h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'x10');\n      await writeSync(page, '\\\\x1b[?9l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'none');\n      await writeSync(page, '\\\\x1b[?1000h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'vt200');\n      await writeSync(page, '\\\\x1b[?1000l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'none');\n      await writeSync(page, '\\\\x1b[?1002h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'drag');\n      await writeSync(page, '\\\\x1b[?1002l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'none');\n      await writeSync(page, '\\\\x1b[?1003h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'any');\n      await writeSync(page, '\\\\x1b[?1003l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.mouseTrackingMode`), 'none');\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "originMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 647,
                "column": 18
            },
            "line": 647,
            "code": "    it('originMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?6h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.originMode`), true);\n      await writeSync(page, '\\\\x1b[?6l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.originMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "reverseWraparoundMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 654,
                "column": 29
            },
            "line": 654,
            "code": "    it('reverseWraparoundMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?45h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.reverseWraparoundMode`), true);\n      await writeSync(page, '\\\\x1b[?45l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.reverseWraparoundMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sendFocusMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 661,
                "column": 21
            },
            "line": 661,
            "code": "    it('sendFocusMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?1004h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.sendFocusMode`), true);\n      await writeSync(page, '\\\\x1b[?1004l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.sendFocusMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wraparoundMode",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 668,
                "column": 22
            },
            "line": 668,
            "code": "    it('wraparoundMode', async () => {\n      await openTerminal(page);\n      await writeSync(page, '\\\\x1b[?7h');\n      assert.strictEqual(await page.evaluate(`window.term.modes.wraparoundMode`), true);\n      await writeSync(page, '\\\\x1b[?7l');\n      assert.strictEqual(await page.evaluate(`window.term.modes.wraparoundMode`), false);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "dispose",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 676,
                "column": 13
            },
            "line": 676,
            "code": "  it('dispose', async () => {\n    await page.evaluate(`\n      window.term = new Terminal();\n      window.term.dispose();\n    `);\n    assert.equal(await page.evaluate(`window.term._core._isDisposed`), true);\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "dispose (opened)",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 683,
                "column": 22
            },
            "line": 683,
            "code": "  it('dispose (opened)', async () => {\n    await openTerminal(page);\n    await page.evaluate(`window.term.dispose()`);\n    assert.equal(await page.evaluate(`window.term._core._isDisposed`), true);\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "render when visible after hidden",
            "suites": [
                "API Integration Tests",
                "modes"
            ],
            "updatePoint": {
                "line": 688,
                "column": 38
            },
            "line": 688,
            "code": "  it('render when visible after hidden', async () => {\n    await page.evaluate(`document.querySelector('#terminal-container').style.display='none'`);\n    await page.evaluate(`window.term = new Terminal()`);\n    await page.evaluate(`window.term.open(document.querySelector('#terminal-container'))`);\n    await page.evaluate(`document.querySelector('#terminal-container').style.display=''`);\n    await pollFor(page, `window.term._core._renderService.dimensions.actualCellWidth > 0`, true);\n  });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire provideLinks when hovering cells",
            "suites": [
                "API Integration Tests",
                "registerLinkProvider"
            ],
            "updatePoint": {
                "line": 696,
                "column": 52
            },
            "line": 696,
            "code": "    it('should fire provideLinks when hovering cells', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await page.evaluate(`\n        window.calls = [];\n        window.disposable = window.term.registerLinkProvider({\n          provideLinks: (position, cb) => {\n            calls.push(position);\n            cb(undefined);\n          }\n        });\n      `);\n      const dims = await getDimensions();\n      await moveMouseCell(page, dims, 1, 1);\n      await moveMouseCell(page, dims, 2, 2);\n      await moveMouseCell(page, dims, 10, 4);\n      await pollFor(page, `window.calls`, [1, 2, 4]);\n      await page.evaluate(`window.disposable.dispose()`);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire hover and leave events on the link",
            "suites": [
                "API Integration Tests",
                "registerLinkProvider"
            ],
            "updatePoint": {
                "line": 716,
                "column": 54
            },
            "line": 716,
            "code": "    it('should fire hover and leave events on the link', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await writeSync(page, 'foo bar baz'); // Wait for renderer to catch up as links are cleared on render\n\n      await pollFor(page, `document.querySelector('.xterm-rows').textContent`, 'foo bar baz ');\n      await page.evaluate(`\n        window.calls = [];\n        window.disposable = window.term.registerLinkProvider({\n          provideLinks: (position, cb) => {\n            window.calls.push('provide ' + position);\n            if (position === 1) {\n              window.calls.push('match');\n              cb([{\n                range: { start: { x: 5, y: 1 }, end: { x: 7, y: 1 } },\n                text: 'bar',\n                activate: () => window.calls.push('activate'),\n                hover: () => window.calls.push('hover'),\n                leave: () => window.calls.push('leave')\n              }]);\n            }\n          }\n        });\n      `);\n      const dims = await getDimensions();\n      await moveMouseCell(page, dims, 5, 1);\n      await timeout(100);\n      await moveMouseCell(page, dims, 4, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'match', 'hover', 'leave']);\n      await moveMouseCell(page, dims, 7, 1);\n      await timeout(100);\n      await moveMouseCell(page, dims, 8, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'match', 'hover', 'leave', 'hover', 'leave']);\n      await page.evaluate(`window.disposable.dispose()`);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work fine when hover and leave callbacks are not provided",
            "suites": [
                "API Integration Tests",
                "registerLinkProvider"
            ],
            "updatePoint": {
                "line": 752,
                "column": 72
            },
            "line": 752,
            "code": "    it('should work fine when hover and leave callbacks are not provided', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await writeSync(page, 'foo bar baz'); // Wait for renderer to catch up as links are cleared on render\n\n      await pollFor(page, `document.querySelector('.xterm-rows').textContent`, 'foo bar baz ');\n      await page.evaluate(`\n        window.calls = [];\n        window.disposable = window.term.registerLinkProvider({\n          provideLinks: (position, cb) => {\n            window.calls.push('provide ' + position);\n            if (position === 1) {\n              window.calls.push('match 1');\n              cb([{\n                range: { start: { x: 5, y: 1 }, end: { x: 7, y: 1 } },\n                text: 'bar',\n                activate: () => window.calls.push('activate')\n              }]);\n            } else if (position === 2) {\n              window.calls.push('match 2');\n              cb([{\n                range: { start: { x: 5, y: 2 }, end: { x: 7, y: 2 } },\n                text: 'bar',\n                activate: () => window.calls.push('activate')\n              }]);\n            }\n          }\n        });\n      `);\n      const dims = await getDimensions();\n      await moveMouseCell(page, dims, 5, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'match 1']);\n      await moveMouseCell(page, dims, 4, 2);\n      await pollFor(page, `window.calls`, ['provide 1', 'match 1', 'provide 2', 'match 2']);\n      await moveMouseCell(page, dims, 7, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'match 1', 'provide 2', 'match 2', 'provide 1', 'match 1']);\n      await moveMouseCell(page, dims, 6, 2);\n      await pollFor(page, `window.calls`, ['provide 1', 'match 1', 'provide 2', 'match 2', 'provide 1', 'match 1', 'provide 2', 'match 2']);\n      await page.evaluate(`window.disposable.dispose()`);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire activate events when clicking the link",
            "suites": [
                "API Integration Tests",
                "registerLinkProvider"
            ],
            "updatePoint": {
                "line": 793,
                "column": 58
            },
            "line": 793,
            "code": "    it('should fire activate events when clicking the link', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await writeSync(page, 'a b c'); // Wait for renderer to catch up as links are cleared on render\n\n      await pollFor(page, `document.querySelector('.xterm-rows').textContent`, 'a b c '); // Focus terminal to avoid a render event clearing the active link\n\n      const dims = await getDimensions();\n      await moveMouseCell(page, dims, 5, 5);\n      await page.mouse.down();\n      await page.mouse.up();\n      await timeout(200); // Not sure how to avoid this timeout, checking for xterm-focus doesn't help\n\n      await page.evaluate(`\n        window.calls = [];\n        window.disposable = window.term.registerLinkProvider({\n          provideLinks: (y, cb) => {\n            window.calls.push('provide ' + y);\n            cb([{\n              range: { start: { x: 1, y }, end: { x: 80, y } },\n              text: window.term.buffer.active.getLine(y - 1).translateToString(),\n              activate: (_, text) => window.calls.push('activate ' + y),\n              hover: () => window.calls.push('hover ' + y),\n              leave: () => window.calls.push('leave ' + y)\n            }]);\n          }\n        });\n      `);\n      await moveMouseCell(page, dims, 3, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1']);\n      await page.mouse.down();\n      await page.mouse.up();\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1', 'activate 1']);\n      await moveMouseCell(page, dims, 1, 2);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1', 'activate 1', 'leave 1', 'provide 2', 'hover 2']);\n      await page.mouse.down();\n      await page.mouse.up();\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1', 'activate 1', 'leave 1', 'provide 2', 'hover 2', 'activate 2']);\n      await moveMouseCell(page, dims, 5, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1', 'activate 1', 'leave 1', 'provide 2', 'hover 2', 'activate 2', 'leave 2', 'provide 1', 'hover 1']);\n      await page.mouse.down();\n      await page.mouse.up();\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1', 'activate 1', 'leave 1', 'provide 2', 'hover 2', 'activate 2', 'leave 2', 'provide 1', 'hover 1', 'activate 1']);\n      await page.evaluate(`window.disposable.dispose()`);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work when multiple links are provided on the same line",
            "suites": [
                "API Integration Tests",
                "registerLinkProvider"
            ],
            "updatePoint": {
                "line": 839,
                "column": 69
            },
            "line": 839,
            "code": "    it('should work when multiple links are provided on the same line', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await writeSync(page, 'foo bar baz'); // Wait for renderer to catch up as links are cleared on render\n\n      await pollFor(page, `document.querySelector('.xterm-rows').textContent`, 'foo bar baz ');\n      await page.evaluate(`\n        window.calls = [];\n        window.disposable = window.term.registerLinkProvider({\n          provideLinks: (position, cb) => {\n            window.calls.push('provide ' + position);\n            if (position === 1) {\n              cb([{\n                range: { start: { x: 1, y: 1 }, end: { x: 3, y: 1 } },\n                text: '',\n                activate: () => window.calls.push('activate'),\n                hover: () => window.calls.push('hover 1-3'),\n                leave: () => window.calls.push('leave 1-3')\n              }, {\n                range: { start: { x: 5, y: 1 }, end: { x: 7, y: 1 } },\n                text: '',\n                activate: () => window.calls.push('activate'),\n                hover: () => window.calls.push('hover 5-7'),\n                leave: () => window.calls.push('leave 5-7')\n              }, {\n                range: { start: { x: 9, y: 1 }, end: { x: 11, y: 1 } },\n                text: '',\n                activate: () => window.calls.push('activate'),\n                hover: () => window.calls.push('hover 9-11'),\n                leave: () => window.calls.push('leave 9-11')\n              }]);\n            }\n          }\n        });\n      `);\n      const dims = await getDimensions();\n      await moveMouseCell(page, dims, 2, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3']);\n      await moveMouseCell(page, dims, 6, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3', 'leave 1-3', 'hover 5-7']);\n      await moveMouseCell(page, dims, 6, 2);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3', 'leave 1-3', 'hover 5-7', 'leave 5-7', 'provide 2']);\n      await moveMouseCell(page, dims, 10, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3', 'leave 1-3', 'hover 5-7', 'leave 5-7', 'provide 2', 'provide 1', 'hover 9-11']);\n      await page.evaluate(`window.disposable.dispose()`);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should dispose links when hovering away",
            "suites": [
                "API Integration Tests",
                "registerLinkProvider"
            ],
            "updatePoint": {
                "line": 886,
                "column": 47
            },
            "line": 886,
            "code": "    it('should dispose links when hovering away', async () => {\n      await openTerminal(page, {\n        rendererType: 'dom'\n      });\n      await writeSync(page, 'foo bar baz'); // Wait for renderer to catch up as links are cleared on render\n\n      await pollFor(page, `document.querySelector('.xterm-rows').textContent`, 'foo bar baz ');\n      await page.evaluate(`\n        window.calls = [];\n        window.disposable = window.term.registerLinkProvider({\n          provideLinks: (position, cb) => {\n            window.calls.push('provide ' + position);\n            if (position === 1) {\n              cb([{\n                range: { start: { x: 1, y: 1 }, end: { x: 3, y: 1 } },\n                text: '',\n                activate: () => window.calls.push('activate'),\n                dispose: () => window.calls.push('dispose 1-3'),\n                hover: () => window.calls.push('hover 1-3'),\n                leave: () => window.calls.push('leave 1-3')\n              }, {\n                range: { start: { x: 5, y: 1 }, end: { x: 7, y: 1 } },\n                text: '',\n                activate: () => window.calls.push('activate'),\n                dispose: () => window.calls.push('dispose 5-7'),\n                hover: () => window.calls.push('hover 5-7'),\n                leave: () => window.calls.push('leave 5-7')\n              }, {\n                range: { start: { x: 9, y: 1 }, end: { x: 11, y: 1 } },\n                text: '',\n                activate: () => window.calls.push('activate'),\n                dispose: () => window.calls.push('dispose 9-11'),\n                hover: () => window.calls.push('hover 9-11'),\n                leave: () => window.calls.push('leave 9-11')\n              }]);\n            }\n          }\n        });\n      `);\n      const dims = await getDimensions();\n      await moveMouseCell(page, dims, 2, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3']);\n      await moveMouseCell(page, dims, 6, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3', 'leave 1-3', 'hover 5-7']);\n      await moveMouseCell(page, dims, 6, 2);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3', 'leave 1-3', 'hover 5-7', 'leave 5-7', 'dispose 1-3', 'dispose 5-7', 'dispose 9-11', 'provide 2']);\n      await moveMouseCell(page, dims, 10, 1);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3', 'leave 1-3', 'hover 5-7', 'leave 5-7', 'dispose 1-3', 'dispose 5-7', 'dispose 9-11', 'provide 2', 'provide 1', 'hover 9-11']);\n      await moveMouseCell(page, dims, 10, 2);\n      await pollFor(page, `window.calls`, ['provide 1', 'hover 1-3', 'leave 1-3', 'hover 5-7', 'leave 5-7', 'dispose 1-3', 'dispose 5-7', 'dispose 9-11', 'provide 2', 'provide 1', 'hover 9-11', 'leave 9-11', 'dispose 1-3', 'dispose 5-7', 'dispose 9-11', 'provide 2']);\n      await page.evaluate(`window.disposable.dispose()`);\n    });",
            "file": "api/Terminal.api.ts",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "xtermjs__xterm_js.svg"
}