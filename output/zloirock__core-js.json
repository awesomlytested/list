{
    "repo": "zloirock/core-js",
    "url": "https://github.com/zloirock/core-js",
    "branch": "master",
    "configs": [
        {
            "lang": "js",
            "dir": "tests",
            "framework": "qunit",
            "pattern": "**/**.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "\"",
            "suites": [],
            "updatePoint": {
                "line": 193,
                "column": 54
            },
            "line": 193,
            "code": "    return test == test.toLowerCase() && test.split('\"').length <= 3;",
            "file": "compat/tests.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "abc",
            "suites": [],
            "updatePoint": {
                "line": 989,
                "column": 23
            },
            "line": 989,
            "code": "    return re.test('abc') === true && execCalled;",
            "file": "compat/tests.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AggregateError",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 26
            },
            "line": 5,
            "code": "QUnit.test('AggregateError', assert => {",
            "file": "pure/es.aggregate-error.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#at",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 20
            },
            "line": 3,
            "code": "QUnit.test('Array#at', assert => {",
            "file": "pure/es.array.at.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#concat",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 24
            },
            "line": 5,
            "code": "QUnit.test('Array#concat', assert => {",
            "file": "pure/es.array.concat.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#copyWithin",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 28
            },
            "line": 3,
            "code": "QUnit.test('Array#copyWithin', assert => {",
            "file": "pure/es.array.copy-within.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#every",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 23
            },
            "line": 3,
            "code": "QUnit.test('Array#every', assert => {",
            "file": "pure/es.array.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#fill",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Array#fill', assert => {",
            "file": "pure/es.array.fill.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#filter",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 24
            },
            "line": 4,
            "code": "QUnit.test('Array#filter', assert => {",
            "file": "pure/es.array.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#findIndex",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('Array#findIndex', assert => {",
            "file": "pure/es.array.find-index.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#find",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Array#find', assert => {",
            "file": "pure/es.array.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#flatMap",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Array#flatMap', assert => {",
            "file": "pure/es.array.flat-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#flat",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 22
            },
            "line": 4,
            "code": "QUnit.test('Array#flat', assert => {",
            "file": "pure/es.array.flat.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#forEach",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Array#forEach', assert => {",
            "file": "pure/es.array.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.from",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 22
            },
            "line": 7,
            "code": "QUnit.test('Array.from', assert => {",
            "file": "pure/es.array.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#includes",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 26
            },
            "line": 3,
            "code": "QUnit.test('Array#includes', assert => {",
            "file": "pure/es.array.includes.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#indexOf",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Array#indexOf', assert => {",
            "file": "pure/es.array.index-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.isArray",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Array.isArray', assert => {",
            "file": "pure/es.array.is-array.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 28
            },
            "line": 4,
            "code": "QUnit.test('Array#@@iterator', assert => {",
            "file": "pure/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#keys",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 22
            },
            "line": 28,
            "code": "QUnit.test('Array#keys', assert => {",
            "file": "pure/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#values",
            "suites": [],
            "updatePoint": {
                "line": 51,
                "column": 24
            },
            "line": 51,
            "code": "QUnit.test('Array#values', assert => {",
            "file": "pure/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#entries",
            "suites": [],
            "updatePoint": {
                "line": 74,
                "column": 25
            },
            "line": 74,
            "code": "QUnit.test('Array#entries', assert => {",
            "file": "pure/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#join",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Array#join', assert => {",
            "file": "pure/es.array.join.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#lastIndexOf",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('Array#lastIndexOf', assert => {",
            "file": "pure/es.array.last-index-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#map",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 21
            },
            "line": 4,
            "code": "QUnit.test('Array#map', assert => {",
            "file": "pure/es.array.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.of",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "QUnit.test('Array.of', assert => {",
            "file": "pure/es.array.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#reduceRight",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('Array#reduceRight', assert => {",
            "file": "pure/es.array.reduce-right.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#reduce",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 24
            },
            "line": 3,
            "code": "QUnit.test('Array#reduce', assert => {",
            "file": "pure/es.array.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#reverse",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Array#reverse', assert => {",
            "file": "pure/es.array.reverse.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#slice",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 23
            },
            "line": 5,
            "code": "QUnit.test('Array#slice', assert => {",
            "file": "pure/es.array.slice.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#some",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Array#some', assert => {",
            "file": "pure/es.array.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#sort",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Array#sort', assert => {",
            "file": "pure/es.array.sort.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#splice",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 24
            },
            "line": 4,
            "code": "QUnit.test('Array#splice', assert => {",
            "file": "pure/es.array.splice.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#getYear",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Date#getYear', assert => {",
            "file": "pure/es.date.get-year.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date.now",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Date.now', assert => {",
            "file": "pure/es.date.now.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#setYear",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Date#setYear', assert => {",
            "file": "pure/es.date.set-year.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#toGMTString",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Date#toGMTString', assert => {",
            "file": "pure/es.date.to-gmt-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#toISOString",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Date#toISOString', assert => {",
            "file": "pure/es.date.to-iso-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#toJSON",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 23
            },
            "line": 3,
            "code": "QUnit.test('Date#toJSON', assert => {",
            "file": "pure/es.date.to-json.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": " constructor with 'cause' param",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 58
            },
            "line": 6,
            "code": "  QUnit.test(`${ERROR_NAME} constructor with 'cause' param`, assert => {",
            "file": "pure/es.error.cause.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "escape",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 18
            },
            "line": 2,
            "code": "QUnit.test('escape', assert => {",
            "file": "pure/es.escape.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function#bind",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Function#bind', assert => {",
            "file": "pure/es.function.bind.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function#@@hasInstance",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 34
            },
            "line": 2,
            "code": "QUnit.test('Function#@@hasInstance', assert => {",
            "file": "pure/es.function.has-instance.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "globalThis",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('globalThis', assert => {",
            "file": "pure/es.global-this.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Well‑formed JSON.stringify",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 40
            },
            "line": 5,
            "code": "  QUnit.test('Well‑formed JSON.stringify', assert => {",
            "file": "pure/es.json.stringify.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 15
            },
            "line": 15,
            "code": "QUnit.test('Map', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#clear",
            "suites": [],
            "updatePoint": {
                "line": 80,
                "column": 21
            },
            "line": 80,
            "code": "QUnit.test('Map#clear', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#delete",
            "suites": [],
            "updatePoint": {
                "line": 97,
                "column": 22
            },
            "line": 97,
            "code": "QUnit.test('Map#delete', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#forEach",
            "suites": [],
            "updatePoint": {
                "line": 122,
                "column": 23
            },
            "line": 122,
            "code": "QUnit.test('Map#forEach', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#get",
            "suites": [],
            "updatePoint": {
                "line": 175,
                "column": 19
            },
            "line": 175,
            "code": "QUnit.test('Map#get', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#has",
            "suites": [],
            "updatePoint": {
                "line": 194,
                "column": 19
            },
            "line": 194,
            "code": "QUnit.test('Map#has', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#set",
            "suites": [],
            "updatePoint": {
                "line": 213,
                "column": 19
            },
            "line": 213,
            "code": "QUnit.test('Map#set', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#size",
            "suites": [],
            "updatePoint": {
                "line": 248,
                "column": 20
            },
            "line": 248,
            "code": "QUnit.test('Map#size', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map & -0",
            "suites": [],
            "updatePoint": {
                "line": 266,
                "column": 20
            },
            "line": 266,
            "code": "QUnit.test('Map & -0', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 291,
                "column": 29
            },
            "line": 291,
            "code": "QUnit.test('Map#@@toStringTag', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map Iterator",
            "suites": [],
            "updatePoint": {
                "line": 295,
                "column": 24
            },
            "line": 295,
            "code": "QUnit.test('Map Iterator', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#keys",
            "suites": [],
            "updatePoint": {
                "line": 314,
                "column": 20
            },
            "line": 314,
            "code": "QUnit.test('Map#keys', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#values",
            "suites": [],
            "updatePoint": {
                "line": 341,
                "column": 22
            },
            "line": 341,
            "code": "QUnit.test('Map#values', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#entries",
            "suites": [],
            "updatePoint": {
                "line": 368,
                "column": 23
            },
            "line": 368,
            "code": "QUnit.test('Map#entries', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 395,
                "column": 26
            },
            "line": 395,
            "code": "QUnit.test('Map#@@iterator', assert => {",
            "file": "pure/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.acosh",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Math.acosh', assert => {",
            "file": "pure/es.math.acosh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.asinh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.asinh', assert => {",
            "file": "pure/es.math.asinh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.atanh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.atanh', assert => {",
            "file": "pure/es.math.atanh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.cbrt",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.cbrt', assert => {",
            "file": "pure/es.math.cbrt.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.clz32",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.clz32', assert => {",
            "file": "pure/es.math.clz32.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.cosh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.cosh', assert => {",
            "file": "pure/es.math.cosh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.expm1",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.expm1', assert => {",
            "file": "pure/es.math.expm1.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.fround",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Math.fround', assert => {",
            "file": "pure/es.math.fround.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.hypot",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.hypot', assert => {",
            "file": "pure/es.math.hypot.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.imul",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.imul', assert => {",
            "file": "pure/es.math.imul.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.log10",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.log10', assert => {",
            "file": "pure/es.math.log10.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.log1p",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.log1p', assert => {",
            "file": "pure/es.math.log1p.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.log2",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.log2', assert => {",
            "file": "pure/es.math.log2.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.sign",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.sign', assert => {",
            "file": "pure/es.math.sign.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.sinh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.sinh', assert => {",
            "file": "pure/es.math.sinh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.tanh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.tanh', assert => {",
            "file": "pure/es.math.tanh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.trunc",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.trunc', assert => {",
            "file": "pure/es.math.trunc.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.EPSILON",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Number.EPSILON', assert => {",
            "file": "pure/es.number.epsilon.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isFinite",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('Number.isFinite', assert => {",
            "file": "pure/es.number.is-finite.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isInteger",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 28
            },
            "line": 3,
            "code": "QUnit.test('Number.isInteger', assert => {",
            "file": "pure/es.number.is-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isNaN",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 24
            },
            "line": 3,
            "code": "QUnit.test('Number.isNaN', assert => {",
            "file": "pure/es.number.is-nan.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isSafeInteger",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 32
            },
            "line": 3,
            "code": "QUnit.test('Number.isSafeInteger', assert => {",
            "file": "pure/es.number.is-safe-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.MAX_SAFE_INTEGER",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 35
            },
            "line": 2,
            "code": "QUnit.test('Number.MAX_SAFE_INTEGER', assert => {",
            "file": "pure/es.number.max-safe-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.MIN_SAFE_INTEGER",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 35
            },
            "line": 2,
            "code": "QUnit.test('Number.MIN_SAFE_INTEGER', assert => {",
            "file": "pure/es.number.min-safe-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.parseFloat",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('Number.parseFloat', assert => {",
            "file": "pure/es.number.parse-float.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.parseInt",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('Number.parseInt', assert => {",
            "file": "pure/es.number.parse-int.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number#toExponential",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 32
            },
            "line": 2,
            "code": "QUnit.test('Number#toExponential', assert => {",
            "file": "pure/es.number.to-exponential.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number#toFixed",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Number#toFixed', assert => {",
            "file": "pure/es.number.to-fixed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number#toPrecision",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Number#toPrecision', assert => {",
            "file": "pure/es.number.to-precision.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.assign",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 25
            },
            "line": 6,
            "code": "QUnit.test('Object.assign', assert => {",
            "file": "pure/es.object.assign.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.create",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 25
            },
            "line": 5,
            "code": "QUnit.test('Object.create', assert => {",
            "file": "pure/es.object.create.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.create.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 46,
                "column": 35
            },
            "line": 46,
            "code": "QUnit.test('Object.create.sham flag', assert => {",
            "file": "pure/es.object.create.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__defineGetter__",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 37
            },
            "line": 6,
            "code": "  QUnit.test('Object#__defineGetter__', assert => {",
            "file": "pure/es.object.define-getter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperties",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 35
            },
            "line": 3,
            "code": "QUnit.test('Object.defineProperties', assert => {",
            "file": "pure/es.object.define-properties.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperties.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 45
            },
            "line": 19,
            "code": "QUnit.test('Object.defineProperties.sham flag', assert => {",
            "file": "pure/es.object.define-properties.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperty",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 33
            },
            "line": 4,
            "code": "QUnit.test('Object.defineProperty', assert => {",
            "file": "pure/es.object.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperty.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 17,
                "column": 43
            },
            "line": 17,
            "code": "QUnit.test('Object.defineProperty.sham flag', assert => {",
            "file": "pure/es.object.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__defineSetter__",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 37
            },
            "line": 6,
            "code": "  QUnit.test('Object#__defineSetter__', assert => {",
            "file": "pure/es.object.define-setter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.entries",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "QUnit.test('Object.entries', assert => {",
            "file": "pure/es.object.entries.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.freeze",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 25
            },
            "line": 6,
            "code": "QUnit.test('Object.freeze', assert => {",
            "file": "pure/es.object.freeze.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.fromEntries",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 30
            },
            "line": 4,
            "code": "QUnit.test('Object.fromEntries', assert => {",
            "file": "pure/es.object.from-entries.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptor",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 43
            },
            "line": 3,
            "code": "QUnit.test('Object.getOwnPropertyDescriptor', assert => {",
            "file": "pure/es.object.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptor.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 53
            },
            "line": 24,
            "code": "QUnit.test('Object.getOwnPropertyDescriptor.sham flag', assert => {",
            "file": "pure/es.object.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptors",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 44
            },
            "line": 5,
            "code": "QUnit.test('Object.getOwnPropertyDescriptors', assert => {",
            "file": "pure/es.object.get-own-property-descriptors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptors.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 44,
                "column": 54
            },
            "line": 44,
            "code": "QUnit.test('Object.getOwnPropertyDescriptors.sham flag', assert => {",
            "file": "pure/es.object.get-own-property-descriptors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyNames",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 38
            },
            "line": 5,
            "code": "QUnit.test('Object.getOwnPropertyNames', assert => {",
            "file": "pure/es.object.get-own-property-names.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 33
            },
            "line": 4,
            "code": "QUnit.test('Object.getPrototypeOf', assert => {",
            "file": "pure/es.object.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getPrototypeOf.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 45,
                "column": 43
            },
            "line": 45,
            "code": "QUnit.test('Object.getPrototypeOf.sham flag', assert => {",
            "file": "pure/es.object.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.hasOwn",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Object.hasOwn', assert => {",
            "file": "pure/es.object.has-own.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.isExtensible",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Object.isExtensible', assert => {",
            "file": "pure/es.object.is-extensible.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.isFrozen",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Object.isFrozen', assert => {",
            "file": "pure/es.object.is-frozen.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.isSealed",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Object.isSealed', assert => {",
            "file": "pure/es.object.is-sealed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.is",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Object.is', assert => {",
            "file": "pure/es.object.is.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.keys",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 23
            },
            "line": 3,
            "code": "QUnit.test('Object.keys', assert => {",
            "file": "pure/es.object.keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__lookupGetter__",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 37
            },
            "line": 7,
            "code": "  QUnit.test('Object#__lookupGetter__', assert => {",
            "file": "pure/es.object.lookup-getter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__lookupSetter__",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 37
            },
            "line": 7,
            "code": "  QUnit.test('Object#__lookupSetter__', assert => {",
            "file": "pure/es.object.lookup-setter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.preventExtensions",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 36
            },
            "line": 6,
            "code": "QUnit.test('Object.preventExtensions', assert => {",
            "file": "pure/es.object.prevent-extensions.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.seal",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 23
            },
            "line": 6,
            "code": "QUnit.test('Object.seal', assert => {",
            "file": "pure/es.object.seal.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.setPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 44
            },
            "line": 3,
            "code": "if (PROTO) QUnit.test('Object.setPrototypeOf', assert => {",
            "file": "pure/es.object.set-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.values",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 25
            },
            "line": 4,
            "code": "QUnit.test('Object.values', assert => {",
            "file": "pure/es.object.values.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "parseFloat",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('parseFloat', assert => {",
            "file": "pure/es.parse-float.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "parseInt",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 20
            },
            "line": 3,
            "code": "QUnit.test('parseInt', assert => {",
            "file": "pure/es.parse-int.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.allSettled",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Promise.allSettled', assert => {",
            "file": "pure/es.promise.all-settled.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.allSettled, resolved",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 40
            },
            "line": 7,
            "code": "QUnit.test('Promise.allSettled, resolved', assert => {",
            "file": "pure/es.promise.all-settled.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.allSettled, rejected",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 40
            },
            "line": 24,
            "code": "QUnit.test('Promise.allSettled, rejected', assert => {",
            "file": "pure/es.promise.all-settled.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 23
            },
            "line": 3,
            "code": "QUnit.test('Promise.any', assert => {",
            "file": "pure/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, resolved",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 33
            },
            "line": 8,
            "code": "QUnit.test('Promise.any, resolved', assert => {",
            "file": "pure/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, rejected #1",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 36
            },
            "line": 16,
            "code": "QUnit.test('Promise.any, rejected #1', assert => {",
            "file": "pure/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, rejected #2",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 36
            },
            "line": 25,
            "code": "QUnit.test('Promise.any, rejected #2', assert => {",
            "file": "pure/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, rejected #3",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 36
            },
            "line": 33,
            "code": "QUnit.test('Promise.any, rejected #3', assert => {",
            "file": "pure/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#finally",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Promise#finally', assert => {",
            "file": "pure/es.promise.finally.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#finally, resolved",
            "suites": [],
            "updatePoint": {
                "line": 10,
                "column": 37
            },
            "line": 10,
            "code": "QUnit.test('Promise#finally, resolved', assert => {",
            "file": "pure/es.promise.finally.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#finally, rejected",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 37
            },
            "line": 25,
            "code": "QUnit.test('Promise#finally, rejected', assert => {",
            "file": "pure/es.promise.finally.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise",
            "suites": [],
            "updatePoint": {
                "line": 9,
                "column": 19
            },
            "line": 9,
            "code": "QUnit.test('Promise', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise operations order",
            "suites": [],
            "updatePoint": {
                "line": 20,
                "column": 53
            },
            "line": 20,
            "code": "if (DESCRIPTORS) QUnit.test('Promise operations order', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#then",
            "suites": [],
            "updatePoint": {
                "line": 70,
                "column": 24
            },
            "line": 70,
            "code": "QUnit.test('Promise#then', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#catch",
            "suites": [],
            "updatePoint": {
                "line": 157,
                "column": 25
            },
            "line": 157,
            "code": "QUnit.test('Promise#catch', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 250,
                "column": 33
            },
            "line": 250,
            "code": "QUnit.test('Promise#@@toStringTag', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.all",
            "suites": [],
            "updatePoint": {
                "line": 256,
                "column": 23
            },
            "line": 256,
            "code": "QUnit.test('Promise.all', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.race",
            "suites": [],
            "updatePoint": {
                "line": 353,
                "column": 24
            },
            "line": 353,
            "code": "QUnit.test('Promise.race', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.resolve",
            "suites": [],
            "updatePoint": {
                "line": 450,
                "column": 27
            },
            "line": 450,
            "code": "QUnit.test('Promise.resolve', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.reject",
            "suites": [],
            "updatePoint": {
                "line": 498,
                "column": 26
            },
            "line": 498,
            "code": "QUnit.test('Promise.reject', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise subclassing",
            "suites": [],
            "updatePoint": {
                "line": 546,
                "column": 42
            },
            "line": 546,
            "code": "if (PROTO) QUnit.test('Promise subclassing', assert => {",
            "file": "pure/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.apply",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Reflect.apply', assert => {",
            "file": "pure/es.reflect.apply.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.construct",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('Reflect.construct', assert => {",
            "file": "pure/es.reflect.construct.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.defineProperty",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 34
            },
            "line": 5,
            "code": "QUnit.test('Reflect.defineProperty', assert => {",
            "file": "pure/es.reflect.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.defineProperty.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 44
            },
            "line": 43,
            "code": "QUnit.test('Reflect.defineProperty.sham flag', assert => {",
            "file": "pure/es.reflect.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.deleteProperty",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 34
            },
            "line": 5,
            "code": "QUnit.test('Reflect.deleteProperty', assert => {",
            "file": "pure/es.reflect.delete-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnPropertyDescriptor",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 44
            },
            "line": 3,
            "code": "QUnit.test('Reflect.getOwnPropertyDescriptor', assert => {",
            "file": "pure/es.reflect.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnPropertyDescriptor.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 54
            },
            "line": 18,
            "code": "QUnit.test('Reflect.getOwnPropertyDescriptor.sham flag', assert => {",
            "file": "pure/es.reflect.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 34
            },
            "line": 3,
            "code": "QUnit.test('Reflect.getPrototypeOf', assert => {",
            "file": "pure/es.reflect.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getPrototypeOf.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 44
            },
            "line": 14,
            "code": "QUnit.test('Reflect.getPrototypeOf.sham flag', assert => {",
            "file": "pure/es.reflect.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.get",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 23
            },
            "line": 5,
            "code": "QUnit.test('Reflect.get', assert => {",
            "file": "pure/es.reflect.get.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.has",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Reflect.has', assert => {",
            "file": "pure/es.reflect.has.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.isExtensible",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 32
            },
            "line": 4,
            "code": "QUnit.test('Reflect.isExtensible', assert => {",
            "file": "pure/es.reflect.is-extensible.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.ownKeys",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 27
            },
            "line": 6,
            "code": "QUnit.test('Reflect.ownKeys', assert => {",
            "file": "pure/es.reflect.own-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.preventExtensions",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 37
            },
            "line": 4,
            "code": "QUnit.test('Reflect.preventExtensions', assert => {",
            "file": "pure/es.reflect.prevent-extensions.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.preventExtensions.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 47
            },
            "line": 21,
            "code": "QUnit.test('Reflect.preventExtensions.sham flag', assert => {",
            "file": "pure/es.reflect.prevent-extensions.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.setPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 45
            },
            "line": 3,
            "code": "if (PROTO) QUnit.test('Reflect.setPrototypeOf', assert => {",
            "file": "pure/es.reflect.set-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.set",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 23
            },
            "line": 7,
            "code": "QUnit.test('Reflect.set', assert => {",
            "file": "pure/es.reflect.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 15
            },
            "line": 16,
            "code": "QUnit.test('Set', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#add",
            "suites": [],
            "updatePoint": {
                "line": 102,
                "column": 19
            },
            "line": 102,
            "code": "QUnit.test('Set#add', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#clear",
            "suites": [],
            "updatePoint": {
                "line": 129,
                "column": 21
            },
            "line": 129,
            "code": "QUnit.test('Set#clear', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#delete",
            "suites": [],
            "updatePoint": {
                "line": 154,
                "column": 22
            },
            "line": 154,
            "code": "QUnit.test('Set#delete', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#forEach",
            "suites": [],
            "updatePoint": {
                "line": 179,
                "column": 23
            },
            "line": 179,
            "code": "QUnit.test('Set#forEach', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#has",
            "suites": [],
            "updatePoint": {
                "line": 227,
                "column": 19
            },
            "line": 227,
            "code": "QUnit.test('Set#has', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#size",
            "suites": [],
            "updatePoint": {
                "line": 246,
                "column": 20
            },
            "line": 246,
            "code": "QUnit.test('Set#size', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set & -0",
            "suites": [],
            "updatePoint": {
                "line": 266,
                "column": 20
            },
            "line": 266,
            "code": "QUnit.test('Set & -0', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 289,
                "column": 29
            },
            "line": 289,
            "code": "QUnit.test('Set#@@toStringTag', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set Iterator",
            "suites": [],
            "updatePoint": {
                "line": 293,
                "column": 24
            },
            "line": 293,
            "code": "QUnit.test('Set Iterator', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#keys",
            "suites": [],
            "updatePoint": {
                "line": 312,
                "column": 20
            },
            "line": 312,
            "code": "QUnit.test('Set#keys', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#values",
            "suites": [],
            "updatePoint": {
                "line": 339,
                "column": 22
            },
            "line": 339,
            "code": "QUnit.test('Set#values', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#entries",
            "suites": [],
            "updatePoint": {
                "line": 366,
                "column": 23
            },
            "line": 366,
            "code": "QUnit.test('Set#entries', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 393,
                "column": 26
            },
            "line": 393,
            "code": "QUnit.test('Set#@@iterator', assert => {",
            "file": "pure/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#anchor",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('String#anchor', assert => {",
            "file": "pure/es.string.anchor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#at",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 21
            },
            "line": 4,
            "code": "QUnit.test('String#at', assert => {",
            "file": "pure/es.string.at-alternative.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#big",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('String#big', assert => {",
            "file": "pure/es.string.big.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#blink",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('String#blink', assert => {",
            "file": "pure/es.string.blink.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#bold",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('String#bold', assert => {",
            "file": "pure/es.string.bold.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#codePointAt",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('String#codePointAt', assert => {",
            "file": "pure/es.string.code-point-at.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#endsWith",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "QUnit.test('String#endsWith', assert => {",
            "file": "pure/es.string.ends-with.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#fixed",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('String#fixed', assert => {",
            "file": "pure/es.string.fixed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#fontcolor",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('String#fontcolor', assert => {",
            "file": "pure/es.string.fontcolor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#fontsize",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('String#fontsize', assert => {",
            "file": "pure/es.string.fontsize.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String.fromCodePoint",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 32
            },
            "line": 2,
            "code": "QUnit.test('String.fromCodePoint', assert => {",
            "file": "pure/es.string.from-code-point.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#includes",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "QUnit.test('String#includes', assert => {",
            "file": "pure/es.string.includes.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#italics",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('String#italics', assert => {",
            "file": "pure/es.string.italics.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 29
            },
            "line": 5,
            "code": "QUnit.test('String#@@iterator', assert => {",
            "file": "pure/es.string.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#link",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('String#link', assert => {",
            "file": "pure/es.string.link.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#matchAll",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 27
            },
            "line": 5,
            "code": "QUnit.test('String#matchAll', assert => {",
            "file": "pure/es.string.match-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#padEnd",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 25
            },
            "line": 4,
            "code": "QUnit.test('String#padEnd', assert => {",
            "file": "pure/es.string.pad-end.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#padStart",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "QUnit.test('String#padStart', assert => {",
            "file": "pure/es.string.pad-start.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String.raw",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('String.raw', assert => {",
            "file": "pure/es.string.raw.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#repeat",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('String#repeat', assert => {",
            "file": "pure/es.string.repeat.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#replaceAll",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 29
            },
            "line": 4,
            "code": "QUnit.test('String#replaceAll', assert => {",
            "file": "pure/es.string.replace-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#small",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('String#small', assert => {",
            "file": "pure/es.string.small.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#startsWith",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 29
            },
            "line": 4,
            "code": "QUnit.test('String#startsWith', assert => {",
            "file": "pure/es.string.starts-with.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#strike",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('String#strike', assert => {",
            "file": "pure/es.string.strike.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#sub",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('String#sub', assert => {",
            "file": "pure/es.string.sub.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#substr",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('String#substr', assert => {",
            "file": "pure/es.string.substr.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#sup",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('String#sup', assert => {",
            "file": "pure/es.string.sup.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimRight",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 28
            },
            "line": 5,
            "code": "QUnit.test('String#trimRight', assert => {",
            "file": "pure/es.string.trim-end.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimEnd",
            "suites": [],
            "updatePoint": {
                "line": 17,
                "column": 26
            },
            "line": 17,
            "code": "QUnit.test('String#trimEnd', assert => {",
            "file": "pure/es.string.trim-end.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimLeft",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 27
            },
            "line": 5,
            "code": "QUnit.test('String#trimLeft', assert => {",
            "file": "pure/es.string.trim-start.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimStart",
            "suites": [],
            "updatePoint": {
                "line": 17,
                "column": 28
            },
            "line": 17,
            "code": "QUnit.test('String#trimStart', assert => {",
            "file": "pure/es.string.trim-start.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trim",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 23
            },
            "line": 3,
            "code": "QUnit.test('String#trim', assert => {",
            "file": "pure/es.string.trim.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.asyncIterator",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 32
            },
            "line": 2,
            "code": "QUnit.test('Symbol.asyncIterator', assert => {",
            "file": "pure/es.symbol.async-iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 18
            },
            "line": 15,
            "code": "QUnit.test('Symbol', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Well-known Symbols",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 30
            },
            "line": 33,
            "code": "QUnit.test('Well-known Symbols', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Global symbol registry",
            "suites": [],
            "updatePoint": {
                "line": 41,
                "column": 34
            },
            "line": 41,
            "code": "QUnit.test('Global symbol registry', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol#@@toPrimitive",
            "suites": [],
            "updatePoint": {
                "line": 50,
                "column": 32
            },
            "line": 50,
            "code": "QUnit.test('Symbol#@@toPrimitive', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 55,
                "column": 32
            },
            "line": 55,
            "code": "QUnit.test('Symbol#@@toStringTag', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertySymbols",
            "suites": [],
            "updatePoint": {
                "line": 58,
                "column": 40
            },
            "line": 58,
            "code": "QUnit.test('Object.getOwnPropertySymbols', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & JSON.stringify",
            "suites": [],
            "updatePoint": {
                "line": 85,
                "column": 38
            },
            "line": 85,
            "code": "  QUnit.test('Symbols & JSON.stringify', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & descriptors",
            "suites": [],
            "updatePoint": {
                "line": 110,
                "column": 35
            },
            "line": 110,
            "code": "  QUnit.test('Symbols & descriptors', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & Object.defineProperties",
            "suites": [],
            "updatePoint": {
                "line": 203,
                "column": 47
            },
            "line": 203,
            "code": "  QUnit.test('Symbols & Object.defineProperties', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & Object.create",
            "suites": [],
            "updatePoint": {
                "line": 230,
                "column": 37
            },
            "line": 230,
            "code": "  QUnit.test('Symbols & Object.create', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "@@species",
            "suites": [],
            "updatePoint": {
                "line": 264,
                "column": 32
            },
            "line": 264,
            "code": "    QUnit.test(`${name}@@species`, assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array@@species",
            "suites": [],
            "updatePoint": {
                "line": 271,
                "column": 28
            },
            "line": 271,
            "code": "  QUnit.test('Array@@species', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 276,
                "column": 30
            },
            "line": 276,
            "code": "  QUnit.test('Symbol.sham flag', assert => {",
            "file": "pure/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "unescape",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('unescape', assert => {",
            "file": "pure/es.unescape.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 19
            },
            "line": 11,
            "code": "QUnit.test('WeakMap', assert => {",
            "file": "pure/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#delete",
            "suites": [],
            "updatePoint": {
                "line": 87,
                "column": 26
            },
            "line": 87,
            "code": "QUnit.test('WeakMap#delete', assert => {",
            "file": "pure/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#get",
            "suites": [],
            "updatePoint": {
                "line": 107,
                "column": 23
            },
            "line": 107,
            "code": "QUnit.test('WeakMap#get', assert => {",
            "file": "pure/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#has",
            "suites": [],
            "updatePoint": {
                "line": 124,
                "column": 23
            },
            "line": 124,
            "code": "QUnit.test('WeakMap#has', assert => {",
            "file": "pure/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#set",
            "suites": [],
            "updatePoint": {
                "line": 141,
                "column": 23
            },
            "line": 141,
            "code": "QUnit.test('WeakMap#set', assert => {",
            "file": "pure/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 161,
                "column": 33
            },
            "line": 161,
            "code": "QUnit.test('WeakMap#@@toStringTag', assert => {",
            "file": "pure/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 19
            },
            "line": 11,
            "code": "QUnit.test('WeakSet', assert => {",
            "file": "pure/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#add",
            "suites": [],
            "updatePoint": {
                "line": 81,
                "column": 23
            },
            "line": 81,
            "code": "QUnit.test('WeakSet#add', assert => {",
            "file": "pure/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#delete",
            "suites": [],
            "updatePoint": {
                "line": 87,
                "column": 26
            },
            "line": 87,
            "code": "QUnit.test('WeakSet#delete', assert => {",
            "file": "pure/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#has",
            "suites": [],
            "updatePoint": {
                "line": 99,
                "column": 23
            },
            "line": 99,
            "code": "QUnit.test('WeakSet#has', assert => {",
            "file": "pure/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet::@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 110,
                "column": 34
            },
            "line": 110,
            "code": "QUnit.test('WeakSet::@@toStringTag', assert => {",
            "file": "pure/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#filterOut",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 27
            },
            "line": 5,
            "code": "QUnit.test('Array#filterOut', assert => {",
            "file": "pure/esnext.array.filter-out.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#filterReject",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 30
            },
            "line": 4,
            "code": "QUnit.test('Array#filterReject', assert => {",
            "file": "pure/esnext.array.filter-reject.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#findLastIndex",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 31
            },
            "line": 3,
            "code": "QUnit.test('Array#findLastIndex', assert => {",
            "file": "pure/esnext.array.find-last-index.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#findLast",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 26
            },
            "line": 3,
            "code": "QUnit.test('Array#findLast', assert => {",
            "file": "pure/esnext.array.find-last.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.fromAsync",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 27
            },
            "line": 5,
            "code": "QUnit.test('Array.fromAsync', assert => {",
            "file": "pure/esnext.array.from-async.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#groupByToMap",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 30
            },
            "line": 6,
            "code": "QUnit.test('Array#groupByToMap', assert => {",
            "file": "pure/esnext.array.group-by-to-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#groupBy",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 25
            },
            "line": 5,
            "code": "QUnit.test('Array#groupBy', assert => {",
            "file": "pure/esnext.array.group-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.isTemplateObject",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 34
            },
            "line": 3,
            "code": "QUnit.test('Array.isTemplateObject', assert => {",
            "file": "pure/esnext.array.is-template-object.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#toReversed",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 28
            },
            "line": 4,
            "code": "QUnit.test('Array#toReversed', assert => {",
            "file": "pure/esnext.array.to-reversed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#toSorted",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "QUnit.test('Array#toSorted', assert => {",
            "file": "pure/esnext.array.to-sorted.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#toSpliced",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "QUnit.test('Array#toSpliced', assert => {",
            "file": "pure/esnext.array.to-spliced.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#uniqueBy",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 26
            },
            "line": 3,
            "code": "QUnit.test('Array#uniqueBy', assert => {",
            "file": "pure/esnext.array.unique-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#with",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 22
            },
            "line": 4,
            "code": "QUnit.test('Array#with', assert => {",
            "file": "pure/esnext.array.with.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#asIndexedPairs",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 40
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#asIndexedPairs', assert => {",
            "file": "pure/esnext.async-iterator.as-indexed-pairs.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator', assert => {",
            "file": "pure/esnext.async-iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#constructor",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 37
            },
            "line": 11,
            "code": "QUnit.test('AsyncIterator#constructor', assert => {",
            "file": "pure/esnext.async-iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 39
            },
            "line": 14,
            "code": "QUnit.test('AsyncIterator#@@toStringTag', assert => {",
            "file": "pure/esnext.async-iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#drop",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#drop', assert => {",
            "file": "pure/esnext.async-iterator.drop.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#every",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 31
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#every', assert => {",
            "file": "pure/esnext.async-iterator.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#filter",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 32
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#filter', assert => {",
            "file": "pure/esnext.async-iterator.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#find",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 30
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#find', assert => {",
            "file": "pure/esnext.async-iterator.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#flatMap",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 33
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#flatMap', assert => {",
            "file": "pure/esnext.async-iterator.flat-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#forEach",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 33
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#forEach', assert => {",
            "file": "pure/esnext.async-iterator.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator.from",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 30
            },
            "line": 5,
            "code": "QUnit.test('AsyncIterator.from', assert => {",
            "file": "pure/esnext.async-iterator.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#map",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 29
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#map', assert => {",
            "file": "pure/esnext.async-iterator.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#reduce",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 32
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#reduce', assert => {",
            "file": "pure/esnext.async-iterator.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#some",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 30
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator#some', assert => {",
            "file": "pure/esnext.async-iterator.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#take",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#take', assert => {",
            "file": "pure/esnext.async-iterator.take.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#toArray",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 33
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#toArray', assert => {",
            "file": "pure/esnext.async-iterator.to-array.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "BigInt.range",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 57
            },
            "line": 4,
            "code": "if (typeof BigInt == 'function') QUnit.test('BigInt.range', assert => {",
            "file": "pure/esnext.bigint.range.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compositeKey",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 24
            },
            "line": 4,
            "code": "QUnit.test('compositeKey', assert => {",
            "file": "pure/esnext.composite-key.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compositeSymbol",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('compositeSymbol', assert => {",
            "file": "pure/esnext.composite-symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function.isCallable",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 31
            },
            "line": 3,
            "code": "QUnit.test('Function.isCallable', assert => {",
            "file": "pure/esnext.function.is-callable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function.isConstructor",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 34
            },
            "line": 3,
            "code": "QUnit.test('Function.isConstructor', assert => {",
            "file": "pure/esnext.function.is-constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function#unThis",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Function#unThis', assert => {",
            "file": "pure/esnext.function.un-this.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#asIndexedPairs",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 35
            },
            "line": 3,
            "code": "QUnit.test('Iterator#asIndexedPairs', assert => {",
            "file": "pure/esnext.iterator.as-indexed-pairs.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "QUnit.test('Iterator', assert => {",
            "file": "pure/esnext.iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#constructor",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 32
            },
            "line": 11,
            "code": "QUnit.test('Iterator#constructor', assert => {",
            "file": "pure/esnext.iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 34
            },
            "line": 14,
            "code": "QUnit.test('Iterator#@@toStringTag', assert => {",
            "file": "pure/esnext.iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#drop",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Iterator#drop', assert => {",
            "file": "pure/esnext.iterator.drop.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#every",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "QUnit.test('Iterator#every', assert => {",
            "file": "pure/esnext.iterator.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#filter",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "QUnit.test('Iterator#filter', assert => {",
            "file": "pure/esnext.iterator.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#find",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 25
            },
            "line": 4,
            "code": "QUnit.test('Iterator#find', assert => {",
            "file": "pure/esnext.iterator.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#flatMap",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 28
            },
            "line": 4,
            "code": "QUnit.test('Iterator#flatMap', assert => {",
            "file": "pure/esnext.iterator.flat-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#forEach",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 28
            },
            "line": 4,
            "code": "QUnit.test('Iterator#forEach', assert => {",
            "file": "pure/esnext.iterator.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator.from",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Iterator.from', assert => {",
            "file": "pure/esnext.iterator.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#map",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 24
            },
            "line": 4,
            "code": "QUnit.test('Iterator#map', assert => {",
            "file": "pure/esnext.iterator.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#reduce",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "QUnit.test('Iterator#reduce', assert => {",
            "file": "pure/esnext.iterator.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#some",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 25
            },
            "line": 4,
            "code": "QUnit.test('Iterator#some', assert => {",
            "file": "pure/esnext.iterator.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#take",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Iterator#take', assert => {",
            "file": "pure/esnext.iterator.take.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#toArray",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 28
            },
            "line": 3,
            "code": "QUnit.test('Iterator#toArray', assert => {",
            "file": "pure/esnext.iterator.to-array.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#toAsync",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 28
            },
            "line": 6,
            "code": "QUnit.test('Iterator#toAsync', assert => {",
            "file": "pure/esnext.iterator.to-async.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Map#deleteAll', assert => {",
            "file": "pure/esnext.map.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#emplace",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Map#emplace', assert => {",
            "file": "pure/esnext.map.emplace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#every",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Map#every', assert => {",
            "file": "pure/esnext.map.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#filter",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Map#filter', assert => {",
            "file": "pure/esnext.map.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#findKey",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Map#findKey', assert => {",
            "file": "pure/esnext.map.find-key.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#find",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Map#find', assert => {",
            "file": "pure/esnext.map.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.from",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "QUnit.test('Map.from', assert => {",
            "file": "pure/esnext.map.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.groupBy",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 23
            },
            "line": 4,
            "code": "QUnit.test('Map.groupBy', assert => {",
            "file": "pure/esnext.map.group-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#includes",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Map#includes', assert => {",
            "file": "pure/esnext.map.includes.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.keyBy",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 21
            },
            "line": 4,
            "code": "QUnit.test('Map.keyBy', assert => {",
            "file": "pure/esnext.map.key-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#keyOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Map#keyOf', assert => {",
            "file": "pure/esnext.map.key-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#mapKeys",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 23
            },
            "line": 3,
            "code": "QUnit.test('Map#mapKeys', assert => {",
            "file": "pure/esnext.map.map-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#mapValues",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Map#mapValues', assert => {",
            "file": "pure/esnext.map.map-values.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#merge",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 21
            },
            "line": 3,
            "code": "QUnit.test('Map#merge', assert => {",
            "file": "pure/esnext.map.merge.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.of",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 18
            },
            "line": 3,
            "code": "QUnit.test('Map.of', assert => {",
            "file": "pure/esnext.map.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#reduce",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Map#reduce', assert => {",
            "file": "pure/esnext.map.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#some",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Map#some', assert => {",
            "file": "pure/esnext.map.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#updateOrInsert",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Map#updateOrInsert', assert => {",
            "file": "pure/esnext.map.update-or-insert.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#update",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Map#update', assert => {",
            "file": "pure/esnext.map.update.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#upsert",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Map#upsert', assert => {",
            "file": "pure/esnext.map.upsert.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.clamp",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.clamp', assert => {",
            "file": "pure/esnext.math.clamp.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.DEG_PER_RAD",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Math.DEG_PER_RAD', assert => {",
            "file": "pure/esnext.math.deg-per-rad.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.degrees",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Math.degrees', assert => {",
            "file": "pure/esnext.math.degrees.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.fscale",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Math.fscale', assert => {",
            "file": "pure/esnext.math.fscale.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.iaddh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.iaddh', assert => {",
            "file": "pure/esnext.math.iaddh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.imulh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.imulh', assert => {",
            "file": "pure/esnext.math.imulh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.isubh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.isubh', assert => {",
            "file": "pure/esnext.math.isubh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.RAD_PER_DEG",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Math.RAD_PER_DEG', assert => {",
            "file": "pure/esnext.math.rad-per-deg.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.radians",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Math.radians', assert => {",
            "file": "pure/esnext.math.radians.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.scale",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.scale', assert => {",
            "file": "pure/esnext.math.scale.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.seededPRNG",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Math.seededPRNG', assert => {",
            "file": "pure/esnext.math.seeded-prng.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.signbit",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Math.signbit', assert => {",
            "file": "pure/esnext.math.signbit.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.umulh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Math.umulh', assert => {",
            "file": "pure/esnext.math.umulh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.fromString",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Number.fromString', assert => {",
            "file": "pure/esnext.number.from-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "range",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 17
            },
            "line": 3,
            "code": "QUnit.test('range', assert => {",
            "file": "pure/esnext.number.range.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.iterateEntries",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 33
            },
            "line": 3,
            "code": "QUnit.test('Object.iterateEntries', assert => {",
            "file": "pure/esnext.object.iterate-entries.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.iterateKeys",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('Object.iterateKeys', assert => {",
            "file": "pure/esnext.object.iterate-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.iterateValues",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 32
            },
            "line": 3,
            "code": "QUnit.test('Object.iterateValues', assert => {",
            "file": "pure/esnext.object.iterate-values.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 22
            },
            "line": 4,
            "code": "QUnit.test('Observable', assert => {",
            "file": "pure/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable#subscribe",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 32
            },
            "line": 32,
            "code": "QUnit.test('Observable#subscribe', assert => {",
            "file": "pure/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable#constructor",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 34
            },
            "line": 43,
            "code": "QUnit.test('Observable#constructor', assert => {",
            "file": "pure/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable#@@observable",
            "suites": [],
            "updatePoint": {
                "line": 46,
                "column": 35
            },
            "line": 46,
            "code": "QUnit.test('Observable#@@observable', assert => {",
            "file": "pure/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable.of",
            "suites": [],
            "updatePoint": {
                "line": 53,
                "column": 25
            },
            "line": 53,
            "code": "QUnit.test('Observable.of', assert => {",
            "file": "pure/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable.from",
            "suites": [],
            "updatePoint": {
                "line": 57,
                "column": 27
            },
            "line": 57,
            "code": "QUnit.test('Observable.from', assert => {",
            "file": "pure/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.try",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Promise.try', assert => {",
            "file": "pure/esnext.promise.try.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.try, resolved",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 33
            },
            "line": 7,
            "code": "QUnit.test('Promise.try, resolved', assert => {",
            "file": "pure/esnext.promise.try.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.try, rejected",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 33
            },
            "line": 15,
            "code": "QUnit.test('Promise.try, rejected', assert => {",
            "file": "pure/esnext.promise.try.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.defineMetadata",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 34
            },
            "line": 2,
            "code": "QUnit.test('Reflect.defineMetadata', assert => {",
            "file": "pure/esnext.reflect.define-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.deleteMetadata",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 34
            },
            "line": 5,
            "code": "QUnit.test('Reflect.deleteMetadata', assert => {",
            "file": "pure/esnext.reflect.delete-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getMetadataKeys",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 35
            },
            "line": 4,
            "code": "QUnit.test('Reflect.getMetadataKeys', assert => {",
            "file": "pure/esnext.reflect.get-metadata-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getMetadata",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 31
            },
            "line": 4,
            "code": "QUnit.test('Reflect.getMetadata', assert => {",
            "file": "pure/esnext.reflect.get-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnMetadata",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 34
            },
            "line": 4,
            "code": "QUnit.test('Reflect.getOwnMetadata', assert => {",
            "file": "pure/esnext.reflect.get-own-matadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnMetadataKeys",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 38
            },
            "line": 4,
            "code": "QUnit.test('Reflect.getOwnMetadataKeys', assert => {",
            "file": "pure/esnext.reflect.get-own-metadata-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.hasMetadata",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 31
            },
            "line": 4,
            "code": "QUnit.test('Reflect.hasMetadata', assert => {",
            "file": "pure/esnext.reflect.has-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.hasOwnMetadata",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 34
            },
            "line": 4,
            "code": "QUnit.test('Reflect.hasOwnMetadata', assert => {",
            "file": "pure/esnext.reflect.has-own-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.metadata",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 28
            },
            "line": 3,
            "code": "QUnit.test('Reflect.metadata', assert => {",
            "file": "pure/esnext.reflect.metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#addAll",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Set#addAll', assert => {",
            "file": "pure/esnext.set.add-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Set#deleteAll', assert => {",
            "file": "pure/esnext.set.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#difference",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "QUnit.test('Set#difference', assert => {",
            "file": "pure/esnext.set.difference.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#every",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Set#every', assert => {",
            "file": "pure/esnext.set.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#filter",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Set#filter', assert => {",
            "file": "pure/esnext.set.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#find",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Set#find', assert => {",
            "file": "pure/esnext.set.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set.from",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "QUnit.test('Set.from', assert => {",
            "file": "pure/esnext.set.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#intersection",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 28
            },
            "line": 4,
            "code": "QUnit.test('Set#intersection', assert => {",
            "file": "pure/esnext.set.intersection.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#isDisjointFrom",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('Set#isDisjointFrom', assert => {",
            "file": "pure/esnext.set.is-disjoint-from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#isSubsetOf",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 26
            },
            "line": 3,
            "code": "QUnit.test('Set#isSubsetOf', assert => {",
            "file": "pure/esnext.set.is-subset-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#isSupersetOf",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 28
            },
            "line": 3,
            "code": "QUnit.test('Set#isSupersetOf', assert => {",
            "file": "pure/esnext.set.is-superset-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#join",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 20
            },
            "line": 3,
            "code": "QUnit.test('Set#join', assert => {",
            "file": "pure/esnext.set.join.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#map",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 19
            },
            "line": 3,
            "code": "QUnit.test('Set#map', assert => {",
            "file": "pure/esnext.set.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set.of",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 18
            },
            "line": 3,
            "code": "QUnit.test('Set.of', assert => {",
            "file": "pure/esnext.set.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#reduce",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Set#reduce', assert => {",
            "file": "pure/esnext.set.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#some",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Set#some', assert => {",
            "file": "pure/esnext.set.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#symmetricDifference",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 35
            },
            "line": 4,
            "code": "QUnit.test('Set#symmetricDifference', assert => {",
            "file": "pure/esnext.set.symmetric-difference.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#union",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 21
            },
            "line": 4,
            "code": "QUnit.test('Set#union', assert => {",
            "file": "pure/esnext.set.union.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#at",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 21
            },
            "line": 3,
            "code": "QUnit.test('String#at', assert => {",
            "file": "pure/esnext.string.at.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#codePoints",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('String#codePoints', assert => {",
            "file": "pure/esnext.string.code-points.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String.cooked",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('String.cooked', assert => {",
            "file": "pure/esnext.string.cooked.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.asyncDispose",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Symbol.asyncDispose', assert => {",
            "file": "pure/esnext.symbol.async-dispose.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.dispose",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Symbol.dispose', assert => {",
            "file": "pure/esnext.symbol.dispose.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.matcher",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Symbol.matcher', assert => {",
            "file": "pure/esnext.symbol.matcher.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.metadata",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Symbol.metadata', assert => {",
            "file": "pure/esnext.symbol.metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.observable",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Symbol.observable', assert => {",
            "file": "pure/esnext.symbol.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.patternMatch",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Symbol.patternMatch', assert => {",
            "file": "pure/esnext.symbol.pattern-match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.replaceAll",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Symbol.replaceAll', assert => {",
            "file": "pure/esnext.symbol.replace-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('WeakMap#deleteAll', assert => {",
            "file": "pure/esnext.weak-map.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#emplace",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('WeakMap#emplace', assert => {",
            "file": "pure/esnext.weak-map.emplace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap.from",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 24
            },
            "line": 3,
            "code": "QUnit.test('WeakMap.from', assert => {",
            "file": "pure/esnext.weak-map.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap.of",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('WeakMap.of', assert => {",
            "file": "pure/esnext.weak-map.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#upsert",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('WeakMap#upsert', assert => {",
            "file": "pure/esnext.weak-map.upsert.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#addAll",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('WeakSet#addAll', assert => {",
            "file": "pure/esnext.weak-set.add-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('WeakSet#deleteAll', assert => {",
            "file": "pure/esnext.weak-set.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet.from",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 24
            },
            "line": 3,
            "code": "QUnit.test('WeakSet.from', assert => {",
            "file": "pure/esnext.weak-set.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet.of",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('WeakSet.of', assert => {",
            "file": "pure/esnext.weak-set.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "getIteratorMethod helper",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 36
            },
            "line": 3,
            "code": "QUnit.test('getIteratorMethod helper', assert => {",
            "file": "pure/helpers.get-iterator-method.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "getIterator helper",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('getIterator helper', assert => {",
            "file": "pure/helpers.get-iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "isIterable helper",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('isIterable helper', assert => {",
            "file": "pure/helpers.is-iterable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterable DOM collections",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 36
            },
            "line": 4,
            "code": "QUnit.test('Iterable DOM collections', assert => {",
            "file": "pure/web.dom-collections.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DOMException",
            "suites": [],
            "updatePoint": {
                "line": 132,
                "column": 24
            },
            "line": 132,
            "code": "QUnit.test('DOMException', assert => {",
            "file": "pure/web.dom-exception.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "setImmediate / clearImmediate",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 41
            },
            "line": 4,
            "code": "QUnit.test('setImmediate / clearImmediate', assert => {",
            "file": "pure/web.immediate.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "queueMicrotask",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('queueMicrotask', assert => {",
            "file": "pure/web.queue-microtask.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "identity",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 18,
                "column": 22
            },
            "line": 18,
            "code": "  QUnit.test('identity', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "primitives",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 51,
                "column": 24
            },
            "line": 51,
            "code": "  QUnit.test('primitives', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "primitive objects",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 59,
                "column": 31
            },
            "line": 59,
            "code": "  QUnit.test('primitive objects', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 67,
                "column": 18
            },
            "line": 67,
            "code": "  QUnit.test('Date', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 78,
                "column": 20
            },
            "line": 78,
            "code": "  QUnit.test('RegExp', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "ArrayBuffer",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 90,
                "column": 64
            },
            "line": 90,
            "code": "    if (typeof Uint8Array == 'function') QUnit.test('ArrayBuffer', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArray%",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 99,
                "column": 30
            },
            "line": 99,
            "code": "      QUnit.test('%TypedArray%', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DataView",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 110,
                "column": 62
            },
            "line": 110,
            "code": "      if (typeof DataView != 'undefined') QUnit.test('DataView', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 123,
                "column": 17
            },
            "line": 123,
            "code": "  QUnit.test('Map', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 130,
                "column": 17
            },
            "line": 130,
            "code": "  QUnit.test('Set', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Error",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 136,
                "column": 19
            },
            "line": 136,
            "code": "  QUnit.test('Error', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 171,
                "column": 19
            },
            "line": 171,
            "code": "  QUnit.test('Array', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 196,
                "column": 20
            },
            "line": 196,
            "code": "  QUnit.test('Object', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMMatrix",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 211,
                "column": 41
            },
            "line": 211,
            "code": "    QUnit.test('Geometry types, DOMMatrix', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMMatrixReadOnly",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 221,
                "column": 49
            },
            "line": 221,
            "code": "    QUnit.test('Geometry types, DOMMatrixReadOnly', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMPoint",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 231,
                "column": 40
            },
            "line": 231,
            "code": "    QUnit.test('Geometry types, DOMPoint', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMPointReadOnly",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 241,
                "column": 48
            },
            "line": 241,
            "code": "    QUnit.test('Geometry types, DOMPointReadOnly', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMQuad",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 251,
                "column": 39
            },
            "line": 251,
            "code": "    QUnit.test('Geometry types, DOMQuad', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMRect",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 261,
                "column": 39
            },
            "line": 261,
            "code": "    QUnit.test('Geometry types, DOMRect', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMRectReadOnly",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 271,
                "column": 47
            },
            "line": 271,
            "code": "    QUnit.test('Geometry types, DOMRectReadOnly', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "ImageData",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 282,
                "column": 25
            },
            "line": 282,
            "code": "    QUnit.test('ImageData', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Blob",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 298,
                "column": 56
            },
            "line": 298,
            "code": "  if (fromSource('new Blob([\"test\"])')) QUnit.test('Blob', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DOMException",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 307,
                "column": 26
            },
            "line": 307,
            "code": "  QUnit.test('DOMException', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "File",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 317,
                "column": 67
            },
            "line": 317,
            "code": "  if (fromSource('new File([\"test\"], \"foo.txt\")')) QUnit.test('File', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "FileList",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 329,
                "column": 107
            },
            "line": 329,
            "code": "  if (fromSource('new File([\"test\"], \"foo.txt\")') && fromSource('new DataTransfer()')) QUnit.test('FileList', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Non-serializable types",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 341,
                "column": 36
            },
            "line": 341,
            "code": "  QUnit.test('Non-serializable types', assert => {",
            "file": "pure/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "setTimeout / clearTimeout",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 37
            },
            "line": 4,
            "code": "QUnit.test('setTimeout / clearTimeout', assert => {",
            "file": "pure/web.timers.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "setInterval / clearInterval",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 39
            },
            "line": 23,
            "code": "QUnit.test('setInterval / clearInterval', assert => {",
            "file": "pure/web.timers.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 27
            },
            "line": 8,
            "code": "QUnit.test('URLSearchParams', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#append",
            "suites": [],
            "updatePoint": {
                "line": 143,
                "column": 34
            },
            "line": 143,
            "code": "QUnit.test('URLSearchParams#append', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#delete",
            "suites": [],
            "updatePoint": {
                "line": 188,
                "column": 34
            },
            "line": 188,
            "code": "QUnit.test('URLSearchParams#delete', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#get",
            "suites": [],
            "updatePoint": {
                "line": 235,
                "column": 31
            },
            "line": 235,
            "code": "QUnit.test('URLSearchParams#get', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#getAll",
            "suites": [],
            "updatePoint": {
                "line": 284,
                "column": 34
            },
            "line": 284,
            "code": "QUnit.test('URLSearchParams#getAll', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#has",
            "suites": [],
            "updatePoint": {
                "line": 309,
                "column": 31
            },
            "line": 309,
            "code": "QUnit.test('URLSearchParams#has', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#set",
            "suites": [],
            "updatePoint": {
                "line": 339,
                "column": 31
            },
            "line": 339,
            "code": "QUnit.test('URLSearchParams#set', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#sort",
            "suites": [],
            "updatePoint": {
                "line": 369,
                "column": 32
            },
            "line": 369,
            "code": "QUnit.test('URLSearchParams#sort', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#toString",
            "suites": [],
            "updatePoint": {
                "line": 441,
                "column": 36
            },
            "line": 441,
            "code": "QUnit.test('URLSearchParams#toString', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#forEach",
            "suites": [],
            "updatePoint": {
                "line": 524,
                "column": 35
            },
            "line": 524,
            "code": "QUnit.test('URLSearchParams#forEach', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#entries",
            "suites": [],
            "updatePoint": {
                "line": 569,
                "column": 35
            },
            "line": 569,
            "code": "QUnit.test('URLSearchParams#entries', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#keys",
            "suites": [],
            "updatePoint": {
                "line": 624,
                "column": 32
            },
            "line": 624,
            "code": "QUnit.test('URLSearchParams#keys', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#values",
            "suites": [],
            "updatePoint": {
                "line": 670,
                "column": 34
            },
            "line": 670,
            "code": "QUnit.test('URLSearchParams#values', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 718,
                "column": 38
            },
            "line": 718,
            "code": "QUnit.test('URLSearchParams#@@iterator', assert => {",
            "file": "pure/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL constructor",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 27
            },
            "line": 11,
            "code": "QUnit.test('URL constructor', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#href",
            "suites": [],
            "updatePoint": {
                "line": 51,
                "column": 20
            },
            "line": 51,
            "code": "QUnit.test('URL#href', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#origin",
            "suites": [],
            "updatePoint": {
                "line": 113,
                "column": 22
            },
            "line": 113,
            "code": "QUnit.test('URL#origin', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#protocol",
            "suites": [],
            "updatePoint": {
                "line": 127,
                "column": 24
            },
            "line": 127,
            "code": "QUnit.test('URL#protocol', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#username",
            "suites": [],
            "updatePoint": {
                "line": 159,
                "column": 24
            },
            "line": 159,
            "code": "QUnit.test('URL#username', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#password",
            "suites": [],
            "updatePoint": {
                "line": 182,
                "column": 24
            },
            "line": 182,
            "code": "QUnit.test('URL#password', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#host",
            "suites": [],
            "updatePoint": {
                "line": 210,
                "column": 20
            },
            "line": 210,
            "code": "QUnit.test('URL#host', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#hostname",
            "suites": [],
            "updatePoint": {
                "line": 275,
                "column": 24
            },
            "line": 275,
            "code": "QUnit.test('URL#hostname', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#port",
            "suites": [],
            "updatePoint": {
                "line": 335,
                "column": 20
            },
            "line": 335,
            "code": "QUnit.test('URL#port', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#pathname",
            "suites": [],
            "updatePoint": {
                "line": 370,
                "column": 24
            },
            "line": 370,
            "code": "QUnit.test('URL#pathname', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#search",
            "suites": [],
            "updatePoint": {
                "line": 391,
                "column": 22
            },
            "line": 391,
            "code": "QUnit.test('URL#search', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#searchParams",
            "suites": [],
            "updatePoint": {
                "line": 422,
                "column": 28
            },
            "line": 422,
            "code": "QUnit.test('URL#searchParams', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#hash",
            "suites": [],
            "updatePoint": {
                "line": 449,
                "column": 20
            },
            "line": 449,
            "code": "QUnit.test('URL#hash', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#toJSON",
            "suites": [],
            "updatePoint": {
                "line": 492,
                "column": 22
            },
            "line": 492,
            "code": "QUnit.test('URL#toJSON', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#toString",
            "suites": [],
            "updatePoint": {
                "line": 507,
                "column": 24
            },
            "line": 507,
            "code": "QUnit.test('URL#toString', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL.sham",
            "suites": [],
            "updatePoint": {
                "line": 522,
                "column": 20
            },
            "line": 522,
            "code": "QUnit.test('URL.sham', assert => {",
            "file": "pure/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AggregateError",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "QUnit.test('AggregateError', assert => {",
            "file": "tests/es.aggregate-error.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "ArrayBuffer",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('ArrayBuffer', assert => {",
            "file": "tests/es.array-buffer.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "ArrayBuffer.isView",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('ArrayBuffer.isView', assert => {",
            "file": "tests/es.array-buffer.is-view.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "ArrayBuffer#slice",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 29
            },
            "line": 1,
            "code": "QUnit.test('ArrayBuffer#slice', assert => {",
            "file": "tests/es.array-buffer.slice.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#at",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Array#at', assert => {",
            "file": "tests/es.array.at.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#concat",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Array#concat', assert => {",
            "file": "tests/es.array.concat.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#copyWithin",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Array#copyWithin', assert => {",
            "file": "tests/es.array.copy-within.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#every",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Array#every', assert => {",
            "file": "tests/es.array.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#fill",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Array#fill', assert => {",
            "file": "tests/es.array.fill.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#filter",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Array#filter', assert => {",
            "file": "tests/es.array.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#findIndex",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Array#findIndex', assert => {",
            "file": "tests/es.array.find-index.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#find",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Array#find', assert => {",
            "file": "tests/es.array.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#flatMap",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Array#flatMap', assert => {",
            "file": "tests/es.array.flat-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#flat",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Array#flat', assert => {",
            "file": "tests/es.array.flat.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#forEach",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Array#forEach', assert => {",
            "file": "tests/es.array.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.from",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Array.from', assert => {",
            "file": "tests/es.array.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#includes",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Array#includes', assert => {",
            "file": "tests/es.array.includes.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#indexOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Array#indexOf', assert => {",
            "file": "tests/es.array.index-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.isArray",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Array.isArray', assert => {",
            "file": "tests/es.array.is-array.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#keys",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 22
            },
            "line": 3,
            "code": "QUnit.test('Array#keys', assert => {",
            "file": "tests/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#values",
            "suites": [],
            "updatePoint": {
                "line": 44,
                "column": 24
            },
            "line": 44,
            "code": "QUnit.test('Array#values', assert => {",
            "file": "tests/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#entries",
            "suites": [],
            "updatePoint": {
                "line": 84,
                "column": 25
            },
            "line": 84,
            "code": "QUnit.test('Array#entries', assert => {",
            "file": "tests/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 124,
                "column": 28
            },
            "line": 124,
            "code": "QUnit.test('Array#@@iterator', assert => {",
            "file": "tests/es.array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#join",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Array#join', assert => {",
            "file": "tests/es.array.join.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#lastIndexOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Array#lastIndexOf', assert => {",
            "file": "tests/es.array.last-index-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#map",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Array#map', assert => {",
            "file": "tests/es.array.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.of",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Array.of', assert => {",
            "file": "tests/es.array.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#reduceRight",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Array#reduceRight', assert => {",
            "file": "tests/es.array.reduce-right.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#reduce",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Array#reduce', assert => {",
            "file": "tests/es.array.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#reverse",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Array#reverse', assert => {",
            "file": "tests/es.array.reverse.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#slice",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Array#slice', assert => {",
            "file": "tests/es.array.slice.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#some",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Array#some', assert => {",
            "file": "tests/es.array.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#sort",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Array#sort', assert => {",
            "file": "tests/es.array.sort.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#splice",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('Array#splice', assert => {",
            "file": "tests/es.array.splice.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DataView",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('DataView', assert => {",
            "file": "tests/es.data-view.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DataView accessors",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 32
            },
            "line": 62,
            "code": "  QUnit.test('DataView accessors', assert => {",
            "file": "tests/es.data-view.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DataView endian",
            "suites": [],
            "updatePoint": {
                "line": 99,
                "column": 29
            },
            "line": 99,
            "code": "  QUnit.test('DataView endian', assert => {",
            "file": "tests/es.data-view.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DataView#",
            "suites": [],
            "updatePoint": {
                "line": 139,
                "column": 32
            },
            "line": 139,
            "code": "  QUnit.test(`DataView#${GETTER}`, assert => {",
            "file": "tests/es.data-view.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DataView#",
            "suites": [],
            "updatePoint": {
                "line": 144,
                "column": 32
            },
            "line": 144,
            "code": "  QUnit.test(`DataView#${SETTER}`, assert => {",
            "file": "tests/es.data-view.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#getYear",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Date#getYear', assert => {",
            "file": "tests/es.date.get-year.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date.now",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 20
            },
            "line": 1,
            "code": "QUnit.test('Date.now', assert => {",
            "file": "tests/es.date.now.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#setYear",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Date#setYear', assert => {",
            "file": "tests/es.date.set-year.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#toGMTString",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 28
            },
            "line": 1,
            "code": "QUnit.test('Date#toGMTString', assert => {",
            "file": "tests/es.date.to-gmt-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#toISOString",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 28
            },
            "line": 1,
            "code": "QUnit.test('Date#toISOString', assert => {",
            "file": "tests/es.date.to-iso-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#toJSON",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Date#toJSON', assert => {",
            "file": "tests/es.date.to-json.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#@@toPrimitive",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Date#@@toPrimitive', assert => {",
            "file": "tests/es.date.to-primitive.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date#toString",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Date#toString', assert => {",
            "file": "tests/es.date.to-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": " constructor with 'cause' param",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 58
            },
            "line": 7,
            "code": "  QUnit.test(`${ERROR_NAME} constructor with 'cause' param`, assert => {",
            "file": "tests/es.error.cause.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Error#toString",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Error#toString', assert => {",
            "file": "tests/es.error.to-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "escape",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 18
            },
            "line": 1,
            "code": "QUnit.test('escape', assert => {",
            "file": "tests/es.escape.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function#bind",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Function#bind', assert => {",
            "file": "tests/es.function.bind.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function#@@hasInstance",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 34
            },
            "line": 1,
            "code": "QUnit.test('Function#@@hasInstance', assert => {",
            "file": "tests/es.function.has-instance.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function#name",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "  QUnit.test('Function#name', assert => {",
            "file": "tests/es.function.name.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "globalThis",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('globalThis', assert => {",
            "file": "tests/es.global-this.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Well‑formed JSON.stringify",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 40
            },
            "line": 4,
            "code": "  QUnit.test('Well‑formed JSON.stringify', assert => {",
            "file": "tests/es.json.stringify.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 15
            },
            "line": 15,
            "code": "QUnit.test('Map', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#clear",
            "suites": [],
            "updatePoint": {
                "line": 81,
                "column": 21
            },
            "line": 81,
            "code": "QUnit.test('Map#clear', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#delete",
            "suites": [],
            "updatePoint": {
                "line": 107,
                "column": 22
            },
            "line": 107,
            "code": "QUnit.test('Map#delete', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#forEach",
            "suites": [],
            "updatePoint": {
                "line": 136,
                "column": 23
            },
            "line": 136,
            "code": "QUnit.test('Map#forEach', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#get",
            "suites": [],
            "updatePoint": {
                "line": 195,
                "column": 19
            },
            "line": 195,
            "code": "QUnit.test('Map#get', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#has",
            "suites": [],
            "updatePoint": {
                "line": 218,
                "column": 19
            },
            "line": 218,
            "code": "QUnit.test('Map#has', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#set",
            "suites": [],
            "updatePoint": {
                "line": 241,
                "column": 19
            },
            "line": 241,
            "code": "QUnit.test('Map#set', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#size",
            "suites": [],
            "updatePoint": {
                "line": 280,
                "column": 20
            },
            "line": 280,
            "code": "QUnit.test('Map#size', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map & -0",
            "suites": [],
            "updatePoint": {
                "line": 299,
                "column": 20
            },
            "line": 299,
            "code": "QUnit.test('Map & -0', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 324,
                "column": 29
            },
            "line": 324,
            "code": "QUnit.test('Map#@@toStringTag', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map Iterator",
            "suites": [],
            "updatePoint": {
                "line": 328,
                "column": 24
            },
            "line": 328,
            "code": "QUnit.test('Map Iterator', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#keys",
            "suites": [],
            "updatePoint": {
                "line": 351,
                "column": 20
            },
            "line": 351,
            "code": "QUnit.test('Map#keys', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#values",
            "suites": [],
            "updatePoint": {
                "line": 382,
                "column": 22
            },
            "line": 382,
            "code": "QUnit.test('Map#values', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#entries",
            "suites": [],
            "updatePoint": {
                "line": 413,
                "column": 23
            },
            "line": 413,
            "code": "QUnit.test('Map#entries', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 444,
                "column": 26
            },
            "line": 444,
            "code": "QUnit.test('Map#@@iterator', assert => {",
            "file": "tests/es.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.acosh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.acosh', assert => {",
            "file": "tests/es.math.acosh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.asinh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.asinh', assert => {",
            "file": "tests/es.math.asinh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.atanh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.atanh', assert => {",
            "file": "tests/es.math.atanh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.cbrt",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Math.cbrt', assert => {",
            "file": "tests/es.math.cbrt.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.clz32",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.clz32', assert => {",
            "file": "tests/es.math.clz32.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.cosh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Math.cosh', assert => {",
            "file": "tests/es.math.cosh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.expm1",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.expm1', assert => {",
            "file": "tests/es.math.expm1.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.fround",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Math.fround', assert => {",
            "file": "tests/es.math.fround.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.hypot",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.hypot', assert => {",
            "file": "tests/es.math.hypot.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.imul",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Math.imul', assert => {",
            "file": "tests/es.math.imul.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.log10",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.log10', assert => {",
            "file": "tests/es.math.log10.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.log1p",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.log1p', assert => {",
            "file": "tests/es.math.log1p.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.log2",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Math.log2', assert => {",
            "file": "tests/es.math.log2.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.sign",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Math.sign', assert => {",
            "file": "tests/es.math.sign.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.sinh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Math.sinh', assert => {",
            "file": "tests/es.math.sinh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.tanh",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Math.tanh', assert => {",
            "file": "tests/es.math.tanh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math[@@toStringTag]",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 31
            },
            "line": 1,
            "code": "QUnit.test('Math[@@toStringTag]', assert => {",
            "file": "tests/es.math.to-string-tag.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.trunc",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.trunc', assert => {",
            "file": "tests/es.math.trunc.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number constructor: regression",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 42
            },
            "line": 14,
            "code": "QUnit.test('Number constructor: regression', assert => {",
            "file": "tests/es.number.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number constructor: binary",
            "suites": [],
            "updatePoint": {
                "line": 209,
                "column": 38
            },
            "line": 209,
            "code": "QUnit.test('Number constructor: binary', assert => {",
            "file": "tests/es.number.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number constructor: octal",
            "suites": [],
            "updatePoint": {
                "line": 255,
                "column": 37
            },
            "line": 255,
            "code": "QUnit.test('Number constructor: octal', assert => {",
            "file": "tests/es.number.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.EPSILON",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 26
            },
            "line": 1,
            "code": "QUnit.test('Number.EPSILON', assert => {",
            "file": "tests/es.number.epsilon.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isFinite",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "QUnit.test('Number.isFinite', assert => {",
            "file": "tests/es.number.is-finite.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isInteger",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 28
            },
            "line": 1,
            "code": "QUnit.test('Number.isInteger', assert => {",
            "file": "tests/es.number.is-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isNaN",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Number.isNaN', assert => {",
            "file": "tests/es.number.is-nan.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.isSafeInteger",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 32
            },
            "line": 1,
            "code": "QUnit.test('Number.isSafeInteger', assert => {",
            "file": "tests/es.number.is-safe-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.MAX_SAFE_INTEGER",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 35
            },
            "line": 1,
            "code": "QUnit.test('Number.MAX_SAFE_INTEGER', assert => {",
            "file": "tests/es.number.max-safe-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.MIN_SAFE_INTEGER",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 35
            },
            "line": 1,
            "code": "QUnit.test('Number.MIN_SAFE_INTEGER', assert => {",
            "file": "tests/es.number.min-safe-integer.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.parseFloat",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Number.parseFloat', assert => {",
            "file": "tests/es.number.parse-float.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.parseInt",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Number.parseInt', assert => {",
            "file": "tests/es.number.parse-int.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number#toExponential",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 32
            },
            "line": 1,
            "code": "QUnit.test('Number#toExponential', assert => {",
            "file": "tests/es.number.to-exponential.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number#toFixed",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Number#toFixed', assert => {",
            "file": "tests/es.number.to-fixed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number#toPrecision",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 30
            },
            "line": 1,
            "code": "QUnit.test('Number#toPrecision', assert => {",
            "file": "tests/es.number.to-precision.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.assign",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Object.assign', assert => {",
            "file": "tests/es.object.assign.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.create",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Object.create', assert => {",
            "file": "tests/es.object.create.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.create.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 52,
                "column": 35
            },
            "line": 52,
            "code": "QUnit.test('Object.create.sham flag', assert => {",
            "file": "tests/es.object.create.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__defineGetter__",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 37
            },
            "line": 4,
            "code": "  QUnit.test('Object#__defineGetter__', assert => {",
            "file": "tests/es.object.define-getter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperties",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 35
            },
            "line": 2,
            "code": "QUnit.test('Object.defineProperties', assert => {",
            "file": "tests/es.object.define-properties.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperties.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 45
            },
            "line": 24,
            "code": "QUnit.test('Object.defineProperties.sham flag', assert => {",
            "file": "tests/es.object.define-properties.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperty",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 33
            },
            "line": 2,
            "code": "QUnit.test('Object.defineProperty', assert => {",
            "file": "tests/es.object.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.defineProperty.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 43
            },
            "line": 22,
            "code": "QUnit.test('Object.defineProperty.sham flag', assert => {",
            "file": "tests/es.object.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__defineSetter__",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 37
            },
            "line": 4,
            "code": "  QUnit.test('Object#__defineSetter__', assert => {",
            "file": "tests/es.object.define-setter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.entries",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 26
            },
            "line": 1,
            "code": "QUnit.test('Object.entries', assert => {",
            "file": "tests/es.object.entries.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.freeze",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Object.freeze', assert => {",
            "file": "tests/es.object.freeze.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.fromEntries",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Object.fromEntries', assert => {",
            "file": "tests/es.object.from-entries.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptor",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 43
            },
            "line": 2,
            "code": "QUnit.test('Object.getOwnPropertyDescriptor', assert => {",
            "file": "tests/es.object.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptor.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 53
            },
            "line": 29,
            "code": "QUnit.test('Object.getOwnPropertyDescriptor.sham flag', assert => {",
            "file": "tests/es.object.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptors",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 44
            },
            "line": 2,
            "code": "QUnit.test('Object.getOwnPropertyDescriptors', assert => {",
            "file": "tests/es.object.get-own-property-descriptors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyDescriptors.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 54
            },
            "line": 49,
            "code": "QUnit.test('Object.getOwnPropertyDescriptors.sham flag', assert => {",
            "file": "tests/es.object.get-own-property-descriptors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertyNames",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 38
            },
            "line": 3,
            "code": "QUnit.test('Object.getOwnPropertyNames', assert => {",
            "file": "tests/es.object.get-own-property-names.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 33
            },
            "line": 2,
            "code": "QUnit.test('Object.getPrototypeOf', assert => {",
            "file": "tests/es.object.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getPrototypeOf.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 50,
                "column": 43
            },
            "line": 50,
            "code": "QUnit.test('Object.getPrototypeOf.sham flag', assert => {",
            "file": "tests/es.object.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.hasOwn",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Object.hasOwn', assert => {",
            "file": "tests/es.object.has-own.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.isExtensible",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Object.isExtensible', assert => {",
            "file": "tests/es.object.is-extensible.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.isFrozen",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Object.isFrozen', assert => {",
            "file": "tests/es.object.is-frozen.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.isSealed",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Object.isSealed', assert => {",
            "file": "tests/es.object.is-sealed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.is",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Object.is', assert => {",
            "file": "tests/es.object.is.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.keys",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Object.keys', assert => {",
            "file": "tests/es.object.keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__lookupGetter__",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 37
            },
            "line": 4,
            "code": "  QUnit.test('Object#__lookupGetter__', assert => {",
            "file": "tests/es.object.lookup-getter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#__lookupSetter__",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 37
            },
            "line": 4,
            "code": "  QUnit.test('Object#__lookupSetter__', assert => {",
            "file": "tests/es.object.lookup-setter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.preventExtensions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 36
            },
            "line": 2,
            "code": "QUnit.test('Object.preventExtensions', assert => {",
            "file": "tests/es.object.prevent-extensions.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.seal",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Object.seal', assert => {",
            "file": "tests/es.object.seal.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.setPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 44
            },
            "line": 2,
            "code": "if (PROTO) QUnit.test('Object.setPrototypeOf', assert => {",
            "file": "tests/es.object.set-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object#toString",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Object#toString', assert => {",
            "file": "tests/es.object.to-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.values",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Object.values', assert => {",
            "file": "tests/es.object.values.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "parseFloat",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('parseFloat', assert => {",
            "file": "tests/es.parse-float.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "parseInt",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "QUnit.test('parseInt', assert => {",
            "file": "tests/es.parse-int.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.allSettled",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 30
            },
            "line": 1,
            "code": "QUnit.test('Promise.allSettled', assert => {",
            "file": "tests/es.promise.all-settled.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.allSettled, resolved",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 40
            },
            "line": 8,
            "code": "QUnit.test('Promise.allSettled, resolved', assert => {",
            "file": "tests/es.promise.all-settled.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.allSettled, rejected",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 40
            },
            "line": 25,
            "code": "QUnit.test('Promise.allSettled, rejected', assert => {",
            "file": "tests/es.promise.all-settled.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Promise.any', assert => {",
            "file": "tests/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, resolved",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 33
            },
            "line": 8,
            "code": "QUnit.test('Promise.any, resolved', assert => {",
            "file": "tests/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, rejected #1",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 36
            },
            "line": 16,
            "code": "QUnit.test('Promise.any, rejected #1', assert => {",
            "file": "tests/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, rejected #2",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 36
            },
            "line": 25,
            "code": "QUnit.test('Promise.any, rejected #2', assert => {",
            "file": "tests/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.any, rejected #3",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 36
            },
            "line": 33,
            "code": "QUnit.test('Promise.any, rejected #3', assert => {",
            "file": "tests/es.promise.any.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#finally",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "QUnit.test('Promise#finally', assert => {",
            "file": "tests/es.promise.finally.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#finally, resolved",
            "suites": [],
            "updatePoint": {
                "line": 10,
                "column": 37
            },
            "line": 10,
            "code": "QUnit.test('Promise#finally, resolved', assert => {",
            "file": "tests/es.promise.finally.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#finally, rejected",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 37
            },
            "line": 25,
            "code": "QUnit.test('Promise#finally, rejected', assert => {",
            "file": "tests/es.promise.finally.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Native Promise, patched",
            "suites": [],
            "updatePoint": {
                "line": 48,
                "column": 83
            },
            "line": 48,
            "code": "if (promise && promise.constructor !== Promise) QUnit.test('Native Promise, patched', assert => {",
            "file": "tests/es.promise.finally.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 19
            },
            "line": 8,
            "code": "QUnit.test('Promise', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise operations order",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 53
            },
            "line": 22,
            "code": "if (DESCRIPTORS) QUnit.test('Promise operations order', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#then",
            "suites": [],
            "updatePoint": {
                "line": 71,
                "column": 24
            },
            "line": 71,
            "code": "QUnit.test('Promise#then', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#catch",
            "suites": [],
            "updatePoint": {
                "line": 161,
                "column": 25
            },
            "line": 161,
            "code": "QUnit.test('Promise#catch', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 257,
                "column": 33
            },
            "line": 257,
            "code": "QUnit.test('Promise#@@toStringTag', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.all",
            "suites": [],
            "updatePoint": {
                "line": 263,
                "column": 23
            },
            "line": 263,
            "code": "QUnit.test('Promise.all', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.race",
            "suites": [],
            "updatePoint": {
                "line": 364,
                "column": 24
            },
            "line": 364,
            "code": "QUnit.test('Promise.race', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.resolve",
            "suites": [],
            "updatePoint": {
                "line": 465,
                "column": 27
            },
            "line": 465,
            "code": "QUnit.test('Promise.resolve', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.reject",
            "suites": [],
            "updatePoint": {
                "line": 517,
                "column": 26
            },
            "line": 517,
            "code": "QUnit.test('Promise.reject', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise subclassing",
            "suites": [],
            "updatePoint": {
                "line": 569,
                "column": 42
            },
            "line": 569,
            "code": "if (PROTO) QUnit.test('Promise subclassing', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Native Promise, patched",
            "suites": [],
            "updatePoint": {
                "line": 684,
                "column": 83
            },
            "line": 684,
            "code": "if (promise && promise.constructor !== Promise) QUnit.test('Native Promise, patched', assert => {",
            "file": "tests/es.promise.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.apply",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Reflect.apply', assert => {",
            "file": "tests/es.reflect.apply.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.construct",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 29
            },
            "line": 1,
            "code": "QUnit.test('Reflect.construct', assert => {",
            "file": "tests/es.reflect.construct.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.defineProperty",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 34
            },
            "line": 2,
            "code": "QUnit.test('Reflect.defineProperty', assert => {",
            "file": "tests/es.reflect.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.defineProperty.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 45,
                "column": 44
            },
            "line": 45,
            "code": "QUnit.test('Reflect.defineProperty.sham flag', assert => {",
            "file": "tests/es.reflect.define-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.deleteProperty",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 34
            },
            "line": 2,
            "code": "QUnit.test('Reflect.deleteProperty', assert => {",
            "file": "tests/es.reflect.delete-property.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnPropertyDescriptor",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 44
            },
            "line": 2,
            "code": "QUnit.test('Reflect.getOwnPropertyDescriptor', assert => {",
            "file": "tests/es.reflect.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnPropertyDescriptor.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 54
            },
            "line": 18,
            "code": "QUnit.test('Reflect.getOwnPropertyDescriptor.sham flag', assert => {",
            "file": "tests/es.reflect.get-own-property-descriptor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 34
            },
            "line": 2,
            "code": "QUnit.test('Reflect.getPrototypeOf', assert => {",
            "file": "tests/es.reflect.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getPrototypeOf.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 44
            },
            "line": 14,
            "code": "QUnit.test('Reflect.getPrototypeOf.sham flag', assert => {",
            "file": "tests/es.reflect.get-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.get",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Reflect.get', assert => {",
            "file": "tests/es.reflect.get.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.has",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Reflect.has', assert => {",
            "file": "tests/es.reflect.has.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.isExtensible",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 32
            },
            "line": 2,
            "code": "QUnit.test('Reflect.isExtensible', assert => {",
            "file": "tests/es.reflect.is-extensible.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.ownKeys",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Reflect.ownKeys', assert => {",
            "file": "tests/es.reflect.own-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.preventExtensions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 37
            },
            "line": 2,
            "code": "QUnit.test('Reflect.preventExtensions', assert => {",
            "file": "tests/es.reflect.prevent-extensions.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.preventExtensions.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 47
            },
            "line": 23,
            "code": "QUnit.test('Reflect.preventExtensions.sham flag', assert => {",
            "file": "tests/es.reflect.prevent-extensions.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.setPrototypeOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 45
            },
            "line": 2,
            "code": "if (PROTO) QUnit.test('Reflect.setPrototypeOf', assert => {",
            "file": "tests/es.reflect.set-prototype-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.set",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Reflect.set', assert => {",
            "file": "tests/es.reflect.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect[@@toStringTag]",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 34
            },
            "line": 1,
            "code": "QUnit.test('Reflect[@@toStringTag]', assert => {",
            "file": "tests/es.reflect.to-string-tag.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp constructor",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 32
            },
            "line": 8,
            "code": "  QUnit.test('RegExp constructor', assert => {",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "abc",
            "suites": [],
            "updatePoint": {
                "line": 56,
                "column": 49
            },
            "line": 56,
            "code": "      assert.true(new Subclass('^abc$').test('abc'), 'correct subclassing with native classes #3');",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp dotAll",
            "suites": [],
            "updatePoint": {
                "line": 61,
                "column": 27
            },
            "line": 61,
            "code": "  QUnit.test('RegExp dotAll', assert => {",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "\n",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 41
            },
            "line": 62,
            "code": "    assert.false(RegExp('.', '').test('\\n'), 'dotAll missed');",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "\n",
            "suites": [],
            "updatePoint": {
                "line": 63,
                "column": 41
            },
            "line": 63,
            "code": "    assert.true(RegExp('.', 's').test('\\n'), 'dotAll basic');",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "\n",
            "suites": [],
            "updatePoint": {
                "line": 64,
                "column": 44
            },
            "line": 64,
            "code": "    assert.false(RegExp('[.]', 's').test('\\n'), 'dotAll brackets #1');",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": ".\n",
            "suites": [],
            "updatePoint": {
                "line": 65,
                "column": 45
            },
            "line": 65,
            "code": "    assert.false(RegExp('[.].', '').test('.\\n'), 'dotAll brackets #2');",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": ".\n",
            "suites": [],
            "updatePoint": {
                "line": 66,
                "column": 45
            },
            "line": 66,
            "code": "    assert.true(RegExp('[.].', 's').test('.\\n'), 'dotAll brackets #3');",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "[\n",
            "suites": [],
            "updatePoint": {
                "line": 67,
                "column": 45
            },
            "line": 67,
            "code": "    assert.true(RegExp('[[].', 's').test('[\\n'), 'dotAll brackets #4');",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp NCG",
            "suites": [],
            "updatePoint": {
                "line": 78,
                "column": 24
            },
            "line": 78,
            "code": "  QUnit.test('RegExp NCG', assert => {",
            "file": "tests/es.regexp.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#dotAll",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "  QUnit.test('RegExp#dotAll', assert => {",
            "file": "tests/es.regexp.dot-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#exec lastIndex updating",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 42
            },
            "line": 2,
            "code": "QUnit.test('RegExp#exec lastIndex updating', assert => {",
            "file": "tests/es.regexp.exec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#exec capturing groups",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 40
            },
            "line": 18,
            "code": "QUnit.test('RegExp#exec capturing groups', assert => {",
            "file": "tests/es.regexp.exec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#exec regression",
            "suites": [],
            "updatePoint": {
                "line": 26,
                "column": 36
            },
            "line": 26,
            "code": "  QUnit.test('RegExp#exec regression', assert => {",
            "file": "tests/es.regexp.exec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#exec sticky",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 32
            },
            "line": 29,
            "code": "  QUnit.test('RegExp#exec sticky', assert => {",
            "file": "tests/es.regexp.exec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#exec sticky anchored",
            "suites": [],
            "updatePoint": {
                "line": 53,
                "column": 41
            },
            "line": 53,
            "code": "  QUnit.test('RegExp#exec sticky anchored', assert => {",
            "file": "tests/es.regexp.exec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#flags",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 26
            },
            "line": 5,
            "code": "  QUnit.test('RegExp#flags', assert => {",
            "file": "tests/es.regexp.flags.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#sticky",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 27
            },
            "line": 4,
            "code": "  QUnit.test('RegExp#sticky', assert => {",
            "file": "tests/es.regexp.sticky.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#test delegates to exec",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 41
            },
            "line": 1,
            "code": "QUnit.test('RegExp#test delegates to exec', assert => {",
            "file": "tests/es.regexp.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "abc",
            "suites": [],
            "updatePoint": {
                "line": 10,
                "column": 26
            },
            "line": 10,
            "code": "  assert.true(re.test('abc'), '#1');",
            "file": "tests/es.regexp.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "abc",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 26
            },
            "line": 15,
            "code": "  assert.true(re.test('abc'), '#3');",
            "file": "tests/es.regexp.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "abc",
            "suites": [],
            "updatePoint": {
                "line": 20,
                "column": 34
            },
            "line": 20,
            "code": "  assert.throws(() => re.test('abc', '#4'));",
            "file": "tests/es.regexp.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#toString",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('RegExp#toString', assert => {",
            "file": "tests/es.regexp.to-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 15
            },
            "line": 18,
            "code": "QUnit.test('Set', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#add",
            "suites": [],
            "updatePoint": {
                "line": 106,
                "column": 19
            },
            "line": 106,
            "code": "QUnit.test('Set#add', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#clear",
            "suites": [],
            "updatePoint": {
                "line": 137,
                "column": 21
            },
            "line": 137,
            "code": "QUnit.test('Set#clear', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#delete",
            "suites": [],
            "updatePoint": {
                "line": 166,
                "column": 22
            },
            "line": 166,
            "code": "QUnit.test('Set#delete', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#forEach",
            "suites": [],
            "updatePoint": {
                "line": 195,
                "column": 23
            },
            "line": 195,
            "code": "QUnit.test('Set#forEach', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#has",
            "suites": [],
            "updatePoint": {
                "line": 247,
                "column": 19
            },
            "line": 247,
            "code": "QUnit.test('Set#has', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#size",
            "suites": [],
            "updatePoint": {
                "line": 270,
                "column": 20
            },
            "line": 270,
            "code": "QUnit.test('Set#size', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set & -0",
            "suites": [],
            "updatePoint": {
                "line": 289,
                "column": 20
            },
            "line": 289,
            "code": "QUnit.test('Set & -0', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 312,
                "column": 29
            },
            "line": 312,
            "code": "QUnit.test('Set#@@toStringTag', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set Iterator",
            "suites": [],
            "updatePoint": {
                "line": 316,
                "column": 24
            },
            "line": 316,
            "code": "QUnit.test('Set Iterator', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#keys",
            "suites": [],
            "updatePoint": {
                "line": 335,
                "column": 20
            },
            "line": 335,
            "code": "QUnit.test('Set#keys', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#values",
            "suites": [],
            "updatePoint": {
                "line": 367,
                "column": 22
            },
            "line": 367,
            "code": "QUnit.test('Set#values', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#entries",
            "suites": [],
            "updatePoint": {
                "line": 398,
                "column": 23
            },
            "line": 398,
            "code": "QUnit.test('Set#entries', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 429,
                "column": 26
            },
            "line": 429,
            "code": "QUnit.test('Set#@@iterator', assert => {",
            "file": "tests/es.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#anchor",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('String#anchor', assert => {",
            "file": "tests/es.string.anchor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#at",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('String#at', assert => {",
            "file": "tests/es.string.at-alternative.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#big",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('String#big', assert => {",
            "file": "tests/es.string.big.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#blink",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('String#blink', assert => {",
            "file": "tests/es.string.blink.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#bold",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('String#bold', assert => {",
            "file": "tests/es.string.bold.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#codePointAt",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('String#codePointAt', assert => {",
            "file": "tests/es.string.code-point-at.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#endsWith",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('String#endsWith', assert => {",
            "file": "tests/es.string.ends-with.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#fixed",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('String#fixed', assert => {",
            "file": "tests/es.string.fixed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#fontcolor",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 28
            },
            "line": 1,
            "code": "QUnit.test('String#fontcolor', assert => {",
            "file": "tests/es.string.fontcolor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#fontsize",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "QUnit.test('String#fontsize', assert => {",
            "file": "tests/es.string.fontsize.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String.fromCodePoint",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 32
            },
            "line": 1,
            "code": "QUnit.test('String.fromCodePoint', assert => {",
            "file": "tests/es.string.from-code-point.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#includes",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('String#includes', assert => {",
            "file": "tests/es.string.includes.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#italics",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 26
            },
            "line": 1,
            "code": "QUnit.test('String#italics', assert => {",
            "file": "tests/es.string.italics.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('String#@@iterator', assert => {",
            "file": "tests/es.string.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#link",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('String#link', assert => {",
            "file": "tests/es.string.link.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#matchAll",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('String#matchAll', assert => {",
            "file": "tests/es.string.match-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#match regression",
            "suites": [],
            "updatePoint": {
                "line": 232,
                "column": 35
            },
            "line": 232,
            "code": "QUnit.test('String#match regression', run);",
            "file": "tests/es.string.match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@match appearance",
            "suites": [],
            "updatePoint": {
                "line": 233,
                "column": 37
            },
            "line": 233,
            "code": "QUnit.test('RegExp#@@match appearance', assert => {",
            "file": "tests/es.string.match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@match basic behavior",
            "suites": [],
            "updatePoint": {
                "line": 241,
                "column": 41
            },
            "line": 241,
            "code": "QUnit.test('RegExp#@@match basic behavior', assert => {",
            "file": "tests/es.string.match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#match delegates to @@match",
            "suites": [],
            "updatePoint": {
                "line": 252,
                "column": 45
            },
            "line": 252,
            "code": "QUnit.test('String#match delegates to @@match', assert => {",
            "file": "tests/es.string.match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@match delegates to exec",
            "suites": [],
            "updatePoint": {
                "line": 276,
                "column": 44
            },
            "line": 276,
            "code": "QUnit.test('RegExp#@@match delegates to exec', assert => {",
            "file": "tests/es.string.match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@match implementation",
            "suites": [],
            "updatePoint": {
                "line": 297,
                "column": 41
            },
            "line": 297,
            "code": "QUnit.test('RegExp#@@match implementation', patchRegExp$exec(run));",
            "file": "tests/es.string.match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#padEnd",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('String#padEnd', assert => {",
            "file": "tests/es.string.pad-end.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#padStart",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('String#padStart', assert => {",
            "file": "tests/es.string.pad-start.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String.raw",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('String.raw', assert => {",
            "file": "tests/es.string.raw.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#repeat",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('String#repeat', assert => {",
            "file": "tests/es.string.repeat.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#replaceAll",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('String#replaceAll', assert => {",
            "file": "tests/es.string.replace-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#replace regression",
            "suites": [],
            "updatePoint": {
                "line": 163,
                "column": 37
            },
            "line": 163,
            "code": "QUnit.test('String#replace regression', run);",
            "file": "tests/es.string.replace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@replace appearance",
            "suites": [],
            "updatePoint": {
                "line": 164,
                "column": 39
            },
            "line": 164,
            "code": "QUnit.test('RegExp#@@replace appearance', assert => {",
            "file": "tests/es.string.replace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@replace basic behavior",
            "suites": [],
            "updatePoint": {
                "line": 172,
                "column": 43
            },
            "line": 172,
            "code": "QUnit.test('RegExp#@@replace basic behavior', assert => {",
            "file": "tests/es.string.replace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String.replace delegates to @@replace",
            "suites": [],
            "updatePoint": {
                "line": 175,
                "column": 49
            },
            "line": 175,
            "code": "QUnit.test('String.replace delegates to @@replace', assert => {",
            "file": "tests/es.string.replace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@replace delegates to exec",
            "suites": [],
            "updatePoint": {
                "line": 205,
                "column": 46
            },
            "line": 205,
            "code": "QUnit.test('RegExp#@@replace delegates to exec', assert => {",
            "file": "tests/es.string.replace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@replace correctly handles substitutions",
            "suites": [],
            "updatePoint": {
                "line": 233,
                "column": 60
            },
            "line": 233,
            "code": "QUnit.test('RegExp#@@replace correctly handles substitutions', assert => {",
            "file": "tests/es.string.replace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@replace implementation",
            "suites": [],
            "updatePoint": {
                "line": 264,
                "column": 43
            },
            "line": 264,
            "code": "QUnit.test('RegExp#@@replace implementation', patchRegExp$exec(run));",
            "file": "tests/es.string.replace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#search regression",
            "suites": [],
            "updatePoint": {
                "line": 88,
                "column": 36
            },
            "line": 88,
            "code": "QUnit.test('String#search regression', run);",
            "file": "tests/es.string.search.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@search appearance",
            "suites": [],
            "updatePoint": {
                "line": 89,
                "column": 38
            },
            "line": 89,
            "code": "QUnit.test('RegExp#@@search appearance', assert => {",
            "file": "tests/es.string.search.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@search basic behavior",
            "suites": [],
            "updatePoint": {
                "line": 97,
                "column": 42
            },
            "line": 97,
            "code": "QUnit.test('RegExp#@@search basic behavior', assert => {",
            "file": "tests/es.string.search.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#search delegates to @@search",
            "suites": [],
            "updatePoint": {
                "line": 101,
                "column": 47
            },
            "line": 101,
            "code": "QUnit.test('String#search delegates to @@search', assert => {",
            "file": "tests/es.string.search.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@search delegates to exec",
            "suites": [],
            "updatePoint": {
                "line": 125,
                "column": 45
            },
            "line": 125,
            "code": "QUnit.test('RegExp#@@search delegates to exec', assert => {",
            "file": "tests/es.string.search.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@search implementation",
            "suites": [],
            "updatePoint": {
                "line": 148,
                "column": 42
            },
            "line": 148,
            "code": "QUnit.test('RegExp#@@search implementation', patchRegExp$exec(run));",
            "file": "tests/es.string.search.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#small",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('String#small', assert => {",
            "file": "tests/es.string.small.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#split regression",
            "suites": [],
            "updatePoint": {
                "line": 828,
                "column": 35
            },
            "line": 828,
            "code": "QUnit.test('String#split regression', run);",
            "file": "tests/es.string.split.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@split appearance",
            "suites": [],
            "updatePoint": {
                "line": 829,
                "column": 37
            },
            "line": 829,
            "code": "QUnit.test('RegExp#@@split appearance', assert => {",
            "file": "tests/es.string.split.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@split basic behavior",
            "suites": [],
            "updatePoint": {
                "line": 837,
                "column": 41
            },
            "line": 837,
            "code": "QUnit.test('RegExp#@@split basic behavior', assert => {",
            "file": "tests/es.string.split.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#split delegates to @@split",
            "suites": [],
            "updatePoint": {
                "line": 843,
                "column": 45
            },
            "line": 843,
            "code": "QUnit.test('String#split delegates to @@split', assert => {",
            "file": "tests/es.string.split.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@split delegates to exec",
            "suites": [],
            "updatePoint": {
                "line": 873,
                "column": 44
            },
            "line": 873,
            "code": "QUnit.test('RegExp#@@split delegates to exec', assert => {",
            "file": "tests/es.string.split.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp#@@split implementation",
            "suites": [],
            "updatePoint": {
                "line": 924,
                "column": 41
            },
            "line": 924,
            "code": "QUnit.test('RegExp#@@split implementation', patchRegExp$exec(run));",
            "file": "tests/es.string.split.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#startsWith",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('String#startsWith', assert => {",
            "file": "tests/es.string.starts-with.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#strike",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('String#strike', assert => {",
            "file": "tests/es.string.strike.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#sub",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('String#sub', assert => {",
            "file": "tests/es.string.sub.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#substr",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('String#substr', assert => {",
            "file": "tests/es.string.substr.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#sup",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('String#sup', assert => {",
            "file": "tests/es.string.sup.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimRight",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('String#trimRight', assert => {",
            "file": "tests/es.string.trim-end.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimEnd",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 26
            },
            "line": 21,
            "code": "QUnit.test('String#trimEnd', assert => {",
            "file": "tests/es.string.trim-end.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimLeft",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('String#trimLeft', assert => {",
            "file": "tests/es.string.trim-start.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trimStart",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 28
            },
            "line": 21,
            "code": "QUnit.test('String#trimStart', assert => {",
            "file": "tests/es.string.trim-start.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#trim",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('String#trim', assert => {",
            "file": "tests/es.string.trim.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.asyncIterator",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 32
            },
            "line": 2,
            "code": "QUnit.test('Symbol.asyncIterator', assert => {",
            "file": "tests/es.symbol.async-iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol#description",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Symbol#description', assert => {",
            "file": "tests/es.symbol.description.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol",
            "suites": [],
            "updatePoint": {
                "line": 14,
                "column": 18
            },
            "line": 14,
            "code": "QUnit.test('Symbol', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Well-known Symbols",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 30
            },
            "line": 35,
            "code": "QUnit.test('Well-known Symbols', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Global symbol registry",
            "suites": [],
            "updatePoint": {
                "line": 50,
                "column": 34
            },
            "line": 50,
            "code": "QUnit.test('Global symbol registry', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol#@@toPrimitive",
            "suites": [],
            "updatePoint": {
                "line": 67,
                "column": 32
            },
            "line": 67,
            "code": "QUnit.test('Symbol#@@toPrimitive', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 72,
                "column": 32
            },
            "line": 72,
            "code": "QUnit.test('Symbol#@@toStringTag', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.getOwnPropertySymbols",
            "suites": [],
            "updatePoint": {
                "line": 75,
                "column": 40
            },
            "line": 75,
            "code": "QUnit.test('Object.getOwnPropertySymbols', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & JSON.stringify",
            "suites": [],
            "updatePoint": {
                "line": 106,
                "column": 38
            },
            "line": 106,
            "code": "  QUnit.test('Symbols & JSON.stringify', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & descriptors",
            "suites": [],
            "updatePoint": {
                "line": 131,
                "column": 35
            },
            "line": 131,
            "code": "  QUnit.test('Symbols & descriptors', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & Object.defineProperties",
            "suites": [],
            "updatePoint": {
                "line": 224,
                "column": 47
            },
            "line": 224,
            "code": "  QUnit.test('Symbols & Object.defineProperties', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbols & Object.create",
            "suites": [],
            "updatePoint": {
                "line": 251,
                "column": 37
            },
            "line": 251,
            "code": "  QUnit.test('Symbols & Object.create', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "@@species",
            "suites": [],
            "updatePoint": {
                "line": 281,
                "column": 32
            },
            "line": 281,
            "code": "    QUnit.test(`${name}@@species`, assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array@@species",
            "suites": [],
            "updatePoint": {
                "line": 288,
                "column": 28
            },
            "line": 288,
            "code": "  QUnit.test('Array@@species', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.sham flag",
            "suites": [],
            "updatePoint": {
                "line": 293,
                "column": 30
            },
            "line": 293,
            "code": "  QUnit.test('Symbol.sham flag', assert => {",
            "file": "tests/es.symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.indexOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 58
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.indexOf', assert => {",
            "file": "tests/es.typed-array.at.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": " constructor",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 35
            },
            "line": 16,
            "code": "    QUnit.test(`${name} constructor`, assert => {",
            "file": "tests/es.typed-array.constructors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": " descriptors",
            "suites": [],
            "updatePoint": {
                "line": 180,
                "column": 35
            },
            "line": 180,
            "code": "    QUnit.test(`${name} descriptors`, assert => {",
            "file": "tests/es.typed-array.constructors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": " @@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 251,
                "column": 37
            },
            "line": 251,
            "code": "    QUnit.test(`${name} @@toStringTag`, assert => {",
            "file": "tests/es.typed-array.constructors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": ".sham",
            "suites": [],
            "updatePoint": {
                "line": 262,
                "column": 28
            },
            "line": 262,
            "code": "    QUnit.test(`${name}.sham`, assert => {",
            "file": "tests/es.typed-array.constructors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.copyWithin",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 61
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.copyWithin', assert => {",
            "file": "tests/es.typed-array.copy-within.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.every",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 56
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.every', assert => {",
            "file": "tests/es.typed-array.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.fill",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 55
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.fill', assert => {",
            "file": "tests/es.typed-array.fill.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.filter",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 57
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.filter', assert => {",
            "file": "tests/es.typed-array.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.findIndex",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 60
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.findIndex', assert => {",
            "file": "tests/es.typed-array.find-index.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.find",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 55
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.find', assert => {",
            "file": "tests/es.typed-array.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.forEach",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 58
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.forEach', assert => {",
            "file": "tests/es.typed-array.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArray%.from",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 46
            },
            "line": 3,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArray%.from', assert => {",
            "file": "tests/es.typed-array.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.includes",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 59
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.includes', assert => {",
            "file": "tests/es.typed-array.includes.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.indexOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 58
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.indexOf', assert => {",
            "file": "tests/es.typed-array.index-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.keys",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 55
            },
            "line": 3,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.keys', assert => {",
            "file": "tests/es.typed-array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.values",
            "suites": [],
            "updatePoint": {
                "line": 37,
                "column": 57
            },
            "line": 37,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.values', assert => {",
            "file": "tests/es.typed-array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.entries",
            "suites": [],
            "updatePoint": {
                "line": 71,
                "column": 58
            },
            "line": 71,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.entries', assert => {",
            "file": "tests/es.typed-array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 105,
                "column": 61
            },
            "line": 105,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.@@iterator', assert => {",
            "file": "tests/es.typed-array.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.join",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 55
            },
            "line": 3,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.join', assert => {",
            "file": "tests/es.typed-array.join.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.lastIndexOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 62
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.lastIndexOf', assert => {",
            "file": "tests/es.typed-array.last-index-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.map",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 54
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.map', assert => {",
            "file": "tests/es.typed-array.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArray%.of",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 44
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArray%.of', assert => {",
            "file": "tests/es.typed-array.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.reduceRight",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 62
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.reduceRight', assert => {",
            "file": "tests/es.typed-array.reduce-right.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.reduce",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 57
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.reduce', assert => {",
            "file": "tests/es.typed-array.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.reverse",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 58
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.reverse', assert => {",
            "file": "tests/es.typed-array.reverse.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.set",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 54
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.set', assert => {",
            "file": "tests/es.typed-array.set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.slice",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 56
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.slice', assert => {",
            "file": "tests/es.typed-array.slice.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.some",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 55
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.some', assert => {",
            "file": "tests/es.typed-array.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.sort",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 55
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.sort', assert => {",
            "file": "tests/es.typed-array.sort.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.subarray",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 59
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.subarray', assert => {",
            "file": "tests/es.typed-array.subarray.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.toLocaleString",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 65
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.toLocaleString', assert => {",
            "file": "tests/es.typed-array.to-locale-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.toString",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 59
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.toString', assert => {",
            "file": "tests/es.typed-array.to-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Float32 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 48
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Float32 conversions', assert => {",
            "file": "tests/es.typed.conversions.float32.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Float64 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 48
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Float64 conversions', assert => {",
            "file": "tests/es.typed.conversions.float64.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Int16 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 46
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Int16 conversions', assert => {",
            "file": "tests/es.typed.conversions.int16.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Int32 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 46
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Int32 conversions', assert => {",
            "file": "tests/es.typed.conversions.int32.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Int8 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 45
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Int8 conversions', assert => {",
            "file": "tests/es.typed.conversions.int8.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Uint16 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 47
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Uint16 conversions', assert => {",
            "file": "tests/es.typed.conversions.uint16.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Uint32 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 47
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Uint32 conversions', assert => {",
            "file": "tests/es.typed.conversions.uint32.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Uint8Clamped conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 53
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Uint8Clamped conversions', assert => {",
            "file": "tests/es.typed.conversions.uint8-clamped.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Uint8 conversions",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 46
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Uint8 conversions', assert => {",
            "file": "tests/es.typed.conversions.uint8.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "unescape",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 20
            },
            "line": 1,
            "code": "QUnit.test('unescape', assert => {",
            "file": "tests/es.unescape.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 19
            },
            "line": 13,
            "code": "QUnit.test('WeakMap', assert => {",
            "file": "tests/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#delete",
            "suites": [],
            "updatePoint": {
                "line": 90,
                "column": 26
            },
            "line": 90,
            "code": "QUnit.test('WeakMap#delete', assert => {",
            "file": "tests/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#get",
            "suites": [],
            "updatePoint": {
                "line": 114,
                "column": 23
            },
            "line": 114,
            "code": "QUnit.test('WeakMap#get', assert => {",
            "file": "tests/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#has",
            "suites": [],
            "updatePoint": {
                "line": 135,
                "column": 23
            },
            "line": 135,
            "code": "QUnit.test('WeakMap#has', assert => {",
            "file": "tests/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#set",
            "suites": [],
            "updatePoint": {
                "line": 156,
                "column": 23
            },
            "line": 156,
            "code": "QUnit.test('WeakMap#set', assert => {",
            "file": "tests/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 180,
                "column": 33
            },
            "line": 180,
            "code": "QUnit.test('WeakMap#@@toStringTag', assert => {",
            "file": "tests/es.weak-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 19
            },
            "line": 13,
            "code": "QUnit.test('WeakSet', assert => {",
            "file": "tests/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#add",
            "suites": [],
            "updatePoint": {
                "line": 84,
                "column": 23
            },
            "line": 84,
            "code": "QUnit.test('WeakSet#add', assert => {",
            "file": "tests/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#delete",
            "suites": [],
            "updatePoint": {
                "line": 94,
                "column": 26
            },
            "line": 94,
            "code": "QUnit.test('WeakSet#delete', assert => {",
            "file": "tests/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#has",
            "suites": [],
            "updatePoint": {
                "line": 109,
                "column": 23
            },
            "line": 109,
            "code": "QUnit.test('WeakSet#has', assert => {",
            "file": "tests/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet::@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 124,
                "column": 34
            },
            "line": 124,
            "code": "QUnit.test('WeakSet::@@toStringTag', assert => {",
            "file": "tests/es.weak-set.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#filterOut",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('Array#filterOut', assert => {",
            "file": "tests/esnext.array.filter-out.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#filterReject",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Array#filterReject', assert => {",
            "file": "tests/esnext.array.filter-reject.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#findLastIndex",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Array#findLastIndex', assert => {",
            "file": "tests/esnext.array.find-last-index.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#findLast",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Array#findLast', assert => {",
            "file": "tests/esnext.array.find-last.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.fromAsync",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('Array.fromAsync', assert => {",
            "file": "tests/esnext.array.from-async.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#groupByToMap",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 30
            },
            "line": 5,
            "code": "QUnit.test('Array#groupByToMap', assert => {",
            "file": "tests/esnext.array.group-by-to-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#groupBy",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 25
            },
            "line": 5,
            "code": "QUnit.test('Array#groupBy', assert => {",
            "file": "tests/esnext.array.group-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array.isTemplateObject",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 34
            },
            "line": 1,
            "code": "QUnit.test('Array.isTemplateObject', assert => {",
            "file": "tests/esnext.array.is-template-object.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#lastIndex",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 44
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Array#lastIndex', assert => {",
            "file": "tests/esnext.array.last-index.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#lastItem",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 43
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('Array#lastItem', assert => {",
            "file": "tests/esnext.array.last-item.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#toReversed",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Array#toReversed', assert => {",
            "file": "tests/esnext.array.to-reversed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#toSorted",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Array#toSorted', assert => {",
            "file": "tests/esnext.array.to-sorted.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#toSpliced",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Array#toSpliced', assert => {",
            "file": "tests/esnext.array.to-spliced.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#uniqueBy",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Array#uniqueBy', assert => {",
            "file": "tests/esnext.array.unique-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array#with",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Array#with', assert => {",
            "file": "tests/esnext.array.with.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#asIndexedPairs",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 40
            },
            "line": 2,
            "code": "QUnit.test('AsyncIterator#asIndexedPairs', assert => {",
            "file": "tests/esnext.async-iterator.as-indexed-pairs.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 25
            },
            "line": 4,
            "code": "QUnit.test('AsyncIterator', assert => {",
            "file": "tests/esnext.async-iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#constructor",
            "suites": [],
            "updatePoint": {
                "line": 31,
                "column": 37
            },
            "line": 31,
            "code": "QUnit.test('AsyncIterator#constructor', assert => {",
            "file": "tests/esnext.async-iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 34,
                "column": 39
            },
            "line": 34,
            "code": "QUnit.test('AsyncIterator#@@toStringTag', assert => {",
            "file": "tests/esnext.async-iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#drop",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('AsyncIterator#drop', assert => {",
            "file": "tests/esnext.async-iterator.drop.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#every",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 31
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#every', assert => {",
            "file": "tests/esnext.async-iterator.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#filter",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 32
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#filter', assert => {",
            "file": "tests/esnext.async-iterator.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#find",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#find', assert => {",
            "file": "tests/esnext.async-iterator.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#flatMap",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 33
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#flatMap', assert => {",
            "file": "tests/esnext.async-iterator.flat-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#forEach",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 33
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#forEach', assert => {",
            "file": "tests/esnext.async-iterator.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator.from",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 30
            },
            "line": 1,
            "code": "QUnit.test('AsyncIterator.from', assert => {",
            "file": "tests/esnext.async-iterator.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#map",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#map', assert => {",
            "file": "tests/esnext.async-iterator.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#reduce",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 32
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#reduce', assert => {",
            "file": "tests/esnext.async-iterator.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#some",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 30
            },
            "line": 3,
            "code": "QUnit.test('AsyncIterator#some', assert => {",
            "file": "tests/esnext.async-iterator.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#take",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('AsyncIterator#take', assert => {",
            "file": "tests/esnext.async-iterator.take.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "AsyncIterator#toArray",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 33
            },
            "line": 2,
            "code": "QUnit.test('AsyncIterator#toArray', assert => {",
            "file": "tests/esnext.async-iterator.to-array.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "BigInt.range",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 57
            },
            "line": 2,
            "code": "if (typeof BigInt == 'function') QUnit.test('BigInt.range', assert => {",
            "file": "tests/esnext.bigint.range.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compositeKey",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 24
            },
            "line": 6,
            "code": "QUnit.test('compositeKey', assert => {",
            "file": "tests/esnext.composite-key.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compositeSymbol",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "QUnit.test('compositeSymbol', assert => {",
            "file": "tests/esnext.composite-symbol.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function.isCallable",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Function.isCallable', assert => {",
            "file": "tests/esnext.function.is-callable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function.isConstructor",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 34
            },
            "line": 2,
            "code": "QUnit.test('Function.isConstructor', assert => {",
            "file": "tests/esnext.function.is-constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Function#unThis",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "QUnit.test('Function#unThis', assert => {",
            "file": "tests/esnext.function.un-this.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#asIndexedPairs",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 35
            },
            "line": 2,
            "code": "QUnit.test('Iterator#asIndexedPairs', assert => {",
            "file": "tests/esnext.iterator.as-indexed-pairs.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 20
            },
            "line": 5,
            "code": "QUnit.test('Iterator', assert => {",
            "file": "tests/esnext.iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#constructor",
            "suites": [],
            "updatePoint": {
                "line": 36,
                "column": 32
            },
            "line": 36,
            "code": "QUnit.test('Iterator#constructor', assert => {",
            "file": "tests/esnext.iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 39,
                "column": 34
            },
            "line": 39,
            "code": "QUnit.test('Iterator#@@toStringTag', assert => {",
            "file": "tests/esnext.iterator.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#drop",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Iterator#drop', assert => {",
            "file": "tests/esnext.iterator.drop.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#every",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 26
            },
            "line": 3,
            "code": "QUnit.test('Iterator#every', assert => {",
            "file": "tests/esnext.iterator.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#filter",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('Iterator#filter', assert => {",
            "file": "tests/esnext.iterator.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#find",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Iterator#find', assert => {",
            "file": "tests/esnext.iterator.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#flatMap",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 28
            },
            "line": 3,
            "code": "QUnit.test('Iterator#flatMap', assert => {",
            "file": "tests/esnext.iterator.flat-map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#forEach",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 28
            },
            "line": 3,
            "code": "QUnit.test('Iterator#forEach', assert => {",
            "file": "tests/esnext.iterator.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator.from",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Iterator.from', assert => {",
            "file": "tests/esnext.iterator.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#map",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 24
            },
            "line": 3,
            "code": "QUnit.test('Iterator#map', assert => {",
            "file": "tests/esnext.iterator.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#reduce",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 27
            },
            "line": 3,
            "code": "QUnit.test('Iterator#reduce', assert => {",
            "file": "tests/esnext.iterator.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#some",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "QUnit.test('Iterator#some', assert => {",
            "file": "tests/esnext.iterator.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#take",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 25
            },
            "line": 2,
            "code": "QUnit.test('Iterator#take', assert => {",
            "file": "tests/esnext.iterator.take.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#toArray",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Iterator#toArray', assert => {",
            "file": "tests/esnext.iterator.to-array.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterator#toAsync",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Iterator#toAsync', assert => {",
            "file": "tests/esnext.iterator.to-async.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Map#deleteAll', assert => {",
            "file": "tests/esnext.map.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#emplace",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Map#emplace', assert => {",
            "file": "tests/esnext.map.emplace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#every",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Map#every', assert => {",
            "file": "tests/esnext.map.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#filter",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Map#filter', assert => {",
            "file": "tests/esnext.map.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#findKey",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Map#findKey', assert => {",
            "file": "tests/esnext.map.find-key.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#find",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 20
            },
            "line": 1,
            "code": "QUnit.test('Map#find', assert => {",
            "file": "tests/esnext.map.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.from",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Map.from', assert => {",
            "file": "tests/esnext.map.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.groupBy",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 23
            },
            "line": 2,
            "code": "QUnit.test('Map.groupBy', assert => {",
            "file": "tests/esnext.map.group-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#includes",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Map#includes', assert => {",
            "file": "tests/esnext.map.includes.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.keyBy",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Map.keyBy', assert => {",
            "file": "tests/esnext.map.key-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#keyOf",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Map#keyOf', assert => {",
            "file": "tests/esnext.map.key-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#mapKeys",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Map#mapKeys', assert => {",
            "file": "tests/esnext.map.map-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#mapValues",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Map#mapValues', assert => {",
            "file": "tests/esnext.map.map-values.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#merge",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Map#merge', assert => {",
            "file": "tests/esnext.map.merge.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map.of",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 18
            },
            "line": 1,
            "code": "QUnit.test('Map.of', assert => {",
            "file": "tests/esnext.map.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#reduce",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Map#reduce', assert => {",
            "file": "tests/esnext.map.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#some",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 20
            },
            "line": 1,
            "code": "QUnit.test('Map#some', assert => {",
            "file": "tests/esnext.map.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#updateOrInsert",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 30
            },
            "line": 1,
            "code": "QUnit.test('Map#updateOrInsert', assert => {",
            "file": "tests/esnext.map.update-or-insert.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#update",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Map#update', assert => {",
            "file": "tests/esnext.map.update.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map#upsert",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Map#upsert', assert => {",
            "file": "tests/esnext.map.upsert.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.clamp",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.clamp', assert => {",
            "file": "tests/esnext.math.clamp.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.DEG_PER_RAD",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 28
            },
            "line": 1,
            "code": "QUnit.test('Math.DEG_PER_RAD', assert => {",
            "file": "tests/esnext.math.deg-per-rad.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.degrees",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Math.degrees', assert => {",
            "file": "tests/esnext.math.degrees.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.fscale",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Math.fscale', assert => {",
            "file": "tests/esnext.math.fscale.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.iaddh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.iaddh', assert => {",
            "file": "tests/esnext.math.iaddh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.imulh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.imulh', assert => {",
            "file": "tests/esnext.math.imulh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.isubh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.isubh', assert => {",
            "file": "tests/esnext.math.isubh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.RAD_PER_DEG",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 28
            },
            "line": 1,
            "code": "QUnit.test('Math.RAD_PER_DEG', assert => {",
            "file": "tests/esnext.math.rad-per-deg.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.radians",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Math.radians', assert => {",
            "file": "tests/esnext.math.radians.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.scale",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.scale', assert => {",
            "file": "tests/esnext.math.scale.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.seededPRNG",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "QUnit.test('Math.seededPRNG', assert => {",
            "file": "tests/esnext.math.seeded-prng.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.signbit",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Math.signbit', assert => {",
            "file": "tests/esnext.math.signbit.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Math.umulh",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Math.umulh', assert => {",
            "file": "tests/esnext.math.umulh.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.fromString",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 29
            },
            "line": 1,
            "code": "QUnit.test('Number.fromString', assert => {",
            "file": "tests/esnext.number.from-string.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Number.range",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 24
            },
            "line": 1,
            "code": "QUnit.test('Number.range', assert => {",
            "file": "tests/esnext.number.range.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.iterateEntries",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 33
            },
            "line": 1,
            "code": "QUnit.test('Object.iterateEntries', assert => {",
            "file": "tests/esnext.object.iterate-entries.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.iterateKeys",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 30
            },
            "line": 1,
            "code": "QUnit.test('Object.iterateKeys', assert => {",
            "file": "tests/esnext.object.iterate-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object.iterateValues",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 32
            },
            "line": 1,
            "code": "QUnit.test('Object.iterateValues', assert => {",
            "file": "tests/esnext.object.iterate-values.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 22
            },
            "line": 2,
            "code": "QUnit.test('Observable', assert => {",
            "file": "tests/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable#subscribe",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 32
            },
            "line": 32,
            "code": "QUnit.test('Observable#subscribe', assert => {",
            "file": "tests/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable#constructor",
            "suites": [],
            "updatePoint": {
                "line": 45,
                "column": 34
            },
            "line": 45,
            "code": "QUnit.test('Observable#constructor', assert => {",
            "file": "tests/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable#@@observable",
            "suites": [],
            "updatePoint": {
                "line": 48,
                "column": 35
            },
            "line": 48,
            "code": "QUnit.test('Observable#@@observable', assert => {",
            "file": "tests/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable.of",
            "suites": [],
            "updatePoint": {
                "line": 55,
                "column": 25
            },
            "line": 55,
            "code": "QUnit.test('Observable.of', assert => {",
            "file": "tests/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Observable.from",
            "suites": [],
            "updatePoint": {
                "line": 61,
                "column": 27
            },
            "line": 61,
            "code": "QUnit.test('Observable.from', assert => {",
            "file": "tests/esnext.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.try",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 23
            },
            "line": 1,
            "code": "QUnit.test('Promise.try', assert => {",
            "file": "tests/esnext.promise.try.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.try, resolved",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 33
            },
            "line": 8,
            "code": "QUnit.test('Promise.try, resolved', assert => {",
            "file": "tests/esnext.promise.try.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Promise.try, rejected",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 33
            },
            "line": 16,
            "code": "QUnit.test('Promise.try, rejected', assert => {",
            "file": "tests/esnext.promise.try.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.defineMetadata",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 34
            },
            "line": 1,
            "code": "QUnit.test('Reflect.defineMetadata', assert => {",
            "file": "tests/esnext.reflect.define-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.deleteMetadata",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 34
            },
            "line": 1,
            "code": "QUnit.test('Reflect.deleteMetadata', assert => {",
            "file": "tests/esnext.reflect.delete-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getMetadataKeys",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 35
            },
            "line": 1,
            "code": "QUnit.test('Reflect.getMetadataKeys', assert => {",
            "file": "tests/esnext.reflect.get-metadata-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getMetadata",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 31
            },
            "line": 1,
            "code": "QUnit.test('Reflect.getMetadata', assert => {",
            "file": "tests/esnext.reflect.get-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnMetadata",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 34
            },
            "line": 1,
            "code": "QUnit.test('Reflect.getOwnMetadata', assert => {",
            "file": "tests/esnext.reflect.get-own-matadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.getOwnMetadataKeys",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 38
            },
            "line": 1,
            "code": "QUnit.test('Reflect.getOwnMetadataKeys', assert => {",
            "file": "tests/esnext.reflect.get-own-metadata-keys.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.hasMetadata",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 31
            },
            "line": 1,
            "code": "QUnit.test('Reflect.hasMetadata', assert => {",
            "file": "tests/esnext.reflect.has-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.hasOwnMetadata",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 34
            },
            "line": 1,
            "code": "QUnit.test('Reflect.hasOwnMetadata', assert => {",
            "file": "tests/esnext.reflect.has-own-metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reflect.metadata",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 28
            },
            "line": 1,
            "code": "QUnit.test('Reflect.metadata', assert => {",
            "file": "tests/esnext.reflect.metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#addAll",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Set#addAll', assert => {",
            "file": "tests/esnext.set.add-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('Set#deleteAll', assert => {",
            "file": "tests/esnext.set.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#difference",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Set#difference', assert => {",
            "file": "tests/esnext.set.difference.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#every",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 21
            },
            "line": 1,
            "code": "QUnit.test('Set#every', assert => {",
            "file": "tests/esnext.set.every.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#filter",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Set#filter', assert => {",
            "file": "tests/esnext.set.filter.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#find",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 20
            },
            "line": 1,
            "code": "QUnit.test('Set#find', assert => {",
            "file": "tests/esnext.set.find.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set.from",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Set.from', assert => {",
            "file": "tests/esnext.set.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#intersection",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Set#intersection', assert => {",
            "file": "tests/esnext.set.intersection.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#isDisjointFrom",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 30
            },
            "line": 2,
            "code": "QUnit.test('Set#isDisjointFrom', assert => {",
            "file": "tests/esnext.set.is-disjoint-from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#isSubsetOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Set#isSubsetOf', assert => {",
            "file": "tests/esnext.set.is-subset-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#isSupersetOf",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 28
            },
            "line": 2,
            "code": "QUnit.test('Set#isSupersetOf', assert => {",
            "file": "tests/esnext.set.is-superset-of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#join",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 20
            },
            "line": 2,
            "code": "QUnit.test('Set#join', assert => {",
            "file": "tests/esnext.set.join.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#map",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 19
            },
            "line": 1,
            "code": "QUnit.test('Set#map', assert => {",
            "file": "tests/esnext.set.map.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set.of",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 18
            },
            "line": 1,
            "code": "QUnit.test('Set.of', assert => {",
            "file": "tests/esnext.set.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#reduce",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('Set#reduce', assert => {",
            "file": "tests/esnext.set.reduce.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#some",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 20
            },
            "line": 1,
            "code": "QUnit.test('Set#some', assert => {",
            "file": "tests/esnext.set.some.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#symmetricDifference",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 35
            },
            "line": 2,
            "code": "QUnit.test('Set#symmetricDifference', assert => {",
            "file": "tests/esnext.set.symmetric-difference.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set#union",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('Set#union', assert => {",
            "file": "tests/esnext.set.union.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#at",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 21
            },
            "line": 2,
            "code": "QUnit.test('String#at', assert => {",
            "file": "tests/esnext.string.at.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String#codePoints",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "QUnit.test('String#codePoints', assert => {",
            "file": "tests/esnext.string.code-points.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "String.cooked",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 25
            },
            "line": 1,
            "code": "QUnit.test('String.cooked', assert => {",
            "file": "tests/esnext.string.cooked.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.asyncDispose",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Symbol.asyncDispose', assert => {",
            "file": "tests/esnext.symbol.async-dispose.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.dispose",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Symbol.dispose', assert => {",
            "file": "tests/esnext.symbol.dispose.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.matcher",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('Symbol.matcher', assert => {",
            "file": "tests/esnext.symbol.matcher.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.metadata",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 27
            },
            "line": 2,
            "code": "QUnit.test('Symbol.metadata', assert => {",
            "file": "tests/esnext.symbol.metadata.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.observable",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Symbol.observable', assert => {",
            "file": "tests/esnext.symbol.observable.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.patternMatch",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "QUnit.test('Symbol.patternMatch', assert => {",
            "file": "tests/esnext.symbol.pattern-match.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Symbol.replaceAll",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 29
            },
            "line": 2,
            "code": "QUnit.test('Symbol.replaceAll', assert => {",
            "file": "tests/esnext.symbol.replace-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.filterOut",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 60
            },
            "line": 3,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.filterOut', assert => {",
            "file": "tests/esnext.typed-array.filter-out.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.filterReject",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 63
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.filterReject', assert => {",
            "file": "tests/esnext.typed-array.filter-reject.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.findLastIndex",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 64
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.findLastIndex', assert => {",
            "file": "tests/esnext.typed-array.find-last-index.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.findLast",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 59
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.findLast', assert => {",
            "file": "tests/esnext.typed-array.find-last.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArray%.fromAsync, ",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 78
            },
            "line": 6,
            "code": "  for (const name in TYPED_ARRAYS) QUnit.test(`%TypedArray%.fromAsync, ${name}`, assert => {",
            "file": "tests/esnext.typed-array.from-async.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.groupBy",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 58
            },
            "line": 5,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.groupBy', assert => {",
            "file": "tests/esnext.typed-array.group-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.toReversed",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 61
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.toReversed', assert => {",
            "file": "tests/esnext.typed-array.to-reversed.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.toSorted",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 59
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.toSorted', assert => {",
            "file": "tests/esnext.typed-array.to-sorted.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.toSpliced",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 60
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.toSpliced', assert => {",
            "file": "tests/esnext.typed-array.to-spliced.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.uniqueBy",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 59
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.uniqueBy', assert => {",
            "file": "tests/esnext.typed-array.unique-by.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArrayPrototype%.with",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 55
            },
            "line": 2,
            "code": "if (DESCRIPTORS) QUnit.test('%TypedArrayPrototype%.with', assert => {",
            "file": "tests/esnext.typed-array.with.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 29
            },
            "line": 1,
            "code": "QUnit.test('WeakMap#deleteAll', assert => {",
            "file": "tests/esnext.weak-map.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#emplace",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 27
            },
            "line": 1,
            "code": "QUnit.test('WeakMap#emplace', assert => {",
            "file": "tests/esnext.weak-map.emplace.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap.from",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('WeakMap.from', assert => {",
            "file": "tests/esnext.weak-map.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap.of",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('WeakMap.of', assert => {",
            "file": "tests/esnext.weak-map.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakMap#upsert",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 26
            },
            "line": 1,
            "code": "QUnit.test('WeakMap#upsert', assert => {",
            "file": "tests/esnext.weak-map.upsert.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#addAll",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 26
            },
            "line": 1,
            "code": "QUnit.test('WeakSet#addAll', assert => {",
            "file": "tests/esnext.weak-set.add-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet#deleteAll",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 29
            },
            "line": 1,
            "code": "QUnit.test('WeakSet#deleteAll', assert => {",
            "file": "tests/esnext.weak-set.delete-all.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet.from",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "QUnit.test('WeakSet.from', assert => {",
            "file": "tests/esnext.weak-set.from.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "WeakSet.of",
            "suites": [],
            "updatePoint": {
                "line": 1,
                "column": 22
            },
            "line": 1,
            "code": "QUnit.test('WeakSet.of', assert => {",
            "file": "tests/esnext.weak-set.of.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "forEach method on iterable DOM collections",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 54
            },
            "line": 2,
            "code": "QUnit.test('forEach method on iterable DOM collections', assert => {",
            "file": "tests/web.dom-collections.for-each.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Iterable DOM collections",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 36
            },
            "line": 3,
            "code": "QUnit.test('Iterable DOM collections', assert => {",
            "file": "tests/web.dom-collections.iterator.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DOMException",
            "suites": [],
            "updatePoint": {
                "line": 130,
                "column": 24
            },
            "line": 130,
            "code": "QUnit.test('DOMException', assert => {",
            "file": "tests/web.dom-exception.constructor.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "setImmediate / clearImmediate",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 41
            },
            "line": 2,
            "code": "QUnit.test('setImmediate / clearImmediate', assert => {",
            "file": "tests/web.immediate.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "queueMicrotask",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 26
            },
            "line": 2,
            "code": "QUnit.test('queueMicrotask', assert => {",
            "file": "tests/web.queue-microtask.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "identity",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 14,
                "column": 22
            },
            "line": 14,
            "code": "  QUnit.test('identity', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "primitives",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 48,
                "column": 24
            },
            "line": 48,
            "code": "  QUnit.test('primitives', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "primitive objects",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 56,
                "column": 31
            },
            "line": 56,
            "code": "  QUnit.test('primitive objects', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Date",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 64,
                "column": 18
            },
            "line": 64,
            "code": "  QUnit.test('Date', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "RegExp",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 75,
                "column": 20
            },
            "line": 75,
            "code": "  QUnit.test('RegExp', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "ArrayBuffer",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 87,
                "column": 64
            },
            "line": 87,
            "code": "    if (typeof Uint8Array == 'function') QUnit.test('ArrayBuffer', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "%TypedArray%",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 96,
                "column": 30
            },
            "line": 96,
            "code": "      QUnit.test('%TypedArray%', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DataView",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 107,
                "column": 62
            },
            "line": 107,
            "code": "      if (typeof DataView != 'undefined') QUnit.test('DataView', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Map",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 120,
                "column": 17
            },
            "line": 120,
            "code": "  QUnit.test('Map', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Set",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 127,
                "column": 17
            },
            "line": 127,
            "code": "  QUnit.test('Set', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Error",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 133,
                "column": 19
            },
            "line": 133,
            "code": "  QUnit.test('Error', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Array",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 168,
                "column": 19
            },
            "line": 168,
            "code": "  QUnit.test('Array', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Object",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 193,
                "column": 20
            },
            "line": 193,
            "code": "  QUnit.test('Object', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMMatrix",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 208,
                "column": 41
            },
            "line": 208,
            "code": "    QUnit.test('Geometry types, DOMMatrix', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMMatrixReadOnly",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 218,
                "column": 49
            },
            "line": 218,
            "code": "    QUnit.test('Geometry types, DOMMatrixReadOnly', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMPoint",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 228,
                "column": 40
            },
            "line": 228,
            "code": "    QUnit.test('Geometry types, DOMPoint', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMPointReadOnly",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 238,
                "column": 48
            },
            "line": 238,
            "code": "    QUnit.test('Geometry types, DOMPointReadOnly', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMQuad",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 248,
                "column": 39
            },
            "line": 248,
            "code": "    QUnit.test('Geometry types, DOMQuad', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMRect",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 258,
                "column": 39
            },
            "line": 258,
            "code": "    QUnit.test('Geometry types, DOMRect', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Geometry types, DOMRectReadOnly",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 268,
                "column": 47
            },
            "line": 268,
            "code": "    QUnit.test('Geometry types, DOMRectReadOnly', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "ImageData",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 279,
                "column": 25
            },
            "line": 279,
            "code": "    QUnit.test('ImageData', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Blob",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 295,
                "column": 56
            },
            "line": 295,
            "code": "  if (fromSource('new Blob([\"test\"])')) QUnit.test('Blob', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "DOMException",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 304,
                "column": 26
            },
            "line": 304,
            "code": "  QUnit.test('DOMException', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "File",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 314,
                "column": 67
            },
            "line": 314,
            "code": "  if (fromSource('new File([\"test\"], \"foo.txt\")')) QUnit.test('File', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "FileList",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 326,
                "column": 107
            },
            "line": 326,
            "code": "  if (fromSource('new File([\"test\"], \"foo.txt\")') && fromSource('new DataTransfer()')) QUnit.test('FileList', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Non-serializable types",
            "suites": [
                "structuredClone"
            ],
            "updatePoint": {
                "line": 338,
                "column": 36
            },
            "line": 338,
            "code": "  QUnit.test('Non-serializable types', assert => {",
            "file": "tests/web.structured-clone.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "setTimeout / clearTimeout",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 37
            },
            "line": 2,
            "code": "QUnit.test('setTimeout / clearTimeout', assert => {",
            "file": "tests/web.timers.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "setInterval / clearInterval",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 39
            },
            "line": 21,
            "code": "QUnit.test('setInterval / clearInterval', assert => {",
            "file": "tests/web.timers.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 27
            },
            "line": 7,
            "code": "QUnit.test('URLSearchParams', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#append",
            "suites": [],
            "updatePoint": {
                "line": 144,
                "column": 34
            },
            "line": 144,
            "code": "QUnit.test('URLSearchParams#append', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#delete",
            "suites": [],
            "updatePoint": {
                "line": 191,
                "column": 34
            },
            "line": 191,
            "code": "QUnit.test('URLSearchParams#delete', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#get",
            "suites": [],
            "updatePoint": {
                "line": 239,
                "column": 31
            },
            "line": 239,
            "code": "QUnit.test('URLSearchParams#get', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#getAll",
            "suites": [],
            "updatePoint": {
                "line": 290,
                "column": 34
            },
            "line": 290,
            "code": "QUnit.test('URLSearchParams#getAll', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#has",
            "suites": [],
            "updatePoint": {
                "line": 317,
                "column": 31
            },
            "line": 317,
            "code": "QUnit.test('URLSearchParams#has', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#set",
            "suites": [],
            "updatePoint": {
                "line": 349,
                "column": 31
            },
            "line": 349,
            "code": "QUnit.test('URLSearchParams#set', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#sort",
            "suites": [],
            "updatePoint": {
                "line": 381,
                "column": 32
            },
            "line": 381,
            "code": "QUnit.test('URLSearchParams#sort', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#toString",
            "suites": [],
            "updatePoint": {
                "line": 455,
                "column": 36
            },
            "line": 455,
            "code": "QUnit.test('URLSearchParams#toString', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#forEach",
            "suites": [],
            "updatePoint": {
                "line": 540,
                "column": 35
            },
            "line": 540,
            "code": "QUnit.test('URLSearchParams#forEach', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#entries",
            "suites": [],
            "updatePoint": {
                "line": 587,
                "column": 35
            },
            "line": 587,
            "code": "QUnit.test('URLSearchParams#entries', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#keys",
            "suites": [],
            "updatePoint": {
                "line": 644,
                "column": 32
            },
            "line": 644,
            "code": "QUnit.test('URLSearchParams#keys', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#values",
            "suites": [],
            "updatePoint": {
                "line": 692,
                "column": 34
            },
            "line": 692,
            "code": "QUnit.test('URLSearchParams#values', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#@@iterator",
            "suites": [],
            "updatePoint": {
                "line": 742,
                "column": 38
            },
            "line": 742,
            "code": "QUnit.test('URLSearchParams#@@iterator', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 797,
                "column": 41
            },
            "line": 797,
            "code": "QUnit.test('URLSearchParams#@@toStringTag', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URLSearchParams with Request",
            "suites": [],
            "updatePoint": {
                "line": 803,
                "column": 42
            },
            "line": 803,
            "code": "  QUnit.test('URLSearchParams with Request', assert => {",
            "file": "tests/web.url-search-params.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL constructor",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 27
            },
            "line": 8,
            "code": "QUnit.test('URL constructor', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#href",
            "suites": [],
            "updatePoint": {
                "line": 50,
                "column": 20
            },
            "line": 50,
            "code": "QUnit.test('URL#href', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#origin",
            "suites": [],
            "updatePoint": {
                "line": 112,
                "column": 22
            },
            "line": 112,
            "code": "QUnit.test('URL#origin', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#protocol",
            "suites": [],
            "updatePoint": {
                "line": 126,
                "column": 24
            },
            "line": 126,
            "code": "QUnit.test('URL#protocol', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#username",
            "suites": [],
            "updatePoint": {
                "line": 158,
                "column": 24
            },
            "line": 158,
            "code": "QUnit.test('URL#username', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#password",
            "suites": [],
            "updatePoint": {
                "line": 181,
                "column": 24
            },
            "line": 181,
            "code": "QUnit.test('URL#password', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#host",
            "suites": [],
            "updatePoint": {
                "line": 209,
                "column": 20
            },
            "line": 209,
            "code": "QUnit.test('URL#host', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#hostname",
            "suites": [],
            "updatePoint": {
                "line": 274,
                "column": 24
            },
            "line": 274,
            "code": "QUnit.test('URL#hostname', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#port",
            "suites": [],
            "updatePoint": {
                "line": 334,
                "column": 20
            },
            "line": 334,
            "code": "QUnit.test('URL#port', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#pathname",
            "suites": [],
            "updatePoint": {
                "line": 369,
                "column": 24
            },
            "line": 369,
            "code": "QUnit.test('URL#pathname', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#search",
            "suites": [],
            "updatePoint": {
                "line": 390,
                "column": 22
            },
            "line": 390,
            "code": "QUnit.test('URL#search', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#searchParams",
            "suites": [],
            "updatePoint": {
                "line": 421,
                "column": 28
            },
            "line": 421,
            "code": "QUnit.test('URL#searchParams', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#hash",
            "suites": [],
            "updatePoint": {
                "line": 448,
                "column": 20
            },
            "line": 448,
            "code": "QUnit.test('URL#hash', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#toJSON",
            "suites": [],
            "updatePoint": {
                "line": 491,
                "column": 22
            },
            "line": 491,
            "code": "QUnit.test('URL#toJSON', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#toString",
            "suites": [],
            "updatePoint": {
                "line": 508,
                "column": 24
            },
            "line": 508,
            "code": "QUnit.test('URL#toString', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL#@@toStringTag",
            "suites": [],
            "updatePoint": {
                "line": 525,
                "column": 29
            },
            "line": 525,
            "code": "QUnit.test('URL#@@toStringTag', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "URL.sham",
            "suites": [],
            "updatePoint": {
                "line": 529,
                "column": 20
            },
            "line": 529,
            "code": "QUnit.test('URL.sham', assert => {",
            "file": "tests/web.url.js",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "zloirock__core-js.svg"
}