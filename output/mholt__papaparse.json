{"repo":"mholt/PapaParse","url":"https://github.com/mholt/PapaParse","branch":"master","configs":[{"package":"papaparse","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"synchronously parsed CSV should be correctly parsed","suites":["PapaParse"],"updatePoint":{"line":22,"column":57,"index":1099},"line":22,"code":"  it('synchronously parsed CSV should be correctly parsed', function () {\n    assertLongSampleParsedCorrectly(Papa.parse(longSampleRawCsv));\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"Pause and resume works (Regression Test for Bug #636)","suites":["PapaParse"],"updatePoint":{"line":25,"column":59,"index":1248},"line":25,"code":"  it('Pause and resume works (Regression Test for Bug #636)', function (done) {\n    this.timeout(30000);\n    var mod200Rows = [[\"Etiam a dolor vitae est vestibulum\", \"84\", \"DEF\"], [\"Etiam a dolor vitae est vestibulum\", \"84\", \"DEF\"], [\"Lorem ipsum dolor sit\", \"42\", \"ABC\"], [\"Etiam a dolor vitae est vestibulum\", \"84\", \"DEF\"], [\"Etiam a dolor vitae est vestibulum\", \"84\"], [\"Lorem ipsum dolor sit\", \"42\", \"ABC\"], [\"Etiam a dolor vitae est vestibulum\", \"84\", \"DEF\"], [\"Etiam a dolor vitae est vestibulum\", \"84\", \"DEF\"], [\"Lorem ipsum dolor sit\", \"42\", \"ABC\"], [\"Lorem ipsum dolor sit\", \"42\"]];\n    var stepped = 0;\n    var dataRows = [];\n    Papa.parse(fs.createReadStream(__dirname + '/verylong-sample.csv'), {\n      step: function (results, parser) {\n        stepped++;\n        if (results) {\n          parser.pause();\n          parser.resume();\n          if (results.data && stepped % 200 === 0) {\n            dataRows.push(results.data);\n          }\n        }\n      },\n      complete: function () {\n        assert.strictEqual(2001, stepped);\n        assert.deepEqual(mod200Rows, dataRows);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"asynchronously parsed CSV should be correctly parsed","suites":["PapaParse"],"updatePoint":{"line":48,"column":58,"index":2377},"line":48,"code":"  it('asynchronously parsed CSV should be correctly parsed', function (done) {\n    Papa.parse(longSampleRawCsv, {\n      complete: function (parsedCsv) {\n        assertLongSampleParsedCorrectly(parsedCsv);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"asynchronously parsed streaming CSV should be correctly parsed","suites":["PapaParse"],"updatePoint":{"line":56,"column":68,"index":2630},"line":56,"code":"  it('asynchronously parsed streaming CSV should be correctly parsed', function (done) {\n    Papa.parse(fs.createReadStream(__dirname + '/long-sample.csv', 'utf8'), {\n      complete: function (parsedCsv) {\n        assertLongSampleParsedCorrectly(parsedCsv);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"reports the correct row number on FieldMismatch errors","suites":["PapaParse"],"updatePoint":{"line":64,"column":60,"index":2918},"line":64,"code":"  it('reports the correct row number on FieldMismatch errors', function (done) {\n    Papa.parse(fs.createReadStream(__dirname + '/verylong-sample.csv'), {\n      header: true,\n      fastMode: true,\n      complete: function (parsedCsv) {\n        assert.deepEqual(parsedCsv.errors, [{\n          \"type\": \"FieldMismatch\",\n          \"code\": \"TooFewFields\",\n          \"message\": \"Too few fields: expected 3 fields but parsed 2\",\n          \"row\": 498\n        }, {\n          \"type\": \"FieldMismatch\",\n          \"code\": \"TooFewFields\",\n          \"message\": \"Too few fields: expected 3 fields but parsed 2\",\n          \"row\": 998\n        }, {\n          \"type\": \"FieldMismatch\",\n          \"code\": \"TooFewFields\",\n          \"message\": \"Too few fields: expected 3 fields but parsed 2\",\n          \"row\": 1498\n        }, {\n          \"type\": \"FieldMismatch\",\n          \"code\": \"TooFewFields\",\n          \"message\": \"Too few fields: expected 3 fields but parsed 2\",\n          \"row\": 1998\n        }]);\n        assert.strictEqual(2000, parsedCsv.data.length);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"piped streaming CSV should be correctly parsed","suites":["PapaParse"],"updatePoint":{"line":95,"column":52,"index":3985},"line":95,"code":"  it('piped streaming CSV should be correctly parsed', function (done) {\n    var data = [];\n    var readStream = fs.createReadStream(__dirname + '/long-sample.csv', 'utf8');\n    var csvStream = readStream.pipe(Papa.parse(Papa.NODE_STREAM_INPUT));\n    csvStream.on('data', function (item) {\n      data.push(item);\n    });\n    csvStream.on('end', function () {\n      assert.deepEqual(data[0], ['Grant', 'Dyer', 'Donec.elementum@orciluctuset.example', '2013-11-23T02:30:31-08:00', '2014-05-31T01:06:56-07:00', 'Magna Ut Associates', 'ljenkins']);\n      assert.deepEqual(data[7], ['Talon', 'Salinas', 'posuere.vulputate.lacus@Donecsollicitudin.example', '2015-01-31T09:19:02-08:00', '2014-12-17T04:59:18-08:00', 'Aliquam Iaculis Incorporate', 'Phasellus@Quisquetincidunt.example']);\n      done();\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"piped streaming CSV should be correctly parsed when header is true","suites":["PapaParse"],"updatePoint":{"line":108,"column":72,"index":4812},"line":108,"code":"  it('piped streaming CSV should be correctly parsed when header is true', function (done) {\n    var data = [];\n    var readStream = fs.createReadStream(__dirname + '/sample-header.csv', 'utf8');\n    var csvStream = readStream.pipe(Papa.parse(Papa.NODE_STREAM_INPUT, {\n      header: true\n    }));\n    csvStream.on('data', function (item) {\n      data.push(item);\n    });\n    csvStream.on('end', function () {\n      assert.deepEqual(data[0], {\n        title: 'test title 01',\n        name: 'test name 01'\n      });\n      assert.deepEqual(data[1], {\n        title: '',\n        name: 'test name 02'\n      });\n      done();\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"should support pausing and resuming on same tick when streaming","suites":["PapaParse"],"updatePoint":{"line":129,"column":69,"index":5443},"line":129,"code":"  it('should support pausing and resuming on same tick when streaming', function (done) {\n    var rows = [];\n    Papa.parse(fs.createReadStream(__dirname + '/long-sample.csv', 'utf8'), {\n      chunk: function (results, parser) {\n        rows = rows.concat(results.data);\n        parser.pause();\n        parser.resume();\n      },\n      error: function (err) {\n        done(new Error(err));\n      },\n      complete: function () {\n        assert.deepEqual(rows[0], ['Grant', 'Dyer', 'Donec.elementum@orciluctuset.example', '2013-11-23T02:30:31-08:00', '2014-05-31T01:06:56-07:00', 'Magna Ut Associates', 'ljenkins']);\n        assert.deepEqual(rows[7], ['Talon', 'Salinas', 'posuere.vulputate.lacus@Donecsollicitudin.example', '2015-01-31T09:19:02-08:00', '2014-12-17T04:59:18-08:00', 'Aliquam Iaculis Incorporate', 'Phasellus@Quisquetincidunt.example']);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"should support pausing and resuming asynchronously when streaming","suites":["PapaParse"],"updatePoint":{"line":147,"column":71,"index":6335},"line":147,"code":"  it('should support pausing and resuming asynchronously when streaming', function (done) {\n    var rows = [];\n    Papa.parse(fs.createReadStream(__dirname + '/long-sample.csv', 'utf8'), {\n      chunk: function (results, parser) {\n        rows = rows.concat(results.data);\n        parser.pause();\n        setTimeout(function () {\n          parser.resume();\n        }, 200);\n      },\n      error: function (err) {\n        done(new Error(err));\n      },\n      complete: function () {\n        assert.deepEqual(rows[0], ['Grant', 'Dyer', 'Donec.elementum@orciluctuset.example', '2013-11-23T02:30:31-08:00', '2014-05-31T01:06:56-07:00', 'Magna Ut Associates', 'ljenkins']);\n        assert.deepEqual(rows[7], ['Talon', 'Salinas', 'posuere.vulputate.lacus@Donecsollicitudin.example', '2015-01-31T09:19:02-08:00', '2014-12-17T04:59:18-08:00', 'Aliquam Iaculis Incorporate', 'Phasellus@Quisquetincidunt.example']);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"handles errors in beforeFirstChunk","suites":["PapaParse"],"updatePoint":{"line":167,"column":40,"index":7248},"line":167,"code":"  it('handles errors in beforeFirstChunk', function (done) {\n    var expectedError = new Error('test');\n    Papa.parse(fs.createReadStream(__dirname + '/long-sample.csv', 'utf8'), {\n      beforeFirstChunk: function () {\n        throw expectedError;\n      },\n      error: function (err) {\n        assert.deepEqual(err, expectedError);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"handles errors in chunk","suites":["PapaParse"],"updatePoint":{"line":179,"column":29,"index":7609},"line":179,"code":"  it('handles errors in chunk', function (done) {\n    var expectedError = new Error('test');\n    Papa.parse(fs.createReadStream(__dirname + '/long-sample.csv', 'utf8'), {\n      chunk: function () {\n        throw expectedError;\n      },\n      error: function (err) {\n        assert.deepEqual(err, expectedError);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"handles errors in step","suites":["PapaParse"],"updatePoint":{"line":191,"column":28,"index":7958},"line":191,"code":"  it('handles errors in step', function (done) {\n    var expectedError = new Error('test');\n    Papa.parse(fs.createReadStream(__dirname + '/long-sample.csv', 'utf8'), {\n      step: function () {\n        throw expectedError;\n      },\n      error: function (err) {\n        assert.deepEqual(err, expectedError);\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"handles utf-8 BOM encoded files","suites":["PapaParse"],"updatePoint":{"line":203,"column":37,"index":8315},"line":203,"code":"  it('handles utf-8 BOM encoded files', function (done) {\n    Papa.parse(utf8BomSampleRawCsv, {\n      header: true,\n      complete: function (parsedCsv) {\n        assert.deepEqual(parsedCsv.data[0], {\n          A: 'X',\n          B: 'Y',\n          C: 'Z'\n        });\n        done();\n      }\n    });\n  });","file":"node-tests.js","skipped":false,"dir":"tests"},{"name":"When parsing synchronously inside a web-worker not owned by PapaParse we should not invoke postMessage","suites":["Custom Tests"],"updatePoint":{"line":2963,"column":108,"index":74773},"line":2963,"code":"  it(\"When parsing synchronously inside a web-worker not owned by PapaParse we should not invoke postMessage\", async () => {\n    // Arrange\n    const papaParseScriptPath = new URL(\"../papaparse.js\", window.document.baseURI).href;\n\n    // Define our custom web-worker that loads PapaParse and executes a synchronous parse\n    const blob = new Blob([`\n\t\t\t\timportScripts('${papaParseScriptPath}');\n\t\t\t\t\n\t\t\t\tself.addEventListener(\"message\", function(event) {\n\t\t\t\t\tif (event.data === \"ExecuteParse\") {\n\t\t\t\t\t\t// Perform our synchronous parse, as requested\n\t\t\t\t\t\tconst results = Papa.parse('x\\\\ny\\\\n');\n\t\t\t\t\t\tpostMessage({type: \"ParseExecutedSuccessfully\", results});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Otherwise, send whatever we received back. We shouldn't be hitting this (!) If we're reached\n\t\t\t\t\t\t// this it means PapaParse thinks it is running inside a web-worker that it owns\n\t\t\t\t\t\tpostMessage(event.data);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t`], {\n      type: 'text/javascript'\n    });\n    const blobURL = window.URL.createObjectURL(blob);\n    const webWorker = new Worker(blobURL);\n    const receiveMessagePromise = new Promise((resolve, reject) => {\n      webWorker.addEventListener(\"message\", event => {\n        if (event.data.type === \"ParseExecutedSuccessfully\") {\n          resolve(event.data);\n        } else {\n          const error = new Error(`Received unexpected message: ${JSON.stringify(event.data, null, 2)}`);\n          error.data = event.data;\n          reject(error);\n        }\n      });\n    });\n\n    // Act\n    webWorker.postMessage(\"ExecuteParse\");\n    const webWorkerMessage = await receiveMessagePromise;\n\n    // Assert\n    assert.equal(\"ParseExecutedSuccessfully\", webWorkerMessage.type);\n    assert.equal(3, webWorkerMessage.results.data.length);\n  });","file":"test-cases.js","skipped":false,"dir":"tests"}]}