{"repo":"substack/minimist","url":"https://github.com/substack/minimist","branch":"master","configs":[{"package":"minimist","lang":"js","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"flag boolean true (default all --args to boolean)","suites":[],"updatePoint":{"line":5,"column":55,"index":114},"line":5,"code":"test('flag boolean true (default all --args to boolean)', function (t) {\n  var argv = parse(['moo', '--honk', 'cow'], {\n    boolean: true\n  });\n  t.deepEqual(argv, {\n    honk: true,\n    _: ['moo', 'cow']\n  });\n  t.deepEqual(typeof argv.honk, 'boolean');\n  t.end();\n});","file":"all_bool.js","skipped":false,"dir":"test"},{"name":"flag boolean true only affects double hyphen arguments without equals signs","suites":[],"updatePoint":{"line":16,"column":81,"index":409},"line":16,"code":"test('flag boolean true only affects double hyphen arguments without equals signs', function (t) {\n  var argv = parse(['moo', '--honk', 'cow', '-p', '55', '--tacos=good'], {\n    boolean: true\n  });\n  t.deepEqual(argv, {\n    honk: true,\n    tacos: 'good',\n    p: 55,\n    _: ['moo', 'cow']\n  });\n  t.deepEqual(typeof argv.honk, 'boolean');\n  t.end();\n});","file":"all_bool.js","skipped":false,"dir":"test"},{"name":"flag boolean default false","suites":[],"updatePoint":{"line":5,"column":32,"index":91},"line":5,"code":"test('flag boolean default false', function (t) {\n  var argv = parse(['moo'], {\n    boolean: ['t', 'verbose'],\n    default: {\n      verbose: false,\n      t: false\n    }\n  });\n  t.deepEqual(argv, {\n    verbose: false,\n    t: false,\n    _: ['moo']\n  });\n  t.deepEqual(typeof argv.verbose, 'boolean');\n  t.deepEqual(typeof argv.t, 'boolean');\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean groups","suites":[],"updatePoint":{"line":22,"column":20,"index":434},"line":22,"code":"test('boolean groups', function (t) {\n  var argv = parse(['-x', '-z', 'one', 'two', 'three'], {\n    boolean: ['x', 'y', 'z']\n  });\n  t.deepEqual(argv, {\n    x: true,\n    y: false,\n    z: true,\n    _: ['one', 'two', 'three']\n  });\n  t.deepEqual(typeof argv.x, 'boolean');\n  t.deepEqual(typeof argv.y, 'boolean');\n  t.deepEqual(typeof argv.z, 'boolean');\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean and alias with chainable api","suites":[],"updatePoint":{"line":37,"column":42,"index":824},"line":37,"code":"test('boolean and alias with chainable api', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var opts = {\n    herp: {\n      alias: 'h',\n      boolean: true\n    }\n  };\n  var aliasedArgv = parse(aliased, {\n    boolean: 'herp',\n    alias: {\n      h: 'herp'\n    }\n  });\n  var propertyArgv = parse(regular, {\n    boolean: 'herp',\n    alias: {\n      h: 'herp'\n    }\n  });\n  var expected = {\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean and alias with options hash","suites":[],"updatePoint":{"line":67,"column":41,"index":1379},"line":67,"code":"test('boolean and alias with options hash', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var opts = {\n    alias: {\n      'h': 'herp'\n    },\n    boolean: 'herp'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var expected = {\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean and alias array with options hash","suites":[],"updatePoint":{"line":87,"column":47,"index":1828},"line":87,"code":"test('boolean and alias array with options hash', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var alt = ['--harp', 'derp'];\n  var opts = {\n    alias: {\n      'h': ['herp', 'harp']\n    },\n    boolean: 'h'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var altPropertyArgv = parse(alt, opts);\n  var expected = {\n    harp: true,\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.same(altPropertyArgv, expected);\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean and alias using explicit true","suites":[],"updatePoint":{"line":111,"column":43,"index":2407},"line":111,"code":"test('boolean and alias using explicit true', function (t) {\n  var aliased = ['-h', 'true'];\n  var regular = ['--herp', 'true'];\n  var opts = {\n    alias: {\n      h: 'herp'\n    },\n    boolean: 'h'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var expected = {\n    herp: true,\n    h: true,\n    '_': []\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n}); // regression, see https://github.com/substack/node-optimist/issues/71","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean and --x=true","suites":[],"updatePoint":{"line":132,"column":26,"index":2896},"line":132,"code":"test('boolean and --x=true', function (t) {\n  var parsed = parse(['--boool', '--other=true'], {\n    boolean: 'boool'\n  });\n  t.same(parsed.boool, true);\n  t.same(parsed.other, 'true');\n  parsed = parse(['--boool', '--other=false'], {\n    boolean: 'boool'\n  });\n  t.same(parsed.boool, true);\n  t.same(parsed.other, 'false');\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean --boool=true","suites":[],"updatePoint":{"line":145,"column":26,"index":3235},"line":145,"code":"test('boolean --boool=true', function (t) {\n  var parsed = parse(['--boool=true'], {\n    default: {\n      boool: false\n    },\n    boolean: ['boool']\n  });\n  t.same(parsed.boool, true);\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean --boool=false","suites":[],"updatePoint":{"line":155,"column":27,"index":3436},"line":155,"code":"test('boolean --boool=false', function (t) {\n  var parsed = parse(['--boool=false'], {\n    default: {\n      boool: true\n    },\n    boolean: ['boool']\n  });\n  t.same(parsed.boool, false);\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"boolean using something similar to true","suites":[],"updatePoint":{"line":165,"column":45,"index":3656},"line":165,"code":"test('boolean using something similar to true', function (t) {\n  var opts = {\n    boolean: 'h'\n  };\n  var result = parse(['-h', 'true.txt'], opts);\n  var expected = {\n    h: true,\n    '_': ['true.txt']\n  };\n  t.same(result, expected);\n  t.end();\n});","file":"bool.js","skipped":false,"dir":"test"},{"name":"-","suites":[],"updatePoint":{"line":5,"column":7,"index":66},"line":5,"code":"test('-', function (t) {\n  t.plan(5);\n  t.deepEqual(parse(['-n', '-']), {\n    n: '-',\n    _: []\n  });\n  t.deepEqual(parse(['-']), {\n    _: ['-']\n  });\n  t.deepEqual(parse(['-f-']), {\n    f: '-',\n    _: []\n  });\n  t.deepEqual(parse(['-b', '-'], {\n    boolean: 'b'\n  }), {\n    b: true,\n    _: ['-']\n  });\n  t.deepEqual(parse(['-s', '-'], {\n    string: 's'\n  }), {\n    s: '-',\n    _: []\n  });\n});","file":"dash.js","skipped":false,"dir":"test"},{"name":"-a -- b","suites":[],"updatePoint":{"line":31,"column":13,"index":466},"line":31,"code":"test('-a -- b', function (t) {\n  t.plan(3);\n  t.deepEqual(parse(['-a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n  t.deepEqual(parse(['--a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n  t.deepEqual(parse(['--a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n});","file":"dash.js","skipped":false,"dir":"test"},{"name":"move arguments after the -- into their own `--` array","suites":[],"updatePoint":{"line":46,"column":59,"index":784},"line":46,"code":"test('move arguments after the -- into their own `--` array', function (t) {\n  t.plan(1);\n  t.deepEqual(parse(['--name', 'John', 'before', '--', 'after'], {\n    '--': true\n  }), {\n    name: 'John',\n    _: ['before'],\n    '--': ['after']\n  });\n});","file":"dash.js","skipped":false,"dir":"test"},{"name":"boolean default true","suites":[],"updatePoint":{"line":5,"column":26,"index":85},"line":5,"code":"test('boolean default true', function (t) {\n  var argv = parse([], {\n    boolean: 'sometrue',\n    default: {\n      sometrue: true\n    }\n  });\n  t.equal(argv.sometrue, true);\n  t.end();\n});","file":"default_bool.js","skipped":false,"dir":"test"},{"name":"boolean default false","suites":[],"updatePoint":{"line":15,"column":27,"index":275},"line":15,"code":"test('boolean default false', function (t) {\n  var argv = parse([], {\n    boolean: 'somefalse',\n    default: {\n      somefalse: false\n    }\n  });\n  t.equal(argv.somefalse, false);\n  t.end();\n});","file":"default_bool.js","skipped":false,"dir":"test"},{"name":"boolean default to null","suites":[],"updatePoint":{"line":25,"column":29,"index":472},"line":25,"code":"test('boolean default to null', function (t) {\n  var argv = parse([], {\n    boolean: 'maybe',\n    default: {\n      maybe: null\n    }\n  });\n  t.equal(argv.maybe, null);\n  var argv = parse(['--maybe'], {\n    boolean: 'maybe',\n    default: {\n      maybe: null\n    }\n  });\n  t.equal(argv.maybe, true);\n  t.end();\n});","file":"default_bool.js","skipped":false,"dir":"test"},{"name":"dotted alias","suites":[],"updatePoint":{"line":5,"column":18,"index":77},"line":5,"code":"test('dotted alias', function (t) {\n  var argv = parse(['--a.b', '22'], {\n    default: {\n      'a.b': 11\n    },\n    alias: {\n      'a.b': 'aa.bb'\n    }\n  });\n  t.equal(argv.a.b, 22);\n  t.equal(argv.aa.bb, 22);\n  t.end();\n});","file":"dotted.js","skipped":false,"dir":"test"},{"name":"dotted default","suites":[],"updatePoint":{"line":18,"column":20,"index":304},"line":18,"code":"test('dotted default', function (t) {\n  var argv = parse('', {\n    default: {\n      'a.b': 11\n    },\n    alias: {\n      'a.b': 'aa.bb'\n    }\n  });\n  t.equal(argv.a.b, 11);\n  t.equal(argv.aa.bb, 11);\n  t.end();\n});","file":"dotted.js","skipped":false,"dir":"test"},{"name":"dotted default with no alias","suites":[],"updatePoint":{"line":31,"column":34,"index":532},"line":31,"code":"test('dotted default with no alias', function (t) {\n  var argv = parse('', {\n    default: {\n      'a.b': 11\n    }\n  });\n  t.equal(argv.a.b, 11);\n  t.end();\n});","file":"dotted.js","skipped":false,"dir":"test"},{"name":"short -k=v","suites":[],"updatePoint":{"line":5,"column":16,"index":75},"line":5,"code":"test('short -k=v', function (t) {\n  t.plan(1);\n  var argv = parse(['-b=123']);\n  t.deepEqual(argv, {\n    b: 123,\n    _: []\n  });\n});","file":"kv_short.js","skipped":false,"dir":"test"},{"name":"multi short -k=v","suites":[],"updatePoint":{"line":13,"column":22,"index":214},"line":13,"code":"test('multi short -k=v', function (t) {\n  t.plan(1);\n  var argv = parse(['-a=whatever', '-b=robots']);\n  t.deepEqual(argv, {\n    a: 'whatever',\n    b: 'robots',\n    _: []\n  });\n});","file":"kv_short.js","skipped":false,"dir":"test"},{"name":"long opts","suites":[],"updatePoint":{"line":5,"column":15,"index":74},"line":5,"code":"test('long opts', function (t) {\n  t.deepEqual(parse(['--bool']), {\n    bool: true,\n    _: []\n  }, 'long boolean');\n  t.deepEqual(parse(['--pow', 'xixxle']), {\n    pow: 'xixxle',\n    _: []\n  }, 'long capture sp');\n  t.deepEqual(parse(['--pow=xixxle']), {\n    pow: 'xixxle',\n    _: []\n  }, 'long capture eq');\n  t.deepEqual(parse(['--host', 'localhost', '--port', '555']), {\n    host: 'localhost',\n    port: 555,\n    _: []\n  }, 'long captures sp');\n  t.deepEqual(parse(['--host=localhost', '--port=555']), {\n    host: 'localhost',\n    port: 555,\n    _: []\n  }, 'long captures eq');\n  t.end();\n});","file":"long.js","skipped":false,"dir":"test"},{"name":"nums","suites":[],"updatePoint":{"line":5,"column":10,"index":69},"line":5,"code":"test('nums', function (t) {\n  var argv = parse(['-x', '1234', '-y', '5.67', '-z', '1e7', '-w', '10f', '--hex', '0xdeadbeef', '789']);\n  t.deepEqual(argv, {\n    x: 1234,\n    y: 5.67,\n    z: 1e7,\n    w: '10f',\n    hex: 0xdeadbeef,\n    _: [789]\n  });\n  t.deepEqual(typeof argv.x, 'number');\n  t.deepEqual(typeof argv.y, 'number');\n  t.deepEqual(typeof argv.z, 'number');\n  t.deepEqual(typeof argv.w, 'string');\n  t.deepEqual(typeof argv.hex, 'number');\n  t.deepEqual(typeof argv._[0], 'number');\n  t.end();\n});","file":"num.js","skipped":false,"dir":"test"},{"name":"already a number","suites":[],"updatePoint":{"line":23,"column":22,"index":589},"line":23,"code":"test('already a number', function (t) {\n  var argv = parse(['-x', 1234, 789]);\n  t.deepEqual(argv, {\n    x: 1234,\n    _: [789]\n  });\n  t.deepEqual(typeof argv.x, 'number');\n  t.deepEqual(typeof argv._[0], 'number');\n  t.end();\n});","file":"num.js","skipped":false,"dir":"test"},{"name":"parse with modifier functions","suites":[],"updatePoint":{"line":5,"column":35,"index":94},"line":5,"code":"test('parse with modifier functions', function (t) {\n  t.plan(1);\n  var argv = parse(['-b', '123'], {\n    boolean: 'b'\n  });\n  t.deepEqual(argv, {\n    b: true,\n    _: [123]\n  });\n});","file":"parse_modified.js","skipped":false,"dir":"test"},{"name":"parse args","suites":[],"updatePoint":{"line":5,"column":16,"index":75},"line":5,"code":"test('parse args', function (t) {\n  t.deepEqual(parse(['--no-moo']), {\n    moo: false,\n    _: []\n  }, 'no');\n  t.deepEqual(parse(['-v', 'a', '-v', 'b', '-v', 'c']), {\n    v: ['a', 'b', 'c'],\n    _: []\n  }, 'multi');\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"comprehensive","suites":[],"updatePoint":{"line":16,"column":19,"index":309},"line":16,"code":"test('comprehensive', function (t) {\n  t.deepEqual(parse(['--name=meowmers', 'bare', '-cats', 'woo', '-h', 'awesome', '--multi=quux', '--key', 'value', '-b', '--bool', '--no-meep', '--multi=baz', '--', '--not-a-flag', 'eek']), {\n    c: true,\n    a: true,\n    t: true,\n    s: 'woo',\n    h: 'awesome',\n    b: true,\n    bool: true,\n    key: 'value',\n    multi: ['quux', 'baz'],\n    meep: false,\n    name: 'meowmers',\n    _: ['bare', '--not-a-flag', 'eek']\n  });\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"flag boolean","suites":[],"updatePoint":{"line":33,"column":18,"index":782},"line":33,"code":"test('flag boolean', function (t) {\n  var argv = parse(['-t', 'moo'], {\n    boolean: 't'\n  });\n  t.deepEqual(argv, {\n    t: true,\n    _: ['moo']\n  });\n  t.deepEqual(typeof argv.t, 'boolean');\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"flag boolean value","suites":[],"updatePoint":{"line":44,"column":24,"index":995},"line":44,"code":"test('flag boolean value', function (t) {\n  var argv = parse(['--verbose', 'false', 'moo', '-t', 'true'], {\n    boolean: ['t', 'verbose'],\n    default: {\n      verbose: true\n    }\n  });\n  t.deepEqual(argv, {\n    verbose: false,\n    t: true,\n    _: ['moo']\n  });\n  t.deepEqual(typeof argv.verbose, 'boolean');\n  t.deepEqual(typeof argv.t, 'boolean');\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"newlines in params","suites":[],"updatePoint":{"line":60,"column":24,"index":1360},"line":60,"code":"test('newlines in params', function (t) {\n  var args = parse(['-s', \"X\\nX\"]);\n  t.deepEqual(args, {\n    _: [],\n    s: \"X\\nX\"\n  }); // reproduce in bash:\n  // VALUE=\"new\n  // line\"\n  // node program.js --s=\"$VALUE\"\n\n  args = parse([\"--s=X\\nX\"]);\n  t.deepEqual(args, {\n    _: [],\n    s: \"X\\nX\"\n  });\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"strings","suites":[],"updatePoint":{"line":77,"column":13,"index":1662},"line":77,"code":"test('strings', function (t) {\n  var s = parse(['-s', '0001234'], {\n    string: 's'\n  }).s;\n  t.equal(s, '0001234');\n  t.equal(typeof s, 'string');\n  var x = parse(['-x', '56'], {\n    string: 'x'\n  }).x;\n  t.equal(x, '56');\n  t.equal(typeof x, 'string');\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"stringArgs","suites":[],"updatePoint":{"line":90,"column":16,"index":1935},"line":90,"code":"test('stringArgs', function (t) {\n  var s = parse(['  ', '  '], {\n    string: '_'\n  })._;\n\n  t.same(s.length, 2);\n  t.same(typeof s[0], 'string');\n  t.same(s[0], '  ');\n  t.same(typeof s[1], 'string');\n  t.same(s[1], '  ');\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"empty strings","suites":[],"updatePoint":{"line":102,"column":19,"index":2177},"line":102,"code":"test('empty strings', function (t) {\n  var s = parse(['-s'], {\n    string: 's'\n  }).s;\n  t.equal(s, '');\n  t.equal(typeof s, 'string');\n  var str = parse(['--str'], {\n    string: 'str'\n  }).str;\n  t.equal(str, '');\n  t.equal(typeof str, 'string');\n  var letters = parse(['-art'], {\n    string: ['a', 't']\n  });\n  t.equal(letters.a, '');\n  t.equal(letters.r, true);\n  t.equal(letters.t, '');\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"string and alias","suites":[],"updatePoint":{"line":121,"column":22,"index":2586},"line":121,"code":"test('string and alias', function (t) {\n  var x = parse(['--str', '000123'], {\n    string: 's',\n    alias: {\n      s: 'str'\n    }\n  });\n  t.equal(x.str, '000123');\n  t.equal(typeof x.str, 'string');\n  t.equal(x.s, '000123');\n  t.equal(typeof x.s, 'string');\n  var y = parse(['-s', '000123'], {\n    string: 'str',\n    alias: {\n      str: 's'\n    }\n  });\n  t.equal(y.str, '000123');\n  t.equal(typeof y.str, 'string');\n  t.equal(y.s, '000123');\n  t.equal(typeof y.s, 'string');\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"slashBreak","suites":[],"updatePoint":{"line":144,"column":16,"index":3070},"line":144,"code":"test('slashBreak', function (t) {\n  t.same(parse(['-I/foo/bar/baz']), {\n    I: '/foo/bar/baz',\n    _: []\n  });\n  t.same(parse(['-xyz/foo/bar/baz']), {\n    x: true,\n    y: true,\n    z: '/foo/bar/baz',\n    _: []\n  });\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"alias","suites":[],"updatePoint":{"line":157,"column":11,"index":3296},"line":157,"code":"test('alias', function (t) {\n  var argv = parse(['-f', '11', '--zoom', '55'], {\n    alias: {\n      z: 'zoom'\n    }\n  });\n  t.equal(argv.zoom, 55);\n  t.equal(argv.z, argv.zoom);\n  t.equal(argv.f, 11);\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"multiAlias","suites":[],"updatePoint":{"line":168,"column":16,"index":3516},"line":168,"code":"test('multiAlias', function (t) {\n  var argv = parse(['-f', '11', '--zoom', '55'], {\n    alias: {\n      z: ['zm', 'zoom']\n    }\n  });\n  t.equal(argv.zoom, 55);\n  t.equal(argv.z, argv.zoom);\n  t.equal(argv.z, argv.zm);\n  t.equal(argv.f, 11);\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"nested dotted objects","suites":[],"updatePoint":{"line":180,"column":27,"index":3783},"line":180,"code":"test('nested dotted objects', function (t) {\n  var argv = parse(['--foo.bar', '3', '--foo.baz', '4', '--foo.quux.quibble', '5', '--foo.quux.o_O', '--beep.boop']);\n  t.same(argv.foo, {\n    bar: 3,\n    baz: 4,\n    quux: {\n      quibble: 5,\n      o_O: true\n    }\n  });\n  t.same(argv.beep, {\n    boop: true\n  });\n  t.end();\n});","file":"parse.js","skipped":false,"dir":"test"},{"name":"proto pollution","suites":[],"updatePoint":{"line":5,"column":21,"index":80},"line":5,"code":"test('proto pollution', function (t) {\n  var argv = parse(['--__proto__.x', '123']);\n  t.equal({}.x, undefined);\n  t.equal(argv.__proto__.x, undefined);\n  t.equal(argv.x, undefined);\n  t.end();\n});","file":"proto.js","skipped":false,"dir":"test"},{"name":"proto pollution (array)","suites":[],"updatePoint":{"line":12,"column":29,"index":286},"line":12,"code":"test('proto pollution (array)', function (t) {\n  var argv = parse(['--x', '4', '--x', '5', '--x.__proto__.z', '789']);\n  t.equal({}.z, undefined);\n  t.deepEqual(argv.x, [4, 5]);\n  t.equal(argv.x.z, undefined);\n  t.equal(argv.x.__proto__.z, undefined);\n  t.end();\n});","file":"proto.js","skipped":false,"dir":"test"},{"name":"proto pollution (number)","suites":[],"updatePoint":{"line":20,"column":30,"index":554},"line":20,"code":"test('proto pollution (number)', function (t) {\n  var argv = parse(['--x', '5', '--x.__proto__.z', '100']);\n  t.equal({}.z, undefined);\n  t.equal(4 .z, undefined);\n  t.equal(argv.x, 5);\n  t.equal(argv.x.z, undefined);\n  t.end();\n});","file":"proto.js","skipped":false,"dir":"test"},{"name":"proto pollution (string)","suites":[],"updatePoint":{"line":28,"column":30,"index":787},"line":28,"code":"test('proto pollution (string)', function (t) {\n  var argv = parse(['--x', 'abc', '--x.__proto__.z', 'def']);\n  t.equal({}.z, undefined);\n  t.equal('...'.z, undefined);\n  t.equal(argv.x, 'abc');\n  t.equal(argv.x.z, undefined);\n  t.end();\n});","file":"proto.js","skipped":false,"dir":"test"},{"name":"proto pollution (constructor)","suites":[],"updatePoint":{"line":36,"column":35,"index":1034},"line":36,"code":"test('proto pollution (constructor)', function (t) {\n  var argv = parse(['--constructor.prototype.y', '123']);\n  t.equal({}.y, undefined);\n  t.equal(argv.y, undefined);\n  t.end();\n});","file":"proto.js","skipped":false,"dir":"test"},{"name":"numeric short args","suites":[],"updatePoint":{"line":5,"column":24,"index":83},"line":5,"code":"test('numeric short args', function (t) {\n  t.plan(2);\n  t.deepEqual(parse(['-n123']), {\n    n: 123,\n    _: []\n  });\n  t.deepEqual(parse(['-123', '456']), {\n    1: true,\n    2: true,\n    3: 456,\n    _: []\n  });\n});","file":"short.js","skipped":false,"dir":"test"},{"name":"short","suites":[],"updatePoint":{"line":18,"column":11,"index":285},"line":18,"code":"test('short', function (t) {\n  t.deepEqual(parse(['-b']), {\n    b: true,\n    _: []\n  }, 'short boolean');\n  t.deepEqual(parse(['foo', 'bar', 'baz']), {\n    _: ['foo', 'bar', 'baz']\n  }, 'bare');\n  t.deepEqual(parse(['-cats']), {\n    c: true,\n    a: true,\n    t: true,\n    s: true,\n    _: []\n  }, 'group');\n  t.deepEqual(parse(['-cats', 'meow']), {\n    c: true,\n    a: true,\n    t: true,\n    s: 'meow',\n    _: []\n  }, 'short group next');\n  t.deepEqual(parse(['-h', 'localhost']), {\n    h: 'localhost',\n    _: []\n  }, 'short capture');\n  t.deepEqual(parse(['-h', 'localhost', '-p', '555']), {\n    h: 'localhost',\n    p: 555,\n    _: []\n  }, 'short captures');\n  t.end();\n});","file":"short.js","skipped":false,"dir":"test"},{"name":"mixed short bool and capture","suites":[],"updatePoint":{"line":51,"column":34,"index":981},"line":51,"code":"test('mixed short bool and capture', function (t) {\n  t.same(parse(['-h', 'localhost', '-fp', '555', 'script.js']), {\n    f: true,\n    p: 555,\n    h: 'localhost',\n    _: ['script.js']\n  });\n  t.end();\n});","file":"short.js","skipped":false,"dir":"test"},{"name":"short and long","suites":[],"updatePoint":{"line":60,"column":20,"index":1172},"line":60,"code":"test('short and long', function (t) {\n  t.deepEqual(parse(['-h', 'localhost', '-fp', '555', 'script.js']), {\n    f: true,\n    p: 555,\n    h: 'localhost',\n    _: ['script.js']\n  });\n  t.end();\n});","file":"short.js","skipped":false,"dir":"test"},{"name":"stops parsing on the first non-option when stopEarly is set","suites":[],"updatePoint":{"line":5,"column":65,"index":124},"line":5,"code":"test('stops parsing on the first non-option when stopEarly is set', function (t) {\n  var argv = parse(['--aaa', 'bbb', 'ccc', '--ddd'], {\n    stopEarly: true\n  });\n  t.deepEqual(argv, {\n    aaa: 'bbb',\n    _: ['ccc', '--ddd']\n  });\n  t.end();\n});","file":"stop_early.js","skipped":false,"dir":"test"},{"name":"boolean and alias is not unknown","suites":[],"updatePoint":{"line":5,"column":38,"index":97},"line":5,"code":"test('boolean and alias is not unknown', function (t) {\n  var unknown = [];\n\n  function unknownFn(arg) {\n    unknown.push(arg);\n    return false;\n  }\n\n  var aliased = ['-h', 'true', '--derp', 'true'];\n  var regular = ['--herp', 'true', '-d', 'true'];\n  var opts = {\n    alias: {\n      h: 'herp'\n    },\n    boolean: 'h',\n    unknown: unknownFn\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  t.same(unknown, ['--derp', '-d']);\n  t.end();\n});","file":"unknown.js","skipped":false,"dir":"test"},{"name":"flag boolean true any double hyphen argument is not unknown","suites":[],"updatePoint":{"line":27,"column":65,"index":609},"line":27,"code":"test('flag boolean true any double hyphen argument is not unknown', function (t) {\n  var unknown = [];\n\n  function unknownFn(arg) {\n    unknown.push(arg);\n    return false;\n  }\n\n  var argv = parse(['--honk', '--tacos=good', 'cow', '-p', '55'], {\n    boolean: true,\n    unknown: unknownFn\n  });\n  t.same(unknown, ['--tacos=good', 'cow', '-p']);\n  t.same(argv, {\n    honk: true,\n    _: []\n  });\n  t.end();\n});","file":"unknown.js","skipped":false,"dir":"test"},{"name":"string and alias is not unknown","suites":[],"updatePoint":{"line":46,"column":37,"index":989},"line":46,"code":"test('string and alias is not unknown', function (t) {\n  var unknown = [];\n\n  function unknownFn(arg) {\n    unknown.push(arg);\n    return false;\n  }\n\n  var aliased = ['-h', 'hello', '--derp', 'goodbye'];\n  var regular = ['--herp', 'hello', '-d', 'moon'];\n  var opts = {\n    alias: {\n      h: 'herp'\n    },\n    string: 'h',\n    unknown: unknownFn\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  t.same(unknown, ['--derp', '-d']);\n  t.end();\n});","file":"unknown.js","skipped":false,"dir":"test"},{"name":"default and alias is not unknown","suites":[],"updatePoint":{"line":68,"column":38,"index":1478},"line":68,"code":"test('default and alias is not unknown', function (t) {\n  var unknown = [];\n\n  function unknownFn(arg) {\n    unknown.push(arg);\n    return false;\n  }\n\n  var aliased = ['-h', 'hello'];\n  var regular = ['--herp', 'hello'];\n  var opts = {\n    default: {\n      'h': 'bar'\n    },\n    alias: {\n      'h': 'herp'\n    },\n    unknown: unknownFn\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  t.same(unknown, []);\n  t.end();\n  unknownFn(); // exercise fn for 100% coverage\n});","file":"unknown.js","skipped":false,"dir":"test"},{"name":"value following -- is not unknown","suites":[],"updatePoint":{"line":93,"column":39,"index":1991},"line":93,"code":"test('value following -- is not unknown', function (t) {\n  var unknown = [];\n\n  function unknownFn(arg) {\n    unknown.push(arg);\n    return false;\n  }\n\n  var aliased = ['--bad', '--', 'good', 'arg'];\n  var opts = {\n    '--': true,\n    unknown: unknownFn\n  };\n  var argv = parse(aliased, opts);\n  t.same(unknown, ['--bad']);\n  t.same(argv, {\n    '--': ['good', 'arg'],\n    '_': []\n  });\n  t.end();\n});","file":"unknown.js","skipped":false,"dir":"test"},{"name":"whitespace should be whitespace","suites":[],"updatePoint":{"line":5,"column":37,"index":96},"line":5,"code":"test('whitespace should be whitespace', function (t) {\n  t.plan(1);\n  var x = parse(['-x', '\\t']).x;\n  t.equal(x, '\\t');\n});","file":"whitespace.js","skipped":false,"dir":"test"}]}