{"repo":"yagop/node-telegram-bot-api","url":"https://github.com/yagop/node-telegram-bot-api","branch":"master","configs":[{"package":"node-telegram-bot-api","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"is loaded from src/ on Node.js v6+ and above","suites":["module.exports"],"updatePoint":{"line":76,"column":50,"index":2201},"line":76,"code":"  it('is loaded from src/ on Node.js v6+ and above', function test() {\n    if (nodeVersion <= 5) this.skip(); // skip on Node.js v5 and below\n\n    assert.strictEqual(TelegramBot, require('../src/telegram'));\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is loaded from lib/ on Node.js v5 and below","suites":["module.exports"],"updatePoint":{"line":81,"column":49,"index":2414},"line":81,"code":"  it('is loaded from lib/ on Node.js v5 and below', function test() {\n    if (nodeVersion > 5) this.skip(); // skip on newer versions\n\n    assert.strictEqual(TelegramBot, require('../lib/telegram'));\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"automatically starts polling","suites":["TelegramBot"],"updatePoint":{"line":131,"column":34,"index":3856},"line":131,"code":"  it('automatically starts polling', function test() {\n    assert.strictEqual(botPolling.isPolling(), true);\n    return utils.isPollingMockServer(pollingPort2);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"automatically opens webhook","suites":["TelegramBot"],"updatePoint":{"line":135,"column":33,"index":4022},"line":135,"code":"  it('automatically opens webhook', function test() {\n    assert.strictEqual(botWebHook.hasOpenWebHook(), true);\n    return utils.hasOpenWebHook(webHookPort2);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"does not automatically poll if \"autoStart\" is false","suites":["TelegramBot"],"updatePoint":{"line":139,"column":57,"index":4212},"line":139,"code":"  it('does not automatically poll if \"autoStart\" is false', function test() {\n    assert.strictEqual(testbot.isPolling(), false);\n    return utils.isPollingMockServer(pollingPort, true);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"does not automatically open webhook if \"autoOpen\" is false","suites":["TelegramBot"],"updatePoint":{"line":143,"column":64,"index":4412},"line":143,"code":"  it('does not automatically open webhook if \"autoOpen\" is false', function test() {\n    assert.strictEqual(testbot.hasOpenWebHook(), false);\n    return utils.hasOpenWebHook(webHookPort, true);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"correctly deletes the webhook if polling","suites":["TelegramBot"],"updatePoint":{"line":147,"column":46,"index":4594},"line":147,"code":"  it('correctly deletes the webhook if polling', function test() {\n    const myBot = new TelegramBot(TOKEN, {\n      polling: {\n        autoStart: false,\n        params: {\n          timeout: 0\n        }\n      }\n    });\n    utils.handleRatelimit(myBot, 'setWebHook', this);\n    myBot.on('polling_error', error => {\n      assert.ifError(error);\n    });\n    return myBot.setWebHook(ip, {}).then(() => {\n      return myBot.startPolling();\n    }).then(() => {\n      return myBot.stopPolling();\n    });\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(polling) emits \"message\" on receiving message","suites":["TelegramBot","Events"],"updatePoint":{"line":167,"column":54,"index":5150},"line":167,"code":"    it('(polling) emits \"message\" on receiving message', function test(done) {\n      botPolling.once('message', () => {\n        return done();\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(polling) emits \"polling_error\" if error occurs during polling","suites":["TelegramBot","Events"],"updatePoint":{"line":172,"column":70,"index":5327},"line":172,"code":"    it('(polling) emits \"polling_error\" if error occurs during polling', function test(done) {\n      const myBot = new TelegramBot(12345, {\n        polling: true\n      });\n      myBot.once('polling_error', error => {\n        assert.ok(error);\n        assert.strictEqual(error.code, 'ETELEGRAM');\n        return myBot.stopPolling().then(() => {\n          done();\n        }).catch(done);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(webhook) emits \"message\" on receiving message","suites":["TelegramBot","Events"],"updatePoint":{"line":184,"column":54,"index":5715},"line":184,"code":"    it('(webhook) emits \"message\" on receiving message', function test(done) {\n      botWebHook.once('message', () => {\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(webhook) emits \"webhook_error\" if could not parse webhook request body","suites":["TelegramBot","Events"],"updatePoint":{"line":190,"column":79,"index":5954},"line":190,"code":"    it('(webhook) emits \"webhook_error\" if could not parse webhook request body', function test(done) {\n      botWebHook.once('webhook_error', error => {\n        assert.ok(error);\n        assert.strictEqual(error.code, 'EPARSE');\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN, {\n        update: 'unparseable!',\n        json: false\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns 200 OK for health endpoint","suites":["TelegramBot","WebHook"],"updatePoint":{"line":203,"column":42,"index":6358},"line":203,"code":"    it('returns 200 OK for health endpoint', function test(done) {\n      utils.sendWebHookRequest(webHookPort2, '/healthz').then(resp => {\n        assert.strictEqual(resp, 'OK');\n        return done();\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns 401 error if token is wrong","suites":["TelegramBot","WebHook"],"updatePoint":{"line":209,"column":43,"index":6579},"line":209,"code":"    it('returns 401 error if token is wrong', function test(done) {\n      utils.sendWebHookMessage(webHookPort2, 'wrong-token').catch(resp => {\n        assert.strictEqual(resp.statusCode, 401);\n        return done();\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"only accepts POST method","suites":["TelegramBot","WebHook"],"updatePoint":{"line":215,"column":32,"index":6803},"line":215,"code":"    it('only accepts POST method', function test() {\n      const methods = ['GET', 'PUT', 'DELETE', 'OPTIONS'];\n      return Promise.all(methods, method => {\n        return utils.sendWebHookMessage(webHookPort2, TOKEN, {\n          method\n        }).then(() => {\n          throw new Error(`expected error with webhook ${method} request`);\n        }).catch(resp => {\n          if (!resp.statusCode) throw resp;\n          if (resp.statusCode !== 418) throw new Error(`unexpected error: ${resp.body}`);\n        });\n      }); // Promise.each\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is enabled, through options.key and options.cert","suites":["TelegramBot","WebHook HTTPS"],"updatePoint":{"line":235,"column":56,"index":7568},"line":235,"code":"    it('is enabled, through options.key and options.cert', function test() {\n      httpsbot = new TelegramBot(TOKEN, {\n        webHook: {\n          port,\n          key,\n          cert\n        }\n      });\n      return utils.sendWebHookMessage(port, TOKEN, {\n        https: true\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is enabled, through options.pfx","suites":["TelegramBot","WebHook HTTPS"],"updatePoint":{"line":247,"column":39,"index":7846},"line":247,"code":"    it('is enabled, through options.pfx');","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is enabled, through options.https","suites":["TelegramBot","WebHook HTTPS"],"updatePoint":{"line":248,"column":41,"index":7891},"line":248,"code":"    it('is enabled, through options.https', function test() {\n      httpsbot = new TelegramBot(TOKEN, {\n        webHook: {\n          port,\n          https: {\n            key: fs.readFileSync(key),\n            cert: fs.readFileSync(cert)\n          }\n        }\n      });\n      return utils.sendWebHookMessage(port, TOKEN, {\n        https: true\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"FatalError is thrown if token is missing","suites":["TelegramBot","errors"],"updatePoint":{"line":267,"column":48,"index":8430},"line":267,"code":"    it('FatalError is thrown if token is missing', function test() {\n      const myBot = new TelegramBot(null);\n      return myBot.sendMessage(USERID, 'text').catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(error.code, 'EFATAL');\n        assert.ok(error.message.indexOf('not provided') > -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"FatalError is thrown if file-type of Buffer could not be determined","suites":["TelegramBot","errors"],"updatePoint":{"line":275,"column":75,"index":8839},"line":275,"code":"    it('FatalError is thrown if file-type of Buffer could not be determined', function test() {\n      let buffer;\n\n      try {\n        buffer = Buffer.from('12345');\n      } catch (ex) {\n        buffer = new Buffer('12345');\n      }\n\n      return bot.sendPhoto(USERID, buffer).catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(error.code, 'EFATAL');\n        assert.ok(error.message.indexOf('Unsupported') > -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"FatalError is thrown on network error","suites":["TelegramBot","errors"],"updatePoint":{"line":290,"column":45,"index":9308},"line":290,"code":"    it('FatalError is thrown on network error', function test() {\n      const myBot = new TelegramBot('useless-token', {\n        baseApiUrl: 'http://localhost:23' // are we sure this port is not bound to?\n\n      });\n      return myBot.getMe().catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(error.code, 'EFATAL');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"ParseError is thrown if response body could not be parsed","suites":["TelegramBot","errors"],"updatePoint":{"line":300,"column":65,"index":9731},"line":300,"code":"    it('ParseError is thrown if response body could not be parsed', function test() {\n      botParse.sendMessage(USERID, 'text').catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.ParseError);\n        assert.strictEqual(error.code, 'EPARSE');\n        assert.ok(typeof error.response === 'object');\n        assert.ok(typeof error.response.body === 'string');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"TelegramError is thrown if error is from Telegram","suites":["TelegramBot","errors"],"updatePoint":{"line":308,"column":57,"index":10127},"line":308,"code":"    it('TelegramError is thrown if error is from Telegram', function test() {\n      return bot.sendMessage('404', 'text').catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.TelegramError);\n        assert.strictEqual(error.code, 'ETELEGRAM');\n        assert.ok(typeof error.response === 'object');\n        assert.ok(typeof error.response.body === 'object');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"initiates polling","suites":["TelegramBot","#startPolling"],"updatePoint":{"line":318,"column":25,"index":10562},"line":318,"code":"    it('initiates polling', function test() {\n      return testbot.startPolling().then(() => {\n        return utils.isPollingMockServer(pollingPort);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns error if using webhook","suites":["TelegramBot","#startPolling"],"updatePoint":{"line":323,"column":38,"index":10743},"line":323,"code":"    it('returns error if using webhook', function test() {\n      return botWebHook.startPolling().catch(err => {\n        // TODO: check for error in a better way\n        // FIX: assert.ok(err instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(err.code, 'EFATAL');\n        assert.ok(err.message.indexOf('mutually exclusive') !== -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns true if bot is polling","suites":["TelegramBot","#isPolling"],"updatePoint":{"line":333,"column":38,"index":11172},"line":333,"code":"    it('returns true if bot is polling', function test() {\n      assert.strictEqual(testbot.isPolling(), true);\n      return utils.isPollingMockServer(pollingPort);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns false if bot is not polling","suites":["TelegramBot","#isPolling"],"updatePoint":{"line":337,"column":43,"index":11350},"line":337,"code":"    it('returns false if bot is not polling', function test() {\n      return testbot.stopPolling().then(() => {\n        assert.strictEqual(testbot.isPolling(), false);\n        utils.clearPollingCheck(pollingPort);\n        return utils.isPollingMockServer(pollingPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"stops polling by bot","suites":["TelegramBot","#stopPolling"],"updatePoint":{"line":349,"column":28,"index":11764},"line":349,"code":"    it('stops polling by bot', function test() {\n      return testbot.stopPolling().then(() => {\n        utils.clearPollingCheck(pollingPort);\n        return utils.isPollingMockServer(pollingPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"opens webhook","suites":["TelegramBot","#openWebHook"],"updatePoint":{"line":357,"column":21,"index":12042},"line":357,"code":"    it('opens webhook', function test() {\n      return testbot.openWebHook().then(() => {\n        return utils.hasOpenWebHook(webHookPort);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns error if using polling","suites":["TelegramBot","#openWebHook"],"updatePoint":{"line":362,"column":38,"index":12217},"line":362,"code":"    it('returns error if using polling', function test() {\n      return botPolling.openWebHook().catch(err => {\n        // TODO: check for error in a better way\n        // FIX: assert.ok(err instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(err.code, 'EFATAL');\n        assert.ok(err.message.indexOf('mutually exclusive') !== -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns true if webhook is opened","suites":["TelegramBot","#hasOpenWebHook"],"updatePoint":{"line":372,"column":41,"index":12658},"line":372,"code":"    it('returns true if webhook is opened', function test() {\n      assert.strictEqual(testbot.hasOpenWebHook(), true);\n      return utils.hasOpenWebHook(webHookPort);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns false if webhook is closed","suites":["TelegramBot","#hasOpenWebHook"],"updatePoint":{"line":376,"column":42,"index":12835},"line":376,"code":"    it('returns false if webhook is closed', function test() {\n      testbot.closeWebHook().then(() => {\n        assert.strictEqual(testbot.hasOpenWebHook(), false);\n        return utils.hasOpenWebHook(webHookPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"closes webhook","suites":["TelegramBot","#closeWebHook"],"updatePoint":{"line":387,"column":22,"index":13193},"line":387,"code":"    it('closes webhook', function test() {\n      testbot.closeWebHook().then(() => {\n        return utils.hasOpenWebHook(webHookPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an User object","suites":["TelegramBot","#getMe"],"updatePoint":{"line":397,"column":36,"index":13505},"line":397,"code":"    it('should return an User object', function test() {\n      return bot.getMe().then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.id));\n        assert.ok(is.string(resp.first_name));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a webHook","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":409,"column":28,"index":13888},"line":409,"code":"    it('should set a webHook', function test() {\n      return bot.setWebHook(ip, {}).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a webHook with certificate","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":414,"column":45,"index":14063},"line":414,"code":"    it('should set a webHook with certificate', function test() {\n      return bot.setWebHook(ip, {\n        certificate: cert\n      }).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(v0.25.0 and lower) should set a webHook with certificate","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":421,"column":65,"index":14291},"line":421,"code":"    it('(v0.25.0 and lower) should set a webHook with certificate', function test() {\n      return bot.setWebHook(ip, cert).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete the webHook","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":426,"column":33,"index":14456},"line":426,"code":"    it('should delete the webHook', function test() {\n      return bot.setWebHook('', {}).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete webhook","suites":["TelegramBot","#deleteWebHook"],"updatePoint":{"line":436,"column":29,"index":14778},"line":436,"code":"    it('should delete webhook', function test() {\n      return bot.deleteWebHook().then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return WebhookInfo","suites":["TelegramBot","#getWebHookInfo"],"updatePoint":{"line":446,"column":33,"index":15104},"line":446,"code":"    it('should return WebhookInfo', function test() {\n      return bot.getWebHookInfo().then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.boolean(resp.has_custom_certificate));\n        assert.ok(is.number(resp.pending_update_count));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an Array","suites":["TelegramBot","#getUpdates"],"updatePoint":{"line":464,"column":30,"index":15677},"line":464,"code":"    it('should return an Array', function test() {\n      return bot.getUpdates(opts).then(resp => {\n        assert.strictEqual(Array.isArray(resp), true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(v0.25.0 and lower) should return an Array","suites":["TelegramBot","#getUpdates"],"updatePoint":{"line":469,"column":50,"index":15870},"line":469,"code":"    it('(v0.25.0 and lower) should return an Array', function test() {\n      return bot.getUpdates(opts.timeout, opts.limit).then(resp => {\n        assert.strictEqual(Array.isArray(resp), true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a message","suites":["TelegramBot","#sendMessage"],"updatePoint":{"line":479,"column":29,"index":16219},"line":479,"code":"    it('should send a message', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.message_id));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should forward a message","suites":["TelegramBot","#forwardMessage"],"updatePoint":{"line":492,"column":32,"index":16731},"line":492,"code":"    it('should forward a message', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        const messageId = resp.message_id;\n        return bot.forwardMessage(USERID, USERID, messageId).then(forwarded => {\n          assert.ok(is.object(forwarded));\n          assert.ok(is.number(forwarded.message_id));\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send copy of a message","suites":["TelegramBot","#copyMessage"],"updatePoint":{"line":507,"column":37,"index":17312},"line":507,"code":"    it('should send copy of a message', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        const messageId = resp.message_id;\n        return bot.copyMessage(USERID, USERID, messageId).then(copy => {\n          assert.ok(is.object(copy));\n          assert.ok(is.number(copy.message_id));\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from file","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":523,"column":37,"index":17858},"line":523,"code":"    it('should send a photo from file', function test() {\n      const photo = `${__dirname}/data/photo.png`;\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n        photoId = resp.photo[0].file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from id","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":531,"column":35,"index":18158},"line":531,"code":"    it('should send a photo from id', function test() {\n      // Send the same photo as before\n      const photo = photoId;\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from fs.readStream","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":539,"column":46,"index":18445},"line":539,"code":"    it('should send a photo from fs.readStream', function test() {\n      const photo = fs.createReadStream(`${__dirname}/data/photo.png`);\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from request Stream","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":546,"column":47,"index":18737},"line":546,"code":"    it('should send a photo from request Stream', function test() {\n      const photo = request(`${staticUrl}/photo.png`);\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from a Buffer","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":553,"column":41,"index":19006},"line":553,"code":"    it('should send a photo from a Buffer', function test() {\n      const photo = fs.readFileSync(`${__dirname}/data/photo.png`);\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an MP3 audio","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":567,"column":32,"index":19474},"line":567,"code":"    it('should send an MP3 audio', function test() {\n      const audio = `${__dirname}/data/audio.mp3`;\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n        audioId = resp.audio.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from id","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":575,"column":36,"index":19773},"line":575,"code":"    it('should send an audio from id', function test() {\n      // Send the same audio as before\n      const audio = audioId;\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from fs.readStream","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":583,"column":47,"index":20062},"line":583,"code":"    it('should send an audio from fs.readStream', function test() {\n      const audio = fs.createReadStream(`${__dirname}/data/audio.mp3`);\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from request Stream","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":590,"column":48,"index":20356},"line":590,"code":"    it('should send an audio from request Stream', function test() {\n      const audio = request(`${staticUrl}/audio.mp3`);\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from a Buffer","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":597,"column":42,"index":20627},"line":597,"code":"    it('should send an audio from a Buffer', function test() {\n      const audio = fs.readFileSync(`${__dirname}/data/audio.mp3`);\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio file with thumb","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":604,"column":44,"index":20913},"line":604,"code":"    it('should send an audio file with thumb', function test() {\n      const audio = `${__dirname}/data/audio.mp3`;\n      const thumbImg = `attach://${__dirname}/data/sticker_thumb.png`;\n      return bot.sendAudio(USERID, audio, {\n        thumb: thumbImg\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n        assert.ok(is.object(resp.audio.thumb));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from file","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":622,"column":40,"index":21539},"line":622,"code":"    it('should send a document from file', function test() {\n      const document = `${__dirname}/data/photo.gif`;\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n        documentId = resp.document.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from id","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":630,"column":38,"index":21858},"line":630,"code":"    it('should send a document from id', function test() {\n      // Send the same document as before\n      const document = documentId;\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from fs.readStream","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":638,"column":49,"index":22167},"line":638,"code":"    it('should send a document from fs.readStream', function test() {\n      const document = fs.createReadStream(`${__dirname}/data/photo.gif`);\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from request Stream","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":645,"column":50,"index":22475},"line":645,"code":"    it('should send a document from request Stream', function test() {\n      const document = request(`${staticUrl}/photo.gif`);\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from a Buffer","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":652,"column":44,"index":22760},"line":652,"code":"    it('should send a document from a Buffer', function test() {\n      const document = fs.readFileSync(`${__dirname}/data/photo.gif`);\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from file","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":666,"column":39,"index":23256},"line":666,"code":"    it('should send a sticker from file', function test() {\n      const sticker = `${__dirname}/data/sticker.webp`;\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n        stickerId = resp.sticker.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from id","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":674,"column":37,"index":23571},"line":674,"code":"    it('should send a sticker from id', function test() {\n      // Send the same photo as before\n      return bot.sendSticker(USERID, stickerId).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from fs.readStream","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":681,"column":48,"index":23840},"line":681,"code":"    it('should send a sticker from fs.readStream', function test() {\n      const sticker = fs.createReadStream(`${__dirname}/data/sticker.webp`);\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from request Stream","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":688,"column":49,"index":24146},"line":688,"code":"    it('should send a sticker from request Stream', function test() {\n      const sticker = request(`${staticUrl}/sticker.webp`);\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from a Buffer","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":695,"column":43,"index":24429},"line":695,"code":"    it('should send a sticker from a Buffer', function test() {\n      const sticker = fs.readFileSync(`${__dirname}/data/sticker.webp`);\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from file","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":709,"column":37,"index":24914},"line":709,"code":"    it('should send a video from file', function test() {\n      const video = `${__dirname}/data/video.mp4`;\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n        videoId = resp.video.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from id","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":717,"column":35,"index":25212},"line":717,"code":"    it('should send a video from id', function test() {\n      // Send the same video as before\n      return bot.sendVideo(USERID, videoId).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from fs.readStream","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":724,"column":46,"index":25473},"line":724,"code":"    it('should send a video from fs.readStream', function test() {\n      const video = fs.createReadStream(`${__dirname}/data/video.mp4`);\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from request Stream","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":731,"column":47,"index":25766},"line":731,"code":"    it('should send a video from request Stream', function test() {\n      const video = request(`${staticUrl}/video.mp4`);\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from a Buffer","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":738,"column":41,"index":26036},"line":738,"code":"    it('should send a video from a Buffer', function test() {\n      const video = fs.readFileSync(`${__dirname}/data/video.mp4`);\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from file","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":752,"column":37,"index":26526},"line":752,"code":"    it('should send a video from file', function test() {\n      const video = `${__dirname}/data/video.mp4`;\n      return bot.sendVideoNote(USERID, video, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n        videoNoteId = resp.video.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from id","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":762,"column":35,"index":26861},"line":762,"code":"    it('should send a video from id', function test() {\n      // Send the same videonote as before\n      assert.ok(videoNoteId);\n      return bot.sendVideoNote(USERID, videoNoteId, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from fs.readStream","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":772,"column":46,"index":27193},"line":772,"code":"    it('should send a video from fs.readStream', function test() {\n      const video = fs.createReadStream(`${__dirname}/data/video.mp4`);\n      return bot.sendVideoNote(USERID, video, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from a Buffer","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":781,"column":41,"index":27513},"line":781,"code":"    it('should send a video from a Buffer', function test() {\n      const video = fs.readFileSync(`${__dirname}/data/video.mp4`);\n      return bot.sendVideoNote(USERID, video, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from file","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":797,"column":37,"index":28020},"line":797,"code":"    it('should send a voice from file', function test() {\n      const voice = `${__dirname}/data/voice.ogg`;\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n        voiceId = resp.voice.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from id","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":805,"column":35,"index":28318},"line":805,"code":"    it('should send a voice from id', function test() {\n      // Send the same voice as before\n      return bot.sendVoice(USERID, voiceId).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from fs.readStream","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":812,"column":46,"index":28579},"line":812,"code":"    it('should send a voice from fs.readStream', function test() {\n      const voice = fs.createReadStream(`${__dirname}/data/voice.ogg`);\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from request Stream","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":819,"column":47,"index":28872},"line":819,"code":"    it('should send a voice from request Stream', function test() {\n      const voice = request(`${staticUrl}/voice.ogg`);\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from a Buffer","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":826,"column":41,"index":29142},"line":826,"code":"    it('should send a voice from a Buffer', function test() {\n      const voice = fs.readFileSync(`${__dirname}/data/voice.ogg`);\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a chat action","suites":["TelegramBot","#sendChatAction"],"updatePoint":{"line":838,"column":33,"index":29583},"line":838,"code":"    it('should send a chat action', function test() {\n      const action = 'typing';\n      return bot.sendChatAction(USERID, action).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set bot commands","suites":["TelegramBot","#setMyCommands"],"updatePoint":{"line":851,"column":31,"index":30233},"line":851,"code":"    it('should set bot commands', function test() {\n      const opts = [{\n        command: 'eat',\n        description: 'Command for eat'\n      }, {\n        command: 'run',\n        description: 'Command for run'\n      }];\n      return bot.setMyCommands(opts).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get bot commands","suites":["TelegramBot","#getMyCommands "],"updatePoint":{"line":865,"column":31,"index":30629},"line":865,"code":"    it('should get bot commands', function test() {\n      return bot.getMyCommands().then(resp => {\n        assert.ok(is.array(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set chat menu button","suites":["TelegramBot","#setChatMenuButton"],"updatePoint":{"line":872,"column":35,"index":30861},"line":872,"code":"    it('should set chat menu button', function test() {\n      return bot.setChatMenuButton({\n        chat_id: USERID,\n        menu_button: JSON.stringify({\n          type: 'web_app',\n          text: 'Hello',\n          web_app: {\n            url: 'https://webappcontent.telegram.org/cafe'\n          }\n        })\n      }).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get chat menu button","suites":["TelegramBot","#getChatMenuButton"],"updatePoint":{"line":888,"column":35,"index":31326},"line":888,"code":"    it('should get chat menu button', function test() {\n      return bot.getChatMenuButton({\n        chat_id: USERID\n      }).then(resp => {\n        assert.ok(is.equal(resp, {\n          type: 'web_app',\n          text: 'Hello',\n          web_app: {\n            url: 'https://webappcontent.telegram.org/cafe'\n          }\n        }));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set default administrator rights","suites":["TelegramBot","#setMyDefaultAdministratorRights"],"updatePoint":{"line":903,"column":47,"index":31792},"line":903,"code":"    it('should set default administrator rights', function test() {\n      return bot.setMyDefaultAdministratorRights({\n        rights: JSON.stringify({\n          can_manage_chat: true,\n          can_change_info: true,\n          can_delete_messages: false,\n          can_invite_users: true,\n          can_restrict_members: false,\n          can_pin_messages: true,\n          can_promote_members: false,\n          can_manage_video_chats: false,\n          is_anonymous: false\n        }),\n        for_channels: false\n      }).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get my default administrator rights","suites":["TelegramBot","#getMyDefaultAdministratorRights "],"updatePoint":{"line":923,"column":50,"index":32490},"line":923,"code":"    it('should get my default administrator rights', function test() {\n      return bot.getMyDefaultAdministratorRights({\n        for_channels: false\n      }).then(resp => {\n        assert.ok(is.equal(resp, {\n          can_manage_chat: true,\n          can_change_info: true,\n          can_delete_messages: false,\n          can_invite_users: true,\n          can_restrict_members: false,\n          can_pin_messages: true,\n          can_promote_members: false,\n          can_manage_video_chats: false,\n          is_anonymous: false\n        }));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete bot commands","suites":["TelegramBot","#deleteMyCommands"],"updatePoint":{"line":942,"column":34,"index":33107},"line":942,"code":"    it('should delete bot commands', function test() {\n      return bot.deleteMyCommands().then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set chat permissions","suites":["TelegramBot","#setChatAdministratorCustomTitle "],"updatePoint":{"line":949,"column":35,"index":33378},"line":949,"code":"    it('should set chat permissions', function test() {\n      return bot.setChatAdministratorCustomTitle(GROUPID, USERID, 'Custom Name').then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":true,"dir":"test"},{"name":"should set chat permissions","suites":["TelegramBot","#setChatPermissions "],"updatePoint":{"line":958,"column":35,"index":33819},"line":958,"code":"    it('should set chat permissions', function test() {\n      const ChatPermissions = {\n        can_send_messages: true,\n        can_send_media_messages: true,\n        can_send_polls: false,\n        can_send_other_messages: false,\n        can_add_web_page_previews: true,\n        can_change_info: false,\n        can_invite_users: false,\n        can_pin_messages: true\n      };\n      return bot.setChatPermissions(GROUPID, ChatPermissions).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should export the group invite link","suites":["TelegramBot","#exportChatInviteLink"],"updatePoint":{"line":978,"column":43,"index":34520},"line":978,"code":"    it('should export the group invite link', function test() {\n      return bot.exportChatInviteLink(GROUPID).then(resp => {\n        assert(resp.match(/^https:\\/\\/t\\.me\\/.+$/i), 'is a telegram invite link');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should create a chat invite link","suites":["TelegramBot","#createChatInviteLink"],"updatePoint":{"line":991,"column":40,"index":35074},"line":991,"code":"    it('should create a chat invite link', function test() {\n      return bot.createChatInviteLink(GROUPID).then(resp => {\n        assert(resp.invite_link.match(/^https:\\/\\/t\\.me\\/.+$/i), 'is a telegram invite link');\n        inviteLink = resp.invite_link;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit chat invite link","suites":["TelegramBot","#createChatInviteLink"],"updatePoint":{"line":997,"column":36,"index":35345},"line":997,"code":"    it('should edit chat invite link', function test() {\n      return bot.editChatInviteLink(GROUPID, inviteLink, {\n        member_limit: 3\n      }).then(resp => {\n        assert.strictEqual(resp.member_limit, 3);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should revoke chat invite link","suites":["TelegramBot","#createChatInviteLink"],"updatePoint":{"line":1004,"column":38,"index":35579},"line":1004,"code":"    it('should revoke chat invite link', function test() {\n      return bot.revokeChatInviteLink(GROUPID, inviteLink).then(resp => {\n        assert.strictEqual(resp.is_revoked, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from file","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1015,"column":41,"index":35971},"line":1015,"code":"    it('should set a chat photo from file', function test() {\n      const photo = `${__dirname}/data/chat_photo.png`;\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from fs.readStream","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1021,"column":50,"index":36217},"line":1021,"code":"    it('should set a chat photo from fs.readStream', function test() {\n      const photo = fs.createReadStream(`${__dirname}/data/chat_photo.png`);\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from request Stream","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1027,"column":51,"index":36485},"line":1027,"code":"    it('should set a chat photo from request Stream', function test() {\n      const photo = request(`${staticUrl}/chat_photo.png`);\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from a Buffer","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1033,"column":45,"index":36730},"line":1033,"code":"    it('should set a chat photo from a Buffer', function test() {\n      const photo = fs.readFileSync(`${__dirname}/data/chat_photo.png`);\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete the chat photo","suites":["TelegramBot","#deleteChatPhoto"],"updatePoint":{"line":1044,"column":36,"index":37148},"line":1044,"code":"    it('should delete the chat photo', function test() {\n      return bot.deleteChatPhoto(GROUPID).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set the chat title","suites":["TelegramBot","#setChatTitle"],"updatePoint":{"line":1054,"column":33,"index":37477},"line":1054,"code":"    it('should set the chat title', function test() {\n      const random = Math.floor(Math.random() * 1000);\n      return bot.setChatTitle(GROUPID, `ntba test group (random: ${random})`).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set the chat description","suites":["TelegramBot","#setChatDescription"],"updatePoint":{"line":1065,"column":39,"index":37921},"line":1065,"code":"    it('should set the chat description', function test() {\n      const random = Math.floor(Math.random() * 1000);\n      const description = `node-telegram-bot-api test group (random: ${random})`;\n      return bot.setChatDescription(GROUPID, description).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should pin chat message","suites":["TelegramBot","#pinChatMessage"],"updatePoint":{"line":1081,"column":31,"index":38542},"line":1081,"code":"    it('should pin chat message', function test() {\n      return bot.pinChatMessage(GROUPID, messageId).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should unpin chat message","suites":["TelegramBot","#unpinChatMessage"],"updatePoint":{"line":1091,"column":33,"index":38893},"line":1091,"code":"    it('should unpin chat message', function test() {\n      return bot.unpinChatMessage(GROUPID).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should unpin all chats messages","suites":["TelegramBot","#unpinAllChatMessages"],"updatePoint":{"line":1101,"column":39,"index":39253},"line":1101,"code":"    it('should unpin all chats messages', function test() {\n      return bot.unpinAllChatMessages(GROUPID).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit a message sent by the bot","suites":["TelegramBot","#editMessageText"],"updatePoint":{"line":1112,"column":45,"index":39660},"line":1112,"code":"    it('should edit a message sent by the bot', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        assert.strictEqual(resp.text, 'test');\n        const opts = {\n          chat_id: USERID,\n          message_id: resp.message_id\n        };\n        return bot.editMessageText('edit test', opts).then(msg => {\n          assert.strictEqual(msg.text, 'edit test');\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit a caption sent by the bot","suites":["TelegramBot","#editMessageCaption"],"updatePoint":{"line":1131,"column":45,"index":40341},"line":1131,"code":"    it('should edit a caption sent by the bot', function test() {\n      const photo = `${__dirname}/data/photo.png`;\n      const options = {\n        caption: 'test caption'\n      };\n      return bot.sendPhoto(USERID, photo, options).then(resp => {\n        assert.strictEqual(resp.caption, 'test caption');\n        const opts = {\n          chat_id: USERID,\n          message_id: resp.message_id\n        };\n        return bot.editMessageCaption('new test caption', opts).then(msg => {\n          assert.strictEqual(msg.caption, 'new test caption');\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit previously-set reply markup","suites":["TelegramBot","#editMessageReplyMarkup"],"updatePoint":{"line":1153,"column":47,"index":41164},"line":1153,"code":"    it('should edit previously-set reply markup', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        const replyMarkup = JSON.stringify({\n          inline_keyboard: [[{\n            text: 'Test button',\n            callback_data: 'test'\n          }]]\n        });\n        const opts = {\n          chat_id: USERID,\n          message_id: resp.message_id\n        };\n        return bot.editMessageReplyMarkup(replyMarkup, opts).then(msg => {\n          // Keyboard markup is not returned, do a simple object check\n          assert.ok(is.object(msg));\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete message","suites":["TelegramBot","#deleteMessage"],"updatePoint":{"line":1180,"column":29,"index":42053},"line":1180,"code":"    it('should delete message', function test() {\n      return bot.deleteMessage(USERID, messageId).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get user profile photos","suites":["TelegramBot","#getUserProfilePhotos"],"updatePoint":{"line":1194,"column":38,"index":42477},"line":1194,"code":"    it('should get user profile photos', function test() {\n      return bot.getUserProfilePhotos(USERID, opts).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.total_count));\n        assert.ok(is.array(resp.photos));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(v0.25.0 and lower) should get user profile photos","suites":["TelegramBot","#getUserProfilePhotos"],"updatePoint":{"line":1201,"column":58,"index":42767},"line":1201,"code":"    it('(v0.25.0 and lower) should get user profile photos', function test() {\n      return bot.getUserProfilePhotos(USERID, opts.offset, opts.limit).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.total_count));\n        assert.ok(is.array(resp.photos));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a location","suites":["TelegramBot","#sendLocation"],"updatePoint":{"line":1213,"column":30,"index":43208},"line":1213,"code":"    it('should send a location', function test() {\n      return bot.sendLocation(USERID, lat, long).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.location));\n        assert.ok(is.number(resp.location.latitude));\n        assert.ok(is.number(resp.location.longitude));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"edits live location","suites":["TelegramBot","#editMessageLiveLocation"],"updatePoint":{"line":1233,"column":27,"index":43899},"line":1233,"code":"    it('edits live location', function test() {\n      const opts = {\n        chat_id: USERID,\n        message_id: message.message_id\n      };\n      return bot.editMessageLiveLocation(lat + 1, long + 1, opts).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.location));\n        assert.ok(is.number(resp.location.latitude));\n        assert.ok(is.number(resp.location.longitude));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"stops location updates","suites":["TelegramBot","#stopMessageLiveLocation"],"updatePoint":{"line":1256,"column":30,"index":44684},"line":1256,"code":"    it('stops location updates', function test() {\n      const opts = {\n        chat_id: USERID,\n        message_id: message.message_id\n      };\n      return bot.stopMessageLiveLocation(opts).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.location));\n        assert.ok(is.number(resp.location.latitude));\n        assert.ok(is.number(resp.location.longitude));\n      });\n    });","file":"telegram.js","skipped":true,"dir":"test"},{"name":"should send a venue","suites":["TelegramBot","#sendVenue"],"updatePoint":{"line":1273,"column":27,"index":45247},"line":1273,"code":"    it('should send a venue', function test() {\n      const title = 'The Village Shopping Centre';\n      const address = '430 Topsail Rd,St. John\\'s, NL A1E 4N1, Canada';\n      return bot.sendVenue(USERID, lat, long, title, address).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.venue));\n        assert.ok(is.object(resp.venue.location));\n        assert.ok(is.number(resp.venue.location.latitude));\n        assert.ok(is.number(resp.venue.location.longitude));\n        assert.ok(is.string(resp.venue.title));\n        assert.ok(is.string(resp.venue.address));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a contact","suites":["TelegramBot","#sendContact"],"updatePoint":{"line":1297,"column":29,"index":46379},"line":1297,"code":"    it('should send a contact', function test() {\n      const phoneNumber = '+1(000)000-000';\n      const firstName = 'John Doe';\n      return bot.sendContact(USERID, phoneNumber, firstName).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.contact));\n        assert.ok(is.string(resp.contact.phone_number));\n        assert.ok(is.string(resp.contact.first_name));\n      });\n    });","file":"telegram.js","skipped":true,"dir":"test"},{"name":"should send a Poll","suites":["TelegramBot","#sendPoll"],"updatePoint":{"line":1309,"column":26,"index":46849},"line":1309,"code":"    it('should send a Poll', function test() {\n      const question = '¿Are you okey?';\n      const answers = ['Yes', 'No'];\n      const opts = {\n        is_anonymous: true\n      };\n      return bot.sendPoll(GROUPID, question, answers, opts).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Quiz","suites":["TelegramBot","#sendPoll"],"updatePoint":{"line":1319,"column":26,"index":47160},"line":1319,"code":"    it('should send a Quiz', function test() {\n      const question = '¿Are you okey?';\n      const answers = ['Yes', 'No'];\n      const opts = {\n        is_anonymous: true,\n        type: 'quiz',\n        correct_option_id: 0\n      };\n      return bot.sendPoll(GROUPID, question, answers, opts).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Dice","suites":["TelegramBot","#sendDice"],"updatePoint":{"line":1333,"column":26,"index":47580},"line":1333,"code":"    it('should send a Dice', function test() {\n      return bot.sendDice(GROUPID).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Dart","suites":["TelegramBot","#sendDice"],"updatePoint":{"line":1338,"column":26,"index":47731},"line":1338,"code":"    it('should send a Dart', function test() {\n      const opts = {\n        emoji: '🎯'\n      };\n      return bot.sendDice(GROUPID, opts).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get a file","suites":["TelegramBot","#getFile"],"updatePoint":{"line":1352,"column":25,"index":48109},"line":1352,"code":"    it('should get a file', function test() {\n      return bot.getFile(FILE_ID).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.string(resp.file_path));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get a file link","suites":["TelegramBot","#getFileLink"],"updatePoint":{"line":1364,"column":30,"index":48493},"line":1364,"code":"    it('should get a file link', function test() {\n      return bot.getFileLink(FILE_ID).then(fileURI => {\n        assert.ok(is.string(fileURI));\n        assert.ok(utils.isTelegramFileURI(fileURI));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get a file stream","suites":["TelegramBot","#getFileStream"],"updatePoint":{"line":1375,"column":32,"index":48898},"line":1375,"code":"    it('should get a file stream', function test(done) {\n      const fileStream = bot.getFileStream(FILE_ID);\n      assert.ok(fileStream instanceof stream.Readable);\n      assert.strictEqual(fileStream.path, FILE_ID);\n      fileStream.on('info', info => {\n        assert.ok(info);\n        assert.ok(utils.isTelegramFileURI(info.uri), `${info.uri} is not a file URI`);\n        fileStream.pipe(concat(function readFile(buffer) {\n          buffer.equals(fs.readFileSync(FILE_PATH)); // sync :(\n\n          return done();\n        }));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should download a file","suites":["TelegramBot","#downloadFile"],"updatePoint":{"line":1396,"column":30,"index":49669},"line":1396,"code":"    it('should download a file', function test() {\n      return bot.downloadFile(FILE_ID, downloadPath).then(filePath => {\n        assert.ok(is.string(filePath));\n        assert.strictEqual(path.dirname(filePath), downloadPath);\n        assert.ok(fs.existsSync(filePath));\n        fs.unlinkSync(filePath); // Delete file after test\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should call `onText` callback on match","suites":["TelegramBot","#onText"],"updatePoint":{"line":1406,"column":46,"index":50088},"line":1406,"code":"    it('should call `onText` callback on match', function test(done) {\n      const regexp = /\\/onText (.+)/;\n      botWebHook.onText(regexp, (msg, match) => {\n        assert.strictEqual(match[1], 'ECHO ALOHA');\n        assert.ok(botWebHook.removeTextListener(regexp));\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN, {\n        message: {\n          text: '/onText ECHO ALOHA'\n        }\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should reset the global regex state with each message","suites":["TelegramBot","#onText"],"updatePoint":{"line":1419,"column":61,"index":50543},"line":1419,"code":"    it('should reset the global regex state with each message', function test(done) {\n      const regexp = /\\/onText (.+)/g;\n      botWebHook.onText(regexp, () => {\n        assert.strictEqual(regexp.lastIndex, 0);\n        assert.ok(botWebHook.removeTextListener(regexp));\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN, {\n        message: {\n          text: '/onText ECHO ALOHA'\n        }\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"removes the right text-listener","suites":["TelegramBot","#removeTextListener"],"updatePoint":{"line":1443,"column":39,"index":51261},"line":1443,"code":"    it('removes the right text-listener', function test() {\n      bot.onText(regexp, callback);\n      bot.onText(regexp2, callback);\n      const textListener = bot.removeTextListener(regexp);\n      assert.strictEqual(regexp, textListener.regexp);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns `null` if missing","suites":["TelegramBot","#removeTextListener"],"updatePoint":{"line":1449,"column":33,"index":51510},"line":1449,"code":"    it('returns `null` if missing', function test() {\n      assert.strictEqual(null, bot.removeTextListener(/404/));\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns the right reply-listener","suites":["TelegramBot","#removeReplyListener"],"updatePoint":{"line":1460,"column":40,"index":51890},"line":1460,"code":"    it('returns the right reply-listener', function test() {\n      const id = bot.onReplyToMessage(chatId, messageId, callback);\n      const replyListener = bot.removeReplyListener(id);\n      assert.strictEqual(id, replyListener.id);\n      assert.strictEqual(chatId, replyListener.chatId);\n      assert.strictEqual(messageId, replyListener.messageId);\n      assert.strictEqual(callback, replyListener.callback);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns `null` if missing","suites":["TelegramBot","#removeReplyListener"],"updatePoint":{"line":1468,"column":33,"index":52303},"line":1468,"code":"    it('returns `null` if missing', function test() {\n      // NOTE: '0' is never a valid reply listener ID :)\n      assert.strictEqual(null, bot.removeReplyListener(0));\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return a Chat object","suites":["TelegramBot","#getChat"],"updatePoint":{"line":1477,"column":35,"index":52629},"line":1477,"code":"    it('should return a Chat object', function test() {\n      return bot.getChat(USERID).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an Array","suites":["TelegramBot","#getChatAdministrators"],"updatePoint":{"line":1487,"column":30,"index":52969},"line":1487,"code":"    it('should return an Array', function test() {\n      return bot.getChatAdministrators(GROUPID).then(resp => {\n        assert.ok(Array.isArray(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an Integer","suites":["TelegramBot","#getChatMemberCount"],"updatePoint":{"line":1497,"column":32,"index":53321},"line":1497,"code":"    it('should return an Integer', function test() {\n      return bot.getChatMemberCount(GROUPID).then(resp => {\n        assert.ok(Number.isInteger(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return a ChatMember","suites":["TelegramBot","#getChatMember"],"updatePoint":{"line":1507,"column":34,"index":53660},"line":1507,"code":"    it('should return a ChatMember', function test() {\n      return bot.getChatMember(GROUPID, USERID).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.user));\n        assert.ok(is.string(resp.status));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Game","suites":["TelegramBot","#sendGame"],"updatePoint":{"line":1520,"column":26,"index":54117},"line":1520,"code":"    it('should send a Game', function test() {\n      return bot.sendGame(USERID, GAME_SHORT_NAME).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.game));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set GameScore","suites":["TelegramBot","#setGameScore"],"updatePoint":{"line":1531,"column":28,"index":54487},"line":1531,"code":"    it('should set GameScore', function test() {\n      const score = Math.floor(Math.random() * 1000);\n      const opts = {\n        chat_id: GAME_CHAT_ID,\n        message_id: GAME_MSG_ID,\n        force: true\n      };\n      return bot.setGameScore(USERID, score, opts).then(resp => {\n        assert.ok(is.object(resp) || is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get GameHighScores","suites":["TelegramBot","#getGameHighScores"],"updatePoint":{"line":1547,"column":33,"index":55024},"line":1547,"code":"    it('should get GameHighScores', function test() {\n      const opts = {\n        chat_id: GAME_CHAT_ID,\n        message_id: GAME_MSG_ID\n      };\n      return bot.getGameHighScores(USERID, opts).then(resp => {\n        assert.ok(is.array(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an invoice","suites":["TelegramBot","#sendInvoice"],"updatePoint":{"line":1561,"column":30,"index":55442},"line":1561,"code":"    it('should send an invoice', function test() {\n      if (isCI) {\n        this.skip(); // Skip test for now\n      }\n\n      const title = 'Demo product';\n      const description = 'our test product';\n      const payload = 'sku-p001';\n      const providerToken = PROVIDER_TOKEN;\n      const startParameter = 'pay';\n      const currency = 'USD';\n      const prices = [{\n        label: 'product',\n        amount: 11000\n      }, {\n        label: 'tax',\n        amount: 11000\n      }];\n      return bot.sendInvoice(USERID, title, description, payload, providerToken, startParameter, currency, prices).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.invoice));\n        assert.ok(is.number(resp.invoice.total_amount));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should create an invoice link","suites":["TelegramBot","#createInvoiceLink"],"updatePoint":{"line":1590,"column":37,"index":56392},"line":1590,"code":"    it('should create an invoice link', function test() {\n      if (isCI) {\n        this.skip(); // Skip test for now\n      }\n\n      const title = 'Invoice link product';\n      const description = 'Our test invoice link product';\n      const payload = 'sku-p002';\n      const providerToken = PROVIDER_TOKEN;\n      const currency = 'EUR';\n      const prices = [{\n        label: 'NTBA API',\n        amount: 12000\n      }, {\n        label: 'tax',\n        amount: 10000\n      }];\n      return bot.createInvoiceLink(title, description, payload, providerToken, currency, prices).then(resp => {\n        console.log(resp);\n        assert.ok(is.string(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should create a new sticker set","suites":["TelegramBot","#createNewStickerSet"],"updatePoint":{"line":1619,"column":39,"index":57412},"line":1619,"code":"    it('should create a new sticker set', function test(done) {\n      const sticker = `${__dirname}/data/sticker.png`;\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      bot.createNewStickerSet(USERID, stickerPackName, 'Sticker Pack Title', sticker, '😍').then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n      setTimeout(() => done(), 2000);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get the sticker set given the name of the set","suites":["TelegramBot","#getStickerSet"],"updatePoint":{"line":1632,"column":60,"index":57989},"line":1632,"code":"    it('should get the sticker set given the name of the set', function test() {\n      return bot.getStickerSet(STICKER_SET_NAME).then(resp => {\n        assert.ok(is.object(resp));\n        assert.strictEqual(resp.name.toLowerCase(), STICKER_SET_NAME);\n        assert.ok(is.string(resp.title));\n        assert.ok(is.boolean(resp.contains_masks));\n        assert.ok(is.array(resp.stickers));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get the recent sticker set created given the name of the set","suites":["TelegramBot","#getStickerSet"],"updatePoint":{"line":1641,"column":75,"index":58412},"line":1641,"code":"    it('should get the recent sticker set created given the name of the set', function test() {\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      return bot.getStickerSet(stickerPackName).then(resp => {\n        assert.ok(is.object(resp));\n        assert.strictEqual(resp.name.toLowerCase(), stickerPackName.toLowerCase());\n        assert.ok(is.string(resp.title));\n        assert.ok(is.boolean(resp.contains_masks));\n        assert.ok(is.array(resp.stickers));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a sticker set thumb","suites":["TelegramBot","#setStickerSetThumb"],"updatePoint":{"line":1656,"column":38,"index":59062},"line":1656,"code":"    it('should set a sticker set thumb', function test() {\n      const stickerThumb = `${__dirname}/data/sticker_thumb.png`;\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      bot.setStickerSetThumb(USERID, stickerPackName, stickerThumb).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should upload a sticker from file","suites":["TelegramBot","#uploadStickerFile"],"updatePoint":{"line":1668,"column":41,"index":59569},"line":1668,"code":"    it('should upload a sticker from file', function test() {\n      const sticker = `${__dirname}/data/sticker.png`;\n      return bot.uploadStickerFile(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.string(resp.file_id));\n      });\n    }); // Other tests (eg. Buffer, URL) are skipped, because they rely on the same features as sendPhoto.","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send group of photos/videos as album","suites":["TelegramBot","#sendMediaGroup"],"updatePoint":{"line":1680,"column":51,"index":60126},"line":1680,"code":"    it('should send group of photos/videos as album', function test() {\n      return bot.sendMediaGroup(USERID, [{\n        type: 'photo',\n        media: `${__dirname}/data/photo.png`\n      }, {\n        type: 'video',\n        media: `${__dirname}/data/video.mp4`\n      }, {\n        type: 'photo',\n        media: FILE_ID\n      }], {\n        disable_notification: true\n      }).then(resp => {\n        assert.ok(is.array(resp));\n        assert.strictEqual(resp.length, 3);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a gif as an animation","suites":["TelegramBot","#sendAnimation"],"updatePoint":{"line":1702,"column":41,"index":60766},"line":1702,"code":"    it('should send a gif as an animation', function test() {\n      return bot.sendAnimation(USERID, `${__dirname}/data/photo.gif`).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n        describe('#editMessageMedia', function editMessageMediaSuite() {\n          before(function before() {\n            utils.handleRatelimit(bot, 'editMessageMedia', this);\n          });\n          it('should edit a media message', function nextTest() {\n            return bot.editMessageMedia({\n              type: 'animation',\n              media: resp.document.file_id,\n              caption: 'edited'\n            }, {\n              chat_id: resp.chat.id,\n              message_id: resp.message_id\n            }).then(editedResp => {\n              assert.ok(is.object(editedResp));\n              assert.ok(is.string(editedResp.caption));\n            });\n          });\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit a media message","suites":["TelegramBot","#sendAnimation","#editMessageMedia"],"updatePoint":{"line":1710,"column":41,"index":61184},"line":1710,"code":"          it('should edit a media message', function nextTest() {\n            return bot.editMessageMedia({\n              type: 'animation',\n              media: resp.document.file_id,\n              caption: 'edited'\n            }, {\n              chat_id: resp.chat.id,\n              message_id: resp.message_id\n            }).then(editedResp => {\n              assert.ok(is.object(editedResp));\n              assert.ok(is.string(editedResp.caption));\n            });\n          });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(1) fileOptions.filename","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":30,"column":34,"index":987},"line":30,"code":"      it('(1) fileOptions.filename', function test() {\n        const filename = 'custom-filename';\n        files.forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file, {\n            filename\n          });\n\n          assert.equal(data.options.filename, filename);\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(2) Stream#path","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":42,"column":25,"index":1317},"line":42,"code":"      it('(2) Stream#path', function test() {\n        if (!stream.path) {\n          this.skip('Stream#path unsupported');\n          return;\n        }\n\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, stream);\n\n        assert.equal(data.options.filename, path.basename(paths.audio));\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(3) filepath","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":54,"column":22,"index":1637},"line":54,"code":"      it('(3) filepath', function test() {\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, filepath);\n\n        assert.equal(data.options.filename, path.basename(paths.audio));\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(4) final default","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":61,"column":27,"index":1859},"line":61,"code":"      it('(4) final default', function test() {\n        [nonPathStream, buffer, nonDetectableBuffer].forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file);\n\n          assert.equal(data.options.filename, 'filename');\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(1) fileOpts.contentType","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":72,"column":34,"index":2225},"line":72,"code":"      it('(1) fileOpts.contentType', function test() {\n        const contentType = 'application/custom-type';\n        files.forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file, {\n            contentType\n          });\n\n          assert.equal(data.options.contentType, contentType);\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(2) Stream#path","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":84,"column":25,"index":2575},"line":84,"code":"      it('(2) Stream#path', function test() {\n        if (!stream.path) {\n          this.skip('Stream#path unsupported');\n          return;\n        }\n\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, stream);\n\n        assert.equal(data.options.contentType, 'audio/mpeg');\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(3) Buffer file-type","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":96,"column":30,"index":2892},"line":96,"code":"      it('(3) Buffer file-type', function test() {\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, buffer);\n\n        assert.equal(data.options.contentType, 'audio/mpeg');\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(4) filepath","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":103,"column":22,"index":3096},"line":103,"code":"      it('(4) filepath', function test() {\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, filepath);\n\n        assert.equal(data.options.contentType, 'audio/mpeg');\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(5) fileOptions.filename","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":110,"column":34,"index":3314},"line":110,"code":"      it('(5) fileOptions.filename', function test() {\n        [nonPathStream, nonDetectableBuffer].forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file, {\n            filename: 'image.gif'\n          });\n\n          assert.equal(data.options.contentType, 'image/gif');\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(6) Final default","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":121,"column":27,"index":3652},"line":121,"code":"      it('(6) Final default', function test() {\n        [nonPathStream, nonDetectableBuffer].forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file);\n\n          assert.equal(data.options.contentType, 'application/octet-stream');\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"should handle buffer path from fs.readStream","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":132,"column":50,"index":3993},"line":132,"code":"  it('should handle buffer path from fs.readStream', function test() {\n    let file;\n\n    try {\n      file = fs.createReadStream(Buffer.from(paths.audio));\n    } catch (ex) {\n      // Older Node.js versions do not support passing a Buffer\n      // representation of the path to fs.createReadStream()\n      if (ex instanceof TypeError) {\n        Promise.resolve();\n        return;\n      }\n    }\n\n    const [{\n      [type]: data\n    }] = bot._formatSendData('file', file);\n\n    assert.equal(data.options.filename, path.basename(paths.audio));\n  });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"should not accept file-paths if disallowed with constructor option","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":152,"column":72,"index":4562},"line":152,"code":"  it('should not accept file-paths if disallowed with constructor option', function test() {\n    const tgbot = new TelegramBot('token', {\n      filepath: false\n    });\n\n    const [formData, fileId] = tgbot._formatSendData('file', paths.audio);\n\n    assert.ok(fileId);\n    assert.ok(!formData);\n  });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"should allow stream.path that can not be parsed","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":162,"column":53,"index":4843},"line":162,"code":"  it('should allow stream.path that can not be parsed', function test() {\n    const stream = fs.createReadStream(paths.audio);\n    stream.path = '/?id=123'; // for example, 'http://example.com/?id=666'\n\n    assert.doesNotThrow(function assertDoesNotThrow() {\n      bot._formatSendData('file', stream);\n    });\n  });","file":"test.format-send-data.js","skipped":false,"dir":"test"}]}