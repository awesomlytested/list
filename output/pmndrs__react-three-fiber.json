{
    "repo": "pmndrs/react-three-fiber",
    "url": "https://github.com/pmndrs/react-three-fiber",
    "branch": "master",
    "configs": [
        {
            "package": "@react-three/fiber",
            "lang": "js",
            "dir": "packages/fiber/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@react-three/test-renderer",
            "lang": "ts",
            "dir": "packages/test-renderer/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "should tell me if something IS a function",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 12,
                "column": 47
            },
            "line": 12,
            "code": "  it('should tell me if something IS a function', () => {\n    expect(is.fun(myFunc)).toBe(true);\n    expect(is.fun(myObj)).toBe(false);\n    expect(is.fun(myStr)).toBe(false);\n    expect(is.fun(myNum)).toBe(false);\n    expect(is.fun(myUnd)).toBe(false);\n    expect(is.fun(myArr)).toBe(false);\n  });",
            "file": "core/is.test.ts",
            "skipped": false,
            "dir": "packages/fiber/tests"
        },
        {
            "name": "should tell me if something IS an object",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 20,
                "column": 46
            },
            "line": 20,
            "code": "  it('should tell me if something IS an object', () => {\n    expect(is.obj(myFunc)).toBe(false);\n    expect(is.obj(myObj)).toBe(true);\n    expect(is.obj(myStr)).toBe(false);\n    expect(is.obj(myNum)).toBe(false);\n    expect(is.obj(myUnd)).toBe(false);\n    expect(is.obj(myArr)).toBe(false);\n  });",
            "file": "core/is.test.ts",
            "skipped": false,
            "dir": "packages/fiber/tests"
        },
        {
            "name": "should tell me if something IS a string",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 28,
                "column": 45
            },
            "line": 28,
            "code": "  it('should tell me if something IS a string', () => {\n    expect(is.str(myFunc)).toBe(false);\n    expect(is.str(myObj)).toBe(false);\n    expect(is.str(myStr)).toBe(true);\n    expect(is.str(myNum)).toBe(false);\n    expect(is.str(myUnd)).toBe(false);\n    expect(is.str(myArr)).toBe(false);\n  });",
            "file": "core/is.test.ts",
            "skipped": false,
            "dir": "packages/fiber/tests"
        },
        {
            "name": "should tell me if something IS a number",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 36,
                "column": 45
            },
            "line": 36,
            "code": "  it('should tell me if something IS a number', () => {\n    expect(is.num(myFunc)).toBe(false);\n    expect(is.num(myObj)).toBe(false);\n    expect(is.num(myStr)).toBe(false);\n    expect(is.num(myNum)).toBe(true);\n    expect(is.num(myUnd)).toBe(false);\n    expect(is.num(myArr)).toBe(false);\n  });",
            "file": "core/is.test.ts",
            "skipped": false,
            "dir": "packages/fiber/tests"
        },
        {
            "name": "should tell me if something IS undefined",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 44,
                "column": 46
            },
            "line": 44,
            "code": "  it('should tell me if something IS undefined', () => {\n    expect(is.und(myFunc)).toBe(false);\n    expect(is.und(myObj)).toBe(false);\n    expect(is.und(myStr)).toBe(false);\n    expect(is.und(myNum)).toBe(false);\n    expect(is.und(myUnd)).toBe(true);\n    expect(is.und(myArr)).toBe(false);\n  });",
            "file": "core/is.test.ts",
            "skipped": false,
            "dir": "packages/fiber/tests"
        },
        {
            "name": "should tell me if something is an array",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 52,
                "column": 45
            },
            "line": 52,
            "code": "  it('should tell me if something is an array', () => {\n    expect(is.arr(myFunc)).toBe(false);\n    expect(is.arr(myObj)).toBe(false);\n    expect(is.arr(myStr)).toBe(false);\n    expect(is.arr(myNum)).toBe(false);\n    expect(is.arr(myUnd)).toBe(false);\n    expect(is.arr(myArr)).toBe(true);\n  });",
            "file": "core/is.test.ts",
            "skipped": false,
            "dir": "packages/fiber/tests"
        },
        {
            "name": "should tell me if something is equal",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 60,
                "column": 42
            },
            "line": 60,
            "code": "  it('should tell me if something is equal', () => {\n    expect(is.equ([], '')).toBe(false);\n    expect(is.equ('hello', 'hello')).toBe(true);\n    expect(is.equ(1, 1)).toBe(true);\n    const obj = {\n      type: 'Mesh'\n    };\n    expect(is.equ(obj, obj)).toBe(true);\n    const arr = [1, 2, 3];\n    expect(is.equ(arr, arr)).toBe(true);\n    expect(is.equ([1, 2, 3], [1, 2, 3])).toBe(true);\n  });",
            "file": "core/is.test.ts",
            "skipped": false,
            "dir": "packages/fiber/tests"
        },
        {
            "name": "should tell me if something IS a function",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 15,
                "column": 47
            },
            "line": 15,
            "code": "  it('should tell me if something IS a function', () => {\n    expect(is.fun(myFunc)).toBe(true)\n\n    expect(is.fun(myObj)).toBe(false)\n    expect(is.fun(myStr)).toBe(false)\n    expect(is.fun(myNum)).toBe(false)\n    expect(is.fun(myUnd)).toBe(false)\n    expect(is.fun(myArr)).toBe(false)\n  })",
            "file": "is.test.ts",
            "skipped": false,
            "dir": "packages/test-renderer/src/__tests__"
        },
        {
            "name": "should tell me if something IS an object",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 24,
                "column": 46
            },
            "line": 24,
            "code": "  it('should tell me if something IS an object', () => {\n    expect(is.obj(myFunc)).toBe(false)\n\n    expect(is.obj(myObj)).toBe(true)\n\n    expect(is.obj(myStr)).toBe(false)\n    expect(is.obj(myNum)).toBe(false)\n    expect(is.obj(myUnd)).toBe(false)\n    expect(is.obj(myArr)).toBe(false)\n  })",
            "file": "is.test.ts",
            "skipped": false,
            "dir": "packages/test-renderer/src/__tests__"
        },
        {
            "name": "should tell me if something IS a string",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 34,
                "column": 45
            },
            "line": 34,
            "code": "  it('should tell me if something IS a string', () => {\n    expect(is.str(myFunc)).toBe(false)\n    expect(is.str(myObj)).toBe(false)\n\n    expect(is.str(myStr)).toBe(true)\n\n    expect(is.str(myNum)).toBe(false)\n    expect(is.str(myUnd)).toBe(false)\n    expect(is.str(myArr)).toBe(false)\n  })",
            "file": "is.test.ts",
            "skipped": false,
            "dir": "packages/test-renderer/src/__tests__"
        },
        {
            "name": "should tell me if something IS a number",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 44,
                "column": 45
            },
            "line": 44,
            "code": "  it('should tell me if something IS a number', () => {\n    expect(is.num(myFunc)).toBe(false)\n    expect(is.num(myObj)).toBe(false)\n    expect(is.num(myStr)).toBe(false)\n\n    expect(is.num(myNum)).toBe(true)\n\n    expect(is.num(myUnd)).toBe(false)\n    expect(is.num(myArr)).toBe(false)\n  })",
            "file": "is.test.ts",
            "skipped": false,
            "dir": "packages/test-renderer/src/__tests__"
        },
        {
            "name": "should tell me if something IS undefined",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 54,
                "column": 46
            },
            "line": 54,
            "code": "  it('should tell me if something IS undefined', () => {\n    expect(is.und(myFunc)).toBe(false)\n    expect(is.und(myObj)).toBe(false)\n    expect(is.und(myStr)).toBe(false)\n    expect(is.und(myNum)).toBe(false)\n\n    expect(is.und(myUnd)).toBe(true)\n\n    expect(is.und(myArr)).toBe(false)\n  })",
            "file": "is.test.ts",
            "skipped": false,
            "dir": "packages/test-renderer/src/__tests__"
        },
        {
            "name": "should tell me if something is an array",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 64,
                "column": 45
            },
            "line": 64,
            "code": "  it('should tell me if something is an array', () => {\n    expect(is.arr(myFunc)).toBe(false)\n    expect(is.arr(myObj)).toBe(false)\n    expect(is.arr(myStr)).toBe(false)\n    expect(is.arr(myNum)).toBe(false)\n    expect(is.arr(myUnd)).toBe(false)\n\n    expect(is.arr(myArr)).toBe(true)\n  })",
            "file": "is.test.ts",
            "skipped": false,
            "dir": "packages/test-renderer/src/__tests__"
        },
        {
            "name": "should tell me if something is equal",
            "suites": [
                "is"
            ],
            "updatePoint": {
                "line": 73,
                "column": 42
            },
            "line": 73,
            "code": "  it('should tell me if something is equal', () => {\n    expect(is.equ([], '')).toBe(false)\n\n    expect(is.equ('hello', 'hello')).toBe(true)\n    expect(is.equ(1, 1)).toBe(true)\n    expect(is.equ(myObj, myObj)).toBe(true)\n    expect(is.equ(myArr, myArr)).toBe(true)\n    expect(is.equ([1, 2, 3], [1, 2, 3])).toBe(true)\n  })",
            "file": "is.test.ts",
            "skipped": false,
            "dir": "packages/test-renderer/src/__tests__"
        }
    ],
    "badge": "pmndrs__react-three-fiber.svg"
}