{"repo":"anuraghazra/github-readme-stats","url":"https://github.com/anuraghazra/github-readme-stats","branch":"master","configs":[{"package":"github-readme-stats","lang":"js","dir":"tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should test the request","suites":["Test /api/"],"updatePoint":{"line":102,"column":29,"index":1968},"line":102,"code":"  it(\"should test the request\", async () => {\n    const {\n      req,\n      res\n    } = faker({}, data);\n    await api(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderStatsCard(stats, { ...req.query\n    }));\n  });","file":"api.test.js","skipped":false,"dir":"tests"},{"name":"should render error card on error","suites":["Test /api/"],"updatePoint":{"line":112,"column":39,"index":2271},"line":112,"code":"  it(\"should render error card on error\", async () => {\n    const {\n      req,\n      res\n    } = faker({}, error);\n    await api(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderError(error.errors[0].message, \"Make sure the provided username is not an organization\"));\n  });","file":"api.test.js","skipped":false,"dir":"tests"},{"name":"should get the query options","suites":["Test /api/"],"updatePoint":{"line":121,"column":34,"index":2620},"line":121,"code":"  it(\"should get the query options\", async () => {\n    const {\n      req,\n      res\n    } = faker({\n      username: \"anuraghazra\",\n      hide: \"issues,prs,contribs\",\n      show_icons: true,\n      hide_border: true,\n      line_height: 100,\n      title_color: \"fff\",\n      icon_color: \"fff\",\n      text_color: \"fff\",\n      bg_color: \"fff\"\n    }, data);\n    await api(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderStatsCard(stats, {\n      hide: [\"issues\", \"prs\", \"contribs\"],\n      show_icons: true,\n      hide_border: true,\n      line_height: 100,\n      title_color: \"fff\",\n      icon_color: \"fff\",\n      text_color: \"fff\",\n      bg_color: \"fff\"\n    }));\n  });","file":"api.test.js","skipped":false,"dir":"tests"},{"name":"should have proper cache","suites":["Test /api/"],"updatePoint":{"line":149,"column":30,"index":3357},"line":149,"code":"  it(\"should have proper cache\", async () => {\n    const {\n      req,\n      res\n    } = faker({}, data);\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data);\n    await api(req, res);\n    expect(res.setHeader.mock.calls).toEqual([[\"Content-Type\", \"image/svg+xml\"], [\"Cache-Control\", `public, max-age=${CONSTANTS.TWO_HOURS}`]]);\n  });","file":"api.test.js","skipped":false,"dir":"tests"},{"name":"should set proper cache","suites":["Test /api/"],"updatePoint":{"line":158,"column":29,"index":3704},"line":158,"code":"  it(\"should set proper cache\", async () => {\n    const {\n      req,\n      res\n    } = faker({\n      cache_seconds: 8000\n    }, data);\n    await api(req, res);\n    expect(res.setHeader.mock.calls).toEqual([[\"Content-Type\", \"image/svg+xml\"], [\"Cache-Control\", `public, max-age=${8000}`]]);\n  });","file":"api.test.js","skipped":false,"dir":"tests"},{"name":"should set proper cache with clamped values","suites":["Test /api/"],"updatePoint":{"line":168,"column":49,"index":4019},"line":168,"code":"  it(\"should set proper cache with clamped values\", async () => {\n    {\n      let {\n        req,\n        res\n      } = faker({\n        cache_seconds: 200000\n      }, data);\n      await api(req, res);\n      expect(res.setHeader.mock.calls).toEqual([[\"Content-Type\", \"image/svg+xml\"], [\"Cache-Control\", `public, max-age=${CONSTANTS.ONE_DAY}`]]);\n    } // note i'm using block scoped vars\n\n    {\n      let {\n        req,\n        res\n      } = faker({\n        cache_seconds: 0\n      }, data);\n      await api(req, res);\n      expect(res.setHeader.mock.calls).toEqual([[\"Content-Type\", \"image/svg+xml\"], [\"Cache-Control\", `public, max-age=${CONSTANTS.TWO_HOURS}`]]);\n    }\n    {\n      let {\n        req,\n        res\n      } = faker({\n        cache_seconds: -10000\n      }, data);\n      await api(req, res);\n      expect(res.setHeader.mock.calls).toEqual([[\"Content-Type\", \"image/svg+xml\"], [\"Cache-Control\", `public, max-age=${CONSTANTS.TWO_HOURS}`]]);\n    }\n  });","file":"api.test.js","skipped":false,"dir":"tests"},{"name":"should add private contributions","suites":["Test /api/"],"updatePoint":{"line":201,"column":38,"index":4968},"line":201,"code":"  it(\"should add private contributions\", async () => {\n    const {\n      req,\n      res\n    } = faker({\n      username: \"anuraghazra\",\n      count_private: true\n    }, data);\n    await api(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderStatsCard({ ...stats,\n      totalCommits: stats.totalCommits + 100,\n      rank: calculateRank({\n        totalCommits: stats.totalCommits + 100,\n        totalRepos: 1,\n        followers: 0,\n        contributions: stats.contributedTo,\n        stargazers: stats.totalStars,\n        prs: stats.totalPRs,\n        issues: stats.totalIssues\n      })\n    }, {}));\n  });","file":"api.test.js","skipped":false,"dir":"tests"},{"name":"should calculate rank correctly","suites":["Test calculateRank"],"updatePoint":{"line":6,"column":37,"index":172},"line":6,"code":"  it(\"should calculate rank correctly\", () => {\n    expect(calculateRank({\n      totalCommits: 100,\n      totalRepos: 5,\n      followers: 100,\n      contributions: 61,\n      stargazers: 400,\n      prs: 300,\n      issues: 200\n    })).toStrictEqual({\n      level: \"A+\",\n      score: 49.16605417270399\n    });\n  });","file":"calculateRank.test.js","skipped":false,"dir":"tests"},{"name":"should hide border","suites":["Card"],"updatePoint":{"line":18,"column":24,"index":373},"line":18,"code":"  it(\"should hide border\", () => {\n    const card = new Card({});\n    card.setHideBorder(true);\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"stroke-opacity\", \"0\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should not hide border","suites":["Card"],"updatePoint":{"line":24,"column":28,"index":618},"line":24,"code":"  it(\"should not hide border\", () => {\n    const card = new Card({});\n    card.setHideBorder(false);\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"stroke-opacity\", \"1\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should have a custom title","suites":["Card"],"updatePoint":{"line":30,"column":32,"index":868},"line":30,"code":"  it(\"should have a custom title\", () => {\n    const card = new Card({\n      customTitle: \"custom title\",\n      defaultTitle: \"default title\"\n    });\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"card-title\")).toHaveTextContent(\"custom title\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should hide title","suites":["Card"],"updatePoint":{"line":38,"column":23,"index":1152},"line":38,"code":"  it(\"should hide title\", () => {\n    const card = new Card({});\n    card.setHideTitle(true);\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"card-title\")).toBeNull();\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should not hide title","suites":["Card"],"updatePoint":{"line":44,"column":27,"index":1370},"line":44,"code":"  it(\"should not hide title\", () => {\n    const card = new Card({});\n    card.setHideTitle(false);\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"card-title\")).toBeInTheDocument();\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"title should have prefix icon","suites":["Card"],"updatePoint":{"line":50,"column":35,"index":1606},"line":50,"code":"  it(\"title should have prefix icon\", () => {\n    const card = new Card({\n      title: \"ok\",\n      titlePrefixIcon: icons.contribs\n    });\n    document.body.innerHTML = card.render(``);\n    expect(document.getElementsByClassName(\"icon\")[0]).toBeInTheDocument();\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"title should not have prefix icon","suites":["Card"],"updatePoint":{"line":58,"column":39,"index":1878},"line":58,"code":"  it(\"title should not have prefix icon\", () => {\n    const card = new Card({\n      title: \"ok\"\n    });\n    document.body.innerHTML = card.render(``);\n    expect(document.getElementsByClassName(\"icon\")[0]).toBeUndefined();\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should have proper height, width","suites":["Card"],"updatePoint":{"line":65,"column":38,"index":2106},"line":65,"code":"  it(\"should have proper height, width\", () => {\n    const card = new Card({\n      height: 200,\n      width: 200,\n      title: \"ok\"\n    });\n    document.body.innerHTML = card.render(``);\n    expect(document.getElementsByTagName(\"svg\")[0]).toHaveAttribute(\"height\", \"200\");\n    expect(document.getElementsByTagName(\"svg\")[0]).toHaveAttribute(\"height\", \"200\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should have less height after title is hidden","suites":["Card"],"updatePoint":{"line":75,"column":51,"index":2484},"line":75,"code":"  it(\"should have less height after title is hidden\", () => {\n    const card = new Card({\n      height: 200,\n      title: \"ok\"\n    });\n    card.setHideTitle(true);\n    document.body.innerHTML = card.render(``);\n    expect(document.getElementsByTagName(\"svg\")[0]).toHaveAttribute(\"height\", \"170\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"main-card-body should have proper when title is visible","suites":["Card"],"updatePoint":{"line":84,"column":61,"index":2797},"line":84,"code":"  it(\"main-card-body should have proper when title is visible\", () => {\n    const card = new Card({\n      height: 200\n    });\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"main-card-body\")).toHaveAttribute(\"transform\", \"translate(0, 55)\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"main-card-body should have proper position after title is hidden","suites":["Card"],"updatePoint":{"line":91,"column":70,"index":3094},"line":91,"code":"  it(\"main-card-body should have proper position after title is hidden\", () => {\n    const card = new Card({\n      height: 200\n    });\n    card.setHideTitle(true);\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"main-card-body\")).toHaveAttribute(\"transform\", \"translate(0, 25)\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should render with correct colors","suites":["Card"],"updatePoint":{"line":99,"column":39,"index":3389},"line":99,"code":"  it(\"should render with correct colors\", () => {\n    // returns theme based colors with proper overrides and defaults\n    const {\n      titleColor,\n      textColor,\n      iconColor,\n      bgColor\n    } = getCardColors({\n      title_color: \"f00\",\n      icon_color: \"0f0\",\n      text_color: \"00f\",\n      bg_color: \"fff\",\n      theme: \"default\"\n    });\n    const card = new Card({\n      height: 200,\n      colors: {\n        titleColor,\n        textColor,\n        iconColor,\n        bgColor\n      }\n    });\n    document.body.innerHTML = card.render(``);\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    expect(headerClassStyles[\"fill\"].trim()).toBe(\"#f00\");\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"#fff\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should render gradient backgrounds","suites":["Card"],"updatePoint":{"line":129,"column":40,"index":4268},"line":129,"code":"  it(\"should render gradient backgrounds\", () => {\n    const {\n      titleColor,\n      textColor,\n      iconColor,\n      bgColor\n    } = getCardColors({\n      title_color: \"f00\",\n      icon_color: \"0f0\",\n      text_color: \"00f\",\n      bg_color: \"90,fff,000,f00\",\n      theme: \"default\"\n    });\n    const card = new Card({\n      height: 200,\n      colors: {\n        titleColor,\n        textColor,\n        iconColor,\n        bgColor\n      }\n    });\n    document.body.innerHTML = card.render(``);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"url(#gradient)\");\n    expect(document.querySelector(\"defs linearGradient\")).toHaveAttribute(\"gradientTransform\", \"rotate(90)\");\n    expect(document.querySelector(\"defs linearGradient stop:nth-child(1)\")).toHaveAttribute(\"stop-color\", \"#fff\");\n    expect(document.querySelector(\"defs linearGradient stop:nth-child(2)\")).toHaveAttribute(\"stop-color\", \"#000\");\n    expect(document.querySelector(\"defs linearGradient stop:nth-child(3)\")).toHaveAttribute(\"stop-color\", \"#f00\");\n  });","file":"card.test.js","skipped":false,"dir":"tests"},{"name":"should fetch correct user repo","suites":["Test fetchRepo"],"updatePoint":{"line":45,"column":36,"index":893},"line":45,"code":"  it(\"should fetch correct user repo\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_user);\n    let repo = await fetchRepo(\"anuraghazra\", \"convoychat\");\n    expect(repo).toStrictEqual({ ...data_repo.repository,\n      starCount: data_repo.repository.stargazers.totalCount\n    });\n  });","file":"fetchRepo.test.js","skipped":false,"dir":"tests"},{"name":"should fetch correct org repo","suites":["Test fetchRepo"],"updatePoint":{"line":52,"column":35,"index":1211},"line":52,"code":"  it(\"should fetch correct org repo\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_org);\n    let repo = await fetchRepo(\"anuraghazra\", \"convoychat\");\n    expect(repo).toStrictEqual({ ...data_repo.repository,\n      starCount: data_repo.repository.stargazers.totalCount\n    });\n  });","file":"fetchRepo.test.js","skipped":false,"dir":"tests"},{"name":"should throw error if user is found but repo is null","suites":["Test fetchRepo"],"updatePoint":{"line":59,"column":58,"index":1551},"line":59,"code":"  it(\"should throw error if user is found but repo is null\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, {\n      data: {\n        user: {\n          repository: null\n        },\n        organization: null\n      }\n    });\n    await expect(fetchRepo(\"anuraghazra\", \"convoychat\")).rejects.toThrow(\"User Repository Not found\");\n  });","file":"fetchRepo.test.js","skipped":false,"dir":"tests"},{"name":"should throw error if org is found but repo is null","suites":["Test fetchRepo"],"updatePoint":{"line":70,"column":57,"index":1908},"line":70,"code":"  it(\"should throw error if org is found but repo is null\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, {\n      data: {\n        user: null,\n        organization: {\n          repository: null\n        }\n      }\n    });\n    await expect(fetchRepo(\"anuraghazra\", \"convoychat\")).rejects.toThrow(\"Organization Repository Not found\");\n  });","file":"fetchRepo.test.js","skipped":false,"dir":"tests"},{"name":"should throw error if both user & org data not found","suites":["Test fetchRepo"],"updatePoint":{"line":81,"column":58,"index":2274},"line":81,"code":"  it(\"should throw error if both user & org data not found\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, {\n      data: {\n        user: null,\n        organization: null\n      }\n    });\n    await expect(fetchRepo(\"anuraghazra\", \"convoychat\")).rejects.toThrow(\"Not found\");\n  });","file":"fetchRepo.test.js","skipped":false,"dir":"tests"},{"name":"should throw error if repository is private","suites":["Test fetchRepo"],"updatePoint":{"line":90,"column":49,"index":2573},"line":90,"code":"  it(\"should throw error if repository is private\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, {\n      data: {\n        user: {\n          repository: { ...data_repo,\n            isPrivate: true\n          }\n        },\n        organization: null\n      }\n    });\n    await expect(fetchRepo(\"anuraghazra\", \"convoychat\")).rejects.toThrow(\"User Repository Not found\");\n  });","file":"fetchRepo.test.js","skipped":false,"dir":"tests"},{"name":"should fetch correct stats","suites":["Test fetchStats"],"updatePoint":{"line":74,"column":32,"index":1490},"line":74,"code":"  it(\"should fetch correct stats\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data);\n    let stats = await fetchStats(\"anuraghazra\");\n    const rank = calculateRank({\n      totalCommits: 100,\n      totalRepos: 5,\n      followers: 100,\n      contributions: 61,\n      stargazers: 400,\n      prs: 300,\n      issues: 200\n    });\n    expect(stats).toStrictEqual({\n      contributedTo: 61,\n      name: \"Anurag Hazra\",\n      totalCommits: 100,\n      totalIssues: 200,\n      totalPRs: 300,\n      totalStars: 400,\n      rank\n    });\n  });","file":"fetchStats.test.js","skipped":false,"dir":"tests"},{"name":"should throw error","suites":["Test fetchStats"],"updatePoint":{"line":96,"column":24,"index":2044},"line":96,"code":"  it(\"should throw error\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, error);\n    await expect(fetchStats(\"anuraghazra\")).rejects.toThrow(\"Could not resolve to a User with the login of 'noname'.\");\n  });","file":"fetchStats.test.js","skipped":false,"dir":"tests"},{"name":"should fetch and add private contributions","suites":["Test fetchStats"],"updatePoint":{"line":100,"column":48,"index":2304},"line":100,"code":"  it(\"should fetch and add private contributions\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data);\n    let stats = await fetchStats(\"anuraghazra\", true);\n    const rank = calculateRank({\n      totalCommits: 150,\n      totalRepos: 5,\n      followers: 100,\n      contributions: 61,\n      stargazers: 400,\n      prs: 300,\n      issues: 200\n    });\n    expect(stats).toStrictEqual({\n      contributedTo: 61,\n      name: \"Anurag Hazra\",\n      totalCommits: 150,\n      totalIssues: 200,\n      totalPRs: 300,\n      totalStars: 400,\n      rank\n    });\n  });","file":"fetchStats.test.js","skipped":false,"dir":"tests"},{"name":"should fetch total commits","suites":["Test fetchStats"],"updatePoint":{"line":122,"column":32,"index":2872},"line":122,"code":"  it(\"should fetch total commits\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data);\n    mock.onGet(\"https://api.github.com/search/commits?q=author:anuraghazra\").reply(200, {\n      total_count: 1000\n    });\n    let stats = await fetchStats(\"anuraghazra\", true, true);\n    const rank = calculateRank({\n      totalCommits: 1050,\n      totalRepos: 5,\n      followers: 100,\n      contributions: 61,\n      stargazers: 400,\n      prs: 300,\n      issues: 200\n    });\n    expect(stats).toStrictEqual({\n      contributedTo: 61,\n      name: \"Anurag Hazra\",\n      totalCommits: 1050,\n      totalIssues: 200,\n      totalPRs: 300,\n      totalStars: 400,\n      rank\n    });\n  });","file":"fetchStats.test.js","skipped":false,"dir":"tests"},{"name":"should fetch correct language data","suites":["FetchTopLanguages"],"updatePoint":{"line":75,"column":40,"index":1595},"line":75,"code":"  it(\"should fetch correct language data\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_langs);\n    let repo = await fetchTopLanguages(\"anuraghazra\");\n    expect(repo).toStrictEqual({\n      HTML: {\n        color: \"#0f0\",\n        name: \"HTML\",\n        size: 200\n      },\n      javascript: {\n        color: \"#0ff\",\n        name: \"javascript\",\n        size: 200\n      }\n    });\n  });","file":"fetchTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should fetch correct language data while excluding the 'test-repo-1' repository","suites":["FetchTopLanguages"],"updatePoint":{"line":91,"column":85,"index":2056},"line":91,"code":"  it(\"should fetch correct language data while excluding the 'test-repo-1' repository\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_langs);\n    let repo = await fetchTopLanguages(\"anuraghazra\", exclude_repo = [\"test-repo-1\"]);\n    expect(repo).toStrictEqual({\n      HTML: {\n        color: \"#0f0\",\n        name: \"HTML\",\n        size: 100\n      },\n      javascript: {\n        color: \"#0ff\",\n        name: \"javascript\",\n        size: 200\n      }\n    });\n  });","file":"fetchTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should throw error","suites":["FetchTopLanguages"],"updatePoint":{"line":107,"column":24,"index":2488},"line":107,"code":"  it(\"should throw error\", async () => {\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, error);\n    await expect(fetchTopLanguages(\"anuraghazra\")).rejects.toThrow(\"Could not resolve to a User with the login of 'noname'.\");\n  });","file":"fetchTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should fetch correct wakatime data","suites":["Wakatime fetcher"],"updatePoint":{"line":97,"column":40,"index":2342},"line":97,"code":"  it(\"should fetch correct wakatime data\", async () => {\n    const username = \"anuraghazra\";\n    mock.onGet(`https://wakatime.com/api/v1/users/${username}/stats/?is_including_today=true`).reply(200, wakaTimeData);\n    const repo = await fetchWakatimeStats({\n      username\n    });\n    expect(repo).toMatchInlineSnapshot(`\n      Object {\n        \"categories\": Array [\n          Object {\n            \"digital\": \"22:40\",\n            \"hours\": 22,\n            \"minutes\": 40,\n            \"name\": \"Coding\",\n            \"percent\": 100,\n            \"text\": \"22 hrs 40 mins\",\n            \"total_seconds\": 81643.570077,\n          },\n        ],\n        \"daily_average\": 16095,\n        \"daily_average_including_other_language\": 16329,\n        \"days_including_holidays\": 7,\n        \"days_minus_holidays\": 5,\n        \"editors\": Array [\n          Object {\n            \"digital\": \"22:40\",\n            \"hours\": 22,\n            \"minutes\": 40,\n            \"name\": \"VS Code\",\n            \"percent\": 100,\n            \"text\": \"22 hrs 40 mins\",\n            \"total_seconds\": 81643.570077,\n          },\n        ],\n        \"holidays\": 2,\n        \"human_readable_daily_average\": \"4 hrs 28 mins\",\n        \"human_readable_daily_average_including_other_language\": \"4 hrs 32 mins\",\n        \"human_readable_total\": \"22 hrs 21 mins\",\n        \"human_readable_total_including_other_language\": \"22 hrs 40 mins\",\n        \"id\": \"random hash\",\n        \"is_already_updating\": false,\n        \"is_coding_activity_visible\": true,\n        \"is_including_today\": false,\n        \"is_other_usage_visible\": true,\n        \"is_stuck\": false,\n        \"is_up_to_date\": true,\n        \"languages\": Array [\n          Object {\n            \"digital\": \"0:19\",\n            \"hours\": 0,\n            \"minutes\": 19,\n            \"name\": \"Other\",\n            \"percent\": 1.43,\n            \"text\": \"19 mins\",\n            \"total_seconds\": 1170.434361,\n          },\n          Object {\n            \"digital\": \"0:01\",\n            \"hours\": 0,\n            \"minutes\": 1,\n            \"name\": \"TypeScript\",\n            \"percent\": 0.1,\n            \"text\": \"1 min\",\n            \"total_seconds\": 83.293809,\n          },\n          Object {\n            \"digital\": \"0:00\",\n            \"hours\": 0,\n            \"minutes\": 0,\n            \"name\": \"YAML\",\n            \"percent\": 0.07,\n            \"text\": \"0 secs\",\n            \"total_seconds\": 54.975151,\n          },\n        ],\n        \"operating_systems\": Array [\n          Object {\n            \"digital\": \"22:40\",\n            \"hours\": 22,\n            \"minutes\": 40,\n            \"name\": \"Mac\",\n            \"percent\": 100,\n            \"text\": \"22 hrs 40 mins\",\n            \"total_seconds\": 81643.570077,\n          },\n        ],\n        \"percent_calculated\": 100,\n        \"range\": \"last_7_days\",\n        \"status\": \"ok\",\n        \"timeout\": 15,\n        \"total_seconds\": 80473.135716,\n        \"total_seconds_including_other_language\": 81643.570077,\n        \"user_id\": \"random hash\",\n        \"username\": \"anuraghazra\",\n        \"writes_only\": false,\n      }\n    `);\n  });","file":"fetchWakatime.test.js","skipped":false,"dir":"tests"},{"name":"should throw error","suites":["Wakatime fetcher"],"updatePoint":{"line":195,"column":24,"index":5354},"line":195,"code":"  it(\"should throw error\", async () => {\n    mock.onGet(/\\/https:\\/\\/wakatime\\.com\\/api/).reply(404, wakaTimeData);\n    await expect(fetchWakatimeStats(\"noone\")).rejects.toThrow(\"Wakatime user not found, make sure you have a wakatime profile\");\n  });","file":"fetchWakatime.test.js","skipped":false,"dir":"tests"},{"name":"should work with row & col layouts","suites":["flexLayout"],"updatePoint":{"line":6,"column":40,"index":130},"line":6,"code":"  it(\"should work with row & col layouts\", () => {\n    const layout = flexLayout({\n      items: [\"<text>1</text>\", \"<text>2</text>\"],\n      gap: 60\n    });\n    expect(layout).toStrictEqual([`<g transform=\"translate(0, 0)\"><text>1</text></g>`, `<g transform=\"translate(60, 0)\"><text>2</text></g>`]);\n    const columns = flexLayout({\n      items: [\"<text>1</text>\", \"<text>2</text>\"],\n      gap: 60,\n      direction: \"column\"\n    });\n    expect(columns).toStrictEqual([`<g transform=\"translate(0, 0)\"><text>1</text></g>`, `<g transform=\"translate(0, 60)\"><text>2</text></g>`]);\n  });","file":"flexLayout.test.js","skipped":false,"dir":"tests"},{"name":"should work with sizes","suites":["flexLayout"],"updatePoint":{"line":19,"column":28,"index":700},"line":19,"code":"  it(\"should work with sizes\", () => {\n    const layout = flexLayout({\n      items: [\"<text>1</text>\", \"<text>2</text>\", \"<text>3</text>\", \"<text>4</text>\"],\n      gap: 20,\n      sizes: [200, 100, 55, 25]\n    });\n    expect(layout).toStrictEqual([`<g transform=\"translate(0, 0)\"><text>1</text></g>`, `<g transform=\"translate(220, 0)\"><text>2</text></g>`, `<g transform=\"translate(340, 0)\"><text>3</text></g>`, `<g transform=\"translate(415, 0)\"><text>4</text></g>`]);\n  });","file":"flexLayout.test.js","skipped":false,"dir":"tests"},{"name":"should test the request","suites":["Test /api/pin"],"updatePoint":{"line":45,"column":29,"index":914},"line":45,"code":"  it(\"should test the request\", async () => {\n    const req = {\n      query: {\n        username: \"anuraghazra\",\n        repo: \"convoychat\"\n      }\n    };\n    const res = {\n      setHeader: jest.fn(),\n      send: jest.fn()\n    };\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_user);\n    await pin(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderRepoCard({ ...data_repo.repository,\n      starCount: data_repo.repository.stargazers.totalCount\n    }));\n  });","file":"pin.test.js","skipped":false,"dir":"tests"},{"name":"should get the query options","suites":["Test /api/pin"],"updatePoint":{"line":63,"column":34,"index":1474},"line":63,"code":"  it(\"should get the query options\", async () => {\n    const req = {\n      query: {\n        username: \"anuraghazra\",\n        repo: \"convoychat\",\n        title_color: \"fff\",\n        icon_color: \"fff\",\n        text_color: \"fff\",\n        bg_color: \"fff\",\n        full_name: \"1\"\n      }\n    };\n    const res = {\n      setHeader: jest.fn(),\n      send: jest.fn()\n    };\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_user);\n    await pin(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderRepoCard({ ...data_repo.repository,\n      starCount: data_repo.repository.stargazers.totalCount\n    }, { ...req.query\n    }));\n  });","file":"pin.test.js","skipped":false,"dir":"tests"},{"name":"should render error card if user repo not found","suites":["Test /api/pin"],"updatePoint":{"line":87,"column":53,"index":2206},"line":87,"code":"  it(\"should render error card if user repo not found\", async () => {\n    const req = {\n      query: {\n        username: \"anuraghazra\",\n        repo: \"convoychat\"\n      }\n    };\n    const res = {\n      setHeader: jest.fn(),\n      send: jest.fn()\n    };\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, {\n      data: {\n        user: {\n          repository: null\n        },\n        organization: null\n      }\n    });\n    await pin(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderError(\"User Repository Not found\"));\n  });","file":"pin.test.js","skipped":false,"dir":"tests"},{"name":"should render error card if org repo not found","suites":["Test /api/pin"],"updatePoint":{"line":110,"column":52,"index":2817},"line":110,"code":"  it(\"should render error card if org repo not found\", async () => {\n    const req = {\n      query: {\n        username: \"anuraghazra\",\n        repo: \"convoychat\"\n      }\n    };\n    const res = {\n      setHeader: jest.fn(),\n      send: jest.fn()\n    };\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, {\n      data: {\n        user: null,\n        organization: {\n          repository: null\n        }\n      }\n    });\n    await pin(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderError(\"Organization Repository Not found\"));\n  });","file":"pin.test.js","skipped":false,"dir":"tests"},{"name":"should render correctly","suites":["Test renderRepoCard"],"updatePoint":{"line":28,"column":29,"index":682},"line":28,"code":"  it(\"should render correctly\", () => {\n    document.body.innerHTML = renderRepoCard(data_repo.repository);\n    const [header] = document.getElementsByClassName(\"header\");\n    expect(header).toHaveTextContent(\"convoychat\");\n    expect(header).not.toHaveTextContent(\"anuraghazra\");\n    expect(document.getElementsByClassName(\"description\")[0]).toHaveTextContent(\"Help us take over the world! React + TS + GraphQL Chat App\");\n    expect(queryByTestId(document.body, \"stargazers\")).toHaveTextContent(\"38k\");\n    expect(queryByTestId(document.body, \"forkcount\")).toHaveTextContent(\"100\");\n    expect(queryByTestId(document.body, \"lang-name\")).toHaveTextContent(\"TypeScript\");\n    expect(queryByTestId(document.body, \"lang-color\")).toHaveAttribute(\"fill\", \"#2b7489\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should display username in title (full repo name)","suites":["Test renderRepoCard"],"updatePoint":{"line":39,"column":55,"index":1477},"line":39,"code":"  it(\"should display username in title (full repo name)\", () => {\n    document.body.innerHTML = renderRepoCard(data_repo.repository, {\n      show_owner: true\n    });\n    expect(document.getElementsByClassName(\"header\")[0]).toHaveTextContent(\"anuraghazra/convoychat\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should trim header","suites":["Test renderRepoCard"],"updatePoint":{"line":45,"column":24,"index":1720},"line":45,"code":"  it(\"should trim header\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      name: \"some-really-long-repo-name-for-test-purposes\"\n    });\n    expect(document.getElementsByClassName(\"header\")[0].textContent).toBe(\"some-really-long-repo-name-for-test...\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should trim description","suites":["Test renderRepoCard"],"updatePoint":{"line":51,"column":29,"index":2022},"line":51,"code":"  it(\"should trim description\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      description: \"The quick brown fox jumps over the lazy dog is an English-language pangram—a sentence that contains all of the letters of the English alphabet\"\n    });\n    expect(document.getElementsByClassName(\"description\")[0].children[0].textContent).toBe(\"The quick brown fox jumps over the lazy dog is an\");\n    expect(document.getElementsByClassName(\"description\")[0].children[1].textContent).toBe(\"English-language pangram—a sentence that contains all\"); // Should not trim\n\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      description: \"Small text should not trim\"\n    });\n    expect(document.getElementsByClassName(\"description\")[0]).toHaveTextContent(\"Small text should not trim\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render emojis","suites":["Test renderRepoCard"],"updatePoint":{"line":63,"column":26,"index":2862},"line":63,"code":"  it(\"should render emojis\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      description: \"This is a text with a :poop: poo emoji\"\n    }); // poop emoji may not show in all editors but it's there between \"a\" and \"poo\"\n\n    expect(document.getElementsByClassName(\"description\")[0]).toHaveTextContent(\"This is a text with a 💩 poo emoji\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should hide language if primaryLanguage is null & fallback to correct values","suites":["Test renderRepoCard"],"updatePoint":{"line":70,"column":82,"index":3300},"line":70,"code":"  it(\"should hide language if primaryLanguage is null & fallback to correct values\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      primaryLanguage: null\n    });\n    expect(queryByTestId(document.body, \"primary-lang\")).toBeNull();\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      primaryLanguage: {\n        color: null,\n        name: null\n      }\n    });\n    expect(queryByTestId(document.body, \"primary-lang\")).toBeInTheDocument();\n    expect(queryByTestId(document.body, \"lang-color\")).toHaveAttribute(\"fill\", \"#333\");\n    expect(queryByTestId(document.body, \"lang-name\")).toHaveTextContent(\"Unspecified\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render default colors properly","suites":["Test renderRepoCard"],"updatePoint":{"line":85,"column":43,"index":3944},"line":85,"code":"  it(\"should render default colors properly\", () => {\n    document.body.innerHTML = renderRepoCard(data_repo.repository);\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const descClassStyles = stylesObject[\":host\"][\".description \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(\"#2f80ed\");\n    expect(descClassStyles.fill.trim()).toBe(\"#333\");\n    expect(iconClassStyles.fill.trim()).toBe(\"#586069\");\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"#fffefe\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors properly","suites":["Test renderRepoCard"],"updatePoint":{"line":97,"column":42,"index":4635},"line":97,"code":"  it(\"should render custom colors properly\", () => {\n    const customColors = {\n      title_color: \"5a0\",\n      icon_color: \"1b998b\",\n      text_color: \"9991\",\n      bg_color: \"252525\"\n    };\n    document.body.innerHTML = renderRepoCard(data_repo.repository, { ...customColors\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const descClassStyles = stylesObject[\":host\"][\".description \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(`#${customColors.title_color}`);\n    expect(descClassStyles.fill.trim()).toBe(`#${customColors.text_color}`);\n    expect(iconClassStyles.fill.trim()).toBe(`#${customColors.icon_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"#252525\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render with all the themes","suites":["Test renderRepoCard"],"updatePoint":{"line":116,"column":39,"index":5551},"line":116,"code":"  it(\"should render with all the themes\", () => {\n    Object.keys(themes).forEach(name => {\n      document.body.innerHTML = renderRepoCard(data_repo.repository, {\n        theme: name\n      });\n      const styleTag = document.querySelector(\"style\");\n      const stylesObject = cssToObject(styleTag.innerHTML);\n      const headerClassStyles = stylesObject[\":host\"][\".header \"];\n      const descClassStyles = stylesObject[\":host\"][\".description \"];\n      const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n      expect(headerClassStyles.fill.trim()).toBe(`#${themes[name].title_color}`);\n      expect(descClassStyles.fill.trim()).toBe(`#${themes[name].text_color}`);\n      expect(iconClassStyles.fill.trim()).toBe(`#${themes[name].icon_color}`);\n      expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes[name].bg_color}`);\n    });\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors with themes","suites":["Test renderRepoCard"],"updatePoint":{"line":132,"column":45,"index":6428},"line":132,"code":"  it(\"should render custom colors with themes\", () => {\n    document.body.innerHTML = renderRepoCard(data_repo.repository, {\n      title_color: \"5a0\",\n      theme: \"radical\"\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const descClassStyles = stylesObject[\":host\"][\".description \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(\"#5a0\");\n    expect(descClassStyles.fill.trim()).toBe(`#${themes.radical.text_color}`);\n    expect(iconClassStyles.fill.trim()).toBe(`#${themes.radical.icon_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes.radical.bg_color}`);\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors with themes and fallback to default colors if invalid","suites":["Test renderRepoCard"],"updatePoint":{"line":147,"column":87,"index":7286},"line":147,"code":"  it(\"should render custom colors with themes and fallback to default colors if invalid\", () => {\n    document.body.innerHTML = renderRepoCard(data_repo.repository, {\n      title_color: \"invalid color\",\n      text_color: \"invalid color\",\n      theme: \"radical\"\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const descClassStyles = stylesObject[\":host\"][\".description \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(`#${themes.default.title_color}`);\n    expect(descClassStyles.fill.trim()).toBe(`#${themes.default.text_color}`);\n    expect(iconClassStyles.fill.trim()).toBe(`#${themes.radical.icon_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes.radical.bg_color}`);\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should not render star count or fork count if either of the are zero","suites":["Test renderRepoCard"],"updatePoint":{"line":163,"column":74,"index":8202},"line":163,"code":"  it(\"should not render star count or fork count if either of the are zero\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      starCount: 0\n    });\n    expect(queryByTestId(document.body, \"stargazers\")).toBeNull();\n    expect(queryByTestId(document.body, \"forkcount\")).toBeInTheDocument();\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      starCount: 1,\n      forkCount: 0\n    });\n    expect(queryByTestId(document.body, \"stargazers\")).toBeInTheDocument();\n    expect(queryByTestId(document.body, \"forkcount\")).toBeNull();\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      starCount: 0,\n      forkCount: 0\n    });\n    expect(queryByTestId(document.body, \"stargazers\")).toBeNull();\n    expect(queryByTestId(document.body, \"forkcount\")).toBeNull();\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render badges","suites":["Test renderRepoCard"],"updatePoint":{"line":182,"column":26,"index":8999},"line":182,"code":"  it(\"should render badges\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      isArchived: true\n    });\n    expect(queryByTestId(document.body, \"badge\")).toHaveTextContent(\"Archived\");\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      isTemplate: true\n    });\n    expect(queryByTestId(document.body, \"badge\")).toHaveTextContent(\"Template\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should not render template","suites":["Test renderRepoCard"],"updatePoint":{"line":192,"column":32,"index":9416},"line":192,"code":"  it(\"should not render template\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository\n    });\n    expect(queryByTestId(document.body, \"badge\")).toBeNull();\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render translated badges","suites":["Test renderRepoCard"],"updatePoint":{"line":197,"column":37,"index":9611},"line":197,"code":"  it(\"should render translated badges\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      isArchived: true\n    }, {\n      locale: \"cn\"\n    });\n    expect(queryByTestId(document.body, \"badge\")).toHaveTextContent(\"已归档\");\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      isTemplate: true\n    }, {\n      locale: \"cn\"\n    });\n    expect(queryByTestId(document.body, \"badge\")).toHaveTextContent(\"模板\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render without rounding","suites":["Test renderRepoCard"],"updatePoint":{"line":211,"column":36,"index":10077},"line":211,"code":"  it(\"should render without rounding\", () => {\n    document.body.innerHTML = renderRepoCard(data_repo.repository, {\n      border_radius: \"0\"\n    });\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"0\");\n    document.body.innerHTML = renderRepoCard(data_repo.repository, {});\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"4.5\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should fallback to default description","suites":["Test renderRepoCard"],"updatePoint":{"line":219,"column":44,"index":10456},"line":219,"code":"  it(\"should fallback to default description\", () => {\n    document.body.innerHTML = renderRepoCard({ ...data_repo.repository,\n      description: undefined,\n      isArchived: true\n    });\n    expect(document.getElementsByClassName(\"description\")[0]).toHaveTextContent(\"No description provided\");\n  });","file":"renderRepoCard.test.js","skipped":false,"dir":"tests"},{"name":"should render correctly","suites":["Test renderStatsCard"],"updatePoint":{"line":28,"column":29,"index":586},"line":28,"code":"  it(\"should render correctly\", () => {\n    document.body.innerHTML = renderStatsCard(stats);\n    expect(document.getElementsByClassName(\"header\")[0].textContent).toBe(\"Anurag Hazra's GitHub Stats\");\n    expect(document.body.getElementsByTagName(\"svg\")[0].getAttribute(\"height\")).toBe(\"195\");\n    expect(getByTestId(document.body, \"stars\").textContent).toBe(\"100\");\n    expect(getByTestId(document.body, \"commits\").textContent).toBe(\"200\");\n    expect(getByTestId(document.body, \"issues\").textContent).toBe(\"300\");\n    expect(getByTestId(document.body, \"prs\").textContent).toBe(\"400\");\n    expect(getByTestId(document.body, \"contribs\").textContent).toBe(\"500\");\n    expect(queryByTestId(document.body, \"card-bg\")).toBeInTheDocument();\n    expect(queryByTestId(document.body, \"rank-circle\")).toBeInTheDocument();\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should have proper name apostrophe","suites":["Test renderStatsCard"],"updatePoint":{"line":40,"column":40,"index":1415},"line":40,"code":"  it(\"should have proper name apostrophe\", () => {\n    document.body.innerHTML = renderStatsCard({ ...stats,\n      name: \"Anil Das\"\n    });\n    expect(document.getElementsByClassName(\"header\")[0].textContent).toBe(\"Anil Das' GitHub Stats\");\n    document.body.innerHTML = renderStatsCard({ ...stats,\n      name: \"Felix\"\n    });\n    expect(document.getElementsByClassName(\"header\")[0].textContent).toBe(\"Felix' GitHub Stats\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should hide individual stats","suites":["Test renderStatsCard"],"updatePoint":{"line":50,"column":34,"index":1840},"line":50,"code":"  it(\"should hide individual stats\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      hide: [\"issues\", \"prs\", \"contribs\"]\n    });\n    expect(document.body.getElementsByTagName(\"svg\")[0].getAttribute(\"height\")).toBe(\"150\"); // height should be 150 because we clamped it.\n\n    expect(queryByTestId(document.body, \"stars\")).toBeDefined();\n    expect(queryByTestId(document.body, \"commits\")).toBeDefined();\n    expect(queryByTestId(document.body, \"issues\")).toBeNull();\n    expect(queryByTestId(document.body, \"prs\")).toBeNull();\n    expect(queryByTestId(document.body, \"contribs\")).toBeNull();\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should hide_rank","suites":["Test renderStatsCard"],"updatePoint":{"line":62,"column":22,"index":2445},"line":62,"code":"  it(\"should hide_rank\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      hide_rank: true\n    });\n    expect(queryByTestId(document.body, \"rank-circle\")).not.toBeInTheDocument();\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render default colors properly","suites":["Test renderStatsCard"],"updatePoint":{"line":68,"column":43,"index":2671},"line":68,"code":"  it(\"should render default colors properly\", () => {\n    document.body.innerHTML = renderStatsCard(stats);\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.textContent);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const statClassStyles = stylesObject[\":host\"][\".stat \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(\"#2f80ed\");\n    expect(statClassStyles.fill.trim()).toBe(\"#333\");\n    expect(iconClassStyles.fill.trim()).toBe(\"#4c71f2\");\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"#fffefe\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors properly","suites":["Test renderStatsCard"],"updatePoint":{"line":80,"column":42,"index":3343},"line":80,"code":"  it(\"should render custom colors properly\", () => {\n    const customColors = {\n      title_color: \"5a0\",\n      icon_color: \"1b998b\",\n      text_color: \"9991\",\n      bg_color: \"252525\"\n    };\n    document.body.innerHTML = renderStatsCard(stats, { ...customColors\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const statClassStyles = stylesObject[\":host\"][\".stat \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(`#${customColors.title_color}`);\n    expect(statClassStyles.fill.trim()).toBe(`#${customColors.text_color}`);\n    expect(iconClassStyles.fill.trim()).toBe(`#${customColors.icon_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"#252525\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors with themes","suites":["Test renderStatsCard"],"updatePoint":{"line":99,"column":45,"index":4244},"line":99,"code":"  it(\"should render custom colors with themes\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      title_color: \"5a0\",\n      theme: \"radical\"\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const statClassStyles = stylesObject[\":host\"][\".stat \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(\"#5a0\");\n    expect(statClassStyles.fill.trim()).toBe(`#${themes.radical.text_color}`);\n    expect(iconClassStyles.fill.trim()).toBe(`#${themes.radical.icon_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes.radical.bg_color}`);\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render with all the themes","suites":["Test renderStatsCard"],"updatePoint":{"line":114,"column":39,"index":5033},"line":114,"code":"  it(\"should render with all the themes\", () => {\n    Object.keys(themes).forEach(name => {\n      document.body.innerHTML = renderStatsCard(stats, {\n        theme: name\n      });\n      const styleTag = document.querySelector(\"style\");\n      const stylesObject = cssToObject(styleTag.innerHTML);\n      const headerClassStyles = stylesObject[\":host\"][\".header \"];\n      const statClassStyles = stylesObject[\":host\"][\".stat \"];\n      const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n      expect(headerClassStyles.fill.trim()).toBe(`#${themes[name].title_color}`);\n      expect(statClassStyles.fill.trim()).toBe(`#${themes[name].text_color}`);\n      expect(iconClassStyles.fill.trim()).toBe(`#${themes[name].icon_color}`);\n      expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes[name].bg_color}`);\n    });\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors with themes and fallback to default colors if invalid","suites":["Test renderStatsCard"],"updatePoint":{"line":130,"column":87,"index":5931},"line":130,"code":"  it(\"should render custom colors with themes and fallback to default colors if invalid\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      title_color: \"invalid color\",\n      text_color: \"invalid color\",\n      theme: \"radical\"\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerClassStyles = stylesObject[\":host\"][\".header \"];\n    const statClassStyles = stylesObject[\":host\"][\".stat \"];\n    const iconClassStyles = stylesObject[\":host\"][\".icon \"];\n    expect(headerClassStyles.fill.trim()).toBe(`#${themes.default.title_color}`);\n    expect(statClassStyles.fill.trim()).toBe(`#${themes.default.text_color}`);\n    expect(iconClassStyles.fill.trim()).toBe(`#${themes.radical.icon_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes.radical.bg_color}`);\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render icons correctly","suites":["Test renderStatsCard"],"updatePoint":{"line":146,"column":35,"index":6787},"line":146,"code":"  it(\"should render icons correctly\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      show_icons: true\n    });\n    expect(queryAllByTestId(document.body, \"icon\")[0]).toBeDefined();\n    expect(queryByTestId(document.body, \"stars\")).toBeDefined();\n    expect(queryByTestId(document.body, \"stars\").previousElementSibling // the label\n    ).toHaveAttribute(\"x\", \"25\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should not have icons if show_icons is false","suites":["Test renderStatsCard"],"updatePoint":{"line":155,"column":50,"index":7194},"line":155,"code":"  it(\"should not have icons if show_icons is false\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      show_icons: false\n    });\n    expect(queryAllByTestId(document.body, \"icon\")[0]).not.toBeDefined();\n    expect(queryByTestId(document.body, \"stars\")).toBeDefined();\n    expect(queryByTestId(document.body, \"stars\").previousElementSibling // the label\n    ).not.toHaveAttribute(\"x\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should auto resize if hide_rank is true","suites":["Test renderStatsCard"],"updatePoint":{"line":164,"column":45,"index":7599},"line":164,"code":"  it(\"should auto resize if hide_rank is true\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      hide_rank: true\n    });\n    expect(document.body.getElementsByTagName(\"svg\")[0].getAttribute(\"width\")).toBe(\"305.81250000000006\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should auto resize if hide_rank is true & custom_title is set","suites":["Test renderStatsCard"],"updatePoint":{"line":170,"column":67,"index":7875},"line":170,"code":"  it(\"should auto resize if hide_rank is true & custom_title is set\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      hide_rank: true,\n      custom_title: \"Hello world\"\n    });\n    expect(document.body.getElementsByTagName(\"svg\")[0].getAttribute(\"width\")).toBe(\"270\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render translations","suites":["Test renderStatsCard"],"updatePoint":{"line":177,"column":32,"index":8136},"line":177,"code":"  it(\"should render translations\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      locale: \"cn\"\n    });\n    expect(document.getElementsByClassName(\"header\")[0].textContent).toBe(\"Anurag Hazra 的 GitHub 统计数据\");\n    expect(document.querySelector('g[transform=\"translate(0, 0)\"]>.stagger>.stat.bold').textContent).toMatchInlineSnapshot(`\"获标星数（star）:\"`);\n    expect(document.querySelector('g[transform=\"translate(0, 25)\"]>.stagger>.stat.bold').textContent).toMatchInlineSnapshot(`\"累计提交数（commit） (2022):\"`);\n    expect(document.querySelector('g[transform=\"translate(0, 50)\"]>.stagger>.stat.bold').textContent).toMatchInlineSnapshot(`\"拉取请求数（PR）:\"`);\n    expect(document.querySelector('g[transform=\"translate(0, 75)\"]>.stagger>.stat.bold').textContent).toMatchInlineSnapshot(`\"指出问题数（issue）:\"`);\n    expect(document.querySelector('g[transform=\"translate(0, 100)\"]>.stagger>.stat.bold').textContent).toMatchInlineSnapshot(`\"参与项目数:\"`);\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render without rounding","suites":["Test renderStatsCard"],"updatePoint":{"line":188,"column":36,"index":9092},"line":188,"code":"  it(\"should render without rounding\", () => {\n    document.body.innerHTML = renderStatsCard(stats, {\n      border_radius: \"0\"\n    });\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"0\");\n    document.body.innerHTML = renderStatsCard(stats, {});\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"4.5\");\n  });","file":"renderStatsCard.test.js","skipped":false,"dir":"tests"},{"name":"should render correctly","suites":["Test renderTopLanguages"],"updatePoint":{"line":32,"column":29,"index":634},"line":32,"code":"  it(\"should render correctly\", () => {\n    document.body.innerHTML = renderTopLanguages(langs);\n    expect(queryByTestId(document.body, \"header\")).toHaveTextContent(\"Most Used Languages\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[0]).toHaveTextContent(\"HTML\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[1]).toHaveTextContent(\"javascript\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[2]).toHaveTextContent(\"css\");\n    expect(queryAllByTestId(document.body, \"lang-progress\")[0]).toHaveAttribute(\"width\", \"40%\");\n    expect(queryAllByTestId(document.body, \"lang-progress\")[1]).toHaveAttribute(\"width\", \"40%\");\n    expect(queryAllByTestId(document.body, \"lang-progress\")[2]).toHaveAttribute(\"width\", \"20%\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should hide languages when hide is passed","suites":["Test renderTopLanguages"],"updatePoint":{"line":42,"column":47,"index":1405},"line":42,"code":"  it(\"should hide languages when hide is passed\", () => {\n    document.body.innerHTML = renderTopLanguages(langs, {\n      hide: [\"HTML\"]\n    });\n    expect(queryAllByTestId(document.body, \"lang-name\")[0]).toBeInTheDocument(\"javascript\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[1]).toBeInTheDocument(\"css\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[2]).not.toBeDefined(); // multiple languages passed\n\n    document.body.innerHTML = renderTopLanguages(langs, {\n      hide: [\"HTML\", \"css\"]\n    });\n    expect(queryAllByTestId(document.body, \"lang-name\")[0]).toBeInTheDocument(\"javascript\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[1]).not.toBeDefined();\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should resize the height correctly depending on langs","suites":["Test renderTopLanguages"],"updatePoint":{"line":56,"column":59,"index":2122},"line":56,"code":"  it(\"should resize the height correctly depending on langs\", () => {\n    document.body.innerHTML = renderTopLanguages(langs, {});\n    expect(document.querySelector(\"svg\")).toHaveAttribute(\"height\", \"205\");\n    document.body.innerHTML = renderTopLanguages({ ...langs,\n      python: {\n        color: \"#ff0\",\n        name: \"python\",\n        size: 100\n      }\n    }, {});\n    expect(document.querySelector(\"svg\")).toHaveAttribute(\"height\", \"245\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render with custom width set","suites":["Test renderTopLanguages"],"updatePoint":{"line":68,"column":41,"index":2555},"line":68,"code":"  it(\"should render with custom width set\", () => {\n    document.body.innerHTML = renderTopLanguages(langs, {});\n    expect(document.querySelector(\"svg\")).toHaveAttribute(\"width\", \"300\");\n    document.body.innerHTML = renderTopLanguages(langs, {\n      card_width: 400\n    });\n    expect(document.querySelector(\"svg\")).toHaveAttribute(\"width\", \"400\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render default colors properly","suites":["Test renderTopLanguages"],"updatePoint":{"line":76,"column":43,"index":2914},"line":76,"code":"  it(\"should render default colors properly\", () => {\n    document.body.innerHTML = renderTopLanguages(langs);\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.textContent);\n    const headerStyles = stylesObject[\":host\"][\".header \"];\n    const langNameStyles = stylesObject[\":host\"][\".lang-name \"];\n    expect(headerStyles.fill.trim()).toBe(\"#2f80ed\");\n    expect(langNameStyles.fill.trim()).toBe(\"#333\");\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"#fffefe\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors properly","suites":["Test renderTopLanguages"],"updatePoint":{"line":86,"column":42,"index":3464},"line":86,"code":"  it(\"should render custom colors properly\", () => {\n    const customColors = {\n      title_color: \"5a0\",\n      icon_color: \"1b998b\",\n      text_color: \"9991\",\n      bg_color: \"252525\"\n    };\n    document.body.innerHTML = renderTopLanguages(langs, { ...customColors\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerStyles = stylesObject[\":host\"][\".header \"];\n    const langNameStyles = stylesObject[\":host\"][\".lang-name \"];\n    expect(headerStyles.fill.trim()).toBe(`#${customColors.title_color}`);\n    expect(langNameStyles.fill.trim()).toBe(`#${customColors.text_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", \"#252525\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render custom colors with themes","suites":["Test renderTopLanguages"],"updatePoint":{"line":103,"column":45,"index":4223},"line":103,"code":"  it(\"should render custom colors with themes\", () => {\n    document.body.innerHTML = renderTopLanguages(langs, {\n      title_color: \"5a0\",\n      theme: \"radical\"\n    });\n    const styleTag = document.querySelector(\"style\");\n    const stylesObject = cssToObject(styleTag.innerHTML);\n    const headerStyles = stylesObject[\":host\"][\".header \"];\n    const langNameStyles = stylesObject[\":host\"][\".lang-name \"];\n    expect(headerStyles.fill.trim()).toBe(\"#5a0\");\n    expect(langNameStyles.fill.trim()).toBe(`#${themes.radical.text_color}`);\n    expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes.radical.bg_color}`);\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render with all the themes","suites":["Test renderTopLanguages"],"updatePoint":{"line":116,"column":39,"index":4868},"line":116,"code":"  it(\"should render with all the themes\", () => {\n    Object.keys(themes).forEach(name => {\n      document.body.innerHTML = renderTopLanguages(langs, {\n        theme: name\n      });\n      const styleTag = document.querySelector(\"style\");\n      const stylesObject = cssToObject(styleTag.innerHTML);\n      const headerStyles = stylesObject[\":host\"][\".header \"];\n      const langNameStyles = stylesObject[\":host\"][\".lang-name \"];\n      expect(headerStyles.fill.trim()).toBe(`#${themes[name].title_color}`);\n      expect(langNameStyles.fill.trim()).toBe(`#${themes[name].text_color}`);\n      expect(queryByTestId(document.body, \"card-bg\")).toHaveAttribute(\"fill\", `#${themes[name].bg_color}`);\n    });\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render with layout compact","suites":["Test renderTopLanguages"],"updatePoint":{"line":130,"column":39,"index":5572},"line":130,"code":"  it(\"should render with layout compact\", () => {\n    document.body.innerHTML = renderTopLanguages(langs, {\n      layout: \"compact\"\n    });\n    expect(queryByTestId(document.body, \"header\")).toHaveTextContent(\"Most Used Languages\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[0]).toHaveTextContent(\"HTML 40.00%\");\n    expect(queryAllByTestId(document.body, \"lang-progress\")[0]).toHaveAttribute(\"width\", \"120\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[1]).toHaveTextContent(\"javascript 40.00%\");\n    expect(queryAllByTestId(document.body, \"lang-progress\")[1]).toHaveAttribute(\"width\", \"120\");\n    expect(queryAllByTestId(document.body, \"lang-name\")[2]).toHaveTextContent(\"css 20.00%\");\n    expect(queryAllByTestId(document.body, \"lang-progress\")[2]).toHaveAttribute(\"width\", \"60\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render a translated title","suites":["Test renderTopLanguages"],"updatePoint":{"line":142,"column":38,"index":6387},"line":142,"code":"  it(\"should render a translated title\", () => {\n    document.body.innerHTML = renderTopLanguages(langs, {\n      locale: \"cn\"\n    });\n    expect(document.getElementsByClassName(\"header\")[0].textContent).toBe(\"最常用的语言\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render without rounding","suites":["Test renderTopLanguages"],"updatePoint":{"line":148,"column":36,"index":6610},"line":148,"code":"  it(\"should render without rounding\", () => {\n    document.body.innerHTML = renderTopLanguages(langs, {\n      border_radius: \"0\"\n    });\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"0\");\n    document.body.innerHTML = renderTopLanguages(langs, {});\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"4.5\");\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render langs with specified langs_count","suites":["Test renderTopLanguages"],"updatePoint":{"line":156,"column":52,"index":6975},"line":156,"code":"  it(\"should render langs with specified langs_count\", async () => {\n    options = {\n      langs_count: 1\n    };\n    document.body.innerHTML = renderTopLanguages(langs, { ...options\n    });\n    expect(queryAllByTestId(document.body, \"lang-name\").length).toBe(options.langs_count);\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render langs with specified langs_count even when hide is set","suites":["Test renderTopLanguages"],"updatePoint":{"line":164,"column":74,"index":7284},"line":164,"code":"  it(\"should render langs with specified langs_count even when hide is set\", async () => {\n    options = {\n      hide: [\"HTML\"],\n      langs_count: 2\n    };\n    document.body.innerHTML = renderTopLanguages(langs, { ...options\n    });\n    expect(queryAllByTestId(document.body, \"lang-name\").length).toBe(options.langs_count);\n  });","file":"renderTopLanguages.test.js","skipped":false,"dir":"tests"},{"name":"should render correctly","suites":["Test Render Wakatime Card"],"updatePoint":{"line":14,"column":29,"index":305},"line":14,"code":"  it(\"should render correctly\", () => {\n    const card = renderWakatimeCard(wakaTimeData.data);\n    expect(card).toMatchSnapshot();\n  });","file":"renderWakatimeCard.test.js","skipped":false,"dir":"tests"},{"name":"should render correctly with compact layout","suites":["Test Render Wakatime Card"],"updatePoint":{"line":18,"column":49,"index":463},"line":18,"code":"  it(\"should render correctly with compact layout\", () => {\n    const card = renderWakatimeCard(wakaTimeData.data, {\n      layout: \"compact\"\n    });\n    expect(card).toMatchSnapshot();\n  });","file":"renderWakatimeCard.test.js","skipped":false,"dir":"tests"},{"name":"should hide languages when hide is passed","suites":["Test Render Wakatime Card"],"updatePoint":{"line":24,"column":47,"index":652},"line":24,"code":"  it(\"should hide languages when hide is passed\", () => {\n    document.body.innerHTML = renderWakatimeCard(wakaTimeData.data, {\n      hide: [\"YAML\", \"Other\"]\n    });\n    expect(queryByTestId(document.body, /YAML/i)).toBeNull();\n    expect(queryByTestId(document.body, /Other/i)).toBeNull();\n    expect(queryByTestId(document.body, /TypeScript/i)).not.toBeNull();\n  });","file":"renderWakatimeCard.test.js","skipped":false,"dir":"tests"},{"name":"should render translations","suites":["Test Render Wakatime Card"],"updatePoint":{"line":32,"column":32,"index":1006},"line":32,"code":"  it(\"should render translations\", () => {\n    document.body.innerHTML = renderWakatimeCard({}, {\n      locale: \"cn\"\n    });\n    expect(document.getElementsByClassName(\"header\")[0].textContent).toBe(\"Wakatime 周统计\");\n    expect(document.querySelector('g[transform=\"translate(0, 0)\"]>text.stat.bold').textContent).toBe(\"本周没有编程活动\");\n  });","file":"renderWakatimeCard.test.js","skipped":false,"dir":"tests"},{"name":"should render without rounding","suites":["Test Render Wakatime Card"],"updatePoint":{"line":39,"column":36,"index":1346},"line":39,"code":"  it(\"should render without rounding\", () => {\n    document.body.innerHTML = renderWakatimeCard(wakaTimeData.data, {\n      border_radius: \"0\"\n    });\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"0\");\n    document.body.innerHTML = renderWakatimeCard(wakaTimeData.data, {});\n    expect(document.querySelector(\"rect\")).toHaveAttribute(\"rx\", \"4.5\");\n  });","file":"renderWakatimeCard.test.js","skipped":false,"dir":"tests"},{"name":"should show \"no coding activitiy this week\" message when there hasn not been activity","suites":["Test Render Wakatime Card"],"updatePoint":{"line":47,"column":91,"index":1774},"line":47,"code":"  it('should show \"no coding activitiy this week\" message when there hasn not been activity', () => {\n    document.body.innerHTML = renderWakatimeCard({ ...wakaTimeData.data,\n      languages: undefined\n    }, {});\n    expect(document.querySelector(\".stat\").textContent).toBe(\"No coding activity this week\");\n  });","file":"renderWakatimeCard.test.js","skipped":false,"dir":"tests"},{"name":"retryer should return value and have zero retries on first try","suites":["Test Retryer"],"updatePoint":{"line":43,"column":68,"index":889},"line":43,"code":"  it(\"retryer should return value and have zero retries on first try\", async () => {\n    let res = await retryer(fetcher, {});\n    expect(fetcher).toBeCalledTimes(1);\n    expect(res).toStrictEqual({\n      data: \"ok\"\n    });\n  });","file":"retryer.test.js","skipped":false,"dir":"tests"},{"name":"retryer should return value and have 2 retries","suites":["Test Retryer"],"updatePoint":{"line":50,"column":52,"index":1103},"line":50,"code":"  it(\"retryer should return value and have 2 retries\", async () => {\n    let res = await retryer(fetcherFailOnSecondTry, {});\n    expect(fetcherFailOnSecondTry).toBeCalledTimes(2);\n    expect(res).toStrictEqual({\n      data: \"ok\"\n    });\n  });","file":"retryer.test.js","skipped":false,"dir":"tests"},{"name":"retryer should throw error if maximum retries reached","suites":["Test Retryer"],"updatePoint":{"line":57,"column":59,"index":1354},"line":57,"code":"  it(\"retryer should throw error if maximum retries reached\", async () => {\n    let res;\n\n    try {\n      res = await retryer(fetcherFail, {});\n    } catch (err) {\n      expect(fetcherFail).toBeCalledTimes(8);\n      expect(err.message).toBe(\"Maximum retries exceeded\");\n    }\n  });","file":"retryer.test.js","skipped":false,"dir":"tests"},{"name":"should test the request","suites":["Test /api/top-langs"],"updatePoint":{"line":89,"column":29,"index":1690},"line":89,"code":"  it(\"should test the request\", async () => {\n    const req = {\n      query: {\n        username: \"anuraghazra\"\n      }\n    };\n    const res = {\n      setHeader: jest.fn(),\n      send: jest.fn()\n    };\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_langs);\n    await topLangs(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderTopLanguages(langs));\n  });","file":"top-langs.test.js","skipped":false,"dir":"tests"},{"name":"should work with the query options","suites":["Test /api/top-langs"],"updatePoint":{"line":104,"column":40,"index":2151},"line":104,"code":"  it(\"should work with the query options\", async () => {\n    const req = {\n      query: {\n        username: \"anuraghazra\",\n        hide_title: true,\n        card_width: 100,\n        title_color: \"fff\",\n        icon_color: \"fff\",\n        text_color: \"fff\",\n        bg_color: \"fff\"\n      }\n    };\n    const res = {\n      setHeader: jest.fn(),\n      send: jest.fn()\n    };\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, data_langs);\n    await topLangs(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderTopLanguages(langs, {\n      hide_title: true,\n      card_width: 100,\n      title_color: \"fff\",\n      icon_color: \"fff\",\n      text_color: \"fff\",\n      bg_color: \"fff\"\n    }));\n  });","file":"top-langs.test.js","skipped":false,"dir":"tests"},{"name":"should render error card on error","suites":["Test /api/top-langs"],"updatePoint":{"line":132,"column":39,"index":2923},"line":132,"code":"  it(\"should render error card on error\", async () => {\n    const req = {\n      query: {\n        username: \"anuraghazra\"\n      }\n    };\n    const res = {\n      setHeader: jest.fn(),\n      send: jest.fn()\n    };\n    mock.onPost(\"https://api.github.com/graphql\").reply(200, error);\n    await topLangs(req, res);\n    expect(res.setHeader).toBeCalledWith(\"Content-Type\", \"image/svg+xml\");\n    expect(res.send).toBeCalledWith(renderError(error.errors[0].message));\n  });","file":"top-langs.test.js","skipped":false,"dir":"tests"},{"name":"should test kFormatter","suites":["Test utils.js"],"updatePoint":{"line":17,"column":28,"index":303},"line":17,"code":"  it(\"should test kFormatter\", () => {\n    expect(kFormatter(1)).toBe(1);\n    expect(kFormatter(-1)).toBe(-1);\n    expect(kFormatter(500)).toBe(500);\n    expect(kFormatter(1000)).toBe(\"1k\");\n    expect(kFormatter(10000)).toBe(\"10k\");\n    expect(kFormatter(12345)).toBe(\"12.3k\");\n    expect(kFormatter(9900000)).toBe(\"9900k\");\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"should test encodeHTML","suites":["Test utils.js"],"updatePoint":{"line":26,"column":28,"index":635},"line":26,"code":"  it(\"should test encodeHTML\", () => {\n    expect(encodeHTML(`<html>hello world<,.#4^&^@%!))`)).toBe(\"&#60;html&#62;hello world&#60;,.#4^&#38;^@%!))\");\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"should test renderError","suites":["Test utils.js"],"updatePoint":{"line":29,"column":29,"index":794},"line":29,"code":"  it(\"should test renderError\", () => {\n    document.body.innerHTML = renderError(\"Something went wrong\");\n    expect(queryByTestId(document.body, \"message\").children[0]).toHaveTextContent(/Something went wrong/gim);\n    expect(queryByTestId(document.body, \"message\").children[1]).toBeEmpty(2); // Secondary message\n\n    document.body.innerHTML = renderError(\"Something went wrong\", \"Secondary Message\");\n    expect(queryByTestId(document.body, \"message\").children[1]).toHaveTextContent(/Secondary Message/gim);\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"getCardColors: should return expected values","suites":["Test utils.js"],"updatePoint":{"line":37,"column":50,"index":1333},"line":37,"code":"  it(\"getCardColors: should return expected values\", () => {\n    let colors = getCardColors({\n      title_color: \"f00\",\n      text_color: \"0f0\",\n      icon_color: \"00f\",\n      bg_color: \"fff\",\n      border_color: \"fff\",\n      theme: \"dark\"\n    });\n    expect(colors).toStrictEqual({\n      titleColor: \"#f00\",\n      textColor: \"#0f0\",\n      iconColor: \"#00f\",\n      bgColor: \"#fff\",\n      borderColor: \"#fff\"\n    });\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"getCardColors: should fallback to default colors if color is invalid","suites":["Test utils.js"],"updatePoint":{"line":54,"column":74,"index":1779},"line":54,"code":"  it(\"getCardColors: should fallback to default colors if color is invalid\", () => {\n    let colors = getCardColors({\n      title_color: \"invalidcolor\",\n      text_color: \"0f0\",\n      icon_color: \"00f\",\n      bg_color: \"fff\",\n      border_color: \"invalidColor\",\n      theme: \"dark\"\n    });\n    expect(colors).toStrictEqual({\n      titleColor: \"#2f80ed\",\n      textColor: \"#0f0\",\n      iconColor: \"#00f\",\n      bgColor: \"#fff\",\n      borderColor: \"#e4e2e2\"\n    });\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"getCardColors: should fallback to specified theme colors if is not defined","suites":["Test utils.js"],"updatePoint":{"line":71,"column":80,"index":2255},"line":71,"code":"  it(\"getCardColors: should fallback to specified theme colors if is not defined\", () => {\n    let colors = getCardColors({\n      theme: \"dark\"\n    });\n    expect(colors).toStrictEqual({\n      titleColor: \"#fff\",\n      textColor: \"#9f9f9f\",\n      iconColor: \"#79ff97\",\n      bgColor: \"#151515\",\n      borderColor: \"#e4e2e2\"\n    });\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"should not wrap small texts","suites":["wrapTextMultiline"],"updatePoint":{"line":85,"column":33,"index":2588},"line":85,"code":"  it(\"should not wrap small texts\", () => {\n    {\n      let multiLineText = wrapTextMultiline(\"Small text should not wrap\");\n      expect(multiLineText).toEqual([\"Small text should not wrap\"]);\n    }\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"should wrap large texts","suites":["wrapTextMultiline"],"updatePoint":{"line":91,"column":29,"index":2790},"line":91,"code":"  it(\"should wrap large texts\", () => {\n    let multiLineText = wrapTextMultiline(\"Hello world long long long text\", 20, 3);\n    expect(multiLineText).toEqual([\"Hello world long\", \"long long text\"]);\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"should wrap large texts and limit max lines","suites":["wrapTextMultiline"],"updatePoint":{"line":95,"column":49,"index":3016},"line":95,"code":"  it(\"should wrap large texts and limit max lines\", () => {\n    let multiLineText = wrapTextMultiline(\"Hello world long long long text\", 10, 2);\n    expect(multiLineText).toEqual([\"Hello\", \"world long...\"]);\n  });","file":"utils.test.js","skipped":false,"dir":"tests"},{"name":"should wrap chinese by punctuation","suites":["wrapTextMultiline"],"updatePoint":{"line":99,"column":40,"index":3221},"line":99,"code":"  it(\"should wrap chinese by punctuation\", () => {\n    let multiLineText = wrapTextMultiline(\"专门为刚开始刷题的同学准备的算法基地，没有最细只有更细，立志用动画将晦涩难懂的算法说的通俗易懂！\");\n    expect(multiLineText.length).toEqual(3);\n    expect(multiLineText[0].length).toEqual(18 * 8); // &#xxxxx; x 8\n  });","file":"utils.test.js","skipped":false,"dir":"tests"}]}