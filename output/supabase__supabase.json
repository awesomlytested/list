{"repo":"supabase/supabase","url":"https://github.com/supabase/supabase","branch":"master","configs":[{"lang":"js","dir":"examples/sveltejs-todo-list/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"supabase","lang":"js","dir":"tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"studio","lang":"ts","dir":"studio/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"it should create new todo","suites":["New todo"],"updatePoint":{"line":2,"column":31,"index":61},"line":2,"code":"  it('it should create new todo', () => {\n    cy.visit('/');\n    cy.contains('h1', 'todos');\n    cy.get('.new-todo').type('Demo').type('{enter}');\n    cy.get('.main .todo-list .view').contains('Demo');\n  });","file":"e2e/new-todo.spec.js","skipped":false,"dir":"examples/sveltejs-todo-list/tests"},{"name":"Unauthorized","suites":[],"updatePoint":{"line":6,"column":18,"index":352},"line":6,"code":"test('Unauthorized', async () => {\n  const {\n    error\n  } = await unauthorized.from('profiles').select();\n  expect(error.message).toBe('Invalid authentication credentials');\n});","file":"integration/index.test.ts","skipped":false,"dir":"tests"},{"name":"Simple test","suites":[],"updatePoint":{"line":12,"column":17,"index":530},"line":12,"code":"test('Simple test', async () => {\n  const fakeOne = {\n    email: faker.internet.email().toLowerCase(),\n    password: faker.internet.password(),\n    username: faker.internet.userName()\n  };\n  const fakeTwo = {\n    email: faker.internet.email().toLowerCase(),\n    password: faker.internet.password(),\n    username: faker.internet.userName()\n  };\n  const first = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY_ANON);\n  const second = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY_ANON);\n  const {\n    user: firstUser\n  } = await first.auth.signUp({\n    email: fakeOne.email,\n    password: fakeOne.password\n  });\n  const {\n    user: secondUser\n  } = await second.auth.signUp({\n    email: fakeTwo.email,\n    password: fakeTwo.password\n  });\n  expect(firstUser.email).toEqual(fakeOne.email);\n  expect(secondUser.email).toEqual(fakeTwo.email);\n  const {\n    data: firstProfile\n  } = await first.from('profiles').insert({\n    id: firstUser.id,\n    username: fakeOne.username\n  }).single();\n  expect(firstProfile.username).toMatch(fakeOne.username); // Cannot insert the second user on the first client\n\n  const {\n    error: secondProfile\n  } = await first.from('profiles').insert({\n    id: secondUser.id,\n    username: fakeTwo.username\n  }).single();\n  expect(secondProfile.message).toMatch(/new row violates row-level security policy for table/);\n  const {\n    data: firstProfileList\n  } = await first.from('profiles').select();\n  const {\n    data: secondProfileList\n  } = await second.from('profiles').select();\n  const {\n    data: adminProfileList\n  } = await admin.from('profiles').select();\n  expect(firstProfileList.length).toBe(1);\n  expect(secondProfileList.length).toBe(0);\n  expect(adminProfileList.length).toBeGreaterThanOrEqual(1);\n});","file":"integration/index.test.ts","skipped":false,"dir":"tests"},{"name":"mounts correctly","suites":[],"updatePoint":{"line":59,"column":22},"line":59,"code":"test('mounts correctly', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('usage')) return {}\n    return { data: MOCK_CHART_DATA }\n  })\n  render(<ProjectUsage project=\"12345\" />)\n  await waitFor(() => screen.getByText(/Statistics for past 24 hours/))\n  await waitFor(() => screen.getByText(/123/))\n  await waitFor(() => screen.getByText(/223/))\n  await waitFor(() => screen.getByText(/323/))\n  await waitFor(() => screen.getByText(/333/))\n})","file":"components/Home/ProjectUsage.test.js","skipped":false,"dir":"studio/tests"},{"name":"dropdown options changes chart query","suites":[],"updatePoint":{"line":72,"column":42},"line":72,"code":"test('dropdown options changes chart query', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('usage')) return {}\n    return { data: MOCK_CHART_DATA }\n  })\n  render(<ProjectUsage project=\"12345\" />)\n  await waitFor(() => screen.getByText(/Statistics for past 24 hours/))\n  await waitFor(() => screen.getAllByRole('button', { name: '24 hours' }))\n  console.log(get.mock.calls)\n  await waitFor(() => {\n    expect(get).toHaveBeenCalledWith(expect.stringContaining('interval=hourly'))\n  })\n  // find button that has radix id\n  const [btn] = screen.getAllByRole('button', { name: '24 hours' }).filter((e) => e.id)\n  clickDropdown(btn)\n  await waitFor(() => screen.getByText(/7 days/))\n  await waitFor(() => screen.getByText(/60 minutes/))\n\n  // simulate changing of dropdown\n  userEvent.click(screen.getByText(/60 minutes/))\n  await waitFor(() => screen.getByText(/Statistics for past 60 minutes/))\n  expect(get).toHaveBeenCalledWith(expect.stringContaining('interval=minutely'))\n})","file":"components/Home/ProjectUsage.test.js","skipped":false,"dir":"studio/tests"},{"name":"renders chart","suites":[],"updatePoint":{"line":11,"column":19},"line":11,"code":"test('renders chart', async () => {\n  const mockFn = jest.fn()\n  const tsMicro = new Date().getTime() * 1000\n  render(\n    <LogEventChart\n      data={[{ timestamp: tsMicro }, { timestamp: tsMicro + 1 }]}\n      onBarClick={mockFn}\n    />\n  )\n  // TODO: figure out how to test rechart bar chart rendering, svg does not get rendered for some reason.\n  // should only have one bar rendered\n  // await waitFor(\n  //   () => {\n  //     const paths = container.querySelectorAll('path')\n  //     console.log(paths)\n  //     expect(paths.length).toBe(1)\n  //   },\n  //   { timeout: 1000 }\n  // )\n  // userEvent.click(paths[0])\n  // expect(mock).toBeCalledTimes(1)\n  await screen.findByText('Events')\n})","file":"pages/projects/LogEventChart.test.js","skipped":false,"dir":"studio/tests"},{"name":"templates","suites":[],"updatePoint":{"line":13,"column":15},"line":13,"code":"test('templates', async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel templates={[{ label: 'Some option', onClick: mockFn }]} />)\n  const search = screen.getByPlaceholderText(/Search/)\n  userEvent.type(search, '12345')\n\n  // TODO templates dropdown interaction currently cannot be tested\n  // https://github.com/supabase/ui/issues/299\n  // userEvent.click(screen.getByText(\"Templates\"))\n  // screen.debug()\n\n  // await waitFor(() => screen.getByText(\"Some option\"))\n  // userEvent.click(screen.getByText(\"Some option\"))\n  // expect(mockFn).toBeCalled()\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"custom mode","suites":[],"updatePoint":{"line":28,"column":17},"line":28,"code":"test('custom mode', async () => {\n  render(<LogPanel isCustomQuery />)\n  await waitFor(() => {\n    expect(() => screen.getByPlaceholderText(/Search/)).toThrow()\n  })\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"toggle event chart","suites":[],"updatePoint":{"line":35,"column":24},"line":35,"code":"test('toggle event chart', async () => {\n  const mockFn = jest.fn()\n  const { rerender } = render(<LogPanel onToggleEventChart={mockFn} isShowingEventChart={true} />)\n  const toggle = getToggleByText(/Show event chart/)\n  userEvent.click(toggle)\n  expect(mockFn).toBeCalled()\n  rerender(<LogPanel isShowingEventChart={false} />)\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"filter input change and submit","suites":[],"updatePoint":{"line":44,"column":36},"line":44,"code":"test('filter input change and submit', async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel onSearch={mockFn} />)\n  const search = screen.getByPlaceholderText(/Search/)\n  userEvent.type(search, '12345')\n  expect(mockFn).not.toBeCalled()\n  userEvent.click(screen.getByTitle('Go'))\n  expect(mockFn).toBeCalled()\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"filter input value","suites":[],"updatePoint":{"line":54,"column":24},"line":54,"code":"test('filter input value', async () => {\n  render(<LogPanel defaultSearchValue={'1234'} />)\n  screen.getByDisplayValue('1234')\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"Manual refresh","suites":[],"updatePoint":{"line":59,"column":20},"line":59,"code":"test('Manual refresh', async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel onRefresh={mockFn} />)\n  let btn\n  await waitFor(() => {\n    btn = screen.getByText(/Refresh/)\n  })\n  userEvent.click(btn)\n  expect(mockFn).toBeCalled()\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"reset search filter","suites":[],"updatePoint":{"line":70,"column":25},"line":70,"code":"test('reset search filter', async () => {\n  const { rerender } = render(<LogPanel />)\n  expect(() => screen.getByTitle(/Clear search/)).toThrow()\n\n  rerender(<LogPanel defaultSearchValue=\"something123\" />)\n  await waitFor(() => screen.getByDisplayValue(/something123/))\n  userEvent.click(screen.getByTitle(/Clear search/))\n  expect(() => screen.getByTitle(/Clear search/)).toThrow()\n  expect(() => screen.getByDisplayValue(/something123/)).toThrow()\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"timestamp from filter default value","suites":[],"updatePoint":{"line":81,"column":41},"line":81,"code":"test('timestamp from filter default value', async () => {\n  render(<LogPanel defaultFromValue=\"2022-01-18T10:43:39+0000\" />)\n  userEvent.click(await screen.findByText('Custom'))\n  await screen.findByDisplayValue('2022-01-18T10:43:39+0000')\n  // TODO: use screen.findByLabelText when https://github.com/supabase/ui/issues/310 is resolved\n  await screen.findByText('From')\n  await screen.findByTitle('Reset')\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"timestamp from filter error handling","suites":[],"updatePoint":{"line":90,"column":42},"line":90,"code":"test('timestamp from filter error handling', async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel onSearch={mockFn} />)\n  userEvent.click(await screen.findByText(/Now/))\n\n  // display iso timestamp\n  const year = new Date().getFullYear()\n  const input = await screen.findByDisplayValue(RegExp(year))\n  userEvent.clear(input)\n  userEvent.type(input, '123456')\n  await screen.findByText(/[iI]nvalid ISO 8601 timestamp/)\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"timestamp from filter value change","suites":[],"updatePoint":{"line":103,"column":40},"line":103,"code":"test('timestamp from filter value change', async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel onSearch={mockFn} />)\n  userEvent.click(await screen.findByText(/Now/))\n  // display iso timestamp\n  const year = new Date().getFullYear()\n  const input = await screen.findByDisplayValue(RegExp(year))\n\n  // replace the input's value\n  userEvent.clear(input)\n\n  // get time 20 mins before\n  const newDate = new Date()\n  newDate.setMinutes(new Date().getMinutes() - 20)\n  userEvent.type(input, newDate.toISOString())\n\n  // input actions\n  const set = await screen.findByRole('button', { name: 'Set' })\n\n  userEvent.click(set)\n  expect(mockFn).toBeCalled()\n  await screen.findByText('Custom')\n  await screen.findByTitle(/Clear timestamp filter/)\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"custom query mode hides elements","suites":[],"updatePoint":{"line":128,"column":38},"line":128,"code":"test('custom query mode hides elements', async () => {\n  const { rerender } = render(<LogPanel isCustomQuery={false} />)\n  await screen.findByPlaceholderText(/Search/)\n  await screen.findByText('Now')\n  rerender(<LogPanel isCustomQuery={true} />)\n  await expect(screen.findByPlaceholderText(/Search/)).rejects.toThrow()\n  await expect(screen.findByText('Now')).rejects.toThrow()\n  await expect(screen.findByText('Custom')).rejects.toThrow()\n})","file":"pages/projects/LogPanel.test.js","skipped":false,"dir":"studio/tests"},{"name":"can display log data and metadata","suites":[],"updatePoint":{"line":71,"column":39},"line":71,"code":"test('can display log data and metadata', async () => {\n  const data = [\n    logDataFixture({\n      event_message: 'some event happened',\n      metadata: {\n        my_key: 'something_value',\n      },\n    }),\n  ]\n  get.mockResolvedValue({ data })\n  render(<LogPage />)\n\n  await waitFor(() => screen.getByText(/happened/))\n  const row = screen.getByText(/happened/)\n  fireEvent.click(row)\n  await waitFor(() => screen.getByText(/my_key/))\n  await waitFor(() => screen.getByText(/something_value/))\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"Refreshpage","suites":[],"updatePoint":{"line":90,"column":17},"line":90,"code":"test('Refreshpage', async () => {\n  const data = [\n    logDataFixture({\n      event_message: 'some event happened',\n      metadata: {\n        my_key: 'something_value',\n      },\n    }),\n  ]\n  get.mockImplementation((url) => {\n    if (url.includes('count')) return { count: 0 }\n    return { data }\n  })\n  render(<LogPage />)\n  await waitFor(() => screen.getByText(/happened/))\n  get.mockResolvedValueOnce({ data: [] })\n  const row = screen.getByText(/happened/)\n  fireEvent.click(row)\n  await waitFor(() => screen.getByText(/my_key/))\n\n  // simulate refresh\n  userEvent.click(screen.getByText(/Refresh/))\n  // when log line unmounts and it was focused, should close focus panel\n  await waitFor(() => screen.queryByText(/my_key/) === null, { timeout: 1000 })\n  await waitFor(() => screen.queryByText(/happened/) === null, { timeout: 1000 })\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"Search will trigger a log refresh","suites":[],"updatePoint":{"line":117,"column":39},"line":117,"code":"test('Search will trigger a log refresh', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('search_query') && url.includes('something')) {\n      return {\n        data: [logDataFixture({ event_message: 'some event happened' })],\n      }\n    }\n    return { data: [] }\n  })\n  render(<LogPage />)\n\n  userEvent.type(screen.getByPlaceholderText(/Search/), 'something')\n  userEvent.click(screen.getByTitle('Go'))\n\n  await waitFor(\n    () => {\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('search_query'))\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('something'))\n\n      // updates router query params\n      expect(router.push).toHaveBeenCalledWith(\n        expect.objectContaining({\n          pathname: expect.any(String),\n          query: expect.objectContaining({\n            s: expect.stringContaining('something'),\n          }),\n        })\n      )\n    },\n    { timeout: 1500 }\n  )\n\n  await waitFor(() => screen.getByText(/happened/), { timeout: 1000 })\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"poll count for new messages","suites":[],"updatePoint":{"line":152,"column":33},"line":152,"code":"test('poll count for new messages', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('count')) {\n      return { data: [{ count: 125 }] }\n    }\n    return {\n      data: [logDataFixture({ event_message: 'something happened' })],\n    }\n  })\n  render(<LogPage />)\n  await waitFor(() => screen.queryByText(/happened/) === null)\n  // should display new logs count\n  await waitFor(() => screen.getByText(/125/))\n\n  userEvent.click(screen.getByText(/Refresh/))\n  await waitFor(() => screen.queryByText(/125/) === null)\n  await waitFor(() => screen.getByText(/happened/))\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"where clause will trigger a log refresh","suites":[],"updatePoint":{"line":171,"column":45},"line":171,"code":"test('where clause will trigger a log refresh', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('where') && url.includes('something')) {\n      return {\n        data: [logDataFixture({ event_message: 'some event happened' })],\n      }\n    }\n    return { data: [] }\n  })\n  const { container } = render(<LogPage />)\n  // fill search bar with some value, should be ignored when in custom mode\n  userEvent.type(screen.getByPlaceholderText(/Search/), 'search_value')\n  userEvent.click(screen.getByTitle('Go'))\n  // clear mock calls, for clean assertions\n  get.mockClear()\n\n  let editor = container.querySelector('.monaco-editor')\n  expect(editor).toBeFalsy()\n  // TODO: abstract this out into a toggle selection helper\n  const toggle = getToggleByText(/via query/)\n  expect(toggle).toBeTruthy()\n  userEvent.click(toggle)\n  await waitFor(() => {\n    editor = container.querySelector('.monaco-editor')\n    expect(editor).toBeTruthy()\n  })\n  editor = container.querySelector('.monaco-editor')\n  userEvent.type(editor, 'metadata.field = something')\n  userEvent.click(screen.getByText('Run'))\n  await waitFor(\n    () => {\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('where'))\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('metadata.field'))\n\n      // updates router query params\n      expect(router.push).toHaveBeenCalledWith(\n        expect.objectContaining({\n          pathname: expect.any(String),\n          query: expect.objectContaining({\n            q: expect.stringContaining('something'),\n          }),\n        })\n      )\n\n      // should ignore search bar value\n      expect(get).not.toHaveBeenCalledWith(expect.stringContaining('search_value'))\n    },\n    { timeout: 1000 }\n  )\n\n  await waitFor(() => screen.getByText(/happened/))\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"s= query param will populate the search bar","suites":[],"updatePoint":{"line":224,"column":49},"line":224,"code":"test('s= query param will populate the search bar', async () => {\n  useRouter.mockReturnValueOnce({\n    query: { ref: '123', type: 'api', s: 'someSearch' },\n    push: jest.fn(),\n  })\n  render(<LogPage />)\n  // should populate search input with the search param\n  screen.getByDisplayValue('someSearch')\n  await waitFor(() => {\n    expect(get).toHaveBeenCalledWith(expect.stringContaining('search_query=someSearch'))\n  })\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"q= query param will populate the query input","suites":[],"updatePoint":{"line":237,"column":50},"line":237,"code":"test('q= query param will populate the query input', async () => {\n  useRouter.mockReturnValueOnce({\n    query: { ref: '123', type: 'api', q: 'some_query', s: 'someSearch' },\n    push: jest.fn(),\n  })\n  render(<LogPage />)\n  // should populate editor with the query param\n  await waitFor(() => {\n    expect(get).toHaveBeenCalledWith(expect.stringContaining('where=some_query'))\n  })\n\n  // query takes precedence of search queryparam\n  expect(() => !screen.queryByDisplayValue(/someSearch/))\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"te= query param will populate the timestamp from input","suites":[],"updatePoint":{"line":252,"column":60},"line":252,"code":"test('te= query param will populate the timestamp from input', async () => {\n  // get time 20 mins before\n  const newDate = new Date()\n  newDate.setMinutes(new Date().getMinutes() - 20)\n  const isoString = newDate.toISOString()\n  const unixMicro = newDate.getTime() * 1000 //microseconds\n\n  useRouter.mockReturnValueOnce({\n    query: { ref: '123', type: 'api', te: unixMicro },\n    push: jest.fn(),\n  })\n  render(<LogPage />)\n\n  await waitFor(() => {\n    expect(get).toHaveBeenCalledWith(\n      expect.stringContaining(`timestamp_end=${encodeURIComponent(unixMicro)}`)\n    )\n  })\n  userEvent.click(await screen.findByText('Custom'))\n  await screen.findByDisplayValue(isoString)\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"custom sql querying","suites":[],"updatePoint":{"line":273,"column":25},"line":273,"code":"test('custom sql querying', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('sql=') && url.includes('select')) {\n      return {\n        data: [\n          {\n            my_count: 12345,\n          },\n        ],\n      }\n    }\n    return { data: [] }\n  })\n  const { container } = render(<LogPage />)\n  let editor = container.querySelector('.monaco-editor')\n  expect(editor).toBeFalsy()\n  // TODO: abstract this out into a toggle selection helper\n  const toggle = getToggleByText(/via query/)\n  expect(toggle).toBeTruthy()\n  userEvent.click(toggle)\n\n  // type into the query editor\n  await waitFor(() => {\n    editor = container.querySelector('.monaco-editor')\n    expect(editor).toBeTruthy()\n  })\n  editor = container.querySelector('.monaco-editor')\n  userEvent.type(editor, 'select count(*) as my_count from edge_logs')\n  // should show sandbox warning alert\n  await waitFor(() => screen.getByText(/restricted to a 7 day querying window/))\n\n  // should trigger query\n  userEvent.click(screen.getByText('Run'))\n  await waitFor(\n    () => {\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('sql='))\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('select'))\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('edge_logs'))\n      expect(get).not.toHaveBeenCalledWith(expect.stringContaining('where'))\n    },\n    { timeout: 1000 }\n  )\n\n  await waitFor(() => screen.getByText(/my_count/)) //column header\n  await waitFor(() => screen.getByText(/12345/)) // row value\n\n  // clicking on the row value should not show log selection panel\n  userEvent.click(screen.getByText(/12345/))\n  await expect(screen.findByText(/Metadata/)).rejects.toThrow()\n\n  // should not see chronological features\n  await expect(screen.findByText(/Load older/)).rejects.toThrow()\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"load older btn will fetch older logs","suites":[],"updatePoint":{"line":327,"column":42},"line":327,"code":"test('load older btn will fetch older logs', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('count')) {\n      return {}\n    }\n    return {\n      data: [logDataFixture({ event_message: 'first event' })],\n    }\n  })\n  render(<LogPage />)\n  // should display first log but not second\n  await waitFor(() => screen.getByText('first event'))\n  expect(() => screen.getByText('second event')).toThrow()\n\n  get.mockResolvedValueOnce({\n    data: [logDataFixture({ event_message: 'second event' })],\n  })\n  // should display first and second log\n  userEvent.click(screen.getByText('Load older'))\n  await waitFor(() => screen.getByText('first event'))\n  await waitFor(() => {\n    expect(get).toHaveBeenCalledWith(expect.stringContaining('timestamp_end=1'))\n  })\n  await waitFor(() => screen.getByText('second event'))\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"bug: load older btn does not error out when previous page is empty","suites":[],"updatePoint":{"line":353,"column":72},"line":353,"code":"test('bug: load older btn does not error out when previous page is empty', async () => {\n  // bugfix for https://sentry.io/organizations/supabase/issues/2903331460/?project=5459134&referrer=slack\n  get.mockImplementation((url) => {\n    if (url.includes('count')) {\n      return {}\n    }\n    return { data: [] }\n  })\n  render(<LogPage />)\n\n  userEvent.click(screen.getByText('Load older'))\n  // NOTE: potential race condition, since we are asserting that something DOES NOT EXIST\n  // wait for 500s to make sure all ui logic is complete\n  // need to wrap in act because internal react state is changing during this time.\n  await act(async () => await wait(100))\n\n  // clicking load older multiple times should not give error\n  await waitFor(() => {\n    expect(screen.queryByText(/Sorry/)).toBeNull()\n    expect(screen.queryByText(/An error occured/)).toBeNull()\n    expect(screen.queryByText(/undefined/)).toBeNull()\n  })\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"log event chart hide","suites":[],"updatePoint":{"line":377,"column":26},"line":377,"code":"test('log event chart hide', async () => {\n  render(<LogPage />)\n  await screen.findByText('Events')\n  const toggle = getToggleByText(/Show event chart/)\n  userEvent.click(toggle)\n  await expect(screen.findByText('Events')).rejects.toThrow()\n})","file":"pages/projects/logs.test.js","skipped":false,"dir":"studio/tests"},{"name":"can display log data","suites":[],"updatePoint":{"line":3,"column":26},"line":3,"code":"test('can display log data', async () => {\n  render(\n    <LogTable\n      data={[\n        {\n          id: 'some-uuid',\n          timestamp: 1621323232312,\n          event_message: 'some event happened',\n          metadata: {\n            my_key: 'something_value',\n          },\n        },\n      ]}\n    />\n  )\n\n  await waitFor(() => screen.getByText(/happened/))\n  const row = screen.getByText(/happened/)\n  fireEvent.click(row)\n  await waitFor(() => screen.getByText(/my_key/))\n  await waitFor(() => screen.getByText(/something_value/))\n})","file":"pages/projects/LogTable.test.js","skipped":false,"dir":"studio/tests"},{"name":"dedupes log lines with exact id","suites":[],"updatePoint":{"line":26,"column":37},"line":26,"code":"test('dedupes log lines with exact id', async () => {\n  // chronological mode requires 4 columns\n  render(\n    <LogTable\n      data={[\n        {\n          id: 'some-uuid',\n          timestamp: 1621323232312,\n          event_message: 'some event happened',\n          metadata: {}\n        },\n        {\n          id: 'some-uuid',\n          timestamp: 1621323232312,\n          event_message: 'some event happened',\n          metadata: {}\n        },\n      ]}\n    />\n  )\n\n  // should only have one element, this line will fail if there are >1 element\n  await waitFor(() => screen.getByText(/happened/))\n})","file":"pages/projects/LogTable.test.js","skipped":false,"dir":"studio/tests"},{"name":"can display custom columns and headers based on data input","suites":[],"updatePoint":{"line":51,"column":64},"line":51,"code":"test('can display custom columns and headers based on data input', async () => {\n  render(<LogTable data={[{ some_header: 'some_data', kinda: 123456 }]} />)\n  await waitFor(() => screen.getByText(/some_header/))\n  await waitFor(() => screen.getByText(/some_data/))\n  await waitFor(() => screen.getByText(/kinda/))\n  await waitFor(() => screen.getByText(/123456/))\n})","file":"pages/projects/LogTable.test.js","skipped":false,"dir":"studio/tests"}]}