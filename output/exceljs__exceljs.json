{"repo":"exceljs/exceljs","url":"https://github.com/exceljs/exceljs","branch":"master","configs":[{"package":"exceljs","lang":"js","dir":"spec","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should read and write xlsx via binary buffer","suites":["ExcelJS"],"updatePoint":{"line":15,"column":50,"index":413},"line":15,"code":"  it('should read and write xlsx via binary buffer', done => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('blort');\n    ws.getCell('A1').value = 'Hello, World!';\n    ws.getCell('A2').value = 7;\n    wb.xlsx.writeBuffer().then(buffer => {\n      const wb2 = new ExcelJS.Workbook();\n      return wb2.xlsx.load(buffer).then(() => {\n        const ws2 = wb2.getWorksheet('blort');\n        expect(ws2).toBeTruthy();\n        expect(ws2.getCell('A1').value).toEqual('Hello, World!');\n        expect(ws2.getCell('A2').value).toEqual(7);\n        done();\n      });\n    }).catch(error => {\n      throw error;\n    }).catch(unexpectedError(done));\n  });","file":"browser/exceljs.spec.js","skipped":false,"dir":"spec"},{"name":"should read and write xlsx via base64 buffer","suites":["ExcelJS"],"updatePoint":{"line":33,"column":50,"index":1078},"line":33,"code":"  it('should read and write xlsx via base64 buffer', done => {\n    const options = {\n      base64: true\n    };\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('blort');\n    ws.getCell('A1').value = 'Hello, World!';\n    ws.getCell('A2').value = 7;\n    wb.xlsx.writeBuffer(options).then(buffer => {\n      const wb2 = new ExcelJS.Workbook();\n      return wb2.xlsx.load(buffer.toString('base64'), options).then(() => {\n        const ws2 = wb2.getWorksheet('blort');\n        expect(ws2).toBeTruthy();\n        expect(ws2.getCell('A1').value).toEqual('Hello, World!');\n        expect(ws2.getCell('A2').value).toEqual(7);\n        done();\n      });\n    }).catch(error => {\n      throw error;\n    }).catch(unexpectedError(done));\n  });","file":"browser/exceljs.spec.js","skipped":false,"dir":"spec"},{"name":"should write csv via buffer","suites":["ExcelJS"],"updatePoint":{"line":54,"column":33,"index":1809},"line":54,"code":"  it('should write csv via buffer', done => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('blort');\n    ws.getCell('A1').value = 'Hello, World!';\n    ws.getCell('B1').value = 'What time is it?';\n    ws.getCell('A2').value = 7;\n    ws.getCell('B2').value = '12pm';\n    wb.csv.writeBuffer().then(buffer => {\n      expect(buffer.toString()).toEqual('\"Hello, World!\",What time is it?\\n7,12pm');\n      done();\n    }).catch(error => {\n      throw error;\n    }).catch(unexpectedError(done));\n  });","file":"browser/exceljs.spec.js","skipped":false,"dir":"spec"},{"name":"should include LICENSE","suites":["ExcelJS","dist folder"],"updatePoint":{"line":5,"column":30,"index":192},"line":5,"code":"    it('should include LICENSE', async () => {\n      expect(await exists('./dist/LICENSE')).to.be.true();\n    });","file":"dist/exceljs-dist.spec.js","skipped":false,"dir":"spec"},{"name":"should include exceljs.js","suites":["ExcelJS","dist folder"],"updatePoint":{"line":8,"column":33,"index":309},"line":8,"code":"    it('should include exceljs.js', async () => {\n      expect(await exists('./dist/exceljs.js')).to.be.true();\n    });","file":"dist/exceljs-dist.spec.js","skipped":false,"dir":"spec"},{"name":"should include exceljs.min.js","suites":["ExcelJS","dist folder"],"updatePoint":{"line":11,"column":37,"index":433},"line":11,"code":"    it('should include exceljs.min.js', async () => {\n      expect(await exists('./dist/exceljs.min.js')).to.be.true();\n    });","file":"dist/exceljs-dist.spec.js","skipped":false,"dir":"spec"},{"name":"should include exceljs.bare.js","suites":["ExcelJS","dist folder"],"updatePoint":{"line":14,"column":38,"index":562},"line":14,"code":"    it('should include exceljs.bare.js', async () => {\n      expect(await exists('./dist/exceljs.bare.js')).to.be.true();\n    });","file":"dist/exceljs-dist.spec.js","skipped":false,"dir":"spec"},{"name":"should include exceljs.bare.min.js","suites":["ExcelJS","dist folder"],"updatePoint":{"line":17,"column":42,"index":696},"line":17,"code":"    it('should include exceljs.bare.min.js', async () => {\n      expect(await exists('./dist/exceljs.bare.min.js')).to.be.true();\n    });","file":"dist/exceljs-dist.spec.js","skipped":false,"dir":"spec"},{"name":"should include es5/index","suites":["ExcelJS","dist folder"],"updatePoint":{"line":20,"column":32,"index":824},"line":20,"code":"    it('should include es5/index', async () => {\n      expect(await exists('./dist/es5/index.js')).to.be.true();\n    });","file":"dist/exceljs-dist.spec.js","skipped":false,"dir":"spec"},{"name":"downloads a workbook","suites":["Express"],"updatePoint":{"line":25,"column":26,"index":765},"line":25,"code":"  it('downloads a workbook', async function () {\n    this.timeout(5000);\n    const res = got.stream('http://127.0.0.1:3003/workbook', {\n      decompress: false\n    });\n    const wb2 = new Excel.Workbook();\n    // TODO: Remove passThrough with got 10+ (requires node v10+)\n    await wb2.xlsx.read(res.pipe(new PassThrough()));\n    testutils.checkTestBook(wb2, 'xlsx');\n  });","file":"end-to-end/express.spec.js","skipped":false,"dir":"spec"},{"name":"Values","suites":["Gold Book","Read"],"updatePoint":{"line":13,"column":14,"index":400},"line":13,"code":"    it('Values', () => {\n      const ws = wb.getWorksheet('Values');\n      expect(ws.getCell('B1').value).to.equal('I am Text');\n      expect(ws.getCell('B2').value).to.equal(3.14);\n      expect(ws.getCell('B3').value).to.equal(5);\n      // const b4 = ws.getCell('B4').value;\n      // console.log(typeof b4, b4);\n      expect(ws.getCell('B4').value).to.equalDate(new Date('2016-05-17T00:00:00.000Z'));\n      expect(ws.getCell('B5').value).to.deep.equal({\n        formula: 'B1',\n        result: 'I am Text'\n      });\n      expect(ws.getCell('B6').value).to.deep.equal({\n        hyperlink: 'https://www.npmjs.com/package/exceljs',\n        text: 'exceljs'\n      });\n      expect(ws.lastColumn).to.equal(ws.getColumn(2));\n      expect(ws.lastRow).to.equal(ws.getRow(6));\n    });","file":"integration/gold.spec.js","skipped":false,"dir":"spec"},{"name":"Styles","suites":["Gold Book","Read"],"updatePoint":{"line":32,"column":14,"index":1175},"line":32,"code":"    it('Styles', () => {});","file":"integration/gold.spec.js","skipped":false,"dir":"spec"},{"name":"issue 1027 - Broken due to Cannot set property 'marked' of undefined error","suites":["github issues"],"updatePoint":{"line":4,"column":82,"index":209},"line":4,"code":"  it('issue 1027 - Broken due to Cannot set property \\'marked\\' of undefined error', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('Sheet1');\n    const range = 'A2:A1048576';\n    ws.dataValidations.model[range] = {\n      allowBlank: true,\n      error: 'Please use the drop down to select a valid value',\n      errorTitle: 'Invalid Selection',\n      formulae: ['\"Apples,Bananas,Oranges\"'],\n      showErrorMessage: true,\n      type: 'list'\n    };\n    return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME);\n  });","file":"integration/issues/issue-1027-sheet-defined-data-validate.spec.js","skipped":false,"dir":"spec"},{"name":"issue 1328 - should emit row with Date Object","suites":["github issues: Date field with cache style"],"updatePoint":{"line":18,"column":51,"index":737},"line":18,"code":"  it('issue 1328 - should emit row with Date Object', () => {\n    expect(rows).that.deep.equals(['Date', new Date('2020-11-20T00:00:00.000Z')]);\n  });","file":"integration/issues/issue-1328-xlsx-worksheet-reader-date.spec.js","skipped":false,"dir":"spec"},{"name":"issue 1339 - Special cell value results invalid file","suites":["github issues"],"updatePoint":{"line":6,"column":58,"index":255},"line":6,"code":"  it('issue 1339 - Special cell value results invalid file', async () => {\n    const wb = new ExcelJS.stream.xlsx.WorkbookWriter({\n      filename: TEST_XLSX_FILE_NAME,\n      useStyles: true,\n      useSharedStrings: true\n    });\n    const ws = wb.addWorksheet('Sheet1');\n    const specialValues = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', '__proto__'];\n    for (let i = 0, len = specialValues.length; i < len; i++) {\n      const value = specialValues[i];\n      ws.addRow([value]);\n      ws.getCell(`B${i + 1}`).value = value;\n    }\n    await wb.commit();\n    const wb2 = new ExcelJS.Workbook();\n    await wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n    const ws2 = wb2.getWorksheet('Sheet1');\n    for (let i = 0, len = specialValues.length; i < len; i++) {\n      const value = specialValues[i];\n      expect(ws2.getCell(`A${i + 1}`).value).to.equal(value);\n      expect(ws2.getCell(`B${i + 1}`).value).to.equal(value);\n    }\n  });","file":"integration/issues/issue-1339-speciel-cell-file.spec.js","skipped":false,"dir":"spec"},{"name":"issue 1364 - Incorrect Worksheet Name on Streaming XLSX Reader","suites":["github issues"],"updatePoint":{"line":4,"column":68,"index":216},"line":4,"code":"  it('issue 1364 - Incorrect Worksheet Name on Streaming XLSX Reader', async () => {\n    const workbookReader = new ExcelJS.stream.xlsx.WorkbookReader(TEST_XLSX_FILE_NAME, {});\n    workbookReader.read();\n    workbookReader.on('worksheet', worksheet => {\n      expect(worksheet.name).to.equal('Sum Worksheet');\n    });\n  });","file":"integration/issues/issue-1364-incorrect-worksheet-name-streaming-xlsx.spec.js","skipped":false,"dir":"spec"},{"name":"issue 163 - Error while using xslx readFile method","suites":["github issues"],"updatePoint":{"line":3,"column":56,"index":128},"line":3,"code":"  it('issue 163 - Error while using xslx readFile method', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-163.xlsx').then(() => {\n      // arriving here is success\n      expect(true).to.equal(true);\n    });\n  });","file":"integration/issues/issue-163-xlsx-read-file.spec.js","skipped":false,"dir":"spec"},{"name":"issue 1669 - optional autofilter and custom autofilter on tables","suites":["github issues"],"updatePoint":{"line":3,"column":70,"index":142},"line":3,"code":"  it('issue 1669 - optional autofilter and custom autofilter on tables', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-1669.xlsx');\n  }).timeout(6000);","file":"integration/issues/issue-1669-optional-custom-autofilter-on-table.spec.js","skipped":false,"dir":"spec"},{"name":"issue 176 - Unexpected xml node in parseOpen","suites":["github issues"],"updatePoint":{"line":3,"column":50,"index":122},"line":3,"code":"  it('issue 176 - Unexpected xml node in parseOpen', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-176.xlsx').then(() => {\n      // arriving here is success\n      expect(true).to.equal(true);\n    });\n  });","file":"integration/issues/issue-176-unexpected-xml-node.spec.js","skipped":false,"dir":"spec"},{"name":"issue 2125 - spliceRows remove last row","suites":["github issues"],"updatePoint":{"line":3,"column":45,"index":117},"line":3,"code":"  it('issue 2125 - spliceRows remove last row', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet();\n    ws.addRows([['1st'], ['2nd'], ['3rd']]);\n    ws.spliceRows(ws.rowCount, 1);\n    expect(ws.getRow(ws.rowCount).getCell(1).value).to.equal('2nd');\n  });","file":"integration/issues/issue-2125-spliceRows-last-row.spec.js","skipped":false,"dir":"spec"},{"name":"Reading 1904.xlsx","suites":["github issues","issue 219 - 1904 dates not supported"],"updatePoint":{"line":7,"column":25,"index":281},"line":7,"code":"    it('Reading 1904.xlsx', () => {\n      const wb = new ExcelJS.Workbook();\n      return wb.xlsx.readFile('./spec/integration/data/1904.xlsx').then(() => {\n        expect(wb.properties.date1904).to.equal(true);\n        const ws = wb.getWorksheet('Sheet1');\n        expect(ws.getCell('B4').value.toISOString()).to.equal('1904-01-01T00:00:00.000Z');\n      });\n    });","file":"integration/issues/issue-219-1904-dates.spec.js","skipped":false,"dir":"spec"},{"name":"Writing and Reading","suites":["github issues","issue 219 - 1904 dates not supported"],"updatePoint":{"line":15,"column":27,"index":650},"line":15,"code":"    it('Writing and Reading', () => {\n      const wb = new ExcelJS.Workbook();\n      wb.properties.date1904 = true;\n      const ws = wb.addWorksheet('Sheet1');\n      ws.getCell('B4').value = new Date('1904-01-01T00:00:00.000Z');\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        expect(wb2.properties.date1904).to.equal(true);\n        const ws2 = wb2.getWorksheet('Sheet1');\n        expect(ws2.getCell('B4').value.toISOString()).to.equal('1904-01-01T00:00:00.000Z');\n      });\n    });","file":"integration/issues/issue-219-1904-dates.spec.js","skipped":false,"dir":"spec"},{"name":"issue 234 - Broken XLSX because of \"vertical tab\" ascii character in a cell","suites":["github issues"],"updatePoint":{"line":6,"column":81,"index":278},"line":6,"code":"  it('issue 234 - Broken XLSX because of \"vertical tab\" ascii character in a cell', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('Sheet1');\n\n    // Start of Heading\n    ws.getCell('A1').value = 'Hello, \\x01World!';\n\n    // Vertical Tab\n    ws.getCell('A2').value = 'Hello, \\x0bWorld!';\n    return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n      const wb2 = new ExcelJS.Workbook();\n      return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n    }).then(wb2 => {\n      const ws2 = wb2.getWorksheet('Sheet1');\n      expect(ws2.getCell('A1').value).to.equal('Hello, World!');\n      expect(ws2.getCell('A2').value).to.equal('Hello, World!');\n    });\n  });","file":"integration/issues/issue-234-vertical-tab-char.spec.js","skipped":false,"dir":"spec"},{"name":"issue 257 - worksheet order is not respected","suites":["github issues"],"updatePoint":{"line":3,"column":50,"index":122},"line":3,"code":"  it('issue 257 - worksheet order is not respected', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-257.xlsx').then(() => {\n      expect(wb.worksheets.map(ws => ws.name)).to.deep.equal(['First', 'Second']);\n    });\n  });","file":"integration/issues/issue-257-sheet-order.spec.js","skipped":false,"dir":"spec"},{"name":"issue 275 - hyperlink with query arguments corrupts workbook","suites":["github issues"],"updatePoint":{"line":6,"column":66,"index":263},"line":6,"code":"  it('issue 275 - hyperlink with query arguments corrupts workbook', () => {\n    const options = {\n      filename: TEST_XLSX_FILE_NAME,\n      useStyles: true\n    };\n    const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n    const ws = wb.addWorksheet('Sheet1');\n    const hyperlink = {\n      text: 'Somewhere with query params',\n      hyperlink: 'www.somewhere.com?a=1&b=2&c=<>&d=\"\\'\"'\n    };\n\n    // Start of Heading\n    ws.getCell('A1').value = hyperlink;\n    ws.commit();\n    return wb.commit().then(() => {\n      const wb2 = new ExcelJS.Workbook();\n      return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n    }).then(wb2 => {\n      const ws2 = wb2.getWorksheet('Sheet1');\n      expect(ws2.getCell('A1').value).to.deep.equal(hyperlink);\n    });\n  });","file":"integration/issues/issue-275-hyperlink-query-param.spec.js","skipped":false,"dir":"spec"},{"name":"Reading 1904.xlsx","suites":["github issues","issue 539 - <contentType /> element"],"updatePoint":{"line":4,"column":25,"index":155},"line":4,"code":"    it('Reading 1904.xlsx', () => {\n      const wb = new ExcelJS.Workbook();\n      return wb.xlsx.readFile('./spec/integration/data/1519293514-KRISHNAPATNAM_LINE_UP.xlsx');\n    });","file":"integration/issues/issue-539-contentType-element.spec.js","skipped":false,"dir":"spec"},{"name":"issue 623 - Issue with borders for merged cell when rewriting an excel workbook","suites":["github issues"],"updatePoint":{"line":4,"column":85,"index":219},"line":4,"code":"  it('issue 623 - Issue with borders for merged cell when rewriting an excel workbook', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-623.xlsx').then(() => {\n      // styles of each cell should be read as is without merging\n      const worksheet = wb.getWorksheet(1);\n      checkBorder(worksheet.getCell('B2'), ['left', 'top']);\n      checkBorder(worksheet.getCell('B3'), ['left', 'bottom']);\n      checkBorder(worksheet.getCell('C2'), ['right', 'top']);\n      checkBorder(worksheet.getCell('C3'), ['right', 'bottom']);\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME);\n    }).then(() => {\n      const wb2 = new ExcelJS.Workbook();\n      return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n    }).then(wb2 => {\n      // written file should have same borders\n      const worksheet = wb2.getWorksheet(1);\n      checkBorder(worksheet.getCell('B2'), ['left', 'top']);\n      checkBorder(worksheet.getCell('B3'), ['left', 'bottom']);\n      checkBorder(worksheet.getCell('C2'), ['right', 'top']);\n      checkBorder(worksheet.getCell('C3'), ['right', 'bottom']);\n    });\n  });","file":"integration/issues/issue-623-borders-for-merged-cell.spec.js","skipped":false,"dir":"spec"},{"name":"issue 703 - Special cell value results invalid file","suites":["github issues"],"updatePoint":{"line":6,"column":57,"index":254},"line":6,"code":"  it('issue 703 - Special cell value results invalid file', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('Sheet1');\n    const specialValues = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', '__proto__'];\n    for (let i = 0; i < specialValues.length; i++) {\n      const value = specialValues[i];\n      ws.addRow([value]);\n      ws.getCell(`B${i + 1}`).value = value;\n    }\n    return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n      const wb2 = new ExcelJS.Workbook();\n      return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n    }).then(wb2 => {\n      const ws2 = wb2.getWorksheet('Sheet1');\n      for (let i = 0; i < specialValues.length; i++) {\n        const value = specialValues[i];\n        expect(ws2.getCell(`A${i + 1}`).value).to.equal(value);\n        expect(ws2.getCell(`B${i + 1}`).value).to.equal(value);\n      }\n    });\n  });","file":"integration/issues/issue-703-speciel-cell-file.spec.js","skipped":false,"dir":"spec"},{"name":"issue 771 - Issue with dataValidation without type and with formula1 or formula2","suites":["github issues"],"updatePoint":{"line":3,"column":86,"index":158},"line":3,"code":"  it('issue 771 - Issue with dataValidation without type and with formula1 or formula2', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-771.xlsx');\n  });","file":"integration/issues/issue-771-data-validation-without-type.spec.js","skipped":false,"dir":"spec"},{"name":"issue 877 - hyperlink without text crashes on write","suites":["github issues"],"updatePoint":{"line":7,"column":57,"index":290},"line":7,"code":"  it('issue 877 - hyperlink without text crashes on write', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx\n    // .readFile('./spec/integration/data/test-issue-877.xlsx')\n    .readFile('./spec/integration/data/test-issue-877.xlsx').then(() => {\n      wb.xlsx.writeBuffer({\n        useStyles: true,\n        useSharedStrings: true\n      }).then(function (buffer) {\n        const wstream = fs.createWriteStream(TEST_XLSX_FILE_NAME);\n        wstream.write(buffer);\n        wstream.end();\n      });\n    });\n  });","file":"integration/issues/issue-877-hyperlink-no-text.spec.js","skipped":false,"dir":"spec"},{"name":"issue 880 - malformed comment crashes on write","suites":["github issues"],"updatePoint":{"line":7,"column":52,"index":285},"line":7,"code":"  it('issue 880 - malformed comment crashes on write', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-880.xlsx').then(() => {\n      wb.xlsx.writeBuffer({\n        useStyles: true,\n        useSharedStrings: true\n      }).then(function (buffer) {\n        const wstream = fs.createWriteStream(TEST_XLSX_FILE_NAME);\n        wstream.write(buffer);\n        wstream.end();\n      });\n    });\n  }).timeout(6000);","file":"integration/issues/issue-880-malformed-comment.spec.js","skipped":false,"dir":"spec"},{"name":"issue 988 - table without autofilter model","suites":["github issues"],"updatePoint":{"line":3,"column":48,"index":120},"line":3,"code":"  it('issue 988 - table without autofilter model', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-issue-988.xlsx');\n  }).timeout(6000);","file":"integration/issues/issue-988-missing-table-autofilter.spec.js","skipped":false,"dir":"spec"},{"name":"issue 991 - differentiates between strings with leading numbers and dates when reading csv files","suites":["github issues"],"updatePoint":{"line":3,"column":102,"index":174},"line":3,"code":"  it('issue 991 - differentiates between strings with leading numbers and dates when reading csv files', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.csv.readFile('./spec/integration/data/test-issue-991.csv').then(worksheet => {\n      expect(worksheet.getCell('A1').value.toString()).to.equal(new Date('2019-11-04T00:00:00').toString());\n      expect(worksheet.getCell('A2').value.toString()).to.equal(new Date('2019-11-04T00:00:00').toString());\n      expect(worksheet.getCell('A3').value.toString()).to.equal(new Date('2019-11-04T10:17:55').toString());\n      expect(worksheet.getCell('A4').value).to.equal('00210PRG1');\n      expect(worksheet.getCell('A5').value).to.equal('1234-5thisisnotadate');\n    });\n  });","file":"integration/issues/issue-991-csv-read-dates.spec.js","skipped":false,"dir":"spec"},{"name":"issue 995 - encoding option works fine","suites":["github issues"],"updatePoint":{"line":5,"column":44,"index":233},"line":5,"code":"  it('issue 995 - encoding option works fine', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('wheee');\n    ws.getCell('A1').value = HEBREW_TEST_STRING;\n    const options = {\n      encoding: 'UTF-8'\n    };\n    return wb.csv.writeFile(TEST_CSV_FILE_NAME, options).then(() => {\n      const ws2 = new ExcelJS.Workbook();\n      return ws2.csv.readFile(TEST_CSV_FILE_NAME, options);\n    }).then(ws2 => {\n      expect(ws2.getCell('A1').value).to.equal(HEBREW_TEST_STRING);\n    });\n  }).timeout(6000);","file":"integration/issues/issue-995-encoding.spec.js","skipped":false,"dir":"spec"},{"name":"copied cells should have the right formulas","suites":["github issues","Shared Formulas","issue xyz - cells copied as a block treat formulas as values"],"updatePoint":{"line":7,"column":53,"index":518},"line":7,"code":"      it('copied cells should have the right formulas', () => {\n        const wb = new ExcelJS.Workbook();\n        return wb.xlsx.readFile('./spec/integration/data/fibonacci.xlsx').then(() => {\n          const ws = wb.getWorksheet('fib');\n          expect(ws.getCell('A4').value).to.deep.equal({\n            formula: 'A3+1',\n            shareType: 'shared',\n            ref: 'A4:A19',\n            result: 4\n          });\n          expect(ws.getCell('A5').value).to.deep.equal({\n            sharedFormula: 'A4',\n            result: 5\n          }, explain);\n        });\n      });","file":"integration/issues/shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"copied cells should have the right types","suites":["github issues","Shared Formulas","issue xyz - cells copied as a block treat formulas as values"],"updatePoint":{"line":23,"column":50,"index":1093},"line":23,"code":"      it('copied cells should have the right types', () => {\n        const wb = new ExcelJS.Workbook();\n        return wb.xlsx.readFile('./spec/integration/data/fibonacci.xlsx').then(() => {\n          const ws = wb.getWorksheet('fib');\n          expect(ws.getCell('A4').type).to.equal(Enums.ValueType.Formula);\n          expect(ws.getCell('A5').type).to.equal(Enums.ValueType.Formula);\n        });\n      });","file":"integration/issues/shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"copied cells should have the same fields","suites":["github issues","Shared Formulas","issue xyz - cells copied as a block treat formulas as values"],"updatePoint":{"line":31,"column":50,"index":1501},"line":31,"code":"      it('copied cells should have the same fields', () => {\n        // to see if there are other fields on the object worth comparing\n        const wb = new ExcelJS.Workbook();\n        return wb.xlsx.readFile('./spec/integration/data/fibonacci.xlsx').then(() => {\n          const ws = wb.getWorksheet('fib');\n          const A4 = ws.getCell('A4');\n          const A5 = ws.getCell('A5');\n          expect(Object.keys(A4).join()).to.equal(Object.keys(A5).join());\n        });\n      });","file":"integration/issues/shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"should store cell text and comment with leading new line","suites":["pr related issues","pr 896 add xml:space=\"preserve\" for all whitespaces"],"updatePoint":{"line":32,"column":64,"index":713},"line":32,"code":"    it('should store cell text and comment with leading new line', () => {\n      const properties = tools.fix(require('../../../utils/data/sheet-properties.json'));\n      const pageSetup = tools.fix(require('../../../utils/data/page-setup.json'));\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('sheet1', {\n        properties,\n        pageSetup\n      });\n      ws.getColumn(1).width = 20;\n      ws.getCell('A1').value = TEST_VALUE;\n      ws.getCell('A1').note = TEST_NOTE;\n      ws.getCell('A1').alignment = {\n        wrapText: true\n      };\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new Excel.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('sheet1');\n        expect(ws2).to.not.be.undefined();\n        expect(ws2.getCell('A1').value).to.deep.equal(TEST_VALUE);\n      });\n    });","file":"integration/pr/pr-896/test-pr-896.spec.js","skipped":false,"dir":"spec"},{"name":"pull request 1204 - Read and write data validation should be successful","suites":["github issues"],"updatePoint":{"line":4,"column":77,"index":204},"line":4,"code":"  it('pull request 1204 - Read and write data validation should be successful', async () => {\n    const wb = new ExcelJS.Workbook();\n    await wb.xlsx.readFile('./spec/integration/data/test-pr-1204.xlsx');\n    const expected = {\n      E1: {\n        type: 'textLength',\n        formulae: [2],\n        showInputMessage: true,\n        showErrorMessage: true,\n        operator: 'greaterThan'\n      },\n      E4: {\n        type: 'textLength',\n        formulae: [2],\n        showInputMessage: true,\n        showErrorMessage: true,\n        operator: 'greaterThan'\n      }\n    };\n    const ws = wb.getWorksheet(1);\n    expect(ws.dataValidations.model).to.deep.equal(expected);\n    await wb.xlsx.writeFile(TEST_XLSX_FILE_NAME);\n  });","file":"integration/pr/test-pr-1157.spec.js","skipped":false,"dir":"spec"},{"name":"pull request 1220 - The worksheet should not be undefined","suites":["github issues"],"updatePoint":{"line":3,"column":63,"index":135},"line":3,"code":"  it('pull request 1220 - The worksheet should not be undefined', async () => {\n    const wb = new ExcelJS.Workbook();\n    await wb.xlsx.readFile('./spec/integration/data/test-pr-1220.xlsx');\n    const ws = wb.getWorksheet(1);\n    expect(ws).to.not.equal(undefined);\n  });","file":"integration/pr/test-pr-1220.spec.js","skipped":false,"dir":"spec"},{"name":"pull request 1262 - protect should work with streaming workbook writer","suites":["github issues"],"updatePoint":{"line":3,"column":76,"index":148},"line":3,"code":"  it('pull request 1262 - protect should work with streaming workbook writer', async () => {\n    const workbook = new ExcelJS.stream.xlsx.WorkbookWriter({\n      filename: './test.xlsx'\n    });\n    const sheet = workbook.addWorksheet('data');\n    const row = sheet.addRow(['readonly cell']);\n    row.getCell(1).protection = {\n      locked: true\n    };\n    expect(sheet.protect).to.exist();\n    sheet.protect('password', {\n      spinCount: 1\n    });\n    await workbook.commit();\n\n    // read in file and ensure sheetProtection is there:\n    const checkBook = new ExcelJS.Workbook();\n    await checkBook.xlsx.readFile('./test.xlsx');\n    const checkSheet = checkBook.getWorksheet('data');\n    expect(checkSheet.sheetProtection.spinCount).to.equal(1);\n  });","file":"integration/pr/test-pr-1262.spec.js","skipped":false,"dir":"spec"},{"name":"pull request 1334 - Fix the error that comment does not delete at spliceColumn","suites":["github issues"],"updatePoint":{"line":4,"column":84,"index":211},"line":4,"code":"  it('pull request 1334 - Fix the error that comment does not delete at spliceColumn', async () => {\n    (async () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('testSheet');\n      ws.addRow(['test1', 'test2', 'test3', 'test4', 'test5', 'test6', 'test7', 'test8']);\n      const row = ws.getRow(1);\n      row.getCell(1).note = 'test1';\n      row.getCell(2).note = 'test2';\n      row.getCell(3).note = 'test3';\n      row.getCell(4).note = 'test4';\n      ws.spliceColumns(2, 1);\n      expect(row.getCell(1).note).to.equal('test1');\n      expect(row.getCell(2).note).to.equal('test3');\n      expect(row.getCell(3).note).to.equal('test4');\n      expect(row.getCell(4).note).to.equal(undefined);\n      await wb.xlsx.writeFile(TEST_XLSX_FILE_NAME);\n    })();\n  });","file":"integration/pr/test-pr-1334.spec.js","skipped":false,"dir":"spec"},{"name":"pull request 1431 - streaming reader should handle rich text within shared strings","suites":["github issues"],"updatePoint":{"line":3,"column":88,"index":160},"line":3,"code":"  it('pull request 1431 - streaming reader should handle rich text within shared strings', async () => {\n    const rowData = [{\n      richText: [{\n        font: {\n          bold: true\n        },\n        text: 'This should '\n      }, {\n        font: {\n          italic: true\n        },\n        text: 'be one shared string value'\n      }]\n    }, 'this should be the second shared string'];\n    const workbook = new ExcelJS.stream.xlsx.WorkbookWriter({\n      filename: './test.xlsx',\n      useSharedStrings: true\n    });\n    const sheet = workbook.addWorksheet('data');\n    sheet.addRow(rowData);\n    await workbook.commit();\n    return new Promise((resolve, reject) => {\n      const workbookReader = new ExcelJS.stream.xlsx.WorkbookReader('./test.xlsx', {\n        entries: 'emit',\n        hyperlinks: 'cache',\n        sharedStrings: 'cache',\n        styles: 'cache',\n        worksheets: 'emit'\n      });\n      workbookReader.on('worksheet', worksheet => worksheet.on('row', row => {\n        expect(row.values[1]).to.eql(rowData[0]);\n        expect(row.values[2]).to.equal(rowData[1]);\n        resolve();\n      }));\n      workbookReader.on('error', reject);\n      workbookReader.read();\n    });\n  });","file":"integration/pr/test-pr-1431.spec.js","skipped":false,"dir":"spec"},{"name":"Reading 1904.xlsx","suites":["github issues","pull request 1487 - lastColumn with an empty column"],"updatePoint":{"line":4,"column":25,"index":171},"line":4,"code":"    it('Reading 1904.xlsx', () => {\n      const wb = new ExcelJS.Workbook();\n      return wb.xlsx.readFile('./spec/integration/data/1904.xlsx').then(() => {\n        const ws = wb.getWorksheet('Sheet1');\n        expect(ws.lastColumn).to.equal(ws.getColumn(2));\n      });\n    });","file":"integration/pr/test-pr-1487.spec.js","skipped":false,"dir":"spec"},{"name":"Reading test-issue-1575.xlsx","suites":["github issues","pull request 1576 - inlineStr cell type support"],"updatePoint":{"line":4,"column":36,"index":178},"line":4,"code":"    it('Reading test-issue-1575.xlsx', () => {\n      const wb = new ExcelJS.Workbook();\n      return wb.xlsx.readFile('./spec/integration/data/test-issue-1575.xlsx').then(() => {\n        const ws = wb.getWorksheet('Sheet1');\n        expect(ws.getCell('A1').value).to.equal('A');\n        expect(ws.getCell('B1').value).to.equal('B');\n        expect(ws.getCell('C1').value).to.equal('C');\n        expect(ws.getCell('A2').value).to.equal('1.0');\n        expect(ws.getCell('B2').value).to.equal('2.0');\n        expect(ws.getCell('C2').value).to.equal('3.0');\n        expect(ws.getCell('A3').value).to.equal('4.0');\n        expect(ws.getCell('B3').value).to.equal('5.0');\n        expect(ws.getCell('C3').value).to.equal('6.0');\n      });\n    });","file":"integration/pr/test-pr-1576.spec.js","skipped":false,"dir":"spec"},{"name":"pull request 2244- Fix xlsx.writeFile() not catching error when error occurs","suites":["pull request  2244"],"updatePoint":{"line":3,"column":82,"index":159},"line":3,"code":"  it('pull request 2244- Fix xlsx.writeFile() not catching error when error occurs', async () => {\n    async function test() {\n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet('sheet');\n      const imageId1 = workbook.addImage({\n        filename: 'path/to/image.jpg',\n        // Non-existent file\n        extension: 'jpeg'\n      });\n      worksheet.addImage(imageId1, 'B2:D6');\n      await workbook.xlsx.writeFile('test.xlsx');\n    }\n    let error;\n    try {\n      await test();\n    } catch (err) {\n      error = err;\n    }\n    expect(error).to.be.an('error');\n  });","file":"integration/pr/test-pr-2244.spec.js","skipped":false,"dir":"spec"},{"name":"Should be able to read this file","suites":["pr related issues","pr 5676 whole column defined names"],"updatePoint":{"line":5,"column":40,"index":249},"line":5,"code":"    it('Should be able to read this file', () => {\n      const wb = new ExcelJS.Workbook();\n      return wb.xlsx.readFile(TEST_567_XLSX_FILE_NAME);\n    });","file":"integration/pr/test-pr-567.spec.js","skipped":false,"dir":"spec"},{"name":"pull request 728 - Read worksheet hidden state","suites":["github issues"],"updatePoint":{"line":3,"column":52,"index":124},"line":3,"code":"  it('pull request 728 - Read worksheet hidden state', () => {\n    const wb = new ExcelJS.Workbook();\n    return wb.xlsx.readFile('./spec/integration/data/test-pr-728.xlsx').then(() => {\n      const expected = {\n        1: 'visible',\n        2: 'hidden',\n        3: 'visible'\n      };\n      wb.eachSheet((ws, sheetId) => {\n        expect(ws.state).to.equal(expected[sheetId]);\n      });\n    });\n  });","file":"integration/pr/test-pr-728.spec.js","skipped":false,"dir":"spec"},{"name":"Should preserve leading and trailing whitespace","suites":["pr related issues","pr 896 leading and trailing whitespace"],"updatePoint":{"line":5,"column":55,"index":247},"line":5,"code":"    it('Should preserve leading and trailing whitespace', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('foo');\n      ws.getCell('A1').value = ' leading';\n      ws.getCell('A1').note = ' leading';\n      ws.getCell('B1').value = 'trailing ';\n      ws.getCell('B1').note = 'trailing ';\n      ws.getCell('C1').value = ' both ';\n      ws.getCell('C1').note = ' both ';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('foo');\n        expect(ws2.getCell('A1').value).to.equal(' leading');\n        expect(ws2.getCell('A1').note).to.equal(' leading');\n        expect(ws2.getCell('B1').value).to.equal('trailing ');\n        expect(ws2.getCell('B1').note).to.equal('trailing ');\n        expect(ws2.getCell('C1').value).to.equal(' both ');\n        expect(ws2.getCell('C1').note).to.equal(' both ');\n      });\n    });","file":"integration/pr/test-pr-896.spec.js","skipped":false,"dir":"spec"},{"name":"Should preserve newlines","suites":["pr related issues","pr 896 leading and trailing whitespace"],"updatePoint":{"line":27,"column":32,"index":1242},"line":27,"code":"    it('Should preserve newlines', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('foo');\n      ws.getCell('A1').value = 'Hello,\\nWorld!';\n      ws.getCell('A1').note = 'Later,\\nAlligator!';\n      ws.getCell('B1').value = ' Hello, \\n World! ';\n      ws.getCell('B1').note = ' Later, \\n Alligator! ';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('foo');\n        expect(ws2.getCell('A1').value).to.equal('Hello,\\nWorld!');\n        expect(ws2.getCell('A1').note).to.equal('Later,\\nAlligator!');\n        expect(ws2.getCell('B1').value).to.equal(' Hello, \\n World! ');\n        expect(ws2.getCell('B1').note).to.equal(' Later, \\n Alligator! ');\n      });\n    });","file":"integration/pr/test-pr-896.spec.js","skipped":false,"dir":"spec"},{"name":"xlsx file","suites":["WorkbookReader","Serialise"],"updatePoint":{"line":10,"column":17,"index":394},"line":10,"code":"    it('xlsx file', function () {\n      this.timeout(10000);\n      const wb = testutils.createTestBook(new ExcelJS.Workbook(), 'xlsx');\n      return wb.xlsx.writeFile(TEST_FILE_NAME).then(() => testutils.checkTestBookReader(TEST_FILE_NAME));\n    });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should bail out if the file contains more rows than the limit","suites":["WorkbookReader","#readFile","Row limit"],"updatePoint":{"line":18,"column":71,"index":770},"line":18,"code":"      it('should bail out if the file contains more rows than the limit', () => {\n        const workbook = new ExcelJS.Workbook();\n        // The Fibonacci sheet has 19 rows\n        return workbook.xlsx.readFile('./spec/integration/data/fibonacci.xlsx', {\n          maxRows: 10\n        }).then(() => {\n          throw new Error('Promise unexpectedly fulfilled');\n        }, err => {\n          expect(err.message).to.equal('Max row count (10) exceeded');\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should fail fast on a huge file","suites":["WorkbookReader","#readFile","Row limit"],"updatePoint":{"line":29,"column":41,"index":1216},"line":29,"code":"      it('should fail fast on a huge file', function () {\n        this.timeout(5000);\n        const workbook = new ExcelJS.Workbook();\n        return workbook.xlsx.readFile('./spec/integration/data/huge.xlsx', {\n          maxRows: 100\n        }).then(() => {\n          throw new Error('Promise unexpectedly fulfilled');\n        }, err => {\n          expect(err.message).to.equal('Max row count (100) exceeded');\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should parse fine if the limit is not exceeded","suites":["WorkbookReader","#readFile","Row limit"],"updatePoint":{"line":40,"column":56,"index":1665},"line":40,"code":"      it('should parse fine if the limit is not exceeded', () => {\n        const workbook = new ExcelJS.Workbook();\n        return workbook.xlsx.readFile('./spec/integration/data/fibonacci.xlsx', {\n          maxRows: 20\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should bail out if the file contains more cells than the limit","suites":["WorkbookReader","#readFile","Column limit"],"updatePoint":{"line":48,"column":72,"index":1968},"line":48,"code":"      it('should bail out if the file contains more cells than the limit', () => {\n        const workbook = new ExcelJS.Workbook();\n        // The many-columns sheet has 20 columns in row 2\n        return workbook.xlsx.readFile('./spec/integration/data/many-columns.xlsx', {\n          maxCols: 15\n        }).then(() => {\n          throw new Error('Promise unexpectedly fulfilled');\n        }, err => {\n          expect(err.message).to.equal('Max column count (15) exceeded');\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should fail fast on a huge file","suites":["WorkbookReader","#readFile","Column limit"],"updatePoint":{"line":59,"column":41,"index":2435},"line":59,"code":"      it('should fail fast on a huge file', function () {\n        this.timeout(5000);\n        const workbook = new ExcelJS.Workbook();\n        return workbook.xlsx.readFile('./spec/integration/data/huge.xlsx', {\n          maxCols: 10\n        }).then(() => {\n          throw new Error('Promise unexpectedly fulfilled');\n        }, err => {\n          expect(err.message).to.equal('Max column count (10) exceeded');\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should parse fine if the limit is not exceeded","suites":["WorkbookReader","#readFile","Column limit"],"updatePoint":{"line":70,"column":56,"index":2885},"line":70,"code":"      it('should parse fine if the limit is not exceeded', () => {\n        const workbook = new ExcelJS.Workbook();\n        return workbook.xlsx.readFile('./spec/integration/data/many-columns.xlsx', {\n          maxCols: 40\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should bail out if the file contains more rows than the limit","suites":["WorkbookReader","#read","Row limit"],"updatePoint":{"line":80,"column":71,"index":3221},"line":80,"code":"      it('should bail out if the file contains more rows than the limit', () => {\n        const workbook = new ExcelJS.Workbook();\n        // The Fibonacci sheet has 19 rows\n        return workbook.xlsx.read(fs.createReadStream('./spec/integration/data/fibonacci.xlsx'), {\n          maxRows: 10\n        }).then(() => {\n          throw new Error('Promise unexpectedly fulfilled');\n        }, err => {\n          expect(err.message).to.equal('Max row count (10) exceeded');\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should parse fine if the limit is not exceeded","suites":["WorkbookReader","#read","Row limit"],"updatePoint":{"line":91,"column":56,"index":3699},"line":91,"code":"      it('should parse fine if the limit is not exceeded', () => {\n        const workbook = new ExcelJS.Workbook();\n        return workbook.xlsx.read(fs.createReadStream('./spec/integration/data/fibonacci.xlsx'), {\n          maxRows: 20\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"edit styles of single row instead of all","suites":["WorkbookReader","edit styles in existing file"],"updatePoint":{"line":104,"column":48,"index":4176},"line":104,"code":"    it('edit styles of single row instead of all', function () {\n      const ws = this.wb.getWorksheet(1);\n      ws.eachRow((row, rowNo) => {\n        if (rowNo % 5 === 0) {\n          row.font = {\n            color: {\n              argb: '00ff00'\n            }\n          };\n        }\n      });\n      expect(ws.getRow(3).font.color.argb).to.be.equal(ws.getRow(6).font.color.argb);\n      expect(ws.getRow(6).font.color.argb).to.be.equal(ws.getRow(9).font.color.argb);\n      expect(ws.getRow(9).font.color.argb).to.be.equal(ws.getRow(12).font.color.argb);\n      expect(ws.getRow(12).font.color.argb).not.to.be.equal(ws.getRow(15).font.color.argb);\n      expect(ws.getRow(15).font.color.argb).not.to.be.equal(ws.getRow(18).font.color.argb);\n      expect(ws.getRow(15).font.color.argb).to.be.equal(ws.getRow(10).font.color.argb);\n      expect(ws.getRow(10).font.color.argb).to.be.equal(ws.getRow(5).font.color.argb);\n    });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should be classified as a formula cell","suites":["WorkbookReader","with a spreadsheet that contains formulas","with a cell that contains a regular formula"],"updatePoint":{"line":136,"column":48,"index":5610},"line":136,"code":"      it('should be classified as a formula cell', function () {\n        expect(this.cell.type).to.equal(ExcelJS.ValueType.Formula);\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should have text corresponding to the evaluated formula result","suites":["WorkbookReader","with a spreadsheet that contains formulas","with a cell that contains a regular formula"],"updatePoint":{"line":139,"column":72,"index":5777},"line":139,"code":"      it('should have text corresponding to the evaluated formula result', function () {\n        expect(this.cell.text).to.equal('someone@example.com');\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should have the formula source","suites":["WorkbookReader","with a spreadsheet that contains formulas","with a cell that contains a regular formula"],"updatePoint":{"line":142,"column":40,"index":5908},"line":142,"code":"      it('should have the formula source', function () {\n        expect(this.cell.model.formula).to.equal('_xlfn.CONCAT(\"someone\",\"@example.com\")');\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should be classified as a formula cell","suites":["WorkbookReader","with a spreadsheet that contains formulas","with a cell that contains a hyperlinked formula"],"updatePoint":{"line":150,"column":48,"index":6246},"line":150,"code":"      it('should be classified as a formula cell', function () {\n        expect(this.cell.type).to.equal(ExcelJS.ValueType.Hyperlink);\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should have text corresponding to the evaluated formula result","suites":["WorkbookReader","with a spreadsheet that contains formulas","with a cell that contains a hyperlinked formula"],"updatePoint":{"line":153,"column":72,"index":6415},"line":153,"code":"      it('should have text corresponding to the evaluated formula result', function () {\n        expect(this.cell.value.text).to.equal('someone@example.com');\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should have the formula source","suites":["WorkbookReader","with a spreadsheet that contains formulas","with a cell that contains a hyperlinked formula"],"updatePoint":{"line":156,"column":40,"index":6552},"line":156,"code":"      it('should have the formula source', function () {\n        expect(this.cell.model.formula).to.equal('_xlfn.CONCAT(\"someone\",\"@example.com\")');\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should contain the linked url","suites":["WorkbookReader","with a spreadsheet that contains formulas","with a cell that contains a hyperlinked formula"],"updatePoint":{"line":159,"column":39,"index":6710},"line":159,"code":"      it('should contain the linked url', function () {\n        expect(this.cell.value.hyperlink).to.equal('mailto:someone@example.com');\n        expect(this.cell.hyperlink).to.equal('mailto:someone@example.com');\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should decode the underscore","suites":["WorkbookReader","with a spreadsheet that contains a shared string with an escaped underscore"],"updatePoint":{"line":173,"column":36,"index":7346},"line":173,"code":"    it('should decode the underscore', function () {\n      const cell = this.worksheet.getCell('A1');\n      expect(cell.value).to.equal('_x000D_');\n    });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should reject the promise with the sax error","suites":["WorkbookReader","with a spreadsheet that has an XML parse error in a worksheet"],"updatePoint":{"line":189,"column":52,"index":7927},"line":189,"code":"    it('should reject the promise with the sax error', () => {\n      const workbook = new ExcelJS.Workbook();\n      return workbook.xlsx.readFile('./spec/integration/data/invalid-xml.xlsx').then(() => {\n        throw new Error('Promise unexpectedly fulfilled');\n      }, err => {\n        expect(err.message).to.equal('3:1: text data outside of root node.');\n        // Wait a tick before checking for an unhandled rejection\n        return new Promise(setImmediate);\n      }).then(() => {\n        expect(unhandledRejection).to.be.undefined();\n      });\n    });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should not break","suites":["WorkbookReader","with a spreadsheet that is missing some files in the zip container"],"updatePoint":{"line":203,"column":24,"index":8554},"line":203,"code":"    it('should not break', () => {\n      const workbook = new ExcelJS.Workbook();\n      return workbook.xlsx.readFile('./spec/integration/data/missing-bits.xlsx');\n    });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should integer part of col equals nativeCol","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s tl anchor"],"updatePoint":{"line":217,"column":53,"index":9154},"line":217,"code":"      it('Should integer part of col equals nativeCol', function () {\n        this.worksheet.getImages().forEach(image => {\n          expect(Math.floor(image.range.tl.col)).to.equal(image.range.tl.nativeCol);\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should integer part of row equals nativeRow","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s tl anchor"],"updatePoint":{"line":222,"column":53,"index":9385},"line":222,"code":"      it('Should integer part of row equals nativeRow', function () {\n        this.worksheet.getImages().forEach(image => {\n          expect(Math.floor(image.range.tl.row)).to.equal(image.range.tl.nativeRow);\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should anchor width equals to column width when custom","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s tl anchor"],"updatePoint":{"line":227,"column":64,"index":9627},"line":227,"code":"      it('Should anchor width equals to column width when custom', function () {\n        const ws = this.worksheet;\n        ws.getImages().forEach(image => {\n          const col = ws.getColumn(image.range.tl.nativeCol + 1);\n          if (col.isCustomWidth) {\n            expect(image.range.tl.colWidth).to.equal(Math.floor(col.width * 10000));\n          } else {\n            expect(image.range.tl.colWidth).to.equal(640000);\n          }\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should anchor height equals to row height","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s tl anchor"],"updatePoint":{"line":238,"column":51,"index":10073},"line":238,"code":"      it('Should anchor height equals to row height', function () {\n        const ws = this.worksheet;\n        ws.getImages().forEach(image => {\n          const row = ws.getRow(image.range.tl.nativeRow + 1);\n          if (row.height) {\n            expect(image.range.tl.rowHeight).to.equal(Math.floor(row.height * 10000));\n          } else {\n            expect(image.range.tl.rowHeight).to.equal(180000);\n          }\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should integer part of col equals nativeCol","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s br anchor"],"updatePoint":{"line":251,"column":53,"index":10569},"line":251,"code":"      it('Should integer part of col equals nativeCol', function () {\n        this.worksheet.getImages().forEach(image => {\n          expect(Math.floor(image.range.br.col)).to.equal(image.range.br.nativeCol);\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should integer part of row equals nativeRow","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s br anchor"],"updatePoint":{"line":256,"column":53,"index":10800},"line":256,"code":"      it('Should integer part of row equals nativeRow', function () {\n        this.worksheet.getImages().forEach(image => {\n          expect(Math.floor(image.range.br.row)).to.equal(image.range.br.nativeRow);\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should anchor width equals to column width when custom","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s br anchor"],"updatePoint":{"line":261,"column":64,"index":11042},"line":261,"code":"      it('Should anchor width equals to column width when custom', function () {\n        const ws = this.worksheet;\n        ws.getImages().forEach(image => {\n          const col = ws.getColumn(image.range.br.nativeCol + 1);\n          if (col.isCustomWidth) {\n            expect(image.range.br.colWidth).to.equal(Math.floor(col.width * 10000));\n          } else {\n            expect(image.range.br.colWidth).to.equal(640000);\n          }\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"Should anchor height equals to row height","suites":["WorkbookReader","with a spreadsheet that contains images","with image`s br anchor"],"updatePoint":{"line":272,"column":51,"index":11488},"line":272,"code":"      it('Should anchor height equals to row height', function () {\n        const ws = this.worksheet;\n        ws.getImages().forEach(image => {\n          const row = ws.getRow(image.range.br.nativeRow + 1);\n          if (row.height) {\n            expect(image.range.br.rowHeight).to.equal(Math.floor(row.height * 10000));\n          } else {\n            expect(image.range.br.rowHeight).to.equal(180000);\n          }\n        });\n      });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"should not crash","suites":["WorkbookReader","with a spreadsheet containing a defined name that kinda looks like it contains a range"],"updatePoint":{"line":286,"column":24,"index":12023},"line":286,"code":"    it('should not crash', () => {\n      const workbook = new ExcelJS.Workbook();\n      return workbook.xlsx.read(fs.createReadStream('./spec/integration/data/bogus-defined-name.xlsx'));\n    });","file":"integration/workbook-xlsx-reader.spec.js","skipped":false,"dir":"spec"},{"name":"creates sheets with correct names","suites":["WorkbookWriter"],"updatePoint":{"line":11,"column":39,"index":387},"line":11,"code":"  it('creates sheets with correct names', () => {\n    const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n    const ws1 = wb.addWorksheet('Hello, World!');\n    expect(ws1.name).to.equal('Hello, World!');\n    const ws2 = wb.addWorksheet();\n    expect(ws2.name).to.match(/sheet\\d+/);\n  });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"xlsx file","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":19,"column":17,"index":686},"line":19,"code":"    it('xlsx file', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: true\n      };\n      const wb = testUtils.createTestBook(new ExcelJS.stream.xlsx.WorkbookWriter(options), 'xlsx');\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'xlsx');\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"shared formula","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":32,"column":22,"index":1139},"line":32,"code":"    it('shared formula', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: false\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = {\n        formula: 'ROW()+COLUMN()',\n        ref: 'A1:B2',\n        result: 2\n      };\n      ws.getCell('B1').value = {\n        sharedFormula: 'A1',\n        result: 3\n      };\n      ws.getCell('A2').value = {\n        sharedFormula: 'A1',\n        result: 3\n      };\n      ws.getCell('B2').value = {\n        sharedFormula: 'A1',\n        result: 4\n      };\n      ws.commit();\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('Hello');\n        expect(ws2.getCell('A1').value).to.deep.equal({\n          formula: 'ROW()+COLUMN()',\n          shareType: 'shared',\n          ref: 'A1:B2',\n          result: 2\n        });\n        expect(ws2.getCell('B1').value).to.deep.equal({\n          sharedFormula: 'A1',\n          result: 3\n        });\n        expect(ws2.getCell('A2').value).to.deep.equal({\n          sharedFormula: 'A1',\n          result: 3\n        });\n        expect(ws2.getCell('B2').value).to.deep.equal({\n          sharedFormula: 'A1',\n          result: 4\n        });\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"auto filter","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":82,"column":19,"index":2540},"line":82,"code":"    it('auto filter', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: false\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = 1;\n      ws.getCell('B1').value = 1;\n      ws.getCell('A2').value = 2;\n      ws.getCell('B2').value = 2;\n      ws.getCell('A3').value = 3;\n      ws.getCell('B3').value = 3;\n      ws.autoFilter = 'A1:B1';\n      ws.commit();\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('Hello');\n        expect(ws2.autoFilter).to.equal('A1:B1');\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"Without styles","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":105,"column":22,"index":3308},"line":105,"code":"    it('Without styles', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: false\n      };\n      const wb = testUtils.createTestBook(new ExcelJS.stream.xlsx.WorkbookWriter(options), 'xlsx');\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'xlsx', undefined, {\n          checkStyles: false\n        });\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"serializes row styles and columns properly","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":120,"column":50,"index":3843},"line":120,"code":"    it('serializes row styles and columns properly', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: true\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('blort');\n      const colStyle = {\n        font: testUtils.styles.fonts.comicSansUdB16,\n        alignment: testUtils.styles.namedAlignments.middleCentre\n      };\n      ws.columns = [{\n        header: 'A1',\n        width: 10\n      }, {\n        header: 'B1',\n        style: colStyle\n      }, {\n        header: 'C1',\n        width: 30\n      }, {\n        header: 'D1'\n      }];\n      ws.getRow(2).font = testUtils.styles.fonts.broadwayRedOutline20;\n      ws.getCell('A2').value = 'A2';\n      ws.getCell('B2').value = 'B2';\n      ws.getCell('C2').value = 'C2';\n      ws.getCell('A3').value = 'A3';\n      ws.getCell('B3').value = 'B3';\n      ws.getCell('C3').value = 'C3';\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('blort');\n        ['A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3'].forEach(address => {\n          expect(ws2.getCell(address).value).to.equal(address);\n        });\n        expect(ws2.getCell('B1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws2.getCell('B1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n        expect(ws2.getCell('A2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n        expect(ws2.getCell('B2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n        expect(ws2.getCell('C2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n        expect(ws2.getCell('B3').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws2.getCell('B3').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n        expect(ws2.getColumn(2).font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws2.getColumn(2).alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n        expect(ws2.getColumn(2).width).to.equal(9);\n        expect(ws2.getColumn(4).width).to.equal(undefined);\n        expect(ws2.getRow(2).font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"rich text","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":172,"column":17,"index":6217},"line":172,"code":"    it('rich text', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: true\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = {\n        richText: [{\n          font: {\n            color: {\n              argb: 'FF0000'\n            }\n          },\n          text: 'red '\n        }, {\n          font: {\n            color: {\n              argb: '00FF00'\n            },\n            bold: true\n          },\n          text: ' bold green'\n        }]\n      };\n      ws.getCell('B1').value = 'plain text';\n      ws.commit();\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('Hello');\n        expect(ws2.getCell('A1').value).to.deep.equal({\n          richText: [{\n            font: {\n              color: {\n                argb: 'FF0000'\n              }\n            },\n            text: 'red '\n          }, {\n            font: {\n              color: {\n                argb: '00FF00'\n              },\n              bold: true\n            },\n            text: ' bold green'\n          }]\n        });\n        expect(ws2.getCell('B1').value).to.equal('plain text');\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"A lot of sheets","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":225,"column":23,"index":7575},"line":225,"code":"    it('A lot of sheets', function () {\n      this.timeout(5000);\n      let i;\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter({\n        filename: TEST_XLSX_FILE_NAME\n      });\n      const numSheets = 90;\n      // add numSheets sheets\n      for (i = 1; i <= numSheets; i++) {\n        const ws = wb.addWorksheet(`sheet${i}`);\n        ws.getCell('A1').value = i;\n      }\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        for (i = 1; i <= numSheets; i++) {\n          const ws2 = wb2.getWorksheet(`sheet${i}`);\n          expect(ws2).to.be.ok();\n          expect(ws2.getCell('A1').value).to.equal(i);\n        }\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"addRow","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":248,"column":14,"index":8316},"line":248,"code":"    it('addRow', () => {\n      const options = {\n        stream: fs.createWriteStream(TEST_XLSX_FILE_NAME, {\n          flags: 'w'\n        }),\n        useStyles: true,\n        useSharedStrings: true\n      };\n      const workbook = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const worksheet = workbook.addWorksheet('test');\n      const newRow = worksheet.addRow(['hello']);\n      newRow.commit();\n      worksheet.commit();\n      return workbook.commit();\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"defined names","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":263,"column":21,"index":8796},"line":263,"code":"    it('defined names', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter({\n        filename: TEST_XLSX_FILE_NAME\n      });\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 5;\n      ws.getCell('A1').name = 'five';\n      ws.getCell('A3').value = 'drei';\n      ws.getCell('A3').name = 'threes';\n      ws.getCell('B3').value = 'trois';\n      ws.getCell('B3').name = 'threes';\n      ws.getCell('B3').value = 'san';\n      ws.getCell('B3').name = 'threes';\n      ws.getCell('E1').value = 'grün';\n      ws.getCell('E1').name = 'greens';\n      ws.getCell('E2').value = 'vert';\n      ws.getCell('E2').name = 'greens';\n      ws.getCell('E3').value = 'verde';\n      ws.getCell('E3').name = 'greens';\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('blort');\n        expect(ws2.getCell('A1').name).to.equal('five');\n        expect(ws2.getCell('A3').name).to.equal('threes');\n        expect(ws2.getCell('B3').name).to.equal('threes');\n        expect(ws2.getCell('B3').name).to.equal('threes');\n        expect(ws2.getCell('E1').name).to.equal('greens');\n        expect(ws2.getCell('E2').name).to.equal('greens');\n        expect(ws2.getCell('E3').name).to.equal('greens');\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"does not escape special xml characters","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":296,"column":46,"index":10185},"line":296,"code":"    it('does not escape special xml characters', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter({\n        filename: TEST_XLSX_FILE_NAME,\n        useSharedStrings: true\n      });\n      const ws = wb.addWorksheet('blort');\n      const xmlCharacters = 'xml characters: & < > \"';\n      ws.getCell('A1').value = xmlCharacters;\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('blort');\n        expect(ws2.getCell('A1').value).to.equal(xmlCharacters);\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"serializes and deserializes dataValidations","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":312,"column":51,"index":10819},"line":312,"code":"    it('serializes and deserializes dataValidations', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME\n      };\n      const wb = testUtils.createTestBook(new ExcelJS.stream.xlsx.WorkbookWriter(options), 'xlsx', ['dataValidations']);\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'xlsx', ['dataValidations']);\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"with zip compression option","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":324,"column":35,"index":11302},"line":324,"code":"    it('with zip compression option', () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: true,\n        zip: {\n          zlib: {\n            level: 9\n          } // Sets the compression level.\n        }\n      };\n\n      const wb = testUtils.createTestBook(new ExcelJS.stream.xlsx.WorkbookWriter(options), 'xlsx', ['dataValidations']);\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'xlsx', ['dataValidations']);\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"writes notes","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":343,"column":20,"index":11904},"line":343,"code":"    it('writes notes', async () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('B2').value = 5;\n      ws.getCell('B2').note = 'five';\n      const note = {\n        texts: [{\n          font: {\n            size: 12,\n            color: {\n              argb: 'FFFF6600'\n            },\n            name: 'Calibri',\n            scheme: 'minor'\n          },\n          text: 'seven'\n        }],\n        margins: {\n          insetmode: 'auto',\n          inset: [0.13, 0.13, 0.25, 0.25]\n        },\n        protection: {\n          locked: 'True',\n          lockText: 'True'\n        },\n        editAs: 'twoCells'\n      };\n      ws.getCell('D2').value = 7;\n      ws.getCell('D2').note = note;\n      await wb.commit();\n      const wb2 = new ExcelJS.Workbook();\n      await wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      const ws2 = wb2.getWorksheet('Hello');\n      expect(ws2.getCell('B2').value).to.equal(5);\n      expect(ws2.getCell('B2').note).to.equal('five');\n      expect(ws2.getCell('D2').value).to.equal(7);\n      expect(ws2.getCell('D2').note.texts).to.deep.equal(note.texts);\n      expect(ws2.getCell('D2').note.margins).to.deep.equal(note.margins);\n      expect(ws2.getCell('D2').note.protection).to.deep.equal(note.protection);\n      expect(ws2.getCell('D2').note.editAs).to.deep.equal(note.editAs);\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"Cell annotation supports setting margins and protection properties","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":387,"column":74,"index":13417},"line":387,"code":"    it('Cell annotation supports setting margins and protection properties', async () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('B2').value = 5;\n      ws.getCell('B2').note = 'five';\n      const note = {\n        texts: [{\n          font: {\n            size: 12,\n            color: {\n              argb: 'FFFF6600'\n            },\n            name: 'Calibri',\n            scheme: 'minor'\n          },\n          text: 'seven'\n        }],\n        margins: {\n          insetmode: 'custom',\n          inset: [0.25, 0.25, 0.35, 0.35]\n        },\n        protection: {\n          locked: 'False',\n          lockText: 'False'\n        },\n        editAs: 'oneCells'\n      };\n      ws.getCell('D2').value = 7;\n      ws.getCell('D2').note = note;\n      await wb.commit();\n      const wb2 = new ExcelJS.Workbook();\n      await wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      const ws2 = wb2.getWorksheet('Hello');\n      expect(ws2.getCell('B2').value).to.equal(5);\n      expect(ws2.getCell('B2').note).to.equal('five');\n      expect(ws2.getCell('D2').value).to.equal(7);\n      expect(ws2.getCell('D2').note.texts).to.deep.equal(note.texts);\n      expect(ws2.getCell('D2').note.margins).to.deep.equal(note.margins);\n      expect(ws2.getCell('D2').note.protection).to.deep.equal(note.protection);\n      expect(ws2.getCell('D2').note.editAs).to.deep.equal(note.editAs);\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"with background image","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":431,"column":29,"index":14889},"line":431,"code":"    it('with background image', async () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('Hello');\n      const imageId = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'jpeg'\n      });\n      ws.getCell('A1').value = 'Hello, World!';\n      ws.addBackgroundImage(imageId);\n      await wb.commit();\n      const wb2 = new ExcelJS.Workbook();\n      await wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      const ws2 = wb2.getWorksheet('Hello');\n      const backgroundId2 = ws2.getBackgroundImageId();\n      const image = wb2.getImage(backgroundId2);\n      const imageData = await fsReadFileAsync(IMAGE_FILENAME);\n      expect(Buffer.compare(imageData, image.buffer)).to.equal(0);\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"with background image where worksheet is commited in advance","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":452,"column":68,"index":15753},"line":452,"code":"    it('with background image where worksheet is commited in advance', async () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME\n      };\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws = wb.addWorksheet('Hello');\n      const imageId = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'jpeg'\n      });\n      ws.getCell('A1').value = 'Hello, World!';\n      ws.addBackgroundImage(imageId);\n      await ws.commit();\n      await wb.commit();\n      const wb2 = new ExcelJS.Workbook();\n      await wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      const ws2 = wb2.getWorksheet('Hello');\n      const backgroundId2 = ws2.getBackgroundImageId();\n      const image = wb2.getImage(backgroundId2);\n      const imageData = await fsReadFileAsync(IMAGE_FILENAME);\n      expect(Buffer.compare(imageData, image.buffer)).to.equal(0);\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"with conditional formatting","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":474,"column":35,"index":16609},"line":474,"code":"    it('with conditional formatting', async () => {\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: true,\n        useSharedStrings: true\n      };\n      const wb = testUtils.createTestBook(new ExcelJS.stream.xlsx.WorkbookWriter(options), 'xlsx', ['conditionalFormatting']);\n      return wb.commit().then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'xlsx', ['conditionalFormatting']);\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"with conditional formatting that contains numFmt (#1814)","suites":["WorkbookWriter","Serialise"],"updatePoint":{"line":488,"column":64,"index":17196},"line":488,"code":"    it('with conditional formatting that contains numFmt (#1814)', async () => {\n      const sheet = 'conditionalFormatting';\n      const options = {\n        filename: TEST_XLSX_FILE_NAME,\n        useStyles: true\n      };\n\n      // generate file with conditional formatting that contains styles with numFmt\n      const wb1 = new ExcelJS.stream.xlsx.WorkbookWriter(options);\n      const ws1 = wb1.addWorksheet(sheet);\n      const cf1 = testUtils.conditionalFormatting.abbreviation;\n      ws1.addConditionalFormatting(cf1);\n      await wb1.commit();\n\n      // read generated file and extract saved conditional formatting rule\n      const wb2 = new ExcelJS.Workbook();\n      await wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      const ws2 = wb2.getWorksheet(sheet);\n      const [cf2] = ws2.conditionalFormattings;\n\n      // verify that rules from generated file contain styles with valid numFmt\n      cf2.rules.forEach(rule => {\n        expect(rule.style.numFmt).to.exist();\n        expect(rule.style.numFmt.id).to.be.a('number');\n        expect(rule.style.numFmt.formatCode).to.be.a('string');\n      });\n    });","file":"integration/workbook-xlsx-writer/workbook-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"stores background image","suites":["Workbook","Images"],"updatePoint":{"line":15,"column":31,"index":446},"line":15,"code":"    it('stores background image', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      let wb2;\n      let ws2;\n      const imageId = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'jpeg'\n      });\n      ws.getCell('A1').value = 'Hello, World!';\n      ws.addBackgroundImage(imageId);\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(() => {\n        ws2 = wb2.getWorksheet('blort');\n        expect(ws2).to.not.be.undefined();\n        return fsReadFileAsync(IMAGE_FILENAME);\n      }).then(imageData => {\n        const backgroundId2 = ws2.getBackgroundImageId();\n        const image = wb2.getImage(backgroundId2);\n        expect(Buffer.compare(imageData, image.buffer)).to.equal(0);\n      });\n    });","file":"integration/workbook/images.spec.js","skipped":false,"dir":"spec"},{"name":"stores embedded image and hyperlink","suites":["Workbook","Images"],"updatePoint":{"line":39,"column":43,"index":1343},"line":39,"code":"    it('stores embedded image and hyperlink', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      let wb2;\n      let ws2;\n      const imageId = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'jpeg'\n      });\n      ws.getCell('A1').value = 'Hello, World!';\n      ws.getCell('A2').value = {\n        hyperlink: 'http://www.somewhere.com',\n        text: 'www.somewhere.com'\n      };\n      ws.addImage(imageId, 'C3:E6');\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(() => {\n        ws2 = wb2.getWorksheet('blort');\n        expect(ws2).to.not.be.undefined();\n        expect(ws.getCell('A1').value).to.equal('Hello, World!');\n        expect(ws.getCell('A2').value).to.deep.equal({\n          hyperlink: 'http://www.somewhere.com',\n          text: 'www.somewhere.com'\n        });\n        return fsReadFileAsync(IMAGE_FILENAME);\n      }).then(imageData => {\n        const images = ws2.getImages();\n        expect(images.length).to.equal(1);\n        const imageDesc = images[0];\n        expect(imageDesc.range.tl.col).to.equal(2);\n        expect(imageDesc.range.tl.row).to.equal(2);\n        expect(imageDesc.range.br.col).to.equal(5);\n        expect(imageDesc.range.br.row).to.equal(6);\n        const image = wb2.getImage(imageDesc.imageId);\n        expect(Buffer.compare(imageData, image.buffer)).to.equal(0);\n      });\n    });","file":"integration/workbook/images.spec.js","skipped":false,"dir":"spec"},{"name":"stores embedded image with oneCell","suites":["Workbook","Images"],"updatePoint":{"line":78,"column":42,"index":2853},"line":78,"code":"    it('stores embedded image with oneCell', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      let wb2;\n      let ws2;\n      const imageId = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'jpeg'\n      });\n      ws.addImage(imageId, {\n        tl: {\n          col: 0.1125,\n          row: 0.4\n        },\n        br: {\n          col: 2.101046875,\n          row: 3.4\n        },\n        editAs: 'oneCell'\n      });\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(() => {\n        ws2 = wb2.getWorksheet('blort');\n        expect(ws2).to.not.be.undefined();\n        return fsReadFileAsync(IMAGE_FILENAME);\n      }).then(imageData => {\n        const images = ws2.getImages();\n        expect(images.length).to.equal(1);\n        const imageDesc = images[0];\n        expect(imageDesc.range.editAs).to.equal('oneCell');\n        const image = wb2.getImage(imageDesc.imageId);\n        expect(Buffer.compare(imageData, image.buffer)).to.equal(0);\n      });\n    });","file":"integration/workbook/images.spec.js","skipped":false,"dir":"spec"},{"name":"stores embedded image with one-cell-anchor","suites":["Workbook","Images"],"updatePoint":{"line":114,"column":50,"index":4001},"line":114,"code":"    it('stores embedded image with one-cell-anchor', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      let wb2;\n      let ws2;\n      const imageId = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'jpeg'\n      });\n      ws.addImage(imageId, {\n        tl: {\n          col: 0.1125,\n          row: 0.4\n        },\n        ext: {\n          width: 100,\n          height: 100\n        },\n        editAs: 'oneCell'\n      });\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(() => {\n        ws2 = wb2.getWorksheet('blort');\n        expect(ws2).to.not.be.undefined();\n        return fsReadFileAsync(IMAGE_FILENAME);\n      }).then(imageData => {\n        const images = ws2.getImages();\n        expect(images.length).to.equal(1);\n        const imageDesc = images[0];\n        expect(imageDesc.range.editAs).to.equal('oneCell');\n        expect(imageDesc.range.ext.width).to.equal(100);\n        expect(imageDesc.range.ext.height).to.equal(100);\n        const image = wb2.getImage(imageDesc.imageId);\n        expect(Buffer.compare(imageData, image.buffer)).to.equal(0);\n      });\n    });","file":"integration/workbook/images.spec.js","skipped":false,"dir":"spec"},{"name":"stores embedded image with hyperlinks","suites":["Workbook","Images"],"updatePoint":{"line":152,"column":45,"index":5257},"line":152,"code":"    it('stores embedded image with hyperlinks', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      let wb2;\n      let ws2;\n      const imageId = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'jpeg'\n      });\n      ws.addImage(imageId, {\n        tl: {\n          col: 0.1125,\n          row: 0.4\n        },\n        ext: {\n          width: 100,\n          height: 100\n        },\n        editAs: 'absolute',\n        hyperlinks: {\n          hyperlink: 'http://www.somewhere.com',\n          tooltip: 'www.somewhere.com'\n        }\n      });\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(() => {\n        ws2 = wb2.getWorksheet('blort');\n        expect(ws2).to.not.be.undefined();\n        return fsReadFileAsync(IMAGE_FILENAME);\n      }).then(imageData => {\n        const images = ws2.getImages();\n        expect(images.length).to.equal(1);\n        const imageDesc = images[0];\n        expect(imageDesc.range.editAs).to.equal('absolute');\n        expect(imageDesc.range.ext.width).to.equal(100);\n        expect(imageDesc.range.ext.height).to.equal(100);\n        expect(imageDesc.range.hyperlinks).to.deep.equal({\n          hyperlink: 'http://www.somewhere.com',\n          tooltip: 'www.somewhere.com'\n        });\n        const image = wb2.getImage(imageDesc.imageId);\n        expect(Buffer.compare(imageData, image.buffer)).to.equal(0);\n      });\n    });","file":"integration/workbook/images.spec.js","skipped":false,"dir":"spec"},{"name":"image extensions should not be case sensitive","suites":["Workbook","Images"],"updatePoint":{"line":198,"column":53,"index":6803},"line":198,"code":"    it('image extensions should not be case sensitive', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      let wb2;\n      let ws2;\n      const imageId1 = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'PNG'\n      });\n      const imageId2 = wb.addImage({\n        filename: IMAGE_FILENAME,\n        extension: 'JPEG'\n      });\n      ws.addImage(imageId1, {\n        tl: {\n          col: 0.1125,\n          row: 0.4\n        },\n        ext: {\n          width: 100,\n          height: 100\n        }\n      });\n      ws.addImage(imageId2, {\n        tl: {\n          col: 0.1125,\n          row: 0.4\n        },\n        br: {\n          col: 2.101046875,\n          row: 3.4\n        },\n        editAs: 'oneCell'\n      });\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(() => {\n        ws2 = wb2.getWorksheet('blort');\n        expect(ws2).to.not.be.undefined();\n        return fsReadFileAsync(IMAGE_FILENAME);\n      }).then(imageData => {\n        const images = ws2.getImages();\n        expect(images.length).to.equal(2);\n        const imageDesc1 = images[0];\n        expect(imageDesc1.range.ext.width).to.equal(100);\n        expect(imageDesc1.range.ext.height).to.equal(100);\n        const image1 = wb2.getImage(imageDesc1.imageId);\n        const imageDesc2 = images[1];\n        expect(imageDesc2.range.editAs).to.equal('oneCell');\n        const image2 = wb2.getImage(imageDesc1.imageId);\n        expect(Buffer.compare(imageData, image1.buffer)).to.equal(0);\n        expect(Buffer.compare(imageData, image2.buffer)).to.equal(0);\n      });\n    });","file":"integration/workbook/images.spec.js","skipped":false,"dir":"spec"},{"name":"row styles and columns properly","suites":["Workbook","Styles"],"updatePoint":{"line":16,"column":39,"index":600},"line":16,"code":"    it('row styles and columns properly', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.columns = [{\n        header: 'A1',\n        width: 10\n      }, {\n        header: 'B1',\n        width: 20,\n        style: {\n          font: testUtils.styles.fonts.comicSansUdB16,\n          alignment: testUtils.styles.alignments[1].alignment\n        }\n      }, {\n        header: 'C1',\n        width: 30\n      }];\n      ws.getRow(2).font = testUtils.styles.fonts.broadwayRedOutline20;\n      ws.getCell('A2').value = 'A2';\n      ws.getCell('B2').value = 'B2';\n      ws.getCell('C2').value = 'C2';\n      ws.getCell('A3').value = 'A3';\n      ws.getCell('B3').value = 'B3';\n      ws.getCell('C3').value = 'C3';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('blort');\n        ['A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3'].forEach(address => {\n          expect(ws2.getCell(address).value).to.equal(address);\n        });\n        expect(ws2.getCell('B1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws2.getCell('B1').alignment).to.deep.equal(testUtils.styles.alignments[1].alignment);\n        expect(ws2.getCell('A2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n        expect(ws2.getCell('B2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n        expect(ws2.getCell('C2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n        expect(ws2.getCell('B3').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws2.getCell('B3').alignment).to.deep.equal(testUtils.styles.alignments[1].alignment);\n        expect(ws2.getColumn(2).font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws2.getColumn(2).alignment).to.deep.equal(testUtils.styles.alignments[1].alignment);\n        expect(ws2.getRow(2).font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n      });\n    });","file":"integration/workbook/styles.spec.js","skipped":false,"dir":"spec"},{"name":"in-cell formats properly in xlsx file","suites":["Workbook","Styles"],"updatePoint":{"line":60,"column":45,"index":2736},"line":60,"code":"    it('in-cell formats properly in xlsx file', () => {\n      // Stream from input string\n      const testData = Buffer.from(richTextSample, 'base64');\n\n      // Initiate the source\n      const bufferStream = new stream.PassThrough();\n\n      // Write your buffer\n      bufferStream.write(testData);\n      bufferStream.end();\n      const wb = new ExcelJS.Workbook();\n      return wb.xlsx.read(bufferStream).then(() => {\n        const ws = wb.worksheets[0];\n        expect(ws.getCell('A1').value).to.deep.equal(richTextSampleA1);\n        expect(ws.getCell('A1').text).to.equal(ws.getCell('A2').value);\n      });\n    });","file":"integration/workbook/styles.spec.js","skipped":false,"dir":"spec"},{"name":"null cells retain style","suites":["Workbook","Styles"],"updatePoint":{"line":77,"column":31,"index":3340},"line":77,"code":"    it('null cells retain style', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // one value here\n      ws.getCell('B2').value = 'hello';\n\n      // style here\n      ws.getCell('B4').fill = testUtils.styles.fills.redDarkVertical;\n      ws.getCell('B4').font = testUtils.styles.fonts.broadwayRedOutline20;\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('blort');\n        expect(ws2.getCell('B4').fill).to.deep.equal(testUtils.styles.fills.redDarkVertical);\n        expect(ws2.getCell('B4').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n      });\n    });","file":"integration/workbook/styles.spec.js","skipped":false,"dir":"spec"},{"name":"sets row styles","suites":["Workbook","Styles"],"updatePoint":{"line":96,"column":23,"index":4134},"line":96,"code":"    it('sets row styles', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('basket');\n      ws.getCell('A1').value = 5;\n      ws.getCell('A1').numFmt = testUtils.styles.numFmts.numFmt1;\n      ws.getCell('A1').font = testUtils.styles.fonts.arialBlackUI14;\n      ws.getCell('C1').value = 'Hello, World!';\n      ws.getCell('C1').alignment = testUtils.styles.namedAlignments.bottomRight;\n      ws.getCell('C1').border = testUtils.styles.borders.doubleRed;\n      ws.getCell('C1').fill = testUtils.styles.fills.redDarkVertical;\n      ws.getRow(1).numFmt = testUtils.styles.numFmts.numFmt2;\n      ws.getRow(1).font = testUtils.styles.fonts.comicSansUdB16;\n      ws.getRow(1).alignment = testUtils.styles.namedAlignments.middleCentre;\n      ws.getRow(1).border = testUtils.styles.borders.thin;\n      ws.getRow(1).fill = testUtils.styles.fills.redGreenDarkTrellis;\n      expect(ws.getCell('A1').numFmt).to.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n      expect(ws.findCell('B1')).to.be.undefined();\n      expect(ws.getCell('C1').numFmt).to.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('C1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('C1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('C1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n\n      // when we 'get' the previously null cell, it should inherit the row styles\n      expect(ws.getCell('B1').numFmt).to.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('B1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('B1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('B1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('B1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n    });","file":"integration/workbook/styles.spec.js","skipped":false,"dir":"spec"},{"name":"sets col styles","suites":["Workbook","Styles"],"updatePoint":{"line":130,"column":23,"index":6527},"line":130,"code":"    it('sets col styles', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('basket');\n      ws.getCell('A1').value = 5;\n      ws.getCell('A1').numFmt = testUtils.styles.numFmts.numFmt1;\n      ws.getCell('A1').font = testUtils.styles.fonts.arialBlackUI14;\n      ws.getCell('A3').value = 'Hello, World!';\n      ws.getCell('A3').alignment = testUtils.styles.namedAlignments.bottomRight;\n      ws.getCell('A3').border = testUtils.styles.borders.doubleRed;\n      ws.getCell('A3').fill = testUtils.styles.fills.redDarkVertical;\n      ws.getColumn('A').numFmt = testUtils.styles.numFmts.numFmt2;\n      ws.getColumn('A').font = testUtils.styles.fonts.comicSansUdB16;\n      ws.getColumn('A').alignment = testUtils.styles.namedAlignments.middleCentre;\n      ws.getColumn('A').border = testUtils.styles.borders.thin;\n      ws.getColumn('A').fill = testUtils.styles.fills.redGreenDarkTrellis;\n      expect(ws.getCell('A1').numFmt).to.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n      expect(ws.findRow(2)).to.be.undefined();\n      expect(ws.getCell('A3').numFmt).to.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A3').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A3').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A3').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A3').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n\n      // when we 'get' the previously null cell, it should inherit the column styles\n      expect(ws.getCell('A2').numFmt).to.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A2').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A2').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A2').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A2').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n    });","file":"integration/workbook/styles.spec.js","skipped":false,"dir":"spec"},{"name":"xlsx file","suites":["Workbook","Serialise"],"updatePoint":{"line":11,"column":17,"index":364},"line":11,"code":"    it('xlsx file', () => {\n      const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'xlsx');\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'xlsx');\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"xlsx file with best compression","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":21,"column":41,"index":787},"line":21,"code":"      it('xlsx file with best compression', () => {\n        const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'xlsx');\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME, {\n          zip: {\n            compression: 'DEFLATE',\n            compressionOptions: {\n              level: 9\n            }\n          }\n        }).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          testUtils.checkTestBook(wb2, 'xlsx');\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"xlsx file with default compression","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":37,"column":44,"index":1333},"line":37,"code":"      it('xlsx file with default compression', () => {\n        const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'xlsx');\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME, {\n          zip: {\n            compression: 'DEFLATE'\n          }\n        }).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          testUtils.checkTestBook(wb2, 'xlsx');\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"xlsx file with fast compression","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":50,"column":41,"index":1804},"line":50,"code":"      it('xlsx file with fast compression', () => {\n        const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'xlsx');\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME, {\n          zip: {\n            compression: 'DEFLATE',\n            compressionOptions: {\n              level: 1\n            }\n          }\n        }).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          testUtils.checkTestBook(wb2, 'xlsx');\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"xlsx file with no compression","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":66,"column":39,"index":2345},"line":66,"code":"      it('xlsx file with no compression', () => {\n        const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'xlsx');\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME, {\n          zip: {\n            compression: 'STORE'\n          }\n        }).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          testUtils.checkTestBook(wb2, 'xlsx');\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"sheets with correct names","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":80,"column":33,"index":2814},"line":80,"code":"    it('sheets with correct names', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws1 = wb.addWorksheet('Hello, World!');\n      expect(ws1.name).to.equal('Hello, World!');\n      ws1.getCell('A1').value = 'Hello, World!';\n      const ws2 = wb.addWorksheet();\n      expect(ws2.name).to.match(/sheet\\d+/);\n      ws2.getCell('A1').value = ws2.name;\n      wb.addWorksheet('This & That');\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        expect(wb2.getWorksheet('Hello, World!')).to.be.ok();\n        expect(wb2.getWorksheet('This & That')).to.be.ok();\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"creator, lastModifiedBy, etc","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":97,"column":36,"index":3542},"line":97,"code":"    it('creator, lastModifiedBy, etc', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = 'World!';\n      wb.creator = 'Foo';\n      wb.lastModifiedBy = 'Bar';\n      wb.created = new Date(2016, 0, 1);\n      wb.modified = new Date(2016, 4, 19);\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        expect(wb2.creator).to.equal(wb.creator);\n        expect(wb2.lastModifiedBy).to.equal(wb.lastModifiedBy);\n        expect(wb2.created).to.equalDate(wb.created);\n        expect(wb2.modified).to.equalDate(wb.modified);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"printTitlesRow","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":115,"column":22,"index":4272},"line":115,"code":"    it('printTitlesRow', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('printHeader');\n      ws.getCell('A1').value = 'This is a header row repeated on every printed page';\n      ws.getCell('B2').value = 'This is a header row too';\n      for (let i = 0; i < 100; i++) {\n        ws.addRow(['not header row']);\n      }\n      ws.pageSetup.printTitlesRow = '1:2';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('printHeader');\n        expect(ws2.pageSetup.printTitlesRow).to.equal('1:2');\n        expect(ws2.pageSetup.printTitlesColumn).to.be.undefined();\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"printTitlesColumn","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":133,"column":25,"index":5058},"line":133,"code":"    it('printTitlesColumn', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('printColumn');\n      ws.getCell('A1').value = 'This is a column repeated on every printed page';\n      ws.getCell('A2').value = 'This is a column repeated on every printed page';\n      ws.getCell('B1').value = 'This is a repeated column too';\n      ws.getCell('B2').value = 'This is a repeated column too';\n      ws.getCell('C1').value = 'This is a regular column';\n      ws.getCell('C2').value = 'This is a regular column';\n      ws.getCell('D1').value = 'This is a regular column';\n      ws.getCell('D2').value = 'This is a regular column';\n      ws.pageSetup.printTitlesRow = 'A:B';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('printColumn');\n        expect(ws2.pageSetup.printTitlesRow).to.be.undefined();\n        expect(ws2.pageSetup.printTitlesColumn).to.equal('A:B');\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"printTitlesRowAndColumn","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":154,"column":31,"index":6148},"line":154,"code":"    it('printTitlesRowAndColumn', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('printHeaderAndColumn');\n      ws.getCell('A1').value = 'This is a column / row repeated on every printed page';\n      ws.getCell('A2').value = 'This is a column / row repeated on every printed page';\n      ws.getCell('B1').value = 'This is a repeated column / row too';\n      ws.getCell('B2').value = 'This is a repeated column / row too';\n      ws.getCell('C1').value = 'This is a regular column, repeated row';\n      ws.getCell('C2').value = 'This is a regular column, repeated row';\n      ws.getCell('D1').value = 'This is a regular column, repeated row';\n      ws.getCell('D2').value = 'This is a regular column, repeated row';\n      ws.getCell('A3').value = 'This is a repeated column';\n      ws.getCell('B3').value = 'This is a repeated column';\n      ws.getCell('C3').value = 'This is a regular column / row';\n      ws.getCell('D3').value = 'This is a regular column / row';\n      ws.pageSetup.printTitlesColumn = 'A:B';\n      ws.pageSetup.printTitlesRow = '1:2';\n      for (let i = 0; i < 100; i++) {\n        ws.addRow(['repeated column, not repeated row', 'repeated column, not repeated row', 'no repeat', 'no repeat']);\n      }\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('printHeaderAndColumn');\n        expect(ws2.pageSetup.printTitlesRow).to.equal('1:2');\n        expect(ws2.pageSetup.printTitlesColumn).to.equal('A:B');\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"shared formula","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":183,"column":22,"index":7788},"line":183,"code":"    it('shared formula', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('Hello');\n      ws.fillFormula('A1:B2', 'ROW()+COLUMN()', [[2, 3], [3, 4]]);\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('Hello');\n        expect(ws2.getCell('A1').value).to.deep.equal({\n          formula: 'ROW()+COLUMN()',\n          shareType: 'shared',\n          ref: 'A1:B2',\n          result: 2\n        });\n        expect(ws2.getCell('B1').value).to.deep.equal({\n          sharedFormula: 'A1',\n          result: 3\n        });\n        expect(ws2.getCell('A2').value).to.deep.equal({\n          sharedFormula: 'A1',\n          result: 3\n        });\n        expect(ws2.getCell('B2').value).to.deep.equal({\n          sharedFormula: 'A1',\n          result: 4\n        });\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"auto filter","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":212,"column":19,"index":8758},"line":212,"code":"    it('auto filter', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = 1;\n      ws.getCell('B1').value = 1;\n      ws.getCell('A2').value = 2;\n      ws.getCell('B2').value = 2;\n      ws.getCell('A3').value = 3;\n      ws.getCell('B3').value = 3;\n      ws.autoFilter = 'A1:B1';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('Hello');\n        expect(ws2.autoFilter).to.equal('A1:B1');\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"company, manager, etc","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":230,"column":29,"index":9419},"line":230,"code":"    it('company, manager, etc', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = 'World!';\n      wb.company = 'Cyber Sapiens, Ltd';\n      wb.manager = 'Guyon Roche';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        expect(wb2.company).to.equal(wb.company);\n        expect(wb2.manager).to.equal(wb.manager);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"title, subject, etc","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":244,"column":27,"index":9962},"line":244,"code":"    it('title, subject, etc', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = 'World!';\n      wb.title = 'the title';\n      wb.subject = 'the subject';\n      wb.keywords = 'the keywords';\n      wb.category = 'the category';\n      wb.description = 'the description';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        expect(wb2.title).to.equal(wb.title);\n        expect(wb2.subject).to.equal(wb.subject);\n        expect(wb2.keywords).to.equal(wb.keywords);\n        expect(wb2.category).to.equal(wb.category);\n        expect(wb2.description).to.equal(wb.description);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"language, revision and contentStatus","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":264,"column":44,"index":10783},"line":264,"code":"    it('language, revision and contentStatus', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = 'World!';\n      wb.language = 'Klingon';\n      wb.revision = 2;\n      wb.contentStauts = 'Final';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        expect(wb2.language).to.equal(wb.language);\n        expect(wb2.revision).to.equal(wb.revision);\n        expect(wb2.contentStatus).to.equal(wb.contentStatus);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"empty strings","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":280,"column":21,"index":11399},"line":280,"code":"    it('empty strings', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('Hello');\n      ws.getCell('A1').value = 'Foo';\n      ws.getCell('A2').value = '';\n      ws.getCell('A3').value = 'Baz';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('Hello');\n        expect(ws2.getCell('A1').value).to.equal('Foo');\n        expect(ws2.getCell('A2').value).to.equal('');\n        expect(ws2.getCell('A3').value).to.equal('Baz');\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"dataValidations","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":296,"column":23,"index":12048},"line":296,"code":"    it('dataValidations', () => {\n      const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'xlsx', ['dataValidations']);\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'xlsx', ['dataValidations']);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"empty string","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":305,"column":20,"index":12447},"line":305,"code":"    it('empty string', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet();\n      ws.columns = [{\n        key: 'id',\n        width: 10\n      }, {\n        key: 'name',\n        width: 32\n      }];\n      ws.addRow({\n        id: 1,\n        name: ''\n      });\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME);\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"a lot of sheets to xlsx file","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":321,"column":36,"index":12811},"line":321,"code":"    it('a lot of sheets to xlsx file', function () {\n      this.timeout(10000);\n      let i;\n      const wb = new ExcelJS.Workbook();\n      const numSheets = 90;\n      // add numSheets sheets\n      for (i = 1; i <= numSheets; i++) {\n        const ws = wb.addWorksheet(`sheet${i}`);\n        ws.getCell('A1').value = i;\n      }\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        for (i = 1; i <= numSheets; i++) {\n          const ws2 = wb2.getWorksheet(`sheet${i}`);\n          expect(ws2).to.be.ok();\n          expect(ws2.getCell('A1').value).to.equal(i);\n        }\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"csv file","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":342,"column":16,"index":13517},"line":342,"code":"    it('csv file', function () {\n      this.timeout(5000);\n      const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'csv');\n      return wb.csv.writeFile(TEST_CSV_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.csv.readFile(TEST_CSV_FILE_NAME).then(() => wb2);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'csv');\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"CSV file and its configuration","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":352,"column":38,"index":13934},"line":352,"code":"    it('CSV file and its configuration', function () {\n      this.timeout(5000);\n      const writeOptions = {\n        dateFormat: 'DD/MM/YYYY HH:mm:ss',\n        dateUTC: false,\n        encoding: 'utf-8',\n        includeEmptyRows: false,\n        sheetName: 'sheet1',\n        formatterOptions: {\n          delimiter: '\\t',\n          quote: false\n        }\n      };\n      const readOptions = {\n        dateFormats: ['DD/MM/YYYY HH:mm:ss'],\n        sheetName: 'sheet1',\n        parserOptions: {\n          delimiter: '\\t',\n          quote: false\n        }\n      };\n      const wb = testUtils.createTestBook(new ExcelJS.Workbook(), 'csv');\n      return wb.csv.writeFile(TEST_CSV_FILE_NAME, writeOptions).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.csv.readFile(TEST_CSV_FILE_NAME, readOptions).then(() => wb2);\n      }).then(wb2 => {\n        testUtils.checkTestBook(wb2, 'csv', false, writeOptions);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"defined names","suites":["Workbook","Serialise","Xlsx Zip Compression"],"updatePoint":{"line":381,"column":21,"index":14861},"line":381,"code":"    it('defined names', () => {\n      const wb1 = new ExcelJS.Workbook();\n      const ws1a = wb1.addWorksheet('blort');\n      const ws1b = wb1.addWorksheet('foo');\n      function assign(sheet, address, value, name) {\n        const cell = sheet.getCell(address);\n        cell.value = value;\n        if (Array.isArray(name)) {\n          cell.names = name;\n        } else {\n          cell.name = name;\n        }\n      }\n\n      // single entry\n      assign(ws1a, 'A1', 5, 'five');\n\n      // three amigos - horizontal line\n      assign(ws1a, 'A3', 3, 'amigos');\n      assign(ws1a, 'B3', 3, 'amigos');\n      assign(ws1a, 'C3', 3, 'amigos');\n\n      // three amigos - vertical line\n      assign(ws1a, 'E1', 3, 'verts');\n      assign(ws1a, 'E2', 3, 'verts');\n      assign(ws1a, 'E3', 3, 'verts');\n\n      // four square\n      assign(ws1a, 'C5', 4, 'squares');\n      assign(ws1a, 'B6', 4, 'squares');\n      assign(ws1a, 'C6', 4, 'squares');\n      assign(ws1a, 'B5', 4, 'squares');\n\n      // long distance\n      assign(ws1a, 'B7', 2, 'sheets');\n      assign(ws1b, 'B7', 2, 'sheets');\n\n      // two names\n      assign(ws1a, 'G1', 1, 'thing1');\n      ws1a.getCell('G1').addName('thing2');\n\n      // once removed\n      assign(ws1a, 'G2', 1, ['once', 'twice']);\n      ws1a.getCell('G2').removeName('once');\n      return wb1.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2a = wb2.getWorksheet('blort');\n        const ws2b = wb2.getWorksheet('foo');\n        function check(sheet, address, value, name) {\n          const cell = sheet.getCell(address);\n          expect(cell.value).to.equal(value);\n          expect(cell.name).to.equal(name);\n        }\n\n        // single entry\n        check(ws2a, 'A1', 5, 'five');\n\n        // three amigos - horizontal line\n        check(ws2a, 'A3', 3, 'amigos');\n        check(ws2a, 'B3', 3, 'amigos');\n        check(ws2a, 'C3', 3, 'amigos');\n\n        // three amigos - vertical line\n        check(ws2a, 'E1', 3, 'verts');\n        check(ws2a, 'E2', 3, 'verts');\n        check(ws2a, 'E3', 3, 'verts');\n\n        // four square\n        check(ws2a, 'C5', 4, 'squares');\n        check(ws2a, 'B6', 4, 'squares');\n        check(ws2a, 'C6', 4, 'squares');\n        check(ws2a, 'B5', 4, 'squares');\n\n        // long distance\n        check(ws2a, 'B7', 2, 'sheets');\n        check(ws2b, 'B7', 2, 'sheets');\n\n        // two names\n        expect(ws2a.getCell('G1').names).to.have.members(['thing1', 'thing2']);\n\n        // once removed\n        expect(ws2a.getCell('G2').names).to.have.members(['twice']);\n\n        // ranges\n        function rangeCheck(name, members) {\n          const ranges = wb2.definedNames.getRanges(name);\n          expect(ranges.name).to.equal(name);\n          if (members.length) {\n            expect(ranges.ranges).to.have.members(members);\n          } else {\n            expect(ranges.ranges.length).to.equal(0);\n          }\n        }\n        rangeCheck('five', ['blort!$A$1']);\n        rangeCheck('amigos', ['blort!$A$3:$C$3']);\n        rangeCheck('verts', ['blort!$E$1:$E$3']);\n        rangeCheck('squares', ['blort!$B$5:$C$6']);\n        rangeCheck('sheets', ['blort!$B$7', 'foo!$B$7']);\n        rangeCheck('thing1', ['blort!$G$1']);\n        rangeCheck('thing2', ['blort!$G$1']);\n        rangeCheck('once', []);\n        rangeCheck('twice', ['blort!$G$2']);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"Duplicate rows with styles properly","suites":["Workbook","Serialise","Duplicate Rows"],"updatePoint":{"line":488,"column":45,"index":18370},"line":488,"code":"      it('Duplicate rows with styles properly', () => {\n        const fileDuplicateRowTestFile = './spec/integration/data/duplicateRowTest.xlsx';\n        const wb = new ExcelJS.Workbook();\n        return wb.xlsx.readFile(fileDuplicateRowTestFile).then(() => {\n          const ws = wb.getWorksheet('duplicateTest');\n          ws.getCell('A1').value = 'OneInfo';\n          ws.getCell('A2').value = 'TwoInfo';\n          ws.duplicateRow(1, 2);\n          return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n            const wb2 = new ExcelJS.Workbook();\n            return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n          }).then(wb2 => {\n            const ws2 = wb2.getWorksheet('duplicateTest');\n            expect(ws2.getCell('A2').value).to.equal('OneInfo');\n            expect(ws2.getCell('A2').style).to.equal(ws2.getCell('A1').style);\n            expect(ws2.getCell('A3').value).to.equal('OneInfo');\n            expect(ws2.getCell('A3').style).to.equal(ws2.getCell('A1').style);\n            expect(ws2.getCell('A4').value).to.be.null();\n          });\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"Duplicate rows replacing properly","suites":["Workbook","Serialise","Duplicate Rows"],"updatePoint":{"line":509,"column":43,"index":19452},"line":509,"code":"      it('Duplicate rows replacing properly', () => {\n        const wb = new ExcelJS.Workbook();\n        const ws = wb.addWorksheet('duplicateTest');\n        ws.getCell('A1').value = 'OneInfo';\n        ws.getCell('A2').value = 'TwoInfo';\n        ws.getCell('A3').value = 'ThreeInfo';\n        ws.getCell('A4').value = 'FourInfo';\n        ws.duplicateRow(1, 2, false);\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          const ws2 = wb2.getWorksheet('duplicateTest');\n          expect(ws2.getCell('A1').value).to.equal('OneInfo');\n          expect(ws2.getCell('A2').value).to.equal('OneInfo');\n          expect(ws2.getCell('A3').value).to.equal('OneInfo');\n          expect(ws2.getCell('A4').value).to.equal('FourInfo');\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"Duplicate rows shifting properly","suites":["Workbook","Serialise","Duplicate Rows"],"updatePoint":{"line":528,"column":42,"index":20345},"line":528,"code":"      it('Duplicate rows shifting properly', () => {\n        const wb = new ExcelJS.Workbook();\n        const ws = wb.addWorksheet('duplicateTest');\n        ws.getCell('A1').value = 'OneInfo';\n        ws.getCell('A2').value = 'TwoInfo';\n        ws.getCell('A3').value = 'ThreeInfo';\n        ws.getCell('A4').value = 'FourInfo';\n        ws.duplicateRow(1, 2, true);\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          const ws2 = wb2.getWorksheet('duplicateTest');\n          expect(ws2.getCell('A1').value).to.equal('OneInfo');\n          expect(ws2.getCell('A2').value).to.equal('OneInfo');\n          expect(ws2.getCell('A3').value).to.equal('OneInfo');\n          expect(ws2.getCell('A4').value).to.equal('TwoInfo');\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"Duplicate rows with height properly","suites":["Workbook","Serialise","Duplicate Rows"],"updatePoint":{"line":547,"column":45,"index":21239},"line":547,"code":"      it('Duplicate rows with height properly', () => {\n        const wb = new ExcelJS.Workbook();\n        const ws = wb.addWorksheet('duplicateTest');\n        ws.getCell('A1').value = 'OneInfo';\n        ws.getCell('A2').value = 'TwoInfo';\n        ws.getRow(1).height = 25;\n        ws.getRow(2).height = 15;\n        ws.duplicateRow(1, 1, true);\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          const ws2 = wb2.getWorksheet('duplicateTest');\n          expect(ws2.getCell('A1').value).to.equal('OneInfo');\n          expect(ws2.getCell('A2').value).to.equal('OneInfo');\n          expect(ws2.getRow(1).height).to.equal(ws2.getRow(2).height);\n          expect(ws2.getRow(1).height).to.not.equal(ws2.getRow(3).height);\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"serialises and deserialises properly","suites":["Workbook","Serialise","Merge Cells"],"updatePoint":{"line":568,"column":46,"index":22175},"line":568,"code":"      it('serialises and deserialises properly', () => {\n        const wb = new ExcelJS.Workbook();\n        const ws = wb.addWorksheet('blort');\n\n        // initial values\n        ws.getCell('B2').value = 'B2';\n        ws.mergeCells('B2:C3');\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          const ws2 = wb2.getWorksheet('blort');\n          expect(ws2.getCell('B2').value).to.equal('B2');\n          expect(ws2.getCell('B3').value).to.equal('B2');\n          expect(ws2.getCell('C2').value).to.equal('B2');\n          expect(ws2.getCell('C3').value).to.equal('B2');\n          expect(ws2.getCell('B2').type).to.equal(ExcelJS.ValueType.String);\n          expect(ws2.getCell('B3').type).to.equal(ExcelJS.ValueType.Merge);\n          expect(ws2.getCell('C2').type).to.equal(ExcelJS.ValueType.Merge);\n          expect(ws2.getCell('C3').type).to.equal(ExcelJS.ValueType.Merge);\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"styles","suites":["Workbook","Serialise","Merge Cells"],"updatePoint":{"line":590,"column":16,"index":23191},"line":590,"code":"      it('styles', () => {\n        const wb = new ExcelJS.Workbook();\n        const ws = wb.addWorksheet('blort');\n\n        // initial values\n        const B2 = ws.getCell('B2');\n        B2.value = 5;\n        B2.style.font = testUtils.styles.fonts.broadwayRedOutline20;\n        B2.style.border = testUtils.styles.borders.doubleRed;\n        B2.style.fill = testUtils.styles.fills.blueWhiteHGrad;\n        B2.style.alignment = testUtils.styles.namedAlignments.middleCentre;\n        B2.style.numFmt = testUtils.styles.numFmts.numFmt1;\n\n        // expecting styles to be copied (see worksheet spec)\n        ws.mergeCells('B2:C3');\n        return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n          const wb2 = new ExcelJS.Workbook();\n          return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n        }).then(wb2 => {\n          const ws2 = wb2.getWorksheet('blort');\n          expect(ws2.getCell('B2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n          expect(ws2.getCell('B2').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n          expect(ws2.getCell('B2').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n          expect(ws2.getCell('B2').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n          expect(ws2.getCell('B2').numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n          expect(ws2.getCell('B3').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n          expect(ws2.getCell('B3').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n          expect(ws2.getCell('B3').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n          expect(ws2.getCell('B3').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n          expect(ws2.getCell('B3').numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n          expect(ws2.getCell('C2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n          expect(ws2.getCell('C2').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n          expect(ws2.getCell('C2').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n          expect(ws2.getCell('C2').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n          expect(ws2.getCell('C2').numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n          expect(ws2.getCell('C3').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n          expect(ws2.getCell('C3').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n          expect(ws2.getCell('C3').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n          expect(ws2.getCell('C3').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n          expect(ws2.getCell('C3').numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n        });\n      });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"spliced meat and ham","suites":["Workbook","Serialise","Merge Cells"],"updatePoint":{"line":634,"column":26,"index":26047},"line":634,"code":"  it('spliced meat and ham', () => {\n    const wb = new ExcelJS.Workbook();\n    const sheets = ['splice.rows.removeOnly', 'splice.rows.insertFewer', 'splice.rows.insertSame', 'splice.rows.insertMore', 'splice.rows.insertStyle', 'splice.columns.removeOnly', 'splice.columns.insertFewer', 'splice.columns.insertSame', 'splice.columns.insertMore'];\n    const options = {\n      checkBadAlignments: false,\n      checkSheetProperties: false,\n      checkViews: false\n    };\n    testUtils.createTestBook(wb, 'xlsx', sheets, options);\n    return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n      const wb2 = new ExcelJS.Workbook();\n      return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n    }).then(wb2 => {\n      testUtils.checkTestBook(wb2, 'xlsx', sheets, options);\n    });\n  });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when xlsx file not found","suites":["Workbook","Serialise","Merge Cells"],"updatePoint":{"line":650,"column":46,"index":26847},"line":650,"code":"  it('throws an error when xlsx file not found', () => {\n    const wb = new ExcelJS.Workbook();\n    let success = 0;\n    return wb.xlsx.readFile('./wb.doesnotexist.xlsx').then(( /* wb2 */\n    ) => {\n      success = 1;\n    }).catch(( /* error */\n    ) => {\n      success = 2;\n      // expect the right kind of error\n    }).then(() => {\n      expect(success).to.equal(2);\n    });\n  });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when csv file not found","suites":["Workbook","Serialise","Merge Cells"],"updatePoint":{"line":664,"column":45,"index":27230},"line":664,"code":"  it('throws an error when csv file not found', () => {\n    const wb = new ExcelJS.Workbook();\n    let success = 0;\n    return wb.csv.readFile('./wb.doesnotexist.csv').then(( /* wb */\n    ) => {\n      success = 1;\n    }).catch(( /* error */\n    ) => {\n      success = 2;\n      // expect the right kind of error\n    }).then(() => {\n      expect(success).to.equal(2);\n    });\n  });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"throw an error for wrong data type","suites":["Workbook","Serialise","Merge Cells"],"updatePoint":{"line":678,"column":40,"index":27605},"line":678,"code":"  it('throw an error for wrong data type', async () => {\n    const wb = new ExcelJS.Workbook();\n    try {\n      await wb.xlsx.load({});\n      expect.fail('should fail for given argument');\n    } catch (e) {\n      expect(e.message).to.equal('Can\\'t read the data of \\'the loaded zip file\\'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?');\n    }\n  });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"frozen panes","suites":["Workbook","Sheet Views"],"updatePoint":{"line":688,"column":20,"index":27996},"line":688,"code":"    it('frozen panes', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('frozen');\n      ws.views = [{\n        state: 'frozen',\n        xSplit: 2,\n        ySplit: 3,\n        topLeftCell: 'C4',\n        activeCell: 'D5'\n      }, {\n        state: 'frozen',\n        ySplit: 1\n      }, {\n        state: 'frozen',\n        xSplit: 1\n      }];\n      ws.getCell('A1').value = 'Let it Snow!';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('frozen');\n        expect(ws2).to.be.ok();\n        expect(ws2.getCell('A1').value).to.equal('Let it Snow!');\n        expect(ws2.views).to.deep.equal([{\n          workbookViewId: 0,\n          state: 'frozen',\n          xSplit: 2,\n          ySplit: 3,\n          topLeftCell: 'C4',\n          activeCell: 'D5',\n          showRuler: true,\n          showGridLines: true,\n          showRowColHeaders: true,\n          zoomScale: 100,\n          zoomScaleNormal: 100,\n          rightToLeft: false\n        }, {\n          workbookViewId: 0,\n          state: 'frozen',\n          xSplit: 0,\n          ySplit: 1,\n          topLeftCell: 'A2',\n          showRuler: true,\n          showGridLines: true,\n          showRowColHeaders: true,\n          zoomScale: 100,\n          zoomScaleNormal: 100,\n          rightToLeft: false\n        }, {\n          workbookViewId: 0,\n          state: 'frozen',\n          xSplit: 1,\n          ySplit: 0,\n          topLeftCell: 'B1',\n          showRuler: true,\n          showGridLines: true,\n          showRowColHeaders: true,\n          zoomScale: 100,\n          zoomScaleNormal: 100,\n          rightToLeft: false\n        }]);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"serialises split panes","suites":["Workbook","Sheet Views"],"updatePoint":{"line":752,"column":30,"index":29804},"line":752,"code":"    it('serialises split panes', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('split');\n      ws.views = [{\n        state: 'split',\n        xSplit: 2000,\n        ySplit: 3000,\n        topLeftCell: 'C4',\n        activeCell: 'D5',\n        activePane: 'bottomRight'\n      }, {\n        state: 'split',\n        ySplit: 1500,\n        activePane: 'bottomLeft',\n        topLeftCell: 'A10'\n      }, {\n        state: 'split',\n        xSplit: 1500,\n        activePane: 'topRight'\n      }];\n      ws.getCell('A1').value = 'Do the splits!';\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        const ws2 = wb2.getWorksheet('split');\n        expect(ws2).to.be.ok();\n        expect(ws2.getCell('A1').value).to.equal('Do the splits!');\n        expect(ws2.views).to.deep.equal([{\n          workbookViewId: 0,\n          state: 'split',\n          xSplit: 2000,\n          ySplit: 3000,\n          topLeftCell: 'C4',\n          activeCell: 'D5',\n          activePane: 'bottomRight',\n          showRuler: true,\n          showGridLines: true,\n          showRowColHeaders: true,\n          zoomScale: 100,\n          zoomScaleNormal: 100,\n          rightToLeft: false\n        }, {\n          workbookViewId: 0,\n          state: 'split',\n          xSplit: 0,\n          ySplit: 1500,\n          topLeftCell: 'A10',\n          activePane: 'bottomLeft',\n          showRuler: true,\n          showGridLines: true,\n          showRowColHeaders: true,\n          zoomScale: 100,\n          zoomScaleNormal: 100,\n          rightToLeft: false\n        }, {\n          workbookViewId: 0,\n          state: 'split',\n          xSplit: 1500,\n          ySplit: 0,\n          topLeftCell: undefined,\n          activePane: 'topRight',\n          showRuler: true,\n          showGridLines: true,\n          showRowColHeaders: true,\n          zoomScale: 100,\n          zoomScaleNormal: 100,\n          rightToLeft: false\n        }]);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"multiple book views","suites":["Workbook","Sheet Views"],"updatePoint":{"line":823,"column":27,"index":31871},"line":823,"code":"    it('multiple book views', () => {\n      const wb = new ExcelJS.Workbook();\n      wb.views = [testUtils.views.book.visible, testUtils.views.book.hidden];\n      const ws1 = wb.addWorksheet('one');\n      ws1.views = [testUtils.views.sheet.frozen];\n      const ws2 = wb.addWorksheet('two');\n      ws2.views = [testUtils.views.sheet.split];\n      return wb.xlsx.writeFile(TEST_XLSX_FILE_NAME).then(() => {\n        const wb2 = new ExcelJS.Workbook();\n        return wb2.xlsx.readFile(TEST_XLSX_FILE_NAME);\n      }).then(wb2 => {\n        expect(wb2.views).to.deep.equal(wb.views);\n        const ws1b = wb2.getWorksheet('one');\n        expect(ws1b.views).to.deep.equal(ws1.views);\n        const ws2b = wb2.getWorksheet('two');\n        expect(ws2b.views).to.deep.equal(ws2.views);\n      });\n    });","file":"integration/workbook/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"stores values properly","suites":["WorksheetWriter","Values"],"updatePoint":{"line":6,"column":30,"index":250},"line":6,"code":"    it('stores values properly', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n      const now = new Date();\n\n      // plain number\n      ws.getCell('A1').value = 7;\n\n      // simple string\n      ws.getCell('B1').value = 'Hello, World!';\n\n      // floating point\n      ws.getCell('C1').value = 3.14;\n\n      // 5 will be overwritten by the current date-time\n      ws.getCell('D1').value = 5;\n      ws.getCell('D1').value = now;\n\n      // constructed string - will share recored with B1\n      ws.getCell('E1').value = `${['Hello', 'World'].join(', ')}!`;\n\n      // hyperlink\n      ws.getCell('F1').value = {\n        text: 'www.google.com',\n        hyperlink: 'http://www.google.com'\n      };\n\n      // number formula\n      ws.getCell('A2').value = {\n        formula: 'A1',\n        result: 7\n      };\n\n      // string formula\n      ws.getCell('B2').value = {\n        formula: CONCATENATE_HELLO_WORLD,\n        result: 'Hello, World!'\n      };\n\n      // date formula\n      ws.getCell('C2').value = {\n        formula: 'D1',\n        result: now\n      };\n      expect(ws.getCell('A1').value).to.equal(7);\n      expect(ws.getCell('B1').value).to.equal('Hello, World!');\n      expect(ws.getCell('C1').value).to.equal(3.14);\n      expect(ws.getCell('D1').value).to.equal(now);\n      expect(ws.getCell('E1').value).to.equal('Hello, World!');\n      expect(ws.getCell('F1').value.text).to.equal('www.google.com');\n      expect(ws.getCell('F1').value.hyperlink).to.equal('http://www.google.com');\n      expect(ws.getCell('A2').value.formula).to.equal('A1');\n      expect(ws.getCell('A2').value.result).to.equal(7);\n      expect(ws.getCell('B2').value.formula).to.equal(CONCATENATE_HELLO_WORLD);\n      expect(ws.getCell('B2').value.result).to.equal('Hello, World!');\n      expect(ws.getCell('C2').value.formula).to.equal('D1');\n      expect(ws.getCell('C2').value.result).to.equal(now);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"stores shared string values properly","suites":["WorksheetWriter","Values"],"updatePoint":{"line":64,"column":44,"index":2207},"line":64,"code":"    it('stores shared string values properly', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter({\n        useSharedStrings: true\n      });\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 'Hello, World!';\n      ws.getCell('A2').value = 'Hello';\n      ws.getCell('B2').value = 'World';\n      ws.getCell('C2').value = {\n        formula: 'CONCATENATE(A2, \", \", B2, \"!\")',\n        result: 'Hello, World!'\n      };\n      ws.getCell('A3').value = `${['Hello', 'World'].join(', ')}!`;\n\n      // A1 and A3 should reference the same string object\n      expect(ws.getCell('A1').value).to.equal(ws.getCell('A3').value);\n\n      // A1 and C2 should not reference the same object\n      expect(ws.getCell('A1').value).to.equal(ws.getCell('C2').value.result);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"assigns cell types properly","suites":["WorksheetWriter","Values"],"updatePoint":{"line":84,"column":35,"index":2990},"line":84,"code":"    it('assigns cell types properly', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n\n      // plain number\n      ws.getCell('A1').value = 7;\n\n      // simple string\n      ws.getCell('B1').value = 'Hello, World!';\n\n      // floating point\n      ws.getCell('C1').value = 3.14;\n\n      // date-time\n      ws.getCell('D1').value = new Date();\n\n      // hyperlink\n      ws.getCell('E1').value = {\n        text: 'www.google.com',\n        hyperlink: 'http://www.google.com'\n      };\n\n      // number formula\n      ws.getCell('A2').value = {\n        formula: 'A1',\n        result: 7\n      };\n\n      // string formula\n      ws.getCell('B2').value = {\n        formula: CONCATENATE_HELLO_WORLD,\n        result: 'Hello, World!'\n      };\n\n      // date formula\n      ws.getCell('C2').value = {\n        formula: 'D1',\n        result: new Date()\n      };\n      expect(ws.getCell('A1').type).to.equal(ExcelJS.ValueType.Number);\n      expect(ws.getCell('B1').type).to.equal(ExcelJS.ValueType.String);\n      expect(ws.getCell('C1').type).to.equal(ExcelJS.ValueType.Number);\n      expect(ws.getCell('D1').type).to.equal(ExcelJS.ValueType.Date);\n      expect(ws.getCell('E1').type).to.equal(ExcelJS.ValueType.Hyperlink);\n      expect(ws.getCell('A2').type).to.equal(ExcelJS.ValueType.Formula);\n      expect(ws.getCell('B2').type).to.equal(ExcelJS.ValueType.Formula);\n      expect(ws.getCell('C2').type).to.equal(ExcelJS.ValueType.Formula);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds columns","suites":["WorksheetWriter","Values"],"updatePoint":{"line":132,"column":20,"index":4466},"line":132,"code":"    it('adds columns', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n      ws.columns = [{\n        key: 'id',\n        width: 10\n      }, {\n        key: 'name',\n        width: 32\n      }, {\n        key: 'dob',\n        width: 10\n      }];\n      expect(ws.getColumn('id').number).to.equal(1);\n      expect(ws.getColumn('id').width).to.equal(10);\n      expect(ws.getColumn('A')).to.equal(ws.getColumn('id'));\n      expect(ws.getColumn(1)).to.equal(ws.getColumn('id'));\n      expect(ws.getColumn('name').number).to.equal(2);\n      expect(ws.getColumn('name').width).to.equal(32);\n      expect(ws.getColumn('B')).to.equal(ws.getColumn('name'));\n      expect(ws.getColumn(2)).to.equal(ws.getColumn('name'));\n      expect(ws.getColumn('dob').number).to.equal(3);\n      expect(ws.getColumn('dob').width).to.equal(10);\n      expect(ws.getColumn('C')).to.equal(ws.getColumn('dob'));\n      expect(ws.getColumn(3)).to.equal(ws.getColumn('dob'));\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers","suites":["WorksheetWriter","Values"],"updatePoint":{"line":158,"column":27,"index":5478},"line":158,"code":"    it('adds column headers', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n      ws.columns = [{\n        header: 'Id',\n        width: 10\n      }, {\n        header: 'Name',\n        width: 32\n      }, {\n        header: 'D.O.B.',\n        width: 10\n      }];\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getCell('C1').value).to.equal('D.O.B.');\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers by number","suites":["WorksheetWriter","Values"],"updatePoint":{"line":175,"column":37,"index":5981},"line":175,"code":"    it('adds column headers by number', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n\n      // by defn\n      ws.getColumn(1).defn = {\n        key: 'id',\n        header: 'Id',\n        width: 10\n      };\n\n      // by property\n      ws.getColumn(2).key = 'name';\n      ws.getColumn(2).header = 'Name';\n      ws.getColumn(2).width = 32;\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getColumn('A').key).to.equal('id');\n      expect(ws.getColumn(1).key).to.equal('id');\n      expect(ws.getColumn(1).header).to.equal('Id');\n      expect(ws.getColumn(1).headers).to.deep.equal(['Id']);\n      expect(ws.getColumn(1).width).to.equal(10);\n      expect(ws.getColumn(2).key).to.equal('name');\n      expect(ws.getColumn(2).header).to.equal('Name');\n      expect(ws.getColumn(2).headers).to.deep.equal(['Name']);\n      expect(ws.getColumn(2).width).to.equal(32);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers by letter","suites":["WorksheetWriter","Values"],"updatePoint":{"line":202,"column":37,"index":6981},"line":202,"code":"    it('adds column headers by letter', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n\n      // by defn\n      ws.getColumn('A').defn = {\n        key: 'id',\n        header: 'Id',\n        width: 10\n      };\n\n      // by property\n      ws.getColumn('B').key = 'name';\n      ws.getColumn('B').header = 'Name';\n      ws.getColumn('B').width = 32;\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getColumn('A').key).to.equal('id');\n      expect(ws.getColumn(1).key).to.equal('id');\n      expect(ws.getColumn('A').header).to.equal('Id');\n      expect(ws.getColumn('A').headers).to.deep.equal(['Id']);\n      expect(ws.getColumn('A').width).to.equal(10);\n      expect(ws.getColumn('B').key).to.equal('name');\n      expect(ws.getColumn('B').header).to.equal('Name');\n      expect(ws.getColumn('B').headers).to.deep.equal(['Name']);\n      expect(ws.getColumn('B').width).to.equal(32);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by object","suites":["WorksheetWriter","Values"],"updatePoint":{"line":229,"column":27,"index":7993},"line":229,"code":"    it('adds rows by object', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n\n      // add columns to define column keys\n      ws.columns = [{\n        header: 'Id',\n        key: 'id',\n        width: 10\n      }, {\n        header: 'Name',\n        key: 'name',\n        width: 32\n      }, {\n        header: 'D.O.B.',\n        key: 'dob',\n        width: 10\n      }];\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow({\n        id: 1,\n        name: 'John Doe',\n        dob: dateValue1\n      });\n      ws.addRow({\n        id: 2,\n        name: 'Jane Doe',\n        dob: dateValue2\n      });\n      expect(ws.getCell('A2').value).to.equal(1);\n      expect(ws.getCell('B2').value).to.equal('John Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue1);\n      expect(ws.getCell('A3').value).to.equal(2);\n      expect(ws.getCell('B3').value).to.equal('Jane Doe');\n      expect(ws.getCell('C3').value).to.equal(dateValue2);\n      expect(ws.getRow(2).values).to.deep.equal([, 1, 'John Doe', dateValue1]);\n      expect(ws.getRow(3).values).to.deep.equal([, 2, 'Jane Doe', dateValue2]);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by contiguous array","suites":["WorksheetWriter","Values"],"updatePoint":{"line":268,"column":37,"index":9211},"line":268,"code":"    it('adds rows by contiguous array', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow([1, 'John Doe', dateValue1]);\n      ws.addRow([2, 'Jane Doe', dateValue2]);\n      expect(ws.getCell('A1').value).to.equal(1);\n      expect(ws.getCell('B1').value).to.equal('John Doe');\n      expect(ws.getCell('C1').value).to.equal(dateValue1);\n      expect(ws.getCell('A2').value).to.equal(2);\n      expect(ws.getCell('B2').value).to.equal('Jane Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue2);\n      expect(ws.getRow(1).values).to.deep.equal([, 1, 'John Doe', dateValue1]);\n      expect(ws.getRow(2).values).to.deep.equal([, 2, 'Jane Doe', dateValue2]);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by sparse array","suites":["WorksheetWriter","Values"],"updatePoint":{"line":284,"column":33,"index":10047},"line":284,"code":"    it('adds rows by sparse array', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      const rows = [, [, 1, 'John Doe',, dateValue1], [, 2, 'Jane Doe',, dateValue2]];\n      const row3 = [];\n      row3[1] = 3;\n      row3[3] = 'Sam';\n      row3[5] = dateValue1;\n      rows.push(row3);\n      rows.forEach(row => {\n        if (row) {\n          ws.addRow(row);\n        }\n      });\n      expect(ws.getCell('A1').value).to.equal(1);\n      expect(ws.getCell('B1').value).to.equal('John Doe');\n      expect(ws.getCell('D1').value).to.equal(dateValue1);\n      expect(ws.getCell('A2').value).to.equal(2);\n      expect(ws.getCell('B2').value).to.equal('Jane Doe');\n      expect(ws.getCell('D2').value).to.equal(dateValue2);\n      expect(ws.getCell('A3').value).to.equal(3);\n      expect(ws.getCell('C3').value).to.equal('Sam');\n      expect(ws.getCell('E3').value).to.equal(dateValue1);\n      expect(ws.getRow(1).values).to.deep.equal(rows[1]);\n      expect(ws.getRow(2).values).to.deep.equal(rows[2]);\n      expect(ws.getRow(3).values).to.deep.equal(rows[3]);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"sets row styles","suites":["WorksheetWriter","Values"],"updatePoint":{"line":313,"column":23,"index":11254},"line":313,"code":"    it('sets row styles', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('basket');\n      ws.getCell('A1').value = 5;\n      ws.getCell('A1').numFmt = testutils.styles.numFmts.numFmt1;\n      ws.getCell('A1').font = testutils.styles.fonts.arialBlackUI14;\n      ws.getCell('C1').value = 'Hello, World!';\n      ws.getCell('C1').alignment = testutils.styles.namedAlignments.bottomRight;\n      ws.getCell('C1').border = testutils.styles.borders.doubleRed;\n      ws.getCell('C1').fill = testutils.styles.fills.redDarkVertical;\n      ws.getRow(1).numFmt = testutils.styles.numFmts.numFmt2;\n      ws.getRow(1).font = testutils.styles.fonts.comicSansUdB16;\n      ws.getRow(1).alignment = testutils.styles.namedAlignments.middleCentre;\n      ws.getRow(1).border = testutils.styles.borders.thin;\n      ws.getRow(1).fill = testutils.styles.fills.redGreenDarkTrellis;\n      expect(ws.getCell('A1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A1').border).to.deep.equal(testutils.styles.borders.thin);\n      expect(ws.getCell('A1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n      expect(ws.findCell('B1')).to.be.undefined();\n      expect(ws.getCell('C1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n      expect(ws.getCell('C1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('C1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C1').border).to.deep.equal(testutils.styles.borders.thin);\n      expect(ws.getCell('C1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n\n      // when we 'get' the previously null cell, it should inherit the row styles\n      expect(ws.getCell('B1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n      expect(ws.getCell('B1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('B1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('B1').border).to.deep.equal(testutils.styles.borders.thin);\n      expect(ws.getCell('B1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"sets col styles","suites":["WorksheetWriter","Values"],"updatePoint":{"line":347,"column":23,"index":13665},"line":347,"code":"    it('sets col styles', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('basket');\n      ws.getCell('A1').value = 5;\n      ws.getCell('A1').numFmt = testutils.styles.numFmts.numFmt1;\n      ws.getCell('A1').font = testutils.styles.fonts.arialBlackUI14;\n      ws.getCell('A3').value = 'Hello, World!';\n      ws.getCell('A3').alignment = testutils.styles.namedAlignments.bottomRight;\n      ws.getCell('A3').border = testutils.styles.borders.doubleRed;\n      ws.getCell('A3').fill = testutils.styles.fills.redDarkVertical;\n      ws.getColumn('A').numFmt = testutils.styles.numFmts.numFmt2;\n      ws.getColumn('A').font = testutils.styles.fonts.comicSansUdB16;\n      ws.getColumn('A').alignment = testutils.styles.namedAlignments.middleCentre;\n      ws.getColumn('A').border = testutils.styles.borders.thin;\n      ws.getColumn('A').fill = testutils.styles.fills.redGreenDarkTrellis;\n      expect(ws.getCell('A1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A1').border).to.deep.equal(testutils.styles.borders.thin);\n      expect(ws.getCell('A1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n      expect(ws.findRow(2)).to.be.undefined();\n      expect(ws.getCell('A3').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A3').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A3').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A3').border).to.deep.equal(testutils.styles.borders.thin);\n      expect(ws.getCell('A3').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n\n      // when we 'get' the previously null cell, it should inherit the column styles\n      expect(ws.getCell('A2').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A2').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A2').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A2').border).to.deep.equal(testutils.styles.borders.thin);\n      expect(ws.getCell('A2').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"references the same top-left value","suites":["WorksheetWriter","Merge Cells"],"updatePoint":{"line":383,"column":42,"index":16159},"line":383,"code":"    it('references the same top-left value', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n\n      // initial values\n      ws.getCell('A1').value = 'A1';\n      ws.getCell('B1').value = 'B1';\n      ws.getCell('A2').value = 'A2';\n      ws.getCell('B2').value = 'B2';\n      ws.mergeCells('A1:B2');\n      expect(ws.getCell('A1').value).to.equal('A1');\n      expect(ws.getCell('B1').value).to.equal('A1');\n      expect(ws.getCell('A2').value).to.equal('A1');\n      expect(ws.getCell('B2').value).to.equal('A1');\n      expect(ws.getCell('A1').type).to.equal(ExcelJS.ValueType.String);\n      expect(ws.getCell('B1').type).to.equal(ExcelJS.ValueType.Merge);\n      expect(ws.getCell('A2').type).to.equal(ExcelJS.ValueType.Merge);\n      expect(ws.getCell('B2').type).to.equal(ExcelJS.ValueType.Merge);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"does not allow overlapping merges","suites":["WorksheetWriter","Merge Cells"],"updatePoint":{"line":402,"column":41,"index":17021},"line":402,"code":"    it('does not allow overlapping merges', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n      ws.mergeCells('B2:C3');\n\n      // intersect four corners\n      expect(() => {\n        ws.mergeCells('A1:B2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C1:D2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C3:D4');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('A3:B4');\n      }).to.throw(Error);\n\n      // enclosing\n      expect(() => {\n        ws.mergeCells('A1:D4');\n      }).to.throw(Error);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"adds multiple row breaks","suites":["WorksheetWriter","Page Breaks"],"updatePoint":{"line":428,"column":32,"index":17692},"line":428,"code":"    it('adds multiple row breaks', () => {\n      const wb = new ExcelJS.stream.xlsx.WorkbookWriter();\n      const ws = wb.addWorksheet('blort');\n\n      // initial values\n      ws.getCell('A1').value = 'A1';\n      ws.getCell('B1').value = 'B1';\n      ws.getCell('A2').value = 'A2';\n      ws.getCell('B2').value = 'B2';\n      ws.getCell('A3').value = 'A3';\n      ws.getCell('B3').value = 'B3';\n      let row = ws.getRow(1);\n      row.addPageBreak();\n      row = ws.getRow(2);\n      row.addPageBreak();\n      expect(ws.rowBreaks.length).to.equal(2);\n    });","file":"integration/worksheet-xlsx-writer.spec.js","skipped":false,"dir":"spec"},{"name":"stores values properly","suites":["Worksheet","Values"],"updatePoint":{"line":10,"column":30,"index":277},"line":10,"code":"    it('stores values properly', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const now = new Date();\n\n      // plain number\n      ws.getCell('A1').value = 7;\n\n      // simple string\n      ws.getCell('B1').value = 'Hello, World!';\n\n      // floating point\n      ws.getCell('C1').value = 3.14;\n\n      // 5 will be overwritten by the current date-time\n      ws.getCell('D1').value = 5;\n      ws.getCell('D1').value = now;\n\n      // constructed string - will share recored with B1\n      ws.getCell('E1').value = `${['Hello', 'World'].join(', ')}!`;\n\n      // hyperlink\n      ws.getCell('F1').value = {\n        text: 'www.google.com',\n        hyperlink: 'http://www.google.com'\n      };\n\n      // number formula\n      ws.getCell('A2').value = {\n        formula: 'A1',\n        result: 7\n      };\n\n      // string formula\n      ws.getCell('B2').value = {\n        formula: 'CONCATENATE(\"Hello\", \", \", \"World!\")',\n        result: 'Hello, World!'\n      };\n\n      // date formula\n      ws.getCell('C2').value = {\n        formula: 'D1',\n        result: now\n      };\n      expect(ws.getCell('A1').value).to.equal(7);\n      expect(ws.getCell('B1').value).to.equal('Hello, World!');\n      expect(ws.getCell('C1').value).to.equal(3.14);\n      expect(ws.getCell('D1').value).to.equal(now);\n      expect(ws.getCell('E1').value).to.equal('Hello, World!');\n      expect(ws.getCell('F1').value.text).to.equal('www.google.com');\n      expect(ws.getCell('F1').value.hyperlink).to.equal('http://www.google.com');\n      expect(ws.getCell('A2').value.formula).to.equal('A1');\n      expect(ws.getCell('A2').value.result).to.equal(7);\n      expect(ws.getCell('B2').value.formula).to.equal('CONCATENATE(\"Hello\", \", \", \"World!\")');\n      expect(ws.getCell('B2').value.result).to.equal('Hello, World!');\n      expect(ws.getCell('C2').value.formula).to.equal('D1');\n      expect(ws.getCell('C2').value.result).to.equal(now);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"stores shared string values properly","suites":["Worksheet","Values"],"updatePoint":{"line":68,"column":44,"index":2246},"line":68,"code":"    it('stores shared string values properly', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 'Hello, World!';\n      ws.getCell('A2').value = 'Hello';\n      ws.getCell('B2').value = 'World';\n      ws.getCell('C2').value = {\n        formula: 'CONCATENATE(A2, \", \", B2, \"!\")',\n        result: 'Hello, World!'\n      };\n      ws.getCell('A3').value = `${['Hello', 'World'].join(', ')}!`;\n\n      // A1 and A3 should reference the same string object\n      expect(ws.getCell('A1').value).to.equal(ws.getCell('A3').value);\n\n      // A1 and C2 should not reference the same object\n      expect(ws.getCell('A1').value).to.equal(ws.getCell('C2').value.result);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"assigns cell types properly","suites":["Worksheet","Values"],"updatePoint":{"line":86,"column":35,"index":2971},"line":86,"code":"    it('assigns cell types properly', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // plain number\n      ws.getCell('A1').value = 7;\n\n      // simple string\n      ws.getCell('B1').value = 'Hello, World!';\n\n      // floating point\n      ws.getCell('C1').value = 3.14;\n\n      // date-time\n      ws.getCell('D1').value = new Date();\n\n      // hyperlink\n      ws.getCell('E1').value = {\n        text: 'www.google.com',\n        hyperlink: 'http://www.google.com'\n      };\n\n      // number formula\n      ws.getCell('A2').value = {\n        formula: 'A1',\n        result: 7\n      };\n\n      // string formula\n      ws.getCell('B2').value = {\n        formula: 'CONCATENATE(\"Hello\", \", \", \"World!\")',\n        result: 'Hello, World!'\n      };\n\n      // date formula\n      ws.getCell('C2').value = {\n        formula: 'D1',\n        result: new Date()\n      };\n      expect(ws.getCell('A1').type).to.equal(ExcelJS.ValueType.Number);\n      expect(ws.getCell('B1').type).to.equal(ExcelJS.ValueType.String);\n      expect(ws.getCell('C1').type).to.equal(ExcelJS.ValueType.Number);\n      expect(ws.getCell('D1').type).to.equal(ExcelJS.ValueType.Date);\n      expect(ws.getCell('E1').type).to.equal(ExcelJS.ValueType.Hyperlink);\n      expect(ws.getCell('A2').type).to.equal(ExcelJS.ValueType.Formula);\n      expect(ws.getCell('B2').type).to.equal(ExcelJS.ValueType.Formula);\n      expect(ws.getCell('C2').type).to.equal(ExcelJS.ValueType.Formula);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds columns","suites":["Worksheet","Values"],"updatePoint":{"line":134,"column":20,"index":4444},"line":134,"code":"    it('adds columns', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.columns = [{\n        key: 'id',\n        width: 10\n      }, {\n        key: 'name',\n        width: 32\n      }, {\n        key: 'dob',\n        width: 10\n      }];\n      expect(ws.getColumn('id').number).to.equal(1);\n      expect(ws.getColumn('id').width).to.equal(10);\n      expect(ws.getColumn('A')).to.equal(ws.getColumn('id'));\n      expect(ws.getColumn(1)).to.equal(ws.getColumn('id'));\n      expect(ws.getColumn('name').number).to.equal(2);\n      expect(ws.getColumn('name').width).to.equal(32);\n      expect(ws.getColumn('B')).to.equal(ws.getColumn('name'));\n      expect(ws.getColumn(2)).to.equal(ws.getColumn('name'));\n      expect(ws.getColumn('dob').number).to.equal(3);\n      expect(ws.getColumn('dob').width).to.equal(10);\n      expect(ws.getColumn('C')).to.equal(ws.getColumn('dob'));\n      expect(ws.getColumn(3)).to.equal(ws.getColumn('dob'));\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers","suites":["Worksheet","Values"],"updatePoint":{"line":160,"column":27,"index":5438},"line":160,"code":"    it('adds column headers', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.columns = [{\n        header: 'Id',\n        width: 10\n      }, {\n        header: 'Name',\n        width: 32\n      }, {\n        header: 'D.O.B.',\n        width: 10\n      }];\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getCell('C1').value).to.equal('D.O.B.');\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers by number","suites":["Worksheet","Values"],"updatePoint":{"line":177,"column":37,"index":5923},"line":177,"code":"    it('adds column headers by number', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // by defn\n      ws.getColumn(1).defn = {\n        key: 'id',\n        header: 'Id',\n        width: 10\n      };\n\n      // by property\n      ws.getColumn(2).key = 'name';\n      ws.getColumn(2).header = 'Name';\n      ws.getColumn(2).width = 32;\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getColumn('A').key).to.equal('id');\n      expect(ws.getColumn(1).key).to.equal('id');\n      expect(ws.getColumn(1).header).to.equal('Id');\n      expect(ws.getColumn(1).headers).to.deep.equal(['Id']);\n      expect(ws.getColumn(1).width).to.equal(10);\n      expect(ws.getColumn(2).key).to.equal('name');\n      expect(ws.getColumn(2).header).to.equal('Name');\n      expect(ws.getColumn(2).headers).to.deep.equal(['Name']);\n      expect(ws.getColumn(2).width).to.equal(32);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers by letter","suites":["Worksheet","Values"],"updatePoint":{"line":204,"column":37,"index":6905},"line":204,"code":"    it('adds column headers by letter', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // by defn\n      ws.getColumn('A').defn = {\n        key: 'id',\n        header: 'Id',\n        width: 10\n      };\n\n      // by property\n      ws.getColumn('B').key = 'name';\n      ws.getColumn('B').header = 'Name';\n      ws.getColumn('B').width = 32;\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getColumn('A').key).to.equal('id');\n      expect(ws.getColumn(1).key).to.equal('id');\n      expect(ws.getColumn('A').header).to.equal('Id');\n      expect(ws.getColumn('A').headers).to.deep.equal(['Id']);\n      expect(ws.getColumn('A').width).to.equal(10);\n      expect(ws.getColumn('B').key).to.equal('name');\n      expect(ws.getColumn('B').header).to.equal('Name');\n      expect(ws.getColumn('B').headers).to.deep.equal(['Name']);\n      expect(ws.getColumn('B').width).to.equal(32);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by object","suites":["Worksheet","Values"],"updatePoint":{"line":231,"column":27,"index":7899},"line":231,"code":"    it('adds rows by object', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // add columns to define column keys\n      ws.columns = [{\n        header: 'Id',\n        key: 'id',\n        width: 10\n      }, {\n        header: 'Name',\n        key: 'name',\n        width: 32\n      }, {\n        header: 'D.O.B.',\n        key: 'dob',\n        width: 10\n      }];\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow({\n        id: 1,\n        name: 'John Doe',\n        dob: dateValue1\n      });\n      ws.addRow({\n        id: 2,\n        name: 'Jane Doe',\n        dob: dateValue2\n      });\n      expect(ws.getCell('A2').value).to.equal(1);\n      expect(ws.getCell('B2').value).to.equal('John Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue1);\n      expect(ws.getCell('A3').value).to.equal(2);\n      expect(ws.getCell('B3').value).to.equal('Jane Doe');\n      expect(ws.getCell('C3').value).to.equal(dateValue2);\n      expect(ws.getRow(2).values).to.deep.equal([, 1, 'John Doe', dateValue1]);\n      expect(ws.getRow(3).values).to.deep.equal([, 2, 'Jane Doe', dateValue2]);\n      const values = [, [, 'Id', 'Name', 'D.O.B.'], [, 1, 'John Doe', dateValue1], [, 2, 'Jane Doe', dateValue2]];\n      ws.eachRow((row, rowNumber) => {\n        expect(row.values).to.deep.equal(values[rowNumber]);\n        row.eachCell((cell, colNumber) => {\n          expect(cell.value).to.equal(values[rowNumber][colNumber]);\n        });\n      });\n      const fetchedRows = ws.getRows(1, 2);\n      for (let i = 0; i < 2; i++) {\n        expect(fetchedRows[i].values).to.deep.equal(values[i + 1]);\n      }\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by contiguous array","suites":["Worksheet","Values"],"updatePoint":{"line":281,"column":37,"index":9605},"line":281,"code":"    it('adds rows by contiguous array', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow([1, 'John Doe', dateValue1]);\n      ws.addRow([2, 'Jane Doe', dateValue2]);\n      expect(ws.getCell('A1').value).to.equal(1);\n      expect(ws.getCell('B1').value).to.equal('John Doe');\n      expect(ws.getCell('C1').value).to.equal(dateValue1);\n      expect(ws.getCell('A2').value).to.equal(2);\n      expect(ws.getCell('B2').value).to.equal('Jane Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue2);\n      expect(ws.getRow(1).values).to.deep.equal([, 1, 'John Doe', dateValue1]);\n      expect(ws.getRow(2).values).to.deep.equal([, 2, 'Jane Doe', dateValue2]);\n      const values = [[, 1, 'John Doe', dateValue1], [, 2, 'Jane Doe', dateValue2]];\n      const fetchedRows = ws.getRows(1, 2);\n      for (let i = 0; i < 2; i++) {\n        expect(fetchedRows[i].values).to.deep.equal(values[i]);\n      }\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by sparse array","suites":["Worksheet","Values"],"updatePoint":{"line":302,"column":33,"index":10660},"line":302,"code":"    it('adds rows by sparse array', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      const rows = [, [, 1, 'John Doe',, dateValue1], [, 2, 'Jane Doe',, dateValue2]];\n      const row3 = [];\n      row3[1] = 3;\n      row3[3] = 'Sam';\n      row3[5] = dateValue1;\n      rows.push(row3);\n      rows.forEach(row => {\n        if (row) {\n          ws.addRow(row);\n        }\n      });\n      expect(ws.getCell('A1').value).to.equal(1);\n      expect(ws.getCell('B1').value).to.equal('John Doe');\n      expect(ws.getCell('D1').value).to.equal(dateValue1);\n      expect(ws.getCell('A2').value).to.equal(2);\n      expect(ws.getCell('B2').value).to.equal('Jane Doe');\n      expect(ws.getCell('D2').value).to.equal(dateValue2);\n      expect(ws.getCell('A3').value).to.equal(3);\n      expect(ws.getCell('C3').value).to.equal('Sam');\n      expect(ws.getCell('E3').value).to.equal(dateValue1);\n      expect(ws.getRow(1).values).to.deep.equal(rows[1]);\n      expect(ws.getRow(2).values).to.deep.equal(rows[2]);\n      expect(ws.getRow(3).values).to.deep.equal(rows[3]);\n      ws.eachRow((row, rowNumber) => {\n        expect(row.values).to.deep.equal(rows[rowNumber]);\n        row.eachCell((cell, colNumber) => {\n          expect(cell.value).to.equal(rows[rowNumber][colNumber]);\n        });\n      });\n      const fetchedRows = ws.getRows(1, 2);\n      for (let i = 0; i < 2; i++) {\n        expect(fetchedRows[i].values).to.deep.equal(rows[i + 1]);\n      }\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows with style option","suites":["Worksheet","Values"],"updatePoint":{"line":341,"column":35,"index":12246},"line":341,"code":"    it('adds rows with style option', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow([1, 'John Doe', dateValue1]);\n      ws.getRow(1).font = testutils.styles.fonts.comicSansUdB16;\n      ws.addRow([2, 'Jane Doe', dateValue2], 'i');\n      ws.addRow([3, 'Jane Doe', dateValue2], 'n');\n      ws.addRow([4, 'Jane Doe', dateValue2], 'i');\n      expect(ws.getCell('A1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A2').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A3').font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A4').font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"inserts rows by object","suites":["Worksheet","Values"],"updatePoint":{"line":356,"column":30,"index":13099},"line":356,"code":"    it('inserts rows by object', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // add columns to define column keys\n      ws.columns = [{\n        header: 'Id',\n        key: 'id',\n        width: 10\n      }, {\n        header: 'Name',\n        key: 'name',\n        width: 32\n      }, {\n        header: 'D.O.B.',\n        key: 'dob',\n        width: 10\n      }];\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      const dateValue3 = new Date(1965, 1, 10);\n      ws.addRow({\n        id: 1,\n        name: 'John Doe',\n        dob: dateValue1\n      });\n      ws.addRow({\n        id: 2,\n        name: 'Jane Doe',\n        dob: dateValue2\n      });\n\n      // insert in 3 shifting down earlier\n      ws.insertRow(3, {\n        id: 3,\n        name: 'Other Doe',\n        dob: dateValue3\n      });\n      expect(ws.getCell('A2').value).to.equal(1);\n      expect(ws.getCell('B2').value).to.equal('John Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue1);\n      expect(ws.getCell('A3').value).to.equal(3);\n      expect(ws.getCell('B3').value).to.equal('Other Doe');\n      expect(ws.getCell('C3').value).to.equal(dateValue3);\n      expect(ws.getCell('A4').value).to.equal(2);\n      expect(ws.getCell('B4').value).to.equal('Jane Doe');\n      expect(ws.getCell('C4').value).to.equal(dateValue2);\n      const values = [, [, 'Id', 'Name', 'D.O.B.'], [, 1, 'John Doe', dateValue1], [, 3, 'Other Doe', dateValue3], [, 2, 'Jane Doe', dateValue2]];\n      ws.eachRow((row, rowNumber) => {\n        expect(row.values).to.deep.equal(values[rowNumber]);\n        row.eachCell((cell, colNumber) => {\n          expect(cell.value).to.equal(values[rowNumber][colNumber]);\n        });\n      });\n      const fetchedRows = ws.getRows(1, 2);\n      for (let i = 0; i < 2; i++) {\n        expect(fetchedRows[i].values).to.deep.equal(values[i + 1]);\n      }\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"inserts rows by contiguous array","suites":["Worksheet","Values"],"updatePoint":{"line":415,"column":40,"index":15041},"line":415,"code":"    it('inserts rows by contiguous array', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      const dateValue3 = new Date(1965, 1, 10);\n      ws.addRow([1, 'John Doe', dateValue1]);\n      ws.addRow([2, 'Jane Doe', dateValue2]);\n\n      // insert in 2 shifting down earlier\n      ws.insertRow(2, [3, 'Other Doe', dateValue3]);\n      expect(ws.getCell('A1').value).to.equal(1);\n      expect(ws.getCell('B1').value).to.equal('John Doe');\n      expect(ws.getCell('C1').value).to.equal(dateValue1);\n      expect(ws.getCell('A2').value).to.equal(3);\n      expect(ws.getCell('B2').value).to.equal('Other Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue3);\n      expect(ws.getCell('A3').value).to.equal(2);\n      expect(ws.getCell('B3').value).to.equal('Jane Doe');\n      expect(ws.getCell('C3').value).to.equal(dateValue2);\n      const values = [[, 1, 'John Doe', dateValue1], [, 3, 'Other Doe', dateValue3], [, 2, 'Jane Doe', dateValue2]];\n      expect(ws.getRow(1).values).to.deep.equal(values[0]);\n      expect(ws.getRow(2).values).to.deep.equal(values[1]);\n      expect(ws.getRow(3).values).to.deep.equal(values[2]);\n      const fetchedRows = ws.getRows(1, 3);\n      for (let i = 0; i < 3; i++) {\n        expect(fetchedRows[i].values).to.deep.equal(values[i]);\n      }\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"inserts rows by sparse array","suites":["Worksheet","Values"],"updatePoint":{"line":444,"column":36,"index":16465},"line":444,"code":"    it('inserts rows by sparse array', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      const dateValue3 = new Date(1965, 1, 10);\n      const rows = [, [, 1, 'John Doe',, dateValue1], [, 2, 'Jane Doe',, dateValue2]];\n      const row3 = [];\n      row3[1] = 3;\n      row3[3] = 'Other Doe';\n      row3[5] = dateValue3;\n      rows.push(row3);\n      rows.forEach(row => {\n        if (row) {\n          // insert on row 1 every time and thus finally reversed order\n          ws.insertRow(1, row);\n        }\n      });\n      expect(ws.getCell('A1').value).to.equal(3);\n      expect(ws.getCell('C1').value).to.equal('Other Doe');\n      expect(ws.getCell('E1').value).to.equal(dateValue3);\n      expect(ws.getCell('A2').value).to.equal(2);\n      expect(ws.getCell('B2').value).to.equal('Jane Doe');\n      expect(ws.getCell('D2').value).to.equal(dateValue2);\n      expect(ws.getCell('A3').value).to.equal(1);\n      expect(ws.getCell('B3').value).to.equal('John Doe');\n      expect(ws.getCell('D3').value).to.equal(dateValue1);\n      ws.eachRow((row, rowNumber) => {\n        expect(row.values).to.deep.equal(rows[rows.length - rowNumber]);\n        row.eachCell((cell, colNumber) => {\n          expect(cell.value).to.equal(rows[rows.length - rowNumber][colNumber]);\n        });\n      });\n      const fetchedRows = ws.getRows(1, 3);\n      for (let i = 0; i < 3; i++) {\n        expect(fetchedRows[i].values).to.deep.equal(rows[rows.length - i - 1]);\n      }\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"inserts rows with style option","suites":["Worksheet","Values"],"updatePoint":{"line":482,"column":38,"index":18060},"line":482,"code":"    it('inserts rows with style option', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      const arr = [[5, 'Jane Doe', dateValue2], [5, 'Jane Doe', dateValue2], [5, 'Jane Doe', dateValue2]];\n      ws.addRow([5, 'John Doe', dateValue1]);\n      ws.getRow(1).font = testutils.styles.fonts.comicSansUdB16;\n      ws.insertRow(1, [5, 'Jane Doe', dateValue2], 'o');\n      ws.insertRow(1, [4, 'Jane Doe', dateValue2], 'i');\n      ws.insertRow(1, [3, 'Jane Doe', dateValue2], 'n');\n      ws.insertRow(1, [2, 'Jane Doe', dateValue2], 'o');\n      ws.addRow([6, 'Jane Doe', dateValue2]);\n      ws.getRow(6).font = testutils.styles.fonts.comicSansUdB16;\n      ws.insertRows(6, arr, 'o');\n      ws.insertRows(10, arr, 'i');\n      ws.insertRows(13, arr);\n      expect(ws.getCell('A1').font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A2').font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A3').font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A4').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A5').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A6').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A9').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      for (let i = 7; i <= 8; i++) {\n        expect(ws.getCell(`A${i}`).font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      }\n      for (let i = 10; i <= 12; i++) {\n        expect(ws.getCell(`A${i}`).font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      }\n      for (let i = 13; i <= 15; i++) {\n        expect(ws.getCell(`A${i}`).font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      }\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"should style of the inserted row with inherited style be mutable","suites":["Worksheet","Values"],"updatePoint":{"line":516,"column":72,"index":20044},"line":516,"code":"    it('should style of the inserted row with inherited style be mutable', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow([1, 'John Doe', dateValue1]);\n      ws.getRow(1).font = testutils.styles.fonts.comicSansUdB16;\n      ws.insertRow(2, [3, 'Jane Doe', dateValue2], 'i');\n      ws.insertRow(2, [2, 'Jane Doe', dateValue2], 'o');\n      ws.getRow(2).font = testutils.styles.fonts.broadwayRedOutline20;\n      ws.getRow(3).font = testutils.styles.fonts.broadwayRedOutline20;\n      ws.getCell('A2').font = testutils.styles.fonts.arialBlackUI14;\n      ws.getCell('A3').font = testutils.styles.fonts.arialBlackUI14;\n      expect(ws.getRow(2).font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getRow(3).font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A2').font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A3').font).not.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"iterates over rows","suites":["Worksheet","Values"],"updatePoint":{"line":534,"column":26,"index":21128},"line":534,"code":"    it('iterates over rows', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 1;\n      ws.getCell('B2').value = 2;\n      ws.getCell('D4').value = 4;\n      ws.getCell('F6').value = 6;\n      ws.eachRow((row, rowNumber) => {\n        expect(rowNumber).not.to.equal(3);\n        expect(rowNumber).not.to.equal(5);\n      });\n      let count = 1;\n      ws.eachRow({\n        includeEmpty: true\n      }, (row, rowNumber) => {\n        expect(rowNumber).to.equal(count++);\n      });\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"iterates over collumn cells","suites":["Worksheet","Values"],"updatePoint":{"line":552,"column":35,"index":21690},"line":552,"code":"    it('iterates over collumn cells', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 1;\n      ws.getCell('A2').value = 2;\n      ws.getCell('A4').value = 4;\n      ws.getCell('A6').value = 6;\n      const colA = ws.getColumn('A');\n      colA.eachCell((cell, rowNumber) => {\n        expect(rowNumber).not.to.equal(3);\n        expect(rowNumber).not.to.equal(5);\n        expect(cell.value).to.equal(rowNumber);\n      });\n      let count = 1;\n      colA.eachCell({\n        includeEmpty: true\n      }, (cell, rowNumber) => {\n        expect(rowNumber).to.equal(count++);\n      });\n      expect(count).to.equal(7);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"returns undefined when row range is less than 1","suites":["Worksheet","Values"],"updatePoint":{"line":573,"column":55,"index":22399},"line":573,"code":"    it('returns undefined when row range is less than 1', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      expect(ws.getRows(1, 0)).to.equal(undefined);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"save the original name","suites":["Worksheet","Values","when worksheet name is less than or equal 31"],"updatePoint":{"line":579,"column":32,"index":22654},"line":579,"code":"      it('save the original name', () => {\n        const wb = new ExcelJS.Workbook();\n        let ws = wb.addWorksheet();\n        ws.name = 'ThisIsAWorksheetName';\n        expect(ws.name).to.equal('ThisIsAWorksheetName');\n        ws = wb.addWorksheet();\n        ws.name = 'ThisIsAWorksheetNameWith31Chars';\n        expect(ws.name).to.equal('ThisIsAWorksheetNameWith31Chars');\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"when empty should thrown an error","suites":["Worksheet","Values","name is be not empty string"],"updatePoint":{"line":590,"column":43,"index":23110},"line":590,"code":"      it('when empty should thrown an error', () => {\n        const wb = new ExcelJS.Workbook();\n        expect(() => {\n          const ws = wb.addWorksheet();\n          ws.name = '';\n        }).to.throw('The name can\\'t be empty.');\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"when isn't string should thrown an error","suites":["Worksheet","Values","name is be not empty string"],"updatePoint":{"line":597,"column":51,"index":23362},"line":597,"code":"      it('when isn\\'t string should thrown an error', () => {\n        const wb = new ExcelJS.Workbook();\n        expect(() => {\n          const ws = wb.addWorksheet();\n          ws.name = 0;\n        }).to.throw('The name has to be a string.');\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"thrown an error","suites":["Worksheet","Values","when worksheet name is `History`"],"updatePoint":{"line":606,"column":25,"index":23654},"line":606,"code":"      it('thrown an error', () => {\n        const wb = new ExcelJS.Workbook();\n        expect(() => {\n          const ws = wb.addWorksheet();\n          ws.name = 'History';\n        }).to.throw('The name \"History\" is protected. Please use a different name.');\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"keep first 31 characters","suites":["Worksheet","Values","when worksheet name is longer than 31"],"updatePoint":{"line":615,"column":34,"index":24001},"line":615,"code":"      it('keep first 31 characters', () => {\n        const wb = new ExcelJS.Workbook();\n        const ws = wb.addWorksheet();\n        ws.name = 'ThisIsAWorksheetNameThatIsLongerThan31';\n        expect(ws.name).to.equal('ThisIsAWorksheetNameThatIsLonge');\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"throws an error","suites":["Worksheet","Values","when the worksheet name contains illegal characters"],"updatePoint":{"line":623,"column":25,"index":24340},"line":623,"code":"      it('throws an error', () => {\n        const workbook = new ExcelJS.Workbook();\n        const invalidCharacters = ['*', '?', ':', '/', '\\\\', '[', ']'];\n        for (const invalidCharacter of invalidCharacters) {\n          expect(() => {\n            const ws = workbook.addWorksheet();\n            ws.name = invalidCharacter;\n          }).to.throw(`Worksheet name ${invalidCharacter} cannot include any of the following characters: * ? : \\\\ / [ ]`);\n        }\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"throws an error","suites":["Worksheet","Values","when the worksheet name contains illegal characters"],"updatePoint":{"line":633,"column":25,"index":24814},"line":633,"code":"      it('throws an error', () => {\n        const workbook = new ExcelJS.Workbook();\n        const invalidNames = ['\\'sheetName', 'sheetName\\''];\n        for (const invalidName of invalidNames) {\n          expect(() => {\n            const ws = workbook.addWorksheet();\n            ws.name = invalidName;\n          }).to.throw(`The first or last character of worksheet name cannot be a single quotation mark: ${invalidName}`);\n        }\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"throws an error","suites":["Worksheet","Values","when worksheet name already exists"],"updatePoint":{"line":645,"column":25,"index":25326},"line":645,"code":"      it('throws an error', () => {\n        const wb = new ExcelJS.Workbook();\n        const validName = 'thisisaworksheetnameinuppercase';\n        const invalideName = 'THISISAWORKSHEETNAMEINUPPERCASE';\n        const expectedError = `Worksheet name already exists: ${invalideName}`;\n        const ws = wb.addWorksheet();\n        ws.name = validName;\n        expect(() => {\n          const newWs = wb.addWorksheet();\n          newWs.name = invalideName;\n        }).to.throw(expectedError);\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"throws an error","suites":["Worksheet","Values","when worksheet name already exists"],"updatePoint":{"line":657,"column":25,"index":25826},"line":657,"code":"      it('throws an error', () => {\n        const wb = new ExcelJS.Workbook();\n        const validName = 'ThisIsAWorksheetNameThatIsLonge';\n        const invalideName = 'ThisIsAWorksheetNameThatIsLongerThan31';\n        const expectedError = `Worksheet name already exists: ${validName}`;\n        const ws = wb.addWorksheet();\n        ws.name = validName;\n        expect(() => {\n          const newWs = wb.addWorksheet();\n          newWs.name = validName;\n        }).to.throw(expectedError);\n        expect(() => {\n          const newWs = wb.addWorksheet();\n          newWs.name = invalideName;\n        }).to.throw(expectedError);\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"returns sheet values","suites":["Worksheet","Values","when worksheet name already exists"],"updatePoint":{"line":675,"column":26,"index":26481},"line":675,"code":"  it('returns sheet values', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet();\n    ws.getCell('A1').value = 11;\n    ws.getCell('C1').value = 'C1';\n    ws.getCell('A2').value = 21;\n    ws.getCell('B2').value = 'B2';\n    ws.getCell('A4').value = 'end';\n    expect(ws.getSheetValues()).to.deep.equal([\n\n      // eslint-disable-line comma-style\n    , [, 11,, 'C1'], [, 21, 'B2'],, [, 'end']]);\n  });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"sets row styles","suites":["Worksheet","Values","when worksheet name already exists"],"updatePoint":{"line":688,"column":21,"index":26903},"line":688,"code":"  it('sets row styles', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('basket');\n    ws.getCell('A1').value = 5;\n    ws.getCell('A1').numFmt = testutils.styles.numFmts.numFmt1;\n    ws.getCell('A1').font = testutils.styles.fonts.arialBlackUI14;\n    ws.getCell('C1').value = 'Hello, World!';\n    ws.getCell('C1').alignment = testutils.styles.namedAlignments.bottomRight;\n    ws.getCell('C1').border = testutils.styles.borders.doubleRed;\n    ws.getCell('C1').fill = testutils.styles.fills.redDarkVertical;\n    ws.getRow(1).numFmt = testutils.styles.numFmts.numFmt2;\n    ws.getRow(1).font = testutils.styles.fonts.comicSansUdB16;\n    ws.getRow(1).alignment = testutils.styles.namedAlignments.middleCentre;\n    ws.getRow(1).border = testutils.styles.borders.thin;\n    ws.getRow(1).fill = testutils.styles.fills.redGreenDarkTrellis;\n    expect(ws.getCell('A1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n    expect(ws.getCell('A1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    expect(ws.getCell('A1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n    expect(ws.getCell('A1').border).to.deep.equal(testutils.styles.borders.thin);\n    expect(ws.getCell('A1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n    expect(ws.findCell('B1')).to.be.undefined();\n    expect(ws.getCell('C1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n    expect(ws.getCell('C1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    expect(ws.getCell('C1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n    expect(ws.getCell('C1').border).to.deep.equal(testutils.styles.borders.thin);\n    expect(ws.getCell('C1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n\n    // when we 'get' the previously null cell, it should inherit the row styles\n    expect(ws.getCell('B1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n    expect(ws.getCell('B1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    expect(ws.getCell('B1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n    expect(ws.getCell('B1').border).to.deep.equal(testutils.styles.borders.thin);\n    expect(ws.getCell('B1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n  });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"sets col styles","suites":["Worksheet","Values","when worksheet name already exists"],"updatePoint":{"line":722,"column":21,"index":29230},"line":722,"code":"  it('sets col styles', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('basket');\n    ws.getCell('A1').value = 5;\n    ws.getCell('A1').numFmt = testutils.styles.numFmts.numFmt1;\n    ws.getCell('A1').font = testutils.styles.fonts.arialBlackUI14;\n    ws.getCell('A3').value = 'Hello, World!';\n    ws.getCell('A3').alignment = testutils.styles.namedAlignments.bottomRight;\n    ws.getCell('A3').border = testutils.styles.borders.doubleRed;\n    ws.getCell('A3').fill = testutils.styles.fills.redDarkVertical;\n    ws.getColumn('A').numFmt = testutils.styles.numFmts.numFmt2;\n    ws.getColumn('A').font = testutils.styles.fonts.comicSansUdB16;\n    ws.getColumn('A').alignment = testutils.styles.namedAlignments.middleCentre;\n    ws.getColumn('A').border = testutils.styles.borders.thin;\n    ws.getColumn('A').fill = testutils.styles.fills.redGreenDarkTrellis;\n    expect(ws.getCell('A1').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n    expect(ws.getCell('A1').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    expect(ws.getCell('A1').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n    expect(ws.getCell('A1').border).to.deep.equal(testutils.styles.borders.thin);\n    expect(ws.getCell('A1').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n    expect(ws.findRow(2)).to.be.undefined();\n    expect(ws.getCell('A3').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n    expect(ws.getCell('A3').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    expect(ws.getCell('A3').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n    expect(ws.getCell('A3').border).to.deep.equal(testutils.styles.borders.thin);\n    expect(ws.getCell('A3').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n\n    // when we 'get' the previously null cell, it should inherit the column styles\n    expect(ws.getCell('A2').numFmt).to.equal(testutils.styles.numFmts.numFmt2);\n    expect(ws.getCell('A2').font).to.deep.equal(testutils.styles.fonts.comicSansUdB16);\n    expect(ws.getCell('A2').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n    expect(ws.getCell('A2').border).to.deep.equal(testutils.styles.borders.thin);\n    expect(ws.getCell('A2').fill).to.deep.equal(testutils.styles.fills.redGreenDarkTrellis);\n  });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"puts the lotion in the basket","suites":["Worksheet","Values","when worksheet name already exists"],"updatePoint":{"line":756,"column":35,"index":31595},"line":756,"code":"  it('puts the lotion in the basket', () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('basket');\n    ws.getCell('A1').value = 'lotion';\n  });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"references the same top-left value","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":762,"column":42,"index":31808},"line":762,"code":"    it('references the same top-left value', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // initial values\n      ws.getCell('A1').value = 'A1';\n      ws.getCell('B1').value = 'B1';\n      ws.getCell('A2').value = 'A2';\n      ws.getCell('B2').value = 'B2';\n      ws.mergeCells('A1:B2');\n      expect(ws.getCell('A1').value).to.equal('A1');\n      expect(ws.getCell('B1').value).to.equal('A1');\n      expect(ws.getCell('A2').value).to.equal('A1');\n      expect(ws.getCell('B2').value).to.equal('A1');\n      expect(ws.getCell('A1').type).to.equal(ExcelJS.ValueType.String);\n      expect(ws.getCell('B1').type).to.equal(ExcelJS.ValueType.Merge);\n      expect(ws.getCell('A2').type).to.equal(ExcelJS.ValueType.Merge);\n      expect(ws.getCell('B2').type).to.equal(ExcelJS.ValueType.Merge);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"does not allow overlapping merges","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":781,"column":41,"index":32652},"line":781,"code":"    it('does not allow overlapping merges', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.mergeCells('B2:C3');\n\n      // intersect four corners\n      expect(() => {\n        ws.mergeCells('A1:B2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C1:D2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C3:D4');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('A3:B4');\n      }).to.throw(Error);\n\n      // enclosing\n      expect(() => {\n        ws.mergeCells('A1:D4');\n      }).to.throw(Error);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"merges and unmerges","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":805,"column":27,"index":33260},"line":805,"code":"    it('merges and unmerges', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const expectMaster = function (range, master) {\n        const d = new Range(range);\n        for (let i = d.top; i <= d.bottom; i++) {\n          for (let j = d.left; j <= d.right; j++) {\n            const cell = ws.getCell(i, j);\n            const masterCell = master ? ws.getCell(master) : cell;\n            expect(cell.master.address).to.equal(masterCell.address);\n          }\n        }\n      };\n\n      // merge some cells, then unmerge them\n      ws.mergeCells('A1:B2');\n      expectMaster('A1:B2', 'A1');\n      ws.unMergeCells('A1:B2');\n      expectMaster('A1:B2', null);\n\n      // unmerge just one cell\n      ws.mergeCells('A1:B2');\n      expectMaster('A1:B2', 'A1');\n      ws.unMergeCells('A1');\n      expectMaster('A1:B2', null);\n      ws.mergeCells('A1:B2');\n      expectMaster('A1:B2', 'A1');\n      ws.unMergeCells('B2');\n      expectMaster('A1:B2', null);\n\n      // build 4 merge-squares\n      ws.mergeCells('A1:B2');\n      ws.mergeCells('D1:E2');\n      ws.mergeCells('A4:B5');\n      ws.mergeCells('D4:E5');\n      expectMaster('A1:B2', 'A1');\n      expectMaster('D1:E2', 'D1');\n      expectMaster('A4:B5', 'A4');\n      expectMaster('D4:E5', 'D4');\n\n      // unmerge the middle\n      ws.unMergeCells('B2:D4');\n      expectMaster('A1:B2', null);\n      expectMaster('D1:E2', null);\n      expectMaster('A4:B5', null);\n      expectMaster('D4:E5', null);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"does not allow overlapping merges","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":852,"column":41,"index":34768},"line":852,"code":"    it('does not allow overlapping merges', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.mergeCells('B2:C3');\n\n      // intersect four corners\n      expect(() => {\n        ws.mergeCells('A1:B2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C1:D2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C3:D4');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('A3:B4');\n      }).to.throw(Error);\n\n      // enclosing\n      expect(() => {\n        ws.mergeCells('A1:D4');\n      }).to.throw(Error);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"merges styles","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":876,"column":21,"index":35370},"line":876,"code":"    it('merges styles', () => {\n      const wb = new ExcelJS.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // initial value\n      const B2 = ws.getCell('B2');\n      B2.value = 5;\n      B2.style.font = testutils.styles.fonts.broadwayRedOutline20;\n      B2.style.border = testutils.styles.borders.doubleRed;\n      B2.style.fill = testutils.styles.fills.blueWhiteHGrad;\n      B2.style.alignment = testutils.styles.namedAlignments.middleCentre;\n      B2.style.numFmt = testutils.styles.numFmts.numFmt1;\n\n      // expecting styles to be copied (see worksheet spec)\n      ws.mergeCells('B2:C3');\n      expect(ws.getCell('B2').font).to.deep.equal(testutils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('B2').border).to.deep.equal(testutils.styles.borders.doubleRed);\n      expect(ws.getCell('B2').fill).to.deep.equal(testutils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('B2').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('B2').numFmt).to.equal(testutils.styles.numFmts.numFmt1);\n      expect(ws.getCell('B3').font).to.deep.equal(testutils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('B3').border).to.deep.equal(testutils.styles.borders.doubleRed);\n      expect(ws.getCell('B3').fill).to.deep.equal(testutils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('B3').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('B3').numFmt).to.equal(testutils.styles.numFmts.numFmt1);\n      expect(ws.getCell('C2').font).to.deep.equal(testutils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('C2').border).to.deep.equal(testutils.styles.borders.doubleRed);\n      expect(ws.getCell('C2').fill).to.deep.equal(testutils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('C2').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C2').numFmt).to.equal(testutils.styles.numFmts.numFmt1);\n      expect(ws.getCell('C3').font).to.deep.equal(testutils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('C3').border).to.deep.equal(testutils.styles.borders.doubleRed);\n      expect(ws.getCell('C3').fill).to.deep.equal(testutils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('C3').alignment).to.deep.equal(testutils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C3').numFmt).to.equal(testutils.styles.numFmts.numFmt1);\n    });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"Should not break when importing a .numbers file","suites":["Worksheet","When passed a non-Excel file"],"updatePoint":{"line":914,"column":55,"index":37915},"line":914,"code":"    it('Should not break when importing a .numbers file', () => new ExcelJS.Workbook().xlsx.readFile(path.resolve(__dirname, 'data', 'numbers.numbers')).then(workbook => {\n      expect(workbook).to.have.property('worksheets');\n      expect(workbook.worksheets).to.have.length(0);\n    }));","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"Should not break when importing an Excel file that contains a chartsheet","suites":["Worksheet","When passed a non-Excel file"],"updatePoint":{"line":919,"column":78,"index":38233},"line":919,"code":"  it('Should not break when importing an Excel file that contains a chartsheet', () => new ExcelJS.Workbook().xlsx.readFile(path.resolve(__dirname, 'data', 'chart-sheet.xlsx')).then(workbook => {\n    expect(workbook).to.have.property('worksheets');\n    expect(workbook.worksheets).to.have.length(1);\n  }));","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"Should set hidden attribute correctly ()","suites":["Worksheet","Hidden"],"updatePoint":{"line":926,"column":57,"index":38700},"line":926,"code":"      it(`Should set hidden attribute correctly (${file})`, done => {\n        const wb = new ExcelJS.Workbook();\n        wb.xlsx.readFile(path.resolve(__dirname, 'data', 'hidden-test', `${file}.xlsx`)).then(() => {\n          const ws = wb.getWorksheet(1);\n\n          //  Check rows\n          expect(ws.getRow(1).hidden, `${file} : Row 1`).to.equal(false);\n          expect(ws.getRow(2).hidden, `${file} : Row 2`).to.equal(true);\n          expect(ws.getRow(3).hidden, `${file} : Row 3`).to.equal(false);\n\n          //  Check columns\n          expect(ws.getColumn(1).hidden, `${file} : Column 1`).to.equal(false);\n          expect(ws.getColumn(2).hidden, `${file} : Column 2`).to.equal(true);\n          expect(ws.getColumn(3).hidden, `${file} : Column 3`).to.equal(false);\n          done();\n        }).catch(error => {\n          done(error);\n        });\n      });","file":"integration/worksheet.spec.js","skipped":false,"dir":"spec"},{"name":"can create and buffer xlsx","suites":["typescript"],"updatePoint":{"line":5,"column":32,"index":168},"line":5,"code":"  it('can create and buffer xlsx', async () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('blort');\n    ws.getCell('A1').value = 7;\n    const buffer = await wb.xlsx.writeBuffer({\n      useStyles: true,\n      useSharedStrings: true\n    });\n    const wb2 = new ExcelJS.Workbook();\n    await wb2.xlsx.load(buffer);\n    const ws2 = wb2.getWorksheet('blort');\n    expect(ws2.getCell('A1').value).to.equal(7);\n  });","file":"typescript/exceljs.spec.ts","skipped":false,"dir":"spec"},{"name":"can create and stream xlsx","suites":["typescript"],"updatePoint":{"line":18,"column":32,"index":607},"line":18,"code":"  it('can create and stream xlsx', async () => {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet('blort');\n    ws.getCell('A1').value = 7;\n    const wb2 = new ExcelJS.Workbook();\n    const stream = wb2.xlsx.createInputStream();\n    await wb.xlsx.write(stream);\n    stream.end();\n    await new Promise((resolve, reject) => {\n      stream.on('done', () => {\n        const ws2 = wb2.getWorksheet('blort');\n        expect(ws2.getCell('A1').value).to.equal(7);\n        resolve();\n      });\n      stream.on('error', reject);\n    });\n  });","file":"typescript/exceljs.spec.ts","skipped":false,"dir":"spec"},{"name":"should colWidth equals 640000 when worksheet is undefined","suites":["Anchor","colWidth"],"updatePoint":{"line":7,"column":65,"index":223},"line":7,"code":"    it('should colWidth equals 640000 when worksheet is undefined', () => {\n      const anchor = new Anchor();\n      expect(anchor.colWidth).to.equal(640000);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should colWidth equals 640000 when column has not set custom width","suites":["Anchor","colWidth"],"updatePoint":{"line":11,"column":74,"index":399},"line":11,"code":"    it('should colWidth equals 640000 when column has not set custom width', () => {\n      const anchor = new Anchor(createSheetMock());\n      expect(anchor.colWidth).to.equal(640000);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should colWidth equals column width","suites":["Anchor","colWidth"],"updatePoint":{"line":15,"column":43,"index":561},"line":15,"code":"    it('should colWidth equals column width', () => {\n      const worksheet = createSheetMock();\n      const anchor = new Anchor(worksheet);\n      worksheet.addColumn(anchor.nativeCol + 1, {\n        width: 10\n      });\n      expect(anchor.colWidth).to.equal(worksheet.getColumn(anchor.nativeCol + 1).width * 10000);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should rowHeight equals 180000 when worksheet is undefined","suites":["Anchor","rowHeight"],"updatePoint":{"line":25,"column":66,"index":946},"line":25,"code":"    it('should rowHeight equals 180000 when worksheet is undefined', () => {\n      const anchor = new Anchor();\n      expect(anchor.rowHeight).to.equal(180000);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should rowHeight equals 180000 when row has not set height","suites":["Anchor","rowHeight"],"updatePoint":{"line":29,"column":66,"index":1115},"line":29,"code":"    it('should rowHeight equals 180000 when row has not set height', () => {\n      const anchor = new Anchor(createSheetMock());\n      expect(anchor.rowHeight).to.equal(180000);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should rowHeight equals row height","suites":["Anchor","rowHeight"],"updatePoint":{"line":33,"column":42,"index":1277},"line":33,"code":"    it('should rowHeight equals row height', () => {\n      const worksheet = createSheetMock();\n      worksheet.getRow(1).height = 10;\n      const anchor = new Anchor(worksheet);\n      expect(anchor.rowHeight).to.equal(worksheet.getRow(1).height * 10000);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should update colWidth","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":51,"column":30,"index":1876},"line":51,"code":"    it('should update colWidth', () => {\n      const pre = context.anchor.colWidth;\n      context.worksheet.getColumn(1).width *= 2;\n      expect(context.anchor.colWidth).to.not.equal(pre);\n      expect(context.anchor.colWidth).to.equal(pre * 2);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should update rowHeight","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":57,"column":31,"index":2132},"line":57,"code":"    it('should update rowHeight', () => {\n      const pre = context.anchor.rowHeight;\n      context.worksheet.getRow(1).height *= 2;\n      expect(context.anchor.rowHeight).to.not.equal(pre);\n      expect(context.anchor.rowHeight).to.equal(pre * 2);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should recalculate col","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":63,"column":30,"index":2388},"line":63,"code":"    it('should recalculate col', () => {\n      const pre = context.anchor.col;\n      context.worksheet.getColumn(1).width *= 2;\n      expect(context.anchor.col).to.not.equal(pre);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should recalculate row","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":68,"column":30,"index":2576},"line":68,"code":"    it('should recalculate row', () => {\n      const pre = context.anchor.row;\n      context.worksheet.getRow(1).height *= 2;\n      expect(context.anchor.row).to.not.equal(pre);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should integer part of row and rowOff should be always equals","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":73,"column":69,"index":2801},"line":73,"code":"    it('should integer part of row and rowOff should be always equals', () => {\n      expect(Math.floor(context.anchor.row)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getRow(1).height *= 2;\n      expect(Math.floor(context.anchor.row)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getRow(1).height /= 4;\n      expect(Math.floor(context.anchor.row)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getRow(1).height = 0.1;\n      expect(Math.floor(context.anchor.row)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getRow(1).height = 9999;\n      expect(Math.floor(context.anchor.row)).to.equal(Math.floor(context.anchor.nativeCol));\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should integer part of col and colOff should be always equals","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":84,"column":69,"index":3545},"line":84,"code":"    it('should integer part of col and colOff should be always equals', () => {\n      expect(Math.floor(context.anchor.col)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getColumn(1).width *= 2;\n      expect(Math.floor(context.anchor.col)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getColumn(1).width /= 4;\n      expect(Math.floor(context.anchor.col)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getColumn(1).width = 0.1;\n      expect(Math.floor(context.anchor.col)).to.equal(Math.floor(context.anchor.nativeCol));\n      context.worksheet.getColumn(1).width = 9999;\n      expect(Math.floor(context.anchor.col)).to.equal(Math.floor(context.anchor.nativeCol));\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should update nativeColOff after col has been changed","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":95,"column":61,"index":4289},"line":95,"code":"    it('should update nativeColOff after col has been changed', () => {\n      const pre = context.anchor.nativeColOff;\n      context.anchor.col -= 0.321;\n      expect(context.anchor.nativeColOff).to.not.equal(pre);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"should update nativeRowOff after row has been changed","suites":["Anchor","resize worksheet`s cells"],"updatePoint":{"line":100,"column":61,"index":4512},"line":100,"code":"    it('should update nativeRowOff after row has been changed', () => {\n      const pre = context.anchor.nativeRowOff;\n      context.anchor.row -= 0.321;\n      expect(context.anchor.nativeColOff).to.not.equal(pre);\n    });","file":"unit/doc/anchor.spec.js","skipped":false,"dir":"spec"},{"name":"stores values","suites":["Cell"],"updatePoint":{"line":89,"column":19,"index":1977},"line":89,"code":"  it('stores values', () => {\n    sheetMock.getRow(1);\n    sheetMock.getColumn(1);\n    const a1 = sheetMock.getCell('A1');\n    expect(a1.address).to.equal('A1');\n    expect(a1.$col$row).to.equal('$A$1');\n    expect(a1.type).to.equal(Enums.ValueType.Null);\n    expect(a1.value = 5).to.equal(5);\n    expect(a1.value).to.equal(5);\n    expect(a1.type).to.equal(Enums.ValueType.Number);\n    const strValue = 'Hello, World!';\n    expect(a1.value = strValue).to.equal(strValue);\n    expect(a1.value).to.equal(strValue);\n    expect(a1.type).to.equal(Enums.ValueType.String);\n    const dateValue = new Date();\n    expect(a1.value = dateValue).to.equal(dateValue);\n    expect(a1.value).to.equal(dateValue);\n    expect(a1.type).to.equal(Enums.ValueType.Date);\n    let formulaValue = {\n      formula: 'A2',\n      result: 5\n    };\n    expect(a1.value = formulaValue).to.deep.equal(formulaValue);\n    expect(a1.value).to.deep.equal(formulaValue);\n    expect(a1.type).to.equal(Enums.ValueType.Formula);\n\n    // no result\n    formulaValue = {\n      formula: 'A3'\n    };\n    expect(a1.value = formulaValue).to.deep.equal(formulaValue);\n    expect(a1.value).to.deep.equal({\n      formula: 'A3'\n    });\n    expect(a1.type).to.equal(Enums.ValueType.Formula);\n    const hyperlinkValue = {\n      hyperlink: 'http://www.link.com',\n      text: 'www.link.com'\n    };\n    expect(a1.value = hyperlinkValue).to.deep.equal(hyperlinkValue);\n    expect(a1.value).to.deep.equal(hyperlinkValue);\n    expect(a1.type).to.equal(Enums.ValueType.Hyperlink);\n    expect(a1.value = null).to.be.null();\n    expect(a1.type).to.equal(Enums.ValueType.Null);\n    expect(a1.value = {\n      json: 'data'\n    }).to.deep.equal({\n      json: 'data'\n    });\n    expect(a1.type).to.equal(Enums.ValueType.String);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"validates options on construction","suites":["Cell"],"updatePoint":{"line":140,"column":39,"index":3764},"line":140,"code":"  it('validates options on construction', () => {\n    const row = sheetMock.getRow(1);\n    const column = sheetMock.getColumn(1);\n    expect(() => {\n      new Cell();\n    }).to.throw(Error);\n    expect(() => {\n      new Cell(row);\n    }).to.throw(Error);\n    expect(() => {\n      new Cell(row, 'A');\n    }).to.throw(Error);\n    expect(() => {\n      new Cell(row, 'Hello, World!');\n    }).to.throw(Error);\n    expect(() => {\n      new Cell(null, null, 'A1');\n    }).to.throw(Error);\n    expect(() => {\n      new Cell(row, null, 'A1');\n    }).to.throw(Error);\n    expect(() => {\n      new Cell(null, column, 'A1');\n    }).to.throw(Error);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"merges","suites":["Cell"],"updatePoint":{"line":165,"column":12,"index":4380},"line":165,"code":"  it('merges', () => {\n    const a1 = sheetMock.getCell('A1');\n    const a2 = sheetMock.getCell('A2');\n    a1.value = 5;\n    a2.value = 'Hello, World!';\n    a2.merge(a1);\n    expect(a2.value).to.equal(5);\n    expect(a2.type).to.equal(Enums.ValueType.Merge);\n    expect(a1._mergeCount).to.equal(1);\n    expect(a1.isMerged).to.be.ok();\n    expect(a2.isMerged).to.be.ok();\n    expect(a2.isMergedTo(a1)).to.be.ok();\n    expect(a2.master).to.equal(a1);\n    expect(a1.master).to.equal(a1);\n\n    // assignment of slaves write to the master\n    a2.value = 7;\n    expect(a1.value).to.equal(7);\n\n    // assignment of strings should add 1 ref\n    const strValue = 'Boo!';\n    a2.value = strValue;\n    expect(a1.value).to.equal(strValue);\n\n    // unmerge should work also\n    a2.unmerge();\n    expect(a2.type).to.equal(Enums.ValueType.Null);\n    expect(a1._mergeCount).to.equal(0);\n    expect(a1.isMerged).to.not.be.ok();\n    expect(a2.isMerged).to.not.be.ok();\n    expect(a2.isMergedTo(a1)).to.not.be.ok();\n    expect(a2.master).to.equal(a2);\n    expect(a1.master).to.equal(a1);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"upgrades from string to hyperlink","suites":["Cell"],"updatePoint":{"line":199,"column":39,"index":5481},"line":199,"code":"  it('upgrades from string to hyperlink', () => {\n    sheetMock.getRow(1);\n    sheetMock.getColumn(1);\n    const a1 = sheetMock.getCell('A1');\n    const strValue = 'www.link.com';\n    const linkValue = 'http://www.link.com';\n    a1.value = strValue;\n    a1._upgradeToHyperlink(linkValue);\n    expect(a1.type).to.equal(Enums.ValueType.Hyperlink);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"doesn't upgrade from non-string to hyperlink","suites":["Cell"],"updatePoint":{"line":209,"column":51,"index":5845},"line":209,"code":"  it('doesn\\'t upgrade from non-string to hyperlink', () => {\n    sheetMock.getRow(1);\n    sheetMock.getColumn(1);\n    const a1 = sheetMock.getCell('A1');\n    const linkValue = 'http://www.link.com';\n\n    // null\n    a1._upgradeToHyperlink(linkValue);\n    expect(a1.type).to.equal(Enums.ValueType.Null);\n\n    // number\n    a1.value = 5;\n    a1._upgradeToHyperlink(linkValue);\n    expect(a1.type).to.equal(Enums.ValueType.Number);\n\n    // date\n    a1.value = new Date();\n    a1._upgradeToHyperlink(linkValue);\n    expect(a1.type).to.equal(Enums.ValueType.Date);\n\n    // formula\n    a1.value = {\n      formula: 'A2'\n    };\n    a1._upgradeToHyperlink(linkValue);\n    expect(a1.type).to.equal(Enums.ValueType.Formula);\n\n    // hyperlink\n    a1.value = {\n      hyperlink: 'http://www.link2.com',\n      text: 'www.link2.com'\n    };\n    a1._upgradeToHyperlink(linkValue);\n    expect(a1.type).to.deep.equal(Enums.ValueType.Hyperlink);\n\n    // cleanup\n    a1.value = null;\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"inherits column styles","suites":["Cell"],"updatePoint":{"line":247,"column":28,"index":6792},"line":247,"code":"  it('inherits column styles', () => {\n    sheetMock.getRow(1);\n    const column = sheetMock.getColumn(1);\n    column.style = {\n      font: fonts.arialBlackUI14\n    };\n    const a1 = sheetMock.getCell('A1');\n    expect(a1.font).to.deep.equal(fonts.arialBlackUI14);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"inherits row styles","suites":["Cell"],"updatePoint":{"line":256,"column":25,"index":7060},"line":256,"code":"  it('inherits row styles', () => {\n    const row = sheetMock.getRow(1);\n    sheetMock.getColumn(1);\n    row.style = {\n      font: fonts.broadwayRedOutline20\n    };\n    const a1 = sheetMock.getCell('A1');\n    expect(a1.font).to.deep.equal(fonts.broadwayRedOutline20);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"has effective types","suites":["Cell"],"updatePoint":{"line":265,"column":25,"index":7334},"line":265,"code":"  it('has effective types', () => {\n    sheetMock.getRow(1);\n    sheetMock.getColumn(1);\n    const a1 = sheetMock.getCell('A1');\n    expect(a1.type).to.equal(Enums.ValueType.Null);\n    expect(a1.effectiveType).to.equal(Enums.ValueType.Null);\n    a1.value = 5;\n    expect(a1.type).to.equal(Enums.ValueType.Number);\n    expect(a1.effectiveType).to.equal(Enums.ValueType.Number);\n    a1.value = 'Hello, World!';\n    expect(a1.type).to.equal(Enums.ValueType.String);\n    expect(a1.effectiveType).to.equal(Enums.ValueType.String);\n    a1.value = new Date();\n    expect(a1.type).to.equal(Enums.ValueType.Date);\n    expect(a1.effectiveType).to.equal(Enums.ValueType.Date);\n    a1.value = {\n      formula: 'A2',\n      result: 5\n    };\n    expect(a1.type).to.deep.equal(Enums.ValueType.Formula);\n    expect(a1.effectiveType).to.equal(Enums.ValueType.Number);\n    a1.value = {\n      formula: 'A2',\n      result: 'Hello, World!'\n    };\n    expect(a1.type).to.deep.equal(Enums.ValueType.Formula);\n    expect(a1.effectiveType).to.equal(Enums.ValueType.String);\n    a1.value = {\n      hyperlink: 'http://www.link.com',\n      text: 'www.link.com'\n    };\n    expect(a1.type).to.deep.equal(Enums.ValueType.Hyperlink);\n    expect(a1.effectiveType).to.equal(Enums.ValueType.Hyperlink);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"shares formulas","suites":["Cell"],"updatePoint":{"line":299,"column":21,"index":8603},"line":299,"code":"  it('shares formulas', () => {\n    const a1 = sheetMock.getCell('A1');\n    const b1 = sheetMock.getCell('B1');\n    const c1 = sheetMock.getCell('C1');\n    a1.value = 1;\n    b1.value = {\n      formula: 'A1+1',\n      result: 2\n    };\n    c1.value = {\n      sharedFormula: 'B1',\n      result: 3\n    };\n    expect(b1.type).to.equal(Enums.ValueType.Formula);\n    expect(b1.formulaType).to.equal(Enums.FormulaType.Master);\n    expect(c1.type).to.equal(Enums.ValueType.Formula);\n    expect(c1.formulaType).to.equal(Enums.FormulaType.Shared);\n    expect(c1.formula).to.equal('B1+1');\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"escapes dangerous html","suites":["Cell"],"updatePoint":{"line":318,"column":28,"index":9193},"line":318,"code":"  it('escapes dangerous html', () => {\n    const a1 = sheetMock.getCell('A1');\n    a1.value = '<script>alert(\"yoohoo\")</script>';\n    expect(a1.html).to.equal('&lt;script&gt;alert(&quot;yoohoo&quot;)&lt;/script&gt;');\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"can set comment","suites":["Cell"],"updatePoint":{"line":323,"column":21,"index":9410},"line":323,"code":"  it('can set comment', () => {\n    const a1 = sheetMock.getCell('A1');\n    const comment = {\n      texts: [{\n        font: {\n          size: 12,\n          color: {\n            theme: 0\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        },\n        text: 'This is '\n      }],\n      margins: {\n        insetmode: 'auto',\n        inset: [0.13, 0.13, 0.25, 0.25]\n      },\n      protection: {\n        locked: 'True',\n        lockText: 'True'\n      },\n      editAs: 'twoCells'\n    };\n    a1.note = comment;\n    a1.value = 'test set value';\n    expect(a1.model.comment.type).to.equal('note');\n    expect(a1.model.comment.note).to.deep.equal(comment);\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"Cell comments supports setting margins, protection, and position properties","suites":["Cell"],"updatePoint":{"line":353,"column":81,"index":10164},"line":353,"code":"  it('Cell comments supports setting margins, protection, and position properties', () => {\n    const a1 = sheetMock.getCell('A1');\n    const comment = {\n      texts: [{\n        font: {\n          size: 12,\n          color: {\n            theme: 0\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        },\n        text: 'This is '\n      }],\n      protection: {\n        locked: 'False',\n        lockText: 'True'\n      }\n    };\n    a1.note = comment;\n    a1.value = 'test set value';\n    expect(a1.model.comment.type).to.equal('note');\n    expect(a1.model.comment.note.texts).to.deep.equal(comment.texts);\n    expect(a1.model.comment.note.protection).to.deep.equal(comment.protection);\n    expect(a1.model.comment.note.margins.insetmode).to.equal('auto');\n    expect(a1.model.comment.note.margins.inset).to.deep.equal([0.13, 0.13, 0.25, 0.25]);\n    expect(a1.model.comment.note.editAs).to.equal('absolute');\n  });","file":"unit/doc/cell.spec.js","skipped":false,"dir":"spec"},{"name":"creates by defn","suites":["Column"],"updatePoint":{"line":6,"column":21,"index":148},"line":6,"code":"  it('creates by defn', () => {\n    const sheet = createSheetMock();\n    sheet.addColumn(1, {\n      header: 'Col 1',\n      key: 'id1',\n      width: 10\n    });\n    expect(sheet.getColumn(1).header).to.equal('Col 1');\n    expect(sheet.getColumn(1).headers).to.deep.equal(['Col 1']);\n    expect(sheet.getCell(1, 1).value).to.equal('Col 1');\n    expect(sheet.getColumn('id1')).to.equal(sheet.getColumn(1));\n    sheet.getRow(2).values = {\n      id1: 'Hello, World!'\n    };\n    expect(sheet.getCell(2, 1).value).to.equal('Hello, World!');\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"maintains properties","suites":["Column"],"updatePoint":{"line":22,"column":26,"index":692},"line":22,"code":"  it('maintains properties', () => {\n    const sheet = createSheetMock();\n    const column = sheet.addColumn(1);\n    column.key = 'id1';\n    expect(sheet._keys.id1).to.equal(column);\n    expect(column.number).to.equal(1);\n    expect(column.letter).to.equal('A');\n    column.header = 'Col 1';\n    expect(sheet.getColumn(1).header).to.equal('Col 1');\n    expect(sheet.getColumn(1).headers).to.deep.equal(['Col 1']);\n    expect(sheet.getCell(1, 1).value).to.equal('Col 1');\n    column.header = ['Col A1', 'Col A2'];\n    expect(sheet.getColumn(1).header).to.deep.equal(['Col A1', 'Col A2']);\n    expect(sheet.getColumn(1).headers).to.deep.equal(['Col A1', 'Col A2']);\n    expect(sheet.getCell(1, 1).value).to.equal('Col A1');\n    expect(sheet.getCell(2, 1).value).to.equal('Col A2');\n    sheet.getRow(3).values = {\n      id1: 'Hello, World!'\n    };\n    expect(sheet.getCell(3, 1).value).to.equal('Hello, World!');\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"creates model","suites":["Column"],"updatePoint":{"line":43,"column":19,"index":1601},"line":43,"code":"  it('creates model', () => {\n    const sheet = createSheetMock();\n    sheet.addColumn(1, {\n      header: 'Col 1',\n      key: 'id1',\n      width: 10\n    });\n    sheet.addColumn(2, {\n      header: 'Col 2',\n      key: 'name',\n      width: 10\n    });\n    sheet.addColumn(3, {\n      header: 'Col 2',\n      key: 'dob',\n      width: 10,\n      outlineLevel: 1\n    });\n    const model = Column.toModel(sheet.columns);\n    expect(model.length).to.equal(2);\n    expect(model[0].width).to.equal(10);\n    expect(model[0].outlineLevel).to.equal(0);\n    expect(model[0].collapsed).to.equal(false);\n    expect(model[1].width).to.equal(10);\n    expect(model[1].outlineLevel).to.equal(1);\n    expect(model[1].collapsed).to.equal(true);\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"gets column values","suites":["Column"],"updatePoint":{"line":70,"column":24,"index":2331},"line":70,"code":"  it('gets column values', () => {\n    const sheet = createSheetMock();\n    sheet.getCell(1, 1).value = 'a';\n    sheet.getCell(2, 1).value = 'b';\n    sheet.getCell(4, 1).value = 'd';\n    expect(sheet.getColumn(1).values).to.deep.equal([, 'a', 'b',, 'd']);\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"sets column values","suites":["Column"],"updatePoint":{"line":77,"column":24,"index":2593},"line":77,"code":"  it('sets column values', () => {\n    const sheet = createSheetMock();\n    sheet.getColumn(1).values = [2, 3, 5, 7, 11];\n    expect(sheet.getCell(1, 1).value).to.equal(2);\n    expect(sheet.getCell(2, 1).value).to.equal(3);\n    expect(sheet.getCell(3, 1).value).to.equal(5);\n    expect(sheet.getCell(4, 1).value).to.equal(7);\n    expect(sheet.getCell(5, 1).value).to.equal(11);\n    expect(sheet.getCell(6, 1).value).to.equal(null);\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"sets sparse column values","suites":["Column"],"updatePoint":{"line":87,"column":31,"index":3038},"line":87,"code":"  it('sets sparse column values', () => {\n    const sheet = createSheetMock();\n    const values = [];\n    values[2] = 2;\n    values[3] = 3;\n    values[5] = 5;\n    values[11] = 11;\n    sheet.getColumn(1).values = values;\n    expect(sheet.getCell(1, 1).value).to.equal(null);\n    expect(sheet.getCell(2, 1).value).to.equal(2);\n    expect(sheet.getCell(3, 1).value).to.equal(3);\n    expect(sheet.getCell(4, 1).value).to.equal(null);\n    expect(sheet.getCell(5, 1).value).to.equal(5);\n    expect(sheet.getCell(6, 1).value).to.equal(null);\n    expect(sheet.getCell(7, 1).value).to.equal(null);\n    expect(sheet.getCell(8, 1).value).to.equal(null);\n    expect(sheet.getCell(9, 1).value).to.equal(null);\n    expect(sheet.getCell(10, 1).value).to.equal(null);\n    expect(sheet.getCell(11, 1).value).to.equal(11);\n    expect(sheet.getCell(12, 1).value).to.equal(null);\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"sets sparse column values","suites":["Column"],"updatePoint":{"line":108,"column":31,"index":3904},"line":108,"code":"  it('sets sparse column values', () => {\n    const sheet = createSheetMock();\n    sheet.getColumn(1).values = [,, 2, 3,, 5,, 7,,,, 11];\n    expect(sheet.getCell(1, 1).value).to.equal(null);\n    expect(sheet.getCell(2, 1).value).to.equal(2);\n    expect(sheet.getCell(3, 1).value).to.equal(3);\n    expect(sheet.getCell(4, 1).value).to.equal(null);\n    expect(sheet.getCell(5, 1).value).to.equal(5);\n    expect(sheet.getCell(6, 1).value).to.equal(null);\n    expect(sheet.getCell(7, 1).value).to.equal(7);\n    expect(sheet.getCell(8, 1).value).to.equal(null);\n    expect(sheet.getCell(9, 1).value).to.equal(null);\n    expect(sheet.getCell(10, 1).value).to.equal(null);\n    expect(sheet.getCell(11, 1).value).to.equal(11);\n    expect(sheet.getCell(12, 1).value).to.equal(null);\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"sets default column width","suites":["Column"],"updatePoint":{"line":124,"column":31,"index":4684},"line":124,"code":"  it('sets default column width', () => {\n    const sheet = createSheetMock();\n    sheet.addColumn(1, {\n      header: 'Col 1',\n      key: 'id1',\n      style: {\n        numFmt: '0.00%'\n      }\n    });\n    sheet.addColumn(2, {\n      header: 'Col 2',\n      key: 'id2',\n      style: {\n        numFmt: '0.00%'\n      },\n      width: 10\n    });\n    sheet.getColumn(3).numFmt = '0.00%';\n    const model = Column.toModel(sheet.columns);\n    expect(model.length).to.equal(3);\n    expect(model[0].width).to.equal(9);\n    expect(model[1].width).to.equal(10);\n    expect(model[2].width).to.equal(9);\n  });","file":"unit/doc/column.spec.js","skipped":false,"dir":"spec"},{"name":"adds names for cells","suites":["DefinedNames"],"updatePoint":{"line":3,"column":26,"index":112},"line":3,"code":"  it('adds names for cells', () => {\n    const dn = new DefinedNames();\n    dn.add('blort!A1', 'foo');\n    expect(dn.getNames('blort!A1')).to.deep.equal(['foo']);\n    expect(dn.getNames('blort!$A$1')).to.deep.equal(['foo']);\n    dn.add('blort!$B$4', 'bar');\n    expect(dn.getNames('blort!B4')).to.deep.equal(['bar']);\n    expect(dn.getNames('blort!$B$4')).to.deep.equal(['bar']);\n    dn.add('\\'blo rt\\'!$B$4', 'bar');\n    expect(dn.getNames('\\'blo rt\\'!$B$4')).to.deep.equal(['bar']);\n    dn.add('\\'blo ,!rt\\'!$B$4', 'bar');\n    expect(dn.getNames('\\'blo ,!rt\\'!$B$4')).to.deep.equal(['bar']);\n  });","file":"unit/doc/defined-names.spec.js","skipped":false,"dir":"spec"},{"name":"removes names for cells","suites":["DefinedNames"],"updatePoint":{"line":16,"column":29,"index":715},"line":16,"code":"  it('removes names for cells', () => {\n    const dn = new DefinedNames();\n    dn.add('blort!A1', 'foo');\n    dn.add('blort!A1', 'bar');\n    dn.remove('blort!A1', 'foo');\n    expect(dn.getNames('blort!A1')).to.deep.equal(['bar']);\n  });","file":"unit/doc/defined-names.spec.js","skipped":false,"dir":"spec"},{"name":"gets the right ranges for a name","suites":["DefinedNames"],"updatePoint":{"line":25,"column":38,"index":986},"line":25,"code":"  it('gets the right ranges for a name', () => {\n    const dn = new DefinedNames();\n    dn.add('blort!A1', 'vertical');\n    dn.add('blort!A2', 'vertical');\n    dn.add('blort!A3', 'vertical');\n    dn.add('blort!C1', 'horizontal');\n    dn.add('blort!D1', 'horizontal');\n    dn.add('blort!E1', 'horizontal');\n    dn.add('blort!C3', 'square');\n    dn.add('blort!D3', 'square');\n    dn.add('blort!C4', 'square');\n    dn.add('blort!D4', 'square');\n    dn.add('other!A1', 'single');\n    expect(dn.getRanges('vertical')).to.deep.equal({\n      name: 'vertical',\n      ranges: ['blort!$A$1:$A$3']\n    });\n    expect(dn.getRanges('horizontal')).to.deep.equal({\n      name: 'horizontal',\n      ranges: ['blort!$C$1:$E$1']\n    });\n    expect(dn.getRanges('square')).to.deep.equal({\n      name: 'square',\n      ranges: ['blort!$C$3:$D$4']\n    });\n    expect(dn.getRanges('single')).to.deep.equal({\n      name: 'single',\n      ranges: ['other!$A$1']\n    });\n  });","file":"unit/doc/defined-names.spec.js","skipped":false,"dir":"spec"},{"name":"splices","suites":["DefinedNames"],"updatePoint":{"line":55,"column":13,"index":1910},"line":55,"code":"  it('splices', () => {\n    const dn = new DefinedNames();\n    dn.add('vertical!A1', 'vertical');\n    dn.add('vertical!A2', 'vertical');\n    dn.add('vertical!A3', 'vertical');\n    dn.add('vertical!A4', 'vertical');\n    dn.add('horizontal!A1', 'horizontal');\n    dn.add('horizontal!B1', 'horizontal');\n    dn.add('horizontal!C1', 'horizontal');\n    dn.add('horizontal!D1', 'horizontal');\n    ['A', 'B', 'C', 'D'].forEach(col => {\n      [1, 2, 3, 4].forEach(row => {\n        dn.add(`square!${col}${row}`, 'square');\n      });\n    });\n    dn.add('single!A1', 'singleA1');\n    dn.add('single!D1', 'singleD1');\n    dn.add('single!A4', 'singleA4');\n    dn.add('single!D4', 'singleD4');\n    dn.spliceRows('vertical', 2, 2, 1);\n    dn.spliceColumns('horizontal', 2, 2, 1);\n    dn.spliceRows('square', 2, 2, 1);\n    dn.spliceColumns('square', 2, 2, 1);\n    dn.spliceRows('single', 2, 2, 1);\n    dn.spliceColumns('single', 2, 2, 1);\n    expect(dn.getRanges('vertical')).to.deep.equal({\n      name: 'vertical',\n      ranges: ['vertical!$A$1', 'vertical!$A$3']\n    });\n    expect(dn.getRanges('horizontal')).to.deep.equal({\n      name: 'horizontal',\n      ranges: ['horizontal!$A$1', 'horizontal!$C$1']\n    });\n    expect(dn.getRanges('square')).to.deep.equal({\n      name: 'square',\n      ranges: ['square!$A$1', 'square!$C$1', 'square!$A$3', 'square!$C$3']\n    });\n    expect(dn.getRanges('singleA1')).to.deep.equal({\n      name: 'singleA1',\n      ranges: ['single!$A$1']\n    });\n    expect(dn.getRanges('singleD1')).to.deep.equal({\n      name: 'singleD1',\n      ranges: ['single!$C$1']\n    });\n    expect(dn.getRanges('singleA4')).to.deep.equal({\n      name: 'singleA4',\n      ranges: ['single!$A$3']\n    });\n    expect(dn.getRanges('singleD4')).to.deep.equal({\n      name: 'singleD4',\n      ranges: ['single!$C$3']\n    });\n  });","file":"unit/doc/defined-names.spec.js","skipped":false,"dir":"spec"},{"name":"creates matrix from model","suites":["DefinedNames"],"updatePoint":{"line":109,"column":31,"index":3749},"line":109,"code":"  it('creates matrix from model', () => {\n    const dn = new DefinedNames();\n    dn.model = [];\n    dn.add('blort!A1', 'bar');\n    dn.remove('blort!A1', 'foo');\n    expect(dn.getNames('blort!A1')).to.deep.equal(['bar']);\n  });","file":"unit/doc/defined-names.spec.js","skipped":false,"dir":"spec"},{"name":"skips values with invalid range","suites":["DefinedNames"],"updatePoint":{"line":116,"column":37,"index":3982},"line":116,"code":"  it('skips values with invalid range', () => {\n    const dn = new DefinedNames();\n    dn.model = [{\n      name: 'eq',\n      ranges: ['\"=\"']\n    }, {\n      name: 'ref',\n      ranges: ['#REF!']\n    }, {\n      name: 'single',\n      ranges: ['Sheet3!$A$1']\n    }, {\n      name: 'range',\n      ranges: ['Sheet3!$A$2:$F$2228']\n    }];\n    expect(dn.model).to.deep.equal([{\n      name: 'single',\n      ranges: ['Sheet3!$A$1']\n    }, {\n      name: 'range',\n      ranges: ['Sheet3!$A$2:$F$2228']\n    }]);\n  });","file":"unit/doc/defined-names.spec.js","skipped":false,"dir":"spec"},{"name":"has a valid default value","suites":["Range"],"updatePoint":{"line":17,"column":31,"index":632},"line":17,"code":"  it('has a valid default value', () => {\n    const d = new Range();\n    check(d, 'A1:A1', '$A$1:$A$1', 'A1', '$A$1', 'A1', '$A$1', 1, 1, 1, 1);\n  });","file":"unit/doc/range.spec.js","skipped":false,"dir":"spec"},{"name":"constructs as expected","suites":["Range"],"updatePoint":{"line":21,"column":28,"index":780},"line":21,"code":"  it('constructs as expected', () => {\n    // check range + rotations\n    check(new Range('B5:D10'), 'B5:D10', '$B$5:$D$10', 'B5', '$B$5', 'D10', '$D$10', 5, 2, 10, 4);\n    check(new Range('B10:D5'), 'B5:D10', '$B$5:$D$10', 'B5', '$B$5', 'D10', '$D$10', 5, 2, 10, 4);\n    check(new Range('D5:B10'), 'B5:D10', '$B$5:$D$10', 'B5', '$B$5', 'D10', '$D$10', 5, 2, 10, 4);\n    check(new Range('D10:B5'), 'B5:D10', '$B$5:$D$10', 'B5', '$B$5', 'D10', '$D$10', 5, 2, 10, 4);\n    check(new Range('G7', 'C16'), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range('C7', 'G16'), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range('C16', 'G7'), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range('G16', 'C7'), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range(7, 3, 16, 7), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range(16, 3, 7, 7), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range(7, 7, 16, 3), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range(16, 7, 7, 3), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range([7, 3, 16, 7]), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range([16, 3, 7, 7]), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range([7, 7, 16, 3]), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range([16, 7, 7, 3]), 'C7:G16', '$C$7:$G$16', 'C7', '$C$7', 'G16', '$G$16', 7, 3, 16, 7);\n    check(new Range('$B$5:$D$10'), 'B5:D10', '$B$5:$D$10', 'B5', '$B$5', 'D10', '$D$10', 5, 2, 10, 4);\n    check(new Range('blort!$B$5:$D$10'), 'blort!B5:D10', 'blort!$B$5:$D$10', 'B5', '$B$5', 'D10', '$D$10', 5, 2, 10, 4, 'blort');\n  });","file":"unit/doc/range.spec.js","skipped":false,"dir":"spec"},{"name":"expands properly","suites":["Range"],"updatePoint":{"line":42,"column":22,"index":2711},"line":42,"code":"  it('expands properly', () => {\n    const d = new Range();\n    d.expand(1, 1, 1, 3);\n    expect(d.tl).to.equal('A1');\n    expect(d.br).to.equal('C1');\n    expect(d.toString()).to.equal('A1:C1');\n    d.expand(1, 3, 3, 3);\n    expect(d.tl).to.equal('A1');\n    expect(d.br).to.equal('C3');\n    expect(d.toString()).to.equal('A1:C3');\n  });","file":"unit/doc/range.spec.js","skipped":false,"dir":"spec"},{"name":"doesn't always include the default row/col","suites":["Range"],"updatePoint":{"line":53,"column":49,"index":3076},"line":53,"code":"  it('doesn\\'t always include the default row/col', () => {\n    const d = new Range();\n    d.expand(2, 2, 4, 4);\n    expect(d.tl).to.equal('B2');\n    expect(d.br).to.equal('D4');\n    expect(d.toString()).to.equal('B2:D4');\n  });","file":"unit/doc/range.spec.js","skipped":false,"dir":"spec"},{"name":"detects intersections","suites":["Range"],"updatePoint":{"line":60,"column":27,"index":3283},"line":60,"code":"  it('detects intersections', () => {\n    const C3F6 = new Range('C3:F6');\n\n    // touching at corners\n    expect(C3F6.intersects(new Range('A1:B2'))).to.be.false();\n    expect(C3F6.intersects(new Range('G1:H2'))).to.be.false();\n    expect(C3F6.intersects(new Range('A7:B8'))).to.be.false();\n    expect(C3F6.intersects(new Range('G7:H8'))).to.be.false();\n\n    // Adjacent to edges\n    expect(C3F6.intersects(new Range('A1:H2'))).to.be.false();\n    expect(C3F6.intersects(new Range('A1:B8'))).to.be.false();\n    expect(C3F6.intersects(new Range('G1:H8'))).to.be.false();\n    expect(C3F6.intersects(new Range('A7:H8'))).to.be.false();\n\n    // 1 cell margin\n    expect(C3F6.intersects(new Range('A1:H1'))).to.be.false();\n    expect(C3F6.intersects(new Range('A1:A8'))).to.be.false();\n    expect(C3F6.intersects(new Range('G1:G8'))).to.be.false();\n    expect(C3F6.intersects(new Range('A8:G8'))).to.be.false();\n\n    // Adjacent at corners\n    expect(C3F6.intersects(new Range('A1:B3'))).to.be.false();\n    expect(C3F6.intersects(new Range('A1:C2'))).to.be.false();\n    expect(C3F6.intersects(new Range('F1:H2'))).to.be.false();\n    expect(C3F6.intersects(new Range('G1:H3'))).to.be.false();\n    expect(C3F6.intersects(new Range('A6:B8'))).to.be.false();\n    expect(C3F6.intersects(new Range('A7:C8'))).to.be.false();\n    expect(C3F6.intersects(new Range('F7:H8'))).to.be.false();\n    expect(C3F6.intersects(new Range('G6:H8'))).to.be.false();\n\n    // Adjacent at edges\n    expect(C3F6.intersects(new Range('A4:B5'))).to.be.false();\n    expect(C3F6.intersects(new Range('D1:E2'))).to.be.false();\n    expect(C3F6.intersects(new Range('D7:E8'))).to.be.false();\n    expect(C3F6.intersects(new Range('G4:H8'))).to.be.false();\n\n    // intersecting at corners\n    expect(C3F6.intersects(new Range('A1:C3'))).to.be.true();\n    expect(C3F6.intersects(new Range('F1:H3'))).to.be.true();\n    expect(C3F6.intersects(new Range('A6:C8'))).to.be.true();\n    expect(C3F6.intersects(new Range('F6:H8'))).to.be.true();\n\n    // slice through middle\n    expect(C3F6.intersects(new Range('A4:H5'))).to.be.true();\n    expect(C3F6.intersects(new Range('D1:E8'))).to.be.true();\n\n    // inside\n    expect(C3F6.intersects(new Range('D4:E5'))).to.be.true();\n\n    // outside\n    expect(C3F6.intersects(new Range('A1:H8'))).to.be.true();\n  });","file":"unit/doc/range.spec.js","skipped":false,"dir":"spec"},{"name":"detects containment","suites":["Range"],"updatePoint":{"line":113,"column":25,"index":5592},"line":113,"code":"  it('detects containment', () => {\n    const C3F6 = new Range('C3:F6');\n    expect(C3F6.contains('A1')).to.be.false();\n    expect(C3F6.contains('B2')).to.be.false();\n    expect(C3F6.contains('C2')).to.be.false();\n    expect(C3F6.contains('D2')).to.be.false();\n    expect(C3F6.contains('E2')).to.be.false();\n    expect(C3F6.contains('F2')).to.be.false();\n    expect(C3F6.contains('G2')).to.be.false();\n    expect(C3F6.contains('H1')).to.be.false();\n    expect(C3F6.contains('G3')).to.be.false();\n    expect(C3F6.contains('G4')).to.be.false();\n    expect(C3F6.contains('G5')).to.be.false();\n    expect(C3F6.contains('G6')).to.be.false();\n    expect(C3F6.contains('G7')).to.be.false();\n    expect(C3F6.contains('H7')).to.be.false();\n    expect(C3F6.contains('F7')).to.be.false();\n    expect(C3F6.contains('E7')).to.be.false();\n    expect(C3F6.contains('D7')).to.be.false();\n    expect(C3F6.contains('C7')).to.be.false();\n    expect(C3F6.contains('B7')).to.be.false();\n    expect(C3F6.contains('A8')).to.be.false();\n    expect(C3F6.contains('B6')).to.be.false();\n    expect(C3F6.contains('B5')).to.be.false();\n    expect(C3F6.contains('B4')).to.be.false();\n    expect(C3F6.contains('B3')).to.be.false();\n    expect(C3F6.contains('C3')).to.be.true();\n    expect(C3F6.contains('D3')).to.be.true();\n    expect(C3F6.contains('E3')).to.be.true();\n    expect(C3F6.contains('F3')).to.be.true();\n    expect(C3F6.contains('F4')).to.be.true();\n    expect(C3F6.contains('F5')).to.be.true();\n    expect(C3F6.contains('F6')).to.be.true();\n    expect(C3F6.contains('E6')).to.be.true();\n    expect(C3F6.contains('D6')).to.be.true();\n    expect(C3F6.contains('C6')).to.be.true();\n    expect(C3F6.contains('C5')).to.be.true();\n    expect(C3F6.contains('C4')).to.be.true();\n    expect(C3F6.contains('D4')).to.be.true();\n    expect(C3F6.contains('E4')).to.be.true();\n    expect(C3F6.contains('E5')).to.be.true();\n    expect(C3F6.contains('D5')).to.be.true();\n    expect(C3F6.contains('$A$1')).to.be.false();\n    expect(C3F6.contains('$D$5')).to.be.true();\n    expect(C3F6.contains('other!$A$1')).to.be.false();\n    expect(C3F6.contains('other!$D$5')).to.be.true();\n    const otherC3F6 = new Range('other!C3:F6');\n    expect(otherC3F6.contains('$A$1')).to.be.false();\n    expect(otherC3F6.contains('$D$5')).to.be.true();\n    expect(otherC3F6.contains('other!$A$1')).to.be.false();\n    expect(otherC3F6.contains('other!$D$5')).to.be.true();\n    expect(otherC3F6.contains('blort!$A$1')).to.be.false();\n    expect(otherC3F6.contains('blort!$D$5')).to.be.false();\n  });","file":"unit/doc/range.spec.js","skipped":false,"dir":"spec"},{"name":"stores cells","suites":["Row"],"updatePoint":{"line":6,"column":18,"index":140},"line":6,"code":"  it('stores cells', () => {\n    const sheet = createSheetMock();\n    sheet.addColumn(1, {\n      key: 'name'\n    });\n    const row1 = sheet.getRow(1);\n    expect(row1.number).to.equal(1);\n    expect(row1.hasValues).to.not.be.ok();\n    const a1 = row1.getCell(1);\n    expect(a1.address).to.equal('A1');\n    expect(a1.type).to.equal(Enums.ValueType.Null);\n    expect(row1.hasValues).to.not.be.ok();\n    expect(row1.getCell('A')).to.equal(a1);\n    expect(row1.getCell('name')).to.equal(a1);\n    a1.value = 5;\n    expect(a1.type).to.equal(Enums.ValueType.Number);\n    expect(row1.hasValues).to.be.ok();\n    const b1 = row1.getCell(2);\n    expect(b1.address).to.equal('B1');\n    expect(b1.type).to.equal(Enums.ValueType.Null);\n    expect(a1.type).to.equal(Enums.ValueType.Number);\n    b1.value = 'Hello, World!';\n    const d1 = row1.getCell(4);\n    d1.value = {\n      hyperlink: 'http://www.hyperlink.com',\n      text: 'www.hyperlink.com'\n    };\n    const values = [, 5, 'Hello, World!',, {\n      hyperlink: 'http://www.hyperlink.com',\n      text: 'www.hyperlink.com'\n    }];\n    expect(row1.values).to.deep.equal(values);\n    expect(row1.dimensions).to.deep.equal({\n      min: 1,\n      max: 4\n    });\n    let count = 0;\n    row1.eachCell((cell, colNumber) => {\n      expect(cell.type).to.not.equal(Enums.ValueType.Null);\n      switch (cell.type) {\n        case Enums.ValueType.Hyperlink:\n          expect(cell.value).to.deep.equal(values[colNumber]);\n          break;\n        default:\n          expect(cell.value).to.equal(values[colNumber]);\n          break;\n      }\n      count++;\n    });\n\n    // eachCell should just cover non-null cells\n    expect(count).to.equal(3);\n    const row2 = sheet.getRow(2);\n    expect(row2.dimensions).to.be.null();\n  });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"stores values by whole row","suites":["Row"],"updatePoint":{"line":61,"column":32,"index":1904},"line":61,"code":"  it('stores values by whole row', () => {\n    const sheet = createSheetMock();\n    sheet.addColumn(1, {\n      key: 'id'\n    });\n    sheet.addColumn(2, {\n      key: 'name'\n    });\n    sheet.addColumn(3, {\n      key: 'dob'\n    });\n    const now = new Date();\n    const row1 = sheet.getRow(1);\n\n    // set values by contiguous array\n    row1.values = [5, 'Hello, World!', null];\n    expect(row1.getCell(1).value).to.equal(5);\n    expect(row1.getCell(2).value).to.equal('Hello, World!');\n    expect(row1.getCell(3).value).to.be.null();\n    expect(row1.values).to.deep.equal([, 5, 'Hello, World!']);\n\n    // set values by sparse array\n    const values = [];\n    values[1] = 7;\n    values[3] = 'Not Null!';\n    values[5] = now;\n    row1.values = values;\n    expect(row1.getCell(1).value).to.equal(7);\n    expect(row1.getCell(2).value).to.be.null();\n    expect(row1.getCell(3).value).to.equal('Not Null!');\n    expect(row1.getCell(5).type).to.equal(Enums.ValueType.Date);\n    expect(row1.values).to.deep.equal([, 7,, 'Not Null!',, now]);\n\n    // set values by object\n    row1.values = {\n      id: 9,\n      name: 'Dobbie',\n      dob: now\n    };\n    expect(row1.getCell(1).value).to.equal(9);\n    expect(row1.getCell(2).value).to.equal('Dobbie');\n    expect(row1.getCell(3).type).to.equal(Enums.ValueType.Date);\n    expect(row1.getCell(5).value).to.be.null();\n    expect(row1.values).to.deep.equal([, 9, 'Dobbie', now]);\n  });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"remove only","suites":["Row","Splice"],"updatePoint":{"line":107,"column":19,"index":3339},"line":107,"code":"    it('remove only', () => {\n      const sheet = createSheetMock();\n      const row = sheet.getRow(1);\n      row.getCell(2).value = 2;\n      row.getCell(3).value = 3;\n      row.getCell(5).value = 5;\n      row.getCell(7).value = 7;\n      row.getCell(11).value = 'eleven';\n      row.getCell(13).value = 13;\n      row.splice(3, 3);\n      expect(row.getCell(2).value).to.equal(2);\n      expect(row.getCell(2).type).to.equal(Enums.ValueType.Number);\n      expect(row.getCell(2).address).to.equal('B1');\n      expect(row.getCell(4).value).to.equal(7);\n      expect(row.getCell(4).type).to.equal(Enums.ValueType.Number);\n      expect(row.getCell(4).address).to.equal('D1');\n      expect(row.getCell(8).value).to.equal('eleven');\n      expect(row.getCell(8).type).to.equal(Enums.ValueType.String);\n      expect(row.getCell(8).address).to.equal('H1');\n    });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"remove to end","suites":["Row","Splice"],"updatePoint":{"line":127,"column":21,"index":4193},"line":127,"code":"    it('remove to end', () => {\n      const sheet = createSheetMock();\n      const row = sheet.getRow(1);\n      row.getCell(1).value = 1;\n      row.getCell(2).value = 2;\n      row.getCell(3).value = 3;\n      row.getCell(4).value = 4;\n      row.getCell(5).value = 5;\n      row.splice(4, 2);\n      expect(row.getCell(1).value).to.equal(1);\n      expect(row.getCell(2).value).to.equal(2);\n      expect(row.getCell(3).value).to.equal(3);\n      expect(row.getCell(4).value).to.be.null();\n      expect(row.getCell(5).value).to.be.null();\n      expect(row.getCell(6).value).to.be.null();\n    });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"remove almost to end","suites":["Row","Splice"],"updatePoint":{"line":143,"column":28,"index":4789},"line":143,"code":"    it('remove almost to end', () => {\n      const sheet = createSheetMock();\n      const row = sheet.getRow(1);\n      row.getCell(1).value = 1;\n      row.getCell(2).value = 2;\n      row.getCell(3).value = 3;\n      row.getCell(4).value = 4;\n      row.getCell(5).value = 5;\n      row.getCell(6).value = 6;\n      row.splice(4, 2);\n      expect(row.getCell(1).value).to.equal(1);\n      expect(row.getCell(2).value).to.equal(2);\n      expect(row.getCell(3).value).to.equal(3);\n      expect(row.getCell(4).value).to.equal(6);\n      expect(row.getCell(5).value).to.be.null();\n      expect(row.getCell(6).value).to.be.null();\n    });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"remove past end","suites":["Row","Splice"],"updatePoint":{"line":160,"column":23,"index":5411},"line":160,"code":"    it('remove past end', () => {\n      const sheet = createSheetMock();\n      const row = sheet.getRow(1);\n      row.getCell(1).value = 1;\n      row.getCell(2).value = 2;\n      row.getCell(3).value = 3;\n      row.getCell(4).value = 4;\n      row.getCell(5).value = 5;\n      row.getCell(6).value = 6;\n      row.splice(4, 4);\n      expect(row.getCell(1).value).to.equal(1);\n      expect(row.getCell(2).value).to.equal(2);\n      expect(row.getCell(3).value).to.equal(3);\n      expect(row.getCell(4).value).to.be.null();\n      expect(row.getCell(5).value).to.be.null();\n      expect(row.getCell(6).value).to.be.null();\n      expect(row.getCell(7).value).to.be.null();\n      expect(row.getCell(8).value).to.be.null();\n    });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"remove and insert fewer","suites":["Row","Splice"],"updatePoint":{"line":179,"column":31,"index":6140},"line":179,"code":"    it('remove and insert fewer', () => {\n      const sheet = createSheetMock();\n      const row = sheet.getRow(1);\n      row.values = [1, 2, 3, 4, 5, 6, 7, 8];\n      row.splice(4, 3, 'four', 'five');\n      expect(row.values).to.deep.equal([, 1, 2, 3, 'four', 'five', 7, 8]);\n    });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"remove and insert replacements","suites":["Row","Splice"],"updatePoint":{"line":186,"column":38,"index":6431},"line":186,"code":"    it('remove and insert replacements', () => {\n      const sheet = createSheetMock();\n      const row = sheet.getRow(1);\n      row.values = [1, 2, 3, 4, 5, 6, 7, 8];\n      row.splice(4, 3, 'four', 'five', 'six');\n      expect(row.values).to.deep.equal([, 1, 2, 3, 'four', 'five', 'six', 7, 8]);\n    });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"remove and insert more","suites":["Row","Splice"],"updatePoint":{"line":193,"column":30,"index":6728},"line":193,"code":"    it('remove and insert more', () => {\n      const sheet = createSheetMock();\n      const row = sheet.getRow(1);\n      row.values = [1, 2, 3, 4, 5, 6, 7, 8];\n      row.splice(4, 3, 'four', 'five', 'six', 'six and a half');\n      expect(row.values).to.deep.equal([, 1, 2, 3, 'four', 'five', 'six', 'six and a half', 7, 8]);\n    });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"iterates over cells","suites":["Row","Splice"],"updatePoint":{"line":201,"column":25,"index":7062},"line":201,"code":"  it('iterates over cells', () => {\n    const sheet = createSheetMock();\n    const row1 = sheet.getRow(1);\n    row1.getCell(1).value = 1;\n    row1.getCell(2).value = 2;\n    row1.getCell(4).value = 4;\n    row1.getCell(6).value = 6;\n    row1.eachCell((cell, colNumber) => {\n      expect(colNumber).to.not.equal(3);\n      expect(colNumber).to.not.equal(5);\n      expect(cell.value).to.equal(colNumber);\n    });\n    let count = 1;\n    row1.eachCell({\n      includeEmpty: true\n    }, (cell, colNumber) => {\n      expect(colNumber).to.equal(count++);\n    });\n    expect(count).to.equal(7);\n  });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"builds a model","suites":["Row","Splice"],"updatePoint":{"line":221,"column":20,"index":7647},"line":221,"code":"  it('builds a model', () => {\n    const sheet = createSheetMock();\n    const row1 = sheet.getRow(1);\n    row1.getCell(1).value = 5;\n    row1.getCell(2).value = 'Hello, World!';\n    row1.getCell(4).value = {\n      hyperlink: 'http://www.hyperlink.com',\n      text: 'www.hyperlink.com'\n    };\n    row1.getCell(5).value = null;\n    row1.height = 50;\n    expect(row1.model).to.deep.equal({\n      cells: [{\n        address: 'A1',\n        type: Enums.ValueType.Number,\n        value: 5,\n        style: {}\n      }, {\n        address: 'B1',\n        type: Enums.ValueType.String,\n        value: 'Hello, World!',\n        style: {}\n      }, {\n        address: 'D1',\n        type: Enums.ValueType.Hyperlink,\n        text: 'www.hyperlink.com',\n        hyperlink: 'http://www.hyperlink.com',\n        style: {}\n      }, {\n        address: 'E1',\n        type: Enums.ValueType.Null,\n        style: {}\n      }],\n      number: 1,\n      min: 1,\n      max: 5,\n      height: 50,\n      hidden: false,\n      style: {},\n      outlineLevel: 0,\n      collapsed: false\n    });\n    const row2 = sheet.getRow(2);\n    expect(row2.model).to.be.null();\n    const row3 = sheet.getRow(3);\n    row3.getCell(1).value = 5;\n    row3.outlineLevel = 1;\n    expect(row3.model).to.deep.equal({\n      cells: [{\n        address: 'A3',\n        type: Enums.ValueType.Number,\n        value: 5,\n        style: {}\n      }],\n      number: 3,\n      min: 1,\n      max: 1,\n      height: undefined,\n      hidden: false,\n      style: {},\n      outlineLevel: 1,\n      collapsed: true\n    });\n  });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"builds from model","suites":["Row","Splice"],"updatePoint":{"line":285,"column":23,"index":9192},"line":285,"code":"  it('builds from model', () => {\n    const sheet = createSheetMock();\n    const row1 = sheet.getRow(1);\n    row1.model = {\n      cells: [{\n        address: 'A1',\n        type: Enums.ValueType.Number,\n        value: 5\n      }, {\n        address: 'B1',\n        type: Enums.ValueType.String,\n        value: 'Hello, World!'\n      }, {\n        address: 'D1',\n        type: Enums.ValueType.Hyperlink,\n        text: 'www.hyperlink.com',\n        hyperlink: 'http://www.hyperlink.com'\n      }],\n      number: 1,\n      min: 1,\n      max: 4,\n      height: 32.5\n    };\n    expect(row1.dimensions).to.deep.equal({\n      min: 1,\n      max: 4\n    });\n    expect(row1.values).to.deep.equal([, 5, 'Hello, World!',, {\n      hyperlink: 'http://www.hyperlink.com',\n      text: 'www.hyperlink.com'\n    }]);\n    expect(row1.getCell(1).type).to.equal(Enums.ValueType.Number);\n    expect(row1.getCell(1).value).to.equal(5);\n    expect(row1.getCell(2).type).to.equal(Enums.ValueType.String);\n    expect(row1.getCell(2).value).to.equal('Hello, World!');\n    expect(row1.getCell(4).type).to.equal(Enums.ValueType.Hyperlink);\n    expect(row1.getCell(4).value).to.deep.equal({\n      hyperlink: 'http://www.hyperlink.com',\n      text: 'www.hyperlink.com'\n    });\n    expect(row1.getCell(5).type).to.equal(Enums.ValueType.Null);\n    expect(row1.height - 32.5).to.be.below(0.00000001);\n  });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"counts cells","suites":["Row","Splice"],"updatePoint":{"line":328,"column":18,"index":10548},"line":328,"code":"  it('counts cells', () => {\n    const sheet = createSheetMock();\n    const row1 = sheet.getRow(1);\n    row1.getCell(1).value = 'one';\n    row1.getCell(2).value = 'two';\n    row1.getCell(4).value = 'four';\n    row1.getCell(5).value = 'five';\n    expect(row1.cellCount).to.equal(5);\n    expect(row1.actualCellCount).to.equal(4);\n  });","file":"unit/doc/row.spec.js","skipped":false,"dir":"spec"},{"name":"returns undefined for non-existant sheet","suites":["Workbook Writer"],"updatePoint":{"line":4,"column":46,"index":161},"line":4,"code":"  it('returns undefined for non-existant sheet', () => {\n    const stream = new Stream.Writable({\n      write: function noop() {}\n    });\n    const wb = new Excel.stream.xlsx.WorkbookWriter({\n      stream\n    });\n    wb.addWorksheet('first');\n    expect(wb.getWorksheet('w00t')).to.equal(undefined);\n  });","file":"unit/doc/workbook-writer.spec.js","skipped":false,"dir":"spec"},{"name":"stores shared string values properly","suites":["Workbook"],"updatePoint":{"line":67,"column":42,"index":1568},"line":67,"code":"  it('stores shared string values properly', () => {\n    const wb = new Excel.Workbook();\n    const ws = wb.addWorksheet('blort');\n    ws.getCell('A1').value = 'Hello, World!';\n    ws.getCell('A2').value = 'Hello';\n    ws.getCell('B2').value = 'World';\n    ws.getCell('C2').value = {\n      formula: 'CONCATENATE(A2, \", \", B2, \"!\")',\n      result: 'Hello, World!'\n    };\n    ws.getCell('A3').value = `${['Hello', 'World'].join(', ')}!`;\n\n    // A1 and A3 should reference the same string object\n    expect(ws.getCell('A1').value).to.equal(ws.getCell('A3').value);\n\n    // A1 and C2 should not reference the same object\n    expect(ws.getCell('A1').value).to.equal(ws.getCell('C2').value.result);\n  });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"assigns cell types properly","suites":["Workbook"],"updatePoint":{"line":85,"column":33,"index":2259},"line":85,"code":"  it('assigns cell types properly', () => {\n    const wb = createSimpleWorkbook();\n    const ws = wb.getWorksheet('blort');\n    expect(ws.getCell('A1').type).to.equal(Excel.ValueType.Number);\n    expect(ws.getCell('B1').type).to.equal(Excel.ValueType.String);\n    expect(ws.getCell('C1').type).to.equal(Excel.ValueType.Number);\n    expect(ws.getCell('D1').type).to.equal(Excel.ValueType.Date);\n    expect(ws.getCell('E1').type).to.equal(Excel.ValueType.Hyperlink);\n    expect(ws.getCell('A2').type).to.equal(Excel.ValueType.Formula);\n    expect(ws.getCell('B2').type).to.equal(Excel.ValueType.Formula);\n    expect(ws.getCell('C2').type).to.equal(Excel.ValueType.Formula);\n  });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"assigns rich text","suites":["Workbook"],"updatePoint":{"line":97,"column":23,"index":2927},"line":97,"code":"  it('assigns rich text', () => {\n    const wb = new Excel.Workbook();\n    const ws = wb.addWorksheet('blort');\n    ws.getCell('A1').value = {\n      richText: [{\n        font: {\n          size: 12,\n          color: {\n            theme: 0\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        },\n        text: 'This is '\n      }, {\n        font: {\n          italic: true,\n          size: 12,\n          color: {\n            theme: 0\n          },\n          name: 'Calibri',\n          scheme: 'minor'\n        },\n        text: 'a'\n      }, {\n        font: {\n          size: 12,\n          color: {\n            theme: 1\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        },\n        text: ' '\n      }, {\n        font: {\n          size: 12,\n          color: {\n            argb: 'FFFF6600'\n          },\n          name: 'Calibri',\n          scheme: 'minor'\n        },\n        text: 'colorful'\n      }, {\n        font: {\n          size: 12,\n          color: {\n            theme: 1\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        },\n        text: ' text '\n      }, {\n        font: {\n          size: 12,\n          color: {\n            argb: 'FFCCFFCC'\n          },\n          name: 'Calibri',\n          scheme: 'minor'\n        },\n        text: 'with'\n      }, {\n        font: {\n          size: 12,\n          color: {\n            theme: 1\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        },\n        text: ' in-cell '\n      }, {\n        font: {\n          bold: true,\n          size: 12,\n          color: {\n            theme: 1\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        },\n        text: 'format'\n      }]\n    };\n    expect(ws.getCell('A1').text).to.equal('This is a colorful text with in-cell format');\n    expect(ws.getCell('A1').type).to.equal(Excel.ValueType.RichText);\n  });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"serialises to model","suites":["Workbook"],"line":193,"code":"  it.skip('serialises to model', () => {","file":"unit/doc/workbook.spec.js","skipped":true,"dir":"spec"},{"name":"returns undefined for non-existant sheet","suites":["Workbook"],"updatePoint":{"line":197,"column":46,"index":5085},"line":197,"code":"  it('returns undefined for non-existant sheet', () => {\n    const wb = new Excel.Workbook();\n    wb.addWorksheet('first');\n    expect(wb.getWorksheet('w00t')).to.equal(undefined);\n  });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"returns undefined for sheet 0","suites":["Workbook"],"updatePoint":{"line":202,"column":35,"index":5261},"line":202,"code":"  it('returns undefined for sheet 0', () => {\n    const wb = new Excel.Workbook();\n    wb.addWorksheet('first');\n    expect(wb.getWorksheet(0)).to.equal(undefined);\n  });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"returns undefined for sheet 0 after accessing wb.worksheets or wb.eachSheet ","suites":["Workbook"],"updatePoint":{"line":207,"column":82,"index":5479},"line":207,"code":"  it('returns undefined for sheet 0 after accessing wb.worksheets or wb.eachSheet ', () => {\n    const wb = new Excel.Workbook();\n    const sheet = wb.addWorksheet('first');\n    wb.eachSheet(() => {});\n    const numSheets = wb.worksheets.length;\n    expect(numSheets).to.equal(1);\n    expect(wb.getWorksheet(0)).to.equal(undefined);\n    expect(wb.getWorksheet(1) === sheet).to.equal(true);\n  });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"inserts duplicates","suites":["Workbook","duplicateRows"],"updatePoint":{"line":217,"column":26,"index":5855},"line":217,"code":"    it('inserts duplicates', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = '1.1';\n      ws.getCell('A1').font = testUtils.styles.fonts.arialBlackUI14;\n      ws.getCell('B1').value = '1.2';\n      ws.getCell('B1').font = testUtils.styles.fonts.comicSansUdB16;\n      ws.getCell('C1').value = '1.3';\n      ws.getCell('C1').fill = testUtils.styles.fills.redDarkVertical;\n      ws.getRow(1).numFmt = testUtils.styles.numFmts.numFmt1;\n      ws.getCell('A2').value = '2.1';\n      ws.getCell('A2').alignment = testUtils.styles.namedAlignments.topLeft;\n      ws.getCell('B2').value = '2.2';\n      ws.getCell('B2').alignment = testUtils.styles.namedAlignments.middleCentre;\n      ws.getCell('C2').value = '2.3';\n      ws.getCell('C2').alignment = testUtils.styles.namedAlignments.bottomRight;\n      ws.getRow(2).numFmt = testUtils.styles.numFmts.numFmt2;\n      ws.duplicateRow(1, 2, true);\n      expect(ws.getRow(1).values).to.deep.equal([, '1.1', '1.2', '1.3']);\n      expect(ws.getRow(2).values).to.deep.equal([, '1.1', '1.2', '1.3']);\n      expect(ws.getRow(3).values).to.deep.equal([, '1.1', '1.2', '1.3']);\n      expect(ws.getRow(4).values).to.deep.equal([, '2.1', '2.2', '2.3']);\n      for (let i = 1; i <= 3; i++) {\n        expect(ws.getCell(`A${i}`).font).to.deep.equal(testUtils.styles.fonts.arialBlackUI14);\n        expect(ws.getCell(`B${i}`).font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws.getCell(`C${i}`).fill).to.deep.equal(testUtils.styles.fills.redDarkVertical);\n      }\n      expect(ws.getCell('A4').alignment).to.deep.equal(testUtils.styles.namedAlignments.topLeft);\n      expect(ws.getCell('B4').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C4').alignment).to.deep.equal(testUtils.styles.namedAlignments.bottomRight);\n      expect(ws.getRow(1).numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getRow(2).numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getRow(3).numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getRow(4).numFmt).to.equal(testUtils.styles.numFmts.numFmt2);\n    });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"overwrites with duplicates","suites":["Workbook","duplicateRows"],"updatePoint":{"line":252,"column":34,"index":8067},"line":252,"code":"    it('overwrites with duplicates', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = '1.1';\n      ws.getCell('A1').font = testUtils.styles.fonts.arialBlackUI14;\n      ws.getCell('B1').value = '1.2';\n      ws.getCell('B1').font = testUtils.styles.fonts.comicSansUdB16;\n      ws.getCell('C1').value = '1.3';\n      ws.getCell('C1').fill = testUtils.styles.fills.redDarkVertical;\n      ws.getRow(1).numFmt = testUtils.styles.numFmts.numFmt1;\n      ws.getCell('A2').value = '2.1';\n      ws.getCell('A2').alignment = testUtils.styles.namedAlignments.topLeft;\n      ws.getCell('B2').value = '2.2';\n      ws.getCell('B2').alignment = testUtils.styles.namedAlignments.middleCentre;\n      ws.getCell('C2').value = '2.3';\n      ws.getCell('C2').alignment = testUtils.styles.namedAlignments.bottomRight;\n      ws.getRow(2).numFmt = testUtils.styles.numFmts.numFmt2;\n      ws.getCell('A3').value = '3.1';\n      ws.getCell('A3').fill = testUtils.styles.fills.redGreenDarkTrellis;\n      ws.getCell('B3').value = '3.2';\n      ws.getCell('B3').fill = testUtils.styles.fills.blueWhiteHGrad;\n      ws.getCell('C3').value = '3.3';\n      ws.getCell('C3').fill = testUtils.styles.fills.rgbPathGrad;\n      ws.getRow(3).font = testUtils.styles.fonts.broadwayRedOutline20;\n      ws.duplicateRow(1, 1, false);\n      expect(ws.getRow(1).values).to.deep.equal([, '1.1', '1.2', '1.3']);\n      expect(ws.getRow(2).values).to.deep.equal([, '1.1', '1.2', '1.3']);\n      expect(ws.getRow(3).values).to.deep.equal([, '3.1', '3.2', '3.3']);\n      for (let i = 1; i <= 2; i++) {\n        expect(ws.getCell(`A${i}`).font).to.deep.equal(testUtils.styles.fonts.arialBlackUI14);\n        expect(ws.getCell(`A${i}`).alignment).to.be.undefined();\n        expect(ws.getCell(`B${i}`).font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n        expect(ws.getCell(`B${i}`).alignment).to.undefined();\n        expect(ws.getCell(`C${i}`).fill).to.deep.equal(testUtils.styles.fills.redDarkVertical);\n        expect(ws.getCell(`C${i}`).alignment).to.undefined();\n      }\n      expect(ws.getRow(1).numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getRow(2).numFmt).to.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getRow(3).numFmt).to.be.undefined();\n      expect(ws.getRow(3).font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n    });","file":"unit/doc/workbook.spec.js","skipped":false,"dir":"spec"},{"name":"creates a table","suites":["Worksheet","Table"],"updatePoint":{"line":70,"column":23,"index":2124},"line":70,"code":"    it('creates a table', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      addTable('A1', ws);\n      checkTable('A1', ws, values);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"removes header","suites":["Worksheet","Table"],"updatePoint":{"line":76,"column":22,"index":2309},"line":76,"code":"    it('removes header', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      table.headerRow = false;\n      table.commit();\n      const newValues = spliceArray(values, 0, 1);\n      checkTable('A1', ws, newValues);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"removes totals","suites":["Worksheet","Table"],"updatePoint":{"line":85,"column":22,"index":2615},"line":85,"code":"    it('removes totals', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      table.totalsRow = false;\n      table.commit();\n      const newValues = spliceArray(values, 5, 1);\n      checkTable('A1', ws, newValues);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"moves the table","suites":["Worksheet","Table"],"updatePoint":{"line":94,"column":23,"index":2922},"line":94,"code":"    it('moves the table', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      table.ref = 'C2';\n      table.commit();\n      checkTable('C2', ws, values);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"removes a row","suites":["Worksheet","Table"],"updatePoint":{"line":102,"column":21,"index":3166},"line":102,"code":"    it('removes a row', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      table.removeRows(1);\n      table.commit();\n      const newValues = spliceArray(values, 2, 1);\n      checkTable('A1', ws, newValues);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"adds a row","suites":["Worksheet","Table"],"updatePoint":{"line":111,"column":18,"index":3464},"line":111,"code":"    it('adds a row', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      table.addRow([new Date('2019-08-05'), 5, 'Bird']);\n      table.commit();\n      const newValues = spliceArray(values, 5, 0, [new Date('2019-08-05'), 5, 'Bird']);\n      checkTable('A1', ws, newValues);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"removes a column","suites":["Worksheet","Table"],"updatePoint":{"line":120,"column":24,"index":3835},"line":120,"code":"    it('removes a column', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      table.removeColumns(1);\n      table.commit();\n      const newValues = values.map(rVals => spliceArray(rVals, 1, 1));\n      checkTable('A1', ws, newValues);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"adds a column","suites":["Worksheet","Table"],"updatePoint":{"line":129,"column":21,"index":4159},"line":129,"code":"    it('adds a column', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      table.addColumn({\n        name: 'Letter',\n        totalsRowFunction: 'custom',\n        totalsRowFormula: 'ROW()',\n        totalsRowResult: 6,\n        filterButton: true\n      }, ['a', 'b', 'c', 'd'], 2);\n      table.commit();\n      const colValues = ['Letter', 'a', 'b', 'c', 'd', {\n        formula: 'ROW()',\n        result: 6\n      }];\n      const newValues = values.map((rVals, i) => spliceArray(rVals, 2, 0, colValues[i]));\n      checkTable('A1', ws, newValues);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"renames a column","suites":["Worksheet","Table"],"updatePoint":{"line":148,"column":24,"index":4796},"line":148,"code":"    it('renames a column', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const table = addTable('A1', ws);\n      const column = table.getColumn(1);\n      column.name = 'Code';\n      table.commit();\n      const newValues = [...values];\n      newValues.splice(0, 1, ['Date', 'Code', 'Word']);\n      newValues.splice(5, 1, ['Totals', {\n        formula: 'SUBTOTAL(104,TestTable[Code])',\n        result: 4\n      }, null]);\n      checkTable('A1', ws, newValues);\n    });","file":"unit/doc/worksheet-table.spec.js","skipped":false,"dir":"spec"},{"name":"generates valid xml even when there is no data","suites":["Workbook Writer"],"updatePoint":{"line":4,"column":52,"index":203},"line":4,"code":"  it('generates valid xml even when there is no data', () =>\n  // issue: https://github.com/guyonroche/exceljs/issues/99\n  // PR: https://github.com/guyonroche/exceljs/pull/255\n  new Promise((resolve, reject) => {\n    const mockWorkbook = {\n      _openStream() {\n        return this.stream;\n      },\n      stream: new StreamBuf()\n    };\n    mockWorkbook.stream.on('finish', () => {\n      try {\n        const xml = mockWorkbook.stream.read().toString();\n        expect(xml).xml.to.be.valid();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n    const writer = new WorksheetWriter({\n      id: 1,\n      workbook: mockWorkbook\n    });\n    writer.commit();\n  }));","file":"unit/doc/worksheet-writer.spec.js","skipped":false,"dir":"spec"},{"name":"references the same top-left value","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":6,"column":42,"index":232},"line":6,"code":"    it('references the same top-left value', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // initial values\n      ws.getCell('A1').value = 'A1';\n      ws.getCell('B1').value = 'B1';\n      ws.getCell('A2').value = 'A2';\n      ws.getCell('B2').value = 'B2';\n      ws.mergeCells('A1:B2');\n      expect(ws.getCell('A1').value).to.equal('A1');\n      expect(ws.getCell('B1').value).to.equal('A1');\n      expect(ws.getCell('A2').value).to.equal('A1');\n      expect(ws.getCell('B2').value).to.equal('A1');\n      expect(ws.getCell('A1').type).to.equal(Excel.ValueType.String);\n      expect(ws.getCell('B1').type).to.equal(Excel.ValueType.Merge);\n      expect(ws.getCell('A2').type).to.equal(Excel.ValueType.Merge);\n      expect(ws.getCell('B2').type).to.equal(Excel.ValueType.Merge);\n    });","file":"unit/doc/worksheet.merge.spec.js","skipped":false,"dir":"spec"},{"name":"does not allow overlapping merges","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":25,"column":41,"index":1066},"line":25,"code":"    it('does not allow overlapping merges', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.mergeCells('B2:C3');\n\n      // intersect four corners\n      expect(() => {\n        ws.mergeCells('A1:B2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C1:D2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C3:D4');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('A3:B4');\n      }).to.throw(Error);\n\n      // enclosing\n      expect(() => {\n        ws.mergeCells('A1:D4');\n      }).to.throw(Error);\n    });","file":"unit/doc/worksheet.merge.spec.js","skipped":false,"dir":"spec"},{"name":"merges and unmerges","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":49,"column":27,"index":1672},"line":49,"code":"    it('merges and unmerges', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const expectMaster = function (range, master) {\n        const d = new Dimensions(range);\n        for (let i = d.top; i <= d.bottom; i++) {\n          for (let j = d.left; j <= d.right; j++) {\n            const cell = ws.getCell(i, j);\n            const masterCell = master ? ws.getCell(master) : cell;\n            expect(cell.master.address).to.equal(masterCell.address);\n          }\n        }\n      };\n\n      // merge some cells, then unmerge them\n      ws.mergeCells('A1:B2');\n      expectMaster('A1:B2', 'A1');\n      ws.unMergeCells('A1:B2');\n      expectMaster('A1:B2', null);\n\n      // unmerge just one cell\n      ws.mergeCells('A1:B2');\n      expectMaster('A1:B2', 'A1');\n      ws.unMergeCells('A1');\n      expectMaster('A1:B2', null);\n      ws.mergeCells('A1:B2');\n      expectMaster('A1:B2', 'A1');\n      ws.unMergeCells('B2');\n      expectMaster('A1:B2', null);\n\n      // build 4 merge-squares\n      ws.mergeCells('A1:B2');\n      ws.mergeCells('D1:E2');\n      ws.mergeCells('A4:B5');\n      ws.mergeCells('D4:E5');\n      expectMaster('A1:B2', 'A1');\n      expectMaster('D1:E2', 'D1');\n      expectMaster('A4:B5', 'A4');\n      expectMaster('D4:E5', 'D4');\n\n      // unmerge the middle\n      ws.unMergeCells('B2:D4');\n      expectMaster('A1:B2', null);\n      expectMaster('D1:E2', null);\n      expectMaster('A4:B5', null);\n      expectMaster('D4:E5', null);\n    });","file":"unit/doc/worksheet.merge.spec.js","skipped":false,"dir":"spec"},{"name":"does not allow overlapping merges","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":96,"column":41,"index":3183},"line":96,"code":"    it('does not allow overlapping merges', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.mergeCells('B2:C3');\n\n      // intersect four corners\n      expect(() => {\n        ws.mergeCells('A1:B2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C1:D2');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('C3:D4');\n      }).to.throw(Error);\n      expect(() => {\n        ws.mergeCells('A3:B4');\n      }).to.throw(Error);\n\n      // enclosing\n      expect(() => {\n        ws.mergeCells('A1:D4');\n      }).to.throw(Error);\n    });","file":"unit/doc/worksheet.merge.spec.js","skipped":false,"dir":"spec"},{"name":"merges styles","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":120,"column":21,"index":3783},"line":120,"code":"    it('merges styles', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // initial value\n      const B2 = ws.getCell('B2');\n      B2.value = 5;\n      B2.style.font = testUtils.styles.fonts.broadwayRedOutline20;\n      B2.style.border = testUtils.styles.borders.doubleRed;\n      B2.style.fill = testUtils.styles.fills.blueWhiteHGrad;\n      B2.style.alignment = testUtils.styles.namedAlignments.middleCentre;\n      B2.style.numFmt = testUtils.styles.numFmts.numFmt1;\n\n      // expecting styles to be copied (see worksheet spec)\n      ws.mergeCells('B2:C3');\n      expect(ws.getCell('B2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('B2').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n      expect(ws.getCell('B2').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('B2').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('B2').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getCell('B3').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('B3').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n      expect(ws.getCell('B3').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('B3').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('B3').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getCell('C2').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('C2').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n      expect(ws.getCell('C2').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('C2').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C2').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt1);\n      expect(ws.getCell('C3').font).to.deep.equal(testUtils.styles.fonts.broadwayRedOutline20);\n      expect(ws.getCell('C3').border).to.deep.equal(testUtils.styles.borders.doubleRed);\n      expect(ws.getCell('C3').fill).to.deep.equal(testUtils.styles.fills.blueWhiteHGrad);\n      expect(ws.getCell('C3').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C3').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt1);\n    });","file":"unit/doc/worksheet.merge.spec.js","skipped":false,"dir":"spec"},{"name":"preserves merges after row inserts","suites":["Worksheet","Merge Cells"],"updatePoint":{"line":156,"column":42,"index":6276},"line":156,"code":"    it('preserves merges after row inserts', function () {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('testMergeAfterInsert');\n      ws.addRow([1, 2]);\n      ws.addRow([3, 4]);\n      ws.mergeCells('A1:B2');\n      ws.insertRow(1, ['Inserted Row Text']);\n      const r2 = ws.getRow(2);\n      const r3 = ws.getRow(3);\n      const cellVals = [];\n      for (const r of [r2, r3]) {\n        for (const cell of r._cells) {\n          cellVals.push(cell._value);\n        }\n      }\n      let nNumberVals = 0;\n      let nMergeVals = 0;\n      for (const cellVal of cellVals) {\n        const {\n          name\n        } = cellVal.constructor;\n        if (name === 'NumberValue') nNumberVals += 1;\n        if (name === 'MergeValue' && cellVal.model.master === 'A2') {\n          nMergeVals += 1;\n        }\n      }\n      expect(nNumberVals).to.deep.equal(1);\n      expect(nMergeVals).to.deep.equal(3);\n    });","file":"unit/doc/worksheet.merge.spec.js","skipped":false,"dir":"spec"},{"name":"adds multiple row breaks","suites":["Worksheet","Page Breaks"],"updatePoint":{"line":4,"column":32,"index":132},"line":4,"code":"    it('adds multiple row breaks', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // initial values\n      ws.getCell('A1').value = 'A1';\n      ws.getCell('B1').value = 'B1';\n      ws.getCell('A2').value = 'A2';\n      ws.getCell('B2').value = 'B2';\n      ws.getCell('A3').value = 'A3';\n      ws.getCell('B3').value = 'B3';\n      let row = ws.getRow(1);\n      row.addPageBreak();\n      row = ws.getRow(2);\n      row.addPageBreak();\n      expect(ws.rowBreaks.length).to.equal(2);\n    });","file":"unit/doc/worksheet.pagebreak.spec.js","skipped":false,"dir":"spec"},{"name":"Fills formula using 2D array values","suites":["Worksheet","Shared Formulae"],"updatePoint":{"line":4,"column":43,"index":147},"line":4,"code":"    it('Fills formula using 2D array values', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.fillFormula('A1:B2', 'ROW()+COLUMN()', [[2, 3], [3, 4]]);\n      expect(ws.getCell('A1').value).to.deep.equal({\n        formula: 'ROW()+COLUMN()',\n        shareType: 'shared',\n        ref: 'A1:B2',\n        result: 2\n      });\n      expect(ws.getCell('B1').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('A2').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('B2').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 4\n      });\n    });","file":"unit/doc/worksheet.shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"Translates formulae to slave cells","suites":["Worksheet","Shared Formulae"],"updatePoint":{"line":27,"column":42,"index":847},"line":27,"code":"    it('Translates formulae to slave cells', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.getCell('A1').value = 1;\n      ws.getCell('B1').value = 2;\n      ws.fillFormula('A2:B3', 'A1', [[1, 2], [1, 2]]);\n      expect(ws.getCell('A2').value).to.deep.equal({\n        formula: 'A1',\n        shareType: 'shared',\n        ref: 'A2:B3',\n        result: 1\n      });\n      expect(ws.getCell('B2').value).to.deep.equal({\n        sharedFormula: 'A2',\n        result: 2\n      });\n      expect(ws.getCell('B2').formula).to.equal('B1');\n      expect(ws.getCell('A3').value).to.deep.equal({\n        sharedFormula: 'A2',\n        result: 1\n      });\n      expect(ws.getCell('A3').formula).to.equal('A2');\n      expect(ws.getCell('B3').value).to.deep.equal({\n        sharedFormula: 'A2',\n        result: 2\n      });\n      expect(ws.getCell('B3').formula).to.equal('B2');\n    });","file":"unit/doc/worksheet.shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"Fills formula down using 1D array values","suites":["Worksheet","Shared Formulae"],"updatePoint":{"line":55,"column":48,"index":1762},"line":55,"code":"    it('Fills formula down using 1D array values', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.fillFormula('A1:A4', 'ROW()+COLUMN()', [2, 3, 4, 5]);\n      expect(ws.getCell('A1').value).to.deep.equal({\n        formula: 'ROW()+COLUMN()',\n        shareType: 'shared',\n        ref: 'A1:A4',\n        result: 2\n      });\n      expect(ws.getCell('A2').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('A3').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 4\n      });\n      expect(ws.getCell('A4').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 5\n      });\n    });","file":"unit/doc/worksheet.shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"Fills formula across using 1D array values","suites":["Worksheet","Shared Formulae"],"updatePoint":{"line":78,"column":50,"index":2466},"line":78,"code":"    it('Fills formula across using 1D array values', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.fillFormula('A1:D1', 'ROW()+COLUMN()', [2, 3, 4, 5]);\n      expect(ws.getCell('A1').value).to.deep.equal({\n        formula: 'ROW()+COLUMN()',\n        shareType: 'shared',\n        ref: 'A1:D1',\n        result: 2\n      });\n      expect(ws.getCell('B1').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('C1').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 4\n      });\n      expect(ws.getCell('D1').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 5\n      });\n    });","file":"unit/doc/worksheet.shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"Fills formula down and across using 1D array values","suites":["Worksheet","Shared Formulae"],"updatePoint":{"line":101,"column":59,"index":3179},"line":101,"code":"    it('Fills formula down and across using 1D array values', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.fillFormula('A1:B2', 'ROW()+COLUMN()', [2, 3, 3, 4]);\n      expect(ws.getCell('A1').value).to.deep.equal({\n        formula: 'ROW()+COLUMN()',\n        shareType: 'shared',\n        ref: 'A1:B2',\n        result: 2\n      });\n      expect(ws.getCell('B1').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('A2').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('B2').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 4\n      });\n    });","file":"unit/doc/worksheet.shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"Fills formula using function","suites":["Worksheet","Shared Formulae"],"updatePoint":{"line":124,"column":36,"index":3869},"line":124,"code":"    it('Fills formula using function', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.fillFormula('A1:B2', 'ROW()+COLUMN()', (r, c) => r + c);\n      expect(ws.getCell('A1').value).to.deep.equal({\n        formula: 'ROW()+COLUMN()',\n        shareType: 'shared',\n        ref: 'A1:B2',\n        result: 2\n      });\n      expect(ws.getCell('B1').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('A2').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 3\n      });\n      expect(ws.getCell('B2').value).to.deep.equal({\n        sharedFormula: 'A1',\n        result: 4\n      });\n    });","file":"unit/doc/worksheet.shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"sets row styles","suites":["Worksheet","Styles"],"updatePoint":{"line":5,"column":23,"index":166},"line":5,"code":"    it('sets row styles', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('basket');\n      ws.getCell('A1').value = 5;\n      ws.getCell('A1').numFmt = testUtils.styles.numFmts.numFmt1;\n      ws.getCell('A1').font = testUtils.styles.fonts.arialBlackUI14;\n      ws.getCell('C1').value = 'Hello, World!';\n      ws.getCell('C1').alignment = testUtils.styles.namedAlignments.bottomRight;\n      ws.getCell('C1').border = testUtils.styles.borders.doubleRed;\n      ws.getCell('C1').fill = testUtils.styles.fills.redDarkVertical;\n      ws.getRow(1).numFmt = testUtils.styles.numFmts.numFmt2;\n      ws.getRow(1).font = testUtils.styles.fonts.comicSansUdB16;\n      ws.getRow(1).alignment = testUtils.styles.namedAlignments.middleCentre;\n      ws.getRow(1).border = testUtils.styles.borders.thin;\n      ws.getRow(1).fill = testUtils.styles.fills.redGreenDarkTrellis;\n      expect(ws.getCell('A1').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n      expect(ws.findCell('B1')).to.be.undefined();\n      expect(ws.getCell('C1').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('C1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('C1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('C1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('C1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n\n      // when we 'get' the previously null cell, it should inherit the row styles\n      expect(ws.getCell('B1').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('B1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('B1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('B1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('B1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n    });","file":"unit/doc/worksheet.styles.spec.js","skipped":false,"dir":"spec"},{"name":"sets col styles","suites":["Worksheet","Styles"],"updatePoint":{"line":39,"column":23,"index":2572},"line":39,"code":"    it('sets col styles', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('basket');\n      ws.getCell('A1').value = 5;\n      ws.getCell('A1').numFmt = testUtils.styles.numFmts.numFmt1;\n      ws.getCell('A1').font = testUtils.styles.fonts.arialBlackUI14;\n      ws.getCell('A3').value = 'Hello, World!';\n      ws.getCell('A3').alignment = testUtils.styles.namedAlignments.bottomRight;\n      ws.getCell('A3').border = testUtils.styles.borders.doubleRed;\n      ws.getCell('A3').fill = testUtils.styles.fills.redDarkVertical;\n      ws.getColumn('A').numFmt = testUtils.styles.numFmts.numFmt2;\n      ws.getColumn('A').font = testUtils.styles.fonts.comicSansUdB16;\n      ws.getColumn('A').alignment = testUtils.styles.namedAlignments.middleCentre;\n      ws.getColumn('A').border = testUtils.styles.borders.thin;\n      ws.getColumn('A').fill = testUtils.styles.fills.redGreenDarkTrellis;\n      expect(ws.getCell('A1').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A1').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A1').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A1').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A1').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n      expect(ws.findRow(2)).to.be.undefined();\n      expect(ws.getCell('A3').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A3').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A3').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A3').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A3').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n\n      // when we 'get' the previously null cell, it should inherit the column styles\n      expect(ws.getCell('A2').numFmt).to.deep.equal(testUtils.styles.numFmts.numFmt2);\n      expect(ws.getCell('A2').font).to.deep.equal(testUtils.styles.fonts.comicSansUdB16);\n      expect(ws.getCell('A2').alignment).to.deep.equal(testUtils.styles.namedAlignments.middleCentre);\n      expect(ws.getCell('A2').border).to.deep.equal(testUtils.styles.borders.thin);\n      expect(ws.getCell('A2').fill).to.deep.equal(testUtils.styles.fills.redGreenDarkTrellis);\n    });","file":"unit/doc/worksheet.styles.spec.js","skipped":false,"dir":"spec"},{"name":"stores values properly","suites":["Worksheet","Values"],"updatePoint":{"line":6,"column":30,"index":213},"line":6,"code":"    it('stores values properly', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const now = new Date();\n\n      // plain number\n      ws.getCell('A1').value = 7;\n\n      // simple string\n      ws.getCell('B1').value = 'Hello, World!';\n\n      // floating point\n      ws.getCell('C1').value = 3.14;\n\n      // 5 will be overwritten by the current date-time\n      ws.getCell('D1').value = 5;\n      ws.getCell('D1').value = now;\n\n      // constructed string - will share recorded with B1\n      ws.getCell('E1').value = `${['Hello', 'World'].join(', ')}!`;\n\n      // hyperlink\n      ws.getCell('F1').value = {\n        text: 'www.google.com',\n        hyperlink: 'http://www.google.com'\n      };\n\n      // number formula\n      ws.getCell('A2').value = {\n        formula: 'A1',\n        result: 7\n      };\n\n      // string formula\n      ws.getCell('B2').value = {\n        formula: 'CONCATENATE(\"Hello\", \", \", \"World!\")',\n        result: 'Hello, World!'\n      };\n\n      // date formula\n      ws.getCell('C2').value = {\n        formula: 'D1',\n        result: now\n      };\n      expect(ws.getCell('A1').value).to.equal(7);\n      expect(ws.getCell('B1').value).to.equal('Hello, World!');\n      expect(ws.getCell('C1').value).to.equal(3.14);\n      expect(ws.getCell('D1').value).to.equal(now);\n      expect(ws.getCell('E1').value).to.equal('Hello, World!');\n      expect(ws.getCell('F1').value.text).to.equal('www.google.com');\n      expect(ws.getCell('F1').value.hyperlink).to.equal('http://www.google.com');\n      expect(ws.getCell('A2').value.formula).to.equal('A1');\n      expect(ws.getCell('A2').value.result).to.equal(7);\n      expect(ws.getCell('B2').value.formula).to.equal('CONCATENATE(\"Hello\", \", \", \"World!\")');\n      expect(ws.getCell('B2').value.result).to.equal('Hello, World!');\n      expect(ws.getCell('C2').value.formula).to.equal('D1');\n      expect(ws.getCell('C2').value.result).to.equal(now);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"stores shared string values properly","suites":["Worksheet","Values"],"updatePoint":{"line":64,"column":44,"index":2181},"line":64,"code":"    it('stores shared string values properly', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 'Hello, World!';\n      ws.getCell('A2').value = 'Hello';\n      ws.getCell('B2').value = 'World';\n      ws.getCell('C2').value = {\n        formula: 'CONCATENATE(A2, \", \", B2, \"!\")',\n        result: 'Hello, World!'\n      };\n      ws.getCell('A3').value = `${['Hello', 'World'].join(', ')}!`;\n\n      // A1 and A3 should reference the same string object\n      expect(ws.getCell('A1').value).to.equal(ws.getCell('A3').value);\n\n      // A1 and C2 should not reference the same object\n      expect(ws.getCell('A1').value).to.equal(ws.getCell('C2').value.result);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"assigns cell types properly","suites":["Worksheet","Values"],"updatePoint":{"line":82,"column":35,"index":2904},"line":82,"code":"    it('assigns cell types properly', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // plain number\n      ws.getCell('A1').value = 7;\n\n      // simple string\n      ws.getCell('B1').value = 'Hello, World!';\n\n      // floating point\n      ws.getCell('C1').value = 3.14;\n\n      // date-time\n      ws.getCell('D1').value = new Date();\n\n      // hyperlink\n      ws.getCell('E1').value = {\n        text: 'www.google.com',\n        hyperlink: 'http://www.google.com'\n      };\n\n      // number formula\n      ws.getCell('A2').value = {\n        formula: 'A1',\n        result: 7\n      };\n\n      // string formula\n      ws.getCell('B2').value = {\n        formula: 'CONCATENATE(\"Hello\", \", \", \"World!\")',\n        result: 'Hello, World!'\n      };\n\n      // date formula\n      ws.getCell('C2').value = {\n        formula: 'D1',\n        result: new Date()\n      };\n      expect(ws.getCell('A1').type).to.equal(Excel.ValueType.Number);\n      expect(ws.getCell('B1').type).to.equal(Excel.ValueType.String);\n      expect(ws.getCell('C1').type).to.equal(Excel.ValueType.Number);\n      expect(ws.getCell('D1').type).to.equal(Excel.ValueType.Date);\n      expect(ws.getCell('E1').type).to.equal(Excel.ValueType.Hyperlink);\n      expect(ws.getCell('A2').type).to.equal(Excel.ValueType.Formula);\n      expect(ws.getCell('B2').type).to.equal(Excel.ValueType.Formula);\n      expect(ws.getCell('C2').type).to.equal(Excel.ValueType.Formula);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adds columns","suites":["Worksheet","Values"],"updatePoint":{"line":130,"column":20,"index":4359},"line":130,"code":"    it('adds columns', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.columns = [{\n        key: 'id',\n        width: 10\n      }, {\n        key: 'name',\n        width: 32\n      }, {\n        key: 'dob',\n        width: 10\n      }];\n      expect(ws.getColumn('id').number).to.equal(1);\n      expect(ws.getColumn('id').width).to.equal(10);\n      expect(ws.getColumn('A')).to.equal(ws.getColumn('id'));\n      expect(ws.getColumn(1)).to.equal(ws.getColumn('id'));\n      expect(ws.getColumn('name').number).to.equal(2);\n      expect(ws.getColumn('name').width).to.equal(32);\n      expect(ws.getColumn('B')).to.equal(ws.getColumn('name'));\n      expect(ws.getColumn(2)).to.equal(ws.getColumn('name'));\n      expect(ws.getColumn('dob').number).to.equal(3);\n      expect(ws.getColumn('dob').width).to.equal(10);\n      expect(ws.getColumn('C')).to.equal(ws.getColumn('dob'));\n      expect(ws.getColumn(3)).to.equal(ws.getColumn('dob'));\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers","suites":["Worksheet","Values"],"updatePoint":{"line":156,"column":27,"index":5351},"line":156,"code":"    it('adds column headers', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.columns = [{\n        header: 'Id',\n        width: 10\n      }, {\n        header: 'Name',\n        width: 32\n      }, {\n        header: 'D.O.B.',\n        width: 10\n      }];\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getCell('C1').value).to.equal('D.O.B.');\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers by number","suites":["Worksheet","Values"],"updatePoint":{"line":173,"column":37,"index":5834},"line":173,"code":"    it('adds column headers by number', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // by defn\n      ws.getColumn(1).defn = {\n        key: 'id',\n        header: 'Id',\n        width: 10\n      };\n\n      // by property\n      ws.getColumn(2).key = 'name';\n      ws.getColumn(2).header = 'Name';\n      ws.getColumn(2).width = 32;\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getColumn('A').key).to.equal('id');\n      expect(ws.getColumn(1).key).to.equal('id');\n      expect(ws.getColumn(1).header).to.equal('Id');\n      expect(ws.getColumn(1).headers).to.deep.equal(['Id']);\n      expect(ws.getColumn(1).width).to.equal(10);\n      expect(ws.getColumn(2).key).to.equal('name');\n      expect(ws.getColumn(2).header).to.equal('Name');\n      expect(ws.getColumn(2).headers).to.deep.equal(['Name']);\n      expect(ws.getColumn(2).width).to.equal(32);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adds column headers by letter","suites":["Worksheet","Values"],"updatePoint":{"line":200,"column":37,"index":6814},"line":200,"code":"    it('adds column headers by letter', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // by defn\n      ws.getColumn('A').defn = {\n        key: 'id',\n        header: 'Id',\n        width: 10\n      };\n\n      // by property\n      ws.getColumn('B').key = 'name';\n      ws.getColumn('B').header = 'Name';\n      ws.getColumn('B').width = 32;\n      expect(ws.getCell('A1').value).to.equal('Id');\n      expect(ws.getCell('B1').value).to.equal('Name');\n      expect(ws.getColumn('A').key).to.equal('id');\n      expect(ws.getColumn(1).key).to.equal('id');\n      expect(ws.getColumn('A').header).to.equal('Id');\n      expect(ws.getColumn('A').headers).to.deep.equal(['Id']);\n      expect(ws.getColumn('A').width).to.equal(10);\n      expect(ws.getColumn('B').key).to.equal('name');\n      expect(ws.getColumn('B').header).to.equal('Name');\n      expect(ws.getColumn('B').headers).to.deep.equal(['Name']);\n      expect(ws.getColumn('B').width).to.equal(32);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by object","suites":["Worksheet","Values"],"updatePoint":{"line":227,"column":27,"index":7806},"line":227,"code":"    it('adds rows by object', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n\n      // add columns to define column keys\n      ws.columns = [{\n        header: 'Id',\n        key: 'id',\n        width: 10\n      }, {\n        header: 'Name',\n        key: 'name',\n        width: 32\n      }, {\n        header: 'D.O.B.',\n        key: 'dob',\n        width: 10\n      }];\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow({\n        id: 1,\n        name: 'John Doe',\n        dob: dateValue1\n      });\n      ws.addRow({\n        id: 2,\n        name: 'Jane Doe',\n        dob: dateValue2\n      });\n      expect(ws.getCell('A2').value).to.equal(1);\n      expect(ws.getCell('B2').value).to.equal('John Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue1);\n      expect(ws.getCell('A3').value).to.equal(2);\n      expect(ws.getCell('B3').value).to.equal('Jane Doe');\n      expect(ws.getCell('C3').value).to.equal(dateValue2);\n      expect(ws.getRow(2).values).to.deep.equal([, 1, 'John Doe', dateValue1]);\n      expect(ws.getRow(3).values).to.deep.equal([, 2, 'Jane Doe', dateValue2]);\n      const values = [, [, 'Id', 'Name', 'D.O.B.'], [, 1, 'John Doe', dateValue1], [, 2, 'Jane Doe', dateValue2]];\n      ws.eachRow((row, rowNumber) => {\n        expect(row.values).to.deep.equal(values[rowNumber]);\n        row.eachCell((cell, colNumber) => {\n          expect(cell.value).to.equal(values[rowNumber][colNumber]);\n        });\n      });\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by contiguous array","suites":["Worksheet","Values"],"updatePoint":{"line":273,"column":37,"index":9354},"line":273,"code":"    it('adds rows by contiguous array', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      ws.addRow([1, 'John Doe', dateValue1]);\n      ws.addRow([2, 'Jane Doe', dateValue2]);\n      expect(ws.getCell('A1').value).to.equal(1);\n      expect(ws.getCell('B1').value).to.equal('John Doe');\n      expect(ws.getCell('C1').value).to.equal(dateValue1);\n      expect(ws.getCell('A2').value).to.equal(2);\n      expect(ws.getCell('B2').value).to.equal('Jane Doe');\n      expect(ws.getCell('C2').value).to.equal(dateValue2);\n      expect(ws.getRow(1).values).to.deep.equal([, 1, 'John Doe', dateValue1]);\n      expect(ws.getRow(2).values).to.deep.equal([, 2, 'Jane Doe', dateValue2]);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adds rows by sparse array","suites":["Worksheet","Values"],"updatePoint":{"line":289,"column":33,"index":10170},"line":289,"code":"    it('adds rows by sparse array', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      const dateValue1 = new Date(1970, 1, 1);\n      const dateValue2 = new Date(1965, 1, 7);\n      const rows = [, [, 1, 'John Doe',, dateValue1], [, 2, 'Jane Doe',, dateValue2]];\n      const row3 = [];\n      row3[1] = 3;\n      row3[3] = 'Sam';\n      row3[5] = dateValue1;\n      rows.push(row3);\n      rows.forEach(row => {\n        if (row) {\n          ws.addRow(row);\n        }\n      });\n      expect(ws.getCell('A1').value).to.equal(1);\n      expect(ws.getCell('B1').value).to.equal('John Doe');\n      expect(ws.getCell('D1').value).to.equal(dateValue1);\n      expect(ws.getCell('A2').value).to.equal(2);\n      expect(ws.getCell('B2').value).to.equal('Jane Doe');\n      expect(ws.getCell('D2').value).to.equal(dateValue2);\n      expect(ws.getCell('A3').value).to.equal(3);\n      expect(ws.getCell('C3').value).to.equal('Sam');\n      expect(ws.getCell('E3').value).to.equal(dateValue1);\n      expect(ws.getRow(1).values).to.deep.equal(rows[1]);\n      expect(ws.getRow(2).values).to.deep.equal(rows[2]);\n      expect(ws.getRow(3).values).to.deep.equal(rows[3]);\n      ws.eachRow((row, rowNumber) => {\n        expect(row.values).to.deep.equal(rows[rowNumber]);\n        row.eachCell((cell, colNumber) => {\n          expect(cell.value).to.equal(rows[rowNumber][colNumber]);\n        });\n      });\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove only","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":331,"column":23,"index":11781},"line":331,"code":"        it('Remove only', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.removeOnly'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.removeOnly'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove and insert fewer","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":336,"column":35,"index":12051},"line":336,"code":"        it('Remove and insert fewer', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.insertFewer'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.insertFewer'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove and insert same","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":341,"column":34,"index":12322},"line":341,"code":"        it('Remove and insert same', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.insertSame'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.insertSame'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove and insert more","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":346,"column":34,"index":12591},"line":346,"code":"        it('Remove and insert more', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.insertMore'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.insertMore'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove style","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":351,"column":24,"index":12850},"line":351,"code":"        it('Remove style', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.removeStyle'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.removeStyle'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Insert style","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":356,"column":24,"index":13111},"line":356,"code":"        it('Insert style', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.insertStyle'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.insertStyle'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Replace style","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":361,"column":25,"index":13373},"line":361,"code":"        it('Replace style', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.replaceStyle'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.replaceStyle'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove defined names","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":366,"column":32,"index":13644},"line":366,"code":"        it('Remove defined names', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.removeDefinedNames'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.removeDefinedNames'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Insert defined names","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":371,"column":32,"index":13927},"line":371,"code":"        it('Insert defined names', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.insertDefinedNames'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.insertDefinedNames'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Replace defined names","suites":["Worksheet","Values","Splice","Rows"],"updatePoint":{"line":376,"column":33,"index":14211},"line":376,"code":"        it('Replace defined names', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.rows.replaceDefinedNames'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.rows.replaceDefinedNames'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"splices columns","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":383,"column":27,"index":14535},"line":383,"code":"        it('splices columns', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.removeOnly'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.removeOnly'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove and insert fewer","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":388,"column":35,"index":14811},"line":388,"code":"        it('Remove and insert fewer', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.insertFewer'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.insertFewer'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove and insert same","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":393,"column":34,"index":15088},"line":393,"code":"        it('Remove and insert same', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.insertSame'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.insertSame'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove and insert more","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":398,"column":34,"index":15363},"line":398,"code":"        it('Remove and insert more', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.insertMore'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.insertMore'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"handles column keys","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":403,"column":31,"index":15635},"line":403,"code":"        it('handles column keys', () => {\n          const wb = new Excel.Workbook();\n          const ws = wb.addWorksheet('splice-column-insert-fewer');\n          ws.columns = [{\n            key: 'id',\n            width: 10\n          }, {\n            key: 'dob',\n            width: 20\n          }, {\n            key: 'name',\n            width: 30\n          }, {\n            key: 'age',\n            width: 40\n          }];\n          const values = [{\n            id: '123',\n            name: 'Jack',\n            dob: new Date(),\n            age: 0\n          }, {\n            id: '124',\n            name: 'Jill',\n            dob: new Date(),\n            age: 0\n          }];\n          values.forEach(value => {\n            ws.addRow(value);\n          });\n          ws.spliceColumns(2, 1, ['B1', 'B2'], ['C1', 'C2']);\n          values.forEach((rowValues, index) => {\n            const row = ws.getRow(index + 1);\n            _.each(rowValues, (value, key) => {\n              if (key !== 'dob') {\n                expect(row.getCell(key).value).to.equal(value);\n              }\n            });\n          });\n          expect(ws.getColumn(1).width).to.equal(10);\n          expect(ws.getColumn(2).width).to.be.undefined();\n          expect(ws.getColumn(3).width).to.be.undefined();\n          expect(ws.getColumn(4).width).to.equal(30);\n          expect(ws.getColumn(5).width).to.equal(40);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Splices to end","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":448,"column":26,"index":17025},"line":448,"code":"        it('Splices to end', () => {\n          const wb = new Excel.Workbook();\n          const ws = wb.addWorksheet('splice-to-end');\n          ws.columns = [{\n            header: 'Col-1',\n            width: 10\n          }, {\n            header: 'Col-2',\n            width: 10\n          }, {\n            header: 'Col-3',\n            width: 10\n          }, {\n            header: 'Col-4',\n            width: 10\n          }, {\n            header: 'Col-5',\n            width: 10\n          }, {\n            header: 'Col-6',\n            width: 10\n          }];\n          ws.addRow([1, 2, 3, 4, 5, 6]);\n          ws.addRow([1, 2, 3, 4, 5, 6]);\n\n          // splice last 3 columns\n          ws.spliceColumns(4, 3);\n          expect(ws.getCell(1, 1).value).to.equal('Col-1');\n          expect(ws.getCell(1, 2).value).to.equal('Col-2');\n          expect(ws.getCell(1, 3).value).to.equal('Col-3');\n          expect(ws.getCell(1, 4).value).to.be.null();\n          expect(ws.getCell(1, 5).value).to.be.null();\n          expect(ws.getCell(1, 6).value).to.be.null();\n          expect(ws.getCell(1, 7).value).to.be.null();\n          expect(ws.getCell(2, 1).value).to.equal(1);\n          expect(ws.getCell(2, 2).value).to.equal(2);\n          expect(ws.getCell(2, 3).value).to.equal(3);\n          expect(ws.getCell(2, 4).value).to.be.null();\n          expect(ws.getCell(2, 5).value).to.be.null();\n          expect(ws.getCell(2, 6).value).to.be.null();\n          expect(ws.getCell(2, 7).value).to.be.null();\n          expect(ws.getCell(3, 1).value).to.equal(1);\n          expect(ws.getCell(3, 2).value).to.equal(2);\n          expect(ws.getCell(3, 3).value).to.equal(3);\n          expect(ws.getCell(3, 4).value).to.be.null();\n          expect(ws.getCell(3, 5).value).to.be.null();\n          expect(ws.getCell(3, 6).value).to.be.null();\n          expect(ws.getCell(3, 7).value).to.be.null();\n          expect(ws.getColumn(1).header).to.equal('Col-1');\n          expect(ws.getColumn(2).header).to.equal('Col-2');\n          expect(ws.getColumn(3).header).to.equal('Col-3');\n          expect(ws.getColumn(4).header).to.be.undefined();\n          expect(ws.getColumn(5).header).to.be.undefined();\n          expect(ws.getColumn(6).header).to.be.undefined();\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Splices past end","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":503,"column":28,"index":19271},"line":503,"code":"        it('Splices past end', () => {\n          const wb = new Excel.Workbook();\n          const ws = wb.addWorksheet('splice-to-end');\n          ws.columns = [{\n            header: 'Col-1',\n            width: 10\n          }, {\n            header: 'Col-2',\n            width: 10\n          }, {\n            header: 'Col-3',\n            width: 10\n          }, {\n            header: 'Col-4',\n            width: 10\n          }, {\n            header: 'Col-5',\n            width: 10\n          }, {\n            header: 'Col-6',\n            width: 10\n          }];\n          ws.addRow([1, 2, 3, 4, 5, 6]);\n          ws.addRow([1, 2, 3, 4, 5, 6]);\n\n          // splice last 3 columns\n          ws.spliceColumns(4, 4);\n          expect(ws.getCell(1, 1).value).to.equal('Col-1');\n          expect(ws.getCell(1, 2).value).to.equal('Col-2');\n          expect(ws.getCell(1, 3).value).to.equal('Col-3');\n          expect(ws.getCell(1, 4).value).to.be.null();\n          expect(ws.getCell(1, 5).value).to.be.null();\n          expect(ws.getCell(1, 6).value).to.be.null();\n          expect(ws.getCell(1, 7).value).to.be.null();\n          expect(ws.getCell(2, 1).value).to.equal(1);\n          expect(ws.getCell(2, 2).value).to.equal(2);\n          expect(ws.getCell(2, 3).value).to.equal(3);\n          expect(ws.getCell(2, 4).value).to.be.null();\n          expect(ws.getCell(2, 5).value).to.be.null();\n          expect(ws.getCell(2, 6).value).to.be.null();\n          expect(ws.getCell(2, 7).value).to.be.null();\n          expect(ws.getCell(3, 1).value).to.equal(1);\n          expect(ws.getCell(3, 2).value).to.equal(2);\n          expect(ws.getCell(3, 3).value).to.equal(3);\n          expect(ws.getCell(3, 4).value).to.be.null();\n          expect(ws.getCell(3, 5).value).to.be.null();\n          expect(ws.getCell(3, 6).value).to.be.null();\n          expect(ws.getCell(3, 7).value).to.be.null();\n          expect(ws.getColumn(1).header).to.equal('Col-1');\n          expect(ws.getColumn(2).header).to.equal('Col-2');\n          expect(ws.getColumn(3).header).to.equal('Col-3');\n          expect(ws.getColumn(4).header).to.be.undefined();\n          expect(ws.getColumn(5).header).to.be.undefined();\n          expect(ws.getColumn(6).header).to.be.undefined();\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Splices almost to end","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":558,"column":33,"index":21522},"line":558,"code":"        it('Splices almost to end', () => {\n          const wb = new Excel.Workbook();\n          const ws = wb.addWorksheet('splice-to-end');\n          ws.columns = [{\n            header: 'Col-1',\n            width: 10\n          }, {\n            header: 'Col-2',\n            width: 10\n          }, {\n            header: 'Col-3',\n            width: 10\n          }, {\n            header: 'Col-4',\n            width: 10\n          }, {\n            header: 'Col-5',\n            width: 10\n          }, {\n            header: 'Col-6',\n            width: 10\n          }];\n          ws.addRow([1, 2, 3, 4, 5, 6]);\n          ws.addRow([1, 2, 3, 4, 5, 6]);\n\n          // splice last 3 columns\n          ws.spliceColumns(4, 2);\n          expect(ws.getCell(1, 1).value).to.equal('Col-1');\n          expect(ws.getCell(1, 2).value).to.equal('Col-2');\n          expect(ws.getCell(1, 3).value).to.equal('Col-3');\n          expect(ws.getCell(1, 4).value).to.equal('Col-6');\n          expect(ws.getCell(1, 5).value).to.be.null();\n          expect(ws.getCell(1, 6).value).to.be.null();\n          expect(ws.getCell(1, 7).value).to.be.null();\n          expect(ws.getCell(2, 1).value).to.equal(1);\n          expect(ws.getCell(2, 2).value).to.equal(2);\n          expect(ws.getCell(2, 3).value).to.equal(3);\n          expect(ws.getCell(2, 4).value).to.equal(6);\n          expect(ws.getCell(2, 5).value).to.be.null();\n          expect(ws.getCell(2, 6).value).to.be.null();\n          expect(ws.getCell(2, 7).value).to.be.null();\n          expect(ws.getCell(3, 1).value).to.equal(1);\n          expect(ws.getCell(3, 2).value).to.equal(2);\n          expect(ws.getCell(3, 3).value).to.equal(3);\n          expect(ws.getCell(3, 4).value).to.equal(6);\n          expect(ws.getCell(3, 5).value).to.be.null();\n          expect(ws.getCell(3, 6).value).to.be.null();\n          expect(ws.getCell(3, 7).value).to.be.null();\n          expect(ws.getColumn(1).header).to.equal('Col-1');\n          expect(ws.getColumn(2).header).to.equal('Col-2');\n          expect(ws.getColumn(3).header).to.equal('Col-3');\n          expect(ws.getColumn(4).header).to.equal('Col-6');\n          expect(ws.getColumn(5).header).to.be.undefined();\n          expect(ws.getColumn(6).header).to.be.undefined();\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove style","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":613,"column":24,"index":23767},"line":613,"code":"        it('Remove style', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.removeStyle'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.removeStyle'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Insert style","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":618,"column":24,"index":24034},"line":618,"code":"        it('Insert style', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.insertStyle'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.insertStyle'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Replace style","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":623,"column":25,"index":24302},"line":623,"code":"        it('Replace style', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.replaceStyle'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.replaceStyle'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Remove defined names","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":628,"column":32,"index":24579},"line":628,"code":"        it('Remove defined names', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.removeDefinedNames'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.removeDefinedNames'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Insert defined names","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":633,"column":32,"index":24868},"line":633,"code":"        it('Insert defined names', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.insertDefinedNames'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.insertDefinedNames'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"Replace defined names","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":638,"column":33,"index":25158},"line":638,"code":"        it('Replace defined names', () => {\n          const wb = new Excel.Workbook();\n          testUtils.createTestBook(wb, 'xlsx', ['splice.columns.replaceDefinedNames'], options);\n          testUtils.checkTestBook(wb, 'xlsx', ['splice.columns.replaceDefinedNames'], options);\n        });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"iterates over rows","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":645,"column":26,"index":25461},"line":645,"code":"    it('iterates over rows', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 1;\n      ws.getCell('B2').value = 2;\n      ws.getCell('D4').value = 4;\n      ws.getCell('F6').value = 6;\n      ws.eachRow((row, rowNumber) => {\n        expect(rowNumber).not.to.equal(3);\n        expect(rowNumber).not.to.equal(5);\n      });\n      let count = 1;\n      ws.eachRow({\n        includeEmpty: true\n      }, (row, rowNumber) => {\n        expect(rowNumber).to.equal(count++);\n      });\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"iterates over collumn cells","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":663,"column":35,"index":26021},"line":663,"code":"    it('iterates over collumn cells', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('blort');\n      ws.getCell('A1').value = 1;\n      ws.getCell('A2').value = 2;\n      ws.getCell('A4').value = 4;\n      ws.getCell('A6').value = 6;\n      const colA = ws.getColumn('A');\n      colA.eachCell((cell, rowNumber) => {\n        expect(rowNumber).not.to.equal(3);\n        expect(rowNumber).not.to.equal(5);\n        expect(cell.value).to.equal(rowNumber);\n      });\n      let count = 1;\n      colA.eachCell({\n        includeEmpty: true\n      }, (cell, rowNumber) => {\n        expect(rowNumber).to.equal(count++);\n      });\n      expect(count).to.equal(7);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"returns sheet values","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":684,"column":28,"index":26701},"line":684,"code":"    it('returns sheet values', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.getCell('A1').value = 11;\n      ws.getCell('C1').value = 'C1';\n      ws.getCell('A2').value = 21;\n      ws.getCell('B2').value = 'B2';\n      ws.getCell('A4').value = 'end';\n      expect(ws.getSheetValues()).to.deep.equal([\n\n        // eslint-disable-line comma-style\n      , [, 11,, 'C1'], [, 21, 'B2'],, [, 'end']]);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"calculates rowCount and actualRowCount","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":697,"column":46,"index":27168},"line":697,"code":"    it('calculates rowCount and actualRowCount', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.getCell('A1').value = 'A1';\n      ws.getCell('C1').value = 'C1';\n      ws.getCell('A3').value = 'A3';\n      ws.getCell('D3').value = 'D3';\n      ws.getCell('A4').value = null;\n      ws.getCell('B5').value = 'B5';\n      expect(ws.rowCount).to.equal(5);\n      expect(ws.actualRowCount).to.equal(3);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"calculates columnCount and actualColumnCount","suites":["Worksheet","Values","Splice","Columns"],"updatePoint":{"line":709,"column":52,"index":27620},"line":709,"code":"    it('calculates columnCount and actualColumnCount', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet();\n      ws.getCell('A1').value = 'A1';\n      ws.getCell('C1').value = 'C1';\n      ws.getCell('A3').value = 'A3';\n      ws.getCell('D3').value = 'D3';\n      ws.getCell('E4').value = null;\n      ws.getCell('F5').value = 'F5';\n      expect(ws.columnCount).to.equal(6);\n      expect(ws.actualColumnCount).to.equal(4);\n    });","file":"unit/doc/worksheet.values.spec.js","skipped":false,"dir":"spec"},{"name":"adjusts collapsed property of columns","suites":["Worksheet","Views"],"updatePoint":{"line":4,"column":45,"index":139},"line":4,"code":"    it('adjusts collapsed property of columns', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('sheet1');\n      const col1 = ws.getColumn(1);\n      const col2 = ws.getColumn(2);\n      const col3 = ws.getColumn(3);\n      expect(col1.collapsed).to.be.false();\n      expect(col2.collapsed).to.be.false();\n      expect(col3.collapsed).to.be.false();\n      col1.outlineLevel = 0;\n      col2.outlineLevel = 1;\n      col3.outlineLevel = 2;\n      expect(col1.collapsed).to.be.false();\n      expect(col2.collapsed).to.be.true();\n      expect(col3.collapsed).to.be.true();\n      ws.properties.outlineLevelCol = 2;\n      expect(col1.collapsed).to.be.false();\n      expect(col2.collapsed).to.be.false();\n      expect(col3.collapsed).to.be.true();\n      ws.properties.outlineLevelCol = 3;\n      expect(col1.collapsed).to.be.false();\n      expect(col2.collapsed).to.be.false();\n      expect(col3.collapsed).to.be.false();\n    });","file":"unit/doc/worksheet.views.spec.js","skipped":false,"dir":"spec"},{"name":"adjusts collapsed property of row","suites":["Worksheet","Views"],"updatePoint":{"line":28,"column":41,"index":1084},"line":28,"code":"    it('adjusts collapsed property of row', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('sheet1');\n      const row1 = ws.getRow(1);\n      const row2 = ws.getRow(2);\n      const row3 = ws.getRow(3);\n      expect(row1.collapsed).to.be.false();\n      expect(row2.collapsed).to.be.false();\n      expect(row3.collapsed).to.be.false();\n      row1.outlineLevel = 0;\n      row2.outlineLevel = 1;\n      row3.outlineLevel = 2;\n      expect(row1.collapsed).to.be.false();\n      expect(row2.collapsed).to.be.true();\n      expect(row3.collapsed).to.be.true();\n      ws.properties.outlineLevelRow = 2;\n      expect(row1.collapsed).to.be.false();\n      expect(row2.collapsed).to.be.false();\n      expect(row3.collapsed).to.be.true();\n      ws.properties.outlineLevelRow = 3;\n      expect(row1.collapsed).to.be.false();\n      expect(row2.collapsed).to.be.false();\n      expect(row3.collapsed).to.be.false();\n    });","file":"unit/doc/worksheet.views.spec.js","skipped":false,"dir":"spec"},{"name":"sets outline levels via column headers","suites":["Worksheet","Views"],"updatePoint":{"line":52,"column":46,"index":2025},"line":52,"code":"    it('sets outline levels via column headers', () => {\n      const wb = new Excel.Workbook();\n      const ws = wb.addWorksheet('sheet1');\n      ws.columns = [{\n        key: 'id',\n        width: 10,\n        outlineLevel: 1\n      }, {\n        key: 'name',\n        width: 32,\n        outlineLevel: 2\n      }, {\n        key: 'dob',\n        width: 10,\n        outlineLevel: 3\n      }];\n      expect(ws.getColumn(1).outlineLevel).to.equal(1);\n      expect(ws.getColumn(2).outlineLevel).to.equal(2);\n      expect(ws.getColumn(3).outlineLevel).to.equal(3);\n    });","file":"unit/doc/worksheet.views.spec.js","skipped":false,"dir":"spec"},{"name":"getCell always returns a cell","suites":["CellMatrix"],"updatePoint":{"line":3,"column":35,"index":117},"line":3,"code":"  it('getCell always returns a cell', () => {\n    const cm = new CellMatrix();\n    expect(cm.getCell('A1')).to.be.ok();\n    expect(cm.getCell('$B$2')).to.be.ok();\n    expect(cm.getCell('Sheet!$C$3')).to.be.ok();\n  });","file":"unit/utils/cell-matrix.spec.js","skipped":false,"dir":"spec"},{"name":"findCell only returns known cells","suites":["CellMatrix"],"updatePoint":{"line":9,"column":39,"index":339},"line":9,"code":"  it('findCell only returns known cells', () => {\n    const cm = new CellMatrix();\n    expect(cm.findCell('A1')).to.be.undefined();\n    expect(cm.findCell('$B$2')).to.be.undefined();\n    expect(cm.findCell('Sheet!$C$3')).to.be.undefined();\n  });","file":"unit/utils/cell-matrix.spec.js","skipped":false,"dir":"spec"},{"name":"caches values","suites":["colCache"],"updatePoint":{"line":3,"column":19,"index":95},"line":3,"code":"  it('caches values', () => {\n    expect(colCache.l2n('A')).to.equal(1);\n    expect(colCache._l2n.A).to.equal(1);\n    expect(colCache._n2l[1]).to.equal('A');\n\n    // also, because of the fill heuristic A-Z will be there too\n    const dic = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    dic.forEach((letter, index) => {\n      expect(colCache._l2n[letter]).to.equal(index + 1);\n      expect(colCache._n2l[index + 1]).to.equal(letter);\n    });\n\n    // next level\n    expect(colCache.n2l(27)).to.equal('AA');\n    expect(colCache._l2n.AB).to.equal(28);\n    expect(colCache._n2l[28]).to.equal('AB');\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"converts numbers to letters","suites":["colCache"],"updatePoint":{"line":20,"column":33,"index":799},"line":20,"code":"  it('converts numbers to letters', () => {\n    expect(colCache.n2l(1)).to.equal('A');\n    expect(colCache.n2l(26)).to.equal('Z');\n    expect(colCache.n2l(27)).to.equal('AA');\n    expect(colCache.n2l(702)).to.equal('ZZ');\n    expect(colCache.n2l(703)).to.equal('AAA');\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"converts letters to numbers","suites":["colCache"],"updatePoint":{"line":27,"column":33,"index":1074},"line":27,"code":"  it('converts letters to numbers', () => {\n    expect(colCache.l2n('A')).to.equal(1);\n    expect(colCache.l2n('Z')).to.equal(26);\n    expect(colCache.l2n('AA')).to.equal(27);\n    expect(colCache.l2n('ZZ')).to.equal(702);\n    expect(colCache.l2n('AAA')).to.equal(703);\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"throws when out of bounds","suites":["colCache"],"updatePoint":{"line":34,"column":31,"index":1347},"line":34,"code":"  it('throws when out of bounds', () => {\n    expect(() => {\n      colCache.n2l(0);\n    }).to.throw(Error);\n    expect(() => {\n      colCache.n2l(-1);\n    }).to.throw(Error);\n    expect(() => {\n      colCache.n2l(16385);\n    }).to.throw(Error);\n    expect(() => {\n      colCache.l2n('');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.l2n('AAAA');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.l2n(16385);\n    }).to.throw(Error);\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"validates addresses properly","suites":["colCache"],"updatePoint":{"line":54,"column":34,"index":1809},"line":54,"code":"  it('validates addresses properly', () => {\n    expect(colCache.validateAddress('A1')).to.be.ok();\n    expect(colCache.validateAddress('AA10')).to.be.ok();\n    expect(colCache.validateAddress('ABC100000')).to.be.ok();\n    expect(() => {\n      colCache.validateAddress('A');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.validateAddress('1');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.validateAddress('1A');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.validateAddress('A 1');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.validateAddress('A1A');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.validateAddress('1A1');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.validateAddress('a1');\n    }).to.throw(Error);\n    expect(() => {\n      colCache.validateAddress('a');\n    }).to.throw(Error);\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"decodes addresses","suites":["colCache"],"updatePoint":{"line":83,"column":23,"index":2671},"line":83,"code":"  it('decodes addresses', () => {\n    expect(colCache.decodeAddress('A1')).to.deep.equal({\n      address: 'A1',\n      col: 1,\n      row: 1,\n      $col$row: '$A$1'\n    });\n    expect(colCache.decodeAddress('AA11')).to.deep.equal({\n      address: 'AA11',\n      col: 27,\n      row: 11,\n      $col$row: '$AA$11'\n    });\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"tolerates a missing row number","suites":["colCache","with a malformed address"],"updatePoint":{"line":98,"column":38,"index":3055},"line":98,"code":"    it('tolerates a missing row number', () => {\n      expect(colCache.decodeAddress('$B')).to.deep.equal({\n        address: 'B',\n        col: 2,\n        row: undefined,\n        $col$row: '$B$'\n      });\n    });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"tolerates a missing column number","suites":["colCache","with a malformed address"],"updatePoint":{"line":106,"column":41,"index":3270},"line":106,"code":"    it('tolerates a missing column number', () => {\n      expect(colCache.decodeAddress('$2')).to.deep.equal({\n        address: '2',\n        col: undefined,\n        row: 2,\n        $col$row: '$$2'\n      });\n    });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures","suites":["colCache","with a malformed address"],"updatePoint":{"line":115,"column":85,"index":3535},"line":115,"code":"  it('convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures', () => {\n    expect(colCache.decodeEx('Sheet1!$H$1')).to.deep.equal({\n      $col$row: '$H$1',\n      address: 'H1',\n      col: 8,\n      row: 1,\n      sheetName: 'Sheet1'\n    });\n    expect(colCache.decodeEx('\\'Sheet 1\\'!$H$1')).to.deep.equal({\n      $col$row: '$H$1',\n      address: 'H1',\n      col: 8,\n      row: 1,\n      sheetName: 'Sheet 1'\n    });\n    expect(colCache.decodeEx('\\'Sheet !$:1\\'!$H$1')).to.deep.equal({\n      $col$row: '$H$1',\n      address: 'H1',\n      col: 8,\n      row: 1,\n      sheetName: 'Sheet !$:1'\n    });\n    expect(colCache.decodeEx('\\'Sheet !$:1\\'!#REF!')).to.deep.equal({\n      sheetName: 'Sheet !$:1',\n      error: '#REF!'\n    });\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"gets address structures (and caches them)","suites":["colCache","with a malformed address"],"updatePoint":{"line":142,"column":47,"index":4251},"line":142,"code":"  it('gets address structures (and caches them)', () => {\n    let addr = colCache.getAddress('D5');\n    expect(addr.address).to.equal('D5');\n    expect(addr.row).to.equal(5);\n    expect(addr.col).to.equal(4);\n    expect(colCache.getAddress('D5')).to.equal(addr);\n    expect(colCache.getAddress(5, 4)).to.equal(addr);\n    addr = colCache.getAddress('E4');\n    expect(addr.address).to.equal('E4');\n    expect(addr.row).to.equal(4);\n    expect(addr.col).to.equal(5);\n    expect(colCache.getAddress('E4')).to.equal(addr);\n    expect(colCache.getAddress(4, 5)).to.equal(addr);\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"decodes addresses and ranges","suites":["colCache","with a malformed address"],"updatePoint":{"line":156,"column":34,"index":4816},"line":156,"code":"  it('decodes addresses and ranges', () => {\n    // address\n    expect(colCache.decode('A1')).to.deep.equal({\n      address: 'A1',\n      col: 1,\n      row: 1,\n      $col$row: '$A$1'\n    });\n    expect(colCache.decode('AA11')).to.deep.equal({\n      address: 'AA11',\n      col: 27,\n      row: 11,\n      $col$row: '$AA$11'\n    });\n\n    // range\n    expect(colCache.decode('A1:B2')).to.deep.equal({\n      dimensions: 'A1:B2',\n      tl: 'A1',\n      br: 'B2',\n      top: 1,\n      left: 1,\n      bottom: 2,\n      right: 2\n    });\n\n    // wonky ranges\n    expect(colCache.decode('A2:B1')).to.deep.equal({\n      dimensions: 'A1:B2',\n      tl: 'A1',\n      br: 'B2',\n      top: 1,\n      left: 1,\n      bottom: 2,\n      right: 2\n    });\n    expect(colCache.decode('B2:A1')).to.deep.equal({\n      dimensions: 'A1:B2',\n      tl: 'A1',\n      br: 'B2',\n      top: 1,\n      left: 1,\n      bottom: 2,\n      right: 2\n    });\n  });","file":"unit/utils/col-cache.spec.js","skipped":false,"dir":"spec"},{"name":"should copy a style deeply","suites":["copyStyle"],"updatePoint":{"line":16,"column":32,"index":500},"line":16,"code":"  it('should copy a style deeply', () => {\n    const copied = copyStyle(style1);\n    expect(copied).to.deep.equal(style1);\n    expect(copied.font).to.not.equal(style1.font);\n    expect(copied.alignment).to.not.equal(style1.alignment);\n    expect(copied.border).to.not.equal(style1.border);\n    expect(copied.fill).to.not.equal(style1.fill);\n    expect(copyStyle({})).to.deep.equal({});\n  });","file":"unit/utils/copy-style.spec.js","skipped":false,"dir":"spec"},{"name":"should copy fill.stops deeply","suites":["copyStyle"],"updatePoint":{"line":25,"column":35,"index":895},"line":25,"code":"  it('should copy fill.stops deeply', () => {\n    const copied = copyStyle(style2);\n    expect(copied.fill.stops).to.deep.equal(style2.fill.stops);\n    expect(copied.fill.stops).to.not.equal(style2.fill.stops);\n    expect(copied.fill.stops[0]).to.not.equal(style2.fill.stops[0]);\n  });","file":"unit/utils/copy-style.spec.js","skipped":false,"dir":"spec"},{"name":"should return the argument if a falsy value passed","suites":["copyStyle"],"updatePoint":{"line":31,"column":56,"index":1202},"line":31,"code":"  it('should return the argument if a falsy value passed', () => {\n    expect(copyStyle(null)).to.equal(null);\n    expect(copyStyle(undefined)).to.equal(undefined);\n  });","file":"unit/utils/copy-style.spec.js","skipped":false,"dir":"spec"},{"name":" from  to ","suites":["shared-formula","slideFormula"],"updatePoint":{"line":38,"column":50,"index":894},"line":38,"code":"      it(`${args[0]} from ${args[1]} to ${args[2]}`, () => {\n        expect(slideFormula(...args)).to.equal(result);\n      });","file":"unit/utils/shared-formula.spec.js","skipped":false,"dir":"spec"},{"name":"Stores and shares string values","suites":["SharedStrings"],"updatePoint":{"line":3,"column":37,"index":128},"line":3,"code":"  it('Stores and shares string values', () => {\n    const ss = new SharedStrings();\n    const iHello = ss.add('Hello');\n    const iHelloV2 = ss.add('Hello');\n    const iGoodbye = ss.add('Goodbye');\n    expect(iHello).to.equal(iHelloV2);\n    expect(iGoodbye).to.not.equal(iHelloV2);\n    expect(ss.count).to.equal(2);\n    expect(ss.totalRefs).to.equal(3);\n  });","file":"unit/utils/shared-strings.spec.js","skipped":false,"dir":"spec"},{"name":"Does not escape values","suites":["SharedStrings"],"updatePoint":{"line":13,"column":28,"index":479},"line":13,"code":"  it('Does not escape values', () => {\n    // that's the job of the xml utils\n    const ss = new SharedStrings();\n    const iXml = ss.add('<tag>value</tag>');\n    const iAmpersand = ss.add('&');\n    expect(ss.getString(iXml)).to.equal('<tag>value</tag>');\n    expect(ss.getString(iAmpersand)).to.equal('&');\n  });","file":"unit/utils/shared-strings.spec.js","skipped":false,"dir":"spec"},{"name":"writes strings as UTF8","suites":["StreamBuf"],"updatePoint":{"line":10,"column":28,"index":451},"line":10,"code":"  it('writes strings as UTF8', () => {\n    const stream = new StreamBuf();\n    stream.write('Hello, World!');\n    const chunk = stream.read();\n    expect(chunk instanceof Buffer).to.be.ok();\n    expect(chunk.toString('UTF8')).to.equal('Hello, World!');\n  });","file":"unit/utils/stream-buf.spec.js","skipped":false,"dir":"spec"},{"name":"writes StringBuf chunks","suites":["StreamBuf"],"updatePoint":{"line":17,"column":29,"index":711},"line":17,"code":"  it('writes StringBuf chunks', () => {\n    const stream = new StreamBuf();\n    const strBuf = new StringBuf({\n      size: 64\n    });\n    strBuf.addText('Hello, World!');\n    stream.write(strBuf);\n    const chunk = stream.read();\n    expect(chunk instanceof Buffer).to.be.ok();\n    expect(chunk.toString('UTF8')).to.equal('Hello, World!');\n  });","file":"unit/utils/stream-buf.spec.js","skipped":false,"dir":"spec"},{"name":"signals end","suites":["StreamBuf"],"updatePoint":{"line":28,"column":17,"index":1045},"line":28,"code":"  it('signals end', done => {\n    const stream = new StreamBuf();\n    stream.on('finish', () => {\n      done();\n    });\n    stream.write('Hello, World!');\n    stream.end();\n  });","file":"unit/utils/stream-buf.spec.js","skipped":false,"dir":"spec"},{"name":"handles buffers","suites":["StreamBuf"],"updatePoint":{"line":36,"column":21,"index":1228},"line":36,"code":"  it('handles buffers', () => new Promise((resolve, reject) => {\n    const s = fs.createReadStream(path.join(__dirname, 'data/image1.png'));\n    const sb = new StreamBuf();\n    sb.on('finish', () => {\n      const buf = sb.toBuffer();\n      expect(buf.length).to.equal(1672);\n      resolve();\n    });\n    sb.on('error', reject);\n    s.pipe(sb);\n  }));","file":"unit/utils/stream-buf.spec.js","skipped":false,"dir":"spec"},{"name":"handle unsupported type of chunk","suites":["StreamBuf"],"updatePoint":{"line":47,"column":38,"index":1596},"line":47,"code":"  it('handle unsupported type of chunk', async () => {\n    const stream = new StreamBuf();\n    try {\n      await stream.write({});\n      expect.fail('should fail for given argument');\n    } catch (e) {\n      expect(e.message).to.equal('Chunk must be one of type String, Buffer or StringBuf.');\n    }\n  });","file":"unit/utils/stream-buf.spec.js","skipped":false,"dir":"spec"},{"name":"writes strings as UTF8","suites":["StringBuf"],"updatePoint":{"line":5,"column":28,"index":261},"line":5,"code":"  it('writes strings as UTF8', () => {\n    const sb = new StringBuf({\n      size: 64\n    });\n    sb.addText('Hello, World!');\n    const chunk = sb.toBuffer();\n    expect(chunk.toString('UTF8')).to.equal('Hello, World!');\n  });","file":"unit/utils/string-buf.spec.js","skipped":false,"dir":"spec"},{"name":"grows properly","suites":["StringBuf"],"updatePoint":{"line":13,"column":20,"index":480},"line":13,"code":"  it('grows properly', () => {\n    const sb = new StringBuf({\n      size: 8\n    });\n    expect(sb.length).to.equal(0);\n    expect(sb.capacity).to.equal(8);\n\n    // write simple UTF8 string. Should use 7 bytes\n    // that's within 4 bytes of 16\n    sb.addText('Hello, ');\n    expect(sb.length).to.equal(7);\n    expect(sb.capacity).to.equal(16);\n\n    // add some more (6 bytes)\n    sb.addText('World!');\n    expect(sb.length).to.equal(13);\n    expect(sb.capacity).to.equal(32);\n\n    // and more (7 bytes)\n    sb.addText(' Hello.');\n    expect(sb.length).to.equal(20);\n    expect(sb.capacity).to.equal(32);\n\n    // after all that - the string should be intact\n    const chunk = sb.toBuffer();\n    expect(chunk.toString('UTF8')).to.equal('Hello, World! Hello.');\n  });","file":"unit/utils/string-buf.spec.js","skipped":false,"dir":"spec"},{"name":"resets","suites":["StringBuf"],"updatePoint":{"line":40,"column":12,"index":1237},"line":40,"code":"  it('resets', () => {\n    const sb = new StringBuf({\n      size: 64\n    });\n    sb.addText('Hello, ');\n    expect(sb.length).to.equal(7);\n    sb.reset();\n    expect(sb.length).to.equal(0);\n    sb.addText('World!');\n    expect(sb.length).to.equal(6);\n    const chunk = sb.toBuffer();\n    expect(chunk.toString('UTF8')).to.equal('World!');\n  });","file":"unit/utils/string-buf.spec.js","skipped":false,"dir":"spec"},{"name":"works on simple values","suites":["under-dash","isEqual"],"updatePoint":{"line":21,"column":30,"index":633},"line":21,"code":"    it('works on simple values', () => {\n      for (let i = 0; i < values.length; i++) {\n        for (let j = 0; j < values.length; j++) {\n          const a = values[i];\n          const b = values[j];\n          const assertion = `${showVal(a)} ${i === j ? '==' : '!='} ${showVal(b)}`;\n          expect(_.isEqual(a, b)).to.equal(i === j, `expected ${assertion}`);\n        }\n      }\n    });","file":"unit/utils/under-dash.spec.js","skipped":false,"dir":"spec"},{"name":"works on complex arrays","suites":["under-dash","isEqual"],"updatePoint":{"line":31,"column":31,"index":1023},"line":31,"code":"    it('works on complex arrays', () => {\n      for (let i = 0; i < values.length; i++) {\n        for (let j = 0; j < values.length; j++) {\n          const a = [values[i]];\n          const b = [values[j]];\n          const assertion = `${showVal(a)} ${i === j ? '==' : '!='} ${showVal(b)}`;\n          expect(_.isEqual(a, b)).to.equal(i === j, `expected ${assertion}`);\n        }\n      }\n    });","file":"unit/utils/under-dash.spec.js","skipped":false,"dir":"spec"},{"name":"works on complex objects","suites":["under-dash","isEqual"],"updatePoint":{"line":41,"column":32,"index":1418},"line":41,"code":"    it('works on complex objects', () => {\n      for (let i = 0; i < values.length; i++) {\n        for (let j = 0; j < values.length; j++) {\n          const a = {\n            key: values[i]\n          };\n          const b = {\n            key: values[j]\n          };\n          const assertion = `${showVal(a)} ${i === j ? '==' : '!='} ${showVal(b)}`;\n          expect(_.isEqual(a, b)).to.equal(i === j, `expected ${assertion}`);\n        }\n      }\n    });","file":"unit/utils/under-dash.spec.js","skipped":false,"dir":"spec"},{"name":"encodes xml text","suites":["utils","xmlEncode"],"updatePoint":{"line":4,"column":24,"index":122},"line":4,"code":"    it('encodes xml text', () => {\n      expect(utils.xmlEncode('<')).to.equal('&lt;');\n      expect(utils.xmlEncode('>')).to.equal('&gt;');\n      expect(utils.xmlEncode('&')).to.equal('&amp;');\n      expect(utils.xmlEncode('\"')).to.equal('&quot;');\n      expect(utils.xmlEncode('\\'')).to.equal('&apos;');\n      expect(utils.xmlEncode('abc\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0b\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20abc\\x7f')).to.equal('abc abc');\n      expect(utils.xmlEncode('<a href=\"www.whatever.com\">Talk to the H&</a>')).to.equal('&lt;a href=&quot;www.whatever.com&quot;&gt;Talk to the H&amp;&lt;/a&gt;');\n      expect(utils.xmlEncode('new\\x0aline')).to.equal('new\\x0aline');\n    });","file":"unit/utils/utils.spec.js","skipped":false,"dir":"spec"},{"name":"'' a date","suites":["utils","isDateFmt"],"updatePoint":{"line":17,"column":25,"index":926},"line":17,"code":"      it(`'${fmt}' a date`, () => {\n        expect(utils.isDateFmt(fmt)).to.be.true();\n      });","file":"unit/utils/utils.spec.js","skipped":false,"dir":"spec"},{"name":"'' is not a date","suites":["utils","isDateFmt"],"updatePoint":{"line":22,"column":32,"index":1094},"line":22,"code":"      it(`'${fmt}' is not a date`, () => {\n        expect(utils.isDateFmt(fmt)).to.be.false();\n      });","file":"unit/utils/utils.spec.js","skipped":false,"dir":"spec"},{"name":"should convert date to excel properly","suites":["utils","dateToExcel"],"updatePoint":{"line":28,"column":45,"index":1260},"line":28,"code":"    it('should convert date to excel properly', () => {\n      const myDate = new Date(Date.UTC(2017, 11, 15, 17, 0, 0, 0));\n      const excelDate = utils.dateToExcel(myDate, false);\n      expect(excelDate).to.equal(43084.70833333333);\n    });","file":"unit/utils/utils.spec.js","skipped":false,"dir":"spec"},{"name":"should round to the nearest millisecond when parsing excel date","suites":["utils","excelToDate"],"updatePoint":{"line":35,"column":71,"index":1569},"line":35,"code":"    it('should round to the nearest millisecond when parsing excel date', () => {\n      const myDate = new Date(Date.UTC(2017, 11, 15, 17, 0, 0, 0));\n      const excelDate = utils.dateToExcel(myDate, false);\n      const dateConverted = utils.excelToDate(excelDate, false);\n      expect(dateConverted).to.deep.equal(myDate);\n    });","file":"unit/utils/utils.spec.js","skipped":false,"dir":"spec"},{"name":"should not lost millisecond precision when parsing excel date","suites":["utils","excelToDate"],"updatePoint":{"line":41,"column":69,"index":1899},"line":41,"code":"    it('should not lost millisecond precision when parsing excel date', () => {\n      const myDate = new Date(Date.UTC(2017, 11, 15, 17, 0, 0, 0));\n      const excelDate = utils.dateToExcel(myDate, false);\n      const dateConverted = utils.excelToDate(excelDate, false);\n      expect(dateConverted).to.deep.equal(myDate);\n    });","file":"unit/utils/utils.spec.js","skipped":false,"dir":"spec"},{"name":"Writes simple XML doc","suites":["XmlStream"],"updatePoint":{"line":3,"column":27,"index":106},"line":3,"code":"  it('Writes simple XML doc', () => {\n    const xmlStream = new XmlStream();\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode('root', {\n      attr1: 'attr1-value',\n      attr2: 'attr2-value'\n    });\n    xmlStream.openNode('l1');\n    xmlStream.openNode('l2');\n    xmlStream.addAttribute('l2a1', 'v1');\n    xmlStream.addAttribute('l2a2', 'v2');\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n    expect(xmlStream.xml).to.equal('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<root attr1=\"attr1-value\" attr2=\"attr2-value\"><l1><l2 l2a1=\"v1\" l2a2=\"v2\"/></l1></root>');\n  });","file":"unit/utils/xml-stream.spec.js","skipped":false,"dir":"spec"},{"name":"Writes text in XML doc","suites":["XmlStream"],"updatePoint":{"line":19,"column":28,"index":746},"line":19,"code":"  it('Writes text in XML doc', () => {\n    const xmlStream = new XmlStream();\n    xmlStream.openNode('root');\n    xmlStream.openNode('l1');\n    xmlStream.openNode('l2');\n    xmlStream.addAttribute('l2a1', 'v1');\n    xmlStream.writeText('Hello, World!');\n    xmlStream.closeNode();\n    xmlStream.openNode('l2');\n    xmlStream.addAttribute('l2a1', 'v2');\n    xmlStream.writeText('See ya later, Alligator!');\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n    expect(xmlStream.xml).to.equal('<root><l1><l2 l2a1=\"v1\">Hello, World!</l2><l2 l2a1=\"v2\">See ya later, Alligator!</l2></l1></root>');\n  });","file":"unit/utils/xml-stream.spec.js","skipped":false,"dir":"spec"},{"name":"text is escaped","suites":["XmlStream"],"updatePoint":{"line":35,"column":21,"index":1369},"line":35,"code":"  it('text is escaped', () => {\n    const xmlStream = new XmlStream();\n    xmlStream.openNode('root');\n    xmlStream.openNode('l1');\n    xmlStream.writeText('<escape this!>');\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n    expect(xmlStream.xml).to.equal('<root><l1>&lt;escape this!&gt;</l1></root>');\n  });","file":"unit/utils/xml-stream.spec.js","skipped":false,"dir":"spec"},{"name":"attributes are escaped","suites":["XmlStream"],"updatePoint":{"line":44,"column":28,"index":1694},"line":44,"code":"  it('attributes are escaped', () => {\n    const xmlStream = new XmlStream();\n    xmlStream.openNode('root');\n    xmlStream.openNode('l1');\n    xmlStream.addAttribute('stuff', 'this & that');\n    xmlStream.openNode('l2', {\n      foo: '<bar>'\n    });\n    xmlStream.closeNode();\n    xmlStream.leafNode('l2', {\n      quote: '\"this\"'\n    });\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n    expect(xmlStream.xml).to.equal('<root><l1 stuff=\"this &amp; that\"><l2 foo=\"&lt;bar&gt;\"/><l2 quote=\"&quot;this&quot;\"/></l1></root>');\n  });","file":"unit/utils/xml-stream.spec.js","skipped":false,"dir":"spec"},{"name":"rolls back","suites":["XmlStream"],"updatePoint":{"line":60,"column":16,"index":2219},"line":60,"code":"  it('rolls back', () => {\n    const xmlStream = new XmlStream();\n    xmlStream.openNode('root');\n    xmlStream.addAttribute('in', '1');\n    xmlStream.addRollback();\n    xmlStream.addAttribute('not', '1');\n    xmlStream.openNode('invalid');\n    xmlStream.rollback();\n    xmlStream.addAttribute('also', '2');\n    xmlStream.openNode('valid');\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n    expect(xmlStream.xml).to.equal('<root in=\"1\" also=\"2\"><valid/></root>');\n  });","file":"unit/utils/xml-stream.spec.js","skipped":false,"dir":"spec"},{"name":"should not throw on null picture","suites":["TwoCellAnchorXform","reconcile"],"updatePoint":{"line":4,"column":40,"index":193},"line":4,"code":"    it('should not throw on null picture', () => {\n      const twoCell = new TwoCellAnchorXform();\n      expect(() => twoCell.reconcile({\n        picture: null\n      }, {})).to.not.throw();\n    });","file":"unit/xlsx/xform/drawing/two-cell-anchor-xform.spec.js","skipped":false,"dir":"spec"},{"name":"should not throw on null tl","suites":["TwoCellAnchorXform","reconcile"],"updatePoint":{"line":10,"column":35,"index":386},"line":10,"code":"    it('should not throw on null tl', () => {\n      const twoCell = new TwoCellAnchorXform();\n      expect(() => twoCell.reconcile({\n        br: {\n          col: 1,\n          row: 1\n        }\n      }, {})).to.not.throw();\n    });","file":"unit/xlsx/xform/drawing/two-cell-anchor-xform.spec.js","skipped":false,"dir":"spec"},{"name":"should not throw on null br","suites":["TwoCellAnchorXform","reconcile"],"updatePoint":{"line":19,"column":35,"index":616},"line":19,"code":"    it('should not throw on null br', () => {\n      const twoCell = new TwoCellAnchorXform();\n      expect(() => twoCell.reconcile({\n        tl: {\n          col: 1,\n          row: 1\n        }\n      }, {})).to.not.throw();\n    });","file":"unit/xlsx/xform/drawing/two-cell-anchor-xform.spec.js","skipped":false,"dir":"spec"},{"name":"hyperlinks must be after dataValidations","suites":["WorksheetXform"],"updatePoint":{"line":141,"column":46,"index":4165},"line":141,"code":"  it('hyperlinks must be after dataValidations', () => {\n    const xform = new WorksheetXform();\n    const model = require('./data/sheet.4.0.json');\n    const xmlStream = new XmlStream();\n    const options = {\n      styles: new StylesXform(true),\n      sharedStrings: new SharedStringsXform(),\n      hyperlinks: []\n    };\n    xform.prepare(model, options);\n    xform.render(xmlStream, model);\n    const {\n      xml\n    } = xmlStream;\n    const iHyperlinks = xml.indexOf('hyperlinks');\n    const iDataValidations = xml.indexOf('dataValidations');\n    expect(iHyperlinks).not.to.equal(-1);\n    expect(iDataValidations).not.to.equal(-1);\n    expect(iHyperlinks).to.be.greaterThan(iDataValidations);\n  });","file":"unit/xlsx/xform/sheet/worksheet-xform.spec.js","skipped":false,"dir":"spec"},{"name":"conditionalFormattings must be before dataValidations","suites":["WorksheetXform"],"updatePoint":{"line":161,"column":59,"index":4880},"line":161,"code":"  it('conditionalFormattings must be before dataValidations', () => {\n    const xform = new WorksheetXform();\n    const model = require('./data/sheet.4.0.json');\n    const xmlStream = new XmlStream();\n    const options = {\n      styles: new StylesXform(true),\n      hyperlinks: []\n    };\n    xform.prepare(model, options);\n    xform.render(xmlStream, model);\n    const {\n      xml\n    } = xmlStream;\n    const iConditionalFormatting = xml.indexOf('conditionalFormatting');\n    const iDataValidations = xml.indexOf('dataValidations');\n    expect(iConditionalFormatting).not.to.equal(-1);\n    expect(iDataValidations).not.to.equal(-1);\n    expect(iConditionalFormatting).to.be.lessThan(iDataValidations);\n  });","file":"unit/xlsx/xform/sheet/worksheet-xform.spec.js","skipped":false,"dir":"spec"},{"name":"Renders empty model","suites":["StylesXform","As StyleManager"],"updatePoint":{"line":20,"column":27,"index":653},"line":20,"code":"    it('Renders empty model', () => {\n      const stylesXform = new StylesXform(true);\n      const expectedXml = fs.readFileSync(`${__dirname}/data/styles.2.2.xml`).toString();\n      const xmlStream = new XmlStream();\n      stylesXform.render(xmlStream);\n      expect(xmlStream.xml).xml.to.equal(expectedXml);\n    });","file":"unit/xlsx/xform/style/styles-xform.spec.js","skipped":false,"dir":"spec"}]}