{"repo":"tailwindlabs/tailwindcss","url":"https://github.com/tailwindlabs/tailwindcss","branch":"master","configs":[{"package":"parcel","lang":"js","dir":"integrations/parcel/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"postcss-cli","lang":"js","dir":"integrations/postcss-cli/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"rollup.js","lang":"js","dir":"integrations/rollup/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"tailwindcss-cli","lang":"js","dir":"integrations/tailwindcss-cli/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"vite","lang":"js","dir":"integrations/vite/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"webpack-4","lang":"js","dir":"integrations/webpack-4/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"webpack-5","lang":"js","dir":"integrations/webpack-5/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"tailwindcss","lang":"js","dir":"tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"tailwindcss-standalone","lang":"js","dir":"standalone-cli/tests","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should be possible to generate tailwind output","suites":["static build"],"updatePoint":{"line":19,"column":52,"index":378},"line":19,"code":"  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    await $('parcel build ./src/index.html --no-cache', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/parcel/tests"},{"name":"can use a tailwind.config.js configuration file with ESM syntax","suites":["static build"],"updatePoint":{"line":35,"column":69,"index":874},"line":35,"code":"  it('can use a tailwind.config.js configuration file with ESM syntax', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"z-primary\"></div>\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('parcel build ./src/index.html --no-cache', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/parcel/tests"},{"name":"can use a tailwind.config.ts configuration file","suites":["static build"],"updatePoint":{"line":72,"column":53,"index":1882},"line":72,"code":"  it('can use a tailwind.config.ts configuration file', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"z-primary\"></div>\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.ts', javascript`\n        import type { Config } from 'tailwindcss'\n\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        } satisfies Config\n      `);\n    await $('parcel build ./src/index.html --no-cache', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/parcel/tests"},{"name":"classes are generated when the html file changes","suites":["watcher"],"updatePoint":{"line":113,"column":56,"index":2993},"line":113,"code":"  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    let runningProcess = $('parcel watch ./src/index.html --no-cache');\n    await waitForOutputFileCreation(/index\\.\\w+\\.css$/);\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await appendToInputFile('index.html', html`<div class=\"z-0\"></div>`);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/parcel/tests"},{"name":"classes are generated when globbed files change","suites":["watcher"],"line":152,"code":"  test.skip('classes are generated when globbed files change', async () => {","file":"integration.test.js","skipped":true,"dir":"integrations/parcel/tests"},{"name":"classes are generated when the tailwind.config.js file changes","suites":["watcher"],"updatePoint":{"line":189,"column":70,"index":5631},"line":189,"code":"  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold md:font-medium\"></div>\n      `);\n    let runningProcess = $('parcel watch ./src/index.html --no-cache');\n    await waitForOutputFileCreation(/index\\.\\w+\\.css$/);\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (width >= 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (width >= 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/parcel/tests"},{"name":"classes are generated when the index.css file changes","suites":["watcher"],"updatePoint":{"line":239,"column":61,"index":7115},"line":239,"code":"  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"btn font-bold\"></div>\n      `);\n    let runningProcess = $('parcel watch ./src/index.html --no-cache');\n    await waitForOutputFileCreation(/index\\.\\w+\\.css$/);\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange(/index\\.\\w+\\.css$/, async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded z-0 px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n        .btn {\n          z-index: 0;\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/parcel/tests"},{"name":"should be possible to generate tailwind output","suites":["static build"],"updatePoint":{"line":19,"column":52,"index":375},"line":19,"code":"  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('postcss ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/postcss-cli/tests"},{"name":"classes are generated when the html file changes","suites":["watcher"],"updatePoint":{"line":34,"column":56,"index":815},"line":34,"code":"  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"z-0\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/postcss-cli/tests"},{"name":"classes are generated when globbed files change","suites":["watcher"],"updatePoint":{"line":68,"column":55,"index":1938},"line":68,"code":"  test('classes are generated when globbed files change', async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"z-0\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/postcss-cli/tests"},{"name":"classes are generated when the tailwind.config.js file changes","suites":["watcher"],"updatePoint":{"line":102,"column":70,"index":3091},"line":102,"code":"  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n        module.exports = {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              screens: {\n                md: '800px'\n              },\n              fontWeight: {\n                bold: 'bold'\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/postcss-cli/tests"},{"name":"classes are generated when the index.css file changes","suites":["watcher"],"updatePoint":{"line":148,"column":61,"index":4424},"line":148,"code":"  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('postcss ./src/index.css -o ./dist/main.css -w --verbose');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded z-0 px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          z-index: 0;\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/postcss-cli/tests"},{"name":"should be possible to generate tailwind output","suites":["static build"],"updatePoint":{"line":20,"column":52,"index":388},"line":20,"code":"  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('rollup -c', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/rollup/tests"},{"name":"can use a tailwind.config.js configuration file with ESM syntax","suites":["static build"],"updatePoint":{"line":33,"column":69,"index":777},"line":33,"code":"  it('can use a tailwind.config.js configuration file with ESM syntax', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('rollup -c', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/rollup/tests"},{"name":"can use a tailwind.config.ts configuration file","suites":["static build"],"updatePoint":{"line":67,"column":53,"index":1678},"line":67,"code":"  it('can use a tailwind.config.ts configuration file', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.ts', javascript`\n        import type { Config } from 'tailwindcss'\n\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        } satisfies Config\n      `);\n    await $('rollup -c', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/rollup/tests"},{"name":"classes are generated when the html file changes","suites":["watcher"],"updatePoint":{"line":105,"column":56,"index":2682},"line":105,"code":"  test(`classes are generated when the html file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"z-0\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/rollup/tests"},{"name":"classes are generated when globbed files change","suites":["watcher"],"updatePoint":{"line":139,"column":55,"index":3770},"line":139,"code":"  test(`classes are generated when globbed files change`, async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"z-0\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/rollup/tests"},{"name":"classes are generated when the tailwind.config.js file changes","suites":["watcher"],"updatePoint":{"line":173,"column":70,"index":4888},"line":173,"code":"  test(`classes are generated when the tailwind.config.js file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/rollup/tests"},{"name":"classes are generated when the index.css file changes","suites":["watcher"],"updatePoint":{"line":219,"column":61,"index":6219},"line":219,"code":"  test(`classes are generated when the index.css file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('rollup -c --watch');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded z-0 px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('index.css')).toIncludeCss(css`\n        .btn {\n          z-index: 0;\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/rollup/tests"},{"name":"--output","suites":["Build command"],"updatePoint":{"line":28,"column":16,"index":771},"line":28,"code":"  test('--output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold shadow\"></div>`);\n    await $(`${EXECUTABLE} --output ./dist/main.css`);\n    let contents = await readOutputFile('main.css');\n\n    // `-i` is omitted, therefore the default `@tailwind base; @tailwind\n    // components; @tailwind utilities` is used. However `preflight` is\n    // disabled. I still want to verify that the `base` got included.\n    expect(contents).toContain('--tw-ring-offset-shadow: 0 0 #0000');\n    expect(contents).toContain('--tw-ring-shadow: 0 0 #0000');\n    expect(contents).toContain('--tw-shadow: 0 0 #0000');\n\n    // Verify `utilities` output is correct\n    expect(contents).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--input, --output","suites":["Build command"],"updatePoint":{"line":47,"column":25,"index":1571},"line":47,"code":"  test('--input, --output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $(`${EXECUTABLE} --input ./src/index.css --output ./dist/main.css`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--minify","suites":["Build command"],"updatePoint":{"line":56,"column":16,"index":1898},"line":56,"code":"  test('--minify', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $(`${EXECUTABLE} --output ./dist/main.css --minify`);\n    let withMinify = await readOutputFile('main.css');\n\n    // Verify that we got the expected output. Note: `.toIncludeCss` formats\n    // `actual` & `expected`\n    expect(withMinify).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await $(`${EXECUTABLE} --output ./dist/main.css`);\n    let withoutMinify = await readOutputFile('main.css');\n\n    // Let's verify that the actual minified output is smaller than the not\n    // minified version.\n    expect(withoutMinify.length).toBeGreaterThan(withMinify.length);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--no-autoprefixer (should produce a warning)","suites":["Build command"],"updatePoint":{"line":77,"column":52,"index":2687},"line":77,"code":"  test('--no-autoprefixer (should produce a warning)', async () => {\n    await writeInputFile('index.html', html`<div class=\"select-none\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind utilities;\n      `);\n    let runningProcess = $(`${EXECUTABLE} --input ./src/index.css --output ./dist/main.css --no-autoprefixer`);\n    let warning = runningProcess.onStderr(message => message.includes('--no-autoprefixer'));\n    await runningProcess;\n    expect(await warning).toMatchInlineSnapshot(`\n      \"[deprecation] The --no-autoprefixer flag is deprecated and has no effect.\n      \"\n    `);\n    let withoutAutoprefixer = await readOutputFile('main.css');\n\n    // This contains --webkit-user-select which may be strange, but it is expected because we are\n    // not handling the `--no-autoprefixer` flag anymore at all.\n    expect(withoutAutoprefixer).toMatchInlineSnapshot(`\n      \".select-none {\n        -webkit-user-select: none;\n        user-select: none;\n      }\n      \"\n    `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--config (non-existing config file)","suites":["Build command"],"updatePoint":{"line":101,"column":43,"index":3684},"line":101,"code":"  test('--config (non-existing config file)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let {\n      stderr\n    } = await $(`${EXECUTABLE} --output ./dist/main.css --config ./non-existing.config.js`).catch(err => err);\n    let toolRoot = resolveToolRoot();\n    expect(stderr).toEqual(`Specified config file ${path.resolve(toolRoot, 'non-existing.config.js')} does not exist.\\n`);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--config (existing config file)","suites":["Build command"],"updatePoint":{"line":109,"column":39,"index":4118},"line":109,"code":"  test('--config (existing config file)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = `module.exports = ${JSON.stringify({\n      content: ['./src/index.html'],\n      theme: {\n        extend: {\n          fontWeight: {\n            bold: 'bold'\n          }\n        }\n      },\n      corePlugins: {\n        preflight: false\n      },\n      plugins: []\n    }, null, 2)}`;\n    await writeInputFile('../custom.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --config ./custom.config.js`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--content","suites":["Build command"],"updatePoint":{"line":133,"column":17,"index":4816},"line":133,"code":"  test('--content', async () => {\n    await writeInputFile('other.html', html`<div class=\"font-bold\"></div>`);\n    await $(`${EXECUTABLE} --content ./src/other.html --output ./dist/main.css`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--postcss (postcss.config.js)","suites":["Build command"],"updatePoint":{"line":142,"column":37,"index":5167},"line":142,"code":"  test('--postcss (postcss.config.js)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        plugins: [\n          function before(root, result) {\n            // Inject a custom component with @apply rules to prove that we run\n            // this _before_ the actual tailwind plugin.\n            let btn = postcss.parse('.btn { @apply flex px-2 py-1 }')\n            root.append(btn.nodes)\n          },\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n          function after(root, result) {\n            // Add '-after' to all the selectors\n            root.walkRules(rule => {\n              if (!rule.selector.startsWith('.')) return\n              rule.selector = rule.selector + '-after'\n            })\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold-after {\n          font-weight: 700;\n        }\n\n        .btn-after {\n          padding: 0.25rem 0.5rem;\n          display: flex;\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--postcss (custom.postcss.config.js)","suites":["Build command"],"updatePoint":{"line":182,"column":44,"index":6513},"line":182,"code":"  test('--postcss (custom.postcss.config.js)', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        plugins: [\n          function before(root, result) {\n            // Inject a custom component with @apply rules to prove that we run\n            // this _before_ the actual tailwind plugin.\n            let btn = postcss.parse('.btn { @apply flex px-2 py-1 }')\n            root.append(btn.nodes)\n          },\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n          function after(root, result) {\n            // Add '-after' to all the selectors\n            root.walkRules(rule => {\n              if (!rule.selector.startsWith('.')) return\n              rule.selector = rule.selector + '-after'\n            })\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../custom.postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss ./custom.postcss.config.js`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold-after {\n          font-weight: 700;\n        }\n\n        .btn-after {\n          padding: 0.25rem 0.5rem;\n          display: flex;\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--postcss supports process options","suites":["Build command"],"updatePoint":{"line":222,"column":42,"index":7891},"line":222,"code":"  test('--postcss supports process options', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        map: { inline: true },\n        plugins: [\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss`);\n    let contents = await readOutputFile('main.css');\n    expect(contents).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    expect(contents).toContain(`/*# sourceMappingURL`);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--postcss supports process options with custom config","suites":["Build command"],"updatePoint":{"line":247,"column":61,"index":8708},"line":247,"code":"  test('--postcss supports process options with custom config', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let customConfig = javascript`\n      let path = require('path')\n      let postcss = require('postcss')\n\n      module.exports = {\n        map: { inline: true },\n        plugins: [\n          function tailwindcss() {\n            return require(path.resolve('..', '..'))\n          },\n        ],\n      }\n    `;\n    await writeInputFile('../custom.postcss.config.js', customConfig);\n    await $(`${EXECUTABLE} --output ./dist/main.css --postcss ./custom.postcss.config.js`);\n    let contents = await readOutputFile('main.css');\n    expect(contents).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    expect(contents).toContain(`/*# sourceMappingURL`);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"postcss-import is supported by default","suites":["Build command"],"updatePoint":{"line":272,"column":46,"index":9544},"line":272,"code":"  test('postcss-import is supported by default', async () => {\n    cleanupFile('src/test.css');\n    await writeInputFile('index.html', html`<div class=\"md:something-cool\"></div>`);\n    await writeInputFile('test.css', css`\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n        @import './imported.css';\n      `);\n    await $(`${EXECUTABLE} --input ./src/test.css --content ./src/index.html --output ./dist/main.css`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        @media (min-width: 768px) {\n          .md\\:something-cool {\n            color: red;\n          }\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"postcss-import is supported by default in watch mode","suites":["Build command"],"updatePoint":{"line":290,"column":60,"index":10242},"line":290,"code":"  test('postcss-import is supported by default in watch mode', async () => {\n    cleanupFile('src/test.css');\n    await writeInputFile('index.html', html`<div class=\"md:something-cool\"></div>`);\n    await writeInputFile('test.css', css`\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n        @import './imported.css';\n      `);\n    let runningProcess = $(`${EXECUTABLE} --watch --input ./src/test.css --content ./src/index.html --output ./dist/main.css`);\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        @media (min-width: 768px) {\n          .md\\:something-cool {\n            color: red;\n          }\n        }\n      `);\n    await writeInputFile('imported.css', css`\n        @layer utilities {\n          .something-cool {\n            color: blue;\n          }\n        }\n      `);\n    await runningProcess.onStderr(function ready(message) {\n      return message.includes('Done in');\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        @media (min-width: 768px) {\n          .md\\:something-cool {\n            color: #00f;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"postcss-import is included when using a custom postcss configuration","suites":["Build command"],"updatePoint":{"line":327,"column":76,"index":11518},"line":327,"code":"  test('postcss-import is included when using a custom postcss configuration', async () => {\n    cleanupFile('src/test.css');\n    await writeInputFile('index.html', html`<div class=\"md:something-cool\"></div>`);\n    await writeInputFile('imported.css', css`\n        .foo {\n          color: white;\n        }\n      `);\n    await writeInputFile('test.css', css`\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n        @import './imported.css';\n      `);\n    await $(`${EXECUTABLE} --input ./src/test.css --content ./src/index.html --output ./dist/main.css --postcss`);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .foo {\n          color: #fff;\n        }\n      `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--help","suites":["Build command"],"updatePoint":{"line":348,"column":14,"index":12219},"line":348,"code":"  test('--help', async () => {\n    let {\n      combined\n    } = await $(`${EXECUTABLE} --help`);\n    expect(dedent(combined)).toEqual(dedent(`\n          tailwindcss v${version}\n\n          Usage:\n             tailwindcss build [options]\n\n          Options:\n             -i, --input              Input file\n             -o, --output             Output file\n             -w, --watch              Watch for changes and rebuild as needed\n             -p, --poll               Use polling instead of filesystem events when watching\n                 --content            Content paths to use for removing unused classes\n                 --postcss            Load custom PostCSS configuration\n             -m, --minify             Minify the output\n             -c, --config             Path to a custom config file\n             -h, --help               Display usage information\n        `));\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"works with all these flags: %j","suites":["Init command"],"line":372,"code":"  it.each([{\n    flags: [],\n    name: 'tailwind.config.js'\n  }, {\n    flags: ['--ts'],\n    name: 'tailwind.config.ts'\n  }, {\n    flags: ['--esm'],\n    name: 'tailwind.config.js'\n  }, {\n    flags: ['--full'],\n    name: 'tailwind.config.js'\n  }, {\n    flags: ['--ts', '--full'],\n    name: 'tailwind.config.ts'\n  }, {\n    flags: ['--esm', '--full'],\n    name: 'tailwind.config.js'\n  }])('works with all these flags: %j', async ({\n    flags,\n    name\n  }) => {\n    await removeFile(name);\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init ${flags.join(' ')}`);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      Created Tailwind CSS config file: ${name}\n      \"\n    `);\n    expect(await fileExists(name)).toBe(true);\n    let content = await readOutputFile(`../${name}`);\n    if (flags.includes('--ts') || flags.includes('--esm')) {\n      expect(content).toContain('export default');\n      expect(content).not.toContain('module.exports =');\n    } else {\n      expect(content).toContain('module.exports =');\n      expect(content).not.toContain('export default');\n    }\n    if (flags.includes('--ts')) {\n      expect(content).toContain('satisfies Config');\n    }\n    if (flags.includes('--full')) {\n      expect(content.split('\\n').length).toBeGreaterThan(50);\n    }\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--full","suites":["Init command"],"updatePoint":{"line":419,"column":14,"index":14432},"line":419,"code":"  test('--full', async () => {\n    cleanupFile('full.config.js');\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init full.config.js --full`);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      Created Tailwind CSS config file: full.config.js\n      \"\n    `);\n\n    // Not a clean way to test this. We could require the file and verify that\n    // multiple keys in `theme` exists. However it loads `tailwindcss/colors`\n    // which doesn't exists in this context.\n    expect((await readOutputFile('../full.config.js')).split('\\n').length).toBeGreaterThan(50);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--postcss","suites":["Init command"],"updatePoint":{"line":435,"column":17,"index":15016},"line":435,"code":"  test('--postcss', async () => {\n    expect(await fileExists('postcss.config.js')).toBe(true);\n    await removeFile('postcss.config.js');\n    expect(await fileExists('postcss.config.js')).toBe(false);\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init --postcss`);\n    expect(await fileExists('postcss.config.js')).toBe(true);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      tailwind.config.js already exists.\n      Created PostCSS config file: postcss.config.js\n      \"\n    `);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"--help","suites":["Init command"],"updatePoint":{"line":450,"column":14,"index":15520},"line":450,"code":"  test('--help', async () => {\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init --help`);\n    expect(dedent(combined)).toEqual(dedent(`\n          tailwindcss v${version}\n\n          Usage:\n             tailwindcss init [options]\n\n          Options:\n                 --esm                Initialize configuration file as ESM\n                 --ts                 Initialize configuration file as TypeScript\n             -p, --postcss            Initialize a \\`postcss.config.js\\` file\n             -f, --full               Include the default values for all options in the generated configuration file\n             -h, --help               Display usage information\n        `));\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"ESM config is created by default in an ESM project","suites":["Init command"],"updatePoint":{"line":468,"column":58,"index":16259},"line":468,"code":"  test('ESM config is created by default in an ESM project', async () => {\n    await removeFile('tailwind.config.js');\n    let pkg = await readOutputFile('../package.json');\n    await writeInputFile('../package.json', JSON.stringify({\n      ...JSON.parse(pkg),\n      type: 'module'\n    }));\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init`);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      Created Tailwind CSS config file: tailwind.config.js\n      \"\n    `);\n    expect(await fileExists('./tailwind.config.js')).toBe(true);\n\n    // Not a clean way to test this.\n    expect(await readOutputFile('../tailwind.config.js')).toContain('export default');\n    await writeInputFile('../package.json', pkg);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"CJS config is created by default in a non-ESM project","suites":["Init command"],"updatePoint":{"line":489,"column":61,"index":16991},"line":489,"code":"  test('CJS config is created by default in a non-ESM project', async () => {\n    await removeFile('tailwind.config.js');\n    let pkg = await readOutputFile('../package.json');\n    await writeInputFile('../package.json', JSON.stringify({\n      ...JSON.parse(pkg)\n    }));\n    let {\n      combined\n    } = await $(`${EXECUTABLE} init`);\n    expect(combined).toMatchInlineSnapshot(`\n      \"\n      Created Tailwind CSS config file: tailwind.config.js\n      \"\n    `);\n    expect(await fileExists('./tailwind.config.js')).toBe(true);\n\n    // Not a clean way to test this.\n    expect(await readOutputFile('../tailwind.config.js')).toContain('module.exports');\n    await writeInputFile('../package.json', pkg);\n  });","file":"cli.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should be possible to generate tailwind output","suites":["static build"],"updatePoint":{"line":22,"column":52,"index":440},"line":22,"code":"  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should be possible to pipe in data","suites":["static build"],"updatePoint":{"line":35,"column":40,"index":849},"line":35,"code":"  it('should be possible to pipe in data', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('cat ./src/index.css | node ../../lib/cli.js -i - -o ./dist/main.css', {\n      shell: true,\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should safelist a list of classes to always include","suites":["static build"],"updatePoint":{"line":49,"column":57,"index":1302},"line":49,"code":"  it('should safelist a list of classes to always include', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await writeInputFile('../tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            files: ['./src/index.html'],\n          },\n          safelist: ['flex','block'],\n          theme: {\n            extend: {\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .block {\n          display: block;\n        }\n\n        .flex {\n          display: flex;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"can use a tailwind.config.js configuration file with ESM syntax","suites":["static build"],"updatePoint":{"line":86,"column":69,"index":2228},"line":86,"code":"  it('can use a tailwind.config.js configuration file with ESM syntax', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"can use a tailwind.config.ts configuration file","suites":["static build"],"updatePoint":{"line":120,"column":53,"index":3177},"line":120,"code":"  it('can use a tailwind.config.ts configuration file', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.ts', javascript`\n        import type { Config } from 'tailwindcss'\n\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        } satisfies Config\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"can read from a config file from an @config directive","suites":["static build"],"updatePoint":{"line":156,"column":59,"index":4200},"line":156,"code":"  it('can read from a config file from an @config directive', async () => {\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @config \"./tailwind.config.js\";\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"can read from a config file from an @config directive inside an @import from postcss-import","suites":["static build"],"updatePoint":{"line":193,"column":97,"index":5245},"line":193,"code":"  it('can read from a config file from an @config directive inside an @import from postcss-import', async () => {\n    await fs.promises.mkdir('./src/config', {\n      recursive: true\n    });\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('config/myconfig.css', css`\n        @config \"../tailwind.config.js\";\n      `);\n    await writeInputFile('index.css', css`\n        @import './config/myconfig';\n        @import 'tailwindcss/base';\n        @import 'tailwindcss/components';\n        @import 'tailwindcss/utilities';\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should work with raw content","suites":["static build"],"updatePoint":{"line":236,"column":34,"index":6440},"line":236,"code":"  it('should work with raw content', async () => {\n    await writeInputFile('../tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            files: [{ raw: 'flex'}],\n          },\n          theme: {\n            extend: {\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    await $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css', {\n      env: {\n        NODE_ENV: 'production'\n      }\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .flex {\n          display: flex;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"classes are generated when the html file changes","suites":["watcher"],"updatePoint":{"line":265,"column":56,"index":7152},"line":265,"code":"  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"flex\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .flex {\n          display: flex;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"classes are generated when globbed files change","suites":["watcher"],"updatePoint":{"line":299,"column":55,"index":8287},"line":299,"code":"  test('classes are generated when globbed files change', async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"flex\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .flex {\n          display: flex;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"@layers are replaced and cleaned when the html file changes","suites":["watcher"],"updatePoint":{"line":333,"column":67,"index":9449},"line":333,"code":"  test('@layers are replaced and cleaned when the html file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer base {\n          html {\n            scroll-behavior: smooth;\n          }\n        }\n      `);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n      @layer base {\n        html {\n          scroll-behavior: smooth;\n        }\n      }\n    `);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"classes are generated when the tailwind.config.js file changes","suites":["watcher"],"updatePoint":{"line":372,"column":70,"index":10636},"line":372,"code":"  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"classes are generated when the index.css file changes","suites":["watcher"],"updatePoint":{"line":418,"column":61,"index":12010},"line":418,"code":"  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded flex px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n          display: flex;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"listens for changes to the @config directive","suites":["watcher"],"updatePoint":{"line":472,"column":52,"index":13518},"line":472,"code":"  test('listens for changes to the @config directive', async () => {\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @config \"./tailwind.config.js\";\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await writeInputFile('tailwind.2.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 10\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @config \"./tailwind.2.config.js\";\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 10;\n        }\n      `);\n    await writeInputFile('tailwind.2.config.js', javascript`\n        module.exports = {\n          content: {\n            relative: true,\n            files: ['./index.html'],\n          },\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 20\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 20;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"classes are generated (and kept) when the index.html file changes (and removed when css/config files are changed)","suites":["watcher"],"updatePoint":{"line":561,"column":121,"index":15960},"line":561,"code":"  test('classes are generated (and kept) when the index.html file changes (and removed when css/config files are changed)', async () => {\n    let runningProcess = $('node ../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w');\n\n    // Start with a simple single class\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n\n    // Add another class\n    await writeInputFile('index.html', html`<div class=\"flex font-bold\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .flex {\n          display: flex;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n\n    // Remove a class, because of performance reasons both classes will still be in the css file\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .flex {\n          display: flex;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n\n    // Save the index.css file, this should trigger a fresh context\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await runningProcess.onStderr(ready);\n\n    // Only 1 class should stay, because we started from scratch\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n\n    // Add another class\n    await writeInputFile('index.html', html`<div class=\"flex font-bold\"></div>`);\n    await runningProcess.onStderr(ready);\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .flex {\n          display: flex;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n\n    // Remove a class, because of performance reasons both classes will still be in the css file\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await runningProcess.onStderr(ready);\n\n    // If everything goes right, then both classes should still be here (because of the performance\n    // improvement). If we didn't solve the bug where from now on every save is a fresh context\n    // then this only has 1 class. So let's hope there are 2!\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .flex {\n          display: flex;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should detect classes in existing files","suites":["watcher","auto content"],"updatePoint":{"line":656,"column":47,"index":18928},"line":656,"code":"    it('should detect classes in existing files', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should detect changes in existing files","suites":["watcher","auto content"],"updatePoint":{"line":674,"column":47,"index":19603},"line":674,"code":"    it('should detect changes in existing files', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .underline {\n            text-decoration-line: underline;\n          }\n        `);\n\n      // Make a change\n\n      await writeInputFile('index.html', html`<div class=\"underline\"></div>`);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .underline {\n            text-decoration-line: underline;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should detect changes in new files in existing folders with a known extension","suites":["watcher","auto content"],"updatePoint":{"line":707,"column":85,"index":20782},"line":707,"code":"    it('should detect changes in new files in existing folders with a known extension', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .underline {\n            text-decoration-line: underline;\n          }\n        `);\n\n      // Make a change to a new file in an existing folder with a known extension.\n\n      await writeInputFile('other.html', html`<div class=\"underline\"></div>`);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .underline {\n            text-decoration-line: underline;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should not scan ignored files","suites":["watcher","auto content"],"updatePoint":{"line":740,"column":37,"index":21973},"line":740,"code":"    it('should not scan ignored files', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('../.gitignore', 'generated-folder/');\n      await writeInputFile('../generated-folder/bad.html', html`<div class=\"italic\"></div>`);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .italic {\n            font-style: italic;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should not scan for known binary files","suites":["watcher","auto content"],"updatePoint":{"line":765,"column":46,"index":22952},"line":765,"code":"    it('should not scan for known binary files', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('example-1.png', html`<div class=\"italic\"></div>`);\n      await writeInputFile('example-2.mp4', html`<div class=\"underline\"></div>`);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .italic {\n            font-style: italic;\n          }\n\n          .underline {\n            text-decoration-line: underline;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should not scan for explicitly ignored extensions (such as css/scss/less/...)","suites":["watcher","auto content"],"updatePoint":{"line":794,"column":85,"index":24052},"line":794,"code":"    it('should not scan for explicitly ignored extensions (such as css/scss/less/...)', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('example.css', html`<div class=\"italic\"></div>`);\n      await writeInputFile('example.less', html`<div class=\"underline\"></div>`);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .italic {\n            font-style: italic;\n          }\n\n          .underline {\n            text-decoration-line: underline;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should not scan for explicitly ignored files (such as package-lock.json)","suites":["watcher","auto content"],"updatePoint":{"line":823,"column":80,"index":25144},"line":823,"code":"    it('should not scan for explicitly ignored files (such as package-lock.json)', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('package-lock.json', html`<div class=\"italic\"></div>`);\n      await writeInputFile('yarn.lock', html`<div class=\"italic\"></div>`);\n      await writeInputFile('pnpm-lock.yaml', html`<div class=\"italic\"></div>`);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .italic {\n            font-style: italic;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should not include the tailwind.config.js file as a template file","suites":["watcher","auto content"],"updatePoint":{"line":849,"column":73,"index":26228},"line":849,"code":"    it('should not include the tailwind.config.js file as a template file', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          // Example class that should not be included: flex italic\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .font-bold {\n            font-weight: 700;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .flex {\n            display: flex;\n          }\n        `);\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .italic {\n            font-style: italic;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should optimize the globs and ensure that nested ignored folders are not scanned","suites":["watcher","auto content"],"updatePoint":{"line":878,"column":88,"index":27295},"line":878,"code":"    it('should optimize the globs and ensure that nested ignored folders are not scanned', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('../.gitignore', 'node_modules');\n      await writeInputFile('../node_modules/a.html', html`<div class=\"z-10\"></div>`);\n      await writeInputFile('index.html', html`<div class=\"z-20\"></div>`);\n      await writeInputFile('nested/index.html', html`<div class=\"z-30\"></div>`);\n      await writeInputFile('nested/node_modules/index.html', html`<div class=\"z-40\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n\n      // Root node_modules\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .z-10 {\n            z-index: 10;\n          }\n        `);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .z-20 {\n            z-index: 20;\n          }\n        `);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .z-30 {\n            z-index: 30;\n          }\n        `);\n\n      // Nested node_modules\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .z-40 {\n            z-index: 40;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should use auto content when content is explicitly set to 'auto'","suites":["watcher","auto content"],"updatePoint":{"line":919,"column":72,"index":28764},"line":919,"code":"    it(\"should use auto content when content is explicitly set to 'auto'\", async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: 'auto',\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('../.gitignore', 'node_modules');\n      await writeInputFile('../node_modules/a.html', html`<div class=\"z-10\"></div>`);\n      await writeInputFile('index.html', html`<div class=\"z-20\"></div>`);\n      await writeInputFile('nested/index.html', html`<div class=\"z-30\"></div>`);\n      await writeInputFile('nested/node_modules/index.html', html`<div class=\"z-40\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n\n      // Root node_modules\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .z-10 {\n            z-index: 10;\n          }\n        `);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .z-20 {\n            z-index: 20;\n          }\n        `);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .z-30 {\n            z-index: 30;\n          }\n        `);\n\n      // Nested node_modules\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .z-40 {\n            z-index: 40;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should be possible to merge \"auto\" and custom defined paths","suites":["watcher","auto content"],"updatePoint":{"line":961,"column":67,"index":30257},"line":961,"code":"    it('should be possible to merge \"auto\" and custom defined paths', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['auto'], // Ignoring the library-example.html file for now\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await writeInputFile('../.gitignore', 'node_modules');\n      await writeInputFile('../node_modules/library-example.html', html`<div class=\"z-10\"></div>`);\n      await writeInputFile('index.html', html`<div class=\"z-20\"></div>`);\n      let runningProcess = $('node ../../../../lib/cli.js -i ./src/index.css -o ./dist/main.css -w', options);\n      await runningProcess.onStderr(ready);\n\n      // example.html should be ignored right now\n      expect(await readOutputFile('main.css')).not.toIncludeCss(css`\n          .z-10 {\n            z-index: 10;\n          }\n        `);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .z-20 {\n            z-index: 20;\n          }\n        `);\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['auto', 'node_modules/library-example.html'], // Explicitly adding the library-example.html file\n            corePlugins: {\n              preflight: false,\n            },\n          }\n        `);\n      await runningProcess.onStderr(ready);\n\n      // z-10 from `example.html` should be available now\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .z-10 {\n            z-index: 10;\n          }\n        `);\n      expect(await readOutputFile('main.css')).toIncludeCss(css`\n          .z-20 {\n            z-index: 20;\n          }\n        `);\n      return runningProcess.stop();\n    });","file":"integration.test.js","skipped":false,"dir":"integrations/tailwindcss-cli/tests"},{"name":"should be possible to generate tailwind output","suites":["static build"],"updatePoint":{"line":27,"column":52,"index":543},"line":27,"code":"  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    await $('vite build', {\n      env: {\n        NODE_ENV: 'production',\n        NO_COLOR: '1'\n      }\n    });\n    expect(await readOutputFile(/index.\\w+\\.css$/)).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/vite/tests"},{"name":"can use a tailwind.config.js configuration file with ESM syntax","suites":["static build"],"updatePoint":{"line":44,"column":69,"index":1031},"line":44,"code":"  it('can use a tailwind.config.js configuration file with ESM syntax', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"z-primary\"></div>\n      `);\n    await removeFile('tailwind.config.js');\n    await writeInputFile('tailwind.config.js', javascript`\n        export default {\n          content: ['index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('vite build', {\n      env: {\n        NODE_ENV: 'production',\n        NO_COLOR: '1'\n      }\n    });\n    expect(await readOutputFile(/index.\\w+\\.css$/)).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/vite/tests"},{"name":"can use a tailwind.config.ts configuration file","suites":["static build"],"updatePoint":{"line":77,"column":53,"index":1886},"line":77,"code":"  it('can use a tailwind.config.ts configuration file', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"z-primary\"></div>\n      `);\n    await removeFile('tailwind.config.js');\n    await writeInputFile('tailwind.config.ts', javascript`\n        import type { Config } from 'tailwindcss'\n\n        export default {\n          content: ['index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        } satisfies Config\n      `);\n    await $('vite build', {\n      env: {\n        NODE_ENV: 'production',\n        NO_COLOR: '1'\n      }\n    });\n    expect(await readOutputFile(/index.\\w+\\.css$/)).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/vite/tests"},{"name":"classes are generated when the html file changes","suites":["watcher"],"updatePoint":{"line":114,"column":56,"index":2844},"line":114,"code":"  test('classes are generated when the html file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold\"></div>\n      `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('index.html', html`<div class=\"z-0\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/vite/tests"},{"name":"classes are generated when globbed files change","suites":["watcher"],"updatePoint":{"line":155,"column":55,"index":4112},"line":155,"code":"  test('classes are generated when globbed files change', async () => {\n    await writeInputFile('index.html', html` <link rel=\"stylesheet\" href=\"./index.css\" /> `);\n    await writeInputFile('glob/index.html', html` <div class=\"font-bold\"></div> `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await appendToInputFile('glob/index.html', html`<div class=\"z-0\"></div>`);\n    await runningProcess.onStdout(message => message.includes('page reload'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/vite/tests"},{"name":"classes are generated when the tailwind.config.js file changes","suites":["watcher"],"updatePoint":{"line":194,"column":70,"index":5437},"line":194,"code":"  test('classes are generated when the tailwind.config.js file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"font-bold md:font-medium\"></div>\n      `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await writeInputFile('tailwind.config.js', javascript`\n        module.exports = {\n          content: ['./index.html'],\n          theme: {\n            extend: {\n              screens: {\n                md: '800px'\n              },\n              fontWeight: {\n                bold: 'bold'\n              }\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    await runningProcess.onStdout(message => message.includes('[vite]'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/vite/tests"},{"name":"classes are generated when the index.css file changes","suites":["watcher"],"updatePoint":{"line":247,"column":61,"index":6882},"line":247,"code":"  test('classes are generated when the index.css file changes', async () => {\n    await writeInputFile('index.html', html`\n        <link rel=\"stylesheet\" href=\"./index.css\" />\n        <div class=\"btn font-bold\"></div>\n      `);\n    let runningProcess = $(`vite --port ${PORT}`, {\n      env: {\n        NO_COLOR: '1'\n      }\n    });\n    await runningProcess.onStdout(message => message.includes('ready in'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStdout(message => message.includes('hmr update /index.css'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n\n        @layer components {\n          .btn {\n            @apply rounded z-0 px-2 py-1;\n          }\n        }\n      `);\n    await runningProcess.onStdout(message => message.includes('hmr update /index.css'));\n    expect(await fetchCSS()).toIncludeCss(css`\n        .btn {\n          z-index: 0;\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/vite/tests"},{"name":"should be possible to generate tailwind output","suites":["static build"],"updatePoint":{"line":19,"column":52,"index":378},"line":19,"code":"  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-4/tests"},{"name":"can use a tailwind.config.js configuration file with ESM syntax","suites":["static build"],"updatePoint":{"line":28,"column":69,"index":721},"line":28,"code":"  it('can use a tailwind.config.js configuration file with ESM syntax', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-4/tests"},{"name":"can use a tailwind.config.ts configuration file","suites":["static build"],"updatePoint":{"line":58,"column":53,"index":1576},"line":58,"code":"  it('can use a tailwind.config.ts configuration file', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.ts', javascript`\n        import type { Config } from 'tailwindcss'\n\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        } satisfies Config\n      `);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-4/tests"},{"name":"classes are generated when the html file changes","suites":["watcher"],"updatePoint":{"line":92,"column":56,"index":2534},"line":92,"code":"  test(`classes are generated when the html file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"z-0\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-4/tests"},{"name":"classes are generated when globbed files change","suites":["watcher"],"updatePoint":{"line":128,"column":55,"index":3699},"line":128,"code":"  test(`classes are generated when globbed files change`, async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('glob/index.html', html`<div class=\"z-0\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-4/tests"},{"name":"classes are generated when the tailwind.config.js file changes","suites":["watcher"],"updatePoint":{"line":164,"column":70,"index":4894},"line":164,"code":"  test(`classes are generated when the tailwind.config.js file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-4/tests"},{"name":"classes are generated when the index.css file changes","suites":["watcher"],"updatePoint":{"line":211,"column":61,"index":6275},"line":211,"code":"  test(`classes are generated when the index.css file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded z-0 px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          z-index: 0;\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-4/tests"},{"name":"should be possible to generate tailwind output","suites":["static build"],"updatePoint":{"line":19,"column":52,"index":378},"line":19,"code":"  it('should be possible to generate tailwind output', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"can use a tailwind.config.js configuration file with ESM syntax","suites":["static build"],"updatePoint":{"line":28,"column":69,"index":721},"line":28,"code":"  it('can use a tailwind.config.js configuration file with ESM syntax', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.js', javascript`\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      `);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"can use a tailwind.config.ts configuration file","suites":["static build"],"updatePoint":{"line":58,"column":53,"index":1576},"line":58,"code":"  it('can use a tailwind.config.ts configuration file', async () => {\n    await removeFile('tailwind.config.js');\n    await writeInputFile('index.html', html`<div class=\"z-primary\"></div>`);\n    await writeInputFile('index.css', css`\n        @tailwind base;\n        @tailwind components;\n        @tailwind utilities;\n      `);\n    await writeInputFile('../tailwind.config.ts', javascript`\n        import type { Config } from 'tailwindcss'\n\n        export default {\n          content: ['./src/index.html'],\n          theme: {\n            extend: {\n              zIndex: {\n                primary: 0,\n              },\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n        } satisfies Config\n      `);\n    await $('webpack --mode=production');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-primary {\n          z-index: 0;\n        }\n      `);\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"classes are generated when the html file changes","suites":["watcher"],"updatePoint":{"line":92,"column":56,"index":2534},"line":92,"code":"  test(`classes are generated when the html file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"z-0\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"classes are generated when globbed files change","suites":["watcher"],"updatePoint":{"line":128,"column":55,"index":3699},"line":128,"code":"  test(`classes are generated when globbed files change`, async () => {\n    await writeInputFile('glob/index.html', html`<div class=\"font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('glob/index.html', html`<div class=\"font-normal\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await appendToInputFile('index.html', html`<div class=\"z-0\"></div>`);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n        .font-normal {\n          font-weight: 400;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"classes are generated when the tailwind.config.js file changes","suites":["watcher"],"updatePoint":{"line":164,"column":70,"index":4889},"line":164,"code":"  test(`classes are generated when the tailwind.config.js file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold md:font-medium\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n        @media (min-width: 768px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('../tailwind.config.js', javascript`\n          module.exports = {\n            content: ['./src/index.html'],\n            theme: {\n              extend: {\n                screens: {\n                  md: '800px'\n                },\n                fontWeight: {\n                  bold: 'bold'\n                }\n              },\n            },\n            corePlugins: {\n              preflight: false,\n            },\n            plugins: [],\n          }\n      `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: bold;\n        }\n        @media (min-width: 800px) {\n          .md\\:font-medium {\n            font-weight: 500;\n          }\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"classes are generated when the index.css file changes","suites":["watcher"],"updatePoint":{"line":211,"column":61,"index":6270},"line":211,"code":"  test(`classes are generated when the index.css file changes`, async () => {\n    await writeInputFile('index.html', html`<div class=\"btn font-bold\"></div>`);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    await waitForOutputFileChange('main.css', async () => {\n      await writeInputFile('index.css', css`\n          @tailwind base;\n          @tailwind components;\n          @tailwind utilities;\n\n          @layer components {\n            .btn {\n              @apply rounded z-0 px-2 py-1;\n            }\n          }\n        `);\n    });\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .btn {\n          z-index: 0;\n          border-radius: 0.25rem;\n          padding: 0.25rem 0.5rem;\n        }\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"should safelist a list of classes to always include","suites":["watcher"],"updatePoint":{"line":268,"column":57,"index":7851},"line":268,"code":"  it('should safelist a list of classes to always include', async () => {\n    await writeInputFile('index.html', html`<div class=\"font-bold\"></div>`);\n    await writeInputFile('../tailwind.config.js', javascript`\n        module.exports = {\n          content: {\n            files: ['./src/index.html'],\n          },\n          safelist: ['z-0', 'z-10'],\n          theme: {\n            extend: {\n            },\n          },\n          corePlugins: {\n            preflight: false,\n          },\n          plugins: [],\n        }\n      `);\n    let runningProcess = $('webpack --mode=development --watch');\n    await waitForOutputFileCreation('main.css');\n    expect(await readOutputFile('main.css')).toIncludeCss(css`\n        .z-0 {\n          z-index: 0;\n        }\n\n        .z-10 {\n          z-index: 10;\n        }\n\n        .font-bold {\n          font-weight: 700;\n        }\n      `);\n    return runningProcess.stop();\n  });","file":"integration.test.js","skipped":false,"dir":"integrations/webpack-5/tests"},{"name":"basic","suites":[],"updatePoint":{"line":2,"column":11,"index":57},"line":2,"code":"test('basic', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"animate-spin\"></div>\n          <div class=\"hover:animate-ping\"></div>\n          <div class=\"group-hover:animate-bounce\"></div>\n        `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      .animate-spin {\n        animation: 1s linear infinite spin;\n      }\n      @keyframes ping {\n        75%,\n        100% {\n          opacity: 0;\n          transform: scale(2);\n        }\n      }\n      .hover\\:animate-ping:hover {\n        animation: 1s cubic-bezier(0, 0, 0.2, 1) infinite ping;\n      }\n      @keyframes bounce {\n        0%,\n        100% {\n          animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n          transform: translateY(-25%);\n        }\n        50% {\n          animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n          transform: none;\n        }\n      }\n      .group:hover .group-hover\\:animate-bounce {\n        animation: 1s infinite bounce;\n      }\n    `);\n  });\n});","file":"animations.test.js","skipped":false,"dir":"tests"},{"name":"custom","suites":[],"updatePoint":{"line":49,"column":12,"index":1212},"line":49,"code":"test('custom', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"animate-one\"></div>`\n    }],\n    theme: {\n      extend: {\n        keyframes: {\n          one: {\n            to: {\n              transform: 'rotate(360deg)'\n            }\n          }\n        },\n        animation: {\n          one: 'one 2s'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes one {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      .animate-one {\n        animation: 2s one;\n      }\n    `);\n  });\n});","file":"animations.test.js","skipped":false,"dir":"tests"},{"name":"custom prefixed","suites":[],"updatePoint":{"line":82,"column":21,"index":1846},"line":82,"code":"test('custom prefixed', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: `<div class=\"tw-animate-one\"></div>`\n    }],\n    theme: {\n      extend: {\n        keyframes: {\n          one: {\n            to: {\n              transform: 'rotate(360deg)'\n            }\n          }\n        },\n        animation: {\n          one: 'one 2s'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes tw-one {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      .tw-animate-one {\n        animation: 2s tw-one;\n      }\n    `);\n  });\n});","file":"animations.test.js","skipped":false,"dir":"tests"},{"name":"multiple","suites":[],"updatePoint":{"line":116,"column":14,"index":2500},"line":116,"code":"test('multiple', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"animate-multiple\"></div>`\n    }],\n    theme: {\n      extend: {\n        animation: {\n          multiple: 'bounce 2s linear, pulse 3s ease-in'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes bounce {\n        0%,\n        100% {\n          animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n          transform: translateY(-25%);\n        }\n        50% {\n          animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n          transform: none;\n        }\n      }\n      @keyframes pulse {\n        50% {\n          opacity: 0.5;\n        }\n      }\n      .animate-multiple {\n        animation: 2s linear bounce, 3s ease-in pulse;\n      }\n    `);\n  });\n});","file":"animations.test.js","skipped":false,"dir":"tests"},{"name":"multiple custom","suites":[],"updatePoint":{"line":153,"column":21,"index":3351},"line":153,"code":"test('multiple custom', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"animate-multiple\"></div>`\n    }],\n    theme: {\n      extend: {\n        keyframes: {\n          one: {\n            to: {\n              transform: 'rotate(360deg)'\n            }\n          },\n          two: {\n            to: {\n              transform: 'scale(1.23)'\n            }\n          }\n        },\n        animation: {\n          multiple: 'one 2s, two 3s'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes one {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      @keyframes two {\n        to {\n          transform: scale(1.23);\n        }\n      }\n      .animate-multiple {\n        animation: 2s one, 3s two;\n      }\n    `);\n  });\n});","file":"animations.test.js","skipped":false,"dir":"tests"},{"name":"with dots in the name","suites":[],"updatePoint":{"line":196,"column":27,"index":4211},"line":196,"code":"test('with dots in the name', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"animate-zoom-0.5\"></div>\n          <div class=\"animate-zoom-1.5\"></div>\n        `\n    }],\n    theme: {\n      extend: {\n        keyframes: {\n          'zoom-0.5': {\n            to: {\n              transform: 'scale(0.5)'\n            }\n          },\n          'zoom-1.5': {\n            to: {\n              transform: 'scale(1.5)'\n            }\n          }\n        },\n        animation: {\n          'zoom-0.5': 'zoom-0.5 2s',\n          'zoom-1.5': 'zoom-1.5 2s'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes zoom-0\\.5 {\n        to {\n          transform: scale(0.5);\n        }\n      }\n\n      .animate-zoom-0\\.5 {\n        animation: 2s zoom-0\\.5;\n      }\n\n      @keyframes zoom-1\\.5 {\n        to {\n          transform: scale(1.5);\n        }\n      }\n\n      .animate-zoom-1\\.5 {\n        animation: 2s zoom-1\\.5;\n      }\n    `);\n  });\n});","file":"animations.test.js","skipped":false,"dir":"tests"},{"name":"with dots in the name and prefix","suites":[],"updatePoint":{"line":249,"column":38,"index":5271},"line":249,"code":"test('with dots in the name and prefix', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`\n          <div class=\"tw-animate-zoom-.5\"></div>\n          <div class=\"tw-animate-zoom-1.5\"></div>\n        `\n    }],\n    theme: {\n      extend: {\n        keyframes: {\n          'zoom-.5': {\n            to: {\n              transform: 'scale(0.5)'\n            }\n          },\n          'zoom-1.5': {\n            to: {\n              transform: 'scale(1.5)'\n            }\n          }\n        },\n        animation: {\n          'zoom-.5': 'zoom-.5 2s',\n          'zoom-1.5': 'zoom-1.5 2s'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes tw-zoom-\\.5 {\n        to {\n          transform: scale(0.5);\n        }\n      }\n      .tw-animate-zoom-\\.5 {\n        animation: 2s tw-zoom-\\.5;\n      }\n      @keyframes tw-zoom-1\\.5 {\n        to {\n          transform: scale(1.5);\n        }\n      }\n      .tw-animate-zoom-1\\.5 {\n        animation: 2s tw-zoom-1\\.5;\n      }\n    `);\n  });\n});","file":"animations.test.js","skipped":false,"dir":"tests"},{"name":"any types are set on correct plugins","suites":[],"updatePoint":{"line":18,"column":42,"index":706},"line":18,"code":"test('any types are set on correct plugins', () => {\n  let config = {\n    future: {\n      logicalSiblingUtilities: false,\n      disableColorOpacityUtilitiesByDefault: false\n    },\n    content: [{\n      raw: html`\n          <div class=\"inset-[var(--any-value)]\"></div>\n          <div class=\"inset-x-[var(--any-value)]\"></div>\n          <div class=\"inset-y-[var(--any-value)]\"></div>\n          <div class=\"top-[var(--any-value)]\"></div>\n          <div class=\"right-[var(--any-value)]\"></div>\n          <div class=\"bottom-[var(--any-value)]\"></div>\n          <div class=\"left-[var(--any-value)]\"></div>\n          <div class=\"z-[var(--any-value)]\"></div>\n          <div class=\"order-[var(--any-value)]\"></div>\n          <div class=\"col-[var(--any-value)]\"></div>\n          <div class=\"col-start-[var(--any-value)]\"></div>\n          <div class=\"col-end-[var(--any-value)]\"></div>\n          <div class=\"row-[var(--any-value)]\"></div>\n          <div class=\"row-start-[var(--any-value)]\"></div>\n          <div class=\"row-end-[var(--any-value)]\"></div>\n          <div class=\"m-[var(--any-value)]\"></div>\n          <div class=\"mx-[var(--any-value)]\"></div>\n          <div class=\"my-[var(--any-value)]\"></div>\n          <div class=\"mt-[var(--any-value)]\"></div>\n          <div class=\"mr-[var(--any-value)]\"></div>\n          <div class=\"mb-[var(--any-value)]\"></div>\n          <div class=\"ml-[var(--any-value)]\"></div>\n          <div class=\"aspect-[var(--any-value)]\"></div>\n          <div class=\"h-[var(--any-value)]\"></div>\n          <div class=\"max-h-[var(--any-value)]\"></div>\n          <div class=\"min-h-[var(--any-value)]\"></div>\n          <div class=\"w-[var(--any-value)]\"></div>\n          <div class=\"max-w-[var(--any-value)]\"></div>\n          <div class=\"min-w-[var(--any-value)]\"></div>\n          <div class=\"flex-[var(--any-value)]\"></div>\n          <div class=\"flex-shrink-[var(--any-value)]\"></div>\n          <div class=\"shrink-[var(--any-value)]\"></div>\n          <div class=\"flex-grow-[var(--any-value)]\"></div>\n          <div class=\"grow-[var(--any-value)]\"></div>\n          <div class=\"basis-[var(--any-value)]\"></div>\n          <div class=\"border-spacing-[var(--any-value)]\"></div>\n          <div class=\"border-spacing-x-[var(--any-value)]\"></div>\n          <div class=\"border-spacing-y-[var(--any-value)]\"></div>\n          <div class=\"origin-[var(--any-value)]\"></div>\n          <div class=\"translate-x-[var(--any-value)]\"></div>\n          <div class=\"translate-y-[var(--any-value)]\"></div>\n          <div class=\"rotate-[var(--any-value)]\"></div>\n          <div class=\"skew-[var(--any-value)]\"></div>\n          <div class=\"scale-[var(--any-value)]\"></div>\n          <div class=\"scale-x-[var(--any-value)]\"></div>\n          <div class=\"scale-y-[var(--any-value)]\"></div>\n          <div class=\"animate-[var(--any-value)]\"></div>\n          <div class=\"cursor-[var(--any-value)]\"></div>\n          <div class=\"scroll-m-[var(--any-value)]\"></div>\n          <div class=\"scroll-mx-[var(--any-value)]\"></div>\n          <div class=\"scroll-my-[var(--any-value)]\"></div>\n          <div class=\"scroll-mt-[var(--any-value)]\"></div>\n          <div class=\"scroll-mr-[var(--any-value)]\"></div>\n          <div class=\"scroll-mb-[var(--any-value)]\"></div>\n          <div class=\"scroll-ml-[var(--any-value)]\"></div>\n          <div class=\"scroll-p-[var(--any-value)]\"></div>\n          <div class=\"scroll-px-[var(--any-value)]\"></div>\n          <div class=\"scroll-py-[var(--any-value)]\"></div>\n          <div class=\"scroll-pt-[var(--any-value)]\"></div>\n          <div class=\"scroll-pr-[var(--any-value)]\"></div>\n          <div class=\"scroll-pb-[var(--any-value)]\"></div>\n          <div class=\"scroll-pl-[var(--any-value)]\"></div>\n          <div class=\"list-[var(--any-value)]\"></div>\n          <div class=\"columns-[var(--any-value)]\"></div>\n          <div class=\"auto-cols-[var(--any-value)]\"></div>\n          <div class=\"auto-rows-[var(--any-value)]\"></div>\n          <div class=\"grid-cols-[var(--any-value)]\"></div>\n          <div class=\"grid-rows-[var(--any-value)]\"></div>\n          <div class=\"gap-[var(--any-value)]\"></div>\n          <div class=\"gap-x-[var(--any-value)]\"></div>\n          <div class=\"gap-y-[var(--any-value)]\"></div>\n          <div class=\"space-x-[var(--any-value)]\"></div>\n          <div class=\"space-y-[var(--any-value)]\"></div>\n          <div class=\"divide-[var(--any-value)]\"></div>\n          <div class=\"divide-y-[var(--any-value)]\"></div>\n          <div class=\"divide-y-[var(--any-value)]\"></div>\n          <div class=\"divide-opacity-[var(--any-value)]\"></div>\n          <div class=\"rounded-[var(--any-value)]\"></div>\n          <div class=\"rounded-t-[var(--any-value)]\"></div>\n          <div class=\"rounded-r-[var(--any-value)]\"></div>\n          <div class=\"rounded-b-[var(--any-value)]\"></div>\n          <div class=\"rounded-l-[var(--any-value)]\"></div>\n          <div class=\"rounded-tl-[var(--any-value)]\"></div>\n          <div class=\"rounded-tr-[var(--any-value)]\"></div>\n          <div class=\"rounded-br-[var(--any-value)]\"></div>\n          <div class=\"rounded-bl-[var(--any-value)]\"></div>\n          <div class=\"border-[var(--any-value)]\"></div>\n          <div class=\"border-x-[var(--any-value)]\"></div>\n          <div class=\"border-y-[var(--any-value)]\"></div>\n          <div class=\"border-t-[var(--any-value)]\"></div>\n          <div class=\"border-r-[var(--any-value)]\"></div>\n          <div class=\"border-b-[var(--any-value)]\"></div>\n          <div class=\"border-l-[var(--any-value)]\"></div>\n          <div class=\"border-opacity-[var(--any-value)]\"></div>\n          <div class=\"bg-[var(--any-value)]\"></div>\n          <div class=\"bg-opacity-[var(--any-value)]\"></div>\n          <div class=\"from-[var(--any-value)]\"></div>\n          <div class=\"via-[var(--any-value)]\"></div>\n          <div class=\"to-[var(--any-value)]\"></div>\n          <div class=\"fill-[var(--any-value)]\"></div>\n          <div class=\"stroke-[var(--any-value)]\"></div>\n          <div class=\"object-[var(--any-value)]\"></div>\n          <div class=\"p-[var(--any-value)]\"></div>\n          <div class=\"px-[var(--any-value)]\"></div>\n          <div class=\"py-[var(--any-value)]\"></div>\n          <div class=\"pt-[var(--any-value)]\"></div>\n          <div class=\"pr-[var(--any-value)]\"></div>\n          <div class=\"pb-[var(--any-value)]\"></div>\n          <div class=\"pl-[var(--any-value)]\"></div>\n          <div class=\"indent-[var(--any-value)]\"></div>\n          <div class=\"align-[var(--any-value)]\"></div>\n          <div class=\"text-[var(--any-value)]\"></div>\n          <div class=\"font-[var(--any-value)]\"></div>\n          <div class=\"leading-[var(--any-value)]\"></div>\n          <div class=\"tracking-[var(--any-value)]\"></div>\n          <div class=\"text-opacity-[var(--any-value)]\"></div>\n          <div class=\"decoration-[var(--any-value)]\"></div>\n          <div class=\"underline-offset-[var(--any-value)]\"></div>\n          <div class=\"placeholder-[var(--any-value)]\"></div>\n          <div class=\"placeholder-opacity-[var(--any-value)]\"></div>\n          <div class=\"caret-[var(--any-value)]\"></div>\n          <div class=\"accent-[var(--any-value)]\"></div>\n          <div class=\"opacity-[var(--any-value)]\"></div>\n          <div class=\"shadow-[var(--any-value)]\"></div>\n          <div class=\"outline-[var(--any-value)]\"></div>\n          <div class=\"outline-offset-[var(--any-value)]\"></div>\n          <div class=\"ring-[var(--any-value)]\"></div>\n          <div class=\"ring-opacity-[var(--any-value)]\"></div>\n          <div class=\"ring-offset-[var(--any-value)]\"></div>\n          <div class=\"blur-[var(--any-value)]\"></div>\n          <div class=\"brightness-[var(--any-value)]\"></div>\n          <div class=\"contrast-[var(--any-value)]\"></div>\n          <div class=\"drop-shadow-[var(--any-value)]\"></div>\n          <div class=\"grayscale-[var(--any-value)]\"></div>\n          <div class=\"hue-rotate-[var(--any-value)]\"></div>\n          <div class=\"invert-[var(--any-value)]\"></div>\n          <div class=\"saturate-[var(--any-value)]\"></div>\n          <div class=\"sepia-[var(--any-value)]\"></div>\n          <div class=\"backdrop-blur-[var(--any-value)]\"></div>\n          <div class=\"backdrop-brightness-[var(--any-value)]\"></div>\n          <div class=\"backdrop-contrast-[var(--any-value)]\"></div>\n          <div class=\"backdrop-grayscale-[var(--any-value)]\"></div>\n          <div class=\"backdrop-hue-rotate-[var(--any-value)]\"></div>\n          <div class=\"backdrop-invert-[var(--any-value)]\"></div>\n          <div class=\"backdrop-opacity-[var(--any-value)]\"></div>\n          <div class=\"backdrop-saturate-[var(--any-value)]\"></div>\n          <div class=\"backdrop-sepia-[var(--any-value)]\"></div>\n          <div class=\"transition-[var(--any-value)]\"></div>\n          <div class=\"delay-[var(--any-value)]\"></div>\n          <div class=\"duration-[var(--any-value)]\"></div>\n          <div class=\"ease-[var(--any-value)]\"></div>\n          <div class=\"will-change-[var(--any-value)]\"></div>\n          <div class=\"content-[var(--any-value)]\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .inset-\\[var\\(--any-value\\)\\] {\n        inset: var(--any-value);\n      }\n      .inset-x-\\[var\\(--any-value\\)\\] {\n        left: var(--any-value);\n        right: var(--any-value);\n      }\n      .inset-y-\\[var\\(--any-value\\)\\] {\n        top: var(--any-value);\n        bottom: var(--any-value);\n      }\n      .bottom-\\[var\\(--any-value\\)\\] {\n        bottom: var(--any-value);\n      }\n      .left-\\[var\\(--any-value\\)\\] {\n        left: var(--any-value);\n      }\n      .right-\\[var\\(--any-value\\)\\] {\n        right: var(--any-value);\n      }\n      .top-\\[var\\(--any-value\\)\\] {\n        top: var(--any-value);\n      }\n      .z-\\[var\\(--any-value\\)\\] {\n        z-index: var(--any-value);\n      }\n      .order-\\[var\\(--any-value\\)\\] {\n        order: var(--any-value);\n      }\n      .col-\\[var\\(--any-value\\)\\] {\n        grid-column: var(--any-value);\n      }\n      .col-start-\\[var\\(--any-value\\)\\] {\n        grid-column-start: var(--any-value);\n      }\n      .col-end-\\[var\\(--any-value\\)\\] {\n        grid-column-end: var(--any-value);\n      }\n      .row-\\[var\\(--any-value\\)\\] {\n        grid-row: var(--any-value);\n      }\n      .row-start-\\[var\\(--any-value\\)\\] {\n        grid-row-start: var(--any-value);\n      }\n      .row-end-\\[var\\(--any-value\\)\\] {\n        grid-row-end: var(--any-value);\n      }\n      .m-\\[var\\(--any-value\\)\\] {\n        margin: var(--any-value);\n      }\n      .mx-\\[var\\(--any-value\\)\\] {\n        margin-left: var(--any-value);\n        margin-right: var(--any-value);\n      }\n      .my-\\[var\\(--any-value\\)\\] {\n        margin-top: var(--any-value);\n        margin-bottom: var(--any-value);\n      }\n      .mb-\\[var\\(--any-value\\)\\] {\n        margin-bottom: var(--any-value);\n      }\n      .ml-\\[var\\(--any-value\\)\\] {\n        margin-left: var(--any-value);\n      }\n      .mr-\\[var\\(--any-value\\)\\] {\n        margin-right: var(--any-value);\n      }\n      .mt-\\[var\\(--any-value\\)\\] {\n        margin-top: var(--any-value);\n      }\n      .aspect-\\[var\\(--any-value\\)\\] {\n        aspect-ratio: var(--any-value);\n      }\n      .h-\\[var\\(--any-value\\)\\] {\n        height: var(--any-value);\n      }\n      .max-h-\\[var\\(--any-value\\)\\] {\n        max-height: var(--any-value);\n      }\n      .min-h-\\[var\\(--any-value\\)\\] {\n        min-height: var(--any-value);\n      }\n      .w-\\[var\\(--any-value\\)\\] {\n        width: var(--any-value);\n      }\n      .min-w-\\[var\\(--any-value\\)\\] {\n        min-width: var(--any-value);\n      }\n      .max-w-\\[var\\(--any-value\\)\\] {\n        max-width: var(--any-value);\n      }\n      .flex-\\[var\\(--any-value\\)\\] {\n        flex: var(--any-value);\n      }\n      .flex-shrink-\\[var\\(--any-value\\)\\],\n      .shrink-\\[var\\(--any-value\\)\\] {\n        flex-shrink: var(--any-value);\n      }\n      .flex-grow-\\[var\\(--any-value\\)\\],\n      .grow-\\[var\\(--any-value\\)\\] {\n        flex-grow: var(--any-value);\n      }\n      .basis-\\[var\\(--any-value\\)\\] {\n        flex-basis: var(--any-value);\n      }\n      .border-spacing-\\[var\\(--any-value\\)\\] {\n        --tw-border-spacing-x: var(--any-value);\n        --tw-border-spacing-y: var(--any-value);\n        border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y);\n      }\n      .border-spacing-x-\\[var\\(--any-value\\)\\] {\n        --tw-border-spacing-x: var(--any-value);\n        border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y);\n      }\n      .border-spacing-y-\\[var\\(--any-value\\)\\] {\n        --tw-border-spacing-y: var(--any-value);\n        border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y);\n      }\n      .origin-\\[var\\(--any-value\\)\\] {\n        transform-origin: var(--any-value);\n      }\n      .translate-x-\\[var\\(--any-value\\)\\] {\n        --tw-translate-x: var(--any-value);\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .translate-y-\\[var\\(--any-value\\)\\] {\n        --tw-translate-y: var(--any-value);\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .rotate-\\[var\\(--any-value\\)\\] {\n        --tw-rotate: var(--any-value);\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .scale-\\[var\\(--any-value\\)\\] {\n        --tw-scale-x: var(--any-value);\n        --tw-scale-y: var(--any-value);\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .scale-x-\\[var\\(--any-value\\)\\] {\n        --tw-scale-x: var(--any-value);\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .scale-y-\\[var\\(--any-value\\)\\] {\n        --tw-scale-y: var(--any-value);\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .animate-\\[var\\(--any-value\\)\\] {\n        animation: var(--any-value);\n      }\n      .cursor-\\[var\\(--any-value\\)\\] {\n        cursor: var(--any-value);\n      }\n      .scroll-m-\\[var\\(--any-value\\)\\] {\n        scroll-margin: var(--any-value);\n      }\n      .scroll-mx-\\[var\\(--any-value\\)\\] {\n        scroll-margin-left: var(--any-value);\n        scroll-margin-right: var(--any-value);\n      }\n      .scroll-my-\\[var\\(--any-value\\)\\] {\n        scroll-margin-top: var(--any-value);\n        scroll-margin-bottom: var(--any-value);\n      }\n      .scroll-mb-\\[var\\(--any-value\\)\\] {\n        scroll-margin-bottom: var(--any-value);\n      }\n      .scroll-ml-\\[var\\(--any-value\\)\\] {\n        scroll-margin-left: var(--any-value);\n      }\n      .scroll-mr-\\[var\\(--any-value\\)\\] {\n        scroll-margin-right: var(--any-value);\n      }\n      .scroll-mt-\\[var\\(--any-value\\)\\] {\n        scroll-margin-top: var(--any-value);\n      }\n      .scroll-p-\\[var\\(--any-value\\)\\] {\n        scroll-padding: var(--any-value);\n      }\n      .scroll-px-\\[var\\(--any-value\\)\\] {\n        scroll-padding-left: var(--any-value);\n        scroll-padding-right: var(--any-value);\n      }\n      .scroll-py-\\[var\\(--any-value\\)\\] {\n        scroll-padding-top: var(--any-value);\n        scroll-padding-bottom: var(--any-value);\n      }\n      .scroll-pb-\\[var\\(--any-value\\)\\] {\n        scroll-padding-bottom: var(--any-value);\n      }\n      .scroll-pl-\\[var\\(--any-value\\)\\] {\n        scroll-padding-left: var(--any-value);\n      }\n      .scroll-pr-\\[var\\(--any-value\\)\\] {\n        scroll-padding-right: var(--any-value);\n      }\n      .scroll-pt-\\[var\\(--any-value\\)\\] {\n        scroll-padding-top: var(--any-value);\n      }\n      .list-\\[var\\(--any-value\\)\\] {\n        list-style-type: var(--any-value);\n      }\n      .columns-\\[var\\(--any-value\\)\\] {\n        columns: var(--any-value);\n      }\n      .auto-cols-\\[var\\(--any-value\\)\\] {\n        grid-auto-columns: var(--any-value);\n      }\n      .auto-rows-\\[var\\(--any-value\\)\\] {\n        grid-auto-rows: var(--any-value);\n      }\n      .grid-cols-\\[var\\(--any-value\\)\\] {\n        grid-template-columns: var(--any-value);\n      }\n      .grid-rows-\\[var\\(--any-value\\)\\] {\n        grid-template-rows: var(--any-value);\n      }\n      .gap-\\[var\\(--any-value\\)\\] {\n        gap: var(--any-value);\n      }\n      .gap-x-\\[var\\(--any-value\\)\\] {\n        column-gap: var(--any-value);\n      }\n      .gap-y-\\[var\\(--any-value\\)\\] {\n        row-gap: var(--any-value);\n      }\n      .space-x-\\[var\\(--any-value\\)\\] > :not([hidden]) ~ :not([hidden]) {\n        --tw-space-x-reverse: 0;\n        margin-right: calc(var(--any-value) * var(--tw-space-x-reverse));\n        margin-left: calc(var(--any-value) * calc(1 - var(--tw-space-x-reverse)));\n      }\n      .space-y-\\[var\\(--any-value\\)\\] > :not([hidden]) ~ :not([hidden]) {\n        --tw-space-y-reverse: 0;\n        margin-top: calc(var(--any-value) * calc(1 - var(--tw-space-y-reverse)));\n        margin-bottom: calc(var(--any-value) * var(--tw-space-y-reverse));\n      }\n      .divide-y-\\[var\\(--any-value\\)\\] > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-y-reverse: 0;\n        border-top-width: calc(var(--any-value) * calc(1 - var(--tw-divide-y-reverse)));\n        border-bottom-width: calc(var(--any-value) * var(--tw-divide-y-reverse));\n      }\n      .divide-\\[var\\(--any-value\\)\\] > :not([hidden]) ~ :not([hidden]) {\n        border-color: var(--any-value);\n      }\n      .divide-opacity-\\[var\\(--any-value\\)\\] > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-opacity: var(--any-value);\n      }\n      .rounded-\\[var\\(--any-value\\)\\] {\n        border-radius: var(--any-value);\n      }\n      .rounded-b-\\[var\\(--any-value\\)\\] {\n        border-bottom-right-radius: var(--any-value);\n        border-bottom-left-radius: var(--any-value);\n      }\n      .rounded-l-\\[var\\(--any-value\\)\\] {\n        border-top-left-radius: var(--any-value);\n        border-bottom-left-radius: var(--any-value);\n      }\n      .rounded-r-\\[var\\(--any-value\\)\\] {\n        border-top-right-radius: var(--any-value);\n        border-bottom-right-radius: var(--any-value);\n      }\n      .rounded-t-\\[var\\(--any-value\\)\\] {\n        border-top-left-radius: var(--any-value);\n        border-top-right-radius: var(--any-value);\n      }\n      .rounded-bl-\\[var\\(--any-value\\)\\] {\n        border-bottom-left-radius: var(--any-value);\n      }\n      .rounded-br-\\[var\\(--any-value\\)\\] {\n        border-bottom-right-radius: var(--any-value);\n      }\n      .rounded-tl-\\[var\\(--any-value\\)\\] {\n        border-top-left-radius: var(--any-value);\n      }\n      .rounded-tr-\\[var\\(--any-value\\)\\] {\n        border-top-right-radius: var(--any-value);\n      }\n      .border-\\[var\\(--any-value\\)\\] {\n        border-color: var(--any-value);\n      }\n      .border-x-\\[var\\(--any-value\\)\\] {\n        border-left-color: var(--any-value);\n        border-right-color: var(--any-value);\n      }\n      .border-y-\\[var\\(--any-value\\)\\] {\n        border-top-color: var(--any-value);\n        border-bottom-color: var(--any-value);\n      }\n      .border-b-\\[var\\(--any-value\\)\\] {\n        border-bottom-color: var(--any-value);\n      }\n      .border-l-\\[var\\(--any-value\\)\\] {\n        border-left-color: var(--any-value);\n      }\n      .border-r-\\[var\\(--any-value\\)\\] {\n        border-right-color: var(--any-value);\n      }\n      .border-t-\\[var\\(--any-value\\)\\] {\n        border-top-color: var(--any-value);\n      }\n      .border-opacity-\\[var\\(--any-value\\)\\] {\n        --tw-border-opacity: var(--any-value);\n      }\n      .bg-\\[var\\(--any-value\\)\\] {\n        background-color: var(--any-value);\n      }\n      .bg-opacity-\\[var\\(--any-value\\)\\] {\n        --tw-bg-opacity: var(--any-value);\n      }\n      .from-\\[var\\(--any-value\\)\\] {\n        --tw-gradient-from: var(--any-value) var(--tw-gradient-from-position);\n        --tw-gradient-to: #fff0 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n      }\n      .via-\\[var\\(--any-value\\)\\] {\n        --tw-gradient-to: #fff0 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from),\n          var(--any-value) var(--tw-gradient-via-position), var(--tw-gradient-to);\n      }\n      .to-\\[var\\(--any-value\\)\\] {\n        --tw-gradient-to: var(--any-value) var(--tw-gradient-to-position);\n      }\n      .fill-\\[var\\(--any-value\\)\\] {\n        fill: var(--any-value);\n      }\n      .stroke-\\[var\\(--any-value\\)\\] {\n        stroke: var(--any-value);\n      }\n      .object-\\[var\\(--any-value\\)\\] {\n        object-position: var(--any-value);\n      }\n      .p-\\[var\\(--any-value\\)\\] {\n        padding: var(--any-value);\n      }\n      .px-\\[var\\(--any-value\\)\\] {\n        padding-left: var(--any-value);\n        padding-right: var(--any-value);\n      }\n      .py-\\[var\\(--any-value\\)\\] {\n        padding-top: var(--any-value);\n        padding-bottom: var(--any-value);\n      }\n      .pb-\\[var\\(--any-value\\)\\] {\n        padding-bottom: var(--any-value);\n      }\n      .pl-\\[var\\(--any-value\\)\\] {\n        padding-left: var(--any-value);\n      }\n      .pr-\\[var\\(--any-value\\)\\] {\n        padding-right: var(--any-value);\n      }\n      .pt-\\[var\\(--any-value\\)\\] {\n        padding-top: var(--any-value);\n      }\n      .indent-\\[var\\(--any-value\\)\\] {\n        text-indent: var(--any-value);\n      }\n      .align-\\[var\\(--any-value\\)\\] {\n        vertical-align: var(--any-value);\n      }\n      .font-\\[var\\(--any-value\\)\\] {\n        font-weight: var(--any-value);\n      }\n      .leading-\\[var\\(--any-value\\)\\] {\n        line-height: var(--any-value);\n      }\n      .tracking-\\[var\\(--any-value\\)\\] {\n        letter-spacing: var(--any-value);\n      }\n      .text-\\[var\\(--any-value\\)\\] {\n        color: var(--any-value);\n      }\n      .text-opacity-\\[var\\(--any-value\\)\\] {\n        --tw-text-opacity: var(--any-value);\n      }\n      .decoration-\\[var\\(--any-value\\)\\] {\n        -webkit-text-decoration-color: var(--any-value);\n        text-decoration-color: var(--any-value);\n      }\n      .underline-offset-\\[var\\(--any-value\\)\\] {\n        text-underline-offset: var(--any-value);\n      }\n      .placeholder-\\[var\\(--any-value\\)\\]::placeholder {\n        color: var(--any-value);\n      }\n      .placeholder-opacity-\\[var\\(--any-value\\)\\]::placeholder {\n        --tw-placeholder-opacity: var(--any-value);\n      }\n      .caret-\\[var\\(--any-value\\)\\] {\n        caret-color: var(--any-value);\n      }\n      .accent-\\[var\\(--any-value\\)\\] {\n        accent-color: var(--any-value);\n      }\n      .opacity-\\[var\\(--any-value\\)\\] {\n        opacity: var(--any-value);\n      }\n      .shadow-\\[var\\(--any-value\\)\\] {\n        --tw-shadow-color: var(--any-value);\n        --tw-shadow: var(--tw-shadow-colored);\n      }\n      .outline-offset-\\[var\\(--any-value\\)\\] {\n        outline-offset: var(--any-value);\n      }\n      .outline-\\[var\\(--any-value\\)\\] {\n        outline-color: var(--any-value);\n      }\n      .ring-\\[var\\(--any-value\\)\\] {\n        --tw-ring-color: var(--any-value);\n      }\n      .ring-opacity-\\[var\\(--any-value\\)\\] {\n        --tw-ring-opacity: var(--any-value);\n      }\n      .ring-offset-\\[var\\(--any-value\\)\\] {\n        --tw-ring-offset-color: var(--any-value);\n      }\n      .blur-\\[var\\(--any-value\\)\\] {\n        --tw-blur: blur(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .brightness-\\[var\\(--any-value\\)\\] {\n        --tw-brightness: brightness(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .contrast-\\[var\\(--any-value\\)\\] {\n        --tw-contrast: contrast(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .drop-shadow-\\[var\\(--any-value\\)\\] {\n        --tw-drop-shadow: drop-shadow(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .grayscale-\\[var\\(--any-value\\)\\] {\n        --tw-grayscale: grayscale(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .hue-rotate-\\[var\\(--any-value\\)\\] {\n        --tw-hue-rotate: hue-rotate(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .invert-\\[var\\(--any-value\\)\\] {\n        --tw-invert: invert(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .saturate-\\[var\\(--any-value\\)\\] {\n        --tw-saturate: saturate(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .sepia-\\[var\\(--any-value\\)\\] {\n        --tw-sepia: sepia(var(--any-value));\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .backdrop-blur-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-blur: blur(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-brightness-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-brightness: brightness(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-contrast-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-contrast: contrast(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-grayscale-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-grayscale: grayscale(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-hue-rotate-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-hue-rotate: hue-rotate(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-invert-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-invert: invert(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-opacity-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-opacity: opacity(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-saturate-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-saturate: saturate(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .backdrop-sepia-\\[var\\(--any-value\\)\\] {\n        --tw-backdrop-sepia: sepia(var(--any-value));\n        -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n        backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n          var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n          var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n          var(--tw-backdrop-sepia);\n      }\n      .transition-\\[var\\(--any-value\\)\\] {\n        transition-property: var(--any-value);\n        transition-duration: 0.15s;\n        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      .delay-\\[var\\(--any-value\\)\\] {\n        transition-delay: var(--any-value);\n      }\n      .duration-\\[var\\(--any-value\\)\\] {\n        transition-duration: var(--any-value);\n      }\n      .ease-\\[var\\(--any-value\\)\\] {\n        transition-timing-function: var(--any-value);\n      }\n      .will-change-\\[var\\(--any-value\\)\\] {\n        will-change: var(--any-value);\n      }\n      .content-\\[var\\(--any-value\\)\\] {\n        --tw-content: var(--any-value);\n        content: var(--tw-content);\n      }\n    `);\n  });\n});","file":"any-type.test.js","skipped":false,"dir":"tests"},{"name":"rewrite the any test to be easier to understand or break it up into multiple tests","suites":[],"line":795,"code":"test.todo('rewrite the any test to be easier to understand or break it up into multiple tests');","file":"any-type.test.js","skipped":true,"dir":"tests"},{"name":"@apply","suites":[],"updatePoint":{"line":33,"column":12,"index":1249},"line":33,"code":"test('@apply', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: sharedHtml\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .basic-example {\n        @apply rounded-md bg-blue-500 px-4 py-2;\n      }\n      .class-order {\n        @apply p-8 px-3 py-7 pt-4 pr-1;\n      }\n      .with-additional-properties {\n        font-weight: 500;\n        @apply text-right;\n      }\n      .variants {\n        @apply font-semibold hover:font-bold focus:font-medium lg:font-light xl:focus:font-black;\n      }\n      .only-variants {\n        @apply hover:font-bold focus:font-medium lg:font-light xl:focus:font-black;\n      }\n      .apply-group-variant {\n        @apply group-hover:text-center lg:group-hover:text-left;\n      }\n      .apply-dark-variant {\n        @apply dark:text-center dark:hover:text-right lg:dark:text-left;\n      }\n      .apply-custom-utility {\n        @apply custom-util hover:custom-util lg:custom-util xl:focus:custom-util;\n      }\n      .multiple,\n      .selectors {\n        @apply rounded-md bg-blue-500 px-4 py-2;\n      }\n      .multiple-variants,\n      .selectors-variants {\n        @apply hover:text-center active:text-right lg:focus:text-left;\n      }\n      .multiple-group,\n      .selectors-group {\n        @apply group-hover:text-center lg:group-hover:text-left;\n      }\n      .complex-utilities {\n        @apply ordinal tabular-nums shadow-lg hover:shadow-xl focus:diagonal-fractions;\n      }\n      .use-base-only-a {\n        @apply font-bold;\n      }\n      .use-base-only-b {\n        @apply use-base-only-a font-normal;\n      }\n      .use-dependant-only-a {\n        @apply font-bold;\n      }\n      .use-dependant-only-b {\n        @apply use-dependant-only-a font-normal;\n      }\n      .btn {\n        @apply rounded py-2 px-4 font-bold;\n      }\n      .btn-blue {\n        @apply btn bg-blue-500 text-white hover:bg-blue-700;\n      }\n      .recursive-apply-a {\n        @apply font-black sm:font-thin;\n      }\n      .recursive-apply-b {\n        @apply recursive-apply-a font-semibold md:font-extralight;\n      }\n      .recursive-apply-c {\n        @apply recursive-apply-b font-bold lg:font-light;\n      }\n      .use-with-other-properties-base {\n        color: green;\n        @apply font-bold;\n      }\n      .use-with-other-properties-component {\n        @apply use-with-other-properties-base;\n      }\n      .add-sibling-properties {\n        padding: 2rem;\n        @apply px-4 hover:px-2 lg:px-10 xl:focus:px-1;\n        padding-top: 3px;\n        @apply use-with-other-properties-base;\n      }\n\n      h1 {\n        @apply text-2xl sm:text-3xl lg:text-2xl;\n      }\n      h2 {\n        @apply text-2xl;\n        @apply lg:text-2xl;\n        @apply sm:text-2xl;\n      }\n\n      .important-modifier {\n        @apply !rounded-md px-4;\n      }\n\n      .important-modifier-variant {\n        @apply px-4 hover:!rounded-md;\n      }\n    }\n\n    @layer utilities {\n      .custom-util {\n        custom: stuff;\n      }\n\n      .foo {\n        @apply animate-spin;\n      }\n\n      .bar {\n        @apply animate-pulse !important;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .basic-example {\n        --tw-bg-opacity: 1;\n        background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n        border-radius: 0.375rem;\n        padding: 0.5rem 1rem;\n      }\n      .class-order {\n        padding: 1rem 0.25rem 1.75rem 0.75rem;\n      }\n      .with-additional-properties {\n        text-align: right;\n        font-weight: 500;\n      }\n      .variants {\n        font-weight: 600;\n      }\n      .variants:hover {\n        font-weight: 700;\n      }\n      .variants:focus {\n        font-weight: 500;\n      }\n      @media (min-width: 1024px) {\n        .variants {\n          font-weight: 300;\n        }\n      }\n      @media (min-width: 1280px) {\n        .variants:focus {\n          font-weight: 900;\n        }\n      }\n      .only-variants:hover {\n        font-weight: 700;\n      }\n      .only-variants:focus {\n        font-weight: 500;\n      }\n      @media (min-width: 1024px) {\n        .only-variants {\n          font-weight: 300;\n        }\n      }\n      @media (min-width: 1280px) {\n        .only-variants:focus {\n          font-weight: 900;\n        }\n      }\n      .group:hover .apply-group-variant {\n        text-align: center;\n      }\n      @media (min-width: 1024px) {\n        .group:hover .apply-group-variant {\n          text-align: left;\n        }\n      }\n      :is(.dark .apply-dark-variant) {\n        text-align: center;\n      }\n      :is(.dark .apply-dark-variant:hover) {\n        text-align: right;\n      }\n      @media (min-width: 1024px) {\n        :is(.dark .apply-dark-variant) {\n          text-align: left;\n        }\n      }\n      .apply-custom-utility,\n      .apply-custom-utility:hover {\n        custom: stuff;\n      }\n      @media (min-width: 1024px) {\n        .apply-custom-utility {\n          custom: stuff;\n        }\n      }\n      @media (min-width: 1280px) {\n        .apply-custom-utility:focus {\n          custom: stuff;\n        }\n      }\n      .multiple,\n      .selectors {\n        --tw-bg-opacity: 1;\n        background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n        border-radius: 0.375rem;\n        padding: 0.5rem 1rem;\n      }\n      .multiple-variants:hover,\n      .selectors-variants:hover {\n        text-align: center;\n      }\n      .multiple-variants:active,\n      .selectors-variants:active {\n        text-align: right;\n      }\n      @media (min-width: 1024px) {\n        .multiple-variants:focus,\n        .selectors-variants:focus {\n          text-align: left;\n        }\n      }\n      .group:hover .multiple-group,\n      .group:hover .selectors-group {\n        text-align: center;\n      }\n      @media (min-width: 1024px) {\n        .group:hover .multiple-group,\n        .group:hover .selectors-group {\n          text-align: left;\n        }\n      }\n      .complex-utilities {\n        --tw-ordinal: ordinal;\n        --tw-numeric-spacing: tabular-nums;\n        font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure)\n          var(--tw-numeric-spacing) var(--tw-numeric-fraction);\n        --tw-shadow: 0 10px 15px -3px #0000001a, 0 4px 6px -4px #0000001a;\n        --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color),\n          0 4px 6px -4px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .complex-utilities:hover {\n        --tw-shadow: 0 20px 25px -5px #0000001a, 0 8px 10px -6px #0000001a;\n        --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color),\n          0 8px 10px -6px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .complex-utilities:focus {\n        --tw-numeric-fraction: diagonal-fractions;\n        font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure)\n          var(--tw-numeric-spacing) var(--tw-numeric-fraction);\n      }\n      .use-base-only-a {\n        font-weight: 700;\n      }\n      .use-dependant-only-b {\n        font-weight: 400;\n      }\n      .btn {\n        border-radius: 0.25rem;\n        padding: 0.5rem 1rem;\n        font-weight: 700;\n      }\n      .btn-blue {\n        --tw-bg-opacity: 1;\n        background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n        --tw-text-opacity: 1;\n        color: rgb(255 255 255 / var(--tw-text-opacity));\n        border-radius: 0.25rem;\n        padding: 0.5rem 1rem;\n        font-weight: 700;\n      }\n      .btn-blue:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(29 78 216 / var(--tw-bg-opacity));\n      }\n      .recursive-apply-a {\n        font-weight: 900;\n      }\n      @media (min-width: 640px) {\n        .recursive-apply-a {\n          font-weight: 100;\n        }\n      }\n      @media (min-width: 640px) {\n        .recursive-apply-b {\n          font-weight: 100;\n        }\n      }\n      .recursive-apply-b {\n        font-weight: 600;\n      }\n      @media (min-width: 768px) {\n        .recursive-apply-b {\n          font-weight: 200;\n        }\n      }\n      @media (min-width: 640px) {\n        .recursive-apply-c {\n          font-weight: 100;\n        }\n      }\n      @media (min-width: 768px) {\n        .recursive-apply-c {\n          font-weight: 200;\n        }\n      }\n      .recursive-apply-c {\n        font-weight: 700;\n      }\n      @media (min-width: 1024px) {\n        .recursive-apply-c {\n          font-weight: 300;\n        }\n      }\n      .use-with-other-properties-base,\n      .use-with-other-properties-component {\n        color: green;\n        font-weight: 700;\n      }\n      .add-sibling-properties {\n        padding: 2rem 1rem;\n      }\n      .add-sibling-properties:hover {\n        padding-left: 0.5rem;\n        padding-right: 0.5rem;\n      }\n      @media (min-width: 1024px) {\n        .add-sibling-properties {\n          padding-left: 2.5rem;\n          padding-right: 2.5rem;\n        }\n      }\n      @media (min-width: 1280px) {\n        .add-sibling-properties:focus {\n          padding-left: 0.25rem;\n          padding-right: 0.25rem;\n        }\n      }\n      .add-sibling-properties {\n        color: green;\n        padding-top: 3px;\n        font-weight: 700;\n      }\n      h1 {\n        font-size: 1.5rem;\n        line-height: 2rem;\n      }\n      @media (min-width: 640px) {\n        h1 {\n          font-size: 1.875rem;\n          line-height: 2.25rem;\n        }\n      }\n      @media (min-width: 1024px) {\n        h1 {\n          font-size: 1.5rem;\n          line-height: 2rem;\n        }\n      }\n      h2 {\n        font-size: 1.5rem;\n        line-height: 2rem;\n      }\n      @media (min-width: 1024px) {\n        h2 {\n          font-size: 1.5rem;\n          line-height: 2rem;\n        }\n      }\n      @media (min-width: 640px) {\n        h2 {\n          font-size: 1.5rem;\n          line-height: 2rem;\n        }\n      }\n      .important-modifier {\n        padding-left: 1rem;\n        padding-right: 1rem;\n        border-radius: 0.375rem !important;\n      }\n      .important-modifier-variant {\n        padding-left: 1rem;\n        padding-right: 1rem;\n      }\n      .important-modifier-variant:hover {\n        border-radius: 0.375rem !important;\n      }\n      @keyframes spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      .foo {\n        animation: 1s linear infinite spin;\n      }\n      @keyframes pulse {\n        50% {\n          opacity: 0.5;\n        }\n      }\n      .bar {\n        animation: 2s cubic-bezier(0.4, 0, 0.6, 1) infinite pulse !important;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply error with unknown utility","suites":[],"updatePoint":{"line":450,"column":39,"index":11961},"line":450,"code":"test('@apply error with unknown utility', async () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: sharedHtml\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        @apply a-utility-that-does-not-exist;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError('class does not exist');\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply error with nested @screen","suites":[],"updatePoint":{"line":469,"column":38,"index":12364},"line":469,"code":"test('@apply error with nested @screen', async () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: sharedHtml\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        @screen md {\n          @apply text-black;\n        }\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError('@apply is not supported within nested at-rules like @screen');\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply error with nested @anyatrulehere","suites":[],"updatePoint":{"line":490,"column":45,"index":12827},"line":490,"code":"test('@apply error with nested @anyatrulehere', async () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: sharedHtml\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        @genie {\n          @apply text-black;\n        }\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError('@apply is not supported within nested at-rules like @genie');\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply error when using .group utility","suites":[],"updatePoint":{"line":511,"column":44,"index":13284},"line":511,"code":"test('@apply error when using .group utility', async () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: '<div class=\"foo\"></div>'\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        @apply group;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError(`@apply should not be used with the 'group' utility`);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply error when using a prefixed .group utility","suites":[],"updatePoint":{"line":530,"column":55,"index":13725},"line":530,"code":"test('@apply error when using a prefixed .group utility', async () => {\n  let config = {\n    prefix: 'tw-',\n    darkMode: 'class',\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        @apply tw-group;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError(`@apply should not be used with the 'tw-group' utility`);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply error when using .peer utility","suites":[],"updatePoint":{"line":550,"column":43,"index":14183},"line":550,"code":"test('@apply error when using .peer utility', async () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: '<div class=\"foo\"></div>'\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        @apply peer;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError(`@apply should not be used with the 'peer' utility`);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply error when using a prefixed .peer utility","suites":[],"updatePoint":{"line":569,"column":54,"index":14621},"line":569,"code":"test('@apply error when using a prefixed .peer utility', async () => {\n  let config = {\n    prefix: 'tw-',\n    darkMode: 'class',\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        @apply tw-peer;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError(`@apply should not be used with the 'tw-peer' utility`);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@apply classes from outside a @layer","suites":[],"updatePoint":{"line":589,"column":42,"index":15076},"line":589,"code":"test('@apply classes from outside a @layer', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo bar baz font-bold\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    .foo {\n      @apply font-bold;\n    }\n\n    .bar {\n      @apply foo text-red-500 hover:text-green-500;\n    }\n\n    .baz {\n      @apply bar underline;\n    }\n\n    .keep-me-even-though-I-am-not-used-in-content {\n      color: green;\n    }\n  `;\n  await run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-bold,\n      .foo {\n        font-weight: 700;\n      }\n      .bar {\n        --tw-text-opacity: 1;\n        color: rgb(239 68 68 / var(--tw-text-opacity));\n        font-weight: 700;\n      }\n      .bar:hover {\n        --tw-text-opacity: 1;\n        color: rgb(34 197 94 / var(--tw-text-opacity));\n      }\n      .baz {\n        --tw-text-opacity: 1;\n        color: rgb(239 68 68 / var(--tw-text-opacity));\n        font-weight: 700;\n        text-decoration-line: underline;\n      }\n      .baz:hover {\n        --tw-text-opacity: 1;\n        color: rgb(34 197 94 / var(--tw-text-opacity));\n      }\n      .keep-me-even-though-I-am-not-used-in-content {\n        color: green;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"@applying classes from outside a @layer respects the source order","suites":[],"updatePoint":{"line":646,"column":71,"index":16372},"line":646,"code":"test('@applying classes from outside a @layer respects the source order', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo bar baz container font-bold\"></div>`\n    }]\n  };\n  let input = css`\n    .baz {\n      @apply bar underline;\n    }\n\n    @tailwind components;\n\n    .keep-me-even-though-I-am-not-used-in-content {\n      color: green;\n    }\n\n    @tailwind utilities;\n\n    .foo {\n      @apply font-bold;\n    }\n\n    .bar {\n      @apply no-underline;\n    }\n  `;\n  await run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .baz {\n        text-decoration-line: none;\n      }\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n      .keep-me-even-though-I-am-not-used-in-content {\n        color: green;\n      }\n      .font-bold,\n      .foo {\n        font-weight: 700;\n      }\n      .bar {\n        text-decoration-line: none;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should remove duplicate properties when using apply with similar properties","suites":[],"updatePoint":{"line":719,"column":79,"index":17809},"line":719,"code":"it('should remove duplicate properties when using apply with similar properties', () => {\n  let config = {\n    content: [{\n      raw: 'foo'\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n\n    .foo {\n      @apply absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transform;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        --tw-translate-x: -50%;\n        --tw-translate-y: -50%;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n        position: absolute;\n        top: 50%;\n        left: 50%;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should apply all the definitions of a class","suites":[],"updatePoint":{"line":747,"column":47,"index":18562},"line":747,"code":"it('should apply all the definitions of a class', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer utilities {\n      .aspect-w-1 {\n        position: relative;\n      }\n\n      .aspect-w-1 {\n        --tw-aspect-w: 1;\n      }\n    }\n\n    @layer components {\n      .foo {\n        @apply aspect-w-1;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        --tw-aspect-w: 1;\n        position: relative;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should throw when trying to apply a direct circular dependency","suites":[],"updatePoint":{"line":783,"column":66,"index":19230},"line":783,"code":"it('should throw when trying to apply a direct circular dependency', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo:not(.text-red-500) {\n        @apply text-red-500;\n      }\n    }\n  `;\n  return run(input, config).catch(err => {\n    expect(err.reason).toBe('You cannot `@apply` the `text-red-500` utility here because it creates a circular dependency.');\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should throw when trying to apply an indirect circular dependency","suites":[],"updatePoint":{"line":804,"column":69,"index":19767},"line":804,"code":"it('should throw when trying to apply an indirect circular dependency', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"a\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .a {\n        @apply b;\n      }\n\n      .b {\n        @apply c;\n      }\n\n      .c {\n        @apply a;\n      }\n    }\n  `;\n  return run(input, config).catch(err => {\n    expect(err.reason).toBe('You cannot `@apply` the `a` utility here because it creates a circular dependency.');\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should not throw when the selector is different (but contains the base partially)","suites":[],"updatePoint":{"line":833,"column":85,"index":20351},"line":833,"code":"it('should not throw when the selector is different (but contains the base partially)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-gray-500\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    .focus\\:bg-gray-500 {\n      @apply bg-gray-500;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-gray-500,\n      .focus\\:bg-gray-500 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should throw when trying to apply an indirect circular dependency with a modifier (1)","suites":[],"updatePoint":{"line":858,"column":89,"index":20958},"line":858,"code":"it('should throw when trying to apply an indirect circular dependency with a modifier (1)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"a\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .a {\n        @apply b;\n      }\n\n      .b {\n        @apply c;\n      }\n\n      .c {\n        @apply hover:a;\n      }\n    }\n  `;\n  return run(input, config).catch(err => {\n    expect(err.reason).toBe('You cannot `@apply` the `hover:a` utility here because it creates a circular dependency.');\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should throw when trying to apply an indirect circular dependency with a modifier (2)","suites":[],"updatePoint":{"line":887,"column":89,"index":21558},"line":887,"code":"it('should throw when trying to apply an indirect circular dependency with a modifier (2)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"a\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .a {\n        @apply b;\n      }\n\n      .b {\n        @apply hover:c;\n      }\n\n      .c {\n        @apply a;\n      }\n    }\n  `;\n  return run(input, config).catch(err => {\n    expect(err.reason).toBe('You cannot `@apply` the `a` utility here because it creates a circular dependency.');\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should not throw when the circular dependency is part of a different selector (1)","suites":[],"updatePoint":{"line":916,"column":85,"index":22148},"line":916,"code":"it('should not throw when the circular dependency is part of a different selector (1)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"c\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      html.dark .a,\n      .b {\n        color: red;\n      }\n    }\n\n    html.dark .c {\n      @apply b;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      html.dark .c {\n        color: red;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should not throw when the circular dependency is part of a different selector (2)","suites":[],"updatePoint":{"line":945,"column":85,"index":22685},"line":945,"code":"it('should not throw when the circular dependency is part of a different selector (2)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"c\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      html.dark .a,\n      .b {\n        color: red;\n      }\n    }\n\n    html.dark .c {\n      @apply hover:b;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      html.dark .c:hover {\n        color: red;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should throw when the circular dependency is part of the same selector","suites":[],"updatePoint":{"line":974,"column":74,"index":23223},"line":974,"code":"it('should throw when the circular dependency is part of the same selector', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"c\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      html.dark .a,\n      html.dark .b {\n        color: red;\n      }\n    }\n\n    html.dark .c {\n      @apply hover:b;\n    }\n  `;\n  return run(input, config).catch(err => {\n    expect(err.reason).toBe('You cannot `@apply` the `hover:b` utility here because it creates a circular dependency.');\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"rules with vendor prefixes are still separate when optimizing defaults rules","suites":[],"updatePoint":{"line":999,"column":80,"index":23785},"line":999,"code":"it('rules with vendor prefixes are still separate when optimizing defaults rules', () => {\n  let config = {\n    experimental: {\n      optimizeUniversalDefaults: true\n    },\n    content: [{\n      raw: html`<div class=\"border\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      input[type='range']::-moz-range-thumb {\n        @apply border;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      input[type='range']::-moz-range-thumb {\n        border-width: 1px;\n      }\n      .border {\n        border-width: 1px;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply user css","suites":[],"updatePoint":{"line":1033,"column":40,"index":24492},"line":1033,"code":"it('should be possible to apply user css', () => {\n  let config = {\n    content: [{\n      raw: html`<div></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    .foo {\n      color: red;\n    }\n\n    .bar {\n      @apply foo;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .foo,\n      .bar {\n        color: red;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should not be possible to apply user css with variants","suites":[],"updatePoint":{"line":1061,"column":58,"index":24970},"line":1061,"code":"it('should not be possible to apply user css with variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    .foo {\n      color: red;\n    }\n\n    .bar {\n      @apply hover:foo;\n    }\n  `;\n  return run(input, config).catch(err => {\n    expect(err.reason).toBe('The `hover:foo` class does not exist. If `hover:foo` is a custom class, make sure it is defined within a `@layer` directive.');\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should not apply unrelated siblings when applying something from within atrules","suites":[],"updatePoint":{"line":1084,"column":83,"index":25518},"line":1084,"code":"it('should not apply unrelated siblings when applying something from within atrules', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo bar something-unrelated\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .foo {\n        font-weight: bold;\n        @apply bar;\n      }\n\n      .bar {\n        color: green;\n      }\n\n      @supports (a: b) {\n        .bar {\n          color: blue;\n        }\n\n        .something-unrelated {\n          color: red;\n        }\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        color: green;\n        font-weight: bold;\n      }\n      @supports (a: b) {\n        .foo {\n          color: #00f;\n        }\n      }\n      .bar {\n        color: green;\n      }\n      @supports (a: b) {\n        .bar {\n          color: #00f;\n        }\n        .something-unrelated {\n          color: red;\n        }\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply user css without tailwind directives","suites":[],"updatePoint":{"line":1141,"column":68,"index":26537},"line":1141,"code":"it('should be possible to apply user css without tailwind directives', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    .bop {\n      color: red;\n    }\n    .bar {\n      background-color: blue;\n    }\n    .foo {\n      @apply bar bop absolute;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .bop {\n        color: red;\n      }\n      .bar {\n        background-color: #00f;\n      }\n      .foo {\n        color: red;\n        background-color: #00f;\n        position: absolute;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply a class from another rule with multiple selectors (2 classes)","suites":[],"updatePoint":{"line":1175,"column":93,"index":27211},"line":1175,"code":"it('should be possible to apply a class from another rule with multiple selectors (2 classes)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"c\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .a,\n      .b {\n        @apply underline;\n      }\n\n      .c {\n        @apply b;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .c {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply a class from another rule with multiple selectors (1 class, 1 tag)","suites":[],"updatePoint":{"line":1203,"column":98,"index":27770},"line":1203,"code":"it('should be possible to apply a class from another rule with multiple selectors (1 class, 1 tag)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"c\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      span,\n      .b {\n        @apply underline;\n      }\n\n      .c {\n        @apply b;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      span,\n      .b,\n      .c {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply a class from another rule with multiple selectors (1 class, 1 id)","suites":[],"updatePoint":{"line":1234,"column":97,"index":28353},"line":1234,"code":"it('should be possible to apply a class from another rule with multiple selectors (1 class, 1 id)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"c\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      #a,\n      .b {\n        @apply underline;\n      }\n\n      .c {\n        @apply b;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      #a,\n      .b,\n      .c {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply multiple \"instances\" of the same class","suites":["multiple instances"],"updatePoint":{"line":1265,"column":72,"index":28945},"line":1265,"code":"  it('should be possible to apply multiple \"instances\" of the same class', () => {\n    let config = {\n      content: [{\n        raw: html``\n      }],\n      plugins: [],\n      corePlugins: {\n        preflight: false\n      }\n    };\n    let input = css`\n      .a {\n        @apply b;\n      }\n\n      .b {\n        @apply uppercase;\n      }\n\n      .b {\n        color: red;\n      }\n    `;\n    return run(input, config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        .a,\n        .b {\n          text-transform: uppercase;\n          color: red;\n        }\n      `);\n    });\n  });","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply a combination of multiple \"instances\" of the same class","suites":["multiple instances"],"updatePoint":{"line":1298,"column":89,"index":29565},"line":1298,"code":"  it('should be possible to apply a combination of multiple \"instances\" of the same class', () => {\n    let config = {\n      content: [{\n        raw: html``\n      }],\n      plugins: [],\n      corePlugins: {\n        preflight: false\n      }\n    };\n    let input = css`\n      .a {\n        @apply b;\n      }\n\n      .b {\n        @apply uppercase;\n        color: red;\n      }\n    `;\n    return run(input, config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        .a,\n        .b {\n          text-transform: uppercase;\n          color: red;\n        }\n      `);\n    });\n  });","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should generate the same output, even if it was used in a @layer","suites":["multiple instances"],"updatePoint":{"line":1328,"column":70,"index":30146},"line":1328,"code":"  it('should generate the same output, even if it was used in a @layer', () => {\n    let config = {\n      content: [{\n        raw: html`<div class=\"a b\"></div>`\n      }],\n      plugins: [],\n      corePlugins: {\n        preflight: false\n      }\n    };\n    let input = css`\n      @tailwind components;\n\n      @layer components {\n        .a {\n          @apply b;\n        }\n\n        .b {\n          @apply uppercase;\n          color: red;\n        }\n      }\n    `;\n    return run(input, config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        .a,\n        .b {\n          text-transform: uppercase;\n          color: red;\n        }\n      `);\n    });\n  });","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to apply a combination of multiple \"instances\" of the same class (defined in a layer)","suites":["multiple instances"],"updatePoint":{"line":1362,"column":110,"index":30867},"line":1362,"code":"  it('should be possible to apply a combination of multiple \"instances\" of the same class (defined in a layer)', () => {\n    let config = {\n      content: [{\n        raw: html`<div class=\"a b\"></div>`\n      }],\n      plugins: [],\n      corePlugins: {\n        preflight: false\n      }\n    };\n    let input = css`\n      @tailwind components;\n\n      @layer components {\n        .a {\n          color: red;\n          @apply b;\n          color: blue;\n        }\n\n        .b {\n          @apply text-green-500;\n          text-decoration: underline;\n        }\n      }\n    `;\n    return run(input, config).then(result => {\n      expect(result.css).toMatchFormattedCss(css`\n        .a {\n          color: #00f;\n          --tw-text-opacity: 1;\n          text-decoration: underline;\n        }\n        .b {\n          --tw-text-opacity: 1;\n          color: rgb(34 197 94 / var(--tw-text-opacity));\n          text-decoration: underline;\n        }\n      `);\n    });\n  });","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should properly maintain the order","suites":["multiple instances"],"updatePoint":{"line":1403,"column":40,"index":31750},"line":1403,"code":"  it('should properly maintain the order', () => {\n    let config = {\n      content: [{\n        raw: html``\n      }],\n      plugins: [],\n      corePlugins: {\n        preflight: false\n      }\n    };\n    let input = css`\n      h2 {\n        @apply text-xl;\n        @apply lg:text-3xl;\n        @apply sm:text-2xl;\n      }\n    `;\n    return run(input, config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        h2 {\n          font-size: 1.25rem;\n          line-height: 1.75rem;\n        }\n        @media (min-width: 1024px) {\n          h2 {\n            font-size: 1.875rem;\n            line-height: 2.25rem;\n          }\n        }\n        @media (min-width: 640px) {\n          h2 {\n            font-size: 1.5rem;\n            line-height: 2rem;\n          }\n        }\n      `);\n    });\n  });","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"apply can emit defaults in isolated environments without @tailwind directives","suites":["multiple instances"],"updatePoint":{"line":1442,"column":81,"index":32609},"line":1442,"code":"it('apply can emit defaults in isolated environments without @tailwind directives', () => {\n  let config = {\n    experimental: {\n      optimizeUniversalDefaults: true\n    },\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }]\n  };\n  let input = css`\n    .foo {\n      @apply focus:rotate-90;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .foo:focus {\n        --tw-rotate: 90deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"apply does not emit defaults in isolated environments without optimizeUniversalDefaults","suites":["multiple instances"],"updatePoint":{"line":1467,"column":91,"index":33327},"line":1467,"code":"it('apply does not emit defaults in isolated environments without optimizeUniversalDefaults', () => {\n  let config = {\n    experimental: {\n      optimizeUniversalDefaults: false\n    },\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n\n    .foo {\n      @apply focus:rotate-90;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .foo:focus {\n        --tw-rotate: 90deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should work outside of layer","suites":["multiple instances"],"updatePoint":{"line":1498,"column":32,"index":34075},"line":1498,"code":"it('should work outside of layer', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"input-text\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    .input-text {\n      @apply bg-white;\n      background-color: red;\n    }\n  `;\n  let result;\n  result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .input-text {\n      --tw-bg-opacity: 1;\n      background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n      background-color: red;\n    }\n  `);\n  result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .input-text {\n      --tw-bg-opacity: 1;\n      background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n      background-color: red;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should work in layer","suites":["multiple instances"],"updatePoint":{"line":1531,"column":24,"index":34842},"line":1531,"code":"it('should work in layer', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"input-text\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind components;\n    @layer components {\n      .input-text {\n        @apply bg-white;\n        background-color: red;\n      }\n    }\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .input-text {\n      --tw-bg-opacity: 1;\n      background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n      background-color: red;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"apply partitioning works with media queries","suites":["multiple instances"],"updatePoint":{"line":1559,"column":47,"index":35483},"line":1559,"code":"it('apply partitioning works with media queries', async () => {\n  let config = {\n    content: [{\n      raw: html``\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @layer base {\n      html,\n      body {\n        @apply text-green-600;\n        font-size: 1rem;\n      }\n\n      @media print {\n        html,\n        body {\n          @apply text-red-600;\n          font-size: 2rem;\n        }\n      }\n    }\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    html,\n    body {\n      --tw-text-opacity: 1;\n      color: rgb(22 163 74 / var(--tw-text-opacity));\n      font-size: 1rem;\n    }\n    @media print {\n      html,\n      body {\n        --tw-text-opacity: 1;\n        color: rgb(220 38 38 / var(--tw-text-opacity));\n        font-size: 2rem;\n      }\n    }\n    ${defaults}\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use apply in plugins","suites":["multiple instances"],"updatePoint":{"line":1606,"column":46,"index":36386},"line":1606,"code":"it('should be possible to use apply in plugins', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"a b\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        '.a': {\n          color: 'red'\n        },\n        '.b': {\n          '@apply a': {},\n          color: 'blue'\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .a {\n        color: red;\n      }\n      .b {\n        color: #00f;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should apply using the updated user CSS when the source has changed","suites":["multiple instances"],"updatePoint":{"line":1639,"column":71,"index":37037},"line":1639,"code":"it('should apply using the updated user CSS when the source has changed', async () => {\n  let config = {\n    content: [{\n      raw: html`<div></div>`\n    }],\n    plugins: []\n  };\n  let inputBefore = css`\n    .foo {\n      color: green;\n    }\n\n    .bar {\n      @apply foo;\n    }\n  `;\n  let inputAfter = css`\n    .foo {\n      color: red;\n    }\n\n    .bar {\n      @apply foo;\n    }\n  `;\n  let result = await run(inputBefore, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .foo,\n    .bar {\n      color: green;\n    }\n  `);\n  result = await run(inputAfter, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .foo,\n    .bar {\n      color: red;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"apply + layer utilities + selector variants (like group) + important selector","suites":["multiple instances"],"updatePoint":{"line":1679,"column":81,"index":37718},"line":1679,"code":"it('apply + layer utilities + selector variants (like group) + important selector', async () => {\n  let config = {\n    important: '#myselector',\n    content: [{\n      raw: html`<div class=\"custom-utility\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .custom-utility {\n        @apply font-normal group-hover:underline;\n      }\n    }\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    #myselector .custom-utility {\n      font-weight: 400;\n    }\n    #myselector :is(.group:hover .custom-utility) {\n      text-decoration-line: underline;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"apply + user CSS + selector variants (like group) + important selector (1)","suites":["multiple instances"],"updatePoint":{"line":1705,"column":78,"index":38375},"line":1705,"code":"it('apply + user CSS + selector variants (like group) + important selector (1)', async () => {\n  let config = {\n    important: '#myselector',\n    content: [{\n      raw: html`<div class=\"custom-utility\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    .custom-utility {\n      @apply font-normal group-hover:underline;\n    }\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .custom-utility {\n      font-weight: 400;\n    }\n    .group:hover .custom-utility {\n      text-decoration-line: underline;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"apply + user CSS + selector variants (like group) + important selector (2)","suites":["multiple instances"],"updatePoint":{"line":1728,"column":78,"index":38943},"line":1728,"code":"it('apply + user CSS + selector variants (like group) + important selector (2)', async () => {\n  let config = {\n    important: '#myselector',\n    content: [{\n      raw: html`<div class=\"custom-utility\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    #myselector .custom-utility {\n      @apply font-normal group-hover:underline;\n    }\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    #myselector .custom-utility {\n      font-weight: 400;\n    }\n    .group:hover #myselector .custom-utility {\n      text-decoration-line: underline;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"can apply user utilities that start with a dash","suites":["multiple instances"],"updatePoint":{"line":1751,"column":51,"index":39520},"line":1751,"code":"it('can apply user utilities that start with a dash', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo-1 -foo-1 new-class\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .foo-1 {\n        margin: 10px;\n      }\n      .-foo-1 {\n        margin: -15px;\n      }\n      .new-class {\n        @apply -foo-1;\n      }\n    }\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .foo-1 {\n      margin: 10px;\n    }\n    .-foo-1,\n    .new-class {\n      margin: -15px;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"can apply joined classes when using elements","suites":["multiple instances"],"updatePoint":{"line":1783,"column":48,"index":40120},"line":1783,"code":"it('can apply joined classes when using elements', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo-1 -foo-1 new-class\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    .foo.bar {\n      color: red;\n    }\n    .bar.foo {\n      color: green;\n    }\n    header:nth-of-type(odd) {\n      @apply foo;\n    }\n    header::after {\n      @apply foo;\n    }\n    main {\n      @apply foo bar;\n    }\n    footer {\n      @apply bar;\n    }\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .foo.bar {\n      color: red;\n    }\n    .bar.foo {\n      color: green;\n    }\n    header:nth-of-type(odd).bar {\n      color: red;\n    }\n    header.bar:nth-of-type(odd),\n    header.bar:after,\n    main.bar,\n    main.foo,\n    footer.foo {\n      color: green;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should not replace multiple instances of the same class in a single selector","suites":["multiple instances"],"updatePoint":{"line":1830,"column":80,"index":40978},"line":1830,"code":"it('should not replace multiple instances of the same class in a single selector', async () => {\n  // NOTE: This test is non-normative and is not part of the spec of how `@apply` works per-se\n  // It describes how it currently works because the \"correct\" way produces a combinatorial explosion\n  // of selectors that is not easily doable\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo-1 -foo-1 new-class\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    .foo + .foo {\n      color: blue;\n    }\n    .bar + .bar {\n      color: fuchsia;\n    }\n    header {\n      @apply foo;\n    }\n    main {\n      @apply foo bar;\n    }\n    footer {\n      @apply bar;\n    }\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .foo + .foo {\n      color: #00f;\n    }\n    .bar + .bar {\n      color: #f0f;\n    }\n    header + .foo,\n    main + .foo {\n      color: #00f;\n    }\n    main + .bar,\n    footer + .bar {\n      color: #f0f;\n    }\n  `);\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"should maintain the correct selector when applying other utilities","suites":["multiple instances"],"updatePoint":{"line":1875,"column":70,"index":41961},"line":1875,"code":"it('should maintain the correct selector when applying other utilities', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"check\"></div>\n          </div>\n        `\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n\n    .foo:hover.bar .baz {\n      @apply bg-black;\n      color: red;\n    }\n\n    .foo:hover.bar > .baz {\n      @apply bg-black;\n      color: red;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo:hover.bar .baz,\n      .foo:hover.bar > .baz {\n        --tw-bg-opacity: 1;\n        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n        color: red;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"pseudo elements inside apply are moved outside of :is() or :has()","suites":["multiple instances"],"updatePoint":{"line":1909,"column":69,"index":42668},"line":1909,"code":"it('pseudo elements inside apply are moved outside of :is() or :has()', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html` <div class=\"foo bar baz qux steve bob\"></div> `\n    }]\n  };\n  let input = css`\n    .foo::before {\n      @apply dark:bg-black/100;\n    }\n\n    .bar::before {\n      @apply rtl:dark:bg-black/100;\n    }\n\n    .baz::before {\n      @apply rtl:dark:hover:bg-black/100;\n    }\n\n    .qux::file-selector-button {\n      @apply rtl:dark:hover:bg-black/100;\n    }\n\n    .steve::before {\n      @apply rtl:hover:dark:bg-black/100;\n    }\n\n    .bob::file-selector-button {\n      @apply rtl:hover:dark:bg-black/100;\n    }\n\n    .foo::before {\n      @apply [:has([dir=\"rtl\"]_&)]:hover:bg-black/100;\n    }\n\n    .bar::file-selector-button {\n      @apply [:has([dir=\"rtl\"]_&)]:hover:bg-black/100;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      :is(.dark .foo):before,\n      :is([dir='rtl'] :is(.dark .bar)):before,\n      :is([dir='rtl'] :is(.dark .baz:hover)):before {\n        background-color: #000;\n      }\n      :-webkit-any([dir='rtl'] :-webkit-any(.dark .qux))::-webkit-file-upload-button:hover {\n        background-color: #000;\n      }\n      :is([dir='rtl'] :is(.dark .qux))::file-selector-button:hover {\n        background-color: #000;\n      }\n      :is([dir='rtl'] :is(.dark .steve):hover):before {\n        background-color: #000;\n      }\n      :-webkit-any([dir='rtl'] :-webkit-any(.dark .bob))::-webkit-file-upload-button:hover {\n        background-color: #000;\n      }\n      :is([dir='rtl'] :is(.dark .bob))::file-selector-button:hover {\n        background-color: #000;\n      }\n      :has([dir='rtl'] .foo:hover):before {\n        background-color: #000;\n      }\n      :has([dir='rtl'] .bar)::-webkit-file-upload-button:hover {\n        background-color: #000;\n      }\n      :has([dir='rtl'] .bar)::file-selector-button:hover {\n        background-color: #000;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"::ng-deep, ::deep, ::v-deep pseudo elements are left alone","suites":["multiple instances"],"updatePoint":{"line":1983,"column":64,"index":44647},"line":1983,"code":"test('::ng-deep, ::deep, ::v-deep pseudo elements are left alone', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html` <div class=\"foo bar\"></div> `\n    }]\n  };\n  let input = css`\n    ::ng-deep .foo .bar {\n      @apply font-bold;\n    }\n    ::v-deep .foo .bar {\n      @apply font-bold;\n    }\n    ::deep .foo .bar {\n      @apply font-bold;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ::ng-deep .foo .bar,\n      ::v-deep .foo .bar,\n      ::deep .foo .bar {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"apply.test.js","skipped":false,"dir":"tests"},{"name":"basic arbitrary properties","suites":[],"updatePoint":{"line":2,"column":32,"index":88},"line":2,"code":"test('basic arbitrary properties', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[paint-order:markers]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[paint-order\\:markers\\] {\n        paint-order: markers;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"different arbitrary properties are picked up separately","suites":[],"updatePoint":{"line":25,"column":61,"index":609},"line":25,"code":"test('different arbitrary properties are picked up separately', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[foo:bar] [bar:baz]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[bar\\:baz\\] {\n        bar: baz;\n      }\n      .\\[foo\\:bar\\] {\n        foo: bar;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary properties with modifiers","suites":[],"updatePoint":{"line":51,"column":41,"index":1132},"line":51,"code":"test('arbitrary properties with modifiers', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"dark:lg:hover:[paint-order:markers]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (prefers-color-scheme: dark) {\n        @media (min-width: 1024px) {\n          .dark\\:lg\\:hover\\:\\[paint-order\\:markers\\]:hover {\n            paint-order: markers;\n          }\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary properties are sorted after utilities","suites":[],"updatePoint":{"line":78,"column":53,"index":1793},"line":78,"code":"test('arbitrary properties are sorted after utilities', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"content-none [paint-order:markers] hover:pointer-events-none\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .content-none {\n        --tw-content: none;\n        content: var(--tw-content);\n      }\n      .\\[paint-order\\:markers\\] {\n        paint-order: markers;\n      }\n      .hover\\:pointer-events-none:hover {\n        pointer-events: none;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"using CSS variables","suites":[],"updatePoint":{"line":108,"column":25,"index":2491},"line":108,"code":"test('using CSS variables', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[--my-var:auto]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[--my-var\\:auto\\] {\n        --my-var: auto;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"using underscores as spaces","suites":[],"updatePoint":{"line":131,"column":33,"index":2966},"line":131,"code":"test('using underscores as spaces', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[--my-var:2px_4px]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[--my-var\\:2px_4px\\] {\n        --my-var: 2px 4px;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"using the important modifier","suites":[],"updatePoint":{"line":154,"column":34,"index":3451},"line":154,"code":"test('using the important modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"![--my-var:2px_4px]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\!\\[--my-var\\:2px_4px\\] {\n        --my-var: 2px 4px !important;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"colons are allowed in quotes","suites":[],"updatePoint":{"line":177,"column":34,"index":3950},"line":177,"code":"test('colons are allowed in quotes', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[content:'foo:bar']\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[content\\:\\'foo\\:bar\\'\\] {\n        content: 'foo:bar';\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"colons are allowed in braces","suites":[],"updatePoint":{"line":200,"column":34,"index":4441},"line":200,"code":"test('colons are allowed in braces', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[background-image:url(http://example.com/picture.jpg)]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[background-image\\:url\\(http\\:\\/\\/example\\.com\\/picture\\.jpg\\)\\] {\n        background-image: url('http://example.com/picture.jpg');\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"invalid class","suites":[],"updatePoint":{"line":223,"column":19,"index":5029},"line":223,"code":"test('invalid class', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[a:b:c:d]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"invalid arbitrary property","suites":[],"updatePoint":{"line":243,"column":32,"index":5437},"line":243,"code":"test('invalid arbitrary property', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[autoplay:\\${autoplay}]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"invalid arbitrary property 2","suites":[],"updatePoint":{"line":263,"column":34,"index":5861},"line":263,"code":"test('invalid arbitrary property 2', () => {\n  let config = {\n    content: [{\n      raw: html`[0:02]`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"using fractional spacing values inside theme() function","suites":[],"updatePoint":{"line":283,"column":61,"index":6275},"line":283,"code":"test('using fractional spacing values inside theme() function', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"[border:_calc(5vw_-_theme(spacing[2.5]))_double_theme('colors.fuchsia.700')]\"\n        ></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[border\\:_calc\\(5vw_-_theme\\(spacing\\[2\\.5\\]\\)\\)_double_theme\\(\\'colors\\.fuchsia\\.700\\'\\)\\] {\n        border: calc(5vw - 0.625rem) double #a21caf;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"using multiple arbitrary props having fractional spacing values","suites":[],"updatePoint":{"line":308,"column":69,"index":6969},"line":308,"code":"test('using multiple arbitrary props having fractional spacing values', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"[height:_calc(100vh_-_theme(spacing[2.5]))] [box-shadow:_0_calc(theme(spacing[0.5])_*_-1)_theme(colors.red.400)_inset]\"\n        ></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[box-shadow\\:_0_calc\\(theme\\(spacing\\[0\\.5\\]\\)_\\*_-1\\)_theme\\(colors\\.red\\.400\\)_inset\\] {\n        box-shadow: inset 0 -0.125rem #f87171;\n      }\n      .\\[height\\:_calc\\(100vh_-_theme\\(spacing\\[2\\.5\\]\\)\\)\\] {\n        height: calc(100vh - 0.625rem);\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to read theme values in arbitrary properties (without quotes)","suites":[],"updatePoint":{"line":336,"column":84,"index":7829},"line":336,"code":"it('should be possible to read theme values in arbitrary properties (without quotes)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[--a:theme(colors.blue.500)] [color:var(--a)]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[--a\\:theme\\(colors\\.blue\\.500\\)\\] {\n        --a: #3b82f6;\n      }\n      .\\[color\\:var\\(--a\\)\\] {\n        color: var(--a);\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to read theme values in arbitrary properties (with quotes)","suites":[],"updatePoint":{"line":362,"column":81,"index":8468},"line":362,"code":"it('should be possible to read theme values in arbitrary properties (with quotes)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[color:var(--a)] [--a:theme('colors.blue.500')]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[--a\\:theme\\(\\'colors\\.blue\\.500\\'\\)\\] {\n        --a: #3b82f6;\n      }\n      .\\[color\\:var\\(--a\\)\\] {\n        color: var(--a);\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"should not generate invalid CSS","suites":[],"updatePoint":{"line":388,"column":35,"index":9067},"line":388,"code":"it('should not generate invalid CSS', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"[https://en.wikipedia.org/wiki]\"></div>\n          <div class=\"[http://example.org]\"></div>\n          <div class=\"[http://example]\"></div>\n          <div class=\"[ftp://example]\"></div>\n          <div class=\"[stillworks:/example]\"></div>\n        `\n\n      // NOTE: In this case `stillworks:/example` being generated is not ideal\n      // but it at least doesn't produce invalid CSS when run through prettier\n      // So we can let it through since it is technically valid\n    }],\n\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .\\[stillworks\\:\\/example\\] {\n        stillworks: /example;\n      }\n    `);\n  });\n});","file":"arbitrary-properties.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values","suites":[],"updatePoint":{"line":4,"column":22,"index":114},"line":4,"code":"test('arbitrary values', () => {\n  let config = {\n    content: [path.resolve(__dirname, './arbitrary-values.test.html')]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(fs.readFileSync(path.resolve(__dirname, './arbitrary-values.test.css'), 'utf8'));\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should only detect classes with arbitrary values that are properly terminated after the arbitrary value","suites":[],"updatePoint":{"line":12,"column":109,"index":523},"line":12,"code":"test('should only detect classes with arbitrary values that are properly terminated after the arbitrary value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"w-[do-not-generate-this]w-[it-is-invalid-syntax]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to differentiate between decoration utilities","suites":[],"updatePoint":{"line":22,"column":68,"index":862},"line":22,"code":"it('should be possible to differentiate between decoration utilities', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"decoration-[#ccc] decoration-[3px]\"></div> `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .decoration-\\[\\#ccc\\] {\n        text-decoration-color: #ccc;\n      }\n      .decoration-\\[3px\\] {\n        text-decoration-thickness: 3px;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should support modifiers for arbitrary values that contain the separator","suites":[],"updatePoint":{"line":39,"column":76,"index":1353},"line":39,"code":"it('should support modifiers for arbitrary values that contain the separator', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"hover:bg-[url('https://github.com/tailwindlabs.png')]\"></div> `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .hover\\:bg-\\[url\\(\\'https\\:\\/\\/github\\.com\\/tailwindlabs\\.png\\'\\)\\]:hover {\n        background-image: url('https://github.com/tailwindlabs.png');\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should support arbitrary values for various background utilities","suites":[],"updatePoint":{"line":53,"column":68,"index":1864},"line":53,"code":"it('should support arbitrary values for various background utilities', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <!-- Lookup -->\n          <div class=\"bg-gradient-to-r\"></div>\n          <div class=\"bg-red-500\"></div>\n\n          <!-- By implicit type -->\n          <div class=\"bg-[url('/image-1-0.png')]\"></div>\n          <div class=\"bg-[#ff0000]\"></div>\n          <div class=\"bg-[rgb(var(--bg-color))]\"></div>\n          <div class=\"bg-[hsl(var(--bg-color))]\"></div>\n\n          <!-- By explicit type -->\n          <div class=\"bg-[url:var(--image-url)]\"></div>\n          <div class=\"bg-[color:var(--bg-color)]\"></div>\n        `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[\\#ff0000\\] {\n        --tw-bg-opacity: 1;\n        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n      }\n      .bg-\\[color\\:var\\(--bg-color\\)\\] {\n        background-color: var(--bg-color);\n      }\n      .bg-\\[hsl\\(var\\(--bg-color\\)\\)\\] {\n        background-color: hsl(var(--bg-color));\n      }\n      .bg-\\[rgb\\(var\\(--bg-color\\)\\)\\] {\n        background-color: rgb(var(--bg-color));\n      }\n      .bg-red-500 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n      }\n      .bg-\\[url\\(\\'\\/image-1-0\\.png\\'\\)\\] {\n        background-image: url('/image-1-0.png');\n      }\n      .bg-\\[url\\:var\\(--image-url\\)\\] {\n        background-image: var(--image-url);\n      }\n      .bg-gradient-to-r {\n        background-image: linear-gradient(to right, var(--tw-gradient-stops));\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should not generate any css if an unknown typehint is used","suites":[],"updatePoint":{"line":104,"column":62,"index":3486},"line":104,"code":"it('should not generate any css if an unknown typehint is used', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"inset-[hmm:12px]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should handle unknown typehints","suites":[],"updatePoint":{"line":114,"column":35,"index":3760},"line":114,"code":"it('should handle unknown typehints', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"w-[length:12px]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .w-\\[length\\:12px\\] {\n        width: 12px;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should convert _ to spaces","suites":[],"updatePoint":{"line":128,"column":30,"index":4090},"line":128,"code":"it('should convert _ to spaces', () => {\n  // Using custom css function here, because otherwise with String.raw, we run\n  // into an issue with `\\2c ` escapes. If we use `\\2c ` then JS complains\n  // about strict mode. But `\\\\2c ` is not what it expected.\n  function css(templates) {\n    return templates.join('');\n  }\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"grid-cols-[200px_repeat(auto-fill,minmax(15%,100px))_300px]\"></div>\n          <div class=\"grid-rows-[200px_repeat(auto-fill,minmax(15%,100px))_300px]\"></div>\n          <div class=\"shadow-[0px_0px_4px_black]\"></div>\n          <div class=\"rounded-[0px_4px_4px_0px]\"></div>\n          <div class=\"m-[8px_4px]\"></div>\n          <div class=\"p-[8px_4px]\"></div>\n          <div class=\"flex-[1_1_100%]\"></div>\n          <div class=\"col-[span_3_/_span_8]\"></div>\n          <div class=\"row-[span_3_/_span_8]\"></div>\n          <div class=\"auto-cols-[minmax(0,_1fr)]\"></div>\n          <div class=\"drop-shadow-[0px_1px_3px_black]\"></div>\n          <div class=\"content-[_hello_world_]\"></div>\n          <div class=\"content-[___abc____]\"></div>\n          <div class=\"content-['__hello__world__']\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .col-\\\\[span_3_\\\\/_span_8\\\\] {\n        grid-column: span 3 / span 8;\n      }\n      .row-\\\\[span_3_\\\\/_span_8\\\\] {\n        grid-row: span 3 / span 8;\n      }\n      .m-\\\\[8px_4px\\\\] {\n        margin: 8px 4px;\n      }\n      .flex-\\\\[1_1_100\\\\%\\\\] {\n        flex: 100%;\n      }\n      .auto-cols-\\\\[minmax\\\\(0\\\\,_1fr\\\\)\\\\] {\n        grid-auto-columns: minmax(0, 1fr);\n      }\n      .grid-cols-\\\\[200px_repeat\\\\(auto-fill\\\\,minmax\\\\(15\\\\%\\\\,100px\\\\)\\\\)_300px\\\\] {\n        grid-template-columns: 200px repeat(auto-fill, minmax(15%, 100px)) 300px;\n      }\n      .grid-rows-\\\\[200px_repeat\\\\(auto-fill\\\\,minmax\\\\(15\\\\%\\\\,100px\\\\)\\\\)_300px\\\\] {\n        grid-template-rows: 200px repeat(auto-fill, minmax(15%, 100px)) 300px;\n      }\n      .rounded-\\\\[0px_4px_4px_0px\\\\] {\n        border-radius: 0 4px 4px 0;\n      }\n      .p-\\\\[8px_4px\\\\] {\n        padding: 8px 4px;\n      }\n      .shadow-\\\\[0px_0px_4px_black\\\\] {\n        --tw-shadow: 0px 0px 4px black;\n        --tw-shadow-colored: 0px 0px 4px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .drop-shadow-\\\\[0px_1px_3px_black\\\\] {\n        --tw-drop-shadow: drop-shadow(0px 1px 3px black);\n        filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale)\n          var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia)\n          var(--tw-drop-shadow);\n      }\n      .content-\\\\[\\\\'__hello__world__\\\\'\\\\] {\n        --tw-content: '  hello  world  ';\n        content: var(--tw-content);\n      }\n      .content-\\\\[___abc____\\\\] {\n        --tw-content: abc;\n        content: var(--tw-content);\n      }\n      .content-\\\\[_hello_world_\\\\] {\n        --tw-content: hello world;\n        content: var(--tw-content);\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should not convert escaped underscores with spaces","suites":[],"updatePoint":{"line":214,"column":54,"index":7315},"line":214,"code":"it('should not convert escaped underscores with spaces', () => {\n  let config = {\n    content: [{\n      raw: `<div class=\"content-['snake\\\\_case']\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .content-\\[\\'snake\\\\_case\\'\\] {\n        --tw-content: 'snake_case';\n        content: var(--tw-content);\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should pick the fallback plugin when arbitrary values collide","suites":[],"updatePoint":{"line":232,"column":65,"index":7795},"line":232,"code":"it('should pick the fallback plugin when arbitrary values collide', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <!-- Background color -->\n            <div class=\"bg-[var(--unknown)]\"></div>\n            <!-- Background size -->\n            <div class=\"bg-[200px_100px]\"></div>\n          </div>\n        `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[var\\(--unknown\\)\\] {\n        background-color: var(--unknown);\n      }\n      .bg-\\[200px_100px\\] {\n        background-position: 200px 100px;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should pick the fallback plugin when arbitrary values collide and can not be inferred","suites":[],"updatePoint":{"line":256,"column":89,"index":8471},"line":256,"code":"it('should pick the fallback plugin when arbitrary values collide and can not be inferred', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-[var(--tw-unknown)]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[var\\(--tw-unknown\\)\\] {\n        background-color: var(--tw-unknown);\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should warn and not generate if arbitrary values are ambiguous (without fallback)","suites":[],"updatePoint":{"line":270,"column":85,"index":8895},"line":270,"code":"it('should warn and not generate if arbitrary values are ambiguous (without fallback)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo-[200px_100px]\"></div>`\n    }],\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        foo: value => ({\n          value\n        })\n      }, {\n        type: ['position']\n      });\n      matchUtilities({\n        foo: value => ({\n          value\n        })\n      }, {\n        type: ['size']\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should support colons in URLs","suites":[],"updatePoint":{"line":298,"column":33,"index":9474},"line":298,"code":"it('should support colons in URLs', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-[url('https://www.spacejam.com/1996/img/bg_stars.gif')]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[url\\(\\'https\\:\\/\\/www\\.spacejam\\.com\\/1996\\/img\\/bg_stars\\.gif\\'\\)\\] {\n        background-image: url('https://www.spacejam.com/1996/img/bg_stars.gif');\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should support unescaped underscores in URLs","suites":[],"updatePoint":{"line":312,"column":48,"index":9980},"line":312,"code":"it('should support unescaped underscores in URLs', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-[url('brown_potato.jpg'),_url('red_tomato.png')]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(`\n      .bg-\\\\[url\\\\(\\\\'brown_potato\\\\.jpg\\\\'\\\\)\\\\,_url\\\\(\\\\'red_tomato\\\\.png\\\\'\\\\)\\\\] {\n        background-image: url('brown_potato.jpg'), url('red_tomato.png');\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to read theme values in arbitrary values (without quotes)","suites":[],"updatePoint":{"line":326,"column":80,"index":10505},"line":326,"code":"it('should be possible to read theme values in arbitrary values (without quotes)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"w-[theme(spacing.1)] w-[theme(spacing[0.5])]\"></div>`\n    }],\n    theme: {\n      spacing: {\n        0.5: 'calc(.5 * .25rem)',\n        1: 'calc(1 * .25rem)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .w-\\[theme\\(spacing\\.1\\)\\] {\n        width: 0.25rem;\n      }\n      .w-\\[theme\\(spacing\\[0\\.5\\]\\)\\] {\n        width: 0.125rem;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to read theme values in arbitrary values (with quotes)","suites":[],"updatePoint":{"line":349,"column":77,"index":11103},"line":349,"code":"it('should be possible to read theme values in arbitrary values (with quotes)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"w-[theme('spacing.1')] w-[theme('spacing[0.5]')]\"></div>`\n    }],\n    theme: {\n      spacing: {\n        0.5: 'calc(.5 * .25rem)',\n        1: 'calc(1 * .25rem)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .w-\\[theme\\(\\'spacing\\.1\\'\\)\\] {\n        width: 0.25rem;\n      }\n      .w-\\[theme\\(\\'spacing\\[0\\.5\\]\\'\\)\\] {\n        width: 0.125rem;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to read theme values in arbitrary values (with quotes) when inside calc or similar functions","suites":[],"updatePoint":{"line":372,"column":115,"index":11751},"line":372,"code":"it('should be possible to read theme values in arbitrary values (with quotes) when inside calc or similar functions', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"w-[calc(100%-theme('spacing.1'))] w-[calc(100%-theme('spacing[0.5]'))]\"\n        ></div>`\n    }],\n    theme: {\n      spacing: {\n        0.5: 'calc(.5 * .25rem)',\n        1: 'calc(1 * .25rem)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .w-\\[calc\\(100\\%-theme\\(\\'spacing\\.1\\'\\)\\)\\] {\n        width: calc(100% - 0.25rem);\n      }\n      .w-\\[calc\\(100\\%-theme\\(\\'spacing\\[0\\.5\\]\\'\\)\\)\\] {\n        width: calc(100% - 0.125rem);\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should not output unparsable arbitrary CSS values","suites":[],"updatePoint":{"line":397,"column":53,"index":12432},"line":397,"code":"it('should not output unparsable arbitrary CSS values', () => {\n  let config = {\n    content: [{\n      raw: 'let classes = `w-[${sizes.width}]`'\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(``);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should correctly validate each part when checking for `percentage` data types","suites":[],"updatePoint":{"line":410,"column":81,"index":12883},"line":410,"code":"it('should correctly validate each part when checking for `percentage` data types', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-[top_right_50%]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[top_right_50\\%\\] {\n        background-position: right 50% top;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should correctly validate background size","suites":[],"updatePoint":{"line":431,"column":45,"index":13349},"line":431,"code":"it('should correctly validate background size', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-[auto_auto,cover,_contain,10px,10px_10%]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[auto_auto\\,cover\\,_contain\\,10px\\,10px_10\\%\\] {\n        background-size: auto, cover, contain, 10px, 10px 10%;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should correctly validate combination of percentage and length","suites":[],"updatePoint":{"line":452,"column":66,"index":13909},"line":452,"code":"it('should correctly validate combination of percentage and length', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-[50px_10%] bg-[50%_10%] bg-[50px_10px]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[50\\%_10\\%\\] {\n        background-position: 50% 10%;\n      }\n      .bg-\\[50px_10\\%\\] {\n        background-position: 50px 10%;\n      }\n      .bg-\\[50px_10px\\] {\n        background-position: 50px 10px;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"can explicitly specify type for percentage and length","suites":[],"updatePoint":{"line":479,"column":57,"index":14546},"line":479,"code":"it('can explicitly specify type for percentage and length', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-[size:50px_10%] bg-[50px_10px] bg-[position:50%_10%]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[size\\:50px_10\\%\\] {\n        background-size: 50px 10%;\n      }\n      .bg-\\[50px_10px\\] {\n        background-position: 50px 10px;\n      }\n      .bg-\\[position\\:50\\%_10\\%\\] {\n        background-position: 50% 10%;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"can use CSS variables as arbitrary values without `var()`","suites":[],"updatePoint":{"line":506,"column":61,"index":15213},"line":506,"code":"it('can use CSS variables as arbitrary values without `var()`', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"w-[--width-var] bg-[--color-var] bg-[--color-var,#000] bg-[length:--size-var] text-[length:--size-var,12px]\"\n        ></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .w-\\[--width-var\\] {\n        width: var(--width-var);\n      }\n      .bg-\\[--color-var\\,\\#000\\] {\n        background-color: var(--color-var, #000);\n      }\n      .bg-\\[--color-var\\] {\n        background-color: var(--color-var);\n      }\n      .bg-\\[length\\:--size-var\\] {\n        background-size: var(--size-var);\n      }\n      .text-\\[length\\:--size-var\\,12px\\] {\n        font-size: var(--size-var, 12px);\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"can use CSS variables as arbitrary modifiers without `var()`","suites":[],"updatePoint":{"line":541,"column":64,"index":16142},"line":541,"code":"it('can use CSS variables as arbitrary modifiers without `var()`', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-sm/[--line-height] bg-red-500/[--opacity]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-500\\/\\[--opacity\\] {\n        background-color: rgb(239 68 68 / var(--opacity));\n      }\n      .text-sm\\/\\[--line-height\\] {\n        font-size: 0.875rem;\n        line-height: var(--line-height);\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"should support underscores in arbitrary modifiers","suites":[],"updatePoint":{"line":566,"column":53,"index":16777},"line":566,"code":"it('should support underscores in arbitrary modifiers', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-lg/[calc(50px_*_2)]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .text-lg\\/\\[calc\\(50px_\\*_2\\)\\] {\n        font-size: 1.125rem;\n        line-height: 100px;\n      }\n    `);\n  });\n});","file":"arbitrary-values.test.js","skipped":false,"dir":"tests"},{"name":"basic arbitrary variants","suites":[],"updatePoint":{"line":3,"column":30,"index":137},"line":3,"code":"test('basic arbitrary variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[&>*]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&\\>\\*\\]\\:underline > * {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"spaces in selector (using _)","suites":[],"updatePoint":{"line":26,"column":34,"index":637},"line":26,"code":"test('spaces in selector (using _)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[.a.b_&]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .a.b .\\[\\.a\\.b_\\&\\]\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary variants with modifiers","suites":[],"updatePoint":{"line":49,"column":39,"index":1149},"line":49,"code":"test('arbitrary variants with modifiers', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"dark:lg:hover:[&>*]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (prefers-color-scheme: dark) {\n        @media (min-width: 1024px) {\n          .dark\\:lg\\:hover\\:\\[\\&\\>\\*\\]\\:underline > :hover {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"variants without & or an at-rule are ignored","suites":[],"updatePoint":{"line":76,"column":50,"index":1812},"line":76,"code":"test('variants without & or an at-rule are ignored', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"[div]:underline\"></div>\n          <div class=\"[:hover]:underline\"></div>\n          <div class=\"[wtf-bbq]:underline\"></div>\n          <div class=\"[lol]:hover:underline\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary variants are sorted after other variants","suites":[],"updatePoint":{"line":101,"column":56,"index":2421},"line":101,"code":"test('arbitrary variants are sorted after other variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"underline lg:underline [&>*]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .underline {\n        text-decoration-line: underline;\n      }\n      @media (min-width: 1024px) {\n        .lg\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n      .\\[\\&\\>\\*\\]\\:underline > * {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"using the important modifier","suites":[],"updatePoint":{"line":132,"column":34,"index":3133},"line":132,"code":"test('using the important modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[&>*]:!underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&\\>\\*\\]\\:\\!underline > * {\n        text-decoration-line: underline !important;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"at-rules","suites":[],"updatePoint":{"line":155,"column":14,"index":3627},"line":155,"code":"test('at-rules', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[@supports(what:ever)]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @supports (what: ever) {\n        .\\[\\@supports\\(what\\:ever\\)\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"nested at-rules","suites":[],"updatePoint":{"line":180,"column":21,"index":4190},"line":180,"code":"test('nested at-rules', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[@media_screen{@media(hover:hover)}]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media screen {\n        @media (hover: hover) {\n          .\\[\\@media_screen\\{\\@media\\(hover\\:hover\\)\\}\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"at-rules with selector modifications","suites":[],"updatePoint":{"line":207,"column":42,"index":4844},"line":207,"code":"test('at-rules with selector modifications', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[@media(hover:hover){&:hover}]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (hover: hover) {\n        .\\[\\@media\\(hover\\:hover\\)\\{\\&\\:hover\\}\\]\\:underline:hover {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"nested at-rules with selector modifications","suites":[],"updatePoint":{"line":232,"column":49,"index":5460},"line":232,"code":"test('nested at-rules with selector modifications', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[@media_screen{@media(hover:hover){&:hover}}]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media screen {\n        @media (hover: hover) {\n          .\\[\\@media_screen\\{\\@media\\(hover\\:hover\\)\\{\\&\\:hover\\}\\}\\]\\:underline:hover {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"attribute selectors","suites":[],"updatePoint":{"line":259,"column":25,"index":6125},"line":259,"code":"test('attribute selectors', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[&[data-open]]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&\\[data-open\\]\\]\\:underline[data-open] {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"multiple attribute selectors","suites":[],"updatePoint":{"line":282,"column":34,"index":6650},"line":282,"code":"test('multiple attribute selectors', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"[&[data-foo][data-bar]:not([data-baz])]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&\\[data-foo\\]\\[data-bar\\]\\:not\\(\\[data-baz\\]\\)\\]\\:underline[data-foo][data-bar]:not([data-baz]) {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"multiple attribute selectors with custom separator (1)","suites":[],"updatePoint":{"line":305,"column":60,"index":7283},"line":305,"code":"test('multiple attribute selectors with custom separator (1)', () => {\n  let config = {\n    separator: '__',\n    content: [{\n      raw: html`<div class=\"[&[data-foo][data-bar]:not([data-baz])]__underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&\\[data-foo\\]\\[data-bar\\]\\:not\\(\\[data-baz\\]\\)\\]__underline[data-foo][data-bar]:not([data-baz]) {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"multiple attribute selectors with custom separator (2)","suites":[],"updatePoint":{"line":329,"column":60,"index":7938},"line":329,"code":"test('multiple attribute selectors with custom separator (2)', () => {\n  let config = {\n    separator: '_@',\n    content: [{\n      raw: html`<div class=\"[&[data-foo][data-bar]:not([data-baz])]_@underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&\\[data-foo\\]\\[data-bar\\]\\:not\\(\\[data-baz\\]\\)\\]_\\@underline[data-foo][data-bar]:not([data-baz]) {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"with @apply","suites":[],"updatePoint":{"line":353,"column":17,"index":8551},"line":353,"code":"test('with @apply', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = `\n      @tailwind base;\n      @tailwind components;\n      @tailwind utilities;\n\n      .foo {\n        @apply [@media_screen{@media(hover:hover){&:hover}}]:underline;\n      }\n    `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media screen {\n        @media (hover: hover) {\n          .foo:hover {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"keeps escaped underscores","suites":[],"updatePoint":{"line":384,"column":31,"index":9203},"line":384,"code":"test('keeps escaped underscores', () => {\n  let config = {\n    content: [{\n      raw: '<div class=\"[&_.foo\\\\_\\\\_bar]:underline\"></div>'\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&_\\.foo\\\\_\\\\_bar\\]\\:underline .foo__bar {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"keeps escaped underscores with multiple arbitrary variants","suites":[],"updatePoint":{"line":407,"column":64,"index":9758},"line":407,"code":"test('keeps escaped underscores with multiple arbitrary variants', () => {\n  let config = {\n    content: [{\n      raw: '<div class=\"[&_.foo\\\\_\\\\_bar]:[&_.bar\\\\_\\\\_baz]:underline\"></div>'\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&_\\.foo\\\\_\\\\_bar\\]\\:\\[\\&_\\.bar\\\\_\\\\_baz\\]\\:underline .bar__baz .foo__bar {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"keeps escaped underscores in arbitrary variants mixed with normal variants","suites":[],"updatePoint":{"line":430,"column":80,"index":10380},"line":430,"code":"test('keeps escaped underscores in arbitrary variants mixed with normal variants', () => {\n  let config = {\n    content: [{\n      raw: `\n          <div class=\"[&_.foo\\\\_\\\\_bar]:hover:underline\"></div>\n          <div class=\"hover:[&_.foo\\\\_\\\\_bar]:underline\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&_\\.foo\\\\_\\\\_bar\\]\\:hover\\:underline:hover .foo__bar,\n        .hover\\:\\[\\&_\\.foo\\\\_\\\\_bar\\]\\:underline .foo__bar:hover {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"allows attribute variants with quotes","suites":[],"updatePoint":{"line":457,"column":43,"index":11083},"line":457,"code":"test('allows attribute variants with quotes', () => {\n  let config = {\n    content: [{\n      raw: `\n          <div class=\"[&[data-test='2']]:underline\"></div>\n          <div class='[&[data-test=\"2\"]]:underline'></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\[\\&\\[data-test\\=\\\"2\\\"\\]\\]\\:underline[data-test='2'],\n        .\\[\\&\\[data-test\\=\\'2\\'\\]\\]\\:underline[data-test='2'] {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"classes in arbitrary variants should not be prefixed","suites":[],"updatePoint":{"line":484,"column":58,"index":11785},"line":484,"code":"test('classes in arbitrary variants should not be prefixed', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: `\n          <div class=\"[.foo_&]:tw-text-red-400\">should not be red</div>\n          <div class=\"foo\">\n            <div class=\"[.foo_&]:tw-text-red-400\">should be red</div>\n          </div>\n          <div class=\"[&_.foo]:tw-text-red-400\">\n            <div>should not be red</div>\n            <div class=\"foo\">should be red</div>\n          </div>\n          <div class=\"hover:[&_.foo]:tw-text-red-400\">\n            <div>should not be red</div>\n            <div class=\"foo\">should be red</div>\n          </div>\n          <div class=\"[&_.foo]:hover:tw-text-red-400\">\n            <div>should not be red</div>\n            <div class=\"foo\">should be red</div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .\\[\\&_\\.foo\\]\\:tw-text-red-400 .foo,\n      .\\[\\&_\\.foo\\]\\:hover\\:tw-text-red-400:hover .foo,\n      .hover\\:\\[\\&_\\.foo\\]\\:tw-text-red-400 .foo:hover,\n      .foo .\\[\\.foo_\\&\\]\\:tw-text-red-400 {\n        --tw-text-opacity: 1;\n        color: rgb(248 113 113 / var(--tw-text-opacity));\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"classes in the same arbitrary variant should not be prefixed","suites":[],"updatePoint":{"line":526,"column":66,"index":13120},"line":526,"code":"test('classes in the same arbitrary variant should not be prefixed', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: `\n          <div class=\"[.foo_&]:tw-font-bold\">should not be red</div>\n          <div class=\"foo\">\n            <div class=\"[.foo_&]:tw-font-bold\">should be red</div>\n          </div>\n          <div class=\"[&_.foo]:tw-font-bold [&_.foo]:tw-font-bold\">\n            <div>should not be red</div>\n            <div class=\"foo\">should be red</div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .\\[\\&_\\.foo\\]\\:tw-font-bold .foo,\n      .foo .\\[\\.foo_\\&\\]\\:tw-font-bold {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"should support aria variants","suites":[],"updatePoint":{"line":557,"column":32,"index":13930},"line":557,"code":"it('should support aria variants', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"aria-checked:underline\"></div>\n            <div class=\"aria-[sort=ascending]:underline\"></div>\n            <div class=\"aria-[labelledby='a_b']:underline\"></div>\n            <div class=\"group-aria-checked:underline\"></div>\n            <div class=\"peer-aria-checked:underline\"></div>\n            <div class=\"group-aria-checked/foo:underline\"></div>\n            <div class=\"peer-aria-checked/foo:underline\"></div>\n            <div class=\"group-aria-[sort=ascending]:underline\"></div>\n            <div class=\"peer-aria-[sort=ascending]:underline\"></div>\n            <div class=\"group-aria-[labelledby='a_b']:underline\"></div>\n            <div class=\"peer-aria-[labelledby='a_b']:underline\"></div>\n            <div class=\"group-aria-[sort=ascending]/foo:underline\"></div>\n            <div class=\"peer-aria-[sort=ascending]/foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(flagEnabled(config, 'oxideParser') ? css`\n            .aria-checked\\:underline[aria-checked='true'],\n            .aria-\\[labelledby\\=\\'a_b\\'\\]\\:underline[aria-labelledby='a b'],\n            .aria-\\[sort\\=ascending\\]\\:underline[aria-sort='ascending'],\n            .group\\/foo[aria-checked='true'] .group-aria-checked\\/foo\\:underline,\n            .group[aria-checked='true'] .group-aria-checked\\:underline,\n            .group[aria-labelledby='a b'] .group-aria-\\[labelledby\\=\\'a_b\\'\\]\\:underline,\n            .group\\/foo[aria-sort='ascending'] .group-aria-\\[sort\\=ascending\\]\\/foo\\:underline,\n            .group[aria-sort='ascending'] .group-aria-\\[sort\\=ascending\\]\\:underline,\n            .peer\\/foo[aria-checked='true'] ~ .peer-aria-checked\\/foo\\:underline,\n            .peer[aria-checked='true'] ~ .peer-aria-checked\\:underline,\n            .peer[aria-labelledby='a b'] ~ .peer-aria-\\[labelledby\\=\\'a_b\\'\\]\\:underline,\n            .peer\\/foo[aria-sort='ascending'] ~ .peer-aria-\\[sort\\=ascending\\]\\/foo\\:underline,\n            .peer[aria-sort='ascending'] ~ .peer-aria-\\[sort\\=ascending\\]\\:underline {\n              text-decoration-line: underline;\n            }\n          ` : css`\n            .underline,\n            .aria-checked\\:underline[aria-checked='true'],\n            .aria-\\[labelledby\\=\\'a_b\\'\\]\\:underline[aria-labelledby='a b'],\n            .aria-\\[sort\\=ascending\\]\\:underline[aria-sort='ascending'],\n            .group\\/foo[aria-checked='true'] .group-aria-checked\\/foo\\:underline,\n            .group[aria-checked='true'] .group-aria-checked\\:underline,\n            .group[aria-labelledby='a b'] .group-aria-\\[labelledby\\=\\'a_b\\'\\]\\:underline,\n            .group\\/foo[aria-sort='ascending'] .group-aria-\\[sort\\=ascending\\]\\/foo\\:underline,\n            .group[aria-sort='ascending'] .group-aria-\\[sort\\=ascending\\]\\:underline,\n            .peer\\/foo[aria-checked='true'] ~ .peer-aria-checked\\/foo\\:underline,\n            .peer[aria-checked='true'] ~ .peer-aria-checked\\:underline,\n            .peer[aria-labelledby='a b'] ~ .peer-aria-\\[labelledby\\=\\'a_b\\'\\]\\:underline,\n            .peer\\/foo[aria-sort='ascending'] ~ .peer-aria-\\[sort\\=ascending\\]\\/foo\\:underline,\n            .peer[aria-sort='ascending'] ~ .peer-aria-\\[sort\\=ascending\\]\\:underline {\n              text-decoration-line: underline;\n            }\n          `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"should support data variants","suites":[],"updatePoint":{"line":622,"column":32,"index":17483},"line":622,"code":"it('should support data variants', () => {\n  let config = {\n    theme: {\n      data: {\n        checked: 'ui~=\"checked\"'\n      }\n    },\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"data-checked:underline\"></div>\n            <div class=\"data-[position=top]:underline\"></div>\n            <div class=\"data-[foo='bar_baz']:underline\"></div>\n            <div class=\"group-data-checked:underline\"></div>\n            <div class=\"peer-data-checked:underline\"></div>\n            <div class=\"group-data-checked/foo:underline\"></div>\n            <div class=\"peer-data-checked/foo:underline\"></div>\n            <div class=\"group-data-[position=top]:underline\"></div>\n            <div class=\"peer-data-[position=top]:underline\"></div>\n            <div class=\"group-data-[foo='bar_baz']:underline\"></div>\n            <div class=\"peer-data-[foo='bar_baz']:underline\"></div>\n            <div class=\"group-data-[position=top]/foo:underline\"></div>\n            <div class=\"peer-data-[position=top]/foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(flagEnabled(config, 'oxideParser') ? css`\n            .data-checked\\:underline[data-ui~='checked'],\n            .data-\\[foo\\=\\'bar_baz\\'\\]\\:underline[data-foo='bar baz'],\n            .data-\\[position\\=top\\]\\:underline[data-position='top'],\n            .group\\/foo[data-ui~='checked'] .group-data-checked\\/foo\\:underline,\n            .group[data-ui~='checked'] .group-data-checked\\:underline,\n            .group[data-foo='bar baz'] .group-data-\\[foo\\=\\'bar_baz\\'\\]\\:underline,\n            .group\\/foo[data-position='top'] .group-data-\\[position\\=top\\]\\/foo\\:underline,\n            .group[data-position='top'] .group-data-\\[position\\=top\\]\\:underline,\n            .peer\\/foo[data-ui~='checked'] ~ .peer-data-checked\\/foo\\:underline,\n            .peer[data-ui~='checked'] ~ .peer-data-checked\\:underline,\n            .peer[data-foo='bar baz'] ~ .peer-data-\\[foo\\=\\'bar_baz\\'\\]\\:underline,\n            .peer\\/foo[data-position='top'] ~ .peer-data-\\[position\\=top\\]\\/foo\\:underline,\n            .peer[data-position='top'] ~ .peer-data-\\[position\\=top\\]\\:underline {\n              text-decoration-line: underline;\n            }\n          ` : css`\n            .underline,\n            .data-checked\\:underline[data-ui~='checked'],\n            .data-\\[foo\\=\\'bar_baz\\'\\]\\:underline[data-foo='bar baz'],\n            .data-\\[position\\=top\\]\\:underline[data-position='top'],\n            .group\\/foo[data-ui~='checked'] .group-data-checked\\/foo\\:underline,\n            .group[data-ui~='checked'] .group-data-checked\\:underline,\n            .group[data-foo='bar baz'] .group-data-\\[foo\\=\\'bar_baz\\'\\]\\:underline,\n            .group\\/foo[data-position='top'] .group-data-\\[position\\=top\\]\\/foo\\:underline,\n            .group[data-position='top'] .group-data-\\[position\\=top\\]\\:underline,\n            .peer\\/foo[data-ui~='checked'] ~ .peer-data-checked\\/foo\\:underline,\n            .peer[data-ui~='checked'] ~ .peer-data-checked\\:underline,\n            .peer[data-foo='bar baz'] ~ .peer-data-\\[foo\\=\\'bar_baz\\'\\]\\:underline,\n            .peer\\/foo[data-position='top'] ~ .peer-data-\\[position\\=top\\]\\/foo\\:underline,\n            .peer[data-position='top'] ~ .peer-data-\\[position\\=top\\]\\:underline {\n              text-decoration-line: underline;\n            }\n          `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"should support supports","suites":[],"updatePoint":{"line":692,"column":27,"index":21001},"line":692,"code":"it('should support supports', () => {\n  let config = {\n    theme: {\n      supports: {\n        grid: 'display: grid'\n      }\n    },\n    content: [{\n      raw: html`\n          <div>\n            <!-- Property check -->\n            <div class=\"supports-[display:grid]:grid\"></div>\n            <!-- Value with spaces, needs to be normalized -->\n            <div class=\"supports-[transform-origin:5%_5%]:underline\"></div>\n            <!-- Selectors (raw) -->\n            <div class=\"supports-[selector(A_>_B)]:underline\"></div>\n            <!-- 'not' check (raw) -->\n            <div class=\"supports-[not(foo:bar)]:underline\"></div>\n            <!-- 'or' check (raw) -->\n            <div class=\"supports-[(foo:bar)or(bar:baz)]:underline\"></div>\n            <!-- 'and' check (raw) -->\n            <div class=\"supports-[(foo:bar)and(bar:baz)]:underline\"></div>\n            <!-- No value give for the property, defaulting to prop: var(--tw) -->\n            <div class=\"supports-[container-type]:underline\"></div>\n            <!-- Named supports usage -->\n            <div class=\"supports-grid:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @supports (display: grid) {\n        .supports-grid\\:underline {\n          text-decoration-line: underline;\n        }\n        .supports-\\[display\\:grid\\]\\:grid {\n          display: grid;\n        }\n      }\n      @supports (foo: bar) and (bar: baz) {\n        .supports-\\[\\(foo\\:bar\\)and\\(bar\\:baz\\)\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n      @supports (foo: bar) or (bar: baz) {\n        .supports-\\[\\(foo\\:bar\\)or\\(bar\\:baz\\)\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n      @supports (container-type: var(--tw)) {\n        .supports-\\[container-type\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n      @supports not (foo: bar) {\n        .supports-\\[not\\(foo\\:bar\\)\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n      @supports selector(A > B) {\n        .supports-\\[selector\\(A_\\>_B\\)\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n      @supports (transform-origin: 5% 5%) {\n        .supports-\\[transform-origin\\:5\\%_5\\%\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"has-* variants with arbitrary values","suites":[],"updatePoint":{"line":771,"column":42,"index":23527},"line":771,"code":"test('has-* variants with arbitrary values', () => {\n  let config = {\n    theme: {},\n    content: [{\n      raw: html`\n          <div>\n            <figure class=\"has-[figcaption]:inline-block\"></figure>\n            <div class=\"has-[.foo]:flex\"></div>\n            <div class=\"has-[.foo:hover]:block\"></div>\n            <div class=\"has-[[data-active]]:inline\"></div>\n            <div class=\"has-[>_.potato]:table\"></div>\n            <div class=\"has-[+_h2]:grid\"></div>\n            <div class=\"has-[>_h1_+_h2]:contents\"></div>\n            <div class=\"has-[h2]:has-[.banana]:hidden\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .has-\\[\\.foo\\:hover\\]\\:block:has(.foo:hover) {\n        display: block;\n      }\n      .has-\\[figcaption\\]\\:inline-block:has(figcaption) {\n        display: inline-block;\n      }\n      .has-\\[\\[data-active\\]\\]\\:inline:has([data-active]) {\n        display: inline;\n      }\n      .has-\\[\\.foo\\]\\:flex:has(.foo) {\n        display: flex;\n      }\n      .has-\\[\\>_\\.potato\\]\\:table:has(> .potato) {\n        display: table;\n      }\n      .has-\\[\\+_h2\\]\\:grid:has(+ h2) {\n        display: grid;\n      }\n      .has-\\[\\>_h1_\\+_h2\\]\\:contents:has(> h1 + h2) {\n        display: contents;\n      }\n      .has-\\[h2\\]\\:has-\\[\\.banana\\]\\:hidden:has(.banana):has(h2) {\n        display: none;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"group-has-* variants with arbitrary values","suites":[],"updatePoint":{"line":824,"column":48,"index":25051},"line":824,"code":"test('group-has-* variants with arbitrary values', () => {\n  let config = {\n    theme: {},\n    content: [{\n      raw: html`\n          <div class=\"group\">\n            <div class=\"group-has-[>_h1_+_.foo]:block\"></div>\n          </div>\n          <div class=\"group/two\">\n            <div class=\"group-has-[>_h1_+_.foo]/two:flex\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .group:has(> h1 + .foo) .group-has-\\[\\>_h1_\\+_\\.foo\\]\\:block {\n        display: block;\n      }\n      .group\\/two:has(> h1 + .foo) .group-has-\\[\\>_h1_\\+_\\.foo\\]\\/two\\:flex {\n        display: flex;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"peer-has-* variants with arbitrary values","suites":[],"updatePoint":{"line":855,"column":47,"index":25840},"line":855,"code":"test('peer-has-* variants with arbitrary values', () => {\n  let config = {\n    theme: {},\n    content: [{\n      raw: html`\n          <div>\n            <div className=\"peer\"></div>\n            <div class=\"peer-has-[>_h1_+_.foo]:block\"></div>\n          </div>\n          <div>\n            <div className=\"peer\"></div>\n            <div class=\"peer-has-[>_h1_+_.foo]/two:flex\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .peer:has(> h1 + .foo) ~ .peer-has-\\[\\>_h1_\\+_\\.foo\\]\\:block {\n        display: block;\n      }\n      .peer\\/two:has(> h1 + .foo) ~ .peer-has-\\[\\>_h1_\\+_\\.foo\\]\\/two\\:flex {\n        display: flex;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use modifiers and arbitrary groups","suites":[],"updatePoint":{"line":888,"column":60,"index":26690},"line":888,"code":"it('should be possible to use modifiers and arbitrary groups', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"group\">\n              <!-- Default group usage -->\n              <div class=\"group-hover:underline\"></div>\n\n              <!-- Arbitrary variants with pseudo class for group -->\n              <!-- With & -->\n              <div class=\"group-[&:focus]:underline\"></div>\n              <!-- Without & -->\n              <div class=\"group-[:hover]:underline\"></div>\n\n              <!-- Arbitrary variants with attributes selectors for group -->\n              <!-- With & -->\n              <div class=\"group-[&[data-open]]:underline\"></div>\n              <!-- Without & -->\n              <div class=\"group-[[data-open]]:underline\"></div>\n\n              <!-- Arbitrary variants with other selectors -->\n              <!-- With & -->\n              <div class=\"group-[.in-foo_&]:underline\"></div>\n              <!-- Without & -->\n              <div class=\"group-[.in-foo]:underline\"></div>\n            </div>\n\n            <!-- The same as above, but with modifiers -->\n            <div class=\"group/foo\">\n              <div class=\"group-hover/foo:underline\"></div>\n\n              <div class=\"group-[&:focus]/foo:underline\"></div>\n              <div class=\"group-[:hover]/foo:underline\"></div>\n\n              <div class=\"group-[&[data-open]]/foo:underline\"></div>\n              <div class=\"group-[[data-open]]/foo:underline\"></div>\n\n              <div class=\"group-[.in-foo_&]/foo:underline\"></div>\n              <div class=\"group-[.in-foo]/foo:underline\"></div>\n            </div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .group\\/foo:hover .group-hover\\/foo\\:underline,\n      .group:hover .group-hover\\:underline,\n      .group\\/foo:focus .group-\\[\\&\\:focus\\]\\/foo\\:underline,\n      .group:focus .group-\\[\\&\\:focus\\]\\:underline,\n      .group\\/foo[data-open] .group-\\[\\&\\[data-open\\]\\]\\/foo\\:underline,\n      .group[data-open] .group-\\[\\&\\[data-open\\]\\]\\:underline,\n      .group\\/foo.in-foo .group-\\[\\.in-foo\\]\\/foo\\:underline,\n      .group.in-foo .group-\\[\\.in-foo\\]\\:underline,\n      .in-foo .group\\/foo .group-\\[\\.in-foo_\\&\\]\\/foo\\:underline,\n      .in-foo .group .group-\\[\\.in-foo_\\&\\]\\:underline,\n      .group\\/foo:hover .group-\\[\\:hover\\]\\/foo\\:underline,\n      .group:hover .group-\\[\\:hover\\]\\:underline,\n      .group\\/foo[data-open] .group-\\[\\[data-open\\]\\]\\/foo\\:underline,\n      .group[data-open] .group-\\[\\[data-open\\]\\]\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use modifiers and arbitrary peers","suites":[],"updatePoint":{"line":960,"column":59,"index":29445},"line":960,"code":"it('should be possible to use modifiers and arbitrary peers', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"peer\"></div>\n\n            <!-- Default peer usage -->\n            <div class=\"peer-hover:underline\"></div>\n\n            <!-- Arbitrary variants with pseudo class for peer -->\n            <!-- With & -->\n            <div class=\"peer-[&:focus]:underline\"></div>\n            <!-- Without & -->\n            <div class=\"peer-[:hover]:underline\"></div>\n\n            <!-- Arbitrary variants with attributes selectors for peer -->\n            <!-- With & -->\n            <div class=\"peer-[&[data-open]]:underline\"></div>\n            <!-- Without & -->\n            <div class=\"peer-[[data-open]]:underline\"></div>\n\n            <!-- Arbitrary variants with other selectors -->\n            <!-- With & -->\n            <div class=\"peer-[.in-foo_&]:underline\"></div>\n            <!-- Without & -->\n            <div class=\"peer-[.in-foo]:underline\"></div>\n\n            <!-- The same as above, but with modifiers -->\n            <div class=\"peer/foo\"></div>\n\n            <div class=\"peer-hover/foo:underline\"></div>\n\n            <div class=\"peer-[&:focus]/foo:underline\"></div>\n            <div class=\"peer-[:hover]/foo:underline\"></div>\n\n            <div class=\"peer-[&[data-open]]/foo:underline\"></div>\n            <div class=\"peer-[[data-open]]/foo:underline\"></div>\n\n            <div class=\"peer-[.in-foo_&]/foo:underline\"></div>\n            <div class=\"peer-[.in-foo]/foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .peer\\/foo:hover ~ .peer-hover\\/foo\\:underline,\n      .peer:hover ~ .peer-hover\\:underline,\n      .peer\\/foo:focus ~ .peer-\\[\\&\\:focus\\]\\/foo\\:underline,\n      .peer:focus ~ .peer-\\[\\&\\:focus\\]\\:underline,\n      .peer\\/foo[data-open] ~ .peer-\\[\\&\\[data-open\\]\\]\\/foo\\:underline,\n      .peer[data-open] ~ .peer-\\[\\&\\[data-open\\]\\]\\:underline,\n      .peer\\/foo.in-foo ~ .peer-\\[\\.in-foo\\]\\/foo\\:underline,\n      .peer.in-foo ~ .peer-\\[\\.in-foo\\]\\:underline,\n      .in-foo .peer\\/foo ~ .peer-\\[\\.in-foo_\\&\\]\\/foo\\:underline,\n      .in-foo .peer ~ .peer-\\[\\.in-foo_\\&\\]\\:underline,\n      .peer\\/foo:hover ~ .peer-\\[\\:hover\\]\\/foo\\:underline,\n      .peer:hover ~ .peer-\\[\\:hover\\]\\:underline,\n      .peer\\/foo[data-open] ~ .peer-\\[\\[data-open\\]\\]\\/foo\\:underline,\n      .peer[data-open] ~ .peer-\\[\\[data-open\\]\\]\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"Arbitrary variants are ordered alphabetically","suites":[],"updatePoint":{"line":1032,"column":49,"index":32099},"line":1032,"code":"it('Arbitrary variants are ordered alphabetically', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"[&::b]:underline\"></div>\n            <div class=\"[&::a]:underline\"></div>\n            <div class=\"[&::c]:underline\"></div>\n            <div class=\"[&::b]:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .\\[\\&\\:\\:a\\]\\:underline::a {\n        text-decoration-line: underline;\n      }\n      .\\[\\&\\:\\:b\\]\\:underline::b {\n        text-decoration-line: underline;\n      }\n      .\\[\\&\\:\\:c\\]\\:underline::c {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"Arbitrary variants support multiple attribute selectors","suites":[],"updatePoint":{"line":1065,"column":59,"index":32931},"line":1065,"code":"it('Arbitrary variants support multiple attribute selectors', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"[[data-foo='bar'][data-baz]_&]:underline\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      [data-foo='bar'][data-baz] .\\[\\[data-foo\\=\\'bar\\'\\]\\[data-baz\\]_\\&\\]\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"Invalid arbitrary variants selectors should produce nothing instead of failing","suites":[],"updatePoint":{"line":1085,"column":82,"index":33495},"line":1085,"code":"it('Invalid arbitrary variants selectors should produce nothing instead of failing', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"[&;foo]:underline\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"should output responsive variants + stacked variants in the right order","suites":[],"updatePoint":{"line":1103,"column":75,"index":33905},"line":1103,"code":"it('should output responsive variants + stacked variants in the right order', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"xl:p-1\"></div>\n          <div class=\"md:[&_ul]:flex-row\"></div>\n          <div class=\"[&_ul]:flex\"></div>\n          <div class=\"[&_ul]:flex-col\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 1280px) {\n        .xl\\:p-1 {\n          padding: 0.25rem;\n        }\n      }\n      .\\[\\&_ul\\]\\:flex ul {\n        display: flex;\n      }\n      .\\[\\&_ul\\]\\:flex-col ul {\n        flex-direction: column;\n      }\n      @media (min-width: 768px) {\n        .md\\:\\[\\&_ul\\]\\:flex-row ul {\n          flex-direction: row;\n        }\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"it should discard arbitrary variants with multiple selectors","suites":[],"updatePoint":{"line":1141,"column":64,"index":34787},"line":1141,"code":"it('it should discard arbitrary variants with multiple selectors', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"p-1\"></div>\n          <div class=\"[div]:p-1\"></div>\n          <div class=\"[div_&]:p-1\"></div>\n          <div class=\"[div,span]:p-1\"></div>\n          <div class=\"[div_&,span]:p-1\"></div>\n          <div class=\"[div,span_&]:p-1\"></div>\n          <div class=\"[div_&,span_&]:p-1\"></div>\n          <div class=\"hover:[div]:p-1\"></div>\n          <div class=\"hover:[div_&]:p-1\"></div>\n          <div class=\"hover:[div,span]:p-1\"></div>\n          <div class=\"hover:[div_&,span]:p-1\"></div>\n          <div class=\"hover:[div,span_&]:p-1\"></div>\n          <div class=\"hover:[div_&,span_&]:p-1\"></div>\n          <div class=\"hover:[:is(span,div)_&]:p-1\"></div>\n        `\n    }, {\n      // escaped commas are a-ok\n      // This is separate because prettier complains about `\\,` in the template string\n      raw: '<div class=\"hover:[.span\\\\,div_&]:p-1\"></div>'\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .p-1,\n      .span\\,div .hover\\:\\[\\.span\\\\\\,div_\\&\\]\\:p-1:hover,\n      :is(span, div) .hover\\:\\[\\:is\\(span\\,div\\)_\\&\\]\\:p-1:hover,\n      div .\\[div_\\&\\]\\:p-1,\n      div .hover\\:\\[div_\\&\\]\\:p-1:hover {\n        padding: 0.25rem;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"should sort multiple variant fns with normal variants between them","suites":[],"updatePoint":{"line":1184,"column":70,"index":36245},"line":1184,"code":"it('should sort multiple variant fns with normal variants between them', () => {\n  /** @type {string[]} */\n  let lines = [];\n  for (let a of [1, 2]) {\n    for (let b of [2, 1]) {\n      for (let c of [1, 2]) {\n        for (let d of [2, 1]) {\n          for (let e of [1, 2]) {\n            lines.push(`<div class=\"fred${a}:qux-[${b}]:baz${c}:bar-[${d}]:foo${e}:p-1\"></div>`);\n          }\n        }\n      }\n    }\n  }\n\n  // Fisher-Yates shuffle\n  for (let i = lines.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * i);\n    [lines[i], lines[j]] = [lines[j], lines[i]];\n  }\n  let config = {\n    content: [{\n      raw: lines.join('\\n')\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      addVariant,\n      matchVariant\n    }) {\n      addVariant('foo1', \"&[data-foo='1']\");\n      addVariant('foo2', \"&[data-foo='2']\");\n      matchVariant('bar', value => `&[data-bar='${value}']`, {\n        sort: (a, b) => b.value - a.value\n      });\n      addVariant('baz1', \"&[data-baz='1']\");\n      addVariant('baz2', \"&[data-baz='2']\");\n      matchVariant('qux', value => `&[data-qux='${value}']`, {\n        sort: (a, b) => b.value - a.value\n      });\n      addVariant('fred1', \"&[data-fred='1']\");\n      addVariant('fred2', \"&[data-fred='2']\");\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .fred1\\:qux-\\[2\\]\\:baz1\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='1'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[2\\]\\:baz1\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='1'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[2\\]\\:baz1\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='1'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[2\\]\\:baz1\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='1'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[2\\]\\:baz2\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='2'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[2\\]\\:baz2\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='2'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[2\\]\\:baz2\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='2'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[2\\]\\:baz2\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='2'][data-qux='2'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz1\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='1'][data-qux='1'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz1\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='1'][data-qux='1'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz1\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='1'][data-qux='1'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz1\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='1'][data-qux='1'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz2\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='2'][data-qux='1'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz2\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='2'][data-qux='1'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz2\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='2'][data-qux='1'][data-fred='1'],\n      .fred1\\:qux-\\[1\\]\\:baz2\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='2'][data-qux='1'][data-fred='1'],\n      .fred2\\:qux-\\[2\\]\\:baz1\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='1'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[2\\]\\:baz1\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='1'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[2\\]\\:baz1\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='1'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[2\\]\\:baz1\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='1'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[2\\]\\:baz2\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='2'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[2\\]\\:baz2\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='2'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[2\\]\\:baz2\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='2'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[2\\]\\:baz2\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='2'][data-qux='2'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz1\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='1'][data-qux='1'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz1\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='1'][data-qux='1'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz1\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='1'][data-qux='1'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz1\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='1'][data-qux='1'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz2\\:bar-\\[2\\]\\:foo1\\:p-1[data-foo='1'][data-bar='2'][data-baz='2'][data-qux='1'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz2\\:bar-\\[2\\]\\:foo2\\:p-1[data-foo='2'][data-bar='2'][data-baz='2'][data-qux='1'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz2\\:bar-\\[1\\]\\:foo1\\:p-1[data-foo='1'][data-bar='1'][data-baz='2'][data-qux='1'][data-fred='2'],\n      .fred2\\:qux-\\[1\\]\\:baz2\\:bar-\\[1\\]\\:foo2\\:p-1[data-foo='2'][data-bar='1'][data-baz='2'][data-qux='1'][data-fred='2'] {\n        padding: 0.25rem;\n      }\n    `);\n  });\n});","file":"arbitrary-variants.test.js","skipped":false,"dir":"tests"},{"name":"basic usage","suites":[],"updatePoint":{"line":5,"column":17,"index":170},"line":5,"code":"test('basic usage', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"sr-only\"></div>\n          <div class=\"content-center\"></div>\n          <div class=\"items-start\"></div>\n          <div class=\"self-end\"></div>\n          <div class=\"animate-none\"></div>\n          <div class=\"animate-spin\"></div>\n          <div class=\"appearance-none\"></div>\n          <div class=\"bg-local\"></div>\n          <div class=\"bg-clip-border\"></div>\n          <div class=\"bg-green-500\"></div>\n          <div class=\"bg-gradient-to-r\"></div>\n          <div class=\"bg-opacity-20\"></div>\n          <div class=\"bg-top\"></div>\n          <div class=\"bg-no-repeat\"></div>\n          <div class=\"bg-cover\"></div>\n          <div class=\"bg-origin-border bg-origin-padding bg-origin-content\"></div>\n          <div class=\"border-collapse\"></div>\n          <div class=\"border-spacing-4 border-spacing-x-6 border-spacing-y-8\"></div>\n          <div\n            class=\"border-black border-t-black border-r-black border-b-black border-l-black border-x-black border-y-black\"\n          ></div>\n          <div class=\"border-opacity-10\"></div>\n          <div class=\"rounded-md\"></div>\n          <div class=\"border-solid border-hidden\"></div>\n          <div class=\"border\"></div>\n          <div class=\"border-2 border-t border-b-4 border-x-4 border-y-4\"></div>\n          <div class=\"shadow shadow-md shadow-lg\"></div>\n          <div class=\"shadow-black shadow-red-500/25 shadow-blue-100/10\"></div>\n          <div class=\"decoration-clone decoration-slice\"></div>\n          <div class=\"box-decoration-clone box-decoration-slice\"></div>\n          <div class=\"box-border\"></div>\n          <div class=\"clear-left\"></div>\n          <div class=\"container\"></div>\n          <div class=\"cursor-pointer\"></div>\n          <div class=\"touch-pan-y touch-manipulation\"></div>\n          <div class=\"hidden inline-grid\"></div>\n          <div class=\"divide-gray-200\"></div>\n          <div class=\"divide-opacity-50\"></div>\n          <div class=\"divide-dotted\"></div>\n          <div class=\"divide-x-2 divide-y-4 divide-x-0 divide-y-0\"></div>\n          <div class=\"fill-current\"></div>\n          <div class=\"flex-1\"></div>\n          <div class=\"flex-row-reverse\"></div>\n          <div class=\"flex-grow flex-grow-0\"></div>\n          <div class=\"grow grow-0\"></div>\n          <div class=\"flex-shrink flex-shrink-0\"></div>\n          <div class=\"shrink shrink-0\"></div>\n          <div class=\"basis-auto basis-7\"></div>\n          <div class=\"flex-wrap\"></div>\n          <div class=\"float-right\"></div>\n          <div class=\"font-sans\"></div>\n          <div class=\"text-2xl\"></div>\n          <div class=\"antialiased\"></div>\n          <div class=\"not-italic\"></div>\n          <div class=\"tabular-nums ordinal diagonal-fractions\"></div>\n          <div class=\"font-medium\"></div>\n          <div class=\"gap-x-2 gap-y-3 gap-4\"></div>\n          <div class=\"from-red-300 via-purple-200 to-blue-400\"></div>\n          <div class=\"columns-1 columns-md\"></div>\n          <div class=\"break-before-page break-inside-avoid-column break-after-auto\"></div>\n          <div class=\"auto-cols-min\"></div>\n          <div class=\"grid-flow-row\"></div>\n          <div class=\"auto-rows-max\"></div>\n          <div class=\"col-span-3\"></div>\n          <div class=\"col-start-1\"></div>\n          <div class=\"col-end-4\"></div>\n          <div class=\"row-span-2\"></div>\n          <div class=\"row-start-3\"></div>\n          <div class=\"row-end-5\"></div>\n          <div class=\"grid-cols-4\"></div>\n          <div class=\"grid-rows-3\"></div>\n          <div class=\"h-16\"></div>\n          <div class=\"inset-0 inset-y-4 inset-x-2 top-6 right-8 bottom-12 left-16\"></div>\n          <div class=\"isolate isolation-auto\"></div>\n          <div class=\"justify-center\"></div>\n          <div class=\"justify-items-end\"></div>\n          <div class=\"justify-self-start\"></div>\n          <div class=\"tracking-tight\"></div>\n          <div class=\"leading-relaxed leading-5\"></div>\n          <div class=\"list-inside\"></div>\n          <div class=\"list-disc\"></div>\n          <div class=\"list-image-none\"></div>\n          <div class=\"m-4 my-2 mx-auto mt-0 mr-1 mb-3 ml-4\"></div>\n          <div class=\"h-0 h-full h-screen h-svh h-lvh h-dvh\"></div>\n          <div class=\"max-h-0 max-h-full max-h-screen max-h-svh max-h-lvh max-h-dvh\"></div>\n          <div class=\"max-w-full\"></div>\n          <div class=\"min-h-0 min-h-full min-h-0 min-h-svh min-h-lvh min-h-dvh\"></div>\n          <div class=\"min-w-min\"></div>\n          <div class=\"object-cover\"></div>\n          <div class=\"object-bottom\"></div>\n          <div class=\"opacity-90\"></div>\n          <div class=\"bg-blend-darken bg-blend-difference\"></div>\n          <div class=\"mix-blend-multiply mix-blend-saturation\"></div>\n          <div class=\"order-last order-2\"></div>\n          <div\n            class=\"outline outline-dashed outline-none outline-black outline-4 outline-offset-2 -outline-offset-2\"\n          ></div>\n          <div class=\"overflow-hidden\"></div>\n          <div class=\"overscroll-contain\"></div>\n          <div class=\"p-4 py-2 px-3 pt-1 pr-2 pb-3 pl-4\"></div>\n          <div class=\"place-content-start\"></div>\n          <div class=\"placeholder-green-300\"></div>\n          <div class=\"placeholder-opacity-60\"></div>\n          <div class=\"caret-red-600\"></div>\n          <div class=\"accent-red-600\"></div>\n          <div class=\"place-items-end\"></div>\n          <div class=\"place-self-center\"></div>\n          <div class=\"pointer-events-none\"></div>\n          <div class=\"absolute\"></div>\n          <div class=\"resize-none\"></div>\n          <div class=\"snap-x snap-mandatory\"></div>\n          <div class=\"snap-center snap-always\"></div>\n          <div class=\"scroll-mt-6\"></div>\n          <div class=\"scroll-p-6\"></div>\n          <div class=\"ring-white\"></div>\n          <div class=\"ring-offset-blue-300\"></div>\n          <div class=\"ring-offset-2\"></div>\n          <div class=\"ring-opacity-40\"></div>\n          <div class=\"ring ring-4\"></div>\n          <div\n            class=\"\n              filter filter-none\n              blur-md\n              brightness-150\n              contrast-50\n              drop-shadow-md\n              grayscale\n              hue-rotate-60\n              invert\n              saturate-200\n              sepia\n            \"\n          ></div>\n          <div\n            class=\"\n              backdrop-filter\n              backdrop-filter-none\n              backdrop-blur-lg\n              backdrop-brightness-50\n              backdrop-contrast-0\n              backdrop-grayscale\n              backdrop-hue-rotate-90\n              backdrop-invert\n              backdrop-opacity-75\n              backdrop-saturate-150\n              backdrop-sepia\n            \"\n          ></div>\n          <div class=\"rotate-3\"></div>\n          <div class=\"scale-95 -scale-x-100\"></div>\n          <div class=\"skew-y-12 skew-x-12\"></div>\n          <div class=\"space-x-4 space-y-3 space-x-reverse space-y-reverse\"></div>\n          <div class=\"stroke-current\"></div>\n          <div class=\"stroke-2\"></div>\n          <div class=\"table-fixed\"></div>\n          <div class=\"caption-top\"></div>\n          <div class=\"caption-bottom\"></div>\n          <div class=\"text-center\"></div>\n          <div class=\"indent-6 -indent-12\"></div>\n          <div class=\"text-indigo-500\"></div>\n          <div class=\"text-opacity-10\"></div>\n          <div class=\"underline\"></div>\n          <div class=\"decoration-underline\"></div>\n          <div class=\"decoration-red-600\"></div>\n          <div class=\"decoration-solid\"></div>\n          <div class=\"decoration-1\"></div>\n          <div class=\"decoration-2\"></div>\n          <div class=\"underline-offset-1\"></div>\n          <div class=\"underline-offset-2\"></div>\n          <div class=\"underline-right\"></div>\n          <div class=\"overflow-ellipsis truncate\"></div>\n          <div class=\"uppercase\"></div>\n          <div class=\"transform transform-gpu transform-none\"></div>\n          <div class=\"origin-top-right\"></div>\n          <div class=\"delay-300\"></div>\n          <div class=\"duration-200\"></div>\n          <div class=\"transition transition-all\"></div>\n          <div class=\"ease-in-out\"></div>\n          <div class=\"translate-x-5 -translate-x-4 translate-y-6 -translate-x-3\"></div>\n          <div class=\"touch-pan-up touch-pan-x touch-pinch-zoom\"></div>\n          <div class=\"select-none\"></div>\n          <div class=\"align-middle\"></div>\n          <div class=\"invisible\"></div>\n          <div class=\"collapse\"></div>\n          <div class=\"whitespace-nowrap\"></div>\n          <div class=\"text-wrap text-balance text-nowrap\"></div>\n          <div class=\"w-12\"></div>\n          <div class=\"break-words\"></div>\n          <div class=\"z-30\"></div>\n          <div class=\"will-change-scroll will-change-transform\"></div>\n          <div class=\"content-none\"></div>\n          <div class=\"aspect-square aspect-video\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(fs.readFileSync(path.resolve(__dirname, './basic-usage.test.css'), 'utf8'));\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"all plugins are executed that match a candidate","suites":[],"updatePoint":{"line":216,"column":53,"index":9464},"line":216,"code":"test('all plugins are executed that match a candidate', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-green-light bg-green\"></div>`\n    }],\n    theme: {\n      colors: {\n        green: {\n          light: 'green'\n        }\n      }\n    },\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n\n    .bg-green {\n      /* Empty on purpose */\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-green-light {\n        --tw-bg-opacity: 1;\n        background-color: rgb(0 128 0 / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"per-plugin colors with the same key can differ when using a custom colors object","suites":[],"updatePoint":{"line":248,"column":86,"index":10147},"line":248,"code":"test('per-plugin colors with the same key can differ when using a custom colors object', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"bg-theme text-theme\">This should be green text on red background.</div>\n        `\n    }],\n    theme: {\n      // colors & theme MUST be plain objects\n      // If they're functions here the test passes regardless\n      colors: {\n        theme: {\n          bg: 'red',\n          text: 'green'\n        }\n      },\n      extend: {\n        textColor: {\n          theme: {\n            DEFAULT: 'green'\n          }\n        },\n        backgroundColor: {\n          theme: {\n            DEFAULT: 'red'\n          }\n        }\n      }\n    },\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-theme {\n        --tw-bg-opacity: 1;\n        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n      }\n      .text-theme {\n        --tw-text-opacity: 1;\n        color: rgb(0 128 0 / var(--tw-text-opacity));\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"default ring color can be a function","suites":[],"updatePoint":{"line":297,"column":42,"index":11240},"line":297,"code":"test('default ring color can be a function', () => {\n  function color(variable) {\n    return function ({\n      opacityVariable,\n      opacityValue\n    }) {\n      if (opacityValue !== undefined) {\n        return `rgba(${variable}, ${opacityValue})`;\n      }\n      if (opacityVariable !== undefined) {\n        return `rgba(${variable}, var(${opacityVariable}, 1))`;\n      }\n      return `rgb(${variable})`;\n    };\n  }\n  let config = {\n    content: [{\n      raw: html` <div class=\"ring\"></div> `\n    }],\n    theme: {\n      extend: {\n        ringColor: {\n          DEFAULT: color('var(--red)')\n        }\n      }\n    },\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: 'rgba(var(--red), 0.5)'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"falsy config values still work","suites":[],"updatePoint":{"line":348,"column":34,"index":12574},"line":348,"code":"it('falsy config values still work', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"inset-0\"></div>`\n    }],\n    theme: {\n      inset: {\n        0: 0\n      }\n    },\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .inset-0 {\n        inset: 0;\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"shadows support values without a leading zero","suites":[],"updatePoint":{"line":374,"column":49,"index":13049},"line":374,"code":"it('shadows support values without a leading zero', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"shadow-one shadow-two\"></div>`\n    }],\n    theme: {\n      boxShadow: {\n        one: '0.5rem 0.5rem 0.5rem #0005',\n        two: '.5rem .5rem .5rem #0005'\n      }\n    },\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .shadow-one,\n      .shadow-two {\n        --tw-shadow: 0.5rem 0.5rem 0.5rem #0005;\n        --tw-shadow-colored: 0.5rem 0.5rem 0.5rem var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"can scan extremely long classes without crashing","suites":[],"updatePoint":{"line":405,"column":52,"index":13864},"line":405,"code":"it('can scan extremely long classes without crashing', () => {\n  let val = 'cols-' + '-a'.repeat(65536);\n  let config = {\n    content: [{\n      raw: html`<div class=\"${val}\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"does not produce duplicate output when seeing variants preceding a wildcard (*)","suites":[],"updatePoint":{"line":422,"column":83,"index":14293},"line":422,"code":"it('does not produce duplicate output when seeing variants preceding a wildcard (*)', () => {\n  let config = {\n    content: [{\n      raw: html`underline focus:*`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    * {\n      color: red;\n    }\n\n    .combined,\n    * {\n      text-align: center;\n    }\n\n    @layer base {\n      * {\n        color: blue;\n      }\n\n      .combined,\n      * {\n        color: red;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .combined,\n      * {\n        color: red;\n      }\n      ${defaults}\n      .underline {\n        text-decoration-line: underline;\n      }\n      * {\n        color: red;\n      }\n      .combined,\n      * {\n        text-align: center;\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"can parse box shadows with variables","suites":[],"updatePoint":{"line":476,"column":40,"index":15130},"line":476,"code":"it('can parse box shadows with variables', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"shadow-lg\"></div>`\n    }],\n    theme: {\n      boxShadow: {\n        lg: 'var(--a, 0 35px 60px -15px rgba(0, 0, 0)), 0 0 1px rgb(0, 0, 0)'\n      }\n    },\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .shadow-lg {\n        --tw-shadow: var(--a, 0 35px 60px -15px #000), 0 0 1px #000;\n        --tw-shadow-colored: 0 35px 60px -15px var(--tw-shadow-color),\n          0 0 1px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"should generate styles using :not(.unknown-class) even if `.unknown-class` does not exist","suites":[],"updatePoint":{"line":505,"column":93,"index":15992},"line":505,"code":"it('should generate styles using :not(.unknown-class) even if `.unknown-class` does not exist', () => {\n  let config = {\n    content: [{\n      raw: html`<div></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind components;\n\n    @layer components {\n      div:not(.unknown-class) {\n        color: red;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      div:not(.unknown-class) {\n        color: red;\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"supports multiple backgrounds as arbitrary values even if only some are quoted","suites":[],"updatePoint":{"line":531,"column":82,"index":16520},"line":531,"code":"it('supports multiple backgrounds as arbitrary values even if only some are quoted', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"bg-[url('/images/one-two-three.png'),linear-gradient(to_right,_#eeeeee,_#000000)]\"\n        ></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[url\\(\\'\\/images\\/one-two-three\\.png\\'\\)\\,linear-gradient\\(to_right\\,_\\#eeeeee\\,_\\#000000\\)\\] {\n        background-image: url('/images/one-two-three.png'), linear-gradient(to right, #eee, #000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"The \"default\" ring opacity is used by the default ring color when not using respectDefaultRingColorOpacity (1)","suites":[],"updatePoint":{"line":553,"column":114,"index":17251},"line":553,"code":"it('The \"default\" ring opacity is used by the default ring color when not using respectDefaultRingColorOpacity (1)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#3b82f680'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"The \"default\" ring opacity is used by the default ring color when not using respectDefaultRingColorOpacity (2)","suites":[],"updatePoint":{"line":581,"column":114,"index":18131},"line":581,"code":"it('The \"default\" ring opacity is used by the default ring color when not using respectDefaultRingColorOpacity (2)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringOpacity: {\n        DEFAULT: 0.75\n      }\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#3b82f6bf'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"Customizing the default ring color uses the \"default\" opacity when not using respectDefaultRingColorOpacity (1)","suites":[],"updatePoint":{"line":614,"column":115,"index":19083},"line":614,"code":"it('Customizing the default ring color uses the \"default\" opacity when not using respectDefaultRingColorOpacity (1)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringColor: {\n        DEFAULT: '#ff7f7f'\n      }\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#ff7f7f80'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"Customizing the default ring color uses the \"default\" opacity when not using respectDefaultRingColorOpacity (2)","suites":[],"updatePoint":{"line":647,"column":115,"index":20038},"line":647,"code":"it('Customizing the default ring color uses the \"default\" opacity when not using respectDefaultRingColorOpacity (2)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringColor: {\n        DEFAULT: '#ff7f7f00'\n      }\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#ff7f7f80'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"The \"default\" ring color ignores the default opacity when using respectDefaultRingColorOpacity (1)","suites":[],"updatePoint":{"line":680,"column":102,"index":20982},"line":680,"code":"it('The \"default\" ring color ignores the default opacity when using respectDefaultRingColorOpacity (1)', () => {\n  let config = {\n    future: {\n      respectDefaultRingColorOpacity: true\n    },\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#3b82f67f'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"The \"default\" ring color ignores the default opacity when using respectDefaultRingColorOpacity (2)","suites":[],"updatePoint":{"line":711,"column":102,"index":21914},"line":711,"code":"it('The \"default\" ring color ignores the default opacity when using respectDefaultRingColorOpacity (2)', () => {\n  let config = {\n    future: {\n      respectDefaultRingColorOpacity: true\n    },\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringOpacity: {\n        DEFAULT: 0.75\n      }\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#3b82f67f'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"Customizing the default ring color preserves its opacity when using respectDefaultRingColorOpacity (1)","suites":[],"updatePoint":{"line":747,"column":106,"index":22921},"line":747,"code":"it('Customizing the default ring color preserves its opacity when using respectDefaultRingColorOpacity (1)', () => {\n  let config = {\n    future: {\n      respectDefaultRingColorOpacity: true\n    },\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringColor: {\n        DEFAULT: '#ff7f7f'\n      }\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#ff7f7f'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"Customizing the default ring color preserves its opacity when using respectDefaultRingColorOpacity (2)","suites":[],"updatePoint":{"line":783,"column":106,"index":23929},"line":783,"code":"it('Customizing the default ring color preserves its opacity when using respectDefaultRingColorOpacity (2)', () => {\n  let config = {\n    future: {\n      respectDefaultRingColorOpacity: true\n    },\n    content: [{\n      raw: html`<div class=\"ring\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringColor: {\n        DEFAULT: '#ff7f7f00'\n      }\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults({\n      defaultRingColor: '#ff7f7f00'\n    })}\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"A bare ring-opacity utility is not supported when not using respectDefaultRingColorOpacity","suites":[],"updatePoint":{"line":819,"column":94,"index":24929},"line":819,"code":"it('A bare ring-opacity utility is not supported when not using respectDefaultRingColorOpacity', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"ring-opacity\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringOpacity: {\n        DEFAULT: '0.33'\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"A bare ring-opacity utility is supported when using respectDefaultRingColorOpacity","suites":[],"updatePoint":{"line":840,"column":88,"index":25400},"line":840,"code":"test('A bare ring-opacity utility is supported when using respectDefaultRingColorOpacity', () => {\n  let config = {\n    future: {\n      respectDefaultRingColorOpacity: true\n    },\n    content: [{\n      raw: html`<div class=\"ring-opacity\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      ringOpacity: {\n        DEFAULT: '0.33'\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .ring-opacity {\n        --tw-ring-opacity: 0.33;\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"Ring color utilities are generated when using respectDefaultRingColorOpacity","suites":[],"updatePoint":{"line":868,"column":80,"index":25995},"line":868,"code":"it('Ring color utilities are generated when using respectDefaultRingColorOpacity', () => {\n  let config = {\n    future: {\n      respectDefaultRingColorOpacity: true\n    },\n    content: [{\n      raw: html`<div class=\"ring ring-blue-500\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .ring {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n      .ring-blue-500 {\n        --tw-ring-opacity: 1;\n        --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity));\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"should not crash when group names contain special characters","suites":[],"updatePoint":{"line":899,"column":66,"index":26950},"line":899,"code":"test('should not crash when group names contain special characters', () => {\n  let config = {\n    future: {\n      respectDefaultRingColorOpacity: true\n    },\n    content: [{\n      raw: '<div class=\"group/${id}\"><div class=\"group-hover/${id}:visible\"></div></div>'\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    if (flagEnabled(config, 'oxideParser')) {\n      expect(result.css).toMatchFormattedCss(css``);\n    } else {\n      expect(result.css).toMatchFormattedCss(css`\n        .group\\/\\$\\{id\\}:hover .group-hover\\/\\$\\{id\\}\\:visible {\n          visibility: visible;\n        }\n      `);\n    }\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"should not crash when matching variants where utility classes are doubled up","suites":[],"updatePoint":{"line":926,"column":80,"index":27677},"line":926,"code":"it('should not crash when matching variants where utility classes are doubled up', () => {\n  let config = {\n    content: [{\n      raw: '<div class=\"hover:foo\"></div>'\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .foo.foo {\n        text-decoration-line: underline;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .hover\\:foo:hover.hover\\:foo:hover {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"detects quoted arbitrary values containing a slash","suites":[],"updatePoint":{"line":948,"column":56,"index":28179},"line":948,"code":"test('detects quoted arbitrary values containing a slash', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"group-[[href^='/']]:hidden\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(flagEnabled(config, 'oxideParser') ? css`\n          .group[href^='/'] .group-\\[\\[href\\^\\=\\'\\/\\'\\]\\]\\:hidden {\n            display: none;\n          }\n        ` : css`\n          .hidden,\n          .group[href^='/'] .group-\\[\\[href\\^\\=\\'\\/\\'\\]\\]\\:hidden {\n            display: none;\n          }\n        `);\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"handled quoted arbitrary values containing escaped spaces","suites":[],"updatePoint":{"line":969,"column":63,"index":28807},"line":969,"code":"test('handled quoted arbitrary values containing escaped spaces', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"group-[[href^='_bar']]:hidden\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(flagEnabled(config, 'oxideParser') ? css`\n          .group[href^=' bar'] .group-\\[\\[href\\^\\=\\'_bar\\'\\]\\]\\:hidden {\n            display: none;\n          }\n        ` : css`\n          .hidden,\n          .group[href^=' bar'] .group-\\[\\[href\\^\\=\\'_bar\\'\\]\\]\\:hidden {\n            display: none;\n          }\n        `);\n});","file":"basic-usage.test.js","skipped":false,"dir":"tests"},{"name":"can block classes matched literally","suites":[],"updatePoint":{"line":2,"column":39,"index":85},"line":2,"code":"it('can block classes matched literally', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"font-bold uppercase sm:hover:text-sm hover:text-sm bg-red-500/50 my-custom-class\"\n        ></div>`\n    }],\n    blocklist: ['font', 'uppercase', 'hover:text-sm', 'bg-red-500/50', 'my-custom-class']\n  };\n  let input = css`\n    @tailwind utilities;\n    .my-custom-class {\n      color: red;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n      .my-custom-class {\n        color: red;\n      }\n      @media (min-width: 640px) {\n        .sm\\:hover\\:text-sm:hover {\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n        }\n      }\n    `);\n  });\n});","file":"blocklist.test.js","skipped":false,"dir":"tests"},{"name":"can block classes inside @layer","suites":[],"updatePoint":{"line":34,"column":35,"index":875},"line":34,"code":"it('can block classes inside @layer', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-bold my-custom-class\"></div>`\n    }],\n    blocklist: ['my-custom-class']\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .my-custom-class {\n        color: red;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"blocklist.test.js","skipped":false,"dir":"tests"},{"name":"blocklists do NOT support regexes","suites":[],"updatePoint":{"line":57,"column":37,"index":1369},"line":57,"code":"it('blocklists do NOT support regexes', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-bold bg-[#f00d1e]\"></div>`\n    }],\n    blocklist: [/^bg-\\[[^]+\\]$/]\n  };\n  let result = await run('@tailwind utilities', config);\n  expect(result.css).toMatchFormattedCss(css`\n    .bg-\\[\\#f00d1e\\] {\n      --tw-bg-opacity: 1;\n      background-color: rgb(240 13 30 / var(--tw-bg-opacity));\n    }\n    .font-bold {\n      font-weight: 700;\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['blocklist-invalid']);\n});","file":"blocklist.test.js","skipped":false,"dir":"tests"},{"name":"can block classes generated by the safelist","suites":[],"updatePoint":{"line":76,"column":47,"index":1906},"line":76,"code":"it('can block classes generated by the safelist', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-bold\"></div>`\n    }],\n    safelist: [{\n      pattern: /^bg-red-(400|500)$/\n    }],\n    blocklist: ['bg-red-500']\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-400 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n      }\n      .font-bold {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"blocklist.test.js","skipped":false,"dir":"tests"},{"name":"collapse adjacent rules","suites":[],"updatePoint":{"line":2,"column":29,"index":85},"line":2,"code":"test('collapse adjacent rules', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"custom-component\"></div>\n          <div class=\"sm:custom-component\"></div>\n          <div class=\"md:custom-component\"></div>\n          <div class=\"lg:custom-component\"></div>\n          <div class=\"font-bold\"></div>\n          <div class=\"sm:font-bold\"></div>\n          <div class=\"sm:text-center\"></div>\n          <div class=\"md:font-bold\"></div>\n          <div class=\"md:text-center\"></div>\n          <div class=\"lg:font-bold\"></div>\n          <div class=\"lg:text-center\"></div>\n          <div class=\"some-apply-thing\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: [function ({\n      addVariant\n    }) {\n      addVariant('foo-bar', '@supports (foo: bar)');\n    }]\n  };\n  let input = css`\n    @tailwind base;\n    @font-face {\n      font-family: 'Inter';\n      src: url('/fonts/Inter.woff2') format('woff2'), url('/fonts/Inter.woff') format('woff');\n    }\n    @font-face {\n      font-family: 'Gilroy';\n      src: url('/fonts/Gilroy.woff2') format('woff2'), url('/fonts/Gilroy.woff') format('woff');\n    }\n    @page {\n      margin: 1cm;\n    }\n    @tailwind components;\n    @tailwind utilities;\n    @layer base {\n      @font-face {\n        font-family: 'Poppins';\n        src: url('/fonts/Poppins.woff2') format('woff2'), url('/fonts/Poppins.woff') format('woff');\n      }\n      @font-face {\n        font-family: 'Proxima Nova';\n        src: url('/fonts/ProximaNova.woff2') format('woff2'),\n          url('/fonts/ProximaNova.woff') format('woff');\n      }\n    }\n    .foo,\n    .bar {\n      color: black;\n    }\n    .foo,\n    .bar {\n      font-weight: 700;\n    }\n    .some-apply-thing {\n      @apply foo-bar:md:text-black foo-bar:md:font-bold foo-bar:text-black foo-bar:font-bold md:font-bold md:text-black;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @font-face {\n        font-family: Poppins;\n        src: url('/fonts/Poppins.woff2') format('woff2'), url('/fonts/Poppins.woff') format('woff');\n      }\n      @font-face {\n        font-family: Proxima Nova;\n        src: url('/fonts/ProximaNova.woff2') format('woff2'),\n          url('/fonts/ProximaNova.woff') format('woff');\n      }\n      ${defaults}\n      @font-face {\n        font-family: Inter;\n        src: url('/fonts/Inter.woff2') format('woff2'), url('/fonts/Inter.woff') format('woff');\n      }\n      @font-face {\n        font-family: Gilroy;\n        src: url('/fonts/Gilroy.woff2') format('woff2'), url('/fonts/Gilroy.woff') format('woff');\n      }\n      @page {\n        margin: 1cm;\n      }\n      .font-bold {\n        font-weight: 700;\n      }\n      .foo,\n      .bar {\n        color: #000;\n        font-weight: 700;\n      }\n      @supports (foo: bar) {\n        .some-apply-thing {\n          --tw-text-opacity: 1;\n          color: rgb(0 0 0 / var(--tw-text-opacity));\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 768px) {\n        .some-apply-thing {\n          --tw-text-opacity: 1;\n          color: rgb(0 0 0 / var(--tw-text-opacity));\n          font-weight: 700;\n        }\n      }\n      @supports (foo: bar) {\n        @media (min-width: 768px) {\n          .some-apply-thing {\n            --tw-text-opacity: 1;\n            color: rgb(0 0 0 / var(--tw-text-opacity));\n            font-weight: 700;\n          }\n        }\n      }\n      @media (min-width: 640px) {\n        .sm\\:text-center {\n          text-align: center;\n        }\n        .sm\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 768px) {\n        .md\\:text-center {\n          text-align: center;\n        }\n        .md\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 1024px) {\n        .lg\\:text-center {\n          text-align: center;\n        }\n        .lg\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"collapse-adjacent-rules.test.js","skipped":false,"dir":"tests"},{"name":"duplicate url imports does not break rule collapsing","suites":[],"updatePoint":{"line":149,"column":58,"index":4090},"line":149,"code":"test('duplicate url imports does not break rule collapsing', () => {\n  let config = {\n    content: [{\n      raw: html``\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @import url('https://example.com');\n    @import url('https://example.com');\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @import 'https://example.com';\n    `);\n  });\n});","file":"collapse-adjacent-rules.test.js","skipped":false,"dir":"tests"},{"name":"should collapse duplicate declarations with the same units (px)","suites":[],"updatePoint":{"line":2,"column":67,"index":113},"line":2,"code":"it('should collapse duplicate declarations with the same units (px)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"example\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      .example {\n        height: 100px;\n        height: 200px;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .example {\n        height: 200px;\n      }\n    `);\n  });\n});","file":"collapse-duplicate-declarations.test.js","skipped":false,"dir":"tests"},{"name":"should collapse duplicate declarations with the same units (no unit)","suites":[],"updatePoint":{"line":30,"column":72,"index":661},"line":30,"code":"it('should collapse duplicate declarations with the same units (no unit)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"example\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      .example {\n        line-height: 3;\n        line-height: 2;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .example {\n        line-height: 2;\n      }\n    `);\n  });\n});","file":"collapse-duplicate-declarations.test.js","skipped":false,"dir":"tests"},{"name":"should not collapse duplicate declarations with the different units","suites":[],"updatePoint":{"line":58,"column":71,"index":1211},"line":58,"code":"it('should not collapse duplicate declarations with the different units', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"example\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      .example {\n        height: 100px;\n        height: 50%;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .example {\n        height: 50%;\n      }\n    `);\n  });\n});","file":"collapse-duplicate-declarations.test.js","skipped":false,"dir":"tests"},{"name":"should collapse the duplicate declarations with the same unit, but leave the ones with different units","suites":[],"updatePoint":{"line":86,"column":106,"index":1789},"line":86,"code":"it('should collapse the duplicate declarations with the same unit, but leave the ones with different units', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"example\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      .example {\n        height: 100px;\n        height: 50%;\n        height: 20vh;\n        height: 200px;\n        height: 100%;\n        height: 30vh;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .example {\n        height: 30vh;\n      }\n    `);\n  });\n});","file":"collapse-duplicate-declarations.test.js","skipped":false,"dir":"tests"},{"name":"should collapse the duplicate declarations with the exact same value","suites":[],"updatePoint":{"line":118,"column":72,"index":2423},"line":118,"code":"it('should collapse the duplicate declarations with the exact same value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"example\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      .example {\n        height: var(--value);\n        color: blue;\n        height: var(--value);\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .example {\n        color: #00f;\n        height: var(--value);\n      }\n    `);\n  });\n});","file":"collapse-duplicate-declarations.test.js","skipped":false,"dir":"tests"},{"name":"should work on a real world example","suites":[],"updatePoint":{"line":148,"column":39,"index":3001},"line":148,"code":"it('should work on a real world example', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"h-available\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      .h-available {\n        height: 100%;\n        height: 100vh;\n        height: -webkit-fill-available;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .h-available {\n        height: 100vh;\n        height: -webkit-fill-available;\n      }\n    `);\n  });\n});","file":"collapse-duplicate-declarations.test.js","skipped":false,"dir":"tests"},{"name":"basic color opacity modifier","suites":[],"updatePoint":{"line":2,"column":34,"index":80},"line":2,"code":"test('basic color opacity modifier', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-red-500/50\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-500\\/50 {\n        background-color: #ef444480;\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"colors with slashes are matched first","suites":[],"updatePoint":{"line":16,"column":43,"index":432},"line":16,"code":"test('colors with slashes are matched first', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-red-500/50\"></div>`\n    }],\n    theme: {\n      extend: {\n        colors: {\n          'red-500/50': '#ff0000'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-500\\/50 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary color opacity modifier","suites":[],"updatePoint":{"line":38,"column":38,"index":939},"line":38,"code":"test('arbitrary color opacity modifier', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-red-500/[var(--opacity)]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-500\\/\\[var\\(--opacity\\)\\] {\n        background-color: rgb(239 68 68 / var(--opacity));\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"missing alpha generates nothing","suites":[],"updatePoint":{"line":52,"column":37,"index":1339},"line":52,"code":"test('missing alpha generates nothing', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-red-500/\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(``);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary color with opacity from scale","suites":[],"updatePoint":{"line":62,"column":45,"index":1614},"line":62,"code":"test('arbitrary color with opacity from scale', async () => {\n  let config = {\n    content: [{\n      raw: 'bg-[wheat]/50'\n    }],\n    theme: {},\n    plugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[wheat\\]\\/50 {\n        background-color: #f5deb380;\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary color with arbitrary opacity","suites":[],"updatePoint":{"line":78,"column":44,"index":1977},"line":78,"code":"test('arbitrary color with arbitrary opacity', async () => {\n  let config = {\n    content: [{\n      raw: 'bg-[#bada55]/[0.2]'\n    }],\n    theme: {},\n    plugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[\\#bada55\\]\\/\\[0\\.2\\] {\n        background-color: #bada5533;\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"undefined theme color with opacity from scale","suites":[],"updatePoint":{"line":94,"column":51,"index":2361},"line":94,"code":"test('undefined theme color with opacity from scale', async () => {\n  let config = {\n    content: [{\n      raw: 'bg-garbage/50'\n    }],\n    theme: {},\n    plugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(``);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"values not in the opacity config are ignored","suites":[],"updatePoint":{"line":106,"column":50,"index":2651},"line":106,"code":"test('values not in the opacity config are ignored', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-red-500/29\"></div>`\n    }],\n    theme: {\n      opacity: {\n        0: '0',\n        25: '0.25',\n        5: '0.5',\n        75: '0.75',\n        100: '1'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(``);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"function colors are supported","suites":[],"updatePoint":{"line":125,"column":35,"index":3054},"line":125,"code":"test('function colors are supported', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-blue/50\"></div>`\n    }],\n    theme: {\n      colors: {\n        blue: ({\n          opacityValue\n        }) => {\n          return `rgba(var(--colors-blue), ${opacityValue})`;\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-blue\\/50 {\n        background-color: rgba(var(--colors-blue), 0.5);\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"utilities that support any type are supported","suites":[],"updatePoint":{"line":148,"column":51,"index":3600},"line":148,"code":"test('utilities that support any type are supported', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"from-red-500/50\"></div>\n          <div class=\"fill-red-500/25\"></div>\n          <div class=\"placeholder-red-500/75\"></div>\n        `\n    }],\n    theme: {\n      extend: {\n        fill: theme => theme('colors')\n      }\n    },\n    plugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .from-red-500\\/50 {\n        --tw-gradient-from: #ef444480 var(--tw-gradient-from-position);\n        --tw-gradient-to: #ef444400 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n      }\n      .fill-red-500\\/25 {\n        fill: #ef444440;\n      }\n      .placeholder-red-500\\/75::placeholder {\n        color: #ef4444bf;\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"opacity modifier in combination with partial custom properties","suites":[],"updatePoint":{"line":180,"column":68,"index":4519},"line":180,"code":"test('opacity modifier in combination with partial custom properties', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"bg-[hsl(var(--foo),50%,50%)]\"></div>\n          <div class=\"bg-[hsl(123,var(--foo),50%)]\"></div>\n          <div class=\"bg-[hsl(123,50%,var(--foo))]\"></div>\n          <div class=\"bg-[hsl(var(--foo),50%,50%)]/50\"></div>\n          <div class=\"bg-[hsl(123,var(--foo),50%)]/50\"></div>\n          <div class=\"bg-[hsl(123,50%,var(--foo))]/50\"></div>\n          <div class=\"bg-[hsl(var(--foo),var(--bar),var(--baz))]/50\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[hsl\\(123\\,50\\%\\,var\\(--foo\\)\\)\\] {\n        --tw-bg-opacity: 1;\n        background-color: hsl(123 50% var(--foo) / var(--tw-bg-opacity));\n      }\n      .bg-\\[hsl\\(123\\,50\\%\\,var\\(--foo\\)\\)\\]\\/50 {\n        background-color: hsl(123 50% var(--foo) / 0.5);\n      }\n      .bg-\\[hsl\\(123\\,var\\(--foo\\)\\,50\\%\\)\\] {\n        --tw-bg-opacity: 1;\n        background-color: hsl(123 var(--foo) 50% / var(--tw-bg-opacity));\n      }\n      .bg-\\[hsl\\(123\\,var\\(--foo\\)\\,50\\%\\)\\]\\/50 {\n        background-color: hsl(123 var(--foo) 50% / 0.5);\n      }\n      .bg-\\[hsl\\(var\\(--foo\\)\\,50\\%\\,50\\%\\)\\] {\n        --tw-bg-opacity: 1;\n        background-color: hsl(var(--foo) 50% 50% / var(--tw-bg-opacity));\n      }\n      .bg-\\[hsl\\(var\\(--foo\\)\\,50\\%\\,50\\%\\)\\]\\/50 {\n        background-color: hsl(var(--foo) 50% 50% / 0.5);\n      }\n      .bg-\\[hsl\\(var\\(--foo\\)\\,var\\(--bar\\)\\,var\\(--baz\\)\\)\\]\\/50 {\n        background-color: hsl(var(--foo) var(--bar) var(--baz) / 0.5);\n      }\n    `);\n  });\n});","file":"color-opacity-modifiers.test.js","skipped":false,"dir":"tests"},{"name":"should parse \"$color\" to the correct value","suites":["parseColor"],"line":3,"code":"  it.each`\n    color                                        | output\n    ${'black'}                                   | ${{\n    mode: 'rgb',\n    color: ['0', '0', '0'],\n    alpha: undefined\n  }}\n    ${'#0088cc'}                                 | ${{\n    mode: 'rgb',\n    color: ['0', '136', '204'],\n    alpha: undefined\n  }}\n    ${'#08c'}                                    | ${{\n    mode: 'rgb',\n    color: ['0', '136', '204'],\n    alpha: undefined\n  }}\n    ${'#0088cc99'}                               | ${{\n    mode: 'rgb',\n    color: ['0', '136', '204'],\n    alpha: '0.6'\n  }}\n    ${'#08c9'}                                   | ${{\n    mode: 'rgb',\n    color: ['0', '136', '204'],\n    alpha: '0.6'\n  }}\n    ${'rgb(0, 30, 60)'}                          | ${{\n    mode: 'rgb',\n    color: ['0', '30', '60'],\n    alpha: undefined\n  }}\n    ${'rgba(0, 30, 60, 0.5)'}                    | ${{\n    mode: 'rgba',\n    color: ['0', '30', '60'],\n    alpha: '0.5'\n  }}\n    ${'rgb(0 30 60)'}                            | ${{\n    mode: 'rgb',\n    color: ['0', '30', '60'],\n    alpha: undefined\n  }}\n    ${'rgb(0 30 60 / 0.5)'}                      | ${{\n    mode: 'rgb',\n    color: ['0', '30', '60'],\n    alpha: '0.5'\n  }}\n    ${'rgb(var(--foo), 30, 60)'}                 | ${{\n    mode: 'rgb',\n    color: ['var(--foo)', '30', '60'],\n    alpha: undefined\n  }}\n    ${'rgb(0, var(--foo), 60)'}                  | ${{\n    mode: 'rgb',\n    color: ['0', 'var(--foo)', '60'],\n    alpha: undefined\n  }}\n    ${'rgb(0, 30, var(--foo))'}                  | ${{\n    mode: 'rgb',\n    color: ['0', '30', 'var(--foo)'],\n    alpha: undefined\n  }}\n    ${'rgb(0, 30, var(--foo), 0.5)'}             | ${{\n    mode: 'rgb',\n    color: ['0', '30', 'var(--foo)'],\n    alpha: '0.5'\n  }}\n    ${'rgb(var(--foo), 30, var(--bar))'}         | ${{\n    mode: 'rgb',\n    color: ['var(--foo)', '30', 'var(--bar)'],\n    alpha: undefined\n  }}\n    ${'rgb(var(--foo), var(--bar), var(--baz))'} | ${{\n    mode: 'rgb',\n    color: ['var(--foo)', 'var(--bar)', 'var(--baz)'],\n    alpha: undefined\n  }}\n    ${'rgb(var(--foo) 30 60)'}                   | ${{\n    mode: 'rgb',\n    color: ['var(--foo)', '30', '60'],\n    alpha: undefined\n  }}\n    ${'rgb(0 var(--foo) 60)'}                    | ${{\n    mode: 'rgb',\n    color: ['0', 'var(--foo)', '60'],\n    alpha: undefined\n  }}\n    ${'rgb(0 30 var(--foo))'}                    | ${{\n    mode: 'rgb',\n    color: ['0', '30', 'var(--foo)'],\n    alpha: undefined\n  }}\n    ${'rgb(0 30 var(--foo) / 0.5)'}              | ${{\n    mode: 'rgb',\n    color: ['0', '30', 'var(--foo)'],\n    alpha: '0.5'\n  }}\n    ${'rgb(var(--foo) 30 var(--bar))'}           | ${{\n    mode: 'rgb',\n    color: ['var(--foo)', '30', 'var(--bar)'],\n    alpha: undefined\n  }}\n    ${'rgb(var(--foo) var(--bar) var(--baz))'}   | ${{\n    mode: 'rgb',\n    color: ['var(--foo)', 'var(--bar)', 'var(--baz)'],\n    alpha: undefined\n  }}\n    ${'hsl(0, 30%, 60%)'}                        | ${{\n    mode: 'hsl',\n    color: ['0', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0deg, 30%, 60%)'}                     | ${{\n    mode: 'hsl',\n    color: ['0deg', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0rad, 30%, 60%)'}                     | ${{\n    mode: 'hsl',\n    color: ['0rad', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0grad, 30%, 60%)'}                    | ${{\n    mode: 'hsl',\n    color: ['0grad', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0turn, 30%, 60%)'}                    | ${{\n    mode: 'hsl',\n    color: ['0turn', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsla(0, 30%, 60%, 0.5)'}                  | ${{\n    mode: 'hsla',\n    color: ['0', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsla(0deg, 30%, 60%, 0.5)'}               | ${{\n    mode: 'hsla',\n    color: ['0deg', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsla(0rad, 30%, 60%, 0.5)'}               | ${{\n    mode: 'hsla',\n    color: ['0rad', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsla(0grad, 30%, 60%, 0.5)'}              | ${{\n    mode: 'hsla',\n    color: ['0grad', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsla(0turn, 30%, 60%, 0.5)'}              | ${{\n    mode: 'hsla',\n    color: ['0turn', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsl(0 30% 60%)'}                          | ${{\n    mode: 'hsl',\n    color: ['0', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0deg 30% 60%)'}                       | ${{\n    mode: 'hsl',\n    color: ['0deg', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0rad 30% 60%)'}                       | ${{\n    mode: 'hsl',\n    color: ['0rad', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0grad 30% 60%)'}                      | ${{\n    mode: 'hsl',\n    color: ['0grad', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0turn 30% 60%)'}                      | ${{\n    mode: 'hsl',\n    color: ['0turn', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0 30% 60% / 0.5)'}                    | ${{\n    mode: 'hsl',\n    color: ['0', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsl(0deg 30% 60% / 0.5)'}                 | ${{\n    mode: 'hsl',\n    color: ['0deg', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsl(0rad 30% 60% / 0.5)'}                 | ${{\n    mode: 'hsl',\n    color: ['0rad', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsl(0grad 30% 60% / 0.5)'}                | ${{\n    mode: 'hsl',\n    color: ['0grad', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsl(0turn 30% 60% / 0.5)'}                | ${{\n    mode: 'hsl',\n    color: ['0turn', '30%', '60%'],\n    alpha: '0.5'\n  }}\n    ${'hsl(var(--foo), 30%, 60%)'}               | ${{\n    mode: 'hsl',\n    color: ['var(--foo)', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0, var(--foo), 60%)'}                 | ${{\n    mode: 'hsl',\n    color: ['0', 'var(--foo)', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0, 30%, var(--foo))'}                 | ${{\n    mode: 'hsl',\n    color: ['0', '30%', 'var(--foo)'],\n    alpha: undefined\n  }}\n    ${'hsl(0, 30%, var(--foo), 0.5)'}            | ${{\n    mode: 'hsl',\n    color: ['0', '30%', 'var(--foo)'],\n    alpha: '0.5'\n  }}\n    ${'hsl(var(--foo), 30%, var(--bar))'}        | ${{\n    mode: 'hsl',\n    color: ['var(--foo)', '30%', 'var(--bar)'],\n    alpha: undefined\n  }}\n    ${'hsl(var(--foo), var(--bar), var(--baz))'} | ${{\n    mode: 'hsl',\n    color: ['var(--foo)', 'var(--bar)', 'var(--baz)'],\n    alpha: undefined\n  }}\n    ${'hsl(var(--foo) 30% 60%)'}                 | ${{\n    mode: 'hsl',\n    color: ['var(--foo)', '30%', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0 var(--foo) 60%)'}                   | ${{\n    mode: 'hsl',\n    color: ['0', 'var(--foo)', '60%'],\n    alpha: undefined\n  }}\n    ${'hsl(0 30% var(--foo))'}                   | ${{\n    mode: 'hsl',\n    color: ['0', '30%', 'var(--foo)'],\n    alpha: undefined\n  }}\n    ${'hsl(0 30% var(--foo) / 0.5)'}             | ${{\n    mode: 'hsl',\n    color: ['0', '30%', 'var(--foo)'],\n    alpha: '0.5'\n  }}\n    ${'hsl(var(--foo) 30% var(--bar))'}          | ${{\n    mode: 'hsl',\n    color: ['var(--foo)', '30%', 'var(--bar)'],\n    alpha: undefined\n  }}\n    ${'hsl(var(--foo) var(--bar) var(--baz))'}   | ${{\n    mode: 'hsl',\n    color: ['var(--foo)', 'var(--bar)', 'var(--baz)'],\n    alpha: undefined\n  }}\n    ${'rgba(var(--foo), 0.1)'}                   | ${{\n    mode: 'rgba',\n    color: ['var(--foo)'],\n    alpha: '0.1'\n  }}\n    ${'rgba(var(--foo), var(--alpha))'}          | ${{\n    mode: 'rgba',\n    color: ['var(--foo)'],\n    alpha: 'var(--alpha)'\n  }}\n    ${'hsla(var(--foo), 0.1)'}                   | ${{\n    mode: 'hsla',\n    color: ['var(--foo)'],\n    alpha: '0.1'\n  }}\n    ${'hsla(var(--foo), var(--alpha))'}          | ${{\n    mode: 'hsla',\n    color: ['var(--foo)'],\n    alpha: 'var(--alpha)'\n  }}\n    ${'transparent'}                             | ${{\n    mode: 'rgb',\n    color: ['0', '0', '0'],\n    alpha: '0'\n  }}\n  `('should parse \"$color\" to the correct value', ({\n    color,\n    output\n  }) => {\n    expect(parseColor(color)).toEqual(output);\n  });","file":"color.test.js","skipped":false,"dir":"tests"},{"name":"should return `null` for unparseable color \"$color\"","suites":["parseColor"],"line":301,"code":"  it.each`\n    color\n    ${'var(--my-color)'}\n    ${'currentColor'}\n    ${'inherit'}\n    ${'initial'}\n    ${'revert'}\n    ${'unset'}\n  `('should return `null` for unparseable color \"$color\"', ({\n    color\n  }) => {\n    expect(parseColor(color)).toBe(null);\n  });","file":"color.test.js","skipped":false,"dir":"tests"},{"name":"should format the color pieces into a proper \"$output\"","suites":["formatColor"],"line":316,"code":"  it.each`\n    color                                                              | output\n    ${{\n    mode: 'rgb',\n    color: ['0', '0', '0'],\n    alpha: undefined\n  }}       | ${'rgb(0 0 0)'}\n    ${{\n    mode: 'rgb',\n    color: ['0', '136', '204'],\n    alpha: undefined\n  }}   | ${'rgb(0 136 204)'}\n    ${{\n    mode: 'rgb',\n    color: ['0', '136', '204'],\n    alpha: '0.6'\n  }}       | ${'rgb(0 136 204 / 0.6)'}\n    ${{\n    mode: 'hsl',\n    color: ['0', '0%', '0%'],\n    alpha: undefined\n  }}     | ${'hsl(0 0% 0%)'}\n    ${{\n    mode: 'hsl',\n    color: ['0', '136%', '204%'],\n    alpha: undefined\n  }} | ${'hsl(0 136% 204%)'}\n    ${{\n    mode: 'hsl',\n    color: ['0', '136%', '204%'],\n    alpha: '0.6'\n  }}     | ${'hsl(0 136% 204% / 0.6)'}\n  `('should format the color pieces into a proper \"$output\"', ({\n    color,\n    output\n  }) => {\n    expect(formatColor(color)).toEqual(output);\n  });","file":"color.test.js","skipped":false,"dir":"tests"},{"name":"should generate the partial selector, if only a partial is used (base layer)","suites":[],"updatePoint":{"line":2,"column":80,"index":136},"line":2,"code":"it('should generate the partial selector, if only a partial is used (base layer)', () => {\n  let config = {\n    content: [{\n      raw: html`<div></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n\n    @layer base {\n      :root {\n        font-weight: bold;\n      }\n\n      /* --- */\n\n      :root,\n      .a {\n        color: black;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      :root {\n        font-weight: bold;\n      }\n      :root,\n      .a {\n        color: #000;\n      }\n      ${defaults}\n    `);\n  });\n});","file":"combined-selectors.test.js","skipped":false,"dir":"tests"},{"name":"should generate the partial selector, if only a partial is used (utilities layer)","suites":[],"updatePoint":{"line":40,"column":85,"index":783},"line":40,"code":"it('should generate the partial selector, if only a partial is used (utilities layer)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"a\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      :root {\n        font-weight: bold;\n      }\n\n      /* --- */\n\n      :root,\n      .a {\n        color: black;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      :root {\n        font-weight: bold;\n      }\n      :root,\n      .a {\n        color: #000;\n      }\n    `);\n  });\n});","file":"combined-selectors.test.js","skipped":false,"dir":"tests"},{"name":"setting a plugin to false removes it","suites":[],"updatePoint":{"line":2,"column":42,"index":104},"line":2,"code":"test('setting a plugin to false removes it', () => {\n  const plugins = ['fontSize', 'display', 'backgroundPosition'];\n  const configuredPlugins = configurePlugins({\n    display: false\n  }, plugins);\n  expect(configuredPlugins).toEqual(['fontSize', 'backgroundPosition']);\n});","file":"configurePlugins.test.js","skipped":false,"dir":"tests"},{"name":"passing only false removes all plugins","suites":[],"updatePoint":{"line":9,"column":44,"index":382},"line":9,"code":"test('passing only false removes all plugins', () => {\n  const plugins = ['fontSize', 'display', 'backgroundPosition'];\n  const configuredPlugins = configurePlugins(false, plugins);\n  expect(configuredPlugins).toEqual([]);\n});","file":"configurePlugins.test.js","skipped":false,"dir":"tests"},{"name":"passing an array safelists plugins","suites":[],"updatePoint":{"line":14,"column":40,"index":605},"line":14,"code":"test('passing an array safelists plugins', () => {\n  const plugins = ['fontSize', 'display', 'backgroundPosition'];\n  const configuredPlugins = configurePlugins(['display'], plugins);\n  expect(configuredPlugins).toEqual(['display']);\n});","file":"configurePlugins.test.js","skipped":false,"dir":"tests"},{"name":"options are not required","suites":[],"updatePoint":{"line":2,"column":30,"index":76},"line":2,"code":"test('options are not required', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"screens can be passed explicitly","suites":[],"updatePoint":{"line":41,"column":38,"index":904},"line":41,"code":"test('screens can be passed explicitly', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }],\n    theme: {\n      container: {\n        screens: ['400px', '500px']\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 400px) {\n        .container {\n          max-width: 400px;\n        }\n      }\n      @media (min-width: 500px) {\n        .container {\n          max-width: 500px;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"screens are ordered ascending by min-width","suites":[],"updatePoint":{"line":70,"column":48,"index":1516},"line":70,"code":"test('screens are ordered ascending by min-width', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }],\n    theme: {\n      container: {\n        screens: ['500px', '400px']\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 400px) {\n        .container {\n          max-width: 400px;\n        }\n      }\n      @media (min-width: 500px) {\n        .container {\n          max-width: 500px;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"screens are deduplicated by min-width","suites":[],"updatePoint":{"line":99,"column":43,"index":2123},"line":99,"code":"test('screens are deduplicated by min-width', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }],\n    theme: {\n      container: {\n        screens: {\n          sm: '576px',\n          md: '768px',\n          'sm-only': {\n            min: '576px',\n            max: '767px'\n          }\n        }\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 576px) {\n        .container {\n          max-width: 576px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"the container can be centered by default","suites":[],"updatePoint":{"line":135,"column":46,"index":2858},"line":135,"code":"test('the container can be centered by default', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }],\n    theme: {\n      container: {\n        center: true\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n        margin-left: auto;\n        margin-right: auto;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"horizontal padding can be included by default","suites":[],"updatePoint":{"line":181,"column":51,"index":3822},"line":181,"code":"test('horizontal padding can be included by default', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }],\n    theme: {\n      container: {\n        padding: '2rem'\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n        padding-left: 2rem;\n        padding-right: 2rem;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"responsive horizontal padding can be included by default","suites":[],"updatePoint":{"line":227,"column":62,"index":4802},"line":227,"code":"test('responsive horizontal padding can be included by default', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }],\n    theme: {\n      screens: {\n        sm: '576px',\n        md: {\n          min: '768px'\n        },\n        lg: {\n          'min-width': '992px'\n        },\n        xl: {\n          min: '1200px',\n          max: '1600px'\n        }\n      },\n      container: {\n        padding: {\n          DEFAULT: '1rem',\n          sm: '2rem',\n          lg: '4rem',\n          xl: '5rem'\n        }\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n        padding-left: 1rem;\n        padding-right: 1rem;\n      }\n      @media (min-width: 576px) {\n        .container {\n          max-width: 576px;\n          padding-left: 2rem;\n          padding-right: 2rem;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 992px) {\n        .container {\n          max-width: 992px;\n          padding-left: 4rem;\n          padding-right: 4rem;\n        }\n      }\n      @media (min-width: 1200px) {\n        .container {\n          max-width: 1200px;\n          padding-left: 5rem;\n          padding-right: 5rem;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"setting all options at once","suites":[],"updatePoint":{"line":292,"column":33,"index":6152},"line":292,"code":"test('setting all options at once', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"container\"></div>`\n    }],\n    theme: {\n      container: {\n        screens: ['400px', '500px'],\n        center: true,\n        padding: '2rem'\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .container {\n        width: 100%;\n        margin-left: auto;\n        margin-right: auto;\n        padding-left: 2rem;\n        padding-right: 2rem;\n      }\n      @media (min-width: 400px) {\n        .container {\n          max-width: 400px;\n        }\n      }\n      @media (min-width: 500px) {\n        .container {\n          max-width: 500px;\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"container can use variants","suites":[],"updatePoint":{"line":327,"column":32,"index":6907},"line":327,"code":"test('container can use variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"lg:hover:container\"></div>`\n    }],\n    theme: {\n      container: {\n        screens: ['400px', '500px']\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 1024px) {\n        .lg\\:hover\\:container:hover {\n          width: 100%;\n        }\n        @media (min-width: 400px) {\n          .lg\\:hover\\:container:hover {\n            max-width: 400px;\n          }\n        }\n        @media (min-width: 500px) {\n          .lg\\:hover\\:container:hover {\n            max-width: 500px;\n          }\n        }\n      }\n    `);\n  });\n});","file":"containerPlugin.test.js","skipped":false,"dir":"tests"},{"name":"re-uses the context across multiple files with the same config","suites":[],"updatePoint":{"line":29,"column":68,"index":948},"line":29,"code":"test('re-uses the context across multiple files with the same config', async () => {\n  let results = [await run(`@tailwind utilities;`, configPath, `id=1`),\n  // Using @apply directives should still re-use the context\n  // They depend on the config but do not the other way around\n  await run(`body { @apply bg-blue-400; }`, configPath, `id=2`), await run(`body { @apply text-red-400; }`, configPath, `id=3`), await run(`body { @apply mb-4; }`, configPath, `id=4`)];\n  let dependencies = results.map(result => {\n    return result.messages.filter(message => message.type === 'dependency').map(message => message.file);\n  });\n\n  // The content files don't have any utilities in them so this should be empty\n  expect(results[0].css).toMatchFormattedCss(css``);\n\n  // However, @apply is being used so we want to verify that they're being inlined into the CSS rules\n  expect(results[1].css).toMatchFormattedCss(css`\n    body {\n      --tw-bg-opacity: 1;\n      background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n    }\n  `);\n  expect(results[2].css).toMatchFormattedCss(css`\n    body {\n      --tw-text-opacity: 1;\n      color: rgb(248 113 113 / var(--tw-text-opacity));\n    }\n  `);\n  expect(results[3].css).toMatchFormattedCss(css`\n    body {\n      margin-bottom: 1rem;\n    }\n  `);\n\n  // Files with @tailwind directives depends on the PostCSS tree, config, AND any content files\n  expect(dependencies[0]).toEqual([path.resolve(__dirname, 'context-reuse.test.html'), path.resolve(__dirname, 'context-reuse.tailwind.config.js')]);\n\n  // @apply depends only on the containing PostCSS tree *and* the config file but no content files\n  // as they cannot affect the outcome of the @apply directives\n  expect(dependencies[1]).toEqual([path.resolve(__dirname, 'context-reuse.tailwind.config.js')]);\n  expect(dependencies[2]).toEqual([path.resolve(__dirname, 'context-reuse.tailwind.config.js')]);\n  expect(dependencies[3]).toEqual([path.resolve(__dirname, 'context-reuse.tailwind.config.js')]);\n\n  // And none of this should have resulted in multiple contexts being created\n  expect(sharedState.contextSourcesMap.size).toBe(1);\n});","file":"context-reuse.test.js","skipped":false,"dir":"tests"},{"name":"updates layers when any CSS containing @tailwind directives changes","suites":[],"updatePoint":{"line":72,"column":73,"index":3076},"line":72,"code":"test('updates layers when any CSS containing @tailwind directives changes', async () => {\n  let result;\n\n  // Compile the initial version once\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .custom-utility {\n        color: orange;\n      }\n    }\n  `;\n  result = await run(input, configPath, `id=1`);\n  expect(result.css).toMatchFormattedCss(css`\n    .only\\:custom-utility:only-child {\n      color: orange;\n    }\n  `);\n\n  // Save the file with a change\n  input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .custom-utility {\n        color: blue;\n      }\n    }\n  `;\n  result = await run(input, configPath, `id=1`);\n  expect(result.css).toMatchFormattedCss(css`\n    .only\\:custom-utility:only-child {\n      color: #00f;\n    }\n  `);\n});","file":"context-reuse.test.js","skipped":false,"dir":"tests"},{"name":"extract.DEFAULT","suites":["modern"],"updatePoint":{"line":21,"column":23,"index":608},"line":21,"code":"  test('extract.DEFAULT', () => {\n    let config = {\n      content: {\n        files: [{\n          raw: sharedHtml\n        }],\n        extract: {\n          DEFAULT: customExtractor\n        }\n      }\n    };\n    return run('@tailwind utilities', config).then(result => {\n      expect(result.css).toMatchFormattedCss(expected);\n    });\n  });","file":"custom-extractors.test.js","skipped":false,"dir":"tests"},{"name":"extract.{extension}","suites":["modern"],"updatePoint":{"line":36,"column":27,"index":950},"line":36,"code":"  test('extract.{extension}', () => {\n    let config = {\n      content: {\n        files: [{\n          raw: sharedHtml\n        }],\n        extract: {\n          html: customExtractor\n        }\n      }\n    };\n    return run('@tailwind utilities', config).then(result => {\n      expect(result.css).toMatchFormattedCss(expected);\n    });\n  });","file":"custom-extractors.test.js","skipped":false,"dir":"tests"},{"name":"extract function","suites":["modern"],"updatePoint":{"line":51,"column":24,"index":1286},"line":51,"code":"  test('extract function', () => {\n    let config = {\n      content: {\n        files: [{\n          raw: sharedHtml\n        }],\n        extract: customExtractor\n      }\n    };\n    return run('@tailwind utilities', config).then(result => {\n      expect(result.css).toMatchFormattedCss(expected);\n    });\n  });","file":"custom-extractors.test.js","skipped":false,"dir":"tests"},{"name":"raw content with extension","suites":["modern"],"updatePoint":{"line":64,"column":34,"index":1604},"line":64,"code":"  test('raw content with extension', () => {\n    let config = {\n      content: {\n        files: [{\n          raw: sharedHtml,\n          extension: 'html'\n        }],\n        extract: {\n          html: () => ['invisible']\n        }\n      },\n      corePlugins: {\n        preflight: false\n      }\n    };\n    return run('@tailwind utilities', config).then(result => {\n      expect(result.css).toMatchFormattedCss(css`\n        .invisible {\n          visibility: hidden;\n        }\n      `);\n    });\n  });","file":"custom-extractors.test.js","skipped":false,"dir":"tests"},{"name":"defaultExtractor","suites":["legacy"],"updatePoint":{"line":89,"column":24,"index":2124},"line":89,"code":"  test('defaultExtractor', () => {\n    let config = {\n      content: {\n        files: [{\n          raw: sharedHtml\n        }],\n        options: {\n          defaultExtractor: customExtractor\n        }\n      }\n    };\n    return run('@tailwind utilities', config).then(result => {\n      expect(result.css).toMatchFormattedCss(expected);\n    });\n  });","file":"custom-extractors.test.js","skipped":false,"dir":"tests"},{"name":"extractors array","suites":["legacy"],"updatePoint":{"line":104,"column":24,"index":2472},"line":104,"code":"  test('extractors array', () => {\n    let config = {\n      content: {\n        files: [{\n          raw: sharedHtml\n        }],\n        options: {\n          extractors: [{\n            extractor: customExtractor,\n            extensions: ['html']\n          }]\n        }\n      }\n    };\n    return run('@tailwind utilities', config).then(result => {\n      expect(result.css).toMatchFormattedCss(expected);\n    });\n  });","file":"custom-extractors.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create utilities with object syntax","suites":[],"updatePoint":{"line":3,"column":53,"index":165},"line":3,"code":"test('plugins can create utilities with object syntax', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-object-fill custom-object-contain custom-object-cover\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities({\n        '.custom-object-fill': {\n          'object-fit': 'fill'\n        },\n        '.custom-object-contain': {\n          'object-fit': 'contain'\n        },\n        '.custom-object-cover': {\n          'object-fit': 'cover'\n        }\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-object-fill {\n        object-fit: fill;\n      }\n      .custom-object-contain {\n        object-fit: contain;\n      }\n      .custom-object-cover {\n        object-fit: cover;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create utilities with arrays of objects","suites":[],"updatePoint":{"line":38,"column":57,"index":1022},"line":38,"code":"test('plugins can create utilities with arrays of objects', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-object-fill custom-object-contain custom-object-cover\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities([{\n        '.custom-object-fill': {\n          'object-fit': 'fill'\n        },\n        '.custom-object-contain': {\n          'object-fit': 'contain'\n        },\n        '.custom-object-cover': {\n          'object-fit': 'cover'\n        }\n      }]);\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-object-fill {\n        object-fit: fill;\n      }\n      .custom-object-contain {\n        object-fit: contain;\n      }\n      .custom-object-cover {\n        object-fit: cover;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create utilities with raw PostCSS nodes","suites":[],"updatePoint":{"line":73,"column":57,"index":1881},"line":73,"code":"test('plugins can create utilities with raw PostCSS nodes', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-object-fill custom-object-contain custom-object-cover\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities,\n      postcss\n    }) {\n      addUtilities([postcss.rule({\n        selector: '.custom-object-fill'\n      }).append([postcss.decl({\n        prop: 'object-fit',\n        value: 'fill'\n      })]), postcss.rule({\n        selector: '.custom-object-contain'\n      }).append([postcss.decl({\n        prop: 'object-fit',\n        value: 'contain'\n      })]), postcss.rule({\n        selector: '.custom-object-cover'\n      }).append([postcss.decl({\n        prop: 'object-fit',\n        value: 'cover'\n      })])]);\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-object-fill {\n        object-fit: fill;\n      }\n      .custom-object-contain {\n        object-fit: contain;\n      }\n      .custom-object-cover {\n        object-fit: cover;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create utilities with mixed object styles and PostCSS nodes","suites":[],"updatePoint":{"line":114,"column":77,"index":2987},"line":114,"code":"test('plugins can create utilities with mixed object styles and PostCSS nodes', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-object-fill custom-object-contain custom-object-cover\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities,\n      postcss\n    }) {\n      addUtilities([{\n        '.custom-object-fill': {\n          objectFit: 'fill'\n        }\n      }, postcss.rule({\n        selector: '.custom-object-contain'\n      }).append([postcss.decl({\n        prop: 'object-fit',\n        value: 'contain'\n      })]), postcss.rule({\n        selector: '.custom-object-cover'\n      }).append([postcss.decl({\n        prop: 'object-fit',\n        value: 'cover'\n      })])]);\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-object-fill {\n        object-fit: fill;\n      }\n      .custom-object-contain {\n        object-fit: contain;\n      }\n      .custom-object-cover {\n        object-fit: cover;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create components with object syntax","suites":[],"updatePoint":{"line":154,"column":54,"index":4003},"line":154,"code":"test('plugins can create components with object syntax', () => {\n  let config = {\n    content: [{\n      raw: html`<button class=\"btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        '.btn-blue': {\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '.5rem 1rem',\n          borderRadius: '.25rem'\n        },\n        '.btn-blue:hover': {\n          backgroundColor: 'darkblue'\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .btn-blue {\n        color: #fff;\n        background-color: #00f;\n        border-radius: 0.25rem;\n        padding: 0.5rem 1rem;\n      }\n      .btn-blue:hover {\n        background-color: #00008b;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can add base styles with object syntax","suites":[],"updatePoint":{"line":189,"column":52,"index":4832},"line":189,"code":"test('plugins can add base styles with object syntax', () => {\n  let config = {\n    content: [{\n      raw: html`<img /><button></button>`\n    }],\n    plugins: [function ({\n      addBase\n    }) {\n      addBase({\n        img: {\n          maxWidth: '100%'\n        },\n        button: {\n          fontFamily: 'inherit'\n        }\n      });\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      img {\n        max-width: 100%;\n      }\n      button {\n        font-family: inherit;\n      }\n      ${defaults}\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can add base styles with raw PostCSS nodes","suites":[],"updatePoint":{"line":222,"column":56,"index":5469},"line":222,"code":"test('plugins can add base styles with raw PostCSS nodes', () => {\n  let config = {\n    content: [{\n      raw: html`<img /><button></button>`\n    }],\n    plugins: [function ({\n      addBase,\n      postcss\n    }) {\n      addBase([postcss.rule({\n        selector: 'img'\n      }).append([postcss.decl({\n        prop: 'max-width',\n        value: '100%'\n      })]), postcss.rule({\n        selector: 'button'\n      }).append([postcss.decl({\n        prop: 'font-family',\n        value: 'inherit'\n      })])]);\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      img {\n        max-width: 100%;\n      }\n      button {\n        font-family: inherit;\n      }\n      ${defaults}\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create components with raw PostCSS nodes","suites":[],"updatePoint":{"line":259,"column":58,"index":6273},"line":259,"code":"test('plugins can create components with raw PostCSS nodes', () => {\n  let config = {\n    content: [{\n      raw: html`<button class=\"btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents,\n      postcss\n    }) {\n      addComponents([postcss.rule({\n        selector: '.btn-blue'\n      }).append([postcss.decl({\n        prop: 'background-color',\n        value: 'blue'\n      }), postcss.decl({\n        prop: 'color',\n        value: 'white'\n      }), postcss.decl({\n        prop: 'padding',\n        value: '.5rem 1rem'\n      }), postcss.decl({\n        prop: 'border-radius',\n        value: '.25rem'\n      })]), postcss.rule({\n        selector: '.btn-blue:hover'\n      }).append([postcss.decl({\n        prop: 'background-color',\n        value: 'darkblue'\n      })])]);\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .btn-blue {\n        color: #fff;\n        background-color: #00f;\n        border-radius: 0.25rem;\n        padding: 0.5rem 1rem;\n      }\n      .btn-blue:hover {\n        background-color: #00008b;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create components with mixed object styles and raw PostCSS nodes","suites":[],"updatePoint":{"line":304,"column":82,"index":7429},"line":304,"code":"test('plugins can create components with mixed object styles and raw PostCSS nodes', () => {\n  let config = {\n    content: [{\n      raw: html`<button class=\"btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents,\n      postcss\n    }) {\n      addComponents([postcss.rule({\n        selector: '.btn-blue'\n      }).append([postcss.decl({\n        prop: 'background-color',\n        value: 'blue'\n      }), postcss.decl({\n        prop: 'color',\n        value: 'white'\n      }), postcss.decl({\n        prop: 'padding',\n        value: '.5rem 1rem'\n      }), postcss.decl({\n        prop: 'border-radius',\n        value: '.25rem'\n      })]), {\n        '.btn-blue:hover': {\n          backgroundColor: 'darkblue'\n        }\n      }]);\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .btn-blue {\n        color: #fff;\n        background-color: #00f;\n        border-radius: 0.25rem;\n        padding: 0.5rem 1rem;\n      }\n      .btn-blue:hover {\n        background-color: #00008b;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create components with media queries with object syntax","suites":[],"updatePoint":{"line":348,"column":73,"index":8509},"line":348,"code":"test('plugins can create components with media queries with object syntax', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-container\"></div>`\n    }],\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        '.custom-container': {\n          width: '100%'\n        },\n        '@media (min-width: 100px)': {\n          '.custom-container': {\n            maxWidth: '100px'\n          }\n        },\n        '@media (min-width: 200px)': {\n          '.custom-container': {\n            maxWidth: '200px'\n          }\n        },\n        '@media (min-width: 300px)': {\n          '.custom-container': {\n            maxWidth: '300px'\n          }\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-container {\n        width: 100%;\n      }\n      @media (min-width: 100px) {\n        .custom-container {\n          max-width: 100px;\n        }\n      }\n      @media (min-width: 200px) {\n        .custom-container {\n          max-width: 200px;\n        }\n      }\n      @media (min-width: 300px) {\n        .custom-container {\n          max-width: 300px;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"media queries can be defined multiple times using objects-in-array syntax","suites":[],"updatePoint":{"line":401,"column":79,"index":9740},"line":401,"code":"test('media queries can be defined multiple times using objects-in-array syntax', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-container\"></div>\n          <button class=\"btn\"></button>`\n    }],\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents([{\n        '.custom-container': {\n          width: '100%'\n        },\n        '@media (min-width: 100px)': {\n          '.custom-container': {\n            maxWidth: '100px'\n          }\n        }\n      }, {\n        '.btn': {\n          padding: '1rem .5rem',\n          display: 'block'\n        },\n        '@media (min-width: 100px)': {\n          '.btn': {\n            display: 'inline-block'\n          }\n        }\n      }]);\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-container {\n        width: 100%;\n      }\n      @media (min-width: 100px) {\n        .custom-container {\n          max-width: 100px;\n        }\n      }\n      .btn {\n        padding: 1rem 0.5rem;\n        display: block;\n      }\n      @media (min-width: 100px) {\n        .btn {\n          display: inline-block;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create nested rules","suites":[],"updatePoint":{"line":454,"column":37,"index":10897},"line":454,"code":"test('plugins can create nested rules', () => {\n  let config = {\n    content: [{\n      raw: html`<button class=\"btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        '.btn-blue': {\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '.5rem 1rem',\n          borderRadius: '.25rem',\n          '&:hover': {\n            backgroundColor: 'darkblue'\n          },\n          '@media (min-width: 500px)': {\n            '&:hover': {\n              backgroundColor: 'orange'\n            }\n          },\n          '> a': {\n            color: 'red'\n          },\n          'h1 &': {\n            color: 'purple'\n          }\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .btn-blue {\n        color: #fff;\n        background-color: #00f;\n        border-radius: 0.25rem;\n        padding: 0.5rem 1rem;\n      }\n      .btn-blue:hover {\n        background-color: #00008b;\n      }\n      @media (min-width: 500px) {\n        .btn-blue:hover {\n          background-color: orange;\n        }\n      }\n      .btn-blue > a {\n        color: red;\n      }\n      h1 .btn-blue {\n        color: purple;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can create rules with escaped selectors","suites":[],"updatePoint":{"line":511,"column":53,"index":12192},"line":511,"code":"test('plugins can create rules with escaped selectors', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-top-1/4\"></div>`\n    }],\n    plugins: [function ({\n      e,\n      addUtilities\n    }) {\n      addUtilities({\n        [`.${e('custom-top-1/4')}`]: {\n          top: '25%'\n        }\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-top-1\\/4 {\n        top: 25%;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can access the current config","suites":[],"updatePoint":{"line":535,"column":43,"index":12693},"line":535,"code":"test('plugins can access the current config', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-container\"></div>`\n    }],\n    plugins: [function ({\n      addComponents,\n      config\n    }) {\n      let containerClasses = [{\n        '.custom-container': {\n          width: '100%'\n        }\n      }];\n      for (let maxWidth of Object.values(config('theme.customScreens'))) {\n        containerClasses.push({\n          [`@media (min-width: ${maxWidth})`]: {\n            '.custom-container': {\n              maxWidth\n            }\n          }\n        });\n      }\n      addComponents(containerClasses);\n    }],\n    theme: {\n      customScreens: {\n        sm: '576px',\n        md: '768px',\n        lg: '992px',\n        xl: '1200px'\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-container {\n        width: 100%;\n      }\n      @media (min-width: 576px) {\n        .custom-container {\n          max-width: 576px;\n        }\n      }\n      @media (min-width: 768px) {\n        .custom-container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 992px) {\n        .custom-container {\n          max-width: 992px;\n        }\n      }\n      @media (min-width: 1200px) {\n        .custom-container {\n          max-width: 1200px;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can check if corePlugins are enabled","suites":[],"updatePoint":{"line":597,"column":50,"index":14088},"line":597,"code":"test('plugins can check if corePlugins are enabled', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities,\n      corePlugins\n    }) {\n      addUtilities({\n        '.test': {\n          'text-color': corePlugins('textColor') ? 'true' : 'false',\n          opacity: corePlugins('opacity') ? 'true' : 'false'\n        }\n      });\n    }],\n    corePlugins: {\n      textColor: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test {\n        text-color: false;\n        opacity: true;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can check if corePlugins are enabled when using array white-listing","suites":[],"updatePoint":{"line":626,"column":81,"index":14786},"line":626,"code":"test('plugins can check if corePlugins are enabled when using array white-listing', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities,\n      corePlugins\n    }) {\n      addUtilities({\n        '.test': {\n          'text-color': corePlugins('textColor') ? 'true' : 'false',\n          opacity: corePlugins('opacity') ? 'true' : 'false'\n        }\n      });\n    }],\n    corePlugins: ['textColor']\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test {\n        text-color: true;\n        opacity: false;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can provide fallbacks to keys missing from the config","suites":[],"updatePoint":{"line":653,"column":67,"index":15453},"line":653,"code":"test('plugins can provide fallbacks to keys missing from the config', () => {\n  let config = {\n    content: [{\n      raw: html`<button class=\"btn\"></button>`\n    }],\n    plugins: [function ({\n      addComponents,\n      config\n    }) {\n      addComponents({\n        '.btn': {\n          borderRadius: config('borderRadius.default', '.25rem')\n        }\n      });\n    }],\n    theme: {\n      borderRadius: {\n        1: '1px',\n        2: '2px',\n        4: '4px',\n        8: '8px'\n      }\n    }\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .btn {\n        border-radius: 0.25rem;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can add multiple sets of utilities and components","suites":[],"updatePoint":{"line":685,"column":63,"index":16123},"line":685,"code":"test('plugins can add multiple sets of utilities and components', () => {\n  let config = {\n    content: [{\n      raw: html`<button class=\"btn\"></button>\n          <div class=\"card custom-skew-12deg custom-border-collapse\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities,\n      addComponents\n    }) {\n      addComponents({\n        '.card': {\n          padding: '1rem',\n          borderRadius: '.25rem'\n        }\n      });\n      addUtilities({\n        '.custom-skew-12deg': {\n          transform: 'skewY(-12deg)'\n        }\n      });\n      addComponents({\n        '.btn': {\n          padding: '1rem .5rem',\n          display: 'inline-block'\n        }\n      });\n      addUtilities({\n        '.custom-border-collapse': {\n          borderCollapse: 'collapse'\n        }\n      });\n    }]\n  };\n  return run('@tailwind components; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .card {\n        border-radius: 0.25rem;\n        padding: 1rem;\n      }\n      .btn {\n        padding: 1rem 0.5rem;\n        display: inline-block;\n      }\n      .custom-skew-12deg {\n        transform: skewY(-12deg);\n      }\n      .custom-border-collapse {\n        border-collapse: collapse;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins respect prefix and important options by default when adding utilities","suites":[],"updatePoint":{"line":738,"column":83,"index":17394},"line":738,"code":"test('plugins respect prefix and important options by default when adding utilities', () => {\n  let config = {\n    prefix: 'tw-',\n    important: true,\n    content: [{\n      raw: html`<div class=\"tw-custom-rotate-90\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities({\n        '.custom-rotate-90': {\n          transform: 'rotate(90deg)'\n        }\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tw-custom-rotate-90 {\n        transform: rotate(90deg) !important;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"when important is a selector it is used to scope utilities instead of adding !important","suites":[],"updatePoint":{"line":763,"column":93,"index":18020},"line":763,"code":"test('when important is a selector it is used to scope utilities instead of adding !important', () => {\n  let config = {\n    prefix: 'tw-',\n    important: '#app',\n    content: [{\n      raw: html`<div class=\"tw-custom-rotate-90\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities({\n        '.custom-rotate-90': {\n          transform: 'rotate(90deg)'\n        }\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      #app .tw-custom-rotate-90 {\n        transform: rotate(90deg);\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"when important is a selector it scopes all selectors in a rule, even though defining utilities like this is stupid","suites":[],"updatePoint":{"line":788,"column":120,"index":18669},"line":788,"code":"test('when important is a selector it scopes all selectors in a rule, even though defining utilities like this is stupid', () => {\n  let config = {\n    important: '#app',\n    content: [{\n      raw: html`<div class=\"custom-rotate-90 custom-rotate-1/4\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities({\n        '.custom-rotate-90, .custom-rotate-1\\\\/4': {\n          transform: 'rotate(90deg)'\n        }\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      #app .custom-rotate-90,\n      #app .custom-rotate-1\\/4 {\n        transform: rotate(90deg);\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"important utilities are not made double important when important option is used","suites":[],"updatePoint":{"line":813,"column":85,"index":19330},"line":813,"code":"test('important utilities are not made double important when important option is used', () => {\n  let config = {\n    important: true,\n    content: [{\n      raw: html`<div class=\"custom-rotate-90\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities({\n        '.custom-rotate-90': {\n          transform: 'rotate(90deg) !important'\n        }\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-rotate-90 {\n        transform: rotate(90deg) !important;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"component declarations respect the 'prefix' option by default","suites":[],"updatePoint":{"line":837,"column":67,"index":19916},"line":837,"code":"test(\"component declarations respect the 'prefix' option by default\", () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<button class=\"tw-btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        '.btn-blue': {\n          backgroundColor: 'blue'\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tw-btn-blue {\n        background-color: #00f;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"all selectors in a rule are prefixed","suites":[],"updatePoint":{"line":861,"column":42,"index":20439},"line":861,"code":"test('all selectors in a rule are prefixed', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<button class=\"tw-btn-blue tw-btn-red\"></button>\n          <div class=\"tw-custom-rotate-90 tw-custom-rotate-1/4\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities,\n      addComponents\n    }) {\n      addUtilities({\n        '.custom-rotate-90, .custom-rotate-1\\\\/4': {\n          transform: 'rotate(90deg)'\n        }\n      });\n      addComponents({\n        '.btn-blue, .btn-red': {\n          padding: '10px'\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tw-btn-blue,\n      .tw-btn-red {\n        padding: 10px;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"component declarations can optionally ignore 'prefix' option","suites":[],"updatePoint":{"line":893,"column":66,"index":21231},"line":893,"code":"test(\"component declarations can optionally ignore 'prefix' option\", () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<button class=\"btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        '.btn-blue': {\n          backgroundColor: 'blue'\n        }\n      }, {\n        respectPrefix: false\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .btn-blue {\n        background-color: #00f;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"component declarations are not affected by the 'important' option","suites":[],"updatePoint":{"line":919,"column":71,"index":21817},"line":919,"code":"test(\"component declarations are not affected by the 'important' option\", () => {\n  let config = {\n    important: true,\n    content: [{\n      raw: html`<button class=\"btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        '.btn-blue': {\n          backgroundColor: 'blue'\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .btn-blue {\n        background-color: #00f;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can apply the user's chosen prefix to components manually","suites":[],"updatePoint":{"line":943,"column":71,"index":22365},"line":943,"code":"test(\"plugins can apply the user's chosen prefix to components manually\", () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<button class=\"tw-btn-blue\"></button>`\n    }],\n    plugins: [function ({\n      addComponents,\n      prefix\n    }) {\n      addComponents({\n        [prefix('.btn-blue')]: {\n          backgroundColor: 'blue'\n        }\n      }, {\n        respectPrefix: false\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tw-btn-blue {\n        background-color: #00f;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"prefix can optionally be ignored for utilities","suites":[],"updatePoint":{"line":970,"column":52,"index":22962},"line":970,"code":"test('prefix can optionally be ignored for utilities', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"custom-rotate-90\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities({\n        '.custom-rotate-90': {\n          transform: 'rotate(90deg)'\n        }\n      }, {\n        respectPrefix: false\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-rotate-90 {\n        transform: rotate(90deg);\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"important can optionally be ignored for utilities","suites":[],"updatePoint":{"line":996,"column":55,"index":23552},"line":996,"code":"test('important can optionally be ignored for utilities', () => {\n  let config = {\n    important: true,\n    content: [{\n      raw: html`<div class=\"custom-rotate-90\"></div>`\n    }],\n    plugins: [function ({\n      addUtilities\n    }) {\n      addUtilities({\n        '.custom-rotate-90': {\n          transform: 'rotate(90deg)'\n        }\n      }, {\n        respectImportant: false\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-rotate-90 {\n        transform: rotate(90deg);\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"prefix will prefix all classes in a selector","suites":[],"updatePoint":{"line":1022,"column":50,"index":24142},"line":1022,"code":"test('prefix will prefix all classes in a selector', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"tw-btn-blue tw-w-1/4\"></div>`\n    }],\n    plugins: [function ({\n      addComponents,\n      prefix\n    }) {\n      addComponents({\n        [prefix('.btn-blue .w-1\\\\/4 > h1.text-xl + a .bar')]: {\n          backgroundColor: 'blue'\n        }\n      }, {\n        respectPrefix: false\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tw-btn-blue .tw-w-1\\/4 > h1.tw-text-xl + a .tw-bar {\n        background-color: #00f;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can be provided as an object with a handler function","suites":[],"updatePoint":{"line":1049,"column":66,"index":24826},"line":1049,"code":"test('plugins can be provided as an object with a handler function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"custom-object-fill custom-object-contain custom-object-cover\"></div>`\n    }],\n    plugins: [{\n      handler({\n        addUtilities\n      }) {\n        addUtilities({\n          '.custom-object-fill': {\n            'object-fit': 'fill'\n          },\n          '.custom-object-contain': {\n            'object-fit': 'contain'\n          },\n          '.custom-object-cover': {\n            'object-fit': 'cover'\n          }\n        });\n      }\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .custom-object-fill {\n        object-fit: fill;\n      }\n      .custom-object-contain {\n        object-fit: contain;\n      }\n      .custom-object-cover {\n        object-fit: cover;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can provide a config but no handler","suites":[],"updatePoint":{"line":1086,"column":49,"index":25715},"line":1086,"code":"test('plugins can provide a config but no handler', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"tw-custom-object-fill tw-custom-object-contain tw-custom-object-cover\"\n        ></div>`\n    }],\n    plugins: [{\n      config: {\n        prefix: 'tw-'\n      }\n    }, {\n      handler({\n        addUtilities\n      }) {\n        addUtilities({\n          '.custom-object-fill': {\n            'object-fit': 'fill'\n          },\n          '.custom-object-contain': {\n            'object-fit': 'contain'\n          },\n          '.custom-object-cover': {\n            'object-fit': 'cover'\n          }\n        });\n      }\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tw-custom-object-fill {\n        object-fit: fill;\n      }\n      .tw-custom-object-contain {\n        object-fit: contain;\n      }\n      .tw-custom-object-cover {\n        object-fit: cover;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins can be created using the `createPlugin` function","suites":[],"updatePoint":{"line":1129,"column":62,"index":26709},"line":1129,"code":"test('plugins can be created using the `createPlugin` function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-sm test-md test-lg hover:test-sm sm:test-sm\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      screens: {\n        sm: '400px'\n      }\n    },\n    plugins: [createPlugin(function ({\n      addUtilities,\n      theme\n    }) {\n      addUtilities(Object.fromEntries(Object.entries(theme('testPlugin')).map(([k, v]) => [`.test-${k}`, {\n        testProperty: v\n      }])));\n    }, {\n      theme: {\n        testPlugin: {\n          sm: '1rem',\n          md: '2rem',\n          lg: '3rem'\n        }\n      }\n    })]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-sm {\n        test-property: 1rem;\n      }\n      .test-md {\n        test-property: 2rem;\n      }\n      .test-lg {\n        test-property: 3rem;\n      }\n      .hover\\:test-sm:hover {\n        test-property: 1rem;\n      }\n      @media (min-width: 400px) {\n        .sm\\:test-sm {\n          test-property: 1rem;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins with extra options can be created using the `createPlugin.withOptions` function","suites":[],"updatePoint":{"line":1179,"column":93,"index":27854},"line":1179,"code":"test('plugins with extra options can be created using the `createPlugin.withOptions` function', () => {\n  let plugin = createPlugin.withOptions(function ({\n    className\n  }) {\n    return function ({\n      addUtilities,\n      theme\n    }) {\n      addUtilities(Object.fromEntries(Object.entries(theme('testPlugin')).map(([k, v]) => [`.${className}-${k}`, {\n        testProperty: v\n      }])));\n    };\n  }, function () {\n    return {\n      theme: {\n        testPlugin: {\n          sm: '1rem',\n          md: '2rem',\n          lg: '3rem'\n        }\n      }\n    };\n  });\n  let config = {\n    content: [{\n      raw: html`<div class=\"banana-sm banana-md banana-lg hover:banana-sm sm:banana-sm\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      screens: {\n        sm: '400px'\n      }\n    },\n    plugins: [plugin({\n      className: 'banana'\n    })]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .banana-sm {\n        test-property: 1rem;\n      }\n      .banana-md {\n        test-property: 2rem;\n      }\n      .banana-lg {\n        test-property: 3rem;\n      }\n      .hover\\:banana-sm:hover {\n        test-property: 1rem;\n      }\n      @media (min-width: 400px) {\n        .sm\\:banana-sm {\n          test-property: 1rem;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins should cache correctly","suites":[],"updatePoint":{"line":1238,"column":36,"index":29119},"line":1238,"code":"test('plugins should cache correctly', () => {\n  let plugin = createPlugin.withOptions(({\n    className = 'banana'\n  } = {}) => ({\n    addComponents\n  }) => {\n    addComponents({\n      [`.${className}`]: {\n        position: 'absolute'\n      }\n    });\n  });\n  let config = {\n    content: [{\n      raw: html`<div class=\"banana sm:banana apple sm:apple\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      screens: {\n        sm: '400px'\n      }\n    }\n  };\n  function internalRun(options = {}) {\n    return run('@tailwind components', {\n      ...config,\n      plugins: [plugin(options)]\n    });\n  }\n  return Promise.all([internalRun(), internalRun({\n    className: 'apple'\n  })]).then(([result1, result2]) => {\n    let expected1 = css`\n        .banana {\n          position: absolute;\n        }\n        @media (min-width: 400px) {\n          .sm\\:banana {\n            position: absolute;\n          }\n        }\n      `;\n    let expected2 = css`\n        .apple {\n          position: absolute;\n        }\n        @media (min-width: 400px) {\n          .sm\\:apple {\n            position: absolute;\n          }\n        }\n      `;\n    expect(result1.css).toMatchFormattedCss(expected1);\n    expect(result2.css).toMatchFormattedCss(expected2);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"plugins created using `createPlugin.withOptions` do not need to be invoked if the user wants to use the default options","suites":[],"updatePoint":{"line":1294,"column":125,"index":30451},"line":1294,"code":"test('plugins created using `createPlugin.withOptions` do not need to be invoked if the user wants to use the default options', () => {\n  let plugin = createPlugin.withOptions(function ({\n    className\n  } = {\n    className: 'banana'\n  }) {\n    return function ({\n      addUtilities,\n      theme\n    }) {\n      addUtilities(Object.fromEntries(Object.entries(theme('testPlugin')).map(([k, v]) => [`.${className}-${k}`, {\n        testProperty: v\n      }])));\n    };\n  }, function () {\n    return {\n      theme: {\n        testPlugin: {\n          sm: '1rem',\n          md: '2rem',\n          lg: '3rem'\n        }\n      }\n    };\n  });\n  let config = {\n    content: [{\n      raw: html`<div class=\"banana-sm banana-md banana-lg hover:banana-sm sm:banana-sm\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      screens: {\n        sm: '400px'\n      }\n    },\n    plugins: [plugin]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .banana-sm {\n        test-property: 1rem;\n      }\n      .banana-md {\n        test-property: 2rem;\n      }\n      .banana-lg {\n        test-property: 3rem;\n      }\n      .hover\\:banana-sm:hover {\n        test-property: 1rem;\n      }\n      @media (min-width: 400px) {\n        .sm\\:banana-sm {\n          test-property: 1rem;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"the configFunction parameter is optional when using the `createPlugin.withOptions` function","suites":[],"updatePoint":{"line":1353,"column":97,"index":31774},"line":1353,"code":"test('the configFunction parameter is optional when using the `createPlugin.withOptions` function', () => {\n  let plugin = createPlugin.withOptions(function ({\n    className\n  }) {\n    return function ({\n      addUtilities,\n      theme\n    }) {\n      addUtilities(Object.fromEntries(Object.entries(theme('testPlugin')).map(([k, v]) => [`.${className}-${k}`, {\n        testProperty: v\n      }])));\n    };\n  });\n  let config = {\n    content: [{\n      raw: html`<div class=\"banana-sm banana-md banana-lg hover:banana-sm sm:banana-sm\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      screens: {\n        sm: '400px'\n      },\n      testPlugin: {\n        sm: '1px',\n        md: '2px',\n        lg: '3px'\n      }\n    },\n    plugins: [plugin({\n      className: 'banana'\n    })]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .banana-sm {\n        test-property: 1px;\n      }\n      .banana-md {\n        test-property: 2px;\n      }\n      .banana-lg {\n        test-property: 3px;\n      }\n      .hover\\:banana-sm:hover {\n        test-property: 1px;\n      }\n      @media (min-width: 400px) {\n        .sm\\:banana-sm {\n          test-property: 1px;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"keyframes are not escaped","suites":[],"updatePoint":{"line":1407,"column":31,"index":32955},"line":1407,"code":"test('keyframes are not escaped', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo-[abc] md:foo-[def]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        foo: value => {\n          return {\n            [`@keyframes ${value}`]: {\n              '25.001%': {\n                color: 'black'\n              }\n            },\n            animation: `${value} 1s infinite`\n          };\n        }\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @keyframes abc {\n        25.001% {\n          color: #000;\n        }\n      }\n      .foo-\\[abc\\] {\n        animation: 1s infinite abc;\n      }\n      @media (min-width: 768px) {\n        @keyframes def {\n          25.001% {\n            color: #000;\n          }\n        }\n        .md\\:foo-\\[def\\] {\n          animation: 1s infinite def;\n        }\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"font sizes are retrieved without default line-heights or letter-spacing using theme function","suites":[],"updatePoint":{"line":1455,"column":98,"index":34038},"line":1455,"code":"test('font sizes are retrieved without default line-heights or letter-spacing using theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      fontSize: {\n        sm: ['14px', '20px']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          fontSize: theme('fontSize.sm')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        font-size: 14px;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"outlines are retrieved without outline-offset using theme function","suites":[],"updatePoint":{"line":1485,"column":72,"index":34654},"line":1485,"code":"test('outlines are retrieved without outline-offset using theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      outline: {\n        black: ['2px dotted black', '4px']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          outline: theme('outline.black')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        outline: 2px dotted #000;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"box-shadow values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1515,"column":74,"index":35295},"line":1515,"code":"test('box-shadow values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      boxShadow: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          boxShadow: theme('boxShadow.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        box-shadow: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"transition-property values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1545,"column":83,"index":35940},"line":1545,"code":"test('transition-property values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      transitionProperty: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          transitionProperty: theme('transitionProperty.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        transition-property: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"transition-duration values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1575,"column":83,"index":36621},"line":1575,"code":"test('transition-duration values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      transitionDuration: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          transitionDuration: theme('transitionDuration.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        transition-duration: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"transition-delay values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1605,"column":80,"index":37299},"line":1605,"code":"test('transition-delay values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      transitionDuration: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          transitionDuration: theme('transitionDuration.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        transition-duration: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"transition-timing-function values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1635,"column":90,"index":37987},"line":1635,"code":"test('transition-timing-function values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      transitionTimingFunction: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          transitionTimingFunction: theme('transitionTimingFunction.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        transition-timing-function: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"background-image values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1665,"column":80,"index":38690},"line":1665,"code":"test('background-image values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      backgroundImage: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          backgroundImage: theme('backgroundImage.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        background-image: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"background-size values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1695,"column":79,"index":39355},"line":1695,"code":"test('background-size values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      backgroundSize: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          backgroundSize: theme('backgroundSize.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        background-size: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"background-color values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1725,"column":80,"index":40017},"line":1725,"code":"test('background-color values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      backgroundColor: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          backgroundColor: theme('backgroundColor.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        background-color: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"cursor values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1755,"column":70,"index":40673},"line":1755,"code":"test('cursor values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      cursor: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          cursor: theme('cursor.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        cursor: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"animation values are joined when retrieved using the theme function","suites":[],"updatePoint":{"line":1785,"column":73,"index":41295},"line":1785,"code":"test('animation values are joined when retrieved using the theme function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: [],\n    theme: {\n      animation: {\n        lol: ['width', 'height']\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      theme\n    }) {\n      addComponents({\n        '.foo': {\n          animation: theme('animation.lol')\n        }\n      });\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        animation: width, height;\n      }\n    `);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"custom properties are not converted to kebab-case when added to base layer","suites":[],"updatePoint":{"line":1815,"column":80,"index":41936},"line":1815,"code":"test('custom properties are not converted to kebab-case when added to base layer', () => {\n  let config = {\n    content: [],\n    plugins: [function ({\n      addBase\n    }) {\n      addBase({\n        ':root': {\n          '--colors-primaryThing-500': '0, 0, 255'\n        }\n      });\n    }]\n  };\n  return run('@tailwind base', config).then(result => {\n    expect(result.css).toContain(`--colors-primaryThing-500: 0, 0, 255;`);\n  });\n});","file":"custom-plugins.test.js","skipped":false,"dir":"tests"},{"name":"custom separator","suites":[],"updatePoint":{"line":2,"column":22,"index":68},"line":2,"code":"test('custom separator', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"md_hover_text-right\"></div>\n          <div class=\"motion-safe_hover_text-center\"></div>\n          <div class=\"dark_focus_text-left\"></div>\n          <div class=\"group-hover_focus-within_text-left\"></div>\n          <div class=\"rtl_active_text-center\"></div>\n        `\n    }],\n    separator: '_'\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .group:hover .group-hover_focus-within_text-left:focus-within {\n        text-align: left;\n      }\n      :is([dir='rtl'] .rtl_active_text-center:active) {\n        text-align: center;\n      }\n      @media (prefers-reduced-motion: no-preference) {\n        .motion-safe_hover_text-center:hover {\n          text-align: center;\n        }\n      }\n      :is(.dark .dark_focus_text-left:focus) {\n        text-align: left;\n      }\n      @media (min-width: 768px) {\n        .md_hover_text-right:hover {\n          text-align: right;\n        }\n      }\n    `);\n  });\n});","file":"custom-separator.test.js","skipped":false,"dir":"tests"},{"name":"dash is not supported","suites":[],"updatePoint":{"line":40,"column":27,"index":1172},"line":40,"code":"test('dash is not supported', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: 'lg-hover-font-bold'\n    }],\n    separator: '-'\n  };\n  return expect(run('@tailwind utilities', config)).rejects.toThrowError(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\");\n});","file":"custom-separator.test.js","skipped":false,"dir":"tests"},{"name":"transform function","suites":[],"updatePoint":{"line":5,"column":24,"index":163},"line":5,"code":"test('transform function', () => {\n  let config = {\n    content: {\n      files: [{\n        raw: html`<div class=\"uppercase\"></div>`\n      }],\n      transform: customTransformer\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .lowercase {\n        text-transform: lowercase;\n      }\n    `);\n  });\n});","file":"custom-transformers.test.js","skipped":false,"dir":"tests"},{"name":"transform.DEFAULT","suites":[],"updatePoint":{"line":22,"column":23,"index":539},"line":22,"code":"test('transform.DEFAULT', () => {\n  let config = {\n    content: {\n      files: [{\n        raw: html`<div class=\"uppercase\"></div>`\n      }],\n      transform: {\n        DEFAULT: customTransformer\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .lowercase {\n        text-transform: lowercase;\n      }\n    `);\n  });\n});","file":"custom-transformers.test.js","skipped":false,"dir":"tests"},{"name":"transform.{extension}","suites":[],"updatePoint":{"line":41,"column":27,"index":946},"line":41,"code":"test('transform.{extension}', () => {\n  let config = {\n    content: {\n      files: [{\n        raw: 'blah blah blah',\n        extension: 'html'\n      }, {\n        raw: 'blah blah blah',\n        extension: 'php'\n      }],\n      transform: {\n        html: () => 'uppercase',\n        php: () => 'lowercase'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .lowercase {\n        text-transform: lowercase;\n      }\n    `);\n  });\n});","file":"custom-transformers.test.js","skipped":false,"dir":"tests"},{"name":"it uses the values from the custom config file","suites":[],"updatePoint":{"line":7,"column":52,"index":307},"line":7,"code":"test('it uses the values from the custom config file', () => {\n  let config = require(path.resolve(`${__dirname}/fixtures/custom-config.js`));\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 400px) {\n        .mobile\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"custom config can be passed as an object","suites":[],"updatePoint":{"line":19,"column":46,"index":680},"line":19,"code":"test('custom config can be passed as an object', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mobile:font-bold\"></div>`\n    }],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 400px) {\n        .mobile\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"custom config path can be passed using `config` property in an object","suites":[],"updatePoint":{"line":40,"column":75,"index":1170},"line":40,"code":"test('custom config path can be passed using `config` property in an object', () => {\n  let config = {\n    config: path.resolve(`${__dirname}/fixtures/custom-config.js`)\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 400px) {\n        .mobile\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"custom config can be passed under the `config` property","suites":[],"updatePoint":{"line":54,"column":61,"index":1567},"line":54,"code":"test('custom config can be passed under the `config` property', () => {\n  let config = {\n    config: {\n      content: [{\n        raw: html`<div class=\"mobile:font-bold\"></div>`\n      }],\n      theme: {\n        screens: {\n          mobile: '400px'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 400px) {\n        .mobile\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"tailwind.config.cjs is picked up by default","suites":[],"updatePoint":{"line":77,"column":49,"index":2067},"line":77,"code":"test('tailwind.config.cjs is picked up by default', () => {\n  return inTempDirectory(() => {\n    fs.writeFileSync(path.resolve(cjsConfigFile), javascript`module.exports = {\n        content: [{ raw: '<div class=\"mobile:font-bold\"></div>' }],\n        theme: {\n          screens: {\n            mobile: '400px',\n          },\n        },\n      }`);\n    return run('@tailwind utilities').then(result => {\n      expect(result.css).toMatchFormattedCss(css`\n        @media (min-width: 400px) {\n          .mobile\\:font-bold {\n            font-weight: 700;\n          }\n        }\n      `);\n    });\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"tailwind.config.js is picked up by default","suites":[],"updatePoint":{"line":98,"column":48,"index":2661},"line":98,"code":"test('tailwind.config.js is picked up by default', () => {\n  return inTempDirectory(() => {\n    fs.writeFileSync(path.resolve(defaultConfigFile), javascript`module.exports = {\n        content: [{ raw: '<div class=\"mobile:font-bold\"></div>' }],\n        theme: {\n          screens: {\n            mobile: '400px',\n          },\n        },\n      }`);\n    return run('@tailwind utilities').then(result => {\n      expect(result.css).toMatchFormattedCss(css`\n        @media (min-width: 400px) {\n          .mobile\\:font-bold {\n            font-weight: 700;\n          }\n        }\n      `);\n    });\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"tailwind.config.cjs is picked up by default when passing an empty object","suites":[],"updatePoint":{"line":119,"column":78,"index":3289},"line":119,"code":"test('tailwind.config.cjs is picked up by default when passing an empty object', () => {\n  return inTempDirectory(() => {\n    fs.writeFileSync(path.resolve(cjsConfigFile), javascript`module.exports = {\n        content: [{ raw: '<div class=\"mobile:font-bold\"></div>' }],\n        theme: {\n          screens: {\n            mobile: '400px',\n          },\n        },\n      }`);\n    return run('@tailwind utilities', {}).then(result => {\n      expect(result.css).toMatchFormattedCss(css`\n        @media (min-width: 400px) {\n          .mobile\\:font-bold {\n            font-weight: 700;\n          }\n        }\n      `);\n    });\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"tailwind.config.js is picked up by default when passing an empty object","suites":[],"updatePoint":{"line":140,"column":77,"index":3916},"line":140,"code":"test('tailwind.config.js is picked up by default when passing an empty object', () => {\n  return inTempDirectory(() => {\n    fs.writeFileSync(path.resolve(defaultConfigFile), javascript`module.exports = {\n        content: [{ raw: '<div class=\"mobile:font-bold\"></div>' }],\n        theme: {\n          screens: {\n            mobile: '400px',\n          },\n        },\n      }`);\n    return run('@tailwind utilities', {}).then(result => {\n      expect(result.css).toMatchFormattedCss(css`\n        @media (min-width: 400px) {\n          .mobile\\:font-bold {\n            font-weight: 700;\n          }\n        }\n      `);\n    });\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"the default config can be overridden using the presets key","suites":[],"updatePoint":{"line":161,"column":64,"index":4534},"line":161,"code":"test('the default config can be overridden using the presets key', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"min-h-primary min-h-secondary min-h-0\"></div>`\n    }],\n    presets: [{\n      theme: {\n        extend: {\n          minHeight: {\n            secondary: '24px'\n          }\n        }\n      }\n    }],\n    theme: {\n      extend: {\n        minHeight: {\n          primary: '48px'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .min-h-0 {\n        min-height: 0;\n      }\n      .min-h-primary {\n        min-height: 48px;\n      }\n      .min-h-secondary {\n        min-height: 24px;\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"presets can be functions","suites":[],"updatePoint":{"line":197,"column":30,"index":5227},"line":197,"code":"test('presets can be functions', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"min-h-primary min-h-secondary min-h-0\"></div>`\n    }],\n    presets: [() => ({\n      theme: {\n        extend: {\n          minHeight: {\n            secondary: '24px'\n          }\n        }\n      }\n    })],\n    theme: {\n      extend: {\n        minHeight: {\n          primary: '48px'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .min-h-0 {\n        min-height: 0;\n      }\n      .min-h-primary {\n        min-height: 48px;\n      }\n      .min-h-secondary {\n        min-height: 24px;\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"the default config can be removed by using an empty presets key in a preset","suites":[],"updatePoint":{"line":233,"column":81,"index":5979},"line":233,"code":"test('the default config can be removed by using an empty presets key in a preset', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"min-h-primary min-h-secondary min-h-0\"></div>`\n    }],\n    presets: [{\n      presets: [],\n      theme: {\n        extend: {\n          minHeight: {\n            secondary: '24px'\n          }\n        }\n      }\n    }],\n    theme: {\n      extend: {\n        minHeight: {\n          primary: '48px'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .min-h-primary {\n        min-height: 48px;\n      }\n      .min-h-secondary {\n        min-height: 24px;\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"presets can have their own presets","suites":[],"updatePoint":{"line":267,"column":40,"index":6653},"line":267,"code":"test('presets can have their own presets', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-red bg-transparent bg-black bg-white\"></div>`\n    }],\n    presets: [{\n      presets: [],\n      theme: {\n        colors: {\n          red: '#dd0000'\n        }\n      }\n    }, {\n      presets: [{\n        presets: [],\n        theme: {\n          colors: {\n            transparent: 'transparent',\n            red: '#ff0000'\n          }\n        }\n      }],\n      theme: {\n        extend: {\n          colors: {\n            black: 'black',\n            red: '#ee0000'\n          },\n          backgroundColor: theme => theme('colors')\n        }\n      },\n      corePlugins: ['backgroundColor']\n    }],\n    theme: {\n      extend: {\n        colors: {\n          white: 'white'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-black {\n        background-color: #000;\n      }\n      .bg-red {\n        background-color: #e00;\n      }\n      .bg-transparent {\n        background-color: #0000;\n      }\n      .bg-white {\n        background-color: #fff;\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"function presets can be mixed with object presets","suites":[],"updatePoint":{"line":325,"column":55,"index":7836},"line":325,"code":"test('function presets can be mixed with object presets', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-red bg-transparent bg-black bg-white\"></div>`\n    }],\n    presets: [() => ({\n      presets: [],\n      theme: {\n        colors: {\n          red: '#dd0000'\n        }\n      }\n    }), {\n      presets: [() => ({\n        presets: [],\n        theme: {\n          colors: {\n            transparent: 'transparent',\n            red: '#ff0000'\n          }\n        }\n      })],\n      theme: {\n        extend: {\n          colors: {\n            black: 'black',\n            red: '#ee0000'\n          },\n          backgroundColor: theme => theme('colors')\n        }\n      },\n      corePlugins: ['backgroundColor']\n    }],\n    theme: {\n      extend: {\n        colors: {\n          white: 'white'\n        }\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-black {\n        background-color: #000;\n      }\n      .bg-red {\n        background-color: #e00;\n      }\n      .bg-transparent {\n        background-color: #0000;\n      }\n      .bg-white {\n        background-color: #fff;\n      }\n    `);\n  });\n});","file":"customConfig.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use the darkMode \"class\" mode","suites":[],"updatePoint":{"line":2,"column":55,"index":111},"line":2,"code":"it('should be possible to use the darkMode \"class\" mode', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`<div class=\"dark:font-bold\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      :is(.dark .dark\\:font-bold) {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"dark-mode.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to change the class name","suites":[],"updatePoint":{"line":26,"column":47,"index":632},"line":26,"code":"it('should be possible to change the class name', () => {\n  let config = {\n    darkMode: ['class', '.test-dark'],\n    content: [{\n      raw: html`<div class=\"dark:font-bold\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      :is(.test-dark .dark\\:font-bold) {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"dark-mode.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use the darkMode \"media\" mode","suites":[],"updatePoint":{"line":50,"column":55,"index":1182},"line":50,"code":"it('should be possible to use the darkMode \"media\" mode', () => {\n  let config = {\n    darkMode: 'media',\n    content: [{\n      raw: html`<div class=\"dark:font-bold\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (prefers-color-scheme: dark) {\n        .dark\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"dark-mode.test.js","skipped":false,"dir":"tests"},{"name":"should default to the `media` mode when no mode is provided","suites":[],"updatePoint":{"line":76,"column":63,"index":1766},"line":76,"code":"it('should default to the `media` mode when no mode is provided', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"dark:font-bold\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (prefers-color-scheme: dark) {\n        .dark\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"dark-mode.test.js","skipped":false,"dir":"tests"},{"name":"should default to the `media` mode when mode is set to `false`","suites":[],"updatePoint":{"line":101,"column":66,"index":2330},"line":101,"code":"it('should default to the `media` mode when mode is set to `false`', () => {\n  let config = {\n    darkMode: false,\n    content: [{\n      raw: html`<div class=\"dark:font-bold\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (prefers-color-scheme: dark) {\n        .dark\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"dark-mode.test.js","skipped":false,"dir":"tests"},{"name":"The default extractor works as expected","suites":[],"updatePoint":{"line":98,"column":45,"index":5457},"line":98,"code":"test('The default extractor works as expected', async () => {\n  const extractions = defaultExtractor([jsExamples, jsxExamples, htmlExamples].join('\\n').trim());\n  for (const str of includes) {\n    expect(extractions).toContain(str);\n  }\n  for (const str of excludes) {\n    expect(extractions).not.toContain(str);\n  }\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"basic utility classes","suites":[],"updatePoint":{"line":129,"column":27,"index":6512},"line":129,"code":"test('basic utility classes', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"text-center font-bold px-4 pointer-events-none\"></div>\n  `);\n  expect(extractions).toContain('text-center');\n  expect(extractions).toContain('font-bold');\n  expect(extractions).toContain('px-4');\n  expect(extractions).toContain('pointer-events-none');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"modifiers with basic utilities","suites":[],"updatePoint":{"line":138,"column":36,"index":6878},"line":138,"code":"test('modifiers with basic utilities', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"hover:text-center hover:focus:font-bold\"></div>\n  `);\n  expect(extractions).toContain('hover:text-center');\n  expect(extractions).toContain('hover:focus:font-bold');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"utilities with dot characters","suites":[],"updatePoint":{"line":145,"column":35,"index":7157},"line":145,"code":"test('utilities with dot characters', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"px-1.5 active:px-2.5 hover:focus:px-3.5\"></div>\n  `);\n  expect(extractions).toContain('px-1.5');\n  expect(extractions).toContain('active:px-2.5');\n  expect(extractions).toContain('hover:focus:px-3.5');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"basic utilities with color opacity modifier","suites":[],"updatePoint":{"line":153,"column":49,"index":7486},"line":153,"code":"test('basic utilities with color opacity modifier', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"text-red-500/25 hover:text-red-500/50 hover:active:text-red-500/75\"></div>\n  `);\n  expect(extractions).toContain('text-red-500/25');\n  expect(extractions).toContain('hover:text-red-500/50');\n  expect(extractions).toContain('hover:active:text-red-500/75');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"basic arbitrary values","suites":[],"updatePoint":{"line":161,"column":28,"index":7848},"line":161,"code":"test('basic arbitrary values', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"px-[25px] hover:px-[40rem] hover:focus:px-[23vh]\"></div>\n  `);\n  expect(extractions).toContain('px-[25px]');\n  expect(extractions).toContain('hover:px-[40rem]');\n  expect(extractions).toContain('hover:focus:px-[23vh]');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with color opacity modifier","suites":[],"updatePoint":{"line":169,"column":50,"index":8196},"line":169,"code":"test('arbitrary values with color opacity modifier', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"text-[#bada55]/25 hover:text-[#bada55]/50 hover:active:text-[#bada55]/75\"></div>\n  `);\n  expect(extractions).toContain('text-[#bada55]/25');\n  expect(extractions).toContain('hover:text-[#bada55]/50');\n  expect(extractions).toContain('hover:active:text-[#bada55]/75');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with spaces","suites":[],"updatePoint":{"line":177,"column":34,"index":8576},"line":177,"code":"test('arbitrary values with spaces', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"grid-cols-[1fr_200px_3fr] md:grid-cols-[2fr_100px_1fr] open:lg:grid-cols-[3fr_300px_1fr]\"></div>\n  `);\n  expect(extractions).toContain('grid-cols-[1fr_200px_3fr]');\n  expect(extractions).toContain('md:grid-cols-[2fr_100px_1fr]');\n  expect(extractions).toContain('open:lg:grid-cols-[3fr_300px_1fr]');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with css variables","suites":[],"updatePoint":{"line":185,"column":41,"index":8995},"line":185,"code":"test('arbitrary values with css variables', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"fill-[var(--my-color)] hover:fill-[var(--my-color-2)] hover:focus:fill-[var(--my-color-3)]\"></div>\n  `);\n  expect(extractions).toContain('fill-[var(--my-color)]');\n  expect(extractions).toContain('hover:fill-[var(--my-color-2)]');\n  expect(extractions).toContain('hover:focus:fill-[var(--my-color-3)]');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with type hints","suites":[],"updatePoint":{"line":193,"column":38,"index":9415},"line":193,"code":"test('arbitrary values with type hints', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"text-[color:var(--my-color)] hover:text-[color:var(--my-color-2)] hover:focus:text-[color:var(--my-color-3)]\"></div>\n  `);\n  expect(extractions).toContain('text-[color:var(--my-color)]');\n  expect(extractions).toContain('hover:text-[color:var(--my-color-2)]');\n  expect(extractions).toContain('hover:focus:text-[color:var(--my-color-3)]');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with single quotes","suites":[],"updatePoint":{"line":201,"column":41,"index":9874},"line":201,"code":"test('arbitrary values with single quotes', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"content-['hello_world'] hover:content-['hello_world_2'] hover:focus:content-['hello_world_3']\"></div>\n  `);\n  expect(extractions).toContain(`content-['hello_world']`);\n  expect(extractions).toContain(`hover:content-['hello_world_2']`);\n  expect(extractions).toContain(`hover:focus:content-['hello_world_3']`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with double quotes","suites":[],"updatePoint":{"line":209,"column":41,"index":10303},"line":209,"code":"test('arbitrary values with double quotes', async () => {\n  const extractions = defaultExtractor(`\n    <div class='content-[\"hello_world\"] hover:content-[\"hello_world_2\"] hover:focus:content-[\"hello_world_3\"]'></div>\n  `);\n  expect(extractions).toContain(`content-[\"hello_world\"]`);\n  expect(extractions).toContain(`hover:content-[\"hello_world_2\"]`);\n  expect(extractions).toContain(`hover:focus:content-[\"hello_world_3\"]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with some single quoted values","suites":[],"updatePoint":{"line":217,"column":53,"index":10744},"line":217,"code":"test('arbitrary values with some single quoted values', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"font-['Open_Sans',_system-ui,_sans-serif] hover:font-['Proxima_Nova',_system-ui,_sans-serif] hover:focus:font-['Inter_var',_system-ui,_sans-serif]\"></div>\n  `);\n  expect(extractions).toContain(`font-['Open_Sans',_system-ui,_sans-serif]`);\n  expect(extractions).toContain(`hover:font-['Proxima_Nova',_system-ui,_sans-serif]`);\n  expect(extractions).toContain(`hover:focus:font-['Inter_var',_system-ui,_sans-serif]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with some double quoted values","suites":[],"updatePoint":{"line":225,"column":53,"index":11291},"line":225,"code":"test('arbitrary values with some double quoted values', async () => {\n  const extractions = defaultExtractor(`\n    <div class='font-[\"Open_Sans\",_system-ui,_sans-serif] hover:font-[\"Proxima_Nova\",_system-ui,_sans-serif] hover:focus:font-[\"Inter_var\",_system-ui,_sans-serif]'></div>\n  `);\n  expect(extractions).toContain(`font-[\"Open_Sans\",_system-ui,_sans-serif]`);\n  expect(extractions).toContain(`hover:font-[\"Proxima_Nova\",_system-ui,_sans-serif]`);\n  expect(extractions).toContain(`hover:focus:font-[\"Inter_var\",_system-ui,_sans-serif]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with escaped underscores","suites":[],"updatePoint":{"line":233,"column":47,"index":11832},"line":233,"code":"test('arbitrary values with escaped underscores', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"content-['hello\\\\_world'] hover:content-['hello\\\\_world\\\\_2'] hover:focus:content-['hello\\\\_world\\\\_3']\"></div>\n  `);\n  expect(extractions).toContain(`content-['hello\\\\_world']`);\n  expect(extractions).toContain(`hover:content-['hello\\\\_world\\\\_2']`);\n  expect(extractions).toContain(`hover:focus:content-['hello\\\\_world\\\\_3']`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"basic utilities with arbitrary color opacity modifier","suites":[],"updatePoint":{"line":241,"column":59,"index":12299},"line":241,"code":"test('basic utilities with arbitrary color opacity modifier', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"text-red-500/[.25] hover:text-red-500/[.5] hover:active:text-red-500/[.75]\"></div>\n  `);\n  expect(extractions).toContain('text-red-500/[.25]');\n  expect(extractions).toContain('hover:text-red-500/[.5]');\n  expect(extractions).toContain('hover:active:text-red-500/[.75]');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with arbitrary color opacity modifier","suites":[],"updatePoint":{"line":249,"column":60,"index":12709},"line":249,"code":"test('arbitrary values with arbitrary color opacity modifier', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"text-[#bada55]/[.25] hover:text-[#bada55]/[.5] hover:active:text-[#bada55]/[.75]\"></div>\n  `);\n  expect(extractions).toContain('text-[#bada55]/[.25]');\n  expect(extractions).toContain('hover:text-[#bada55]/[.5]');\n  expect(extractions).toContain('hover:active:text-[#bada55]/[.75]');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with angle brackets","suites":[],"updatePoint":{"line":257,"column":42,"index":13113},"line":257,"code":"test('arbitrary values with angle brackets', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"content-[>] hover:content-[<] hover:focus:content-[>]\"></div>\n  `);\n  expect(extractions).toContain(`content-[>]`);\n  expect(extractions).toContain(`hover:content-[<]`);\n  expect(extractions).toContain(`hover:focus:content-[>]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with angle brackets in single quotes","suites":[],"updatePoint":{"line":265,"column":59,"index":13480},"line":265,"code":"test('arbitrary values with angle brackets in single quotes', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"content-['>'] hover:content-['<'] hover:focus:content-['>']\"></div>\n  `);\n  expect(extractions).toContain(`content-['>']`);\n  expect(extractions).toContain(`hover:content-['<']`);\n  expect(extractions).toContain(`hover:focus:content-['>']`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with angle brackets in double quotes","suites":[],"updatePoint":{"line":273,"column":59,"index":13859},"line":273,"code":"test('arbitrary values with angle brackets in double quotes', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"content-[\">\"] hover:content-[\"<\"] hover:focus:content-[\">\"]\"></div>\n  `);\n  expect(extractions).toContain(`content-[\">\"]`);\n  expect(extractions).toContain(`hover:content-[\"<\"]`);\n  expect(extractions).toContain(`hover:focus:content-[\">\"]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with theme lookup using quotes","suites":[],"updatePoint":{"line":281,"column":53,"index":14232},"line":281,"code":"test('arbitrary values with theme lookup using quotes', () => {\n  const extractions = defaultExtractor(`\n    <p class=\"[--y:theme('colors.blue.500')] [color:var(--y)]\"></p>\n  `);\n  expect(extractions).toContain(`[--y:theme('colors.blue.500')]`);\n  expect(extractions).toContain(`[color:var(--y)]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"special characters","suites":[],"updatePoint":{"line":288,"column":24,"index":14506},"line":288,"code":"test('special characters', async () => {\n  const extractions = defaultExtractor(`\n    <div class=\"<sm:underline md>:font-bold\"></div>\n  `);\n  expect(extractions).toContain(`<sm:underline`);\n  expect(extractions).toContain(`md>:font-bold`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"with single quotes array within template literal","suites":[],"updatePoint":{"line":295,"column":54,"index":14780},"line":295,"code":"test('with single quotes array within template literal', async () => {\n  const extractions = defaultExtractor(`<div class=\\`\\${['pr-1.5']}\\`></div>`);\n  expect(extractions).toContain('pr-1.5');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"with double quotes array within template literal","suites":[],"updatePoint":{"line":299,"column":54,"index":14978},"line":299,"code":"test('with double quotes array within template literal', async () => {\n  const extractions = defaultExtractor(`<div class=\\`\\${[\"pr-1.5\"]}\\`></div>`);\n  expect(extractions).toContain('pr-1.5');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"with single quotes array within function","suites":[],"updatePoint":{"line":303,"column":46,"index":15168},"line":303,"code":"test('with single quotes array within function', async () => {\n  const extractions = defaultExtractor(`document.body.classList.add(['pl-1.5'].join(\" \"));`);\n  expect(extractions).toContain('pl-1.5');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"with double quotes array within function","suites":[],"updatePoint":{"line":307,"column":46,"index":15372},"line":307,"code":"test('with double quotes array within function', async () => {\n  const extractions = defaultExtractor(`document.body.classList.add([\"pl-1.5\"].join(\" \"));`);\n  expect(extractions).toContain('pl-1.5');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"with angle brackets","suites":[],"updatePoint":{"line":311,"column":25,"index":15555},"line":311,"code":"test('with angle brackets', async () => {\n  const extractions = defaultExtractor(`<div class=\"bg-blue-200 <% if (useShadow) { %>shadow-xl<% } %>\">test</div>`);\n  expect(extractions).toContain('bg-blue-200');\n  expect(extractions).toContain('shadow-xl');\n  expect(extractions).not.toContain('>shadow-xl');\n  expect(extractions).not.toContain('shadow-xl<');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"markdown code fences","suites":[],"updatePoint":{"line":318,"column":26,"index":15916},"line":318,"code":"test('markdown code fences', async () => {\n  const extractions = defaultExtractor('<!-- this should work: `.font-bold`, `.font-normal` -->');\n  expect(extractions).toContain('font-bold');\n  expect(extractions).toContain('font-normal');\n  expect(extractions).not.toContain('.font-bold');\n  expect(extractions).not.toContain('.font-normal');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"classes in slim templates","suites":[],"updatePoint":{"line":325,"column":31,"index":16265},"line":325,"code":"test('classes in slim templates', async () => {\n  const extractions = defaultExtractor(`\n    p.bg-red-500.text-sm\n      'This is a paragraph\n        small.italic.text-gray-500\n          '(Look mom, no closing tag!)\n  `);\n  expect(extractions).toContain('bg-red-500');\n  expect(extractions).toContain('text-sm');\n  expect(extractions).toContain('italic');\n  expect(extractions).toContain('text-gray-500');\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"multi-word + arbitrary values + quotes","suites":[],"updatePoint":{"line":337,"column":44,"index":16687},"line":337,"code":"test('multi-word + arbitrary values + quotes', async () => {\n  const extractions = defaultExtractor(`\n    grid-cols-['repeat(2)']\n  `);\n  expect(extractions).toContain(`grid-cols-['repeat(2)']`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"a lot of data","suites":[],"updatePoint":{"line":343,"column":19,"index":16862},"line":343,"code":"test('a lot of data', () => {\n  let extractions = defaultExtractor('underline '.repeat(2 ** 17));\n  expect(extractions).toContain(`underline`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"ruby percent string array","suites":[],"updatePoint":{"line":347,"column":31,"index":17022},"line":347,"code":"test('ruby percent string array', () => {\n  let extractions = defaultExtractor('%w[text-[#bada55]]');\n  expect(extractions).toContain(`text-[#bada55]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary properties followed by square bracketed stuff","suites":[],"updatePoint":{"line":351,"column":61,"index":17209},"line":351,"code":"test('arbitrary properties followed by square bracketed stuff', () => {\n  let extractions = defaultExtractor('<div class=\"h-16 items-end border border-white [display:inherit]\">[foo]</div>');\n  expect(extractions).toContain(`[display:inherit]`);\n});","file":"default-extractor.test.js","skipped":false,"dir":"tests"},{"name":"remove mutation from these tests so we can run against both engines","suites":[],"line":3,"code":"test.todo('remove mutation from these tests so we can run against both engines');","file":"defaultConfig.test.js","skipped":true,"dir":"tests"},{"name":"the default config matches the stub","suites":[],"updatePoint":{"line":4,"column":41,"index":222},"line":4,"code":"test('the default config matches the stub', () => {\n  expect(config).toEqual(configStub);\n});","file":"defaultConfig.test.js","skipped":false,"dir":"tests"},{"name":"modifying the default config does not affect the stub","suites":[],"updatePoint":{"line":7,"column":59,"index":334},"line":7,"code":"test('modifying the default config does not affect the stub', () => {\n  config.theme = {};\n  expect(config).not.toEqual(configStub);\n});","file":"defaultConfig.test.js","skipped":false,"dir":"tests"},{"name":"remove mutation from these tests so we can run against both engines","suites":[],"line":3,"code":"test.todo('remove mutation from these tests so we can run against both engines');","file":"defaultTheme.test.js","skipped":true,"dir":"tests"},{"name":"the default theme matches the stub","suites":[],"updatePoint":{"line":4,"column":40,"index":222},"line":4,"code":"test('the default theme matches the stub', () => {\n  expect(theme).toEqual(configStub.theme);\n});","file":"defaultTheme.test.js","skipped":false,"dir":"tests"},{"name":"modifying the default theme does not affect the stub","suites":[],"updatePoint":{"line":7,"column":58,"index":338},"line":7,"code":"test('modifying the default theme does not affect the stub', () => {\n  theme.colors = {};\n  expect(theme).not.toEqual(configStub.theme);\n});","file":"defaultTheme.test.js","skipped":false,"dir":"tests"},{"name":"should warn when we detect nested css","suites":[],"updatePoint":{"line":2,"column":41,"index":87},"line":2,"code":"it('should warn when we detect nested css', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"nested\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n\n    .nested {\n      .example {\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.messages).toHaveLength(1);\n    expect(result.messages).toMatchObject([{\n      type: 'warning',\n      text: ['Nested CSS was detected, but CSS nesting has not been configured correctly.', 'Please enable a CSS nesting plugin *before* Tailwind in your configuration.', 'See how here: https://tailwindcss.com/docs/using-with-preprocessors#nesting'].join('\\n')\n    }]);\n  });\n});","file":"detect-nesting.test.js","skipped":false,"dir":"tests"},{"name":"should not warn when we detect nested css inside css @layer rules","suites":[],"updatePoint":{"line":24,"column":69,"index":789},"line":24,"code":"it('should not warn when we detect nested css inside css @layer rules', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"underline\"></div>`\n    }]\n  };\n  let input = css`\n    @layer tw-base, tw-components, tw-utilities;\n    @layer tw-utilities {\n      @tailwind utilities;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @layer tw-base, tw-components, tw-utilities;\n      @layer tw-utilities {\n        .underline {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n    expect(result.messages).toHaveLength(0);\n  });\n});","file":"detect-nesting.test.js","skipped":false,"dir":"tests"},{"name":"should warn when we detect namespaced @tailwind at rules","suites":[],"updatePoint":{"line":48,"column":60,"index":1401},"line":48,"code":"it('should warn when we detect namespaced @tailwind at rules', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-center\"></div>`\n    }]\n  };\n  let input = css`\n    .namespace {\n      @tailwind utilities;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.messages).toHaveLength(1);\n    expect(result.messages).toMatchObject([{\n      type: 'warning',\n      text: ['Nested @tailwind rules were detected, but are not supported.', \"Consider using a prefix to scope Tailwind's classes: https://tailwindcss.com/docs/configuration#prefix\", 'Alternatively, use the important selector strategy: https://tailwindcss.com/docs/configuration#selector-strategy'].join('\\n')\n    }]);\n  });\n});","file":"detect-nesting.test.js","skipped":false,"dir":"tests"},{"name":"should not warn when nesting a single rule inside a media query","suites":[],"updatePoint":{"line":67,"column":67,"index":2134},"line":67,"code":"it('should not warn when nesting a single rule inside a media query', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"nested\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @media (min-width: 768px) {\n      .nested {\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.messages).toHaveLength(0);\n    expect(result.messages).toEqual([]);\n  });\n});","file":"detect-nesting.test.js","skipped":false,"dir":"tests"},{"name":"should only warn for the first detected nesting ","suites":[],"updatePoint":{"line":86,"column":52,"index":2539},"line":86,"code":"it('should only warn for the first detected nesting ', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"nested other\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n\n    .nested {\n      .example {\n      }\n\n      .other {\n      }\n    }\n\n    .other {\n      .example {\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.messages).toHaveLength(1);\n  });\n});","file":"detect-nesting.test.js","skipped":false,"dir":"tests"},{"name":"invalid characters are escaped","suites":[],"updatePoint":{"line":2,"column":36,"index":96},"line":2,"code":"test('invalid characters are escaped', () => {\n  expect(escapeClassName('w:_$-1/2')).toEqual('w\\\\:_\\\\$-1\\\\/2');\n});","file":"escapeClassName.test.js","skipped":false,"dir":"tests"},{"name":"it looks up values in the theme using dot notation","suites":[],"updatePoint":{"line":16,"column":56,"index":439},"line":16,"code":"test('it looks up values in the theme using dot notation', () => {\n  let input = css`\n    .banana {\n      color: theme('colors.yellow');\n    }\n  `;\n  let output = css`\n    .banana {\n      color: #f7cc50;\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"it looks up values in the theme using bracket notation","suites":[],"updatePoint":{"line":38,"column":60,"index":867},"line":38,"code":"test('it looks up values in the theme using bracket notation', () => {\n  let input = css`\n    .banana {\n      color: theme('colors[yellow]');\n    }\n  `;\n  let output = css`\n    .banana {\n      color: #f7cc50;\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"it looks up values in the theme using consecutive bracket notation","suites":[],"updatePoint":{"line":60,"column":72,"index":1308},"line":60,"code":"test('it looks up values in the theme using consecutive bracket notation', () => {\n  let input = css`\n    .banana {\n      color: theme('colors[yellow][100]');\n    }\n  `;\n  let output = css`\n    .banana {\n      color: #f7cc50;\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        yellow: {\n          100: '#f7cc50'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"it looks up values in the theme using bracket notation that have dots in them","suites":[],"updatePoint":{"line":84,"column":83,"index":1792},"line":84,"code":"test('it looks up values in the theme using bracket notation that have dots in them', () => {\n  let input = css`\n    .banana {\n      padding-top: theme('spacing[1.5]');\n    }\n  `;\n  let output = css`\n    .banana {\n      padding-top: 0.375rem;\n    }\n  `;\n  return run(input, {\n    theme: {\n      spacing: {\n        '1.5': '0.375rem'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"theme with mismatched brackets throws an error ","suites":[],"updatePoint":{"line":106,"column":53,"index":2226},"line":106,"code":"test('theme with mismatched brackets throws an error ', async () => {\n  let config = {\n    theme: {\n      spacing: {\n        '1.5': '0.375rem'\n      }\n    }\n  };\n  let input = path => css`\n    .banana {\n      padding-top: theme('${path}');\n    }\n  `;\n  await expect(run(input('spacing[1.5]]'), config)).rejects.toThrowError(`Path is invalid. Has unbalanced brackets: spacing[1.5]]`);\n  await expect(run(input('spacing[[1.5]'), config)).rejects.toThrowError(`Path is invalid. Has unbalanced brackets: spacing[[1.5]`);\n  await expect(run(input('spacing[a['), config)).rejects.toThrowError(`Path is invalid. Has unbalanced brackets: spacing[a[`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"color can be a function","suites":[],"updatePoint":{"line":123,"column":29,"index":2850},"line":123,"code":"test('color can be a function', () => {\n  let input = css`\n    .backgroundColor {\n      color: theme('backgroundColor.fn');\n    }\n    .borderColor {\n      color: theme('borderColor.fn');\n    }\n    .caretColor {\n      color: theme('caretColor.fn');\n    }\n    .colors {\n      color: theme('colors.fn');\n    }\n    .divideColor {\n      color: theme('divideColor.fn');\n    }\n    .fill {\n      color: theme('fill.fn');\n    }\n    .gradientColorStops {\n      color: theme('gradientColorStops.fn');\n    }\n    .placeholderColor {\n      color: theme('placeholderColor.fn');\n    }\n    .ringColor {\n      color: theme('ringColor.fn');\n    }\n    .ringOffsetColor {\n      color: theme('ringOffsetColor.fn');\n    }\n    .stroke {\n      color: theme('stroke.fn');\n    }\n    .textColor {\n      color: theme('textColor.fn');\n    }\n  `;\n  let output = css`\n    .backgroundColor {\n      color: #f00;\n    }\n    .borderColor {\n      color: #f00;\n    }\n    .caretColor {\n      color: #f00;\n    }\n    .colors {\n      color: #f00;\n    }\n    .divideColor {\n      color: #f00;\n    }\n    .fill {\n      color: #f00;\n    }\n    .gradientColorStops {\n      color: #f00;\n    }\n    .placeholderColor {\n      color: #f00;\n    }\n    .ringColor {\n      color: #f00;\n    }\n    .ringOffsetColor {\n      color: #f00;\n    }\n    .stroke {\n      color: #f00;\n    }\n    .textColor {\n      color: #f00;\n    }\n  `;\n  let fn = () => `#f00`;\n  return run(input, {\n    theme: {\n      backgroundColor: {\n        fn\n      },\n      borderColor: {\n        fn\n      },\n      caretColor: {\n        fn\n      },\n      colors: {\n        fn\n      },\n      divideColor: {\n        fn\n      },\n      fill: {\n        fn\n      },\n      gradientColorStops: {\n        fn\n      },\n      placeholderColor: {\n        fn\n      },\n      ringColor: {\n        fn\n      },\n      ringOffsetColor: {\n        fn\n      },\n      stroke: {\n        fn\n      },\n      textColor: {\n        fn\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"quotes are optional around the lookup path","suites":[],"updatePoint":{"line":245,"column":48,"index":4909},"line":245,"code":"test('quotes are optional around the lookup path', () => {\n  let input = css`\n    .banana {\n      color: theme(colors.yellow);\n    }\n  `;\n  let output = css`\n    .banana {\n      color: #f7cc50;\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a default value can be provided","suites":[],"updatePoint":{"line":267,"column":37,"index":5312},"line":267,"code":"test('a default value can be provided', () => {\n  let input = css`\n    .cookieMonster {\n      color: theme('colors.blue', #0000ff);\n    }\n  `;\n  let output = css`\n    .cookieMonster {\n      color: #0000ff;\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"the default value can use the theme function","suites":[],"updatePoint":{"line":289,"column":50,"index":5751},"line":289,"code":"test('the default value can use the theme function', () => {\n  let input = css`\n    .cookieMonster {\n      color: theme('colors.blue', theme('colors.yellow'));\n    }\n  `;\n  let output = css`\n    .cookieMonster {\n      color: #f7cc50;\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"quotes are preserved around default values","suites":[],"updatePoint":{"line":311,"column":48,"index":6203},"line":311,"code":"test('quotes are preserved around default values', () => {\n  let input = css`\n    .heading {\n      font-family: theme('fontFamily.sans', 'Helvetica Neue');\n    }\n  `;\n  let output = css`\n    .heading {\n      font-family: 'Helvetica Neue';\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        serif: 'Constantia'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"an unquoted list is valid as a default value","suites":[],"updatePoint":{"line":333,"column":50,"index":6670},"line":333,"code":"test('an unquoted list is valid as a default value', () => {\n  let input = css`\n    .heading {\n      font-family: theme('fontFamily.sans', Helvetica, Arial, sans-serif);\n    }\n  `;\n  let output = css`\n    .heading {\n      font-family: Helvetica, Arial, sans-serif;\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        serif: 'Constantia'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a missing root theme value throws","suites":[],"updatePoint":{"line":355,"column":39,"index":7150},"line":355,"code":"test('a missing root theme value throws', () => {\n  let input = css`\n    .heading {\n      color: theme('colours.gray.100');\n    }\n  `;\n  return expect(run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  })).rejects.toThrowError(`'colours.gray.100' does not exist in your theme config. Your theme has the following top-level keys: 'colors'`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a missing nested theme property throws","suites":[],"updatePoint":{"line":369,"column":44,"index":7533},"line":369,"code":"test('a missing nested theme property throws', () => {\n  let input = css`\n    .heading {\n      color: theme('colors.red');\n    }\n  `;\n  return expect(run(input, {\n    theme: {\n      colors: {\n        blue: 'blue',\n        yellow: '#f7cc50'\n      }\n    }\n  })).rejects.toThrowError(`'colors.red' does not exist in your theme config. 'colors' has the following valid keys: 'blue', 'yellow'`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a missing nested theme property with a close alternative throws with a suggestion","suites":[],"updatePoint":{"line":384,"column":87,"index":7971},"line":384,"code":"test('a missing nested theme property with a close alternative throws with a suggestion', () => {\n  let input = css`\n    .heading {\n      color: theme('colors.yellw');\n    }\n  `;\n  return expect(run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  })).rejects.toThrowError(`'colors.yellw' does not exist in your theme config. Did you mean 'colors.yellow'?`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a path through a non-object throws","suites":[],"updatePoint":{"line":398,"column":40,"index":8318},"line":398,"code":"test('a path through a non-object throws', () => {\n  let input = css`\n    .heading {\n      color: theme('colors.yellow.100');\n    }\n  `;\n  return expect(run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  })).rejects.toThrowError(`'colors.yellow.100' does not exist in your theme config. 'colors.yellow' is not an object.`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a path which exists but is not a string throws","suites":[],"updatePoint":{"line":412,"column":52,"index":8691},"line":412,"code":"test('a path which exists but is not a string throws', () => {\n  let input = css`\n    .heading {\n      color: theme('colors.yellow');\n    }\n  `;\n  return expect(run(input, {\n    theme: {\n      colors: {\n        yellow: Symbol()\n      }\n    }\n  })).rejects.toThrowError(`'colors.yellow' was found but does not resolve to a string.`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a path which exists but is invalid throws","suites":[],"updatePoint":{"line":426,"column":47,"index":9023},"line":426,"code":"test('a path which exists but is invalid throws', () => {\n  let input = css`\n    .heading {\n      color: theme('colors');\n    }\n  `;\n  return expect(run(input, {\n    theme: {\n      colors: {}\n    }\n  })).rejects.toThrowError(`'colors' was found but does not resolve to a string.`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"a path which is an object throws with a suggested key","suites":[],"updatePoint":{"line":438,"column":59,"index":9321},"line":438,"code":"test('a path which is an object throws with a suggested key', () => {\n  let input = css`\n    .heading {\n      color: theme('colors');\n    }\n  `;\n  return expect(run(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  })).rejects.toThrowError(`'colors' was found but does not resolve to a string. Did you mean something like 'colors.yellow'?`);\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"array values are joined by default","suites":[],"updatePoint":{"line":452,"column":40,"index":9678},"line":452,"code":"test('array values are joined by default', () => {\n  let input = css`\n    .heading {\n      font-family: theme('fontFamily.sans');\n    }\n  `;\n  let output = css`\n    .heading {\n      font-family: Inter, Helvetica, sans-serif;\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        sans: ['Inter', 'Helvetica', 'sans-serif']\n      }\n    }\n  }).then(result => {\n    expect(result.css).toEqual(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"font sizes are retrieved without default line-heights or letter-spacing","suites":[],"updatePoint":{"line":474,"column":77,"index":10189},"line":474,"code":"test('font sizes are retrieved without default line-heights or letter-spacing', () => {\n  let input = css`\n    .heading-1 {\n      font-size: theme('fontSize.lg');\n    }\n    .heading-2 {\n      font-size: theme('fontSize.xl');\n    }\n  `;\n  let output = css`\n    .heading-1 {\n      font-size: 20px;\n    }\n    .heading-2 {\n      font-size: 24px;\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontSize: {\n        lg: ['20px', '28px'],\n        xl: ['24px', {\n          lineHeight: '32px',\n          letterSpacing: '-0.01em'\n        }]\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"outlines are retrieved without default outline-offset","suites":[],"updatePoint":{"line":506,"column":59,"index":10850},"line":506,"code":"test('outlines are retrieved without default outline-offset', () => {\n  let input = css`\n    .element {\n      outline: theme('outline.black');\n    }\n  `;\n  return run(input, {\n    theme: {\n      outline: {\n        black: ['2px dotted black', '4px']\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .element {\n        outline: 2px dotted black;\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"font-family values are retrieved without font-variation-settings","suites":[],"updatePoint":{"line":527,"column":70,"index":11318},"line":527,"code":"test('font-family values are retrieved without font-variation-settings', () => {\n  let input = css`\n    .heading-1 {\n      font-family: theme('fontFamily.sans');\n    }\n    .heading-2 {\n      font-family: theme('fontFamily.serif');\n    }\n    .heading-3 {\n      font-family: theme('fontFamily.mono');\n    }\n  `;\n  let output = css`\n    .heading-1 {\n      font-family: Inter;\n    }\n    .heading-2 {\n      font-family: Times, serif;\n    }\n    .heading-3 {\n      font-family: Menlo, monospace;\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        sans: ['Inter', {\n          fontVariationSettings: '\"opsz\" 32'\n        }],\n        serif: [['Times', 'serif'], {\n          fontVariationSettings: '\"opsz\" 32'\n        }],\n        mono: ['Menlo, monospace', {\n          fontVariationSettings: '\"opsz\" 32'\n        }]\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"font-variation-settings values can be retrieved","suites":[],"updatePoint":{"line":569,"column":53,"index":12271},"line":569,"code":"test('font-variation-settings values can be retrieved', () => {\n  let input = css`\n    .heading {\n      font-family: theme('fontFamily.sans');\n      font-variation-settings: theme('fontFamily.sans[1].fontVariationSettings');\n    }\n  `;\n  let output = css`\n    .heading {\n      font-family: Inter;\n      font-variation-settings: 'opsz' 32;\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        sans: ['Inter', {\n          fontVariationSettings: \"'opsz' 32\"\n        }]\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"font-family values are joined when an array","suites":[],"updatePoint":{"line":595,"column":49,"index":12898},"line":595,"code":"test('font-family values are joined when an array', () => {\n  let input = css`\n    .element {\n      font-family: theme('fontFamily.sans');\n    }\n  `;\n  let output = css`\n    .element {\n      font-family: Helvetica, Arial, sans-serif;\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        sans: ['Helvetica', 'Arial', 'sans-serif']\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"font-family values are retrieved without font-feature-settings","suites":[],"updatePoint":{"line":617,"column":68,"index":13412},"line":617,"code":"test('font-family values are retrieved without font-feature-settings', () => {\n  let input = css`\n    .heading-1 {\n      font-family: theme('fontFamily.sans');\n    }\n    .heading-2 {\n      font-family: theme('fontFamily.serif');\n    }\n    .heading-3 {\n      font-family: theme('fontFamily.mono');\n    }\n  `;\n  let output = css`\n    .heading-1 {\n      font-family: Inter;\n    }\n    .heading-2 {\n      font-family: Times, serif;\n    }\n    .heading-3 {\n      font-family: Menlo, monospace;\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        sans: ['Inter', {\n          fontFeatureSettings: '\"cv11\"'\n        }],\n        serif: [['Times', 'serif'], {\n          fontFeatureSettings: '\"cv11\"'\n        }],\n        mono: ['Menlo, monospace', {\n          fontFeatureSettings: '\"cv11\"'\n        }]\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"font-feature-settings values can be retrieved","suites":[],"updatePoint":{"line":659,"column":51,"index":14348},"line":659,"code":"test('font-feature-settings values can be retrieved', () => {\n  let input = css`\n    .heading {\n      font-family: theme('fontFamily.sans');\n      font-feature-settings: theme('fontFamily.sans[1].fontFeatureSettings');\n    }\n  `;\n  return run(input, {\n    theme: {\n      fontFamily: {\n        sans: ['Inter', {\n          fontFeatureSettings: \"'cv11'\"\n        }]\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .heading {\n        font-family: Inter;\n        font-feature-settings: 'cv11';\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"box-shadow values are joined when an array","suites":[],"updatePoint":{"line":684,"column":48,"index":14947},"line":684,"code":"test('box-shadow values are joined when an array', () => {\n  let input = css`\n    .element {\n      box-shadow: theme('boxShadow.wtf');\n    }\n  `;\n  return run(input, {\n    theme: {\n      boxShadow: {\n        wtf: ['0 0 2px black', '1px 2px 3px white']\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .element {\n        box-shadow: 0 0 2px black, 1px 2px 3px white;\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"transition-property values are joined when an array","suites":[],"updatePoint":{"line":705,"column":57,"index":15435},"line":705,"code":"test('transition-property values are joined when an array', () => {\n  let input = css`\n    .element {\n      transition-property: theme('transitionProperty.colors');\n    }\n  `;\n  let output = css`\n    .element {\n      transition-property: color, fill;\n    }\n  `;\n  return run(input, {\n    theme: {\n      transitionProperty: {\n        colors: ['color', 'fill']\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"transition-duration values are joined when an array","suites":[],"updatePoint":{"line":727,"column":57,"index":15938},"line":727,"code":"test('transition-duration values are joined when an array', () => {\n  let input = css`\n    .element {\n      transition-duration: theme('transitionDuration.lol');\n    }\n  `;\n  let output = css`\n    .element {\n      transition-duration: 1s, 2s;\n    }\n  `;\n  return run(input, {\n    theme: {\n      transitionDuration: {\n        lol: ['1s', '2s']\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"basic screen function calls are expanded","suites":[],"updatePoint":{"line":749,"column":46,"index":16414},"line":749,"code":"test('basic screen function calls are expanded', () => {\n  let input = css`\n    @media screen(sm) {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  return run(input, {\n    theme: {\n      screens: {\n        sm: '600px'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 600px) {\n        .foo {\n          color: red;\n        }\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"screen function supports max-width screens","suites":[],"updatePoint":{"line":774,"column":48,"index":16877},"line":774,"code":"test('screen function supports max-width screens', () => {\n  let input = css`\n    @media screen(sm) {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  let output = css`\n    @media (max-width: 600px) {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  return run(input, {\n    theme: {\n      screens: {\n        sm: {\n          max: '600px'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"screen function supports min-width screens","suites":[],"updatePoint":{"line":802,"column":48,"index":17378},"line":802,"code":"test('screen function supports min-width screens', () => {\n  let input = css`\n    @media screen(sm) {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  return run(input, {\n    theme: {\n      screens: {\n        sm: {\n          min: '600px'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 600px) {\n        .foo {\n          color: red;\n        }\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"screen function supports min-width and max-width screens","suites":[],"updatePoint":{"line":829,"column":62,"index":17882},"line":829,"code":"test('screen function supports min-width and max-width screens', () => {\n  let input = css`\n    @media screen(sm) {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  return run(input, {\n    theme: {\n      screens: {\n        sm: {\n          min: '600px',\n          max: '700px'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 600px) and (max-width: 700px) {\n        .foo {\n          color: red;\n        }\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"screen function supports raw screens","suites":[],"updatePoint":{"line":857,"column":42,"index":18413},"line":857,"code":"test('screen function supports raw screens', () => {\n  let input = css`\n    @media screen(mono) {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  let output = css`\n    @media monochrome {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  return run(input, {\n    theme: {\n      screens: {\n        mono: {\n          raw: 'monochrome'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"screen arguments can be quoted","suites":[],"updatePoint":{"line":885,"column":36,"index":18903},"line":885,"code":"test('screen arguments can be quoted', () => {\n  let input = css`\n    @media screen('sm') {\n      .foo {\n        color: red;\n      }\n    }\n  `;\n  return run(input, {\n    theme: {\n      screens: {\n        sm: '600px'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 600px) {\n        .foo {\n          color: red;\n        }\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (1)","suites":[],"updatePoint":{"line":910,"column":60,"index":19380},"line":910,"code":"test('Theme function can extract alpha values for colors (1)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / 50%);\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: '#3b82f6'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        color: rgb(59 130 246 / 50%);\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (2)","suites":[],"updatePoint":{"line":933,"column":60,"index":19844},"line":933,"code":"test('Theme function can extract alpha values for colors (2)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / 0.5);\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: '#3b82f6'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        color: rgb(59 130 246 / 0.5);\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (3)","suites":[],"updatePoint":{"line":956,"column":60,"index":20308},"line":956,"code":"test('Theme function can extract alpha values for colors (3)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / var(--my-alpha));\n    }\n  `;\n  let output = css`\n    .foo {\n      color: rgb(59 130 246 / var(--my-alpha));\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: '#3b82f6'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (4)","suites":[],"updatePoint":{"line":980,"column":60,"index":20811},"line":980,"code":"test('Theme function can extract alpha values for colors (4)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / 50%);\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: 'hsl(217, 91%, 60%)'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        color: hsl(217 91% 60% / 50%);\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (5)","suites":[],"updatePoint":{"line":1003,"column":60,"index":21287},"line":1003,"code":"test('Theme function can extract alpha values for colors (5)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / 0.5);\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: 'hsl(217, 91%, 60%)'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        color: hsl(217 91% 60% / 0.5);\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (6)","suites":[],"updatePoint":{"line":1026,"column":60,"index":21763},"line":1026,"code":"test('Theme function can extract alpha values for colors (6)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / var(--my-alpha));\n    }\n  `;\n  let output = css`\n    .foo {\n      color: hsl(217 91% 60% / var(--my-alpha));\n    }\n  `;\n  return run(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: 'hsl(217, 91%, 60%)'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (7)","suites":[],"updatePoint":{"line":1050,"column":60,"index":22278},"line":1050,"code":"test('Theme function can extract alpha values for colors (7)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / var(--my-alpha));\n    }\n  `;\n  let output = css`\n    .foo {\n      color: rgb(var(--foo) / var(--my-alpha));\n    }\n  `;\n  return runFull(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: 'rgb(var(--foo) / <alpha-value>)'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme function can extract alpha values for colors (8)","suites":[],"updatePoint":{"line":1074,"column":60,"index":22809},"line":1074,"code":"test('Theme function can extract alpha values for colors (8)', () => {\n  let input = css`\n    .foo {\n      color: theme(colors.blue.500 / theme(opacity.myalpha));\n    }\n  `;\n  let output = css`\n    .foo {\n      color: rgb(var(--foo) / 50%);\n    }\n  `;\n  return runFull(input, {\n    theme: {\n      colors: {\n        blue: {\n          500: 'rgb(var(--foo) / <alpha-value>)'\n        }\n      },\n      opacity: {\n        myalpha: '50%'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme functions replace the alpha value placeholder even with no alpha provided","suites":[],"updatePoint":{"line":1101,"column":85,"index":23409},"line":1101,"code":"test('Theme functions replace the alpha value placeholder even with no alpha provided', () => {\n  let input = css`\n    .foo {\n      background: theme(colors.blue.400);\n      color: theme(colors.blue.500);\n    }\n  `;\n  let output = css`\n    .foo {\n      color: rgb(var(--foo) / 1);\n      background: #00f;\n    }\n  `;\n  return runFull(input, {\n    theme: {\n      colors: {\n        blue: {\n          400: 'rgb(0 0 255 / <alpha-value>)',\n          500: 'rgb(var(--foo) / <alpha-value>)'\n        }\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme functions can reference values with slashes in brackets","suites":[],"updatePoint":{"line":1128,"column":67,"index":24028},"line":1128,"code":"test('Theme functions can reference values with slashes in brackets', () => {\n  let input = css`\n    .foo1 {\n      color: theme(colors[a/b]);\n    }\n    .foo2 {\n      color: theme(colors[a/b]/50%);\n    }\n  `;\n  let output = css`\n    .foo1 {\n      color: #000;\n    }\n    .foo2 {\n      color: #00000080;\n    }\n  `;\n  return runFull(input, {\n    theme: {\n      colors: {\n        'a/b': '#000000'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme functions with alpha value inside quotes","suites":[],"updatePoint":{"line":1156,"column":52,"index":24549},"line":1156,"code":"test('Theme functions with alpha value inside quotes', () => {\n  let input = css`\n    .foo {\n      color: theme('colors.yellow / 50%');\n    }\n  `;\n  let output = css`\n    .foo {\n      color: #f7cc5080;\n    }\n  `;\n  return runFull(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"Theme functions with alpha with quotes value around color only","suites":[],"updatePoint":{"line":1178,"column":68,"index":25003},"line":1178,"code":"test('Theme functions with alpha with quotes value around color only', () => {\n  let input = css`\n    .foo {\n      color: theme('colors.yellow' / 50%);\n    }\n  `;\n  let output = css`\n    .foo {\n      color: #f7cc5080;\n    }\n  `;\n  return runFull(input, {\n    theme: {\n      colors: {\n        yellow: '#f7cc50'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"can find values with slashes in the theme key while still allowing for alpha values ","suites":[],"updatePoint":{"line":1200,"column":88,"index":25477},"line":1200,"code":"it('can find values with slashes in the theme key while still allowing for alpha values ', () => {\n  let input = css`\n    .foo00 {\n      color: theme(colors.foo-5);\n    }\n    .foo01 {\n      color: theme(colors.foo-5/10);\n    }\n    .foo02 {\n      color: theme(colors.foo-5/10/25);\n    }\n    .foo03 {\n      color: theme(colors.foo-5 / 10);\n    }\n    .foo04 {\n      color: theme(colors.foo-5/10 / 25);\n    }\n  `;\n  return runFull(input, {\n    theme: {\n      colors: {\n        'foo-5': '#050000',\n        'foo-5/10': '#051000',\n        'foo-5/10/25': '#051025'\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo00 {\n        color: #050000;\n      }\n      .foo01 {\n        color: #051000;\n      }\n      .foo02 {\n        color: #051025;\n      }\n      .foo03 {\n        color: #050000;\n      }\n      .foo04 {\n        color: #051000;\n      }\n    `);\n  });\n});","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"should not generate when theme fn doesnt resolve","suites":["context dependent"],"updatePoint":{"line":1259,"column":56,"index":26850},"line":1259,"code":"  test('should not generate when theme fn doesnt resolve', async () => {\n    await fs.promises.writeFile(filePath, html`\n        <div class=\"underline [--box-shadow:theme('boxShadow.doesnotexist')]\"></div>\n        <div class=\"bg-[theme('boxShadow.doesnotexist')]\"></div>\n      `);\n\n    // TODO: We need a way to reuse the context in our test suite without requiring writing to files\n    // It should be an explicit thing tho — like we create a context and pass it in or something\n    let result = await runFull('@tailwind utilities', configPath);\n\n    // 1. On first run it should work because it's been removed from the class cache\n    expect(result.css).toMatchFormattedCss(css`\n      .underline {\n        text-decoration-line: underline;\n      }\n    `);\n\n    // 2. But we get a warning in the console\n    expect().toHaveBeenWarnedWith(['invalid-theme-key-in-class']);\n\n    // 3. The second run should work fine because it's been removed from the class cache\n    result = await runFull('@tailwind utilities', configPath);\n    expect(result.css).toMatchFormattedCss(css`\n      .underline {\n        text-decoration-line: underline;\n      }\n    `);\n\n    // 4. But we've not received any further logs about it\n    expect().toHaveBeenWarnedWith(['invalid-theme-key-in-class']);\n  });","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"it works mayhaps","suites":["context dependent"],"updatePoint":{"line":1290,"column":24,"index":28099},"line":1290,"code":"  test('it works mayhaps', async () => {\n    let input = css`\n      .test {\n        /* prettier-ignore */\n        inset: calc(-1 * (2*theme(\"spacing.4\")));\n        /* prettier-ignore */\n        padding: calc(-1 * (2* theme(\"spacing.4\")));\n      }\n    `;\n    let output = css`\n      .test {\n        /* prettier-ignore */\n        inset: calc(-1 * (2*1rem));\n        /* prettier-ignore */\n        padding: calc(-1 * (2* 1rem));\n      }\n    `;\n    return run(input, {\n      theme: {\n        spacing: {\n          4: '1rem'\n        }\n      }\n    }).then(result => {\n      expect(result.css).toMatchFormattedCss(output);\n      expect(result.warnings().length).toBe(0);\n    });\n  });","file":"evaluateTailwindFunctions.test.js","skipped":false,"dir":"tests"},{"name":"experimental universal selector improvements (box-shadow)","suites":[],"updatePoint":{"line":2,"column":63,"index":109},"line":2,"code":"test('experimental universal selector improvements (box-shadow)', () => {\n  let config = {\n    experimental: 'all',\n    content: [{\n      raw: html`<div class=\"resize shadow\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .shadow {\n        --tw-ring-offset-shadow: 0 0 #0000;\n        --tw-ring-shadow: 0 0 #0000;\n        --tw-shadow: 0 0 #0000;\n        --tw-shadow-colored: 0 0 #0000;\n      }\n      .resize {\n        resize: both;\n      }\n      .shadow {\n        --tw-shadow: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;\n        --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\n          0 1px 2px -1px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n    `);\n  });\n});","file":"experimental.test.js","skipped":false,"dir":"tests"},{"name":"experimental universal selector improvements (pseudo hover)","suites":[],"updatePoint":{"line":37,"column":65,"index":1089},"line":37,"code":"test('experimental universal selector improvements (pseudo hover)', () => {\n  let config = {\n    experimental: 'all',\n    content: [{\n      raw: html`<div class=\"resize hover:shadow\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .hover\\:shadow {\n        --tw-ring-offset-shadow: 0 0 #0000;\n        --tw-ring-shadow: 0 0 #0000;\n        --tw-shadow: 0 0 #0000;\n        --tw-shadow-colored: 0 0 #0000;\n      }\n      .resize {\n        resize: both;\n      }\n      .hover\\:shadow:hover {\n        --tw-shadow: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;\n        --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\n          0 1px 2px -1px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n    `);\n  });\n});","file":"experimental.test.js","skipped":false,"dir":"tests"},{"name":"experimental universal selector improvements (multiple classes: group)","suites":[],"updatePoint":{"line":72,"column":76,"index":2106},"line":72,"code":"test('experimental universal selector improvements (multiple classes: group)', () => {\n  let config = {\n    experimental: 'all',\n    content: [{\n      raw: html`<div class=\"resize group-hover:shadow\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .group-hover\\:shadow {\n        --tw-ring-offset-shadow: 0 0 #0000;\n        --tw-ring-shadow: 0 0 #0000;\n        --tw-shadow: 0 0 #0000;\n        --tw-shadow-colored: 0 0 #0000;\n      }\n      .resize {\n        resize: both;\n      }\n      .group:hover .group-hover\\:shadow {\n        --tw-shadow: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;\n        --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\n          0 1px 2px -1px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n    `);\n  });\n});","file":"experimental.test.js","skipped":false,"dir":"tests"},{"name":"experimental universal selector improvements (child selectors: divide-y)","suites":[],"updatePoint":{"line":107,"column":78,"index":3150},"line":107,"code":"test('experimental universal selector improvements (child selectors: divide-y)', () => {\n  let config = {\n    experimental: 'all',\n    content: [{\n      raw: html`<div class=\"resize divide-y\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .resize {\n        resize: both;\n      }\n      .divide-y > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-y-reverse: 0;\n        border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n        border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n      }\n    `);\n  });\n});","file":"experimental.test.js","skipped":false,"dir":"tests"},{"name":"experimental universal selector improvements (hover:divide-y)","suites":[],"updatePoint":{"line":134,"column":67,"index":3865},"line":134,"code":"test('experimental universal selector improvements (hover:divide-y)', () => {\n  let config = {\n    experimental: 'all',\n    content: [{\n      raw: html`<div class=\"resize hover:divide-y\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .resize {\n        resize: both;\n      }\n      .hover\\:divide-y:hover > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-y-reverse: 0;\n        border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n        border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n      }\n    `);\n  });\n});","file":"experimental.test.js","skipped":false,"dir":"tests"},{"name":"experimental universal selector improvements (#app important)","suites":[],"updatePoint":{"line":161,"column":67,"index":4599},"line":161,"code":"test('experimental universal selector improvements (#app important)', () => {\n  let config = {\n    experimental: 'all',\n    important: '#app',\n    content: [{\n      raw: html`<div class=\"resize divide-y shadow\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .shadow {\n        --tw-ring-offset-shadow: 0 0 #0000;\n        --tw-ring-shadow: 0 0 #0000;\n        --tw-shadow: 0 0 #0000;\n        --tw-shadow-colored: 0 0 #0000;\n      }\n      #app .resize {\n        resize: both;\n      }\n      #app :is(.divide-y > :not([hidden]) ~ :not([hidden])) {\n        --tw-divide-y-reverse: 0;\n        border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n        border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n      }\n      #app .shadow {\n        --tw-shadow: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;\n        --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\n          0 1px 2px -1px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n    `);\n  });\n});","file":"experimental.test.js","skipped":false,"dir":"tests"},{"name":"PHP arrays","suites":[],"updatePoint":{"line":2,"column":16,"index":62},"line":2,"code":"test('PHP arrays', async () => {\n  let config = {\n    content: [{\n      raw: html`<h1 class=\"<?php echo wrap(['class' => \"max-w-[16rem]\"]); ?>\">Hello world</h1>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .max-w-\\[16rem\\] {\n        max-width: 16rem;\n      }\n    `);\n  });\n});","file":"extractor-edge-cases.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with quotes","suites":[],"updatePoint":{"line":16,"column":34,"index":440},"line":16,"code":"test('arbitrary values with quotes', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"content-['hello]']\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .content-\\[\\'hello\\]\\'\\] {\n        --tw-content: 'hello]';\n        content: var(--tw-content);\n      }\n    `);\n  });\n});","file":"extractor-edge-cases.test.js","skipped":false,"dir":"tests"},{"name":"it flattens nested color objects","suites":[],"updatePoint":{"line":2,"column":38,"index":106},"line":2,"code":"test('it flattens nested color objects', () => {\n  expect(flattenColorPalette({\n    purple: 'purple',\n    white: {\n      25: 'rgba(255,255,255,.25)',\n      50: 'rgba(255,255,255,.5)',\n      75: 'rgba(255,255,255,.75)',\n      DEFAULT: '#fff'\n    },\n    red: {\n      1: 'rgb(33,0,0)',\n      2: 'rgb(67,0,0)',\n      3: 'rgb(100,0,0)'\n    },\n    green: {\n      1: 'rgb(0,33,0)',\n      2: 'rgb(0,67,0)',\n      3: 'rgb(0,100,0)'\n    },\n    blue: {\n      1: 'rgb(0,0,33)',\n      2: 'rgb(0,0,67)',\n      3: 'rgb(0,0,100)'\n    }\n  })).toEqual({\n    purple: 'purple',\n    'white-25': 'rgba(255,255,255,.25)',\n    'white-50': 'rgba(255,255,255,.5)',\n    'white-75': 'rgba(255,255,255,.75)',\n    white: '#fff',\n    'red-1': 'rgb(33,0,0)',\n    'red-2': 'rgb(67,0,0)',\n    'red-3': 'rgb(100,0,0)',\n    'green-1': 'rgb(0,33,0)',\n    'green-2': 'rgb(0,67,0)',\n    'green-3': 'rgb(0,100,0)',\n    'blue-1': 'rgb(0,0,33)',\n    'blue-2': 'rgb(0,0,67)',\n    'blue-3': 'rgb(0,0,100)'\n  });\n});","file":"flattenColorPalette.test.js","skipped":false,"dir":"tests"},{"name":"it flattens deeply nested color objects","suites":[],"updatePoint":{"line":43,"column":45,"index":1085},"line":43,"code":"test('it flattens deeply nested color objects', () => {\n  expect(flattenColorPalette({\n    primary: 'purple',\n    secondary: {\n      DEFAULT: 'blue',\n      hover: 'cyan',\n      focus: 'red'\n    },\n    button: {\n      primary: {\n        DEFAULT: 'magenta',\n        hover: 'green',\n        focus: {\n          DEFAULT: 'yellow',\n          variant: 'orange'\n        }\n      }\n    }\n  })).toEqual({\n    primary: 'purple',\n    secondary: 'blue',\n    'secondary-hover': 'cyan',\n    'secondary-focus': 'red',\n    'button-primary': 'magenta',\n    'button-primary-hover': 'green',\n    'button-primary-focus': 'yellow',\n    'button-primary-focus-variant': 'orange'\n  });\n});","file":"flattenColorPalette.test.js","skipped":false,"dir":"tests"},{"name":"it handles empty objects","suites":[],"updatePoint":{"line":72,"column":30,"index":1734},"line":72,"code":"test('it handles empty objects', () => {\n  expect(flattenColorPalette({})).toEqual({});\n});","file":"flattenColorPalette.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add a simple variant to a simple selector","suites":[],"updatePoint":{"line":2,"column":67,"index":138},"line":2,"code":"it('should be possible to add a simple variant to a simple selector', () => {\n  let selector = '.text-center';\n  let candidate = 'hover:text-center';\n  let formats = [{\n    format: '&:hover',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.hover\\\\:text-center:hover');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add a multiple simple variants to a simple selector","suites":[],"updatePoint":{"line":13,"column":77,"index":486},"line":13,"code":"it('should be possible to add a multiple simple variants to a simple selector', () => {\n  let selector = '.text-center';\n  let candidate = 'focus:hover:text-center';\n  let formats = [{\n    format: '&:hover',\n    isArbitraryVariant: false\n  }, {\n    format: '&:focus',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.focus\\\\:hover\\\\:text-center:hover:focus');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add a simple variant to a selector containing escaped parts","suites":[],"updatePoint":{"line":27,"column":85,"index":922},"line":27,"code":"it('should be possible to add a simple variant to a selector containing escaped parts', () => {\n  let selector = '.bg-\\\\[rgba\\\\(0\\\\,0\\\\,0\\\\)\\\\]';\n  let candidate = 'hover:bg-[rgba(0,0,0)]';\n  let formats = [{\n    format: '&:hover',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.hover\\\\:bg-\\\\[rgba\\\\(0\\\\2c 0\\\\2c 0\\\\)\\\\]:hover');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add a simple variant to a selector containing escaped parts (escape is slightly different)","suites":[],"updatePoint":{"line":38,"column":116,"index":1352},"line":38,"code":"it('should be possible to add a simple variant to a selector containing escaped parts (escape is slightly different)', () => {\n  let selector = '.bg-\\\\[rgba\\\\(0\\\\2c 0\\\\2c 0\\\\)\\\\]';\n  let candidate = 'hover:bg-[rgba(0,0,0)]';\n  let formats = [{\n    format: '&:hover',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.hover\\\\:bg-\\\\[rgba\\\\(0\\\\2c 0\\\\2c 0\\\\)\\\\]:hover');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add a simple variant to a more complex selector","suites":[],"updatePoint":{"line":49,"column":73,"index":1743},"line":49,"code":"it('should be possible to add a simple variant to a more complex selector', () => {\n  let selector = '.space-x-4 > :not([hidden]) ~ :not([hidden])';\n  let candidate = 'hover:space-x-4';\n  let formats = [{\n    format: '&:hover',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.hover\\\\:space-x-4:hover > :not([hidden]) ~ :not([hidden])');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add multiple simple variants to a more complex selector","suites":[],"updatePoint":{"line":60,"column":81,"index":2157},"line":60,"code":"it('should be possible to add multiple simple variants to a more complex selector', () => {\n  let selector = '.space-x-4 > :not([hidden]) ~ :not([hidden])';\n  let candidate = 'disabled:focus:hover:space-x-4';\n  let formats = [{\n    format: '&:hover',\n    isArbitraryVariant: false\n  }, {\n    format: '&:focus',\n    isArbitraryVariant: false\n  }, {\n    format: '&:disabled',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.disabled\\\\:focus\\\\:hover\\\\:space-x-4:hover:focus:disabled > :not([hidden]) ~ :not([hidden])');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add a single merge variant to a simple selector","suites":[],"updatePoint":{"line":77,"column":73,"index":2735},"line":77,"code":"it('should be possible to add a single merge variant to a simple selector', () => {\n  let selector = '.text-center';\n  let candidate = 'group-hover:text-center';\n  let formats = [{\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.group:hover .group-hover\\\\:text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add multiple merge variants to a simple selector","suites":[],"updatePoint":{"line":88,"column":74,"index":3114},"line":88,"code":"it('should be possible to add multiple merge variants to a simple selector', () => {\n  let selector = '.text-center';\n  let candidate = 'group-focus:group-hover:text-center';\n  let formats = [{\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  }, {\n    format: ':merge(.group):focus &',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.group:focus:hover .group-focus\\\\:group-hover\\\\:text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add a single merge variant to a more complex selector","suites":[],"updatePoint":{"line":102,"column":79,"index":3605},"line":102,"code":"it('should be possible to add a single merge variant to a more complex selector', () => {\n  let selector = '.space-x-4 ~ :not([hidden]) ~ :not([hidden])';\n  let candidate = 'group-hover:space-x-4';\n  let formats = [{\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.group:hover .group-hover\\\\:space-x-4 ~ :not([hidden]) ~ :not([hidden])');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add multiple merge variants to a more complex selector","suites":[],"updatePoint":{"line":113,"column":80,"index":4052},"line":113,"code":"it('should be possible to add multiple merge variants to a more complex selector', () => {\n  let selector = '.space-x-4 ~ :not([hidden]) ~ :not([hidden])';\n  let candidate = 'group-focus:group-hover:space-x-4';\n  let formats = [{\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  }, {\n    format: ':merge(.group):focus &',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.group:focus:hover .group-focus\\\\:group-hover\\\\:space-x-4 ~ :not([hidden]) ~ :not([hidden])');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add multiple unique merge variants to a simple selector","suites":[],"updatePoint":{"line":127,"column":81,"index":4607},"line":127,"code":"it('should be possible to add multiple unique merge variants to a simple selector', () => {\n  let selector = '.text-center';\n  let candidate = 'peer-focus:group-hover:text-center';\n  let formats = [{\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  }, {\n    format: ':merge(.peer):focus ~ &'\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.peer:focus ~ .group:hover .peer-focus\\\\:group-hover\\\\:text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add multiple unique merge variants to a simple selector","suites":[],"updatePoint":{"line":140,"column":81,"index":5076},"line":140,"code":"it('should be possible to add multiple unique merge variants to a simple selector', () => {\n  let selector = '.text-center';\n  let candidate = 'group-hover:peer-focus:text-center';\n  let formats = [{\n    format: ':merge(.peer):focus ~ &',\n    isArbitraryVariant: false\n  }, {\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.group:hover .peer:focus ~ .group-hover\\\\:peer-focus\\\\:text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use multiple :merge() calls with different \"arguments\"","suites":[],"updatePoint":{"line":154,"column":80,"index":5575},"line":154,"code":"it('should be possible to use multiple :merge() calls with different \"arguments\"', () => {\n  let selector = '.foo';\n  let candidate = 'peer-focus:group-focus:peer-hover:group-hover:foo';\n  let formats = [{\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  }, {\n    format: ':merge(.peer):hover ~ &',\n    isArbitraryVariant: false\n  }, {\n    format: ':merge(.group):focus &',\n    isArbitraryVariant: false\n  }, {\n    format: ':merge(.peer):focus ~ &',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.peer:focus:hover ~ .group:focus:hover .peer-focus\\\\:group-focus\\\\:peer-hover\\\\:group-hover\\\\:foo');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"group hover and prose headings combination","suites":[],"updatePoint":{"line":174,"column":46,"index":6229},"line":174,"code":"it('group hover and prose headings combination', () => {\n  let selector = '.text-center';\n  let candidate = 'group-hover:prose-headings:text-center';\n  let formats = [{\n    format: ':where(&) :is(h1, h2, h3, h4)',\n    isArbitraryVariant: false\n  },\n  // Prose Headings\n  {\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  } // Group Hover\n  ];\n\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.group:hover :where(.group-hover\\\\:prose-headings\\\\:text-center) :is(h1, h2, h3, h4)');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"group hover and prose headings combination flipped","suites":[],"updatePoint":{"line":192,"column":54,"index":6771},"line":192,"code":"it('group hover and prose headings combination flipped', () => {\n  let selector = '.text-center';\n  let candidate = 'prose-headings:group-hover:text-center';\n  let formats = [{\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  },\n  // Group Hover\n  {\n    format: ':where(&) :is(h1, h2, h3, h4)',\n    isArbitraryVariant: false\n  } // Prose Headings\n  ];\n\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual(':where(.group:hover .prose-headings\\\\:group-hover\\\\:text-center) :is(h1, h2, h3, h4)');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to handle a complex utility","suites":[],"updatePoint":{"line":210,"column":50,"index":7309},"line":210,"code":"it('should be possible to handle a complex utility', () => {\n  let selector = '.space-x-4 > :not([hidden]) ~ :not([hidden])';\n  let candidate = 'peer-disabled:peer-first-child:group-hover:group-focus:focus:hover:space-x-4';\n  let formats = [{\n    format: '&:hover',\n    isArbitraryVariant: false\n  },\n  // Hover\n  {\n    format: '&:focus',\n    isArbitraryVariant: false\n  },\n  // Focus\n  {\n    format: ':merge(.group):focus &',\n    isArbitraryVariant: false\n  },\n  // Group focus\n  {\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: false\n  },\n  // Group hover\n  {\n    format: ':merge(.peer):first-child ~ &',\n    isArbitraryVariant: false\n  },\n  // Peer first-child\n  {\n    format: ':merge(.peer):disabled ~ &',\n    isArbitraryVariant: false\n  } // Peer disabled\n  ];\n\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.peer:disabled:first-child ~ .group:hover:focus .peer-disabled\\\\:peer-first-child\\\\:group-hover\\\\:group-focus\\\\:focus\\\\:hover\\\\:space-x-4:hover:focus > :not([hidden]) ~ :not([hidden])');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should match base utilities that are prefixed","suites":[],"updatePoint":{"line":248,"column":49,"index":8357},"line":248,"code":"it('should match base utilities that are prefixed', () => {\n  let context = {\n    tailwindConfig: {\n      prefix: 'tw-'\n    }\n  };\n  let selector = '.tw-text-center';\n  let candidate = 'tw-text-center';\n  let formats = [];\n  expect(finalizeSelector(selector, formats, {\n    candidate,\n    context\n  })).toEqual('.tw-text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should prefix classes from variants","suites":[],"updatePoint":{"line":262,"column":39,"index":8682},"line":262,"code":"it('should prefix classes from variants', () => {\n  let context = {\n    tailwindConfig: {\n      prefix: 'tw-'\n    }\n  };\n  let selector = '.tw-text-center';\n  let candidate = 'foo:tw-text-center';\n  let formats = [{\n    format: '.foo &',\n    isArbitraryVariant: false\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate,\n    context\n  })).toEqual('.tw-foo .foo\\\\:tw-text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should not prefix classes from arbitrary variants","suites":[],"updatePoint":{"line":279,"column":53,"index":9096},"line":279,"code":"it('should not prefix classes from arbitrary variants', () => {\n  let context = {\n    tailwindConfig: {\n      prefix: 'tw-'\n    }\n  };\n  let selector = '.tw-text-center';\n  let candidate = '[.foo_&]:tw-text-center';\n  let formats = [{\n    format: '.foo &',\n    isArbitraryVariant: true\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate,\n    context\n  })).toEqual('.foo .\\\\[\\\\.foo_\\\\&\\\\]\\\\:tw-text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"Merged selectors with mixed combinators uses the first one","suites":[],"updatePoint":{"line":296,"column":62,"index":9533},"line":296,"code":"it('Merged selectors with mixed combinators uses the first one', () => {\n  // This isn't explicitly specced behavior but it is how it works today\n\n  let selector = '.text-center';\n  let candidate = 'text-center';\n  let formats = [{\n    format: ':merge(.group):focus > &',\n    isArbitraryVariant: true\n  }, {\n    format: ':merge(.group):hover &',\n    isArbitraryVariant: true\n  }];\n  expect(finalizeSelector(selector, formats, {\n    candidate\n  })).toEqual('.group:hover:focus > .text-center');\n});","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"example a","suites":["real examples"],"updatePoint":{"line":313,"column":15,"index":10018},"line":313,"code":"  it('example a', () => {\n    let selector = '.placeholder-red-500::placeholder';\n    let candidate = 'hover:placeholder-red-500';\n    let formats = [{\n      format: '&:hover',\n      isArbitraryVariant: false\n    }];\n    expect(finalizeSelector(selector, formats, {\n      candidate\n    })).toEqual('.hover\\\\:placeholder-red-500:hover::placeholder');\n  });","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"example b","suites":["real examples"],"updatePoint":{"line":324,"column":15,"index":10374},"line":324,"code":"  it('example b', () => {\n    let selector = '.space-x-4 > :not([hidden]) ~ :not([hidden])';\n    let candidate = 'group-hover:hover:space-x-4';\n    let formats = [{\n      format: '&:hover',\n      isArbitraryVariant: false\n    }, {\n      format: ':merge(.group):hover &',\n      isArbitraryVariant: false\n    }];\n    expect(finalizeSelector(selector, formats, {\n      candidate\n    })).toEqual('.group:hover .group-hover\\\\:hover\\\\:space-x-4:hover > :not([hidden]) ~ :not([hidden])');\n  });","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should work for group-hover and class dark mode combinations","suites":["real examples"],"updatePoint":{"line":338,"column":66,"index":10913},"line":338,"code":"  it('should work for group-hover and class dark mode combinations', () => {\n    let selector = '.text-center';\n    let candidate = 'dark:group-hover:text-center';\n    let formats = [{\n      format: ':merge(.group):hover &',\n      isArbitraryVariant: false\n    }, {\n      format: '.dark &',\n      isArbitraryVariant: false\n    }];\n    expect(finalizeSelector(selector, formats, {\n      candidate\n    })).toEqual('.dark .group:hover .dark\\\\:group-hover\\\\:text-center');\n  });","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should work for group-hover and class dark mode combinations (reversed)","suites":["real examples"],"updatePoint":{"line":352,"column":77,"index":11399},"line":352,"code":"  it('should work for group-hover and class dark mode combinations (reversed)', () => {\n    let selector = '.text-center';\n    let candidate = 'group-hover:dark:text-center';\n    let formats = [{\n      format: '.dark &'\n    }, {\n      format: ':merge(.group):hover &',\n      isArbitraryVariant: false\n    }];\n    expect(finalizeSelector(selector, formats, {\n      candidate\n    })).toEqual('.group:hover .dark .group-hover\\\\:dark\\\\:text-center');\n  });","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use hover:prose-headings:text-center","suites":["real examples","prose-headings"],"updatePoint":{"line":366,"column":66,"index":11878},"line":366,"code":"    it('should be possible to use hover:prose-headings:text-center', () => {\n      let selector = '.text-center';\n      let candidate = 'hover:prose-headings:text-center';\n      let formats = [{\n        format: ':where(&) :is(h1, h2, h3, h4)'\n      }, {\n        format: '&:hover'\n      }];\n      expect(finalizeSelector(selector, formats, {\n        candidate\n      })).toEqual(':where(.hover\\\\:prose-headings\\\\:text-center) :is(h1, h2, h3, h4):hover');\n    });","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use prose-headings:hover:text-center","suites":["real examples","prose-headings"],"updatePoint":{"line":378,"column":66,"index":12339},"line":378,"code":"    it('should be possible to use prose-headings:hover:text-center', () => {\n      let selector = '.text-center';\n      let candidate = 'prose-headings:hover:text-center';\n      let formats = [{\n        format: '&:hover'\n      }, {\n        format: ':where(&) :is(h1, h2, h3, h4)'\n      }];\n      expect(finalizeSelector(selector, formats, {\n        candidate\n      })).toEqual(':where(.prose-headings\\\\:hover\\\\:text-center:hover) :is(h1, h2, h3, h4)');\n    });","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should translate \"$before\" into \"$after\"","suites":["pseudo elements"],"line":393,"code":"  it.each`\n    before                                                   | after\n    ${'&::before'}                                           | ${'&::before'}\n    ${'&::before:hover'}                                     | ${'&:hover::before'}\n    ${'&:before:hover'}                                      | ${'&:hover:before'}\n    ${'&::file-selector-button:hover'}                       | ${'&::file-selector-button:hover'}\n    ${'&:hover::file-selector-button'}                       | ${'&:hover::file-selector-button'}\n    ${'.parent:hover &'}                                     | ${'.parent:hover &'}\n    ${'.parent::before &'}                                   | ${'.parent &::before'}\n    ${'.parent::before &:hover'}                             | ${'.parent &:hover::before'}\n    ${':where(&::before) :is(h1, h2, h3, h4)'}               | ${':where(&) :is(h1, h2, h3, h4)::before'}\n    ${':where(&::file-selector-button) :is(h1, h2, h3, h4)'} | ${':where(&::file-selector-button) :is(h1, h2, h3, h4)'}\n    ${'#app :is(.dark &::before)'}                           | ${'#app :is(.dark &)::before'}\n    ${'#app :is(:is(.dark &)::before)'}                      | ${'#app :is(:is(.dark &))::before'}\n    ${'#app :is(.foo::file-selector-button)'}                | ${'#app :is(.foo)::file-selector-button'}\n    ${'#app :is(.foo::-webkit-progress-bar)'}                | ${'#app :is(.foo)::-webkit-progress-bar'}\n    ${'.parent::marker li'}                                  | ${'.parent li::marker'}\n    ${'.parent::selection li'}                               | ${'.parent li::selection'}\n    ${'.parent::placeholder input'}                          | ${'.parent input::placeholder'}\n    ${'.parent::backdrop dialog'}                            | ${'.parent dialog::backdrop'}\n  `('should translate \"$before\" into \"$after\"', ({\n    before,\n    after\n  }) => {\n    let result = finalizeSelector('.a', [{\n      format: before,\n      isArbitraryVariant: false\n    }], {\n      candidate: 'a'\n    });\n    expect(result).toEqual(after.replace('&', '.a'));\n  });","file":"format-variant-selector.test.js","skipped":false,"dir":"tests"},{"name":"should not generate rules that are incorrect","suites":[],"updatePoint":{"line":5,"column":48,"index":261},"line":5,"code":"it('should not generate rules that are incorrect', () => {\n  let config = {\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('@', value => `@container (min-width: ${value})`);\n    }]\n  };\n  let context = createContext(resolveConfig(config));\n  let rules = generateRules(new Set([\n  // Invalid, missing `-`\n  'group[:hover]:underline',\n  // Invalid, `-` should not be there\n  '@-[200px]:underline',\n  // Valid\n  'group-[:hover]:underline', '@[200px]:underline']), context);\n\n  // Ensure we only have 2 valid rules\n  expect(rules).toHaveLength(2);\n\n  // Ensure we have the correct values\n  expect(rules[0][1].toString()).toMatchFormattedCss(css`\n    .group:hover .group-\\[\\:hover\\]\\:underline {\n      text-decoration-line: underline;\n    }\n  `);\n  expect(rules[1][1].toString()).toMatchFormattedCss(css`\n    @container (min-width: 200px) {\n      .\\@\\[200px\\]\\:underline {\n        text-decoration-line: underline;\n      }\n    }\n  `);\n});","file":"generate-rules.test.js","skipped":false,"dir":"tests"},{"name":"should generate every possible class, without variants","suites":[],"updatePoint":{"line":4,"column":58,"index":229},"line":4,"code":"it('should generate every possible class, without variants', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList();\n  expect(classes).toBeInstanceOf(Array);\n\n  // Verify we have a `container` for the 'components' section.\n  expect(classes).toContain('container');\n\n  // Verify we handle the DEFAULT case correctly\n  expect(classes).toContain('border');\n\n  // Verify we handle negative values correctly\n  expect(classes).toContain('-inset-1/4');\n  expect(classes).toContain('-m-0');\n  expect(classes).not.toContain('-uppercase');\n  expect(classes).not.toContain('-opacity-50');\n  config = {\n    theme: {\n      extend: {\n        margin: {\n          DEFAULT: '5px'\n        }\n      }\n    }\n  };\n  context = createContext(resolveConfig(config));\n  classes = context.getClassList();\n  expect(classes).not.toContain('-m-DEFAULT');\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should generate every possible class while handling negatives and prefixes","suites":[],"updatePoint":{"line":34,"column":78,"index":1143},"line":34,"code":"it('should generate every possible class while handling negatives and prefixes', () => {\n  let config = {\n    prefix: 'tw-'\n  };\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList();\n  expect(classes).toBeInstanceOf(Array);\n\n  // Verify we have a `container` for the 'components' section.\n  expect(classes).toContain('tw-container');\n\n  // Verify we handle the DEFAULT case correctly\n  expect(classes).toContain('tw-border');\n\n  // Verify we handle negative values correctly\n  expect(classes).toContain('-tw-inset-1/4');\n  expect(classes).toContain('-tw-m-0');\n  expect(classes).not.toContain('-tw-uppercase');\n  expect(classes).not.toContain('-tw-opacity-50');\n\n  // These utilities do work but there's no reason to generate\n  // them alongside the `-{prefix}-{utility}` versions\n  expect(classes).not.toContain('tw--inset-1/4');\n  expect(classes).not.toContain('tw--m-0');\n  config = {\n    prefix: 'tw-',\n    theme: {\n      extend: {\n        margin: {\n          DEFAULT: '5px'\n        }\n      }\n    }\n  };\n  context = createContext(resolveConfig(config));\n  classes = context.getClassList();\n  expect(classes).not.toContain('-tw-m-DEFAULT');\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should not generate utilities with opacity by default","suites":[],"updatePoint":{"line":72,"column":57,"index":2310},"line":72,"code":"it('should not generate utilities with opacity by default', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList();\n  expect(classes).not.toContain('bg-red-500/50');\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should not include metadata by default","suites":[],"updatePoint":{"line":78,"column":42,"index":2530},"line":78,"code":"it('should not include metadata by default', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList();\n  expect(classes.every(cls => typeof cls === 'string')).toEqual(true);\n  expect(classes).toContain('bg-red-500');\n  expect(classes).toContain('text-2xl');\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should generate utilities with modifier data when requested","suites":[],"updatePoint":{"line":86,"column":63,"index":2876},"line":86,"code":"it('should generate utilities with modifier data when requested', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList({\n    includeMetadata: true\n  });\n  expect(classes).not.toContain('bg-red-500');\n  expect(classes).not.toContain('text-2xl');\n  expect(classes).toContainEqual(['bg-red-500', {\n    modifiers: ['0', '5', '10', '20', '25', '30', '40', '50', '60', '70', '75', '80', '90', '95', '100']\n  }]);\n  expect(classes).toContainEqual(['text-2xl', {\n    modifiers: ['3', '4', '5', '6', '7', '8', '9', '10', 'none', 'tight', 'snug', 'normal', 'relaxed', 'loose']\n  }]);\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should generate plugin-defined utilities with modifier data when requested","suites":[],"updatePoint":{"line":101,"column":78,"index":3534},"line":101,"code":"it('should generate plugin-defined utilities with modifier data when requested', () => {\n  let config = {\n    plugins: [plugin(function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        foo: value => {\n          return {\n            margin: value\n          };\n        }\n      }, {\n        values: {\n          xl: '32px'\n        },\n        modifiers: {\n          bar: 'something'\n        }\n      });\n      matchUtilities({\n        'foo-negative': value => {\n          return {\n            margin: value\n          };\n        }\n      }, {\n        values: {\n          xl: '32px'\n        },\n        modifiers: {\n          bar: 'something'\n        },\n        supportsNegativeValues: true\n      });\n    })]\n  };\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList({\n    includeMetadata: true\n  });\n  expect(classes).toContainEqual(['foo-xl', {\n    modifiers: ['bar']\n  }]);\n  expect(classes).toContainEqual(['foo-negative-xl', {\n    modifiers: ['bar']\n  }]);\n  expect(classes).toContainEqual(['-foo-negative-xl', {\n    modifiers: ['bar']\n  }]);\n  expect(classes).not.toContain('foo-xl');\n  expect(classes).not.toContain('-foo-xl');\n  expect(classes).not.toContainEqual(['-foo-xl', {\n    modifiers: ['bar']\n  }]);\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should not generate utilities with opacity even if safe-listed","suites":[],"updatePoint":{"line":156,"column":66,"index":4785},"line":156,"code":"it('should not generate utilities with opacity even if safe-listed', () => {\n  let config = {\n    safelist: [{\n      pattern: /^bg-red-(400|500)(\\/(40|50))?$/\n    }]\n  };\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList();\n  expect(classes).not.toContain('bg-red-500/50');\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should not generate utilities that are set to undefined or null to so that they are removed","suites":[],"updatePoint":{"line":166,"column":95,"index":5133},"line":166,"code":"it('should not generate utilities that are set to undefined or null to so that they are removed', () => {\n  let config = {\n    theme: {\n      extend: {\n        colors: {\n          red: null,\n          green: undefined,\n          blue: {\n            100: null,\n            200: undefined\n          }\n        }\n      }\n    },\n    safelist: [{\n      pattern: /^bg-(red|green|blue)-.*$/\n    }]\n  };\n  let context = createContext(resolveConfig(config));\n  let classes = context.getClassList();\n  expect(classes).not.toContain('bg-red-100'); // Red is `null`\n\n  expect(classes).not.toContain('bg-green-100'); // Green is `undefined`\n\n  expect(classes).not.toContain('bg-blue-100'); // Blue.100 is `null`\n  expect(classes).not.toContain('bg-blue-200'); // Blue.200 is `undefined`\n\n  expect(classes).toContain('bg-blue-50');\n  expect(classes).toContain('bg-blue-300');\n});","file":"getClassList.test.js","skipped":false,"dir":"tests"},{"name":"should return a list of tuples with the sort order","suites":[],"updatePoint":{"line":23,"column":54,"index":848},"line":23,"code":"it('should return a list of tuples with the sort order', () => {\n  let input = 'font-bold underline hover:font-medium unknown';\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  expect(context.getClassOrder(input.split(' '))).toEqual([['font-bold', expect.any(BigInt)], ['underline', expect.any(BigInt)], ['hover:font-medium', expect.any(BigInt)],\n  // Unknown values receive `null`\n  ['unknown', null]]);\n});","file":"getSortOrder.test.js","skipped":false,"dir":"tests"},{"name":"should sort \"%s\" based on the order we generate them in to \"%s\"","suites":[],"line":31,"code":"it.each([\n// Utitlies\n['px-3 p-1 py-3', 'p-1 px-3 py-3'],\n// Utitlies and components\n['px-4 container', 'container px-4'],\n// Utilities with variants\n['px-3 focus:hover:p-3 hover:p-1 py-3', 'px-3 py-3 hover:p-1 focus:hover:p-3'],\n// Utitlies with important\n['px-3 !py-4', '!py-4 px-3'], ['!py-4 px-3', '!py-4 px-3'],\n// Components with variants\n['hover:container container', 'container hover:container'],\n// Components and utilities with variants\n['focus:hover:container hover:underline hover:container p-1', 'p-1 hover:container focus:hover:container hover:underline'],\n// Leave user css order alone, and move to the front\n['b p-1 a', 'b a p-1'], ['hover:b focus:p-1 a', 'hover:b a focus:p-1'],\n// Add special treatment for `group` and `peer`\n['a peer container underline', 'a peer container underline']])('should sort \"%s\" based on the order we generate them in to \"%s\"', (input, output) => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  expect(defaultSort(context.getClassOrder(input.split(' ')))).toEqual(output);\n});","file":"getSortOrder.test.js","skipped":false,"dir":"tests"},{"name":"should sort \"%s\" with prefixex based on the order we generate them in to \"%s\"","suites":[],"line":52,"code":"it.each([\n// Utitlies\n['tw-px-3 tw-p-1 tw-py-3', 'tw-p-1 tw-px-3 tw-py-3'],\n// Utitlies and components\n['tw-px-4 tw-container', 'tw-container tw-px-4'],\n// Utilities with variants\n['tw-px-3 focus:hover:tw-p-3 hover:tw-p-1 tw-py-3', 'tw-px-3 tw-py-3 hover:tw-p-1 focus:hover:tw-p-3'],\n// Utitlies with important\n['tw-px-3 !tw-py-4', '!tw-py-4 tw-px-3'], ['!tw-py-4 tw-px-3', '!tw-py-4 tw-px-3'],\n// Components with variants\n['hover:tw-container tw-container', 'tw-container hover:tw-container'],\n// Components and utilities with variants\n['focus:hover:tw-container hover:tw-underline hover:tw-container tw-p-1', 'tw-p-1 hover:tw-container focus:hover:tw-container hover:tw-underline'],\n// Leave user css order alone, and move to the front\n['b tw-p-1 a', 'b a tw-p-1'], ['hover:b focus:tw-p-1 a', 'hover:b a focus:tw-p-1'],\n// Add special treatment for `group` and `peer`\n['a tw-peer tw-container tw-underline', 'a tw-peer tw-container tw-underline']])('should sort \"%s\" with prefixex based on the order we generate them in to \"%s\"', (input, output) => {\n  let config = {\n    prefix: 'tw-'\n  };\n  let context = createContext(resolveConfig(config));\n  expect(defaultSort(context.getClassOrder(input.split(' ')))).toEqual(output);\n});","file":"getSortOrder.test.js","skipped":false,"dir":"tests"},{"name":"sorts classes deterministically across multiple class lists","suites":[],"updatePoint":{"line":75,"column":63,"index":3575},"line":75,"code":"it('sorts classes deterministically across multiple class lists', () => {\n  let classes = [['a-class px-3 p-1 b-class py-3 bg-red-500 bg-blue-500', 'a-class b-class bg-blue-500 bg-red-500 p-1 px-3 py-3'], ['px-3 b-class p-1 py-3 bg-blue-500 a-class bg-red-500', 'b-class a-class bg-blue-500 bg-red-500 p-1 px-3 py-3']];\n  let config = {};\n\n  // Same context, different class lists\n  let context = createContext(resolveConfig(config));\n  for (const [input, output] of classes) {\n    expect(defaultSort(context.getClassOrder(input.split(' ')))).toEqual(output);\n  }\n\n  // Different context, different class lists\n  for (const [input, output] of classes) {\n    context = createContext(resolveConfig(config));\n    expect(defaultSort(context.getClassOrder(input.split(' ')))).toEqual(output);\n  }\n});","file":"getSortOrder.test.js","skipped":false,"dir":"tests"},{"name":"should return a list of variants with meta information about the variant","suites":[],"updatePoint":{"line":5,"column":76,"index":282},"line":5,"code":"it('should return a list of variants with meta information about the variant', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  expect(variants).toContainEqual({\n    name: 'hover',\n    isArbitrary: false,\n    hasDash: true,\n    values: [],\n    selectors: expect.any(Function)\n  });\n  expect(variants).toContainEqual({\n    name: 'group',\n    isArbitrary: true,\n    hasDash: true,\n    values: expect.any(Array),\n    selectors: expect.any(Function)\n  });\n\n  // `group-hover` now belongs to the `group` variant. The information exposed for the `group`\n  // variant is all you need.\n  expect(variants.find(v => v.name === 'group-hover')).toBeUndefined();\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should provide selectors for simple variants","suites":[],"updatePoint":{"line":28,"column":48,"index":982},"line":28,"code":"it('should provide selectors for simple variants', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  let variant = variants.find(v => v.name === 'hover');\n  expect(variant.selectors()).toEqual(['&:hover']);\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should provide selectors for parallel variants","suites":[],"updatePoint":{"line":35,"column":50,"index":1268},"line":35,"code":"it('should provide selectors for parallel variants', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  let variant = variants.find(v => v.name === 'marker');\n  expect(variant.selectors()).toEqual(['& *::marker', '&::marker']);\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should provide selectors for complex matchVariant variants like `group`","suites":[],"updatePoint":{"line":42,"column":75,"index":1597},"line":42,"code":"it('should provide selectors for complex matchVariant variants like `group`', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  let variant = variants.find(v => v.name === 'group');\n  expect(variant.selectors()).toEqual(['.group &']);\n  expect(variant.selectors({})).toEqual(['.group &']);\n  expect(variant.selectors({\n    value: 'hover'\n  })).toEqual(['.group:hover &']);\n  expect(variant.selectors({\n    value: '.foo_&'\n  })).toEqual(['.foo .group &']);\n  expect(variant.selectors({\n    modifier: 'foo',\n    value: 'hover'\n  })).toEqual(['.group\\\\/foo:hover &']);\n  expect(variant.selectors({\n    modifier: 'foo',\n    value: '.foo_&'\n  })).toEqual(['.foo .group\\\\/foo &']);\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should provide selectors for variants with atrules","suites":[],"updatePoint":{"line":64,"column":54,"index":2329},"line":64,"code":"it('should provide selectors for variants with atrules', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  let variant = variants.find(v => v.name === 'supports');\n  expect(variant.selectors({\n    value: 'display:grid'\n  })).toEqual(['@supports (display:grid)']);\n  expect(variant.selectors({\n    value: 'aspect-ratio'\n  })).toEqual(['@supports (aspect-ratio: var(--tw))']);\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should provide selectors for custom plugins that do a combination of parallel variants with modifiers with arbitrary values and with atrules","suites":[],"updatePoint":{"line":76,"column":144,"index":2871},"line":76,"code":"it('should provide selectors for custom plugins that do a combination of parallel variants with modifiers with arbitrary values and with atrules', () => {\n  let config = {\n    plugins: [function ({\n      matchVariant\n    }) {\n      matchVariant('foo', (value, {\n        modifier\n      }) => {\n        return [`\n              @supports (foo: ${modifier}) {\n                @media (max-width: 400px) {\n                   &:hover\n                }\n              }\n            `, `.${modifier}\\\\/${value} &:focus`];\n      });\n    }]\n  };\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  let variant = variants.find(v => v.name === 'foo');\n  expect(variant.selectors({\n    modifier: 'bar',\n    value: 'baz'\n  })).toEqual(['@supports (foo: bar) { @media (max-width: 400px) { &:hover } }', '.bar\\\\/baz &:focus']);\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should work for plugins that still use the modifySelectors API","suites":[],"updatePoint":{"line":102,"column":66,"index":3651},"line":102,"code":"it('should work for plugins that still use the modifySelectors API', () => {\n  let config = {\n    plugins: [function ({\n      addVariant\n    }) {\n      addVariant('foo', ({\n        modifySelectors,\n        container\n      }) => {\n        // Manually mutating the selector\n        modifySelectors(({\n          selector\n        }) => {\n          return selectorParser(selectors => {\n            selectors.walkClasses(classNode => {\n              classNode.value = `foo:${classNode.value}`;\n              classNode.parent.insertBefore(classNode, selectorParser().astSync(`.foo `));\n            });\n          }).processSync(selector);\n        });\n\n        // Manually wrap in supports query\n        let wrapper = postcss.atRule({\n          name: 'supports',\n          params: 'display: grid'\n        });\n        let nodes = container.nodes;\n        container.removeAll();\n        wrapper.append(nodes);\n        container.append(wrapper);\n      });\n    }]\n  };\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  let variant = variants.find(v => v.name === 'foo');\n  expect(variant.selectors({})).toEqual(['@supports (display: grid) { .foo .foo\\\\:& }']);\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should special case the `@`","suites":[],"updatePoint":{"line":140,"column":31,"index":4814},"line":140,"code":"it('should special case the `@`', () => {\n  let config = {\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('@', (value, {\n        modifier\n      }) => `@container ${modifier ?? ''} (min-width: ${value})`, {\n        modifiers: 'any',\n        values: {\n          xs: '20rem',\n          sm: '24rem',\n          md: '28rem',\n          lg: '32rem',\n          xl: '36rem',\n          '2xl': '42rem',\n          '3xl': '48rem',\n          '4xl': '56rem',\n          '5xl': '64rem',\n          '6xl': '72rem',\n          '7xl': '80rem'\n        }\n      });\n    }]\n  };\n  let context = createContext(resolveConfig(config));\n  let variants = context.getVariants();\n  let variant = variants.find(v => v.name === '@');\n  expect(variant).toEqual({\n    name: '@',\n    isArbitrary: true,\n    hasDash: false,\n    values: expect.any(Array),\n    selectors: expect.any(Function)\n  });\n  expect(variant.selectors({\n    value: 'xs',\n    modifier: 'foo'\n  })).toEqual(['@container foo (min-width: 20rem)']);\n});","file":"getVariants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to import another css file","suites":["import processing"],"updatePoint":{"line":3,"column":51,"index":135},"line":3,"code":"  it('should be possible to import another css file', async () => {\n    let config = {\n      darkMode: 'class',\n      content: [{\n        raw: html`<div class=\"underline\" />`\n      }],\n      corePlugins: {\n        preflight: false\n      }\n    };\n    let input = css`\n      @import './import-processing-a.css';\n    `;\n    let result = await run(input, config);\n    expect(result.css).toMatchFormattedCss(css`\n      .underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });","file":"import-processing.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to import another css file after @tailwind directive","suites":["import processing"],"updatePoint":{"line":23,"column":77,"index":651},"line":23,"code":"  it('should be possible to import another css file after @tailwind directive', async () => {\n    let config = {\n      darkMode: 'class',\n      content: [{\n        raw: html`<div class=\"foo underline\" />`\n      }],\n      corePlugins: {\n        preflight: false\n      }\n    };\n    let input = css`\n      @tailwind utilities;\n\n      @import './import-processing-b.css';\n    `;\n    let result = await run(input, config);\n    expect(result.css).toMatchFormattedCss(css`\n      .underline {\n        text-decoration-line: underline;\n      }\n\n      .foo {\n        color: red;\n      }\n    `);\n  });","file":"import-processing.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to add @config before @import statements","suites":["import processing"],"updatePoint":{"line":49,"column":65,"index":1229},"line":49,"code":"  it('should be possible to add @config before @import statements', async () => {\n    let input = css`\n      @config \"./import-processing-c.js\";\n      @import './import-processing-c.css';\n    `;\n    let result = await run(input);\n    expect(result.css).toMatchFormattedCss(css`\n      .underline {\n        text-decoration-line: underline;\n      }\n\n      .foo {\n        color: red;\n      }\n    `);\n  });","file":"import-processing.test.js","skipped":false,"dir":"tests"},{"name":"using @import instead of @tailwind","suites":[],"updatePoint":{"line":2,"column":40,"index":96},"line":2,"code":"test('using @import instead of @tailwind', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <h1>Hello world!</h1>\n          <div class=\"container\"></div>\n          <div class=\"mt-6\"></div>\n          <div class=\"bg-black\"></div>\n          <div class=\"md:hover:text-center\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      addBase\n    }) {\n      addBase({\n        h1: {\n          fontSize: '32px'\n        }\n      });\n    }]\n  };\n  let input = css`\n    @import 'tailwindcss/base';\n    @import 'tailwindcss/components';\n    @import 'tailwindcss/utilities';\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      h1 {\n        font-size: 32px;\n      }\n      ${defaults}\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n      .mt-6 {\n        margin-top: 1.5rem;\n      }\n      .bg-black {\n        --tw-bg-opacity: 1;\n        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n      }\n      @media (min-width: 768px) {\n        .md\\:hover\\:text-center:hover {\n          text-align: center;\n        }\n      }\n    `);\n  });\n});","file":"import-syntax.test.js","skipped":false,"dir":"tests"},{"name":"important boolean","suites":[],"updatePoint":{"line":5,"column":23,"index":180},"line":5,"code":"test('important boolean', () => {\n  let config = {\n    important: true,\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"container\"></div>\n          <div class=\"btn\"></div>\n          <div class=\"animate-spin\"></div>\n          <div class=\"custom-util\"></div>\n          <div class=\"custom-component\"></div>\n          <div class=\"custom-important-component\"></div>\n          <div class=\"font-bold\"></div>\n          <div class=\"md:hover:text-right\"></div>\n          <div class=\"motion-safe:hover:text-center\"></div>\n          <div class=\"dark:focus:text-left\"></div>\n          <div class=\"group-hover:focus-within:text-left\"></div>\n          <div class=\"rtl:active:text-center\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      addComponents,\n      addUtilities\n    }) {\n      addComponents({\n        '.btn': {\n          button: 'yes'\n        }\n      }, {\n        respectImportant: true\n      });\n      addComponents({\n        '@font-face': {\n          'font-family': 'Inter'\n        },\n        '@page': {\n          margin: '1cm'\n        }\n      }, {\n        respectImportant: true\n      });\n      addUtilities({\n        '.custom-util': {\n          button: 'no'\n        }\n      }, {\n        respectImportant: false\n      });\n    }]\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @layer components {\n      .custom-component {\n        @apply font-bold;\n      }\n      .custom-important-component {\n        @apply text-center !important;\n      }\n    }\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n      .btn {\n        button: yes !important;\n      }\n      @font-face {\n        font-family: Inter;\n      }\n      @page {\n        margin: 1cm;\n      }\n      .custom-component {\n        font-weight: 700;\n      }\n      .custom-important-component {\n        text-align: center !important;\n      }\n      @keyframes spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      .animate-spin {\n        animation: 1s linear infinite spin !important;\n      }\n      .font-bold {\n        font-weight: 700 !important;\n      }\n      .custom-util {\n        button: no;\n      }\n      .group:hover .group-hover\\:focus-within\\:text-left:focus-within {\n        text-align: left !important;\n      }\n      :is([dir='rtl'] .rtl\\:active\\:text-center:active) {\n        text-align: center !important;\n      }\n      @media (prefers-reduced-motion: no-preference) {\n        .motion-safe\\:hover\\:text-center:hover {\n          text-align: center !important;\n        }\n      }\n      :is(.dark .dark\\:focus\\:text-left:focus) {\n        text-align: left !important;\n      }\n      @media (min-width: 768px) {\n        .md\\:hover\\:text-right:hover {\n          text-align: right !important;\n        }\n      }\n    `);\n  });\n});","file":"important-boolean.test.js","skipped":false,"dir":"tests"},{"name":"important rules are not duplicated when rebuilding","suites":["duplicate elision"],"updatePoint":{"line":158,"column":58,"index":3929},"line":158,"code":"  test('important rules are not duplicated when rebuilding', async () => {\n    let config = {\n      important: true,\n      content: [filePath]\n    };\n    await fs.promises.writeFile(config.content[0], html`\n        <div class=\"ml-2\"></div>\n        <div class=\"ml-4\"></div>\n      `);\n    let input = css`\n      @tailwind utilities;\n    `;\n    let result = await run(input, config);\n    let allContexts = Array.from(sharedState.contextMap.values());\n    let context = allContexts[allContexts.length - 1];\n    let ruleCacheSize1 = context.ruleCache.size;\n    expect(result.css).toMatchFormattedCss(css`\n      .ml-2 {\n        margin-left: 0.5rem !important;\n      }\n      .ml-4 {\n        margin-left: 1rem !important;\n      }\n    `);\n    await fs.promises.writeFile(config.content[0], html`\n        <div class=\"ml-2\"></div>\n        <div class=\"ml-6\"></div>\n      `);\n    result = await run(input, config);\n    let ruleCacheSize2 = context.ruleCache.size;\n    expect(result.css).toMatchFormattedCss(css`\n      .ml-2 {\n        margin-left: 0.5rem !important;\n      }\n      .ml-4 {\n        margin-left: 1rem !important;\n      }\n      .ml-6 {\n        margin-left: 1.5rem !important;\n      }\n    `);\n\n    // The rule cache was effectively doubling in size previously\n    // because the rule cache was never de-duped\n    // This ensures this behavior doesn't return\n    expect(ruleCacheSize2 - ruleCacheSize1).toBeLessThan(10);\n  });","file":"important-boolean.test.js","skipped":false,"dir":"tests"},{"name":"important modifier with prefix","suites":[],"updatePoint":{"line":2,"column":36,"index":92},"line":2,"code":"test('important modifier with prefix', () => {\n  let config = {\n    important: false,\n    prefix: 'tw-',\n    darkMode: 'class',\n    content: [{\n      raw: html`<!-- The string \"!*\" can cause problems if we don't handle it, let's include it -->\n          <div class=\"!*\"></div>\n          <div class=\"!tw-container\"></div>\n          <div class=\"!tw-font-bold\"></div>\n          <div class=\"hover:!tw-text-center\"></div>\n          <div class=\"lg:!tw-opacity-50\"></div>\n          <div class=\"xl:focus:disabled:!tw-float-right\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .\\!tw-container {\n        width: 100% !important;\n      }\n      @media (min-width: 640px) {\n        .\\!tw-container {\n          max-width: 640px !important;\n        }\n      }\n      @media (min-width: 768px) {\n        .\\!tw-container {\n          max-width: 768px !important;\n        }\n      }\n      @media (min-width: 1024px) {\n        .\\!tw-container {\n          max-width: 1024px !important;\n        }\n      }\n      @media (min-width: 1280px) {\n        .\\!tw-container {\n          max-width: 1280px !important;\n        }\n      }\n      @media (min-width: 1536px) {\n        .\\!tw-container {\n          max-width: 1536px !important;\n        }\n      }\n      .\\!tw-font-bold {\n        font-weight: 700 !important;\n      }\n      .hover\\:\\!tw-text-center:hover {\n        text-align: center !important;\n      }\n      @media (min-width: 1024px) {\n        .lg\\:\\!tw-opacity-50 {\n          opacity: 0.5 !important;\n        }\n      }\n      @media (min-width: 1280px) {\n        .xl\\:focus\\:disabled\\:\\!tw-float-right:disabled:focus {\n          float: right !important;\n        }\n      }\n    `);\n  });\n});","file":"important-modifier-prefix.test.js","skipped":false,"dir":"tests"},{"name":"important modifier","suites":[],"updatePoint":{"line":2,"column":24,"index":70},"line":2,"code":"test('important modifier', () => {\n  let config = {\n    important: false,\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"!container\"></div>\n          <div class=\"!font-bold\"></div>\n          <div class=\"hover:!text-center\"></div>\n          <div class=\"lg:!opacity-50\"></div>\n          <div class=\"xl:focus:disabled:!float-right\"></div>\n          <div class=\"!custom-parent-5\"></div>\n          <div class=\"btn !disabled\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      theme,\n      matchUtilities,\n      addComponents\n    }) {\n      matchUtilities({\n        'custom-parent': value => {\n          return {\n            '.custom-child': {\n              margin: value\n            }\n          };\n        }\n      }, {\n        values: theme('spacing')\n      });\n      addComponents({\n        '.btn': {\n          '&.disabled, &:disabled': {\n            color: 'gray'\n          }\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .\\!container {\n        width: 100% !important;\n      }\n      @media (min-width: 640px) {\n        .\\!container {\n          max-width: 640px !important;\n        }\n      }\n      @media (min-width: 768px) {\n        .\\!container {\n          max-width: 768px !important;\n        }\n      }\n      @media (min-width: 1024px) {\n        .\\!container {\n          max-width: 1024px !important;\n        }\n      }\n      @media (min-width: 1280px) {\n        .\\!container {\n          max-width: 1280px !important;\n        }\n      }\n      @media (min-width: 1536px) {\n        .\\!container {\n          max-width: 1536px !important;\n        }\n      }\n      .btn.disabled,\n      .btn:disabled {\n        color: gray;\n      }\n      .btn.\\!disabled {\n        color: gray !important;\n      }\n      .\\!font-bold {\n        font-weight: 700 !important;\n      }\n      .\\!custom-parent-5 .custom-child {\n        margin: 1.25rem !important;\n      }\n      .hover\\:\\!text-center:hover {\n        text-align: center !important;\n      }\n      @media (min-width: 1024px) {\n        .lg\\:\\!opacity-50 {\n          opacity: 0.5 !important;\n        }\n      }\n      @media (min-width: 1280px) {\n        .xl\\:focus\\:disabled\\:\\!float-right:disabled:focus {\n          float: right !important;\n        }\n      }\n    `);\n  });\n});","file":"important-modifier.test.js","skipped":false,"dir":"tests"},{"name":"the important modifier works on utilities using :where()","suites":[],"updatePoint":{"line":108,"column":62,"index":2557},"line":108,"code":"test('the important modifier works on utilities using :where()', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"btn hover:btn !btn hover:focus:disabled:!btn\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      addComponents\n    }) {\n      addComponents({\n        ':where(.btn)': {\n          backgroundColor: '#00f'\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      :where(.\\!btn) {\n        background-color: #00f !important;\n      }\n      :where(.btn),\n      :where(.hover\\:btn:hover) {\n        background-color: #00f;\n      }\n      :where(.hover\\:focus\\:disabled\\:\\!btn:disabled:focus:hover) {\n        background-color: #00f !important;\n      }\n    `);\n  });\n});","file":"important-modifier.test.js","skipped":false,"dir":"tests"},{"name":"important selector","suites":[],"updatePoint":{"line":2,"column":24,"index":80},"line":2,"code":"test('important selector', () => {\n  let config = {\n    important: '#app',\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"container\"></div>\n          <div class=\"btn\"></div>\n          <div class=\"animate-spin\"></div>\n          <div class=\"custom-util\"></div>\n          <div class=\"custom-component\"></div>\n          <div class=\"custom-important-component\"></div>\n          <div class=\"font-bold\"></div>\n          <div class=\"md:hover:text-right\"></div>\n          <div class=\"motion-safe:hover:text-center\"></div>\n          <div class=\"dark:focus:text-left\"></div>\n          <div class=\"group-hover:focus-within:text-left\"></div>\n          <div class=\"rtl:active:text-center\"></div>\n          <div class=\"dark:before:underline\"></div>\n          <div class=\"hover:[&::file-selector-button]:rtl:dark:bg-black/100\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      addComponents,\n      addUtilities\n    }) {\n      addComponents({\n        '.btn': {\n          button: 'yes'\n        }\n      }, {\n        respectImportant: true\n      });\n      addComponents({\n        '@font-face': {\n          'font-family': 'Inter'\n        },\n        '@page': {\n          margin: '1cm'\n        }\n      }, {\n        respectImportant: true\n      });\n      addUtilities({\n        '.custom-util': {\n          button: 'no'\n        }\n      }, {\n        respectImportant: false\n      });\n    }]\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @layer components {\n      .custom-component {\n        @apply font-bold;\n      }\n      .custom-important-component {\n        @apply text-center !important;\n      }\n    }\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n      #app .btn {\n        button: yes;\n      }\n      @font-face {\n        font-family: Inter;\n      }\n      @page {\n        margin: 1cm;\n      }\n      .custom-component {\n        font-weight: 700;\n      }\n      .custom-important-component {\n        text-align: center !important;\n      }\n      @keyframes spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      #app .animate-spin {\n        animation: 1s linear infinite spin;\n      }\n      #app .font-bold {\n        font-weight: 700;\n      }\n      .custom-util {\n        button: no;\n      }\n      #app :is(.group:hover .group-hover\\:focus-within\\:text-left:focus-within) {\n        text-align: left;\n      }\n      #app :is([dir='rtl'] .rtl\\:active\\:text-center:active) {\n        text-align: center;\n      }\n      @media (prefers-reduced-motion: no-preference) {\n        #app .motion-safe\\:hover\\:text-center:hover {\n          text-align: center;\n        }\n      }\n      #app :is(.dark .dark\\:before\\:underline):before {\n        content: var(--tw-content);\n        text-decoration-line: underline;\n      }\n      #app :is(.dark .dark\\:focus\\:text-left:focus) {\n        text-align: left;\n      }\n      @media (min-width: 768px) {\n        #app .md\\:hover\\:text-right:hover {\n          text-align: right;\n        }\n      }\n      #app\n        :-webkit-any(\n          [dir='rtl']\n            :-webkit-any(.dark .hover\\:\\[\\&\\:\\:file-selector-button\\]\\:rtl\\:dark\\:bg-black\\/100)\n        )::-webkit-file-upload-button:hover {\n        background-color: #000;\n      }\n      #app\n        :is(\n          [dir='rtl'] :is(.dark .hover\\:\\[\\&\\:\\:file-selector-button\\]\\:rtl\\:dark\\:bg-black\\/100)\n        )::file-selector-button:hover {\n        background-color: #000;\n      }\n    `);\n  });\n});","file":"important-selector.test.js","skipped":false,"dir":"tests"},{"name":"pseudo-elements are appended after the `:-webkit-any()`","suites":[],"updatePoint":{"line":169,"column":61,"index":4262},"line":169,"code":"test('pseudo-elements are appended after the `:-webkit-any()`', () => {\n  let config = {\n    important: '#app',\n    darkMode: 'class',\n    content: [{\n      raw: html` <div class=\"dark:before:flex\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      #app :is(.dark .dark\\:before\\:flex):before {\n        content: var(--tw-content);\n        display: flex;\n      }\n    `);\n  });\n});","file":"important-selector.test.js","skipped":false,"dir":"tests"},{"name":"it works","suites":[],"updatePoint":{"line":2,"column":14,"index":70},"line":2,"code":"test('it works', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div\n            class=\"line-clamp-2 line-clamp-[33] line-clamp-[var(--line-clamp-variable)] line-clamp-none\"\n          ></div>\n          <div class=\"range:text-right multi:text-left\"></div>\n          <div\n            class=\"container hover:container sm:container md:container text-center sm:text-center md:text-center\"\n          ></div>\n          <div class=\"grid-cols-[200px,repeat(auto-fill,minmax(15%,100px)),300px]\"></div>\n          <div class=\"test-apply-font-variant\"></div>\n          <div class=\"mt-6 mx-1 ms-4 me-8\"></div>\n          <div class=\"pt-6 px-1 ps-4 pe-8\"></div>\n          <div class=\"inset-6 inset-x-1 start-4 end-8\"></div>\n          <div class=\"border-2 border-s-0 border-e-4\"></div>\n          <div class=\"border-black border-s-green-500 border-e-red-400\"></div>\n          <div class=\"rounded-s rounded-e rounded-ss rounded-es\"></div>\n          <div class=\"bg-black\"></div>\n          <div class=\"md:hover:border-r-blue-500/30\"></div>\n          <div class=\"custom-util\"></div>\n          <div class=\"hover:custom-util\"></div>\n          <div class=\"group-hover:custom-util\"></div>\n          <div class=\"foo:custom-util\"></div>\n          <div class=\"foo:hover:custom-util\"></div>\n          <div class=\"sm:custom-util\"></div>\n          <div class=\"dark:custom-util\"></div>\n          <div class=\"motion-safe:custom-util\"></div>\n          <div class=\"md:dark:motion-safe:foo:active:custom-util\"></div>\n          <div class=\"aspect-w-1 aspect-h-2\"></div>\n          <div class=\"aspect-w-3 aspect-h-4\"></div>\n          <div class=\"magic-none magic-tons\"></div>\n          <div class=\"focus:font-normal\"></div>\n          <div class=\"font-medium\"></div>\n          <div class=\"bg-gradient-to-r from-foo\"></div>\n          <div class=\"custom-component custom-util\"></div>\n          <div class=\"bg-opacity-50\"></div>\n          <div class=\"focus:ring-2 focus:ring-blue-500\"></div>\n          <div class=\"hover:font-bold\"></div>\n          <div class=\"disabled:font-bold\"></div>\n          <div class=\"focus:hover:font-light\"></div>\n          <div class=\"first:pt-0\"></div>\n          <div class=\"container\"></div>\n          <div class=\"bg-hero--home-1\"></div>\n          <div class=\"group-hover:opacity-100\"></div>\n          <div class=\"group-active:opacity-10\"></div>\n          <div class=\"sm:motion-safe:group-active:focus:opacity-10\"></div>\n          <div class=\"motion-safe:transition\"></div>\n          <div class=\"motion-reduce:transition\"></div>\n          <div class=\"md:motion-safe:hover:transition\"></div>\n          <div class=\"md:sm:text-center shadow-sm md:shadow-sm\"></div>\n          <div class=\"md:sm:text-center shadow-sm md:shadow-sm\"></div>\n          <div class=\"bg-green-500 md:opacity-50 md:hover:opacity-20 sm:tabular-nums\"></div>\n          <div\n            class=\"text-center shadow-md hover:shadow-lg transform scale-50 hover:scale-75\"\n          ></div>\n\n          <script>\n            defineComponent({\n              name: 'HelloWorld',\n              props: {\n                msg: {\n                  type: String,\n                  required: true,\n                },\n                things: Array /* PropType<string[]> */,\n              },\n              setup: () => {\n                const count = ref(0)\n                // Weird regex-looking stuff that once caused a stack overflow in candidatePermutations\n                const pattern = ' ]-[] '\n                return {\n                  count,\n                  stuff: [] /* string[] | undefined */,\n                }\n              },\n            })\n          </script>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      extend: {\n        screens: {\n          range: {\n            min: '1280px',\n            max: '1535px'\n          },\n          multi: [{\n            min: '640px',\n            max: '767px'\n          }, {\n            max: '868px'\n          }]\n        },\n        gradientColorStops: {\n          foo: '#bada55'\n        },\n        backgroundImage: {\n          'hero--home-1': \"url('/images/homepage-1.jpg')\"\n        }\n      }\n    },\n    plugins: [function ({\n      addVariant\n    }) {\n      addVariant('foo', ({\n        container\n      }) => {\n        container.walkRules(rule => {\n          rule.selector = `.foo\\\\:${rule.selector.slice(1)}`;\n          rule.walkDecls(decl => {\n            decl.important = true;\n          });\n        });\n      }, {\n        before: 'sm'\n      });\n    }, function ({\n      addUtilities,\n      addBase,\n      theme\n    }) {\n      addBase({\n        h1: {\n          fontSize: theme('fontSize.2xl'),\n          fontWeight: theme('fontWeight.bold'),\n          '&:first-child': {\n            marginTop: '0px'\n          }\n        }\n      });\n      addUtilities({\n        '.magic-none': {\n          magic: 'none'\n        },\n        '.magic-tons': {\n          magic: 'tons'\n        }\n      }, ['responsive', 'hover']);\n    }]\n  };\n  let input = css`\n    @layer utilities {\n      .custom-util {\n        background: #abcdef;\n      }\n      *,\n      ::before,\n      ::after,\n      ::backdrop {\n        margin: 10px;\n      }\n    }\n    @layer components {\n      .test-apply-font-variant {\n        @apply ordinal tabular-nums;\n      }\n      .custom-component {\n        background: #123456;\n      }\n      *,\n      ::before,\n      ::after,\n      ::backdrop {\n        padding: 5px;\n      }\n      .foo .bg-black {\n        appearance: none;\n      }\n    }\n    @layer base {\n      div {\n        background: #654321;\n      }\n    }\n    .theme-test {\n      font-family: theme('fontFamily.sans');\n      color: theme('colors.blue.500');\n    }\n    @screen lg {\n      .screen-test {\n        color: purple;\n      }\n    }\n    .apply-1 {\n      @apply mt-6;\n    }\n    .apply-2 {\n      @apply mt-6;\n    }\n    .apply-test {\n      @apply mt-6 bg-pink-500 hover:font-bold focus:hover:font-bold sm:bg-green-500 sm:focus:even:bg-pink-200;\n    }\n    .apply-components {\n      @apply container mx-auto;\n    }\n    .drop-empty-rules {\n      @apply hover:font-bold;\n    }\n    .apply-group {\n      @apply group-hover:font-bold;\n    }\n    .apply-dark-mode {\n      @apply dark:font-bold;\n    }\n    .apply-with-existing:hover {\n      @apply font-normal sm:bg-green-500;\n    }\n    .multiple,\n    .selectors {\n      @apply font-bold group-hover:font-normal;\n    }\n    .list {\n      @apply space-y-4;\n    }\n    .nested {\n      .example {\n        @apply font-bold hover:font-normal;\n      }\n    }\n    .apply-order-a {\n      @apply m-5 mt-6;\n    }\n    .apply-order-b {\n      @apply m-5 mt-6;\n    }\n    .apply-dark-group-example-a {\n      @apply dark:group-hover:bg-green-500;\n    }\n    .crazy-example {\n      @apply sm:motion-safe:group-active:focus:opacity-10;\n    }\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .theme-test {\n        color: #3b82f6;\n        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n          Helvetica Neue, Arial, Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji,\n          Segoe UI Symbol, Noto Color Emoji;\n      }\n      @media (min-width: 1024px) {\n        .screen-test {\n          color: purple;\n        }\n      }\n      .apply-1,\n      .apply-2 {\n        margin-top: 1.5rem;\n      }\n      .apply-test {\n        --tw-bg-opacity: 1;\n        background-color: rgb(236 72 153 / var(--tw-bg-opacity));\n        margin-top: 1.5rem;\n      }\n      .apply-test:hover,\n      .apply-test:hover:focus {\n        font-weight: 700;\n      }\n      @media (min-width: 640px) {\n        .apply-test {\n          --tw-bg-opacity: 1;\n          background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n        }\n        .apply-test:nth-child(2n):focus {\n          --tw-bg-opacity: 1;\n          background-color: rgb(251 207 232 / var(--tw-bg-opacity));\n        }\n      }\n      .apply-components {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .apply-components {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .apply-components {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .apply-components {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .apply-components {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .apply-components {\n          max-width: 1536px;\n        }\n      }\n      .apply-components {\n        margin-left: auto;\n        margin-right: auto;\n      }\n      .drop-empty-rules:hover,\n      .group:hover .apply-group,\n      :is(.dark .apply-dark-mode) {\n        font-weight: 700;\n      }\n      .apply-with-existing:hover {\n        font-weight: 400;\n      }\n      @media (min-width: 640px) {\n        .apply-with-existing:hover {\n          --tw-bg-opacity: 1;\n          background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n        }\n      }\n      .multiple,\n      .selectors {\n        font-weight: 700;\n      }\n      .group:hover .multiple,\n      .group:hover .selectors {\n        font-weight: 400;\n      }\n      .list > :not([hidden]) ~ :not([hidden]) {\n        --tw-space-y-reverse: 0;\n        margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));\n        margin-bottom: calc(1rem * var(--tw-space-y-reverse));\n      }\n      .nested .example {\n        font-weight: 700;\n      }\n      .nested .example:hover {\n        font-weight: 400;\n      }\n      .apply-order-a,\n      .apply-order-b {\n        margin: 1.5rem 1.25rem 1.25rem;\n      }\n      :is(.dark .group:hover .apply-dark-group-example-a) {\n        --tw-bg-opacity: 1;\n        background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n      }\n      @media (min-width: 640px) {\n        @media (prefers-reduced-motion: no-preference) {\n          .group:active .crazy-example:focus {\n            opacity: 0.1;\n          }\n        }\n      }\n      h1 {\n        font-size: 1.5rem;\n        font-weight: 700;\n      }\n      h1:first-child {\n        margin-top: 0;\n      }\n      div {\n        background: #654321;\n      }\n      ${defaults}\n      .container {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .container {\n          max-width: 1536px;\n        }\n      }\n      .test-apply-font-variant {\n        --tw-ordinal: ordinal;\n        --tw-numeric-spacing: tabular-nums;\n        font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure)\n          var(--tw-numeric-spacing) var(--tw-numeric-fraction);\n      }\n      .custom-component {\n        background: #123456;\n      }\n      *,\n      :before,\n      :after {\n        padding: 5px;\n      }\n      *,\n      :before,\n      :after {\n        padding: 5px;\n      }\n      ::-webkit-backdrop {\n        padding: 5px;\n      }\n      ::backdrop {\n        padding: 5px;\n      }\n      .foo .bg-black {\n        -webkit-appearance: none;\n        appearance: none;\n      }\n      .inset-6 {\n        inset: 1.5rem;\n      }\n      .inset-x-1 {\n        left: 0.25rem;\n        right: 0.25rem;\n      }\n      .end-8 {\n        inset-inline-end: 2rem;\n      }\n      .start-4 {\n        inset-inline-start: 1rem;\n      }\n      .mx-1 {\n        margin-left: 0.25rem;\n        margin-right: 0.25rem;\n      }\n      .me-8 {\n        margin-inline-end: 2rem;\n      }\n      .ms-4 {\n        margin-inline-start: 1rem;\n      }\n      .mt-6 {\n        margin-top: 1.5rem;\n      }\n      .line-clamp-2 {\n        -webkit-line-clamp: 2;\n        -webkit-box-orient: vertical;\n        display: -webkit-box;\n        overflow: hidden;\n      }\n      .line-clamp-\\[33\\] {\n        -webkit-line-clamp: 33;\n        -webkit-box-orient: vertical;\n        display: -webkit-box;\n        overflow: hidden;\n      }\n      .line-clamp-\\[var\\(--line-clamp-variable\\)\\] {\n        -webkit-line-clamp: var(--line-clamp-variable);\n        -webkit-box-orient: vertical;\n        display: -webkit-box;\n        overflow: hidden;\n      }\n      .line-clamp-none {\n        -webkit-line-clamp: none;\n        -webkit-box-orient: horizontal;\n        display: block;\n        overflow: visible;\n      }\n      .scale-50 {\n        --tw-scale-x: 0.5;\n        --tw-scale-y: 0.5;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .transform {\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .grid-cols-\\[200px\\,repeat\\(auto-fill\\,minmax\\(15\\%\\,100px\\)\\)\\,300px\\] {\n        grid-template-columns: 200px repeat(auto-fill, minmax(15%, 100px)) 300px;\n      }\n      .rounded-e {\n        border-start-end-radius: 0.25rem;\n        border-end-end-radius: 0.25rem;\n      }\n      .rounded-s {\n        border-start-start-radius: 0.25rem;\n        border-end-start-radius: 0.25rem;\n      }\n      .rounded-es {\n        border-end-start-radius: 0.25rem;\n      }\n      .rounded-ss {\n        border-start-start-radius: 0.25rem;\n      }\n      .border-2 {\n        border-width: 2px;\n      }\n      .border-e-4 {\n        border-inline-end-width: 4px;\n      }\n      .border-s-0 {\n        border-inline-start-width: 0;\n      }\n      .border-black {\n        --tw-border-opacity: 1;\n        border-color: rgb(0 0 0 / var(--tw-border-opacity));\n      }\n      .border-e-red-400 {\n        --tw-border-opacity: 1;\n        border-inline-end-color: rgb(248 113 113 / var(--tw-border-opacity));\n      }\n      .border-s-green-500 {\n        --tw-border-opacity: 1;\n        border-inline-start-color: rgb(34 197 94 / var(--tw-border-opacity));\n      }\n      .bg-black {\n        --tw-bg-opacity: 1;\n        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n      }\n      .bg-green-500 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n      }\n      .bg-opacity-50 {\n        --tw-bg-opacity: 0.5;\n      }\n      .bg-gradient-to-r {\n        background-image: linear-gradient(to right, var(--tw-gradient-stops));\n      }\n      .bg-hero--home-1 {\n        background-image: url('/images/homepage-1.jpg');\n      }\n      .from-foo {\n        --tw-gradient-from: #bada55 var(--tw-gradient-from-position);\n        --tw-gradient-to: #bada5500 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n      }\n      .px-1 {\n        padding-left: 0.25rem;\n        padding-right: 0.25rem;\n      }\n      .pe-8 {\n        padding-inline-end: 2rem;\n      }\n      .ps-4 {\n        padding-inline-start: 1rem;\n      }\n      .pt-6 {\n        padding-top: 1.5rem;\n      }\n      .text-center {\n        text-align: center;\n      }\n      .font-medium {\n        font-weight: 500;\n      }\n      .shadow-md {\n        --tw-shadow: 0 4px 6px -1px #0000001a, 0 2px 4px -2px #0000001a;\n        --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),\n          0 2px 4px -2px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .shadow-sm {\n        --tw-shadow: 0 1px 2px 0 #0000000d;\n        --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .magic-none {\n        magic: none;\n      }\n      .magic-tons {\n        magic: tons;\n      }\n      .custom-util {\n        background: #abcdef;\n      }\n      *,\n      :before,\n      :after {\n        margin: 10px;\n      }\n      *,\n      :before,\n      :after {\n        margin: 10px;\n      }\n      ::-webkit-backdrop {\n        margin: 10px;\n      }\n      ::backdrop {\n        margin: 10px;\n      }\n      .hover\\:container:hover {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .hover\\:container:hover {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .hover\\:container:hover {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .hover\\:container:hover {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .hover\\:container:hover {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .hover\\:container:hover {\n          max-width: 1536px;\n        }\n      }\n      @media (min-width: 640px) {\n        .sm\\:container {\n          width: 100%;\n        }\n        @media (min-width: 640px) {\n          .sm\\:container {\n            max-width: 640px;\n          }\n        }\n        @media (min-width: 768px) {\n          .sm\\:container {\n            max-width: 768px;\n          }\n        }\n        @media (min-width: 1024px) {\n          .sm\\:container {\n            max-width: 1024px;\n          }\n        }\n        @media (min-width: 1280px) {\n          .sm\\:container {\n            max-width: 1280px;\n          }\n        }\n        @media (min-width: 1536px) {\n          .sm\\:container {\n            max-width: 1536px;\n          }\n        }\n      }\n      @media (min-width: 768px) {\n        .md\\:container {\n          width: 100%;\n        }\n        @media (min-width: 640px) {\n          .md\\:container {\n            max-width: 640px;\n          }\n        }\n        @media (min-width: 768px) {\n          .md\\:container {\n            max-width: 768px;\n          }\n        }\n        @media (min-width: 1024px) {\n          .md\\:container {\n            max-width: 1024px;\n          }\n        }\n        @media (min-width: 1280px) {\n          .md\\:container {\n            max-width: 1280px;\n          }\n        }\n        @media (min-width: 1536px) {\n          .md\\:container {\n            max-width: 1536px;\n          }\n        }\n      }\n      .first\\:pt-0:first-child {\n        padding-top: 0;\n      }\n      .hover\\:scale-75:hover {\n        --tw-scale-x: 0.75;\n        --tw-scale-y: 0.75;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .hover\\:font-bold:hover {\n        font-weight: 700;\n      }\n      .hover\\:shadow-lg:hover {\n        --tw-shadow: 0 10px 15px -3px #0000001a, 0 4px 6px -4px #0000001a;\n        --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color),\n          0 4px 6px -4px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .hover\\:custom-util:hover {\n        background: #abcdef;\n      }\n      .focus\\:font-normal:focus {\n        font-weight: 400;\n      }\n      .focus\\:ring-2:focus {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n      .focus\\:ring-blue-500:focus {\n        --tw-ring-opacity: 1;\n        --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity));\n      }\n      .focus\\:hover\\:font-light:hover:focus {\n        font-weight: 300;\n      }\n      .disabled\\:font-bold:disabled {\n        font-weight: 700;\n      }\n      .group:hover .group-hover\\:opacity-100 {\n        opacity: 1;\n      }\n      .group:hover .group-hover\\:custom-util {\n        background: #abcdef;\n      }\n      .group:active .group-active\\:opacity-10 {\n        opacity: 0.1;\n      }\n      .foo\\:custom-util,\n      .foo\\:hover\\:custom-util:hover {\n        background: #abcdef !important;\n      }\n      @media (prefers-reduced-motion: no-preference) {\n        .motion-safe\\:transition {\n          transition-property: color, background-color, border-color, text-decoration-color, fill,\n            stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter, backdrop-filter;\n          transition-duration: 0.15s;\n          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n        }\n        .motion-safe\\:custom-util {\n          background: #abcdef;\n        }\n      }\n      @media (prefers-reduced-motion: reduce) {\n        .motion-reduce\\:transition {\n          transition-property: color, background-color, border-color, text-decoration-color, fill,\n            stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter, backdrop-filter;\n          transition-duration: 0.15s;\n          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n        }\n      }\n      :is(.dark .dark\\:custom-util) {\n        background: #abcdef;\n      }\n      @media (min-width: 640px) {\n        .sm\\:text-center {\n          text-align: center;\n        }\n        .sm\\:tabular-nums {\n          --tw-numeric-spacing: tabular-nums;\n          font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure)\n            var(--tw-numeric-spacing) var(--tw-numeric-fraction);\n        }\n        .sm\\:custom-util {\n          background: #abcdef;\n        }\n        @media (prefers-reduced-motion: no-preference) {\n          .group:active .sm\\:motion-safe\\:group-active\\:focus\\:opacity-10:focus {\n            opacity: 0.1;\n          }\n        }\n      }\n      @media (min-width: 768px) {\n        .md\\:text-center {\n          text-align: center;\n        }\n        .md\\:opacity-50 {\n          opacity: 0.5;\n        }\n        .md\\:shadow-sm {\n          --tw-shadow: 0 1px 2px 0 #0000000d;\n          --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n          box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n            var(--tw-shadow);\n        }\n        .md\\:hover\\:border-r-blue-500\\/30:hover {\n          border-right-color: #3b82f64d;\n        }\n        .md\\:hover\\:opacity-20:hover {\n          opacity: 0.2;\n        }\n        @media (prefers-reduced-motion: no-preference) {\n          .md\\:motion-safe\\:hover\\:transition:hover {\n            transition-property: color, background-color, border-color, text-decoration-color, fill,\n              stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter,\n              backdrop-filter;\n            transition-duration: 0.15s;\n            transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n          }\n          :is(.dark .md\\:dark\\:motion-safe\\:foo\\:active\\:custom-util:active) {\n            background: #abcdef !important;\n          }\n        }\n        @media (min-width: 640px) {\n          .md\\:sm\\:text-center {\n            text-align: center;\n          }\n        }\n      }\n      @media (min-width: 1280px) and (max-width: 1535px) {\n        .range\\:text-right {\n          text-align: right;\n        }\n      }\n      @media (min-width: 640px) and (max-width: 767px), (max-width: 868px) {\n        .multi\\:text-left {\n          text-align: left;\n        }\n      }\n    `);\n  });\n});","file":"kitchen-sink.test.js","skipped":false,"dir":"tests"},{"name":"custom user-land utilities","suites":[],"updatePoint":{"line":2,"column":32,"index":88},"line":2,"code":"test('custom user-land utilities', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"focus:hover:align-chocolate align-banana hover:align-banana uppercase\"\n        ></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: []\n  };\n  let input = css`\n    @layer utilities {\n      .align-banana {\n        text-align: banana;\n      }\n    }\n\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer utilities {\n      .align-chocolate {\n        text-align: chocolate;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .align-banana,\n      .hover\\:align-banana:hover {\n        text-align: banana;\n      }\n      .focus\\:hover\\:align-chocolate:hover:focus {\n        text-align: chocolate;\n      }\n    `);\n  });\n});","file":"layer-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"comments can be used inside layers without crashing","suites":[],"updatePoint":{"line":48,"column":57,"index":1058},"line":48,"code":"test('comments can be used inside layers without crashing', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"important-utility important-component\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: []\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer base {\n      /* Important base */\n      div {\n        background-color: #bada55;\n      }\n    }\n\n    @layer utilities {\n      /* Important utility */\n      .important-utility {\n        text-align: banana;\n      }\n    }\n\n    @layer components {\n      /* Important component */\n      .important-component {\n        text-align: banana;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      div {\n        background-color: #bada55;\n      }\n      ${defaults}\n      .important-component,\n        .important-utility {\n        text-align: banana;\n      }\n    `);\n  });\n});","file":"layer-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"comments can be used inside layers (with important) without crashing","suites":[],"updatePoint":{"line":98,"column":74,"index":2074},"line":98,"code":"test('comments can be used inside layers (with important) without crashing', () => {\n  let config = {\n    important: true,\n    content: [{\n      raw: html`<div class=\"important-utility important-component\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: []\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer base {\n      /* Important base */\n      div {\n        background-color: #bada55;\n      }\n    }\n\n    @layer utilities {\n      /* Important utility */\n      .important-utility {\n        text-align: banana;\n      }\n    }\n\n    @layer components {\n      /* Important component */\n      .important-component {\n        text-align: banana;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      div {\n        background-color: #bada55;\n      }\n      ${defaults}\n      .important-component {\n        text-align: banana;\n      }\n      .important-utility {\n        text-align: banana !important;\n      }\n    `);\n  });\n});","file":"layer-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"layers are grouped and inserted at the matching @tailwind rule","suites":[],"updatePoint":{"line":151,"column":68,"index":3151},"line":151,"code":"test('layers are grouped and inserted at the matching @tailwind rule', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"input btn card float-squirrel align-banana align-sandwich\"></div>`\n    }],\n    plugins: [function ({\n      addBase,\n      addComponents,\n      addUtilities\n    }) {\n      addBase({\n        body: {\n          margin: 0\n        }\n      });\n      addComponents({\n        '.input': {\n          background: 'white'\n        }\n      });\n      addUtilities({\n        '.float-squirrel': {\n          float: 'squirrel'\n        }\n      });\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @layer vanilla {\n      strong {\n        font-weight: medium;\n      }\n    }\n\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .btn {\n        background: blue;\n      }\n    }\n\n    @layer utilities {\n      .align-banana {\n        text-align: banana;\n      }\n    }\n\n    @layer base {\n      h1 {\n        font-weight: bold;\n      }\n    }\n\n    @layer components {\n      .card {\n        border-radius: 12px;\n      }\n    }\n\n    @layer base {\n      p {\n        font-weight: normal;\n      }\n    }\n\n    @layer utilities {\n      .align-sandwich {\n        text-align: sandwich;\n      }\n    }\n\n    @layer chocolate {\n      a {\n        text-decoration: underline;\n      }\n    }\n  `;\n  expect.assertions(2);\n  return run(input, config).then(result => {\n    expect(result.warnings().length).toBe(0);\n    expect(result.css).toMatchFormattedCss(css`\n      @layer vanilla {\n        strong {\n          font-weight: medium;\n        }\n      }\n      body {\n        margin: 0;\n      }\n      h1 {\n        font-weight: bold;\n      }\n      p {\n        font-weight: normal;\n      }\n      ${defaults}\n      .input {\n        background: #fff;\n      }\n      .btn {\n        background: #00f;\n      }\n      .card {\n        border-radius: 12px;\n      }\n      .float-squirrel {\n        float: squirrel;\n      }\n      .align-banana {\n        text-align: banana;\n      }\n      .align-sandwich {\n        text-align: sandwich;\n      }\n      @layer chocolate {\n        a {\n          text-decoration: underline;\n        }\n      }\n    `);\n  });\n});","file":"layer-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"should keep `@supports` rules inside `@layer`s","suites":[],"updatePoint":{"line":279,"column":50,"index":5341},"line":279,"code":"it('should keep `@supports` rules inside `@layer`s', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind utilities;\n\n    @layer utilities {\n      .test {\n        --tw-test: 1;\n      }\n\n      @supports (backdrop-filter: blur(1px)) {\n        .test {\n          --tw-test: 0.9;\n        }\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .test {\n        --tw-test: 1;\n      }\n      @supports ((-webkit-backdrop-filter: blur(1px)) or (backdrop-filter: blur(1px))) {\n        .test {\n          --tw-test: 0.9;\n        }\n      }\n    `);\n  });\n});","file":"layer-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"using @layer without @tailwind","suites":[],"updatePoint":{"line":2,"column":36,"index":82},"line":2,"code":"test('using @layer without @tailwind', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }]\n  };\n  let input = css`\n    @layer components {\n      .foo {\n        color: black;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError('`@layer components` is used but no matching `@tailwind components` directive is present.');\n});","file":"layer-without-tailwind.test.js","skipped":false,"dir":"tests"},{"name":"using @responsive without @tailwind","suites":[],"updatePoint":{"line":17,"column":41,"index":476},"line":17,"code":"test('using @responsive without @tailwind', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }]\n  };\n  let input = css`\n    @responsive {\n      .foo {\n        color: black;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError('`@responsive` is used but `@tailwind utilities` is missing.');\n});","file":"layer-without-tailwind.test.js","skipped":false,"dir":"tests"},{"name":"using @variants without @tailwind","suites":[],"updatePoint":{"line":32,"column":39,"index":833},"line":32,"code":"test('using @variants without @tailwind', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }]\n  };\n  let input = css`\n    @variants hover {\n      .foo {\n        color: black;\n      }\n    }\n  `;\n  await expect(run(input, config)).rejects.toThrowError('`@variants` is used but `@tailwind utilities` is missing.');\n});","file":"layer-without-tailwind.test.js","skipped":false,"dir":"tests"},{"name":"non-Tailwind @layer rules are okay","suites":[],"updatePoint":{"line":47,"column":40,"index":1193},"line":47,"code":"test('non-Tailwind @layer rules are okay', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }]\n  };\n  let input = css`\n    @layer custom {\n      .foo {\n        color: black;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @layer custom {\n        .foo {\n          color: #000;\n        }\n      }\n    `);\n  });\n});","file":"layer-without-tailwind.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to matchComponents","suites":[],"updatePoint":{"line":2,"column":41,"index":97},"line":2,"code":"it('should be possible to matchComponents', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"card-[#0088cc] hover:card-[#f0f]\">\n          <div class=\"card-header font-bold\"></div>\n          <div class=\"shadow\"></div>\n          <div class=\"card-footer text-center\"></div>\n        </div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      matchComponents\n    }) {\n      matchComponents({\n        card: value => {\n          return [{\n            color: value\n          }, {\n            '.card-header': {\n              borderTopWidth: 3,\n              borderTopColor: value\n            }\n          }, {\n            '.card-footer': {\n              borderBottomWidth: 3,\n              borderBottomColor: value\n            }\n          }];\n        }\n      });\n    }]\n  };\n  return run('@tailwind base; @tailwind components; @tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .card-\\[\\#0088cc\\] {\n        color: #08c;\n      }\n      .card-\\[\\#0088cc\\] .card-header {\n        border-top-width: 3px;\n        border-top-color: #08c;\n      }\n      .card-\\[\\#0088cc\\] .card-footer {\n        border-bottom-width: 3px;\n        border-bottom-color: #08c;\n      }\n      .text-center {\n        text-align: center;\n      }\n      .font-bold {\n        font-weight: 700;\n      }\n      .shadow {\n        --tw-shadow: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;\n        --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\n          0 1px 2px -1px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .hover\\:card-\\[\\#f0f\\]:hover {\n        color: #f0f;\n      }\n      .hover\\:card-\\[\\#f0f\\]:hover .card-header {\n        border-top-width: 3px;\n        border-top-color: #f0f;\n      }\n      .hover\\:card-\\[\\#f0f\\]:hover .card-footer {\n        border-bottom-width: 3px;\n        border-bottom-color: #f0f;\n      }\n    `);\n  });\n});","file":"match-components.test.js","skipped":false,"dir":"tests"},{"name":"match utilities with modifiers","suites":[],"updatePoint":{"line":2,"column":36,"index":82},"line":2,"code":"test('match utilities with modifiers', async () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"test test/foo test-1/foo test-2/foo test/[foo] test-1/[foo] test-[8]/[9]\"\n        ></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchUtilities\n    }) => {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          color: `${value}_${modifier}`\n        })\n      }, {\n        values: {\n          DEFAULT: 'default',\n          bar: 'bar',\n          '1': 'one',\n          '2': 'two',\n          '1/foo': 'onefoo',\n          '[8]/[9]': 'eightnine'\n        },\n        modifiers: 'any'\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .test {\n      color: default_null;\n    }\n    .test-1\\/\\[foo\\] {\n      color: one_[foo];\n    }\n    .test-1\\/foo {\n      color: onefoo_null;\n    }\n    .test-2\\/foo {\n      color: two_foo;\n    }\n    .test-\\[8\\]\\/\\[9\\] {\n      color: eightnine_null;\n    }\n    .test\\/\\[foo\\] {\n      color: default_[foo];\n    }\n    .test\\/foo {\n      color: default_foo;\n    }\n  `);\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"match utilities with modifiers in the config","suites":[],"updatePoint":{"line":62,"column":50,"index":1304},"line":62,"code":"test('match utilities with modifiers in the config', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test test/foo test-1/foo test/[bar] test-1/[bar]\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchUtilities\n    }) => {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          color: `${value}_${modifier}`\n        })\n      }, {\n        values: {\n          DEFAULT: 'default',\n          bar: 'bar',\n          '1': 'one'\n        },\n        modifiers: {\n          foo: 'mewtwo'\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .test {\n      color: default_null;\n    }\n    .test-1\\/\\[bar\\] {\n      color: one_bar;\n    }\n    .test-1\\/foo {\n      color: one_mewtwo;\n    }\n    .test\\/\\[bar\\] {\n      color: default_bar;\n    }\n    .test\\/foo {\n      color: default_mewtwo;\n    }\n  `);\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"match utilities can omit utilities by returning null","suites":[],"updatePoint":{"line":113,"column":58,"index":2327},"line":113,"code":"test('match utilities can omit utilities by returning null', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test test/good test/bad\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchUtilities\n    }) => {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => modifier === 'bad' ? null : {\n          color: `${value}_${modifier}`\n        }\n      }, {\n        values: {\n          DEFAULT: 'default',\n          bar: 'bar',\n          '1': 'one'\n        },\n        modifiers: 'any'\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .test {\n      color: default_null;\n    }\n    .test\\/good {\n      color: default_good;\n    }\n  `);\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with a basic configured value","suites":[],"updatePoint":{"line":153,"column":54,"index":3162},"line":153,"code":"test('matching utilities with a basic configured value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-foo\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: value => ({\n          value\n        })\n      }, {\n        values: {\n          foo: 'value_foo'\n        }\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-foo {\n        value: value_foo;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with an arbitrary value and configured modifier","suites":[],"updatePoint":{"line":182,"column":72,"index":3767},"line":182,"code":"test('matching utilities with an arbitrary value and configured modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[foo]/bar\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        modifiers: {\n          bar: 'configured_bar'\n        }\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[foo\\]\\/bar {\n        value: foo;\n        modifier: configured_bar;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with an configured value and an arbitrary modifier (raw)","suites":[],"updatePoint":{"line":215,"column":81,"index":4486},"line":215,"code":"test('matching utilities with an configured value and an arbitrary modifier (raw)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-foo/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          foo: 'configured_foo'\n        },\n        modifiers: 'any' // Raw `[value]`\n      });\n    }],\n\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-foo\\/\\[bar\\] {\n        value: configured_foo;\n        modifier: [bar];\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with an configured value and an arbitrary modifier (non-raw)","suites":[],"updatePoint":{"line":250,"column":85,"index":5252},"line":250,"code":"test('matching utilities with an configured value and an arbitrary modifier (non-raw)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-foo/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          foo: 'configured_foo'\n        },\n        modifiers: {}\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-foo\\/\\[bar\\] {\n        value: configured_foo;\n        modifier: bar;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with an configured value and a configured modifier","suites":[],"updatePoint":{"line":284,"column":75,"index":5985},"line":284,"code":"test('matching utilities with an configured value and a configured modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-foo/bar\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          foo: 'configured_foo'\n        },\n        modifiers: {\n          bar: 'configured_bar'\n        }\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-foo\\/bar {\n        value: configured_foo;\n        modifier: configured_bar;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with an arbitrary value and an arbitrary modifier (raw)","suites":[],"updatePoint":{"line":320,"column":80,"index":6769},"line":320,"code":"test('matching utilities with an arbitrary value and an arbitrary modifier (raw)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[foo]/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        modifiers: 'any'\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[foo\\]\\/\\[bar\\] {\n        value: foo;\n        modifier: [bar];\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with an arbitrary value and an arbitrary modifier (non-raw)","suites":[],"updatePoint":{"line":351,"column":84,"index":7450},"line":351,"code":"test('matching utilities with an arbitrary value and an arbitrary modifier (non-raw)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[foo]/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        modifiers: {}\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[foo\\]\\/\\[bar\\] {\n        value: foo;\n        modifier: bar;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with a lookup value that looks like an arbitrary value and modifier","suites":[],"updatePoint":{"line":382,"column":92,"index":8134},"line":382,"code":"test('matching utilities with a lookup value that looks like an arbitrary value and modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[foo]/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          '[foo]/[bar]': 'hello'\n        }\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[foo\\]\\/\\[bar\\] {\n        value: hello;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with a lookup value that looks like an arbitrary value and modifier (with modifiers = any)","suites":[],"updatePoint":{"line":414,"column":115,"index":8859},"line":414,"code":"test('matching utilities with a lookup value that looks like an arbitrary value and modifier (with modifiers = any)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[foo]/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          '[foo]/[bar]': 'hello'\n        },\n        modifiers: 'any'\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[foo\\]\\/\\[bar\\] {\n        value: hello;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with a lookup value that looks like an arbitrary value and modifier (with modifiers = {})","suites":[],"updatePoint":{"line":447,"column":114,"index":9609},"line":447,"code":"test('matching utilities with a lookup value that looks like an arbitrary value and modifier (with modifiers = {})', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[foo]/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          '[foo]/[bar]': 'hello'\n        },\n        modifiers: {}\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[foo\\]\\/\\[bar\\] {\n        value: hello;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with a lookup value that looks like an arbitrary value and a configured modifier","suites":[],"updatePoint":{"line":480,"column":105,"index":10347},"line":480,"code":"test('matching utilities with a lookup value that looks like an arbitrary value and a configured modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[foo]/bar\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          '[foo]/bar': 'hello'\n        }\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[foo\\]\\/bar {\n        value: hello;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with a lookup value that looks like a configured value and an arbitrary modifier","suites":[],"updatePoint":{"line":512,"column":105,"index":11054},"line":512,"code":"test('matching utilities with a lookup value that looks like a configured value and an arbitrary modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-foo/[bar]\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          'foo/[bar]': 'hello'\n        }\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-foo\\/\\[bar\\] {\n        value: hello;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"matching utilities with a lookup value that does not match the configured type","suites":[],"updatePoint":{"line":544,"column":84,"index":11740},"line":544,"code":"test('matching utilities with a lookup value that does not match the configured type', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-foo\"></div>`\n    }],\n    theme: {},\n    plugins: [function ({\n      matchUtilities\n    }) {\n      matchUtilities({\n        test: (value, {\n          modifier\n        }) => ({\n          value,\n          modifier\n        })\n      }, {\n        values: {\n          foo: 'not-a-percentage'\n        },\n        type: ['percentage']\n      });\n    }],\n    corePlugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-foo {\n        value: not-a-percentage;\n      }\n    `);\n  });\n});","file":"match-utilities.test.js","skipped":false,"dir":"tests"},{"name":"partial arbitrary variants","suites":[],"updatePoint":{"line":4,"column":32,"index":198},"line":4,"code":"test('partial arbitrary variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"potato-[yellow]:bg-yellow-200 potato-[baked]:w-3\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('potato', flavor => `.potato-${flavor} &`);\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .potato-baked .potato-\\[baked\\]\\:w-3 {\n        width: 0.75rem;\n      }\n      .potato-yellow .potato-\\[yellow\\]\\:bg-yellow-200 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 240 138 / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"partial arbitrary variants with at-rules","suites":[],"updatePoint":{"line":33,"column":46,"index":952},"line":33,"code":"test('partial arbitrary variants with at-rules', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"potato-[yellow]:bg-yellow-200 potato-[baked]:w-3\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('potato', flavor => `@media (potato: ${flavor})`);\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (potato: baked) {\n        .potato-\\[baked\\]\\:w-3 {\n          width: 0.75rem;\n        }\n      }\n      @media (potato: yellow) {\n        .potato-\\[yellow\\]\\:bg-yellow-200 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(254 240 138 / var(--tw-bg-opacity));\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"partial arbitrary variants with at-rules and placeholder","suites":[],"updatePoint":{"line":66,"column":62,"index":1793},"line":66,"code":"test('partial arbitrary variants with at-rules and placeholder', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"potato-[yellow]:bg-yellow-200 potato-[baked]:w-3\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('potato', flavor => `@media (potato: ${flavor}) { &:potato }`);\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (potato: baked) {\n        .potato-\\[baked\\]\\:w-3:potato {\n          width: 0.75rem;\n        }\n      }\n      @media (potato: yellow) {\n        .potato-\\[yellow\\]\\:bg-yellow-200:potato {\n          --tw-bg-opacity: 1;\n          background-color: rgb(254 240 138 / var(--tw-bg-opacity));\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"partial arbitrary variants with default values","suites":[],"updatePoint":{"line":99,"column":52,"index":2651},"line":99,"code":"test('partial arbitrary variants with default values', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"tooltip-bottom:mt-2 tooltip-top:mb-2\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('tooltip', side => `&${side}`, {\n        values: {\n          bottom: '[data-location=\"bottom\"]',\n          top: '[data-location=\"top\"]'\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tooltip-bottom\\:mt-2[data-location='bottom'] {\n        margin-top: 0.5rem;\n      }\n      .tooltip-top\\:mb-2[data-location='top'] {\n        margin-bottom: 0.5rem;\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"matched variant values maintain the sort order they are registered in","suites":[],"updatePoint":{"line":132,"column":75,"index":3473},"line":132,"code":"test('matched variant values maintain the sort order they are registered in', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"alphabet-c:underline alphabet-a:underline alphabet-d:underline alphabet-b:underline\"\n        ></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('alphabet', side => `&${side}`, {\n        values: {\n          a: '[data-value=\"a\"]',\n          b: '[data-value=\"b\"]',\n          c: '[data-value=\"c\"]',\n          d: '[data-value=\"d\"]'\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .alphabet-a\\:underline[data-value='a'],\n      .alphabet-b\\:underline[data-value='b'],\n      .alphabet-c\\:underline[data-value='c'],\n      .alphabet-d\\:underline[data-value='d'] {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"matchVariant can return an array of format strings from the function","suites":[],"updatePoint":{"line":169,"column":74,"index":4464},"line":169,"code":"test('matchVariant can return an array of format strings from the function', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test-[a,b,c]:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('test', selector => selector.split(',').map(selector => `&.${selector} > *`));\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .test-\\[a\\,b\\,c\\]\\:underline.a > *,\n      .test-\\[a\\,b\\,c\\]\\:underline.b > *,\n      .test-\\[a\\,b\\,c\\]\\:underline.c > * {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to sort variants","suites":[],"updatePoint":{"line":196,"column":39,"index":5158},"line":196,"code":"it('should be possible to sort variants', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"testmin-[500px]:underline testmin-[700px]:italic\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('testmin', value => `@media (min-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(a.value) - parseInt(z.value);\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 500px) {\n        .testmin-\\[500px\\]\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n      @media (min-width: 700px) {\n        .testmin-\\[700px\\]\\:italic {\n          font-style: italic;\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to compare arbitrary variants and hardcoded variants","suites":[],"updatePoint":{"line":236,"column":75,"index":6119},"line":236,"code":"it('should be possible to compare arbitrary variants and hardcoded variants', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"testmin-[700px]:italic testmin-example:italic testmin-[500px]:italic\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('testmin', value => `@media (min-width: ${value})`, {\n        values: {\n          example: '600px'\n        },\n        sort(a, z) {\n          return parseInt(a.value) - parseInt(z.value);\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 500px) {\n        .testmin-\\[500px\\]\\:italic {\n          font-style: italic;\n        }\n      }\n      @media (min-width: 600px) {\n        .testmin-example\\:italic {\n          font-style: italic;\n        }\n      }\n      @media (min-width: 700px) {\n        .testmin-\\[700px\\]\\:italic {\n          font-style: italic;\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to sort stacked arbitrary variants correctly","suites":[],"updatePoint":{"line":284,"column":67,"index":7249},"line":284,"code":"it('should be possible to sort stacked arbitrary variants correctly', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <!-- 4 -->\n            <div class=\"testmin-[150px]:testmax-[400px]:underline\"></div>\n            <!-- 2 -->\n            <div class=\"testmin-[100px]:testmax-[350px]:underline\"></div>\n            <!-- 1 -->\n            <div class=\"testmin-[100px]:testmax-[300px]:underline\"></div>\n            <!-- 3 -->\n            <div class=\"testmin-[100px]:testmax-[400px]:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('testmin', value => `@media (min-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(a.value) - parseInt(z.value);\n        }\n      });\n      matchVariant('testmax', value => `@media (max-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(z.value) - parseInt(a.value);\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 100px) {\n        @media (max-width: 400px) {\n          .testmin-\\[100px\\]\\:testmax-\\[400px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n        @media (max-width: 350px) {\n          .testmin-\\[100px\\]\\:testmax-\\[350px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n        @media (max-width: 300px) {\n          .testmin-\\[100px\\]\\:testmax-\\[300px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n      @media (min-width: 150px) {\n        @media (max-width: 400px) {\n          .testmin-\\[150px\\]\\:testmax-\\[400px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should maintain sort from other variants, if sort functions of arbitrary variants return 0","suites":[],"updatePoint":{"line":350,"column":94,"index":9192},"line":350,"code":"it('should maintain sort from other variants, if sort functions of arbitrary variants return 0', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"testmin-[100px]:testmax-[200px]:focus:underline\"></div>\n            <div class=\"testmin-[100px]:testmax-[200px]:hover:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('testmin', value => `@media (min-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(a.value) - parseInt(z.value);\n        }\n      });\n      matchVariant('testmax', value => `@media (max-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(z.value) - parseInt(a.value);\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 100px) {\n        @media (max-width: 200px) {\n          .testmin-\\[100px\\]\\:testmax-\\[200px\\]\\:hover\\:underline:hover,\n          .testmin-\\[100px\\]\\:testmax-\\[200px\\]\\:focus\\:underline:focus {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should sort arbitrary variants left to right (1)","suites":[],"updatePoint":{"line":394,"column":52,"index":10417},"line":394,"code":"it('should sort arbitrary variants left to right (1)', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"testmin-[200px]:testmax-[400px]:underline\"></div>\n            <div class=\"testmin-[200px]:testmax-[300px]:underline\"></div>\n            <div class=\"testmin-[100px]:testmax-[400px]:underline\"></div>\n            <div class=\"testmin-[100px]:testmax-[300px]:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('testmin', value => `@media (min-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(a.value) - parseInt(z.value);\n        }\n      });\n      matchVariant('testmax', value => `@media (max-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(z.value) - parseInt(a.value);\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 100px) {\n        @media (max-width: 400px) {\n          .testmin-\\[100px\\]\\:testmax-\\[400px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n        @media (max-width: 300px) {\n          .testmin-\\[100px\\]\\:testmax-\\[300px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n      @media (min-width: 200px) {\n        @media (max-width: 400px) {\n          .testmin-\\[200px\\]\\:testmax-\\[400px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n        @media (max-width: 300px) {\n          .testmin-\\[200px\\]\\:testmax-\\[300px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should sort arbitrary variants left to right (2)","suites":[],"updatePoint":{"line":456,"column":52,"index":12226},"line":456,"code":"it('should sort arbitrary variants left to right (2)', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"testmax-[400px]:testmin-[200px]:underline\"></div>\n            <div class=\"testmax-[300px]:testmin-[200px]:underline\"></div>\n            <div class=\"testmax-[400px]:testmin-[100px]:underline\"></div>\n            <div class=\"testmax-[300px]:testmin-[100px]:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('testmin', value => `@media (min-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(a.value) - parseInt(z.value);\n        }\n      });\n      matchVariant('testmax', value => `@media (max-width: ${value})`, {\n        sort(a, z) {\n          return parseInt(z.value) - parseInt(a.value);\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (max-width: 400px) {\n        @media (min-width: 100px) {\n          .testmax-\\[400px\\]\\:testmin-\\[100px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n        @media (min-width: 200px) {\n          .testmax-\\[400px\\]\\:testmin-\\[200px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n\n      @media (max-width: 300px) {\n        @media (min-width: 100px) {\n          .testmax-\\[300px\\]\\:testmin-\\[100px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n        @media (min-width: 200px) {\n          .testmax-\\[300px\\]\\:testmin-\\[200px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should guarantee that we are not passing values from other variants to the wrong function","suites":[],"updatePoint":{"line":519,"column":93,"index":14077},"line":519,"code":"it('should guarantee that we are not passing values from other variants to the wrong function', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"testmin-[200px]:testmax-[400px]:underline\"></div>\n            <div class=\"testmin-[200px]:testmax-[300px]:underline\"></div>\n            <div class=\"testmin-[100px]:testmax-[400px]:underline\"></div>\n            <div class=\"testmin-[100px]:testmax-[300px]:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('testmin', value => `@media (min-width: ${value})`, {\n        sort(a, z) {\n          let lookup = ['100px', '200px'];\n          if (lookup.indexOf(a.value) === -1 || lookup.indexOf(z.value) === -1) {\n            throw new Error('We are seeing values that should not be there!');\n          }\n          return lookup.indexOf(a.value) - lookup.indexOf(z.value);\n        }\n      });\n      matchVariant('testmax', value => `@media (max-width: ${value})`, {\n        sort(a, z) {\n          let lookup = ['300px', '400px'];\n          if (lookup.indexOf(a.value) === -1 || lookup.indexOf(z.value) === -1) {\n            throw new Error('We are seeing values that should not be there!');\n          }\n          return lookup.indexOf(z.value) - lookup.indexOf(a.value);\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 100px) {\n        @media (max-width: 400px) {\n          .testmin-\\[100px\\]\\:testmax-\\[400px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n\n        @media (max-width: 300px) {\n          .testmin-\\[100px\\]\\:testmax-\\[300px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n\n      @media (min-width: 200px) {\n        @media (max-width: 400px) {\n          .testmin-\\[200px\\]\\:testmax-\\[400px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n\n        @media (max-width: 300px) {\n          .testmin-\\[200px\\]\\:testmax-\\[300px\\]\\:underline {\n            text-decoration-line: underline;\n          }\n        }\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should default to the DEFAULT value for variants","suites":[],"updatePoint":{"line":592,"column":52,"index":16345},"line":592,"code":"it('should default to the DEFAULT value for variants', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('foo', value => `.foo${value} &`, {\n        values: {\n          DEFAULT: '.bar'\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo.bar .foo\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should not generate anything if the matchVariant does not have a DEFAULT value configured","suites":[],"updatePoint":{"line":625,"column":93,"index":17066},"line":625,"code":"it('should not generate anything if the matchVariant does not have a DEFAULT value configured', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('foo', value => `.foo${value} &`);\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use `null` as a DEFAULT value","suites":[],"updatePoint":{"line":650,"column":55,"index":17597},"line":650,"code":"it('should be possible to use `null` as a DEFAULT value', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('foo', value => `.foo${value === null ? '-good' : '-bad'} &`, {\n        values: {\n          DEFAULT: null\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo-good .foo\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use `undefined` as a DEFAULT value","suites":[],"updatePoint":{"line":683,"column":60,"index":18312},"line":683,"code":"it('should be possible to use `undefined` as a DEFAULT value', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('foo', value => `.foo${value === undefined ? '-good' : '-bad'} &`, {\n        values: {\n          DEFAULT: undefined\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo-good .foo\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use `undefined` as a DEFAULT value","suites":[],"updatePoint":{"line":716,"column":60,"index":19037},"line":716,"code":"it('should be possible to use `undefined` as a DEFAULT value', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div class=\"foo:underline\"></div>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [({\n      matchVariant\n    }) => {\n      matchVariant('foo', value => `.foo${value === undefined ? '-good' : '-bad'} &`, {\n        values: {\n          DEFAULT: undefined\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo-good .foo\\:underline {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"should not break things","suites":[],"updatePoint":{"line":749,"column":27,"index":19729},"line":749,"code":"it('should not break things', () => {\n  let config = {};\n  let context = createContext(resolveConfig(config));\n  let [[, fn]] = context.variantMap.get('group');\n  let format;\n  expect(fn({\n    format(input) {\n      format = input;\n    }\n  })).toBe(undefined);\n  expect(format).toBe(':merge(.group) &');\n});","file":"match-variants.test.js","skipped":false,"dir":"tests"},{"name":"sorts min and max correctly relative to screens and each other","suites":[],"updatePoint":{"line":9,"column":66,"index":218},"line":9,"code":"it('sorts min and max correctly relative to screens and each other', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"font-bold max-[800px]:font-bold max-[700px]:font-bold sm:font-bold min-[700px]:font-bold md:font-bold min-[800px]:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: defaultScreens\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n      @media (max-width: 800px) {\n        .max-\\[800px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (max-width: 700px) {\n        .max-\\[700px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 640px) {\n        .sm\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 700px) {\n        .min-\\[700px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 768px) {\n        .md\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 800px) {\n        .min-\\[800px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"works when using min variants screens config is empty and variants all use the same unit","suites":[],"updatePoint":{"line":66,"column":92,"index":1562},"line":66,"code":"it('works when using min variants screens config is empty and variants all use the same unit', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"font-bold sm:font-bold min-[700px]:font-bold md:font-bold min-[800px]:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {}\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 700px) {\n      .min-\\[700px\\]\\:font-bold {\n        font-weight: 700;\n      }\n    }\n    @media (min-width: 800px) {\n      .min-\\[800px\\]\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().not.toHaveBeenWarned();\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"works when using max variants screens config is empty and variants all use the same unit","suites":[],"updatePoint":{"line":103,"column":92,"index":2403},"line":103,"code":"it('works when using max variants screens config is empty and variants all use the same unit', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"font-bold max-[800px]:font-bold max-[700px]:font-bold sm:font-bold md:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {}\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n      @media (max-width: 800px) {\n        .max-\\[800px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (max-width: 700px) {\n        .max-\\[700px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"converts simple min-width screens for max variant","suites":[],"updatePoint":{"line":140,"column":53,"index":3204},"line":140,"code":"it('converts simple min-width screens for max variant', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"font-bold max-lg:font-bold max-[700px]:font-bold max-sm:font-bold max-[300px]:font-bold sm:font-bold md:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: defaultScreens\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n      @media not all and (min-width: 1024px) {\n        .max-lg\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (max-width: 700px) {\n        .max-\\[700px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media not all and (min-width: 640px) {\n        .max-sm\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (max-width: 300px) {\n        .max-\\[300px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 640px) {\n        .sm\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 768px) {\n        .md\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"does not have keyed screens for min variant","suites":[],"updatePoint":{"line":197,"column":47,"index":4498},"line":197,"code":"it('does not have keyed screens for min variant', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"min-sm:font-bold min-lg:font-bold font-bold min-[300px]:font-bold sm:font-bold min-[700px]:font-bold md:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: defaultScreens\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n      @media (min-width: 300px) {\n        .min-\\[300px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 640px) {\n        .sm\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 700px) {\n        .min-\\[700px\\]\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 768px) {\n        .md\\:font-bold {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using min variants with complex screen configs","suites":[],"updatePoint":{"line":244,"column":61,"index":5563},"line":244,"code":"it('warns when using min variants with complex screen configs', async () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"font-bold sm:font-bold min-[700px]:font-bold md:font-bold\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {\n        sm: '640px',\n        md: '768px',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px',\n        // Any presence of an object makes it complex\n        yodawg: {\n          min: '700px'\n        }\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 640px) {\n      .sm\\:font-bold {\n        font-weight: 700;\n      }\n    }\n    @media (min-width: 768px) {\n      .md\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['complex-screen-config']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using min variants with simple configs containing mixed units","suites":[],"updatePoint":{"line":287,"column":76,"index":6551},"line":287,"code":"it('warns when using min variants with simple configs containing mixed units', async () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"font-bold sm:font-bold min-[700px]:font-bold md:font-bold\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {\n        sm: '640px',\n        md: '48rem',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px'\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 640px) {\n      .sm\\:font-bold {\n        font-weight: 700;\n      }\n    }\n    @media (min-width: 48rem) {\n      .md\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['mixed-screen-units']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using min variants with mixed units (with screens config)","suites":[],"updatePoint":{"line":326,"column":72,"index":7426},"line":326,"code":"it('warns when using min variants with mixed units (with screens config)', async () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"min-[700rem]:font-bold font-bold sm:font-bold md:font-bold\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {\n        sm: '640px',\n        md: '768px',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px'\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 640px) {\n      .sm\\:font-bold {\n        font-weight: 700;\n      }\n    }\n    @media (min-width: 768px) {\n      .md\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['minmax-have-mixed-units']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using min variants with mixed units (with no screens config)","suites":[],"updatePoint":{"line":365,"column":75,"index":8310},"line":365,"code":"it('warns when using min variants with mixed units (with no screens config)', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"min-[700rem]:font-bold font-bold sm:font-bold min-[700px]:font-bold md:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {}\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 700px) {\n      .min-\\[700px\\]\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['minmax-have-mixed-units']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using max variants with complex screen configs","suites":[],"updatePoint":{"line":397,"column":61,"index":9042},"line":397,"code":"it('warns when using max variants with complex screen configs', async () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"font-bold max-[700px]:font-bold sm:font-bold md:font-bold\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {\n        sm: '640px',\n        md: '768px',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px',\n        // Any presence of an object makes it complex\n        yodawg: {\n          min: '700px'\n        }\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 640px) {\n      .sm\\:font-bold {\n        font-weight: 700;\n      }\n    }\n    @media (min-width: 768px) {\n      .md\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['complex-screen-config']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using max variants with simple configs containing mixed units","suites":[],"updatePoint":{"line":440,"column":76,"index":10030},"line":440,"code":"it('warns when using max variants with simple configs containing mixed units', async () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"font-bold max-[700px]:font-bold sm:font-bold md:font-bold\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {\n        sm: '640px',\n        md: '48rem',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px'\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 640px) {\n      .sm\\:font-bold {\n        font-weight: 700;\n      }\n    }\n    @media (min-width: 48rem) {\n      .md\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['mixed-screen-units']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using max variants with mixed units (with screens config)","suites":[],"updatePoint":{"line":479,"column":72,"index":10905},"line":479,"code":"it('warns when using max variants with mixed units (with screens config)', async () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"max-[700rem]:font-bold font-bold sm:font-bold md:font-bold\"></div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {\n        sm: '640px',\n        md: '768px',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px'\n      }\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (min-width: 640px) {\n      .sm\\:font-bold {\n        font-weight: 700;\n      }\n    }\n    @media (min-width: 768px) {\n      .md\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['minmax-have-mixed-units']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using max variants with mixed units (with no screens config)","suites":[],"updatePoint":{"line":518,"column":75,"index":11789},"line":518,"code":"it('warns when using max variants with mixed units (with no screens config)', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"max-[700rem]:font-bold font-bold max-[700px]:font-bold sm:font-bold md:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {}\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (max-width: 700px) {\n      .max-\\[700px\\]\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['minmax-have-mixed-units']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"warns when using min and max variants with mixed units (with no screens config)","suites":[],"updatePoint":{"line":550,"column":83,"index":12543},"line":550,"code":"it('warns when using min and max variants with mixed units (with no screens config)', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"max-[700rem]:font-bold font-bold sm:font-bold min-[700px]:font-bold md:font-bold\"\n          ></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      screens: {}\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .font-bold {\n      font-weight: 700;\n    }\n    @media (max-width: 700rem) {\n      .max-\\[700rem\\]\\:font-bold {\n        font-weight: 700;\n      }\n    }\n  `);\n  expect().toHaveBeenWarnedWith(['minmax-have-mixed-units']);\n});","file":"min-max-screen-variants.test.js","skipped":false,"dir":"tests"},{"name":"should generate \"$after\" from \"$before\"","suites":[],"line":2,"code":"it.each`\n  before                                                                 | after\n  ${'*'}                                                                 | ${'*'}\n  ${'*:hover'}                                                           | ${'*'}\n  ${'* > *'}                                                             | ${'* > *'}\n  ${'.foo'}                                                              | ${'.foo'}\n  ${'.foo:hover'}                                                        | ${'.foo'}\n  ${'.foo:focus:hover'}                                                  | ${'.foo'}\n  ${'li:first-child'}                                                    | ${'li'}\n  ${'li:before'}                                                         | ${'li:before'}\n  ${'li::before'}                                                        | ${'li::before'}\n  ${'#app .foo'}                                                         | ${'.foo'}\n  ${'#app'}                                                              | ${'[id=app]'}\n  ${'#app.other'}                                                        | ${'.other'}\n  ${'input[type=\"text\"]'}                                                | ${'[type=\"text\"]'}\n  ${'input[type=\"text\"].foo'}                                            | ${'.foo'}\n  ${'.group .group\\\\:foo'}                                               | ${'.group\\\\:foo'}\n  ${'.group:hover .group-hover\\\\:foo'}                                   | ${'.group-hover\\\\:foo'}\n  ${'.owl > * + *'}                                                      | ${'.owl > *'}\n  ${'.owl > :not([hidden]) + :not([hidden])'}                            | ${'.owl > *'}\n  ${'.group:hover .group-hover\\\\:owl > :not([hidden]) + :not([hidden])'} | ${'.group-hover\\\\:owl > *'}\n  ${'.peer:first-child ~ .peer-first\\\\:shadow-md'}                       | ${'.peer-first\\\\:shadow-md'}\n  ${'.whats ~ .next > span:hover'}                                       | ${'span'}\n  ${'.foo .bar ~ .baz > .next > span > article:hover'}                   | ${'article'}\n`('should generate \"$after\" from \"$before\"', ({\n  before,\n  after\n}) => {\n  expect(elementSelectorParser.transformSync(before).join(', ')).toEqual(after);\n});","file":"minimum-impact-selector.test.js","skipped":false,"dir":"tests"},{"name":"modify selectors","suites":[],"updatePoint":{"line":3,"column":22,"index":122},"line":3,"code":"test('modify selectors', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"font-bold\"></div>\n          <div class=\"foo:font-bold\"></div>\n          <div class=\"foo:hover:font-bold\"></div>\n          <div class=\"sm:foo:font-bold\"></div>\n          <div class=\"md:foo:focus:font-bold\"></div>\n          <div class=\"markdown\">\n            <p>Lorem ipsum dolor sit amet...</p>\n          </div>\n          <div class=\"foo:markdown\">\n            <p>Lorem ipsum dolor sit amet...</p>\n          </div>\n          <div class=\"foo:visited:markdown\">\n            <p>Lorem ipsum dolor sit amet...</p>\n          </div>\n          <div class=\"lg:foo:disabled:markdown\">\n            <p>Lorem ipsum dolor sit amet...</p>\n          </div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: [function ({\n      addVariant\n    }) {\n      addVariant('foo', ({\n        modifySelectors,\n        separator\n      }) => {\n        modifySelectors(({\n          selector\n        }) => {\n          return selectorParser(selectors => {\n            selectors.walkClasses(classNode => {\n              classNode.value = `foo${separator}${classNode.value}`;\n              classNode.parent.insertBefore(classNode, selectorParser().astSync(`.foo `));\n            });\n          }).processSync(selector);\n        });\n      });\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer components {\n      .markdown > p {\n        margin-top: 12px;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .markdown > p {\n        margin-top: 12px;\n      }\n      .font-bold {\n        font-weight: 700;\n      }\n      .foo .foo\\:markdown > p,\n      .foo .foo\\:visited\\:markdown:visited > p {\n        margin-top: 12px;\n      }\n      @media (min-width: 1024px) {\n        .foo .lg\\:foo\\:disabled\\:markdown:disabled > p {\n          margin-top: 12px;\n        }\n      }\n      .foo .foo\\:font-bold,\n      .foo .foo\\:hover\\:font-bold:hover {\n        font-weight: 700;\n      }\n      @media (min-width: 640px) {\n        .foo .sm\\:foo\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      @media (min-width: 768px) {\n        .foo .md\\:foo\\:focus\\:font-bold:focus {\n          font-weight: 700;\n        }\n      }\n    `);\n  });\n});","file":"modify-selectors.test.js","skipped":false,"dir":"tests"},{"name":"plugins mutating rules after tailwind doesnt break it","suites":[],"updatePoint":{"line":14,"column":59,"index":414},"line":14,"code":"test('plugins mutating rules after tailwind doesnt break it', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-foo\"></div>`\n    }],\n    theme: {\n      backgroundImage: {\n        foo: 'url(\"./foo.png\")'\n      }\n    },\n    plugins: []\n  };\n  function checkResult(result) {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-foo {\n        background-image: url('./foo.png');\n      }\n    `);\n  }\n\n  // Verify the first run produces the expected result\n  let firstRun = await run('@tailwind utilities', config);\n  checkResult(firstRun);\n\n  // Outside of the context of tailwind jit more postcss plugins may operate on the AST:\n  // In this case we have a plugin that mutates rules directly\n  await postcss([pluginThatMutatesRules()]).process(firstRun, {\n    from: path.resolve(__filename)\n  });\n\n  // Verify subsequent runs don't produce mutated rules\n  let secondRun = await run('@tailwind utilities', config);\n  checkResult(secondRun);\n});","file":"mutable.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use negated content patterns","suites":[],"updatePoint":{"line":3,"column":54,"index":134},"line":3,"code":"it('should be possible to use negated content patterns', () => {\n  let config = {\n    content: [path.resolve(__dirname, './negated-content-*.test.html'), '!' + path.resolve(__dirname, './negated-content-ignore.test.html')],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"negated-content.test.js","skipped":false,"dir":"tests"},{"name":"it negates numeric CSS values","suites":[],"updatePoint":{"line":2,"column":35,"index":87},"line":2,"code":"test('it negates numeric CSS values', () => {\n  expect(negateValue('5')).toEqual('-5');\n  expect(negateValue('10px')).toEqual('-10px');\n  expect(negateValue('18rem')).toEqual('-18rem');\n  expect(negateValue('-10')).toEqual('10');\n  expect(negateValue('-7ch')).toEqual('7ch');\n});","file":"negateValue.test.js","skipped":false,"dir":"tests"},{"name":"values that cannot be negated become undefined","suites":[],"updatePoint":{"line":9,"column":52,"index":384},"line":9,"code":"test('values that cannot be negated become undefined', () => {\n  expect(negateValue('auto')).toBeUndefined();\n  expect(negateValue('cover')).toBeUndefined();\n});","file":"negateValue.test.js","skipped":false,"dir":"tests"},{"name":"using a negative prefix with a negative scale value","suites":[],"updatePoint":{"line":2,"column":57,"index":103},"line":2,"code":"test('using a negative prefix with a negative scale value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mt-2 -mt-2\"></div>`\n    }],\n    theme: {\n      margin: {\n        2: '8px',\n        '-2': '-4px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-2 {\n        margin-top: -4px;\n      }\n      .mt-2 {\n        margin-top: 8px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"using a negative scale value with a plugin that does not support dynamic negative values","suites":[],"updatePoint":{"line":25,"column":94,"index":614},"line":25,"code":"test('using a negative scale value with a plugin that does not support dynamic negative values', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-opacity-50\"></div>`\n    }],\n    theme: {\n      opacity: {\n        '-50': '0.5'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-opacity-50 {\n        opacity: 0.5;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"using a negative prefix without a negative scale value","suites":[],"updatePoint":{"line":44,"column":60,"index":1030},"line":44,"code":"test('using a negative prefix without a negative scale value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mt-5 -mt-5\"></div>`\n    }],\n    theme: {\n      margin: {\n        5: '20px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-5 {\n        margin-top: -20px;\n      }\n      .mt-5 {\n        margin-top: 20px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"being an asshole","suites":[],"updatePoint":{"line":66,"column":22,"index":1450},"line":66,"code":"test('being an asshole', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-mt-[10px]\"></div>`\n    }],\n    theme: {\n      margin: {\n        '-[10px]': '55px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-\\[10px\\] {\n        margin-top: 55px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"being a real asshole","suites":[],"updatePoint":{"line":85,"column":26,"index":1840},"line":85,"code":"test('being a real asshole', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-mt-[10px]\"></div>`\n    }],\n    theme: {\n      margin: {\n        '[10px]': '55px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-\\[10px\\] {\n        margin-top: -55px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"a value that includes a variable","suites":[],"updatePoint":{"line":104,"column":38,"index":2242},"line":104,"code":"test('a value that includes a variable', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mt-5 -mt-5\"></div>`\n    }],\n    theme: {\n      margin: {\n        5: 'var(--sizing-5)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-5 {\n        margin-top: calc(var(--sizing-5) * -1);\n      }\n      .mt-5 {\n        margin-top: var(--sizing-5);\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"a value that includes a calc","suites":[],"updatePoint":{"line":126,"column":34,"index":2717},"line":126,"code":"test('a value that includes a calc', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mt-5 -mt-5\"></div>`\n    }],\n    theme: {\n      margin: {\n        5: 'calc(52px * -3)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-5 {\n        margin-top: 156px;\n      }\n      .mt-5 {\n        margin-top: -156px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"a value that includes min/max/clamp functions","suites":[],"updatePoint":{"line":148,"column":51,"index":3179},"line":148,"code":"test('a value that includes min/max/clamp functions', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mt-min -mt-min mt-max -mt-max mt-clamp -mt-clamp\"></div>`\n    }],\n    theme: {\n      margin: {\n        min: 'min(100vmin, 3rem)',\n        max: 'max(100vmax, 3rem)',\n        clamp: 'clamp(1rem, 100vh, 3rem)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-clamp {\n        margin-top: calc(-1 * clamp(1rem, 100vh, 3rem));\n      }\n      .-mt-max {\n        margin-top: calc(-1 * max(100vmax, 3rem));\n      }\n      .-mt-min {\n        margin-top: calc(-1 * min(100vmin, 3rem));\n      }\n      .mt-clamp {\n        margin-top: clamp(1rem, 100vh, 3rem);\n      }\n      .mt-max {\n        margin-top: max(100vmax, 3rem);\n      }\n      .mt-min {\n        margin-top: min(100vmin, 3rem);\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"a keyword value","suites":[],"updatePoint":{"line":184,"column":21,"index":4068},"line":184,"code":"test('a keyword value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-mt-auto mt-auto\"></div>`\n    }],\n    theme: {\n      margin: {\n        auto: 'auto'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .mt-auto {\n        margin-top: auto;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"a zero value","suites":[],"updatePoint":{"line":203,"column":18,"index":4446},"line":203,"code":"test('a zero value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mt-0 -mt-0\"></div>`\n    }],\n    theme: {\n      margin: {\n        0: '0'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-0,\n      .mt-0 {\n        margin-top: 0;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"a color","suites":[],"updatePoint":{"line":223,"column":13,"index":4815},"line":223,"code":"test('a color', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-bg-red\"></div>`\n    }],\n    theme: {\n      colors: {\n        red: 'red'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values","suites":[],"updatePoint":{"line":238,"column":22,"index":5130},"line":238,"code":"test('arbitrary values', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-mt-[10px]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-\\[10px\\] {\n        margin-top: -10px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"negating a negative scale value","suites":[],"updatePoint":{"line":252,"column":37,"index":5462},"line":252,"code":"test('negating a negative scale value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-mt-weird\"></div>`\n    }],\n    theme: {\n      margin: {\n        weird: '-15px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt-weird {\n        margin-top: 15px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"negating a default value","suites":[],"updatePoint":{"line":271,"column":30,"index":5849},"line":271,"code":"test('negating a default value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-mt\"></div>`\n    }],\n    theme: {\n      margin: {\n        DEFAULT: '15px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt {\n        margin-top: -15px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"using a negative prefix with a negative default scale value","suites":[],"updatePoint":{"line":290,"column":65,"index":6261},"line":290,"code":"test('using a negative prefix with a negative default scale value', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"mt -mt\"></div>`\n    }],\n    theme: {\n      margin: {\n        DEFAULT: '8px',\n        '-DEFAULT': '-4px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-mt {\n        margin-top: -4px;\n      }\n      .mt {\n        margin-top: 8px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"negating a default value with a configured prefix","suites":[],"updatePoint":{"line":313,"column":55,"index":6737},"line":313,"code":"test('negating a default value with a configured prefix', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"tw--mt\"></div>`\n    }],\n    theme: {\n      margin: {\n        DEFAULT: '15px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .tw--mt {\n        margin-top: -15px;\n      }\n    `);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary value keywords should be ignored","suites":[],"updatePoint":{"line":333,"column":48,"index":7157},"line":333,"code":"test('arbitrary value keywords should be ignored', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"-mt-[auto]\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css``);\n  });\n});","file":"negative-prefix.test.js","skipped":false,"dir":"tests"},{"name":"should normalize content $config","suites":[],"line":4,"code":"it.each`\n  config\n  ${{\n  purge: [{\n    raw: 'text-center'\n  }]\n}}\n  ${{\n  purge: {\n    content: [{\n      raw: 'text-center'\n    }]\n  }\n}}\n  ${{\n  content: {\n    files: [],\n    content: [{\n      raw: 'text-center'\n    }]\n  }\n}}\n`('should normalize content $config', ({\n  config\n}) => {\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .text-center {\n        text-align: center;\n      }\n    `);\n  });\n});","file":"normalize-config.test.js","skipped":false,"dir":"tests"},{"name":"should normalize safelist $config","suites":[],"line":37,"code":"it.each`\n  config\n  ${{\n  purge: {\n    safelist: ['text-center']\n  }\n}}\n  ${{\n  purge: {\n    options: {\n      safelist: ['text-center']\n    }\n  }\n}}\n  ${{\n  content: {\n    files: [],\n    safelist: ['text-center']\n  }\n}}\n`('should normalize safelist $config', ({\n  config\n}) => {\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .text-center {\n        text-align: center;\n      }\n    `);\n  });\n});","file":"normalize-config.test.js","skipped":false,"dir":"tests"},{"name":"should normalize extractors $config","suites":[],"line":68,"code":"test.each`\n  config\n  ${{\n  purge: {\n    content: [{\n      raw: 'text-center'\n    }],\n    extract: () => ['font-bold']\n  }\n}}\n  ${{\n  purge: {\n    content: [{\n      raw: 'text-center'\n    }],\n    extract: {\n      DEFAULT: () => ['font-bold']\n    }\n  }\n}}\n  ${{\n  purge: {\n    content: [{\n      raw: 'text-center'\n    }],\n    options: {\n      defaultExtractor: () => ['font-bold']\n    }\n  }\n}}\n  ${{\n  purge: {\n    content: [{\n      raw: 'text-center'\n    }],\n    options: {\n      extractors: [{\n        extractor: () => ['font-bold'],\n        extensions: ['html']\n      }]\n    }\n  }\n}}\n  ${{\n  purge: {\n    content: [{\n      raw: 'text-center'\n    }],\n    extract: {\n      html: () => ['font-bold']\n    }\n  }\n}}\n`('should normalize extractors $config', ({\n  config\n}) => {\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"normalize-config.test.js","skipped":false,"dir":"tests"},{"name":"should still be possible to use the \"old\" v2 config","suites":[],"updatePoint":{"line":132,"column":57,"index":2125},"line":132,"code":"test('should still be possible to use the \"old\" v2 config', () => {\n  let config = {\n    purge: {\n      content: [{\n        raw: 'text-svelte',\n        extension: 'svelte'\n      }, {\n        raw: '# My Big Heading',\n        extension: 'md'\n      }],\n      options: {\n        defaultExtractor(content) {\n          return content.split(' ').concat(['font-bold']);\n        }\n      },\n      extract: {\n        svelte(content) {\n          return content.replace('svelte', 'center').split(' ');\n        }\n      },\n      transform: {\n        md() {\n          return 'text-4xl';\n        }\n      }\n    },\n    theme: {\n      extends: {}\n    },\n    variants: {\n      extends: {}\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .text-center {\n        text-align: center;\n      }\n      .text-4xl {\n        font-size: 2.25rem;\n        line-height: 2.5rem;\n      }\n      .font-bold {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"normalize-config.test.js","skipped":false,"dir":"tests"},{"name":"should keep content files with globs","suites":[],"updatePoint":{"line":180,"column":40,"index":3114},"line":180,"code":"it('should keep content files with globs', () => {\n  let config = {\n    content: ['./example-folder/**/*.{html,js}']\n  };\n  expect(normalizeConfig(resolveConfig(config)).content).toEqual({\n    files: ['./example-folder/**/*.{html,js}'],\n    relative: false,\n    extract: {},\n    transform: {}\n  });\n});","file":"normalize-config.test.js","skipped":false,"dir":"tests"},{"name":"should warn when we detect invalid globs with incorrect brace expansion","suites":[],"updatePoint":{"line":191,"column":75,"index":3452},"line":191,"code":"it('should warn when we detect invalid globs with incorrect brace expansion', () => {\n  let config = {\n    content: ['./{example-folder}/**/*.{html,js}', './{example-folder}/**/*.{html}', './example-folder/**/*.{html}']\n  };\n  let normalizedConfig = normalizeConfig(resolveConfig(config)).content;\n\n  // No rewrite happens\n  expect(normalizedConfig).toEqual({\n    files: ['./{example-folder}/**/*.{html,js}', './{example-folder}/**/*.{html}', './example-folder/**/*.{html}'],\n    relative: false,\n    extract: {},\n    transform: {}\n  });\n  expect().toHaveBeenWarnedWith(['invalid-glob-braces']);\n});","file":"normalize-config.test.js","skipped":false,"dir":"tests"},{"name":"normalize data: %s","suites":[],"line":15,"code":"it.each(table)('normalize data: %s', (input, output) => {\n  expect(normalize(input)).toBe(output);\n});","file":"normalize-data-types.test.js","skipped":false,"dir":"tests"},{"name":"should normalize an array of string values","suites":[],"updatePoint":{"line":2,"column":46,"index":112},"line":2,"code":"it('should normalize an array of string values', () => {\n  let screens = ['768px', '1200px'];\n  expect(normalizeScreens(screens)).toEqual([{\n    name: '768px',\n    not: false,\n    values: [{\n      min: '768px',\n      max: undefined\n    }]\n  }, {\n    name: '1200px',\n    not: false,\n    values: [{\n      min: '1200px',\n      max: undefined\n    }]\n  }]);\n});","file":"normalize-screens.test.js","skipped":false,"dir":"tests"},{"name":"should normalize an object with string values","suites":[],"updatePoint":{"line":20,"column":49,"index":472},"line":20,"code":"it('should normalize an object with string values', () => {\n  let screens = {\n    a: '768px',\n    b: '1200px'\n  };\n  expect(normalizeScreens(screens)).toEqual([{\n    name: 'a',\n    not: false,\n    values: [{\n      min: '768px',\n      max: undefined\n    }]\n  }, {\n    name: 'b',\n    not: false,\n    values: [{\n      min: '1200px',\n      max: undefined\n    }]\n  }]);\n});","file":"normalize-screens.test.js","skipped":false,"dir":"tests"},{"name":"should normalize an object with object values","suites":[],"updatePoint":{"line":41,"column":49,"index":841},"line":41,"code":"it('should normalize an object with object values', () => {\n  let screens = {\n    a: {\n      min: '768px'\n    },\n    b: {\n      max: '1200px'\n    }\n  };\n  expect(normalizeScreens(screens)).toEqual([{\n    name: 'a',\n    not: false,\n    values: [{\n      min: '768px',\n      max: undefined\n    }]\n  }, {\n    name: 'b',\n    not: false,\n    values: [{\n      min: undefined,\n      max: '1200px'\n    }]\n  }]);\n});","file":"normalize-screens.test.js","skipped":false,"dir":"tests"},{"name":"should normalize an object with multiple object values","suites":[],"updatePoint":{"line":66,"column":58,"index":1257},"line":66,"code":"it('should normalize an object with multiple object values', () => {\n  let screens = {\n    a: [{\n      min: '768px'\n    }, {\n      max: '1200px'\n    }]\n  };\n  expect(normalizeScreens(screens)).toEqual([{\n    name: 'a',\n    not: false,\n    values: [{\n      max: undefined,\n      min: '768px',\n      raw: undefined\n    }, {\n      max: '1200px',\n      min: undefined,\n      raw: undefined\n    }]\n  }]);\n});","file":"normalize-screens.test.js","skipped":false,"dir":"tests"},{"name":"should normalize an object with object values (min-width normalized to width)","suites":[],"updatePoint":{"line":88,"column":81,"index":1684},"line":88,"code":"it('should normalize an object with object values (min-width normalized to width)', () => {\n  let screens = {\n    a: {\n      'min-width': '768px'\n    },\n    b: {\n      max: '1200px'\n    }\n  };\n  expect(normalizeScreens(screens)).toEqual([{\n    name: 'a',\n    not: false,\n    values: [{\n      min: '768px',\n      max: undefined\n    }]\n  }, {\n    name: 'b',\n    not: false,\n    values: [{\n      min: undefined,\n      max: '1200px'\n    }]\n  }]);\n});","file":"normalize-screens.test.js","skipped":false,"dir":"tests"},{"name":"opacity","suites":[],"updatePoint":{"line":2,"column":13,"index":59},"line":2,"code":"test('opacity', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"divide-black\"></div>\n          <div class=\"border-black\"></div>\n          <div class=\"bg-black\"></div>\n          <div class=\"text-black\"></div>\n          <div class=\"placeholder-black\"></div>\n        `\n    }],\n    corePlugins: {\n      backgroundOpacity: false,\n      borderOpacity: false,\n      divideOpacity: false,\n      placeholderOpacity: false,\n      textOpacity: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-black > :not([hidden]) ~ :not([hidden]),\n      .border-black {\n        border-color: #000;\n      }\n      .bg-black {\n        background-color: #000;\n      }\n      .text-black,\n      .placeholder-black::placeholder {\n        color: #000;\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"colors defined as functions work when opacity plugins are disabled","suites":[],"updatePoint":{"line":38,"column":72,"index":1009},"line":38,"code":"test('colors defined as functions work when opacity plugins are disabled', () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"divide-primary\"></div>\n          <div class=\"border-primary\"></div>\n          <div class=\"bg-primary\"></div>\n          <div class=\"text-primary\"></div>\n          <div class=\"placeholder-primary\"></div>\n        `\n    }],\n    theme: {\n      colors: {\n        primary: ({\n          opacityValue\n        }) => opacityValue === undefined ? 'rgb(var(--color-primary))' : `rgb(var(--color-primary) / ${opacityValue})`\n      }\n    },\n    corePlugins: {\n      backgroundOpacity: false,\n      borderOpacity: false,\n      divideOpacity: false,\n      placeholderOpacity: false,\n      textOpacity: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-primary > :not([hidden]) ~ :not([hidden]),\n      .border-primary {\n        border-color: rgb(var(--color-primary));\n      }\n      .bg-primary {\n        background-color: rgb(var(--color-primary));\n      }\n      .text-primary,\n      .placeholder-primary::placeholder {\n        color: rgb(var(--color-primary));\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"can use <alpha-value> defining custom properties for colors (opacity plugins enabled)","suites":[],"updatePoint":{"line":81,"column":89,"index":2265},"line":81,"code":"it('can use <alpha-value> defining custom properties for colors (opacity plugins enabled)', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"divide-primary\"></div>\n          <div class=\"divide-primary divide-opacity-50\"></div>\n          <div class=\"border-primary\"></div>\n          <div class=\"border-primary border-opacity-50\"></div>\n          <div class=\"bg-primary\"></div>\n          <div class=\"bg-primary bg-opacity-50\"></div>\n          <div class=\"text-primary\"></div>\n          <div class=\"text-primary text-opacity-50\"></div>\n          <div class=\"placeholder-primary\"></div>\n          <div class=\"placeholder-primary placeholder-opacity-50\"></div>\n          <div class=\"ring-primary\"></div>\n          <div class=\"ring-primary ring-opacity-50\"></div>\n        `\n    }],\n    theme: {\n      colors: {\n        primary: 'rgb(var(--color-primary) / <alpha-value>)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-primary > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-opacity: 1;\n        border-color: rgb(var(--color-primary) / var(--tw-divide-opacity));\n      }\n      .divide-opacity-50 > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-opacity: 0.5;\n      }\n      .border-primary {\n        --tw-border-opacity: 1;\n        border-color: rgb(var(--color-primary) / var(--tw-border-opacity));\n      }\n      .border-opacity-50 {\n        --tw-border-opacity: 0.5;\n      }\n      .bg-primary {\n        --tw-bg-opacity: 1;\n        background-color: rgb(var(--color-primary) / var(--tw-bg-opacity));\n      }\n      .bg-opacity-50 {\n        --tw-bg-opacity: 0.5;\n      }\n      .text-primary {\n        --tw-text-opacity: 1;\n        color: rgb(var(--color-primary) / var(--tw-text-opacity));\n      }\n      .text-opacity-50 {\n        --tw-text-opacity: 0.5;\n      }\n      .placeholder-primary::placeholder {\n        --tw-placeholder-opacity: 1;\n        color: rgb(var(--color-primary) / var(--tw-placeholder-opacity));\n      }\n      .placeholder-opacity-50::placeholder {\n        --tw-placeholder-opacity: 0.5;\n      }\n      .ring-primary {\n        --tw-ring-opacity: 1;\n        --tw-ring-color: rgb(var(--color-primary) / var(--tw-ring-opacity));\n      }\n      .ring-opacity-50 {\n        --tw-ring-opacity: 0.5;\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"can use rgb helper when defining custom properties for colors (opacity plugins disabled)","suites":[],"updatePoint":{"line":152,"column":92,"index":4637},"line":152,"code":"it('can use rgb helper when defining custom properties for colors (opacity plugins disabled)', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"divide-primary\"></div>\n          <div class=\"divide-primary/50\"></div>\n          <div class=\"border-primary\"></div>\n          <div class=\"border-primary/50\"></div>\n          <div class=\"bg-primary\"></div>\n          <div class=\"bg-primary/50\"></div>\n          <div class=\"text-primary\"></div>\n          <div class=\"text-primary/50\"></div>\n          <div class=\"placeholder-primary\"></div>\n          <div class=\"placeholder-primary/50\"></div>\n          <div class=\"ring-primary\"></div>\n          <div class=\"ring-primary/50\"></div>\n        `\n    }],\n    theme: {\n      colors: {\n        primary: 'rgb(var(--color-primary) / <alpha-value>)'\n      }\n    },\n    corePlugins: {\n      backgroundOpacity: false,\n      borderOpacity: false,\n      divideOpacity: false,\n      placeholderOpacity: false,\n      textOpacity: false,\n      ringOpacity: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-primary > :not([hidden]) ~ :not([hidden]) {\n        border-color: rgb(var(--color-primary) / 1);\n      }\n      .divide-primary\\/50 > :not([hidden]) ~ :not([hidden]) {\n        border-color: rgb(var(--color-primary) / 0.5);\n      }\n      .border-primary {\n        border-color: rgb(var(--color-primary) / 1);\n      }\n      .border-primary\\/50 {\n        border-color: rgb(var(--color-primary) / 0.5);\n      }\n      .bg-primary {\n        background-color: rgb(var(--color-primary) / 1);\n      }\n      .bg-primary\\/50 {\n        background-color: rgb(var(--color-primary) / 0.5);\n      }\n      .text-primary {\n        color: rgb(var(--color-primary) / 1);\n      }\n      .text-primary\\/50 {\n        color: rgb(var(--color-primary) / 0.5);\n      }\n      .placeholder-primary::placeholder {\n        color: rgb(var(--color-primary) / 1);\n      }\n      .placeholder-primary\\/50::placeholder {\n        color: rgb(var(--color-primary) / 0.5);\n      }\n      .ring-primary {\n        --tw-ring-color: rgb(var(--color-primary) / 1);\n      }\n      .ring-primary\\/50 {\n        --tw-ring-color: rgb(var(--color-primary) / 0.5);\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"can use hsl helper when defining custom properties for colors (opacity plugins enabled)","suites":[],"updatePoint":{"line":225,"column":91,"index":6923},"line":225,"code":"it('can use hsl helper when defining custom properties for colors (opacity plugins enabled)', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"divide-primary\"></div>\n          <div class=\"divide-primary divide-opacity-50\"></div>\n          <div class=\"border-primary\"></div>\n          <div class=\"border-primary border-opacity-50\"></div>\n          <div class=\"bg-primary\"></div>\n          <div class=\"bg-primary bg-opacity-50\"></div>\n          <div class=\"text-primary\"></div>\n          <div class=\"text-primary text-opacity-50\"></div>\n          <div class=\"placeholder-primary\"></div>\n          <div class=\"placeholder-primary placeholder-opacity-50\"></div>\n          <div class=\"ring-primary\"></div>\n          <div class=\"ring-primary ring-opacity-50\"></div>\n        `\n    }],\n    theme: {\n      colors: {\n        primary: 'hsl(var(--color-primary) / <alpha-value>)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-primary > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-opacity: 1;\n        border-color: hsl(var(--color-primary) / var(--tw-divide-opacity));\n      }\n      .divide-opacity-50 > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-opacity: 0.5;\n      }\n      .border-primary {\n        --tw-border-opacity: 1;\n        border-color: hsl(var(--color-primary) / var(--tw-border-opacity));\n      }\n      .border-opacity-50 {\n        --tw-border-opacity: 0.5;\n      }\n      .bg-primary {\n        --tw-bg-opacity: 1;\n        background-color: hsl(var(--color-primary) / var(--tw-bg-opacity));\n      }\n      .bg-opacity-50 {\n        --tw-bg-opacity: 0.5;\n      }\n      .text-primary {\n        --tw-text-opacity: 1;\n        color: hsl(var(--color-primary) / var(--tw-text-opacity));\n      }\n      .text-opacity-50 {\n        --tw-text-opacity: 0.5;\n      }\n      .placeholder-primary::placeholder {\n        --tw-placeholder-opacity: 1;\n        color: hsl(var(--color-primary) / var(--tw-placeholder-opacity));\n      }\n      .placeholder-opacity-50::placeholder {\n        --tw-placeholder-opacity: 0.5;\n      }\n      .ring-primary {\n        --tw-ring-opacity: 1;\n        --tw-ring-color: hsl(var(--color-primary) / var(--tw-ring-opacity));\n      }\n      .ring-opacity-50 {\n        --tw-ring-opacity: 0.5;\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"can use hsl helper when defining custom properties for colors (opacity plugins disabled)","suites":[],"updatePoint":{"line":296,"column":92,"index":9295},"line":296,"code":"it('can use hsl helper when defining custom properties for colors (opacity plugins disabled)', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"divide-primary\"></div>\n          <div class=\"divide-primary/50\"></div>\n          <div class=\"border-primary\"></div>\n          <div class=\"border-primary/50\"></div>\n          <div class=\"bg-primary\"></div>\n          <div class=\"bg-primary/50\"></div>\n          <div class=\"text-primary\"></div>\n          <div class=\"text-primary/50\"></div>\n          <div class=\"placeholder-primary\"></div>\n          <div class=\"placeholder-primary/50\"></div>\n          <div class=\"ring-primary\"></div>\n          <div class=\"ring-primary/50\"></div>\n        `\n    }],\n    theme: {\n      colors: {\n        primary: 'hsl(var(--color-primary) / <alpha-value>)'\n      }\n    },\n    corePlugins: {\n      backgroundOpacity: false,\n      borderOpacity: false,\n      divideOpacity: false,\n      placeholderOpacity: false,\n      textOpacity: false,\n      ringOpacity: false\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-primary > :not([hidden]) ~ :not([hidden]) {\n        border-color: hsl(var(--color-primary) / 1);\n      }\n      .divide-primary\\/50 > :not([hidden]) ~ :not([hidden]) {\n        border-color: hsl(var(--color-primary) / 0.5);\n      }\n      .border-primary {\n        border-color: hsl(var(--color-primary) / 1);\n      }\n      .border-primary\\/50 {\n        border-color: hsl(var(--color-primary) / 0.5);\n      }\n      .bg-primary {\n        background-color: hsl(var(--color-primary) / 1);\n      }\n      .bg-primary\\/50 {\n        background-color: hsl(var(--color-primary) / 0.5);\n      }\n      .text-primary {\n        color: hsl(var(--color-primary) / 1);\n      }\n      .text-primary\\/50 {\n        color: hsl(var(--color-primary) / 0.5);\n      }\n      .placeholder-primary::placeholder {\n        color: hsl(var(--color-primary) / 1);\n      }\n      .placeholder-primary\\/50::placeholder {\n        color: hsl(var(--color-primary) / 0.5);\n      }\n      .ring-primary {\n        --tw-ring-color: hsl(var(--color-primary) / 1);\n      }\n      .ring-primary\\/50 {\n        --tw-ring-color: hsl(var(--color-primary) / 0.5);\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function in JS can apply alpha values to colors (1)","suites":[],"updatePoint":{"line":369,"column":63,"index":11553},"line":369,"code":"test('Theme function in JS can apply alpha values to colors (1)', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: #3b82f680;\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          500: '#3b82f6'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / 50%')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function in JS can apply alpha values to colors (2)","suites":[],"updatePoint":{"line":404,"column":63,"index":12231},"line":404,"code":"test('Theme function in JS can apply alpha values to colors (2)', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: #3b82f680;\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          500: '#3b82f6'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / 0.5')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function in JS can apply alpha values to colors (3)","suites":[],"updatePoint":{"line":439,"column":63,"index":12909},"line":439,"code":"test('Theme function in JS can apply alpha values to colors (3)', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: rgb(59 130 246 / var(--my-alpha));\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          500: '#3b82f6'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / var(--my-alpha)')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function in JS can apply alpha values to colors (4)","suites":[],"updatePoint":{"line":474,"column":63,"index":13623},"line":474,"code":"test('Theme function in JS can apply alpha values to colors (4)', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: #3c83f680;\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          500: 'hsl(217, 91%, 60%)'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / 50%')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function in JS can apply alpha values to colors (5)","suites":[],"updatePoint":{"line":509,"column":63,"index":14312},"line":509,"code":"test('Theme function in JS can apply alpha values to colors (5)', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: #3c83f680;\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          500: 'hsl(217, 91%, 60%)'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / 0.5')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function in JS can apply alpha values to colors (6)","suites":[],"updatePoint":{"line":544,"column":63,"index":15001},"line":544,"code":"test('Theme function in JS can apply alpha values to colors (6)', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: hsl(217 91% 60% / var(--my-alpha));\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          500: 'hsl(217, 91%, 60%)'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / var(--my-alpha)')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function in JS can apply alpha values to colors (7)","suites":[],"updatePoint":{"line":579,"column":63,"index":15727},"line":579,"code":"test('Theme function in JS can apply alpha values to colors (7)', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: rgb(var(--foo) / var(--my-alpha));\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          500: 'rgb(var(--foo) / <alpha-value>)'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / var(--my-alpha)')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme function prefers existing values in config","suites":[],"updatePoint":{"line":614,"column":54,"index":16456},"line":614,"code":"test('Theme function prefers existing values in config', () => {\n  let input = css`\n    @tailwind utilities;\n  `;\n  let output = css`\n    .text-foo {\n      color: purple;\n    }\n  `;\n  return run(input, {\n    content: [{\n      raw: html`text-foo`\n    }],\n    corePlugins: {\n      textOpacity: false\n    },\n    theme: {\n      colors: {\n        blue: {\n          '500 / 50%': 'purple'\n        }\n      },\n      extend: {\n        textColor: ({\n          theme\n        }) => ({\n          foo: theme('colors.blue.500 / 50%')\n        })\n      }\n    }\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(output);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use an <alpha-value> as part of the color definition","suites":[],"updatePoint":{"line":649,"column":78,"index":17153},"line":649,"code":"it('should be possible to use an <alpha-value> as part of the color definition', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"bg-primary\"></div> `\n    }],\n    corePlugins: ['backgroundColor', 'backgroundOpacity'],\n    theme: {\n      colors: {\n        primary: 'rgb(var(--color-primary) / <alpha-value>)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-primary {\n        --tw-bg-opacity: 1;\n        background-color: rgb(var(--color-primary) / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use an <alpha-value> as part of the color definition with an opacity modifiers","suites":[],"updatePoint":{"line":670,"column":104,"index":17786},"line":670,"code":"it('should be possible to use an <alpha-value> as part of the color definition with an opacity modifiers', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"bg-primary/50\"></div> `\n    }],\n    corePlugins: ['backgroundColor', 'backgroundOpacity'],\n    theme: {\n      colors: {\n        primary: 'rgb(var(--color-primary) / <alpha-value>)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-primary\\/50 {\n        background-color: rgb(var(--color-primary) / 0.5);\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use an <alpha-value> as part of the color definition with an opacity modifiers","suites":[],"updatePoint":{"line":690,"column":104,"index":18381},"line":690,"code":"it('should be possible to use an <alpha-value> as part of the color definition with an opacity modifiers', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"bg-primary\"></div> `\n    }],\n    corePlugins: ['backgroundColor'],\n    theme: {\n      colors: {\n        primary: 'rgb(var(--color-primary) / <alpha-value>)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-primary {\n        background-color: rgb(var(--color-primary) / 1);\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use <alpha-value> inside arbitrary values","suites":[],"updatePoint":{"line":710,"column":67,"index":18909},"line":710,"code":"it('should be possible to use <alpha-value> inside arbitrary values', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"bg-[rgb(var(--color-primary)/<alpha-value>)]/50\"></div> `\n    }],\n    corePlugins: ['backgroundColor', 'backgroundOpacity'],\n    theme: {\n      colors: {\n        primary: 'rgb(var(--color-primary) / <alpha-value>)'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-\\[rgb\\(var\\(--color-primary\\)\\/\\<alpha-value\\>\\)\\]\\/50 {\n        background-color: rgb(var(--color-primary) / 0.5);\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"Theme functions can reference values with slashes in brackets","suites":[],"updatePoint":{"line":730,"column":65,"index":19542},"line":730,"code":"it('Theme functions can reference values with slashes in brackets', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"bg-foo1 bg-foo2\"></div> `\n    }],\n    theme: {\n      colors: {\n        'a/b': '#000000'\n      },\n      extend: {\n        backgroundColor: ({\n          theme\n        }) => ({\n          foo1: theme('colors[a/b]'),\n          foo2: theme('colors[a/b]/50%')\n        })\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-foo1 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n      }\n      .bg-foo2 {\n        background-color: #00000080;\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"works with opacity values defined as a placeholder or a function in when colors is a function","suites":[],"updatePoint":{"line":761,"column":97,"index":20298},"line":761,"code":"it('works with opacity values defined as a placeholder or a function in when colors is a function', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div\n            class=\"bg-foo10 bg-foo20 bg-foo30 bg-foo40 bg-foo11 bg-foo21 bg-foo31 bg-foo41\"\n          ></div>\n        `\n    }],\n    theme: {\n      colors: () => ({\n        foobar1: ({\n          opacityValue\n        }) => `rgb(255 100 0 / ${opacityValue ?? '100%'})`,\n        foobar2: `rgb(255 100 0 / <alpha-value>)`,\n        foobar3: {\n          100: ({\n            opacityValue\n          }) => `rgb(255 100 0 / ${opacityValue ?? '100%'})`,\n          200: `rgb(255 100 0 / <alpha-value>)`\n        }\n      }),\n      extend: {\n        backgroundColor: ({\n          theme\n        }) => ({\n          foo10: theme('colors.foobar1'),\n          foo20: theme('colors.foobar2'),\n          foo30: theme('colors.foobar3.100'),\n          foo40: theme('colors.foobar3.200'),\n          foo11: theme('colors.foobar1 / 50%'),\n          foo21: theme('colors.foobar2 / 50%'),\n          foo31: theme('colors.foobar3.100 / 50%'),\n          foo41: theme('colors.foobar3.200 / 50%')\n        })\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-foo10 {\n        background-color: #ff6400;\n      }\n      .bg-foo11 {\n        background-color: #ff640080;\n      }\n      .bg-foo20 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(255 100 0 / var(--tw-bg-opacity));\n      }\n      .bg-foo21 {\n        background-color: #ff640080;\n      }\n      .bg-foo30 {\n        background-color: #ff6400;\n      }\n      .bg-foo31 {\n        background-color: #ff640080;\n      }\n      .bg-foo40 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(255 100 0 / var(--tw-bg-opacity));\n      }\n      .bg-foo41 {\n        background-color: #ff640080;\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"The disableColorOpacityUtilitiesByDefault flag disables the color opacity plugins and removes their variables","suites":[],"updatePoint":{"line":830,"column":113,"index":22218},"line":830,"code":"it('The disableColorOpacityUtilitiesByDefault flag disables the color opacity plugins and removes their variables', () => {\n  let config = {\n    future: {\n      disableColorOpacityUtilitiesByDefault: true\n    },\n    content: [{\n      raw: html`\n          <div\n            class=\"divide-blue-300 border-blue-300 bg-blue-300 text-blue-300 placeholder-blue-300 ring-blue-300\"\n          ></div>\n          <div\n            class=\"divide-blue-300/50 border-blue-300/50 bg-blue-300/50 text-blue-300/50 placeholder-blue-300/50 ring-blue-300/50\"\n          ></div>\n          <div\n            class=\"divide-blue-300/[var(--my-opacity)] border-blue-300/[var(--my-opacity)] bg-blue-300/[var(--my-opacity)] text-blue-300/[var(--my-opacity)] placeholder-blue-300/[var(--my-opacity)] ring-blue-300/[var(--my-opacity)]\"\n          ></div>\n          <div\n            class=\"divide-opacity-50 border-opacity-50 bg-opacity-50 text-opacity-50 placeholder-opacity-50 ring-opacity-50\"\n          ></div>\n        `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-blue-300 > :not([hidden]) ~ :not([hidden]) {\n        border-color: #93c5fd;\n      }\n      .divide-blue-300\\/50 > :not([hidden]) ~ :not([hidden]) {\n        border-color: #93c5fd80;\n      }\n      .divide-blue-300\\/\\[var\\(--my-opacity\\)\\] > :not([hidden]) ~ :not([hidden]) {\n        border-color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .border-blue-300 {\n        border-color: #93c5fd;\n      }\n      .border-blue-300\\/50 {\n        border-color: #93c5fd80;\n      }\n      .border-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        border-color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .bg-blue-300 {\n        background-color: #93c5fd;\n      }\n      .bg-blue-300\\/50 {\n        background-color: #93c5fd80;\n      }\n      .bg-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        background-color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .text-blue-300 {\n        color: #93c5fd;\n      }\n      .text-blue-300\\/50 {\n        color: #93c5fd80;\n      }\n      .text-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .placeholder-blue-300::placeholder {\n        color: #93c5fd;\n      }\n      .placeholder-blue-300\\/50::placeholder {\n        color: #93c5fd80;\n      }\n      .placeholder-blue-300\\/\\[var\\(--my-opacity\\)\\]::placeholder {\n        color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .ring-blue-300 {\n        --tw-ring-color: #93c5fd;\n      }\n      .ring-blue-300\\/50 {\n        --tw-ring-color: #93c5fd80;\n      }\n      .ring-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        --tw-ring-color: rgb(147 197 253 / var(--my-opacity));\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"You can re-enable any opacity plugin even when disableColorOpacityUtilitiesByDefault is enabled","suites":[],"updatePoint":{"line":911,"column":99,"index":24955},"line":911,"code":"it('You can re-enable any opacity plugin even when disableColorOpacityUtilitiesByDefault is enabled', () => {\n  let config = {\n    future: {\n      disableColorOpacityUtilitiesByDefault: true\n    },\n    corePlugins: {\n      backgroundOpacity: true,\n      borderOpacity: true,\n      divideOpacity: true,\n      placeholderOpacity: true,\n      ringOpacity: true,\n      textOpacity: true\n    },\n    content: [{\n      raw: html`\n          <div\n            class=\"divide-blue-300 border-blue-300 bg-blue-300 text-blue-300 placeholder-blue-300 ring-blue-300\"\n          ></div>\n          <div\n            class=\"divide-blue-300/50 border-blue-300/50 bg-blue-300/50 text-blue-300/50 placeholder-blue-300/50 ring-blue-300/50\"\n          ></div>\n          <div\n            class=\"divide-blue-300/[var(--my-opacity)] border-blue-300/[var(--my-opacity)] bg-blue-300/[var(--my-opacity)] text-blue-300/[var(--my-opacity)] placeholder-blue-300/[var(--my-opacity)] ring-blue-300/[var(--my-opacity)]\"\n          ></div>\n          <div\n            class=\"divide-opacity-50 border-opacity-50 bg-opacity-50 text-opacity-50 placeholder-opacity-50 ring-opacity-50\"\n          ></div>\n        `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .divide-blue-300 > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-opacity: 1;\n        border-color: rgb(147 197 253 / var(--tw-divide-opacity));\n      }\n      .divide-blue-300\\/50 > :not([hidden]) ~ :not([hidden]) {\n        border-color: #93c5fd80;\n      }\n      .divide-blue-300\\/\\[var\\(--my-opacity\\)\\] > :not([hidden]) ~ :not([hidden]) {\n        border-color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .divide-opacity-50 > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-opacity: 0.5;\n      }\n      .border-blue-300 {\n        --tw-border-opacity: 1;\n        border-color: rgb(147 197 253 / var(--tw-border-opacity));\n      }\n      .border-blue-300\\/50 {\n        border-color: #93c5fd80;\n      }\n      .border-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        border-color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .border-opacity-50 {\n        --tw-border-opacity: 0.5;\n      }\n      .bg-blue-300 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(147 197 253 / var(--tw-bg-opacity));\n      }\n      .bg-blue-300\\/50 {\n        background-color: #93c5fd80;\n      }\n      .bg-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        background-color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .bg-opacity-50 {\n        --tw-bg-opacity: 0.5;\n      }\n      .text-blue-300 {\n        --tw-text-opacity: 1;\n        color: rgb(147 197 253 / var(--tw-text-opacity));\n      }\n      .text-blue-300\\/50 {\n        color: #93c5fd80;\n      }\n      .text-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .text-opacity-50 {\n        --tw-text-opacity: 0.5;\n      }\n      .placeholder-blue-300::placeholder {\n        --tw-placeholder-opacity: 1;\n        color: rgb(147 197 253 / var(--tw-placeholder-opacity));\n      }\n      .placeholder-blue-300\\/50::placeholder {\n        color: #93c5fd80;\n      }\n      .placeholder-blue-300\\/\\[var\\(--my-opacity\\)\\]::placeholder {\n        color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .placeholder-opacity-50::placeholder {\n        --tw-placeholder-opacity: 0.5;\n      }\n      .ring-blue-300 {\n        --tw-ring-opacity: 1;\n        --tw-ring-color: rgb(147 197 253 / var(--tw-ring-opacity));\n      }\n      .ring-blue-300\\/50 {\n        --tw-ring-color: #93c5fd80;\n      }\n      .ring-blue-300\\/\\[var\\(--my-opacity\\)\\] {\n        --tw-ring-color: rgb(147 197 253 / var(--my-opacity));\n      }\n      .ring-opacity-50 {\n        --tw-ring-opacity: 0.5;\n      }\n    `);\n  });\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"can replace the potential alpha value in rgba/hsla syntax","suites":[],"updatePoint":{"line":1024,"column":61,"index":28703},"line":1024,"code":"it('can replace the potential alpha value in rgba/hsla syntax', async () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"text-primary-rgba/50 text-primary-hsla/50\"></div> `\n    }],\n    theme: {\n      colors: {\n        'primary-rgba': 'rgba(var(--color), 0.1)',\n        'primary-hsla': 'hsla(var(--color), 0.1)'\n      }\n    }\n  };\n  let result = await run('@tailwind utilities', config);\n  expect(result.css).toMatchFormattedCss(css`\n    .text-primary-hsla\\/50 {\n      color: hsla(var(--color), 0.5);\n    }\n    .text-primary-rgba\\/50 {\n      color: rgba(var(--color), 0.5);\n    }\n  `);\n});","file":"opacity.test.js","skipped":false,"dir":"tests"},{"name":"basic parallel variants","suites":[],"updatePoint":{"line":2,"column":29,"index":75},"line":2,"code":"test('basic parallel variants', async () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"hover:test:font-black test:font-bold test:font-medium font-normal\"\n        ></div>`\n    }],\n    plugins: [function test({\n      addVariant\n    }) {\n      addVariant('test', ['& *::test', '&::test']);\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-normal {\n        font-weight: 400;\n      }\n      .test\\:font-bold ::test {\n        font-weight: 700;\n      }\n      .test\\:font-medium ::test {\n        font-weight: 500;\n      }\n      .hover\\:test\\:font-black ::test:hover {\n        font-weight: 900;\n      }\n      .test\\:font-bold::test {\n        font-weight: 700;\n      }\n      .test\\:font-medium::test {\n        font-weight: 500;\n      }\n      .hover\\:test\\:font-black::test:hover {\n        font-weight: 900;\n      }\n    `);\n  });\n});","file":"parallel-variants.test.js","skipped":false,"dir":"tests"},{"name":"parallel variants can be generated using a function that returns parallel variants","suites":[],"updatePoint":{"line":41,"column":88,"index":1070},"line":41,"code":"test('parallel variants can be generated using a function that returns parallel variants', async () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"hover:test:font-black test:font-bold test:font-medium font-normal\"\n        ></div>`\n    }],\n    plugins: [function test({\n      addVariant\n    }) {\n      addVariant('test', () => ['& *::test', '&::test']);\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-normal {\n        font-weight: 400;\n      }\n      .test\\:font-bold ::test {\n        font-weight: 700;\n      }\n      .test\\:font-medium ::test {\n        font-weight: 500;\n      }\n      .test\\:font-bold::test {\n        font-weight: 700;\n      }\n      .test\\:font-medium::test {\n        font-weight: 500;\n      }\n      .hover\\:test\\:font-black ::test:hover {\n        font-weight: 900;\n      }\n      .hover\\:test\\:font-black::test:hover {\n        font-weight: 900;\n      }\n    `);\n  });\n});","file":"parallel-variants.test.js","skipped":false,"dir":"tests"},{"name":"a function that returns parallel variants can modify the container","suites":[],"updatePoint":{"line":80,"column":72,"index":2055},"line":80,"code":"test('a function that returns parallel variants can modify the container', async () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"hover:test:font-black test:font-bold test:font-medium font-normal\"\n        ></div>`\n    }],\n    plugins: [function test({\n      addVariant\n    }) {\n      addVariant('test', ({\n        container\n      }) => {\n        container.walkDecls(decl => {\n          decl.value = `calc(0 + ${decl.value})`;\n        });\n        return ['& *::test', '&::test'];\n      });\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-normal {\n        font-weight: 400;\n      }\n      .test\\:font-bold ::test {\n        font-weight: 700;\n      }\n      .test\\:font-medium ::test {\n        font-weight: 500;\n      }\n      .test\\:font-bold::test {\n        font-weight: 700;\n      }\n      .test\\:font-medium::test {\n        font-weight: 500;\n      }\n      .hover\\:test\\:font-black ::test:hover {\n        font-weight: 900;\n      }\n      .hover\\:test\\:font-black::test:hover {\n        font-weight: 900;\n      }\n    `);\n  });\n});","file":"parallel-variants.test.js","skipped":false,"dir":"tests"},{"name":"%s parser","suites":[],"line":43,"code":"describe.each([['Regex', regexParser], ['Oxide', oxideParser]])('%s parser', (_, parse) => {\n  describe('basic utility classes', () => {\n    let classes = [\n    // One word classes\n    'underline',\n    // With dashes\n    'text-center', 'pointer-events-none',\n    // With numbers\n    'px-4',\n    // With special characters\n    'px-1.5', 'translate-x-1/2', 'from-50%',\n    // With negative signs\n    '-translate-x-full',\n    // With halves and negative signs\n    '-translate-x-1/2'];\n    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        expect(extractions).toContain(c);\n      }\n    });\n  });\n  describe('utility classes with arbitrary values', () => {\n    let classes = [\n    // With simple number\n    'px-[0]', 'px-[0.5]',\n    // With number and unit\n    'px-[123px]', 'px-[123.45px]',\n    // With special symbols\n    'bg-[#bada55]',\n    //   ^\n    'bg-[color:#bada55]',\n    //        ^^\n    'content-[>]',\n    //        ^\n    'content-[<]',\n    //        ^\n\n    // With functions and math expressions\n    'px-[calc(100%-1rem)]', 'px-[theme(spacing.1)]', 'px-[theme(spacing[1.5])]',\n    // With spaces (replaced by `_`)\n    'bg-[rgb(255_0_0)]',\n    // Examples with combinations\n    'w-[calc(100%_-_theme(\"spacing[1.5]))\"]', 'fill-[oklab(59.69%_0.1007_0.1191_/_0.5)]/[33.7%]', 'fill-[color:oklab(59.69%_0.1007_0.1191_/_0.5)]/[33.7%]', 'shadow-[inset_0_-3em_3em_rgba(0,_0,_0,_0.1),_0_0_0_2px_rgb(255,_255,_255),_0.3em_0.3em_1em_rgba(0,_0,_0,_0.3)]'];\n    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        // TODO: This is a bug in the RegEx parser.\n        if (!extractions.includes(c) && parse === regexParser) {\n          continue;\n        }\n        expect(extractions).toContain(c);\n      }\n    });\n  });\n  describe('utility classes with modifiers', () => {\n    let classes = [\n    // With simple modifiers\n    'bg-red-500/50',\n    // With arbitrary modifiers\n    'bg-red-500/[0.5]', 'bg-red-500/[50%]', 'bg-red-500/[var(--opacity)]',\n    // With spces (replaced by `_`)\n    'bg-red-500/[var(--opacity,_50%)]'];\n    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        expect(extractions).toContain(c);\n      }\n    });\n  });\n  describe('utility classes with important modifier', () => {\n    let classes = ['!bg-red-500', '!bg-[#bada55]', '![display:flex]', '!-translate-x-1/2'];\n    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        // TODO: This is a bug in the RegEx parser.\n        if (!extractions.includes(c) && parse === regexParser) {\n          continue;\n        }\n        expect(extractions).toContain(c);\n      }\n    });\n  });\n  describe('arbitrary properties', () => {\n    let classes = [\n    // With simple arbitrary property\n    '[display:flex]'];\n    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        expect(extractions).toContain(c);\n      }\n    });\n  });\n  describe('arbitrary values with quotes', () => {\n    test('arbitrary values with single quotes', async () => {\n      let extractions = parse(`\n      <div class=\"content-['hello_world'] hover:content-['hello_world_2'] hover:focus:content-['hello_world_3']\"></div>\n    `);\n      expect(extractions).toContain(`content-['hello_world']`);\n      expect(extractions).toContain(`hover:content-['hello_world_2']`);\n      expect(extractions).toContain(`hover:focus:content-['hello_world_3']`);\n    });\n    test('arbitrary values with double quotes', async () => {\n      let extractions = parse(`\n      <div class='content-[\"hello_world\"] hover:content-[\"hello_world_2\"] hover:focus:content-[\"hello_world_3\"]'></div>\n    `);\n      expect(extractions).toContain(`content-[\"hello_world\"]`);\n      expect(extractions).toContain(`hover:content-[\"hello_world_2\"]`);\n      expect(extractions).toContain(`hover:focus:content-[\"hello_world_3\"]`);\n    });\n    test('arbitrary values with some single quoted values', async () => {\n      let extractions = parse(`\n      <div class=\"font-['Open_Sans',_system-ui,_sans-serif] hover:font-['Proxima_Nova',_system-ui,_sans-serif] hover:focus:font-['Inter_var',_system-ui,_sans-serif]\"></div>\n    `);\n      expect(extractions).toContain(`font-['Open_Sans',_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:font-['Proxima_Nova',_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:focus:font-['Inter_var',_system-ui,_sans-serif]`);\n    });\n    test('arbitrary values with some double quoted values', async () => {\n      let extractions = parse(`\n      <div class='font-[\"Open_Sans\",_system-ui,_sans-serif] hover:font-[\"Proxima_Nova\",_system-ui,_sans-serif] hover:focus:font-[\"Inter_var\",_system-ui,_sans-serif]'></div>\n    `);\n      expect(extractions).toContain(`font-[\"Open_Sans\",_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:font-[\"Proxima_Nova\",_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:focus:font-[\"Inter_var\",_system-ui,_sans-serif]`);\n    });\n    test('arbitrary values with escaped underscores', async () => {\n      let extractions = parse(`\n      <div class=\"content-['hello\\\\_world'] hover:content-['hello\\\\_world\\\\_2'] hover:focus:content-['hello\\\\_world\\\\_3']\"></div>\n    `);\n      expect(extractions).toContain(`content-['hello\\\\_world']`);\n      expect(extractions).toContain(`hover:content-['hello\\\\_world\\\\_2']`);\n      expect(extractions).toContain(`hover:focus:content-['hello\\\\_world\\\\_3']`);\n    });\n    test('arbitrary values with angle brackets in single quotes', async () => {\n      let extractions = parse(`\n      <div class=\"content-['>'] hover:content-['<'] hover:focus:content-['>']\"></div>\n    `);\n      expect(extractions).toContain(`content-['>']`);\n      expect(extractions).toContain(`hover:content-['<']`);\n      expect(extractions).toContain(`hover:focus:content-['>']`);\n    });\n    test('arbitrary values with angle brackets in double quotes', async () => {\n      let extractions = parse(`\n      <div class=\"content-[\">\"] hover:content-[\"<\"] hover:focus:content-[\">\"]\"></div>\n    `);\n      expect(extractions).toContain(`content-[\">\"]`);\n      expect(extractions).toContain(`hover:content-[\"<\"]`);\n      expect(extractions).toContain(`hover:focus:content-[\">\"]`);\n    });\n    test('arbitrary values with theme lookup using quotes', () => {\n      let extractions = parse(`\n      <p class=\"[--y:theme('colors.blue.500')] [color:var(--y)]\"></p>\n    `);\n      expect(extractions).toContain(`[--y:theme('colors.blue.500')]`);\n      expect(extractions).toContain(`[color:var(--y)]`);\n    });\n  });\n  test('special characters', async () => {\n    let extractions = parse(`\n      <div class=\"<sm:underline md>:font-bold\"></div>\n    `);\n    expect(extractions).toContain(`<sm:underline`);\n    expect(extractions).toContain(`md>:font-bold`);\n  });\n  test('with single quotes array within template literal', async () => {\n    let extractions = parse(`<div class=\\`\\${['pr-1.5']}\\`></div>`);\n    expect(extractions).toContain('pr-1.5');\n  });\n  test('with double quotes array within template literal', async () => {\n    let extractions = parse(`<div class=\\`\\${[\"pr-1.5\"]}\\`></div>`);\n    expect(extractions).toContain('pr-1.5');\n  });\n  test('with single quotes array within function', async () => {\n    let extractions = parse(`document.body.classList.add(['pl-1.5'].join(\" \"));`);\n    expect(extractions).toContain('pl-1.5');\n  });\n  test('with double quotes array within function', async () => {\n    let extractions = parse(`document.body.classList.add([\"pl-1.5\"].join(\" \"));`);\n    expect(extractions).toContain('pl-1.5');\n  });\n  test('with angle brackets', async () => {\n    let extractions = parse(`<div class=\"bg-blue-200 <% if (useShadow) { %>shadow-xl<% } %>\">test</div>`);\n    expect(extractions).toContain('bg-blue-200');\n    expect(extractions).toContain('shadow-xl');\n    expect(extractions).not.toContain('>shadow-xl');\n    expect(extractions).not.toContain('shadow-xl<');\n  });\n  test('markdown code fences', async () => {\n    let extractions = parse('<!-- this should work: `.font-bold`, `.font-normal` -->');\n    expect(extractions).toContain('font-bold');\n    expect(extractions).toContain('font-normal');\n    expect(extractions).not.toContain('.font-bold');\n    expect(extractions).not.toContain('.font-normal');\n  });\n  test('classes in slim templates', async () => {\n    let extractions = parse(`\n      p.bg-red-500.text-sm\n        'This is a paragraph\n          small.italic.text-gray-500\n            '(Look mom, no closing tag!)\n    `);\n    expect(extractions).toContain('bg-red-500');\n    expect(extractions).toContain('text-sm');\n    expect(extractions).toContain('italic');\n    expect(extractions).toContain('text-gray-500');\n  });\n  test('multi-word + arbitrary values + quotes', async () => {\n    let extractions = parse(`\n      grid-cols-['repeat(2)']\n    `);\n    expect(extractions).toContain(`grid-cols-['repeat(2)']`);\n  });\n  test('a lot of data', () => {\n    let extractions = parse('underline '.repeat(2 ** 17));\n    expect(extractions).toContain(`underline`);\n  });\n  test('ruby percent string array', () => {\n    let extractions = parse('%w[text-[#bada55]]');\n    expect(extractions).toContain(`text-[#bada55]`);\n  });\n  test('arbitrary properties followed by square bracketed stuff', () => {\n    let extractions = parse('<div class=\"h-16 items-end border border-white [display:inherit]\">[foo]</div>');\n    expect(extractions).toContain(`[display:inherit]`);\n  });\n  describe('Vue', () => {\n    test('Class object syntax', () => {\n      let extractions = parse(`<Examples with combinations :class=\"{ underline: myCondition, 'font-bold': myCondition }\">[foo]</div>`);\n      expect(extractions).toContain(`underline`, `font-bold`);\n    });\n    test('Class array syntax', () => {\n      // With leading space\n      let extractions = parse(`<div :class=\"[ 'underline', myCondition && 'font-bold', myCondition ? 'flex' : 'block' ]\">[foo]</div>`);\n      expect(extractions).toContain(`underline`, `font-bold`, `flex`, `block`);\n\n      // Without leading space\n      extractions = parse(`<div :class=\"['underline', myCondition && 'font-bold', myCondition ? 'flex' : 'block']\">[foo]</div>`);\n      expect(extractions).toContain(`underline`, `font-bold`, `flex`, `block`);\n    });\n  });\n  describe('anti-test', () => {\n    it('should not parse candidates without spaces in object-like syntax', () => {\n      let extractions = parse(html`<div class=\"{underline:isActive,flex:isOnline,md:bold}\"></div>`);\n\n      // The oxide parser _does_ allow this!\n      if (parse !== oxideParser) {\n        expect(extractions).not.toContain(`underline:isActive`);\n        expect(extractions).not.toContain(`flex:isOnline`);\n        expect(extractions).not.toContain(`md:bold`);\n      }\n      expect(extractions).not.toContain(`underline`);\n      expect(extractions).not.toContain(`isActive`);\n      expect(extractions).not.toContain(`flex`);\n      expect(extractions).not.toContain(`isOnline`);\n      expect(extractions).not.toContain(`md`);\n      expect(extractions).not.toContain(`bold`);\n    });\n  });\n});","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"%# — %s","suites":["basic utility classes"],"line":58,"code":"    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        expect(extractions).toContain(c);\n      }\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"%# — %s","suites":["utility classes with arbitrary values"],"line":87,"code":"    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        // TODO: This is a bug in the RegEx parser.\n        if (!extractions.includes(c) && parse === regexParser) {\n          continue;\n        }\n        expect(extractions).toContain(c);\n      }\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"%# — %s","suites":["utility classes with modifiers"],"line":106,"code":"    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        expect(extractions).toContain(c);\n      }\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"%# — %s","suites":["utility classes with important modifier"],"line":115,"code":"    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        // TODO: This is a bug in the RegEx parser.\n        if (!extractions.includes(c) && parse === regexParser) {\n          continue;\n        }\n        expect(extractions).toContain(c);\n      }\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"%# — %s","suites":["arbitrary properties"],"line":130,"code":"    test.each(templateTable(classes))('%# — %s', (_, template, classes) => {\n      let extractions = parse(template);\n      for (let c of classes) {\n        expect(extractions).toContain(c);\n      }\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with single quotes","suites":["arbitrary values with quotes"],"updatePoint":{"line":138,"column":45,"index":5477},"line":138,"code":"    test('arbitrary values with single quotes', async () => {\n      let extractions = parse(`\n      <div class=\"content-['hello_world'] hover:content-['hello_world_2'] hover:focus:content-['hello_world_3']\"></div>\n    `);\n      expect(extractions).toContain(`content-['hello_world']`);\n      expect(extractions).toContain(`hover:content-['hello_world_2']`);\n      expect(extractions).toContain(`hover:focus:content-['hello_world_3']`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with double quotes","suites":["arbitrary values with quotes"],"updatePoint":{"line":146,"column":45,"index":5921},"line":146,"code":"    test('arbitrary values with double quotes', async () => {\n      let extractions = parse(`\n      <div class='content-[\"hello_world\"] hover:content-[\"hello_world_2\"] hover:focus:content-[\"hello_world_3\"]'></div>\n    `);\n      expect(extractions).toContain(`content-[\"hello_world\"]`);\n      expect(extractions).toContain(`hover:content-[\"hello_world_2\"]`);\n      expect(extractions).toContain(`hover:focus:content-[\"hello_world_3\"]`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with some single quoted values","suites":["arbitrary values with quotes"],"updatePoint":{"line":154,"column":57,"index":6377},"line":154,"code":"    test('arbitrary values with some single quoted values', async () => {\n      let extractions = parse(`\n      <div class=\"font-['Open_Sans',_system-ui,_sans-serif] hover:font-['Proxima_Nova',_system-ui,_sans-serif] hover:focus:font-['Inter_var',_system-ui,_sans-serif]\"></div>\n    `);\n      expect(extractions).toContain(`font-['Open_Sans',_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:font-['Proxima_Nova',_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:focus:font-['Inter_var',_system-ui,_sans-serif]`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with some double quoted values","suites":["arbitrary values with quotes"],"updatePoint":{"line":162,"column":57,"index":6939},"line":162,"code":"    test('arbitrary values with some double quoted values', async () => {\n      let extractions = parse(`\n      <div class='font-[\"Open_Sans\",_system-ui,_sans-serif] hover:font-[\"Proxima_Nova\",_system-ui,_sans-serif] hover:focus:font-[\"Inter_var\",_system-ui,_sans-serif]'></div>\n    `);\n      expect(extractions).toContain(`font-[\"Open_Sans\",_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:font-[\"Proxima_Nova\",_system-ui,_sans-serif]`);\n      expect(extractions).toContain(`hover:focus:font-[\"Inter_var\",_system-ui,_sans-serif]`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with escaped underscores","suites":["arbitrary values with quotes"],"updatePoint":{"line":170,"column":51,"index":7495},"line":170,"code":"    test('arbitrary values with escaped underscores', async () => {\n      let extractions = parse(`\n      <div class=\"content-['hello\\\\_world'] hover:content-['hello\\\\_world\\\\_2'] hover:focus:content-['hello\\\\_world\\\\_3']\"></div>\n    `);\n      expect(extractions).toContain(`content-['hello\\\\_world']`);\n      expect(extractions).toContain(`hover:content-['hello\\\\_world\\\\_2']`);\n      expect(extractions).toContain(`hover:focus:content-['hello\\\\_world\\\\_3']`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with angle brackets in single quotes","suites":["arbitrary values with quotes"],"updatePoint":{"line":178,"column":63,"index":7977},"line":178,"code":"    test('arbitrary values with angle brackets in single quotes', async () => {\n      let extractions = parse(`\n      <div class=\"content-['>'] hover:content-['<'] hover:focus:content-['>']\"></div>\n    `);\n      expect(extractions).toContain(`content-['>']`);\n      expect(extractions).toContain(`hover:content-['<']`);\n      expect(extractions).toContain(`hover:focus:content-['>']`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with angle brackets in double quotes","suites":["arbitrary values with quotes"],"updatePoint":{"line":186,"column":63,"index":8371},"line":186,"code":"    test('arbitrary values with angle brackets in double quotes', async () => {\n      let extractions = parse(`\n      <div class=\"content-[\">\"] hover:content-[\"<\"] hover:focus:content-[\">\"]\"></div>\n    `);\n      expect(extractions).toContain(`content-[\">\"]`);\n      expect(extractions).toContain(`hover:content-[\"<\"]`);\n      expect(extractions).toContain(`hover:focus:content-[\">\"]`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary values with theme lookup using quotes","suites":["arbitrary values with quotes"],"updatePoint":{"line":194,"column":57,"index":8759},"line":194,"code":"    test('arbitrary values with theme lookup using quotes', () => {\n      let extractions = parse(`\n      <p class=\"[--y:theme('colors.blue.500')] [color:var(--y)]\"></p>\n    `);\n      expect(extractions).toContain(`[--y:theme('colors.blue.500')]`);\n      expect(extractions).toContain(`[color:var(--y)]`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"special characters","suites":["arbitrary values with quotes"],"updatePoint":{"line":202,"column":26,"index":9048},"line":202,"code":"  test('special characters', async () => {\n    let extractions = parse(`\n      <div class=\"<sm:underline md>:font-bold\"></div>\n    `);\n    expect(extractions).toContain(`<sm:underline`);\n    expect(extractions).toContain(`md>:font-bold`);\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"with single quotes array within template literal","suites":["arbitrary values with quotes"],"updatePoint":{"line":209,"column":56,"index":9323},"line":209,"code":"  test('with single quotes array within template literal', async () => {\n    let extractions = parse(`<div class=\\`\\${['pr-1.5']}\\`></div>`);\n    expect(extractions).toContain('pr-1.5');\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"with double quotes array within template literal","suites":["arbitrary values with quotes"],"updatePoint":{"line":213,"column":56,"index":9516},"line":213,"code":"  test('with double quotes array within template literal', async () => {\n    let extractions = parse(`<div class=\\`\\${[\"pr-1.5\"]}\\`></div>`);\n    expect(extractions).toContain('pr-1.5');\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"with single quotes array within function","suites":["arbitrary values with quotes"],"updatePoint":{"line":217,"column":48,"index":9701},"line":217,"code":"  test('with single quotes array within function', async () => {\n    let extractions = parse(`document.body.classList.add(['pl-1.5'].join(\" \"));`);\n    expect(extractions).toContain('pl-1.5');\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"with double quotes array within function","suites":["arbitrary values with quotes"],"updatePoint":{"line":221,"column":48,"index":9900},"line":221,"code":"  test('with double quotes array within function', async () => {\n    let extractions = parse(`document.body.classList.add([\"pl-1.5\"].join(\" \"));`);\n    expect(extractions).toContain('pl-1.5');\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"with angle brackets","suites":["arbitrary values with quotes"],"updatePoint":{"line":225,"column":27,"index":10078},"line":225,"code":"  test('with angle brackets', async () => {\n    let extractions = parse(`<div class=\"bg-blue-200 <% if (useShadow) { %>shadow-xl<% } %>\">test</div>`);\n    expect(extractions).toContain('bg-blue-200');\n    expect(extractions).toContain('shadow-xl');\n    expect(extractions).not.toContain('>shadow-xl');\n    expect(extractions).not.toContain('shadow-xl<');\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"markdown code fences","suites":["arbitrary values with quotes"],"updatePoint":{"line":232,"column":28,"index":10440},"line":232,"code":"  test('markdown code fences', async () => {\n    let extractions = parse('<!-- this should work: `.font-bold`, `.font-normal` -->');\n    expect(extractions).toContain('font-bold');\n    expect(extractions).toContain('font-normal');\n    expect(extractions).not.toContain('.font-bold');\n    expect(extractions).not.toContain('.font-normal');\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"classes in slim templates","suites":["arbitrary values with quotes"],"updatePoint":{"line":239,"column":33,"index":10790},"line":239,"code":"  test('classes in slim templates', async () => {\n    let extractions = parse(`\n      p.bg-red-500.text-sm\n        'This is a paragraph\n          small.italic.text-gray-500\n            '(Look mom, no closing tag!)\n    `);\n    expect(extractions).toContain('bg-red-500');\n    expect(extractions).toContain('text-sm');\n    expect(extractions).toContain('italic');\n    expect(extractions).toContain('text-gray-500');\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"multi-word + arbitrary values + quotes","suites":["arbitrary values with quotes"],"updatePoint":{"line":251,"column":46,"index":11223},"line":251,"code":"  test('multi-word + arbitrary values + quotes', async () => {\n    let extractions = parse(`\n      grid-cols-['repeat(2)']\n    `);\n    expect(extractions).toContain(`grid-cols-['repeat(2)']`);\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"a lot of data","suites":["arbitrary values with quotes"],"updatePoint":{"line":257,"column":21,"index":11397},"line":257,"code":"  test('a lot of data', () => {\n    let extractions = parse('underline '.repeat(2 ** 17));\n    expect(extractions).toContain(`underline`);\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"ruby percent string array","suites":["arbitrary values with quotes"],"updatePoint":{"line":261,"column":33,"index":11554},"line":261,"code":"  test('ruby percent string array', () => {\n    let extractions = parse('%w[text-[#bada55]]');\n    expect(extractions).toContain(`text-[#bada55]`);\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary properties followed by square bracketed stuff","suites":["arbitrary values with quotes"],"updatePoint":{"line":265,"column":63,"index":11738},"line":265,"code":"  test('arbitrary properties followed by square bracketed stuff', () => {\n    let extractions = parse('<div class=\"h-16 items-end border border-white [display:inherit]\">[foo]</div>');\n    expect(extractions).toContain(`[display:inherit]`);\n  });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"Class object syntax","suites":["Vue"],"updatePoint":{"line":270,"column":29,"index":11976},"line":270,"code":"    test('Class object syntax', () => {\n      let extractions = parse(`<Examples with combinations :class=\"{ underline: myCondition, 'font-bold': myCondition }\">[foo]</div>`);\n      expect(extractions).toContain(`underline`, `font-bold`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"Class array syntax","suites":["Vue"],"updatePoint":{"line":274,"column":28,"index":12222},"line":274,"code":"    test('Class array syntax', () => {\n      // With leading space\n      let extractions = parse(`<div :class=\"[ 'underline', myCondition && 'font-bold', myCondition ? 'flex' : 'block' ]\">[foo]</div>`);\n      expect(extractions).toContain(`underline`, `font-bold`, `flex`, `block`);\n\n      // Without leading space\n      extractions = parse(`<div :class=\"['underline', myCondition && 'font-bold', myCondition ? 'flex' : 'block']\">[foo]</div>`);\n      expect(extractions).toContain(`underline`, `font-bold`, `flex`, `block`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"should not parse candidates without spaces in object-like syntax","suites":["anti-test"],"updatePoint":{"line":285,"column":72,"index":12837},"line":285,"code":"    it('should not parse candidates without spaces in object-like syntax', () => {\n      let extractions = parse(html`<div class=\"{underline:isActive,flex:isOnline,md:bold}\"></div>`);\n\n      // The oxide parser _does_ allow this!\n      if (parse !== oxideParser) {\n        expect(extractions).not.toContain(`underline:isActive`);\n        expect(extractions).not.toContain(`flex:isOnline`);\n        expect(extractions).not.toContain(`md:bold`);\n      }\n      expect(extractions).not.toContain(`underline`);\n      expect(extractions).not.toContain(`isActive`);\n      expect(extractions).not.toContain(`flex`);\n      expect(extractions).not.toContain(`isOnline`);\n      expect(extractions).not.toContain(`md`);\n      expect(extractions).not.toContain(`bold`);\n    });","file":"parse-candidate-strings.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to parse: \"%s\"","suites":["Tailwind Defaults"],"line":3,"code":"  it.each([['spin 1s linear infinite', {\n    value: 'spin 1s linear infinite',\n    name: 'spin',\n    duration: '1s',\n    timingFunction: 'linear',\n    iterationCount: 'infinite'\n  }], ['ping 1s cubic-bezier(0, 0, 0.2, 1) infinite', {\n    value: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',\n    name: 'ping',\n    duration: '1s',\n    timingFunction: 'cubic-bezier(0, 0, 0.2, 1)',\n    iterationCount: 'infinite'\n  }], ['bounce 1s infinite', {\n    value: 'bounce 1s infinite',\n    name: 'bounce',\n    duration: '1s',\n    iterationCount: 'infinite'\n  }]])('should be possible to parse: \"%s\"', (input, expected) => {\n    const parsed = parseAnimationValue(input);\n    expect(parsed).toHaveLength(1);\n    expect(parsed[0]).toEqual(expected);\n  });","file":"parseAnimationValue.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use css variables","suites":["css variables"],"updatePoint":{"line":27,"column":45,"index":932},"line":27,"code":"  it('should be possible to use css variables', () => {\n    let parsed = parseAnimationValue('jump var(--animation-duration, 10s) linear infinite');\n    expect(parsed[0]).toEqual({\n      value: 'jump var(--animation-duration, 10s) linear infinite',\n      name: 'jump',\n      timingFunction: 'linear',\n      iterationCount: 'infinite',\n      unknown: ['var(--animation-duration, 10s)']\n    });\n  });","file":"parseAnimationValue.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to parse: \"%s\"","suites":["MDN Examples"],"line":39,"code":"  it.each([['3s ease-in 1s 2 reverse both paused slidein', {\n    value: '3s ease-in 1s 2 reverse both paused slidein',\n    delay: '1s',\n    direction: 'reverse',\n    duration: '3s',\n    fillMode: 'both',\n    iterationCount: '2',\n    name: 'slidein',\n    playState: 'paused',\n    timingFunction: 'ease-in'\n  }], ['slidein 3s linear 1s', {\n    value: 'slidein 3s linear 1s',\n    delay: '1s',\n    duration: '3s',\n    name: 'slidein',\n    timingFunction: 'linear'\n  }], ['slidein 3s', {\n    value: 'slidein 3s',\n    duration: '3s',\n    name: 'slidein'\n  }]])('should be possible to parse: \"%s\"', (input, expected) => {\n    const parsed = parseAnimationValue(input);\n    expect(parsed).toHaveLength(1);\n    expect(parsed[0]).toEqual(expected);\n  });","file":"parseAnimationValue.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to parse \"%s\" into %o","suites":["duration & delay"],"line":66,"code":"  it.each([\n  // Positive seconds (integer)\n  ['spin 2s 1s linear', {\n    duration: '2s',\n    delay: '1s'\n  }],\n  // Negative seconds (integer)\n  ['spin -2s -1s linear', {\n    duration: '-2s',\n    delay: '-1s'\n  }],\n  // Positive seconds (float)\n  ['spin 2.321s 1.321s linear', {\n    duration: '2.321s',\n    delay: '1.321s'\n  }],\n  // Negative seconds (float)\n  ['spin -2.321s -1.321s linear', {\n    duration: '-2.321s',\n    delay: '-1.321s'\n  }],\n  // Positive milliseconds (integer)\n  ['spin 200ms 100ms linear', {\n    duration: '200ms',\n    delay: '100ms'\n  }],\n  // Negative milliseconds (integer)\n  ['spin -200ms -100ms linear', {\n    duration: '-200ms',\n    delay: '-100ms'\n  }],\n  // Positive milliseconds (float)\n  ['spin 200.321ms 100.321ms linear', {\n    duration: '200.321ms',\n    delay: '100.321ms'\n  }],\n  // Negative milliseconds (float)\n  ['spin -200.321ms -100.321ms linear', {\n    duration: '-200.321ms',\n    delay: '-100.321ms'\n  }]])('should be possible to parse \"%s\" into %o', (input, {\n    duration,\n    delay\n  }) => {\n    const parsed = parseAnimationValue(input);\n    expect(parsed).toHaveLength(1);\n    expect(parsed[0].duration).toEqual(duration);\n    expect(parsed[0].delay).toEqual(delay);\n  });","file":"parseAnimationValue.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to parse \"%s\" with an iteraction count of \"%s\"","suites":["iteration count"],"line":117,"code":"  it.each([\n  // Number\n  ['1 spin 200s 100s linear', '1'], ['spin 2 200s 100s linear', '2'], ['spin 200s 3 100s linear', '3'], ['spin 200s 100s 4 linear', '4'], ['spin 200s 100s linear 5', '5'],\n  // Infinite\n  ['infinite spin 200s 100s linear', 'infinite'], ['spin infinite 200s 100s linear', 'infinite'], ['spin 200s infinite 100s linear', 'infinite'], ['spin 200s 100s infinite linear', 'infinite'], ['spin 200s 100s linear infinite', 'infinite']])('should be possible to parse \"%s\" with an iteraction count of \"%s\"', (input, iterationCount) => {\n    const parsed = parseAnimationValue(input);\n    expect(parsed).toHaveLength(1);\n    expect(parsed[0].iterationCount).toEqual(iterationCount);\n  });","file":"parseAnimationValue.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to parse multiple applications at once","suites":["multiple animations"],"updatePoint":{"line":128,"column":63,"index":4182},"line":128,"code":"  it('should be possible to parse multiple applications at once', () => {\n    const input = ['spin 1s linear infinite', 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite', 'pulse 2s cubic-bezier(0.4, 0, 0.6) infinite'].join(',');\n    const parsed = parseAnimationValue(input);\n    expect(parsed).toHaveLength(3);\n    expect(parsed).toEqual([{\n      value: 'spin 1s linear infinite',\n      name: 'spin',\n      duration: '1s',\n      timingFunction: 'linear',\n      iterationCount: 'infinite'\n    }, {\n      value: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',\n      name: 'ping',\n      duration: '1s',\n      timingFunction: 'cubic-bezier(0, 0, 0.2, 1)',\n      iterationCount: 'infinite'\n    }, {\n      value: 'pulse 2s cubic-bezier(0.4, 0, 0.6) infinite',\n      name: 'pulse',\n      duration: '2s',\n      timingFunction: 'cubic-bezier(0.4, 0, 0.6)',\n      iterationCount: 'infinite'\n    }]);\n  });","file":"parseAnimationValue.test.js","skipped":false,"dir":"tests"},{"name":"should parse \"$input\" correctly","suites":["multiple animations"],"line":153,"code":"it.each`\n  input                                                           | value                                                       | direction    | playState    | fillMode       | iterationCount | timingFunction | duration | delay   | name\n  ${'1s spin 1s infinite'}                                        | ${'1s spin 1s infinite'}                                    | ${undefined} | ${undefined} | ${undefined}   | ${'infinite'}  | ${undefined}   | ${'1s'}  | ${'1s'} | ${'spin'}\n  ${'infinite infinite 1s 1s'}                                    | ${'infinite infinite 1s 1s'}                                | ${undefined} | ${undefined} | ${undefined}   | ${'infinite'}  | ${undefined}   | ${'1s'}  | ${'1s'} | ${'infinite'}\n  ${'ease 1s ease 1s'}                                            | ${'ease 1s ease 1s'}                                        | ${undefined} | ${undefined} | ${undefined}   | ${undefined}   | ${'ease'}      | ${'1s'}  | ${'1s'} | ${'ease'}\n  ${'normal paused backwards infinite ease-in 1s 2s name'}        | ${'normal paused backwards infinite ease-in 1s 2s name'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n  ${'paused backwards infinite ease-in 1s 2s name normal'}        | ${'paused backwards infinite ease-in 1s 2s name normal'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n  ${'backwards infinite ease-in 1s 2s name normal paused'}        | ${'backwards infinite ease-in 1s 2s name normal paused'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n  ${'infinite ease-in 1s 2s name normal paused backwards'}        | ${'infinite ease-in 1s 2s name normal paused backwards'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n  ${'ease-in 1s 2s name normal paused backwards infinite'}        | ${'ease-in 1s 2s name normal paused backwards infinite'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n  ${'1s 2s name normal paused backwards infinite ease-in'}        | ${'1s 2s name normal paused backwards infinite ease-in'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n  ${'2s name normal paused backwards infinite ease-in 1s'}        | ${'2s name normal paused backwards infinite ease-in 1s'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'2s'}  | ${'1s'} | ${'name'}\n  ${'name normal paused backwards infinite ease-in 1s 2s'}        | ${'name normal paused backwards infinite ease-in 1s 2s'}    | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n  ${'  name   normal  paused backwards infinite ease-in 1s 2s  '} | ${'name   normal  paused backwards infinite ease-in 1s 2s'} | ${'normal'}  | ${'paused'}  | ${'backwards'} | ${'infinite'}  | ${'ease-in'}   | ${'1s'}  | ${'2s'} | ${'name'}\n`('should parse \"$input\" correctly', ({\n  input,\n  ...expected\n}) => {\n  let parsed = parseAnimationValue(input);\n  expect(parsed).toHaveLength(1);\n  expect(parsed[0]).toEqual(expected);\n});","file":"parseAnimationValue.test.js","skipped":false,"dir":"tests"},{"name":"it parses simple single class definitions","suites":[],"updatePoint":{"line":9,"column":47,"index":253},"line":9,"code":"test('it parses simple single class definitions', () => {\n  let result = parseObjectStyles({\n    '.foobar': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem'\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foobar {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses multiple class definitions","suites":[],"updatePoint":{"line":25,"column":42,"index":593},"line":25,"code":"test('it parses multiple class definitions', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem'\n    },\n    '.bar': {\n      width: '200px',\n      height: '100px'\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    .bar {\n      width: 200px;\n      height: 100px;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses nested pseudo-selectors","suites":[],"updatePoint":{"line":49,"column":39,"index":1047},"line":49,"code":"test('it parses nested pseudo-selectors', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem',\n      '&:hover': {\n        backgroundColor: 'orange'\n      },\n      '&:focus': {\n        backgroundColor: 'blue'\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    .foo:hover {\n      background-color: orange;\n    }\n    .foo:focus {\n      background-color: blue;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses top-level media queries","suites":[],"updatePoint":{"line":77,"column":39,"index":1608},"line":77,"code":"test('it parses top-level media queries', () => {\n  let result = parseObjectStyles({\n    '@media (min-width: 200px)': {\n      '.foo': {\n        backgroundColor: 'orange'\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    @media (min-width: 200px) {\n      .foo {\n        background-color: orange;\n      }\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses nested media queries","suites":[],"updatePoint":{"line":93,"column":36,"index":1947},"line":93,"code":"test('it parses nested media queries', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem',\n      '@media (min-width: 200px)': {\n        backgroundColor: 'orange'\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    @media (min-width: 200px) {\n      .foo {\n        background-color: orange;\n      }\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it bubbles nested screen rules","suites":[],"updatePoint":{"line":117,"column":36,"index":2448},"line":117,"code":"test('it bubbles nested screen rules', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem',\n      '@screen sm': {\n        backgroundColor: 'orange'\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    @screen sm {\n      .foo {\n        background-color: orange;\n      }\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses pseudo-selectors in nested media queries","suites":[],"updatePoint":{"line":141,"column":56,"index":2939},"line":141,"code":"test('it parses pseudo-selectors in nested media queries', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem',\n      '&:hover': {\n        '@media (min-width: 200px)': {\n          backgroundColor: 'orange'\n        }\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    @media (min-width: 200px) {\n      .foo:hover {\n        background-color: orange;\n      }\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses descendant selectors","suites":[],"updatePoint":{"line":167,"column":36,"index":3479},"line":167,"code":"test('it parses descendant selectors', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem',\n      '.bar': {\n        backgroundColor: 'orange'\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    .foo .bar {\n      background-color: orange;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses nested multi-class selectors","suites":[],"updatePoint":{"line":189,"column":44,"index":3928},"line":189,"code":"test('it parses nested multi-class selectors', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem',\n      '&.bar': {\n        backgroundColor: 'orange'\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    .foo.bar {\n      background-color: orange;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it parses nested multi-class selectors in media queries","suites":[],"updatePoint":{"line":211,"column":61,"index":4394},"line":211,"code":"test('it parses nested multi-class selectors in media queries', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      backgroundColor: 'red',\n      color: 'white',\n      padding: '1rem',\n      '@media (min-width: 200px)': {\n        '&.bar': {\n          backgroundColor: 'orange'\n        }\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: red;\n      color: white;\n      padding: 1rem;\n    }\n    @media (min-width: 200px) {\n      .foo.bar {\n        background-color: orange;\n      }\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it strips empty selectors when nesting","suites":[],"updatePoint":{"line":237,"column":44,"index":4938},"line":237,"code":"test('it strips empty selectors when nesting', () => {\n  let result = parseObjectStyles({\n    '.foo': {\n      '.bar': {\n        backgroundColor: 'orange'\n      }\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo .bar {\n      background-color: orange;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"it can parse an array of styles","suites":[],"updatePoint":{"line":251,"column":37,"index":5218},"line":251,"code":"test('it can parse an array of styles', () => {\n  let result = parseObjectStyles([{\n    '.foo': {\n      backgroundColor: 'orange'\n    }\n  }, {\n    '.bar': {\n      backgroundColor: 'red'\n    }\n  }, {\n    '.foo': {\n      backgroundColor: 'blue'\n    }\n  }]);\n  expect(toCss(result)).toMatchFormattedCss(css`\n    .foo {\n      background-color: orange;\n    }\n    .bar {\n      background-color: red;\n    }\n    .foo {\n      background-color: blue;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"custom properties preserve their case","suites":[],"updatePoint":{"line":277,"column":43,"index":5681},"line":277,"code":"test('custom properties preserve their case', () => {\n  let result = parseObjectStyles({\n    ':root': {\n      '--colors-aColor-500': '0'\n    }\n  });\n  expect(toCss(result)).toMatchFormattedCss(css`\n    :root {\n      --colors-aColor-500: 0;\n    }\n  `);\n});","file":"parseObjectStyles.test.js","skipped":false,"dir":"tests"},{"name":"should add the divide styles for divide-y and a default border color","suites":[],"updatePoint":{"line":2,"column":72,"index":129},"line":2,"code":"it('should add the divide styles for divide-y and a default border color', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"divide-y\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n\n      .divide-y > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-y-reverse: 0;\n        border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n        border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n      }\n    `);\n  });\n});","file":"plugins/divide.test.js","skipped":false,"dir":"tests"},{"name":"should add the divide styles for divide-x and a default border color","suites":[],"updatePoint":{"line":23,"column":72,"index":754},"line":23,"code":"it('should add the divide styles for divide-x and a default border color', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"divide-x\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .divide-x > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-x-reverse: 0;\n        border-right-width: calc(1px * var(--tw-divide-x-reverse));\n        border-left-width: calc(1px * calc(1 - var(--tw-divide-x-reverse)));\n      }\n    `);\n  });\n});","file":"plugins/divide.test.js","skipped":false,"dir":"tests"},{"name":"should add the divide styles for divide-y-reverse and a default border color","suites":[],"updatePoint":{"line":43,"column":80,"index":1386},"line":43,"code":"it('should add the divide styles for divide-y-reverse and a default border color', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"divide-y-reverse\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .divide-y-reverse > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-y-reverse: 1;\n      }\n    `);\n  });\n});","file":"plugins/divide.test.js","skipped":false,"dir":"tests"},{"name":"should add the divide styles for divide-x-reverse and a default border color","suites":[],"updatePoint":{"line":61,"column":80,"index":1889},"line":61,"code":"it('should add the divide styles for divide-x-reverse and a default border color', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"divide-x-reverse\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .divide-x-reverse > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-x-reverse: 1;\n      }\n    `);\n  });\n});","file":"plugins/divide.test.js","skipped":false,"dir":"tests"},{"name":"should only inject the base styles once if we use divide and border at the same time","suites":[],"updatePoint":{"line":79,"column":88,"index":2400},"line":79,"code":"it('should only inject the base styles once if we use divide and border at the same time', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"divide-y border-r\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .divide-y > :not([hidden]) ~ :not([hidden]) {\n        --tw-divide-y-reverse: 0;\n        border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n        border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n      }\n      .border-r {\n        border-right-width: 1px;\n      }\n    `);\n  });\n});","file":"plugins/divide.test.js","skipped":false,"dir":"tests"},{"name":"font-family utilities can be defined as a string","suites":[],"updatePoint":{"line":2,"column":54,"index":101},"line":2,"code":"test('font-family utilities can be defined as a string', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-sans\"></div>`\n    }],\n    theme: {\n      fontFamily: {\n        sans: 'Helvetica, Arial, sans-serif'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-sans {\n        font-family: Helvetica, Arial, sans-serif;\n      }\n    `);\n  });\n});","file":"plugins/fontFamily.test.js","skipped":false,"dir":"tests"},{"name":"font-family utilities can be defined as an array","suites":[],"updatePoint":{"line":21,"column":54,"index":556},"line":21,"code":"test('font-family utilities can be defined as an array', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-sans\"></div>`\n    }],\n    theme: {\n      fontFamily: {\n        sans: ['Helvetica', 'Arial', 'sans-serif']\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-sans {\n        font-family: Helvetica, Arial, sans-serif;\n      }\n    `);\n  });\n});","file":"plugins/fontFamily.test.js","skipped":false,"dir":"tests"},{"name":"font-family values are not automatically escaped","suites":[],"updatePoint":{"line":40,"column":54,"index":1017},"line":40,"code":"test('font-family values are not automatically escaped', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-sans\"></div>`\n    }],\n    theme: {\n      fontFamily: {\n        sans: [\"'Exo 2'\", 'sans-serif']\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-sans {\n        font-family: 'Exo 2', sans-serif;\n      }\n    `);\n  });\n});","file":"plugins/fontFamily.test.js","skipped":false,"dir":"tests"},{"name":"font-feature-settings can be provided when families are defined as a string","suites":[],"updatePoint":{"line":59,"column":81,"index":1485},"line":59,"code":"test('font-feature-settings can be provided when families are defined as a string', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-sans\"></div>`\n    }],\n    theme: {\n      fontFamily: {\n        sans: ['Helvetica, Arial, sans-serif', {\n          fontFeatureSettings: '\"cv11\", \"ss01\"'\n        }]\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-sans {\n        font-feature-settings: 'cv11', 'ss01';\n        font-family: Helvetica, Arial, sans-serif;\n      }\n    `);\n  });\n});","file":"plugins/fontFamily.test.js","skipped":false,"dir":"tests"},{"name":"font-feature-settings can be provided when families are defined as an array","suites":[],"updatePoint":{"line":81,"column":81,"index":2077},"line":81,"code":"test('font-feature-settings can be provided when families are defined as an array', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-sans\"></div>`\n    }],\n    theme: {\n      fontFamily: {\n        sans: [['Helvetica', 'Arial', 'sans-serif'], {\n          fontFeatureSettings: '\"cv11\", \"ss01\"'\n        }]\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-sans {\n        font-feature-settings: 'cv11', 'ss01';\n        font-family: Helvetica, Arial, sans-serif;\n      }\n    `);\n  });\n});","file":"plugins/fontFamily.test.js","skipped":false,"dir":"tests"},{"name":"font-variation-settings can be provided when families are defined as a string","suites":[],"updatePoint":{"line":103,"column":83,"index":2677},"line":103,"code":"test('font-variation-settings can be provided when families are defined as a string', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-sans\"></div>`\n    }],\n    theme: {\n      fontFamily: {\n        sans: ['Inter, sans-serif', {\n          fontVariationSettings: '\"opsz\" 32'\n        }]\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-sans {\n        font-variation-settings: 'opsz' 32;\n        font-family: Inter, sans-serif;\n      }\n    `);\n  });\n});","file":"plugins/fontFamily.test.js","skipped":false,"dir":"tests"},{"name":"font-variation-settings can be provided when families are defined as an array","suites":[],"updatePoint":{"line":125,"column":83,"index":3243},"line":125,"code":"test('font-variation-settings can be provided when families are defined as an array', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-sans\"></div>`\n    }],\n    theme: {\n      fontFamily: {\n        sans: [['Inter', 'sans-serif'], {\n          fontVariationSettings: '\"opsz\" 32'\n        }]\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-sans {\n        font-variation-settings: 'opsz' 32;\n        font-family: Inter, sans-serif;\n      }\n    `);\n  });\n});","file":"plugins/fontFamily.test.js","skipped":false,"dir":"tests"},{"name":"font-size utilities can include a default line-height","suites":[],"updatePoint":{"line":2,"column":59,"index":106},"line":2,"code":"test('font-size utilities can include a default line-height', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-md text-sm text-lg\"></div>`\n    }],\n    theme: {\n      fontSize: {\n        sm: '12px',\n        md: ['16px', '24px'],\n        lg: ['20px', '28px']\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .text-lg {\n        font-size: 20px;\n        line-height: 28px;\n      }\n      .text-md {\n        font-size: 16px;\n        line-height: 24px;\n      }\n      .text-sm {\n        font-size: 12px;\n      }\n    `);\n  });\n});","file":"plugins/fontSize.test.js","skipped":false,"dir":"tests"},{"name":"font-size utilities can include a default letter-spacing","suites":[],"updatePoint":{"line":31,"column":62,"index":741},"line":31,"code":"test('font-size utilities can include a default letter-spacing', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-md text-sm text-lg\"></div>`\n    }],\n    theme: {\n      fontSize: {\n        sm: '12px',\n        md: ['16px', {\n          letterSpacing: '-0.01em'\n        }],\n        lg: ['20px', {\n          letterSpacing: '-0.02em'\n        }]\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .text-lg {\n        letter-spacing: -0.02em;\n        font-size: 20px;\n      }\n      .text-md {\n        letter-spacing: -0.01em;\n        font-size: 16px;\n      }\n      .text-sm {\n        font-size: 12px;\n      }\n    `);\n  });\n});","file":"plugins/fontSize.test.js","skipped":false,"dir":"tests"},{"name":"font-size utilities can include a default line-height and letter-spacing","suites":[],"updatePoint":{"line":64,"column":78,"index":1484},"line":64,"code":"test('font-size utilities can include a default line-height and letter-spacing', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-md text-sm text-lg\"></div>`\n    }],\n    theme: {\n      fontSize: {\n        sm: '12px',\n        md: ['16px', {\n          lineHeight: '24px',\n          letterSpacing: '-0.01em'\n        }],\n        lg: ['20px', {\n          lineHeight: '28px',\n          letterSpacing: '-0.02em'\n        }]\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .text-lg {\n        letter-spacing: -0.02em;\n        font-size: 20px;\n        line-height: 28px;\n      }\n      .text-md {\n        letter-spacing: -0.01em;\n        font-size: 16px;\n        line-height: 24px;\n      }\n      .text-sm {\n        font-size: 12px;\n      }\n    `);\n  });\n});","file":"plugins/fontSize.test.js","skipped":false,"dir":"tests"},{"name":"font-size utilities can include a font-weight","suites":[],"updatePoint":{"line":101,"column":51,"index":2314},"line":101,"code":"test('font-size utilities can include a font-weight', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-md text-sm text-lg\"></div>`\n    }],\n    theme: {\n      fontSize: {\n        sm: '12px',\n        md: ['16px', {\n          lineHeight: '24px',\n          fontWeight: 500\n        }],\n        lg: ['20px', {\n          lineHeight: '28px',\n          fontWeight: 'bold'\n        }]\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .text-lg {\n        font-size: 20px;\n        font-weight: bold;\n        line-height: 28px;\n      }\n      .text-md {\n        font-size: 16px;\n        font-weight: 500;\n        line-height: 24px;\n      }\n      .text-sm {\n        font-size: 12px;\n      }\n    `);\n  });\n});","file":"plugins/fontSize.test.js","skipped":false,"dir":"tests"},{"name":"font-size utilities can include a line-height modifier","suites":[],"updatePoint":{"line":138,"column":60,"index":3125},"line":138,"code":"test('font-size utilities can include a line-height modifier', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"text-sm md:text-base\">\n          <div class=\"text-sm/6 md:text-base/7\"></div>\n          <div class=\"text-sm/[21px] md:text-base/[33px]\"></div>\n          <div class=\"text-[13px]/6 md:text-[19px]/8\"></div>\n          <div class=\"text-[17px]/[23px] md:text-[21px]/[29px]\"></div>\n          <div class=\"text-sm/999 md:text-base/000\"></div>\n        </div>`\n    }],\n    theme: {\n      fontSize: {\n        sm: ['12px', '20px'],\n        base: ['16px', '24px']\n      },\n      lineHeight: {\n        6: '24px',\n        7: '28px',\n        8: '32px'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .text-\\[13px\\]\\/6 {\n        font-size: 13px;\n        line-height: 24px;\n      }\n      .text-\\[17px\\]\\/\\[23px\\] {\n        font-size: 17px;\n        line-height: 23px;\n      }\n      .text-sm {\n        font-size: 12px;\n        line-height: 20px;\n      }\n      .text-sm\\/6 {\n        font-size: 12px;\n        line-height: 24px;\n      }\n      .text-sm\\/\\[21px\\] {\n        font-size: 12px;\n        line-height: 21px;\n      }\n      @media (min-width: 768px) {\n        .md\\:text-\\[19px\\]\\/8 {\n          font-size: 19px;\n          line-height: 32px;\n        }\n        .md\\:text-\\[21px\\]\\/\\[29px\\] {\n          font-size: 21px;\n          line-height: 29px;\n        }\n        .md\\:text-base {\n          font-size: 16px;\n          line-height: 24px;\n        }\n        .md\\:text-base\\/7 {\n          font-size: 16px;\n          line-height: 28px;\n        }\n        .md\\:text-base\\/\\[33px\\] {\n          font-size: 16px;\n          line-height: 33px;\n        }\n      }\n    `);\n  });\n});","file":"plugins/fontSize.test.js","skipped":false,"dir":"tests"},{"name":"opacity variables are given to colors defined as closures","suites":[],"updatePoint":{"line":2,"column":63,"index":110},"line":2,"code":"test('opacity variables are given to colors defined as closures', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"text-primary text-secondary from-primary from-secondary via-primary via-secondary to-primary to-secondary text-opacity-50\"\n        ></div>`\n    }],\n    theme: {\n      colors: {\n        primary: ({\n          opacityVariable,\n          opacityValue\n        }) => {\n          if (opacityValue !== undefined) {\n            return `rgba(31,31,31,${opacityValue})`;\n          }\n          if (opacityVariable !== undefined) {\n            return `rgba(31,31,31,var(${opacityVariable},1))`;\n          }\n          return `rgb(31,31,31)`;\n        },\n        secondary: 'hsl(10, 50%, 50%)'\n      },\n      opacity: {\n        50: '0.5'\n      }\n    }\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .from-primary {\n        --tw-gradient-from: #1f1f1f var(--tw-gradient-from-position);\n        --tw-gradient-to: #1f1f1f00 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n      }\n      .from-secondary {\n        --tw-gradient-from: #bf5540 var(--tw-gradient-from-position);\n        --tw-gradient-to: #bf554000 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n      }\n      .via-primary {\n        --tw-gradient-to: #1f1f1f00 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), #1f1f1f var(--tw-gradient-via-position),\n          var(--tw-gradient-to);\n      }\n      .via-secondary {\n        --tw-gradient-to: #bf554000 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), #bf5540 var(--tw-gradient-via-position),\n          var(--tw-gradient-to);\n      }\n      .to-primary {\n        --tw-gradient-to: #1f1f1f var(--tw-gradient-to-position);\n      }\n      .to-secondary {\n        --tw-gradient-to: #bf5540 var(--tw-gradient-to-position);\n      }\n      .text-primary {\n        --tw-text-opacity: 1;\n        color: rgba(31, 31, 31, var(--tw-text-opacity));\n      }\n      .text-secondary {\n        --tw-text-opacity: 1;\n        color: hsl(10 50% 50% / var(--tw-text-opacity));\n      }\n      .text-opacity-50 {\n        --tw-text-opacity: 0.5;\n      }\n    `);\n  });\n});","file":"plugins/gradientColorStops.test.js","skipped":false,"dir":"tests"},{"name":"gradient color stop position","suites":[],"updatePoint":{"line":72,"column":34,"index":2429},"line":72,"code":"test('gradient color stop position', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div>\n            <div\n              class=\"bg-gradient-to-r from-red-500 from-50 via-pink-500 via-75 to-violet-400 to-80\"\n            ></div>\n            <div class=\"from-10% from-[11%] from-[12px] from-[--from-value]\"></div>\n            <div class=\"via-20% via-[12%] via-[123px] via-[--via-value]\"></div>\n            <div class=\"to-30% to-[13%] to-[14px] to-[--to-value]\"></div>\n          </div>\n        `\n    }],\n    theme: {}\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-gradient-to-r {\n        background-image: linear-gradient(to right, var(--tw-gradient-stops));\n      }\n      .from-\\[--from-value\\] {\n        --tw-gradient-from: var(--from-value) var(--tw-gradient-from-position);\n        --tw-gradient-to: #fff0 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n      }\n      .from-red-500 {\n        --tw-gradient-from: #ef4444 var(--tw-gradient-from-position);\n        --tw-gradient-to: #ef444400 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n      }\n      .from-10\\% {\n        --tw-gradient-from-position: 10%;\n      }\n      .from-\\[11\\%\\] {\n        --tw-gradient-from-position: 11%;\n      }\n      .from-\\[12px\\] {\n        --tw-gradient-from-position: 12px;\n      }\n      .via-\\[--via-value\\] {\n        --tw-gradient-to: #fff0 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from),\n          var(--via-value) var(--tw-gradient-via-position), var(--tw-gradient-to);\n      }\n      .via-pink-500 {\n        --tw-gradient-to: #ec489900 var(--tw-gradient-to-position);\n        --tw-gradient-stops: var(--tw-gradient-from), #ec4899 var(--tw-gradient-via-position),\n          var(--tw-gradient-to);\n      }\n      .via-20\\% {\n        --tw-gradient-via-position: 20%;\n      }\n      .via-\\[12\\%\\] {\n        --tw-gradient-via-position: 12%;\n      }\n      .via-\\[123px\\] {\n        --tw-gradient-via-position: 123px;\n      }\n      .to-\\[--to-value\\] {\n        --tw-gradient-to: var(--to-value) var(--tw-gradient-to-position);\n      }\n      .to-violet-400 {\n        --tw-gradient-to: #a78bfa var(--tw-gradient-to-position);\n      }\n      .to-30\\% {\n        --tw-gradient-to-position: 30%;\n      }\n      .to-\\[13\\%\\] {\n        --tw-gradient-to-position: 13%;\n      }\n      .to-\\[14px\\] {\n        --tw-gradient-to-position: 14px;\n      }\n    `);\n  });\n});","file":"plugins/gradientColorStops.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to load a custom nesting plugin","suites":[],"updatePoint":{"line":5,"column":54,"index":238},"line":5,"code":"it('should be possible to load a custom nesting plugin', async () => {\n  let input = css`\n    .foo {\n      color: black;\n      @screen md {\n        color: blue;\n      }\n    }\n  `;\n  expect(await run(input, function (root) {\n    root.walkRules(rule => {\n      rule.selector += '-modified';\n    });\n  })).toMatchFormattedCss(css`\n    .foo-modified {\n      color: black;\n      @media screen(md) {\n        color: blue;\n      }\n    }\n  `);\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to load a custom nesting plugin by name (string) instead","suites":[],"updatePoint":{"line":27,"column":79,"index":702},"line":27,"code":"it('should be possible to load a custom nesting plugin by name (string) instead', async () => {\n  let input = css`\n    .foo {\n      color: black;\n      @screen md {\n        color: blue;\n      }\n    }\n  `;\n  expect(await run(input, 'postcss-nested')).toMatchFormattedCss(css`\n    .foo {\n      color: black;\n    }\n\n    @media screen(md) {\n      .foo {\n        color: blue;\n      }\n    }\n  `);\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"should default to the bundled postcss-nested plugin (no options)","suites":[],"updatePoint":{"line":48,"column":68,"index":1086},"line":48,"code":"it('should default to the bundled postcss-nested plugin (no options)', async () => {\n  let input = css`\n    .foo {\n      color: black;\n      @screen md {\n        color: blue;\n      }\n    }\n  `;\n  expect(await run(input)).toMatchFormattedCss(css`\n    .foo {\n      color: black;\n    }\n\n    @media screen(md) {\n      .foo {\n        color: blue;\n      }\n    }\n  `);\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"should default to the bundled postcss-nested plugin (empty options)","suites":[],"updatePoint":{"line":69,"column":71,"index":1455},"line":69,"code":"it('should default to the bundled postcss-nested plugin (empty options)', async () => {\n  let input = css`\n    .foo {\n      color: black;\n      @screen md {\n        color: blue;\n      }\n    }\n  `;\n  expect(await run(input, {})).toMatchFormattedCss(css`\n    .foo {\n      color: black;\n    }\n\n    @media screen(md) {\n      .foo {\n        color: blue;\n      }\n    }\n  `);\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use postcss-nested plugin with options","suites":[],"updatePoint":{"line":90,"column":64,"index":1821},"line":90,"code":"it('should be possible to use postcss-nested plugin with options', async () => {\n  let input = css`\n    .foo {\n      color: black;\n      @screen md {\n        color: blue;\n      }\n    }\n  `;\n  expect(await run(input, postcssNested({\n    noIsPseudoSelector: true\n  }))).toMatchFormattedCss(css`\n    .foo {\n      color: black;\n    }\n\n    @media screen(md) {\n      .foo {\n        color: blue;\n      }\n    }\n  `);\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"@screen rules are replaced with media queries","suites":[],"updatePoint":{"line":113,"column":51,"index":2221},"line":113,"code":"test('@screen rules are replaced with media queries', async () => {\n  let input = css`\n    .foo {\n      color: black;\n      @screen md {\n        color: blue;\n      }\n    }\n  `;\n  expect(await run(input, postcssNested)).toMatchFormattedCss(css`\n    .foo {\n      color: black;\n    }\n\n    @media screen(md) {\n      .foo {\n        color: blue;\n      }\n    }\n  `);\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"@screen rules can work with `@apply`","suites":[],"updatePoint":{"line":134,"column":42,"index":2576},"line":134,"code":"test('@screen rules can work with `@apply`', async () => {\n  let input = css`\n    .foo {\n      @apply bg-black;\n      @screen md {\n        @apply bg-blue-500;\n      }\n    }\n  `;\n  expect(await run(input, postcssNested)).toMatchFormattedCss(css`\n    .foo {\n      @apply bg-black;\n    }\n\n    @media screen(md) {\n      .foo {\n        @apply bg-blue-500;\n      }\n    }\n  `);\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"nesting does not break downstream plugin visitors","suites":[],"updatePoint":{"line":155,"column":55,"index":2964},"line":155,"code":"test('nesting does not break downstream plugin visitors', async () => {\n  let input = css`\n    .foo {\n      color: black;\n    }\n    @supports (color: blue) {\n      .foo {\n        color: blue;\n      }\n    }\n    /* Comment */\n  `;\n  let spyPlugin = visitorSpyPlugin();\n  let plugins = [plugin(postcssNested), spyPlugin.plugin];\n  let result = await run(input, plugins);\n  expect(result).toMatchFormattedCss(css`\n    .foo {\n      color: black;\n    }\n    @supports (color: blue) {\n      .foo {\n        color: blue;\n      }\n    }\n    /* Comment */\n  `);\n  expect(spyPlugin.spies.Once).toHaveBeenCalled();\n  expect(spyPlugin.spies.OnceExit).toHaveBeenCalled();\n  expect(spyPlugin.spies.Root).toHaveBeenCalled();\n  expect(spyPlugin.spies.Rule).toHaveBeenCalled();\n  expect(spyPlugin.spies.AtRule).toHaveBeenCalled();\n  expect(spyPlugin.spies.Comment).toHaveBeenCalled();\n  expect(spyPlugin.spies.Declaration).toHaveBeenCalled();\n});","file":"postcss-plugins/nesting/index.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use contrast-more and contrast-less variants","suites":[],"updatePoint":{"line":2,"column":70,"index":126},"line":2,"code":"it('should be possible to use contrast-more and contrast-less variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"bg-white contrast-more:bg-pink-500 contrast-less:bg-black\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .bg-white {\n        --tw-bg-opacity: 1;\n        background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n      }\n      @media (prefers-contrast: more) {\n        .contrast-more\\:bg-pink-500 {\n          --tw-bg-opacity: 1;\n          background-color: rgb(236 72 153 / var(--tw-bg-opacity));\n        }\n      }\n      @media (prefers-contrast: less) {\n        .contrast-less\\:bg-black {\n          --tw-bg-opacity: 1;\n          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n        }\n      }\n    `);\n  });\n});","file":"prefers-contrast.test.js","skipped":false,"dir":"tests"},{"name":"dark mode should appear after the contrast variants","suites":[],"updatePoint":{"line":38,"column":55,"index":1106},"line":38,"code":"it('dark mode should appear after the contrast variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"contrast-more:bg-black dark:bg-white\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (prefers-contrast: more) {\n        .contrast-more\\:bg-black {\n          --tw-bg-opacity: 1;\n          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n        }\n      }\n      @media (prefers-color-scheme: dark) {\n        .dark\\:bg-white {\n          --tw-bg-opacity: 1;\n          background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n        }\n      }\n    `);\n  });\n});","file":"prefers-contrast.test.js","skipped":false,"dir":"tests"},{"name":"prefix","suites":[],"updatePoint":{"line":2,"column":12,"index":68},"line":2,"code":"test('prefix', () => {\n  let config = {\n    prefix: 'tw-',\n    darkMode: 'class',\n    content: [{\n      raw: html`\n          <div class=\"tw--ml-4\"></div>\n          <div class=\"md:tw--ml-5\"></div>\n          <div class=\"md:hover:tw--ml-6\"></div>\n          <div class=\"tw-container\"></div>\n          <div class=\"btn-no-prefix\"></div>\n          <div class=\"tw-btn-prefix\"></div>\n          <div class=\"tw-custom-util-prefix\"></div>\n          <div class=\"custom-util-no-prefix\"></div>\n          <div class=\"custom-component\"></div>\n          <div class=\"tw-custom-component-prefix\"></div>\n          <div class=\"custom-component-no-prefix\"></div>\n          <div class=\"tw-font-bold\"></div>\n          <div class=\"md:hover:tw-text-right\"></div>\n          <div class=\"motion-safe:hover:tw-text-center\"></div>\n          <div class=\"dark:focus:tw-text-left\"></div>\n          <div class=\"dark:tw-bg-[rgb(255,0,0)]\"></div>\n          <div class=\"group-hover:focus-within:tw-text-left\"></div>\n          <div class=\"rtl:active:tw-text-center\"></div>\n          <div class=\"tw-animate-ping\"></div>\n          <div class=\"tw-animate-spin\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {\n      animation: {\n        spin: 'spin 1s linear infinite',\n        ping: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite'\n      },\n      keyframes: {\n        spin: {\n          to: {\n            transform: 'rotate(360deg)'\n          }\n        }\n      }\n    },\n    plugins: [function ({\n      addComponents,\n      addUtilities\n    }) {\n      addComponents({\n        '.btn-prefix': {\n          button: 'yes'\n        }\n      });\n      addComponents({\n        '.btn-no-prefix': {\n          button: 'yes'\n        }\n      }, {\n        respectPrefix: false\n      });\n      addUtilities({\n        '.custom-util-prefix': {\n          button: 'no'\n        }\n      });\n      addUtilities({\n        '.custom-util-no-prefix': {\n          button: 'no'\n        }\n      }, {\n        respectPrefix: false\n      });\n    }]\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @layer components {\n      .custom-component {\n        @apply tw-font-bold dark:group-hover:tw-font-normal;\n      }\n    }\n    @tailwind utilities;\n    @layer utilities {\n      .custom-utility {\n        foo: bar;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .tw-container {\n        width: 100%;\n      }\n      @media (min-width: 640px) {\n        .tw-container {\n          max-width: 640px;\n        }\n      }\n      @media (min-width: 768px) {\n        .tw-container {\n          max-width: 768px;\n        }\n      }\n      @media (min-width: 1024px) {\n        .tw-container {\n          max-width: 1024px;\n        }\n      }\n      @media (min-width: 1280px) {\n        .tw-container {\n          max-width: 1280px;\n        }\n      }\n      @media (min-width: 1536px) {\n        .tw-container {\n          max-width: 1536px;\n        }\n      }\n      .tw-btn-prefix,\n      .btn-no-prefix {\n        button: yes;\n      }\n      .custom-component {\n        font-weight: 700;\n      }\n      :is(.tw-dark .tw-group:hover .custom-component) {\n        font-weight: 400;\n      }\n      .tw--ml-4 {\n        margin-left: -1rem;\n      }\n      .tw-animate-ping {\n        animation: 1s cubic-bezier(0, 0, 0.2, 1) infinite ping;\n      }\n      @keyframes tw-spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n      .tw-animate-spin {\n        animation: 1s linear infinite tw-spin;\n      }\n      .tw-font-bold {\n        font-weight: 700;\n      }\n      .tw-custom-util-prefix,\n      .custom-util-no-prefix {\n        button: no;\n      }\n      .tw-group:hover .group-hover\\:focus-within\\:tw-text-left:focus-within {\n        text-align: left;\n      }\n      :is([dir='rtl'] .rtl\\:active\\:tw-text-center:active) {\n        text-align: center;\n      }\n      @media (prefers-reduced-motion: no-preference) {\n        .motion-safe\\:hover\\:tw-text-center:hover {\n          text-align: center;\n        }\n      }\n      :is(.tw-dark .dark\\:tw-bg-\\[rgb\\(255\\,0\\,0\\)\\]) {\n        --tw-bg-opacity: 1;\n        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n      }\n      :is(.tw-dark .dark\\:focus\\:tw-text-left:focus) {\n        text-align: left;\n      }\n      @media (min-width: 768px) {\n        .md\\:tw--ml-5 {\n          margin-left: -1.25rem;\n        }\n        .md\\:hover\\:tw--ml-6:hover {\n          margin-left: -1.5rem;\n        }\n        .md\\:hover\\:tw-text-right:hover {\n          text-align: right;\n        }\n      }\n    `);\n  });\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: marker before prefix","suites":[],"updatePoint":{"line":185,"column":43,"index":4687},"line":185,"code":"test('negative values: marker before prefix', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"-tw-top-1\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .-tw-top-1 {\n      top: -0.25rem;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: marker after prefix","suites":[],"updatePoint":{"line":206,"column":42,"index":5126},"line":206,"code":"test('negative values: marker after prefix', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"tw--top-1\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .tw--top-1 {\n      top: -0.25rem;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: marker before prefix and arbitrary value","suites":[],"updatePoint":{"line":227,"column":63,"index":5586},"line":227,"code":"test('negative values: marker before prefix and arbitrary value', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"-tw-top-[1px]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .-tw-top-\\[1px\\] {\n      top: -1px;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: marker after prefix and arbitrary value","suites":[],"updatePoint":{"line":248,"column":62,"index":6051},"line":248,"code":"test('negative values: marker after prefix and arbitrary value', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"tw--top-[1px]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .tw--top-\\[1px\\] {\n      top: -1px;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: no marker and arbitrary value","suites":[],"updatePoint":{"line":269,"column":52,"index":6506},"line":269,"code":"test('negative values: no marker and arbitrary value', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"tw-top-[-1px]\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .tw-top-\\[-1px\\] {\n      top: -1px;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: variant versions","suites":[],"updatePoint":{"line":290,"column":39,"index":6948},"line":290,"code":"test('negative values: variant versions', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`\n          <div class=\"hover:-tw-top-1 hover:tw--top-1\"></div>\n          <div class=\"hover:-tw-top-[1px] hover:tw--top-[1px]\"></div>\n          <div class=\"hover:tw-top-[-1px]\"></div>\n\n          <!-- this one should not generate anything -->\n          <div class=\"-hover:tw-top-1\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .hover\\:-tw-top-1:hover {\n      top: -0.25rem;\n    }\n    .hover\\:-tw-top-\\[1px\\]:hover {\n      top: -1px;\n    }\n    .hover\\:tw--top-1:hover {\n      top: -0.25rem;\n    }\n    .hover\\:tw--top-\\[1px\\]:hover,\n    .hover\\:tw-top-\\[-1px\\]:hover {\n      top: -1px;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: prefix and apply","suites":[],"updatePoint":{"line":328,"column":39,"index":7873},"line":328,"code":"test('negative values: prefix and apply', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html``\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n\n    .a {\n      @apply hover:tw--top-1;\n    }\n    .b {\n      @apply hover:-tw-top-1;\n    }\n    .c {\n      @apply hover:-tw-top-[1px];\n    }\n    .d {\n      @apply hover:tw--top-[1px];\n    }\n    .e {\n      @apply hover:tw-top-[-1px];\n    }\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .a:hover,\n    .b:hover {\n      top: -0.25rem;\n    }\n    .c:hover,\n    .d:hover,\n    .e:hover {\n      top: -1px;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"negative values: prefix in the safelist","suites":[],"updatePoint":{"line":371,"column":45,"index":8602},"line":371,"code":"test('negative values: prefix in the safelist', async () => {\n  let config = {\n    prefix: 'tw-',\n    safelist: [{\n      pattern: /-tw-top-1/g\n    }, {\n      pattern: /tw--top-1/g\n    }],\n    theme: {\n      inset: {\n        1: '0.25rem'\n      }\n    },\n    content: [{\n      raw: html``\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .-tw-top-1,\n    .tw--top-1 {\n      top: -0.25rem;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"prefix with negative values and variants in the safelist","suites":[],"updatePoint":{"line":403,"column":62,"index":9202},"line":403,"code":"test('prefix with negative values and variants in the safelist', async () => {\n  let config = {\n    prefix: 'tw-',\n    safelist: [{\n      pattern: /-tw-top-1/,\n      variants: ['hover', 'sm:hover']\n    }, {\n      pattern: /tw--top-1/,\n      variants: ['hover', 'sm:hover']\n    }],\n    theme: {\n      inset: {\n        1: '0.25rem'\n      }\n    },\n    content: [{\n      raw: html``\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .-tw-top-1,\n    .tw--top-1,\n    .hover\\:-tw-top-1:hover,\n    .hover\\:tw--top-1:hover {\n      top: -0.25rem;\n    }\n    @media (min-width: 640px) {\n      .sm\\:hover\\:-tw-top-1:hover,\n      .sm\\:hover\\:tw--top-1:hover {\n        top: -0.25rem;\n      }\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"prefix does not detect and generate unnecessary classes","suites":[],"updatePoint":{"line":445,"column":61,"index":10075},"line":445,"code":"test('prefix does not detect and generate unnecessary classes', async () => {\n  let config = {\n    prefix: 'tw-_',\n    content: [{\n      raw: html`-aaa-filter aaaa-table aaaa-hidden`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css``);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"supports prefixed utilities using arbitrary values","suites":[],"updatePoint":{"line":461,"column":56,"index":10459},"line":461,"code":"test('supports prefixed utilities using arbitrary values', async () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`foo`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    .foo {\n      @apply tw-text-[color:rgb(var(--button-background,var(--primary-button-background)))];\n      @apply tw-ease-[cubic-bezier(0.77,0,0.175,1)];\n      @apply tw-rounded-[min(4px,var(--input-border-radius))];\n    }\n  `;\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .foo {\n      color: rgb(var(--button-background, var(--primary-button-background)));\n      border-radius: min(4px, var(--input-border-radius));\n      transition-timing-function: cubic-bezier(0.77, 0, 0.175, 1);\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"supports non-word prefixes (1)","suites":[],"updatePoint":{"line":487,"column":36,"index":11216},"line":487,"code":"test('supports non-word prefixes (1)', async () => {\n  let config = {\n    prefix: '@',\n    content: [{\n      raw: html`\n          <div class=\"@underline\"></div>\n          <div class=\"@bg-black\"></div>\n          <div class=\"@[color:red]\"></div>\n          <div class=\"hover:before:@content-['Hovering']\"></div>\n          <div class=\"my-utility\"></div>\n          <div class=\"foo\"></div>\n\n          <!-- these won't be detected -->\n          <div class=\"overline\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .my-utility {\n        color: orange;\n      }\n    }\n    .foo {\n      @apply @text-white;\n      @apply [background-color:red];\n    }\n  `;\n  const result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .\\@bg-black {\n      --tw-bg-opacity: 1;\n      background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n    }\n    .\\@underline {\n      text-decoration-line: underline;\n    }\n    .my-utility {\n      color: orange;\n    }\n    .foo {\n      --tw-text-opacity: 1;\n      color: rgb(255 255 255 / var(--tw-text-opacity));\n      background-color: red;\n    }\n    .hover\\:before\\:\\@content-\\[\\'Hovering\\'\\]:hover:before {\n      --tw-content: 'Hovering';\n      content: var(--tw-content);\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"supports non-word prefixes (2)","suites":[],"updatePoint":{"line":542,"column":36,"index":12544},"line":542,"code":"test('supports non-word prefixes (2)', async () => {\n  let config = {\n    prefix: '@]$',\n    content: [{\n      raw: html`\n          <div class=\"@]$underline\"></div>\n          <div class=\"@]$bg-black\"></div>\n          <div class=\"@]$[color:red]\"></div>\n          <div class=\"hover:before:@]$content-['Hovering']\"></div>\n          <div class=\"my-utility\"></div>\n          <div class=\"foo\"></div>\n\n          <!-- these won't be detected -->\n          <div class=\"overline\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .my-utility {\n        color: orange;\n      }\n    }\n    .foo {\n      @apply @]$text-white;\n      @apply [background-color:red];\n    }\n  `;\n  const result = await run(input, config);\n\n  // TODO: The class `.hover\\:before\\:\\@\\]\\$content-\\[\\'Hovering\\'\\]:hover::before` is not generated\n  // This happens because of the parenthesis/brace/bracket clipping performed on candidates\n\n  expect(result.css).toMatchFormattedCss(css`\n    .\\@\\]\\$bg-black {\n      --tw-bg-opacity: 1;\n      background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n    }\n    .\\@\\]\\$underline {\n      text-decoration-line: underline;\n    }\n    .my-utility {\n      color: orange;\n    }\n    .foo {\n      --tw-text-opacity: 1;\n      color: rgb(255 255 255 / var(--tw-text-opacity));\n      background-color: red;\n    }\n  `);\n});","file":"prefix.test.js","skipped":false,"dir":"tests"},{"name":"it prefixes classes with the provided prefix","suites":[],"updatePoint":{"line":2,"column":50,"index":100},"line":2,"code":"test('it prefixes classes with the provided prefix', () => {\n  expect(prefix('tw-', '.foo')).toEqual('.tw-foo');\n});","file":"prefixSelector.test.js","skipped":false,"dir":"tests"},{"name":"it properly prefixes selectors with non-standard characters","suites":[],"updatePoint":{"line":5,"column":65,"index":232},"line":5,"code":"test('it properly prefixes selectors with non-standard characters', () => {\n  expect(prefix('tw-', '.hello\\\\:world')).toEqual('.tw-hello\\\\:world');\n  expect(prefix('tw-', '.foo\\\\/bar')).toEqual('.tw-foo\\\\/bar');\n  expect(prefix('tw-', '.wew\\\\.lad')).toEqual('.tw-wew\\\\.lad');\n});","file":"prefixSelector.test.js","skipped":false,"dir":"tests"},{"name":"it prefixes all classes in a selector","suites":[],"updatePoint":{"line":10,"column":43,"index":490},"line":10,"code":"test('it prefixes all classes in a selector', () => {\n  expect(prefix('tw-', '.btn-blue .w-1\\\\/4 > h1.text-xl + a .bar')).toEqual('.tw-btn-blue .tw-w-1\\\\/4 > h1.tw-text-xl + a .tw-bar');\n});","file":"prefixSelector.test.js","skipped":false,"dir":"tests"},{"name":"preflight has a correct border color fallback","suites":[],"updatePoint":{"line":2,"column":49,"index":95},"line":2,"code":"it('preflight has a correct border color fallback', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"border-black\"></div>`\n    }],\n    theme: {\n      borderColor: ({\n        theme\n      }) => theme('colors')\n    },\n    plugins: [],\n    corePlugins: {\n      preflight: true\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    // Lightning CSS optimizes this to just `border-color: 0 solid;` because `currentcolor` is the default user-agent stylesheet value.\n    // https://drafts.csswg.org/css-backgrounds/#border-color\n    expect(result.css).toContain(`border: 0 solid;`);\n  });\n});","file":"preflight.test.js","skipped":false,"dir":"tests"},{"name":"raw content","suites":[],"updatePoint":{"line":4,"column":15,"index":107},"line":4,"code":"it('raw content', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"sr-only\"></div>\n          <div class=\"content-center\"></div>\n          <div class=\"items-start\"></div>\n          <div class=\"self-end\"></div>\n          <div class=\"animate-none\"></div>\n          <div class=\"animate-spin\"></div>\n          <div class=\"appearance-none\"></div>\n          <div class=\"bg-local\"></div>\n          <div class=\"bg-clip-border\"></div>\n          <div class=\"bg-green-500\"></div>\n          <div class=\"bg-gradient-to-r\"></div>\n          <div class=\"bg-opacity-20\"></div>\n          <div class=\"bg-top\"></div>\n          <div class=\"bg-no-repeat\"></div>\n          <div class=\"bg-cover\"></div>\n          <div class=\"bg-origin-border bg-origin-padding bg-origin-content\"></div>\n          <div class=\"border-collapse\"></div>\n          <div class=\"border-black\"></div>\n          <div class=\"border-opacity-10\"></div>\n          <div class=\"rounded-md\"></div>\n          <div class=\"border-solid\"></div>\n          <div class=\"border\"></div>\n          <div class=\"border-2\"></div>\n          <div class=\"shadow\"></div>\n          <div class=\"shadow-md\"></div>\n          <div class=\"shadow-lg\"></div>\n          <div class=\"decoration-clone decoration-slice\"></div>\n          <div class=\"box-border\"></div>\n          <div class=\"clear-left\"></div>\n          <div class=\"container\"></div>\n          <div class=\"cursor-pointer\"></div>\n          <div class=\"hidden inline-grid\"></div>\n          <div class=\"divide-gray-200\"></div>\n          <div class=\"divide-opacity-50\"></div>\n          <div class=\"divide-dotted\"></div>\n          <div class=\"divide-x-2 divide-y-4 divide-x-0 divide-y-0\"></div>\n          <div class=\"fill-current\"></div>\n          <div class=\"flex-1\"></div>\n          <div class=\"flex-row-reverse\"></div>\n          <div class=\"flex-grow\"></div>\n          <div class=\"flex-grow-0\"></div>\n          <div class=\"flex-shrink\"></div>\n          <div class=\"flex-shrink-0\"></div>\n          <div class=\"flex-wrap\"></div>\n          <div class=\"float-right\"></div>\n          <div class=\"font-sans\"></div>\n          <div class=\"text-2xl\"></div>\n          <div class=\"antialiased\"></div>\n          <div class=\"not-italic\"></div>\n          <div class=\"tabular-nums ordinal diagonal-fractions\"></div>\n          <div class=\"font-medium\"></div>\n          <div class=\"gap-x-2 gap-y-3 gap-4\"></div>\n          <div class=\"from-red-300 via-purple-200 to-blue-400\"></div>\n          <div class=\"auto-cols-min\"></div>\n          <div class=\"grid-flow-row\"></div>\n          <div class=\"auto-rows-max\"></div>\n          <div class=\"col-span-3\"></div>\n          <div class=\"col-start-1\"></div>\n          <div class=\"col-end-4\"></div>\n          <div class=\"row-span-2\"></div>\n          <div class=\"row-start-3\"></div>\n          <div class=\"row-end-5\"></div>\n          <div class=\"grid-cols-4\"></div>\n          <div class=\"grid-rows-3\"></div>\n          <div class=\"h-16\"></div>\n          <div class=\"inset-0 inset-y-4 inset-x-2 top-6 right-8 bottom-12 left-16\"></div>\n          <div class=\"isolate isolation-auto\"></div>\n          <div class=\"justify-center\"></div>\n          <div class=\"justify-items-end\"></div>\n          <div class=\"justify-self-start\"></div>\n          <div class=\"tracking-tight\"></div>\n          <div class=\"leading-relaxed leading-5\"></div>\n          <div class=\"list-inside\"></div>\n          <div class=\"list-disc\"></div>\n          <div class=\"m-4 my-2 mx-auto mt-0 mr-1 mb-3 ml-4\"></div>\n          <div class=\"max-h-screen\"></div>\n          <div class=\"max-w-full\"></div>\n          <div class=\"min-h-0\"></div>\n          <div class=\"min-w-min\"></div>\n          <div class=\"object-cover\"></div>\n          <div class=\"object-bottom\"></div>\n          <div class=\"opacity-90\"></div>\n          <div class=\"bg-blend-darken bg-blend-difference\"></div>\n          <div class=\"mix-blend-multiply mix-blend-saturation\"></div>\n          <div class=\"order-last order-2\"></div>\n          <div class=\"overflow-hidden\"></div>\n          <div class=\"overscroll-contain\"></div>\n          <div class=\"scroll-smooth\"></div>\n          <div class=\"p-4 py-2 px-3 pt-1 pr-2 pb-3 pl-4\"></div>\n          <div class=\"place-content-start\"></div>\n          <div class=\"placeholder-green-300\"></div>\n          <div class=\"placeholder-opacity-60\"></div>\n          <div class=\"place-items-end\"></div>\n          <div class=\"place-self-center\"></div>\n          <div class=\"pointer-events-none\"></div>\n          <div class=\"absolute\"></div>\n          <div class=\"resize-none\"></div>\n          <div class=\"ring-white\"></div>\n          <div class=\"ring-offset-blue-300\"></div>\n          <div class=\"ring-offset-2\"></div>\n          <div class=\"ring-opacity-40\"></div>\n          <div class=\"ring ring-4\"></div>\n          <div\n            class=\"filter filter-none blur-md brightness-150 contrast-50 drop-shadow-md grayscale hue-rotate-60 invert saturate-200 sepia\"\n          ></div>\n          <div\n            class=\"backdrop-filter backdrop-filter-none backdrop-blur-lg backdrop-brightness-50 backdrop-contrast-0 backdrop-grayscale backdrop-hue-rotate-90 backdrop-invert backdrop-opacity-75 backdrop-saturate-150 backdrop-sepia\"\n          ></div>\n          <div class=\"rotate-3\"></div>\n          <div class=\"scale-95\"></div>\n          <div class=\"skew-y-12 skew-x-12\"></div>\n          <div class=\"space-x-4 space-y-3 space-x-reverse space-y-reverse\"></div>\n          <div class=\"stroke-current\"></div>\n          <div class=\"stroke-2\"></div>\n          <div class=\"table-fixed\"></div>\n          <div class=\"caption-top\"></div>\n          <div class=\"caption-bottom\"></div>\n          <div class=\"text-center\"></div>\n          <div class=\"text-indigo-500\"></div>\n          <div class=\"underline\"></div>\n          <div class=\"text-opacity-10\"></div>\n          <div class=\"overflow-ellipsis truncate\"></div>\n          <div class=\"uppercase\"></div>\n          <div class=\"transform transform-gpu\"></div>\n          <div class=\"origin-top-right\"></div>\n          <div class=\"delay-300\"></div>\n          <div class=\"duration-200\"></div>\n          <div class=\"transition transition-all\"></div>\n          <div class=\"ease-in-out\"></div>\n          <div class=\"translate-x-5 -translate-x-4 translate-y-6 -translate-x-3\"></div>\n          <div class=\"select-none\"></div>\n          <div class=\"align-middle\"></div>\n          <div class=\"invisible\"></div>\n          <div class=\"collapse\"></div>\n          <div class=\"whitespace-nowrap\"></div>\n          <div class=\"w-12\"></div>\n          <div class=\"break-words\"></div>\n          <div class=\"z-30\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(fs.readFileSync(path.resolve(__dirname, './raw-content.test.css'), 'utf8'));\n  });\n});","file":"raw-content.test.js","skipped":false,"dir":"tests"},{"name":"relative purge paths","suites":[],"updatePoint":{"line":2,"column":26,"index":66},"line":2,"code":"test('relative purge paths', () => {\n  let config = {\n    content: ['./tests/relative-purge-paths.test.html'],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toIncludeCss(css`\n      .font-bold {\n        font-weight: 700;\n      }\n    `);\n  });\n});","file":"relative-purge-paths.test.js","skipped":false,"dir":"tests"},{"name":"basic utilities","suites":[],"updatePoint":{"line":2,"column":21,"index":67},"line":2,"code":"test('basic utilities', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"rotate-3 skew-y-6 scale-x-110\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .rotate-3 {\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .skew-y-6 {\n        --tw-skew-y: 6deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .scale-x-110 {\n        --tw-scale-x: 1.1;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with pseudo-class variants","suites":[],"updatePoint":{"line":66,"column":32,"index":1955},"line":66,"code":"test('with pseudo-class variants', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"hover:scale-x-110 focus:rotate-3 hover:focus:skew-y-6\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .hover\\:scale-x-110:hover {\n        --tw-scale-x: 1.1;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .focus\\:rotate-3:focus {\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .hover\\:focus\\:skew-y-6:focus:hover {\n        --tw-skew-y: 6deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with pseudo-element variants","suites":[],"updatePoint":{"line":130,"column":34,"index":3921},"line":130,"code":"test('with pseudo-element variants', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"before:scale-x-110 after:rotate-3\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .before\\:scale-x-110:before {\n        content: var(--tw-content);\n        --tw-scale-x: 1.1;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .after\\:rotate-3:after {\n        content: var(--tw-content);\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with multi-class variants","suites":[],"updatePoint":{"line":190,"column":31,"index":5638},"line":190,"code":"test('with multi-class variants', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"group-hover:scale-x-110 peer-focus:rotate-3\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .group:hover .group-hover\\:scale-x-110 {\n        --tw-scale-x: 1.1;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .peer:focus ~ .peer-focus\\:rotate-3 {\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with multi-class pseudo-element variants","suites":[],"updatePoint":{"line":248,"column":46,"index":7332},"line":248,"code":"test('with multi-class pseudo-element variants', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"group-hover:before:scale-x-110 peer-focus:after:rotate-3\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .group:hover .group-hover\\:before\\:scale-x-110:before {\n        content: var(--tw-content);\n        --tw-scale-x: 1.1;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .peer:focus ~ .peer-focus\\:after\\:rotate-3:after {\n        content: var(--tw-content);\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with multi-class pseudo-element and pseudo-class variants","suites":[],"updatePoint":{"line":308,"column":63,"index":9156},"line":308,"code":"test('with multi-class pseudo-element and pseudo-class variants', async () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"group-hover:hover:before:scale-x-110 peer-focus:focus:after:rotate-3\"\n        ></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .group:hover .group-hover\\:hover\\:before\\:scale-x-110:hover:before {\n        content: var(--tw-content);\n        --tw-scale-x: 1.1;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .peer:focus ~ .peer-focus\\:focus\\:after\\:rotate-3:focus:after {\n        content: var(--tw-content);\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with apply","suites":[],"updatePoint":{"line":370,"column":16,"index":10990},"line":370,"code":"test('with apply', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n\n    @layer utilities {\n      .foo {\n        @apply rotate-3;\n      }\n    }\n\n    .bar {\n      @apply before:scale-110;\n    }\n\n    .baz::before {\n      @apply rotate-45;\n    }\n\n    .whats ~ .next > span:hover {\n      @apply skew-x-6;\n    }\n\n    .media-queries {\n      @apply md:rotate-45;\n    }\n\n    .a,\n    .b,\n    .c {\n      @apply skew-y-3;\n    }\n\n    .a,\n    .b {\n      @apply rotate-45;\n    }\n\n    .a::before,\n    .b::after {\n      @apply rotate-90;\n    }\n\n    .recursive {\n      @apply foo;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .foo {\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .bar:before {\n        content: var(--tw-content);\n        --tw-scale-x: 1.1;\n        --tw-scale-y: 1.1;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .baz:before {\n        --tw-rotate: 45deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .whats ~ .next > span:hover {\n        --tw-skew-x: 6deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      @media (min-width: 768px) {\n        .media-queries {\n          --tw-rotate: 45deg;\n          transform: translate(var(--tw-translate-x), var(--tw-translate-y))\n            rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))\n            scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n        }\n      }\n      .a,\n      .b,\n      .c {\n        --tw-skew-y: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .a,\n      .b {\n        --tw-rotate: 45deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .a:before,\n      .b:after {\n        --tw-rotate: 90deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .recursive {\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"legacy pseudo-element syntax is supported","suites":[],"updatePoint":{"line":520,"column":47,"index":15186},"line":520,"code":"test('legacy pseudo-element syntax is supported', async () => {\n  let config = {\n    experimental: {\n      optimizeUniversalDefaults: true\n    },\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n\n    .a:before {\n      @apply rotate-45;\n    }\n\n    .b:after {\n      @apply rotate-3;\n    }\n\n    .c:first-line {\n      @apply rotate-1;\n    }\n\n    .d:first-letter {\n      @apply rotate-6;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .a:before,\n      .b:after,\n      .c:first-line,\n      .d:first-letter {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      .a:before {\n        --tw-rotate: 45deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .b:after {\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .c:first-line {\n        --tw-rotate: 1deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n      .d:first-letter {\n        --tw-rotate: 6deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with borders","suites":[],"updatePoint":{"line":592,"column":18,"index":17191},"line":592,"code":"test('with borders', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"border border-red-500 md:border-2\"></div>`\n    }],\n    corePlugins: ['borderWidth', 'borderColor', 'borderOpacity']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .border {\n        border-width: 1px;\n      }\n      .border-red-500 {\n        --tw-border-opacity: 1;\n        border-color: rgb(239 68 68 / var(--tw-border-opacity));\n      }\n      @media (min-width: 768px) {\n        .md\\:border-2 {\n          border-width: 2px;\n        }\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"with shadows","suites":[],"updatePoint":{"line":621,"column":18,"index":17887},"line":621,"code":"test('with shadows', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"shadow ring-1 ring-black/25 md:shadow-xl\"></div>`\n    }],\n    corePlugins: ['boxShadow', 'ringColor', 'ringWidth']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-ring-inset: ;\n        --tw-ring-offset-width: 0px;\n        --tw-ring-offset-color: #fff;\n        --tw-ring-color: #3b82f680;\n        --tw-ring-offset-shadow: 0 0 #0000;\n        --tw-ring-shadow: 0 0 #0000;\n        --tw-shadow: 0 0 #0000;\n        --tw-shadow-colored: 0 0 #0000;\n      }\n      ::-webkit-backdrop {\n        --tw-ring-inset: ;\n        --tw-ring-offset-width: 0px;\n        --tw-ring-offset-color: #fff;\n        --tw-ring-color: #3b82f680;\n        --tw-ring-offset-shadow: 0 0 #0000;\n        --tw-ring-shadow: 0 0 #0000;\n        --tw-shadow: 0 0 #0000;\n        --tw-shadow-colored: 0 0 #0000;\n      }\n      ::backdrop {\n        --tw-ring-inset: ;\n        --tw-ring-offset-width: 0px;\n        --tw-ring-offset-color: #fff;\n        --tw-ring-color: #3b82f680;\n        --tw-ring-offset-shadow: 0 0 #0000;\n        --tw-ring-shadow: 0 0 #0000;\n        --tw-shadow: 0 0 #0000;\n        --tw-shadow-colored: 0 0 #0000;\n      }\n      .shadow {\n        --tw-shadow: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;\n        --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\n          0 1px 2px -1px var(--tw-shadow-color);\n        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n          var(--tw-shadow);\n      }\n      .ring-1 {\n        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width)\n          var(--tw-ring-offset-color);\n        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width))\n          var(--tw-ring-color);\n        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n      }\n      .ring-black\\/25 {\n        --tw-ring-color: #00000040;\n      }\n      @media (min-width: 768px) {\n        .md\\:shadow-xl {\n          --tw-shadow: 0 20px 25px -5px #0000001a, 0 8px 10px -6px #0000001a;\n          --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color),\n            0 8px 10px -6px var(--tw-shadow-color);\n          box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n            var(--tw-shadow);\n        }\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"when no utilities that need the defaults are used","suites":[],"updatePoint":{"line":696,"column":55,"index":20499},"line":696,"code":"test('when no utilities that need the defaults are used', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"\"></div>`\n    }],\n    corePlugins: ['transform', 'scale', 'rotate', 'skew']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      *,\n      :before,\n      :after {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::-webkit-backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n      ::backdrop {\n        --tw-translate-x: 0;\n        --tw-translate-y: 0;\n        --tw-rotate: 0;\n        --tw-skew-x: 0;\n        --tw-skew-y: 0;\n        --tw-scale-x: 1;\n        --tw-scale-y: 1;\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"when a utility uses defaults but they do not exist","suites":[],"updatePoint":{"line":742,"column":56,"index":21557},"line":742,"code":"test('when a utility uses defaults but they do not exist', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"rotate-3\"></div>`\n    }],\n    corePlugins: ['rotate']\n  };\n  let input = css`\n    @tailwind base;\n    /* --- */\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .rotate-3 {\n        --tw-rotate: 3deg;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"selectors are reduced to the lowest possible specificity","suites":[],"updatePoint":{"line":765,"column":62,"index":22224},"line":765,"code":"test('selectors are reduced to the lowest possible specificity', async () => {\n  let config = {\n    experimental: {\n      optimizeUniversalDefaults: true\n    },\n    content: [{\n      raw: html`<div class=\"foo\"></div>`\n    }],\n    corePlugins: []\n  };\n  let input = css`\n    @defaults test {\n      --color: black;\n    }\n\n    /* --- */\n\n    .foo {\n      @defaults test;\n      background-color: var(--color);\n    }\n\n    #app {\n      @defaults test;\n      border-color: var(--color);\n    }\n\n    span#page {\n      @defaults test;\n      color: var(--color);\n    }\n\n    div[data-foo='bar']#other {\n      @defaults test;\n      fill: var(--color);\n    }\n\n    div[data-bar='baz'] {\n      @defaults test;\n      stroke: var(--color);\n    }\n\n    article {\n      @defaults test;\n      --article: var(--color);\n    }\n\n    div[data-foo='bar']#another::before {\n      @defaults test;\n      fill: var(--color);\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .foo,\n      [id='app'],\n      [id='page'],\n      [id='other'],\n      [data-bar='baz'],\n      article,\n      [id='another']:before {\n        --color: black;\n      }\n      .foo {\n        background-color: var(--color);\n      }\n      #app {\n        border-color: var(--color);\n      }\n      span#page {\n        color: var(--color);\n      }\n      div[data-foo='bar']#other {\n        fill: var(--color);\n      }\n      div[data-bar='baz'] {\n        stroke: var(--color);\n      }\n      article {\n        --article: var(--color);\n      }\n      div[data-foo='bar']#another:before {\n        fill: var(--color);\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"No defaults without @tailwind base","suites":[],"updatePoint":{"line":852,"column":40,"index":23832},"line":852,"code":"test('No defaults without @tailwind base', () => {\n  let config = {\n    experimental: {\n      optimizeUniversalDefaults: true\n    },\n    content: [{\n      raw: html`<div class=\"scale-150\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n\n  // Optimize universal defaults doesn't work well with isolated modules\n  // We require you to use @tailwind base to inject the defaults\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .scale-150 {\n        --tw-scale-x: 1.5;\n        --tw-scale-y: 1.5;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"no defaults and apply without @tailwind base","suites":[],"updatePoint":{"line":883,"column":50,"index":24733},"line":883,"code":"test('no defaults and apply without @tailwind base', () => {\n  let config = {\n    experimental: {\n      optimizeUniversalDefaults: true\n    },\n    content: [{\n      raw: html`<div class=\"my-card\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n\n  // Optimize universal defaults doesn't work well with isolated modules\n  // We require you to use @tailwind base to inject the defaults\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    .my-card {\n      @apply scale-150;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .my-card {\n        --tw-scale-x: 1.5;\n        --tw-scale-y: 1.5;\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))\n          skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))\n          scaleY(var(--tw-scale-y));\n      }\n    `);\n  });\n});","file":"resolve-defaults-at-rules.test.js","skipped":false,"dir":"tests"},{"name":"prefix key overrides default prefix","suites":[],"updatePoint":{"line":3,"column":41,"index":149},"line":3,"code":"test('prefix key overrides default prefix', () => {\n  const userConfig = {\n    prefix: 'tw-'\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: 'tw-',\n    important: false,\n    separator: ':',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"important key overrides default important","suites":[],"updatePoint":{"line":30,"column":47,"index":660},"line":30,"code":"test('important key overrides default important', () => {\n  const userConfig = {\n    important: true\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: true,\n    separator: ':',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"important (selector) key overrides default important","suites":[],"updatePoint":{"line":57,"column":58,"index":1180},"line":57,"code":"test('important (selector) key overrides default important', () => {\n  const userConfig = {\n    important: '#app'\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: '#app',\n    separator: ':',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"separator key overrides default separator","suites":[],"updatePoint":{"line":84,"column":47,"index":1693},"line":84,"code":"test('separator key overrides default separator', () => {\n  const userConfig = {\n    separator: '__'\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: false,\n    separator: '__',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme key is merged instead of replaced","suites":[],"updatePoint":{"line":111,"column":45,"index":2202},"line":111,"code":"test('theme key is merged instead of replaced', () => {\n  const userConfig = {\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        'grey-darker': '#606f7b',\n        'grey-dark': '#8795a1',\n        grey: '#b8c2cc',\n        'grey-light': '#dae1e7',\n        'grey-lighter': '#f1f5f8'\n      },\n      fonts: {\n        sans: ['system-ui', 'BlinkMacSystemFont', '-apple-system', 'Roboto', 'sans-serif'],\n        serif: ['Constantia', 'Lucida Bright', 'Georgia', 'serif']\n      },\n      screens: {\n        sm: '500px',\n        md: '750px',\n        lg: '1000px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        'grey-darker': '#606f7b',\n        'grey-dark': '#8795a1',\n        grey: '#b8c2cc',\n        'grey-light': '#dae1e7',\n        'grey-lighter': '#f1f5f8'\n      },\n      fonts: {\n        sans: ['system-ui', 'BlinkMacSystemFont', '-apple-system', 'Roboto', 'sans-serif'],\n        serif: ['Constantia', 'Lucida Bright', 'Georgia', 'serif']\n      },\n      screens: {\n        mobile: '400px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme key is deeply merged instead of replaced","suites":[],"updatePoint":{"line":166,"column":52,"index":3538},"line":166,"code":"test('theme key is deeply merged instead of replaced', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        colors: {\n          grey: {\n            darker: '#606f7b',\n            dark: '#8795a1'\n          }\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        grey: {\n          grey: '#b8c2cc',\n          light: '#dae1e7',\n          lighter: '#f1f5f8'\n        }\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        grey: {\n          darker: '#606f7b',\n          dark: '#8795a1',\n          grey: '#b8c2cc',\n          light: '#dae1e7',\n          lighter: '#f1f5f8'\n        }\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"missing top level keys are pulled from the default config","suites":[],"updatePoint":{"line":212,"column":63,"index":4432},"line":212,"code":"test('missing top level keys are pulled from the default config', () => {\n  const userConfig = {};\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        green: '#00ff00'\n      },\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        green: '#00ff00'\n      },\n      screens: {\n        mobile: '400px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"functions in the default theme section are lazily evaluated","suites":[],"updatePoint":{"line":243,"column":65,"index":5039},"line":243,"code":"test('functions in the default theme section are lazily evaluated', () => {\n  const userConfig = {\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      },\n      backgroundColors: theme => theme('colors'),\n      textColors: theme => theme('colors')\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      backgroundColors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      textColors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"functions in the user theme section are lazily evaluated","suites":[],"updatePoint":{"line":292,"column":62,"index":6032},"line":292,"code":"test('functions in the user theme section are lazily evaluated', () => {\n  const userConfig = {\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      backgroundColors: theme => ({\n        ...theme('colors'),\n        customBackground: '#bada55'\n      }),\n      textColors: theme => ({\n        ...theme('colors'),\n        customText: '#facade'\n      })\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      },\n      backgroundColors: ({\n        colors\n      }) => colors,\n      textColors: ({\n        colors\n      }) => colors\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      backgroundColors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n        customBackground: '#bada55'\n      },\n      textColors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n        customText: '#facade'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme values in the extend section extend the existing theme","suites":[],"updatePoint":{"line":355,"column":66,"index":7329},"line":355,"code":"test('theme values in the extend section extend the existing theme', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        opacity: {\n          25: '25',\n          75: '.75'\n        },\n        backgroundColors: {\n          customBackground: '#bada55'\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      },\n      opacity: {\n        0: '0',\n        50: '.5',\n        100: '1'\n      },\n      backgroundColors: theme => theme('colors')\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      },\n      opacity: {\n        0: '0',\n        50: '.5',\n        100: '1',\n        25: '25',\n        75: '.75'\n      },\n      backgroundColors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow',\n        customBackground: '#bada55'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme values in the extend section extend the user theme","suites":[],"updatePoint":{"line":415,"column":62,"index":8513},"line":415,"code":"test('theme values in the extend section extend the user theme', () => {\n  const userConfig = {\n    theme: {\n      opacity: {\n        0: '0',\n        20: '.2',\n        40: '.4'\n      },\n      height: theme => theme('width'),\n      extend: {\n        opacity: {\n          60: '.6',\n          80: '.8',\n          100: '1'\n        },\n        height: {\n          customHeight: '500vh'\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      opacity: {\n        0: '0',\n        50: '.5',\n        100: '1'\n      },\n      height: {\n        0: 0,\n        full: '100%'\n      },\n      width: {\n        0: 0,\n        1: '.25rem',\n        2: '.5rem',\n        3: '.75rem',\n        4: '1rem'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      opacity: {\n        0: '0',\n        20: '.2',\n        40: '.4',\n        60: '.6',\n        80: '.8',\n        100: '1'\n      },\n      height: {\n        0: 0,\n        1: '.25rem',\n        2: '.5rem',\n        3: '.75rem',\n        4: '1rem',\n        customHeight: '500vh'\n      },\n      width: {\n        0: 0,\n        1: '.25rem',\n        2: '.5rem',\n        3: '.75rem',\n        4: '1rem'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme values in the extend section can extend values that are depended on lazily","suites":[],"updatePoint":{"line":492,"column":86,"index":9906},"line":492,"code":"test('theme values in the extend section can extend values that are depended on lazily', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        colors: {\n          red: 'red',\n          green: 'green',\n          blue: 'blue'\n        },\n        backgroundColors: {\n          customBackground: '#bada55'\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      },\n      backgroundColors: theme => theme('colors')\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow',\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      backgroundColors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow',\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n        customBackground: '#bada55'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme values in the extend section are not deeply merged when they are simple arrays","suites":[],"updatePoint":{"line":547,"column":90,"index":11089},"line":547,"code":"test('theme values in the extend section are not deeply merged when they are simple arrays', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        fonts: {\n          sans: ['Comic Sans'],\n          serif: ['Papyrus', {\n            fontFeatureSettings: '\"cv11\"'\n          }],\n          mono: [['Lobster', 'Papyrus'], {\n            fontFeatureSettings: '\"cv11\"'\n          }]\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      fonts: {\n        sans: ['system-ui', 'Helvetica Neue', 'sans-serif'],\n        serif: ['Constantia', 'Georgia', 'serif'],\n        mono: ['Menlo', 'Courier New', 'monospace']\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      fonts: {\n        sans: ['Comic Sans'],\n        serif: ['Papyrus', {\n          fontFeatureSettings: '\"cv11\"'\n        }],\n        mono: [['Lobster', 'Papyrus'], {\n          fontFeatureSettings: '\"cv11\"'\n        }]\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme values in the extend section are deeply merged, when they are arrays of objects","suites":[],"updatePoint":{"line":594,"column":91,"index":12227},"line":594,"code":"test('theme values in the extend section are deeply merged, when they are arrays of objects', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        typography: {\n          ArrayArray: {\n            css: [{\n              a: {\n                backgroundColor: 'red'\n              }\n            }, {\n              a: {\n                color: 'green'\n              }\n            }]\n          },\n          ObjectArray: {\n            css: {\n              a: {\n                backgroundColor: 'red'\n              }\n            }\n          },\n          ArrayObject: {\n            css: [{\n              a: {\n                backgroundColor: 'red'\n              }\n            }, {\n              a: {\n                color: 'green'\n              }\n            }]\n          }\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      typography: {\n        ArrayArray: {\n          css: [{\n            a: {\n              underline: 'none'\n            }\n          }]\n        },\n        ObjectArray: {\n          css: [{\n            a: {\n              underline: 'none'\n            }\n          }]\n        },\n        ArrayObject: {\n          css: {\n            a: {\n              underline: 'none'\n            }\n          }\n        }\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      typography: {\n        ArrayArray: {\n          css: [{\n            a: {\n              underline: 'none'\n            }\n          }, {\n            a: {\n              backgroundColor: 'red'\n            }\n          }, {\n            a: {\n              color: 'green'\n            }\n          }]\n        },\n        ObjectArray: {\n          css: [{\n            a: {\n              underline: 'none'\n            }\n          }, {\n            a: {\n              backgroundColor: 'red'\n            }\n          }]\n        },\n        ArrayObject: {\n          css: [{\n            a: {\n              underline: 'none'\n            }\n          }, {\n            a: {\n              backgroundColor: 'red'\n            }\n          }, {\n            a: {\n              color: 'green'\n            }\n          }]\n        }\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"the theme function can use a default value if the key is missing","suites":[],"updatePoint":{"line":715,"column":70,"index":14539},"line":715,"code":"test('the theme function can use a default value if the key is missing', () => {\n  const userConfig = {\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      },\n      borderColor: theme => ({\n        default: theme('colors.gray', 'currentColor'),\n        ...theme('colors')\n      })\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      borderColor: {\n        default: 'currentColor',\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"the theme function can resolve function values","suites":[],"updatePoint":{"line":762,"column":52,"index":15485},"line":762,"code":"test('the theme function can resolve function values', () => {\n  const userConfig = {\n    theme: {\n      textColor: theme => ({\n        lime: 'lime',\n        ...theme('colors')\n      }),\n      backgroundColor: theme => ({\n        orange: 'orange',\n        ...theme('textColor')\n      }),\n      borderColor: theme => theme('backgroundColor')\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      textColor: {\n        lime: 'lime',\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      backgroundColor: {\n        lime: 'lime',\n        orange: 'orange',\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      borderColor: {\n        lime: 'lime',\n        orange: 'orange',\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"the theme function can resolve deep function values","suites":[],"updatePoint":{"line":823,"column":57,"index":16733},"line":823,"code":"test('the theme function can resolve deep function values', () => {\n  const userConfig = {\n    theme: {\n      minWidth: theme => ({\n        '1/3': theme('width.1/3')\n      })\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      spacing: {\n        0: '0'\n      },\n      width: theme => ({\n        ...theme('spacing'),\n        '1/3': '33.33333%'\n      })\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      spacing: {\n        0: '0'\n      },\n      width: {\n        0: '0',\n        '1/3': '33.33333%'\n      },\n      minWidth: {\n        '1/3': '33.33333%'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"theme values in the extend section are lazily evaluated","suites":[],"updatePoint":{"line":865,"column":61,"index":17523},"line":865,"code":"test('theme values in the extend section are lazily evaluated', () => {\n  const userConfig = {\n    theme: {\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      extend: {\n        colors: {\n          orange: 'orange'\n        },\n        borderColor: theme => ({\n          foo: theme('colors.orange'),\n          bar: theme('colors.red')\n        })\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      },\n      borderColor: theme => ({\n        default: theme('colors.yellow', 'currentColor'),\n        ...theme('colors')\n      })\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      colors: {\n        orange: 'orange',\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      },\n      borderColor: {\n        default: 'currentColor',\n        foo: 'orange',\n        bar: 'red',\n        orange: 'orange',\n        red: 'red',\n        green: 'green',\n        blue: 'blue'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"lazily evaluated values have access to the config utils","suites":[],"updatePoint":{"line":925,"column":61,"index":18774},"line":925,"code":"test('lazily evaluated values have access to the config utils', () => {\n  const userConfig = {\n    theme: {\n      inset: theme => theme('margin'),\n      shift: (theme, {\n        negative\n      }) => ({\n        ...theme('spacing'),\n        ...negative(theme('spacing'))\n      }),\n      extend: {\n        nudge: (theme, {\n          negative\n        }) => ({\n          ...theme('spacing'),\n          ...negative(theme('spacing'))\n        })\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      spacing: {\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px'\n      },\n      margin: (theme, {\n        negative\n      }) => ({\n        ...theme('spacing'),\n        ...negative(theme('spacing'))\n      })\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      spacing: {\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px'\n      },\n      inset: {\n        '-1': '-1px',\n        '-2': '-2px',\n        '-3': '-3px',\n        '-4': '-4px',\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px'\n      },\n      margin: {\n        '-1': '-1px',\n        '-2': '-2px',\n        '-3': '-3px',\n        '-4': '-4px',\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px'\n      },\n      shift: {\n        '-1': '-1px',\n        '-2': '-2px',\n        '-3': '-3px',\n        '-4': '-4px',\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px'\n      },\n      nudge: {\n        '-1': '-1px',\n        '-2': '-2px',\n        '-3': '-3px',\n        '-4': '-4px',\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"the original theme is not mutated","suites":[],"updatePoint":{"line":1020,"column":39,"index":20575},"line":1020,"code":"test('the original theme is not mutated', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        colors: {\n          orange: 'orange'\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      colors: {\n        cyan: 'cyan',\n        magenta: 'magenta',\n        yellow: 'yellow'\n      }\n    }\n  };\n  resolveConfig([userConfig, defaultConfig]);\n  expect(userConfig).toEqual({\n    theme: {\n      extend: {\n        colors: {\n          orange: 'orange'\n        }\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"custom properties are multiplied by -1 for negative values","suites":[],"updatePoint":{"line":1054,"column":64,"index":21186},"line":1054,"code":"test('custom properties are multiplied by -1 for negative values', () => {\n  const userConfig = {\n    theme: {\n      spacing: {\n        0: 0,\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px',\n        auto: 'auto',\n        foo: 'var(--foo)',\n        bar: 'var(--bar, 500px)',\n        baz: 'calc(50% - 10px)',\n        qux: '10poops'\n      },\n      margin: (theme, {\n        negative\n      }) => ({\n        ...theme('spacing'),\n        ...negative(theme('spacing'))\n      })\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {}\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result.theme.spacing).toEqual({\n    0: 0,\n    1: '1px',\n    2: '2px',\n    3: '3px',\n    4: '4px',\n    auto: 'auto',\n    foo: 'var(--foo)',\n    bar: 'var(--bar, 500px)',\n    baz: 'calc(50% - 10px)',\n    qux: '10poops'\n  });\n  expect(result.theme.margin).toEqual({\n    0: 0,\n    1: '1px',\n    2: '2px',\n    3: '3px',\n    4: '4px',\n    auto: 'auto',\n    foo: 'var(--foo)',\n    bar: 'var(--bar, 500px)',\n    baz: 'calc(50% - 10px)',\n    qux: '10poops',\n    '-0': '0',\n    '-1': '-1px',\n    '-2': '-2px',\n    '-3': '-3px',\n    '-4': '-4px',\n    '-foo': 'calc(var(--foo) * -1)',\n    '-bar': 'calc(var(--bar, 500px) * -1)',\n    '-baz': 'calc(calc(50% - 10px) * -1)',\n    '-qux': '-10poops'\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"more than two config objects can be resolved","suites":[],"updatePoint":{"line":1119,"column":50,"index":22561},"line":1119,"code":"test('more than two config objects can be resolved', () => {\n  const firstConfig = {\n    theme: {\n      extend: {\n        fontFamily: () => ({\n          code: ['Menlo', 'monospace']\n        }),\n        colors: {\n          red: 'red'\n        },\n        backgroundColor: {\n          customBackgroundOne: '#bada55'\n        },\n        textDecorationColor: {\n          orange: 'orange'\n        }\n      }\n    }\n  };\n  const secondConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      extend: {\n        fontFamily: {\n          quote: ['Helvetica', 'serif']\n        },\n        colors: {\n          green: 'green'\n        },\n        backgroundColor: {\n          customBackgroundTwo: '#facade'\n        },\n        textDecorationColor: theme => theme('colors')\n      }\n    }\n  };\n  const thirdConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      extend: {\n        fontFamily: {\n          hero: ['Futura', 'sans-serif']\n        },\n        colors: {\n          pink: 'pink'\n        },\n        backgroundColor: () => ({\n          customBackgroundThree: '#c0ffee'\n        }),\n        textDecorationColor: {\n          lime: 'lime'\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      fontFamily: {\n        body: ['Arial', 'sans-serif'],\n        display: ['Georgia', 'serif']\n      },\n      colors: {\n        blue: 'blue'\n      },\n      backgroundColor: theme => theme('colors')\n    }\n  };\n  const result = resolveConfig([firstConfig, secondConfig, thirdConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      fontFamily: {\n        body: ['Arial', 'sans-serif'],\n        display: ['Georgia', 'serif'],\n        code: ['Menlo', 'monospace'],\n        quote: ['Helvetica', 'serif'],\n        hero: ['Futura', 'sans-serif']\n      },\n      colors: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n        pink: 'pink'\n      },\n      backgroundColor: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n        pink: 'pink',\n        customBackgroundOne: '#bada55',\n        customBackgroundTwo: '#facade',\n        customBackgroundThree: '#c0ffee'\n      },\n      textDecorationColor: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n        pink: 'pink',\n        orange: 'orange',\n        lime: 'lime'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"plugin config modifications are applied","suites":[],"updatePoint":{"line":1233,"column":45,"index":25054},"line":1233,"code":"test('plugin config modifications are applied', () => {\n  const userConfig = {\n    plugins: [{\n      config: {\n        prefix: 'tw-'\n      }\n    }]\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: 'tw-',\n    important: false,\n    separator: ':',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    },\n    plugins: userConfig.plugins\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"user config takes precedence over plugin config modifications","suites":[],"updatePoint":{"line":1265,"column":67,"index":25669},"line":1265,"code":"test('user config takes precedence over plugin config modifications', () => {\n  const userConfig = {\n    prefix: 'user-',\n    plugins: [{\n      config: {\n        prefix: 'tw-'\n      }\n    }]\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: 'user-',\n    important: false,\n    separator: ':',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    },\n    plugins: userConfig.plugins\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"plugin config can register plugins that also have config","suites":[],"updatePoint":{"line":1298,"column":62,"index":26302},"line":1298,"code":"test('plugin config can register plugins that also have config', () => {\n  const userConfig = {\n    plugins: [{\n      config: {\n        prefix: 'tw-',\n        plugins: [{\n          config: {\n            important: true\n          }\n        }, {\n          config: {\n            separator: '__'\n          }\n        }]\n      },\n      handler() {}\n    }]\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: 'tw-',\n    important: true,\n    separator: '__',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    },\n    plugins: userConfig.plugins\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"plugin configs take precedence over plugin configs registered by that plugin","suites":[],"updatePoint":{"line":1340,"column":82,"index":27117},"line":1340,"code":"test('plugin configs take precedence over plugin configs registered by that plugin', () => {\n  const userConfig = {\n    plugins: [{\n      config: {\n        prefix: 'outer-',\n        plugins: [{\n          config: {\n            prefix: 'inner-'\n          }\n        }]\n      },\n      handler() {}\n    }]\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: 'outer-',\n    important: false,\n    separator: ':',\n    theme: {\n      screens: {\n        mobile: '400px'\n      }\n    },\n    plugins: userConfig.plugins\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"plugin theme extensions are added even if user overrides top-level theme config","suites":[],"updatePoint":{"line":1378,"column":85,"index":27869},"line":1378,"code":"test('plugin theme extensions are added even if user overrides top-level theme config', () => {\n  const userConfig = {\n    theme: {\n      width: {\n        '1px': '1px'\n      }\n    },\n    plugins: [{\n      config: {\n        theme: {\n          extend: {\n            width: {\n              '2px': '2px',\n              '3px': '3px'\n            }\n          }\n        }\n      },\n      handler() {}\n    }]\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      width: {\n        sm: '1rem',\n        md: '2rem',\n        lg: '3rem'\n      },\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: false,\n    separator: ':',\n    theme: {\n      width: {\n        '1px': '1px',\n        '2px': '2px',\n        '3px': '3px'\n      },\n      screens: {\n        mobile: '400px'\n      }\n    },\n    plugins: userConfig.plugins\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"user theme extensions take precedence over plugin theme extensions with the same key","suites":[],"updatePoint":{"line":1433,"column":90,"index":28887},"line":1433,"code":"test('user theme extensions take precedence over plugin theme extensions with the same key', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        width: {\n          xl: '6rem'\n        }\n      }\n    },\n    plugins: [{\n      config: {\n        theme: {\n          extend: {\n            width: {\n              xl: '4rem'\n            }\n          }\n        }\n      },\n      handler() {}\n    }]\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      width: {\n        sm: '1rem',\n        md: '2rem',\n        lg: '3rem'\n      },\n      screens: {\n        mobile: '400px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: false,\n    separator: ':',\n    theme: {\n      width: {\n        sm: '1rem',\n        md: '2rem',\n        lg: '3rem',\n        xl: '6rem'\n      },\n      screens: {\n        mobile: '400px'\n      }\n    },\n    plugins: userConfig.plugins\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"extensions are applied in the right order","suites":[],"updatePoint":{"line":1490,"column":47,"index":29874},"line":1490,"code":"test('extensions are applied in the right order', () => {\n  const userConfig = {\n    theme: {\n      extend: {\n        colors: {\n          grey: {\n            light: '#eee'\n          }\n        }\n      }\n    }\n  };\n  const otherConfig = {\n    theme: {\n      extend: {\n        colors: {\n          grey: {\n            light: '#ddd',\n            darker: '#111'\n          }\n        }\n      }\n    }\n  };\n  const anotherConfig = {\n    theme: {\n      extend: {\n        colors: {\n          grey: {\n            darker: '#222'\n          }\n        }\n      }\n    }\n  };\n  const defaultConfig = {\n    content: [],\n    theme: {\n      colors: {\n        grey: {\n          light: '#ccc',\n          dark: '#333'\n        }\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, otherConfig, anotherConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    theme: {\n      colors: {\n        grey: {\n          light: '#eee',\n          dark: '#333',\n          darker: '#111'\n        }\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"core plugin configuration builds on the default list when starting with an empty object","suites":[],"updatePoint":{"line":1549,"column":93,"index":30916},"line":1549,"code":"test('core plugin configuration builds on the default list when starting with an empty object', () => {\n  const userConfig = {\n    corePlugins: {\n      display: false\n    }\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {},\n    corePlugins: {}\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: false,\n    separator: ':',\n    theme: {},\n    corePlugins: corePluginList.filter(c => c !== 'display')\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"core plugins that are disabled by default can be enabled","suites":[],"updatePoint":{"line":1572,"column":62,"index":31442},"line":1572,"code":"test('core plugins that are disabled by default can be enabled', () => {\n  const userConfig = {\n    corePlugins: {\n      display: true\n    }\n  };\n  const defaultConfig = {\n    presets: [],\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {},\n    corePlugins: {\n      display: false\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result.corePlugins).toContain('display');\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"core plugin configurations stack","suites":[],"updatePoint":{"line":1592,"column":38,"index":31864},"line":1592,"code":"test('core plugin configurations stack', () => {\n  const userConfig = {\n    corePlugins: {\n      display: false\n    }\n  };\n  const otherConfig = {\n    corePlugins: ({\n      corePlugins\n    }) => {\n      return [...corePlugins, 'margin'];\n    }\n  };\n  const defaultConfig = {\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {},\n    corePlugins: ['float', 'display', 'padding']\n  };\n  const result = resolveConfig([userConfig, otherConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: false,\n    separator: ':',\n    theme: {},\n    corePlugins: ['float', 'padding', 'margin']\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"plugins are merged","suites":[],"updatePoint":{"line":1622,"column":24,"index":32507},"line":1622,"code":"test('plugins are merged', () => {\n  const userConfig = {\n    plugins: ['3']\n  };\n  const otherConfig = {\n    plugins: ['2']\n  };\n  const defaultConfig = {\n    plugins: ['1'],\n    prefix: '',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {}\n  };\n  const result = resolveConfig([userConfig, otherConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '',\n    important: false,\n    separator: ':',\n    theme: {},\n    plugins: ['1', '2', '3']\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"all helpers can be destructured from the first function argument","suites":[],"updatePoint":{"line":1646,"column":70,"index":33042},"line":1646,"code":"test('all helpers can be destructured from the first function argument', () => {\n  const userConfig = {\n    theme: {\n      example: ({\n        theme,\n        colors,\n        negative,\n        breakpoints\n      }) => ({\n        weight: theme('fontWeight.bold'),\n        black: colors.black,\n        white: colors.white,\n        ...negative(theme('spacing')),\n        ...breakpoints(theme('screens'))\n      })\n    }\n  };\n  const defaultConfig = {\n    prefix: '-',\n    important: false,\n    separator: ':',\n    content: [],\n    theme: {\n      screens: {\n        sm: '640px',\n        md: '768px'\n      },\n      fontWeight: {\n        bold: 700\n      },\n      spacing: {\n        0: '0px',\n        1: '1px',\n        2: '2px',\n        3: '3px',\n        4: '4px'\n      }\n    }\n  };\n  const result = resolveConfig([userConfig, defaultConfig]);\n  expect(result).toMatchObject({\n    prefix: '-',\n    important: false,\n    separator: ':',\n    theme: {\n      example: {\n        weight: 700,\n        black: '#000',\n        white: '#fff',\n        '-1': '-1px',\n        '-2': '-2px',\n        '-3': '-3px',\n        '-4': '-4px',\n        'screen-sm': '640px',\n        'screen-md': '768px'\n      }\n    }\n  });\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"does not duplicate extended configs every time resolveConfig is called","suites":[],"updatePoint":{"line":1705,"column":76,"index":34242},"line":1705,"code":"test('does not duplicate extended configs every time resolveConfig is called', () => {\n  let shared = {\n    foo: {\n      bar: {\n        baz: [{\n          color: 'red'\n        }]\n      }\n    }\n  };\n  const createConfig = color => resolveConfig([{\n    theme: {\n      foo: shared.foo,\n      extend: {\n        foo: {\n          bar: {\n            baz: {\n              color\n            }\n          }\n        }\n      }\n    }\n  }]);\n  createConfig('orange');\n  createConfig('yellow');\n  createConfig('green');\n  const result = createConfig('blue');\n  expect(shared.foo.bar.baz).toMatchObject([{\n    color: 'red'\n  }]);\n  expect(result.theme.foo.bar.baz).toMatchObject([{\n    color: 'red'\n  }, {\n    color: 'blue'\n  }]);\n});","file":"resolveConfig.test.js","skipped":false,"dir":"tests"},{"name":"responsive and variants atrules","suites":[],"updatePoint":{"line":2,"column":37,"index":83},"line":2,"code":"test('responsive and variants atrules', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"responsive-in-utilities\"></div>\n          <div class=\"variants-in-utilities\"></div>\n          <div class=\"both-in-utilities\"></div>\n          <div class=\"responsive-at-root\"></div>\n          <div class=\"variants-at-root\"></div>\n          <div class=\"both-at-root\"></div>\n          <div class=\"responsive-in-components\"></div>\n          <div class=\"variants-in-components\"></div>\n          <div class=\"both-in-components\"></div>\n          <div class=\"md:focus:responsive-in-utilities\"></div>\n          <div class=\"md:focus:variants-in-utilities\"></div>\n          <div class=\"md:focus:both-in-utilities\"></div>\n          <div class=\"md:focus:responsive-at-root\"></div>\n          <div class=\"md:focus:variants-at-root\"></div>\n          <div class=\"md:focus:both-at-root\"></div>\n          <div class=\"md:focus:responsive-in-components\"></div>\n          <div class=\"md:focus:variants-in-components\"></div>\n          <div class=\"md:focus:both-in-components\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer utilities {\n      @responsive {\n        .responsive-in-utilities {\n          color: blue;\n        }\n      }\n      @variants {\n        .variants-in-utilities {\n          color: red;\n        }\n      }\n      @responsive {\n        @variants {\n          .both-in-utilities {\n            color: green;\n          }\n        }\n      }\n    }\n\n    @responsive {\n      .responsive-at-root {\n        color: white;\n      }\n    }\n    @variants {\n      .variants-at-root {\n        color: orange;\n      }\n    }\n    @responsive {\n      @variants {\n        .both-at-root {\n          color: pink;\n        }\n      }\n    }\n\n    @layer components {\n      @responsive {\n        .responsive-in-components {\n          color: blue;\n        }\n      }\n      @variants {\n        .variants-in-components {\n          color: red;\n        }\n      }\n      @responsive {\n        @variants {\n          .both-in-components {\n            color: green;\n          }\n        }\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .responsive-in-components {\n        color: #00f;\n      }\n      .variants-in-components {\n        color: red;\n      }\n      .both-in-components {\n        color: green;\n      }\n      .responsive-in-utilities {\n        color: #00f;\n      }\n      .variants-in-utilities {\n        color: red;\n      }\n      .both-in-utilities {\n        color: green;\n      }\n      .responsive-at-root {\n        color: #fff;\n      }\n      .variants-at-root {\n        color: orange;\n      }\n      .both-at-root {\n        color: pink;\n      }\n      @media (min-width: 768px) {\n        .md\\:focus\\:responsive-in-components:focus {\n          color: #00f;\n        }\n        .md\\:focus\\:variants-in-components:focus {\n          color: red;\n        }\n        .md\\:focus\\:both-in-components:focus {\n          color: green;\n        }\n        .md\\:focus\\:responsive-in-utilities:focus {\n          color: #00f;\n        }\n        .md\\:focus\\:variants-in-utilities:focus {\n          color: red;\n        }\n        .md\\:focus\\:both-in-utilities:focus {\n          color: green;\n        }\n        .md\\:focus\\:responsive-at-root:focus {\n          color: #fff;\n        }\n        .md\\:focus\\:variants-at-root:focus {\n          color: orange;\n        }\n        .md\\:focus\\:both-at-root:focus {\n          color: pink;\n        }\n      }\n    `);\n  });\n});","file":"responsive-and-variants-atrules.test.js","skipped":false,"dir":"tests"},{"name":"should not safelist anything","suites":[],"updatePoint":{"line":2,"column":32,"index":78},"line":2,"code":"it('should not safelist anything', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist strings","suites":[],"updatePoint":{"line":16,"column":27,"index":404},"line":16,"code":"it('should safelist strings', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: ['mt-[20px]', 'font-bold', 'text-gray-200', 'hover:underline']\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .mt-\\[20px\\] {\n        margin-top: 20px;\n      }\n      .font-bold {\n        font-weight: 700;\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .text-gray-200 {\n        --tw-text-opacity: 1;\n        color: rgb(229 231 235 / var(--tw-text-opacity));\n      }\n      .hover\\:underline:hover {\n        text-decoration-line: underline;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist based on a pattern regex","suites":[],"updatePoint":{"line":44,"column":44,"index":1126},"line":44,"code":"it('should safelist based on a pattern regex', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^bg-(red)-(100|200)$/,\n      variants: ['hover']\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-100 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n      }\n      .bg-red-200 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .hover\\:bg-red-100:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n      }\n      .hover\\:bg-red-200:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should not generate duplicates","suites":[],"updatePoint":{"line":78,"column":34,"index":2060},"line":78,"code":"it('should not generate duplicates', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: ['uppercase', {\n      pattern: /^bg-(red)-(100|200)$/,\n      variants: ['hover']\n    }, {\n      pattern: /^bg-(red)-(100|200)$/,\n      variants: ['hover']\n    }, {\n      pattern: /^bg-(red)-(100|200)$/,\n      variants: ['hover']\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-100 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n      }\n      .bg-red-200 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .hover\\:bg-red-100:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n      }\n      .hover\\:bg-red-200:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist when using a custom prefix","suites":[],"updatePoint":{"line":118,"column":46,"index":3167},"line":118,"code":"it('should safelist when using a custom prefix', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"tw-uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^tw-bg-red-(100|200)$/g\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .tw-bg-red-100 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n      }\n      .tw-bg-red-200 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n      }\n      .tw-uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should not safelist when an empty list is provided","suites":[],"updatePoint":{"line":144,"column":54,"index":3855},"line":144,"code":"it('should not safelist when an empty list is provided', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should not safelist when an sparse/holey list is provided","suites":[],"updatePoint":{"line":159,"column":61,"index":4233},"line":159,"code":"it('should not safelist when an sparse/holey list is provided', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [,,,]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should not safelist any invalid variants if provided","suites":[],"updatePoint":{"line":174,"column":56,"index":4609},"line":174,"code":"it('should not safelist any invalid variants if provided', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^bg-(red)-(100|200)$/,\n      variants: ['foo', 'bar']\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-100 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n      }\n      .bg-red-200 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist negatives based on a pattern regex","suites":[],"updatePoint":{"line":200,"column":54,"index":5296},"line":200,"code":"it('should safelist negatives based on a pattern regex', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^-top-1$/,\n      variants: ['hover']\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .-top-1 {\n        top: -0.25rem;\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .hover\\:-top-1:hover {\n        top: -0.25rem;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist negatives based on a pattern regex","suites":[],"updatePoint":{"line":224,"column":54,"index":5834},"line":224,"code":"it('should safelist negatives based on a pattern regex', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^bg-red-(400|500)(\\/(40|50))?$/,\n      variants: ['hover']\n    }, {\n      pattern: /^(fill|ring|text)-red-200\\/50$/,\n      variants: ['hover']\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-400 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n      }\n      .bg-red-400\\/40 {\n        background-color: #f8717166;\n      }\n      .bg-red-400\\/50 {\n        background-color: #f8717180;\n      }\n      .bg-red-500 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n      }\n      .bg-red-500\\/40 {\n        background-color: #ef444466;\n      }\n      .bg-red-500\\/50 {\n        background-color: #ef444480;\n      }\n      .fill-red-200\\/50 {\n        fill: #fecaca80;\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .text-red-200\\/50 {\n        color: #fecaca80;\n      }\n      .ring-red-200\\/50 {\n        --tw-ring-color: #fecaca80;\n      }\n      .hover\\:bg-red-400:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n      }\n      .hover\\:bg-red-400\\/40:hover {\n        background-color: #f8717166;\n      }\n      .hover\\:bg-red-400\\/50:hover {\n        background-color: #f8717180;\n      }\n      .hover\\:bg-red-500:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n      }\n      .hover\\:bg-red-500\\/40:hover {\n        background-color: #ef444466;\n      }\n      .hover\\:bg-red-500\\/50:hover {\n        background-color: #ef444480;\n      }\n      .hover\\:fill-red-200\\/50:hover {\n        fill: #fecaca80;\n      }\n      .hover\\:text-red-200\\/50:hover {\n        color: #fecaca80;\n      }\n      .hover\\:ring-red-200\\/50:hover {\n        --tw-ring-color: #fecaca80;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist pattern regex with !important selector","suites":[],"updatePoint":{"line":303,"column":58,"index":7903},"line":303,"code":"it('should safelist pattern regex with !important selector', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^!grid-cols-(4|5|6)$/\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .\\!grid-cols-4 {\n        grid-template-columns: repeat(4, minmax(0, 1fr)) !important;\n      }\n      .\\!grid-cols-5 {\n        grid-template-columns: repeat(5, minmax(0, 1fr)) !important;\n      }\n      .\\!grid-cols-6 {\n        grid-template-columns: repeat(6, minmax(0, 1fr)) !important;\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist pattern regex with custom prefix along with !important selector","suites":[],"updatePoint":{"line":329,"column":83,"index":8648},"line":329,"code":"it('should safelist pattern regex with custom prefix along with !important selector', () => {\n  let config = {\n    prefix: 'tw-',\n    content: [{\n      raw: html`<div class=\"tw-uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^!tw-grid-cols-(4|5|6)$/\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .\\!tw-grid-cols-4 {\n        grid-template-columns: repeat(4, minmax(0, 1fr)) !important;\n      }\n      .\\!tw-grid-cols-5 {\n        grid-template-columns: repeat(5, minmax(0, 1fr)) !important;\n      }\n      .\\!tw-grid-cols-6 {\n        grid-template-columns: repeat(6, minmax(0, 1fr)) !important;\n      }\n      .tw-uppercase {\n        text-transform: uppercase;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist pattern regex having !important selector with variants","suites":[],"updatePoint":{"line":356,"column":74,"index":9421},"line":356,"code":"it('should safelist pattern regex having !important selector with variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^!bg-gray-(500|600|700|800)$/,\n      variants: ['hover']\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .\\!bg-gray-500 {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(107 114 128 / var(--tw-bg-opacity)) !important;\n      }\n      .\\!bg-gray-600 {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(75 85 99 / var(--tw-bg-opacity)) !important;\n      }\n      .\\!bg-gray-700 {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(55 65 81 / var(--tw-bg-opacity)) !important;\n      }\n      .\\!bg-gray-800 {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(31 41 55 / var(--tw-bg-opacity)) !important;\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .hover\\:\\!bg-gray-500:hover {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(107 114 128 / var(--tw-bg-opacity)) !important;\n      }\n      .hover\\:\\!bg-gray-600:hover {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(75 85 99 / var(--tw-bg-opacity)) !important;\n      }\n      .hover\\:\\!bg-gray-700:hover {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(55 65 81 / var(--tw-bg-opacity)) !important;\n      }\n      .hover\\:\\!bg-gray-800:hover {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(31 41 55 / var(--tw-bg-opacity)) !important;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"should safelist multiple patterns with !important selector","suites":[],"updatePoint":{"line":406,"column":62,"index":11091},"line":406,"code":"it('should safelist multiple patterns with !important selector', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"uppercase\"></div>`\n    }],\n    safelist: [{\n      pattern: /^!text-gray-(700|800|900)$/,\n      variants: ['hover']\n    }, {\n      pattern: /^!bg-gray-(200|300|400)$/,\n      variants: ['hover']\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .\\!bg-gray-200 {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(229 231 235 / var(--tw-bg-opacity)) !important;\n      }\n      .\\!bg-gray-300 {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(209 213 219 / var(--tw-bg-opacity)) !important;\n      }\n      .\\!bg-gray-400 {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(156 163 175 / var(--tw-bg-opacity)) !important;\n      }\n      .uppercase {\n        text-transform: uppercase;\n      }\n      .\\!text-gray-700 {\n        --tw-text-opacity: 1 !important;\n        color: rgb(55 65 81 / var(--tw-text-opacity)) !important;\n      }\n      .\\!text-gray-800 {\n        --tw-text-opacity: 1 !important;\n        color: rgb(31 41 55 / var(--tw-text-opacity)) !important;\n      }\n      .\\!text-gray-900 {\n        --tw-text-opacity: 1 !important;\n        color: rgb(17 24 39 / var(--tw-text-opacity)) !important;\n      }\n      .hover\\:\\!bg-gray-200:hover {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(229 231 235 / var(--tw-bg-opacity)) !important;\n      }\n      .hover\\:\\!bg-gray-300:hover {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(209 213 219 / var(--tw-bg-opacity)) !important;\n      }\n      .hover\\:\\!bg-gray-400:hover {\n        --tw-bg-opacity: 1 !important;\n        background-color: rgb(156 163 175 / var(--tw-bg-opacity)) !important;\n      }\n      .hover\\:\\!text-gray-700:hover {\n        --tw-text-opacity: 1 !important;\n        color: rgb(55 65 81 / var(--tw-text-opacity)) !important;\n      }\n      .hover\\:\\!text-gray-800:hover {\n        --tw-text-opacity: 1 !important;\n        color: rgb(31 41 55 / var(--tw-text-opacity)) !important;\n      }\n      .hover\\:\\!text-gray-900:hover {\n        --tw-text-opacity: 1 !important;\n        color: rgb(17 24 39 / var(--tw-text-opacity)) !important;\n      }\n    `);\n  });\n});","file":"safelist.test.js","skipped":false,"dir":"tests"},{"name":"it can generate media queries from configured screen sizes","suites":[],"updatePoint":{"line":12,"column":64,"index":374},"line":12,"code":"test('it can generate media queries from configured screen sizes', () => {\n  let input = css`\n    @screen sm {\n      .banana {\n        color: yellow;\n      }\n    }\n    @screen md {\n      .banana {\n        color: red;\n      }\n    }\n    @screen lg {\n      .banana {\n        color: green;\n      }\n    }\n  `;\n  return run(input, {\n    theme: {\n      screens: {\n        sm: '500px',\n        md: '750px',\n        lg: '1000px'\n      }\n    },\n    separator: ':'\n  }).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 500px) {\n        .banana {\n          color: yellow;\n        }\n      }\n      @media (min-width: 750px) {\n        .banana {\n          color: red;\n        }\n      }\n      @media (min-width: 1000px) {\n        .banana {\n          color: green;\n        }\n      }\n    `);\n    expect(result.warnings().length).toBe(0);\n  });\n});","file":"screenAtRule.test.js","skipped":false,"dir":"tests"},{"name":"should resolve the debug ($value) flag correctly ($expected)","suites":[],"line":2,"code":"it.each`\n  value                     | expected\n  ${'true'}                 | ${true}\n  ${'1'}                    | ${true}\n  ${'false'}                | ${false}\n  ${'0'}                    | ${false}\n  ${'*'}                    | ${true}\n  ${'tailwindcss'}          | ${true}\n  ${'tailwindcss:*'}        | ${true}\n  ${'other,tailwindcss'}    | ${true}\n  ${'other,tailwindcss:*'}  | ${true}\n  ${'other,-tailwindcss'}   | ${false}\n  ${'other,-tailwindcss:*'} | ${false}\n  ${'-tailwindcss'}         | ${false}\n  ${'-tailwindcss:*'}       | ${false}\n`('should resolve the debug ($value) flag correctly ($expected)', ({\n  value,\n  expected\n}) => {\n  expect(resolveDebug(value)).toBe(expected);\n});","file":"shared-state.test.js","skipped":false,"dir":"tests"},{"name":"apply generates source maps","suites":[],"updatePoint":{"line":4,"column":33,"index":190},"line":4,"code":"test('apply generates source maps', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"with-declaration\"></div>\n          <div class=\"with-comment\"></div>\n          <div class=\"just-apply\"></div>\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    .with-declaration {\n      background-color: red;\n      @apply h-4 w-4 bg-green-500;\n    }\n\n    .with-comment {\n      /* sourcemap will work here too */\n      @apply h-4 w-4 bg-red-500;\n    }\n\n    .just-apply {\n      @apply h-4 w-4 bg-black;\n    }\n  `;\n  let result = await run(input, config);\n  let {\n    sources,\n    annotations\n  } = parseSourceMaps(result);\n\n  // All CSS generated by Tailwind CSS should be annotated with source maps\n  // And always be able to point to the original source file\n  expect(sources).not.toContain('<no source>');\n  expect(sources.length).toBe(2);\n  expect(annotations).toMatchInlineSnapshot(`\n    [\n      \"2:4 -> 1:0\",\n      \"2:2-20 -> 2:2-20\",\n      \"3:2-23 -> 3:2-23\",\n      \"4:2-57 -> 4:2-57\",\n      \"5:2-13 -> 5:2-13\",\n      \"6:2-14 -> 6:2-14\",\n      \"7:0 -> 7:0\",\n      \"7:4 -> 9:0\",\n      \"10:2-20 -> 10:2-20\",\n      \"11:2-57 -> 11:2-57\",\n      \"12:2-13 -> 12:2-13\",\n      \"13:2-14 -> 13:2-14\",\n      \"14:0 -> 14:0\",\n      \"13:6 -> 16:0\",\n      \"17:2-20 -> 17:2-20\",\n      \"18:2-53 -> 18:2-53\",\n      \"19:2-13 -> 19:2-13\",\n      \"20:2-14 -> 20:2-14\",\n      \"21:0 -> 21:0\",\n    ]\n  `);\n});","file":"source-maps.test.js","skipped":false,"dir":"tests"},{"name":"preflight + base have source maps","suites":[],"updatePoint":{"line":66,"column":39,"index":1650},"line":66,"code":"test('preflight + base have source maps', async () => {\n  let config = {\n    content: []\n  };\n  let input = css`\n    @tailwind base;\n  `;\n  let result = await run(input, config);\n  let {\n    sources,\n    annotations\n  } = parseSourceMaps(result);\n\n  // All CSS generated by Tailwind CSS should be annotated with source maps\n  // And always be able to point to the original source file\n  expect(sources).not.toContain('<no source>');\n  expect(sources.length).toBe(2);\n  expect(annotations).toMatchInlineSnapshot(`\n    [\n      \"2:4 -> 1:0\",\n      \"2:2-24 -> 2:2-24\",\n      \"3:2-25 -> 3:2-25\",\n      \"4:0 -> 4:0\",\n      \"2:4 -> 6:0\",\n      \"7:2-18 -> 7:2-18\",\n      \"8:0 -> 8:0\",\n      \"2:4 -> 10:0\",\n      \"11:2-32 -> 11:2-32\",\n      \"12:2-13 -> 12:2-13\",\n      \"13:2-31 -> 13:2-31\",\n      \"14:2-33 -> 14:2-33\",\n      \"15:2-208 -> 15:2-208\",\n      \"16:2-18 -> 16:2-18\",\n      \"17:0 -> 17:0\",\n      \"2:4 -> 19:0\",\n      \"20:2-22 -> 20:2-22\",\n      \"21:2-11 -> 21:2-11\",\n      \"22:0 -> 22:0\",\n      \"2:4 -> 24:0\",\n      \"25:2-16 -> 25:2-16\",\n      \"26:2-23 -> 26:2-23\",\n      \"27:2-11 -> 27:2-11\",\n      \"28:0 -> 28:0\",\n      \"2:4 -> 30:0\",\n      \"31:2-43 -> 31:2-43\",\n      \"32:2-35 -> 32:2-35\",\n      \"33:0 -> 33:0\",\n      \"2:4 -> 35:0\",\n      \"36:2-20 -> 36:2-20\",\n      \"37:2-22 -> 37:2-22\",\n      \"38:0 -> 38:0\",\n      \"2:4 -> 40:0\",\n      \"41:2-16 -> 41:2-16\",\n      \"42:2-34 -> 42:2-34\",\n      \"43:2-26 -> 43:2-26\",\n      \"44:0 -> 44:0\",\n      \"2:4 -> 46:0\",\n      \"47:2-21 -> 47:2-21\",\n      \"48:0 -> 48:0\",\n      \"2:4 -> 50:0\",\n      \"51:2-109 -> 51:2-109\",\n      \"52:2-16 -> 52:2-16\",\n      \"53:0 -> 53:0\",\n      \"2:4 -> 55:0\",\n      \"56:2-16 -> 56:2-16\",\n      \"57:0 -> 57:0\",\n      \"2:4 -> 59:0\",\n      \"60:2-26 -> 60:2-26\",\n      \"61:2-16 -> 61:2-16\",\n      \"62:2-16 -> 62:2-16\",\n      \"63:2-20 -> 63:2-20\",\n      \"64:0 -> 64:0\",\n      \"2:4 -> 66:0\",\n      \"67:2-16 -> 67:2-16\",\n      \"68:0 -> 68:0\",\n      \"2:4 -> 70:0\",\n      \"71:2-12 -> 71:2-12\",\n      \"72:0 -> 72:0\",\n      \"2:4 -> 74:0\",\n      \"75:2-16 -> 75:2-16\",\n      \"76:2-23 -> 76:2-23\",\n      \"77:2-27 -> 77:2-27\",\n      \"78:0 -> 78:0\",\n      \"2:4 -> 80:0\",\n      \"81:2-32 -> 81:2-32\",\n      \"82:2-34 -> 82:2-34\",\n      \"83:2-22 -> 83:2-22\",\n      \"84:2-17 -> 84:2-17\",\n      \"85:2-22 -> 85:2-22\",\n      \"86:2-22 -> 86:2-22\",\n      \"87:2-16 -> 87:2-16\",\n      \"88:2-11 -> 88:2-11\",\n      \"89:2-12 -> 89:2-12\",\n      \"90:0 -> 90:0\",\n      \"2:4 -> 92:0\",\n      \"93:2-22 -> 93:2-22\",\n      \"94:0 -> 94:0\",\n      \"2:4 -> 96:0\",\n      \"97:2-28 -> 97:2-28\",\n      \"98:2-25 -> 98:2-25\",\n      \"99:2-24 -> 99:2-24\",\n      \"100:0 -> 100:0\",\n      \"2:4 -> 102:0\",\n      \"103:2-15 -> 103:2-15\",\n      \"104:0 -> 104:0\",\n      \"2:4 -> 106:0\",\n      \"107:2-18 -> 107:2-18\",\n      \"108:0 -> 108:0\",\n      \"2:4 -> 110:0\",\n      \"111:2-26 -> 111:2-26\",\n      \"112:0 -> 112:0\",\n      \"2:4 -> 114:0\",\n      \"115:2-14 -> 115:2-14\",\n      \"116:0 -> 116:0\",\n      \"2:4 -> 118:0\",\n      \"119:2-31 -> 119:2-31\",\n      \"120:2-22 -> 120:2-22\",\n      \"121:0 -> 121:0\",\n      \"2:4 -> 123:0\",\n      \"124:2-26 -> 124:2-26\",\n      \"125:0 -> 125:0\",\n      \"2:4 -> 127:0\",\n      \"128:2-28 -> 128:2-28\",\n      \"129:2-15 -> 129:2-15\",\n      \"130:0 -> 130:0\",\n      \"2:4 -> 132:0\",\n      \"133:2-20 -> 133:2-20\",\n      \"134:0 -> 134:0\",\n      \"2:4 -> 136:0\",\n      \"137:2-11 -> 137:2-11\",\n      \"138:0 -> 138:0\",\n      \"2:4 -> 140:0\",\n      \"141:2-11 -> 141:2-11\",\n      \"142:2-12 -> 142:2-12\",\n      \"143:0 -> 143:0\",\n      \"2:4 -> 145:0\",\n      \"146:2-12 -> 146:2-12\",\n      \"147:0 -> 147:0\",\n      \"2:4 -> 149:0\",\n      \"150:2-11 -> 150:2-11\",\n      \"151:2-12 -> 151:2-12\",\n      \"152:2-18 -> 152:2-18\",\n      \"153:0 -> 153:0\",\n      \"2:4 -> 155:0\",\n      \"156:2-12 -> 156:2-12\",\n      \"157:0 -> 157:0\",\n      \"2:4 -> 159:0\",\n      \"160:2-18 -> 160:2-18\",\n      \"161:0 -> 161:0\",\n      \"2:4 -> 163:0\",\n      \"164:2-12 -> 164:2-12\",\n      \"165:2-16 -> 165:2-16\",\n      \"166:0 -> 166:0\",\n      \"2:4 -> 168:0\",\n      \"169:2-17 -> 169:2-17\",\n      \"170:0 -> 170:0\",\n      \"2:4 -> 172:0\",\n      \"173:2-17 -> 173:2-17\",\n      \"174:0 -> 174:0\",\n      \"2:4 -> 176:0\",\n      \"177:2-24 -> 177:2-24\",\n      \"178:2-16 -> 178:2-16\",\n      \"179:0 -> 179:0\",\n      \"2:4 -> 181:0\",\n      \"182:2-17 -> 182:2-17\",\n      \"183:2-14 -> 183:2-14\",\n      \"184:0 -> 184:0\",\n      \"2:4 -> 186:0\",\n      \"187:2-15 -> 187:2-15\",\n      \"188:0 -> 188:0\",\n      \"2:4 -> 190:0\",\n      \"191:2-26 -> 191:2-26\",\n      \"192:2-26 -> 192:2-26\",\n      \"193:2-21 -> 193:2-21\",\n      \"194:2-21 -> 194:2-21\",\n      \"195:2-16 -> 195:2-16\",\n      \"196:2-16 -> 196:2-16\",\n      \"197:2-16 -> 197:2-16\",\n      \"198:2-17 -> 198:2-17\",\n      \"199:2-17 -> 199:2-17\",\n      \"200:2-14 -> 200:2-14\",\n      \"201:2-14 -> 201:2-14\",\n      \"202:2-19 -> 202:2-19\",\n      \"203:2-40 -> 203:2-40\",\n      \"204:2-31 -> 204:2-31\",\n      \"205:2-30 -> 205:2-30\",\n      \"206:2-29 -> 206:2-29\",\n      \"207:2-16 -> 207:2-16\",\n      \"208:2-21 -> 208:2-21\",\n      \"209:2-23 -> 209:2-23\",\n      \"210:2-24 -> 210:2-24\",\n      \"211:2-25 -> 211:2-25\",\n      \"212:2-19 -> 212:2-19\",\n      \"213:2-29 -> 213:2-29\",\n      \"214:2-30 -> 214:2-30\",\n      \"215:2-28 -> 215:2-28\",\n      \"216:2-36 -> 216:2-36\",\n      \"217:2-29 -> 217:2-29\",\n      \"218:2-24 -> 218:2-24\",\n      \"219:2-32 -> 219:2-32\",\n      \"220:2-13 -> 220:2-13\",\n      \"221:2-19 -> 221:2-19\",\n      \"222:2-17 -> 222:2-17\",\n      \"223:2-18 -> 223:2-18\",\n      \"224:2-19 -> 224:2-19\",\n      \"225:2-15 -> 225:2-15\",\n      \"226:2-17 -> 226:2-17\",\n      \"227:2-14 -> 227:2-14\",\n      \"228:2-20 -> 228:2-20\",\n      \"229:2-22 -> 229:2-22\",\n      \"230:2-28 -> 230:2-28\",\n      \"231:2-26 -> 231:2-26\",\n      \"232:2-27 -> 232:2-27\",\n      \"233:2-28 -> 233:2-28\",\n      \"234:2-24 -> 234:2-24\",\n      \"235:2-25 -> 235:2-25\",\n      \"236:2-26 -> 236:2-26\",\n      \"237:2-23 -> 237:2-23\",\n      \"238:0 -> 238:0\",\n      \"2:4 -> 240:0\",\n      \"241:2-26 -> 241:2-26\",\n      \"242:2-26 -> 242:2-26\",\n      \"243:2-21 -> 243:2-21\",\n      \"244:2-21 -> 244:2-21\",\n      \"245:2-16 -> 245:2-16\",\n      \"246:2-16 -> 246:2-16\",\n      \"247:2-16 -> 247:2-16\",\n      \"248:2-17 -> 248:2-17\",\n      \"249:2-17 -> 249:2-17\",\n      \"250:2-14 -> 250:2-14\",\n      \"251:2-14 -> 251:2-14\",\n      \"252:2-19 -> 252:2-19\",\n      \"253:2-40 -> 253:2-40\",\n      \"254:2-31 -> 254:2-31\",\n      \"255:2-30 -> 255:2-30\",\n      \"256:2-29 -> 256:2-29\",\n      \"257:2-16 -> 257:2-16\",\n      \"258:2-21 -> 258:2-21\",\n      \"259:2-23 -> 259:2-23\",\n      \"260:2-24 -> 260:2-24\",\n      \"261:2-25 -> 261:2-25\",\n      \"262:2-19 -> 262:2-19\",\n      \"263:2-29 -> 263:2-29\",\n      \"264:2-30 -> 264:2-30\",\n      \"265:2-28 -> 265:2-28\",\n      \"266:2-36 -> 266:2-36\",\n      \"267:2-29 -> 267:2-29\",\n      \"268:2-24 -> 268:2-24\",\n      \"269:2-32 -> 269:2-32\",\n      \"270:2-13 -> 270:2-13\",\n      \"271:2-19 -> 271:2-19\",\n      \"272:2-17 -> 272:2-17\",\n      \"273:2-18 -> 273:2-18\",\n      \"274:2-19 -> 274:2-19\",\n      \"275:2-15 -> 275:2-15\",\n      \"276:2-17 -> 276:2-17\",\n      \"277:2-14 -> 277:2-14\",\n      \"278:2-20 -> 278:2-20\",\n      \"279:2-22 -> 279:2-22\",\n      \"280:2-28 -> 280:2-28\",\n      \"281:2-26 -> 281:2-26\",\n      \"282:2-27 -> 282:2-27\",\n      \"283:2-28 -> 283:2-28\",\n      \"284:2-24 -> 284:2-24\",\n      \"285:2-25 -> 285:2-25\",\n      \"286:2-26 -> 286:2-26\",\n      \"287:2-23 -> 287:2-23\",\n      \"288:0 -> 288:0\",\n      \"2:4 -> 290:0\",\n      \"291:2-26 -> 291:2-26\",\n      \"292:2-26 -> 292:2-26\",\n      \"293:2-21 -> 293:2-21\",\n      \"294:2-21 -> 294:2-21\",\n      \"295:2-16 -> 295:2-16\",\n      \"296:2-16 -> 296:2-16\",\n      \"297:2-16 -> 297:2-16\",\n      \"298:2-17 -> 298:2-17\",\n      \"299:2-17 -> 299:2-17\",\n      \"300:2-14 -> 300:2-14\",\n      \"301:2-14 -> 301:2-14\",\n      \"302:2-19 -> 302:2-19\",\n      \"303:2-40 -> 303:2-40\",\n      \"304:2-31 -> 304:2-31\",\n      \"305:2-30 -> 305:2-30\",\n      \"306:2-29 -> 306:2-29\",\n      \"307:2-16 -> 307:2-16\",\n      \"308:2-21 -> 308:2-21\",\n      \"309:2-23 -> 309:2-23\",\n      \"310:2-24 -> 310:2-24\",\n      \"311:2-25 -> 311:2-25\",\n      \"312:2-19 -> 312:2-19\",\n      \"313:2-29 -> 313:2-29\",\n      \"314:2-30 -> 314:2-30\",\n      \"315:2-28 -> 315:2-28\",\n      \"316:2-36 -> 316:2-36\",\n      \"317:2-29 -> 317:2-29\",\n      \"318:2-24 -> 318:2-24\",\n      \"319:2-32 -> 319:2-32\",\n      \"320:2-13 -> 320:2-13\",\n      \"321:2-19 -> 321:2-19\",\n      \"322:2-17 -> 322:2-17\",\n      \"323:2-18 -> 323:2-18\",\n      \"324:2-19 -> 324:2-19\",\n      \"325:2-15 -> 325:2-15\",\n      \"326:2-17 -> 326:2-17\",\n      \"327:2-14 -> 327:2-14\",\n      \"328:2-20 -> 328:2-20\",\n      \"329:2-22 -> 329:2-22\",\n      \"330:2-28 -> 330:2-28\",\n      \"331:2-26 -> 331:2-26\",\n      \"332:2-27 -> 332:2-27\",\n      \"333:2-28 -> 333:2-28\",\n      \"334:2-24 -> 334:2-24\",\n      \"335:2-25 -> 335:2-25\",\n      \"336:2-26 -> 336:2-26\",\n      \"337:2-23 -> 337:2-23\",\n      \"338:0 -> 338:0\",\n    ]\n  `);\n});","file":"source-maps.test.js","skipped":false,"dir":"tests"},{"name":"utilities have source maps","suites":[],"updatePoint":{"line":386,"column":32,"index":10390},"line":386,"code":"test('utilities have source maps', async () => {\n  let config = {\n    content: [{\n      raw: `text-red-500`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  let {\n    sources,\n    annotations\n  } = parseSourceMaps(result);\n\n  // All CSS generated by Tailwind CSS should be annotated with source maps\n  // And always be able to point to the original source file\n  expect(sources).not.toContain('<no source>');\n  expect(sources.length).toBe(2);\n  expect(annotations).toMatchInlineSnapshot(`\n    [\n      \"2:4 -> 1:0\",\n      \"2:2-22 -> 2:2-22\",\n      \"3:2-48 -> 3:2-48\",\n      \"4:0 -> 4:0\",\n    ]\n  `);\n});","file":"source-maps.test.js","skipped":false,"dir":"tests"},{"name":"components have source maps","suites":[],"updatePoint":{"line":414,"column":33,"index":11049},"line":414,"code":"test('components have source maps', async () => {\n  let config = {\n    content: [{\n      raw: `container`\n    }]\n  };\n  let input = css`\n    @tailwind components;\n  `;\n  let result = await run(input, config);\n  let {\n    sources,\n    annotations\n  } = parseSourceMaps(result);\n\n  // All CSS generated by Tailwind CSS should be annotated with source maps\n  // And always be able to point to the original source file\n  expect(sources).not.toContain('<no source>');\n  expect(sources.length).toBe(2);\n  expect(annotations).toMatchInlineSnapshot(`\n    [\n      \"2:4 -> 1:0\",\n      \"2:2-13 -> 2:2-13\",\n      \"3:0 -> 3:0\",\n      \"2:4 -> 5:0\",\n      \"2:4 -> 6:2\",\n      \"7:4-20 -> 7:4-20\",\n      \"8:2 -> 8:2\",\n      \"9:0 -> 9:0\",\n      \"2:4 -> 11:0\",\n      \"2:4 -> 12:2\",\n      \"13:4-20 -> 13:4-20\",\n      \"14:2 -> 14:2\",\n      \"15:0 -> 15:0\",\n      \"2:4 -> 17:0\",\n      \"2:4 -> 18:2\",\n      \"19:4-21 -> 19:4-21\",\n      \"20:2 -> 20:2\",\n      \"21:0 -> 21:0\",\n      \"2:4 -> 23:0\",\n      \"2:4 -> 24:2\",\n      \"25:4-21 -> 25:4-21\",\n      \"26:2 -> 26:2\",\n      \"27:0 -> 27:0\",\n      \"2:4 -> 29:0\",\n      \"2:4 -> 30:2\",\n      \"31:4-21 -> 31:4-21\",\n      \"32:2 -> 32:2\",\n      \"33:0 -> 33:0\",\n    ]\n  `);\n});","file":"source-maps.test.js","skipped":false,"dir":"tests"},{"name":"source maps for layer rules are not rewritten to point to @tailwind directives","suites":[],"updatePoint":{"line":466,"column":84,"index":12293},"line":466,"code":"test('source maps for layer rules are not rewritten to point to @tailwind directives', async () => {\n  let config = {\n    content: [{\n      raw: `font-normal foo hover:foo`\n    }]\n  };\n  let utilitiesFile = postcss.parse(css`\n      @tailwind utilities;\n    `, {\n    from: 'components.css',\n    map: {\n      prev: map\n    }\n  });\n  let mainCssFile = postcss.parse(css`\n      @layer utilities {\n        .foo {\n          background-color: red;\n        }\n      }\n    `, {\n    from: 'input.css',\n    map: {\n      prev: map\n    }\n  });\n\n  // Just pretend that there's an @import in `mainCssFile` that imports the nodes from `utilitiesFile`\n  let input = postcss.root({\n    nodes: [...utilitiesFile.nodes, ...mainCssFile.nodes],\n    source: mainCssFile.source\n  });\n  let result = await run(input, config);\n  let {\n    sources,\n    annotations\n  } = parseSourceMaps(result);\n\n  // All CSS generated by Tailwind CSS should be annotated with source maps\n  // And always be able to point to the original source file\n  expect(sources).not.toContain('<no source>');\n\n  // And we should see that the source map for the layer rule is not rewritten\n  // to point to the @tailwind directive but instead points to the original\n  expect(sources.length).toBe(3);\n  expect(sources).toMatchInlineSnapshot(`\n    [\n      \"components.css\",\n      \"source-maps.test.js%3Ftest=c291cmNlIG1hcHMgZm9yIGxheWVyIHJ1bGVzIGFyZSBub3QgcmV3cml0dGVuIHRvIHBvaW50IHRvIEB0YWlsd2luZCBkaXJlY3RpdmVz\",\n      \"input.css\",\n    ]\n  `);\n  expect(annotations).toMatchInlineSnapshot(`\n    [\n      \"2:6 -> 1:0\",\n      \"2:2-18 -> 2:2-18\",\n      \"3:0 -> 3:0\",\n      \"3:8 -> 5:0\",\n      \"6:2-23 -> 6:2-23\",\n      \"7:0 -> 7:0\",\n    ]\n  `);\n});","file":"source-maps.test.js","skipped":false,"dir":"tests"},{"name":"it handles `map: true` correctly","suites":[],"updatePoint":{"line":529,"column":38,"index":13935},"line":529,"code":"test('it handles `map: true` correctly', async () => {\n  let config = {\n    content: [{\n      raw: `text-red-500`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config, {\n    map: true\n  });\n  let {\n    sources,\n    annotations\n  } = parseSourceMaps(result);\n\n  // All CSS generated by Tailwind CSS should be annotated with source maps\n  // And always be able to point to the original source file\n  expect(sources).not.toContain('<no source>');\n  expect(sources.length).toBe(2);\n  expect(annotations).toMatchInlineSnapshot(`\n    [\n      \"2:4 -> 1:0\",\n      \"2:2-22 -> 2:2-22\",\n      \"3:2-48 -> 3:2-48\",\n      \"4:0 -> 4:0\",\n    ]\n  `);\n});","file":"source-maps.test.js","skipped":false,"dir":"tests"},{"name":"it handles `map: { inline: true }` correctly","suites":[],"updatePoint":{"line":559,"column":50,"index":14632},"line":559,"code":"test('it handles `map: { inline: true }` correctly', async () => {\n  let config = {\n    content: [{\n      raw: `text-red-500`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config, {\n    map: {\n      inline: true\n    }\n  });\n  let {\n    sources,\n    annotations\n  } = parseSourceMaps(result);\n\n  // All CSS generated by Tailwind CSS should be annotated with source maps\n  // And always be able to point to the original source file\n  expect(sources).not.toContain('<no source>');\n  expect(sources.length).toBe(2);\n  expect(annotations).toMatchInlineSnapshot(`\n    [\n      \"2:4 -> 1:0\",\n      \"2:2-22 -> 2:2-22\",\n      \"3:2-48 -> 3:2-48\",\n      \"4:0 -> 4:0\",\n    ]\n  `);\n});","file":"source-maps.test.js","skipped":false,"dir":"tests"},{"name":"space-x uses non-logical properties","suites":[],"updatePoint":{"line":2,"column":41,"index":97},"line":2,"code":"test('space-x uses non-logical properties', () => {\n  let config = {\n    future: {\n      logicalSiblingUtilities: false\n    },\n    content: [{\n      raw: html`<div class=\"space-x-4\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .space-x-4 > :not([hidden]) ~ :not([hidden]) {\n        --tw-space-x-reverse: 0;\n        margin-right: calc(1rem * var(--tw-space-x-reverse));\n        margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));\n      }\n    `);\n  });\n});","file":"space-utilities.test.js","skipped":false,"dir":"tests"},{"name":"space-x uses logical properties","suites":[],"updatePoint":{"line":25,"column":37,"index":733},"line":25,"code":"test('space-x uses logical properties', () => {\n  let config = {\n    future: {\n      logicalSiblingUtilities: true\n    },\n    content: [{\n      raw: html`<div class=\"space-x-4\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base; @tailwind utilities;', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .space-x-4 > :not([hidden]) ~ :not([hidden]) {\n        --tw-space-x-reverse: 0;\n        margin-inline-start: calc(1rem * calc(1 - var(--tw-space-x-reverse)));\n        margin-inline-end: calc(1rem * var(--tw-space-x-reverse));\n      }\n    `);\n  });\n});","file":"space-utilities.test.js","skipped":false,"dir":"tests"},{"name":"it detects classes in lit-html templates","suites":[],"updatePoint":{"line":2,"column":46,"index":86},"line":2,"code":"test('it detects classes in lit-html templates', () => {\n  let config = {\n    content: [{\n      raw: `html\\`<button class=\"bg-blue-400 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\\${data.title}</button>\\`;`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .rounded {\n        border-radius: 0.25rem;\n      }\n      .bg-blue-400 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n      }\n      .px-4 {\n        padding-left: 1rem;\n        padding-right: 1rem;\n      }\n      .py-2 {\n        padding-top: 0.5rem;\n        padding-bottom: 0.5rem;\n      }\n      .font-bold {\n        font-weight: 700;\n      }\n      .text-white {\n        --tw-text-opacity: 1;\n        color: rgb(255 255 255 / var(--tw-text-opacity));\n      }\n      .hover\\:bg-blue-600:hover {\n        --tw-bg-opacity: 1;\n        background-color: rgb(37 99 235 / var(--tw-bg-opacity));\n      }\n    `);\n  });\n});","file":"syntax-lit-html.test.js","skipped":false,"dir":"tests"},{"name":"it detects svelte based on the file extension","suites":[],"updatePoint":{"line":3,"column":51,"index":116},"line":3,"code":"test('it detects svelte based on the file extension', () => {\n  let config = {\n    content: [path.resolve(__dirname, './syntax-svelte.test.svelte')],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-500 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n      }\n      @media (min-width: 1024px) {\n        .lg\\:hover\\:bg-blue-500:hover {\n          --tw-bg-opacity: 1;\n          background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n        }\n      }\n    `);\n  });\n});","file":"syntax-svelte.test.js","skipped":false,"dir":"tests"},{"name":"using raw with svelte extension","suites":[],"updatePoint":{"line":31,"column":37,"index":835},"line":31,"code":"test('using raw with svelte extension', () => {\n  let config = {\n    content: [{\n      raw: `\n        <script>\n          let current = 'foo'\n        </script>\n\n        <button class:lg:hover:bg-blue-500={current === 'foo'}>Click me</button>\n\n        <button\n          class:bg-red-500={current === 'foo'}\n        >\n          Click me\n        </button>\n        `,\n      extension: 'svelte'\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    theme: {},\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .bg-red-500 {\n        --tw-bg-opacity: 1;\n        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n      }\n      @media (min-width: 1024px) {\n        .lg\\:hover\\:bg-blue-500:hover {\n          --tw-bg-opacity: 1;\n          background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n        }\n      }\n    `);\n  });\n});","file":"syntax-svelte.test.js","skipped":false,"dir":"tests"},{"name":"class variants are inserted at `@tailwind variants`","suites":[],"updatePoint":{"line":2,"column":57,"index":103},"line":2,"code":"test('class variants are inserted at `@tailwind variants`', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-bold hover:font-bold md:font-bold\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n    @tailwind variants;\n    .foo {\n      color: black;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-bold,\n      .hover\\:font-bold:hover {\n        font-weight: 700;\n      }\n      @media (min-width: 768px) {\n        .md\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      .foo {\n        color: #000;\n      }\n    `);\n  });\n});","file":"tailwind-screens.test.js","skipped":false,"dir":"tests"},{"name":"`@tailwind screens` works as an alias for `@tailwind variants`","suites":[],"updatePoint":{"line":32,"column":68,"index":761},"line":32,"code":"test('`@tailwind screens` works as an alias for `@tailwind variants`', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"font-bold hover:font-bold md:font-bold\"></div>`\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n    @tailwind screens;\n    .foo {\n      color: black;\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .font-bold,\n      .hover\\:font-bold:hover {\n        font-weight: 700;\n      }\n      @media (min-width: 768px) {\n        .md\\:font-bold {\n          font-weight: 700;\n        }\n      }\n      .foo {\n        color: #000;\n      }\n    `);\n  });\n});","file":"tailwind-screens.test.js","skipped":false,"dir":"tests"},{"name":"should keep an array as an array","suites":[],"updatePoint":{"line":2,"column":36,"index":82},"line":2,"code":"it('should keep an array as an array', () => {\n  let input = ['a', 'b', '0', 'c'];\n  expect(toPath(input)).toBe(input);\n});","file":"to-path.test.js","skipped":false,"dir":"tests"},{"name":"should convert \"$input\" to \"$output\"","suites":[],"line":6,"code":"it.each`\n  input             | output\n  ${'a.b.c'}        | ${['a', 'b', 'c']}\n  ${'a[0].b.c'}     | ${['a', '0', 'b', 'c']}\n  ${'.a'}           | ${['a']}\n  ${'[].a'}         | ${['a']}\n  ${'a[1.5][b][c]'} | ${['a', '1.5', 'b', 'c']}\n`('should convert \"$input\" to \"$output\"', ({\n  input,\n  output\n}) => {\n  expect(toPath(input)).toEqual(output);\n});","file":"to-path.test.js","skipped":false,"dir":"tests"},{"name":"should generate \"$after\" from \"$before\"","suites":[],"line":2,"code":"it.each`\n  before                                        | after\n  ${'.foo'}                                     | ${'#app :is(.foo)'}\n  ${'.foo .bar'}                                | ${'#app :is(.foo .bar)'}\n  ${'.foo:hover'}                               | ${'#app :is(.foo:hover)'}\n  ${'.foo .bar:hover'}                          | ${'#app :is(.foo .bar:hover)'}\n  ${'.foo::before'}                             | ${'#app :is(.foo)::before'}\n  ${'.foo::before'}                             | ${'#app :is(.foo)::before'}\n  ${'.foo::file-selector-button'}               | ${'#app :is(.foo)::file-selector-button'}\n  ${'.foo::-webkit-progress-bar'}               | ${'#app :is(.foo)::-webkit-progress-bar'}\n  ${'.foo:hover::before'}                       | ${'#app :is(.foo:hover)::before'}\n  ${':is(.dark :is([dir=\"rtl\"] .foo::before))'} | ${'#app :is(.dark :is([dir=\"rtl\"] .foo))::before'}\n  ${':is(.dark .foo) .bar'}                     | ${'#app :is(:is(.dark .foo) .bar)'}\n  ${':is(.foo) :is(.bar)'}                      | ${'#app :is(:is(.foo) :is(.bar))'}\n  ${':is(.foo)::before'}                        | ${'#app :is(.foo)::before'}\n  ${'.foo:before'}                              | ${'#app :is(.foo):before'}\n  ${'.foo::some-uknown-pseudo'}                 | ${'#app :is(.foo)::some-uknown-pseudo'}\n  ${'.foo::some-uknown-pseudo:hover'}           | ${'#app :is(.foo)::some-uknown-pseudo:hover'}\n  ${'.foo:focus::some-uknown-pseudo:hover'}     | ${'#app :is(.foo:focus)::some-uknown-pseudo:hover'}\n  ${'.foo:hover::some-uknown-pseudo:focus'}     | ${'#app :is(.foo:hover)::some-uknown-pseudo:focus'}\n`('should generate \"$after\" from \"$before\"', ({\n  before,\n  after\n}) => {\n  expect(applyImportantSelector(before, '#app')).toEqual(after);\n});","file":"util/apply-important-selector.test.js","skipped":false,"dir":"tests"},{"name":"variants","suites":[],"updatePoint":{"line":5,"column":14,"index":147},"line":5,"code":"test('variants', () => {\n  let config = {\n    darkMode: 'class',\n    content: [path.resolve(__dirname, './variants.test.html')],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(fs.readFileSync(path.resolve(__dirname, './variants.test.css'), 'utf8'));\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"order matters and produces different behaviour","suites":[],"updatePoint":{"line":22,"column":52,"index":634},"line":22,"code":"test('order matters and produces different behaviour', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"hover:file:[--value:1]\"></div>\n          <div class=\"file:hover:[--value:2]\"></div>\n        `\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .file\\:hover\\:\\[--value\\:2\\]:hover::-webkit-file-upload-button {\n        --value: 2;\n      }\n      .file\\:hover\\:\\[--value\\:2\\]:hover::file-selector-button {\n        --value: 2;\n      }\n      .hover\\:file\\:\\[--value\\:1\\]::-webkit-file-upload-button:hover {\n        --value: 1;\n      }\n      .hover\\:file\\:\\[--value\\:1\\]::file-selector-button:hover {\n        --value: 1;\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"prose-headings usage on its own","suites":["custom advanced variants"],"updatePoint":{"line":49,"column":39,"index":1418},"line":49,"code":"  test('prose-headings usage on its own', () => {\n    let config = {\n      content: [{\n        raw: html` <div class=\"prose-headings:text-center\"></div> `\n      }],\n      plugins: [function ({\n        addVariant\n      }) {\n        addVariant('prose-headings', ':where(&) :is(h1, h2, h3, h4)');\n      }]\n    };\n    return run('@tailwind components;@tailwind utilities', config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        :where(.prose-headings\\:text-center) :is(h1, h2, h3, h4) {\n          text-align: center;\n        }\n      `);\n    });\n  });","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"prose-headings with another \"simple\" variant","suites":["custom advanced variants"],"updatePoint":{"line":68,"column":52,"index":2013},"line":68,"code":"  test('prose-headings with another \"simple\" variant', () => {\n    let config = {\n      content: [{\n        raw: html`\n            <div class=\"hover:prose-headings:text-center\"></div>\n            <div class=\"prose-headings:hover:text-center\"></div>\n          `\n      }],\n      plugins: [function ({\n        addVariant\n      }) {\n        addVariant('prose-headings', ':where(&) :is(h1, h2, h3, h4)');\n      }]\n    };\n    return run('@tailwind components;@tailwind utilities', config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        :where(.hover\\:prose-headings\\:text-center) :is(h1, h2, h3, h4):hover,\n        :where(.prose-headings\\:hover\\:text-center:hover) :is(h1, h2, h3, h4) {\n          text-align: center;\n        }\n      `);\n    });\n  });","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"prose-headings with another \"complex\" variant","suites":["custom advanced variants"],"updatePoint":{"line":91,"column":53,"index":2794},"line":91,"code":"  test('prose-headings with another \"complex\" variant', () => {\n    let config = {\n      content: [{\n        raw: html`\n            <div class=\"group-hover:prose-headings:text-center\"></div>\n            <div class=\"prose-headings:group-hover:text-center\"></div>\n          `\n      }],\n      plugins: [function ({\n        addVariant\n      }) {\n        addVariant('prose-headings', ':where(&) :is(h1, h2, h3, h4)');\n      }]\n    };\n    return run('@tailwind utilities', config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        .group:hover :where(.group-hover\\:prose-headings\\:text-center) :is(h1, h2, h3, h4),\n        :where(.group:hover .prose-headings\\:group-hover\\:text-center) :is(h1, h2, h3, h4) {\n          text-align: center;\n        }\n      `);\n    });\n  });","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"using variants with multi-class selectors","suites":["custom advanced variants"],"updatePoint":{"line":114,"column":49,"index":3588},"line":114,"code":"  test('using variants with multi-class selectors', () => {\n    let config = {\n      content: [{\n        raw: html` <div class=\"screen:parent screen:child\"></div> `\n      }],\n      plugins: [function ({\n        addVariant,\n        addComponents\n      }) {\n        addComponents({\n          '.parent .child': {\n            foo: 'bar'\n          }\n        });\n        addVariant('screen', '@media screen');\n      }]\n    };\n    return run('@tailwind components;@tailwind utilities', config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        @media screen {\n          .screen\\:parent .child,\n          .parent .screen\\:child {\n            foo: bar;\n          }\n        }\n      `);\n    });\n  });","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"using multiple classNames in your custom variant","suites":["custom advanced variants"],"updatePoint":{"line":142,"column":56,"index":4317},"line":142,"code":"  test('using multiple classNames in your custom variant', () => {\n    let config = {\n      content: [{\n        raw: html` <div class=\"my-variant:underline test\"></div> `\n      }],\n      plugins: [function ({\n        addVariant\n      }) {\n        addVariant('my-variant', '&:where(.one, .two, .three)');\n      }]\n    };\n    let input = css`\n      @tailwind components;\n      @tailwind utilities;\n\n      @layer components {\n        .test {\n          @apply my-variant:italic;\n        }\n      }\n    `;\n    return run(input, config).then(result => {\n      return expect(result.css).toMatchFormattedCss(css`\n        .test:where(.one, .two, .three) {\n          font-style: italic;\n        }\n        .my-variant\\:underline:where(.one, .two, .three) {\n          text-decoration-line: underline;\n        }\n      `);\n    });\n  });","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variant format string must include at-rule or & (1)","suites":["custom advanced variants"],"updatePoint":{"line":174,"column":59,"index":5142},"line":174,"code":"  test('variant format string must include at-rule or & (1)', async () => {\n    let config = {\n      content: [{\n        raw: html` <div class=\"wtf-bbq:text-center\"></div> `\n      }],\n      plugins: [function ({\n        addVariant\n      }) {\n        addVariant('wtf-bbq', 'lol');\n      }]\n    };\n    await expect(run('@tailwind components;@tailwind utilities', config)).rejects.toThrowError(\"Your custom variant `wtf-bbq` has an invalid format string. Make sure it's an at-rule or contains a `&` placeholder.\");\n  });","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variant format string must include at-rule or & (2)","suites":["custom advanced variants"],"updatePoint":{"line":187,"column":59,"index":5660},"line":187,"code":"  test('variant format string must include at-rule or & (2)', async () => {\n    let config = {\n      content: [{\n        raw: html` <div class=\"wtf-bbq:text-center\"></div> `\n      }],\n      plugins: [function ({\n        addVariant\n      }) {\n        addVariant('wtf-bbq', () => 'lol');\n      }]\n    };\n    await expect(run('@tailwind components;@tailwind utilities', config)).rejects.toThrowError(\"Your custom variant `wtf-bbq` has an invalid format string. Make sure it's an at-rule or contains a `&` placeholder.\");\n  });","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"stacked peer variants","suites":["custom advanced variants"],"updatePoint":{"line":201,"column":27,"index":6156},"line":201,"code":"test('stacked peer variants', async () => {\n  let config = {\n    content: [{\n      raw: 'peer-disabled:peer-focus:peer-hover:flex'\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toIncludeCss(css`\n    .peer:disabled:focus:hover ~ .peer-disabled\\:peer-focus\\:peer-hover\\:flex {\n      display: flex;\n    }\n  `);\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"should properly handle keyframes with multiple variants","suites":["custom advanced variants"],"updatePoint":{"line":222,"column":59,"index":6672},"line":222,"code":"it('should properly handle keyframes with multiple variants', async () => {\n  let config = {\n    content: [{\n      raw: 'animate-spin hover:animate-spin focus:animate-spin hover:animate-bounce focus:animate-bounce'\n    }]\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    @keyframes spin {\n      to {\n        transform: rotate(360deg);\n      }\n    }\n    .animate-spin {\n      animation: 1s linear infinite spin;\n    }\n    @keyframes bounce {\n      0%,\n      100% {\n        animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n        transform: translateY(-25%);\n      }\n      50% {\n        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n        transform: none;\n      }\n    }\n    .hover\\:animate-bounce:hover {\n      animation: 1s infinite bounce;\n    }\n    .hover\\:animate-spin:hover {\n      animation: 1s linear infinite spin;\n    }\n    .focus\\:animate-bounce:focus {\n      animation: 1s infinite bounce;\n    }\n    .focus\\:animate-spin:focus {\n      animation: 1s linear infinite spin;\n    }\n  `);\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"custom addVariant with more complex media query params","suites":["custom advanced variants"],"updatePoint":{"line":267,"column":60,"index":7809},"line":267,"code":"test('custom addVariant with more complex media query params', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"magic:text-center\"></div> `\n    }],\n    plugins: [function ({\n      addVariant\n    }) {\n      addVariant('magic', '@media screen and (max-width: 600px)');\n    }]\n  };\n  return run('@tailwind components;@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media screen and (max-width: 600px) {\n        .magic\\:text-center {\n          text-align: center;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"custom addVariant with nested media & format shorthand","suites":["custom advanced variants"],"updatePoint":{"line":288,"column":60,"index":8387},"line":288,"code":"test('custom addVariant with nested media & format shorthand', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"magic:text-center\"></div> `\n    }],\n    plugins: [function ({\n      addVariant\n    }) {\n      addVariant('magic', '@supports (hover: hover) { @media print { &:disabled } }');\n    }]\n  };\n  return run('@tailwind components;@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @supports (hover: hover) {\n        @media print {\n          .magic\\:text-center:disabled {\n            text-align: center;\n          }\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"before and after variants are a bit special, and forced to the end","suites":["custom advanced variants"],"updatePoint":{"line":311,"column":72,"index":9033},"line":311,"code":"test('before and after variants are a bit special, and forced to the end', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"before:hover:text-center\"></div>\n          <div class=\"hover:before:text-center\"></div>\n        `\n    }],\n    plugins: []\n  };\n  return run('@tailwind components;@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .before\\:hover\\:text-center:hover:before,\n      .hover\\:before\\:text-center:hover:before {\n        content: var(--tw-content);\n        text-align: center;\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"before and after variants are a bit special, and forced to the end (2)","suites":["custom advanced variants"],"updatePoint":{"line":331,"column":76,"index":9643},"line":331,"code":"test('before and after variants are a bit special, and forced to the end (2)', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"before:prose-headings:text-center\"></div>\n          <div class=\"prose-headings:before:text-center\"></div>\n        `\n    }],\n    plugins: [function ({\n      addVariant\n    }) {\n      addVariant('prose-headings', ':where(&) :is(h1, h2, h3, h4)');\n    }]\n  };\n  return run('@tailwind components;@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      :where(.before\\:prose-headings\\:text-center) :is(h1, h2, h3, h4):before,\n      :where(.prose-headings\\:before\\:text-center) :is(h1, h2, h3, h4):before {\n        content: var(--tw-content);\n        text-align: center;\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"returning non-strings and non-selectors in addVariant","suites":["custom advanced variants"],"updatePoint":{"line":355,"column":59,"index":10428},"line":355,"code":"test('returning non-strings and non-selectors in addVariant', () => {\n  /** @type {import('../types/config').Config} */\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"peer-aria-expanded:text-center\"></div>\n          <div class=\"peer-aria-expanded-2:text-center\"></div>\n        `\n    }],\n    plugins: [function ({\n      addVariant,\n      e\n    }) {\n      addVariant('peer-aria-expanded', ({\n        modifySelectors,\n        separator\n      }) =>\n      // Returning anything other string | string[] | undefined here is not supported\n      // But we're trying to be lenient here and just throw it out\n      modifySelectors(({\n        className\n      }) => `.peer[aria-expanded=\"true\"] ~ .${e(`peer-aria-expanded${separator}${className}`)}`));\n      addVariant('peer-aria-expanded-2', ({\n        modifySelectors,\n        separator\n      }) => {\n        let nodes = modifySelectors(({\n          className\n        }) => `.${e(`peer-aria-expanded-2${separator}${className}`)}`);\n        return [\n        // Returning anything other than strings here is not supported\n        // But we're trying to be lenient here and just throw it out\n        nodes, '.peer[aria-expanded=\"false\"] ~ &'];\n      });\n    }]\n  };\n  return run('@tailwind components;@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .peer[aria-expanded='true'] ~ .peer-aria-expanded\\:text-center,\n      .peer[aria-expanded='false'] ~ .peer-aria-expanded-2\\:text-center {\n        text-align: center;\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"should not generate variants of user css if it is not inside a layer","suites":["custom advanced variants"],"updatePoint":{"line":400,"column":72,"index":12004},"line":400,"code":"it('should not generate variants of user css if it is not inside a layer', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"hover:foo\"></div>`\n    }],\n    plugins: []\n  };\n  let input = css`\n    @tailwind components;\n    @tailwind utilities;\n\n    .foo {\n      color: red;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .foo {\n        color: red;\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"should be possible to use responsive modifiers that are defined with special characters","suites":["custom advanced variants"],"updatePoint":{"line":423,"column":91,"index":12485},"line":423,"code":"it('should be possible to use responsive modifiers that are defined with special characters', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"<sm:underline\"></div>`\n    }],\n    theme: {\n      screens: {\n        '<sm': {\n          max: '399px'\n        }\n      }\n    },\n    plugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media (max-width: 399px) {\n        .\\<sm\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"including just the base layer should not produce variants","suites":["custom advanced variants"],"updatePoint":{"line":447,"column":61,"index":13021},"line":447,"code":"it('including just the base layer should not produce variants', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"sm:container sm:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  return run('@tailwind base', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n        ${defaults}\n      `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants for components should not be produced in a file without a components layer","suites":["custom advanced variants"],"updatePoint":{"line":462,"column":87,"index":13427},"line":462,"code":"it('variants for components should not be produced in a file without a components layer', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"sm:container sm:underline\"></div>`\n    }]\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 640px) {\n        .sm\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants for utilities should not be produced in a file without a utilities layer","suites":["custom advanced variants"],"updatePoint":{"line":478,"column":85,"index":13885},"line":478,"code":"it('variants for utilities should not be produced in a file without a utilities layer', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"sm:container sm:underline\"></div>`\n    }]\n  };\n  return run('@tailwind components', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 640px) {\n        .sm\\:container {\n          width: 100%;\n        }\n        @media (min-width: 640px) {\n          .sm\\:container {\n            max-width: 640px;\n          }\n        }\n        @media (min-width: 768px) {\n          .sm\\:container {\n            max-width: 768px;\n          }\n        }\n        @media (min-width: 1024px) {\n          .sm\\:container {\n            max-width: 1024px;\n          }\n        }\n        @media (min-width: 1280px) {\n          .sm\\:container {\n            max-width: 1280px;\n          }\n        }\n        @media (min-width: 1536px) {\n          .sm\\:container {\n            max-width: 1536px;\n          }\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"The visited variant removes opacity support","suites":["custom advanced variants"],"updatePoint":{"line":519,"column":49,"index":14869},"line":519,"code":"test('The visited variant removes opacity support', () => {\n  let config = {\n    content: [{\n      raw: html`\n          <a class=\"visited:border-red-500 visited:bg-red-500 visited:text-red-500\"\n            >Look, it's a link!</a\n          >\n        `\n    }],\n    plugins: []\n  };\n  return run('@tailwind utilities', config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      .visited\\:border-red-500:visited {\n        border-color: #ef4444;\n      }\n      .visited\\:bg-red-500:visited {\n        background-color: #ef4444;\n      }\n      .visited\\:text-red-500:visited {\n        color: #ef4444;\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"appends variants to the correct place when using postcss documents","suites":["custom advanced variants"],"updatePoint":{"line":544,"column":70,"index":15535},"line":544,"code":"it('appends variants to the correct place when using postcss documents', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"underline sm:underline\"></div>`\n    }],\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  const doc = postcss.document();\n  doc.append(postcss.parse(`a {}`));\n  doc.append(postcss.parse(`@tailwind base`));\n  doc.append(postcss.parse(`@tailwind utilities`));\n  doc.append(postcss.parse(`b {}`));\n  const result = doc.toResult();\n  return run(result, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      .underline {\n        text-decoration-line: underline;\n      }\n      @media (min-width: 640px) {\n        .sm\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants support multiple, grouped selectors (html)","suites":["custom advanced variants"],"updatePoint":{"line":574,"column":55,"index":16337},"line":574,"code":"it('variants support multiple, grouped selectors (html)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"sm:base1 sm:base2\"></div>`\n    }],\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .base1 .foo,\n      .base1 .bar {\n        color: red;\n      }\n\n      .base2 .bar .base2-foo {\n        color: red;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 640px) {\n        .sm\\:base1 .foo,\n        .sm\\:base1 .bar,\n        .sm\\:base2 .bar .base2-foo {\n          color: red;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants support multiple, grouped selectors (apply)","suites":["custom advanced variants"],"updatePoint":{"line":609,"column":56,"index":17054},"line":609,"code":"it('variants support multiple, grouped selectors (apply)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"baz\"></div>`\n    }],\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .base .foo,\n      .base .bar {\n        color: red;\n      }\n    }\n    .baz {\n      @apply sm:base;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 640px) {\n        .baz .foo,\n        .baz .bar {\n          color: red;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants only picks the used selectors in a group (html)","suites":["custom advanced variants"],"updatePoint":{"line":642,"column":60,"index":17690},"line":642,"code":"it('variants only picks the used selectors in a group (html)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"sm:b\"></div>`\n    }],\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .a,\n      .b {\n        color: red;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 640px) {\n        .sm\\:b {\n          color: red;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants only picks the used selectors in a group (apply)","suites":["custom advanced variants"],"updatePoint":{"line":671,"column":61,"index":18251},"line":671,"code":"it('variants only picks the used selectors in a group (apply)', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"baz\"></div>`\n    }],\n    plugins: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .a,\n      .b {\n        color: red;\n      }\n    }\n    .baz {\n      @apply sm:b;\n    }\n  `;\n  return run(input, config).then(result => {\n    return expect(result.css).toMatchFormattedCss(css`\n      @media (min-width: 640px) {\n        .baz {\n          color: red;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"hoverOnlyWhenSupported adds hover and pointer media features by default","suites":["custom advanced variants"],"updatePoint":{"line":703,"column":77,"index":18861},"line":703,"code":"test('hoverOnlyWhenSupported adds hover and pointer media features by default', () => {\n  let config = {\n    future: {\n      hoverOnlyWhenSupported: true\n    },\n    content: [{\n      raw: html`<div class=\"hover:underline group-hover:underline peer-hover:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      ${defaults}\n      @media (hover: hover) and (pointer: fine) {\n        .hover\\:underline:hover,\n        .group:hover .group-hover\\:underline,\n        .peer:hover ~ .peer-hover\\:underline {\n          text-decoration-line: underline;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"multi-class utilities handle selector-mutating variants correctly","suites":["custom advanced variants"],"updatePoint":{"line":733,"column":71,"index":19650},"line":733,"code":"test('multi-class utilities handle selector-mutating variants correctly', () => {\n  let config = {\n    content: [{\n      raw: html`<div\n          class=\"after:foo after:bar after:baz hover:foo hover:bar hover:baz group-hover:foo group-hover:bar group-hover:baz peer-checked:foo peer-checked:bar peer-checked:baz\"\n        ></div>`\n    }, {\n      raw: html`<div\n          class=\"after:foo1 after:bar1 after:baz1 hover:foo1 hover:bar1 hover:baz1 group-hover:foo1 group-hover:bar1 group-hover:baz1 peer-checked:foo1 peer-checked:bar1 peer-checked:baz1\"\n        ></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      .foo.bar.baz {\n        color: red;\n      }\n      .foo1 .bar1 .baz1 {\n        color: red;\n      }\n    }\n  `;\n\n  // The second set of ::after cases (w/ descendant selectors)\n  // are clearly \"wrong\" BUT you can't have a descendant of a\n  // pseudo - element so the utilities `after:foo1` and\n  // `after:bar1` are non-sensical so this is still\n  // perfectly fine behavior\n\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      .after\\:foo.bar.baz:after,\n      .after\\:bar.foo.baz:after,\n      .after\\:baz.foo.bar:after,\n      .after\\:foo1 .bar1 .baz1:after,\n      .foo1 .after\\:bar1 .baz1:after,\n      .foo1 .bar1 .after\\:baz1:after {\n        content: var(--tw-content);\n        color: red;\n      }\n      .hover\\:foo:hover.bar.baz,\n      .hover\\:bar:hover.foo.baz,\n      .hover\\:baz:hover.foo.bar,\n      .hover\\:foo1:hover .bar1 .baz1,\n      .foo1 .hover\\:bar1:hover .baz1,\n      .foo1 .bar1 .hover\\:baz1:hover,\n      .group:hover .group-hover\\:foo.bar.baz,\n      .group:hover .group-hover\\:bar.foo.baz,\n      .group:hover .group-hover\\:baz.foo.bar,\n      .group:hover .group-hover\\:foo1 .bar1 .baz1,\n      .foo1 .group:hover .group-hover\\:bar1 .baz1,\n      .foo1 .bar1 .group:hover .group-hover\\:baz1,\n      .peer:checked ~ .peer-checked\\:foo.bar.baz,\n      .peer:checked ~ .peer-checked\\:bar.foo.baz,\n      .peer:checked ~ .peer-checked\\:baz.foo.bar,\n      .peer:checked ~ .peer-checked\\:foo1 .bar1 .baz1,\n      .foo1 .peer:checked ~ .peer-checked\\:bar1 .baz1,\n      .foo1 .bar1 .peer:checked ~ .peer-checked\\:baz1 {\n        color: red;\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"class inside pseudo-class function :has","suites":["custom advanced variants"],"updatePoint":{"line":800,"column":45,"index":21933},"line":800,"code":"test('class inside pseudo-class function :has', () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"foo hover:foo sm:foo\"></div>`\n    }, {\n      raw: html`<div class=\"bar hover:bar sm:bar\"></div>`\n    }, {\n      raw: html`<div class=\"baz hover:baz sm:baz\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n    @layer utilities {\n      :where(.foo) {\n        color: red;\n      }\n      :is(.foo, .bar, .baz) {\n        color: orange;\n      }\n      :is(.foo) {\n        color: yellow;\n      }\n      html:has(.foo) {\n        color: green;\n      }\n    }\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      :where(.foo) {\n        color: red;\n      }\n      :is(.foo, .bar, .baz) {\n        color: orange;\n      }\n      .foo {\n        color: #ff0;\n      }\n      html:has(.foo) {\n        color: green;\n      }\n      :where(.hover\\:foo:hover) {\n        color: red;\n      }\n      :is(.hover\\:foo:hover, .bar, .baz),\n      :is(.foo, .hover\\:bar:hover, .baz),\n      :is(.foo, .bar, .hover\\:baz:hover) {\n        color: orange;\n      }\n      .hover\\:foo:hover {\n        color: #ff0;\n      }\n      html:has(.hover\\:foo:hover) {\n        color: green;\n      }\n      @media (min-width: 640px) {\n        :where(.sm\\:foo) {\n          color: red;\n        }\n        :is(.sm\\:foo, .bar, .baz),\n        :is(.foo, .sm\\:bar, .baz),\n        :is(.foo, .bar, .sm\\:baz) {\n          color: orange;\n        }\n        .sm\\:foo {\n          color: #ff0;\n        }\n        html:has(.sm\\:foo) {\n          color: green;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variant functions returning arrays should output correct results when nesting","suites":["custom advanced variants"],"updatePoint":{"line":877,"column":83,"index":23617},"line":877,"code":"test('variant functions returning arrays should output correct results when nesting', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"test:foo\" />`\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      addUtilities,\n      addVariant\n    }) {\n      addVariant('test', () => ['@media (test)']);\n      addUtilities({\n        '.foo': {\n          display: 'grid',\n          '> *': {\n            'grid-column': 'span 2'\n          }\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    @media (test) {\n      .test\\:foo {\n        display: grid;\n      }\n      .test\\:foo > * {\n        grid-column: span 2;\n      }\n    }\n  `);\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants with slashes in them work","suites":["custom advanced variants"],"updatePoint":{"line":915,"column":40,"index":24376},"line":915,"code":"test('variants with slashes in them work', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"ar-1/10:flex\">ar-1/10</div> `\n    }],\n    theme: {\n      extend: {\n        screens: {\n          'ar-1/10': {\n            raw: '(min-aspect-ratio: 1/10)'\n          }\n        }\n      }\n    },\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-aspect-ratio: 1 / 10) {\n        .ar-1\\/10\\:flex {\n          display: flex;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"variants with slashes support modifiers","suites":["custom advanced variants"],"updatePoint":{"line":946,"column":45,"index":25008},"line":946,"code":"test('variants with slashes support modifiers', () => {\n  let config = {\n    content: [{\n      raw: html` <div class=\"ar-1/10/20:flex\">ar-1/10</div> `\n    }],\n    corePlugins: {\n      preflight: false\n    },\n    plugins: [function ({\n      matchVariant\n    }) {\n      matchVariant('ar', (value, {\n        modifier\n      }) => {\n        return [`@media (min-aspect-ratio: ${value}) and (foo: ${modifier})`];\n      }, {\n        values: {\n          '1/10': '1/10'\n        }\n      });\n    }]\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  return run(input, config).then(result => {\n    expect(result.css).toMatchFormattedCss(css`\n      @media (min-aspect-ratio: 1 / 10) and (foo: 20) {\n        .ar-1\\/10\\/20\\:flex {\n          display: flex;\n        }\n      }\n    `);\n  });\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"arbitrary variant selectors should not re-order scrollbar pseudo classes","suites":["custom advanced variants"],"updatePoint":{"line":981,"column":78,"index":25823},"line":981,"code":"test('arbitrary variant selectors should not re-order scrollbar pseudo classes', async () => {\n  let config = {\n    content: [{\n      raw: html`\n          <div class=\"[&::-webkit-scrollbar:hover]:underline\" />\n          <div class=\"[&::-webkit-scrollbar-button:hover]:underline\" />\n          <div class=\"[&::-webkit-scrollbar-thumb:hover]:underline\" />\n          <div class=\"[&::-webkit-scrollbar-track:hover]:underline\" />\n          <div class=\"[&::-webkit-scrollbar-track-piece:hover]:underline\" />\n          <div class=\"[&::-webkit-scrollbar-corner:hover]:underline\" />\n          <div class=\"[&::-webkit-resizer:hover]:underline\" />\n        `\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    .\\[\\&\\:\\:-webkit-resizer\\:hover\\]\\:underline::-webkit-resizer:hover {\n      text-decoration-line: underline;\n    }\n    .\\[\\&\\:\\:-webkit-scrollbar-button\\:hover\\]\\:underline::-webkit-scrollbar-button:hover {\n      text-decoration-line: underline;\n    }\n    .\\[\\&\\:\\:-webkit-scrollbar-corner\\:hover\\]\\:underline::-webkit-scrollbar-corner:hover {\n      text-decoration-line: underline;\n    }\n    .\\[\\&\\:\\:-webkit-scrollbar-thumb\\:hover\\]\\:underline::-webkit-scrollbar-thumb:hover {\n      text-decoration-line: underline;\n    }\n    .\\[\\&\\:\\:-webkit-scrollbar-track-piece\\:hover\\]\\:underline::-webkit-scrollbar-track-piece:hover {\n      text-decoration-line: underline;\n    }\n    .\\[\\&\\:\\:-webkit-scrollbar-track\\:hover\\]\\:underline::-webkit-scrollbar-track:hover {\n      text-decoration-line: underline;\n    }\n    .\\[\\&\\:\\:-webkit-scrollbar\\:hover\\]\\:underline::-webkit-scrollbar:hover {\n      text-decoration-line: underline;\n    }\n  `);\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"stacking dark and rtl variants","suites":["custom advanced variants"],"updatePoint":{"line":1026,"column":36,"index":27567},"line":1026,"code":"test('stacking dark and rtl variants', async () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`<div class=\"dark:rtl:italic\" />`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    :is(.dark :is([dir='rtl'] .dark\\:rtl\\:italic)) {\n      font-style: italic;\n    }\n  `);\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"stacking dark and rtl variants with pseudo elements","suites":["custom advanced variants"],"updatePoint":{"line":1046,"column":57,"index":28038},"line":1046,"code":"test('stacking dark and rtl variants with pseudo elements', async () => {\n  let config = {\n    darkMode: 'class',\n    content: [{\n      raw: html`<div class=\"dark:rtl:placeholder:italic\" />`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  let result = await run(input, config);\n  expect(result.css).toMatchFormattedCss(css`\n    :is(.dark :is([dir='rtl'] .dark\\:rtl\\:placeholder\\:italic))::placeholder {\n      font-style: italic;\n    }\n  `);\n});","file":"variants.test.js","skipped":false,"dir":"tests"},{"name":"it warns when there is no content key","suites":[],"updatePoint":{"line":2,"column":43,"index":89},"line":2,"code":"test('it warns when there is no content key', async () => {\n  let config = {\n    presets: [],\n    // Prevents the default config from being merged in and therefore `content: ['auto']` is not used.\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n  `;\n  await run(input, config);\n  expect().toHaveBeenWarnedWith(['content-problems']);\n});","file":"warnings.test.js","skipped":false,"dir":"tests"},{"name":"it warns when there is an empty content key","suites":[],"updatePoint":{"line":16,"column":49,"index":476},"line":16,"code":"test('it warns when there is an empty content key', async () => {\n  let config = {\n    content: [],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind base;\n  `;\n  await run(input, config);\n  expect().toHaveBeenWarnedWith(['content-problems']);\n});","file":"warnings.test.js","skipped":false,"dir":"tests"},{"name":"it warns when there are no utilities generated","suites":[],"updatePoint":{"line":29,"column":52,"index":763},"line":29,"code":"test('it warns when there are no utilities generated', async () => {\n  let config = {\n    content: [{\n      raw: html`nothing here matching a utility`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  expect().toHaveBeenWarnedWith(['content-problems']);\n});","file":"warnings.test.js","skipped":false,"dir":"tests"},{"name":"warnings are not thrown when only variant utilities are generated","suites":[],"updatePoint":{"line":44,"column":69,"index":1128},"line":44,"code":"it('warnings are not thrown when only variant utilities are generated', async () => {\n  let config = {\n    content: [{\n      raw: html`<div class=\"sm:underline\"></div>`\n    }],\n    corePlugins: {\n      preflight: false\n    }\n  };\n  let input = css`\n    @tailwind utilities;\n  `;\n  await run(input, config);\n  expect().not.toHaveBeenWarned();\n});","file":"warnings.test.js","skipped":false,"dir":"tests"},{"name":"it adds the right custom property","suites":[],"updatePoint":{"line":2,"column":39,"index":103},"line":2,"code":"test('it adds the right custom property', () => {\n  expect(withAlphaVariable({\n    color: '#ff0000',\n    property: 'color',\n    variable: '--tw-text-opacity'\n  })).toEqual({\n    '--tw-text-opacity': '1',\n    color: 'rgb(255 0 0 / var(--tw-text-opacity))'\n  });\n  expect(withAlphaVariable({\n    color: 'hsl(240 100% 50%)',\n    property: 'color',\n    variable: '--tw-text-opacity'\n  })).toEqual({\n    '--tw-text-opacity': '1',\n    color: 'hsl(240 100% 50% / var(--tw-text-opacity))'\n  });\n});","file":"withAlphaVariable.test.js","skipped":false,"dir":"tests"},{"name":"it ignores colors that cannot be parsed","suites":[],"updatePoint":{"line":20,"column":45,"index":600},"line":20,"code":"test('it ignores colors that cannot be parsed', () => {\n  expect(withAlphaVariable({\n    color: 'currentColor',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'currentColor'\n  });\n  expect(withAlphaVariable({\n    color: 'rgb(255, 0)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'rgb(255, 0)'\n  });\n  expect(withAlphaVariable({\n    color: 'rgb(255)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'rgb(255)'\n  });\n  expect(withAlphaVariable({\n    color: 'rgb(255, 0, 0, 255)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'rgb(255, 0, 0, 255)'\n  });\n  expect(withAlphaVariable({\n    color: 'rgb(var(--color))',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'rgb(var(--color))'\n  });\n});","file":"withAlphaVariable.test.js","skipped":false,"dir":"tests"},{"name":"it ignores colors that already have an alpha channel","suites":[],"updatePoint":{"line":57,"column":58,"index":1602},"line":57,"code":"test('it ignores colors that already have an alpha channel', () => {\n  expect(withAlphaVariable({\n    color: '#ff0000ff',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': '#ff0000ff'\n  });\n  expect(withAlphaVariable({\n    color: '#ff000080',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': '#ff000080'\n  });\n  expect(withAlphaVariable({\n    color: '#f00a',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': '#f00a'\n  });\n  expect(withAlphaVariable({\n    color: '#f00f',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': '#f00f'\n  });\n  expect(withAlphaVariable({\n    color: 'rgba(255, 255, 255, 1)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'rgba(255, 255, 255, 1)'\n  });\n  expect(withAlphaVariable({\n    color: 'rgba(255, 255, 255, 0.5)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'rgba(255, 255, 255, 0.5)'\n  });\n  expect(withAlphaVariable({\n    color: 'rgba(255 255 255 / 0.5)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'rgba(255 255 255 / 0.5)'\n  });\n  expect(withAlphaVariable({\n    color: 'hsla(240, 100%, 50%, 1)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'hsla(240, 100%, 50%, 1)'\n  });\n  expect(withAlphaVariable({\n    color: 'hsla(240, 100%, 50%, 0.5)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'hsla(240, 100%, 50%, 0.5)'\n  });\n  expect(withAlphaVariable({\n    color: 'hsl(240 100% 50% / 0.5)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    'background-color': 'hsl(240 100% 50% / 0.5)'\n  });\n});","file":"withAlphaVariable.test.js","skipped":false,"dir":"tests"},{"name":"it allows a closure to be passed","suites":[],"updatePoint":{"line":129,"column":38,"index":3581},"line":129,"code":"test('it allows a closure to be passed', () => {\n  expect(withAlphaVariable({\n    color: ({\n      opacityVariable\n    }) => `rgba(0, 0, 0, var(${opacityVariable}))`,\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    '--tw-bg-opacity': '1',\n    'background-color': 'rgba(0, 0, 0, var(--tw-bg-opacity))'\n  });\n  expect(withAlphaVariable({\n    color: ({\n      opacityValue\n    }) => `rgba(0, 0, 0, ${opacityValue})`,\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    '--tw-bg-opacity': '1',\n    'background-color': 'rgba(0, 0, 0, var(--tw-bg-opacity))'\n  });\n});","file":"withAlphaVariable.test.js","skipped":false,"dir":"tests"},{"name":"it transforms rgb and hsl to space-separated rgb and hsl","suites":[],"updatePoint":{"line":151,"column":62,"index":4237},"line":151,"code":"test('it transforms rgb and hsl to space-separated rgb and hsl', () => {\n  expect(withAlphaVariable({\n    color: 'rgb(50, 50, 50)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    '--tw-bg-opacity': '1',\n    'background-color': 'rgb(50 50 50 / var(--tw-bg-opacity))'\n  });\n  expect(withAlphaVariable({\n    color: 'rgb(50 50 50)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    '--tw-bg-opacity': '1',\n    'background-color': 'rgb(50 50 50 / var(--tw-bg-opacity))'\n  });\n  expect(withAlphaVariable({\n    color: 'hsl(50, 50%, 50%)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    '--tw-bg-opacity': '1',\n    'background-color': 'hsl(50 50% 50% / var(--tw-bg-opacity))'\n  });\n  expect(withAlphaVariable({\n    color: 'hsl(50 50% 50%)',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    '--tw-bg-opacity': '1',\n    'background-color': 'hsl(50 50% 50% / var(--tw-bg-opacity))'\n  });\n});","file":"withAlphaVariable.test.js","skipped":false,"dir":"tests"},{"name":"it transforms named colors to rgb","suites":[],"updatePoint":{"line":185,"column":39,"index":5247},"line":185,"code":"test('it transforms named colors to rgb', () => {\n  expect(withAlphaVariable({\n    color: 'red',\n    property: 'background-color',\n    variable: '--tw-bg-opacity'\n  })).toEqual({\n    '--tw-bg-opacity': '1',\n    'background-color': 'rgb(255 0 0 / var(--tw-bg-opacity))'\n  });\n});","file":"withAlphaVariable.test.js","skipped":false,"dir":"tests"},{"name":"works","suites":[],"updatePoint":{"line":14,"column":9,"index":403},"line":14,"code":"it('works', () => {\n  let result = exec('--content tests/fixtures/basic.html');\n  expect(result).toContain('.uppercase');\n  expect(result).toContain('.\\\\[will-change\\\\:opacity\\\\]');\n  expect(result).toContain('will-change: opacity');\n\n  // Verify that no plugins are installed that modify the `[will-change:opacity]` class\n  expect(result).not.toContain('backface-visibility: hidden');\n});","file":"test.js","skipped":false,"dir":"standalone-cli/tests"},{"name":"supports first-party plugins","suites":[],"updatePoint":{"line":23,"column":32,"index":816},"line":23,"code":"it('supports first-party plugins', () => {\n  let result = exec('--content tests/fixtures/plugins.html --config tests/fixtures/test.config.js');\n  expect(result).toContain('.aspect-w-1');\n  expect(result).toContain('.form-input');\n  expect(result).toContain('.line-clamp-2');\n  expect(result).toContain('.prose');\n  expect(result).toContain('@container');\n  expect(result).toContain('@md\\\\:bg-teal-600');\n});","file":"test.js","skipped":false,"dir":"standalone-cli/tests"},{"name":"supports postcss config files","suites":[],"updatePoint":{"line":32,"column":33,"index":1225},"line":32,"code":"it('supports postcss config files', async () => {\n  // We have to run this test outside of any place with node_modules for it to properly test this situation\n  let result = await inIsolatedContext(() => {\n    // Emulate the user adding their own postcss plugins\n    execSync(`npm install postcss-will-change`);\n    return exec('--content tests/fixtures/basic.html --postcss tests/fixtures/postcss.config.js');\n  });\n  expect(result).toContain('.uppercase');\n\n  // Ensure the custom added postcss plugin is working\n  expect(result).toContain('will-change: opacity');\n  expect(result).toContain('backface-visibility: hidden');\n});","file":"test.js","skipped":false,"dir":"standalone-cli/tests"}]}