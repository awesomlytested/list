{"repo":"microsoft/vscode","url":"https://github.com/microsoft/vscode","branch":"main","configs":[{"package":"code-oss-dev","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"code-oss-dev-smoke-test","lang":"js","dir":"test/smoke/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"verifies opened editors are restored","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":14,"column":44,"index":892},"line":14,"code":"    it('verifies opened editors are restored', async function () {\n      app = createApp(this.defaultOptions);\n      await app.start(); // Open 3 editors\n\n      await app.workbench.quickaccess.openFile(join(app.workspacePathOrFolder, 'bin', 'www'));\n      await app.workbench.quickaccess.runCommand('View: Keep Editor');\n      await app.workbench.quickaccess.openFile(join(app.workspacePathOrFolder, 'app.js'));\n      await app.workbench.quickaccess.runCommand('View: Keep Editor');\n      await app.workbench.editors.newUntitledFile();\n      await app.restart(); // Verify 3 editors are open\n\n      await app.workbench.editors.selectTab('Untitled-1');\n      await app.workbench.editors.selectTab('app.js');\n      await app.workbench.editors.selectTab('www');\n      await app.stop();\n      app = undefined;\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies editors can save and restore","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":31,"column":45,"index":1707},"line":31,"code":"    it('verifies editors can save and restore', async function () {\n      app = createApp(this.defaultOptions);\n      await app.start();\n      const textToType = 'Hello, Code'; // open editor and type\n\n      await app.workbench.quickaccess.openFile(join(app.workspacePathOrFolder, 'app.js'));\n      await app.workbench.editor.waitForTypeInEditor('app.js', textToType);\n      await app.workbench.editors.waitForTab('app.js', true); // save\n\n      await app.workbench.editors.saveOpenedFile();\n      await app.workbench.editors.waitForTab('app.js', false); // restart\n\n      await app.restart(); // verify contents\n\n      await app.workbench.editor.waitForEditorContents('app.js', contents => contents.indexOf(textToType) > -1);\n      await app.stop();\n      app = undefined;\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (without delay)","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":49,"column":70,"index":2514},"line":49,"code":"    it('verifies that \"hot exit\" works for dirty files (without delay)', function () {\n      return testHotExit.call(this, undefined);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (with delay)","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":52,"column":67,"index":2654},"line":52,"code":"    it('verifies that \"hot exit\" works for dirty files (with delay)', function () {\n      return testHotExit.call(this, 2000);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that auto save triggers on shutdown","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":55,"column":52,"index":2774},"line":55,"code":"    it('verifies that auto save triggers on shutdown', function () {\n      return testHotExit.call(this, undefined, true);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies opened editors are restored","suites":["Data Loss (stable -> insiders)"],"updatePoint":{"line":102,"column":44,"index":4938},"line":102,"code":"    it('verifies opened editors are restored', async function () {\n      const stableCodePath = ensureStableCode();\n\n      if (!stableCodePath) {\n        this.skip();\n      } // macOS: the first launch of stable Code will trigger\n      // additional checks in the OS (notarization validation)\n      // so it can take a very long time. as such we install\n      // a retry handler to make sure we do not fail as a\n      // consequence.\n\n\n      if (process.platform === 'darwin') {\n        this.retries(2);\n      }\n\n      const userDataDir = getRandomUserDataDir(this.defaultOptions);\n      const stableOptions = Object.assign({}, this.defaultOptions);\n      stableOptions.codePath = stableCodePath;\n      stableOptions.userDataDir = userDataDir;\n      stableOptions.quality = Quality.Stable;\n      stableApp = new Application(stableOptions);\n      await stableApp.start(); // Open 3 editors\n\n      await stableApp.workbench.quickaccess.openFile(join(stableApp.workspacePathOrFolder, 'bin', 'www'));\n      await stableApp.workbench.quickaccess.runCommand('View: Keep Editor');\n      await stableApp.workbench.quickaccess.openFile(join(stableApp.workspacePathOrFolder, 'app.js'));\n      await stableApp.workbench.quickaccess.runCommand('View: Keep Editor');\n      await stableApp.workbench.editors.newUntitledFile();\n      await stableApp.stop();\n      stableApp = undefined;\n      const insiderOptions = Object.assign({}, this.defaultOptions);\n      insiderOptions.userDataDir = userDataDir;\n      insidersApp = new Application(insiderOptions);\n      await insidersApp.start(); // Verify 3 editors are open\n\n      await insidersApp.workbench.editors.selectTab('Untitled-1');\n      await insidersApp.workbench.editors.selectTab('app.js');\n      await insidersApp.workbench.editors.selectTab('www');\n      await insidersApp.stop();\n      insidersApp = undefined;\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":true,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (without delay)","suites":["Data Loss (stable -> insiders)"],"updatePoint":{"line":144,"column":70,"index":6830},"line":144,"code":"    it('verifies that \"hot exit\" works for dirty files (without delay)', async function () {\n      return testHotExit.call(this, undefined);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":true,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (with delay)","suites":["Data Loss (stable -> insiders)"],"updatePoint":{"line":147,"column":67,"index":6976},"line":147,"code":"    it('verifies that \"hot exit\" works for dirty files (with delay)', async function () {\n      return testHotExit.call(this, 2000);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":true,"dir":"test"}]}