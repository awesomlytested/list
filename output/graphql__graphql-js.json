{
    "repo": "graphql/graphql-js",
    "url": "https://github.com/graphql/graphql-js",
    "branch": "main",
    "configs": [
        {
            "package": "graphql",
            "lang": "ts",
            "dir": "src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "Allows querying the schema for types",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 16,
                "column": 44
            },
            "line": 16,
            "code": "    it('Allows querying the schema for types', () => {\n      const data = queryStarWars(`\n        {\n          __schema {\n            types {\n              name\n            }\n          }\n        }\n      `);\n\n      // Include all types used by StarWars schema, introspection types and\n      // standard directives. For example, `Boolean` is used in `@skip`,\n      // `@include` and also inside introspection types.\n      expect(data).to.deep.equal({\n        __schema: {\n          types: [\n            { name: 'Human' },\n            { name: 'Character' },\n            { name: 'String' },\n            { name: 'Episode' },\n            { name: 'Droid' },\n            { name: 'Query' },\n            { name: 'Boolean' },\n            { name: '__Schema' },\n            { name: '__Type' },\n            { name: '__TypeKind' },\n            { name: '__Field' },\n            { name: '__InputValue' },\n            { name: '__EnumValue' },\n            { name: '__Directive' },\n            { name: '__DirectiveLocation' },\n          ],\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for query type",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 53,
                "column": 49
            },
            "line": 53,
            "code": "    it('Allows querying the schema for query type', () => {\n      const data = queryStarWars(`\n        {\n          __schema {\n            queryType {\n              name\n            }\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __schema: {\n          queryType: {\n            name: 'Query',\n          },\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for a specific type",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 73,
                "column": 54
            },
            "line": 73,
            "code": "    it('Allows querying the schema for a specific type', () => {\n      const data = queryStarWars(`\n        {\n          __type(name: \"Droid\") {\n            name\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __type: {\n          name: 'Droid',\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for an object kind",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 89,
                "column": 53
            },
            "line": 89,
            "code": "    it('Allows querying the schema for an object kind', () => {\n      const data = queryStarWars(`\n        {\n          __type(name: \"Droid\") {\n            name\n            kind\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __type: {\n          name: 'Droid',\n          kind: 'OBJECT',\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for an interface kind",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 107,
                "column": 56
            },
            "line": 107,
            "code": "    it('Allows querying the schema for an interface kind', () => {\n      const data = queryStarWars(`\n        {\n          __type(name: \"Character\") {\n            name\n            kind\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __type: {\n          name: 'Character',\n          kind: 'INTERFACE',\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for object fields",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 125,
                "column": 52
            },
            "line": 125,
            "code": "    it('Allows querying the schema for object fields', () => {\n      const data = queryStarWars(`\n        {\n          __type(name: \"Droid\") {\n            name\n            fields {\n              name\n              type {\n                name\n                kind\n              }\n            }\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __type: {\n          name: 'Droid',\n          fields: [\n            {\n              name: 'id',\n              type: { name: null, kind: 'NON_NULL' },\n            },\n            {\n              name: 'name',\n              type: { name: 'String', kind: 'SCALAR' },\n            },\n            {\n              name: 'friends',\n              type: { name: null, kind: 'LIST' },\n            },\n            {\n              name: 'appearsIn',\n              type: { name: null, kind: 'LIST' },\n            },\n            {\n              name: 'secretBackstory',\n              type: { name: 'String', kind: 'SCALAR' },\n            },\n            {\n              name: 'primaryFunction',\n              type: { name: 'String', kind: 'SCALAR' },\n            },\n          ],\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for nested object fields",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 174,
                "column": 59
            },
            "line": 174,
            "code": "    it('Allows querying the schema for nested object fields', () => {\n      const data = queryStarWars(`\n        {\n          __type(name: \"Droid\") {\n            name\n            fields {\n              name\n              type {\n                name\n                kind\n                ofType {\n                  name\n                  kind\n                }\n              }\n            }\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __type: {\n          name: 'Droid',\n          fields: [\n            {\n              name: 'id',\n              type: {\n                name: null,\n                kind: 'NON_NULL',\n                ofType: {\n                  name: 'String',\n                  kind: 'SCALAR',\n                },\n              },\n            },\n            {\n              name: 'name',\n              type: {\n                name: 'String',\n                kind: 'SCALAR',\n                ofType: null,\n              },\n            },\n            {\n              name: 'friends',\n              type: {\n                name: null,\n                kind: 'LIST',\n                ofType: {\n                  name: 'Character',\n                  kind: 'INTERFACE',\n                },\n              },\n            },\n            {\n              name: 'appearsIn',\n              type: {\n                name: null,\n                kind: 'LIST',\n                ofType: {\n                  name: 'Episode',\n                  kind: 'ENUM',\n                },\n              },\n            },\n            {\n              name: 'secretBackstory',\n              type: {\n                name: 'String',\n                kind: 'SCALAR',\n                ofType: null,\n              },\n            },\n            {\n              name: 'primaryFunction',\n              type: {\n                name: 'String',\n                kind: 'SCALAR',\n                ofType: null,\n              },\n            },\n          ],\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for field args",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 260,
                "column": 49
            },
            "line": 260,
            "code": "    it('Allows querying the schema for field args', () => {\n      const data = queryStarWars(`\n        {\n          __schema {\n            queryType {\n              fields {\n                name\n                args {\n                  name\n                  description\n                  type {\n                    name\n                    kind\n                    ofType {\n                      name\n                      kind\n                    }\n                  }\n                  defaultValue\n                }\n              }\n            }\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __schema: {\n          queryType: {\n            fields: [\n              {\n                name: 'hero',\n                args: [\n                  {\n                    defaultValue: null,\n                    description:\n                      'If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.',\n                    name: 'episode',\n                    type: {\n                      kind: 'ENUM',\n                      name: 'Episode',\n                      ofType: null,\n                    },\n                  },\n                ],\n              },\n              {\n                name: 'human',\n                args: [\n                  {\n                    name: 'id',\n                    description: 'id of the human',\n                    type: {\n                      kind: 'NON_NULL',\n                      name: null,\n                      ofType: {\n                        kind: 'SCALAR',\n                        name: 'String',\n                      },\n                    },\n                    defaultValue: null,\n                  },\n                ],\n              },\n              {\n                name: 'droid',\n                args: [\n                  {\n                    name: 'id',\n                    description: 'id of the droid',\n                    type: {\n                      kind: 'NON_NULL',\n                      name: null,\n                      ofType: {\n                        kind: 'SCALAR',\n                        name: 'String',\n                      },\n                    },\n                    defaultValue: null,\n                  },\n                ],\n              },\n            ],\n          },\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows querying the schema for documentation",
            "suites": [
                "Star Wars Introspection Tests",
                "Basic Introspection"
            ],
            "updatePoint": {
                "line": 348,
                "column": 52
            },
            "line": 348,
            "code": "    it('Allows querying the schema for documentation', () => {\n      const data = queryStarWars(`\n        {\n          __type(name: \"Droid\") {\n            name\n            description\n          }\n        }\n      `);\n\n      expect(data).to.deep.equal({\n        __type: {\n          name: 'Droid',\n          description: 'A mechanical creature in the Star Wars universe.',\n        },\n      });\n    });",
            "file": "starWarsIntrospection-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Correctly identifies R2-D2 as the hero of the Star Wars Saga",
            "suites": [
                "Star Wars Query Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 12,
                "column": 68
            },
            "line": 12,
            "code": "    it('Correctly identifies R2-D2 as the hero of the Star Wars Saga', async () => {\n      const source = `\n        query HeroNameQuery {\n          hero {\n            name\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          hero: {\n            name: 'R2-D2',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to query for the ID and friends of R2-D2",
            "suites": [
                "Star Wars Query Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 31,
                "column": 58
            },
            "line": 31,
            "code": "    it('Allows us to query for the ID and friends of R2-D2', async () => {\n      const source = `\n        query HeroNameAndFriendsQuery {\n          hero {\n            id\n            name\n            friends {\n              name\n            }\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          hero: {\n            id: '2001',\n            name: 'R2-D2',\n            friends: [\n              {\n                name: 'Luke Skywalker',\n              },\n              {\n                name: 'Han Solo',\n              },\n              {\n                name: 'Leia Organa',\n              },\n            ],\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to query for the friends of friends of R2-D2",
            "suites": [
                "Star Wars Query Tests",
                "Nested Queries"
            ],
            "updatePoint": {
                "line": 68,
                "column": 62
            },
            "line": 68,
            "code": "    it('Allows us to query for the friends of friends of R2-D2', async () => {\n      const source = `\n        query NestedQuery {\n          hero {\n            name\n            friends {\n              name\n              appearsIn\n              friends {\n                name\n              }\n            }\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          hero: {\n            name: 'R2-D2',\n            friends: [\n              {\n                name: 'Luke Skywalker',\n                appearsIn: ['NEW_HOPE', 'EMPIRE', 'JEDI'],\n                friends: [\n                  {\n                    name: 'Han Solo',\n                  },\n                  {\n                    name: 'Leia Organa',\n                  },\n                  {\n                    name: 'C-3PO',\n                  },\n                  {\n                    name: 'R2-D2',\n                  },\n                ],\n              },\n              {\n                name: 'Han Solo',\n                appearsIn: ['NEW_HOPE', 'EMPIRE', 'JEDI'],\n                friends: [\n                  {\n                    name: 'Luke Skywalker',\n                  },\n                  {\n                    name: 'Leia Organa',\n                  },\n                  {\n                    name: 'R2-D2',\n                  },\n                ],\n              },\n              {\n                name: 'Leia Organa',\n                appearsIn: ['NEW_HOPE', 'EMPIRE', 'JEDI'],\n                friends: [\n                  {\n                    name: 'Luke Skywalker',\n                  },\n                  {\n                    name: 'Han Solo',\n                  },\n                  {\n                    name: 'C-3PO',\n                  },\n                  {\n                    name: 'R2-D2',\n                  },\n                ],\n              },\n            ],\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to query characters directly, using their IDs",
            "suites": [
                "Star Wars Query Tests",
                "Using IDs and query parameters to refetch objects"
            ],
            "updatePoint": {
                "line": 149,
                "column": 63
            },
            "line": 149,
            "code": "    it('Allows us to query characters directly, using their IDs', async () => {\n      const source = `\n        query FetchLukeAndC3POQuery {\n          human(id: \"1000\") {\n            name\n          }\n          droid(id: \"2000\") {\n            name\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          human: {\n            name: 'Luke Skywalker',\n          },\n          droid: {\n            name: 'C-3PO',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to create a generic query, then use it to fetch Luke Skywalker using his ID",
            "suites": [
                "Star Wars Query Tests",
                "Using IDs and query parameters to refetch objects"
            ],
            "updatePoint": {
                "line": 174,
                "column": 93
            },
            "line": 174,
            "code": "    it('Allows us to create a generic query, then use it to fetch Luke Skywalker using his ID', async () => {\n      const source = `\n        query FetchSomeIDQuery($someId: String!) {\n          human(id: $someId) {\n            name\n          }\n        }\n      `;\n      const variableValues = { someId: '1000' };\n\n      const result = await graphql({ schema, source, variableValues });\n      expect(result).to.deep.equal({\n        data: {\n          human: {\n            name: 'Luke Skywalker',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to create a generic query, then use it to fetch Han Solo using his ID",
            "suites": [
                "Star Wars Query Tests",
                "Using IDs and query parameters to refetch objects"
            ],
            "updatePoint": {
                "line": 194,
                "column": 87
            },
            "line": 194,
            "code": "    it('Allows us to create a generic query, then use it to fetch Han Solo using his ID', async () => {\n      const source = `\n        query FetchSomeIDQuery($someId: String!) {\n          human(id: $someId) {\n            name\n          }\n        }\n      `;\n      const variableValues = { someId: '1002' };\n\n      const result = await graphql({ schema, source, variableValues });\n      expect(result).to.deep.equal({\n        data: {\n          human: {\n            name: 'Han Solo',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to create a generic query, then pass an invalid ID to get null back",
            "suites": [
                "Star Wars Query Tests",
                "Using IDs and query parameters to refetch objects"
            ],
            "updatePoint": {
                "line": 214,
                "column": 85
            },
            "line": 214,
            "code": "    it('Allows us to create a generic query, then pass an invalid ID to get null back', async () => {\n      const source = `\n        query humanQuery($id: String!) {\n          human(id: $id) {\n            name\n          }\n        }\n      `;\n      const variableValues = { id: 'not a valid id' };\n\n      const result = await graphql({ schema, source, variableValues });\n      expect(result).to.deep.equal({\n        data: {\n          human: null,\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to query for Luke, changing his key with an alias",
            "suites": [
                "Star Wars Query Tests",
                "Using aliases to change the key in the response"
            ],
            "updatePoint": {
                "line": 234,
                "column": 67
            },
            "line": 234,
            "code": "    it('Allows us to query for Luke, changing his key with an alias', async () => {\n      const source = `\n        query FetchLukeAliased {\n          luke: human(id: \"1000\") {\n            name\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          luke: {\n            name: 'Luke Skywalker',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to query for both Luke and Leia, using two root fields and an alias",
            "suites": [
                "Star Wars Query Tests",
                "Using aliases to change the key in the response"
            ],
            "updatePoint": {
                "line": 253,
                "column": 85
            },
            "line": 253,
            "code": "    it('Allows us to query for both Luke and Leia, using two root fields and an alias', async () => {\n      const source = `\n        query FetchLukeAndLeiaAliased {\n          luke: human(id: \"1000\") {\n            name\n          }\n          leia: human(id: \"1003\") {\n            name\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          luke: {\n            name: 'Luke Skywalker',\n          },\n          leia: {\n            name: 'Leia Organa',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to query using duplicated content",
            "suites": [
                "Star Wars Query Tests",
                "Uses fragments to express more complex queries"
            ],
            "updatePoint": {
                "line": 280,
                "column": 51
            },
            "line": 280,
            "code": "    it('Allows us to query using duplicated content', async () => {\n      const source = `\n        query DuplicateFields {\n          luke: human(id: \"1000\") {\n            name\n            homePlanet\n          }\n          leia: human(id: \"1003\") {\n            name\n            homePlanet\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          luke: {\n            name: 'Luke Skywalker',\n            homePlanet: 'Tatooine',\n          },\n          leia: {\n            name: 'Leia Organa',\n            homePlanet: 'Alderaan',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to use a fragment to avoid duplicating content",
            "suites": [
                "Star Wars Query Tests",
                "Uses fragments to express more complex queries"
            ],
            "updatePoint": {
                "line": 309,
                "column": 64
            },
            "line": 309,
            "code": "    it('Allows us to use a fragment to avoid duplicating content', async () => {\n      const source = `\n        query UseFragment {\n          luke: human(id: \"1000\") {\n            ...HumanFragment\n          }\n          leia: human(id: \"1003\") {\n            ...HumanFragment\n          }\n        }\n\n        fragment HumanFragment on Human {\n          name\n          homePlanet\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          luke: {\n            name: 'Luke Skywalker',\n            homePlanet: 'Tatooine',\n          },\n          leia: {\n            name: 'Leia Organa',\n            homePlanet: 'Alderaan',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to verify that R2-D2 is a droid",
            "suites": [
                "Star Wars Query Tests",
                "Using __typename to find the type of an object"
            ],
            "updatePoint": {
                "line": 343,
                "column": 49
            },
            "line": 343,
            "code": "    it('Allows us to verify that R2-D2 is a droid', async () => {\n      const source = `\n        query CheckTypeOfR2 {\n          hero {\n            __typename\n            name\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          hero: {\n            __typename: 'Droid',\n            name: 'R2-D2',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows us to verify that Luke is a human",
            "suites": [
                "Star Wars Query Tests",
                "Using __typename to find the type of an object"
            ],
            "updatePoint": {
                "line": 364,
                "column": 48
            },
            "line": 364,
            "code": "    it('Allows us to verify that Luke is a human', async () => {\n      const source = `\n        query CheckTypeOfLuke {\n          hero(episode: EMPIRE) {\n            __typename\n            name\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expect(result).to.deep.equal({\n        data: {\n          hero: {\n            __typename: 'Human',\n            name: 'Luke Skywalker',\n          },\n        },\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Correctly reports error on accessing secretBackstory",
            "suites": [
                "Star Wars Query Tests",
                "Reporting errors raised in resolvers"
            ],
            "updatePoint": {
                "line": 387,
                "column": 60
            },
            "line": 387,
            "code": "    it('Correctly reports error on accessing secretBackstory', async () => {\n      const source = `\n        query HeroNameQuery {\n          hero {\n            name\n            secretBackstory\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expectJSON(result).toDeepEqual({\n        data: {\n          hero: {\n            name: 'R2-D2',\n            secretBackstory: null,\n          },\n        },\n        errors: [\n          {\n            message: 'secretBackstory is secret.',\n            locations: [{ line: 5, column: 13 }],\n            path: ['hero', 'secretBackstory'],\n          },\n        ],\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Correctly reports error on accessing secretBackstory in a list",
            "suites": [
                "Star Wars Query Tests",
                "Reporting errors raised in resolvers"
            ],
            "updatePoint": {
                "line": 415,
                "column": 70
            },
            "line": 415,
            "code": "    it('Correctly reports error on accessing secretBackstory in a list', async () => {\n      const source = `\n        query HeroNameQuery {\n          hero {\n            name\n            friends {\n              name\n              secretBackstory\n            }\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expectJSON(result).toDeepEqual({\n        data: {\n          hero: {\n            name: 'R2-D2',\n            friends: [\n              {\n                name: 'Luke Skywalker',\n                secretBackstory: null,\n              },\n              {\n                name: 'Han Solo',\n                secretBackstory: null,\n              },\n              {\n                name: 'Leia Organa',\n                secretBackstory: null,\n              },\n            ],\n          },\n        },\n        errors: [\n          {\n            message: 'secretBackstory is secret.',\n            locations: [{ line: 7, column: 15 }],\n            path: ['hero', 'friends', 0, 'secretBackstory'],\n          },\n          {\n            message: 'secretBackstory is secret.',\n            locations: [{ line: 7, column: 15 }],\n            path: ['hero', 'friends', 1, 'secretBackstory'],\n          },\n          {\n            message: 'secretBackstory is secret.',\n            locations: [{ line: 7, column: 15 }],\n            path: ['hero', 'friends', 2, 'secretBackstory'],\n          },\n        ],\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Correctly reports error on accessing through an alias",
            "suites": [
                "Star Wars Query Tests",
                "Reporting errors raised in resolvers"
            ],
            "updatePoint": {
                "line": 469,
                "column": 61
            },
            "line": 469,
            "code": "    it('Correctly reports error on accessing through an alias', async () => {\n      const source = `\n        query HeroNameQuery {\n          mainHero: hero {\n            name\n            story: secretBackstory\n          }\n        }\n      `;\n\n      const result = await graphql({ schema, source });\n      expectJSON(result).toDeepEqual({\n        data: {\n          mainHero: {\n            name: 'R2-D2',\n            story: null,\n          },\n        },\n        errors: [\n          {\n            message: 'secretBackstory is secret.',\n            locations: [{ line: 5, column: 13 }],\n            path: ['mainHero', 'story'],\n          },\n        ],\n      });\n    });",
            "file": "starWarsQuery-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Validates a complex but valid query",
            "suites": [
                "Star Wars Validation Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 22,
                "column": 43
            },
            "line": 22,
            "code": "    it('Validates a complex but valid query', () => {\n      const query = `\n        query NestedQueryWithFragment {\n          hero {\n            ...NameAndAppearances\n            friends {\n              ...NameAndAppearances\n              friends {\n                ...NameAndAppearances\n              }\n            }\n          }\n        }\n\n        fragment NameAndAppearances on Character {\n          name\n          appearsIn\n        }\n      `;\n      return expect(validationErrors(query)).to.be.empty;\n    });",
            "file": "starWarsValidation-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Notes that non-existent fields are invalid",
            "suites": [
                "Star Wars Validation Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 44,
                "column": 50
            },
            "line": 44,
            "code": "    it('Notes that non-existent fields are invalid', () => {\n      const query = `\n        query HeroSpaceshipQuery {\n          hero {\n            favoriteSpaceship\n          }\n        }\n      `;\n      return expect(validationErrors(query)).to.not.be.empty;\n    });",
            "file": "starWarsValidation-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Requires fields on objects",
            "suites": [
                "Star Wars Validation Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 55,
                "column": 34
            },
            "line": 55,
            "code": "    it('Requires fields on objects', () => {\n      const query = `\n        query HeroNoFieldsQuery {\n          hero\n        }\n      `;\n      return expect(validationErrors(query)).to.not.be.empty;\n    });",
            "file": "starWarsValidation-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Disallows fields on scalars",
            "suites": [
                "Star Wars Validation Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 64,
                "column": 35
            },
            "line": 64,
            "code": "    it('Disallows fields on scalars', () => {\n      const query = `\n        query HeroFieldsOnScalarQuery {\n          hero {\n            name {\n              firstCharacterOfName\n            }\n          }\n        }\n      `;\n      return expect(validationErrors(query)).to.not.be.empty;\n    });",
            "file": "starWarsValidation-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Disallows object fields on interfaces",
            "suites": [
                "Star Wars Validation Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 77,
                "column": 45
            },
            "line": 77,
            "code": "    it('Disallows object fields on interfaces', () => {\n      const query = `\n        query DroidFieldOnCharacter {\n          hero {\n            name\n            primaryFunction\n          }\n        }\n      `;\n      return expect(validationErrors(query)).to.not.be.empty;\n    });",
            "file": "starWarsValidation-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows object fields in fragments",
            "suites": [
                "Star Wars Validation Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 89,
                "column": 41
            },
            "line": 89,
            "code": "    it('Allows object fields in fragments', () => {\n      const query = `\n        query DroidFieldInFragment {\n          hero {\n            name\n            ...DroidFields\n          }\n        }\n\n        fragment DroidFields on Droid {\n          primaryFunction\n        }\n      `;\n      return expect(validationErrors(query)).to.be.empty;\n    });",
            "file": "starWarsValidation-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "Allows object fields in inline fragments",
            "suites": [
                "Star Wars Validation Tests",
                "Basic Queries"
            ],
            "updatePoint": {
                "line": 105,
                "column": 48
            },
            "line": 105,
            "code": "    it('Allows object fields in inline fragments', () => {\n      const query = `\n        query DroidFieldInFragment {\n          hero {\n            name\n            ... on Droid {\n              primaryFunction\n            }\n          }\n        }\n      `;\n      return expect(validationErrors(query)).to.be.empty;\n    });",
            "file": "starWarsValidation-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "versionInfo",
            "suites": [
                "Version"
            ],
            "updatePoint": {
                "line": 7,
                "column": 17
            },
            "line": 7,
            "code": "  it('versionInfo', () => {\n    expect(versionInfo).to.be.an('object');\n    expect(versionInfo).to.have.all.keys(\n      'major',\n      'minor',\n      'patch',\n      'preReleaseTag',\n    );\n\n    const { major, minor, patch, preReleaseTag } = versionInfo;\n    expect(major).to.be.a('number').at.least(0);\n    expect(minor).to.be.a('number').at.least(0);\n    expect(patch).to.be.a('number').at.least(0);\n\n    // Can't be verified on all versions\n    /* c8 ignore start */\n    switch (preReleaseTag?.split('.').length) {\n      case undefined:\n        break;\n      case 2:\n        expect(preReleaseTag).to.match(\n          /^(alpha|beta|rc|experimental-[\\w-]+)\\.\\d+/,\n        );\n        break;\n      case 4:\n        expect(preReleaseTag).to.match(\n          /^(alpha|beta|rc)\\.\\d+.experimental-[\\w-]+\\.\\d+/,\n        );\n        break;\n      default:\n        expect.fail('Invalid pre-release tag: ' + preReleaseTag);\n    }\n    /* c8 ignore stop */\n  });",
            "file": "version-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        },
        {
            "name": "version",
            "suites": [
                "Version"
            ],
            "updatePoint": {
                "line": 42,
                "column": 13
            },
            "line": 42,
            "code": "  it('version', () => {\n    expect(version).to.be.a('string');\n\n    const { major, minor, patch, preReleaseTag } = versionInfo;\n    expect(version).to.equal(\n      // Can't be verified on all versions\n      /* c8 ignore next 3 */\n      preReleaseTag === null\n        ? `${major}.${minor}.${patch}`\n        : `${major}.${minor}.${patch}-${preReleaseTag}`,\n    );\n  });",
            "file": "version-test.ts",
            "skipped": false,
            "dir": "src/__tests__"
        }
    ],
    "badge": "graphql__graphql-js.svg"
}