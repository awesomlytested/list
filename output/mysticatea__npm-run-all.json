{"repo":"mysticatea/npm-run-all","url":"https://github.com/mysticatea/npm-run-all","branch":"master","configs":[{"package":"npm-run-all","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Node API with parallel","suites":["[aggregated-output] npm-run-all","should not intermingle output of various commands"],"updatePoint":{"line":41,"column":30,"index":1461},"line":41,"code":"    it(\"Node API with parallel\", async () => {\n      await nodeApi([\"test-task:delayed first 5000\", \"test-task:delayed second 1000\", \"test-task:delayed third 3000\"], {\n        stdout,\n        parallel: true,\n        silent: true,\n        aggregateOutput: true\n      });\n      assert.equal(stdout.value, EXPECTED_PARALLELIZED_TEXT);\n    });","file":"aggregate-output.js","skipped":false,"dir":"test"},{"name":"Node API without parallel should fail","suites":["[aggregated-output] npm-run-all","should not intermingle output of various commands"],"updatePoint":{"line":50,"column":45,"index":1816},"line":50,"code":"    it(\"Node API without parallel should fail\", async () => {\n      try {\n        await nodeApi([\"test-task:delayed first 5000\", \"test-task:delayed second 1000\", \"test-task:delayed third 3000\"], {\n          stdout,\n          silent: true,\n          aggregateOutput: true\n        });\n      } catch (_err) {\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"aggregate-output.js","skipped":false,"dir":"test"},{"name":"npm-run-all command with parallel","suites":["[aggregated-output] npm-run-all","should not intermingle output of various commands"],"updatePoint":{"line":62,"column":41,"index":2186},"line":62,"code":"    it(\"npm-run-all command with parallel\", async () => {\n      await runAll([\"--parallel\", \"test-task:delayed first 5000\", \"test-task:delayed second 1000\", \"test-task:delayed third 3000\", \"--silent\", \"--aggregate-output\"], stdout);\n      assert.equal(stdout.value, EXPECTED_PARALLELIZED_TEXT);\n    });","file":"aggregate-output.js","skipped":false,"dir":"test"},{"name":"npm-run-all command without parallel should fail","suites":["[aggregated-output] npm-run-all","should not intermingle output of various commands"],"updatePoint":{"line":66,"column":56,"index":2504},"line":66,"code":"    it(\"npm-run-all command without parallel should fail\", async () => {\n      try {\n        await runAll([\"test-task:delayed first 5000\", \"test-task:delayed second 1000\", \"test-task:delayed third 3000\", \"--silent\", \"--aggregate-output\"], stdout);\n      } catch (_err) {\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"aggregate-output.js","skipped":false,"dir":"test"},{"name":"run-s command should fail","suites":["[aggregated-output] npm-run-all","should not intermingle output of various commands"],"updatePoint":{"line":74,"column":33,"index":2820},"line":74,"code":"    it(\"run-s command should fail\", async () => {\n      try {\n        await runSeq([\"test-task:delayed first 5000\", \"test-task:delayed second 1000\", \"test-task:delayed third 3000\", \"--silent\", \"--aggregate-output\"], stdout);\n      } catch (_err) {\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"aggregate-output.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[aggregated-output] npm-run-all","should not intermingle output of various commands"],"updatePoint":{"line":82,"column":21,"index":3124},"line":82,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:delayed first 5000\", \"test-task:delayed second 1000\", \"test-task:delayed third 3000\", \"--silent\", \"--aggregate-output\"], stdout);\n      assert.equal(stdout.value, EXPECTED_PARALLELIZED_TEXT);\n    });","file":"aggregate-output.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","If arguments preceded by '--' are nothing, '{1}' should be empty:"],"updatePoint":{"line":29,"column":16,"index":1036},"line":29,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {1}\").then(() => assert(result() === \"[]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","If arguments preceded by '--' are nothing, '{1}' should be empty:"],"updatePoint":{"line":30,"column":27,"index":1142},"line":30,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {1}\"]).then(() => assert(result() === \"[]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (only '--' exists)","suites":["[argument-placeholders]","If arguments preceded by '--' are nothing, '{1}' should be empty:"],"updatePoint":{"line":31,"column":46,"index":1268},"line":31,"code":"    it(\"npm-run-all command (only '--' exists)\", () => runAll([\"test-task:dump {1}\", \"--\"]).then(() => assert(result() === \"[]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","If arguments preceded by '--' are nothing, '{1}' should be empty:"],"updatePoint":{"line":32,"column":21,"index":1375},"line":32,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {1}\"]).then(() => assert(result() === \"[]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command (only '--' exists)","suites":["[argument-placeholders]","If arguments preceded by '--' are nothing, '{1}' should be empty:"],"updatePoint":{"line":33,"column":40,"index":1495},"line":33,"code":"    it(\"run-s command (only '--' exists)\", () => runSeq([\"test-task:dump {1}\", \"--\"]).then(() => assert(result() === \"[]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","If arguments preceded by '--' are nothing, '{1}' should be empty:"],"updatePoint":{"line":34,"column":21,"index":1602},"line":34,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {1}\"]).then(() => assert(result() === \"[]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command (only '--' exists)","suites":["[argument-placeholders]","If arguments preceded by '--' are nothing, '{1}' should be empty:"],"updatePoint":{"line":35,"column":40,"index":1722},"line":35,"code":"    it(\"run-p command (only '--' exists)\", () => runPar([\"test-task:dump {1}\", \"--\"]).then(() => assert(result() === \"[]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","'{1}' should be replaced by the 1st argument preceded by '--':"],"updatePoint":{"line":38,"column":16,"index":1915},"line":38,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {1}\", {\n      arguments: [\"1st\", \"2nd\"]\n    }).then(() => assert(result() === \"[\\\"1st\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","'{1}' should be replaced by the 1st argument preceded by '--':"],"updatePoint":{"line":41,"column":27,"index":2069},"line":41,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {1}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","'{1}' should be replaced by the 1st argument preceded by '--':"],"updatePoint":{"line":42,"column":21,"index":2197},"line":42,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {1}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","'{1}' should be replaced by the 1st argument preceded by '--':"],"updatePoint":{"line":43,"column":21,"index":2325},"line":43,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {1}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","'{2}' should be replaced by the 2nd argument preceded by '--':"],"updatePoint":{"line":46,"column":16,"index":2539},"line":46,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {2}\", {\n      arguments: [\"1st\", \"2nd\"]\n    }).then(() => assert(result() === \"[\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","'{2}' should be replaced by the 2nd argument preceded by '--':"],"updatePoint":{"line":49,"column":27,"index":2693},"line":49,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {2}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","'{2}' should be replaced by the 2nd argument preceded by '--':"],"updatePoint":{"line":50,"column":21,"index":2821},"line":50,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {2}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","'{2}' should be replaced by the 2nd argument preceded by '--':"],"updatePoint":{"line":51,"column":21,"index":2949},"line":51,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {2}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","'{@}' should be replaced by the every argument preceded by '--':"],"updatePoint":{"line":54,"column":16,"index":3165},"line":54,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {@}\", {\n      arguments: [\"1st\", \"2nd\"]\n    }).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","'{@}' should be replaced by the every argument preceded by '--':"],"updatePoint":{"line":57,"column":27,"index":3327},"line":57,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {@}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","'{@}' should be replaced by the every argument preceded by '--':"],"updatePoint":{"line":58,"column":21,"index":3463},"line":58,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {@}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","'{@}' should be replaced by the every argument preceded by '--':"],"updatePoint":{"line":59,"column":21,"index":3599},"line":59,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {@}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","'{*}' should be replaced by the all arguments preceded by '--':"],"updatePoint":{"line":62,"column":16,"index":3822},"line":62,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {*}\", {\n      arguments: [\"1st\", \"2nd\"]\n    }).then(() => assert(result() === \"[\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","'{*}' should be replaced by the all arguments preceded by '--':"],"updatePoint":{"line":65,"column":27,"index":3980},"line":65,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {*}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","'{*}' should be replaced by the all arguments preceded by '--':"],"updatePoint":{"line":66,"column":21,"index":4112},"line":66,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {*}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","'{*}' should be replaced by the all arguments preceded by '--':"],"updatePoint":{"line":67,"column":21,"index":4244},"line":67,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {*}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","Every '{1}', '{2}', '{@}' and '{*}' should be replaced by the arguments preceded by '--':"],"updatePoint":{"line":70,"column":16,"index":4489},"line":70,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {1} {2} {3} {@} {*}\", {\n      arguments: [\"1st\", \"2nd\"]\n    }).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\",\\\"1st\\\",\\\"2nd\\\",\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","Every '{1}', '{2}', '{@}' and '{*}' should be replaced by the arguments preceded by '--':"],"updatePoint":{"line":73,"column":27,"index":4695},"line":73,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {1} {2} {3} {@} {*}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\",\\\"1st\\\",\\\"2nd\\\",\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","Every '{1}', '{2}', '{@}' and '{*}' should be replaced by the arguments preceded by '--':"],"updatePoint":{"line":74,"column":21,"index":4875},"line":74,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {1} {2} {3} {@} {*}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\",\\\"1st\\\",\\\"2nd\\\",\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","Every '{1}', '{2}', '{@}' and '{*}' should be replaced by the arguments preceded by '--':"],"updatePoint":{"line":75,"column":21,"index":5055},"line":75,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {1} {2} {3} {@} {*}\", \"--\", \"1st\", \"2nd\"]).then(() => assert(result() === \"[\\\"1st\\\",\\\"2nd\\\",\\\"1st\\\",\\\"2nd\\\",\\\"1st 2nd\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","'{1:-foo}' should be replaced by 'foo' if arguments are nothing:"],"updatePoint":{"line":78,"column":16,"index":5323},"line":78,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {1:-foo} {1}\").then(() => assert(result() === \"[\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","'{1:-foo}' should be replaced by 'foo' if arguments are nothing:"],"updatePoint":{"line":79,"column":27,"index":5445},"line":79,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {1:-foo} {1}\"]).then(() => assert(result() === \"[\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","'{1:-foo}' should be replaced by 'foo' if arguments are nothing:"],"updatePoint":{"line":80,"column":21,"index":5562},"line":80,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {1:-foo} {1}\"]).then(() => assert(result() === \"[\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","'{1:-foo}' should be replaced by 'foo' if arguments are nothing:"],"updatePoint":{"line":81,"column":21,"index":5679},"line":81,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {1:-foo} {1}\"]).then(() => assert(result() === \"[\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[argument-placeholders]","'{1:=foo}' should be replaced by 'foo' and should affect following '{1}' if arguments are nothing:"],"updatePoint":{"line":84,"column":16,"index":5918},"line":84,"code":"    it(\"Node API\", () => nodeApi(\"test-task:dump {1:=foo} {1}\").then(() => assert(result() === \"[\\\"foo\\\",\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[argument-placeholders]","'{1:=foo}' should be replaced by 'foo' and should affect following '{1}' if arguments are nothing:"],"updatePoint":{"line":85,"column":27,"index":6048},"line":85,"code":"    it(\"npm-run-all command\", () => runAll([\"test-task:dump {1:=foo} {1}\"]).then(() => assert(result() === \"[\\\"foo\\\",\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[argument-placeholders]","'{1:=foo}' should be replaced by 'foo' and should affect following '{1}' if arguments are nothing:"],"updatePoint":{"line":86,"column":21,"index":6173},"line":86,"code":"    it(\"run-s command\", () => runSeq([\"test-task:dump {1:=foo} {1}\"]).then(() => assert(result() === \"[\\\"foo\\\",\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[argument-placeholders]","'{1:=foo}' should be replaced by 'foo' and should affect following '{1}' if arguments are nothing:"],"updatePoint":{"line":87,"column":21,"index":6298},"line":87,"code":"    it(\"run-p command\", () => runPar([\"test-task:dump {1:=foo} {1}\"]).then(() => assert(result() === \"[\\\"foo\\\",\\\"foo\\\"]\")));","file":"argument-placeholders.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","should print a help text if arguments are nothing."],"updatePoint":{"line":30,"column":27,"index":1070},"line":30,"code":"    it(\"npm-run-all command\", async () => {\n      const buf = new BufferStream();\n      await runAll([], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","should print a help text if arguments are nothing."],"updatePoint":{"line":35,"column":21,"index":1223},"line":35,"code":"    it(\"run-s command\", async () => {\n      const buf = new BufferStream();\n      await runSeq([], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","should print a help text if arguments are nothing."],"updatePoint":{"line":40,"column":21,"index":1376},"line":40,"code":"    it(\"run-p command\", async () => {\n      const buf = new BufferStream();\n      await runPar([], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (-h)","suites":["[common]","should print a help text if the first argument is --help (-h)"],"updatePoint":{"line":47,"column":32,"index":1630},"line":47,"code":"    it(\"npm-run-all command (-h)\", async () => {\n      const buf = new BufferStream();\n      await runAll([\"-h\"], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command (-h)","suites":["[common]","should print a help text if the first argument is --help (-h)"],"updatePoint":{"line":52,"column":26,"index":1792},"line":52,"code":"    it(\"run-s command (-h)\", async () => {\n      const buf = new BufferStream();\n      await runSeq([\"-h\"], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command (-h)","suites":["[common]","should print a help text if the first argument is --help (-h)"],"updatePoint":{"line":57,"column":26,"index":1954},"line":57,"code":"    it(\"run-p command (-h)\", async () => {\n      const buf = new BufferStream();\n      await runPar([\"-h\"], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (--help)","suites":["[common]","should print a help text if the first argument is --help (-h)"],"updatePoint":{"line":62,"column":36,"index":2126},"line":62,"code":"    it(\"npm-run-all command (--help)\", async () => {\n      const buf = new BufferStream();\n      await runAll([\"--help\"], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command (--help)","suites":["[common]","should print a help text if the first argument is --help (-h)"],"updatePoint":{"line":67,"column":30,"index":2296},"line":67,"code":"    it(\"run-s command (--help)\", async () => {\n      const buf = new BufferStream();\n      await runSeq([\"--help\"], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command (--help)","suites":["[common]","should print a help text if the first argument is --help (-h)"],"updatePoint":{"line":72,"column":30,"index":2466},"line":72,"code":"    it(\"run-p command (--help)\", async () => {\n      const buf = new BufferStream();\n      await runPar([\"--help\"], buf);\n      assert(/Usage:/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (-v)","suites":["[common]","should print a version number if the first argument is --version (-v)"],"updatePoint":{"line":79,"column":32,"index":2736},"line":79,"code":"    it(\"npm-run-all command (-v)\", async () => {\n      const buf = new BufferStream();\n      await runAll([\"-v\"], buf);\n      assert(/v[0-9]+\\.[0-9]+\\.[0-9]+/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command (-v)","suites":["[common]","should print a version number if the first argument is --version (-v)"],"updatePoint":{"line":84,"column":26,"index":2915},"line":84,"code":"    it(\"run-s command (-v)\", async () => {\n      const buf = new BufferStream();\n      await runSeq([\"-v\"], buf);\n      assert(/v[0-9]+\\.[0-9]+\\.[0-9]+/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command (-v)","suites":["[common]","should print a version number if the first argument is --version (-v)"],"updatePoint":{"line":89,"column":26,"index":3094},"line":89,"code":"    it(\"run-p command (-v)\", async () => {\n      const buf = new BufferStream();\n      await runPar([\"-v\"], buf);\n      assert(/v[0-9]+\\.[0-9]+\\.[0-9]+/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (--version)","suites":["[common]","should print a version number if the first argument is --version (-v)"],"updatePoint":{"line":94,"column":39,"index":3286},"line":94,"code":"    it(\"npm-run-all command (--version)\", async () => {\n      const buf = new BufferStream();\n      await runAll([\"--version\"], buf);\n      assert(/v[0-9]+\\.[0-9]+\\.[0-9]+/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command (--version)","suites":["[common]","should print a version number if the first argument is --version (-v)"],"updatePoint":{"line":99,"column":33,"index":3479},"line":99,"code":"    it(\"run-s command (--version)\", async () => {\n      const buf = new BufferStream();\n      await runSeq([\"--version\"], buf);\n      assert(/v[0-9]+\\.[0-9]+\\.[0-9]+/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command (--version)","suites":["[common]","should print a version number if the first argument is --version (-v)"],"updatePoint":{"line":104,"column":33,"index":3672},"line":104,"code":"    it(\"run-p command (--version)\", async () => {\n      const buf = new BufferStream();\n      await runPar([\"--version\"], buf);\n      assert(/v[0-9]+\\.[0-9]+\\.[0-9]+/.test(buf.value));\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","should do nothing if a task list is empty."],"updatePoint":{"line":111,"column":16,"index":3919},"line":111,"code":"    it(\"Node API\", async () => {\n      await nodeApi(null);\n      assert(result() == null);\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","should run a task by npm (check an environment variable):"],"updatePoint":{"line":117,"column":16,"index":4105},"line":117,"code":"    it(\"Node API\", async () => {\n      await nodeApi(\"test-task:package-config\");\n      assert(result() === \"OK\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","should run a task by npm (check an environment variable):"],"updatePoint":{"line":121,"column":27,"index":4239},"line":121,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:package-config\"]);\n      assert(result() === \"OK\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","should run a task by npm (check an environment variable):"],"updatePoint":{"line":125,"column":21,"index":4368},"line":125,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:package-config\"]);\n      assert(result() === \"OK\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","should run a task by npm (check an environment variable):"],"updatePoint":{"line":129,"column":21,"index":4497},"line":129,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:package-config\"]);\n      assert(result() === \"OK\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","stdin can be used in tasks:"],"updatePoint":{"line":135,"column":16,"index":4677},"line":135,"code":"    it(\"Node API\", async () => {\n      await nodeApi(\"test-task:stdin\");\n      assert(result().trim() === \"STDIN\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","stdin can be used in tasks:"],"updatePoint":{"line":139,"column":27,"index":4812},"line":139,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:stdin\"]);\n      assert(result().trim() === \"STDIN\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","stdin can be used in tasks:"],"updatePoint":{"line":143,"column":21,"index":4942},"line":143,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:stdin\"]);\n      assert(result().trim() === \"STDIN\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","stdin can be used in tasks:"],"updatePoint":{"line":147,"column":21,"index":5072},"line":147,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:stdin\"]);\n      assert(result().trim() === \"STDIN\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","stdout can be used in tasks:"],"updatePoint":{"line":153,"column":16,"index":5254},"line":153,"code":"    it(\"Node API\", async () => {\n      await nodeApi(\"test-task:stdout\");\n      assert(result() === \"STDOUT\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","stdout can be used in tasks:"],"updatePoint":{"line":157,"column":27,"index":5384},"line":157,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:stdout\"]);\n      assert(result() === \"STDOUT\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","stdout can be used in tasks:"],"updatePoint":{"line":161,"column":21,"index":5509},"line":161,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:stdout\"]);\n      assert(result() === \"STDOUT\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","stdout can be used in tasks:"],"updatePoint":{"line":165,"column":21,"index":5634},"line":165,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:stdout\"]);\n      assert(result() === \"STDOUT\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","stderr can be used in tasks:"],"updatePoint":{"line":171,"column":16,"index":5811},"line":171,"code":"    it(\"Node API\", async () => {\n      await nodeApi(\"test-task:stderr\");\n      assert(result() === \"STDERR\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","stderr can be used in tasks:"],"updatePoint":{"line":175,"column":27,"index":5941},"line":175,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:stderr\"]);\n      assert(result() === \"STDERR\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","stderr can be used in tasks:"],"updatePoint":{"line":179,"column":21,"index":6066},"line":179,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:stderr\"]);\n      assert(result() === \"STDERR\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","stderr can be used in tasks:"],"updatePoint":{"line":183,"column":21,"index":6191},"line":183,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:stderr\"]);\n      assert(result() === \"STDERR\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","should be able to use `restart` built-in task:"],"updatePoint":{"line":189,"column":16,"index":6386},"line":189,"code":"    it(\"Node API\", () => nodeApi(\"restart\"));","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","should be able to use `restart` built-in task:"],"updatePoint":{"line":190,"column":27,"index":6443},"line":190,"code":"    it(\"npm-run-all command\", () => runAll([\"restart\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","should be able to use `restart` built-in task:"],"updatePoint":{"line":191,"column":21,"index":6495},"line":191,"code":"    it(\"run-s command\", () => runSeq([\"restart\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","should be able to use `restart` built-in task:"],"updatePoint":{"line":192,"column":21,"index":6547},"line":192,"code":"    it(\"run-p command\", () => runPar([\"restart\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","should be able to use `env` built-in task:"],"updatePoint":{"line":195,"column":16,"index":6665},"line":195,"code":"    it(\"Node API\", () => nodeApi(\"env\"));","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","should be able to use `env` built-in task:"],"updatePoint":{"line":196,"column":27,"index":6718},"line":196,"code":"    it(\"npm-run-all command\", () => runAll([\"env\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","should be able to use `env` built-in task:"],"updatePoint":{"line":197,"column":21,"index":6766},"line":197,"code":"    it(\"run-s command\", () => runSeq([\"env\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","should be able to use `env` built-in task:"],"updatePoint":{"line":198,"column":21,"index":6814},"line":198,"code":"    it(\"run-p command\", () => runPar([\"env\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","issue14"],"updatePoint":{"line":202,"column":18,"index":6935},"line":202,"code":"      it(\"Node API\", () => nodeApi(\"test-task:issue14:win32\"));","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","issue14"],"updatePoint":{"line":203,"column":29,"index":7010},"line":203,"code":"      it(\"npm-run-all command\", () => runAll([\"test-task:issue14:win32\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","issue14"],"updatePoint":{"line":204,"column":23,"index":7080},"line":204,"code":"      it(\"run-s command\", () => runSeq([\"test-task:issue14:win32\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","issue14"],"updatePoint":{"line":205,"column":23,"index":7150},"line":205,"code":"      it(\"run-p command\", () => runPar([\"test-task:issue14:win32\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","issue14"],"updatePoint":{"line":209,"column":18,"index":7266},"line":209,"code":"      it(\"Node API\", () => nodeApi(\"test-task:issue14:posix\"));","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","issue14"],"updatePoint":{"line":210,"column":29,"index":7341},"line":210,"code":"      it(\"npm-run-all command\", () => runAll([\"test-task:issue14:posix\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","issue14"],"updatePoint":{"line":211,"column":23,"index":7411},"line":211,"code":"      it(\"run-s command\", () => runSeq([\"test-task:issue14:posix\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","issue14"],"updatePoint":{"line":212,"column":23,"index":7481},"line":212,"code":"      it(\"run-p command\", () => runPar([\"test-task:issue14:posix\"]));","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[common]","should not print log if silent option was given:"],"updatePoint":{"line":216,"column":16,"index":7627},"line":216,"code":"    it(\"Node API\", async () => {\n      const stdout = new BufferStream();\n      const stderr = new BufferStream();\n      try {\n        await nodeApi(\"test-task:error\", {\n          silent: true,\n          stdout,\n          stderr\n        });\n      } catch (_err) {\n        assert(stdout.value === \"\" && stderr.value === \"\");\n        return;\n      }\n      assert(false, \"Should fail.\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","should not print log if silent option was given:"],"updatePoint":{"line":240,"column":27,"index":8323},"line":240,"code":"    it(\"npm-run-all command\", async () => {\n      const stdout = new BufferStream();\n      const stderr = new BufferStream();\n      try {\n        await runAll([\"--silent\", \"test-task:error\"], stdout, stderr);\n      } catch (_err) {\n        assert(stdout.value === \"\" && stripIstanbulWarnings(stderr.value) === \"\");\n        return;\n      }\n      assert(false, \"Should fail.\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","should not print log if silent option was given:"],"updatePoint":{"line":251,"column":21,"index":8701},"line":251,"code":"    it(\"run-s command\", async () => {\n      const stdout = new BufferStream();\n      const stderr = new BufferStream();\n      try {\n        await runSeq([\"--silent\", \"test-task:error\"], stdout, stderr);\n      } catch (_err) {\n        assert(stdout.value === \"\" && stripIstanbulWarnings(stderr.value) === \"\");\n        return;\n      }\n      assert(false, \"Should fail.\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","should not print log if silent option was given:"],"updatePoint":{"line":262,"column":21,"index":9079},"line":262,"code":"    it(\"run-p command\", async () => {\n      const stdout = new BufferStream();\n      const stderr = new BufferStream();\n      try {\n        await runPar([\"--silent\", \"test-task:error\"], stdout, stderr);\n      } catch (_err) {\n        assert(stdout.value === \"\" && stripIstanbulWarnings(stderr.value) === \"\");\n        return;\n      }\n      assert(false, \"Should fail.\");\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[common]","should not print MaxListenersExceededWarning when it runs 10 tasks:"],"updatePoint":{"line":280,"column":27,"index":9702},"line":280,"code":"    it(\"npm-run-all command\", async () => {\n      const buf = new BufferStream();\n      await runAll(tasks, null, buf);\n      assert(buf.value.indexOf(\"MaxListenersExceededWarning\") === -1);\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[common]","should not print MaxListenersExceededWarning when it runs 10 tasks:"],"updatePoint":{"line":285,"column":21,"index":9895},"line":285,"code":"    it(\"run-s command\", async () => {\n      const buf = new BufferStream();\n      await runSeq(tasks, null, buf);\n      assert(buf.value.indexOf(\"MaxListenersExceededWarning\") === -1);\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[common]","should not print MaxListenersExceededWarning when it runs 10 tasks:"],"updatePoint":{"line":290,"column":21,"index":10088},"line":290,"code":"    it(\"run-p command\", async () => {\n      const buf = new BufferStream();\n      await runPar(tasks, null, buf);\n      assert(buf.value.indexOf(\"MaxListenersExceededWarning\") === -1);\n    });","file":"common.js","skipped":false,"dir":"test"},{"name":"Node API should address \"config\" option","suites":["[config] it should have an ability to set config variables:"],"updatePoint":{"line":28,"column":47,"index":1015},"line":28,"code":"  it(\"Node API should address \\\"config\\\" option\", async () => {\n    await nodeApi(\"test-task:config\", {\n      config: {\n        test: \"this is a config\"\n      }\n    });\n    assert(result() === \"this is a config\");\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"Node API should address \"config\" option for multiple variables","suites":["[config] it should have an ability to set config variables:"],"updatePoint":{"line":36,"column":70,"index":1258},"line":36,"code":"  it(\"Node API should address \\\"config\\\" option for multiple variables\", async () => {\n    await nodeApi(\"test-task:config2\", {\n      config: {\n        test: \"1\",\n        test2: \"2\",\n        test3: \"3\"\n      }\n    });\n    assert(result() === \"1\\n2\\n3\");\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[config] it should have an ability to set config variables:","CLI commands should address \"--a=b\" style options"],"updatePoint":{"line":47,"column":27,"index":1549},"line":47,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:config\", \"--test=GO\"]);\n      assert(result() === \"GO\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[config] it should have an ability to set config variables:","CLI commands should address \"--a=b\" style options"],"updatePoint":{"line":51,"column":21,"index":1683},"line":51,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:config\", \"--test=GO\"]);\n      assert(result() === \"GO\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[config] it should have an ability to set config variables:","CLI commands should address \"--a=b\" style options"],"updatePoint":{"line":55,"column":21,"index":1817},"line":55,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:config\", \"--test=GO\"]);\n      assert(result() === \"GO\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[config] it should have an ability to set config variables:","CLI commands should address \"--b=c\" style options for multiple variables"],"updatePoint":{"line":61,"column":27,"index":2060},"line":61,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:config2\", \"--test=1\", \"--test2=2\", \"--test3=3\"]);\n      assert(result() === \"1\\n2\\n3\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[config] it should have an ability to set config variables:","CLI commands should address \"--b=c\" style options for multiple variables"],"updatePoint":{"line":65,"column":21,"index":2225},"line":65,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:config2\", \"--test=1\", \"--test2=2\", \"--test3=3\"]);\n      assert(result() === \"1\\n2\\n3\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[config] it should have an ability to set config variables:","CLI commands should address \"--b=c\" style options for multiple variables"],"updatePoint":{"line":69,"column":21,"index":2390},"line":69,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:config2\", \"--test=1\", \"--test2=2\", \"--test3=3\"]);\n      assert(result() === \"1\\n2\\n3\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[config] it should have an ability to set config variables:","CLI commands should transfar configs to nested commands."],"updatePoint":{"line":75,"column":27,"index":2646},"line":75,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:nested-config\", \"--test=GO DEEP\"]);\n      assert(result() === \"GO DEEP\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[config] it should have an ability to set config variables:","CLI commands should transfar configs to nested commands."],"updatePoint":{"line":79,"column":21,"index":2797},"line":79,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:nested-config\", \"--test=GO DEEP\"]);\n      assert(result() === \"GO DEEP\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[config] it should have an ability to set config variables:","CLI commands should transfar configs to nested commands."],"updatePoint":{"line":83,"column":21,"index":2948},"line":83,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:nested-config\", \"--test=GO DEEP\"]);\n      assert(result() === \"GO DEEP\");\n    });","file":"config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[fail] it should fail","if an invalid option exists."],"updatePoint":{"line":45,"column":27,"index":1491},"line":45,"code":"    it(\"npm-run-all command\", () => shouldFail(runAll([\"--invalid\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[fail] it should fail","if an invalid option exists."],"updatePoint":{"line":46,"column":21,"index":1557},"line":46,"code":"    it(\"run-s command\", () => shouldFail(runSeq([\"--parallel\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[fail] it should fail","if an invalid option exists."],"updatePoint":{"line":47,"column":21,"index":1624},"line":47,"code":"    it(\"run-p command\", () => shouldFail(runPar([\"--sequential\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command with --race without --parallel","suites":["[fail] it should fail","if an invalid option exists."],"updatePoint":{"line":48,"column":58,"index":1730},"line":48,"code":"    it(\"npm-run-all command with --race without --parallel\", () => shouldFail(runAll([\"--race\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command with --r without --parallel","suites":["[fail] it should fail","if an invalid option exists."],"updatePoint":{"line":49,"column":55,"index":1827},"line":49,"code":"    it(\"npm-run-all command with --r without --parallel\", () => shouldFail(runAll([\"--r\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command with --race","suites":["[fail] it should fail","if an invalid option exists."],"updatePoint":{"line":50,"column":33,"index":1899},"line":50,"code":"    it(\"run-s command with --race\", () => shouldFail(runSeq([\"--race\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command with --r","suites":["[fail] it should fail","if an invalid option exists."],"updatePoint":{"line":51,"column":30,"index":1971},"line":51,"code":"    it(\"run-s command with --r\", () => shouldFail(runSeq([\"--r\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[fail] it should fail","if invalid `options.taskList` is given."],"updatePoint":{"line":54,"column":16,"index":2094},"line":54,"code":"    it(\"Node API\", () => shouldFail(nodeApi(\"test-task:append a\", {\n      taskList: {\n        invalid: 0\n      }\n    })));","file":"fail.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[fail] it should fail","if unknown tasks are given:"],"updatePoint":{"line":61,"column":16,"index":2273},"line":61,"code":"    it(\"Node API\", () => shouldFail(nodeApi(\"unknown-task\")));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[fail] it should fail","if unknown tasks are given:"],"updatePoint":{"line":62,"column":27,"index":2347},"line":62,"code":"    it(\"npm-run-all command\", () => shouldFail(runAll([\"unknown-task\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[fail] it should fail","if unknown tasks are given:"],"updatePoint":{"line":63,"column":21,"index":2416},"line":63,"code":"    it(\"run-s command\", () => shouldFail(runSeq([\"unknown-task\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[fail] it should fail","if unknown tasks are given:"],"updatePoint":{"line":64,"column":21,"index":2485},"line":64,"code":"    it(\"run-p command\", () => shouldFail(runPar([\"unknown-task\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[fail] it should fail","if unknown tasks are given (2):"],"updatePoint":{"line":67,"column":16,"index":2609},"line":67,"code":"    it(\"Node API\", () => shouldFail(nodeApi([\"test-task:append:a\", \"unknown-task\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[fail] it should fail","if unknown tasks are given (2):"],"updatePoint":{"line":68,"column":27,"index":2707},"line":68,"code":"    it(\"npm-run-all command\", () => shouldFail(runAll([\"test-task:append:a\", \"unknown-task\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[fail] it should fail","if unknown tasks are given (2):"],"updatePoint":{"line":69,"column":21,"index":2798},"line":69,"code":"    it(\"run-s command\", () => shouldFail(runSeq([\"test-task:append:a\", \"unknown-task\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[fail] it should fail","if unknown tasks are given (2):"],"updatePoint":{"line":70,"column":21,"index":2889},"line":70,"code":"    it(\"run-p command\", () => shouldFail(runPar([\"test-task:append:a\", \"unknown-task\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[fail] it should fail","if package.json is not found:"],"updatePoint":{"line":75,"column":16,"index":3123},"line":75,"code":"    it(\"Node API\", () => shouldFail(nodeApi([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[fail] it should fail","if package.json is not found:"],"updatePoint":{"line":76,"column":27,"index":3205},"line":76,"code":"    it(\"npm-run-all command\", () => shouldFail(runAll([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[fail] it should fail","if package.json is not found:"],"updatePoint":{"line":77,"column":21,"index":3280},"line":77,"code":"    it(\"run-s command\", () => shouldFail(runSeq([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[fail] it should fail","if package.json is not found:"],"updatePoint":{"line":78,"column":21,"index":3355},"line":78,"code":"    it(\"run-p command\", () => shouldFail(runPar([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[fail] it should fail","if package.json does not have scripts field:"],"updatePoint":{"line":83,"column":16,"index":3583},"line":83,"code":"    it(\"Node API\", () => shouldFail(nodeApi([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[fail] it should fail","if package.json does not have scripts field:"],"updatePoint":{"line":84,"column":27,"index":3665},"line":84,"code":"    it(\"npm-run-all command\", () => shouldFail(runAll([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[fail] it should fail","if package.json does not have scripts field:"],"updatePoint":{"line":85,"column":21,"index":3740},"line":85,"code":"    it(\"run-s command\", () => shouldFail(runSeq([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[fail] it should fail","if package.json does not have scripts field:"],"updatePoint":{"line":86,"column":21,"index":3815},"line":86,"code":"    it(\"run-p command\", () => shouldFail(runPar([\"test-task:append:a\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[fail] it should fail","if tasks exited with non-zero code:"],"updatePoint":{"line":89,"column":16,"index":3949},"line":89,"code":"    it(\"Node API\", () => shouldFail(nodeApi(\"test-task:error\")));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[fail] it should fail","if tasks exited with non-zero code:"],"updatePoint":{"line":90,"column":27,"index":4026},"line":90,"code":"    it(\"npm-run-all command\", () => shouldFail(runAll([\"test-task:error\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[fail] it should fail","if tasks exited with non-zero code:"],"updatePoint":{"line":91,"column":21,"index":4098},"line":91,"code":"    it(\"run-s command\", () => shouldFail(runSeq([\"test-task:error\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[fail] it should fail","if tasks exited with non-zero code:"],"updatePoint":{"line":92,"column":21,"index":4170},"line":92,"code":"    it(\"run-p command\", () => shouldFail(runPar([\"test-task:error\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[fail] it should fail","if tasks exited via a signal:"],"updatePoint":{"line":95,"column":16,"index":4295},"line":95,"code":"    it(\"Node API\", () => shouldFail(nodeApi(\"test-task:abort\")));","file":"fail.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[fail] it should fail","if tasks exited via a signal:"],"updatePoint":{"line":96,"column":27,"index":4372},"line":96,"code":"    it(\"npm-run-all command\", () => shouldFail(runAll([\"test-task:abort\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[fail] it should fail","if tasks exited via a signal:"],"updatePoint":{"line":97,"column":21,"index":4444},"line":97,"code":"    it(\"run-s command\", () => shouldFail(runSeq([\"test-task:abort\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[fail] it should fail","if tasks exited via a signal:"],"updatePoint":{"line":98,"column":21,"index":4516},"line":98,"code":"    it(\"run-p command\", () => shouldFail(runPar([\"test-task:abort\"])));","file":"fail.js","skipped":false,"dir":"test"},{"name":"with correct exit code","suites":["[fail] it should fail","if tasks exited via a signal:"],"updatePoint":{"line":99,"column":30,"index":4597},"line":99,"code":"    it(\"with correct exit code\", () => nodeApi(\"test-task:abort\").then(() => assert(false, \"should fail\")).catch(err => {\n      // In NodeJS versions > 6, the child process correctly sends back\n      // the signal + code of null. In NodeJS versions <= 6, the child\n      // process does not set the signal, and sets the code to 1.\n      const code = Number(process.version.match(/^v(\\d+)/)[1]) > 6 ? 134 : 1;\n      assert(err.code === code, \"should have correct exit code\");\n    }));","file":"fail.js","skipped":false,"dir":"test"},{"name":"should run a mix of sequential and parallel tasks (has the default group):","suites":["[mixed] npm-run-all"],"updatePoint":{"line":25,"column":80,"index":917},"line":25,"code":"  it(\"should run a mix of sequential and parallel tasks (has the default group):\", async () => {\n    await runAll([\"test-task:append a\", \"-p\", \"test-task:append b\", \"test-task:append c\", \"-s\", \"test-task:append d\", \"test-task:append e\"]);\n    assert(result() === \"aabcbcddee\" || result() === \"aabccbddee\" || result() === \"aacbbcddee\" || result() === \"aacbcbddee\");\n  });","file":"mixed.js","skipped":false,"dir":"test"},{"name":"should run a mix of sequential and parallel tasks (doesn't have the default group):","suites":["[mixed] npm-run-all"],"updatePoint":{"line":29,"column":89,"index":1297},"line":29,"code":"  it(\"should run a mix of sequential and parallel tasks (doesn't have the default group):\", async () => {\n    await runAll([\"-p\", \"test-task:append b\", \"test-task:append c\", \"-s\", \"test-task:append d\", \"test-task:append e\"]);\n    assert(result() === \"bcbcddee\" || result() === \"bccbddee\" || result() === \"cbbcddee\" || result() === \"cbcbddee\");\n  });","file":"mixed.js","skipped":false,"dir":"test"},{"name":"should not throw errors for --race and --max-parallel options if --parallel exists:","suites":["[mixed] npm-run-all"],"updatePoint":{"line":33,"column":89,"index":1647},"line":33,"code":"  it(\"should not throw errors for --race and --max-parallel options if --parallel exists:\", () => runAll([\"test-task:append a\", \"-p\", \"test-task:append b\", \"test-task:append c\", \"-s\", \"test-task:append d\", \"test-task:append e\", \"-r\"]));","file":"mixed.js","skipped":false,"dir":"test"},{"name":"Node API should address \"packageConfig\" option","suites":["[package-config] it should have an ability to overwrite package's config:"],"updatePoint":{"line":28,"column":54,"index":1036},"line":28,"code":"  it(\"Node API should address \\\"packageConfig\\\" option\", async () => {\n    await nodeApi(\"test-task:package-config\", {\n      packageConfig: {\n        \"npm-run-all-test\": {\n          test: \"OVERWRITTEN\"\n        }\n      }\n    });\n    assert(result() === \"OVERWRITTEN\");\n  });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"Node API should address \"packageConfig\" option for multiple variables","suites":["[package-config] it should have an ability to overwrite package's config:"],"updatePoint":{"line":38,"column":77,"index":1333},"line":38,"code":"  it(\"Node API should address \\\"packageConfig\\\" option for multiple variables\", async () => {\n    await nodeApi(\"test-task:package-config2\", {\n      packageConfig: {\n        \"npm-run-all-test\": {\n          test: \"1\",\n          test2: \"2\",\n          test3: \"3\"\n        }\n      }\n    });\n    assert(result() === \"1\\n2\\n3\");\n  });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b=c\" style options"],"updatePoint":{"line":51,"column":27,"index":1687},"line":51,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:package-config\", \"--npm-run-all-test:test=OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b=c\" style options"],"updatePoint":{"line":55,"column":21,"index":1864},"line":55,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:package-config\", \"--npm-run-all-test:test=OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b=c\" style options"],"updatePoint":{"line":59,"column":21,"index":2041},"line":59,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:package-config\", \"--npm-run-all-test:test=OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b=c\" style options for multiple variables"],"updatePoint":{"line":65,"column":27,"index":2329},"line":65,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:package-config2\", \"--npm-run-all-test:test=1\", \"--npm-run-all-test:test2=2\", \"--npm-run-all-test:test3=3\"]);\n      assert(result() === \"1\\n2\\n3\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b=c\" style options for multiple variables"],"updatePoint":{"line":69,"column":21,"index":2553},"line":69,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:package-config2\", \"--npm-run-all-test:test=1\", \"--npm-run-all-test:test2=2\", \"--npm-run-all-test:test3=3\"]);\n      assert(result() === \"1\\n2\\n3\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b=c\" style options for multiple variables"],"updatePoint":{"line":73,"column":21,"index":2777},"line":73,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:package-config2\", \"--npm-run-all-test:test=1\", \"--npm-run-all-test:test2=2\", \"--npm-run-all-test:test3=3\"]);\n      assert(result() === \"1\\n2\\n3\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b c\" style options"],"updatePoint":{"line":79,"column":27,"index":3089},"line":79,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:package-config\", \"--npm-run-all-test:test\", \"OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b c\" style options"],"updatePoint":{"line":83,"column":21,"index":3269},"line":83,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:package-config\", \"--npm-run-all-test:test\", \"OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should address \"--a:b c\" style options"],"updatePoint":{"line":87,"column":21,"index":3449},"line":87,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:package-config\", \"--npm-run-all-test:test\", \"OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should transfar overriting nested commands."],"updatePoint":{"line":93,"column":27,"index":3720},"line":93,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:nested-package-config\", \"--npm-run-all-test:test\", \"OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should transfar overriting nested commands."],"updatePoint":{"line":97,"column":21,"index":3907},"line":97,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:nested-package-config\", \"--npm-run-all-test:test\", \"OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[package-config] it should have an ability to overwrite package's config:","CLI commands should transfar overriting nested commands."],"updatePoint":{"line":101,"column":21,"index":4094},"line":101,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:nested-package-config\", \"--npm-run-all-test:test\", \"OVERWRITTEN\"]);\n      assert(result() === \"OVERWRITTEN\");\n    });","file":"package-config.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[parallel]","should run tasks on parallel when was given --parallel option:"],"updatePoint":{"line":30,"column":16,"index":1098},"line":30,"code":"    it(\"Node API\", async () => {\n      const results = await nodeApi([\"test-task:append a\", \"test-task:append b\"], {\n        parallel: true\n      });\n      assert(results.length === 2);\n      assert(results[0].name === \"test-task:append a\");\n      assert(results[0].code === 0);\n      assert(results[1].name === \"test-task:append b\");\n      assert(results[1].code === 0);\n      assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[parallel]","should run tasks on parallel when was given --parallel option:"],"updatePoint":{"line":41,"column":27,"index":1593},"line":41,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"--parallel\", \"test-task:append a\", \"test-task:append b\"]);\n      assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[parallel]","should run tasks on parallel when was given --parallel option:"],"updatePoint":{"line":45,"column":21,"index":1823},"line":45,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:append a\", \"test-task:append b\"]);\n      assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[parallel]","should kill all tasks when was given --parallel option if a task exited with a non-zero code:"],"updatePoint":{"line":51,"column":16,"index":2156},"line":51,"code":"    it(\"Node API\", async () => {\n      try {\n        await nodeApi([\"test-task:append2 a\", \"test-task:error\"], {\n          parallel: true\n        });\n      } catch (err) {\n        assert(err.results.length === 2);\n        assert(err.results[0].name === \"test-task:append2 a\");\n        assert(err.results[0].code === undefined);\n        assert(err.results[1].name === \"test-task:error\");\n        assert(err.results[1].code === 1);\n        assert(result() == null || result() === \"a\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[parallel]","should kill all tasks when was given --parallel option if a task exited with a non-zero code:"],"updatePoint":{"line":67,"column":27,"index":2719},"line":67,"code":"    it(\"npm-run-all command\", async () => {\n      try {\n        await runAll([\"--parallel\", \"test-task:append2 a\", \"test-task:error\"]);\n      } catch (_err) {\n        assert(result() == null || result() === \"a\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[parallel]","should kill all tasks when was given --parallel option if a task exited with a non-zero code:"],"updatePoint":{"line":76,"column":21,"index":2994},"line":76,"code":"    it(\"run-p command\", async () => {\n      try {\n        await runPar([\"test-task:append2 a\", \"test-task:error\"]);\n      } catch (_err) {\n        assert(result() == null || result() === \"a\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[parallel]","should remove intersected tasks from two or more patterns:"],"updatePoint":{"line":87,"column":16,"index":3337},"line":87,"code":"    it(\"Node API\", async () => {\n      await nodeApi([\"test-task:*:a\", \"*:append:a\"], {\n        parallel: true\n      });\n      assert(result() === \"aa\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[parallel]","should remove intersected tasks from two or more patterns:"],"updatePoint":{"line":93,"column":27,"index":3510},"line":93,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"--parallel\", \"test-task:*:a\", \"*:append:a\"]);\n      assert(result() === \"aa\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[parallel]","should remove intersected tasks from two or more patterns:"],"updatePoint":{"line":97,"column":21,"index":3656},"line":97,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:*:a\", \"*:append:a\"]);\n      assert(result() === \"aa\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[parallel]","should not remove duplicate tasks from two or more the same pattern:"],"updatePoint":{"line":103,"column":16,"index":3880},"line":103,"code":"    it(\"Node API\", async () => {\n      await nodeApi([\"test-task:*:a\", \"test-task:*:a\"], {\n        parallel: true\n      });\n      assert(result() === \"aaaa\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[parallel]","should not remove duplicate tasks from two or more the same pattern:"],"updatePoint":{"line":109,"column":27,"index":4058},"line":109,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"--parallel\", \"test-task:*:a\", \"test-task:*:a\"]);\n      assert(result() === \"aaaa\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[parallel]","should not remove duplicate tasks from two or more the same pattern:"],"updatePoint":{"line":113,"column":21,"index":4209},"line":113,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:*:a\", \"test-task:*:a\"]);\n      assert(result() === \"aaaa\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[parallel]","should kill child processes when it's killed"],"updatePoint":{"line":119,"column":27,"index":4425},"line":119,"code":"    it(\"npm-run-all command\", async () => {\n      await spawnWithKill(\"node\", [\"../bin/npm-run-all/index.js\", \"--parallel\", \"test-task:append2 a\"]);\n      assert(result() == null || result() === \"a\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[parallel]","should kill child processes when it's killed"],"updatePoint":{"line":123,"column":21,"index":4628},"line":123,"code":"    it(\"run-p command\", async () => {\n      await spawnWithKill(\"node\", [\"../bin/run-p/index.js\", \"test-task:append2 a\"]);\n      assert(result() == null || result() === \"a\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[parallel]","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":129,"column":16,"index":4906},"line":129,"code":"    it(\"Node API\", async () => {\n      try {\n        await nodeApi([\"test-task:append a\", \"test-task:error\", \"test-task:append b\"], {\n          parallel: true,\n          continueOnError: true\n        });\n      } catch (_err) {\n        assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n        return;\n      }\n      assert(false, \"should fail.\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (--continue-on-error)","suites":["[parallel]","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":141,"column":49,"index":5341},"line":141,"code":"    it(\"npm-run-all command (--continue-on-error)\", async () => {\n      try {\n        await runAll([\"--continue-on-error\", \"--parallel\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n        return;\n      }\n      assert(false, \"should fail.\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (-c)","suites":["[parallel]","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":150,"column":32,"index":5724},"line":150,"code":"    it(\"npm-run-all command (-c)\", async () => {\n      try {\n        await runAll([\"-cp\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n        return;\n      }\n      assert(false, \"should fail.\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command (--continue-on-error)","suites":["[parallel]","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":159,"column":43,"index":6088},"line":159,"code":"    it(\"run-p command (--continue-on-error)\", async () => {\n      try {\n        await runPar([\"--continue-on-error\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n        return;\n      }\n      assert(false, \"should fail.\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command (-c)","suites":["[parallel]","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":168,"column":26,"index":6451},"line":168,"code":"    it(\"run-p command (-c)\", async () => {\n      try {\n        await runPar([\"-c\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"abab\" || result() === \"baba\" || result() === \"abba\" || result() === \"baab\");\n        return;\n      }\n      assert(false, \"should fail.\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[parallel]","should abort other tasks when a task finished, when --race option was specified:"],"updatePoint":{"line":179,"column":16,"index":6896},"line":179,"code":"    it(\"Node API\", async () => {\n      await nodeApi([\"test-task:append1 a\", \"test-task:append2 b\"], {\n        parallel: true,\n        race: true\n      });\n      await delay(5000);\n      assert(result() === \"a\" || result() === \"ab\" || result() === \"ba\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (--race)","suites":["[parallel]","should abort other tasks when a task finished, when --race option was specified:"],"updatePoint":{"line":187,"column":36,"index":7179},"line":187,"code":"    it(\"npm-run-all command (--race)\", async () => {\n      await runAll([\"--race\", \"--parallel\", \"test-task:append1 a\", \"test-task:append2 b\"]);\n      await delay(5000);\n      assert(result() === \"a\" || result() === \"ab\" || result() === \"ba\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (-r)","suites":["[parallel]","should abort other tasks when a task finished, when --race option was specified:"],"updatePoint":{"line":192,"column":32,"index":7427},"line":192,"code":"    it(\"npm-run-all command (-r)\", async () => {\n      await runAll([\"-rp\", \"test-task:append1 a\", \"test-task:append2 b\"]);\n      await delay(5000);\n      assert(result() === \"a\" || result() === \"ab\" || result() === \"ba\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command (--race)","suites":["[parallel]","should abort other tasks when a task finished, when --race option was specified:"],"updatePoint":{"line":197,"column":30,"index":7656},"line":197,"code":"    it(\"run-p command (--race)\", async () => {\n      await runPar([\"--race\", \"test-task:append1 a\", \"test-task:append2 b\"]);\n      await delay(5000);\n      assert(result() === \"a\" || result() === \"ab\" || result() === \"ba\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command (-r)","suites":["[parallel]","should abort other tasks when a task finished, when --race option was specified:"],"updatePoint":{"line":202,"column":26,"index":7884},"line":202,"code":"    it(\"run-p command (-r)\", async () => {\n      await runPar([\"-r\", \"test-task:append1 a\", \"test-task:append2 b\"]);\n      await delay(5000);\n      assert(result() === \"a\" || result() === \"ab\" || result() === \"ba\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command (no -r)","suites":["[parallel]","should abort other tasks when a task finished, when --race option was specified:"],"updatePoint":{"line":207,"column":29,"index":8111},"line":207,"code":"    it(\"run-p command (no -r)\", async () => {\n      await runPar([\"test-task:append1 a\", \"test-task:append2 b\"]);\n      await delay(5000);\n      assert(result() === \"abb\" || result() === \"bab\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[parallel]","should run tasks in parallel-2 when was given --max-parallel 2 option:"],"updatePoint":{"line":214,"column":16,"index":8400},"line":214,"code":"    it(\"Node API\", async () => {\n      const results = await nodeApi([\"test-task:append a\", \"test-task:append b\", \"test-task:append c\"], {\n        parallel: true,\n        maxParallel: 2\n      });\n      assert(results.length === 3);\n      assert(results[0].name === \"test-task:append a\");\n      assert(results[0].code === 0);\n      assert(results[1].name === \"test-task:append b\");\n      assert(results[1].code === 0);\n      assert(results[2].name === \"test-task:append c\");\n      assert(results[2].code === 0);\n      assert(result() === \"ababcc\" || result() === \"babacc\" || result() === \"abbacc\" || result() === \"baabcc\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[parallel]","should run tasks in parallel-2 when was given --max-parallel 2 option:"],"updatePoint":{"line":228,"column":27,"index":9042},"line":228,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"--parallel\", \"test-task:append a\", \"test-task:append b\", \"test-task:append c\", \"--max-parallel\", \"2\"]);\n      assert(result() === \"ababcc\" || result() === \"babacc\" || result() === \"abbacc\" || result() === \"baabcc\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[parallel]","should run tasks in parallel-2 when was given --max-parallel 2 option:"],"updatePoint":{"line":232,"column":21,"index":9325},"line":232,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:append a\", \"test-task:append b\", \"test-task:append c\", \"--max-parallel\", \"2\"]);\n      assert(result() === \"ababcc\" || result() === \"babacc\" || result() === \"abbacc\" || result() === \"baabcc\");\n    });","file":"parallel.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"test-task:append:*\" to \"test-task:append:a\" and \"test-task:append:b\""],"updatePoint":{"line":30,"column":16,"index":1146},"line":30,"code":"    it(\"Node API\", async () => {\n      await nodeApi(\"test-task:append:*\");\n      assert(result() === \"aabb\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"test-task:append:*\" to \"test-task:append:a\" and \"test-task:append:b\""],"updatePoint":{"line":34,"column":27,"index":1276},"line":34,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:append:*\"]);\n      assert(result() === \"aabb\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"test-task:append:*\" to \"test-task:append:a\" and \"test-task:append:b\""],"updatePoint":{"line":38,"column":21,"index":1401},"line":38,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:append:*\"]);\n      assert(result() === \"aabb\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"test-task:append:*\" to \"test-task:append:a\" and \"test-task:append:b\""],"updatePoint":{"line":42,"column":21,"index":1526},"line":42,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:append:*\"]);\n      assert(result() === \"abab\" || result() === \"abba\" || result() === \"baba\" || result() === \"baab\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"test-task:append:**:*\" to \"test-task:append:a\", \"test-task:append:a:c\", \"test-task:append:a:d\", and \"test-task:append:b\""],"updatePoint":{"line":48,"column":16,"index":1875},"line":48,"code":"    it(\"Node API\", async () => {\n      await nodeApi(\"test-task:append:**:*\");\n      assert(result() === \"aaacacadadbb\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"test-task:append:**:*\" to \"test-task:append:a\", \"test-task:append:a:c\", \"test-task:append:a:d\", and \"test-task:append:b\""],"updatePoint":{"line":52,"column":27,"index":2016},"line":52,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:append:**:*\"]);\n      assert(result() === \"aaacacadadbb\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"test-task:append:**:*\" to \"test-task:append:a\", \"test-task:append:a:c\", \"test-task:append:a:d\", and \"test-task:append:b\""],"updatePoint":{"line":56,"column":21,"index":2152},"line":56,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:append:**:*\"]);\n      assert(result() === \"aaacacadadbb\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[pattern] it should run matched tasks if glob like patterns are given.","(should ignore duplications) \"test-task:append:b\" \"test-task:append:*\" to \"test-task:append:b\", \"test-task:append:a\""],"updatePoint":{"line":62,"column":16,"index":2436},"line":62,"code":"    it(\"Node API\", async () => {\n      await nodeApi([\"test-task:append:b\", \"test-task:append:*\"]);\n      assert(result() === \"bbaa\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","(should ignore duplications) \"test-task:append:b\" \"test-task:append:*\" to \"test-task:append:b\", \"test-task:append:a\""],"updatePoint":{"line":66,"column":27,"index":2590},"line":66,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:append:b\", \"test-task:append:*\"]);\n      assert(result() === \"bbaa\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","(should ignore duplications) \"test-task:append:b\" \"test-task:append:*\" to \"test-task:append:b\", \"test-task:append:a\""],"updatePoint":{"line":70,"column":21,"index":2737},"line":70,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:append:b\", \"test-task:append:*\"]);\n      assert(result() === \"bbaa\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","(should ignore duplications) \"test-task:append:b\" \"test-task:append:*\" to \"test-task:append:b\", \"test-task:append:a\""],"updatePoint":{"line":74,"column":21,"index":2884},"line":74,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"test-task:append:b\", \"test-task:append:*\"]);\n      assert(result() === \"baba\" || result() === \"baab\" || result() === \"abab\" || result() === \"abba\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"a\" should not match to \"test-task:append:a\""],"updatePoint":{"line":80,"column":16,"index":3172},"line":80,"code":"    it(\"Node API\", async () => {\n      try {\n        await nodeApi(\"a\");\n        assert(false, \"should not match\");\n      } catch (err) {\n        assert(/not found/i.test(err.message));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"a\" should not match to \"test-task:append:a\""],"updatePoint":{"line":88,"column":27,"index":3385},"line":88,"code":"    it(\"npm-run-all command\", async () => {\n      const stderr = new BufferStream();\n      try {\n        await runAll([\"a\"], null, stderr);\n        assert(false, \"should not match\");\n      } catch (_err) {\n        assert(/not found/i.test(stderr.value));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"a\" should not match to \"test-task:append:a\""],"updatePoint":{"line":97,"column":21,"index":3650},"line":97,"code":"    it(\"run-s command\", async () => {\n      const stderr = new BufferStream();\n      try {\n        await runSeq([\"a\"], null, stderr);\n        assert(false, \"should not match\");\n      } catch (_err) {\n        assert(/not found/i.test(stderr.value));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"a\" should not match to \"test-task:append:a\""],"updatePoint":{"line":106,"column":21,"index":3915},"line":106,"code":"    it(\"run-p command\", async () => {\n      const stderr = new BufferStream();\n      try {\n        await runPar([\"a\"], null, stderr);\n        assert(false, \"should not match\");\n      } catch (_err) {\n        assert(/not found/i.test(stderr.value));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test-task:**\" should not match to anything"],"updatePoint":{"line":117,"column":16,"index":4250},"line":117,"code":"    it(\"Node API\", async () => {\n      try {\n        await nodeApi(\"!test-task:**\");\n        assert(false, \"should not match\");\n      } catch (err) {\n        assert(/not found/i.test(err.message));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test-task:**\" should not match to anything"],"updatePoint":{"line":125,"column":27,"index":4475},"line":125,"code":"    it(\"npm-run-all command\", async () => {\n      const stderr = new BufferStream();\n      try {\n        await runAll([\"!test-task:**\"], null, stderr);\n        assert(false, \"should not match\");\n      } catch (_err) {\n        assert(/not found/i.test(stderr.value));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test-task:**\" should not match to anything"],"updatePoint":{"line":134,"column":21,"index":4752},"line":134,"code":"    it(\"run-s command\", async () => {\n      const stderr = new BufferStream();\n      try {\n        await runSeq([\"!test-task:**\"], null, stderr);\n        assert(false, \"should not match\");\n      } catch (_err) {\n        assert(/not found/i.test(stderr.value));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test-task:**\" should not match to anything"],"updatePoint":{"line":143,"column":21,"index":5029},"line":143,"code":"    it(\"run-p command\", async () => {\n      const stderr = new BufferStream();\n      try {\n        await runPar([\"!test-task:**\"], null, stderr);\n        assert(false, \"should not match\");\n      } catch (_err) {\n        assert(/not found/i.test(stderr.value));\n      }\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test\" \"?test\" to \"!test\", \"?test\""],"updatePoint":{"line":154,"column":16,"index":5373},"line":154,"code":"    it(\"Node API\", async () => {\n      await nodeApi([\"!test\", \"?test\"]);\n      assert(result().trim() === \"XQ\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test\" \"?test\" to \"!test\", \"?test\""],"updatePoint":{"line":158,"column":27,"index":5506},"line":158,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"!test\", \"?test\"]);\n      assert(result().trim() === \"XQ\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test\" \"?test\" to \"!test\", \"?test\""],"updatePoint":{"line":162,"column":21,"index":5632},"line":162,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"!test\", \"?test\"]);\n      assert(result().trim() === \"XQ\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[pattern] it should run matched tasks if glob like patterns are given.","\"!test\" \"?test\" to \"!test\", \"?test\""],"updatePoint":{"line":166,"column":21,"index":5758},"line":166,"code":"    it(\"run-p command\", async () => {\n      await runPar([\"!test\", \"?test\"]);\n      assert(result().trim() === \"XQ\" || result().trim() === \"QX\");\n    });","file":"pattern.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[print-label] npm-run-all","should print labels at the head of every line:"],"updatePoint":{"line":28,"column":16,"index":1432},"line":28,"code":"    it(\"Node API\", async () => {\n      const stdout = new BufferStream();\n      await nodeApi(\"test-task:echo abc\", {\n        stdout,\n        silent: true,\n        printLabel: true\n      });\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (--print-label)","suites":["[print-label] npm-run-all","should print labels at the head of every line:"],"updatePoint":{"line":37,"column":43,"index":1707},"line":37,"code":"    it(\"npm-run-all command (--print-label)\", async () => {\n      const stdout = new BufferStream();\n      await runAll([\"test-task:echo abc\", \"--silent\", \"--print-label\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"run-s command (--print-label)","suites":["[print-label] npm-run-all","should print labels at the head of every line:"],"updatePoint":{"line":42,"column":37,"index":1940},"line":42,"code":"    it(\"run-s command (--print-label)\", async () => {\n      const stdout = new BufferStream();\n      await runSeq([\"test-task:echo abc\", \"--silent\", \"--print-label\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"run-p command (--print-label)","suites":["[print-label] npm-run-all","should print labels at the head of every line:"],"updatePoint":{"line":47,"column":37,"index":2173},"line":47,"code":"    it(\"run-p command (--print-label)\", async () => {\n      const stdout = new BufferStream();\n      await runPar([\"test-task:echo abc\", \"--silent\", \"--print-label\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (-l)","suites":["[print-label] npm-run-all","should print labels at the head of every line:"],"updatePoint":{"line":52,"column":32,"index":2401},"line":52,"code":"    it(\"npm-run-all command (-l)\", async () => {\n      const stdout = new BufferStream();\n      await runAll([\"test-task:echo abc\", \"--silent\", \"-l\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"run-s command (-l)","suites":["[print-label] npm-run-all","should print labels at the head of every line:"],"updatePoint":{"line":57,"column":26,"index":2612},"line":57,"code":"    it(\"run-s command (-l)\", async () => {\n      const stdout = new BufferStream();\n      await runSeq([\"test-task:echo abc\", \"--silent\", \"-l\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"run-p command (-l)","suites":["[print-label] npm-run-all","should print labels at the head of every line:"],"updatePoint":{"line":62,"column":26,"index":2823},"line":62,"code":"    it(\"run-p command (-l)\", async () => {\n      const stdout = new BufferStream();\n      await runPar([\"test-task:echo abc\", \"--silent\", \"-l\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[print-label] npm-run-all","should print all labels with the same width:"],"updatePoint":{"line":70,"column":16,"index":4404},"line":70,"code":"    it(\"Node API\", async () => {\n      const stdout = new BufferStream();\n      await nodeApi([\"test-task:echo a\", \"test-task:echo abcd\", \"test-task:echo ab\"], {\n        stdout,\n        silent: true,\n        printLabel: true\n      });\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[print-label] npm-run-all","should print all labels with the same width:"],"updatePoint":{"line":79,"column":27,"index":4707},"line":79,"code":"    it(\"npm-run-all command\", async () => {\n      const stdout = new BufferStream();\n      await runAll([\"test-task:echo a\", \"test-task:echo abcd\", \"test-task:echo ab\", \"--silent\", \"--print-label\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[print-label] npm-run-all","should print all labels with the same width:"],"updatePoint":{"line":84,"column":21,"index":4966},"line":84,"code":"    it(\"run-s command\", async () => {\n      const stdout = new BufferStream();\n      await runSeq([\"test-task:echo a\", \"test-task:echo abcd\", \"test-task:echo ab\", \"--silent\", \"--print-label\"], stdout);\n      assert.equal(stdout.value, EXPECTED_TEXT);\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[print-label] npm-run-all","should work printing labels in parallel:"],"updatePoint":{"line":93,"column":16,"index":5561},"line":93,"code":"    it(\"Node API\", async () => {\n      const stdout = new BufferStream();\n      await nodeApi([\"test-task:echo a\", \"test-task:echo abcd\", \"test-task:echo ab\"], {\n        stdout,\n        parallel: true,\n        printLabel: true\n      });\n      for (const line of EXPECTED_LINES) {\n        assert(stdout.value.indexOf(line) !== -1);\n      }\n      for (const pattern of UNEXPECTED_PATTERNS) {\n        assert(!pattern.test(stdout.value));\n      }\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[print-label] npm-run-all","should work printing labels in parallel:"],"updatePoint":{"line":107,"column":27,"index":6023},"line":107,"code":"    it(\"npm-run-all command\", async () => {\n      const stdout = new BufferStream();\n      await runAll([\"--parallel\", \"test-task:echo a\", \"test-task:echo abcd\", \"test-task:echo ab\", \"--print-label\"], stdout);\n      for (const line of EXPECTED_LINES) {\n        assert(stdout.value.indexOf(line) !== -1);\n      }\n      for (const pattern of UNEXPECTED_PATTERNS) {\n        assert(!pattern.test(stdout.value));\n      }\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"run-p command","suites":["[print-label] npm-run-all","should work printing labels in parallel:"],"updatePoint":{"line":117,"column":21,"index":6441},"line":117,"code":"    it(\"run-p command\", async () => {\n      const stdout = new BufferStream();\n      await runPar([\"test-task:echo a\", \"test-task:echo abcd\", \"test-task:echo ab\", \"--print-label\"], stdout);\n      for (const line of EXPECTED_LINES) {\n        assert(stdout.value.indexOf(line) !== -1);\n      }\n      for (const pattern of UNEXPECTED_PATTERNS) {\n        assert(!pattern.test(stdout.value));\n      }\n    });","file":"print-label.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[print-name] npm-run-all","should print names before running tasks:"],"updatePoint":{"line":35,"column":16,"index":1211},"line":35,"code":"    it(\"Node API\", async () => {\n      const stdout = new BufferStream();\n      await nodeApi(\"test-task:echo abc\", {\n        stdout,\n        silent: true,\n        printName: true\n      });\n      const header = createHeader(\"test-task:echo abc\", packageInfo, false);\n      assert.equal(stdout.value.slice(0, header.length), header);\n    });","file":"print-name.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (--print-name)","suites":["[print-name] npm-run-all","should print names before running tasks:"],"updatePoint":{"line":45,"column":42,"index":1578},"line":45,"code":"    it(\"npm-run-all command (--print-name)\", async () => {\n      const stdout = new BufferStream();\n      await runAll([\"test-task:echo abc\", \"--silent\", \"--print-name\"], stdout);\n      const header = createHeader(\"test-task:echo abc\", packageInfo, false);\n      assert.equal(stdout.value.slice(0, header.length), header);\n    });","file":"print-name.js","skipped":false,"dir":"test"},{"name":"run-s command (--print-name)","suites":["[print-name] npm-run-all","should print names before running tasks:"],"updatePoint":{"line":51,"column":36,"index":1903},"line":51,"code":"    it(\"run-s command (--print-name)\", async () => {\n      const stdout = new BufferStream();\n      await runSeq([\"test-task:echo abc\", \"--silent\", \"--print-name\"], stdout);\n      const header = createHeader(\"test-task:echo abc\", packageInfo, false);\n      assert.equal(stdout.value.slice(0, header.length), header);\n    });","file":"print-name.js","skipped":false,"dir":"test"},{"name":"run-p command (--print-name)","suites":["[print-name] npm-run-all","should print names before running tasks:"],"updatePoint":{"line":57,"column":36,"index":2228},"line":57,"code":"    it(\"run-p command (--print-name)\", async () => {\n      const stdout = new BufferStream();\n      await runPar([\"test-task:echo abc\", \"--silent\", \"--print-name\"], stdout);\n      const header = createHeader(\"test-task:echo abc\", packageInfo, false);\n      assert.equal(stdout.value.slice(0, header.length), header);\n    });","file":"print-name.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (-n)","suites":["[print-name] npm-run-all","should print names before running tasks:"],"updatePoint":{"line":63,"column":32,"index":2549},"line":63,"code":"    it(\"npm-run-all command (-n)\", async () => {\n      const stdout = new BufferStream();\n      await runAll([\"test-task:echo abc\", \"--silent\", \"-n\"], stdout);\n      const header = createHeader(\"test-task:echo abc\", packageInfo, false);\n      assert.equal(stdout.value.slice(0, header.length), header);\n    });","file":"print-name.js","skipped":false,"dir":"test"},{"name":"run-s command (-n)","suites":["[print-name] npm-run-all","should print names before running tasks:"],"updatePoint":{"line":69,"column":26,"index":2854},"line":69,"code":"    it(\"run-s command (-n)\", async () => {\n      const stdout = new BufferStream();\n      await runSeq([\"test-task:echo abc\", \"--silent\", \"-n\"], stdout);\n      const header = createHeader(\"test-task:echo abc\", packageInfo, false);\n      assert.equal(stdout.value.slice(0, header.length), header);\n    });","file":"print-name.js","skipped":false,"dir":"test"},{"name":"run-p command (-n)","suites":["[print-name] npm-run-all","should print names before running tasks:"],"updatePoint":{"line":75,"column":26,"index":3159},"line":75,"code":"    it(\"run-p command (-n)\", async () => {\n      const stdout = new BufferStream();\n      await runPar([\"test-task:echo abc\", \"--silent\", \"-n\"], stdout);\n      const header = createHeader(\"test-task:echo abc\", packageInfo, false);\n      assert.equal(stdout.value.slice(0, header.length), header);\n    });","file":"print-name.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[sequencial] npm-run-all","should run tasks sequentially:"],"updatePoint":{"line":30,"column":16,"index":1080},"line":30,"code":"    it(\"Node API\", async () => {\n      const results = await nodeApi([\"test-task:append a\", \"test-task:append b\"], {\n        parallel: false\n      });\n      assert(results.length === 2);\n      assert(results[0].name === \"test-task:append a\");\n      assert(results[0].code === 0);\n      assert(results[1].name === \"test-task:append b\");\n      assert(results[1].code === 0);\n      assert(result() === \"aabb\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[sequencial] npm-run-all","should run tasks sequentially:"],"updatePoint":{"line":41,"column":27,"index":1507},"line":41,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:append a\", \"test-task:append b\"]);\n      assert(result() === \"aabb\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[sequencial] npm-run-all","should run tasks sequentially:"],"updatePoint":{"line":45,"column":21,"index":1654},"line":45,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:append a\", \"test-task:append b\"]);\n      assert(result() === \"aabb\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[sequencial] npm-run-all","should not run subsequent tasks if a task exited with a non-zero code:"],"updatePoint":{"line":51,"column":16,"index":1895},"line":51,"code":"    it(\"Node API\", async () => {\n      try {\n        await nodeApi([\"test-task:append2 a\", \"test-task:error\", \"test-task:append2 b\"]);\n      } catch (err) {\n        assert(err.results.length === 3);\n        assert(err.results[0].name === \"test-task:append2 a\");\n        assert(err.results[0].code === 0);\n        assert(err.results[1].name === \"test-task:error\");\n        assert(err.results[1].code === 1);\n        assert(err.results[2].name === \"test-task:append2 b\");\n        assert(err.results[2].code === undefined);\n        assert(result() === \"aa\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[sequencial] npm-run-all","should not run subsequent tasks if a task exited with a non-zero code:"],"updatePoint":{"line":67,"column":27,"index":2530},"line":67,"code":"    it(\"npm-run-all command\", async () => {\n      try {\n        await runAll([\"test-task:append2 a\", \"test-task:error\", \"test-task:append2 b\"]);\n      } catch (_err) {\n        assert(result() === \"aa\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[sequencial] npm-run-all","should not run subsequent tasks if a task exited with a non-zero code:"],"updatePoint":{"line":76,"column":21,"index":2795},"line":76,"code":"    it(\"run-s command\", async () => {\n      try {\n        await runSeq([\"test-task:append2 a\", \"test-task:error\", \"test-task:append2 b\"]);\n      } catch (_err) {\n        assert(result() === \"aa\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[sequencial] npm-run-all","should remove intersected tasks from two or more patterns:"],"updatePoint":{"line":87,"column":16,"index":3142},"line":87,"code":"    it(\"Node API\", async () => {\n      await nodeApi([\"test-task:*:a\", \"*:append:a\"], {\n        parallel: false\n      });\n      assert(result() === \"aa\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[sequencial] npm-run-all","should remove intersected tasks from two or more patterns:"],"updatePoint":{"line":93,"column":27,"index":3316},"line":93,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:*:a\", \"*:append:a\"]);\n      assert(result() === \"aa\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[sequencial] npm-run-all","should remove intersected tasks from two or more patterns:"],"updatePoint":{"line":97,"column":21,"index":3448},"line":97,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:*:a\", \"*:append:a\"]);\n      assert(result() === \"aa\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[sequencial] npm-run-all","should not remove duplicate tasks from two or more the same pattern:"],"updatePoint":{"line":103,"column":16,"index":3672},"line":103,"code":"    it(\"Node API\", async () => {\n      await nodeApi([\"test-task:*:a\", \"test-task:*:a\"], {\n        parallel: false\n      });\n      assert(result() === \"aaaa\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[sequencial] npm-run-all","should not remove duplicate tasks from two or more the same pattern:"],"updatePoint":{"line":109,"column":27,"index":3851},"line":109,"code":"    it(\"npm-run-all command\", async () => {\n      await runAll([\"test-task:*:a\", \"test-task:*:a\"]);\n      assert(result() === \"aaaa\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[sequencial] npm-run-all","should not remove duplicate tasks from two or more the same pattern:"],"updatePoint":{"line":113,"column":21,"index":3988},"line":113,"code":"    it(\"run-s command\", async () => {\n      await runSeq([\"test-task:*:a\", \"test-task:*:a\"]);\n      assert(result() === \"aaaa\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"npm-run-all command","suites":["[sequencial] npm-run-all","should kill child processes when it's killed"],"updatePoint":{"line":119,"column":27,"index":4204},"line":119,"code":"    it(\"npm-run-all command\", async () => {\n      await spawnWithKill(\"node\", [\"../bin/npm-run-all.js\", \"test-task:append2 a\"]);\n      assert(result() == null || result() === \"a\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"run-s command","suites":["[sequencial] npm-run-all","should kill child processes when it's killed"],"updatePoint":{"line":123,"column":21,"index":4387},"line":123,"code":"    it(\"run-s command\", async () => {\n      await spawnWithKill(\"node\", [\"../bin/run-s/index.js\", \"test-task:append2 a\"]);\n      assert(result() == null || result() === \"a\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"Node API","suites":["[sequencial] npm-run-all","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":129,"column":16,"index":4665},"line":129,"code":"    it(\"Node API\", async () => {\n      try {\n        await nodeApi([\"test-task:append a\", \"test-task:error\", \"test-task:append b\"], {\n          continueOnError: true\n        });\n      } catch (_err) {\n        assert(result() === \"aabb\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (--continue-on-error)","suites":["[sequencial] npm-run-all","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":140,"column":49,"index":5004},"line":140,"code":"    it(\"npm-run-all command (--continue-on-error)\", async () => {\n      try {\n        await runAll([\"--continue-on-error\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"aabb\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"run-s command (--continue-on-error)","suites":["[sequencial] npm-run-all","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":149,"column":43,"index":5314},"line":149,"code":"    it(\"run-s command (--continue-on-error)\", async () => {\n      try {\n        await runSeq([\"--continue-on-error\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"aabb\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"npm-run-all command (-c)","suites":["[sequencial] npm-run-all","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":158,"column":32,"index":5613},"line":158,"code":"    it(\"npm-run-all command (-c)\", async () => {\n      try {\n        await runAll([\"-c\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"aabb\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"run-s command (-c)","suites":["[sequencial] npm-run-all","should continue on error when --continue-on-error option was specified:"],"updatePoint":{"line":167,"column":26,"index":5889},"line":167,"code":"    it(\"run-s command (-c)\", async () => {\n      try {\n        await runSeq([\"-c\", \"test-task:append a\", \"test-task:error\", \"test-task:append b\"]);\n      } catch (_err) {\n        assert(result() === \"aabb\");\n        return;\n      }\n      assert(false, \"should fail\");\n    });","file":"sequential.js","skipped":false,"dir":"test"},{"name":"should run 'npm-run-all' in scripts with yarn.","suites":["'yarn run' command"],"updatePoint":{"line":57,"column":54,"index":1894},"line":57,"code":"    it(\"should run 'npm-run-all' in scripts with yarn.\", async () => {\n      await exec(\"yarn\", [\"run\", \"test-task:yarn\"]);\n      assert(result() === \"aabb\");\n    });","file":"yarn.js","skipped":false,"dir":"test"}]}