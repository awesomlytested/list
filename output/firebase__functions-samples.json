{"repo":"firebase/functions-samples","url":"https://github.com/firebase/functions-samples","branch":"main","configs":[{"package":"uppercase-quickstart-functions","lang":"js","dir":"quickstarts/uppercase/functions/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should upper case input and write it to /uppercase","suites":["Cloud Functions","makeUpperCase"],"updatePoint":{"line":55,"column":58},"line":55,"code":"    it('should upper case input and write it to /uppercase', () => {\n      // [START assertOffline]\n      const childParam = 'uppercase';\n      const setParam = 'INPUT'; // Stubs are objects that fake and/or record function calls.\n      // These are excellent for verifying that functions have been called and to validate the\n      // parameters passed to those functions.\n\n      const childStub = sinon.stub();\n      const setStub = sinon.stub(); // [START fakeSnap]\n      // The following lines creates a fake snapshot, 'snap', which returns 'input' when snap.val() is called,\n      // and returns true when snap.ref.parent.child('uppercase').set('INPUT') is called.\n\n      const snap = {\n        val: () => 'input',\n        ref: {\n          parent: {\n            child: childStub\n          }\n        }\n      };\n      childStub.withArgs(childParam).returns({\n        set: setStub\n      });\n      setStub.withArgs(setParam).returns(true); // [END fakeSnap]\n      // Wrap the makeUppercase function.\n\n      const wrapped = test.wrap(myFunctions.makeUppercase); // Since we've stubbed snap.ref.parent.child(childParam).set(setParam) to return true if it was\n      // called with the parameters we expect, we assert that it indeed returned true.\n\n      return assert.equal(wrapped(snap), true); // [END assertOffline]\n    });","file":"test.offline.js","skipped":false,"dir":"quickstarts/uppercase/functions/test"},{"name":"should return a 303 redirect","suites":["Cloud Functions","addMessage"],"updatePoint":{"line":97,"column":36},"line":97,"code":"    it('should return a 303 redirect', done => {\n      const refParam = '/messages';\n      const pushParam = {\n        original: 'input'\n      };\n      const databaseStub = sinon.stub();\n      const refStub = sinon.stub();\n      const pushStub = sinon.stub(); // The following lines override the behavior of admin.database().ref('/messages')\n      // .push({ original: 'input' }) to return a promise that resolves with { ref: 'new_ref' }.\n      // This mimics the behavior of a push to the database, which returns an object containing a\n      // ref property representing the URL of the newly pushed item.\n\n      Object.defineProperty(admin, 'database', {\n        get: () => databaseStub\n      });\n      databaseStub.returns({\n        ref: refStub\n      });\n      refStub.withArgs(refParam).returns({\n        push: pushStub\n      });\n      pushStub.withArgs(pushParam).returns(Promise.resolve({\n        ref: 'new_ref'\n      })); // [START assertHTTP]\n      // A fake request object, with req.query.text set to 'input'\n\n      const req = {\n        query: {\n          text: 'input'\n        }\n      }; // A fake response object, with a stubbed redirect function which asserts that it is called\n      // with parameters 303, 'new_ref'.\n\n      const res = {\n        redirect: (code, url) => {\n          assert.equal(code, 303);\n          assert.equal(url, 'new_ref');\n          done();\n        }\n      }; // Invoke addMessage with our fake request and response objects. This will cause the\n      // assertions in the response object to be evaluated.\n\n      myFunctions.addMessage(req, res); // [END assertHTTP]\n    });","file":"test.offline.js","skipped":false,"dir":"quickstarts/uppercase/functions/test"},{"name":"should upper case input and write it to /uppercase","suites":["Cloud Functions","makeUpperCase"],"updatePoint":{"line":54,"column":58},"line":54,"code":"    it('should upper case input and write it to /uppercase', () => {\n      // [START assertOnline]\n      // Create a DataSnapshot with the value 'input' and the reference path 'messages/11111/original'.\n      const snap = test.database.makeDataSnapshot('input', 'messages/11111/original'); // Wrap the makeUppercase function\n\n      const wrapped = test.wrap(myFunctions.makeUppercase); // Call the wrapped function with the snapshot you constructed.\n\n      return wrapped(snap).then(() => {\n        // Read the value of the data at messages/11111/uppercase. Because `admin.initializeApp()` is\n        // called in functions/index.js, there's already a Firebase app initialized. Otherwise, add\n        // `admin.initializeApp()` before this line.\n        return admin.database().ref('messages/11111/uppercase').once('value').then(createdSnap => {\n          // Assert that the value is the uppercased version of our input.\n          assert.equal(createdSnap.val(), 'INPUT');\n        });\n      }); // [END assertOnline]\n    });","file":"test.online.js","skipped":false,"dir":"quickstarts/uppercase/functions/test"},{"name":"should return a 303 redirect","suites":["Cloud Functions","addMessage"],"updatePoint":{"line":73,"column":36},"line":73,"code":"    it('should return a 303 redirect', done => {\n      // A fake request object, with req.query.text set to 'input'\n      const req = {\n        query: {\n          text: 'input'\n        }\n      }; // A fake response object, with a stubbed redirect function which does some assertions\n\n      const res = {\n        redirect: (code, url) => {\n          // Assert code is 303\n          assert.equal(code, 303); // If the database push is successful, then the URL sent back will have the following format:\n\n          const expectedRef = new RegExp(projectConfig.databaseURL + '/messages/');\n          assert.isTrue(expectedRef.test(url));\n          done();\n        }\n      }; // Invoke addMessage with our fake request and response objects. This will cause the\n      // assertions in the response object to be evaluated.\n\n      myFunctions.addMessage(req, res);\n    });","file":"test.online.js","skipped":false,"dir":"quickstarts/uppercase/functions/test"}]}