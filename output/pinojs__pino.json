{"repo":"pinojs/pino","url":"https://github.com/pinojs/pino","branch":"master","configs":[{"package":"pino","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"pino version is exposed on export","suites":[],"updatePoint":{"line":25,"column":39,"index":381},"line":25,"code":"test('pino version is exposed on export', async ({\n  equal\n}) => {\n  equal(pino.version, version);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"pino version is exposed on instance","suites":[],"updatePoint":{"line":30,"column":41,"index":486},"line":30,"code":"test('pino version is exposed on instance', async ({\n  equal\n}) => {\n  const instance = pino();\n  equal(instance.version, version);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child instance exposes pino version","suites":[],"updatePoint":{"line":36,"column":41,"index":622},"line":36,"code":"test('child instance exposes pino version', async ({\n  equal\n}) => {\n  const child = pino().child({\n    foo: 'bar'\n  });\n  equal(child.version, version);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"bindings are exposed on every instance","suites":[],"updatePoint":{"line":44,"column":44,"index":783},"line":44,"code":"test('bindings are exposed on every instance', async ({\n  same\n}) => {\n  const instance = pino();\n  same(instance.bindings(), {});\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"bindings contain the name and the child bindings","suites":[],"updatePoint":{"line":50,"column":54,"index":928},"line":50,"code":"test('bindings contain the name and the child bindings', async ({\n  same\n}) => {\n  const instance = pino({\n    name: 'basicTest',\n    level: 'info'\n  }).child({\n    foo: 'bar'\n  }).child({\n    a: 2\n  });\n  same(instance.bindings(), {\n    name: 'basicTest',\n    foo: 'bar',\n    a: 2\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set bindings on instance","suites":[],"updatePoint":{"line":67,"column":30,"index":1196},"line":67,"code":"test('set bindings on instance', async ({\n  same\n}) => {\n  const instance = pino({\n    name: 'basicTest',\n    level: 'info'\n  });\n  instance.setBindings({\n    foo: 'bar'\n  });\n  same(instance.bindings(), {\n    name: 'basicTest',\n    foo: 'bar'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"newly set bindings overwrite old bindings","suites":[],"updatePoint":{"line":82,"column":47,"index":1467},"line":82,"code":"test('newly set bindings overwrite old bindings', async ({\n  same\n}) => {\n  const instance = pino({\n    name: 'basicTest',\n    level: 'info',\n    base: {\n      foo: 'bar'\n    }\n  });\n  instance.setBindings({\n    foo: 'baz'\n  });\n  same(instance.bindings(), {\n    name: 'basicTest',\n    foo: 'baz'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set bindings on child instance","suites":[],"updatePoint":{"line":100,"column":36,"index":1763},"line":100,"code":"test('set bindings on child instance', async ({\n  same\n}) => {\n  const child = pino({\n    name: 'basicTest',\n    level: 'info'\n  }).child({});\n  child.setBindings({\n    foo: 'bar'\n  });\n  same(child.bindings(), {\n    name: 'basicTest',\n    foo: 'bar'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child should have bindings set by parent","suites":[],"updatePoint":{"line":115,"column":46,"index":2034},"line":115,"code":"test('child should have bindings set by parent', async ({\n  same\n}) => {\n  const instance = pino({\n    name: 'basicTest',\n    level: 'info'\n  });\n  instance.setBindings({\n    foo: 'bar'\n  });\n  const child = instance.child({});\n  same(child.bindings(), {\n    name: 'basicTest',\n    foo: 'bar'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child should not share bindings of parent set after child creation","suites":[],"updatePoint":{"line":131,"column":72,"index":2363},"line":131,"code":"test('child should not share bindings of parent set after child creation', async ({\n  same\n}) => {\n  const instance = pino({\n    name: 'basicTest',\n    level: 'info'\n  });\n  const child = instance.child({});\n  instance.setBindings({\n    foo: 'bar'\n  });\n  same(instance.bindings(), {\n    name: 'basicTest',\n    foo: 'bar'\n  });\n  same(child.bindings(), {\n    name: 'basicTest'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":" logs as ","suites":[],"updatePoint":{"line":151,"column":32,"index":2744},"line":151,"code":"  test(`${name} logs as ${level}`, async ({\n    equal\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    instance[name]('hello world');\n    check(equal, await once(stream, 'data'), level, 'hello world');\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"passing objects at level ","suites":[],"updatePoint":{"line":160,"column":40,"index":3014},"line":160,"code":"  test(`passing objects at level ${name}`, async ({\n    equal,\n    same\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    const obj = {\n      hello: 'world'\n    };\n    instance[name](obj);\n    const result = await once(stream, 'data');\n    equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n    equal(result.pid, pid);\n    equal(result.hostname, hostname);\n    equal(result.level, level);\n    equal(result.hello, 'world');\n    same(Object.keys(obj), ['hello']);\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"passing an object and a string at level ","suites":[],"updatePoint":{"line":179,"column":55,"index":3584},"line":179,"code":"  test(`passing an object and a string at level ${name}`, async ({\n    equal,\n    same\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    const obj = {\n      hello: 'world'\n    };\n    instance[name](obj, 'a string');\n    const result = await once(stream, 'data');\n    equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level,\n      msg: 'a string',\n      hello: 'world'\n    });\n    same(Object.keys(obj), ['hello']);\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"passing a undefined and a string at level ","suites":[],"updatePoint":{"line":202,"column":57,"index":4171},"line":202,"code":"  test(`passing a undefined and a string at level ${name}`, async ({\n    equal,\n    same\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    instance[name](undefined, 'a string');\n    const result = await once(stream, 'data');\n    equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level,\n      msg: 'a string'\n    });\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"overriding object key by string at level ","suites":[],"updatePoint":{"line":220,"column":56,"index":4656},"line":220,"code":"  test(`overriding object key by string at level ${name}`, async ({\n    equal,\n    same\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    instance[name]({\n      hello: 'world',\n      msg: 'object'\n    }, 'string');\n    const result = await once(stream, 'data');\n    equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level,\n      msg: 'string',\n      hello: 'world'\n    });\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"formatting logs as ","suites":[],"updatePoint":{"line":242,"column":34,"index":5177},"line":242,"code":"  test(`formatting logs as ${name}`, async ({\n    equal\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    instance[name]('hello %d', 42);\n    const result = await once(stream, 'data');\n    check(equal, result, level, 'hello 42');\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"formatting a symbol at level ","suites":[],"updatePoint":{"line":252,"column":44,"index":5476},"line":252,"code":"  test(`formatting a symbol at level ${name}`, async ({\n    equal\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    const sym = Symbol('foo');\n    instance[name]('hello %s', sym);\n    const result = await once(stream, 'data');\n    check(equal, result, level, 'hello Symbol(foo)');\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"passing error with a serializer at level ","suites":[],"updatePoint":{"line":263,"column":56,"index":5828},"line":263,"code":"  test(`passing error with a serializer at level ${name}`, async ({\n    equal,\n    same\n  }) => {\n    const stream = sink();\n    const err = new Error('myerror');\n    const instance = pino({\n      serializers: {\n        err: pino.stdSerializers.err\n      }\n    }, stream);\n    instance.level = name;\n    instance[name]({\n      err\n    });\n    const result = await once(stream, 'data');\n    equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level,\n      err: {\n        type: 'Error',\n        message: err.message,\n        stack: err.stack\n      },\n      msg: err.message\n    });\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child logger for level ","suites":[],"updatePoint":{"line":293,"column":38,"index":6505},"line":293,"code":"  test(`child logger for level ${name}`, async ({\n    equal,\n    same\n  }) => {\n    const stream = sink();\n    const instance = pino(stream);\n    instance.level = name;\n    const child = instance.child({\n      hello: 'world'\n    });\n    child[name]('hello world');\n    const result = await once(stream, 'data');\n    equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level,\n      msg: 'hello world',\n      hello: 'world'\n    });\n  });","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"serializers can return undefined to strip field","suites":[],"updatePoint":{"line":322,"column":53,"index":7209},"line":322,"code":"test('serializers can return undefined to strip field', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    serializers: {\n      test() {\n        return undefined;\n      }\n    }\n  }, stream);\n  instance.info({\n    test: 'sensitive info'\n  });\n  const result = await once(stream, 'data');\n  equal('test' in result, false);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"does not explode with a circular ref","suites":[],"updatePoint":{"line":339,"column":42,"index":7552},"line":339,"code":"test('does not explode with a circular ref', async ({\n  doesNotThrow\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  const b = {};\n  const a = {\n    hello: b\n  };\n  b.a = a; // circular ref\n  doesNotThrow(() => instance.info(a));\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set the name","suites":[],"updatePoint":{"line":351,"column":18,"index":7782},"line":351,"code":"test('set the name', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    name: 'hello'\n  }, stream);\n  instance.fatal('this is fatal');\n  const result = await once(stream, 'data');\n  equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    name: 'hello',\n    msg: 'this is fatal'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set the messageKey","suites":[],"updatePoint":{"line":371,"column":24,"index":8223},"line":371,"code":"test('set the messageKey', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const message = 'hello world';\n  const messageKey = 'fooMessage';\n  const instance = pino({\n    messageKey\n  }, stream);\n  instance.info(message);\n  const result = await once(stream, 'data');\n  equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    fooMessage: message\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set the nestedKey","suites":[],"updatePoint":{"line":392,"column":23,"index":8699},"line":392,"code":"test('set the nestedKey', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const object = {\n    hello: 'world'\n  };\n  const nestedKey = 'stuff';\n  const instance = pino({\n    nestedKey\n  }, stream);\n  instance.info(object);\n  const result = await once(stream, 'data');\n  equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    stuff: object\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set undefined properties","suites":[],"updatePoint":{"line":415,"column":30,"index":9178},"line":415,"code":"test('set undefined properties', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info({\n    hello: 'world',\n    property: undefined\n  });\n  const result = await once(stream, 'data');\n  equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    hello: 'world'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"prototype properties are not logged","suites":[],"updatePoint":{"line":435,"column":41,"index":9619},"line":435,"code":"test('prototype properties are not logged', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info(Object.create({\n    hello: 'world'\n  }));\n  const {\n    hello\n  } = await once(stream, 'data');\n  equal(hello, undefined);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set the base","suites":[],"updatePoint":{"line":448,"column":18,"index":9866},"line":448,"code":"test('set the base', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    base: {\n      a: 'b'\n    }\n  }, stream);\n  instance.fatal('this is fatal');\n  const result = await once(stream, 'data');\n  equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    a: 'b',\n    level: 60,\n    msg: 'this is fatal'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set the base to null","suites":[],"updatePoint":{"line":468,"column":26,"index":10292},"line":468,"code":"test('set the base to null', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    base: null\n  }, stream);\n  instance.fatal('this is fatal');\n  const result = await once(stream, 'data');\n  equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    level: 60,\n    msg: 'this is fatal'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"set the base to null and use a formatter","suites":[],"updatePoint":{"line":485,"column":46,"index":10710},"line":485,"code":"test('set the base to null and use a formatter', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    base: null,\n    formatters: {\n      log(input) {\n        return Object.assign({}, input, {\n          additionalMessage: 'using pino'\n        });\n      }\n    }\n  }, stream);\n  instance.fatal('this is fatal too');\n  const result = await once(stream, 'data');\n  equal(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    level: 60,\n    msg: 'this is fatal too',\n    additionalMessage: 'using pino'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"throw if creating child without bindings","suites":[],"updatePoint":{"line":510,"column":46,"index":11321},"line":510,"code":"test('throw if creating child without bindings', async ({\n  equal,\n  fail\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  try {\n    instance.child();\n    fail('it should throw');\n  } catch (err) {\n    equal(err.message, 'missing bindings for child Pino');\n  }\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly escapes msg strings with stray double quote at end","suites":[],"updatePoint":{"line":523,"column":66,"index":11625},"line":523,"code":"test('correctly escapes msg strings with stray double quote at end', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    name: 'hello'\n  }, stream);\n  instance.fatal('this contains \"');\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    name: 'hello',\n    msg: 'this contains \"'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly escape msg strings with unclosed double quote","suites":[],"updatePoint":{"line":541,"column":61,"index":12011},"line":541,"code":"test('correctly escape msg strings with unclosed double quote', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    name: 'hello'\n  }, stream);\n  instance.fatal('\" this contains');\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    name: 'hello',\n    msg: '\" this contains'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly escape quote in a key","suites":[],"updatePoint":{"line":559,"column":37,"index":12373},"line":559,"code":"test('correctly escape quote in a key', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  const obj = {\n    'some\"obj': 'world'\n  };\n  instance.info(obj, 'a string');\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    level: 30,\n    pid,\n    hostname,\n    msg: 'a string',\n    'some\"obj': 'world'\n  });\n  same(Object.keys(obj), ['some\"obj']);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"object and format string","suites":[],"updatePoint":{"line":581,"column":30,"index":12830},"line":581,"code":"test('object and format string', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info({}, 'foo %s', 'bar');\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'foo bar'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"object and format string property","suites":[],"updatePoint":{"line":596,"column":39,"index":13143},"line":596,"code":"test('object and format string property', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info({\n    answer: 42\n  }, 'foo %s', 'bar');\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'foo bar',\n    answer: 42\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly strip undefined when returned from toJSON","suites":[],"updatePoint":{"line":614,"column":57,"index":13508},"line":614,"code":"test('correctly strip undefined when returned from toJSON', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    test: 'this'\n  }, stream);\n  instance.fatal({\n    test: {\n      toJSON() {\n        return undefined;\n      }\n    }\n  });\n  const result = await once(stream, 'data');\n  equal('test' in result, false);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly supports stderr","suites":[],"updatePoint":{"line":631,"column":31,"index":13826},"line":631,"code":"test('correctly supports stderr', async ({\n  same\n}) => {\n  // stderr inherits from Stream, rather than Writable\n  const dest = {\n    writable: true,\n    write(result) {\n      result = JSON.parse(result);\n      delete result.time;\n      same(result, {\n        pid,\n        hostname,\n        level: 60,\n        msg: 'a message'\n      });\n    }\n  };\n  const instance = pino(dest);\n  instance.fatal('a message');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"normalize number to string","suites":[],"updatePoint":{"line":651,"column":32,"index":14241},"line":651,"code":"test('normalize number to string', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info(1);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: '1'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"normalize number to string with an object","suites":[],"updatePoint":{"line":666,"column":47,"index":14538},"line":666,"code":"test('normalize number to string with an object', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info({\n    answer: 42\n  }, 1);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: '1',\n    answer: 42\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"handles objects with null prototype","suites":[],"updatePoint":{"line":684,"column":41,"index":14867},"line":684,"code":"test('handles objects with null prototype', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = Object.create(null);\n  o.test = 'test';\n  instance.info(o);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    test: 'test'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"pino.destination","suites":[],"updatePoint":{"line":701,"column":22,"index":15195},"line":701,"code":"test('pino.destination', async ({\n  same\n}) => {\n  const tmp = file();\n  const instance = pino(pino.destination(tmp));\n  instance.info('hello');\n  await watchFileCreated(tmp);\n  const result = JSON.parse(readFileSync(tmp).toString());\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"auto pino.destination with a string","suites":[],"updatePoint":{"line":717,"column":41,"index":15553},"line":717,"code":"test('auto pino.destination with a string', async ({\n  same\n}) => {\n  const tmp = file();\n  const instance = pino(tmp);\n  instance.info('hello');\n  await watchFileCreated(tmp);\n  const result = JSON.parse(readFileSync(tmp).toString());\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"auto pino.destination with a string as second argument","suites":[],"updatePoint":{"line":733,"column":60,"index":15912},"line":733,"code":"test('auto pino.destination with a string as second argument', async ({\n  same\n}) => {\n  const tmp = file();\n  const instance = pino(null, tmp);\n  instance.info('hello');\n  await watchFileCreated(tmp);\n  const result = JSON.parse(readFileSync(tmp).toString());\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"does not override opts with a string as second argument","suites":[],"updatePoint":{"line":749,"column":61,"index":16278},"line":749,"code":"test('does not override opts with a string as second argument', async ({\n  same\n}) => {\n  const tmp = file();\n  const instance = pino({\n    timestamp: () => ',\"time\":\"none\"'\n  }, tmp);\n  instance.info('hello');\n  await watchFileCreated(tmp);\n  const result = JSON.parse(readFileSync(tmp).toString());\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    time: 'none',\n    msg: 'hello'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"children with same names render in correct order","suites":[],"updatePoint":{"line":769,"column":54,"index":16718},"line":769,"code":"test('children with same names render in correct order', async ({\n  equal\n}) => {\n  const stream = sink();\n  const root = pino(stream);\n  root.child({\n    a: 1\n  }).child({\n    a: 2\n  }).info({\n    a: 3\n  });\n  const {\n    a\n  } = await once(stream, 'data');\n  equal(a, 3, 'last logged object takes precedence');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"use `safe-stable-stringify` to avoid circular dependencies","suites":[],"updatePoint":{"line":786,"column":64,"index":17045},"line":786,"code":"test('use `safe-stable-stringify` to avoid circular dependencies', async ({\n  same\n}) => {\n  const stream = sink();\n  const root = pino(stream);\n  // circular depth\n  const obj = {};\n  obj.a = obj;\n  root.info(obj);\n  const {\n    a\n  } = await once(stream, 'data');\n  same(a, {\n    a: '[Circular]'\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly log non circular objects","suites":[],"updatePoint":{"line":802,"column":40,"index":17329},"line":802,"code":"test('correctly log non circular objects', async ({\n  same\n}) => {\n  const stream = sink();\n  const root = pino(stream);\n  const obj = {};\n  let parent = obj;\n  for (let i = 0; i < 10; i++) {\n    parent.node = {};\n    parent = parent.node;\n  }\n  root.info(obj);\n  const {\n    node\n  } = await once(stream, 'data');\n  same(node, {\n    node: {\n      node: {\n        node: {\n          node: {\n            node: {\n              node: {\n                node: {\n                  node: {\n                    node: {}\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"safe-stable-stringify must be used when interpolating","suites":[],"updatePoint":{"line":837,"column":59,"index":17973},"line":837,"code":"test('safe-stable-stringify must be used when interpolating', async t => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = {\n    a: {\n      b: {}\n    }\n  };\n  o.a.b.c = o.a.b;\n  instance.info('test %j', o);\n  const {\n    msg\n  } = await once(stream, 'data');\n  t.equal(msg, 'test {\"a\":{\"b\":{\"c\":\"[Circular]\"}}}');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"throws when setting useOnlyCustomLevels without customLevels","suites":[],"updatePoint":{"line":852,"column":66,"index":18320},"line":852,"code":"test('throws when setting useOnlyCustomLevels without customLevels', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      useOnlyCustomLevels: true\n    });\n  }, 'customLevels is required if useOnlyCustomLevels is set true');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly log Infinity","suites":[],"updatePoint":{"line":861,"column":28,"index":18518},"line":861,"code":"test('correctly log Infinity', async t => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = {\n    num: Infinity\n  };\n  instance.info(o);\n  const {\n    num\n  } = await once(stream, 'data');\n  t.equal(num, null);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly log -Infinity","suites":[],"updatePoint":{"line":873,"column":29,"index":18756},"line":873,"code":"test('correctly log -Infinity', async t => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = {\n    num: -Infinity\n  };\n  instance.info(o);\n  const {\n    num\n  } = await once(stream, 'data');\n  t.equal(num, null);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly log NaN","suites":[],"updatePoint":{"line":885,"column":23,"index":18989},"line":885,"code":"test('correctly log NaN', async t => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = {\n    num: NaN\n  };\n  instance.info(o);\n  const {\n    num\n  } = await once(stream, 'data');\n  t.equal(num, null);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"offers a .default() method to please typescript","suites":[],"updatePoint":{"line":897,"column":53,"index":19246},"line":897,"code":"test('offers a .default() method to please typescript', async ({\n  equal\n}) => {\n  equal(pino.default, pino);\n  const stream = sink();\n  const instance = pino.default(stream);\n  instance.info('hello world');\n  check(equal, await once(stream, 'data'), 30, 'hello world');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly skip function","suites":[],"updatePoint":{"line":906,"column":29,"index":19497},"line":906,"code":"test('correctly skip function', async t => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = {\n    num: NaN\n  };\n  instance.info(o, () => {});\n  const {\n    msg\n  } = await once(stream, 'data');\n  t.equal(msg, undefined);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly skip Infinity","suites":[],"updatePoint":{"line":918,"column":29,"index":19745},"line":918,"code":"test('correctly skip Infinity', async t => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = {\n    num: NaN\n  };\n  instance.info(o, Infinity);\n  const {\n    msg\n  } = await once(stream, 'data');\n  t.equal(msg, null);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"correctly log number","suites":[],"updatePoint":{"line":930,"column":26,"index":19985},"line":930,"code":"test('correctly log number', async t => {\n  const stream = sink();\n  const instance = pino(stream);\n  const o = {\n    num: NaN\n  };\n  instance.info(o, 42);\n  const {\n    msg\n  } = await once(stream, 'data');\n  t.equal(msg, 42);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"nestedKey should not be used for non-objects","suites":[],"updatePoint":{"line":942,"column":50,"index":20241},"line":942,"code":"test('nestedKey should not be used for non-objects', async ({\n  strictSame\n}) => {\n  const stream = sink();\n  const message = 'hello';\n  const nestedKey = 'stuff';\n  const instance = pino({\n    nestedKey\n  }, stream);\n  instance.info(message);\n  const result = await once(stream, 'data');\n  delete result.time;\n  strictSame(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: message\n  });\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"throws if prettyPrint is passed in as an option","suites":[],"updatePoint":{"line":961,"column":53,"index":20643},"line":961,"code":"test('throws if prettyPrint is passed in as an option', async t => {\n  t.throws(() => {\n    pino({\n      prettyPrint: true\n    });\n  }, new Error('prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)'));\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"Should invoke `onChild` with the newly created child","suites":[],"updatePoint":{"line":968,"column":58,"index":20914},"line":968,"code":"test('Should invoke `onChild` with the newly created child', async ({\n  equal\n}) => {\n  let innerChild;\n  const child = pino({\n    onChild: instance => {\n      innerChild = instance;\n    }\n  }).child({\n    foo: 'bar'\n  });\n  equal(child, innerChild);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"logger message should have the prefix message that defined in the logger creation","suites":[],"updatePoint":{"line":981,"column":87,"index":21198},"line":981,"code":"test('logger message should have the prefix message that defined in the logger creation', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    msgPrefix: 'My name is Bond '\n  }, stream);\n  logger.info('James Bond');\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(msg, 'My name is Bond James Bond');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child message should have the prefix message that defined in the child creation","suites":[],"updatePoint":{"line":994,"column":85,"index":21537},"line":994,"code":"test('child message should have the prefix message that defined in the child creation', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  const child = instance.child({}, {\n    msgPrefix: 'My name is Bond '\n  });\n  child.info('James Bond');\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(msg, 'My name is Bond James Bond');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child message should have the prefix message that defined in the child creation when logging with log meta","suites":[],"updatePoint":{"line":1008,"column":112,"index":21940},"line":1008,"code":"test('child message should have the prefix message that defined in the child creation when logging with log meta', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  const child = instance.child({}, {\n    msgPrefix: 'My name is Bond '\n  });\n  child.info({\n    hello: 'world'\n  }, 'James Bond');\n  const {\n    msg,\n    hello\n  } = await once(stream, 'data');\n  equal(hello, 'world');\n  equal(msg, 'My name is Bond James Bond');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"logged message should not have the prefix when not providing any message","suites":[],"updatePoint":{"line":1026,"column":78,"index":22371},"line":1026,"code":"test('logged message should not have the prefix when not providing any message', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  const child = instance.child({}, {\n    msgPrefix: 'This should not be shown '\n  });\n  child.info({\n    hello: 'world'\n  });\n  const {\n    msg,\n    hello\n  } = await once(stream, 'data');\n  equal(hello, 'world');\n  equal(msg, undefined);\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child message should append parent prefix to current prefix that defined in the child creation","suites":[],"updatePoint":{"line":1044,"column":100,"index":22800},"line":1044,"code":"test('child message should append parent prefix to current prefix that defined in the child creation', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    msgPrefix: 'My name is Bond '\n  }, stream);\n  const child = instance.child({}, {\n    msgPrefix: 'James '\n  });\n  child.info('Bond');\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(msg, 'My name is Bond James Bond');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"child message should inherent parent prefix","suites":[],"updatePoint":{"line":1060,"column":49,"index":23165},"line":1060,"code":"test('child message should inherent parent prefix', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    msgPrefix: 'My name is Bond '\n  }, stream);\n  const child = instance.child({});\n  child.info('James Bond');\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(msg, 'My name is Bond James Bond');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"grandchild message should inherent parent prefix","suites":[],"updatePoint":{"line":1074,"column":54,"index":23510},"line":1074,"code":"test('grandchild message should inherent parent prefix', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  const child = instance.child({}, {\n    msgPrefix: 'My name is Bond '\n  });\n  const grandchild = child.child({});\n  grandchild.info('James Bond');\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(msg, 'My name is Bond James Bond');\n});","file":"basic.test.js","skipped":false,"dir":"test"},{"name":"basic.js","suites":[],"updatePoint":{"line":36,"column":14,"index":692},"line":36,"code":"test('basic.js');","file":"broken-pipe.test.js","skipped":false,"dir":"test"},{"name":"destination.js","suites":[],"updatePoint":{"line":37,"column":20,"index":716},"line":37,"code":"test('destination.js');","file":"broken-pipe.test.js","skipped":false,"dir":"test"},{"name":"syncfalse.js","suites":[],"updatePoint":{"line":38,"column":18,"index":738},"line":38,"code":"test('syncfalse.js');","file":"broken-pipe.test.js","skipped":false,"dir":"test"},{"name":"child has parent level","suites":[],"updatePoint":{"line":5,"column":28,"index":110},"line":5,"code":"test('child has parent level', ({\n  end,\n  same,\n  is\n}) => {\n  const instance = pino({\n    level: 'error',\n    browser: {}\n  });\n  const child = instance.child({});\n  same(child.level, instance.level);\n  end();\n});","file":"browser-child.test.js","skipped":false,"dir":"test"},{"name":"changing child level does not affect parent","suites":[],"updatePoint":{"line":18,"column":49,"index":347},"line":18,"code":"test('changing child level does not affect parent', ({\n  end,\n  same,\n  is\n}) => {\n  const instance = pino({\n    level: 'error',\n    browser: {}\n  });\n  const child = instance.child({});\n  child.level = 'info';\n  same(instance.level, 'error');\n  end();\n});","file":"browser-child.test.js","skipped":false,"dir":"test"},{"name":"child should log, if its own level allows it","suites":[],"updatePoint":{"line":32,"column":50,"index":605},"line":32,"code":"test('child should log, if its own level allows it', ({\n  end,\n  same,\n  is\n}) => {\n  const expected = [{\n    level: 30,\n    msg: 'this is info'\n  }, {\n    level: 40,\n    msg: 'this is warn'\n  }, {\n    level: 50,\n    msg: 'this is an error'\n  }];\n  const instance = pino({\n    level: 'error',\n    browser: {\n      write(actual) {\n        checkLogObjects(is, same, actual, expected.shift());\n      }\n    }\n  });\n  const child = instance.child({});\n  child.level = 'info';\n  child.debug('this is debug');\n  child.info('this is info');\n  child.warn('this is warn');\n  child.error('this is an error');\n  same(expected.length, 0, 'not all messages were read');\n  end();\n});","file":"browser-child.test.js","skipped":false,"dir":"test"},{"name":"changing child log level should not affect parent log behavior","suites":[],"updatePoint":{"line":64,"column":68,"index":1292},"line":64,"code":"test('changing child log level should not affect parent log behavior', ({\n  end,\n  same,\n  is\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino({\n    level: 'error',\n    browser: {\n      write(actual) {\n        checkLogObjects(is, same, actual, expected.shift());\n      }\n    }\n  });\n  const child = instance.child({});\n  child.level = 'info';\n  instance.warn('this is warn');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  same(expected.length, 0, 'not all messages were read');\n  end();\n});","file":"browser-child.test.js","skipped":false,"dir":"test"},{"name":"set browser opts disabled to true","suites":[],"updatePoint":{"line":5,"column":39,"index":121},"line":5,"code":"test('set browser opts disabled to true', ({\n  end,\n  same\n}) => {\n  const instance = pino({\n    browser: {\n      disabled: true,\n      write(actual) {\n        checkLogObjects(same, actual, []);\n      }\n    }\n  });\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  end();\n});","file":"browser-disabled.test.js","skipped":false,"dir":"test"},{"name":"set browser opts disabled to false","suites":[],"updatePoint":{"line":22,"column":40,"index":455},"line":22,"code":"test('set browser opts disabled to false', ({\n  end,\n  same\n}) => {\n  const expected = [{\n    level: 30,\n    msg: 'hello world'\n  }, {\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino({\n    browser: {\n      disabled: false,\n      write(actual) {\n        checkLogObjects(same, actual, expected.shift());\n      }\n    }\n  });\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  end();\n});","file":"browser-disabled.test.js","skipped":false,"dir":"test"},{"name":"disabled is not set in browser opts","suites":[],"updatePoint":{"line":49,"column":41,"index":968},"line":49,"code":"test('disabled is not set in browser opts', ({\n  end,\n  same\n}) => {\n  const expected = [{\n    level: 30,\n    msg: 'hello world'\n  }, {\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino({\n    browser: {\n      write(actual) {\n        checkLogObjects(same, actual, expected.shift());\n      }\n    }\n  });\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  end();\n});","file":"browser-disabled.test.js","skipped":false,"dir":"test"},{"name":"set the level by string","suites":[],"updatePoint":{"line":5,"column":29,"index":111},"line":5,"code":"test('set the level by string', ({\n  end,\n  same,\n  is\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino({\n    browser: {\n      write(actual) {\n        checkLogObjects(is, same, actual, expected.shift());\n      }\n    }\n  });\n  instance.level = 'error';\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"set the level by string. init with silent","suites":[],"updatePoint":{"line":30,"column":47,"index":600},"line":30,"code":"test('set the level by string. init with silent', ({\n  end,\n  same,\n  is\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino({\n    level: 'silent',\n    browser: {\n      write(actual) {\n        checkLogObjects(is, same, actual, expected.shift());\n      }\n    }\n  });\n  instance.level = 'error';\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"set the level by string. init with silent and transmit","suites":[],"updatePoint":{"line":56,"column":60,"index":1123},"line":56,"code":"test('set the level by string. init with silent and transmit', ({\n  end,\n  same,\n  is\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino({\n    level: 'silent',\n    browser: {\n      write(actual) {\n        checkLogObjects(is, same, actual, expected.shift());\n      }\n    },\n    transmit: {\n      send() {}\n    }\n  });\n  instance.level = 'error';\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"set the level via constructor","suites":[],"updatePoint":{"line":85,"column":35,"index":1660},"line":85,"code":"test('set the level via constructor', ({\n  end,\n  same,\n  is\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino({\n    level: 'error',\n    browser: {\n      write(actual) {\n        checkLogObjects(is, same, actual, expected.shift());\n      }\n    }\n  });\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"set custom level and use it","suites":[],"updatePoint":{"line":110,"column":33,"index":2127},"line":110,"code":"test('set custom level and use it', ({\n  end,\n  same,\n  is\n}) => {\n  const expected = [{\n    level: 31,\n    msg: 'this is a custom level'\n  }];\n  const instance = pino({\n    customLevels: {\n      success: 31\n    },\n    browser: {\n      write(actual) {\n        checkLogObjects(is, same, actual, expected.shift());\n      }\n    }\n  });\n  instance.success('this is a custom level');\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"the wrong level throws","suites":[],"updatePoint":{"line":132,"column":28,"index":2514},"line":132,"code":"test('the wrong level throws', ({\n  end,\n  throws\n}) => {\n  const instance = pino();\n  throws(() => {\n    instance.level = 'kaboom';\n  });\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"the wrong level by number throws","suites":[],"updatePoint":{"line":142,"column":38,"index":2676},"line":142,"code":"test('the wrong level by number throws', ({\n  end,\n  throws\n}) => {\n  const instance = pino();\n  throws(() => {\n    instance.levelVal = 55;\n  });\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"exposes level string mappings","suites":[],"updatePoint":{"line":152,"column":35,"index":2832},"line":152,"code":"test('exposes level string mappings', ({\n  end,\n  is\n}) => {\n  is(pino.levels.values.error, 50);\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"exposes level number mappings","suites":[],"updatePoint":{"line":159,"column":35,"index":2942},"line":159,"code":"test('exposes level number mappings', ({\n  end,\n  is\n}) => {\n  is(pino.levels.labels[50], 'error');\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"returns level integer","suites":[],"updatePoint":{"line":166,"column":27,"index":3047},"line":166,"code":"test('returns level integer', ({\n  end,\n  is\n}) => {\n  const instance = pino({\n    level: 'error'\n  });\n  is(instance.levelVal, 50);\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"silent level via constructor","suites":[],"updatePoint":{"line":176,"column":34,"index":3200},"line":176,"code":"test('silent level via constructor', ({\n  end,\n  fail\n}) => {\n  const instance = pino({\n    level: 'silent',\n    browser: {\n      write() {\n        fail('no data should be logged');\n      }\n    }\n  });\n  Object.keys(pino.levels.values).forEach(level => {\n    instance[level]('hello world');\n  });\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"silent level by string","suites":[],"updatePoint":{"line":193,"column":28,"index":3504},"line":193,"code":"test('silent level by string', ({\n  end,\n  fail\n}) => {\n  const instance = pino({\n    browser: {\n      write() {\n        fail('no data should be logged');\n      }\n    }\n  });\n  instance.level = 'silent';\n  Object.keys(pino.levels.values).forEach(level => {\n    instance[level]('hello world');\n  });\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"exposed levels","suites":[],"updatePoint":{"line":210,"column":20,"index":3808},"line":210,"code":"test('exposed levels', ({\n  end,\n  same\n}) => {\n  same(Object.keys(pino.levels.values), ['fatal', 'error', 'warn', 'info', 'debug', 'trace']);\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"exposed labels","suites":[],"updatePoint":{"line":217,"column":20,"index":3964},"line":217,"code":"test('exposed labels', ({\n  end,\n  same\n}) => {\n  same(Object.keys(pino.levels.labels), ['10', '20', '30', '40', '50', '60']);\n  end();\n});","file":"browser-levels.test.js","skipped":false,"dir":"test"},{"name":"serializers override values","suites":[],"updatePoint":{"line":14,"column":33,"index":362},"line":14,"code":"test('serializers override values', ({\n  end,\n  is\n}) => {\n  const parent = pino({\n    serializers: parentSerializers,\n    browser: {\n      serialize: true,\n      write(o) {\n        is(o.test, 'parent');\n        end();\n      }\n    }\n  });\n  parent.fatal({\n    test: 'test'\n  });\n});","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"without the serialize option, serializers do not override values","suites":[],"updatePoint":{"line":32,"column":70,"index":682},"line":32,"code":"test('without the serialize option, serializers do not override values', ({\n  end,\n  is\n}) => {\n  const parent = pino({\n    serializers: parentSerializers,\n    browser: {\n      write(o) {\n        is(o.test, 'test');\n        end();\n      }\n    }\n  });\n  parent.fatal({\n    test: 'test'\n  });\n});","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"if serialize option is true, standard error serializer is auto enabled","suites":[],"updatePoint":{"line":50,"column":78,"index":1020},"line":50,"code":"  test('if serialize option is true, standard error serializer is auto enabled', ({\n    end,\n    same\n  }) => {\n    const err = Error('test');\n    err.code = 'test';\n    err.type = 'Error'; // get that cov\n    const expect = pino.stdSerializers.err(err);\n    const consoleError = console.error;\n    console.error = function (err) {\n      same(err, expect);\n    };\n    const logger = fresh('../browser')({\n      browser: {\n        serialize: true\n      }\n    });\n    console.error = consoleError;\n    logger.fatal(err);\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"if serialize option is array, standard error serializer is auto enabled","suites":[],"updatePoint":{"line":71,"column":79,"index":1557},"line":71,"code":"  test('if serialize option is array, standard error serializer is auto enabled', ({\n    end,\n    same\n  }) => {\n    const err = Error('test');\n    err.code = 'test';\n    const expect = pino.stdSerializers.err(err);\n    const consoleError = console.error;\n    console.error = function (err) {\n      same(err, expect);\n    };\n    const logger = fresh('../browser', require)({\n      browser: {\n        serialize: []\n      }\n    });\n    console.error = consoleError;\n    logger.fatal(err);\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"if serialize option is array containing !stdSerializers.err, standard error serializer is disabled","suites":[],"updatePoint":{"line":91,"column":106,"index":2088},"line":91,"code":"  test('if serialize option is array containing !stdSerializers.err, standard error serializer is disabled', ({\n    end,\n    is\n  }) => {\n    const err = Error('test');\n    err.code = 'test';\n    const expect = err;\n    const consoleError = console.error;\n    console.error = function (err) {\n      is(err, expect);\n    };\n    const logger = fresh('../browser', require)({\n      browser: {\n        serialize: ['!stdSerializers.err']\n      }\n    });\n    console.error = consoleError;\n    logger.fatal(err);\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"in browser, serializers apply to all objects","suites":[],"updatePoint":{"line":111,"column":52,"index":2557},"line":111,"code":"  test('in browser, serializers apply to all objects', ({\n    end,\n    is\n  }) => {\n    const consoleError = console.error;\n    console.error = function (test, test2, test3, test4, test5) {\n      is(test.key, 'serialized');\n      is(test2.key2, 'serialized2');\n      is(test5.key3, 'serialized3');\n    };\n    const logger = fresh('../browser', require)({\n      serializers: {\n        key: () => 'serialized',\n        key2: () => 'serialized2',\n        key3: () => 'serialized3'\n      },\n      browser: {\n        serialize: true\n      }\n    });\n    console.error = consoleError;\n    logger.fatal({\n      key: 'test'\n    }, {\n      key2: 'test'\n    }, 'str should skip', [{\n      foo: 'array should skip'\n    }], {\n      key3: 'test'\n    });\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"serialize can be an array of selected serializers","suites":[],"updatePoint":{"line":143,"column":57,"index":3319},"line":143,"code":"  test('serialize can be an array of selected serializers', ({\n    end,\n    is\n  }) => {\n    const consoleError = console.error;\n    console.error = function (test, test2, test3, test4, test5) {\n      is(test.key, 'test');\n      is(test2.key2, 'serialized2');\n      is(test5.key3, 'test');\n    };\n    const logger = fresh('../browser', require)({\n      serializers: {\n        key: () => 'serialized',\n        key2: () => 'serialized2',\n        key3: () => 'serialized3'\n      },\n      browser: {\n        serialize: ['key2']\n      }\n    });\n    console.error = consoleError;\n    logger.fatal({\n      key: 'test'\n    }, {\n      key2: 'test'\n    }, 'str should skip', [{\n      foo: 'array should skip'\n    }], {\n      key3: 'test'\n    });\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"serialize filter applies to child loggers","suites":[],"updatePoint":{"line":175,"column":49,"index":4064},"line":175,"code":"  test('serialize filter applies to child loggers', ({\n    end,\n    is\n  }) => {\n    const consoleError = console.error;\n    console.error = function (binding, test, test2, test3, test4, test5) {\n      is(test.key, 'test');\n      is(test2.key2, 'serialized2');\n      is(test5.key3, 'test');\n    };\n    const logger = fresh('../browser', require)({\n      browser: {\n        serialize: ['key2']\n      }\n    });\n    console.error = consoleError;\n    logger.child({\n      aBinding: 'test'\n    }, {\n      serializers: {\n        key: () => 'serialized',\n        key2: () => 'serialized2',\n        key3: () => 'serialized3'\n      }\n    }).fatal({\n      key: 'test'\n    }, {\n      key2: 'test'\n    }, 'str should skip', [{\n      foo: 'array should skip'\n    }], {\n      key3: 'test'\n    });\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"serialize filter applies to child loggers through bindings","suites":[],"updatePoint":{"line":210,"column":66,"index":4881},"line":210,"code":"  test('serialize filter applies to child loggers through bindings', ({\n    end,\n    is\n  }) => {\n    const consoleError = console.error;\n    console.error = function (binding, test, test2, test3, test4, test5) {\n      is(test.key, 'test');\n      is(test2.key2, 'serialized2');\n      is(test5.key3, 'test');\n    };\n    const logger = fresh('../browser', require)({\n      browser: {\n        serialize: ['key2']\n      }\n    });\n    console.error = consoleError;\n    logger.child({\n      aBinding: 'test',\n      serializers: {\n        key: () => 'serialized',\n        key2: () => 'serialized2',\n        key3: () => 'serialized3'\n      }\n    }).fatal({\n      key: 'test'\n    }, {\n      key2: 'test'\n    }, 'str should skip', [{\n      foo: 'array should skip'\n    }], {\n      key3: 'test'\n    });\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"parent serializers apply to child bindings","suites":[],"updatePoint":{"line":244,"column":50,"index":5674},"line":244,"code":"  test('parent serializers apply to child bindings', ({\n    end,\n    is\n  }) => {\n    const consoleError = console.error;\n    console.error = function (binding) {\n      is(binding.key, 'serialized');\n    };\n    const logger = fresh('../browser', require)({\n      serializers: {\n        key: () => 'serialized'\n      },\n      browser: {\n        serialize: true\n      }\n    });\n    console.error = consoleError;\n    logger.child({\n      key: 'test'\n    }).fatal({\n      test: 'test'\n    });\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"child serializers apply to child bindings","suites":[],"updatePoint":{"line":268,"column":49,"index":6179},"line":268,"code":"  test('child serializers apply to child bindings', ({\n    end,\n    is\n  }) => {\n    const consoleError = console.error;\n    console.error = function (binding) {\n      is(binding.key, 'serialized');\n    };\n    const logger = fresh('../browser', require)({\n      browser: {\n        serialize: true\n      }\n    });\n    console.error = consoleError;\n    logger.child({\n      key: 'test'\n    }, {\n      serializers: {\n        key: () => 'serialized'\n      }\n    }).fatal({\n      test: 'test'\n    });\n    end();\n  });","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"child does not overwrite parent serializers","suites":[],"updatePoint":{"line":294,"column":49,"index":6694},"line":294,"code":"test('child does not overwrite parent serializers', ({\n  end,\n  is\n}) => {\n  let c = 0;\n  const parent = pino({\n    serializers: parentSerializers,\n    browser: {\n      serialize: true,\n      write(o) {\n        c++;\n        if (c === 1) is(o.test, 'parent');\n        if (c === 2) {\n          is(o.test, 'child');\n          end();\n        }\n      }\n    }\n  });\n  const child = parent.child({}, {\n    serializers: childSerializers\n  });\n  parent.fatal({\n    test: 'test'\n  });\n  child.fatal({\n    test: 'test'\n  });\n});","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"children inherit parent serializers","suites":[],"updatePoint":{"line":323,"column":41,"index":7204},"line":323,"code":"test('children inherit parent serializers', ({\n  end,\n  is\n}) => {\n  const parent = pino({\n    serializers: parentSerializers,\n    browser: {\n      serialize: true,\n      write(o) {\n        is(o.test, 'parent');\n      }\n    }\n  });\n  const child = parent.child({\n    a: 'property'\n  });\n  child.fatal({\n    test: 'test'\n  });\n  end();\n});","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"children serializers get called","suites":[],"updatePoint":{"line":344,"column":37,"index":7539},"line":344,"code":"test('children serializers get called', ({\n  end,\n  is\n}) => {\n  const parent = pino({\n    test: 'this',\n    browser: {\n      serialize: true,\n      write(o) {\n        is(o.test, 'child');\n      }\n    }\n  });\n  const child = parent.child({\n    a: 'property'\n  }, {\n    serializers: childSerializers\n  });\n  child.fatal({\n    test: 'test'\n  });\n  end();\n});","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"children serializers get called when inherited from parent","suites":[],"updatePoint":{"line":367,"column":64,"index":7923},"line":367,"code":"test('children serializers get called when inherited from parent', ({\n  end,\n  is\n}) => {\n  const parent = pino({\n    test: 'this',\n    serializers: parentSerializers,\n    browser: {\n      serialize: true,\n      write: o => {\n        is(o.test, 'pass');\n      }\n    }\n  });\n  const child = parent.child({}, {\n    serializers: {\n      test: () => 'pass'\n    }\n  });\n  child.fatal({\n    test: 'fail'\n  });\n  end();\n});","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"non overridden serializers are available in the children","suites":[],"updatePoint":{"line":391,"column":62,"index":8338},"line":391,"code":"test('non overridden serializers are available in the children', ({\n  end,\n  is\n}) => {\n  const pSerializers = {\n    onlyParent: () => 'parent',\n    shared: () => 'parent'\n  };\n  const cSerializers = {\n    shared: () => 'child',\n    onlyChild: () => 'child'\n  };\n  let c = 0;\n  const parent = pino({\n    serializers: pSerializers,\n    browser: {\n      serialize: true,\n      write(o) {\n        c++;\n        if (c === 1) is(o.shared, 'child');\n        if (c === 2) is(o.onlyParent, 'parent');\n        if (c === 3) is(o.onlyChild, 'child');\n        if (c === 4) is(o.onlyChild, 'test');\n      }\n    }\n  });\n  const child = parent.child({}, {\n    serializers: cSerializers\n  });\n  child.fatal({\n    shared: 'test'\n  });\n  child.fatal({\n    onlyParent: 'test'\n  });\n  child.fatal({\n    onlyChild: 'test'\n  });\n  parent.fatal({\n    onlyChild: 'test'\n  });\n  end();\n});","file":"browser-serializers.test.js","skipped":false,"dir":"test"},{"name":"null timestamp","suites":[],"updatePoint":{"line":6,"column":20,"index":134},"line":6,"code":"test('null timestamp', ({\n  end,\n  is\n}) => {\n  const instance = pino({\n    timestamp: pino.stdTimeFunctions.nullTime,\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.time, undefined);\n      }\n    }\n  });\n  instance.info('hello world');\n  end();\n});","file":"browser-timestamp.test.js","skipped":false,"dir":"test"},{"name":"iso timestamp","suites":[],"updatePoint":{"line":22,"column":19,"index":413},"line":22,"code":"test('iso timestamp', ({\n  end,\n  is\n}) => {\n  const instance = pino({\n    timestamp: pino.stdTimeFunctions.isoTime,\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.time, '2020-09-06T13:56:43.614Z');\n      }\n    }\n  });\n  instance.info('hello world');\n  end();\n});","file":"browser-timestamp.test.js","skipped":false,"dir":"test"},{"name":"epoch timestamp","suites":[],"updatePoint":{"line":38,"column":21,"index":710},"line":38,"code":"test('epoch timestamp', ({\n  end,\n  is\n}) => {\n  const instance = pino({\n    timestamp: pino.stdTimeFunctions.epochTime,\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.time, 1599400603614);\n      }\n    }\n  });\n  instance.info('hello world');\n  end();\n});","file":"browser-timestamp.test.js","skipped":false,"dir":"test"},{"name":"unix timestamp","suites":[],"updatePoint":{"line":54,"column":20,"index":995},"line":54,"code":"test('unix timestamp', ({\n  end,\n  is\n}) => {\n  const instance = pino({\n    timestamp: pino.stdTimeFunctions.unixTime,\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.time, Math.round(1599400603614 / 1000.0));\n      }\n    }\n  });\n  instance.info('hello world');\n  end();\n});","file":"browser-timestamp.test.js","skipped":false,"dir":"test"},{"name":"epoch timestamp by default","suites":[],"updatePoint":{"line":70,"column":32,"index":1312},"line":70,"code":"test('epoch timestamp by default', ({\n  end,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.time, 1599400603614);\n      }\n    }\n  });\n  instance.info('hello world');\n  end();\n});","file":"browser-timestamp.test.js","skipped":false,"dir":"test"},{"name":"not print timestamp if the option is false","suites":[],"updatePoint":{"line":85,"column":48,"index":1577},"line":85,"code":"test('not print timestamp if the option is false', ({\n  end,\n  is\n}) => {\n  const instance = pino({\n    timestamp: false,\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.time, undefined);\n      }\n    }\n  });\n  instance.info('hello world');\n  end();\n});","file":"browser-timestamp.test.js","skipped":false,"dir":"test"},{"name":"throws if transmit object does not have send function","suites":[],"updatePoint":{"line":6,"column":59,"index":160},"line":6,"code":"test('throws if transmit object does not have send function', ({\n  end,\n  throws\n}) => {\n  throws(() => {\n    pino({\n      browser: {\n        transmit: {}\n      }\n    });\n  });\n  throws(() => {\n    pino({\n      browser: {\n        transmit: {\n          send: 'not a func'\n        }\n      }\n    });\n  });\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"calls send function after write","suites":[],"updatePoint":{"line":28,"column":37,"index":454},"line":28,"code":"test('calls send function after write', ({\n  end,\n  is\n}) => {\n  let c = 0;\n  const logger = pino({\n    browser: {\n      write: () => {\n        c++;\n      },\n      transmit: {\n        send() {\n          is(c, 1);\n        }\n      }\n    }\n  });\n  logger.fatal({\n    test: 'test'\n  });\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"passes send function the logged level","suites":[],"updatePoint":{"line":50,"column":43,"index":756},"line":50,"code":"test('passes send function the logged level', ({\n  end,\n  is\n}) => {\n  const logger = pino({\n    browser: {\n      write() {},\n      transmit: {\n        send(level) {\n          is(level, 'fatal');\n        }\n      }\n    }\n  });\n  logger.fatal({\n    test: 'test'\n  });\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"passes send function message strings in logEvent object when asObject is not set","suites":[],"updatePoint":{"line":69,"column":86,"index":1078},"line":69,"code":"test('passes send function message strings in logEvent object when asObject is not set', ({\n  end,\n  same,\n  is\n}) => {\n  const logger = pino({\n    browser: {\n      write: noop,\n      transmit: {\n        send(level, {\n          messages\n        }) {\n          is(messages[0], 'test');\n          is(messages[1], 'another test');\n        }\n      }\n    }\n  });\n  logger.fatal('test', 'another test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"passes send function message objects in logEvent object when asObject is not set","suites":[],"updatePoint":{"line":90,"column":86,"index":1489},"line":90,"code":"test('passes send function message objects in logEvent object when asObject is not set', ({\n  end,\n  same,\n  is\n}) => {\n  const logger = pino({\n    browser: {\n      write: noop,\n      transmit: {\n        send(level, {\n          messages\n        }) {\n          same(messages[0], {\n            test: 'test'\n          });\n          is(messages[1], 'another test');\n        }\n      }\n    }\n  });\n  logger.fatal({\n    test: 'test'\n  }, 'another test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"passes send function message strings in logEvent object when asObject is set","suites":[],"updatePoint":{"line":115,"column":82,"index":1946},"line":115,"code":"test('passes send function message strings in logEvent object when asObject is set', ({\n  end,\n  same,\n  is\n}) => {\n  const logger = pino({\n    browser: {\n      asObject: true,\n      write: noop,\n      transmit: {\n        send(level, {\n          messages\n        }) {\n          is(messages[0], 'test');\n          is(messages[1], 'another test');\n        }\n      }\n    }\n  });\n  logger.fatal('test', 'another test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"passes send function message objects in logEvent object when asObject is set","suites":[],"updatePoint":{"line":137,"column":82,"index":2375},"line":137,"code":"test('passes send function message objects in logEvent object when asObject is set', ({\n  end,\n  same,\n  is\n}) => {\n  const logger = pino({\n    browser: {\n      asObject: true,\n      write: noop,\n      transmit: {\n        send(level, {\n          messages\n        }) {\n          same(messages[0], {\n            test: 'test'\n          });\n          is(messages[1], 'another test');\n        }\n      }\n    }\n  });\n  logger.fatal({\n    test: 'test'\n  }, 'another test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"supplies a timestamp (ts) in logEvent object which is exactly the same as the `time` property in asObject mode","suites":[],"updatePoint":{"line":163,"column":116,"index":2888},"line":163,"code":"test('supplies a timestamp (ts) in logEvent object which is exactly the same as the `time` property in asObject mode', ({\n  end,\n  is\n}) => {\n  let expected;\n  const logger = pino({\n    browser: {\n      asObject: true,\n      // implicit because `write`, but just to be explicit\n      write(o) {\n        expected = o.time;\n      },\n      transmit: {\n        send(level, logEvent) {\n          is(logEvent.ts, expected);\n        }\n      }\n    }\n  });\n  logger.fatal('test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"passes send function child bindings via logEvent object","suites":[],"updatePoint":{"line":185,"column":61,"index":3318},"line":185,"code":"test('passes send function child bindings via logEvent object', ({\n  end,\n  same,\n  is\n}) => {\n  const logger = pino({\n    browser: {\n      write: noop,\n      transmit: {\n        send(level, logEvent) {\n          const messages = logEvent.messages;\n          const bindings = logEvent.bindings;\n          same(bindings[0], {\n            first: 'binding'\n          });\n          same(bindings[1], {\n            second: 'binding2'\n          });\n          same(messages[0], {\n            test: 'test'\n          });\n          is(messages[1], 'another test');\n        }\n      }\n    }\n  });\n  logger.child({\n    first: 'binding'\n  }).child({\n    second: 'binding2'\n  }).fatal({\n    test: 'test'\n  }, 'another test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"passes send function level:{label, value} via logEvent object","suites":[],"updatePoint":{"line":220,"column":67,"index":4048},"line":220,"code":"test('passes send function level:{label, value} via logEvent object', ({\n  end,\n  is\n}) => {\n  const logger = pino({\n    browser: {\n      write: noop,\n      transmit: {\n        send(level, logEvent) {\n          const label = logEvent.level.label;\n          const value = logEvent.level.value;\n          is(label, 'fatal');\n          is(value, 60);\n        }\n      }\n    }\n  });\n  logger.fatal({\n    test: 'test'\n  }, 'another test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"calls send function according to transmit.level","suites":[],"updatePoint":{"line":242,"column":53,"index":4481},"line":242,"code":"test('calls send function according to transmit.level', ({\n  end,\n  is\n}) => {\n  let c = 0;\n  const logger = pino({\n    browser: {\n      write: noop,\n      transmit: {\n        level: 'error',\n        send(level) {\n          c++;\n          if (c === 1) is(level, 'error');\n          if (c === 2) is(level, 'fatal');\n        }\n      }\n    }\n  });\n  logger.warn('ignored');\n  logger.error('test');\n  logger.fatal('test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"transmit.level defaults to logger level","suites":[],"updatePoint":{"line":265,"column":45,"index":4905},"line":265,"code":"test('transmit.level defaults to logger level', ({\n  end,\n  is\n}) => {\n  let c = 0;\n  const logger = pino({\n    level: 'error',\n    browser: {\n      write: noop,\n      transmit: {\n        send(level) {\n          c++;\n          if (c === 1) is(level, 'error');\n          if (c === 2) is(level, 'fatal');\n        }\n      }\n    }\n  });\n  logger.warn('ignored');\n  logger.error('test');\n  logger.fatal('test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"transmit.level is effective even if lower than logger level","suites":[],"updatePoint":{"line":288,"column":65,"index":5345},"line":288,"code":"test('transmit.level is effective even if lower than logger level', ({\n  end,\n  is\n}) => {\n  let c = 0;\n  const logger = pino({\n    level: 'error',\n    browser: {\n      write: noop,\n      transmit: {\n        level: 'info',\n        send(level) {\n          c++;\n          if (c === 1) is(level, 'warn');\n          if (c === 2) is(level, 'error');\n          if (c === 3) is(level, 'fatal');\n        }\n      }\n    }\n  });\n  logger.warn('ignored');\n  logger.error('test');\n  logger.fatal('test');\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"applies all serializers to messages and bindings (serialize:false - default)","suites":[],"updatePoint":{"line":313,"column":82,"index":5867},"line":313,"code":"test('applies all serializers to messages and bindings (serialize:false - default)', ({\n  end,\n  same,\n  is\n}) => {\n  const logger = pino({\n    serializers: {\n      first: () => 'first',\n      second: () => 'second',\n      test: () => 'serialize it'\n    },\n    browser: {\n      write: noop,\n      transmit: {\n        send(level, logEvent) {\n          const messages = logEvent.messages;\n          const bindings = logEvent.bindings;\n          same(bindings[0], {\n            first: 'first'\n          });\n          same(bindings[1], {\n            second: 'second'\n          });\n          same(messages[0], {\n            test: 'serialize it'\n          });\n          is(messages[1].type, 'Error');\n        }\n      }\n    }\n  });\n  logger.child({\n    first: 'binding'\n  }).child({\n    second: 'binding2'\n  }).fatal({\n    test: 'test'\n  }, Error());\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"applies all serializers to messages and bindings (serialize:true)","suites":[],"updatePoint":{"line":353,"column":71,"index":6713},"line":353,"code":"test('applies all serializers to messages and bindings (serialize:true)', ({\n  end,\n  same,\n  is\n}) => {\n  const logger = pino({\n    serializers: {\n      first: () => 'first',\n      second: () => 'second',\n      test: () => 'serialize it'\n    },\n    browser: {\n      serialize: true,\n      write: noop,\n      transmit: {\n        send(level, logEvent) {\n          const messages = logEvent.messages;\n          const bindings = logEvent.bindings;\n          same(bindings[0], {\n            first: 'first'\n          });\n          same(bindings[1], {\n            second: 'second'\n          });\n          same(messages[0], {\n            test: 'serialize it'\n          });\n          is(messages[1].type, 'Error');\n        }\n      }\n    }\n  });\n  logger.child({\n    first: 'binding'\n  }).child({\n    second: 'binding2'\n  }).fatal({\n    test: 'test'\n  }, Error());\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"extracts correct bindings and raw messages over multiple transmits","suites":[],"updatePoint":{"line":394,"column":72,"index":7583},"line":394,"code":"test('extracts correct bindings and raw messages over multiple transmits', ({\n  end,\n  same,\n  is\n}) => {\n  let messages = null;\n  let bindings = null;\n  const logger = pino({\n    browser: {\n      write: noop,\n      transmit: {\n        send(level, logEvent) {\n          messages = logEvent.messages;\n          bindings = logEvent.bindings;\n        }\n      }\n    }\n  });\n  const child = logger.child({\n    child: true\n  });\n  const grandchild = child.child({\n    grandchild: true\n  });\n  logger.fatal({\n    test: 'parent:test1'\n  });\n  logger.fatal({\n    test: 'parent:test2'\n  });\n  same([], bindings);\n  same([{\n    test: 'parent:test2'\n  }], messages);\n  child.fatal({\n    test: 'child:test1'\n  });\n  child.fatal({\n    test: 'child:test2'\n  });\n  same([{\n    child: true\n  }], bindings);\n  same([{\n    test: 'child:test2'\n  }], messages);\n  grandchild.fatal({\n    test: 'grandchild:test1'\n  });\n  grandchild.fatal({\n    test: 'grandchild:test2'\n  });\n  same([{\n    child: true\n  }, {\n    grandchild: true\n  }], bindings);\n  same([{\n    test: 'grandchild:test2'\n  }], messages);\n  end();\n});","file":"browser-transmit.test.js","skipped":false,"dir":"test"},{"name":"silent level","suites":[],"updatePoint":{"line":13,"column":18,"index":317},"line":13,"code":"test('silent level', ({\n  end,\n  fail,\n  pass\n}) => {\n  const instance = pino({\n    level: 'silent',\n    browser: {\n      write: fail\n    }\n  });\n  instance.info('test');\n  const child = instance.child({\n    test: 'test'\n  });\n  child.info('msg-test');\n  // use setTimeout because setImmediate isn't supported in most browsers\n  setTimeout(() => {\n    pass();\n    end();\n  }, 0);\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"enabled false","suites":[],"updatePoint":{"line":35,"column":19,"index":702},"line":35,"code":"test('enabled false', ({\n  end,\n  fail,\n  pass\n}) => {\n  const instance = pino({\n    enabled: false,\n    browser: {\n      write: fail\n    }\n  });\n  instance.info('test');\n  const child = instance.child({\n    test: 'test'\n  });\n  child.info('msg-test');\n  // use setTimeout because setImmediate isn't supported in most browsers\n  setTimeout(() => {\n    pass();\n    end();\n  }, 0);\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"throw if creating child without bindings","suites":[],"updatePoint":{"line":57,"column":46,"index":1113},"line":57,"code":"test('throw if creating child without bindings', ({\n  end,\n  throws\n}) => {\n  const instance = pino();\n  throws(() => instance.child());\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"stubs write, flush and ee methods on instance","suites":[],"updatePoint":{"line":65,"column":51,"index":1268},"line":65,"code":"test('stubs write, flush and ee methods on instance', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino();\n  ok(isFunc(instance.setMaxListeners));\n  ok(isFunc(instance.getMaxListeners));\n  ok(isFunc(instance.emit));\n  ok(isFunc(instance.addListener));\n  ok(isFunc(instance.on));\n  ok(isFunc(instance.prependListener));\n  ok(isFunc(instance.once));\n  ok(isFunc(instance.prependOnceListener));\n  ok(isFunc(instance.removeListener));\n  ok(isFunc(instance.removeAllListeners));\n  ok(isFunc(instance.listeners));\n  ok(isFunc(instance.listenerCount));\n  ok(isFunc(instance.eventNames));\n  ok(isFunc(instance.write));\n  ok(isFunc(instance.flush));\n  is(instance.on(), undefined);\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"exposes levels object","suites":[],"updatePoint":{"line":89,"column":27,"index":1933},"line":89,"code":"test('exposes levels object', ({\n  end,\n  same\n}) => {\n  same(pino.levels, {\n    values: {\n      fatal: 60,\n      error: 50,\n      warn: 40,\n      info: 30,\n      debug: 20,\n      trace: 10\n    },\n    labels: {\n      10: 'trace',\n      20: 'debug',\n      30: 'info',\n      40: 'warn',\n      50: 'error',\n      60: 'fatal'\n    }\n  });\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"exposes faux stdSerializers","suites":[],"updatePoint":{"line":113,"column":33,"index":2286},"line":113,"code":"test('exposes faux stdSerializers', ({\n  end,\n  ok,\n  same\n}) => {\n  ok(pino.stdSerializers);\n  // make sure faux stdSerializers match pino-std-serializers\n  for (const serializer in pinoStdSerializers) {\n    ok(pino.stdSerializers[serializer], `pino.stdSerializers.${serializer}`);\n  }\n  // confirm faux methods return empty objects\n  same(pino.stdSerializers.req(), {});\n  same(pino.stdSerializers.mapHttpRequest(), {});\n  same(pino.stdSerializers.mapHttpResponse(), {});\n  same(pino.stdSerializers.res(), {});\n  // confirm wrapping function is a passthrough\n  const noChange = {\n    foo: 'bar',\n    fuz: 42\n  };\n  same(pino.stdSerializers.wrapRequestSerializer(noChange), noChange);\n  same(pino.stdSerializers.wrapResponseSerializer(noChange), noChange);\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"exposes err stdSerializer","suites":[],"updatePoint":{"line":137,"column":31,"index":3055},"line":137,"code":"test('exposes err stdSerializer', ({\n  end,\n  ok\n}) => {\n  ok(pino.stdSerializers.err);\n  ok(pino.stdSerializers.err(Error()));\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"in absence of console, log methods become noops","suites":[],"updatePoint":{"line":159,"column":55,"index":3667},"line":159,"code":"  test('in absence of console, log methods become noops', ({\n    end,\n    ok\n  }) => {\n    const console = global.console;\n    delete global.console;\n    const instance = fresh('../browser')();\n    global.console = console;\n    ok(fnName(instance.log).match(/noop/));\n    ok(fnName(instance.fatal).match(/noop/));\n    ok(fnName(instance.error).match(/noop/));\n    ok(fnName(instance.warn).match(/noop/));\n    ok(fnName(instance.info).match(/noop/));\n    ok(fnName(instance.debug).match(/noop/));\n    ok(fnName(instance.trace).match(/noop/));\n    end();\n  });","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.asObject logs pino-like object to console","suites":[],"updatePoint":{"line":177,"column":60,"index":4233},"line":177,"code":"test('opts.browser.asObject logs pino-like object to console', ({\n  end,\n  ok,\n  is\n}) => {\n  const info = console.info;\n  console.info = function (o) {\n    is(o.level, 30);\n    is(o.msg, 'test');\n    ok(o.time);\n    console.info = info;\n  };\n  const instance = require('../browser')({\n    browser: {\n      asObject: true\n    }\n  });\n  instance.info('test');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func log single string","suites":[],"updatePoint":{"line":197,"column":47,"index":4592},"line":197,"code":"test('opts.browser.write func log single string', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 'test');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info('test');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func string joining","suites":[],"updatePoint":{"line":214,"column":44,"index":4867},"line":214,"code":"test('opts.browser.write func string joining', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 'test test2 test3');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info('test %s %s', 'test2', 'test3');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func string joining when asObject is true","suites":[],"updatePoint":{"line":231,"column":66,"index":5200},"line":231,"code":"test('opts.browser.write func string joining when asObject is true', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 'test test2 test3');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info('test %s %s', 'test2', 'test3');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func string joining when asObject is true","suites":[],"updatePoint":{"line":249,"column":66,"index":5555},"line":249,"code":"test('opts.browser.write func string joining when asObject is true', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 'test test2 test3');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info('test %s %s', 'test2', 'test3');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func string object joining","suites":[],"updatePoint":{"line":267,"column":51,"index":5895},"line":267,"code":"test('opts.browser.write func string object joining', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 'test {\"test\":\"test2\"} {\"test\":\"test3\"}');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info('test %j %j', {\n    test: 'test2'\n  }, {\n    test: 'test3'\n  });\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func string object joining when asObject is true","suites":[],"updatePoint":{"line":288,"column":73,"index":6289},"line":288,"code":"test('opts.browser.write func string object joining when asObject is true', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      asObject: true,\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 'test {\"test\":\"test2\"} {\"test\":\"test3\"}');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info('test %j %j', {\n    test: 'test2'\n  }, {\n    test: 'test3'\n  });\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func string interpolation","suites":[],"updatePoint":{"line":310,"column":50,"index":6682},"line":310,"code":"test('opts.browser.write func string interpolation', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 'test2 test ({\"test\":\"test3\"})');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info('%s test (%j)', 'test2', {\n    test: 'test3'\n  });\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func number","suites":[],"updatePoint":{"line":329,"column":36,"index":7016},"line":329,"code":"test('opts.browser.write func number', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write: function (o) {\n        is(o.level, 30);\n        is(o.msg, 1);\n        ok(o.time);\n      }\n    }\n  });\n  instance.info(1);\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write func log single object","suites":[],"updatePoint":{"line":346,"column":47,"index":7284},"line":346,"code":"test('opts.browser.write func log single object', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write: function (o) {\n        is(o.level, 30);\n        is(o.test, 'test');\n        ok(o.time);\n      }\n    }\n  });\n  instance.info({\n    test: 'test'\n  });\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write obj writes to methods corresponding to level","suites":[],"updatePoint":{"line":365,"column":69,"index":7601},"line":365,"code":"test('opts.browser.write obj writes to methods corresponding to level', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write: {\n        error: function (o) {\n          is(o.level, 50);\n          is(o.test, 'test');\n          ok(o.time);\n        }\n      }\n    }\n  });\n  instance.error({\n    test: 'test'\n  });\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.asObject/write supports child loggers","suites":[],"updatePoint":{"line":386,"column":56,"index":7939},"line":386,"code":"test('opts.browser.asObject/write supports child loggers', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write(o) {\n        is(o.level, 30);\n        is(o.test, 'test');\n        is(o.msg, 'msg-test');\n        ok(o.time);\n      }\n    }\n  });\n  const child = instance.child({\n    test: 'test'\n  });\n  child.info('msg-test');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.asObject/write supports child child loggers","suites":[],"updatePoint":{"line":407,"column":62,"index":8310},"line":407,"code":"test('opts.browser.asObject/write supports child child loggers', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write(o) {\n        is(o.level, 30);\n        is(o.test, 'test');\n        is(o.foo, 'bar');\n        is(o.msg, 'msg-test');\n        ok(o.time);\n      }\n    }\n  });\n  const child = instance.child({\n    test: 'test'\n  }).child({\n    foo: 'bar'\n  });\n  child.info('msg-test');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.asObject/write supports child child child loggers","suites":[],"updatePoint":{"line":431,"column":68,"index":8741},"line":431,"code":"test('opts.browser.asObject/write supports child child child loggers', ({\n  end,\n  ok,\n  is\n}) => {\n  const instance = pino({\n    browser: {\n      write(o) {\n        is(o.level, 30);\n        is(o.test, 'test');\n        is(o.foo, 'bar');\n        is(o.baz, 'bop');\n        is(o.msg, 'msg-test');\n        ok(o.time);\n      }\n    }\n  });\n  const child = instance.child({\n    test: 'test'\n  }).child({\n    foo: 'bar'\n  }).child({\n    baz: 'bop'\n  });\n  child.info('msg-test');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.asObject defensively mitigates naughty numbers","suites":[],"updatePoint":{"line":458,"column":65,"index":9223},"line":458,"code":"test('opts.browser.asObject defensively mitigates naughty numbers', ({\n  end,\n  pass\n}) => {\n  const instance = pino({\n    browser: {\n      asObject: true,\n      write: () => {}\n    }\n  });\n  const child = instance.child({\n    test: 'test'\n  });\n  child._childLevel = -10;\n  child.info('test');\n  pass(); // if we reached here, there was no infinite loop, so, .. pass.\n\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"opts.browser.write obj falls back to console where a method is not supplied","suites":[],"updatePoint":{"line":477,"column":81,"index":9622},"line":477,"code":"test('opts.browser.write obj falls back to console where a method is not supplied', ({\n  end,\n  ok,\n  is\n}) => {\n  const info = console.info;\n  console.info = o => {\n    is(o.level, 30);\n    is(o.msg, 'test');\n    ok(o.time);\n    console.info = info;\n  };\n  const instance = require('../browser')({\n    browser: {\n      write: {\n        error(o) {\n          is(o.level, 50);\n          is(o.test, 'test');\n          ok(o.time);\n        }\n      }\n    }\n  });\n  instance.error({\n    test: 'test'\n  });\n  instance.info('test');\n  end();\n});","file":"browser.test.js","skipped":false,"dir":"test"},{"name":"Proxy and stream objects","suites":[],"updatePoint":{"line":14,"column":30,"index":203},"line":14,"code":"test('Proxy and stream objects', async ({\n  equal\n}) => {\n  const s = new PassThrough();\n  s.resume();\n  s.write('', () => {});\n  const obj = {\n    s,\n    p: new Proxy({}, {\n      get() {\n        throw new Error('kaboom');\n      }\n    })\n  };\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info({\n    obj\n  });\n  const result = await once(stream, 'data');\n  equal(result.obj, '[unable to serialize, circular reference is too complex to analyze]');\n});","file":"complex-objects.test.js","skipped":false,"dir":"test"},{"name":"Proxy and stream objects","suites":[],"updatePoint":{"line":36,"column":30,"index":677},"line":36,"code":"test('Proxy and stream objects', async ({\n  equal\n}) => {\n  const s = new PassThrough();\n  s.resume();\n  s.write('', () => {});\n  const obj = {\n    s,\n    p: new Proxy({}, {\n      get() {\n        throw new Error('kaboom');\n      }\n    })\n  };\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info(obj);\n  const result = await once(stream, 'data');\n  equal(result.p, '[unable to serialize, circular reference is too complex to analyze]');\n});","file":"complex-objects.test.js","skipped":false,"dir":"test"},{"name":"pino uses LF by default","suites":[],"updatePoint":{"line":16,"column":29,"index":298},"line":16,"code":"test('pino uses LF by default', async ({\n  ok\n}) => {\n  const stream = capture();\n  const logger = pino(stream);\n  logger.info('foo');\n  logger.error('bar');\n  ok(/foo[^\\r\\n]+\\n[^\\r\\n]+bar[^\\r\\n]+\\n/.test(stream.data));\n});","file":"crlf.test.js","skipped":false,"dir":"test"},{"name":"pino can log CRLF","suites":[],"updatePoint":{"line":25,"column":23,"index":516},"line":25,"code":"test('pino can log CRLF', async ({\n  ok\n}) => {\n  const stream = capture();\n  const logger = pino({\n    crlf: true\n  }, stream);\n  logger.info('foo');\n  logger.error('bar');\n  ok(/foo[^\\n]+\\r\\n[^\\n]+bar[^\\n]+\\r\\n/.test(stream.data));\n});","file":"crlf.test.js","skipped":false,"dir":"test"},{"name":"adds additional levels","suites":[],"updatePoint":{"line":16,"column":28,"index":305},"line":16,"code":"test('adds additional levels', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      foo: 35,\n      bar: 45\n    }\n  }, stream);\n  logger.foo('test');\n  const {\n    level\n  } = await once(stream, 'data');\n  equal(level, 35);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom levels does not override default levels","suites":[],"updatePoint":{"line":32,"column":52,"index":603},"line":32,"code":"test('custom levels does not override default levels', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      foo: 35\n    }\n  }, stream);\n  logger.info('test');\n  const {\n    level\n  } = await once(stream, 'data');\n  equal(level, 30);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"default levels can be redefined using custom levels","suites":[],"updatePoint":{"line":47,"column":57,"index":892},"line":47,"code":"test('default levels can be redefined using custom levels', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      info: 35,\n      debug: 45\n    },\n    useOnlyCustomLevels: true\n  }, stream);\n  equal(logger.hasOwnProperty('info'), true);\n  logger.info('test');\n  const {\n    level\n  } = await once(stream, 'data');\n  equal(level, 35);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom levels overrides default level label if use useOnlyCustomLevels","suites":[],"updatePoint":{"line":65,"column":76,"index":1295},"line":65,"code":"test('custom levels overrides default level label if use useOnlyCustomLevels', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      foo: 35\n    },\n    useOnlyCustomLevels: true,\n    level: 'foo'\n  }, stream);\n  equal(logger.hasOwnProperty('info'), false);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom levels overrides default level value if use useOnlyCustomLevels","suites":[],"updatePoint":{"line":78,"column":76,"index":1602},"line":78,"code":"test('custom levels overrides default level value if use useOnlyCustomLevels', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      foo: 35\n    },\n    useOnlyCustomLevels: true,\n    level: 35\n  }, stream);\n  equal(logger.hasOwnProperty('info'), false);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom levels are inherited by children","suites":[],"updatePoint":{"line":91,"column":45,"index":1875},"line":91,"code":"test('custom levels are inherited by children', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      foo: 35\n    }\n  }, stream);\n  logger.child({\n    childMsg: 'ok'\n  }).foo('test');\n  const {\n    msg,\n    childMsg,\n    level\n  } = await once(stream, 'data');\n  equal(level, 35);\n  equal(childMsg, 'ok');\n  equal(msg, 'test');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom levels can be specified on child bindings","suites":[],"updatePoint":{"line":112,"column":54,"index":2262},"line":112,"code":"test('custom levels can be specified on child bindings', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino(stream).child({\n    childMsg: 'ok'\n  }, {\n    customLevels: {\n      foo: 35\n    }\n  });\n  logger.foo('test');\n  const {\n    msg,\n    childMsg,\n    level\n  } = await once(stream, 'data');\n  equal(level, 35);\n  equal(childMsg, 'ok');\n  equal(msg, 'test');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"customLevels property child bindings does not get logged","suites":[],"updatePoint":{"line":133,"column":62,"index":2657},"line":133,"code":"test('customLevels property child bindings does not get logged', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino(stream).child({\n    childMsg: 'ok'\n  }, {\n    customLevels: {\n      foo: 35\n    }\n  });\n  logger.foo('test');\n  const {\n    customLevels\n  } = await once(stream, 'data');\n  equal(customLevels, undefined);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"throws when specifying pre-existing parent labels via child bindings","suites":[],"updatePoint":{"line":150,"column":74,"index":3015},"line":150,"code":"test('throws when specifying pre-existing parent labels via child bindings', async ({\n  throws\n}) => {\n  const stream = sink();\n  throws(() => pino({\n    customLevels: {\n      foo: 35\n    }\n  }, stream).child({}, {\n    customLevels: {\n      foo: 45\n    }\n  }), 'levels cannot be overridden');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"throws when specifying pre-existing parent values via child bindings","suites":[],"updatePoint":{"line":164,"column":74,"index":3312},"line":164,"code":"test('throws when specifying pre-existing parent values via child bindings', async ({\n  throws\n}) => {\n  const stream = sink();\n  throws(() => pino({\n    customLevels: {\n      foo: 35\n    }\n  }, stream).child({}, {\n    customLevels: {\n      bar: 35\n    }\n  }), 'pre-existing level values cannot be used for new levels');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"throws when specifying core values via child bindings","suites":[],"updatePoint":{"line":178,"column":59,"index":3622},"line":178,"code":"test('throws when specifying core values via child bindings', async ({\n  throws\n}) => {\n  const stream = sink();\n  throws(() => pino(stream).child({}, {\n    customLevels: {\n      foo: 30\n    }\n  }), 'pre-existing level values cannot be used for new levels');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"throws when useOnlyCustomLevels is set true without customLevels","suites":[],"updatePoint":{"line":188,"column":70,"index":3896},"line":188,"code":"test('throws when useOnlyCustomLevels is set true without customLevels', async ({\n  throws\n}) => {\n  const stream = sink();\n  throws(() => pino({\n    useOnlyCustomLevels: true\n  }, stream), 'customLevels is required if useOnlyCustomLevels is set true');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom level on one instance does not affect other instances","suites":[],"updatePoint":{"line":196,"column":66,"index":4150},"line":196,"code":"test('custom level on one instance does not affect other instances', async ({\n  equal\n}) => {\n  pino({\n    customLevels: {\n      foo: 37\n    }\n  });\n  equal(typeof pino().foo, 'undefined');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"setting level below or at custom level will successfully log","suites":[],"updatePoint":{"line":206,"column":66,"index":4344},"line":206,"code":"test('setting level below or at custom level will successfully log', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    customLevels: {\n      foo: 35\n    }\n  }, stream);\n  instance.level = 'foo';\n  instance.info('nope');\n  instance.foo('bar');\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(msg, 'bar');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom level below level threshold will not log","suites":[],"updatePoint":{"line":223,"column":53,"index":4681},"line":223,"code":"test('custom level below level threshold will not log', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    customLevels: {\n      foo: 15\n    }\n  }, stream);\n  instance.level = 'info';\n  instance.info('bar');\n  instance.foo('nope');\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(msg, 'bar');\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"does not share custom level state across siblings","suites":[],"updatePoint":{"line":240,"column":55,"index":5021},"line":240,"code":"test('does not share custom level state across siblings', async ({\n  doesNotThrow\n}) => {\n  const stream = sink();\n  const logger = pino(stream);\n  logger.child({}, {\n    customLevels: {\n      foo: 35\n    }\n  });\n  doesNotThrow(() => {\n    logger.child({}, {\n      customLevels: {\n        foo: 35\n      }\n    });\n  });\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"custom level does not affect the levels serializer","suites":[],"updatePoint":{"line":258,"column":56,"index":5345},"line":258,"code":"test('custom level does not affect the levels serializer', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      foo: 35,\n      bar: 45\n    },\n    formatters: {\n      level(label, number) {\n        return {\n          priority: number\n        };\n      }\n    }\n  }, stream);\n  logger.foo('test');\n  const {\n    priority\n  } = await once(stream, 'data');\n  equal(priority, 35);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"When useOnlyCustomLevels is set to true, the level formatter should only get custom levels","suites":[],"updatePoint":{"line":281,"column":96,"index":5810},"line":281,"code":"test('When useOnlyCustomLevels is set to true, the level formatter should only get custom levels', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    customLevels: {\n      answer: 42\n    },\n    useOnlyCustomLevels: true,\n    level: 42,\n    formatters: {\n      level(label, number) {\n        equal(label, 'answer');\n        equal(number, 42);\n        return {\n          level: number\n        };\n      }\n    }\n  }, stream);\n  logger.answer('test');\n  const {\n    level\n  } = await once(stream, 'data');\n  equal(level, 42);\n});","file":"custom-levels.test.js","skipped":false,"dir":"test"},{"name":"err is serialized with additional properties set on the Error object","suites":[],"updatePoint":{"line":19,"column":74,"index":365},"line":19,"code":"test('err is serialized with additional properties set on the Error object', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const err = Object.assign(new Error('myerror'), {\n    foo: 'bar'\n  });\n  const instance = pino(stream);\n  instance.level = name;\n  instance[name](err);\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level,\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack,\n      foo: err.foo\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"type should be detected based on constructor","suites":[],"updatePoint":{"line":46,"column":50,"index":964},"line":46,"code":"test('type should be detected based on constructor', async ({\n  ok,\n  same\n}) => {\n  class Bar extends Error {}\n  const stream = sink();\n  const err = new Bar('myerror');\n  const instance = pino(stream);\n  instance.level = name;\n  instance[name](err);\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level,\n    err: {\n      type: 'Bar',\n      message: err.message,\n      stack: err.stack\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"type, message and stack should be first level properties","suites":[],"updatePoint":{"line":71,"column":62,"index":1543},"line":71,"code":"test('type, message and stack should be first level properties', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const err = Object.assign(new Error('foo'), {\n    foo: 'bar'\n  });\n  const instance = pino(stream);\n  instance.level = name;\n  instance[name](err);\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level,\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack,\n      foo: err.foo\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"err serializer","suites":[],"updatePoint":{"line":98,"column":20,"index":2108},"line":98,"code":"test('err serializer', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const err = Object.assign(new Error('myerror'), {\n    foo: 'bar'\n  });\n  const instance = pino({\n    serializers: {\n      err: pino.stdSerializers.err\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]({\n    err\n  });\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level,\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack,\n      foo: err.foo\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"an error with statusCode property is not confused for a http response","suites":[],"updatePoint":{"line":131,"column":75,"index":2809},"line":131,"code":"test('an error with statusCode property is not confused for a http response', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const err = Object.assign(new Error('StatusCodeErr'), {\n    statusCode: 500\n  });\n  const instance = pino(stream);\n  instance.level = name;\n  instance[name](err);\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level,\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack,\n      statusCode: err.statusCode\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"stack is omitted if it is not set on err","suites":[],"updatePoint":{"line":158,"column":46,"index":3429},"line":158,"code":"test('stack is omitted if it is not set on err', t => {\n  t.plan(2);\n  const err = new Error('myerror');\n  delete err.stack;\n  const instance = pino(sink(function (chunk, enc, cb) {\n    t.ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');\n    delete chunk.time;\n    t.equal(chunk.hasOwnProperty('stack'), false);\n    cb();\n  }));\n  instance.level = name;\n  instance[name](err);\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"correctly ignores toString on errors","suites":[],"updatePoint":{"line":171,"column":42,"index":3831},"line":171,"code":"test('correctly ignores toString on errors', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  err.toString = () => undefined;\n  const stream = sink();\n  const instance = pino({\n    test: 'this'\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"assign mixin()","suites":[],"updatePoint":{"line":195,"column":20,"index":4296},"line":195,"code":"test('assign mixin()', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino({\n    mixin() {\n      return {\n        hello: 'world'\n      };\n    }\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    hello: 'world',\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"no err serializer","suites":[],"updatePoint":{"line":223,"column":23,"index":4800},"line":223,"code":"test('no err serializer', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino({\n    serializers: {}\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"empty serializer","suites":[],"updatePoint":{"line":246,"column":22,"index":5236},"line":246,"code":"test('empty serializer', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino({\n    serializers: {\n      err() {}\n    }\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"assign mixin()","suites":[],"updatePoint":{"line":266,"column":20,"index":5600},"line":266,"code":"test('assign mixin()', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino({\n    mixin() {\n      return {\n        hello: 'world'\n      };\n    }\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    hello: 'world',\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"no err serializer","suites":[],"updatePoint":{"line":294,"column":23,"index":6104},"line":294,"code":"test('no err serializer', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino({\n    serializers: {}\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    err: {\n      type: 'Error',\n      message: err.message,\n      stack: err.stack\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"empty serializer","suites":[],"updatePoint":{"line":317,"column":22,"index":6540},"line":317,"code":"test('empty serializer', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino({\n    serializers: {\n      err() {}\n    }\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"correctly adds error information when nestedKey is used","suites":[],"updatePoint":{"line":337,"column":61,"index":6945},"line":337,"code":"test('correctly adds error information when nestedKey is used', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  err.toString = () => undefined;\n  const stream = sink();\n  const instance = pino({\n    test: 'this',\n    nestedKey: 'obj'\n  }, stream);\n  instance.fatal(err);\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    obj: {\n      err: {\n        type: 'Error',\n        stack: err.stack,\n        message: err.message\n      }\n    },\n    msg: err.message\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"correctly adds msg on error when nestedKey is used","suites":[],"updatePoint":{"line":364,"column":56,"index":7495},"line":364,"code":"test('correctly adds msg on error when nestedKey is used', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  err.toString = () => undefined;\n  const stream = sink();\n  const instance = pino({\n    test: 'this',\n    nestedKey: 'obj'\n  }, stream);\n  instance.fatal(err, 'msg message');\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    obj: {\n      err: {\n        type: 'Error',\n        stack: err.stack,\n        message: err.message\n      }\n    },\n    msg: 'msg message'\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"msg should take precedence over error message on mergingObject","suites":[],"updatePoint":{"line":391,"column":68,"index":8074},"line":391,"code":"test('msg should take precedence over error message on mergingObject', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino(stream);\n  instance.error({\n    msg: 'my message',\n    err\n  });\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 50,\n    err: {\n      type: 'Error',\n      stack: err.stack,\n      message: err.message\n    },\n    msg: 'my message'\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"considers messageKey when giving msg precedence over error","suites":[],"updatePoint":{"line":415,"column":64,"index":8559},"line":415,"code":"test('considers messageKey when giving msg precedence over error', async ({\n  same\n}) => {\n  const err = new Error('myerror');\n  const stream = sink();\n  const instance = pino({\n    messageKey: 'message'\n  }, stream);\n  instance.error({\n    message: 'my message',\n    err\n  });\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 50,\n    err: {\n      type: 'Error',\n      stack: err.stack,\n      message: err.message\n    },\n    message: 'my message'\n  });\n});","file":"error.test.js","skipped":false,"dir":"test"},{"name":"set the errorKey with error serializer","suites":[],"updatePoint":{"line":12,"column":44,"index":228},"line":12,"code":"test('set the errorKey with error serializer', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const errorKey = 'error';\n  const instance = pino({\n    errorKey,\n    serializers: {\n      [errorKey]: stdSerializers.err\n    }\n  }, stream);\n  instance.error(new ReferenceError('test'));\n  const o = await once(stream, 'data');\n  equal(typeof o[errorKey], 'object');\n  equal(o[errorKey].type, 'ReferenceError');\n  equal(o[errorKey].message, 'test');\n  equal(typeof o[errorKey].stack, 'string');\n});","file":"errorKey.test.js","skipped":false,"dir":"test"},{"name":"set the errorKey without error serializer","suites":[],"updatePoint":{"line":31,"column":47,"index":737},"line":31,"code":"test('set the errorKey without error serializer', async ({\n  equal,\n  same\n}) => {\n  const stream = sink();\n  const errorKey = 'error';\n  const instance = pino({\n    errorKey\n  }, stream);\n  instance.error(new ReferenceError('test'));\n  const o = await once(stream, 'data');\n  equal(typeof o[errorKey], 'object');\n  equal(o[errorKey].type, 'ReferenceError');\n  equal(o[errorKey].message, 'test');\n  equal(typeof o[errorKey].stack, 'string');\n});","file":"errorKey.test.js","skipped":false,"dir":"test"},{"name":"correctly escape `hello \\u001F world \\n \\u0022`","suites":[],"updatePoint":{"line":110,"column":56,"index":2055},"line":110,"code":"test('correctly escape `hello \\\\u001F world \\\\n \\\\u0022`', async ({\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    name: 'hello'\n  }, stream);\n  instance.fatal('hello \\u001F world \\n \\u0022');\n  const result = await once(stream, 'data');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 60,\n    name: 'hello',\n    msg: 'hello \\u001F world \\n \\u0022'\n  });\n});","file":"escaping.test.js","skipped":false,"dir":"test"},{"name":"pino.destination log everything when calling process.exit(0)","suites":[],"updatePoint":{"line":16,"column":66,"index":317},"line":16,"code":"test('pino.destination log everything when calling process.exit(0)', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, 'fixtures', 'destination-exit.js')]);\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(actual.match(/hello/), null);\n  not(actual.match(/world/), null);\n});","file":"exit.test.js","skipped":false,"dir":"test"},{"name":"pino with no args log everything when calling process.exit(0)","suites":[],"updatePoint":{"line":29,"column":67,"index":708},"line":29,"code":"test('pino with no args log everything when calling process.exit(0)', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, 'fixtures', 'default-exit.js')]);\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(actual.match(/hello/), null);\n  not(actual.match(/world/), null);\n});","file":"exit.test.js","skipped":false,"dir":"test"},{"name":"sync false logs everything when calling process.exit(0)","suites":[],"updatePoint":{"line":42,"column":61,"index":1089},"line":42,"code":"test('sync false logs everything when calling process.exit(0)', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, 'fixtures', 'syncfalse-exit.js')]);\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(actual.match(/hello/), null);\n  not(actual.match(/world/), null);\n});","file":"exit.test.js","skipped":false,"dir":"test"},{"name":"sync false logs everything when calling flushSync","suites":[],"updatePoint":{"line":55,"column":55,"index":1466},"line":55,"code":"test('sync false logs everything when calling flushSync', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, 'fixtures', 'syncfalse-flush-exit.js')]);\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(actual.match(/hello/), null);\n  not(actual.match(/world/), null);\n});","file":"exit.test.js","skipped":false,"dir":"test"},{"name":"transports exits gracefully when logging in exit","suites":[],"updatePoint":{"line":68,"column":54,"index":1848},"line":68,"code":"test('transports exits gracefully when logging in exit', async ({\n  equal\n}) => {\n  const child = execa(process.argv[0], [join(__dirname, 'fixtures', 'transport-with-on-exit.js')]);\n  child.stdout.resume();\n  const code = await once(child, 'close');\n  equal(code, 0);\n});","file":"exit.test.js","skipped":false,"dir":"test"},{"name":"level formatter","suites":[],"updatePoint":{"line":23,"column":21,"index":336},"line":23,"code":"test('level formatter', async ({\n  match\n}) => {\n  const stream = sink();\n  const logger = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          log: {\n            level: label\n          }\n        };\n      }\n    }\n  }, stream);\n  const o = once(stream, 'data');\n  logger.info('hello world');\n  match(await o, {\n    log: {\n      level: 'info'\n    }\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"bindings formatter","suites":[],"updatePoint":{"line":46,"column":24,"index":724},"line":46,"code":"test('bindings formatter', async ({\n  match\n}) => {\n  const stream = sink();\n  const logger = pino({\n    formatters: {\n      bindings(bindings) {\n        return {\n          process: {\n            pid: bindings.pid\n          },\n          host: {\n            name: bindings.hostname\n          }\n        };\n      }\n    }\n  }, stream);\n  const o = once(stream, 'data');\n  logger.info('hello world');\n  match(await o, {\n    process: {\n      pid: process.pid\n    },\n    host: {\n      name: hostname()\n    }\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"no bindings formatter","suites":[],"updatePoint":{"line":75,"column":27,"index":1238},"line":75,"code":"test('no bindings formatter', async ({\n  match,\n  notOk\n}) => {\n  const stream = sink();\n  const logger = pino({\n    formatters: {\n      bindings(bindings) {\n        return null;\n      }\n    }\n  }, stream);\n  const o = once(stream, 'data');\n  logger.info('hello world');\n  const log = await o;\n  notOk(log.hasOwnProperty('pid'));\n  notOk(log.hasOwnProperty('hostname'));\n  match(log, {\n    msg: 'hello world'\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"log formatter","suites":[],"updatePoint":{"line":96,"column":19,"index":1649},"line":96,"code":"test('log formatter', async ({\n  match,\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    formatters: {\n      log(obj) {\n        equal(obj.hasOwnProperty('msg'), false);\n        return {\n          hello: 'world',\n          ...obj\n        };\n      }\n    }\n  }, stream);\n  const o = once(stream, 'data');\n  logger.info({\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  }, 'hello world');\n  match(await o, {\n    hello: 'world',\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"Formatters combined","suites":[],"updatePoint":{"line":127,"column":25,"index":2173},"line":127,"code":"test('Formatters combined', async ({\n  match\n}) => {\n  const stream = sink();\n  const logger = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          log: {\n            level: label\n          }\n        };\n      },\n      bindings(bindings) {\n        return {\n          process: {\n            pid: bindings.pid\n          },\n          host: {\n            name: bindings.hostname\n          }\n        };\n      },\n      log(obj) {\n        return {\n          hello: 'world',\n          ...obj\n        };\n      }\n    }\n  }, stream);\n  const o = once(stream, 'data');\n  logger.info({\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  }, 'hello world');\n  match(await o, {\n    log: {\n      level: 'info'\n    },\n    process: {\n      pid: process.pid\n    },\n    host: {\n      name: hostname()\n    },\n    hello: 'world',\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"Formatters in child logger","suites":[],"updatePoint":{"line":182,"column":32,"index":3085},"line":182,"code":"test('Formatters in child logger', async ({\n  match\n}) => {\n  const stream = sink();\n  const logger = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          log: {\n            level: label\n          }\n        };\n      },\n      bindings(bindings) {\n        return {\n          process: {\n            pid: bindings.pid\n          },\n          host: {\n            name: bindings.hostname\n          }\n        };\n      },\n      log(obj) {\n        return {\n          hello: 'world',\n          ...obj\n        };\n      }\n    }\n  }, stream);\n  const child = logger.child({\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  }, {\n    formatters: {\n      bindings(bindings) {\n        return {\n          ...bindings,\n          faz: 'baz'\n        };\n      }\n    }\n  });\n  const o = once(stream, 'data');\n  child.info('hello world');\n  match(await o, {\n    log: {\n      level: 'info'\n    },\n    process: {\n      pid: process.pid\n    },\n    host: {\n      name: hostname()\n    },\n    hello: 'world',\n    foo: 'bar',\n    nested: {\n      object: true\n    },\n    faz: 'baz'\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"Formatters without bindings in child logger","suites":[],"updatePoint":{"line":248,"column":49,"index":4197},"line":248,"code":"test('Formatters without bindings in child logger', async ({\n  match\n}) => {\n  const stream = sink();\n  const logger = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          log: {\n            level: label\n          }\n        };\n      },\n      bindings(bindings) {\n        return {\n          process: {\n            pid: bindings.pid\n          },\n          host: {\n            name: bindings.hostname\n          }\n        };\n      },\n      log(obj) {\n        return {\n          hello: 'world',\n          ...obj\n        };\n      }\n    }\n  }, stream);\n  const child = logger.child({\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  }, {\n    formatters: {\n      log(obj) {\n        return {\n          other: 'stuff',\n          ...obj\n        };\n      }\n    }\n  });\n  const o = once(stream, 'data');\n  child.info('hello world');\n  match(await o, {\n    log: {\n      level: 'info'\n    },\n    process: {\n      pid: process.pid\n    },\n    host: {\n      name: hostname()\n    },\n    foo: 'bar',\n    other: 'stuff',\n    nested: {\n      object: true\n    }\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"elastic common schema format","suites":[],"updatePoint":{"line":313,"column":34,"index":5267},"line":313,"code":"test('elastic common schema format', async ({\n  match,\n  type\n}) => {\n  const stream = sink();\n  const ecs = {\n    formatters: {\n      level(label, number) {\n        return {\n          log: {\n            level: label,\n            logger: 'pino'\n          }\n        };\n      },\n      bindings(bindings) {\n        return {\n          process: {\n            pid: bindings.pid\n          },\n          host: {\n            name: bindings.hostname\n          }\n        };\n      },\n      log(obj) {\n        return {\n          ecs: {\n            version: '1.4.0'\n          },\n          ...obj\n        };\n      }\n    },\n    messageKey: 'message',\n    timestamp: () => `,\"@timestamp\":\"${new Date(Date.now()).toISOString()}\"`\n  };\n  const logger = pino({\n    ...ecs\n  }, stream);\n  const o = once(stream, 'data');\n  logger.info({\n    foo: 'bar'\n  }, 'hello world');\n  const log = await o;\n  type(log['@timestamp'], 'string');\n  match(log, {\n    log: {\n      level: 'info',\n      logger: 'pino'\n    },\n    process: {\n      pid: process.pid\n    },\n    host: {\n      name: hostname()\n    },\n    ecs: {\n      version: '1.4.0'\n    },\n    foo: 'bar',\n    message: 'hello world'\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"formatter with transport","suites":[],"updatePoint":{"line":377,"column":30,"index":6430},"line":377,"code":"test('formatter with transport', async ({\n  match,\n  equal\n}) => {\n  const destination = file();\n  const logger = pino({\n    formatters: {\n      log(obj) {\n        equal(obj.hasOwnProperty('msg'), false);\n        return {\n          hello: 'world',\n          ...obj\n        };\n      }\n    },\n    transport: {\n      targets: [{\n        target: join(__dirname, 'fixtures', 'to-file-transport.js'),\n        options: {\n          destination\n        }\n      }]\n    }\n  });\n  logger.info({\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  }, 'hello world');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  match(result, {\n    hello: 'world',\n    foo: 'bar',\n    nested: {\n      object: true\n    }\n  });\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"throws when custom level formatter is used with transport.targets","suites":[],"updatePoint":{"line":418,"column":71,"index":7252},"line":418,"code":"test('throws when custom level formatter is used with transport.targets', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      formatters: {\n        level(label) {\n          return label;\n        }\n      },\n      transport: {\n        targets: [{\n          target: 'pino/file',\n          options: {\n            destination: 'foo.log'\n          }\n        }]\n      }\n    });\n  }, Error('option.transport.targets do not allow custom level formatters'));\n});","file":"formatters.test.js","skipped":false,"dir":"test"},{"name":"http request support","suites":[],"updatePoint":{"line":19,"column":26,"index":311},"line":19,"code":"test('http request support', async ({\n  ok,\n  same,\n  error,\n  teardown\n}) => {\n  let originalReq;\n  const instance = pino(sink((chunk, enc) => {\n    ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');\n    delete chunk.time;\n    same(chunk, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'my request',\n      req: {\n        method: originalReq.method,\n        url: originalReq.url,\n        headers: originalReq.headers,\n        remoteAddress: originalReq.socket.remoteAddress,\n        remotePort: originalReq.socket.remotePort\n      }\n    });\n  }));\n  const server = http.createServer((req, res) => {\n    originalReq = req;\n    instance.info(req, 'my request');\n    res.end('hello');\n  });\n  server.unref();\n  server.listen();\n  const err = await once(server, 'listening');\n  error(err);\n  const res = await once(http.get('http://localhost:' + server.address().port), 'response');\n  res.resume();\n  server.close();\n});","file":"http.test.js","skipped":false,"dir":"test"},{"name":"http request support via serializer","suites":[],"updatePoint":{"line":56,"column":41,"index":1277},"line":56,"code":"test('http request support via serializer', async ({\n  ok,\n  same,\n  error,\n  teardown\n}) => {\n  let originalReq;\n  const instance = pino({\n    serializers: {\n      req: pino.stdSerializers.req\n    }\n  }, sink((chunk, enc) => {\n    ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');\n    delete chunk.time;\n    same(chunk, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'my request',\n      req: {\n        method: originalReq.method,\n        url: originalReq.url,\n        headers: originalReq.headers,\n        remoteAddress: originalReq.socket.remoteAddress,\n        remotePort: originalReq.socket.remotePort\n      }\n    });\n  }));\n  const server = http.createServer(function (req, res) {\n    originalReq = req;\n    instance.info({\n      req\n    }, 'my request');\n    res.end('hello');\n  });\n  server.unref();\n  server.listen();\n  const err = await once(server, 'listening');\n  error(err);\n  const res = await once(http.get('http://localhost:' + server.address().port), 'response');\n  res.resume();\n  server.close();\n});","file":"http.test.js","skipped":false,"dir":"test"},{"name":"http response support","suites":[],"updatePoint":{"line":148,"column":27,"index":3636},"line":148,"code":"test('http response support', async ({\n  ok,\n  same,\n  error,\n  teardown\n}) => {\n  let originalRes;\n  const instance = pino(sink((chunk, enc) => {\n    ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');\n    delete chunk.time;\n    same(chunk, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'my response',\n      res: {\n        statusCode: originalRes.statusCode,\n        headers: originalRes.getHeaders()\n      }\n    });\n  }));\n  const server = http.createServer(function (req, res) {\n    originalRes = res;\n    res.end('hello');\n    instance.info(res, 'my response');\n  });\n  server.unref();\n  server.listen();\n  const err = await once(server, 'listening');\n  error(err);\n  const res = await once(http.get('http://localhost:' + server.address().port), 'response');\n  res.resume();\n  server.close();\n});","file":"http.test.js","skipped":false,"dir":"test"},{"name":"http response support via a serializer","suites":[],"updatePoint":{"line":182,"column":44,"index":4488},"line":182,"code":"test('http response support via a serializer', async ({\n  ok,\n  same,\n  error,\n  teardown\n}) => {\n  const instance = pino({\n    serializers: {\n      res: pino.stdSerializers.res\n    }\n  }, sink((chunk, enc) => {\n    ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');\n    delete chunk.time;\n    same(chunk, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'my response',\n      res: {\n        statusCode: 200,\n        headers: {\n          'x-single': 'y',\n          'x-multi': [1, 2]\n        }\n      }\n    });\n  }));\n  const server = http.createServer(function (req, res) {\n    res.setHeader('x-single', 'y');\n    res.setHeader('x-multi', [1, 2]);\n    res.end('hello');\n    instance.info({\n      res\n    }, 'my response');\n  });\n  server.unref();\n  server.listen();\n  const err = await once(server, 'listening');\n  error(err);\n  const res = await once(http.get('http://localhost:' + server.address().port), 'response');\n  res.resume();\n  server.close();\n});","file":"http.test.js","skipped":false,"dir":"test"},{"name":"http request support via serializer in a child","suites":[],"updatePoint":{"line":225,"column":52,"index":5484},"line":225,"code":"test('http request support via serializer in a child', async ({\n  ok,\n  same,\n  error,\n  teardown\n}) => {\n  let originalReq;\n  const instance = pino({\n    serializers: {\n      req: pino.stdSerializers.req\n    }\n  }, sink((chunk, enc) => {\n    ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');\n    delete chunk.time;\n    same(chunk, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'my request',\n      req: {\n        method: originalReq.method,\n        url: originalReq.url,\n        headers: originalReq.headers,\n        remoteAddress: originalReq.socket.remoteAddress,\n        remotePort: originalReq.socket.remotePort\n      }\n    });\n  }));\n  const server = http.createServer(function (req, res) {\n    originalReq = req;\n    const child = instance.child({\n      req\n    });\n    child.info('my request');\n    res.end('hello');\n  });\n  server.unref();\n  server.listen();\n  const err = await once(server, 'listening');\n  error(err);\n  const res = await once(http.get('http://localhost:' + server.address().port), 'response');\n  res.resume();\n  server.close();\n});","file":"http.test.js","skipped":false,"dir":"test"},{"name":"should be the same as package.json","suites":[],"updatePoint":{"line":8,"column":40,"index":192},"line":8,"code":"test('should be the same as package.json', t => {\n  t.plan(1);\n  const json = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'package.json')).toString('utf8'));\n  t.equal(pino.version, json.version);\n});","file":"internals/version.test.js","skipped":false,"dir":"test"},{"name":"can check if current level enabled","suites":[],"updatePoint":{"line":7,"column":40,"index":120},"line":7,"code":"test('can check if current level enabled', async ({\n  equal\n}) => {\n  const log = pino({\n    level: 'debug'\n  });\n  equal(true, log.isLevelEnabled('debug'));\n});","file":"is-level-enabled.test.js","skipped":false,"dir":"test"},{"name":"can check if level enabled after level set","suites":[],"updatePoint":{"line":15,"column":48,"index":290},"line":15,"code":"test('can check if level enabled after level set', async ({\n  equal\n}) => {\n  const log = pino();\n  equal(false, log.isLevelEnabled('debug'));\n  log.level = 'debug';\n  equal(true, log.isLevelEnabled('debug'));\n});","file":"is-level-enabled.test.js","skipped":false,"dir":"test"},{"name":"can check if higher level enabled","suites":[],"updatePoint":{"line":23,"column":39,"index":495},"line":23,"code":"test('can check if higher level enabled', async ({\n  equal\n}) => {\n  const log = pino({\n    level: 'debug'\n  });\n  equal(true, log.isLevelEnabled('error'));\n});","file":"is-level-enabled.test.js","skipped":false,"dir":"test"},{"name":"can check if lower level is disabled","suites":[],"updatePoint":{"line":31,"column":42,"index":659},"line":31,"code":"test('can check if lower level is disabled', async ({\n  equal\n}) => {\n  const log = pino({\n    level: 'error'\n  });\n  equal(false, log.isLevelEnabled('trace'));\n});","file":"is-level-enabled.test.js","skipped":false,"dir":"test"},{"name":"can check if child has current level enabled","suites":[],"updatePoint":{"line":39,"column":50,"index":832},"line":39,"code":"test('can check if child has current level enabled', async ({\n  equal\n}) => {\n  const log = pino().child({}, {\n    level: 'debug'\n  });\n  equal(true, log.isLevelEnabled('debug'));\n  equal(true, log.isLevelEnabled('error'));\n  equal(false, log.isLevelEnabled('trace'));\n});","file":"is-level-enabled.test.js","skipped":false,"dir":"test"},{"name":"can check if custom level is enabled","suites":[],"updatePoint":{"line":49,"column":42,"index":1097},"line":49,"code":"test('can check if custom level is enabled', async ({\n  equal\n}) => {\n  const log = pino({\n    customLevels: {\n      foo: 35\n    },\n    level: 'debug'\n  });\n  equal(true, log.isLevelEnabled('foo'));\n  equal(true, log.isLevelEnabled('error'));\n  equal(false, log.isLevelEnabled('trace'));\n});","file":"is-level-enabled.test.js","skipped":false,"dir":"test"},{"name":"transport should work in jest","suites":[],"updatePoint":{"line":3,"column":35,"index":90},"line":3,"code":"test('transport should work in jest', function () {\n  pino({\n    transport: {\n      target: 'pino-pretty'\n    }\n  });\n});","file":"jest/basic.spec.js","skipped":false,"dir":"test"},{"name":"set the level by string","suites":[],"updatePoint":{"line":17,"column":29,"index":321},"line":17,"code":"test('set the level by string', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const stream = sink();\n  const instance = pino(stream);\n  instance.level = 'error';\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  const result = await once(stream, 'data');\n  const current = expected.shift();\n  check(equal, result, current.level, current.msg);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"the wrong level throws","suites":[],"updatePoint":{"line":37,"column":28,"index":823},"line":37,"code":"test('the wrong level throws', async ({\n  throws\n}) => {\n  const instance = pino();\n  throws(() => {\n    instance.level = 'kaboom';\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"set the level by number","suites":[],"updatePoint":{"line":45,"column":29,"index":966},"line":45,"code":"test('set the level by number', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const stream = sink();\n  const instance = pino(stream);\n  instance.level = 50;\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  const result = await once(stream, 'data');\n  const current = expected.shift();\n  check(equal, result, current.level, current.msg);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"exposes level string mappings","suites":[],"updatePoint":{"line":65,"column":35,"index":1470},"line":65,"code":"test('exposes level string mappings', async ({\n  equal\n}) => {\n  equal(pino.levels.values.error, 50);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"exposes level number mappings","suites":[],"updatePoint":{"line":70,"column":35,"index":1576},"line":70,"code":"test('exposes level number mappings', async ({\n  equal\n}) => {\n  equal(pino.levels.labels[50], 'error');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"returns level integer","suites":[],"updatePoint":{"line":75,"column":27,"index":1677},"line":75,"code":"test('returns level integer', async ({\n  equal\n}) => {\n  const instance = pino({\n    level: 'error'\n  });\n  equal(instance.levelVal, 50);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"child returns level integer","suites":[],"updatePoint":{"line":83,"column":33,"index":1825},"line":83,"code":"test('child returns level integer', async ({\n  equal\n}) => {\n  const parent = pino({\n    level: 'error'\n  });\n  const child = parent.child({\n    foo: 'bar'\n  });\n  equal(child.levelVal, 50);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"set the level via exported pino function","suites":[],"updatePoint":{"line":94,"column":46,"index":2033},"line":94,"code":"test('set the level via exported pino function', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const stream = sink();\n  const instance = pino({\n    level: 'error'\n  }, stream);\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n  const result = await once(stream, 'data');\n  const current = expected.shift();\n  check(equal, result, current.level, current.msg);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"level-change event","suites":[],"updatePoint":{"line":115,"column":24,"index":2529},"line":115,"code":"test('level-change event', async ({\n  equal\n}) => {\n  const instance = pino();\n  function handle(lvl, val, prevLvl, prevVal, logger) {\n    equal(lvl, 'trace');\n    equal(val, 10);\n    equal(prevLvl, 'info');\n    equal(prevVal, 30);\n    equal(logger, instance);\n  }\n  instance.on('level-change', handle);\n  instance.level = 'trace';\n  instance.removeListener('level-change', handle);\n  instance.level = 'info';\n  let count = 0;\n  const l1 = () => count++;\n  const l2 = () => count++;\n  const l3 = () => count++;\n  instance.on('level-change', l1);\n  instance.on('level-change', l2);\n  instance.on('level-change', l3);\n  instance.level = 'trace';\n  instance.removeListener('level-change', l3);\n  instance.level = 'fatal';\n  instance.removeListener('level-change', l1);\n  instance.level = 'debug';\n  instance.removeListener('level-change', l2);\n  instance.level = 'info';\n  equal(count, 6);\n  instance.once('level-change', (lvl, val, prevLvl, prevVal, logger) => equal(logger, instance));\n  instance.level = 'info';\n  const child = instance.child({});\n  instance.once('level-change', (lvl, val, prevLvl, prevVal, logger) => equal(logger, child));\n  child.level = 'trace';\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"enable","suites":[],"updatePoint":{"line":151,"column":12,"index":3689},"line":151,"code":"test('enable', async ({\n  fail\n}) => {\n  const instance = pino({\n    level: 'trace',\n    enabled: false\n  }, sink((result, enc) => {\n    fail('no data should be logged');\n  }));\n  Object.keys(pino.levels.values).forEach(level => {\n    instance[level]('hello world');\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"silent level","suites":[],"updatePoint":{"line":164,"column":18,"index":3972},"line":164,"code":"test('silent level', async ({\n  fail\n}) => {\n  const instance = pino({\n    level: 'silent'\n  }, sink((result, enc) => {\n    fail('no data should be logged');\n  }));\n  Object.keys(pino.levels.values).forEach(level => {\n    instance[level]('hello world');\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"set silent via Infinity","suites":[],"updatePoint":{"line":176,"column":29,"index":4247},"line":176,"code":"test('set silent via Infinity', async ({\n  fail\n}) => {\n  const instance = pino({\n    level: Infinity\n  }, sink((result, enc) => {\n    fail('no data should be logged');\n  }));\n  Object.keys(pino.levels.values).forEach(level => {\n    instance[level]('hello world');\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"exposed levels","suites":[],"updatePoint":{"line":188,"column":20,"index":4513},"line":188,"code":"test('exposed levels', async ({\n  same\n}) => {\n  same(Object.keys(pino.levels.values), ['trace', 'debug', 'info', 'warn', 'error', 'fatal']);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"exposed labels","suites":[],"updatePoint":{"line":193,"column":20,"index":4659},"line":193,"code":"test('exposed labels', async ({\n  same\n}) => {\n  same(Object.keys(pino.levels.labels), ['10', '20', '30', '40', '50', '60']);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"setting level in child","suites":[],"updatePoint":{"line":198,"column":28,"index":4797},"line":198,"code":"test('setting level in child', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 50,\n    msg: 'this is an error'\n  }, {\n    level: 60,\n    msg: 'this is fatal'\n  }];\n  const instance = pino(sink((result, enc, cb) => {\n    const current = expected.shift();\n    check(equal, result, current.level, current.msg);\n    cb();\n  })).child({\n    level: 30\n  });\n  instance.level = 'error';\n  instance.info('hello world');\n  instance.error('this is an error');\n  instance.fatal('this is fatal');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"setting level by assigning a number to level","suites":[],"updatePoint":{"line":220,"column":50,"index":5318},"line":220,"code":"test('setting level by assigning a number to level', async ({\n  equal\n}) => {\n  const instance = pino();\n  equal(instance.levelVal, 30);\n  equal(instance.level, 'info');\n  instance.level = 50;\n  equal(instance.levelVal, 50);\n  equal(instance.level, 'error');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"setting level by number to unknown value results in a throw","suites":[],"updatePoint":{"line":230,"column":65,"index":5596},"line":230,"code":"test('setting level by number to unknown value results in a throw', async ({\n  throws\n}) => {\n  const instance = pino();\n  throws(() => {\n    instance.level = 973;\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"setting level by assigning a known label to level","suites":[],"updatePoint":{"line":238,"column":55,"index":5760},"line":238,"code":"test('setting level by assigning a known label to level', async ({\n  equal\n}) => {\n  const instance = pino();\n  equal(instance.levelVal, 30);\n  equal(instance.level, 'info');\n  instance.level = 'error';\n  equal(instance.levelVal, 50);\n  equal(instance.level, 'error');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"levelVal is read only","suites":[],"updatePoint":{"line":248,"column":27,"index":6005},"line":248,"code":"test('levelVal is read only', async ({\n  throws\n}) => {\n  const instance = pino();\n  throws(() => {\n    instance.levelVal = 20;\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"produces labels when told to","suites":[],"updatePoint":{"line":256,"column":34,"index":6150},"line":256,"code":"test('produces labels when told to', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 'info',\n    msg: 'hello world'\n  }];\n  const instance = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          level: label\n        };\n      }\n    }\n  }, sink((result, enc, cb) => {\n    const current = expected.shift();\n    check(equal, result, current.level, current.msg);\n    cb();\n  }));\n  instance.info('hello world');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"resets levels from labels to numbers","suites":[],"updatePoint":{"line":278,"column":42,"index":6606},"line":278,"code":"test('resets levels from labels to numbers', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 30,\n    msg: 'hello world'\n  }];\n  pino({\n    useLevelLabels: true\n  });\n  const instance = pino({\n    useLevelLabels: false\n  }, sink((result, enc, cb) => {\n    const current = expected.shift();\n    check(equal, result, current.level, current.msg);\n    cb();\n  }));\n  instance.info('hello world');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"changes label naming when told to","suites":[],"updatePoint":{"line":297,"column":39,"index":7009},"line":297,"code":"test('changes label naming when told to', async ({\n  equal\n}) => {\n  const expected = [{\n    priority: 30,\n    msg: 'hello world'\n  }];\n  const instance = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          priority: number\n        };\n      }\n    }\n  }, sink((result, enc, cb) => {\n    const current = expected.shift();\n    equal(result.priority, current.priority);\n    equal(result.msg, current.msg);\n    cb();\n  }));\n  instance.info('hello world');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"children produce labels when told to","suites":[],"updatePoint":{"line":320,"column":42,"index":7496},"line":320,"code":"test('children produce labels when told to', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 'info',\n    msg: 'child 1'\n  }, {\n    level: 'info',\n    msg: 'child 2'\n  }];\n  const instance = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          level: label\n        };\n      }\n    }\n  }, sink((result, enc, cb) => {\n    const current = expected.shift();\n    check(equal, result, current.level, current.msg);\n    cb();\n  }));\n  const child1 = instance.child({\n    name: 'child1'\n  });\n  const child2 = child1.child({\n    name: 'child2'\n  });\n  child1.info('child 1');\n  child2.info('child 2');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"produces labels for custom levels","suites":[],"updatePoint":{"line":352,"column":39,"index":8126},"line":352,"code":"test('produces labels for custom levels', async ({\n  equal\n}) => {\n  const expected = [{\n    level: 'info',\n    msg: 'hello world'\n  }, {\n    level: 'foo',\n    msg: 'foobar'\n  }];\n  const opts = {\n    formatters: {\n      level(label, number) {\n        return {\n          level: label\n        };\n      }\n    },\n    customLevels: {\n      foo: 35\n    }\n  };\n  const instance = pino(opts, sink((result, enc, cb) => {\n    const current = expected.shift();\n    check(equal, result, current.level, current.msg);\n    cb();\n  }));\n  instance.info('hello world');\n  instance.foo('foobar');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"setting levelKey does not affect labels when told to","suites":[],"updatePoint":{"line":382,"column":58,"index":8729},"line":382,"code":"test('setting levelKey does not affect labels when told to', async ({\n  equal\n}) => {\n  const instance = pino({\n    formatters: {\n      level(label, number) {\n        return {\n          priority: label\n        };\n      }\n    }\n  }, sink((result, enc, cb) => {\n    equal(result.priority, 'info');\n    cb();\n  }));\n  instance.info('hello world');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"throws when creating a default label that does not exist in logger levels","suites":[],"updatePoint":{"line":399,"column":79,"index":9099},"line":399,"code":"test('throws when creating a default label that does not exist in logger levels', async ({\n  throws\n}) => {\n  const defaultLevel = 'foo';\n  throws(() => {\n    pino({\n      customLevels: {\n        bar: 5\n      },\n      level: defaultLevel\n    });\n  }, `default level:${defaultLevel} must be included in custom levels`);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"throws when creating a default value that does not exist in logger levels","suites":[],"updatePoint":{"line":412,"column":79,"index":9422},"line":412,"code":"test('throws when creating a default value that does not exist in logger levels', async ({\n  throws\n}) => {\n  const defaultLevel = 15;\n  throws(() => {\n    pino({\n      customLevels: {\n        bar: 5\n      },\n      level: defaultLevel\n    });\n  }, `default level:${defaultLevel} must be included in custom levels`);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"throws when creating a default value that does not exist in logger levels","suites":[],"updatePoint":{"line":425,"column":79,"index":9742},"line":425,"code":"test('throws when creating a default value that does not exist in logger levels', async ({\n  equal,\n  throws\n}) => {\n  throws(() => {\n    pino({\n      customLevels: {\n        foo: 5\n      },\n      useOnlyCustomLevels: true\n    });\n  }, 'default level:info must be included in custom levels');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"passes when creating a default value that exists in logger levels","suites":[],"updatePoint":{"line":438,"column":71,"index":10031},"line":438,"code":"test('passes when creating a default value that exists in logger levels', async ({\n  equal,\n  throws\n}) => {\n  pino({\n    level: 30\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"log null value when message is null","suites":[],"updatePoint":{"line":446,"column":41,"index":10143},"line":446,"code":"test('log null value when message is null', async ({\n  equal\n}) => {\n  const expected = {\n    msg: null,\n    level: 30\n  };\n  const stream = sink();\n  const instance = pino(stream);\n  instance.level = 'info';\n  instance.info(null);\n  const result = await once(stream, 'data');\n  check(equal, result, expected.level, expected.msg);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"formats when base param is null","suites":[],"updatePoint":{"line":460,"column":37,"index":10474},"line":460,"code":"test('formats when base param is null', async ({\n  equal\n}) => {\n  const expected = {\n    msg: 'a string',\n    level: 30\n  };\n  const stream = sink();\n  const instance = pino(stream);\n  instance.level = 'info';\n  instance.info(null, 'a %s', 'string');\n  const result = await once(stream, 'data');\n  check(equal, result, expected.level, expected.msg);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"fatal method sync-flushes the destination if sync flushing is available","suites":[],"updatePoint":{"line":474,"column":77,"index":10869},"line":474,"code":"test('fatal method sync-flushes the destination if sync flushing is available', async ({\n  pass,\n  doesNotThrow,\n  plan\n}) => {\n  plan(2);\n  const stream = sink();\n  stream.flushSync = () => {\n    pass('destination flushed');\n  };\n  const instance = pino(stream);\n  instance.fatal('this is fatal');\n  await once(stream, 'data');\n  doesNotThrow(() => {\n    stream.flushSync = undefined;\n    instance.fatal('this is fatal');\n  });\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"fatal method should call async when sync-flushing fails","suites":[],"updatePoint":{"line":492,"column":61,"index":11286},"line":492,"code":"test('fatal method should call async when sync-flushing fails', ({\n  equal,\n  fail,\n  doesNotThrow,\n  plan\n}) => {\n  plan(2);\n  const messages = ['this is fatal 1'];\n  const stream = sink(result => equal(result.msg, messages.shift()));\n  stream.flushSync = () => {\n    throw new Error('Error');\n  };\n  stream.flush = () => fail('flush should be called');\n  const instance = pino(stream);\n  doesNotThrow(() => instance.fatal(messages[0]));\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"calling silent method on logger instance","suites":[],"updatePoint":{"line":508,"column":46,"index":11714},"line":508,"code":"test('calling silent method on logger instance', async ({\n  fail\n}) => {\n  const instance = pino({\n    level: 'silent'\n  }, sink((result, enc) => {\n    fail('no data should be logged');\n  }));\n  instance.silent('hello world');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"calling silent method on child logger","suites":[],"updatePoint":{"line":518,"column":43,"index":11942},"line":518,"code":"test('calling silent method on child logger', async ({\n  fail\n}) => {\n  const child = pino({\n    level: 'silent'\n  }, sink((result, enc) => {\n    fail('no data should be logged');\n  })).child({});\n  child.silent('hello world');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"changing level from info to silent and back to info","suites":[],"updatePoint":{"line":528,"column":57,"index":12188},"line":528,"code":"test('changing level from info to silent and back to info', async ({\n  equal\n}) => {\n  const expected = {\n    level: 30,\n    msg: 'hello world'\n  };\n  const stream = sink();\n  const instance = pino({\n    level: 'info'\n  }, stream);\n  instance.level = 'silent';\n  instance.info('hello world');\n  let result = stream.read();\n  equal(result, null);\n  instance.level = 'info';\n  instance.info('hello world');\n  result = await once(stream, 'data');\n  check(equal, result, expected.level, expected.msg);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"changing level from info to silent and back to info in child logger","suites":[],"updatePoint":{"line":548,"column":73,"index":12706},"line":548,"code":"test('changing level from info to silent and back to info in child logger', async ({\n  equal\n}) => {\n  const expected = {\n    level: 30,\n    msg: 'hello world'\n  };\n  const stream = sink();\n  const child = pino({\n    level: 'info'\n  }, stream).child({});\n  child.level = 'silent';\n  child.info('hello world');\n  let result = stream.read();\n  equal(result, null);\n  child.level = 'info';\n  child.info('hello world');\n  result = await once(stream, 'data');\n  check(equal, result, expected.level, expected.msg);\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"trying to get levels when `this` is no longer a Pino instance returns an empty string","suites":[],"updatePoint":{"line":570,"column":91,"index":13393},"line":570,"code":"test('trying to get levels when `this` is no longer a Pino instance returns an empty string', async ({\n  equal\n}) => {\n  const notPinoInstance = {\n    some: 'object',\n    getLevel: levelsLib.getLevel\n  };\n  const blankedLevelValue = notPinoInstance.getLevel();\n  equal(blankedLevelValue, '');\n});","file":"levels.test.js","skipped":false,"dir":"test"},{"name":"metadata works","suites":[],"updatePoint":{"line":12,"column":20,"index":185},"line":12,"code":"test('metadata works', async ({\n  ok,\n  same,\n  equal\n}) => {\n  const now = Date.now();\n  const instance = pino({}, {\n    [Symbol.for('pino.metadata')]: true,\n    write(chunk) {\n      equal(instance, this.lastLogger);\n      equal(30, this.lastLevel);\n      equal('a msg', this.lastMsg);\n      ok(Number(this.lastTime) >= now);\n      same(this.lastObj, {\n        hello: 'world'\n      });\n      const result = JSON.parse(chunk);\n      ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n      delete result.time;\n      same(result, {\n        pid,\n        hostname,\n        level: 30,\n        hello: 'world',\n        msg: 'a msg'\n      });\n    }\n  });\n  instance.info({\n    hello: 'world'\n  }, 'a msg');\n});","file":"metadata.test.js","skipped":false,"dir":"test"},{"name":"child loggers works","suites":[],"updatePoint":{"line":44,"column":25,"index":919},"line":44,"code":"test('child loggers works', async ({\n  ok,\n  same,\n  equal\n}) => {\n  const instance = pino({}, {\n    [Symbol.for('pino.metadata')]: true,\n    write(chunk) {\n      equal(child, this.lastLogger);\n      equal(30, this.lastLevel);\n      equal('a msg', this.lastMsg);\n      same(this.lastObj, {\n        from: 'child'\n      });\n      const result = JSON.parse(chunk);\n      ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n      delete result.time;\n      same(result, {\n        pid,\n        hostname,\n        level: 30,\n        hello: 'world',\n        from: 'child',\n        msg: 'a msg'\n      });\n    }\n  });\n  const child = instance.child({\n    hello: 'world'\n  });\n  child.info({\n    from: 'child'\n  }, 'a msg');\n});","file":"metadata.test.js","skipped":false,"dir":"test"},{"name":"without object","suites":[],"updatePoint":{"line":78,"column":20,"index":1655},"line":78,"code":"test('without object', async ({\n  ok,\n  same,\n  equal\n}) => {\n  const instance = pino({}, {\n    [Symbol.for('pino.metadata')]: true,\n    write(chunk) {\n      equal(instance, this.lastLogger);\n      equal(30, this.lastLevel);\n      equal('a msg', this.lastMsg);\n      same({}, this.lastObj);\n      const result = JSON.parse(chunk);\n      ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n      delete result.time;\n      same(result, {\n        pid,\n        hostname,\n        level: 30,\n        msg: 'a msg'\n      });\n    }\n  });\n  instance.info('a msg');\n});","file":"metadata.test.js","skipped":false,"dir":"test"},{"name":"without msg","suites":[],"updatePoint":{"line":103,"column":17,"index":2235},"line":103,"code":"test('without msg', async ({\n  ok,\n  same,\n  equal\n}) => {\n  const instance = pino({}, {\n    [Symbol.for('pino.metadata')]: true,\n    write(chunk) {\n      equal(instance, this.lastLogger);\n      equal(30, this.lastLevel);\n      equal(undefined, this.lastMsg);\n      same({\n        hello: 'world'\n      }, this.lastObj);\n      const result = JSON.parse(chunk);\n      ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n      delete result.time;\n      same(result, {\n        pid,\n        hostname,\n        level: 30,\n        hello: 'world'\n      });\n    }\n  });\n  instance.info({\n    hello: 'world'\n  });\n});","file":"metadata.test.js","skipped":false,"dir":"test"},{"name":"default merge strategy","suites":[],"updatePoint":{"line":13,"column":28,"index":196},"line":13,"code":"test('default merge strategy', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    base: {},\n    mixin() {\n      return {\n        tag: 'k8s'\n      };\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]({\n    tag: 'local'\n  }, 'test');\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    level,\n    msg: 'test',\n    tag: 'local'\n  });\n});","file":"mixin-merge-strategy.test.js","skipped":false,"dir":"test"},{"name":"custom merge strategy with mixin priority","suites":[],"updatePoint":{"line":39,"column":47,"index":710},"line":39,"code":"test('custom merge strategy with mixin priority', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    base: {},\n    mixin() {\n      return {\n        tag: 'k8s'\n      };\n    },\n    mixinMergeStrategy(mergeObject, mixinObject) {\n      return Object.assign(mergeObject, mixinObject);\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]({\n    tag: 'local'\n  }, 'test');\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    level,\n    msg: 'test',\n    tag: 'k8s'\n  });\n});","file":"mixin-merge-strategy.test.js","skipped":false,"dir":"test"},{"name":"mixin object is included","suites":[],"updatePoint":{"line":18,"column":30,"index":283},"line":18,"code":"test('mixin object is included', async ({\n  ok,\n  same\n}) => {\n  let n = 0;\n  const stream = sink();\n  const instance = pino({\n    mixin() {\n      return {\n        hello: ++n\n      };\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]('test');\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level,\n    msg: 'test',\n    hello: 1\n  });\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin object is new every time","suites":[],"updatePoint":{"line":44,"column":36,"index":780},"line":44,"code":"test('mixin object is new every time', async ({\n  plan,\n  ok,\n  same\n}) => {\n  plan(6);\n  let n = 0;\n  const stream = sink();\n  const instance = pino({\n    mixin() {\n      return {\n        hello: n\n      };\n    }\n  }, stream);\n  instance.level = name;\n  while (++n < 4) {\n    const msg = `test #${n}`;\n    stream.pause();\n    instance[name](msg);\n    stream.resume();\n    const result = await once(stream, 'data');\n    ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level,\n      msg,\n      hello: n\n    });\n  }\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin object is not called if below log level","suites":[],"updatePoint":{"line":77,"column":51,"index":1415},"line":77,"code":"test('mixin object is not called if below log level', async ({\n  ok\n}) => {\n  const stream = sink();\n  const instance = pino({\n    mixin() {\n      ok(false, 'should not call mixin function');\n    }\n  }, stream);\n  instance.level = 'error';\n  instance.info('test');\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin object + logged object","suites":[],"updatePoint":{"line":89,"column":34,"index":1667},"line":89,"code":"test('mixin object + logged object', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    mixin() {\n      return {\n        foo: 1,\n        bar: 2\n      };\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]({\n    bar: 3,\n    baz: 4\n  });\n  const result = await once(stream, 'data');\n  ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level,\n    foo: 1,\n    bar: 3,\n    baz: 4\n  });\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin not a function","suites":[],"updatePoint":{"line":119,"column":26,"index":2180},"line":119,"code":"test('mixin not a function', async ({\n  throws\n}) => {\n  const stream = sink();\n  throws(function () {\n    pino({\n      mixin: 'not a function'\n    }, stream);\n  });\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin can use context","suites":[],"updatePoint":{"line":129,"column":27,"index":2351},"line":129,"code":"test('mixin can use context', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    mixin(context) {\n      ok(context !== null, 'context should be defined');\n      ok(context !== undefined, 'context should be defined');\n      same(context, {\n        message: '123',\n        stack: 'stack'\n      });\n      return Object.assign({\n        error: context.message,\n        stack: context.stack\n      });\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]({\n    message: '123',\n    stack: 'stack'\n  }, 'test');\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin works without context","suites":[],"updatePoint":{"line":154,"column":33,"index":2908},"line":154,"code":"test('mixin works without context', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    mixin(context) {\n      ok(context !== null, 'context is still defined w/o passing mergeObject');\n      ok(context !== undefined, 'context is still defined w/o passing mergeObject');\n      same(context, {});\n      return {\n        something: true\n      };\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]('test');\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin can use level number","suites":[],"updatePoint":{"line":172,"column":32,"index":3358},"line":172,"code":"test('mixin can use level number', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    mixin(context, num) {\n      ok(num !== null, 'level should be defined');\n      ok(num !== undefined, 'level should be defined');\n      same(num, level);\n      return Object.assign({\n        error: context.message,\n        stack: context.stack\n      });\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]({\n    message: '123',\n    stack: 'stack'\n  }, 'test');\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin receives logger as third parameter","suites":[],"updatePoint":{"line":194,"column":46,"index":3866},"line":194,"code":"test('mixin receives logger as third parameter', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  const instance = pino({\n    mixin(context, num, logger) {\n      ok(logger !== null, 'logger should be defined');\n      ok(logger !== undefined, 'logger should be defined');\n      same(logger, instance);\n      return {\n        ...context,\n        num\n      };\n    }\n  }, stream);\n  instance.level = name;\n  instance[name]({\n    message: '123'\n  }, 'test');\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin receives child logger","suites":[],"updatePoint":{"line":215,"column":33,"index":4319},"line":215,"code":"test('mixin receives child logger', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  let child = null;\n  const instance = pino({\n    mixin(context, num, logger) {\n      ok(logger !== null, 'logger should be defined');\n      ok(logger !== undefined, 'logger should be defined');\n      same(logger.expected, child.expected);\n      return {\n        ...context,\n        num\n      };\n    }\n  }, stream);\n  instance.level = name;\n  instance.expected = false;\n  child = instance.child({});\n  child.expected = true;\n  child[name]({\n    message: '123'\n  }, 'test');\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"mixin receives logger even if child exists","suites":[],"updatePoint":{"line":240,"column":48,"index":4903},"line":240,"code":"test('mixin receives logger even if child exists', async ({\n  ok,\n  same\n}) => {\n  const stream = sink();\n  let child = null;\n  const instance = pino({\n    mixin(context, num, logger) {\n      ok(logger !== null, 'logger should be defined');\n      ok(logger !== undefined, 'logger should be defined');\n      same(logger.expected, instance.expected);\n      return {\n        ...context,\n        num\n      };\n    }\n  }, stream);\n  instance.level = name;\n  instance.expected = false;\n  child = instance.child({});\n  child.expected = true;\n  instance[name]({\n    message: '123'\n  }, 'test');\n});","file":"mixin.test.js","skipped":false,"dir":"test"},{"name":"sends to multiple streams using string levels","suites":[],"updatePoint":{"line":18,"column":51,"index":416},"line":18,"code":"test('sends to multiple streams using string levels', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const streams = [{\n    stream\n  }, {\n    level: 'debug',\n    stream\n  }, {\n    level: 'trace',\n    stream\n  }, {\n    level: 'fatal',\n    stream\n  }, {\n    level: 'silent',\n    stream\n  }];\n  const log = pino({\n    level: 'trace'\n  }, multistream(streams));\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 9);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"sends to multiple streams using custom levels","suites":[],"updatePoint":{"line":48,"column":51,"index":991},"line":48,"code":"test('sends to multiple streams using custom levels', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const streams = [{\n    stream\n  }, {\n    level: 'debug',\n    stream\n  }, {\n    level: 'trace',\n    stream\n  }, {\n    level: 'fatal',\n    stream\n  }, {\n    level: 'silent',\n    stream\n  }];\n  const log = pino({\n    level: 'trace'\n  }, multistream(streams));\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 9);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"sends to multiple streams using optionally predefined levels","suites":[],"updatePoint":{"line":78,"column":66,"index":1581},"line":78,"code":"test('sends to multiple streams using optionally predefined levels', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const opts = {\n    levels: {\n      silent: Infinity,\n      fatal: 60,\n      error: 50,\n      warn: 50,\n      info: 30,\n      debug: 20,\n      trace: 10\n    }\n  };\n  const streams = [{\n    stream\n  }, {\n    level: 'trace',\n    stream\n  }, {\n    level: 'debug',\n    stream\n  }, {\n    level: 'info',\n    stream\n  }, {\n    level: 'warn',\n    stream\n  }, {\n    level: 'error',\n    stream\n  }, {\n    level: 'fatal',\n    stream\n  }, {\n    level: 'silent',\n    stream\n  }];\n  const mstream = multistream(streams, opts);\n  const log = pino({\n    level: 'trace'\n  }, mstream);\n  log.trace('trace stream');\n  log.debug('debug stream');\n  log.info('info stream');\n  log.warn('warn stream');\n  log.error('error stream');\n  log.fatal('fatal stream');\n  log.silent('silent stream');\n  t.equal(messageCount, 24);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"sends to multiple streams using number levels","suites":[],"updatePoint":{"line":133,"column":51,"index":2583},"line":133,"code":"test('sends to multiple streams using number levels', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const streams = [{\n    stream\n  }, {\n    level: 20,\n    stream\n  }, {\n    level: 60,\n    stream\n  }];\n  const log = pino({\n    level: 'debug'\n  }, multistream(streams));\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 6);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"level include higher levels","suites":[],"updatePoint":{"line":157,"column":33,"index":3053},"line":157,"code":"test('level include higher levels', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const log = pino({}, multistream([{\n    level: 'info',\n    stream\n  }]));\n  log.fatal('message');\n  t.equal(messageCount, 1);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"supports multiple arguments","suites":[],"updatePoint":{"line":171,"column":33,"index":3366},"line":171,"code":"test('supports multiple arguments', function (t) {\n  const messages = [];\n  const stream = writeStream(function (data, enc, cb) {\n    messages.push(JSON.parse(data));\n    if (messages.length === 2) {\n      const msg1 = messages[0];\n      t.equal(msg1.msg, 'foo bar baz foobar');\n      const msg2 = messages[1];\n      t.equal(msg2.msg, 'foo bar baz foobar barfoo foofoo');\n      t.end();\n    }\n    cb();\n  });\n  const log = pino({}, multistream({\n    stream\n  }));\n  log.info('%s %s %s %s', 'foo', 'bar', 'baz', 'foobar'); // apply not invoked\n  log.info('%s %s %s %s %s %s', 'foo', 'bar', 'baz', 'foobar', 'barfoo', 'foofoo'); // apply invoked\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"supports children","suites":[],"updatePoint":{"line":191,"column":23,"index":4005},"line":191,"code":"test('supports children', function (t) {\n  const stream = writeStream(function (data, enc, cb) {\n    const input = JSON.parse(data);\n    t.equal(input.msg, 'child stream');\n    t.equal(input.child, 'one');\n    t.end();\n    cb();\n  });\n  const streams = [{\n    stream\n  }];\n  const log = pino({}, multistream(streams)).child({\n    child: 'one'\n  });\n  log.info('child stream');\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"supports grandchildren","suites":[],"updatePoint":{"line":207,"column":28,"index":4391},"line":207,"code":"test('supports grandchildren', function (t) {\n  const messages = [];\n  const stream = writeStream(function (data, enc, cb) {\n    messages.push(JSON.parse(data));\n    if (messages.length === 3) {\n      const msg1 = messages[0];\n      t.equal(msg1.msg, 'grandchild stream');\n      t.equal(msg1.child, 'one');\n      t.equal(msg1.grandchild, 'two');\n      const msg2 = messages[1];\n      t.equal(msg2.msg, 'grandchild stream');\n      t.equal(msg2.child, 'one');\n      t.equal(msg2.grandchild, 'two');\n      const msg3 = messages[2];\n      t.equal(msg3.msg, 'debug grandchild');\n      t.equal(msg3.child, 'one');\n      t.equal(msg3.grandchild, 'two');\n      t.end();\n    }\n    cb();\n  });\n  const streams = [{\n    stream\n  }, {\n    level: 'debug',\n    stream\n  }];\n  const log = pino({\n    level: 'debug'\n  }, multistream(streams)).child({\n    child: 'one'\n  }).child({\n    grandchild: 'two'\n  });\n  log.info('grandchild stream');\n  log.debug('debug grandchild');\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"supports custom levels","suites":[],"updatePoint":{"line":244,"column":28,"index":5354},"line":244,"code":"test('supports custom levels', function (t) {\n  const stream = writeStream(function (data, enc, cb) {\n    t.equal(JSON.parse(data).msg, 'bar');\n    t.end();\n  });\n  const log = pino({\n    customLevels: {\n      foo: 35\n    }\n  }, multistream([{\n    level: 35,\n    stream\n  }]));\n  log.foo('bar');\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"supports pretty print","suites":[],"updatePoint":{"line":259,"column":27,"index":5653},"line":259,"code":"test('supports pretty print', function (t) {\n  t.plan(2);\n  const stream = writeStream(function (data, enc, cb) {\n    t.not(strip(data.toString()).match(/INFO.*: pretty print/), null);\n    cb();\n  });\n  const nested = proxyquire('pino-pretty/lib/utils', {\n    'sonic-boom': function () {\n      t.pass('sonic created');\n      stream.flushSync = () => {};\n      stream.flush = () => {};\n      return stream;\n    }\n  });\n  const pretty = proxyquire('pino-pretty', {\n    './lib/utils': nested\n  });\n  const log = pino({\n    level: 'debug',\n    name: 'helloName'\n  }, multistream([{\n    stream: pretty()\n  }]));\n  log.info('pretty print');\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"children support custom levels","suites":[],"updatePoint":{"line":284,"column":36,"index":6301},"line":284,"code":"test('children support custom levels', function (t) {\n  const stream = writeStream(function (data, enc, cb) {\n    t.equal(JSON.parse(data).msg, 'bar');\n    t.end();\n  });\n  const parent = pino({\n    customLevels: {\n      foo: 35\n    }\n  }, multistream([{\n    level: 35,\n    stream\n  }]));\n  const child = parent.child({\n    child: 'yes'\n  });\n  child.foo('bar');\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"levelVal overrides level","suites":[],"updatePoint":{"line":302,"column":30,"index":6662},"line":302,"code":"test('levelVal overrides level', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const streams = [{\n    stream\n  }, {\n    level: 'blabla',\n    levelVal: 15,\n    stream\n  }, {\n    level: 60,\n    stream\n  }];\n  const log = pino({\n    level: 'debug'\n  }, multistream(streams));\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 6);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"forwards metadata","suites":[],"updatePoint":{"line":327,"column":23,"index":7146},"line":327,"code":"test('forwards metadata', function (t) {\n  t.plan(4);\n  const streams = [{\n    stream: {\n      [Symbol.for('pino.metadata')]: true,\n      write(chunk) {\n        t.equal(log, this.lastLogger);\n        t.equal(30, this.lastLevel);\n        t.same({\n          hello: 'world'\n        }, this.lastObj);\n        t.same('a msg', this.lastMsg);\n      }\n    }\n  }];\n  const log = pino({\n    level: 'debug'\n  }, multistream(streams));\n  log.info({\n    hello: 'world'\n  }, 'a msg');\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"forward name","suites":[],"updatePoint":{"line":350,"column":18,"index":7627},"line":350,"code":"test('forward name', function (t) {\n  t.plan(2);\n  const streams = [{\n    stream: {\n      [Symbol.for('pino.metadata')]: true,\n      write(chunk) {\n        const line = JSON.parse(chunk);\n        t.equal(line.name, 'helloName');\n        t.equal(line.hello, 'world');\n      }\n    }\n  }];\n  const log = pino({\n    level: 'debug',\n    name: 'helloName'\n  }, multistream(streams));\n  log.info({\n    hello: 'world'\n  }, 'a msg');\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"forward name with child","suites":[],"updatePoint":{"line":371,"column":29,"index":8078},"line":371,"code":"test('forward name with child', function (t) {\n  t.plan(3);\n  const streams = [{\n    stream: {\n      write(chunk) {\n        const line = JSON.parse(chunk);\n        t.equal(line.name, 'helloName');\n        t.equal(line.hello, 'world');\n        t.equal(line.component, 'aComponent');\n      }\n    }\n  }];\n  const log = pino({\n    level: 'debug',\n    name: 'helloName'\n  }, multistream(streams)).child({\n    component: 'aComponent'\n  });\n  log.info({\n    hello: 'world'\n  }, 'a msg');\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"clone generates a new multistream with all stream at the same level","suites":[],"updatePoint":{"line":394,"column":73,"index":8618},"line":394,"code":"test('clone generates a new multistream with all stream at the same level', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const streams = [{\n    stream\n  }, {\n    level: 'debug',\n    stream\n  }, {\n    level: 'trace',\n    stream\n  }, {\n    level: 'fatal',\n    stream\n  }];\n  const ms = multistream(streams);\n  const clone = ms.clone(30);\n  t.not(clone, ms);\n  clone.streams.forEach((s, i) => {\n    t.not(s, streams[i]);\n    t.equal(s.stream, streams[i].stream);\n    t.equal(s.level, 30);\n  });\n  const log = pino({\n    level: 'trace'\n  }, clone);\n  log.info('info stream');\n  log.debug('debug message not counted');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 8);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"one stream","suites":[],"updatePoint":{"line":429,"column":16,"index":9338},"line":429,"code":"test('one stream', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const log = pino({\n    level: 'trace'\n  }, multistream({\n    stream,\n    level: 'fatal'\n  }));\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 1);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"dedupe","suites":[],"updatePoint":{"line":447,"column":12,"index":9712},"line":447,"code":"test('dedupe', function (t) {\n  let messageCount = 0;\n  const stream1 = writeStream(function (data, enc, cb) {\n    messageCount -= 1;\n    cb();\n  });\n  const stream2 = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const streams = [{\n    stream: stream1,\n    level: 'info'\n  }, {\n    stream: stream2,\n    level: 'fatal'\n  }];\n  const log = pino({\n    level: 'trace'\n  }, multistream(streams, {\n    dedupe: true\n  }));\n  log.info('info stream');\n  log.fatal('fatal stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 1);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"dedupe when logs have different levels","suites":[],"updatePoint":{"line":475,"column":44,"index":10323},"line":475,"code":"test('dedupe when logs have different levels', function (t) {\n  let messageCount = 0;\n  const stream1 = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const stream2 = writeStream(function (data, enc, cb) {\n    messageCount += 2;\n    cb();\n  });\n  const streams = [{\n    stream: stream1,\n    level: 'info'\n  }, {\n    stream: stream2,\n    level: 'error'\n  }];\n  const log = pino({\n    level: 'trace'\n  }, multistream(streams, {\n    dedupe: true\n  }));\n  log.info('info stream');\n  log.warn('warn stream');\n  log.error('error streams');\n  log.fatal('fatal streams');\n  t.equal(messageCount, 6);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"dedupe when some streams has the same level","suites":[],"updatePoint":{"line":504,"column":49,"index":10968},"line":504,"code":"test('dedupe when some streams has the same level', function (t) {\n  let messageCount = 0;\n  const stream1 = writeStream(function (data, enc, cb) {\n    messageCount -= 1;\n    cb();\n  });\n  const stream2 = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const stream3 = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const streams = [{\n    stream: stream1,\n    level: 'info'\n  }, {\n    stream: stream2,\n    level: 'fatal'\n  }, {\n    stream: stream3,\n    level: 'fatal'\n  }];\n  const log = pino({\n    level: 'trace'\n  }, multistream(streams, {\n    dedupe: true\n  }));\n  log.info('info stream');\n  log.fatal('fatal streams');\n  log.fatal('fatal streams');\n  t.equal(messageCount, 3);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"no stream","suites":[],"updatePoint":{"line":539,"column":15,"index":11695},"line":539,"code":"test('no stream', function (t) {\n  const log = pino({\n    level: 'trace'\n  }, multistream());\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"one stream","suites":[],"updatePoint":{"line":548,"column":16,"index":11890},"line":548,"code":"test('one stream', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const log = pino({\n    level: 'trace'\n  }, multistream(stream));\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 2);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"add a stream","suites":[],"updatePoint":{"line":563,"column":18,"index":12240},"line":563,"code":"test('add a stream', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const log = pino({\n    level: 'trace'\n  }, multistream().add(stream));\n  log.info('info stream');\n  log.debug('debug stream');\n  log.fatal('fatal stream');\n  t.equal(messageCount, 2);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"multistream.add throws if not a stream","suites":[],"updatePoint":{"line":578,"column":44,"index":12622},"line":578,"code":"test('multistream.add throws if not a stream', function (t) {\n  try {\n    pino({\n      level: 'trace'\n    }, multistream().add({}));\n  } catch (_) {\n    t.end();\n  }\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"multistream throws if not a stream","suites":[],"updatePoint":{"line":587,"column":40,"index":12788},"line":587,"code":"test('multistream throws if not a stream', function (t) {\n  try {\n    pino({\n      level: 'trace'\n    }, multistream({}));\n  } catch (_) {\n    t.end();\n  }\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"multistream.write should not throw if one stream fails","suites":[],"updatePoint":{"line":596,"column":60,"index":12968},"line":596,"code":"test('multistream.write should not throw if one stream fails', function (t) {\n  let messageCount = 0;\n  const stream = writeStream(function (data, enc, cb) {\n    messageCount += 1;\n    cb();\n  });\n  const noopStream = pino.transport({\n    target: join(__dirname, 'fixtures', 'noop-transport.js')\n  });\n  // eslint-disable-next-line\n  noopStream.on('error', function (err) {\n    // something went wrong while writing to noop stream, ignoring!\n  });\n  const log = pino({\n    level: 'trace'\n  }, multistream([{\n    level: 'trace',\n    stream\n  }, {\n    level: 'debug',\n    stream: noopStream\n  }]));\n  log.debug('0');\n  noopStream.end();\n  // noop stream is ending, should emit an error but not throw\n  log.debug('1');\n  log.debug('2');\n  t.equal(messageCount, 3);\n  t.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"flushSync","suites":[],"updatePoint":{"line":626,"column":15,"index":13700},"line":626,"code":"test('flushSync', function (t) {\n  const tmp = file();\n  const destination = pino.destination({\n    dest: tmp,\n    sync: false,\n    minLength: 4096\n  });\n  const stream = multistream([{\n    level: 'info',\n    stream: destination\n  }]);\n  const log = pino({\n    level: 'info'\n  }, stream);\n  destination.on('ready', () => {\n    log.info('foo');\n    log.info('bar');\n    stream.flushSync();\n    t.equal(readFileSync(tmp, {\n      encoding: 'utf-8'\n    }).split('\\n').length - 1, 2);\n    log.info('biz');\n    stream.flushSync();\n    t.equal(readFileSync(tmp, {\n      encoding: 'utf-8'\n    }).split('\\n').length - 1, 3);\n    t.end();\n  });\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"ends all streams","suites":[],"updatePoint":{"line":655,"column":22,"index":14346},"line":655,"code":"test('ends all streams', function (t) {\n  t.plan(7);\n  const stream = writeStream(function (data, enc, cb) {\n    t.pass('message');\n    cb();\n  });\n  stream.flushSync = function () {\n    t.pass('flushSync');\n  };\n  // stream2 has no flushSync\n  const stream2 = writeStream(function (data, enc, cb) {\n    t.pass('message2');\n    cb();\n  });\n  const streams = [{\n    stream\n  }, {\n    level: 'debug',\n    stream\n  }, {\n    level: 'trace',\n    stream: stream2\n  }, {\n    level: 'fatal',\n    stream\n  }, {\n    level: 'silent',\n    stream\n  }];\n  const multi = multistream(streams);\n  const log = pino({\n    level: 'trace'\n  }, multi);\n  log.info('info stream');\n  multi.end();\n});","file":"multistream.test.js","skipped":false,"dir":"test"},{"name":"redact option – throws if not array","suites":[],"updatePoint":{"line":11,"column":41,"index":169},"line":11,"code":"test('redact option – throws if not array', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      redact: 'req.headers.cookie'\n    });\n  });\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – throws if array does not only contain strings","suites":[],"updatePoint":{"line":20,"column":67,"index":346},"line":20,"code":"test('redact option – throws if array does not only contain strings', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      redact: ['req.headers.cookie', {}]\n    });\n  });\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – throws if array contains an invalid path","suites":[],"updatePoint":{"line":29,"column":62,"index":524},"line":29,"code":"test('redact option – throws if array contains an invalid path', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      redact: ['req,headers.cookie']\n    });\n  });\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths option – throws if not array","suites":[],"updatePoint":{"line":38,"column":47,"index":683},"line":38,"code":"test('redact.paths option – throws if not array', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      redact: {\n        paths: 'req.headers.cookie'\n      }\n    });\n  });\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths option – throws if array does not only contain strings","suites":[],"updatePoint":{"line":49,"column":73,"index":891},"line":49,"code":"test('redact.paths option – throws if array does not only contain strings', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      redact: {\n        paths: ['req.headers.cookie', {}]\n      }\n    });\n  });\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths option – throws if array contains an invalid path","suites":[],"updatePoint":{"line":60,"column":68,"index":1100},"line":60,"code":"test('redact.paths option – throws if array contains an invalid path', async ({\n  throws\n}) => {\n  throws(() => {\n    pino({\n      redact: {\n        paths: ['req,headers.cookie']\n      }\n    });\n  });\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – top level key","suites":[],"updatePoint":{"line":71,"column":35,"index":1272},"line":71,"code":"test('redact option – top level key', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['key']\n  }, stream);\n  instance.info({\n    key: {\n      redact: 'me'\n    }\n  });\n  const {\n    key\n  } = await once(stream, 'data');\n  equal(key, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – top level key next level key","suites":[],"updatePoint":{"line":88,"column":50,"index":1579},"line":88,"code":"test('redact option – top level key next level key', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['key', 'key.foo']\n  }, stream);\n  instance.info({\n    key: {\n      redact: 'me'\n    }\n  });\n  const {\n    key\n  } = await once(stream, 'data');\n  equal(key, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – next level key then top level key","suites":[],"updatePoint":{"line":105,"column":55,"index":1902},"line":105,"code":"test('redact option – next level key then top level key', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['key.foo', 'key']\n  }, stream);\n  instance.info({\n    key: {\n      redact: 'me'\n    }\n  });\n  const {\n    key\n  } = await once(stream, 'data');\n  equal(key, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – object","suites":[],"updatePoint":{"line":122,"column":28,"index":2198},"line":122,"code":"test('redact option – object', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.headers.cookie']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – child object","suites":[],"updatePoint":{"line":148,"column":34,"index":2786},"line":148,"code":"test('redact option – child object', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.headers.cookie']\n  }, stream);\n  instance.child({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  }).info('message completed');\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact option – interpolated object","suites":[],"updatePoint":{"line":174,"column":41,"index":3408},"line":174,"code":"test('redact option – interpolated object', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.headers.cookie']\n  }, stream);\n  instance.info('test %j', {\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(JSON.parse(msg.replace(/test /, '')).req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths option – object","suites":[],"updatePoint":{"line":200,"column":34,"index":4044},"line":200,"code":"test('redact.paths option – object', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie']\n    }\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths option – child object","suites":[],"updatePoint":{"line":228,"column":40,"index":4659},"line":228,"code":"test('redact.paths option – child object', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie']\n    }\n  }, stream);\n  instance.child({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  }).info('message completed');\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths option – interpolated object","suites":[],"updatePoint":{"line":256,"column":47,"index":5308},"line":256,"code":"test('redact.paths option – interpolated object', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie']\n    }\n  }, stream);\n  instance.info('test %j', {\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    msg\n  } = await once(stream, 'data');\n  equal(JSON.parse(msg.replace(/test /, '')).req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.censor option – sets the redact value","suites":[],"updatePoint":{"line":284,"column":50,"index":5981},"line":284,"code":"test('redact.censor option – sets the redact value', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie'],\n      censor: 'test'\n    }\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, 'test');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.censor option – can be a function that accepts value and path arguments","suites":[],"updatePoint":{"line":313,"column":84,"index":6656},"line":313,"code":"test('redact.censor option – can be a function that accepts value and path arguments', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['topLevel'],\n      censor: (value, path) => value + ' ' + path.join('.')\n    }\n  }, stream);\n  instance.info({\n    topLevel: 'test'\n  });\n  const {\n    topLevel\n  } = await once(stream, 'data');\n  equal(topLevel, 'test topLevel');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.censor option – can be a function that accepts value and path arguments (nested path)","suites":[],"updatePoint":{"line":331,"column":98,"index":7096},"line":331,"code":"test('redact.censor option – can be a function that accepts value and path arguments (nested path)', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie'],\n      censor: (value, path) => value + ' ' + path.join('.')\n    }\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1; req.headers.cookie');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.remove option – removes both key and value","suites":[],"updatePoint":{"line":360,"column":55,"index":7853},"line":360,"code":"test('redact.remove option – removes both key and value', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie'],\n      remove: true\n    }\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal('cookie' in req.headers, false);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.remove – top level key - object value","suites":[],"updatePoint":{"line":389,"column":50,"index":8496},"line":389,"code":"test('redact.remove – top level key - object value', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['key'],\n      remove: true\n    }\n  }, stream);\n  instance.info({\n    key: {\n      redact: 'me'\n    }\n  });\n  const o = await once(stream, 'data');\n  equal('key' in o, false);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.remove – top level key - number value","suites":[],"updatePoint":{"line":407,"column":50,"index":8832},"line":407,"code":"test('redact.remove – top level key - number value', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['key'],\n      remove: true\n    }\n  }, stream);\n  instance.info({\n    key: 1\n  });\n  const o = await once(stream, 'data');\n  equal('key' in o, false);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.remove – top level key - boolean value","suites":[],"updatePoint":{"line":423,"column":51,"index":9144},"line":423,"code":"test('redact.remove – top level key - boolean value', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['key'],\n      remove: true\n    }\n  }, stream);\n  instance.info({\n    key: false\n  });\n  const o = await once(stream, 'data');\n  equal('key' in o, false);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.remove – top level key in child logger","suites":[],"updatePoint":{"line":439,"column":51,"index":9460},"line":439,"code":"test('redact.remove – top level key in child logger', async ({\n  equal\n}) => {\n  const stream = sink();\n  const opts = {\n    redact: {\n      paths: ['key'],\n      remove: true\n    }\n  };\n  const instance = pino(opts, stream).child({\n    key: {\n      redact: 'me'\n    }\n  });\n  instance.info('test');\n  const o = await once(stream, 'data');\n  equal('key' in o, false);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths preserves original object values after the log write","suites":[],"updatePoint":{"line":458,"column":71,"index":9852},"line":458,"code":"test('redact.paths preserves original object values after the log write', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.headers.cookie']\n  }, stream);\n  const obj = {\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.req.headers.cookie, '[Redacted]');\n  equal(obj.req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.paths preserves original object values after the log write","suites":[],"updatePoint":{"line":484,"column":71,"index":10580},"line":484,"code":"test('redact.paths preserves original object values after the log write', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie']\n    }\n  }, stream);\n  const obj = {\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.req.headers.cookie, '[Redacted]');\n  equal(obj.req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.censor preserves original object values after the log write","suites":[],"updatePoint":{"line":512,"column":72,"index":11330},"line":512,"code":"test('redact.censor preserves original object values after the log write', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie'],\n      censor: 'test'\n    }\n  }, stream);\n  const obj = {\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.req.headers.cookie, 'test');\n  equal(obj.req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact.remove preserves original object values after the log write","suites":[],"updatePoint":{"line":541,"column":72,"index":12096},"line":541,"code":"test('redact.remove preserves original object values after the log write', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['req.headers.cookie'],\n      remove: true\n    }\n  }, stream);\n  const obj = {\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal('cookie' in o.req.headers, false);\n  equal('cookie' in obj.req.headers, true);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports last position wildcard paths","suites":[],"updatePoint":{"line":570,"column":52,"index":12794},"line":570,"code":"test('redact – supports last position wildcard paths', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.headers.*']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n  equal(req.headers.host, '[Redacted]');\n  equal(req.headers.connection, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports first position wildcard paths","suites":[],"updatePoint":{"line":598,"column":53,"index":13484},"line":598,"code":"test('redact – supports first position wildcard paths', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['*.headers']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports first position wildcards before other paths","suites":[],"updatePoint":{"line":624,"column":67,"index":14089},"line":624,"code":"test('redact – supports first position wildcards before other paths', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['*.headers.cookie', 'req.id']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n  equal(req.id, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports first position wildcards after other paths","suites":[],"updatePoint":{"line":651,"column":66,"index":14748},"line":651,"code":"test('redact – supports first position wildcards after other paths', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.id', '*.headers.cookie']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n  equal(req.id, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports first position wildcards after top level keys","suites":[],"updatePoint":{"line":678,"column":69,"index":15410},"line":678,"code":"test('redact – supports first position wildcards after top level keys', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['key', '*.headers.cookie']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports top level wildcard","suites":[],"updatePoint":{"line":704,"column":42,"index":16011},"line":704,"code":"test('redact – supports top level wildcard', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['*']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports top level wildcard with a censor function","suites":[],"updatePoint":{"line":730,"column":65,"index":16598},"line":730,"code":"test('redact – supports top level wildcard with a censor function', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['*'],\n      censor: () => '[Redacted]'\n    }\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports top level wildcard and leading wildcard","suites":[],"updatePoint":{"line":759,"column":63,"index":17238},"line":759,"code":"test('redact – supports top level wildcard and leading wildcard', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['*', '*.req']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact – supports intermediate wildcard paths","suites":[],"updatePoint":{"line":785,"column":51,"index":17820},"line":785,"code":"test('redact – supports intermediate wildcard paths', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.*.cookie']\n  }, stream);\n  instance.info({\n    req: {\n      id: 7915,\n      method: 'GET',\n      url: '/',\n      headers: {\n        host: 'localhost:3000',\n        connection: 'keep-alive',\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      },\n      remoteAddress: '::ffff:127.0.0.1',\n      remotePort: 58022\n    }\n  });\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redacts numbers at the top level","suites":[],"updatePoint":{"line":811,"column":38,"index":18406},"line":811,"code":"test('redacts numbers at the top level', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['id']\n  }, stream);\n  const obj = {\n    id: 7915\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.id, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redacts booleans at the top level","suites":[],"updatePoint":{"line":825,"column":39,"index":18686},"line":825,"code":"test('redacts booleans at the top level', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['maybe']\n  }, stream);\n  const obj = {\n    maybe: true\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.maybe, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redacts strings at the top level","suites":[],"updatePoint":{"line":839,"column":38,"index":18974},"line":839,"code":"test('redacts strings at the top level', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['s']\n  }, stream);\n  const obj = {\n    s: 's'\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.s, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"does not redact primitives if not objects","suites":[],"updatePoint":{"line":853,"column":47,"index":19258},"line":853,"code":"test('does not redact primitives if not objects', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['a.b']\n  }, stream);\n  const obj = {\n    a: 42\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.a, 42);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redacts null at the top level","suites":[],"updatePoint":{"line":867,"column":35,"index":19521},"line":867,"code":"test('redacts null at the top level', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['n']\n  }, stream);\n  const obj = {\n    n: null\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.n, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports bracket notation","suites":[],"updatePoint":{"line":881,"column":31,"index":19790},"line":881,"code":"test('supports bracket notation', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['a[\"b.b\"]']\n  }, stream);\n  const obj = {\n    a: {\n      'b.b': 'c'\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.a['b.b'], '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports bracket notation with further nesting","suites":[],"updatePoint":{"line":897,"column":52,"index":20114},"line":897,"code":"test('supports bracket notation with further nesting', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['a[\"b.b\"].c']\n  }, stream);\n  const obj = {\n    a: {\n      'b.b': {\n        c: 'd'\n      }\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.a['b.b'].c, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports bracket notation with empty string as path segment","suites":[],"updatePoint":{"line":915,"column":65,"index":20476},"line":915,"code":"test('supports bracket notation with empty string as path segment', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['a[\"\"].c']\n  }, stream);\n  const obj = {\n    a: {\n      '': {\n        c: 'd'\n      }\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o.a[''].c, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports leading bracket notation (single quote)","suites":[],"updatePoint":{"line":933,"column":54,"index":20818},"line":933,"code":"test('supports leading bracket notation (single quote)', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['[\\'a.a\\'].b']\n  }, stream);\n  const obj = {\n    'a.a': {\n      b: 'c'\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o['a.a'].b, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports leading bracket notation (double quote)","suites":[],"updatePoint":{"line":949,"column":54,"index":21147},"line":949,"code":"test('supports leading bracket notation (double quote)', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['[\"a.a\"].b']\n  }, stream);\n  const obj = {\n    'a.a': {\n      b: 'c'\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o['a.a'].b, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports leading bracket notation (backtick quote)","suites":[],"updatePoint":{"line":965,"column":56,"index":21476},"line":965,"code":"test('supports leading bracket notation (backtick quote)', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['[`a.a`].b']\n  }, stream);\n  const obj = {\n    'a.a': {\n      b: 'c'\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o['a.a'].b, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports leading bracket notation (single-segment path)","suites":[],"updatePoint":{"line":981,"column":61,"index":21810},"line":981,"code":"test('supports leading bracket notation (single-segment path)', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['[`a.a`]']\n  }, stream);\n  const obj = {\n    'a.a': {\n      b: 'c'\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o['a.a'], '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"supports leading bracket notation (single-segment path, wildcard)","suites":[],"updatePoint":{"line":997,"column":71,"index":22150},"line":997,"code":"test('supports leading bracket notation (single-segment path, wildcard)', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['[*]']\n  }, stream);\n  const obj = {\n    'a.a': {\n      b: 'c'\n    }\n  };\n  instance.info(obj);\n  const o = await once(stream, 'data');\n  equal(o['a.a'], '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"child bindings are redacted using wildcard path","suites":[],"updatePoint":{"line":1013,"column":53,"index":22468},"line":1013,"code":"test('child bindings are redacted using wildcard path', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['*.headers.cookie']\n  }, stream);\n  instance.child({\n    req: {\n      method: 'GET',\n      url: '/',\n      headers: {\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      }\n    }\n  }).info('message completed');\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"child bindings are redacted using wildcard and plain path keys","suites":[],"updatePoint":{"line":1034,"column":68,"index":22967},"line":1034,"code":"test('child bindings are redacted using wildcard and plain path keys', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.method', '*.headers.cookie']\n  }, stream);\n  instance.child({\n    req: {\n      method: 'GET',\n      url: '/',\n      headers: {\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      }\n    }\n  }).info('message completed');\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, '[Redacted]');\n  equal(req.method, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redacts boolean at the top level","suites":[],"updatePoint":{"line":1056,"column":38,"index":23485},"line":1056,"code":"test('redacts boolean at the top level', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['msg']\n  }, stream);\n  const obj = {\n    s: 's'\n  };\n  instance.info(obj, true);\n  const o = await once(stream, 'data');\n  equal(o.s, 's');\n  equal(o.msg, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"child can customize redact","suites":[],"updatePoint":{"line":1071,"column":32,"index":23783},"line":1071,"code":"test('child can customize redact', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.method', '*.headers.cookie']\n  }, stream);\n  instance.child({\n    req: {\n      method: 'GET',\n      url: '/',\n      headers: {\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      }\n    }\n  }, {\n    redact: ['req.url']\n  }).info('message completed');\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');\n  equal(req.method, 'GET');\n  equal(req.url, '[Redacted]');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"child can remove parent redact by array","suites":[],"updatePoint":{"line":1096,"column":45,"index":24411},"line":1096,"code":"test('child can remove parent redact by array', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: ['req.method', '*.headers.cookie']\n  }, stream);\n  instance.child({\n    req: {\n      method: 'GET',\n      url: '/',\n      headers: {\n        cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'\n      }\n    }\n  }, {\n    redact: []\n  }).info('message completed');\n  const {\n    req\n  } = await once(stream, 'data');\n  equal(req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');\n  equal(req.method, 'GET');\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"redact safe stringify","suites":[],"updatePoint":{"line":1120,"column":27,"index":24980},"line":1120,"code":"test('redact safe stringify', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    redact: {\n      paths: ['that.secret']\n    }\n  }, stream);\n  instance.info({\n    that: {\n      secret: 'please hide me',\n      myBigInt: 123n\n    },\n    other: {\n      mySecondBigInt: 222n\n    }\n  });\n  const {\n    that,\n    other\n  } = await once(stream, 'data');\n  equal(that.secret, '[Redacted]');\n  equal(that.myBigInt, 123);\n  equal(other.mySecondBigInt, 222);\n});","file":"redact.test.js","skipped":false,"dir":"test"},{"name":"default err namespace error serializer","suites":[],"updatePoint":{"line":18,"column":44,"index":334},"line":18,"code":"test('default err namespace error serializer', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino(stream);\n  parent.info({\n    err: ReferenceError('test')\n  });\n  const o = await once(stream, 'data');\n  equal(typeof o.err, 'object');\n  equal(o.err.type, 'ReferenceError');\n  equal(o.err.message, 'test');\n  equal(typeof o.err.stack, 'string');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"custom serializer overrides default err namespace error serializer","suites":[],"updatePoint":{"line":32,"column":72,"index":731},"line":32,"code":"test('custom serializer overrides default err namespace error serializer', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    serializers: {\n      err: e => ({\n        t: e.constructor.name,\n        m: e.message,\n        s: e.stack\n      })\n    }\n  }, stream);\n  parent.info({\n    err: ReferenceError('test')\n  });\n  const o = await once(stream, 'data');\n  equal(typeof o.err, 'object');\n  equal(o.err.t, 'ReferenceError');\n  equal(o.err.m, 'test');\n  equal(typeof o.err.s, 'string');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"custom serializer overrides default err namespace error serializer when nestedKey is on","suites":[],"updatePoint":{"line":54,"column":93,"index":1268},"line":54,"code":"test('custom serializer overrides default err namespace error serializer when nestedKey is on', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    nestedKey: 'obj',\n    serializers: {\n      err: e => {\n        return {\n          t: e.constructor.name,\n          m: e.message,\n          s: e.stack\n        };\n      }\n    }\n  }, stream);\n  parent.info({\n    err: ReferenceError('test')\n  });\n  const o = await once(stream, 'data');\n  equal(typeof o.obj.err, 'object');\n  equal(o.obj.err.t, 'ReferenceError');\n  equal(o.obj.err.m, 'test');\n  equal(typeof o.obj.err.s, 'string');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"null overrides default err namespace error serializer","suites":[],"updatePoint":{"line":79,"column":59,"index":1841},"line":79,"code":"test('null overrides default err namespace error serializer', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    serializers: {\n      err: null\n    }\n  }, stream);\n  parent.info({\n    err: ReferenceError('test')\n  });\n  const o = await once(stream, 'data');\n  equal(typeof o.err, 'object');\n  equal(typeof o.err.type, 'undefined');\n  equal(typeof o.err.message, 'undefined');\n  equal(typeof o.err.stack, 'undefined');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"undefined overrides default err namespace error serializer","suites":[],"updatePoint":{"line":97,"column":64,"index":2295},"line":97,"code":"test('undefined overrides default err namespace error serializer', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    serializers: {\n      err: undefined\n    }\n  }, stream);\n  parent.info({\n    err: ReferenceError('test')\n  });\n  const o = await once(stream, 'data');\n  equal(typeof o.err, 'object');\n  equal(typeof o.err.type, 'undefined');\n  equal(typeof o.err.message, 'undefined');\n  equal(typeof o.err.stack, 'undefined');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"serializers override values","suites":[],"updatePoint":{"line":115,"column":33,"index":2723},"line":115,"code":"test('serializers override values', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    serializers: parentSerializers\n  }, stream);\n  parent.child({}, {\n    serializers: childSerializers\n  });\n  parent.fatal({\n    test: 'test'\n  });\n  const o = await once(stream, 'data');\n  equal(o.test, 'parent');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"child does not overwrite parent serializers","suites":[],"updatePoint":{"line":131,"column":49,"index":3070},"line":131,"code":"test('child does not overwrite parent serializers', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    serializers: parentSerializers\n  }, stream);\n  const child = parent.child({}, {\n    serializers: childSerializers\n  });\n  parent.fatal({\n    test: 'test'\n  });\n  const o = once(stream, 'data');\n  equal((await o).test, 'parent');\n  const o2 = once(stream, 'data');\n  child.fatal({\n    test: 'test'\n  });\n  equal((await o2).test, 'child');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"Symbol.for('pino.serializers')","suites":[],"updatePoint":{"line":152,"column":38,"index":3531},"line":152,"code":"test('Symbol.for(\\'pino.serializers\\')', async ({\n  equal,\n  same,\n  not\n}) => {\n  const stream = sink();\n  const expected = Object.assign({\n    err: stdSerializers.err\n  }, parentSerializers);\n  const parent = pino({\n    serializers: parentSerializers\n  }, stream);\n  const child = parent.child({\n    a: 'property'\n  });\n  same(parent[Symbol.for('pino.serializers')], expected);\n  same(child[Symbol.for('pino.serializers')], expected);\n  equal(parent[Symbol.for('pino.serializers')], child[Symbol.for('pino.serializers')]);\n  const child2 = parent.child({}, {\n    serializers: {\n      a\n    }\n  });\n  function a() {\n    return 'hello';\n  }\n  not(child2[Symbol.for('pino.serializers')], parentSerializers);\n  equal(child2[Symbol.for('pino.serializers')].a, a);\n  equal(child2[Symbol.for('pino.serializers')].test, parentSerializers.test);\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"children inherit parent serializers","suites":[],"updatePoint":{"line":182,"column":41,"index":4377},"line":182,"code":"test('children inherit parent serializers', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    serializers: parentSerializers\n  }, stream);\n  const child = parent.child({\n    a: 'property'\n  });\n  child.fatal({\n    test: 'test'\n  });\n  const o = await once(stream, 'data');\n  equal(o.test, 'parent');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"children inherit parent Symbol serializers","suites":[],"updatePoint":{"line":198,"column":48,"index":4716},"line":198,"code":"test('children inherit parent Symbol serializers', async ({\n  equal,\n  same,\n  not\n}) => {\n  const stream = sink();\n  const symbolSerializers = {\n    [Symbol.for('b')]: b\n  };\n  const expected = Object.assign({\n    err: stdSerializers.err\n  }, symbolSerializers);\n  const parent = pino({\n    serializers: symbolSerializers\n  }, stream);\n  same(parent[Symbol.for('pino.serializers')], expected);\n  const child = parent.child({}, {\n    serializers: {\n      [Symbol.for('a')]: a,\n      a\n    }\n  });\n  function a() {\n    return 'hello';\n  }\n  function b() {\n    return 'world';\n  }\n  same(child[Symbol.for('pino.serializers')].a, a);\n  same(child[Symbol.for('pino.serializers')][Symbol.for('b')], b);\n  same(child[Symbol.for('pino.serializers')][Symbol.for('a')], a);\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"children serializers get called","suites":[],"updatePoint":{"line":230,"column":37,"index":5474},"line":230,"code":"test('children serializers get called', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    test: 'this'\n  }, stream);\n  const child = parent.child({\n    a: 'property'\n  }, {\n    serializers: childSerializers\n  });\n  child.fatal({\n    test: 'test'\n  });\n  const o = await once(stream, 'data');\n  equal(o.test, 'child');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"children serializers get called when inherited from parent","suites":[],"updatePoint":{"line":248,"column":64,"index":5851},"line":248,"code":"test('children serializers get called when inherited from parent', async ({\n  equal\n}) => {\n  const stream = sink();\n  const parent = pino({\n    test: 'this',\n    serializers: parentSerializers\n  }, stream);\n  const child = parent.child({}, {\n    serializers: {\n      test: function () {\n        return 'pass';\n      }\n    }\n  });\n  child.fatal({\n    test: 'fail'\n  });\n  const o = await once(stream, 'data');\n  equal(o.test, 'pass');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"non-overridden serializers are available in the children","suites":[],"updatePoint":{"line":269,"column":62,"index":6288},"line":269,"code":"test('non-overridden serializers are available in the children', async ({\n  equal\n}) => {\n  const stream = sink();\n  const pSerializers = {\n    onlyParent: function () {\n      return 'parent';\n    },\n    shared: function () {\n      return 'parent';\n    }\n  };\n  const cSerializers = {\n    shared: function () {\n      return 'child';\n    },\n    onlyChild: function () {\n      return 'child';\n    }\n  };\n  const parent = pino({\n    serializers: pSerializers\n  }, stream);\n  const child = parent.child({}, {\n    serializers: cSerializers\n  });\n  const o = once(stream, 'data');\n  child.fatal({\n    shared: 'test'\n  });\n  equal((await o).shared, 'child');\n  const o2 = once(stream, 'data');\n  child.fatal({\n    onlyParent: 'test'\n  });\n  equal((await o2).onlyParent, 'parent');\n  const o3 = once(stream, 'data');\n  child.fatal({\n    onlyChild: 'test'\n  });\n  equal((await o3).onlyChild, 'child');\n  const o4 = once(stream, 'data');\n  parent.fatal({\n    onlyChild: 'test'\n  });\n  equal((await o4).onlyChild, 'test');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"custom serializer for messageKey","suites":[],"updatePoint":{"line":316,"column":38,"index":7280},"line":316,"code":"test('custom serializer for messageKey', async t => {\n  const stream = sink();\n  const instance = pino({\n    serializers: {\n      msg: () => '422'\n    }\n  }, stream);\n  const o = {\n    num: NaN\n  };\n  instance.info(o, 42);\n  const {\n    msg\n  } = await once(stream, 'data');\n  t.equal(msg, '422');\n});","file":"serializers.test.js","skipped":false,"dir":"test"},{"name":"do not use SonicBoom is someone tampered with process.stdout.write","suites":[],"updatePoint":{"line":17,"column":72,"index":318},"line":17,"code":"test('do not use SonicBoom is someone tampered with process.stdout.write', async ({\n  not\n}) => {\n  let actual = '';\n  const child = fork(join(__dirname, 'fixtures', 'stdout-hack-protection.js'), {\n    silent: true\n  });\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(actual.match(/^hack/), null);\n});","file":"stdout-protection.test.js","skipped":false,"dir":"test"},{"name":"do not use SonicBoom is someone has passed process.stdout to pino","suites":[],"updatePoint":{"line":31,"column":71,"index":687},"line":31,"code":"test('do not use SonicBoom is someone has passed process.stdout to pino', async ({\n  equal\n}) => {\n  const logger = pino(process.stdout);\n  equal(logger[pino.symbols.streamSym], process.stdout);\n});","file":"stdout-protection.test.js","skipped":false,"dir":"test"},{"name":"do not crash if process.stdout has no fd","suites":[],"updatePoint":{"line":37,"column":46,"index":861},"line":37,"code":"test('do not crash if process.stdout has no fd', async ({\n  teardown\n}) => {\n  const fd = process.stdout.fd;\n  delete process.stdout.fd;\n  teardown(function () {\n    process.stdout.fd = fd;\n  });\n  pino();\n});","file":"stdout-protection.test.js","skipped":false,"dir":"test"},{"name":"use fd=1 if process.stdout has no fd in pino.destination() (worker case)","suites":[],"updatePoint":{"line":47,"column":78,"index":1103},"line":47,"code":"test('use fd=1 if process.stdout has no fd in pino.destination() (worker case)', async ({\n  teardown\n}) => {\n  const fd = process.stdout.fd;\n  delete process.stdout.fd;\n  teardown(function () {\n    process.stdout.fd = fd;\n  });\n  pino.destination();\n});","file":"stdout-protection.test.js","skipped":false,"dir":"test"},{"name":"asynchronous logging","suites":[],"updatePoint":{"line":21,"column":26,"index":334},"line":21,"code":"test('asynchronous logging', async ({\n  equal,\n  teardown\n}) => {\n  const now = Date.now;\n  const hostname = os.hostname;\n  const proc = process;\n  global.process = {\n    __proto__: process,\n    pid: 123456\n  };\n  Date.now = () => 1459875739796;\n  os.hostname = () => 'abcdefghijklmnopqr';\n  delete require.cache[require.resolve('../')];\n  const pino = require('../');\n  let expected = '';\n  let actual = '';\n  const normal = pino(writer((s, enc, cb) => {\n    expected += s;\n    cb();\n  }));\n  const dest = createWriteStream(getPathToNull());\n  dest.write = s => {\n    actual += s;\n  };\n  const asyncLogger = pino(dest);\n  let i = 44;\n  while (i--) {\n    normal.info('h');\n    asyncLogger.info('h');\n  }\n  const expected2 = expected.split('\\n')[0];\n  let actual2 = '';\n  const child = fork(join(__dirname, '/fixtures/syncfalse.js'), {\n    silent: true\n  });\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual2 += s;\n    cb();\n  }));\n  await once(child, 'close');\n  equal(actual, expected);\n  equal(actual2.trim(), expected2);\n  teardown(() => {\n    os.hostname = hostname;\n    Date.now = now;\n    global.process = proc;\n  });\n});","file":"syncfalse.test.js","skipped":false,"dir":"test"},{"name":"sync false with child","suites":[],"updatePoint":{"line":70,"column":27,"index":1470},"line":70,"code":"test('sync false with child', async ({\n  equal,\n  teardown\n}) => {\n  const now = Date.now;\n  const hostname = os.hostname;\n  const proc = process;\n  global.process = {\n    __proto__: process,\n    pid: 123456\n  };\n  Date.now = function () {\n    return 1459875739796;\n  };\n  os.hostname = function () {\n    return 'abcdefghijklmnopqr';\n  };\n  delete require.cache[require.resolve('../')];\n  const pino = require('../');\n  let expected = '';\n  let actual = '';\n  const normal = pino(writer((s, enc, cb) => {\n    expected += s;\n    cb();\n  })).child({\n    hello: 'world'\n  });\n  const dest = createWriteStream(getPathToNull());\n  dest.write = function (s) {\n    actual += s;\n  };\n  const asyncLogger = pino(dest).child({\n    hello: 'world'\n  });\n  let i = 500;\n  while (i--) {\n    normal.info('h');\n    asyncLogger.info('h');\n  }\n  asyncLogger.flush();\n  const expected2 = expected.split('\\n')[0];\n  let actual2 = '';\n  const child = fork(join(__dirname, '/fixtures/syncfalse-child.js'), {\n    silent: true\n  });\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual2 += s;\n    cb();\n  }));\n  await once(child, 'close');\n  equal(actual, expected);\n  equal(actual2.trim(), expected2);\n  teardown(() => {\n    os.hostname = hostname;\n    Date.now = now;\n    global.process = proc;\n  });\n});","file":"syncfalse.test.js","skipped":false,"dir":"test"},{"name":"flush does nothing with sync true (default)","suites":[],"updatePoint":{"line":128,"column":49,"index":2778},"line":128,"code":"test('flush does nothing with sync true (default)', async () => {\n  const instance = require('..')();\n  instance.flush();\n});","file":"syncfalse.test.js","skipped":false,"dir":"test"},{"name":"pino exposes standard time functions","suites":[],"updatePoint":{"line":12,"column":42,"index":208},"line":12,"code":"test('pino exposes standard time functions', async ({\n  ok\n}) => {\n  ok(pino.stdTimeFunctions);\n  ok(pino.stdTimeFunctions.epochTime);\n  ok(pino.stdTimeFunctions.unixTime);\n  ok(pino.stdTimeFunctions.nullTime);\n  ok(pino.stdTimeFunctions.isoTime);\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"pino accepts external time functions","suites":[],"updatePoint":{"line":21,"column":42,"index":460},"line":21,"code":"test('pino accepts external time functions', async ({\n  equal\n}) => {\n  const opts = {\n    timestamp: () => ',\"time\":\"none\"'\n  };\n  const stream = sink();\n  const instance = pino(opts, stream);\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), true);\n  equal(result.time, 'none');\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"pino accepts external time functions with custom label","suites":[],"updatePoint":{"line":34,"column":60,"index":824},"line":34,"code":"test('pino accepts external time functions with custom label', async ({\n  equal\n}) => {\n  const opts = {\n    timestamp: () => ',\"custom-time-label\":\"none\"'\n  };\n  const stream = sink();\n  const instance = pino(opts, stream);\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('custom-time-label'), true);\n  equal(result['custom-time-label'], 'none');\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"inserts timestamp by default","suites":[],"updatePoint":{"line":47,"column":34,"index":1204},"line":47,"code":"test('inserts timestamp by default', async ({\n  ok,\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino(stream);\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), true);\n  ok(new Date(result.time) <= new Date(), 'time is greater than timestamp');\n  equal(result.msg, 'foobar');\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"omits timestamp when timestamp option is false","suites":[],"updatePoint":{"line":59,"column":52,"index":1578},"line":59,"code":"test('omits timestamp when timestamp option is false', async ({\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    timestamp: false\n  }, stream);\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), false);\n  equal(result.msg, 'foobar');\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"inserts timestamp when timestamp option is true","suites":[],"updatePoint":{"line":71,"column":53,"index":1899},"line":71,"code":"test('inserts timestamp when timestamp option is true', async ({\n  ok,\n  equal\n}) => {\n  const stream = sink();\n  const instance = pino({\n    timestamp: true\n  }, stream);\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), true);\n  ok(new Date(result.time) <= new Date(), 'time is greater than timestamp');\n  equal(result.msg, 'foobar');\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"child inserts timestamp by default","suites":[],"updatePoint":{"line":85,"column":40,"index":2288},"line":85,"code":"test('child inserts timestamp by default', async ({\n  ok,\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino(stream);\n  const instance = logger.child({\n    component: 'child'\n  });\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), true);\n  ok(new Date(result.time) <= new Date(), 'time is greater than timestamp');\n  equal(result.msg, 'foobar');\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"child omits timestamp with option","suites":[],"updatePoint":{"line":100,"column":39,"index":2710},"line":100,"code":"test('child omits timestamp with option', async ({\n  equal\n}) => {\n  const stream = sink();\n  const logger = pino({\n    timestamp: false\n  }, stream);\n  const instance = logger.child({\n    component: 'child'\n  });\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), false);\n  equal(result.msg, 'foobar');\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"pino.stdTimeFunctions.unixTime returns seconds based timestamps","suites":[],"updatePoint":{"line":115,"column":69,"index":3108},"line":115,"code":"test('pino.stdTimeFunctions.unixTime returns seconds based timestamps', async ({\n  equal\n}) => {\n  const opts = {\n    timestamp: pino.stdTimeFunctions.unixTime\n  };\n  const stream = sink();\n  const instance = pino(opts, stream);\n  const now = Date.now;\n  Date.now = () => 1531069919686;\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), true);\n  equal(result.time, 1531069920);\n  Date.now = now;\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"pino.stdTimeFunctions.isoTime returns ISO 8601 timestamps","suites":[],"updatePoint":{"line":131,"column":63,"index":3563},"line":131,"code":"test('pino.stdTimeFunctions.isoTime returns ISO 8601 timestamps', async ({\n  equal\n}) => {\n  const opts = {\n    timestamp: pino.stdTimeFunctions.isoTime\n  };\n  const stream = sink();\n  const instance = pino(opts, stream);\n  const ms = 1531069919686;\n  const now = Date.now;\n  Date.now = () => ms;\n  const iso = new Date(ms).toISOString();\n  instance.info('foobar');\n  const result = await once(stream, 'data');\n  equal(result.hasOwnProperty('time'), true);\n  equal(result.time, iso);\n  Date.now = now;\n});","file":"timestamp.test.js","skipped":false,"dir":"test"},{"name":"eight million lines","suites":[],"updatePoint":{"line":26,"column":25,"index":452},"line":26,"code":"test('eight million lines', async ({\n  equal,\n  comment\n}) => {\n  const destination = file();\n  await execa(process.argv[0], [join(__dirname, '..', 'fixtures', 'transport-many-lines.js'), destination]);\n  if (process.platform !== 'win32') {\n    try {\n      await execa('sync'); // Wait for the file to be written to disk\n    } catch {\n      // Just a fallback, this should be unreachable\n    }\n  }\n  await sleep(1000); // It seems that sync is not enough (even in POSIX systems)\n\n  const toWrite = 8 * 1000000;\n  let count = 0;\n  await pipeline(createReadStream(destination), split(), new Writable({\n    write(chunk, enc, cb) {\n      if (count % (toWrite / 10) === 0) {\n        comment(`read ${count}`);\n      }\n      count++;\n      cb();\n    }\n  }));\n  equal(count, toWrite);\n});","file":"transport/big.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with destination overridden by bundler","suites":[],"updatePoint":{"line":22,"column":59,"index":375},"line":22,"code":"test('pino.transport with destination overridden by bundler', async ({\n  same,\n  teardown\n}) => {\n  globalThis.__bundlerPathsOverrides = {\n    foobar: join(__dirname, '..', 'fixtures', 'to-file-transport.js')\n  };\n  const destination = file();\n  const transport = pino.transport({\n    target: 'foobar',\n    options: {\n      destination\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  globalThis.__bundlerPathsOverrides = undefined;\n});","file":"transport/bundlers-support.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with worker destination overridden by bundler","suites":[],"updatePoint":{"line":50,"column":66,"index":1086},"line":50,"code":"test('pino.transport with worker destination overridden by bundler', async ({\n  same,\n  teardown\n}) => {\n  globalThis.__bundlerPathsOverrides = {\n    'pino-worker': join(__dirname, '..', '..', 'lib/worker.js')\n  };\n  const destination = file();\n  const transport = pino.transport({\n    targets: [{\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  globalThis.__bundlerPathsOverrides = undefined;\n});","file":"transport/bundlers-support.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with worker destination overridden by bundler and mjs transport","suites":[],"updatePoint":{"line":80,"column":84,"index":1889},"line":80,"code":"test('pino.transport with worker destination overridden by bundler and mjs transport', async ({\n  same,\n  teardown\n}) => {\n  globalThis.__bundlerPathsOverrides = {\n    'pino-worker': join(__dirname, '..', '..', 'lib/worker.js')\n  };\n  const destination = file();\n  const transport = pino.transport({\n    targets: [{\n      target: join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.es2017.cjs'),\n      options: {\n        destination\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  globalThis.__bundlerPathsOverrides = undefined;\n});","file":"transport/bundlers-support.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with worker-pipeline destination overridden by bundler","suites":[],"updatePoint":{"line":110,"column":75,"index":2697},"line":110,"code":"test('pino.transport with worker-pipeline destination overridden by bundler', async ({\n  same,\n  teardown\n}) => {\n  globalThis.__bundlerPathsOverrides = {\n    'pino-pipeline-worker': join(__dirname, '..', '..', 'lib/worker-pipeline.js')\n  };\n  const destination = file();\n  const transport = pino.transport({\n    pipeline: [{\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  globalThis.__bundlerPathsOverrides = undefined;\n});","file":"transport/bundlers-support.test.js","skipped":false,"dir":"test"},{"name":"when using a custom transport outside node_modules, the first file outside node_modules should be used","suites":[],"updatePoint":{"line":10,"column":108,"index":227},"line":10,"code":"test('when using a custom transport outside node_modules, the first file outside node_modules should be used', async function (t) {\n  const evalApp = join(__dirname, '../', '/fixtures/eval/index.js');\n  const {\n    stdout\n  } = await execa(process.argv[0], [evalApp]);\n  t.match(stdout, /done!/);\n});","file":"transport/caller.test.js","skipped":false,"dir":"test"},{"name":"when using a custom transport where some files in stacktrace are in the node_modules, the first file outside node_modules should be used","suites":[],"updatePoint":{"line":17,"column":142,"index":562},"line":17,"code":"test('when using a custom transport where some files in stacktrace are in the node_modules, the first file outside node_modules should be used', async function (t) {\n  const evalApp = join(__dirname, '../', '/fixtures/eval/node_modules/2-files.js');\n  const {\n    stdout\n  } = await execa(process.argv[0], [evalApp]);\n  t.match(stdout, /done!/);\n});","file":"transport/caller.test.js","skipped":false,"dir":"test"},{"name":"when using a custom transport where all files in stacktrace are in the node_modules, the first file inside node_modules should be used","suites":[],"updatePoint":{"line":24,"column":140,"index":910},"line":24,"code":"test('when using a custom transport where all files in stacktrace are in the node_modules, the first file inside node_modules should be used', async function (t) {\n  const evalApp = join(__dirname, '../', '/fixtures/eval/node_modules/14-files.js');\n  const {\n    stdout\n  } = await execa(process.argv[0], [evalApp]);\n  t.match(stdout, /done!/);\n});","file":"transport/caller.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with file","suites":[],"updatePoint":{"line":37,"column":30,"index":694},"line":37,"code":"test('pino.transport with file', async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n    options: {\n      destination\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with file (no options + error handling)","suites":[],"updatePoint":{"line":61,"column":60,"index":1282},"line":61,"code":"test('pino.transport with file (no options + error handling)', async ({\n  equal\n}) => {\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'to-file-transport.js')\n  });\n  const [err] = await once(transport, 'error');\n  equal(err.message, 'kaboom');\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with file URL","suites":[],"updatePoint":{"line":70,"column":34,"index":1541},"line":70,"code":"test('pino.transport with file URL', async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    target: url.pathToFileURL(join(__dirname, '..', 'fixtures', 'to-file-transport.js')).href,\n    options: {\n      destination\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport errors if file does not exists","suites":[],"updatePoint":{"line":94,"column":51,"index":2144},"line":94,"code":"test('pino.transport errors if file does not exists', ({\n  plan,\n  pass\n}) => {\n  plan(1);\n  const instance = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'non-existent-file'),\n    worker: {\n      stdin: true,\n      stdout: true,\n      stderr: true\n    }\n  });\n  instance.on('error', function () {\n    pass('error received');\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport errors if transport worker module does not export a function","suites":[],"updatePoint":{"line":111,"column":81,"index":2528},"line":111,"code":"test('pino.transport errors if transport worker module does not export a function', ({\n  plan,\n  equal\n}) => {\n  // TODO: add case for non-pipelined single target (needs changes in thread-stream)\n  plan(2);\n  const manyTargetsInstance = pino.transport({\n    targets: [{\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'transport-wrong-export-type.js')\n    }, {\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'transport-wrong-export-type.js')\n    }]\n  });\n  manyTargetsInstance.on('error', function (e) {\n    equal(e.message, 'exported worker is not a function');\n  });\n  const pipelinedInstance = pino.transport({\n    pipeline: [{\n      target: join(__dirname, '..', 'fixtures', 'transport-wrong-export-type.js')\n    }]\n  });\n  pipelinedInstance.on('error', function (e) {\n    equal(e.message, 'exported worker is not a function');\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with esm","suites":[],"updatePoint":{"line":138,"column":29,"index":3361},"line":138,"code":"test('pino.transport with esm', async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'to-file-transport.mjs'),\n    options: {\n      destination\n    }\n  });\n  const instance = pino(transport);\n  teardown(transport.end.bind(transport));\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with two files","suites":[],"updatePoint":{"line":162,"column":35,"index":3925},"line":162,"code":"test('pino.transport with two files', async ({\n  same,\n  teardown\n}) => {\n  const dest1 = file();\n  const dest2 = file();\n  const transport = pino.transport({\n    targets: [{\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination: dest1\n      }\n    }, {\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination: dest2\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await Promise.all([watchFileCreated(dest1), watchFileCreated(dest2)]);\n  const result1 = JSON.parse(await readFile(dest1));\n  delete result1.time;\n  same(result1, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  const result2 = JSON.parse(await readFile(dest2));\n  delete result2.time;\n  same(result2, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with two files and custom levels","suites":[],"updatePoint":{"line":204,"column":53,"index":4924},"line":204,"code":"test('pino.transport with two files and custom levels', async ({\n  same,\n  teardown\n}) => {\n  const dest1 = file();\n  const dest2 = file();\n  const transport = pino.transport({\n    targets: [{\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination: dest1\n      }\n    }, {\n      level: 'foo',\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination: dest2\n      }\n    }],\n    levels: {\n      trace: 10,\n      debug: 20,\n      info: 30,\n      warn: 40,\n      error: 50,\n      fatal: 60,\n      foo: 25\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await Promise.all([watchFileCreated(dest1), watchFileCreated(dest2)]);\n  const result1 = JSON.parse(await readFile(dest1));\n  delete result1.time;\n  same(result1, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  const result2 = JSON.parse(await readFile(dest2));\n  delete result2.time;\n  same(result2, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport without specifying default levels","suites":[],"updatePoint":{"line":255,"column":54,"index":6058},"line":255,"code":"test('pino.transport without specifying default levels', async ({\n  same,\n  teardown\n}) => {\n  const dest = file();\n  const transport = pino.transport({\n    targets: [{\n      level: 'foo',\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination: dest\n      }\n    }],\n    levels: {\n      foo: 25\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await Promise.all([watchFileCreated(dest)]);\n  const result1 = JSON.parse(await readFile(dest));\n  delete result1.time;\n  same(result1, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with two files and dedupe","suites":[],"updatePoint":{"line":285,"column":46,"index":6721},"line":285,"code":"test('pino.transport with two files and dedupe', async ({\n  same,\n  teardown\n}) => {\n  const dest1 = file();\n  const dest2 = file();\n  const transport = pino.transport({\n    dedupe: true,\n    targets: [{\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination: dest1\n      }\n    }, {\n      level: 'error',\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination: dest2\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  instance.error('world');\n  await Promise.all([watchFileCreated(dest1), watchFileCreated(dest2)]);\n  const result1 = JSON.parse(await readFile(dest1));\n  delete result1.time;\n  same(result1, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  const result2 = JSON.parse(await readFile(dest2));\n  delete result2.time;\n  same(result2, {\n    pid,\n    hostname,\n    level: 50,\n    msg: 'world'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with an array including a pino-pretty destination","suites":[],"updatePoint":{"line":329,"column":70,"index":7783},"line":329,"code":"test('pino.transport with an array including a pino-pretty destination', async ({\n  same,\n  match,\n  teardown\n}) => {\n  const dest1 = file();\n  const dest2 = file();\n  const transport = pino.transport({\n    targets: [{\n      level: 'info',\n      target: 'pino/file',\n      options: {\n        destination: dest1\n      }\n    }, {\n      level: 'info',\n      target: 'pino-pretty',\n      options: {\n        destination: dest2\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await Promise.all([watchFileCreated(dest1), watchFileCreated(dest2)]);\n  const result1 = JSON.parse(await readFile(dest1));\n  delete result1.time;\n  same(result1, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  const actual = (await readFile(dest2)).toString();\n  match(strip(actual), /\\[.*\\] INFO.*hello/);\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"no transport.end()","suites":[],"updatePoint":{"line":366,"column":24,"index":8616},"line":366,"code":"test('no transport.end()', async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n    options: {\n      destination\n    }\n  });\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"autoEnd = false","suites":[],"updatePoint":{"line":389,"column":21,"index":9122},"line":389,"code":"test('autoEnd = false', async ({\n  equal,\n  same,\n  teardown\n}) => {\n  const destination = file();\n  const count = process.listenerCount('exit');\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n    options: {\n      destination\n    },\n    worker: {\n      autoEnd: false\n    }\n  });\n  teardown(transport.end.bind(transport));\n  await once(transport, 'ready');\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  equal(count, process.listenerCount('exit'));\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with target and targets","suites":[],"updatePoint":{"line":420,"column":44,"index":9873},"line":420,"code":"test('pino.transport with target and targets', async ({\n  fail,\n  equal\n}) => {\n  try {\n    pino.transport({\n      target: '/a/file',\n      targets: [{\n        target: '/a/file'\n      }]\n    });\n    fail('must throw');\n  } catch (err) {\n    equal(err.message, 'only one of target or targets can be specified');\n  }\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with target pino/file","suites":[],"updatePoint":{"line":436,"column":42,"index":10190},"line":436,"code":"test('pino.transport with target pino/file', async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    target: 'pino/file',\n    options: {\n      destination\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with target pino/file and mkdir option","suites":[],"updatePoint":{"line":460,"column":59,"index":10731},"line":460,"code":"test('pino.transport with target pino/file and mkdir option', async ({\n  same,\n  teardown\n}) => {\n  const folder = join(tmpdir(), `pino-${process.pid}-mkdir-transport-file`);\n  const destination = join(folder, 'log.txt');\n  teardown(() => {\n    try {\n      rimraf.sync(folder);\n    } catch (err) {\n      // ignore\n    }\n  });\n  const transport = pino.transport({\n    target: 'pino/file',\n    options: {\n      destination,\n      mkdir: true\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with target pino/file and append option","suites":[],"updatePoint":{"line":493,"column":60,"index":11490},"line":493,"code":"test('pino.transport with target pino/file and append option', async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  await writeFile(destination, JSON.stringify({\n    pid,\n    hostname,\n    time: Date.now(),\n    level: 30,\n    msg: 'hello'\n  }));\n  const transport = pino.transport({\n    target: 'pino/file',\n    options: {\n      destination,\n      append: false\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('goodbye');\n  await watchForWrite(destination, '\"goodbye\"');\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'goodbye'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport should error with unknown target","suites":[],"updatePoint":{"line":525,"column":53,"index":12192},"line":525,"code":"test('pino.transport should error with unknown target', async ({\n  fail,\n  equal\n}) => {\n  try {\n    pino.transport({\n      target: 'origin',\n      caller: 'unknown-file.js'\n    });\n    fail('must throw');\n  } catch (err) {\n    equal(err.message, 'unable to determine transport target for \"origin\"');\n  }\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with target pino-pretty","suites":[],"updatePoint":{"line":539,"column":44,"index":12492},"line":539,"code":"test('pino.transport with target pino-pretty', async ({\n  match,\n  teardown\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    target: 'pino-pretty',\n    options: {\n      destination\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const actual = await readFile(destination, 'utf8');\n  match(strip(actual), /\\[.*\\] INFO.*hello/);\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"stdout in worker","suites":[],"updatePoint":{"line":557,"column":22,"index":12941},"line":557,"code":"test('stdout in worker', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, '..', 'fixtures', 'transport-main.js')]);\n  for await (const chunk of child.stdout) {\n    actual += chunk;\n  }\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"log and exit on ready","suites":[],"updatePoint":{"line":567,"column":27,"index":13227},"line":567,"code":"test('log and exit on ready', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, '..', 'fixtures', 'transport-exit-on-ready.js')]);\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  await immediate();\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"log and exit before ready","suites":[],"updatePoint":{"line":580,"column":31,"index":13587},"line":580,"code":"test('log and exit before ready', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, '..', 'fixtures', 'transport-exit-immediately.js')]);\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"log and exit before ready with async dest","suites":[],"updatePoint":{"line":592,"column":47,"index":13945},"line":592,"code":"test('log and exit before ready with async dest', async ({\n  not\n}) => {\n  const destination = file();\n  const child = execa(process.argv[0], [join(__dirname, '..', 'fixtures', 'transport-exit-immediately-with-async-dest.js'), destination]);\n  await once(child, 'exit');\n  const actual = await readFile(destination, 'utf8');\n  not(strip(actual).match(/HELLO/), null);\n  not(strip(actual).match(/WORLD/), null);\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"string integer destination","suites":[],"updatePoint":{"line":602,"column":32,"index":14345},"line":602,"code":"test('string integer destination', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], [join(__dirname, '..', 'fixtures', 'transport-string-stdout.js')]);\n  child.stdout.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino transport options with target","suites":[],"updatePoint":{"line":614,"column":40,"index":14693},"line":614,"code":"test('pino transport options with target', async ({\n  teardown,\n  same\n}) => {\n  const destination = file();\n  const instance = pino({\n    transport: {\n      target: 'pino/file',\n      options: {\n        destination\n      }\n    }\n  });\n  const transportStream = instance[pino.symbols.streamSym];\n  teardown(transportStream.end.bind(transportStream));\n  instance.info('transport option test');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'transport option test'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino transport options with targets","suites":[],"updatePoint":{"line":640,"column":41,"index":15304},"line":640,"code":"test('pino transport options with targets', async ({\n  teardown,\n  same\n}) => {\n  const dest1 = file();\n  const dest2 = file();\n  const instance = pino({\n    transport: {\n      targets: [{\n        target: 'pino/file',\n        options: {\n          destination: dest1\n        }\n      }, {\n        target: 'pino/file',\n        options: {\n          destination: dest2\n        }\n      }]\n    }\n  });\n  const transportStream = instance[pino.symbols.streamSym];\n  teardown(transportStream.end.bind(transportStream));\n  instance.info('transport option test');\n  await Promise.all([watchFileCreated(dest1), watchFileCreated(dest2)]);\n  const result1 = JSON.parse(await readFile(dest1));\n  delete result1.time;\n  same(result1, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'transport option test'\n  });\n  const result2 = JSON.parse(await readFile(dest2));\n  delete result2.time;\n  same(result2, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'transport option test'\n  });\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"transport options with target and targets","suites":[],"updatePoint":{"line":682,"column":47,"index":16281},"line":682,"code":"test('transport options with target and targets', async ({\n  fail,\n  equal\n}) => {\n  try {\n    pino({\n      transport: {\n        target: {},\n        targets: {}\n      }\n    });\n    fail('must throw');\n  } catch (err) {\n    equal(err.message, 'only one of target or targets can be specified');\n  }\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"transport options with target and stream","suites":[],"updatePoint":{"line":698,"column":46,"index":16581},"line":698,"code":"test('transport options with target and stream', async ({\n  fail,\n  equal\n}) => {\n  try {\n    pino({\n      transport: {\n        target: {}\n      }\n    }, '/log/null');\n    fail('must throw');\n  } catch (err) {\n    equal(err.message, 'only one of option.transport or stream can be specified');\n  }\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"transport options with stream","suites":[],"updatePoint":{"line":713,"column":35,"index":16871},"line":713,"code":"test('transport options with stream', async ({\n  fail,\n  equal,\n  teardown\n}) => {\n  try {\n    const dest1 = file();\n    const transportStream = pino.transport({\n      target: 'pino/file',\n      options: {\n        destination: dest1\n      }\n    });\n    teardown(transportStream.end.bind(transportStream));\n    pino({\n      transport: transportStream\n    });\n    fail('must throw');\n  } catch (err) {\n    equal(err.message, 'option.transport do not allow stream, please pass to option directly. e.g. pino(transport)');\n  }\n});","file":"transport/core.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with file","suites":[],"updatePoint":{"line":21,"column":30,"index":595},"line":21,"code":"test('pino.transport with file', async ({\n  same,\n  teardown\n}) => {\n  const destination = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.ts'),\n    options: {\n      destination\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination, {\n    encoding: 'utf8'\n  }));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"pino.transport with file (no options + error handling)","suites":[],"updatePoint":{"line":47,"column":60,"index":1275},"line":47,"code":"test('pino.transport with file (no options + error handling)', async ({\n  equal\n}) => {\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.ts')\n  });\n  const [err] = await once(transport, 'error');\n  equal(err.message, 'kaboom');\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"pino.transport with file URL","suites":[],"updatePoint":{"line":56,"column":34,"index":1540},"line":56,"code":"test('pino.transport with file URL', async ({\n  same,\n  teardown\n}) => {\n  const destination = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const transport = pino.transport({\n    target: url.pathToFileURL(join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.ts')).href,\n    options: {\n      destination\n    }\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination, {\n    encoding: 'utf8'\n  }));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"pino.transport with two files","suites":[],"updatePoint":{"line":82,"column":35,"index":2219},"line":82,"code":"test('pino.transport with two files', async ({\n  same,\n  teardown\n}) => {\n  const dest1 = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const dest2 = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const transport = pino.transport({\n    targets: [{\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.ts'),\n      options: {\n        destination: dest1\n      }\n    }, {\n      level: 'info',\n      target: join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.ts'),\n      options: {\n        destination: dest2\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await Promise.all([watchFileCreated(dest1), watchFileCreated(dest2)]);\n  const result1 = JSON.parse(await readFile(dest1, {\n    encoding: 'utf8'\n  }));\n  delete result1.time;\n  same(result1, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n  const result2 = JSON.parse(await readFile(dest2, {\n    encoding: 'utf8'\n  }));\n  delete result2.time;\n  same(result2, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"no transport.end()","suites":[],"updatePoint":{"line":128,"column":24,"index":3373},"line":128,"code":"test('no transport.end()', async ({\n  same,\n  teardown\n}) => {\n  const destination = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.ts'),\n    options: {\n      destination\n    }\n  });\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination, {\n    encoding: 'utf8'\n  }));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"autoEnd = false","suites":[],"updatePoint":{"line":153,"column":21,"index":3971},"line":153,"code":"test('autoEnd = false', async ({\n  equal,\n  same,\n  teardown\n}) => {\n  const destination = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const count = process.listenerCount('exit');\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'ts', 'to-file-transport.ts'),\n    options: {\n      destination\n    },\n    worker: {\n      autoEnd: false\n    }\n  });\n  teardown(transport.end.bind(transport));\n  await once(transport, 'ready');\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  equal(count, process.listenerCount('exit'));\n  const result = JSON.parse(await readFile(destination, {\n    encoding: 'utf8'\n  }));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"stdout in worker","suites":[],"updatePoint":{"line":186,"column":22,"index":4792},"line":186,"code":"test('stdout in worker', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], ['-r', 'ts-node/register', join(__dirname, '..', 'fixtures', 'ts', 'transport-main.ts')]);\n  child.stdout?.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"log and exit on ready","suites":[],"updatePoint":{"line":198,"column":27,"index":5151},"line":198,"code":"test('log and exit on ready', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], ['-r', 'ts-node/register', join(__dirname, '..', 'fixtures', 'ts', 'transport-exit-on-ready.ts')]);\n  child.stdout?.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"log and exit before ready","suites":[],"updatePoint":{"line":210,"column":31,"index":5523},"line":210,"code":"test('log and exit before ready', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], ['-r', 'ts-node/register', join(__dirname, '..', 'fixtures', 'ts', 'transport-exit-immediately.ts')]);\n  child.stdout?.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"log and exit before ready with async dest","suites":[],"updatePoint":{"line":222,"column":47,"index":5914},"line":222,"code":"test('log and exit before ready with async dest', async ({\n  not\n}) => {\n  const destination = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const child = execa(process.argv[0], ['-r', 'ts-node/register', join(__dirname, '..', 'fixtures', 'ts', 'transport-exit-immediately-with-async-dest.ts'), destination]);\n  await once(child, 'exit');\n  const actual = await readFile(destination, {\n    encoding: 'utf8'\n  });\n  not(strip(actual).match(/HELLO/), null);\n  not(strip(actual).match(/WORLD/), null);\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"string integer destination","suites":[],"updatePoint":{"line":234,"column":32,"index":6424},"line":234,"code":"test('string integer destination', async ({\n  not\n}) => {\n  let actual = '';\n  const child = execa(process.argv[0], ['-r', 'ts-node/register', join(__dirname, '..', 'fixtures', 'ts', 'transport-string-stdout.ts')]);\n  child.stdout?.pipe(writer((s, enc, cb) => {\n    actual += s;\n    cb();\n  }));\n  await once(child, 'close');\n  not(strip(actual).match(/Hello/), null);\n});","file":"transport/core.test.ts","skipped":false,"dir":"test"},{"name":"(ts -> ) pino.transport with file","suites":[],"updatePoint":{"line":20,"column":53,"index":631},"line":20,"code":"  test(`(ts -> ${esVersion}) pino.transport with file`, async ({\n    same,\n    teardown\n  }) => {\n    const destination = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n    const transport = pino.transport({\n      target: join(__dirname, '..', 'fixtures', 'ts', `to-file-transport.${esVersion}.cjs`),\n      options: {\n        destination\n      }\n    });\n    teardown(transport.end.bind(transport));\n    const instance = pino(transport);\n    instance.info('hello');\n    await watchFileCreated(destination);\n    const result = JSON.parse(await readFile(destination, {\n      encoding: 'utf8'\n    }));\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'hello'\n    });\n  });","file":"transport/core.transpiled.test.ts","skipped":false,"dir":"test"},{"name":"(ts -> ) pino.transport with file URL","suites":[],"updatePoint":{"line":46,"column":57,"index":1372},"line":46,"code":"  test(`(ts -> ${esVersion}) pino.transport with file URL`, async ({\n    same,\n    teardown\n  }) => {\n    const destination = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n    const transport = pino.transport({\n      target: url.pathToFileURL(join(__dirname, '..', 'fixtures', 'ts', `to-file-transport.${esVersion}.cjs`)).href,\n      options: {\n        destination\n      }\n    });\n    teardown(transport.end.bind(transport));\n    const instance = pino(transport);\n    instance.info('hello');\n    await watchFileCreated(destination);\n    const result = JSON.parse(await readFile(destination, {\n      encoding: 'utf8'\n    }));\n    delete result.time;\n    same(result, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'hello'\n    });\n  });","file":"transport/core.transpiled.test.ts","skipped":false,"dir":"test"},{"name":"(ts -> ) pino.transport with two files","suites":[],"updatePoint":{"line":72,"column":58,"index":2138},"line":72,"code":"  test(`(ts -> ${esVersion}) pino.transport with two files`, async ({\n    same,\n    teardown\n  }) => {\n    const dest1 = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n    const dest2 = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n    const transport = pino.transport({\n      targets: [{\n        level: 'info',\n        target: join(__dirname, '..', 'fixtures', 'ts', `to-file-transport.${esVersion}.cjs`),\n        options: {\n          destination: dest1\n        }\n      }, {\n        level: 'info',\n        target: join(__dirname, '..', 'fixtures', 'ts', `to-file-transport.${esVersion}.cjs`),\n        options: {\n          destination: dest2\n        }\n      }]\n    });\n    teardown(transport.end.bind(transport));\n    const instance = pino(transport);\n    instance.info('hello');\n    await Promise.all([watchFileCreated(dest1), watchFileCreated(dest2)]);\n    const result1 = JSON.parse(await readFile(dest1, {\n      encoding: 'utf8'\n    }));\n    delete result1.time;\n    same(result1, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'hello'\n    });\n    const result2 = JSON.parse(await readFile(dest2, {\n      encoding: 'utf8'\n    }));\n    delete result2.time;\n    same(result2, {\n      pid,\n      hostname,\n      level: 30,\n      msg: 'hello'\n    });\n  });","file":"transport/core.transpiled.test.ts","skipped":false,"dir":"test"},{"name":"pino.transport with package","suites":[],"updatePoint":{"line":53,"column":33,"index":1024},"line":53,"code":"test('pino.transport with package', {\n  skip: isWin\n}, async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  await installTransportModule();\n  const transport = pino.transport({\n    target: 'transport',\n    options: {\n      destination\n    }\n  });\n  teardown(async () => {\n    await uninstallTransportModule();\n    transport.end();\n  });\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/module-link.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with package as a target","suites":[],"updatePoint":{"line":85,"column":45,"index":1691},"line":85,"code":"test('pino.transport with package as a target', {\n  skip: isWin\n}, async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  await installTransportModule();\n  const transport = pino.transport({\n    targets: [{\n      target: 'transport',\n      options: {\n        destination\n      }\n    }]\n  });\n  teardown(async () => {\n    await uninstallTransportModule();\n    transport.end();\n  });\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/module-link.test.js","skipped":false,"dir":"test"},{"name":"pino({ transport })","suites":[],"updatePoint":{"line":119,"column":25,"index":2369},"line":119,"code":"test('pino({ transport })', {\n  skip: isWin || isYarnPnp\n}, async ({\n  same,\n  teardown\n}) => {\n  const folder = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  teardown(() => {\n    rimraf.sync(folder);\n  });\n  const destination = join(folder, 'output');\n  await mkdir(join(folder, 'node_modules'), {\n    recursive: true\n  });\n\n  // Link pino\n  await symlink(join(__dirname, '..', '..'), join(folder, 'node_modules', 'pino'));\n  await installTransportModule(folder);\n  const toRun = join(folder, 'index.js');\n  const toRunContent = `\n    const pino = require('pino')\n    const logger = pino({\n      transport: {\n        target: 'transport',\n        options: { destination: '${destination}' }\n      }\n    })\n    logger.info('hello')\n  `;\n  await writeFile(toRun, toRunContent);\n  const child = execa(process.argv[0], [toRun]);\n  await once(child, 'close');\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid: child.pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/module-link.test.js","skipped":false,"dir":"test"},{"name":"pino({ transport }) from a wrapped dependency","suites":[],"updatePoint":{"line":162,"column":51,"index":3484},"line":162,"code":"test('pino({ transport }) from a wrapped dependency', {\n  skip: isWin || isYarnPnp\n}, async ({\n  same,\n  teardown\n}) => {\n  const folder = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const wrappedFolder = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));\n  const destination = join(folder, 'output');\n  await mkdir(join(folder, 'node_modules'), {\n    recursive: true\n  });\n  await mkdir(join(wrappedFolder, 'node_modules'), {\n    recursive: true\n  });\n  teardown(() => {\n    rimraf.sync(wrappedFolder);\n    rimraf.sync(folder);\n  });\n\n  // Link pino\n  await symlink(join(__dirname, '..', '..'), join(wrappedFolder, 'node_modules', 'pino'));\n\n  // Link get-caller-file\n  await symlink(join(__dirname, '..', '..', 'node_modules', 'get-caller-file'), join(wrappedFolder, 'node_modules', 'get-caller-file'));\n\n  // Link wrapped\n  await symlink(wrappedFolder, join(folder, 'node_modules', 'wrapped'));\n  await installTransportModule(folder);\n  const pkgjsonContent = {\n    name: 'pino'\n  };\n  await writeFile(join(wrappedFolder, 'package.json'), JSON.stringify(pkgjsonContent));\n  const wrapped = join(wrappedFolder, 'index.js');\n  const wrappedContent = `\n    const pino = require('pino')\n    const getCaller = require('get-caller-file')\n\n    module.exports = function build () {\n      const logger = pino({\n        transport: {\n          caller: getCaller(),\n          target: 'transport',\n          options: { destination: '${destination}' }\n        }\n      })\n      return logger\n    }\n  `;\n  await writeFile(wrapped, wrappedContent);\n  const toRun = join(folder, 'index.js');\n  const toRunContent = `\n    const logger = require('wrapped')()\n    logger.info('hello')\n  `;\n  await writeFile(toRun, toRunContent);\n  const child = execa(process.argv[0], [toRun]);\n  await once(child, 'close');\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid: child.pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/module-link.test.js","skipped":false,"dir":"test"},{"name":"pino.transport with a pipeline","suites":[],"updatePoint":{"line":22,"column":36,"index":348},"line":22,"code":"test('pino.transport with a pipeline', async ({\n  same,\n  teardown\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    pipeline: [{\n      target: join(__dirname, '..', 'fixtures', 'transport-transform.js')\n    }, {\n      target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n      options: {\n        destination\n      }\n    }]\n  });\n  teardown(transport.end.bind(transport));\n  const instance = pino(transport);\n  instance.info('hello');\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello',\n    service: 'pino' // this property was added by the transform\n  });\n});","file":"transport/pipeline.test.js","skipped":false,"dir":"test"},{"name":"pino.transport resolves targets in REPL","suites":[],"updatePoint":{"line":8,"column":45,"index":154},"line":8,"code":"test('pino.transport resolves targets in REPL', async ({\n  same\n}) => {\n  // Arrange\n  const transport = proxyquire('../../lib/transport', {\n    './caller': () => ['node:repl']\n  });\n\n  // Act / Assert\n  doesNotThrow(() => transport({\n    target: 'pino-pretty'\n  }));\n});","file":"transport/repl.test.js","skipped":false,"dir":"test"},{"name":"thread-stream async flush","suites":[],"updatePoint":{"line":22,"column":31,"index":342},"line":22,"code":"test('thread-stream async flush', async ({\n  same\n}) => {\n  const destination = file();\n  const transport = pino.transport({\n    target: join(__dirname, '..', 'fixtures', 'to-file-transport.js'),\n    options: {\n      destination\n    }\n  });\n  const instance = pino(transport);\n  instance.info('hello');\n  instance.flush();\n  await watchFileCreated(destination);\n  const result = JSON.parse(await readFile(destination));\n  delete result.time;\n  same(result, {\n    pid,\n    hostname,\n    level: 30,\n    msg: 'hello'\n  });\n});","file":"transport/syncfalse.test.js","skipped":false,"dir":"test"},{"name":"file-target mocked","suites":[],"updatePoint":{"line":8,"column":24,"index":162},"line":8,"code":"test('file-target mocked', async function ({\n  equal,\n  same,\n  plan,\n  pass\n}) {\n  plan(1);\n  let ret;\n  const fileTarget = proxyquire('../../file', {\n    './pino': {\n      destination(opts) {\n        same(opts, {\n          dest: 1,\n          sync: false\n        });\n        ret = new Writable();\n        ret.fd = opts.dest;\n        process.nextTick(() => {\n          ret.emit('ready');\n        });\n        return ret;\n      }\n    }\n  });\n  await fileTarget();\n});","file":"transport/targets.test.js","skipped":false,"dir":"test"}]}