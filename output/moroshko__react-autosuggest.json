{"repo":"moroshko/react-autosuggest","url":"https://github.com/moroshko/react-autosuggest","branch":"master","configs":[{"package":"react-autosuggest","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should render suggestions","suites":["Autosuggest with alwaysRenderSuggestions={true}","initially"],"updatePoint":{"line":12,"column":33,"index":822},"line":12,"code":"    it('should render suggestions', () => {\n      expectSuggestions(allSuggestions);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should render suggestions","suites":["Autosuggest with alwaysRenderSuggestions={true}","when empty input is focused"],"updatePoint":{"line":17,"column":33,"index":971},"line":17,"code":"    it('should render suggestions', () => {\n      focusInput();\n      expectSuggestions(allSuggestions);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should render suggestions","suites":["Autosuggest with alwaysRenderSuggestions={true}","when empty input is blurred"],"updatePoint":{"line":23,"column":33,"index":1140},"line":23,"code":"    it('should render suggestions', () => {\n      focusInput();\n      blurInput();\n      expectSuggestions(allSuggestions);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should render suggestions","suites":["Autosuggest with alwaysRenderSuggestions={true}","when typing and matches exist"],"updatePoint":{"line":33,"column":33,"index":1395},"line":33,"code":"    it('should render suggestions', () => {\n      expectSuggestions(['Elm']);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should render suggestions when input is blurred","suites":["Autosuggest with alwaysRenderSuggestions={true}","when typing and matches exist"],"updatePoint":{"line":36,"column":55,"index":1503},"line":36,"code":"    it('should render suggestions when input is blurred', () => {\n      blurInput();\n      expectSuggestions(['Elm']);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Down"],"updatePoint":{"line":42,"column":45,"index":1667},"line":42,"code":"    it('should highlight the first suggestion', () => {\n      focusAndSetInputValue('p');\n      clickDown();\n      expectHighlightedSuggestion('Perl');\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the last suggestion","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Up"],"updatePoint":{"line":49,"column":44,"index":1871},"line":49,"code":"    it('should highlight the last suggestion', () => {\n      focusAndSetInputValue('p');\n      clickUp();\n      expectHighlightedSuggestion('Python');\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should update suggestions if there is a highlighted suggestion","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Enter"],"updatePoint":{"line":59,"column":70,"index":2169},"line":59,"code":"    it('should update suggestions if there is a highlighted suggestion', () => {\n      clickDown();\n      clickEnter();\n      expectSuggestions(['Perl']);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not hide suggestions if there is no highlighted suggestion","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Enter"],"updatePoint":{"line":64,"column":73,"index":2335},"line":64,"code":"    it('should not hide suggestions if there is no highlighted suggestion', () => {\n      clickEnter();\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not hide suggestions if enter event for combined character","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Enter"],"updatePoint":{"line":68,"column":73,"index":2499},"line":68,"code":"    it('should not hide suggestions if enter event for combined character', () => {\n      clickCombinedCharacterEnter();\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Escape","without prior Up/Down interaction"],"updatePoint":{"line":78,"column":32,"index":2811},"line":78,"code":"      it('should clear the input', () => {\n        clickEscape();\n        expectInputValue('');\n      });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should revert input value","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Escape","after Up/Down interaction"],"updatePoint":{"line":88,"column":35,"index":3057},"line":88,"code":"      it('should revert input value', () => {\n        expectInputValue('p');\n      });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should reset the highlighted suggestion","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Escape","after Up/Down interaction"],"updatePoint":{"line":91,"column":49,"index":3158},"line":91,"code":"      it('should reset the highlighted suggestion', () => {\n        expectHighlightedSuggestion(null);\n      });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input when Escape is pressed again","suites":["Autosuggest with alwaysRenderSuggestions={true}","when pressing Escape","after Up/Down interaction"],"updatePoint":{"line":94,"column":61,"index":3283},"line":94,"code":"      it('should clear the input when Escape is pressed again', () => {\n        clickEscape();\n        expectInputValue('');\n      });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not hide suggestions","suites":["Autosuggest with alwaysRenderSuggestions={true}","when suggestion is clicked"],"updatePoint":{"line":101,"column":35,"index":3455},"line":101,"code":"    it('should not hide suggestions', () => {\n      focusAndSetInputValue('p');\n      clickSuggestion(1);\n      expectSuggestions(['PHP']);\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should reset the highlighted suggestion","suites":["Autosuggest with alwaysRenderSuggestions={true}","when suggestion is clicked"],"updatePoint":{"line":106,"column":47,"index":3615},"line":106,"code":"    it('should reset the highlighted suggestion', () => {\n      focusAndSetInputValue('j');\n      clickSuggestion(1);\n      clickDown();\n      expectHighlightedSuggestion('JavaScript');\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when suggestion is selected","suites":["Autosuggest with alwaysRenderSuggestions={true}","onSuggestionsFetchRequested"],"updatePoint":{"line":114,"column":83,"index":3901},"line":114,"code":"    it('should be called once with the right parameters when suggestion is selected', () => {\n      focusAndSetInputValue('j');\n      onSuggestionsFetchRequested.resetHistory();\n      clickSuggestion(1);\n      expect(onSuggestionsFetchRequested).to.have.been.calledOnce;\n      expect(onSuggestionsFetchRequested).to.have.been.calledWithExactly({\n        value: 'JavaScript',\n        reason: 'suggestion-selected'\n      });\n    });","file":"always-render-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions when they arrive","suites":["Autosuggest that gets suggestions asynchronously","when typing and matches exist"],"updatePoint":{"line":14,"column":48,"index":634},"line":14,"code":"    it('should show suggestions when they arrive', () => {\n      expectSuggestions(['Java', 'JavaScript']);\n    });","file":"async-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not show previous suggestions when revealing suggestions","suites":["Autosuggest that gets suggestions asynchronously","when typing and matches exist"],"updatePoint":{"line":17,"column":71,"index":773},"line":17,"code":"    it('should not show previous suggestions when revealing suggestions', () => {\n      setInputValue('');\n      setInputValue('p');\n      expectSuggestions([]);\n    });","file":"async-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions","suites":["Autosuggest that gets suggestions asynchronously","when suggestion is clicked"],"updatePoint":{"line":28,"column":31,"index":1040},"line":28,"code":"    it('should hide suggestions', () => {\n      clickSuggestion(1);\n      tick(500);\n      expectSuggestions([]);\n    });","file":"async-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions","suites":["Autosuggest that gets suggestions asynchronously","when pressing Enter"],"updatePoint":{"line":39,"column":31,"index":1292},"line":39,"code":"    it('should hide suggestions', () => {\n      clickDown();\n      clickEnter();\n      tick(500);\n      expectSuggestions([]);\n    });","file":"async-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not error if suggestions were cleared after having suggestions","suites":["Autosuggest that gets suggestions asynchronously","when pressing Enter"],"updatePoint":{"line":45,"column":77,"index":1473},"line":45,"code":"    it('should not error if suggestions were cleared after having suggestions', () => {\n      focusAndSetInputValue('pz');\n      tick(100);\n      clickEnter();\n      expectSuggestions([]);\n    });","file":"async-suggestions/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should return  for  and ","suites":["compareObjects"],"updatePoint":{"line":216,"column":122,"index":2282},"line":216,"code":"    it(`should return ${result} for ${JSON.stringify(objA)} and ${JSON.stringify(objB)}${keys ? ` with keys ${keys}` : ''}`, () => {\n      expect(compareObjects(objA, objB, keys)).to.equal(result);\n    });","file":"autowhatever/compareObjects.test.js","skipped":false,"dir":"test"},{"name":"if renderItem is not provided","suites":["Autowhatever default props","should throw"],"updatePoint":{"line":12,"column":37,"index":460},"line":12,"code":"    it('if renderItem is not provided', () => {\n      const renderWithoutRenderItems = () => render({\n        renderSectionTitle: () => 'Section',\n        getSectionItems: () => ['item']\n      });\n      expect(renderWithoutRenderItems).to.throw('renderItem');\n    });","file":"autowhatever/default-props/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"if renderSectionTitle is not provided","suites":["Autowhatever default props","should throw"],"updatePoint":{"line":19,"column":45,"index":736},"line":19,"code":"    it('if renderSectionTitle is not provided', () => {\n      const renderWithoutRenderItems = () => render({\n        getSectionItems: () => ['item'],\n        renderItem: () => null\n      });\n      expect(renderWithoutRenderItems).to.throw('renderSectionTitle');\n    });","file":"autowhatever/default-props/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"if getSectionItems is not provided","suites":["Autowhatever default props","should throw"],"updatePoint":{"line":26,"column":42,"index":1004},"line":26,"code":"    it('if getSectionItems is not provided', () => {\n      const renderWithoutRenderItems = () => render({\n        renderSectionTitle: () => 'Section'\n      });\n      expect(renderWithoutRenderItems).to.throw('getSectionItems');\n    });","file":"autowhatever/default-props/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should store the ref","suites":["Autowhatever with functional ref"],"updatePoint":{"line":10,"column":26,"index":435},"line":10,"code":"  it('should store the ref', () => {\n    expect(getStoredInput()).to.equal(getInputRef());\n  });","file":"autowhatever/function-ref/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should be called once for every section","suites":["Multi Section Autowhatever","renderSectionTitle"],"updatePoint":{"line":16,"column":47,"index":741},"line":16,"code":"    it('should be called once for every section', () => {\n      expect(renderSectionTitle).to.have.callCount(3);\n      expect(renderSectionTitle.getCall(0).args[0]).to.deep.equal(sections[0]);\n      expect(renderSectionTitle.getCall(1).args[0]).to.deep.equal(sections[1]);\n      expect(renderSectionTitle.getCall(2).args[0]).to.deep.equal(sections[2]);\n    });","file":"autowhatever/multi-section/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Down is pressed","suites":["Multi Section Autowhatever","renderSectionTitle"],"updatePoint":{"line":22,"column":49,"index":1104},"line":22,"code":"    it('should not be called when Down is pressed', () => {\n      renderSectionTitle.resetHistory();\n      clickDown();\n      expect(renderSectionTitle).not.to.have.been.called;\n    });","file":"autowhatever/multi-section/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should be called once for every section","suites":["Multi Section Autowhatever","getSectionItems"],"updatePoint":{"line":29,"column":47,"index":1332},"line":29,"code":"    it('should be called once for every section', () => {\n      expect(getSectionItems).to.have.callCount(3);\n      expect(getSectionItems.getCall(0).args[0]).to.deep.equal(sections[0]);\n      expect(getSectionItems.getCall(1).args[0]).to.deep.equal(sections[1]);\n      expect(getSectionItems.getCall(2).args[0]).to.deep.equal(sections[2]);\n    });","file":"autowhatever/multi-section/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Down is pressed","suites":["Multi Section Autowhatever","getSectionItems"],"updatePoint":{"line":35,"column":49,"index":1683},"line":35,"code":"    it('should not be called when Down is pressed', () => {\n      getSectionItems.resetHistory();\n      clickDown();\n      expect(getSectionItems).not.to.have.been.called;\n    });","file":"autowhatever/multi-section/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right parameters when Up/Down is pressed","suites":["Multi Section Autowhatever","inputProps.onKeyDown"],"updatePoint":{"line":42,"column":74,"index":1937},"line":42,"code":"    it('should be called with the right parameters when Up/Down is pressed', () => {\n      clickDown();\n      expect(onKeyDown).to.be.calledOnce;\n      expect(onKeyDown).to.be.calledWith(syntheticEventMatcher, {\n        newHighlightedSectionIndex: 0,\n        newHighlightedItemIndex: 0\n      });\n      clickDown();\n      expect(onKeyDown).to.be.calledWith(syntheticEventMatcher, {\n        newHighlightedSectionIndex: 0,\n        newHighlightedItemIndex: 1\n      });\n      clickDown();\n      expect(onKeyDown).to.be.calledWith(syntheticEventMatcher, {\n        newHighlightedSectionIndex: 1,\n        newHighlightedItemIndex: 0\n      });\n      clickDown();\n      expect(onKeyDown).to.be.calledWith(syntheticEventMatcher, {\n        newHighlightedSectionIndex: 2,\n        newHighlightedItemIndex: 0\n      });\n      clickDown();\n      expect(onKeyDown).to.be.calledWith(syntheticEventMatcher, {\n        newHighlightedSectionIndex: null,\n        newHighlightedItemIndex: null\n      });\n    });","file":"autowhatever/multi-section/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right parameters when Enter is pressed","suites":["Multi Section Autowhatever","inputProps.onKeyDown"],"updatePoint":{"line":70,"column":72,"index":2921},"line":70,"code":"    it('should be called with the right parameters when Enter is pressed', () => {\n      clickEnter();\n      expect(onKeyDown).to.be.calledWith(syntheticEventMatcher, {\n        highlightedSectionIndex: null,\n        highlightedItemIndex: null\n      });\n      clickUp();\n      clickEnter();\n      expect(onKeyDown).to.be.calledWith(syntheticEventMatcher, {\n        highlightedSectionIndex: 2,\n        highlightedItemIndex: 0\n      });\n    });","file":"autowhatever/multi-section/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should set container's `aria-owns` to items container's `id`","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":12,"column":68,"index":745},"line":12,"code":"    it(\"should set container's `aria-owns` to items container's `id`\", () => {\n      expect(getContainerAttribute('aria-owns')).to.equal(getItemsContainerAttribute('id'));\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should set input's `aria-controls` to items container's `id`","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":15,"column":68,"index":925},"line":15,"code":"    it(\"should set input's `aria-controls` to items container's `id`\", () => {\n      expect(getInputAttribute('aria-controls')).to.equal(getItemsContainerAttribute('id'));\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should render all items","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":18,"column":31,"index":1068},"line":18,"code":"    it('should render all items', () => {\n      expect(getItems()).to.be.of.length(5);\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should call `renderItem` exactly `items.length` times","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":21,"column":61,"index":1193},"line":21,"code":"    it('should call `renderItem` exactly `items.length` times', () => {\n      expect(renderItem).to.have.callCount(5);\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should store the input on the instance","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":24,"column":46,"index":1305},"line":24,"code":"    it('should store the input on the instance', () => {\n      expect(getStoredInput().getAttribute('id')).to.equal('my-fancy-input');\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should store the items container on the instance","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":27,"column":56,"index":1458},"line":27,"code":"    it('should store the items container on the instance', () => {\n      expect(getStoredItemsContainer().getAttribute('id')).to.equal('react-autowhatever-my-fancy-component');\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should set the stored highlighted item on the instance to null","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":30,"column":70,"index":1657},"line":30,"code":"    it('should set the stored highlighted item on the instance to null', () => {\n      expect(getStoredHighlightedItem()).to.equal(null);\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should set current input ref","suites":["Plain List Autowhatever","initially"],"updatePoint":{"line":33,"column":36,"index":1769},"line":33,"code":"    it('should set current input ref', () => {\n      expect(getStoredInput()).to.equal(getInputRef().current);\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should call `renderItem` once with the right parameters when item is entered","suites":["Plain List Autowhatever","hovering items"],"updatePoint":{"line":38,"column":84,"index":1979},"line":38,"code":"    it('should call `renderItem` once with the right parameters when item is entered', () => {\n      renderItem.resetHistory();\n      mouseEnterItem(0);\n      expect(renderItem).to.have.been.calledOnce;\n      expect(renderItem).to.be.calledWith({\n        text: 'Apple'\n      });\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should call `renderItem` twice when the highlighted item is changed","suites":["Plain List Autowhatever","hovering items"],"updatePoint":{"line":46,"column":75,"index":2257},"line":46,"code":"    it('should call `renderItem` twice when the highlighted item is changed', () => {\n      mouseEnterItem(1);\n      renderItem.resetHistory();\n      mouseLeaveItem(1);\n      mouseEnterItem(2);\n      expect(renderItem).to.have.been.calledTwice;\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should call `renderItem` with `isHighlighted` flag","suites":["Plain List Autowhatever","hovering items"],"updatePoint":{"line":53,"column":58,"index":2493},"line":53,"code":"    it('should call `renderItem` with `isHighlighted` flag', () => {\n      renderItem.resetHistory();\n      mouseEnterItem(0);\n      expect(renderItem).to.have.been.calledOnce;\n      expect(renderItem).to.be.calledWith({\n        text: 'Apple'\n      }, {\n        isHighlighted: true\n      });\n      renderItem.resetHistory();\n      mouseLeaveItem(0);\n      expect(renderItem).to.have.been.calledOnce;\n      expect(renderItem).to.be.calledWith({\n        text: 'Apple'\n      }, {\n        isHighlighted: false\n      });\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should set `aria-selected` to true on highlighted items","suites":["Plain List Autowhatever","hovering items"],"updatePoint":{"line":71,"column":63,"index":3022},"line":71,"code":"    it('should set `aria-selected` to true on highlighted items', () => {\n      renderItem.resetHistory();\n      mouseEnterItem(0);\n      expect(getItem(0).getAttribute('aria-selected')).to.equal('true');\n      renderItem.resetHistory();\n      mouseLeaveItem(0);\n      expect(getItem(0).getAttribute('aria-selected')).to.equal('false');\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should call `renderItem` once when item is left","suites":["Plain List Autowhatever","hovering items"],"updatePoint":{"line":79,"column":55,"index":3359},"line":79,"code":"    it('should call `renderItem` once when item is left', () => {\n      mouseEnterItem(3);\n      renderItem.resetHistory();\n      mouseLeaveItem(3);\n      expect(renderItem).to.have.been.calledOnce;\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should not call `renderItem` when item is clicked","suites":["Plain List Autowhatever","hovering items"],"updatePoint":{"line":85,"column":57,"index":3568},"line":85,"code":"    it('should not call `renderItem` when item is clicked', () => {\n      renderItem.resetHistory();\n      mouseDownItem(4);\n      clickItem(4);\n      expect(renderItem).not.to.have.been.called;\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should store the highlighted item on the instance","suites":["Plain List Autowhatever","hovering items"],"updatePoint":{"line":91,"column":57,"index":3771},"line":91,"code":"    it('should store the highlighted item on the instance', () => {\n      mouseEnterItem(2);\n      expect(getStoredHighlightedItem().getAttribute('id')).to.equal('react-autowhatever-my-fancy-component--item-2');\n      mouseLeaveItem(2);\n      expect(getStoredHighlightedItem()).to.equal(null);\n      mouseEnterItem(3);\n      expect(getStoredHighlightedItem().getAttribute('id')).to.equal('react-autowhatever-my-fancy-component--item-3');\n    });","file":"autowhatever/plain-list/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should set items container id properly","suites":["Autowhatever with renderItemsContainer"],"updatePoint":{"line":12,"column":44,"index":618},"line":12,"code":"  it('should set items container id properly', () => {\n    expect(getItemsContainerAttribute('id')).to.equal('react-autowhatever-my-id');\n  });","file":"autowhatever/render-items-container/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should render whatever renderItemsContainer returns","suites":["Autowhatever with renderItemsContainer"],"updatePoint":{"line":15,"column":57,"index":775},"line":15,"code":"  it('should render whatever renderItemsContainer returns', () => {\n    expect(getElementWithClass('my-items-container-footer')).not.to.equal(null);\n  });","file":"autowhatever/render-items-container/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should call renderItemsContainer once with the right parameters","suites":["Autowhatever with renderItemsContainer"],"updatePoint":{"line":18,"column":69,"index":942},"line":18,"code":"  it('should call renderItemsContainer once with the right parameters', () => {\n    expect(renderItemsContainer).to.have.been.calledOnce;\n    expect(renderItemsContainer).to.be.calledWith({\n      children: childrenMatcher,\n      containerProps: containerPropsMatcher\n    });\n  });","file":"autowhatever/render-items-container/Autowhatever.test.js","skipped":false,"dir":"test"},{"name":"should not focus on input","suites":["Autosuggest with focusInputOnSuggestionClick={false}","when suggestion is clicked"],"updatePoint":{"line":17,"column":33,"index":773},"line":17,"code":"    it('should not focus on input', () => {\n      expect(isInputFocused()).to.equal(false);\n    });","file":"do-not-focus-input-on-suggestion-click/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should call onBlur once with the right parameters","suites":["Autosuggest with focusInputOnSuggestionClick={false}","when suggestion is clicked"],"updatePoint":{"line":20,"column":57,"index":897},"line":20,"code":"    it('should call onBlur once with the right parameters', () => {\n      expect(onBlur).to.have.been.calledOnce;\n      expect(onBlur).to.have.been.calledWithExactly(syntheticEventMatcher, {\n        highlightedSuggestion: {\n          name: 'PHP',\n          year: 1995\n        }\n      });\n    });","file":"do-not-focus-input-on-suggestion-click/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should call onSuggestionsClearRequested once","suites":["Autosuggest with focusInputOnSuggestionClick={false}","when suggestion is clicked"],"updatePoint":{"line":29,"column":52,"index":1188},"line":29,"code":"    it('should call onSuggestionsClearRequested once', () => {\n      expect(onSuggestionsClearRequested).to.have.been.calledOnce;\n    });","file":"do-not-focus-input-on-suggestion-click/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not focus input on document mouse up","suites":["Autosuggest with focusInputOnSuggestionClick={false}","when suggestion is clicked"],"updatePoint":{"line":32,"column":51,"index":1325},"line":32,"code":"    it('should not focus input on document mouse up', () => {\n      mouseUpDocument();\n      expect(isInputFocused()).to.equal(false);\n    });","file":"do-not-focus-input-on-suggestion-click/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input after selecting the first suggestion","suites":["Autosuggest with highlightFirstSuggestion={true} and clear on Enter","when pressing Enter"],"updatePoint":{"line":14,"column":67,"index":697},"line":14,"code":"    it('should clear the input after selecting the first suggestion', () => {\n      clickEnter();\n      expectInputValue('');\n    });","file":"focus-first-suggestion-clear-on-enter/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input after selecting the second suggestion","suites":["Autosuggest with highlightFirstSuggestion={true} and clear on Enter","when pressing Enter"],"updatePoint":{"line":18,"column":68,"index":832},"line":18,"code":"    it('should clear the input after selecting the second suggestion', () => {\n      clickDown();\n      clickEnter();\n      expectInputValue('');\n    });","file":"focus-first-suggestion-clear-on-enter/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called after inputProps.onChange when Enter is pressed","suites":["Autosuggest with highlightFirstSuggestion={true} and clear on Enter","onSuggestionSelected"],"updatePoint":{"line":29,"column":72,"index":1147},"line":29,"code":"    it('should be called after inputProps.onChange when Enter is pressed', () => {\n      onChange.resetHistory();\n      clearEvents();\n      clickEnter();\n      expect(getEvents()).to.deep.equal(['onChange', 'onSuggestionSelected']);\n    });","file":"focus-first-suggestion-clear-on-enter/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should unhighlight the suggestion","suites":["Autosuggest with highlightFirstSuggestion={true}","when highlightFirstSuggestion changes from true to false"],"updatePoint":{"line":12,"column":41,"index":859},"line":12,"code":"    it(\"should unhighlight the suggestion\", () => {\n      focusAndSetInputValue('j');\n      expectHighlightedSuggestion('Java');\n      setHighlightFirstSuggestion(false);\n      expectHighlightedSuggestion(null);\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should retain the selected suggestion if it was set manually","suites":["Autosuggest with highlightFirstSuggestion={true}","when highlightFirstSuggestion changes from true to false"],"updatePoint":{"line":18,"column":68,"index":1106},"line":18,"code":"    it(\"should retain the selected suggestion if it was set manually\", () => {\n      focusAndSetInputValue('j');\n      expectHighlightedSuggestion('Java');\n      clickDown();\n      expectHighlightedSuggestion('JavaScript');\n      setHighlightFirstSuggestion(false);\n      expectHighlightedSuggestion('JavaScript');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should re-highlight the suggestion if it becomes true again","suites":["Autosuggest with highlightFirstSuggestion={true}","when highlightFirstSuggestion changes from true to false"],"updatePoint":{"line":26,"column":67,"index":1428},"line":26,"code":"    it(\"should re-highlight the suggestion if it becomes true again\", () => {\n      focusAndSetInputValue('j');\n      expectHighlightedSuggestion('Java');\n      setHighlightFirstSuggestion(false);\n      expectHighlightedSuggestion(null);\n      setHighlightFirstSuggestion(true);\n      expectHighlightedSuggestion('Java');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion","suites":["Autosuggest with highlightFirstSuggestion={true}","when typing and matches exist"],"updatePoint":{"line":39,"column":45,"index":1859},"line":39,"code":"    it('should highlight the first suggestion', () => {\n      expectHighlightedSuggestion('Java');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion when typing a character does not change the suggestions","suites":["Autosuggest with highlightFirstSuggestion={true}","when typing and matches exist"],"updatePoint":{"line":42,"column":101,"index":2022},"line":42,"code":"    it('should highlight the first suggestion when typing a character does not change the suggestions', () => {\n      focusAndSetInputValue('ja');\n      expectHighlightedSuggestion('Java');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion when input is focused after it has been blurred","suites":["Autosuggest with highlightFirstSuggestion={true}","when typing and matches exist"],"updatePoint":{"line":46,"column":93,"index":2212},"line":46,"code":"    it('should highlight the first suggestion when input is focused after it has been blurred', () => {\n      blurInput();\n      focusInput();\n      expectHighlightedSuggestion('Java');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion when same suggestions are shown again","suites":["Autosuggest with highlightFirstSuggestion={true}","when typing and matches exist"],"updatePoint":{"line":51,"column":83,"index":2396},"line":51,"code":"    it('should highlight the first suggestion when same suggestions are shown again', () => {\n      setInputValue('');\n      setInputValue('j');\n      expectHighlightedSuggestion('Java');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight a suggestion when mouse enters it","suites":["Autosuggest with highlightFirstSuggestion={true}","when typing and matches exist"],"updatePoint":{"line":56,"column":58,"index":2567},"line":56,"code":"    it('should highlight a suggestion when mouse enters it', () => {\n      mouseEnterSuggestion(1);\n      expectHighlightedSuggestion('JavaScript');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not have highlighted suggestions when mouse leaves a suggestion","suites":["Autosuggest with highlightFirstSuggestion={true}","when typing and matches exist"],"updatePoint":{"line":60,"column":78,"index":2744},"line":60,"code":"    it('should not have highlighted suggestions when mouse leaves a suggestion', () => {\n      mouseEnterSuggestion(1);\n      mouseLeaveSuggestion(1);\n      expectHighlightedSuggestion(null);\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the second suggestion","suites":["Autosuggest with highlightFirstSuggestion={true}","when pressing Down"],"updatePoint":{"line":70,"column":46,"index":3024},"line":70,"code":"    it('should highlight the second suggestion', () => {\n      clickDown();\n      expectHighlightedSuggestion('JavaScript');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not highlight any suggestion after reaching the last suggestion","suites":["Autosuggest with highlightFirstSuggestion={true}","when pressing Down"],"updatePoint":{"line":74,"column":78,"index":3189},"line":74,"code":"    it('should not highlight any suggestion after reaching the last suggestion', () => {\n      clickDown(2);\n      expectHighlightedSuggestion(null);\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion when suggestions are revealed","suites":["Autosuggest with highlightFirstSuggestion={true}","when pressing Down"],"updatePoint":{"line":78,"column":75,"index":3344},"line":78,"code":"    it('should highlight the first suggestion when suggestions are revealed', () => {\n      clickEscape();\n      clickDown();\n      expectHighlightedSuggestion('Java');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions if the first suggestion was autohighlighted","suites":["Autosuggest with highlightFirstSuggestion={true}","when pressing Enter"],"updatePoint":{"line":85,"column":75,"index":3569},"line":85,"code":"    it('should hide suggestions if the first suggestion was autohighlighted', () => {\n      focusAndSetInputValue('p');\n      clickEnter();\n      expectSuggestions([]);\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions if mouse entered another suggestion after autohighlight","suites":["Autosuggest with highlightFirstSuggestion={true}","when pressing Enter"],"updatePoint":{"line":90,"column":87,"index":3758},"line":90,"code":"    it('should hide suggestions if mouse entered another suggestion after autohighlight', () => {\n      focusAndSetInputValue('p');\n      mouseEnterSuggestion(2);\n      clickEnter();\n      expectSuggestions([]);\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not error if there are no suggestions","suites":["Autosuggest with highlightFirstSuggestion={true}","when pressing Enter"],"updatePoint":{"line":96,"column":52,"index":3943},"line":96,"code":"    it('should not error if there are no suggestions', () => {\n      focusAndSetInputValue('z');\n      clickEnter();\n      expectInputValue('z');\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Enter is pressed after autohighlight","suites":["Autosuggest with highlightFirstSuggestion={true}","inputProps.onChange"],"updatePoint":{"line":103,"column":97,"index":4190},"line":103,"code":"    it('should be called once with the right parameters when Enter is pressed after autohighlight', () => {\n      focusAndSetInputValue('p');\n      onChange.resetHistory();\n      clickEnter();\n      expect(onChange).to.have.been.calledOnce;\n      expect(onChange).to.be.calledWith(syntheticEventMatcher, {\n        newValue: 'Perl',\n        method: 'enter'\n      });\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Enter is pressed after autohighlight","suites":["Autosuggest with highlightFirstSuggestion={true}","onSuggestionSelected"],"updatePoint":{"line":115,"column":97,"index":4613},"line":115,"code":"    it('should be called once with the right parameters when Enter is pressed after autohighlight', () => {\n      focusAndSetInputValue('p');\n      onSuggestionSelected.resetHistory();\n      clickEnter();\n      expect(onSuggestionSelected).to.have.been.calledOnce;\n      expect(onSuggestionSelected).to.have.been.calledWithExactly(syntheticEventMatcher, {\n        suggestion: {\n          name: 'Perl',\n          year: 1987\n        },\n        suggestionValue: 'Perl',\n        suggestionIndex: 0,\n        sectionIndex: null,\n        method: 'enter'\n      });\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the highlighed suggestion when the first suggestion is autohighlighted","suites":["Autosuggest with highlightFirstSuggestion={true}","onSuggestionHighlighted"],"updatePoint":{"line":133,"column":105,"index":5238},"line":133,"code":"    it('should be called once with the highlighed suggestion when the first suggestion is autohighlighted', () => {\n      onSuggestionHighlighted.resetHistory();\n      focusAndSetInputValue('p');\n      expect(onSuggestionHighlighted).to.have.been.calledOnce;\n      expect(onSuggestionHighlighted).to.have.been.calledWithExactly({\n        suggestion: {\n          name: 'Perl',\n          year: 1987\n        }\n      });\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the new suggestion when typing more changes the autohighlighted suggestion","suites":["Autosuggest with highlightFirstSuggestion={true}","onSuggestionHighlighted"],"updatePoint":{"line":144,"column":109,"index":5667},"line":144,"code":"    it('should be called once with the new suggestion when typing more changes the autohighlighted suggestion', () => {\n      focusAndSetInputValue('c');\n      onSuggestionHighlighted.resetHistory();\n      focusAndSetInputValue('c+');\n      expect(onSuggestionHighlighted).to.have.been.calledOnce;\n      expect(onSuggestionHighlighted).to.have.been.calledWithExactly({\n        suggestion: {\n          name: 'C++',\n          year: 1983\n        }\n      });\n    });","file":"focus-first-suggestion/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should keep suggestions on select","suites":["Autosuggest with custom shouldKeepSuggestionsOnSelect","when keep opened for starts with `clo` suggestions"],"updatePoint":{"line":11,"column":41,"index":555},"line":11,"code":"    it('should keep suggestions on select', () => {\n      focusAndSetInputValue('clo');\n      clickSuggestion(0);\n      const suggestions = getSuggestions();\n      expect(suggestions.length).to.equal(1);\n    });","file":"keep-suggestions-on-select/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not suggestions on select","suites":["Autosuggest with custom shouldKeepSuggestionsOnSelect","when keep opened for starts with `clo` suggestions"],"updatePoint":{"line":17,"column":40,"index":766},"line":17,"code":"    it('should not suggestions on select', () => {\n      focusAndSetInputValue('php');\n      clickSuggestion(0);\n      const suggestions = getSuggestions();\n      expect(suggestions.length).to.equal(0);\n    });","file":"keep-suggestions-on-select/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once for every suggestion","suites":["Autosuggest with multiSection={true}","renderSuggestion"],"updatePoint":{"line":15,"column":50,"index":1039},"line":15,"code":"    it('should be called once for every suggestion', () => {\n      expect(renderSuggestion).to.have.callCount(14);\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with an empty query when input field is blank","suites":["Autosuggest with multiSection={true}","renderSuggestion"],"updatePoint":{"line":18,"column":70,"index":1182},"line":18,"code":"    it('should be called with an empty query when input field is blank', () => {\n      renderSuggestion.resetHistory();\n      clickDown();\n      expect(renderSuggestion.getCall(0).args).to.deep.equal([{\n        name: 'C',\n        year: 1972\n      }, {\n        query: '',\n        isHighlighted: true\n      }]);\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should trim the value before passing it to the query","suites":["Autosuggest with multiSection={true}","renderSuggestion"],"updatePoint":{"line":29,"column":60,"index":1490},"line":29,"code":"    it('should trim the value before passing it to the query', () => {\n      renderSuggestion.resetHistory();\n      setInputValue(' ');\n      clickDown();\n      expect(renderSuggestion.getCall(0).args).to.deep.equal([{\n        name: 'C',\n        year: 1972\n      }, {\n        query: '',\n        isHighlighted: true\n      }]);\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions input is empty and true is returned","suites":["Autosuggest with multiSection={true}","shouldRenderSuggestions"],"updatePoint":{"line":43,"column":67,"index":1883},"line":43,"code":"    it('should show suggestions input is empty and true is returned', () => {\n      focusInput();\n      expectSuggestions(['C', 'C#', 'C++', 'Clojure', 'Elm', 'Go', 'Haskell', 'Java', 'JavaScript', 'Perl', 'PHP', 'Python', 'Ruby', 'Scala']);\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right sectionIndex when suggestion is clicked","suites":["Autosuggest with multiSection={true}","onSuggestionSelected"],"updatePoint":{"line":53,"column":79,"index":2288},"line":53,"code":"    it('should be called with the right sectionIndex when suggestion is clicked', () => {\n      clickSuggestion(4);\n      expect(onSuggestionSelected).to.have.been.calledWith(syntheticEventMatcher, sinon.match({\n        sectionIndex: 1\n      }));\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right sectionIndex when Enter is pressed and suggestion is highlighted","suites":["Autosuggest with multiSection={true}","onSuggestionSelected"],"updatePoint":{"line":59,"column":104,"index":2568},"line":59,"code":"    it('should be called with the right sectionIndex when Enter is pressed and suggestion is highlighted', () => {\n      clickDown(6);\n      clickEnter();\n      expect(onSuggestionSelected).to.have.been.calledWith(syntheticEventMatcher, sinon.match({\n        sectionIndex: 2\n      }));\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the suggestion that becomes highlighted","suites":["Autosuggest with multiSection={true}","onSuggestionHighlighted"],"updatePoint":{"line":68,"column":74,"index":2884},"line":68,"code":"    it('should be called once with the suggestion that becomes highlighted', () => {\n      focusAndSetInputValue('c');\n      onSuggestionHighlighted.resetHistory();\n      clickDown();\n      expect(onSuggestionHighlighted).to.have.been.calledOnce;\n      expect(onSuggestionHighlighted).to.have.been.calledWithExactly({\n        suggestion: {\n          name: 'C',\n          year: 1972\n        }\n      });\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with null when there is no more highlighted suggestion","suites":["Autosuggest with multiSection={true}","onSuggestionHighlighted"],"updatePoint":{"line":80,"column":84,"index":3304},"line":80,"code":"    it('should be called once with null when there is no more highlighted suggestion', () => {\n      focusAndSetInputValue('c');\n      clickDown();\n      onSuggestionHighlighted.resetHistory();\n      clickUp();\n      expect(onSuggestionHighlighted).to.have.been.calledOnce;\n      expect(onSuggestionHighlighted).to.have.been.calledWithExactly({\n        suggestion: null\n      });\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when input gets focus and shouldRenderSuggestions returns true","suites":["Autosuggest with multiSection={true}","onSuggestionsFetchRequested"],"updatePoint":{"line":92,"column":118,"index":3782},"line":92,"code":"    it('should be called once with the right parameters when input gets focus and shouldRenderSuggestions returns true', () => {\n      onSuggestionsFetchRequested.resetHistory();\n      focusInput();\n      expect(onSuggestionsFetchRequested).to.have.been.calledOnce;\n      expect(onSuggestionsFetchRequested).to.have.been.calledWithExactly({\n        value: '',\n        reason: 'input-focused'\n      });\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Escape is pressed and suggestions are hidden and shouldRenderSuggestions returns true for empty value","suites":["Autosuggest with multiSection={true}","onSuggestionsFetchRequested"],"updatePoint":{"line":101,"column":162,"index":4236},"line":101,"code":"    it('should be called once with the right parameters when Escape is pressed and suggestions are hidden and shouldRenderSuggestions returns true for empty value', () => {\n      focusAndSetInputValue('jr');\n      onSuggestionsFetchRequested.resetHistory();\n      clickEscape();\n      expect(onSuggestionsFetchRequested).to.have.been.calledOnce;\n      expect(onSuggestionsFetchRequested).to.have.been.calledWithExactly({\n        value: '',\n        reason: 'escape-pressed'\n      });\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions","suites":["Autosuggest with multiSection={true}","when input is cleared after suggestion is clicked"],"updatePoint":{"line":117,"column":31,"index":4751},"line":117,"code":"    it('should show suggestions', () => {\n      clickClearButton();\n      expectSuggestions(['C', 'C#', 'C++', 'Clojure', 'Elm', 'Go', 'Haskell', 'Java', 'JavaScript', 'Perl', 'PHP', 'Python', 'Ruby', 'Scala']);\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right parameters","suites":["Autosuggest with multiSection={true}","renderSectionTitle"],"updatePoint":{"line":128,"column":50,"index":5155},"line":128,"code":"    it('should be called with the right parameters', () => {\n      expect(renderSectionTitle).to.have.been.calledWithExactly({\n        title: 'C',\n        languages: [{\n          name: 'C',\n          year: 1972\n        }, {\n          name: 'C#',\n          year: 2000\n        }, {\n          name: 'C++',\n          year: 1983\n        }, {\n          name: 'Clojure',\n          year: 2007\n        }]\n      });\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once per section","suites":["Autosuggest with multiSection={true}","renderSectionTitle"],"updatePoint":{"line":146,"column":41,"index":5560},"line":146,"code":"    it('should be called once per section', () => {\n      expect(renderSectionTitle).to.have.been.calledOnce;\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"return value should be used to render titles","suites":["Autosuggest with multiSection={true}","renderSectionTitle"],"updatePoint":{"line":149,"column":52,"index":5689},"line":149,"code":"    it('return value should be used to render titles', () => {\n      const firstTitle = getTitle(0);\n      expect(getInnerHTML(firstTitle)).to.equal('<strong>C</strong>');\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right parameters","suites":["Autosuggest with multiSection={true}","getSectionSuggestions"],"updatePoint":{"line":160,"column":50,"index":6038},"line":160,"code":"    it('should be called with the right parameters', () => {\n      expect(getSectionSuggestions).to.have.been.calledWithExactly({\n        title: 'J',\n        languages: [{\n          name: 'Java',\n          year: 1995\n        }, {\n          name: 'JavaScript',\n          year: 1995\n        }]\n      });\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once per section","suites":["Autosuggest with multiSection={true}","getSectionSuggestions"],"updatePoint":{"line":172,"column":41,"index":6339},"line":172,"code":"    it('should be called once per section', () => {\n      expect(getSectionSuggestions).to.have.been.calledOnce;\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should set the input class","suites":["Autosuggest with multiSection={true}","default theme"],"updatePoint":{"line":177,"column":34,"index":6495},"line":177,"code":"    it('should set the input class', () => {\n      expectInputAttribute('class', 'react-autosuggest__input');\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should add the open container class when suggestions are shown","suites":["Autosuggest with multiSection={true}","default theme"],"updatePoint":{"line":180,"column":70,"index":6649},"line":180,"code":"    it('should add the open container class when suggestions are shown', () => {\n      focusAndSetInputValue('c');\n      expectContainerAttribute('class', 'react-autosuggest__container react-autosuggest__container--open');\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should remove the open container class when suggestions are hidden","suites":["Autosuggest with multiSection={true}","default theme"],"updatePoint":{"line":184,"column":74,"index":6884},"line":184,"code":"    it('should remove the open container class when suggestions are hidden', () => {\n      focusAndSetInputValue('c');\n      clickEscape();\n      expectContainerAttribute('class', 'react-autosuggest__container');\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should set suggestions the container class","suites":["Autosuggest with multiSection={true}","default theme"],"updatePoint":{"line":189,"column":50,"index":7081},"line":189,"code":"    it('should set suggestions the container class', () => {\n      expect(getSuggestionsContainerAttribute('class')).to.equal('react-autosuggest__suggestions-container');\n      focusAndSetInputValue('e');\n      expect(getSuggestionsContainerAttribute('class')).to.equal('react-autosuggest__suggestions-container react-autosuggest__suggestions-container--open');\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should add the first suggestion class only to the first suggestion","suites":["Autosuggest with multiSection={true}","default theme"],"updatePoint":{"line":194,"column":74,"index":7475},"line":194,"code":"    it('should add the first suggestion class only to the first suggestion', () => {\n      focusAndSetInputValue('c');\n      expectSuggestionAttribute(0, 'class', 'react-autosuggest__suggestion react-autosuggest__suggestion--first');\n      expectSuggestionAttribute(1, 'class', 'react-autosuggest__suggestion');\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should add the highlighted suggestion class only to the highlighted suggestion","suites":["Autosuggest with multiSection={true}","default theme"],"updatePoint":{"line":199,"column":86,"index":7807},"line":199,"code":"    it('should add the highlighted suggestion class only to the highlighted suggestion', () => {\n      focusAndSetInputValue('c');\n      clickDown();\n      clickDown();\n      expectSuggestionAttribute(1, 'class', 'react-autosuggest__suggestion react-autosuggest__suggestion--highlighted');\n      expectSuggestionAttribute(2, 'class', 'react-autosuggest__suggestion');\n    });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion","suites":["Autosuggest with multiSection={true}","and highlightFirstSuggestion={true}","when typing and matches exist"],"updatePoint":{"line":218,"column":47,"index":8469},"line":218,"code":"      it('should highlight the first suggestion', () => {\n        expectHighlightedSuggestion('Perl');\n      });","file":"multi-section/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"id","suites":["Default Autosuggest","initially","should render an input and set its:"],"updatePoint":{"line":12,"column":12,"index":1335},"line":12,"code":"      it('id', () => {\n        expectInputAttribute('id', 'my-awesome-autosuggest');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"placeholder","suites":["Default Autosuggest","initially","should render an input and set its:"],"updatePoint":{"line":15,"column":21,"index":1439},"line":15,"code":"      it('placeholder', () => {\n        expectInputAttribute('placeholder', 'Type a programming language');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"type","suites":["Default Autosuggest","initially","should render an input and set its:"],"updatePoint":{"line":18,"column":14,"index":1550},"line":18,"code":"      it('type', () => {\n        expectInputAttribute('type', 'search');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"value","suites":["Default Autosuggest","initially","should render an input and set its:"],"updatePoint":{"line":21,"column":15,"index":1634},"line":21,"code":"      it('value', () => {\n        expectInputValue('');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not show suggestions","suites":["Default Autosuggest","initially","should render an input and set its:"],"updatePoint":{"line":25,"column":35,"index":1728},"line":25,"code":"    it('should not show suggestions', () => {\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should set the input reference","suites":["Default Autosuggest","initially","should render an input and set its:"],"updatePoint":{"line":28,"column":38,"index":1814},"line":28,"code":"    it('should set the input reference', () => {\n      expectInputReferenceToBeSet();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should let browser handle ArrowDown","suites":["Default Autosuggest","when input field is focused and empty"],"updatePoint":{"line":37,"column":43,"index":2051},"line":37,"code":"    it('should let browser handle ArrowDown', () => {\n      clickDown();\n      expectLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should let browser handle ArrowUp","suites":["Default Autosuggest","when input field is focused and empty"],"updatePoint":{"line":41,"column":41,"index":2169},"line":41,"code":"    it('should let browser handle ArrowUp', () => {\n      clickUp();\n      expectLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":50,"column":31,"index":2398},"line":50,"code":"    it('should show suggestions', () => {\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not highlight any suggestion","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":53,"column":43,"index":2512},"line":53,"code":"    it('should not highlight any suggestion', () => {\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions when Escape is pressed","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":56,"column":54,"index":2626},"line":56,"code":"    it('should hide suggestions when Escape is pressed', () => {\n      clearEvents();\n      clickEscape();\n      expectDontLetBrowserHandleKeyDown();\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not clear the input when Escape is pressed","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":62,"column":57,"index":2816},"line":62,"code":"    it('should not clear the input when Escape is pressed', () => {\n      clickEscape();\n      expectInputValue('p');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input when Escape is pressed again","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":66,"column":59,"index":2944},"line":66,"code":"    it('should clear the input when Escape is pressed again', () => {\n      clickEscape();\n      clickEscape();\n      expectInputValue('');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions when input is blurred","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":71,"column":53,"index":3086},"line":71,"code":"    it('should hide suggestions when input is blurred', () => {\n      blurInput();\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions when input is focused again","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":75,"column":59,"index":3212},"line":75,"code":"    it('should show suggestions when input is focused again', () => {\n      blurInput();\n      focusInput();\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should revert input value when Escape is pressed after Up/Down interaction","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":80,"column":82,"index":3404},"line":80,"code":"    it('should revert input value when Escape is pressed after Up/Down interaction', () => {\n      clickDown();\n      clickEscape();\n      expectInputValue('p');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should update input value when suggestion is clicked","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":85,"column":60,"index":3552},"line":85,"code":"    it('should update input value when suggestion is clicked', () => {\n      clickSuggestion(1);\n      expectInputValue('PHP');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight a suggestion when mouse enters it","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":89,"column":58,"index":3686},"line":89,"code":"    it('should highlight a suggestion when mouse enters it', () => {\n      mouseEnterSuggestion(2);\n      expectHighlightedSuggestion('Python');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not have highlighted suggestions when mouse leaves a suggestion","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":93,"column":78,"index":3859},"line":93,"code":"    it('should not have highlighted suggestions when mouse leaves a suggestion', () => {\n      mouseEnterSuggestion(2);\n      mouseLeaveSuggestion(2);\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should keep the focus on input when suggestions container is clicked","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":98,"column":76,"index":4057},"line":98,"code":"    it('should keep the focus on input when suggestions container is clicked', () => {\n      clickSuggestionsContainer();\n      expect(isInputFocused()).to.equal(true);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"shoud reset the highlighted suggestion when input value changes","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":102,"column":71,"index":4229},"line":102,"code":"    it('shoud reset the highlighted suggestion when input value changes', () => {\n      clickDown();\n      setInputValue('Per');\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not let browser handle ArrowDown","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":107,"column":47,"index":4383},"line":107,"code":"    it('should not let browser handle ArrowDown', () => {\n      clearEvents();\n      clickDown();\n      expectDontLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not let browser handle ArrowUp","suites":["Default Autosuggest","when typing and matches exist"],"updatePoint":{"line":112,"column":45,"index":4530},"line":112,"code":"    it('should not let browser handle ArrowUp', () => {\n      clearEvents();\n      clickUp();\n      expectDontLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not show suggestions","suites":["Default Autosuggest","when typing and matches do not exist"],"updatePoint":{"line":122,"column":35,"index":4795},"line":122,"code":"    it('should not show suggestions', () => {\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not highlight suggestions","suites":["Default Autosuggest","when typing and matches do not exist"],"updatePoint":{"line":125,"column":40,"index":4883},"line":125,"code":"    it('should not highlight suggestions', () => {\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input when Escape is pressed","suites":["Default Autosuggest","when typing and matches do not exist"],"updatePoint":{"line":128,"column":53,"index":4996},"line":128,"code":"    it('should clear the input when Escape is pressed', () => {\n      clickEscape();\n      expectInputValue('');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should let browser handle ArrowDown","suites":["Default Autosuggest","when typing and matches do not exist"],"updatePoint":{"line":132,"column":43,"index":5107},"line":132,"code":"    it('should let browser handle ArrowDown', () => {\n      clearEvents();\n      clickDown();\n      expectLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should let browser handle ArrowDown","suites":["Default Autosuggest","when typing and matches do not exist"],"updatePoint":{"line":137,"column":43,"index":5248},"line":137,"code":"    it('should let browser handle ArrowDown', () => {\n      clearEvents();\n      clickUp();\n      expectLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show the original input value","suites":["Default Autosuggest","when typing and matches exist, then mousing over first selection","when pressing up"],"updatePoint":{"line":152,"column":46,"index":5674},"line":152,"code":"      it('should show the original input value', () => {\n        expectInputValue('p');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show the original input value","suites":["Default Autosuggest","when typing and matches exist, then mousing over last selection","when pressing ArrowDown"],"updatePoint":{"line":166,"column":46,"index":6072},"line":166,"code":"      it('should show the original input value', () => {\n        expectInputValue('p');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions with no highlighted suggestion if they were hidden","suites":["Default Autosuggest","when pressing Down"],"updatePoint":{"line":175,"column":82,"index":6326},"line":175,"code":"    it('should show suggestions with no highlighted suggestion if they were hidden', () => {\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n      clearEvents();\n      clickEscape();\n      expectDontLetBrowserHandleKeyDown();\n      expectSuggestions([]);\n      clickDown();\n      expectDontLetBrowserHandleKeyDown();\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion","suites":["Default Autosuggest","when pressing Down"],"updatePoint":{"line":186,"column":45,"index":6711},"line":186,"code":"    it('should highlight the first suggestion', () => {\n      clickDown();\n      expectHighlightedSuggestion('Perl');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the next suggestion","suites":["Default Autosuggest","when pressing Down"],"updatePoint":{"line":190,"column":44,"index":6836},"line":190,"code":"    it('should highlight the next suggestion', () => {\n      clickDown(2);\n      expectHighlightedSuggestion('PHP');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not highlight any suggestion after reaching the last suggestion","suites":["Default Autosuggest","when pressing Down"],"updatePoint":{"line":194,"column":78,"index":6995},"line":194,"code":"    it('should not highlight any suggestion after reaching the last suggestion', () => {\n      clickDown(4);\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the first suggestion again","suites":["Default Autosuggest","when pressing Down"],"updatePoint":{"line":198,"column":51,"index":7126},"line":198,"code":"    it('should highlight the first suggestion again', () => {\n      clearEvents();\n      clickDown(5);\n      expectHighlightedSuggestion('Perl');\n      expectDontLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions with no highlighted suggestion if they were hidden","suites":["Default Autosuggest","when pressing Up"],"updatePoint":{"line":209,"column":82,"index":7464},"line":209,"code":"    it('should show suggestions with no highlighted suggestion if they were hidden', () => {\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n      clearEvents();\n      clickEscape();\n      expectDontLetBrowserHandleKeyDown();\n      expectSuggestions([]);\n      clickUp();\n      expectDontLetBrowserHandleKeyDown();\n      expectSuggestions(['Perl', 'PHP', 'Python']);\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the last suggestion","suites":["Default Autosuggest","when pressing Up"],"updatePoint":{"line":220,"column":44,"index":7846},"line":220,"code":"    it('should highlight the last suggestion', () => {\n      clickUp();\n      expectHighlightedSuggestion('Python');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the second last suggestion","suites":["Default Autosuggest","when pressing Up"],"updatePoint":{"line":224,"column":51,"index":7978},"line":224,"code":"    it('should highlight the second last suggestion', () => {\n      clickUp(2);\n      expectHighlightedSuggestion('PHP');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not highlight any suggestion after reaching the first suggestion","suites":["Default Autosuggest","when pressing Up"],"updatePoint":{"line":228,"column":79,"index":8136},"line":228,"code":"    it('should not highlight any suggestion after reaching the first suggestion', () => {\n      clickUp(4);\n      expectHighlightedSuggestion(null);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should highlight the last suggestion again","suites":["Default Autosuggest","when pressing Up"],"updatePoint":{"line":232,"column":50,"index":8264},"line":232,"code":"    it('should highlight the last suggestion again', () => {\n      clearEvents();\n      clickUp(5);\n      expectHighlightedSuggestion('Python');\n      expectDontLetBrowserHandleKeyDown();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions if there is a highlighted suggestion","suites":["Default Autosuggest","when pressing Enter"],"updatePoint":{"line":243,"column":68,"index":8591},"line":243,"code":"    it('should hide suggestions if there is a highlighted suggestion', () => {\n      clickDown();\n      clickEnter();\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions if there is no highlighted suggestion","suites":["Default Autosuggest","when pressing Enter"],"updatePoint":{"line":248,"column":69,"index":8747},"line":248,"code":"    it('should hide suggestions if there is no highlighted suggestion', () => {\n      clickEnter();\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input if suggestions are hidden and never been shown before","suites":["Default Autosuggest","when pressing Escape"],"updatePoint":{"line":254,"column":84,"index":8948},"line":254,"code":"    it('should clear the input if suggestions are hidden and never been shown before', () => {\n      focusAndSetInputValue('z');\n      clickEscape();\n      expectInputValue('');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear the input if suggestions are hidden but were shown before","suites":["Default Autosuggest","when pressing Escape"],"updatePoint":{"line":259,"column":78,"index":9128},"line":259,"code":"    it('should clear the input if suggestions are hidden but were shown before', () => {\n      focusAndSetInputValue('p');\n      focusAndSetInputValue('pz');\n      clickEscape();\n      expectInputValue('');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions","suites":["Default Autosuggest","when suggestion is clicked"],"updatePoint":{"line":271,"column":31,"index":9442},"line":271,"code":"    it('should hide suggestions', () => {\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should focus on input if focusInputOnSuggestionClick is true","suites":["Default Autosuggest","when suggestion is clicked"],"updatePoint":{"line":274,"column":68,"index":9558},"line":274,"code":"    it('should focus on input if focusInputOnSuggestionClick is true', () => {\n      expect(isInputFocused()).to.equal(true);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should keep the focus on input when suggestion is dragged","suites":["Default Autosuggest","when suggestion is dragged"],"updatePoint":{"line":286,"column":65,"index":9983},"line":286,"code":"    it('should keep the focus on input when suggestion is dragged', () => {\n      dragSuggestionOut(1);\n      expect(isInputFocused()).to.equal(true);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should clear suggestions if input blurred after suggestion drag","suites":["Default Autosuggest","when suggestion is dragged"],"updatePoint":{"line":290,"column":71,"index":10148},"line":290,"code":"    it('should clear suggestions if input blurred after suggestion drag', () => {\n      dragSuggestionOut(1);\n      blurInput();\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should keep the focus on input when suggestion is dragged on touch devices","suites":["Default Autosuggest","when suggestion is dragged"],"updatePoint":{"line":295,"column":82,"index":10325},"line":295,"code":"    it('should keep the focus on input when suggestion is dragged on touch devices', () => {\n      dragSuggestionOutTouch(1);\n      expect(isInputFocused()).to.equal(true);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should select a suggestion if it's dragged and mouse enters back","suites":["Default Autosuggest","when suggestion is dragged"],"updatePoint":{"line":299,"column":72,"index":10496},"line":299,"code":"    it(\"should select a suggestion if it's dragged and mouse enters back\", () => {\n      dragSuggestionOutAndIn(1);\n      expectInputValue('PHP');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not focus input on document mouse up","suites":["Default Autosuggest","when suggestion is dragged"],"updatePoint":{"line":303,"column":51,"index":10630},"line":303,"code":"    it('should not focus input on document mouse up', () => {\n      mouseUpDocument();\n      expect(isInputFocused()).to.equal(false);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Up is pressed","suites":["Default Autosuggest","getSuggestionValue"],"updatePoint":{"line":313,"column":74,"index":10949},"line":313,"code":"    it('should be called once with the right parameters when Up is pressed', () => {\n      clickUp();\n      expect(getSuggestionValue).to.have.been.calledOnce;\n      expect(getSuggestionValue).to.have.been.calledWithExactly({\n        name: 'Ruby',\n        year: 1995\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Down is pressed","suites":["Default Autosuggest","getSuggestionValue"],"updatePoint":{"line":321,"column":76,"index":11236},"line":321,"code":"    it('should be called once with the right parameters when Down is pressed', () => {\n      clickDown();\n      expect(getSuggestionValue).to.have.been.calledOnce;\n      expect(getSuggestionValue).to.have.been.calledWithExactly({\n        name: 'Ruby',\n        year: 1995\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when suggestion is clicked","suites":["Default Autosuggest","getSuggestionValue"],"updatePoint":{"line":329,"column":82,"index":11531},"line":329,"code":"    it('should be called once with the right parameters when suggestion is clicked', () => {\n      clickSuggestion(0);\n      expect(getSuggestionValue).to.have.been.calledOnce;\n      expect(getSuggestionValue).to.have.been.calledWithExactly({\n        name: 'Ruby',\n        year: 1995\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when input is focused","suites":["Default Autosuggest","getSuggestionValue"],"updatePoint":{"line":337,"column":50,"index":11801},"line":337,"code":"    it('should not be called when input is focused', () => {\n      clickDown();\n      getSuggestionValue.resetHistory();\n      clickUp();\n      expect(getSuggestionValue).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right parameters","suites":["Default Autosuggest","renderSuggestion"],"updatePoint":{"line":349,"column":50,"index":12154},"line":349,"code":"    it('should be called with the right parameters', () => {\n      expect(renderSuggestion).to.have.been.calledWithExactly({\n        name: 'Ruby',\n        year: 1995\n      }, {\n        query: 'r',\n        isHighlighted: false\n      });\n      renderSuggestion.resetHistory();\n      clickDown();\n      expect(renderSuggestion).to.have.been.calledWithExactly({\n        name: 'Ruby',\n        year: 1995\n      }, {\n        query: 'r',\n        isHighlighted: true\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once per suggestion","suites":["Default Autosuggest","renderSuggestion"],"updatePoint":{"line":367,"column":44,"index":12624},"line":367,"code":"    it('should be called once per suggestion', () => {\n      expect(renderSuggestion).to.have.been.calledOnce;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called twice when the highlighted suggestion is changed","suites":["Default Autosuggest","renderSuggestion"],"updatePoint":{"line":370,"column":73,"index":12772},"line":370,"code":"    it('should be called twice when the highlighted suggestion is changed', () => {\n      focusAndSetInputValue('c');\n      clickDown();\n      renderSuggestion.resetHistory();\n      clickDown();\n      expect(renderSuggestion).to.have.callCount(2);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"return value should be used to render suggestions","suites":["Default Autosuggest","renderSuggestion"],"updatePoint":{"line":377,"column":57,"index":13012},"line":377,"code":"    it('return value should be used to render suggestions', () => {\n      expect(getInnerHTML(getSuggestion(0))).to.equal('<strong>R</strong><span>uby</span>');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not change the query when mouse leaves a suggestion","suites":["Default Autosuggest","renderSuggestion"],"updatePoint":{"line":380,"column":66,"index":13190},"line":380,"code":"    it('should not change the query when mouse leaves a suggestion', () => {\n      clickDown();\n      mouseEnterSuggestion(0);\n      mouseLeaveSuggestion(0);\n      expect(getInnerHTML(getSuggestion(0))).to.equal('<strong>R</strong><span>uby</span>');\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when user types","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":392,"column":71,"index":13598},"line":392,"code":"    it('should be called once with the right parameters when user types', () => {\n      focusAndSetInputValue('c+');\n      expect(onChange).to.have.been.calledOnce;\n      expect(onChange).to.be.calledWithExactly(syntheticEventMatcher, {\n        newValue: 'c+',\n        method: 'type'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when pressing Down highlight a suggestion which differs from input value","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":400,"column":128,"index":13957},"line":400,"code":"    it('should be called once with the right parameters when pressing Down highlight a suggestion which differs from input value', () => {\n      clickDown();\n      expect(onChange).to.have.been.calledOnce;\n      expect(onChange).to.be.calledWithExactly(syntheticEventMatcher, {\n        newValue: 'C',\n        method: 'down'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when pressing Up highlight a suggestion which differs from input value","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":408,"column":126,"index":14297},"line":408,"code":"    it('should be called once with the right parameters when pressing Up highlight a suggestion which differs from input value', () => {\n      clickUp();\n      expect(onChange).to.have.been.calledOnce;\n      expect(onChange).to.be.calledWithExactly(syntheticEventMatcher, {\n        newValue: 'Clojure',\n        method: 'up'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Escape is pressed and suggestions are hidden","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":416,"column":105,"index":14618},"line":416,"code":"    it('should be called once with the right parameters when Escape is pressed and suggestions are hidden', () => {\n      clickEscape();\n      clickEscape();\n      expect(onChange).to.have.been.calledOnce;\n      expect(onChange).to.be.calledWithExactly(syntheticEventMatcher, {\n        newValue: '',\n        method: 'escape'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when suggestion which differs from input value is clicked","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":425,"column":113,"index":14969},"line":425,"code":"    it('should be called once with the right parameters when suggestion which differs from input value is clicked', () => {\n      clickSuggestion(2);\n      expect(onChange).to.have.been.calledOnce;\n      expect(onChange).to.be.calledWithExactly(syntheticEventMatcher, {\n        newValue: 'C++',\n        method: 'click'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Down is pressed and suggestions are hidden","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":433,"column":76,"index":15269},"line":433,"code":"    it('should not be called when Down is pressed and suggestions are hidden', () => {\n      clickEscape();\n      clickDown();\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when pressing Down highlight a suggestion which value equals to input value","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":438,"column":104,"index":15480},"line":438,"code":"    it('should not be called when pressing Down highlight a suggestion which value equals to input value', () => {\n      focusAndSetInputValue('C++');\n      onChange.resetHistory();\n      clickDown();\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Up is pressed and suggestions are hidden","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":444,"column":74,"index":15707},"line":444,"code":"    it('should not be called when Up is pressed and suggestions are hidden', () => {\n      clickEscape();\n      clickUp();\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when pressing Up highlight a suggestion which value equals to input value","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":449,"column":102,"index":15914},"line":449,"code":"    it('should not be called when pressing Up highlight a suggestion which value equals to input value', () => {\n      focusAndSetInputValue('C++');\n      onChange.resetHistory();\n      clickUp();\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Escape is pressed and suggestions are shown","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":455,"column":77,"index":16142},"line":455,"code":"    it('should not be called when Escape is pressed and suggestions are shown', () => {\n      clickEscape();\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Escape is pressed, suggestions are hidden, and input is empty","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":459,"column":95,"index":16325},"line":459,"code":"    it('should not be called when Escape is pressed, suggestions are hidden, and input is empty', () => {\n      focusAndSetInputValue('');\n      onChange.resetHistory();\n      clickEscape();\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when suggestion which value equals to input value is clicked","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":465,"column":89,"index":16566},"line":465,"code":"    it('should not be called when suggestion which value equals to input value is clicked', () => {\n      focusAndSetInputValue('C++');\n      onChange.resetHistory();\n      clickSuggestion(0);\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Enter is pressed and input value has not changed","suites":["Default Autosuggest","inputProps.onChange"],"updatePoint":{"line":471,"column":82,"index":16808},"line":471,"code":"    it('should not be called when Enter is pressed and input value has not changed', () => {\n      clickDown();\n      onChange.resetHistory();\n      clickEnter();\n      expect(onChange).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not call onFocus when suggestions container is clicked","suites":["Default Autosuggest","inputProps.onFocus"],"updatePoint":{"line":483,"column":69,"index":17156},"line":483,"code":"    it('should not call onFocus when suggestions container is clicked', () => {\n      clickSuggestionsContainer();\n      expect(onFocus).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not call onBlur when suggestions container is clicked","suites":["Default Autosuggest","inputProps.onBlur"],"updatePoint":{"line":493,"column":68,"index":17465},"line":493,"code":"    it('should not call onBlur when suggestions container is clicked', () => {\n      clickSuggestionsContainer();\n      expect(onBlur).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right parameters during input","suites":["Default Autosuggest","shouldRenderSuggestions"],"updatePoint":{"line":502,"column":63,"index":17757},"line":502,"code":"    it('should be called with the right parameters during input', () => {\n      focusAndSetInputValue('e');\n      expect(shouldRenderSuggestions.callCount).to.equal(4);\n      expect(shouldRenderSuggestions.getCall(0).args).to.deep.equal(['', 'input-focused']);\n      expect(shouldRenderSuggestions.getCall(1).args).to.deep.equal(['e', 'input-changed']);\n      expect(shouldRenderSuggestions.getCall(2).args).to.deep.equal(['e', 'suggestions-updated']);\n      expect(shouldRenderSuggestions.getCall(3).args).to.deep.equal(['e', 'render']);\n      blurInput();\n      expect(shouldRenderSuggestions.callCount).to.equal(5);\n      expect(shouldRenderSuggestions.getCall(4).args).to.deep.equal(['e', 'input-blurred']);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called with the right parameters when revealing/hiding suggestions","suites":["Default Autosuggest","shouldRenderSuggestions"],"updatePoint":{"line":513,"column":84,"index":18498},"line":513,"code":"    it('should be called with the right parameters when revealing/hiding suggestions', () => {\n      focusInput();\n      expect(shouldRenderSuggestions.callCount).to.equal(1);\n      expect(shouldRenderSuggestions.getCall(0).args).to.deep.equal(['', 'input-focused']);\n      clickUp();\n      expect(shouldRenderSuggestions.callCount).to.equal(2);\n      expect(shouldRenderSuggestions.getCall(1).args).to.deep.equal(['', 'suggestions-revealed']);\n      clickEscape();\n      expect(shouldRenderSuggestions.callCount).to.equal(3);\n      expect(shouldRenderSuggestions.getCall(2).args).to.deep.equal(['', 'escape-pressed']);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should show suggestions when true is returned","suites":["Default Autosuggest","shouldRenderSuggestions"],"updatePoint":{"line":524,"column":53,"index":19095},"line":524,"code":"    it('should show suggestions when true is returned', () => {\n      focusAndSetInputValue('e');\n      expectSuggestions(['Elm']);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should hide suggestions when false is returned","suites":["Default Autosuggest","shouldRenderSuggestions"],"updatePoint":{"line":528,"column":54,"index":19236},"line":528,"code":"    it('should hide suggestions when false is returned', () => {\n      focusAndSetInputValue(' e');\n      expectSuggestions([]);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be able to show suggestions only in certain cases","suites":["Default Autosuggest","shouldRenderSuggestions","when ignoring certain reasons"],"updatePoint":{"line":543,"column":66,"index":19807},"line":543,"code":"      it('should be able to show suggestions only in certain cases', () => {\n        focusInput();\n        expectSuggestions([]);\n        clickUp();\n        expectSuggestions(['C', 'C#', 'C++', 'Clojure', 'Elm', 'Go', 'Haskell', 'Java', 'JavaScript', 'Perl', 'PHP', 'Python', 'Ruby', 'Scala']);\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when suggestion is clicked","suites":["Default Autosuggest","onSuggestionSelected"],"updatePoint":{"line":556,"column":82,"index":20293},"line":556,"code":"    it('should be called once with the right parameters when suggestion is clicked', () => {\n      clickSuggestion(1);\n      expect(onSuggestionSelected).to.have.been.calledOnce;\n      expect(onSuggestionSelected).to.have.been.calledWithExactly(syntheticEventMatcher, {\n        suggestion: {\n          name: 'JavaScript',\n          year: 1995\n        },\n        suggestionValue: 'JavaScript',\n        suggestionIndex: 1,\n        sectionIndex: null,\n        method: 'click'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Enter is pressed and suggestion is highlighted","suites":["Default Autosuggest","onSuggestionSelected"],"updatePoint":{"line":570,"column":107,"index":20809},"line":570,"code":"    it('should be called once with the right parameters when Enter is pressed and suggestion is highlighted', () => {\n      clickDown();\n      clickEnter();\n      expect(onSuggestionSelected).to.have.been.calledOnce;\n      expect(onSuggestionSelected).to.have.been.calledWithExactly(syntheticEventMatcher, {\n        suggestion: {\n          name: 'Java',\n          year: 1995\n        },\n        suggestionValue: 'Java',\n        suggestionIndex: 0,\n        sectionIndex: null,\n        method: 'enter'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Enter is pressed and there is no highlighted suggestion","suites":["Default Autosuggest","onSuggestionSelected"],"updatePoint":{"line":585,"column":89,"index":21308},"line":585,"code":"    it('should not be called when Enter is pressed and there is no highlighted suggestion', () => {\n      clickEnter();\n      expect(onSuggestionSelected).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Enter is pressed and there is no highlighted suggestion after Up/Down interaction","suites":["Default Autosuggest","onSuggestionSelected"],"updatePoint":{"line":589,"column":115,"index":21522},"line":589,"code":"    it('should not be called when Enter is pressed and there is no highlighted suggestion after Up/Down interaction', () => {\n      clickDown();\n      clickDown();\n      clickDown();\n      clickEnter();\n      expect(onSuggestionSelected).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called after inputProps.onChange when suggestion is clicked","suites":["Default Autosuggest","onSuggestionSelected"],"updatePoint":{"line":596,"column":77,"index":21755},"line":596,"code":"    it('should be called after inputProps.onChange when suggestion is clicked', () => {\n      onChange.resetHistory();\n      clearEvents();\n      clickSuggestion(1);\n      expect(getEvents().filter(event => event === 'onChange' || event === 'onSuggestionSelected')).to.deep.equal(['onChange', 'onSuggestionSelected']);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the highlighted suggestion when mouse enters a suggestion","suites":["Default Autosuggest","onSuggestionHighlighted"],"updatePoint":{"line":608,"column":92,"index":22260},"line":608,"code":"    it('should be called once with the highlighted suggestion when mouse enters a suggestion', () => {\n      mouseEnterSuggestion(0);\n      expect(onSuggestionHighlighted).to.have.been.calledOnce;\n      expect(onSuggestionHighlighted).to.have.been.calledWithExactly({\n        suggestion: {\n          name: 'Java',\n          year: 1995\n        }\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with null when mouse leaves a suggestion and there is no more highlighted suggestion","suites":["Default Autosuggest","onSuggestionHighlighted"],"updatePoint":{"line":618,"column":114,"index":22645},"line":618,"code":"    it('should be called once with null when mouse leaves a suggestion and there is no more highlighted suggestion', () => {\n      mouseEnterSuggestion(0);\n      onSuggestionHighlighted.resetHistory();\n      mouseLeaveSuggestion(0);\n      expect(onSuggestionHighlighted).to.have.been.calledOnce;\n      expect(onSuggestionHighlighted).to.have.been.calledWithExactly({\n        suggestion: null\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when user types","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":629,"column":71,"index":23068},"line":629,"code":"    it('should be called once with the right parameters when user types', () => {\n      focusInput();\n      onSuggestionsFetchRequested.resetHistory();\n      setInputValue('j');\n      expect(onSuggestionsFetchRequested).to.have.been.calledOnce;\n      expect(onSuggestionsFetchRequested).to.have.been.calledWithExactly({\n        value: 'j',\n        reason: 'input-changed'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once with the right parameters when Up is pressed to reveal suggestions","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":639,"column":96,"index":23483},"line":639,"code":"    it('should be called once with the right parameters when Up is pressed to reveal suggestions', () => {\n      focusAndSetInputValue('j');\n      clickSuggestion(1);\n      onSuggestionsFetchRequested.resetHistory();\n      clickDown();\n      expect(onSuggestionsFetchRequested).to.have.been.calledOnce;\n      expect(onSuggestionsFetchRequested).to.have.been.calledWithExactly({\n        value: 'JavaScript',\n        reason: 'suggestions-revealed'\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when input gets focus and shouldRenderSuggestions returns false","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":650,"column":92,"index":23943},"line":650,"code":"    it('should not be called when input gets focus and shouldRenderSuggestions returns false', () => {\n      onSuggestionsFetchRequested.resetHistory();\n      focusInput();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when user types and shouldRenderSuggestions returns false","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":655,"column":86,"index":24185},"line":655,"code":"    it('should not be called when user types and shouldRenderSuggestions returns false', () => {\n      focusInput();\n      onSuggestionsFetchRequested.resetHistory();\n      setInputValue(' ');\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Down is pressed to highlight the next suggestion","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":661,"column":82,"index":24449},"line":661,"code":"    it('should not be called when Down is pressed to highlight the next suggestion', () => {\n      focusAndSetInputValue('j');\n      onSuggestionsFetchRequested.resetHistory();\n      clickDown();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Up is pressed to highlight the previous suggestion","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":667,"column":84,"index":24722},"line":667,"code":"    it('should not be called when Up is pressed to highlight the previous suggestion', () => {\n      focusAndSetInputValue('j');\n      onSuggestionsFetchRequested.resetHistory();\n      clickUp();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when input is blurred, user interacted with Up/Down, and the value before Up/Down is not equal to current input value","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":673,"column":146,"index":25055},"line":673,"code":"    it('should not be called when input is blurred, user interacted with Up/Down, and the value before Up/Down is not equal to current input value', () => {\n      focusAndSetInputValue('j');\n      clickDown();\n      onSuggestionsFetchRequested.resetHistory();\n      blurInput();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Escape is pressed and suggestions are hidden and shouldRenderSuggestions returns false for empty value","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":680,"column":136,"index":25399},"line":680,"code":"    it('should not be called when Escape is pressed and suggestions are hidden and shouldRenderSuggestions returns false for empty value', () => {\n      focusAndSetInputValue('jr');\n      onSuggestionsFetchRequested.resetHistory();\n      clickEscape();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Enter is pressed and there is no highlighted suggestion","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":686,"column":89,"index":25680},"line":686,"code":"    it('should not be called when Enter is pressed and there is no highlighted suggestion', () => {\n      focusAndSetInputValue('j');\n      onSuggestionsFetchRequested.resetHistory();\n      clickEnter();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Enter is pressed and there is no highlighted suggestion after Up/Down interaction","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":692,"column":115,"index":25985},"line":692,"code":"    it('should not be called when Enter is pressed and there is no highlighted suggestion after Up/Down interaction', () => {\n      focusAndSetInputValue('j');\n      onSuggestionsFetchRequested.resetHistory();\n      clickDown();\n      clickDown();\n      clickDown();\n      clickEnter();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when input is blurred and user did not interact with Up/Down","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":701,"column":89,"index":26321},"line":701,"code":"    it('should not be called when input is blurred and user did not interact with Up/Down', () => {\n      focusAndSetInputValue('j');\n      onSuggestionsFetchRequested.resetHistory();\n      blurInput();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when input is blurred, user interacted with Up/Down, but the value before Up/Down is equal to current input value","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":707,"column":142,"index":26652},"line":707,"code":"    it('should not be called when input is blurred, user interacted with Up/Down, but the value before Up/Down is equal to current input value', () => {\n      focusAndSetInputValue('Java');\n      clickDown();\n      onSuggestionsFetchRequested.resetHistory();\n      blurInput();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not be called when Escape is pressed to close suggestions","suites":["Default Autosuggest","onSuggestionsFetchRequested"],"updatePoint":{"line":714,"column":72,"index":26935},"line":714,"code":"    it('should not be called when Escape is pressed to close suggestions', () => {\n      focusAndSetInputValue('j');\n      onSuggestionsFetchRequested.resetHistory();\n      clickEscape();\n      expect(onSuggestionsFetchRequested).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once when input is blurred","suites":["Default Autosuggest","onSuggestionsClearRequested"],"updatePoint":{"line":722,"column":51,"index":27233},"line":722,"code":"    it('should be called once when input is blurred', () => {\n      focusAndSetInputValue('p');\n      onSuggestionsClearRequested.resetHistory();\n      blurInput();\n      expect(onSuggestionsClearRequested).to.have.been.calledOnce;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once when suggestion is clicked","suites":["Default Autosuggest","onSuggestionsClearRequested"],"updatePoint":{"line":728,"column":56,"index":27478},"line":728,"code":"    it('should be called once when suggestion is clicked', () => {\n      focusAndSetInputValue('p');\n      onSuggestionsClearRequested.resetHistory();\n      clickSuggestion(1);\n      expect(onSuggestionsClearRequested).to.have.been.calledOnce;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once when shouldRenderSuggestions returns false","suites":["Default Autosuggest","onSuggestionsClearRequested"],"updatePoint":{"line":734,"column":72,"index":27746},"line":734,"code":"    it('should be called once when shouldRenderSuggestions returns false', () => {\n      focusInput();\n      onSuggestionsClearRequested.resetHistory();\n      setInputValue(' ');\n      expect(onSuggestionsClearRequested).to.have.been.calledOnce;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should be called once when Escape is pressed to close suggestions","suites":["Default Autosuggest","onSuggestionsClearRequested"],"updatePoint":{"line":740,"column":73,"index":28001},"line":740,"code":"    it('should be called once when Escape is pressed to close suggestions', () => {\n      focusAndSetInputValue('p');\n      onSuggestionsClearRequested.resetHistory();\n      clickEscape();\n      expect(onSuggestionsClearRequested).to.have.been.calledOnce;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should keep the focus on input when suggestion is clicked","suites":["Default Autosuggest","when focusInputOnSuggestionClick is true"],"updatePoint":{"line":752,"column":65,"index":28420},"line":752,"code":"    it('should keep the focus on input when suggestion is clicked', () => {\n      clickSuggestion(1);\n      expect(isInputFocused()).to.equal(true);\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not call onBlur when suggestion is clicked","suites":["Default Autosuggest","when focusInputOnSuggestionClick is true"],"updatePoint":{"line":756,"column":57,"index":28569},"line":756,"code":"    it('should not call onBlur when suggestion is clicked', () => {\n      clickSuggestion(1);\n      expect(onBlur).not.to.have.been.called;\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should call onBlur once with the right parameters when input is blurred","suites":["Default Autosuggest","when focusInputOnSuggestionClick is true"],"updatePoint":{"line":760,"column":79,"index":28739},"line":760,"code":"    it('should call onBlur once with the right parameters when input is blurred', () => {\n      blurInput();\n      expect(onBlur).to.have.been.calledOnce;\n      expect(onBlur).to.have.been.calledWithExactly(syntheticEventMatcher, {\n        highlightedSuggestion: null\n      });\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"role to \"combobox\"","suites":["Default Autosuggest","aria attributes","initially","should set input container's"],"updatePoint":{"line":771,"column":30,"index":29109},"line":771,"code":"        it('role to \"combobox\"', () => {\n          expectContainerAttribute('role', 'combobox');\n        });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"aria-expanded to \"false\"","suites":["Default Autosuggest","aria attributes","initially","should set input container's"],"updatePoint":{"line":774,"column":36,"index":29224},"line":774,"code":"        it('aria-expanded to \"false\"', () => {\n          expectContainerAttribute('aria-expanded', 'false');\n        });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"aria-owns","suites":["Default Autosuggest","aria attributes","initially","should set input container's"],"updatePoint":{"line":777,"column":21,"index":29330},"line":777,"code":"        it('aria-owns', () => {\n          expectContainerAttribute('aria-owns', 'react-autowhatever-1');\n        });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"aria-autocomplete to \"list\"","suites":["Default Autosuggest","aria attributes","initially","should set input's"],"updatePoint":{"line":782,"column":39,"index":29520},"line":782,"code":"        it('aria-autocomplete to \"list\"', () => {\n          expectInputAttribute('aria-autocomplete', 'list');\n        });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"aria-activedescendant","suites":["Default Autosuggest","aria attributes","initially","should not set input's"],"updatePoint":{"line":787,"column":33,"index":29696},"line":787,"code":"        it('aria-activedescendant', () => {\n          expectInputAttribute('aria-activedescendant', null);\n        });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"input container's aria-expanded should be \"true\"","suites":["Default Autosuggest","aria attributes","when suggestions are shown"],"updatePoint":{"line":796,"column":59,"index":29981},"line":796,"code":"      it('input container\\'s aria-expanded should be \"true\"', () => {\n        expectContainerAttribute('aria-expanded', 'true');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"input container's aria-owns should be equal to suggestions container id","suites":["Default Autosuggest","aria attributes","when suggestions are shown"],"updatePoint":{"line":799,"column":81,"index":30142},"line":799,"code":"      it(\"input container's aria-owns should be equal to suggestions container id\", () => {\n        expectContainerAttribute('aria-owns', getSuggestionsContainerAttribute('id'));\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"input's aria-activedescendant should be equal to the highlighted suggestion id when using keyboard","suites":["Default Autosuggest","aria attributes","when suggestions are shown"],"updatePoint":{"line":802,"column":108,"index":30358},"line":802,"code":"      it(\"input's aria-activedescendant should be equal to the highlighted suggestion id when using keyboard\", () => {\n        clickDown();\n        expectInputAttribute('aria-activedescendant', getSuggestion(0).id);\n        clickDown();\n        expectInputAttribute('aria-activedescendant', getSuggestion(1).id);\n        clickDown();\n        expectInputAttribute('aria-activedescendant', null);\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"input's aria-activedescendant should be equal to the highlighted suggestion id when using mouse","suites":["Default Autosuggest","aria attributes","when suggestions are shown"],"updatePoint":{"line":810,"column":105,"index":30760},"line":810,"code":"      it(\"input's aria-activedescendant should be equal to the highlighted suggestion id when using mouse\", () => {\n        mouseEnterSuggestion(0);\n        expectInputAttribute('aria-activedescendant', getSuggestion(0).id);\n        mouseLeaveSuggestion(0);\n        expectInputAttribute('aria-activedescendant', null);\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"suggestions list role should be \"listbox\"","suites":["Default Autosuggest","aria attributes","when suggestions are shown"],"updatePoint":{"line":816,"column":51,"index":31035},"line":816,"code":"      it('suggestions list role should be \"listbox\"', () => {\n        expect(getSuggestionsList().getAttribute('role')).to.equal('listbox');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"suggestions' role should be \"option\"","suites":["Default Autosuggest","aria attributes","when suggestions are shown"],"updatePoint":{"line":819,"column":47,"index":31182},"line":819,"code":"      it('suggestions\\' role should be \"option\"', () => {\n        expect(getSuggestion(0).getAttribute('role')).to.equal('option');\n        expect(getSuggestion(1).getAttribute('role')).to.equal('option');\n      });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should not throw","suites":["Default Autosuggest","on unmount"],"updatePoint":{"line":826,"column":24,"index":31422},"line":826,"code":"    it('should not throw', () => {\n      // pretty dump test since we can't check event listeners on document directly\n      // at least we know it doesn't throw on unmount\n      expect(unmountApp).to.not.throw();\n    });","file":"plain-list/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should set input's id","suites":["Autosuggest with renderInputComponent","initially"],"updatePoint":{"line":10,"column":29,"index":450},"line":10,"code":"    it(\"should set input's id\", () => {\n      expectInputAttribute('id', 'my-custom-input');\n    });","file":"render-input-component/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should set the input reference","suites":["Autosuggest with renderInputComponent","initially"],"updatePoint":{"line":13,"column":38,"index":560},"line":13,"code":"    it('should set the input reference', () => {\n      expectInputReferenceToBeSet();\n    });","file":"render-input-component/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should render whatever renderSuggestionsContainer returns","suites":["Autosuggest with renderSuggestionsContainer"],"updatePoint":{"line":12,"column":63,"index":632},"line":12,"code":"  it('should render whatever renderSuggestionsContainer returns', () => {\n    expect(getElementWithClass('my-suggestions-container-footer')).not.to.equal(null);\n    expect(getInnerHTML(getElementWithClass('my-query'))).to.equal('c');\n  });","file":"render-suggestions-container/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"should call renderSuggestionsContainer once with the right parameters","suites":["Autosuggest with renderSuggestionsContainer"],"updatePoint":{"line":16,"column":75,"index":884},"line":16,"code":"  it('should call renderSuggestionsContainer once with the right parameters', () => {\n    expect(renderSuggestionsContainer).to.have.been.calledOnce;\n    expect(renderSuggestionsContainer).to.be.calledWith({\n      containerProps: containerPropsMatcher,\n      children: childrenMatcher,\n      query: 'c'\n    });\n  });","file":"render-suggestions-container/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"inserts a newline if you press enter without selecting a suggestion","suites":["Autosuggest with textarea"],"updatePoint":{"line":12,"column":73,"index":650},"line":12,"code":"  it(\"inserts a newline if you press enter without selecting a suggestion\", () => {\n    clickEnter();\n    expectInputValue('p');\n    expect(onSuggestionSelected).not.to.have.been.called;\n    expectLetBrowserHandleKeyDown();\n  });","file":"textarea/AutosuggestApp.test.js","skipped":false,"dir":"test"},{"name":"doesn't insert a newline if you select a suggestion with enter","suites":["Autosuggest with textarea"],"updatePoint":{"line":18,"column":68,"index":875},"line":18,"code":"  it(\"doesn't insert a newline if you select a suggestion with enter\", () => {\n    clickDown();\n    clearEvents();\n    clickEnter();\n    expectInputValue('Perl');\n    expect(onSuggestionSelected).to.have.been.calledOnce;\n    expectDontLetBrowserHandleKeyDown();\n  });","file":"textarea/AutosuggestApp.test.js","skipped":false,"dir":"test"}]}